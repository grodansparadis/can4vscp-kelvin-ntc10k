

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar 24 15:47:14 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000B00                     __psmallconst:
   122                           	opt stack 0
   123  000B00                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000B00  77                 	db	119
   126  000B01  77                 	db	119
   127  000B02  77                 	db	119
   128  000B03  2E                 	db	46
   129  000B04  65                 	db	101
   130  000B05  75                 	db	117
   131  000B06  72                 	db	114
   132  000B07  6F                 	db	111
   133  000B08  73                 	db	115
   134  000B09  6F                 	db	111
   135  000B0A  75                 	db	117
   136  000B0B  72                 	db	114
   137  000B0C  63                 	db	99
   138  000B0D  65                 	db	101
   139  000B0E  2E                 	db	46
   140  000B0F  73                 	db	115
   141  000B10  65                 	db	101
   142  000B11  2F                 	db	47
   143  000B12  6E                 	db	110
   144  000B13  74                 	db	116
   145  000B14  63                 	db	99
   146  000B15  31                 	db	49
   147  000B16  30                 	db	48
   148  000B17  4B                 	db	75
   149  000B18  41                 	db	65
   150  000B19  5F                 	db	95
   151  000B1A  33                 	db	51
   152  000B1B  2E                 	db	46
   153  000B1C  78                 	db	120
   154  000B1D  6D                 	db	109
   155  000B1E  6C                 	db	108
   156  000B1F  00                 	db	0
   157  000B20                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000B20                     exp@coeff:
   160                           	opt stack 0
   161  000B20  0000               	dw	0
   162  000B22  3F80               	dw	16256
   163  000B24  7218               	dw	29208
   164  000B26  3F31               	dw	16177
   165  000B28  FDF0               	dw	65008
   166  000B2A  3E75               	dw	15989
   167  000B2C  5847               	dw	22599
   168  000B2E  3D63               	dw	15715
   169  000B30  9558               	dw	38232
   170  000B32  3C1D               	dw	15389
   171  000B34  C482               	dw	50306
   172  000B36  3AAE               	dw	15022
   173  000B38  78A8               	dw	30888
   174  000B3A  3921               	dw	14625
   175  000B3C  93EF               	dw	37871
   176  000B3E  3780               	dw	14208
   177  000B40  92A0               	dw	37536
   178  000B42  35A7               	dw	13735
   179  000B44  5646               	dw	22086
   180  000B46  3415               	dw	13333
   181  000B48                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000B48                     log@coeff:
   184                           	opt stack 0
   185  000B48  0000               	dw	0
   186  000B4A  0000               	dw	0
   187  000B4C  FFC4               	dw	65476
   188  000B4E  3F7F               	dw	16255
   189  000B50  EF80               	dw	61312
   190  000B52  BEFF               	dw	48895
   191  000B54  E190               	dw	57744
   192  000B56  3EA9               	dw	16041
   193  000B58  82EC               	dw	33516
   194  000B5A  BE76               	dw	48758
   195  000B5C  AD82               	dw	44418
   196  000B5E  3E2B               	dw	15915
   197  000B60  3C0E               	dw	15374
   198  000B62  BDC3               	dw	48579
   199  000B64  D187               	dw	53639
   200  000B66  3D13               	dw	15635
   201  000B68  7841               	dw	30785
   202  000B6A  BBD3               	dw	48083
   203  000B6C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  000B6C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  0057D0                     __pcinit:
   305                           	opt stack 0
   306  0057D0                     start_initialization:
   307                           	opt stack 0
   308  0057D0                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  0057D0  EE01  F09C         	lfsr	0,__pbssBIGRAM
   313  0057D4  EE13 F0C0          	lfsr	1,960
   314  0057D8                     clear_0:
   315  0057D8  6AEE               	clrf	postinc0,c
   316  0057DA  50E5               	movf	postdec1,w,c
   317  0057DC  50E1               	movf	fsr1l,w,c
   318  0057DE  E1FC               	bnz	clear_0
   319  0057E0  50E2               	movf	fsr1h,w,c
   320  0057E2  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (102 bytes)
   323  0057E4  EE01  F000         	lfsr	0,__pbssBANK1
   324  0057E8  0E66               	movlw	102
   325  0057EA                     clear_1:
   326  0057EA  6AEE               	clrf	postinc0,c
   327  0057EC  06E8               	decf	wreg,f,c
   328  0057EE  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (36 bytes)
   331  0057F0  EE00  F0B3         	lfsr	0,__pbssBANK0
   332  0057F4  0E24               	movlw	36
   333  0057F6                     clear_2:
   334  0057F6  6AEE               	clrf	postinc0,c
   335  0057F8  06E8               	decf	wreg,f,c
   336  0057FA  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  0057FC  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  005800  0E0D               	movlw	13
   341  005802                     clear_3:
   342  005802  6AEE               	clrf	postinc0,c
   343  005804  06E8               	decf	wreg,f,c
   344  005806  E1FD               	bnz	clear_3
   345  005808                     end_of_initialization:
   346                           	opt stack 0
   347  005808                     __end_of__initialization:
   348                           	opt stack 0
   349  005808  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  00580A  6EF8               	movwf	tblptru,c
   351  00580C  0100               	movlb	0
   352  00580E  EFB8  F023         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _sendTimer:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_alarmstatus:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_guid_reset:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_initledfunc:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000B3                     __pbssBANK0:
   408                           	opt stack 0
   409  0000B3                     _adc_conversion_flags:
   410                           	opt stack 0
   411  0000B3                     	ds	1
   412  0000B4                     _high_alarm:
   413                           	opt stack 0
   414  0000B4                     	ds	1
   415  0000B5                     _low_alarm:
   416                           	opt stack 0
   417  0000B5                     	ds	1
   418  0000B6                     _seconds:
   419                           	opt stack 0
   420  0000B6                     	ds	1
   421  0000B7                     _vscp_hour:
   422                           	opt stack 0
   423  0000B7                     	ds	1
   424  0000B8                     _vscp_initbtncnt:
   425                           	opt stack 0
   426  0000B8                     	ds	1
   427  0000B9                     _vscp_minute:
   428                           	opt stack 0
   429  0000B9                     	ds	1
   430  0000BA                     _vscp_nickname:
   431                           	opt stack 0
   432  0000BA                     	ds	1
   433  0000BB                     _vscp_node_state:
   434                           	opt stack 0
   435  0000BB                     	ds	1
   436  0000BC                     _vscp_imsg:
   437                           	opt stack 0
   438  0000BC                     	ds	14
   439  0000CA                     _vscp_omsg:
   440                           	opt stack 0
   441  0000CA                     	ds	13
   442                           tblptru	equ	0xFF8
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1h	equ	0xFE2
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	bssBANK1
   450  000100                     __pbssBANK1:
   451                           	opt stack 0
   452  000100                     _current_temp:
   453                           	opt stack 0
   454  000100                     	ds	12
   455  00010C                     _seconds_temp:
   456                           	opt stack 0
   457  00010C                     	ds	6
   458  000112                     _measurement_clock:
   459                           	opt stack 0
   460  000112                     	ds	4
   461  000116                     _timeout_clock:
   462                           	opt stack 0
   463  000116                     	ds	4
   464  00011A                     _vscp_configtimer:
   465                           	opt stack 0
   466  00011A                     	ds	2
   467  00011C                     _vscp_timer:
   468                           	opt stack 0
   469  00011C                     	ds	2
   470  00011E                     _sh_coefficients:
   471                           	opt stack 0
   472  00011E                     	ds	72
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  00019C                     __pbssBIGRAM:
   482                           	opt stack 0
   483  00019C                     _adc:
   484                           	opt stack 0
   485  00019C                     	ds	960
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK1
   494  000166                     __pcstackBANK1:
   495                           	opt stack 0
   496  000166                     doWork@Rinf:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x0
   500  000166                     	ds	4
   501  00016A                     doWork@calVoltage:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  00016A                     	ds	4
   506  00016E                     _doWork$2270:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x8
   510  00016E                     	ds	4
   511  000172                     _doWork$2271:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xC
   515  000172                     	ds	4
   516  000176                     _doWork$2272:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x10
   520  000176                     	ds	16
   521  000186                     doWork@v:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x20
   525  000186                     	ds	4
   526  00018A                     doWork@B:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x24
   530  00018A                     	ds	2
   531  00018C                     doWork@resistance:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x26
   535  00018C                     	ds	4
   536  000190                     doWork@j:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x2A
   540  000190                     	ds	1
   541  000191                     doWork@avarage:
   542                           	opt stack 0
   543                           
   544                           ; 4 bytes @ 0x2B
   545  000191                     	ds	4
   546  000195                     doWork@setpoint:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x2F
   550  000195                     	ds	2
   551  000197                     doWork@temp:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x31
   555  000197                     	ds	4
   556  00019B                     doWork@i:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x35
   560  00019B                     	ds	1
   561                           tblptru	equ	0xFF8
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1h	equ	0xFE2
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	cstackBANK0
   569  000060                     __pcstackBANK0:
   570                           	opt stack 0
   571  000060                     ?_sendVSCPFrame:
   572                           	opt stack 0
   573  000060                     ?___flmul:
   574                           	opt stack 0
   575  000060                     ?___asfldiv:
   576                           	opt stack 0
   577  000060                     sendVSCPFrame@vscpclass:
   578                           	opt stack 0
   579  000060                     ___asfldiv@f1p:
   580                           	opt stack 0
   581  000060                     ___flmul@f1:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x0
   585  000060                     	ds	2
   586  000062                     sendVSCPFrame@vscptype:
   587                           	opt stack 0
   588  000062                     ___asfldiv@f2:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0x2
   592  000062                     	ds	1
   593  000063                     sendVSCPFrame@nodeid:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x3
   597  000063                     	ds	1
   598  000064                     sendVSCPFrame@priority:
   599                           	opt stack 0
   600  000064                     ___flmul@f2:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x4
   604  000064                     	ds	1
   605  000065                     sendVSCPFrame@size:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x5
   609  000065                     	ds	1
   610  000066                     sendVSCPFrame@pData:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x6
   614  000066                     	ds	1
   615  000067                     ??_sendVSCPFrame:
   616                           
   617                           ; 0 bytes @ 0x7
   618  000067                     	ds	8
   619  00006F                     ___flmul@exp:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0xF
   623  00006F                     	ds	1
   624  000070                     ___flmul@f3_as_product:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x10
   628  000070                     	ds	4
   629  000074                     ___flmul@cntr:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x14
   633  000074                     	ds	1
   634  000075                     ___flmul@sign:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x15
   638  000075                     	ds	1
   639  000076                     ?_Celsius2Fahrenheit:
   640                           	opt stack 0
   641  000076                     ?___flsub:
   642                           	opt stack 0
   643  000076                     ?_eval_poly:
   644                           	opt stack 0
   645  000076                     ?___asflmul:
   646                           	opt stack 0
   647  000076                     ?___fltol:
   648                           	opt stack 0
   649  000076                     Celsius2Fahrenheit@tc:
   650                           	opt stack 0
   651  000076                     ___asflmul@multiplicand:
   652                           	opt stack 0
   653  000076                     ___flsub@f1:
   654                           	opt stack 0
   655  000076                     ___fltol@f1:
   656                           	opt stack 0
   657  000076                     eval_poly@x:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x16
   661  000076                     	ds	4
   662  00007A                     ___fltol@sign1:
   663                           	opt stack 0
   664  00007A                     eval_poly@d:
   665                           	opt stack 0
   666  00007A                     ___flsub@f2:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x1A
   670  00007A                     	ds	1
   671  00007B                     ___fltol@exp1:
   672                           	opt stack 0
   673  00007B                     eval_poly@n:
   674                           	opt stack 0
   675  00007B                     sendVSCPFrame@id:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x1B
   679  00007B                     	ds	1
   680  00007C                     ?_setEventData:
   681                           	opt stack 0
   682  00007C                     ?___aldiv:
   683                           	opt stack 0
   684  00007C                     setEventData@v:
   685                           	opt stack 0
   686  00007C                     ___aldiv@dividend:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x1C
   690  00007C                     	ds	1
   691  00007D                     eval_poly@res:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x1D
   695  00007D                     	ds	1
   696  00007E                     ?___asflsub:
   697                           	opt stack 0
   698  00007E                     setEventData@unit:
   699                           	opt stack 0
   700  00007E                     ___asflsub@f1p:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x1E
   704  00007E                     	ds	1
   705  00007F                     ??_vscp_handleProtocolEvent:
   706  00007F                     ??_vscp_doOneSecondWork:
   707  00007F                     setEventData@newval:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x1F
   711  00007F                     	ds	1
   712  000080                     ___aldiv@divisor:
   713                           	opt stack 0
   714  000080                     ___asflsub@f2:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x20
   718  000080                     	ds	1
   719  000081                     ?_log:
   720                           	opt stack 0
   721  000081                     ?_ldexp:
   722                           	opt stack 0
   723  000081                     ldexp@value:
   724                           	opt stack 0
   725  000081                     log@x:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x21
   729  000081                     	ds	2
   730  000083                     setEventData@ival:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x23
   734  000083                     	ds	1
   735  000084                     ___aldiv@counter:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x24
   739  000084                     	ds	1
   740  000085                     ??_sendTempEvent:
   741  000085                     ___aldiv@sign:
   742                           	opt stack 0
   743  000085                     ldexp@newexp:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x25
   747  000085                     	ds	1
   748  000086                     sendTempEvent@i:
   749                           	opt stack 0
   750  000086                     vscp_handleProtocolEvent@page_save:
   751                           	opt stack 0
   752  000086                     ___aldiv@quotient:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x26
   756  000086                     	ds	1
   757  000087                     ??_handle_sync:
   758  000087                     ??_doOneSecondWork:
   759                           
   760                           ; 0 bytes @ 0x27
   761  000087                     	ds	1
   762  000088                     vscp_handleProtocolEvent@page_save_1167:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x28
   766  000088                     	ds	1
   767  000089                     doOneSecondWork@tmp:
   768                           	opt stack 0
   769  000089                     handle_sync@i:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x29
   773  000089                     	ds	1
   774  00008A                     ?___altofl:
   775                           	opt stack 0
   776  00008A                     doOneSecondWork@i:
   777                           	opt stack 0
   778  00008A                     vscp_handleProtocolEvent@offset:
   779                           	opt stack 0
   780  00008A                     ___altofl@c:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x2A
   784  00008A                     	ds	1
   785  00008B                     vscp_handleProtocolEvent@pos:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x2B
   789  00008B                     	ds	1
   790  00008C                     vscp_handleProtocolEvent@bytes:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x2C
   794  00008C                     	ds	1
   795  00008D                     vscp_handleProtocolEvent@len:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x2D
   799  00008D                     	ds	1
   800  00008E                     vscp_handleProtocolEvent@pos_1156:
   801                           	opt stack 0
   802  00008E                     ___altofl@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x2E
   806  00008E                     	ds	1
   807  00008F                     ?_floor:
   808                           	opt stack 0
   809  00008F                     vscp_handleProtocolEvent@len_1157:
   810                           	opt stack 0
   811  00008F                     floor@x:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x2F
   815  00008F                     	ds	1
   816  000090                     vscp_handleProtocolEvent@bytes_this_time:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x30
   820  000090                     	ds	1
   821  000091                     vscp_handleProtocolEvent@cb:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x31
   825  000091                     	ds	1
   826  000092                     vscp_handleProtocolEvent@i_1166:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x32
   830  000092                     	ds	1
   831  000093                     vscp_handleProtocolEvent@k:
   832                           	opt stack 0
   833  000093                     floor@i:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x33
   837  000093                     	ds	1
   838  000094                     vscp_handleProtocolEvent@bytes_1163:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x34
   842  000094                     	ds	1
   843  000095                     vscp_handleProtocolEvent@i_1155:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x35
   847  000095                     	ds	1
   848  000096                     vscp_handleProtocolEvent@byte:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x36
   852  000096                     	ds	1
   853  000097                     vscp_handleProtocolEvent@i_1158:
   854                           	opt stack 0
   855  000097                     floor@expon:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x37
   859  000097                     	ds	1
   860  000098                     vscp_handleProtocolEvent@i:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x38
   864  000098                     	ds	1
   865  000099                     ?_exp:
   866                           	opt stack 0
   867  000099                     vscp_handleProtocolEvent@j:
   868                           	opt stack 0
   869  000099                     exp@x:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x39
   873  000099                     	ds	4
   874  00009D                     _exp$2276:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x3D
   878  00009D                     	ds	4
   879  0000A1                     exp@exponent:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x41
   883  0000A1                     	ds	2
   884  0000A3                     exp@sign:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x43
   888  0000A3                     	ds	1
   889  0000A4                     ??_doWork:
   890                           
   891                           ; 0 bytes @ 0x44
   892  0000A4                     	ds	14
   893  0000B2                     main@i:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x52
   897  0000B2                     	ds	1
   898                           tblptru	equ	0xFF8
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1h	equ	0xFE2
   903                           fsr1l	equ	0xFE1
   904                           
   905                           	psect	cstackCOMRAM
   906  000001                     __pcstackCOMRAM:
   907                           	opt stack 0
   908  000001                     ?i1_WriteTimer0:
   909                           	opt stack 0
   910  000001                     i1WriteTimer0@timer0:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x0
   914  000001                     	ds	2
   915  000003                     i1WriteTimer0@timer:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x2
   919  000003                     	ds	2
   920  000005                     ??_interrupt_at_low_vector:
   921                           
   922                           ; 0 bytes @ 0x4
   923  000005                     	ds	9
   924  00000E                     ?_WriteTimer0:
   925                           	opt stack 0
   926  00000E                     ?_writeEEPROM:
   927                           	opt stack 0
   928  00000E                     ?_OpenADC:
   929                           	opt stack 0
   930  00000E                     ?__CANIDToRegs:
   931                           	opt stack 0
   932  00000E                     ?__RegsToCANID:
   933                           	opt stack 0
   934  00000E                     ??_vscp_getMDF_URL:
   935  00000E                     ?___flge:
   936                           	opt stack 0
   937  00000E                     ?_readEEPROM:
   938                           	opt stack 0
   939  00000E                     ?___lbmod:
   940                           	opt stack 0
   941  00000E                     ?__ECANPointBuffer:
   942                           	opt stack 0
   943  00000E                     ?___flpack:
   944                           	opt stack 0
   945  00000E                     ?_frexp:
   946                           	opt stack 0
   947  00000E                     ?_vscp_getFamilyCode:
   948                           	opt stack 0
   949  00000E                     ?_vscp_getFamilyType:
   950                           	opt stack 0
   951  00000E                     ?___flneg:
   952                           	opt stack 0
   953  00000E                     vscp_getMatrixInfo@pData:
   954                           	opt stack 0
   955  00000E                     ECANSetOperationMode@mode:
   956                           	opt stack 0
   957  00000E                     OpenADC@config2:
   958                           	opt stack 0
   959  00000E                     OpenTimer0@config:
   960                           	opt stack 0
   961  00000E                     ___lbmod@divisor:
   962                           	opt stack 0
   963  00000E                     __CANIDToRegs@ptr:
   964                           	opt stack 0
   965  00000E                     __RegsToCANID@ptr:
   966                           	opt stack 0
   967  00000E                     writeEEPROM@address:
   968                           	opt stack 0
   969  00000E                     readEEPROM@address:
   970                           	opt stack 0
   971  00000E                     WriteTimer0@timer0:
   972                           	opt stack 0
   973  00000E                     ___flpack@arg:
   974                           	opt stack 0
   975  00000E                     ___flge@ff1:
   976                           	opt stack 0
   977  00000E                     ___flneg@f1:
   978                           	opt stack 0
   979  00000E                     frexp@value:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0xD
   983  00000E                     	ds	1
   984  00000F                     vscp_getMDF_URL@idx:
   985                           	opt stack 0
   986  00000F                     vscp_getMatrixInfo@i:
   987                           	opt stack 0
   988  00000F                     OpenADC@portconfig:
   989                           	opt stack 0
   990  00000F                     ___lbmod@dividend:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0xE
   994  00000F                     	ds	1
   995  000010                     ??_OpenADC:
   996  000010                     __RegsToCANID@val:
   997                           	opt stack 0
   998  000010                     writeEEPROM@data:
   999                           	opt stack 0
  1000  000010                     ___lbmod@counter:
  1001                           	opt stack 0
  1002  000010                     WriteTimer0@timer:
  1003                           	opt stack 0
  1004  000010                     __CANIDToRegs@val:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0xF
  1008  000010                     	ds	1
  1009  000011                     ?_vscp_setGUID:
  1010                           	opt stack 0
  1011  000011                     ?_vscp_setUserID:
  1012                           	opt stack 0
  1013  000011                     ?_vscp_setManufacturerId:
  1014                           	opt stack 0
  1015  000011                     init_app_eeprom@i:
  1016                           	opt stack 0
  1017  000011                     vscp_setGUID@data:
  1018                           	opt stack 0
  1019  000011                     vscp_setUserID@data:
  1020                           	opt stack 0
  1021  000011                     vscp_setManufacturerId@data:
  1022                           	opt stack 0
  1023  000011                     vscp_goBootloaderMode@algorithm:
  1024                           	opt stack 0
  1025  000011                     vscp_writeNicknamePermanent@nickname:
  1026                           	opt stack 0
  1027  000011                     vscp_setSegmentCRC@crc:
  1028                           	opt stack 0
  1029  000011                     vscp_setControlByte@ctrl:
  1030                           	opt stack 0
  1031  000011                     __RegsToCANID@type:
  1032                           	opt stack 0
  1033  000011                     __ECANPointBuffer@b:
  1034                           	opt stack 0
  1035  000011                     readEEPROM@data:
  1036                           	opt stack 0
  1037  000011                     ___lbmod@rem:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x10
  1041  000011                     	ds	1
  1042  000012                     ??__RegsToCANID:
  1043  000012                     ?_getCalibrationValue:
  1044                           	opt stack 0
  1045  000012                     ?___wmul:
  1046                           	opt stack 0
  1047  000012                     vscp_readAppReg@pos:
  1048                           	opt stack 0
  1049  000012                     vscp_getGUID@idx:
  1050                           	opt stack 0
  1051  000012                     vscp_setGUID@idx:
  1052                           	opt stack 0
  1053  000012                     vscp_getUserID@idx:
  1054                           	opt stack 0
  1055  000012                     vscp_setUserID@idx:
  1056                           	opt stack 0
  1057  000012                     vscp_getManufacturerId@idx:
  1058                           	opt stack 0
  1059  000012                     vscp_setManufacturerId@idx:
  1060                           	opt stack 0
  1061  000012                     vscp_handleDropNickname@bytes:
  1062                           	opt stack 0
  1063  000012                     OpenADC@config:
  1064                           	opt stack 0
  1065  000012                     ___flpack@exp:
  1066                           	opt stack 0
  1067  000012                     __ECANPointBuffer@pt:
  1068                           	opt stack 0
  1069  000012                     frexp@eptr:
  1070                           	opt stack 0
  1071  000012                     ___wmul@multiplier:
  1072                           	opt stack 0
  1073  000012                     ___flge@ff2:
  1074                           	opt stack 0
  1075                           
  1076                           ; 4 bytes @ 0x11
  1077  000012                     	ds	1
  1078  000013                     vscp_readAppReg@reg:
  1079                           	opt stack 0
  1080  000013                     vscp_readStdReg@rv:
  1081                           	opt stack 0
  1082  000013                     ___flpack@sign:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x12
  1086  000013                     	ds	1
  1087  000014                     ??_getCalibrationValue:
  1088  000014                     ??___flpack:
  1089  000014                     ??_frexp:
  1090  000014                     vscp_readAppReg@rv:
  1091                           	opt stack 0
  1092  000014                     __CANIDToRegs@type:
  1093                           	opt stack 0
  1094  000014                     __RegsToCANID@Value:
  1095                           	opt stack 0
  1096  000014                     vscp_readStdReg@reg:
  1097                           	opt stack 0
  1098  000014                     ___wmul@multiplicand:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x13
  1102  000014                     	ds	1
  1103  000015                     ??__CANIDToRegs:
  1104  000015                     ?_ECANReceiveMessage:
  1105                           	opt stack 0
  1106  000015                     ECANReceiveMessage@data:
  1107                           	opt stack 0
  1108  000015                     vscp_readRegister@reg:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x14
  1112  000015                     	ds	1
  1113  000016                     ECANReceiveMessage@dataLen:
  1114                           	opt stack 0
  1115  000016                     ___wmul@product:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x15
  1119  000016                     	ds	1
  1120  000017                     ECANReceiveMessage@msgFlags:
  1121                           	opt stack 0
  1122  000017                     __CANIDToRegs@Value:
  1123                           	opt stack 0
  1124  000017                     getCalibrationValue@cal:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x16
  1128  000017                     	ds	1
  1129  000018                     ??_writeCoeffs2Ram:
  1130  000018                     ?_ECANSendMessage:
  1131                           	opt stack 0
  1132  000018                     ?___awtofl:
  1133                           	opt stack 0
  1134  000018                     ?___lwtofl:
  1135                           	opt stack 0
  1136  000018                     ECANReceiveMessage@savedPtr:
  1137                           	opt stack 0
  1138  000018                     ___awtofl@c:
  1139                           	opt stack 0
  1140  000018                     ___lwtofl@c:
  1141                           	opt stack 0
  1142  000018                     ECANSendMessage@id:
  1143                           	opt stack 0
  1144                           
  1145                           ; 4 bytes @ 0x17
  1146  000018                     	ds	1
  1147  000019                     getCalibrationValue@i:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x18
  1151  000019                     	ds	1
  1152  00001A                     ECANReceiveMessage@id:
  1153                           	opt stack 0
  1154  00001A                     writeCoeffs2Ram@c:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x19
  1158  00001A                     	ds	1
  1159  00001B                     ECANReceiveMessage@i:
  1160                           	opt stack 0
  1161                           
  1162                           ; 1 bytes @ 0x1A
  1163  00001B                     	ds	1
  1164  00001C                     ECANSendMessage@data:
  1165                           	opt stack 0
  1166  00001C                     ECANReceiveMessage@mode:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x1B
  1170  00001C                     	ds	1
  1171  00001D                     ?___fladd:
  1172                           	opt stack 0
  1173  00001D                     ECANSendMessage@dataLen:
  1174                           	opt stack 0
  1175  00001D                     ECANReceiveMessage@temp:
  1176                           	opt stack 0
  1177  00001D                     writeCoeffs2Ram@i:
  1178                           	opt stack 0
  1179  00001D                     ___fladd@f1:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x1C
  1183  00001D                     	ds	1
  1184  00001E                     ECANSendMessage@msgFlags:
  1185                           	opt stack 0
  1186  00001E                     ___awtofl@sign:
  1187                           	opt stack 0
  1188  00001E                     ECANReceiveMessage@ptr:
  1189                           	opt stack 0
  1190                           
  1191                           ; 2 bytes @ 0x1D
  1192  00001E                     	ds	1
  1193  00001F                     ??_ECANSendMessage:
  1194  00001F                     writeCoeffs2Ram@j:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x1E
  1198  00001F                     	ds	1
  1199  000020                     ?_getCANFrame:
  1200                           	opt stack 0
  1201  000020                     getCANFrame@pdlc:
  1202                           	opt stack 0
  1203  000020                     ECANSendMessage@pb:
  1204                           	opt stack 0
  1205                           
  1206                           ; 18 bytes @ 0x1F
  1207  000020                     	ds	1
  1208  000021                     ?_vscp_writeAppReg:
  1209                           	opt stack 0
  1210  000021                     init_app_ram@i:
  1211                           	opt stack 0
  1212  000021                     vscp_writeAppReg@val:
  1213                           	opt stack 0
  1214  000021                     getCANFrame@pdata:
  1215                           	opt stack 0
  1216  000021                     ___fladd@f2:
  1217                           	opt stack 0
  1218                           
  1219                           ; 4 bytes @ 0x20
  1220  000021                     	ds	1
  1221  000022                     ?_vscp_writeStdReg:
  1222                           	opt stack 0
  1223  000022                     vscp_writeAppReg@pos:
  1224                           	opt stack 0
  1225  000022                     getCANFrame@pid:
  1226                           	opt stack 0
  1227  000022                     vscp_writeStdReg@value:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x21
  1231  000022                     	ds	1
  1232  000023                     ??_vscp_writeStdReg:
  1233  000023                     vscp_writeAppReg@reg:
  1234                           	opt stack 0
  1235  000023                     getCANFrame@flags:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x22
  1239  000023                     	ds	1
  1240  000024                     ?_getVSCPFrame:
  1241                           	opt stack 0
  1242  000024                     vscp_writeAppReg@rv:
  1243                           	opt stack 0
  1244  000024                     getVSCPFrame@pvscptype:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x23
  1248  000024                     	ds	1
  1249  000025                     ??___fladd:
  1250  000025                     getVSCPFrame@pNodeId:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x24
  1254  000025                     	ds	1
  1255  000026                     getVSCPFrame@pPriority:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x25
  1259  000026                     	ds	1
  1260  000027                     getVSCPFrame@pSize:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x26
  1264  000027                     	ds	1
  1265  000028                     getVSCPFrame@pData:
  1266                           	opt stack 0
  1267  000028                     vscp_writeStdReg@code:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x27
  1271  000028                     	ds	1
  1272  000029                     ??_getVSCPFrame:
  1273  000029                     ___fladd@sign:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x28
  1277  000029                     	ds	1
  1278  00002A                     ___fladd@exp2:
  1279                           	opt stack 0
  1280                           
  1281                           ; 1 bytes @ 0x29
  1282  00002A                     	ds	1
  1283  00002B                     ___fladd@exp1:
  1284                           	opt stack 0
  1285                           
  1286                           ; 1 bytes @ 0x2A
  1287  00002B                     	ds	1
  1288  00002C                     ?_Celsius2Kelvin:
  1289                           	opt stack 0
  1290  00002C                     ?___fldiv:
  1291                           	opt stack 0
  1292  00002C                     ?___asfladd:
  1293                           	opt stack 0
  1294  00002C                     ___asfladd@f1p:
  1295                           	opt stack 0
  1296  00002C                     Celsius2Kelvin@tc:
  1297                           	opt stack 0
  1298  00002C                     vscp_writeStdReg@code_1147:
  1299                           	opt stack 0
  1300  00002C                     ___fldiv@f1:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x2B
  1304  00002C                     	ds	1
  1305  00002D                     getVSCPFrame@pvscpclass:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x2C
  1309  00002D                     	ds	1
  1310  00002E                     getVSCPFrame@id:
  1311                           	opt stack 0
  1312  00002E                     ___asfladd@f2:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x2D
  1316  00002E                     	ds	2
  1317  000030                     vscp_writeStdReg@idx:
  1318                           	opt stack 0
  1319  000030                     ___fldiv@f2:
  1320                           	opt stack 0
  1321                           
  1322                           ; 4 bytes @ 0x2F
  1323  000030                     	ds	1
  1324  000031                     vscp_writeStdReg@idx_1148:
  1325                           	opt stack 0
  1326                           
  1327                           ; 1 bytes @ 0x30
  1328  000031                     	ds	1
  1329  000032                     ECANSendMessage@mode:
  1330                           	opt stack 0
  1331  000032                     vscp_writeStdReg@rv:
  1332                           	opt stack 0
  1333  000032                     vscp_getEvent@rv:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x31
  1337  000032                     	ds	1
  1338  000033                     ECANSendMessage@buffers:
  1339                           	opt stack 0
  1340  000033                     vscp_writeStdReg@reg:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x32
  1344  000033                     	ds	1
  1345  000034                     ?_vscp_writeRegister:
  1346                           	opt stack 0
  1347  000034                     ECANSendMessage@j:
  1348                           	opt stack 0
  1349  000034                     vscp_writeRegister@value:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x33
  1353  000034                     	ds	1
  1354  000035                     ECANSendMessage@tempBSEL0:
  1355                           	opt stack 0
  1356  000035                     vscp_writeRegister@reg:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x34
  1360  000035                     	ds	1
  1361  000036                     ECANSendMessage@tempPtr:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x35
  1365  000036                     	ds	2
  1366  000038                     ECANSendMessage@temp:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x37
  1370  000038                     	ds	1
  1371  000039                     ECANSendMessage@i:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x38
  1375  000039                     	ds	1
  1376  00003A                     ECANSendMessage@ptr:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x39
  1380  00003A                     	ds	1
  1381  00003B                     ___fldiv@f3:
  1382                           	opt stack 0
  1383                           
  1384                           ; 4 bytes @ 0x3A
  1385  00003B                     	ds	1
  1386  00003C                     ?_sendCANFrame:
  1387                           	opt stack 0
  1388  00003C                     sendCANFrame@id:
  1389                           	opt stack 0
  1390                           
  1391                           ; 4 bytes @ 0x3B
  1392  00003C                     	ds	3
  1393  00003F                     ___fldiv@cntr:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x3E
  1397  00003F                     	ds	1
  1398  000040                     sendCANFrame@dlc:
  1399                           	opt stack 0
  1400  000040                     ___fldiv@exp:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x3F
  1404  000040                     	ds	1
  1405  000041                     sendCANFrame@pdata:
  1406                           	opt stack 0
  1407  000041                     ___fldiv@sign:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x40
  1411  000041                     	ds	1
  1412  000042                     ??_eval_poly:
  1413  000042                     ??___fltol:
  1414  000042                     sendCANFrame@rv:
  1415                           	opt stack 0
  1416  000042                     ___asflmul@mp:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x41
  1420  000042                     	ds	1
  1421  000043                     ??_ldexp:
  1422  000043                     vscp_sendEvent@rv:
  1423                           	opt stack 0
  1424  000043                     log@exponent:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x42
  1428  000043                     	ds	1
  1429  000044                     ?_vscp_sendHeartBeat:
  1430                           	opt stack 0
  1431  000044                     ??_vscp_newNodeOnline:
  1432  000044                     vscp_sendHeartBeat@subzone:
  1433                           	opt stack 0
  1434                           
  1435                           ; 1 bytes @ 0x43
  1436  000044                     	ds	1
  1437  000045                     vscp_sendHeartBeat@zone:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x44
  1441  000045                     	ds	1
  1442  000046                     tblptru	equ	0xFF8
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postdec1	equ	0xFE5
  1446                           fsr1h	equ	0xFE2
  1447                           fsr1l	equ	0xFE1
  1448                           
  1449                           ; 0 bytes @ 0x45
  1450 ;;
  1451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1452 ;;
  1453 ;; *************** function _main *****************
  1454 ;; Defined at:
  1455 ;;		line 300 in file "../main.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  i               1   82[BANK0 ] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;		None               void
  1462 ;; Registers used:
  1463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : E/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1469 ;;      Params:         0       0       0       0       0       0       0
  1470 ;;      Locals:         0       1       0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0
  1472 ;;      Totals:         0       1       0       0       0       0       0
  1473 ;;Total ram usage:        1 bytes
  1474 ;; Hardware stack levels required when called:    9
  1475 ;; This function calls:
  1476 ;;		_init
  1477 ;;		_vscp_check_pstorage
  1478 ;;		_init_app_eeprom
  1479 ;;		_vscp_init
  1480 ;;		_writeEEPROM
  1481 ;;		_vscp_getEvent
  1482 ;;		_vscp_goActiveState
  1483 ;;		_vscp_handleProbeState
  1484 ;;		_vscp_handleProtocolEvent
  1485 ;;		_handle_sync
  1486 ;;		_vscp_error
  1487 ;;		_doOneSecondWork
  1488 ;;		_vscp_doOneSecondWork
  1489 ;;		_doWork
  1490 ;; This function is called by:
  1491 ;;		Startup code after reset
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           	psect	text0
  1496  004770                     __ptext0:
  1497                           	opt stack 0
  1498  004770                     _main:
  1499                           	opt stack 22
  1500                           
  1501                           ;main.c: 301: unsigned char i;
  1502                           ;main.c: 303: init();
  1503                           
  1504                           ;incstack = 0
  1505                           ;incstack = 0
  1506  004770  EC64  F02C         	call	_init	;wreg free
  1507                           
  1508                           ;main.c: 307: if (!vscp_check_pstorage()) {
  1509  004774  ECB5  F02D         	call	_vscp_check_pstorage	;wreg free
  1510  004778  0900               	iorlw	0
  1511  00477A  B4D8               	btfsc	status,2,c
  1512                           
  1513                           ;main.c: 310: init_app_eeprom();
  1514  00477C  EC8C  F011         	call	_init_app_eeprom	;wreg free
  1515                           
  1516                           ;main.c: 312: }
  1517                           ;main.c: 314: vscp_init();
  1518  004780  ECA0  F02B         	call	_vscp_init	;wreg free
  1519  004784                     l168:
  1520  004784  0004               	clrwdt		;# 
  1521                           
  1522                           ;main.c: 320: if ((vscp_initbtncnt > 250) &&
  1523                           ;main.c: 321: (0x01 != vscp_node_state)) {
  1524  004786  0EFA               	movlw	250
  1525  004788  0100               	movlb	0	; () banked
  1526  00478A  65B8               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1527  00478C  D00C               	goto	l11964
  1528                           
  1529                           ; BSR set to: 0
  1530  00478E  05BB               	decf	_vscp_node_state& (0+255),w,b
  1531  004790  E00A               	bz	l11964
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;main.c: 324: vscp_nickname = 0xff;
  1535  004792  69BA               	setf	_vscp_nickname& (0+255),b
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 325: writeEEPROM(0x01, 0xff);
  1539  004794  6A0F               	clrf	?_writeEEPROM+1,c
  1540  004796  0E01               	movlw	1
  1541  004798  6E0E               	movwf	?_writeEEPROM,c
  1542  00479A  0EFF               	movlw	255
  1543  00479C  6810               	setf	?_writeEEPROM+2,c
  1544  00479E  EC7E  F02D         	call	_writeEEPROM	;wreg free
  1545                           
  1546                           ;main.c: 326: vscp_init();
  1547  0047A2  ECA0  F02B         	call	_vscp_init	;wreg free
  1548  0047A6                     l11964:
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;main.c: 328: }
  1552                           ;main.c: 332: vscp_imsg.flags = 0;
  1553  0047A6  6BBC               	clrf	_vscp_imsg& (0+255),b
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 333: vscp_getEvent();
  1557  0047A8  EC2E  F02D         	call	_vscp_getEvent	;wreg free
  1558                           
  1559                           ;main.c: 336: switch (vscp_node_state) {
  1560  0047AC  D024               	goto	l11994
  1561  0047AE                     l11968:
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 341: if (0xff == vscp_nickname) {
  1565  0047AE  29BA               	incf	_vscp_nickname& (0+255),w,b
  1566  0047B0  E103               	bnz	l11972
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 343: vscp_node_state = 0x01;
  1570  0047B2  0E01               	movlw	1
  1571  0047B4  6FBB               	movwf	_vscp_node_state& (0+255),b
  1572                           
  1573                           ;main.c: 344: }
  1574  0047B6  D02B               	goto	l11996
  1575  0047B8                     l11972:
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;main.c: 345: else {
  1579                           ;main.c: 347: vscp_node_state = 0x03;
  1580  0047B8  0E03               	movlw	3
  1581  0047BA  6FBB               	movwf	_vscp_node_state& (0+255),b
  1582  0047BC                     l11974:
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;main.c: 348: vscp_goActiveState();
  1586  0047BC  ECE9  F02D         	call	_vscp_goActiveState	;wreg free
  1587  0047C0  D026               	goto	l11996
  1588  0047C2                     l11976:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 353: vscp_handleProbeState();
  1592  0047C2  EC0F  F025         	call	_vscp_handleProbeState	;wreg free
  1593                           
  1594                           ;main.c: 354: break;
  1595  0047C6  D023               	goto	l11996
  1596  0047C8                     l177:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 363: if (vscp_imsg.flags & 0x80) {
  1600  0047C8  AFBC               	btfss	_vscp_imsg& (0+255),7,b
  1601  0047CA  D021               	goto	l11996
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 365: if (0 == vscp_imsg.vscp_class) {
  1605  0047CC  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  1606  0047CE  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1607  0047D0  E103               	bnz	l11984
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;main.c: 368: vscp_handleProtocolEvent();
  1611  0047D2  ECEF  F018         	call	_vscp_handleProtocolEvent	;wreg free
  1612                           
  1613                           ;main.c: 370: }
  1614  0047D6  D01B               	goto	l11996
  1615  0047D8                     l11984:
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;main.c: 371: else if ((30 == vscp_imsg.vscp_class) &&
  1619                           ;main.c: 372: (26 == vscp_imsg.vscp_type)) {
  1620  0047D8  51BE               	movf	(_vscp_imsg+2)& (0+255),w,b
  1621  0047DA  0A1E               	xorlw	30
  1622  0047DC  11BF               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1623  0047DE  E117               	bnz	l11996
  1624                           
  1625                           ; BSR set to: 0
  1626  0047E0  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  1627  0047E2  0A1A               	xorlw	26
  1628  0047E4  E114               	bnz	l11996
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;main.c: 373: handle_sync();
  1632  0047E6  EC55  F029         	call	_handle_sync	;wreg free
  1633  0047EA  D011               	goto	l11996
  1634  0047EC                     l11990:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 380: vscp_error();
  1638  0047EC  ECD3  F02E         	call	_vscp_error	;wreg free
  1639                           
  1640                           ;main.c: 381: break;
  1641  0047F0  D00E               	goto	l11996
  1642  0047F2                     l183:
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;main.c: 384: vscp_node_state = 0x00;
  1646  0047F2  6BBB               	clrf	_vscp_node_state& (0+255),b
  1647                           
  1648                           ;main.c: 385: break;
  1649  0047F4  D00C               	goto	l11996
  1650  0047F6                     l11994:
  1651  0047F6  0100               	movlb	0	; () banked
  1652  0047F8  51BB               	movf	_vscp_node_state& (0+255),w,b
  1653                           
  1654                           ; Switch size 1, requested type "speed"
  1655                           ; Number of cases is 5, Range of values is 0 to 4
  1656                           ; switch strategies available:
  1657                           ; Name         Instructions Cycles
  1658                           ; simple_byte           16     9 (average)
  1659                           ;	Chosen strategy is simple_byte
  1660  0047FA  E0D9               	bz	l11968
  1661  0047FC  0A01               	xorlw	1	; case 1
  1662  0047FE  E0E1               	bz	l11976
  1663  004800  0A03               	xorlw	3	; case 2
  1664  004802  E0DC               	bz	l11974
  1665  004804  0A01               	xorlw	1	; case 3
  1666  004806  E0E0               	bz	l177
  1667  004808  0A07               	xorlw	7	; case 4
  1668  00480A  E0F0               	bz	l11990
  1669  00480C  D7F2               	goto	l183
  1670  00480E                     l11996:
  1671                           
  1672                           ;main.c: 391: if ( measurement_clock > 1000 ) {
  1673  00480E  0EE9               	movlw	233
  1674  004810  0101               	movlb	1	; () banked
  1675  004812  5D12               	subwf	_measurement_clock& (0+255),w,b
  1676  004814  0E03               	movlw	3
  1677  004816  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b
  1678  004818  0E00               	movlw	0
  1679  00481A  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b
  1680  00481C  0E00               	movlw	0
  1681  00481E  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b
  1682  004820  E3B1               	bnc	l168
  1683                           
  1684                           ; BSR set to: 1
  1685                           ;main.c: 393: measurement_clock = 0;
  1686  004822  6B12               	clrf	_measurement_clock& (0+255),b
  1687  004824  6B13               	clrf	(_measurement_clock+1)& (0+255),b
  1688  004826  6B14               	clrf	(_measurement_clock+2)& (0+255),b
  1689  004828  6B15               	clrf	(_measurement_clock+3)& (0+255),b
  1690                           
  1691                           ; BSR set to: 1
  1692                           ;main.c: 394: doOneSecondWork();
  1693  00482A  EC0A  F01D         	call	_doOneSecondWork	;wreg free
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 395: seconds++;
  1697  00482E  2BB6               	incf	_seconds& (0+255),f,b
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 396: sendTimer++;
  1701  004830  2A4A               	incf	_sendTimer,f,c
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1705  004832  51BB               	movf	_vscp_node_state& (0+255),w,b
  1706  004834  0A03               	xorlw	3
  1707  004836  E10D               	bnz	l12020
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1711  004838  6BB2               	clrf	main@i& (0+255),b
  1712  00483A                     l12014:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 402: seconds_temp[i]++;
  1716  00483A  0E0C               	movlw	low _seconds_temp
  1717  00483C  0100               	movlb	0	; () banked
  1718  00483E  25B2               	addwf	main@i& (0+255),w,b
  1719  004840  6ED9               	movwf	fsr2l,c
  1720  004842  6ADA               	clrf	fsr2h,c
  1721  004844  0E01               	movlw	high _seconds_temp
  1722  004846  22DA               	addwfc	fsr2h,f,c
  1723  004848  2ADF               	incf	indf2,f,c
  1724                           
  1725                           ; BSR set to: 1
  1726  00484A  2BB2               	incf	main@i& (0+255),f,b
  1727                           
  1728                           ; BSR set to: 0
  1729  00484C  0E05               	movlw	5
  1730  00484E  65B2               	cpfsgt	main@i& (0+255),b
  1731  004850  D7F4               	goto	l12014
  1732  004852                     l12020:
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 403: }
  1736                           ;main.c: 404: }
  1737                           ;main.c: 406: if (seconds > 60) {
  1738  004852  0E3C               	movlw	60
  1739  004854  65B6               	cpfsgt	_seconds& (0+255),b
  1740  004856  D001               	goto	l12024
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 407: seconds = 0;
  1744  004858  6BB6               	clrf	_seconds& (0+255),b
  1745  00485A                     l12024:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 408: }
  1749                           ;main.c: 411: vscp_doOneSecondWork();
  1750  00485A  ECE8  F02A         	call	_vscp_doOneSecondWork	;wreg free
  1751                           
  1752                           ;main.c: 414: doWork();
  1753  00485E  EC38  F00C         	call	_doWork	;wreg free
  1754  004862  D790               	goto	l168
  1755  004864                     __end_of_main:
  1756                           	opt stack 0
  1757                           tblptru	equ	0xFF8
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           fsr1h	equ	0xFE2
  1762                           fsr1l	equ	0xFE1
  1763                           indf2	equ	0xFDF
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _doWork *****************
  1769 ;; Defined at:
  1770 ;;		line 429 in file "../main.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  temp            4   49[BANK1 ] unsigned char 
  1775 ;;  avarage         4   43[BANK1 ] unsigned char 
  1776 ;;  resistance      4   38[BANK1 ] unsigned char 
  1777 ;;  v               4   32[BANK1 ] unsigned char 
  1778 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1779 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1780 ;;  setpoint        2   47[BANK1 ] int 
  1781 ;;  B               2   36[BANK1 ] unsigned short 
  1782 ;;  i               1   53[BANK1 ] unsigned char 
  1783 ;;  j               1   42[BANK1 ] unsigned char 
  1784 ;; Return value:  Size  Location     Type
  1785 ;;		None               void
  1786 ;; Registers used:
  1787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1788 ;; Tracked objects:
  1789 ;;		On entry : F/0
  1790 ;;		On exit  : E/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1793 ;;      Params:         0       0       0       0       0       0       0
  1794 ;;      Locals:         0       0      54       0       0       0       0
  1795 ;;      Temps:          0      14       0       0       0       0       0
  1796 ;;      Totals:         0      14      54       0       0       0       0
  1797 ;;Total ram usage:       68 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    7
  1800 ;; This function calls:
  1801 ;;		_writeEEPROM
  1802 ;;		_readEEPROM
  1803 ;;		_exp
  1804 ;;		_log
  1805 ;;		_getCalibrationValue
  1806 ;;		_vscp_sendEvent
  1807 ;;		___aldiv
  1808 ;;		___altofl
  1809 ;;		___asfladd
  1810 ;;		___fladd
  1811 ;;		___asfldiv
  1812 ;;		___fldiv
  1813 ;;		___flmul
  1814 ;;		___asflsub
  1815 ;;		___flsub
  1816 ;;		___fltol
  1817 ;;		___lwtofl
  1818 ;;		___wmul
  1819 ;; This function is called by:
  1820 ;;		_main
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text1
  1825  001870                     __ptext1:
  1826                           	opt stack 0
  1827  001870                     _doWork:
  1828                           	opt stack 23
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 430: uint8_t i, j;
  1832                           ;main.c: 431: uint16_t B;
  1833                           ;main.c: 432: double avarage;
  1834                           ;main.c: 433: double resistance;
  1835                           ;main.c: 434: double Rinf;
  1836                           ;main.c: 435: double temp;
  1837                           ;main.c: 436: double v;
  1838                           ;main.c: 437: double calVoltage;
  1839                           ;main.c: 438: int setpoint;
  1840                           ;main.c: 440: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1841                           ;main.c: 441: readEEPROM(0xF3));
  1842                           
  1843                           ;incstack = 0
  1844                           ;incstack = 0
  1845  001870  6A0F               	clrf	?_readEEPROM+1,c
  1846  001872  0EF3               	movlw	243
  1847  001874  6E0E               	movwf	?_readEEPROM,c
  1848  001876  EC8D  F02E         	call	_readEEPROM	;wreg free
  1849  00187A  0100               	movlb	0	; () banked
  1850  00187C  6FA4               	movwf	??_doWork& (0+255),b
  1851  00187E  6A0F               	clrf	?_readEEPROM+1,c
  1852  001880  0EF2               	movlw	242
  1853  001882  6E0E               	movwf	?_readEEPROM,c
  1854  001884  EC8D  F02E         	call	_readEEPROM	;wreg free
  1855  001888  6E19               	movwf	?___lwtofl+1,c
  1856  00188A  0100               	movlb	0	; () banked
  1857  00188C  51A4               	movf	??_doWork& (0+255),w,b
  1858  00188E  6E18               	movwf	?___lwtofl,c
  1859  001890  EC04  F02D         	call	___lwtofl	;wreg free
  1860  001894  C01B  F16D         	movff	?___lwtofl+3,doWork@calVoltage+3
  1861  001898  C01A  F16C         	movff	?___lwtofl+2,doWork@calVoltage+2
  1862  00189C  C019  F16B         	movff	?___lwtofl+1,doWork@calVoltage+1
  1863  0018A0  C018  F16A         	movff	?___lwtofl,doWork@calVoltage
  1864                           
  1865                           ;main.c: 446: for (i = 0; i < 6; i++) {
  1866  0018A4  0101               	movlb	1	; () banked
  1867  0018A6  6B9B               	clrf	doWork@i& (0+255),b
  1868  0018A8                     l12034:
  1869                           
  1870                           ; BSR set to: 1
  1871                           ;main.c: 448: if (adc_conversion_flags & 1 << i) {
  1872  0018A8  C19B  F0A4         	movff	doWork@i,??_doWork
  1873  0018AC  0E01               	movlw	1
  1874  0018AE  0100               	movlb	0	; () banked
  1875  0018B0  6FA5               	movwf	(??_doWork+1)& (0+255),b
  1876  0018B2  2BA4               	incf	??_doWork& (0+255),f,b
  1877  0018B4  D002               	goto	u10444
  1878  0018B6                     u10445:
  1879  0018B6  90D8               	bcf	status,0,c
  1880  0018B8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1881  0018BA                     u10444:
  1882  0018BA  2FA4               	decfsz	??_doWork& (0+255),f,b
  1883  0018BC  D7FC               	goto	u10445
  1884  0018BE  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1885  0018C0  15B3               	andwf	_adc_conversion_flags& (0+255),w,b
  1886  0018C2  E101 D2DA          	bz	l12094
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 451: avarage = 0;
  1890  0018C6  0101               	movlb	1	; () banked
  1891  0018C8  6B91               	clrf	doWork@avarage& (0+255),b
  1892  0018CA  6B92               	clrf	(doWork@avarage+1)& (0+255),b
  1893  0018CC  6B93               	clrf	(doWork@avarage+2)& (0+255),b
  1894  0018CE  6B94               	clrf	(doWork@avarage+3)& (0+255),b
  1895                           
  1896                           ;main.c: 452: for (j = 0; j < 80; j++) {
  1897  0018D0  6B90               	clrf	doWork@j& (0+255),b
  1898  0018D2                     l12042:
  1899                           
  1900                           ; BSR set to: 1
  1901                           ;main.c: 453: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1902  0018D2  0E01               	movlw	high doWork@avarage
  1903  0018D4  6E2D               	movwf	?___asfladd+1,c
  1904  0018D6  0E91               	movlw	low doWork@avarage
  1905  0018D8  6E2C               	movwf	?___asfladd,c
  1906  0018DA  90D8               	bcf	status,0,c
  1907  0018DC  359B               	rlcf	doWork@i& (0+255),w,b
  1908  0018DE  0100               	movlb	0	; () banked
  1909  0018E0  6FA4               	movwf	??_doWork& (0+255),b
  1910  0018E2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  1911  0018E4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1912  0018E6  0101               	movlb	1	; () banked
  1913  0018E8  5190               	movf	doWork@j& (0+255),w,b
  1914  0018EA  0D0C               	mullw	12
  1915  0018EC  0E9D               	movlw	low (_adc+1)
  1916  0018EE  24F3               	addwf	prodl,w,c
  1917  0018F0  0100               	movlb	0	; () banked
  1918  0018F2  6FA6               	movwf	(??_doWork+2)& (0+255),b
  1919  0018F4  0E01               	movlw	high (_adc+1)
  1920  0018F6  20F4               	addwfc	prodh,w,c
  1921  0018F8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  1922  0018FA  51A4               	movf	??_doWork& (0+255),w,b
  1923  0018FC  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  1924  0018FE  6ED9               	movwf	fsr2l,c
  1925  001900  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1926  001902  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  1927  001904  6EDA               	movwf	fsr2h,c
  1928  001906  50DF               	movf	indf2,w,c
  1929  001908  6FA8               	movwf	(??_doWork+4)& (0+255),b
  1930  00190A  90D8               	bcf	status,0,c
  1931  00190C  0101               	movlb	1	; () banked
  1932  00190E  359B               	rlcf	doWork@i& (0+255),w,b
  1933  001910  0100               	movlb	0	; () banked
  1934  001912  6FA9               	movwf	(??_doWork+5)& (0+255),b
  1935  001914  6BAA               	clrf	(??_doWork+6)& (0+255),b
  1936  001916  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  1937  001918  0101               	movlb	1	; () banked
  1938  00191A  5190               	movf	doWork@j& (0+255),w,b
  1939  00191C  0D0C               	mullw	12
  1940  00191E  0E9C               	movlw	low _adc
  1941  001920  24F3               	addwf	prodl,w,c
  1942  001922  0100               	movlb	0	; () banked
  1943  001924  6FAB               	movwf	(??_doWork+7)& (0+255),b
  1944  001926  0E01               	movlw	high _adc
  1945  001928  20F4               	addwfc	prodh,w,c
  1946  00192A  6FAC               	movwf	(??_doWork+8)& (0+255),b
  1947  00192C  51A9               	movf	(??_doWork+5)& (0+255),w,b
  1948  00192E  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  1949  001930  6ED9               	movwf	fsr2l,c
  1950  001932  51AA               	movf	(??_doWork+6)& (0+255),w,b
  1951  001934  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  1952  001936  6EDA               	movwf	fsr2h,c
  1953  001938  50DF               	movf	indf2,w,c
  1954  00193A  6E19               	movwf	?___lwtofl+1,c
  1955  00193C  51A8               	movf	(??_doWork+4)& (0+255),w,b
  1956  00193E  6E18               	movwf	?___lwtofl,c
  1957  001940  EC04  F02D         	call	___lwtofl	;wreg free
  1958  001944  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  1959  001948  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  1960  00194C  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  1961  001950  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  1962  001954  EC33  F02B         	call	___asfladd	;wreg free
  1963  001958  0101               	movlb	1	; () banked
  1964  00195A  2B90               	incf	doWork@j& (0+255),f,b
  1965                           
  1966                           ; BSR set to: 1
  1967  00195C  0E4F               	movlw	79
  1968  00195E  6590               	cpfsgt	doWork@j& (0+255),b
  1969  001960  D7B8               	goto	l12042
  1970                           
  1971                           ; BSR set to: 1
  1972                           ;main.c: 457: if (1) {
  1973  001962  0E01               	movlw	high doWork@avarage
  1974  001964  0100               	movlb	0	; () banked
  1975  001966  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  1976  001968  0E91               	movlw	low doWork@avarage
  1977  00196A  6F60               	movwf	?___asfldiv& (0+255),b
  1978  00196C  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  1979  00196E  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  1980  001970  0EA0               	movlw	160
  1981  001972  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  1982  001974  0E42               	movlw	66
  1983  001976  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  1984  001978  EC0E  F02B         	call	___asfldiv	;wreg free
  1985                           
  1986                           ;main.c: 465: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  1987                           ;main.c: 466: readEEPROM(2 * i + 0x50);
  1988  00197C  0101               	movlb	1	; () banked
  1989  00197E  519B               	movf	doWork@i& (0+255),w,b
  1990  001980  0D02               	mullw	2
  1991  001982  0E50               	movlw	80
  1992  001984  24F3               	addwf	prodl,w,c
  1993  001986  6E0E               	movwf	?_readEEPROM,c
  1994  001988  0E00               	movlw	0
  1995  00198A  20F4               	addwfc	prodh,w,c
  1996  00198C  6E0F               	movwf	?_readEEPROM+1,c
  1997  00198E  EC8D  F02E         	call	_readEEPROM	;wreg free
  1998  001992  0100               	movlb	0	; () banked
  1999  001994  6FA4               	movwf	??_doWork& (0+255),b
  2000  001996  0101               	movlb	1	; () banked
  2001  001998  519B               	movf	doWork@i& (0+255),w,b
  2002  00199A  0D02               	mullw	2
  2003  00199C  0E4F               	movlw	79
  2004  00199E  24F3               	addwf	prodl,w,c
  2005  0019A0  6E0E               	movwf	?_readEEPROM,c
  2006  0019A2  0E00               	movlw	0
  2007  0019A4  20F4               	addwfc	prodh,w,c
  2008  0019A6  6E0F               	movwf	?_readEEPROM+1,c
  2009  0019A8  EC8D  F02E         	call	_readEEPROM	;wreg free
  2010  0019AC  0101               	movlb	1	; () banked
  2011  0019AE  6F8B               	movwf	(doWork@B+1)& (0+255),b
  2012  0019B0  0100               	movlb	0	; () banked
  2013  0019B2  51A4               	movf	??_doWork& (0+255),w,b
  2014  0019B4  0101               	movlb	1	; () banked
  2015  0019B6  6F8A               	movwf	doWork@B& (0+255),b
  2016                           
  2017                           ; BSR set to: 1
  2018                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2019  0019B8  0E33               	movlw	51
  2020  0019BA  6E30               	movwf	?___fldiv+4,c
  2021  0019BC  0E13               	movlw	19
  2022  0019BE  6E31               	movwf	?___fldiv+5,c
  2023  0019C0  0E95               	movlw	149
  2024  0019C2  6E32               	movwf	?___fldiv+6,c
  2025  0019C4  0EC3               	movlw	195
  2026  0019C6  6E33               	movwf	?___fldiv+7,c
  2027  0019C8  C18A  F018         	movff	doWork@B,?___lwtofl
  2028  0019CC  C18B  F019         	movff	doWork@B+1,?___lwtofl+1
  2029  0019D0  EC04  F02D         	call	___lwtofl	;wreg free
  2030  0019D4  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2031  0019D8  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2032  0019DC  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2033  0019E0  C018  F02C         	movff	?___lwtofl,?___fldiv
  2034  0019E4  EC40  F027         	call	___fldiv	;wreg free
  2035  0019E8  C02F  F171         	movff	?___fldiv+3,_doWork$2270+3
  2036  0019EC  C02E  F170         	movff	?___fldiv+2,_doWork$2270+2
  2037  0019F0  C02D  F16F         	movff	?___fldiv+1,_doWork$2270+1
  2038  0019F4  C02C  F16E         	movff	?___fldiv,_doWork$2270
  2039                           
  2040                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2041  0019F8  C16E  F099         	movff	_doWork$2270,?_exp
  2042  0019FC  C16F  F09A         	movff	_doWork$2270+1,?_exp+1
  2043  001A00  C170  F09B         	movff	_doWork$2270+2,?_exp+2
  2044  001A04  C171  F09C         	movff	_doWork$2270+3,?_exp+3
  2045  001A08  EC0E  F01E         	call	_exp	;wreg free
  2046  001A0C  C09C  F175         	movff	?_exp+3,_doWork$2271+3
  2047  001A10  C09B  F174         	movff	?_exp+2,_doWork$2271+2
  2048  001A14  C09A  F173         	movff	?_exp+1,_doWork$2271+1
  2049  001A18  C099  F172         	movff	?_exp,_doWork$2271
  2050                           
  2051                           ;main.c: 469: Rinf = 10000.0 * exp(B / -298.15);
  2052  001A1C  C172  F060         	movff	_doWork$2271,?___flmul
  2053  001A20  C173  F061         	movff	_doWork$2271+1,?___flmul+1
  2054  001A24  C174  F062         	movff	_doWork$2271+2,?___flmul+2
  2055  001A28  C175  F063         	movff	_doWork$2271+3,?___flmul+3
  2056  001A2C  0100               	movlb	0	; () banked
  2057  001A2E  6B64               	clrf	(?___flmul+4)& (0+255),b
  2058  001A30  0E40               	movlw	64
  2059  001A32  6F65               	movwf	(?___flmul+5)& (0+255),b
  2060  001A34  0E1C               	movlw	28
  2061  001A36  6F66               	movwf	(?___flmul+6)& (0+255),b
  2062  001A38  0E46               	movlw	70
  2063  001A3A  6F67               	movwf	(?___flmul+7)& (0+255),b
  2064  001A3C  ECA4  F024         	call	___flmul	;wreg free
  2065  001A40  C063  F169         	movff	?___flmul+3,doWork@Rinf+3
  2066  001A44  C062  F168         	movff	?___flmul+2,doWork@Rinf+2
  2067  001A48  C061  F167         	movff	?___flmul+1,doWork@Rinf+1
  2068  001A4C  C060  F166         	movff	?___flmul,doWork@Rinf
  2069                           
  2070                           ;main.c: 471: v = 5.0 * (double) avarage / 1025;
  2071  001A50  0100               	movlb	0	; () banked
  2072  001A52  6B64               	clrf	(?___flmul+4)& (0+255),b
  2073  001A54  6B65               	clrf	(?___flmul+5)& (0+255),b
  2074  001A56  0EA0               	movlw	160
  2075  001A58  6F66               	movwf	(?___flmul+6)& (0+255),b
  2076  001A5A  0E40               	movlw	64
  2077  001A5C  6F67               	movwf	(?___flmul+7)& (0+255),b
  2078  001A5E  C191  F060         	movff	doWork@avarage,?___flmul
  2079  001A62  C192  F061         	movff	doWork@avarage+1,?___flmul+1
  2080  001A66  C193  F062         	movff	doWork@avarage+2,?___flmul+2
  2081  001A6A  C194  F063         	movff	doWork@avarage+3,?___flmul+3
  2082  001A6E  ECA4  F024         	call	___flmul	;wreg free
  2083  001A72  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2084  001A76  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2085  001A7A  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2086  001A7E  C060  F02C         	movff	?___flmul,?___fldiv
  2087  001A82  6A30               	clrf	?___fldiv+4,c
  2088  001A84  0E20               	movlw	32
  2089  001A86  6E31               	movwf	?___fldiv+5,c
  2090  001A88  0E80               	movlw	128
  2091  001A8A  6E32               	movwf	?___fldiv+6,c
  2092  001A8C  0E44               	movlw	68
  2093  001A8E  6E33               	movwf	?___fldiv+7,c
  2094  001A90  EC40  F027         	call	___fldiv	;wreg free
  2095  001A94  C02F  F189         	movff	?___fldiv+3,doWork@v+3
  2096  001A98  C02E  F188         	movff	?___fldiv+2,doWork@v+2
  2097  001A9C  C02D  F187         	movff	?___fldiv+1,doWork@v+1
  2098  001AA0  C02C  F186         	movff	?___fldiv,doWork@v
  2099                           
  2100                           ;main.c: 473: resistance = (calVoltage - 10000.0 * v) / v;
  2101  001AA4  0100               	movlb	0	; () banked
  2102  001AA6  6B64               	clrf	(?___flmul+4)& (0+255),b
  2103  001AA8  0E40               	movlw	64
  2104  001AAA  6F65               	movwf	(?___flmul+5)& (0+255),b
  2105  001AAC  0E1C               	movlw	28
  2106  001AAE  6F66               	movwf	(?___flmul+6)& (0+255),b
  2107  001AB0  0E46               	movlw	70
  2108  001AB2  6F67               	movwf	(?___flmul+7)& (0+255),b
  2109  001AB4  C186  F060         	movff	doWork@v,?___flmul
  2110  001AB8  C187  F061         	movff	doWork@v+1,?___flmul+1
  2111  001ABC  C188  F062         	movff	doWork@v+2,?___flmul+2
  2112  001AC0  C189  F063         	movff	doWork@v+3,?___flmul+3
  2113  001AC4  ECA4  F024         	call	___flmul	;wreg free
  2114  001AC8  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2115  001ACC  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2116  001AD0  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2117  001AD4  C060  F07A         	movff	?___flmul,?___flsub+4
  2118  001AD8  C16A  F076         	movff	doWork@calVoltage,?___flsub
  2119  001ADC  C16B  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2120  001AE0  C16C  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2121  001AE4  C16D  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2122  001AE8  EC28  F02C         	call	___flsub	;wreg free
  2123  001AEC  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2124  001AF0  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2125  001AF4  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2126  001AF8  C076  F02C         	movff	?___flsub,?___fldiv
  2127  001AFC  C186  F030         	movff	doWork@v,?___fldiv+4
  2128  001B00  C187  F031         	movff	doWork@v+1,?___fldiv+5
  2129  001B04  C188  F032         	movff	doWork@v+2,?___fldiv+6
  2130  001B08  C189  F033         	movff	doWork@v+3,?___fldiv+7
  2131  001B0C  EC40  F027         	call	___fldiv	;wreg free
  2132  001B10  C02F  F18F         	movff	?___fldiv+3,doWork@resistance+3
  2133  001B14  C02E  F18E         	movff	?___fldiv+2,doWork@resistance+2
  2134  001B18  C02D  F18D         	movff	?___fldiv+1,doWork@resistance+1
  2135  001B1C  C02C  F18C         	movff	?___fldiv,doWork@resistance
  2136                           
  2137                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2138  001B20  C166  F030         	movff	doWork@Rinf,?___fldiv+4
  2139  001B24  C167  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2140  001B28  C168  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2141  001B2C  C169  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2142  001B30  C18C  F02C         	movff	doWork@resistance,?___fldiv
  2143  001B34  C18D  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2144  001B38  C18E  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2145  001B3C  C18F  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2146  001B40  EC40  F027         	call	___fldiv	;wreg free
  2147  001B44  C02F  F084         	movff	?___fldiv+3,?_log+3
  2148  001B48  C02E  F083         	movff	?___fldiv+2,?_log+2
  2149  001B4C  C02D  F082         	movff	?___fldiv+1,?_log+1
  2150  001B50  C02C  F081         	movff	?___fldiv,?_log
  2151  001B54  ECA3  F022         	call	_log	;wreg free
  2152  001B58  C084  F179         	movff	?_log+3,_doWork$2272+3
  2153  001B5C  C083  F178         	movff	?_log+2,_doWork$2272+2
  2154  001B60  C082  F177         	movff	?_log+1,_doWork$2272+1
  2155  001B64  C081  F176         	movff	?_log,_doWork$2272
  2156                           
  2157                           ;main.c: 475: temp = ((double) B) / log(resistance / Rinf);
  2158  001B68  C18A  F018         	movff	doWork@B,?___lwtofl
  2159  001B6C  C18B  F019         	movff	doWork@B+1,?___lwtofl+1
  2160  001B70  EC04  F02D         	call	___lwtofl	;wreg free
  2161  001B74  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2162  001B78  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2163  001B7C  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2164  001B80  C018  F02C         	movff	?___lwtofl,?___fldiv
  2165  001B84  C176  F030         	movff	_doWork$2272,?___fldiv+4
  2166  001B88  C177  F031         	movff	_doWork$2272+1,?___fldiv+5
  2167  001B8C  C178  F032         	movff	_doWork$2272+2,?___fldiv+6
  2168  001B90  C179  F033         	movff	_doWork$2272+3,?___fldiv+7
  2169  001B94  EC40  F027         	call	___fldiv	;wreg free
  2170  001B98  C02F  F19A         	movff	?___fldiv+3,doWork@temp+3
  2171  001B9C  C02E  F199         	movff	?___fldiv+2,doWork@temp+2
  2172  001BA0  C02D  F198         	movff	?___fldiv+1,doWork@temp+1
  2173  001BA4  C02C  F197         	movff	?___fldiv,doWork@temp
  2174                           
  2175                           ;main.c: 477: temp -= 273.15;
  2176  001BA8  0E01               	movlw	high doWork@temp
  2177  001BAA  0100               	movlb	0	; () banked
  2178  001BAC  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2179  001BAE  0E97               	movlw	low doWork@temp
  2180  001BB0  6F7E               	movwf	?___asflsub& (0+255),b
  2181  001BB2  0E33               	movlw	51
  2182  001BB4  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2183  001BB6  0E93               	movlw	147
  2184  001BB8  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2185  001BBA  0E88               	movlw	136
  2186  001BBC  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2187  001BBE  0E43               	movlw	67
  2188  001BC0  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2189  001BC2  EC75  F02A         	call	___asflsub	;wreg free
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;main.c: 492: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2193  001BC6  0101               	movlb	1	; () banked
  2194  001BC8  519B               	movf	doWork@i& (0+255),w,b
  2195  001BCA  0D02               	mullw	2
  2196  001BCC  0E00               	movlw	low _current_temp
  2197  001BCE  24F3               	addwf	prodl,w,c
  2198  001BD0  6ED9               	movwf	fsr2l,c
  2199  001BD2  0E01               	movlw	high _current_temp
  2200  001BD4  20F4               	addwfc	prodh,w,c
  2201  001BD6  6EDA               	movwf	fsr2h,c
  2202  001BD8  CFDE F0A4          	movff	postinc2,??_doWork
  2203  001BDC  CFDD F0A5          	movff	postdec2,??_doWork+1
  2204  001BE0  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2205  001BE4  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2206  001BE8  0E00               	movlw	0
  2207  001BEA  0100               	movlb	0	; () banked
  2208  001BEC  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2209  001BEE  0EFF               	movlw	255
  2210  001BF0  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2211  001BF2  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2212  001BF4  0101               	movlb	1	; () banked
  2213  001BF6  519B               	movf	doWork@i& (0+255),w,b
  2214  001BF8  EC58  F02B         	call	_getCalibrationValue
  2215  001BFC  C012  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2216  001C00  C013  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2217  001C04  0E00               	movlw	0
  2218  001C06  0100               	movlb	0	; () banked
  2219  001C08  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2220  001C0A  0EFF               	movlw	255
  2221  001C0C  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2222  001C0E  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2223  001C10  6B64               	clrf	(?___flmul+4)& (0+255),b
  2224  001C12  6B65               	clrf	(?___flmul+5)& (0+255),b
  2225  001C14  0EC8               	movlw	200
  2226  001C16  6F66               	movwf	(?___flmul+6)& (0+255),b
  2227  001C18  0E42               	movlw	66
  2228  001C1A  6F67               	movwf	(?___flmul+7)& (0+255),b
  2229  001C1C  C197  F060         	movff	doWork@temp,?___flmul
  2230  001C20  C198  F061         	movff	doWork@temp+1,?___flmul+1
  2231  001C24  C199  F062         	movff	doWork@temp+2,?___flmul+2
  2232  001C28  C19A  F063         	movff	doWork@temp+3,?___flmul+3
  2233  001C2C  ECA4  F024         	call	___flmul	;wreg free
  2234  001C30  C063  F079         	movff	?___flmul+3,?___fltol+3
  2235  001C34  C062  F078         	movff	?___flmul+2,?___fltol+2
  2236  001C38  C061  F077         	movff	?___flmul+1,?___fltol+1
  2237  001C3C  C060  F076         	movff	?___flmul,?___fltol
  2238  001C40  EC36  F028         	call	___fltol	;wreg free
  2239  001C44  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2240  001C46  2576               	addwf	?___fltol& (0+255),w,b
  2241  001C48  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2242  001C4A  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2243  001C4C  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2244  001C4E  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2245  001C50  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2246  001C52  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2247  001C54  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2248  001C56  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2249  001C58  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2250  001C5A  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2251  001C5C  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2252  001C5E  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2253  001C60  6F7C               	movwf	?___aldiv& (0+255),b
  2254  001C62  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2255  001C64  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2256  001C66  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2257  001C68  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2258  001C6A  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2259  001C6C  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2260  001C6E  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2261  001C70  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2262  001C72  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2263  001C74  0E02               	movlw	2
  2264  001C76  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2265  001C78  0E00               	movlw	0
  2266  001C7A  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2267  001C7C  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2268  001C7E  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2269  001C80  EC31  F026         	call	___aldiv	;wreg free
  2270  001C84  0101               	movlb	1	; () banked
  2271  001C86  519B               	movf	doWork@i& (0+255),w,b
  2272  001C88  0D02               	mullw	2
  2273  001C8A  0E00               	movlw	low _current_temp
  2274  001C8C  24F3               	addwf	prodl,w,c
  2275  001C8E  6ED9               	movwf	fsr2l,c
  2276  001C90  0E01               	movlw	high _current_temp
  2277  001C92  20F4               	addwfc	prodh,w,c
  2278  001C94  6EDA               	movwf	fsr2h,c
  2279  001C96  C07C  FFDE         	movff	?___aldiv,postinc2
  2280  001C9A  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;main.c: 513: }
  2284                           ;main.c: 515: if (current_temp[ i ] <
  2285                           ;main.c: 516: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2286                           ;main.c: 517: readEEPROM(2 * i + 0x80))) {
  2287                           
  2288                           ;main.c: 494: }
  2289  001C9E  519B               	movf	doWork@i& (0+255),w,b
  2290  001CA0  0D02               	mullw	2
  2291  001CA2  0E7F               	movlw	127
  2292  001CA4  24F3               	addwf	prodl,w,c
  2293  001CA6  6E0E               	movwf	?_readEEPROM,c
  2294  001CA8  0E00               	movlw	0
  2295  001CAA  20F4               	addwfc	prodh,w,c
  2296  001CAC  6E0F               	movwf	?_readEEPROM+1,c
  2297  001CAE  EC8D  F02E         	call	_readEEPROM	;wreg free
  2298  001CB2  0100               	movlb	0	; () banked
  2299  001CB4  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2300  001CB6  6BA4               	clrf	??_doWork& (0+255),b
  2301  001CB8  0101               	movlb	1	; () banked
  2302  001CBA  519B               	movf	doWork@i& (0+255),w,b
  2303  001CBC  0D02               	mullw	2
  2304  001CBE  0E80               	movlw	128
  2305  001CC0  24F3               	addwf	prodl,w,c
  2306  001CC2  6E0E               	movwf	?_readEEPROM,c
  2307  001CC4  0E00               	movlw	0
  2308  001CC6  20F4               	addwfc	prodh,w,c
  2309  001CC8  6E0F               	movwf	?_readEEPROM+1,c
  2310  001CCA  EC8D  F02E         	call	_readEEPROM	;wreg free
  2311  001CCE  0100               	movlb	0	; () banked
  2312  001CD0  27A4               	addwf	??_doWork& (0+255),f,b
  2313  001CD2  0E00               	movlw	0
  2314  001CD4  23A5               	addwfc	(??_doWork+1)& (0+255),f,b
  2315  001CD6  0101               	movlb	1	; () banked
  2316  001CD8  519B               	movf	doWork@i& (0+255),w,b
  2317  001CDA  0D02               	mullw	2
  2318  001CDC  0E00               	movlw	low _current_temp
  2319  001CDE  24F3               	addwf	prodl,w,c
  2320  001CE0  6ED9               	movwf	fsr2l,c
  2321  001CE2  0E01               	movlw	high _current_temp
  2322  001CE4  20F4               	addwfc	prodh,w,c
  2323  001CE6  6EDA               	movwf	fsr2h,c
  2324  001CE8  CFDE F0A6          	movff	postinc2,??_doWork+2
  2325  001CEC  CFDD F0A7          	movff	postdec2,??_doWork+3
  2326  001CF0  0100               	movlb	0	; () banked
  2327  001CF2  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2328  001CF4  0A80               	xorlw	128
  2329  001CF6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2330  001CF8  51A4               	movf	??_doWork& (0+255),w,b
  2331  001CFA  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  2332  001CFC  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2333  001CFE  0A80               	xorlw	128
  2334  001D00  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  2335  001D02  E23E               	bc	l201
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;main.c: 519: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2339  001D04  90D8               	bcf	status,0,c
  2340  001D06  0101               	movlb	1	; () banked
  2341  001D08  359B               	rlcf	doWork@i& (0+255),w,b
  2342  001D0A  0100               	movlb	0	; () banked
  2343  001D0C  6FA4               	movwf	??_doWork& (0+255),b
  2344  001D0E  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2345  001D10  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2346  001D12  0E7F               	movlw	127
  2347  001D14  25A4               	addwf	??_doWork& (0+255),w,b
  2348  001D16  6E0E               	movwf	?_writeEEPROM,c
  2349  001D18  0E00               	movlw	0
  2350  001D1A  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2351  001D1C  6E0F               	movwf	?_writeEEPROM+1,c
  2352  001D1E  0101               	movlb	1	; () banked
  2353  001D20  519B               	movf	doWork@i& (0+255),w,b
  2354  001D22  0D02               	mullw	2
  2355  001D24  0E00               	movlw	low _current_temp
  2356  001D26  24F3               	addwf	prodl,w,c
  2357  001D28  6ED9               	movwf	fsr2l,c
  2358  001D2A  0E01               	movlw	high _current_temp
  2359  001D2C  20F4               	addwfc	prodh,w,c
  2360  001D2E  6EDA               	movwf	fsr2h,c
  2361  001D30  CFDE F0A6          	movff	postinc2,??_doWork+2
  2362  001D34  CFDD F0A7          	movff	postdec2,??_doWork+3
  2363  001D38  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  2364  001D3C  0100               	movlb	0	; () banked
  2365  001D3E  6BA7               	clrf	(??_doWork+3)& (0+255),b
  2366  001D40  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  2367  001D42  69A7               	setf	(??_doWork+3)& (0+255),b
  2368  001D44  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2369  001D46  6E10               	movwf	?_writeEEPROM+2,c
  2370  001D48  EC7E  F02D         	call	_writeEEPROM	;wreg free
  2371                           
  2372                           ;main.c: 520: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2373  001D4C  90D8               	bcf	status,0,c
  2374  001D4E  0101               	movlb	1	; () banked
  2375  001D50  359B               	rlcf	doWork@i& (0+255),w,b
  2376  001D52  0100               	movlb	0	; () banked
  2377  001D54  6FA4               	movwf	??_doWork& (0+255),b
  2378  001D56  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2379  001D58  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2380  001D5A  0E80               	movlw	128
  2381  001D5C  25A4               	addwf	??_doWork& (0+255),w,b
  2382  001D5E  6E0E               	movwf	?_writeEEPROM,c
  2383  001D60  0E00               	movlw	0
  2384  001D62  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2385  001D64  6E0F               	movwf	?_writeEEPROM+1,c
  2386  001D66  0101               	movlb	1	; () banked
  2387  001D68  519B               	movf	doWork@i& (0+255),w,b
  2388  001D6A  0D02               	mullw	2
  2389  001D6C  0E00               	movlw	low _current_temp
  2390  001D6E  24F3               	addwf	prodl,w,c
  2391  001D70  6ED9               	movwf	fsr2l,c
  2392  001D72  0E01               	movlw	high _current_temp
  2393  001D74  20F4               	addwfc	prodh,w,c
  2394  001D76  6EDA               	movwf	fsr2h,c
  2395  001D78  50DF               	movf	indf2,w,c
  2396  001D7A  6E10               	movwf	?_writeEEPROM+2,c
  2397  001D7C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  2398  001D80                     l201:
  2399                           
  2400                           ;main.c: 521: }
  2401                           ;main.c: 524: if (current_temp[ i ] >
  2402                           ;main.c: 525: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2403                           ;main.c: 526: readEEPROM(2 * i + 0x8C))) {
  2404  001D80  0101               	movlb	1	; () banked
  2405  001D82  519B               	movf	doWork@i& (0+255),w,b
  2406  001D84  0D02               	mullw	2
  2407  001D86  0E00               	movlw	low _current_temp
  2408  001D88  24F3               	addwf	prodl,w,c
  2409  001D8A  6ED9               	movwf	fsr2l,c
  2410  001D8C  0E01               	movlw	high _current_temp
  2411  001D8E  20F4               	addwfc	prodh,w,c
  2412  001D90  6EDA               	movwf	fsr2h,c
  2413  001D92  CFDE F0A4          	movff	postinc2,??_doWork
  2414  001D96  CFDD F0A5          	movff	postdec2,??_doWork+1
  2415  001D9A  519B               	movf	doWork@i& (0+255),w,b
  2416  001D9C  0D02               	mullw	2
  2417  001D9E  0E8B               	movlw	139
  2418  001DA0  24F3               	addwf	prodl,w,c
  2419  001DA2  6E0E               	movwf	?_readEEPROM,c
  2420  001DA4  0E00               	movlw	0
  2421  001DA6  20F4               	addwfc	prodh,w,c
  2422  001DA8  6E0F               	movwf	?_readEEPROM+1,c
  2423  001DAA  EC8D  F02E         	call	_readEEPROM	;wreg free
  2424  001DAE  0100               	movlb	0	; () banked
  2425  001DB0  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2426  001DB2  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2427  001DB4  0101               	movlb	1	; () banked
  2428  001DB6  519B               	movf	doWork@i& (0+255),w,b
  2429  001DB8  0D02               	mullw	2
  2430  001DBA  0E8C               	movlw	140
  2431  001DBC  24F3               	addwf	prodl,w,c
  2432  001DBE  6E0E               	movwf	?_readEEPROM,c
  2433  001DC0  0E00               	movlw	0
  2434  001DC2  20F4               	addwfc	prodh,w,c
  2435  001DC4  6E0F               	movwf	?_readEEPROM+1,c
  2436  001DC6  EC8D  F02E         	call	_readEEPROM	;wreg free
  2437  001DCA  0100               	movlb	0	; () banked
  2438  001DCC  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2439  001DCE  0E00               	movlw	0
  2440  001DD0  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2441  001DD2  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2442  001DD4  0A80               	xorlw	128
  2443  001DD6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2444  001DD8  51A4               	movf	??_doWork& (0+255),w,b
  2445  001DDA  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  2446  001DDC  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2447  001DDE  0A80               	xorlw	128
  2448  001DE0  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  2449  001DE2  E23E               	bc	l12092
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 528: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2453  001DE4  90D8               	bcf	status,0,c
  2454  001DE6  0101               	movlb	1	; () banked
  2455  001DE8  359B               	rlcf	doWork@i& (0+255),w,b
  2456  001DEA  0100               	movlb	0	; () banked
  2457  001DEC  6FA4               	movwf	??_doWork& (0+255),b
  2458  001DEE  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2459  001DF0  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2460  001DF2  0E8B               	movlw	139
  2461  001DF4  25A4               	addwf	??_doWork& (0+255),w,b
  2462  001DF6  6E0E               	movwf	?_writeEEPROM,c
  2463  001DF8  0E00               	movlw	0
  2464  001DFA  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2465  001DFC  6E0F               	movwf	?_writeEEPROM+1,c
  2466  001DFE  0101               	movlb	1	; () banked
  2467  001E00  519B               	movf	doWork@i& (0+255),w,b
  2468  001E02  0D02               	mullw	2
  2469  001E04  0E00               	movlw	low _current_temp
  2470  001E06  24F3               	addwf	prodl,w,c
  2471  001E08  6ED9               	movwf	fsr2l,c
  2472  001E0A  0E01               	movlw	high _current_temp
  2473  001E0C  20F4               	addwfc	prodh,w,c
  2474  001E0E  6EDA               	movwf	fsr2h,c
  2475  001E10  CFDE F0A6          	movff	postinc2,??_doWork+2
  2476  001E14  CFDD F0A7          	movff	postdec2,??_doWork+3
  2477  001E18  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  2478  001E1C  0100               	movlb	0	; () banked
  2479  001E1E  6BA7               	clrf	(??_doWork+3)& (0+255),b
  2480  001E20  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  2481  001E22  69A7               	setf	(??_doWork+3)& (0+255),b
  2482  001E24  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2483  001E26  6E10               	movwf	?_writeEEPROM+2,c
  2484  001E28  EC7E  F02D         	call	_writeEEPROM	;wreg free
  2485                           
  2486                           ;main.c: 529: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2487  001E2C  90D8               	bcf	status,0,c
  2488  001E2E  0101               	movlb	1	; () banked
  2489  001E30  359B               	rlcf	doWork@i& (0+255),w,b
  2490  001E32  0100               	movlb	0	; () banked
  2491  001E34  6FA4               	movwf	??_doWork& (0+255),b
  2492  001E36  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2493  001E38  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2494  001E3A  0E8C               	movlw	140
  2495  001E3C  25A4               	addwf	??_doWork& (0+255),w,b
  2496  001E3E  6E0E               	movwf	?_writeEEPROM,c
  2497  001E40  0E00               	movlw	0
  2498  001E42  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2499  001E44  6E0F               	movwf	?_writeEEPROM+1,c
  2500  001E46  0101               	movlb	1	; () banked
  2501  001E48  519B               	movf	doWork@i& (0+255),w,b
  2502  001E4A  0D02               	mullw	2
  2503  001E4C  0E00               	movlw	low _current_temp
  2504  001E4E  24F3               	addwf	prodl,w,c
  2505  001E50  6ED9               	movwf	fsr2l,c
  2506  001E52  0E01               	movlw	high _current_temp
  2507  001E54  20F4               	addwfc	prodh,w,c
  2508  001E56  6EDA               	movwf	fsr2h,c
  2509  001E58  50DF               	movf	indf2,w,c
  2510  001E5A  6E10               	movwf	?_writeEEPROM+2,c
  2511  001E5C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  2512  001E60                     l12092:
  2513                           
  2514                           ;main.c: 530: }
  2515                           ;main.c: 533: adc_conversion_flags &= ~(1 << i);
  2516  001E60  C19B  F0A4         	movff	doWork@i,??_doWork
  2517  001E64  0E01               	movlw	1
  2518  001E66  0100               	movlb	0	; () banked
  2519  001E68  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2520  001E6A  2BA4               	incf	??_doWork& (0+255),f,b
  2521  001E6C  D002               	goto	u10494
  2522  001E6E                     u10495:
  2523  001E6E  90D8               	bcf	status,0,c
  2524  001E70  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2525  001E72                     u10494:
  2526  001E72  2FA4               	decfsz	??_doWork& (0+255),f,b
  2527  001E74  D7FC               	goto	u10495
  2528  001E76  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2529  001E78  17B3               	andwf	_adc_conversion_flags& (0+255),f,b
  2530  001E7A                     l12094:
  2531                           
  2532                           ; BSR set to: 0
  2533  001E7A  0101               	movlb	1	; () banked
  2534  001E7C  2B9B               	incf	doWork@i& (0+255),f,b
  2535                           
  2536                           ; BSR set to: 1
  2537  001E7E  0E05               	movlw	5
  2538  001E80  659B               	cpfsgt	doWork@i& (0+255),b
  2539  001E82  D512               	goto	l12034
  2540                           
  2541                           ; BSR set to: 1
  2542                           ;main.c: 535: }
  2543                           ;main.c: 536: }
  2544                           ;main.c: 539: if (0x03 == vscp_node_state) {
  2545  001E84  0100               	movlb	0	; () banked
  2546  001E86  51BB               	movf	_vscp_node_state& (0+255),w,b
  2547  001E88  0A03               	xorlw	3
  2548  001E8A  E001 D244          	bnz	l224
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 542: for (i = 0; i < 6; i++) {
  2552  001E8E  0101               	movlb	1	; () banked
  2553  001E90  6B9B               	clrf	doWork@i& (0+255),b
  2554  001E92                     l12106:
  2555                           
  2556                           ; BSR set to: 1
  2557                           ;main.c: 545: if (low_alarm & 1 << i) {
  2558  001E92  C19B  F0A4         	movff	doWork@i,??_doWork
  2559  001E96  0E01               	movlw	1
  2560  001E98  0100               	movlb	0	; () banked
  2561  001E9A  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2562  001E9C  2BA4               	incf	??_doWork& (0+255),f,b
  2563  001E9E  D002               	goto	u10524
  2564  001EA0                     u10525:
  2565  001EA0  90D8               	bcf	status,0,c
  2566  001EA2  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2567  001EA4                     u10524:
  2568  001EA4  2FA4               	decfsz	??_doWork& (0+255),f,b
  2569  001EA6  D7FC               	goto	u10525
  2570  001EA8  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2571  001EAA  15B5               	andwf	_low_alarm& (0+255),w,b
  2572  001EAC  E063               	bz	l12114
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;main.c: 548: setpoint =
  2576                           ;main.c: 549: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2577                           ;main.c: 550: readEEPROM(2 * i + 0x5C) +
  2578                           ;main.c: 551: readEEPROM(i + 0x97)*100);
  2579  001EAE  90D8               	bcf	status,0,c
  2580  001EB0  0101               	movlb	1	; () banked
  2581  001EB2  359B               	rlcf	doWork@i& (0+255),w,b
  2582  001EB4  0100               	movlb	0	; () banked
  2583  001EB6  6FA4               	movwf	??_doWork& (0+255),b
  2584  001EB8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2585  001EBA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2586  001EBC  0E5C               	movlw	92
  2587  001EBE  25A4               	addwf	??_doWork& (0+255),w,b
  2588  001EC0  6E0E               	movwf	?_readEEPROM,c
  2589  001EC2  0E00               	movlw	0
  2590  001EC4  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2591  001EC6  6E0F               	movwf	?_readEEPROM+1,c
  2592  001EC8  EC8D  F02E         	call	_readEEPROM	;wreg free
  2593  001ECC  0100               	movlb	0	; () banked
  2594  001ECE  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2595  001ED0  90D8               	bcf	status,0,c
  2596  001ED2  0101               	movlb	1	; () banked
  2597  001ED4  359B               	rlcf	doWork@i& (0+255),w,b
  2598  001ED6  0100               	movlb	0	; () banked
  2599  001ED8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2600  001EDA  6BA8               	clrf	(??_doWork+4)& (0+255),b
  2601  001EDC  37A8               	rlcf	(??_doWork+4)& (0+255),f,b
  2602  001EDE  0E5B               	movlw	91
  2603  001EE0  25A7               	addwf	(??_doWork+3)& (0+255),w,b
  2604  001EE2  6E0E               	movwf	?_readEEPROM,c
  2605  001EE4  0E00               	movlw	0
  2606  001EE6  21A8               	addwfc	(??_doWork+4)& (0+255),w,b
  2607  001EE8  6E0F               	movwf	?_readEEPROM+1,c
  2608  001EEA  EC8D  F02E         	call	_readEEPROM	;wreg free
  2609  001EEE  0100               	movlb	0	; () banked
  2610  001EF0  6FAA               	movwf	(??_doWork+6)& (0+255),b
  2611  001EF2  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2612  001EF4  0E97               	movlw	151
  2613  001EF6  0101               	movlb	1	; () banked
  2614  001EF8  259B               	addwf	doWork@i& (0+255),w,b
  2615  001EFA  6E0E               	movwf	?_readEEPROM,c
  2616  001EFC  6A0F               	clrf	?_readEEPROM+1,c
  2617  001EFE  0E00               	movlw	0
  2618  001F00  220F               	addwfc	?_readEEPROM+1,f,c
  2619  001F02  EC8D  F02E         	call	_readEEPROM	;wreg free
  2620  001F06  0D64               	mullw	100
  2621  001F08  0100               	movlb	0	; () banked
  2622  001F0A  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2623  001F0C  24F3               	addwf	prodl,w,c
  2624  001F0E  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2625  001F10  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2626  001F12  20F4               	addwfc	prodh,w,c
  2627  001F14  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2628  001F16  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2629  001F18  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2630  001F1A  0101               	movlb	1	; () banked
  2631  001F1C  6F95               	movwf	doWork@setpoint& (0+255),b
  2632  001F1E  0100               	movlb	0	; () banked
  2633  001F20  0E00               	movlw	0
  2634  001F22  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2635  001F24  0101               	movlb	1	; () banked
  2636  001F26  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2637                           
  2638                           ; BSR set to: 1
  2639                           ;main.c: 556: if (current_temp[ i ] > setpoint) {
  2640  001F28  519B               	movf	doWork@i& (0+255),w,b
  2641  001F2A  0D02               	mullw	2
  2642  001F2C  0E00               	movlw	low _current_temp
  2643  001F2E  24F3               	addwf	prodl,w,c
  2644  001F30  6ED9               	movwf	fsr2l,c
  2645  001F32  0E01               	movlw	high _current_temp
  2646  001F34  20F4               	addwfc	prodh,w,c
  2647  001F36  6EDA               	movwf	fsr2h,c
  2648  001F38  CFDE F0A4          	movff	postinc2,??_doWork
  2649  001F3C  CFDD F0A5          	movff	postdec2,??_doWork+1
  2650  001F40  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  2651  001F42  0A80               	xorlw	128
  2652  001F44  0100               	movlb	0	; () banked
  2653  001F46  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2654  001F48  51A4               	movf	??_doWork& (0+255),w,b
  2655  001F4A  0101               	movlb	1	; () banked
  2656  001F4C  5D95               	subwf	doWork@setpoint& (0+255),w,b
  2657  001F4E  0100               	movlb	0	; () banked
  2658  001F50  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2659  001F52  0A80               	xorlw	128
  2660  001F54  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  2661  001F56  E301 D0BA          	bc	l208
  2662  001F5A                     l12112:
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;main.c: 559: low_alarm &= ~(1 << i);
  2666  001F5A  C19B  F0A4         	movff	doWork@i,??_doWork
  2667  001F5E  0E01               	movlw	1
  2668  001F60  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2669  001F62  2BA4               	incf	??_doWork& (0+255),f,b
  2670  001F64  D002               	goto	u10554
  2671  001F66                     u10555:
  2672  001F66  90D8               	bcf	status,0,c
  2673  001F68  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2674  001F6A                     u10554:
  2675  001F6A  2FA4               	decfsz	??_doWork& (0+255),f,b
  2676  001F6C  D7FC               	goto	u10555
  2677  001F6E  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2678  001F70  17B5               	andwf	_low_alarm& (0+255),f,b
  2679  001F72  D0AD               	goto	l208
  2680  001F74                     l12114:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 564: else {
  2684                           ;main.c: 568: setpoint =
  2685                           ;main.c: 569: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2686                           ;main.c: 570: readEEPROM(2 * i + 0x5C));
  2687  001F74  0101               	movlb	1	; () banked
  2688  001F76  519B               	movf	doWork@i& (0+255),w,b
  2689  001F78  0D02               	mullw	2
  2690  001F7A  0E5C               	movlw	92
  2691  001F7C  24F3               	addwf	prodl,w,c
  2692  001F7E  6E0E               	movwf	?_readEEPROM,c
  2693  001F80  0E00               	movlw	0
  2694  001F82  20F4               	addwfc	prodh,w,c
  2695  001F84  6E0F               	movwf	?_readEEPROM+1,c
  2696  001F86  EC8D  F02E         	call	_readEEPROM	;wreg free
  2697  001F8A  0100               	movlb	0	; () banked
  2698  001F8C  6FA4               	movwf	??_doWork& (0+255),b
  2699  001F8E  0101               	movlb	1	; () banked
  2700  001F90  519B               	movf	doWork@i& (0+255),w,b
  2701  001F92  0D02               	mullw	2
  2702  001F94  0E5B               	movlw	91
  2703  001F96  24F3               	addwf	prodl,w,c
  2704  001F98  6E0E               	movwf	?_readEEPROM,c
  2705  001F9A  0E00               	movlw	0
  2706  001F9C  20F4               	addwfc	prodh,w,c
  2707  001F9E  6E0F               	movwf	?_readEEPROM+1,c
  2708  001FA0  EC8D  F02E         	call	_readEEPROM	;wreg free
  2709  001FA4  0100               	movlb	0	; () banked
  2710  001FA6  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2711  001FA8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2712  001FAA  51A4               	movf	??_doWork& (0+255),w,b
  2713  001FAC  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  2714  001FAE  0101               	movlb	1	; () banked
  2715  001FB0  6F95               	movwf	doWork@setpoint& (0+255),b
  2716  001FB2  0100               	movlb	0	; () banked
  2717  001FB4  0E00               	movlw	0
  2718  001FB6  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  2719  001FB8  0101               	movlb	1	; () banked
  2720  001FBA  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2721                           
  2722                           ; BSR set to: 1
  2723                           ;main.c: 572: if (current_temp[ i ] < setpoint) {
  2724  001FBC  519B               	movf	doWork@i& (0+255),w,b
  2725  001FBE  0D02               	mullw	2
  2726  001FC0  0E00               	movlw	low _current_temp
  2727  001FC2  24F3               	addwf	prodl,w,c
  2728  001FC4  6ED9               	movwf	fsr2l,c
  2729  001FC6  0E01               	movlw	high _current_temp
  2730  001FC8  20F4               	addwfc	prodh,w,c
  2731  001FCA  6EDA               	movwf	fsr2h,c
  2732  001FCC  CFDE F0A4          	movff	postinc2,??_doWork
  2733  001FD0  CFDD F0A5          	movff	postdec2,??_doWork+1
  2734  001FD4  0100               	movlb	0	; () banked
  2735  001FD6  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2736  001FD8  0A80               	xorlw	128
  2737  001FDA  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2738  001FDC  0101               	movlb	1	; () banked
  2739  001FDE  5195               	movf	doWork@setpoint& (0+255),w,b
  2740  001FE0  0100               	movlb	0	; () banked
  2741  001FE2  5DA4               	subwf	??_doWork& (0+255),w,b
  2742  001FE4  0101               	movlb	1	; () banked
  2743  001FE6  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  2744  001FE8  0A80               	xorlw	128
  2745  001FEA  0100               	movlb	0	; () banked
  2746  001FEC  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  2747  001FEE  E26F               	bc	l208
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;main.c: 575: low_alarm |= (1 << i);
  2751  001FF0  C19B  F0A4         	movff	doWork@i,??_doWork
  2752  001FF4  0E01               	movlw	1
  2753  001FF6  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2754  001FF8  2BA4               	incf	??_doWork& (0+255),f,b
  2755  001FFA  D002               	goto	u10574
  2756  001FFC                     u10575:
  2757  001FFC  90D8               	bcf	status,0,c
  2758  001FFE  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2759  002000                     u10574:
  2760  002000  2FA4               	decfsz	??_doWork& (0+255),f,b
  2761  002002  D7FC               	goto	u10575
  2762  002004  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2763  002006  13B5               	iorwf	_low_alarm& (0+255),f,b
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;main.c: 580: vscp_alarmstatus |= 1;
  2767  002008  804B               	bsf	_vscp_alarmstatus,0,c
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 583: if (readEEPROM(i + 0x43) & (1<<3)) {
  2771  00200A  0E43               	movlw	67
  2772  00200C  0101               	movlb	1	; () banked
  2773  00200E  259B               	addwf	doWork@i& (0+255),w,b
  2774  002010  6E0E               	movwf	?_readEEPROM,c
  2775  002012  6A0F               	clrf	?_readEEPROM+1,c
  2776  002014  0E00               	movlw	0
  2777  002016  220F               	addwfc	?_readEEPROM+1,f,c
  2778  002018  EC8D  F02E         	call	_readEEPROM	;wreg free
  2779  00201C  0100               	movlb	0	; () banked
  2780  00201E  6FA4               	movwf	??_doWork& (0+255),b
  2781  002020  A7A4               	btfss	??_doWork& (0+255),3,b
  2782  002022  D055               	goto	l208
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 585: vscp_omsg.vscp_class = 1;
  2786  002024  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2787  002026  0E01               	movlw	1
  2788  002028  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2789                           
  2790                           ;main.c: 586: vscp_omsg.vscp_type = 2;
  2791  00202A  0E02               	movlw	2
  2792  00202C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 587: vscp_omsg.priority = 0x00;
  2796  00202E  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  2797                           
  2798                           ;main.c: 588: vscp_omsg.flags = 0x80 + 3;
  2799  002030  0E83               	movlw	131
  2800  002032  6FCA               	movwf	_vscp_omsg& (0+255),b
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 591: if (readEEPROM(i + 0x43) & (1<<5)) {
  2804  002034  0E43               	movlw	67
  2805  002036  0101               	movlb	1	; () banked
  2806  002038  259B               	addwf	doWork@i& (0+255),w,b
  2807  00203A  6E0E               	movwf	?_readEEPROM,c
  2808  00203C  6A0F               	clrf	?_readEEPROM+1,c
  2809  00203E  0E00               	movlw	0
  2810  002040  220F               	addwfc	?_readEEPROM+1,f,c
  2811  002042  EC8D  F02E         	call	_readEEPROM	;wreg free
  2812  002046  0100               	movlb	0	; () banked
  2813  002048  6FA4               	movwf	??_doWork& (0+255),b
  2814  00204A  ABA4               	btfss	??_doWork& (0+255),5,b
  2815  00204C  D017               	goto	l12136
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<6)) {
  2819  00204E  0E43               	movlw	67
  2820  002050  0101               	movlb	1	; () banked
  2821  002052  259B               	addwf	doWork@i& (0+255),w,b
  2822  002054  6E0E               	movwf	?_readEEPROM,c
  2823  002056  6A0F               	clrf	?_readEEPROM+1,c
  2824  002058  0E00               	movlw	0
  2825  00205A  220F               	addwfc	?_readEEPROM+1,f,c
  2826  00205C  EC8D  F02E         	call	_readEEPROM	;wreg free
  2827  002060  0100               	movlb	0	; () banked
  2828  002062  6FA4               	movwf	??_doWork& (0+255),b
  2829  002064  ADA4               	btfss	??_doWork& (0+255),6,b
  2830  002066  D005               	goto	l12134
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  2834  002068  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2835  00206A  0E1E               	movlw	30
  2836  00206C  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2837                           
  2838                           ;main.c: 595: vscp_omsg.vscp_type = 5;
  2839  00206E  0E05               	movlw	5
  2840  002070  D004               	goto	L1
  2841  002072                     l12134:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 597: else {
  2845                           ;main.c: 598: vscp_omsg.vscp_class = 30;
  2846  002072  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2847  002074  0E1E               	movlw	30
  2848  002076  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2849                           
  2850                           ;main.c: 599: vscp_omsg.vscp_type = 6;
  2851  002078  0E06               	movlw	6
  2852  00207A                     L1:
  2853  00207A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2854  00207C                     l12136:
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;main.c: 600: }
  2858                           ;main.c: 602: }
  2859                           ;main.c: 604: vscp_omsg.data[ 0 ] = i;
  2860  00207C  C19B  F0CF         	movff	doWork@i,_vscp_omsg+5
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 605: vscp_omsg.data[ 1 ] =
  2864                           ;main.c: 606: readEEPROM(2 * i + 0x73);
  2865  002080  90D8               	bcf	status,0,c
  2866  002082  0101               	movlb	1	; () banked
  2867  002084  359B               	rlcf	doWork@i& (0+255),w,b
  2868  002086  0100               	movlb	0	; () banked
  2869  002088  6FA4               	movwf	??_doWork& (0+255),b
  2870  00208A  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2871  00208C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2872  00208E  0E73               	movlw	115
  2873  002090  25A4               	addwf	??_doWork& (0+255),w,b
  2874  002092  6E0E               	movwf	?_readEEPROM,c
  2875  002094  0E00               	movlw	0
  2876  002096  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2877  002098  6E0F               	movwf	?_readEEPROM+1,c
  2878  00209A  EC8D  F02E         	call	_readEEPROM	;wreg free
  2879  00209E  0100               	movlb	0	; () banked
  2880  0020A0  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;main.c: 607: vscp_omsg.data[ 2 ] =
  2884                           ;main.c: 608: readEEPROM(2 * i + 0x74);
  2885  0020A2  90D8               	bcf	status,0,c
  2886  0020A4  0101               	movlb	1	; () banked
  2887  0020A6  359B               	rlcf	doWork@i& (0+255),w,b
  2888  0020A8  0100               	movlb	0	; () banked
  2889  0020AA  6FA4               	movwf	??_doWork& (0+255),b
  2890  0020AC  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2891  0020AE  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2892  0020B0  0E74               	movlw	116
  2893  0020B2  25A4               	addwf	??_doWork& (0+255),w,b
  2894  0020B4  6E0E               	movwf	?_readEEPROM,c
  2895  0020B6  0E00               	movlw	0
  2896  0020B8  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2897  0020BA  6E0F               	movwf	?_readEEPROM+1,c
  2898  0020BC  EC8D  F02E         	call	_readEEPROM	;wreg free
  2899  0020C0  0100               	movlb	0	; () banked
  2900  0020C2  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;main.c: 611: if (!vscp_sendEvent()) {
  2904  0020C4  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  2905  0020C8  0900               	iorlw	0
  2906  0020CA  E101 D746          	bz	l12112
  2907  0020CE                     l208:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;main.c: 615: }
  2911                           ;main.c: 616: }
  2912                           ;main.c: 617: }
  2913                           ;main.c: 618: }
  2914                           ;main.c: 621: if ( high_alarm & (1 << i ) ) {
  2915  0020CE  C19B  F0A4         	movff	doWork@i,??_doWork
  2916  0020D2  0E01               	movlw	1
  2917  0020D4  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2918  0020D6  2BA4               	incf	??_doWork& (0+255),f,b
  2919  0020D8  D002               	goto	u10624
  2920  0020DA                     u10625:
  2921  0020DA  90D8               	bcf	status,0,c
  2922  0020DC  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2923  0020DE                     u10624:
  2924  0020DE  2FA4               	decfsz	??_doWork& (0+255),f,b
  2925  0020E0  D7FC               	goto	u10625
  2926  0020E2  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2927  0020E4  15B4               	andwf	_high_alarm& (0+255),w,b
  2928  0020E6  E067               	bz	l12152
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;main.c: 625: setpoint =
  2932                           ;main.c: 626: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2933                           ;main.c: 627: readEEPROM(2 * i + 0x68) -
  2934                           ;main.c: 628: readEEPROM(i + 0x97)*100);
  2935  0020E8  90D8               	bcf	status,0,c
  2936  0020EA  0101               	movlb	1	; () banked
  2937  0020EC  359B               	rlcf	doWork@i& (0+255),w,b
  2938  0020EE  0100               	movlb	0	; () banked
  2939  0020F0  6FA4               	movwf	??_doWork& (0+255),b
  2940  0020F2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2941  0020F4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2942  0020F6  0E67               	movlw	103
  2943  0020F8  25A4               	addwf	??_doWork& (0+255),w,b
  2944  0020FA  6E0E               	movwf	?_readEEPROM,c
  2945  0020FC  0E00               	movlw	0
  2946  0020FE  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2947  002100  6E0F               	movwf	?_readEEPROM+1,c
  2948  002102  EC8D  F02E         	call	_readEEPROM	;wreg free
  2949  002106  0100               	movlb	0	; () banked
  2950  002108  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2951  00210A  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2952  00210C  90D8               	bcf	status,0,c
  2953  00210E  0101               	movlb	1	; () banked
  2954  002110  359B               	rlcf	doWork@i& (0+255),w,b
  2955  002112  0100               	movlb	0	; () banked
  2956  002114  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2957  002116  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2958  002118  37A9               	rlcf	(??_doWork+5)& (0+255),f,b
  2959  00211A  0E68               	movlw	104
  2960  00211C  25A8               	addwf	(??_doWork+4)& (0+255),w,b
  2961  00211E  6E0E               	movwf	?_readEEPROM,c
  2962  002120  0E00               	movlw	0
  2963  002122  21A9               	addwfc	(??_doWork+5)& (0+255),w,b
  2964  002124  6E0F               	movwf	?_readEEPROM+1,c
  2965  002126  EC8D  F02E         	call	_readEEPROM	;wreg free
  2966  00212A  0100               	movlb	0	; () banked
  2967  00212C  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2968  00212E  0E00               	movlw	0
  2969  002130  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2970  002132  0E97               	movlw	151
  2971  002134  0101               	movlb	1	; () banked
  2972  002136  259B               	addwf	doWork@i& (0+255),w,b
  2973  002138  6E0E               	movwf	?_readEEPROM,c
  2974  00213A  6A0F               	clrf	?_readEEPROM+1,c
  2975  00213C  0E00               	movlw	0
  2976  00213E  220F               	addwfc	?_readEEPROM+1,f,c
  2977  002140  EC8D  F02E         	call	_readEEPROM	;wreg free
  2978  002144  6E12               	movwf	?___wmul,c
  2979  002146  6A13               	clrf	?___wmul+1,c
  2980  002148  6815               	setf	?___wmul+3,c
  2981  00214A  0E9C               	movlw	156
  2982  00214C  6E14               	movwf	?___wmul+2,c
  2983  00214E  EC82  F02C         	call	___wmul	;wreg free
  2984  002152  5012               	movf	?___wmul,w,c
  2985  002154  0100               	movlb	0	; () banked
  2986  002156  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2987  002158  0101               	movlb	1	; () banked
  2988  00215A  6F95               	movwf	doWork@setpoint& (0+255),b
  2989  00215C  5013               	movf	?___wmul+1,w,c
  2990  00215E  0100               	movlb	0	; () banked
  2991  002160  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2992  002162  0101               	movlb	1	; () banked
  2993  002164  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2994                           
  2995                           ; BSR set to: 1
  2996                           ;main.c: 631: if (current_temp[ i ] < setpoint) {
  2997  002166  519B               	movf	doWork@i& (0+255),w,b
  2998  002168  0D02               	mullw	2
  2999  00216A  0E00               	movlw	low _current_temp
  3000  00216C  24F3               	addwf	prodl,w,c
  3001  00216E  6ED9               	movwf	fsr2l,c
  3002  002170  0E01               	movlw	high _current_temp
  3003  002172  20F4               	addwfc	prodh,w,c
  3004  002174  6EDA               	movwf	fsr2h,c
  3005  002176  CFDE F0A4          	movff	postinc2,??_doWork
  3006  00217A  CFDD F0A5          	movff	postdec2,??_doWork+1
  3007  00217E  0100               	movlb	0	; () banked
  3008  002180  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3009  002182  0A80               	xorlw	128
  3010  002184  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3011  002186  0101               	movlb	1	; () banked
  3012  002188  5195               	movf	doWork@setpoint& (0+255),w,b
  3013  00218A  0100               	movlb	0	; () banked
  3014  00218C  5DA4               	subwf	??_doWork& (0+255),w,b
  3015  00218E  0101               	movlb	1	; () banked
  3016  002190  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  3017  002192  0A80               	xorlw	128
  3018  002194  0100               	movlb	0	; () banked
  3019  002196  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3020  002198  E301 D0B8          	bc	l12184
  3021  00219C                     l12150:
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;main.c: 634: high_alarm &= ~(1 << i);
  3025  00219C  C19B  F0A4         	movff	doWork@i,??_doWork
  3026  0021A0  0E01               	movlw	1
  3027  0021A2  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3028  0021A4  2BA4               	incf	??_doWork& (0+255),f,b
  3029  0021A6  D002               	goto	u10654
  3030  0021A8                     u10655:
  3031  0021A8  90D8               	bcf	status,0,c
  3032  0021AA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3033  0021AC                     u10654:
  3034  0021AC  2FA4               	decfsz	??_doWork& (0+255),f,b
  3035  0021AE  D7FC               	goto	u10655
  3036  0021B0  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  3037  0021B2  17B4               	andwf	_high_alarm& (0+255),f,b
  3038  0021B4  D0AB               	goto	l12184
  3039  0021B6                     l12152:
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;main.c: 639: else {
  3043                           ;main.c: 644: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  3044                           ;main.c: 645: readEEPROM(2 * i + 0x68));
  3045  0021B6  0101               	movlb	1	; () banked
  3046  0021B8  519B               	movf	doWork@i& (0+255),w,b
  3047  0021BA  0D02               	mullw	2
  3048  0021BC  0E68               	movlw	104
  3049  0021BE  24F3               	addwf	prodl,w,c
  3050  0021C0  6E0E               	movwf	?_readEEPROM,c
  3051  0021C2  0E00               	movlw	0
  3052  0021C4  20F4               	addwfc	prodh,w,c
  3053  0021C6  6E0F               	movwf	?_readEEPROM+1,c
  3054  0021C8  EC8D  F02E         	call	_readEEPROM	;wreg free
  3055  0021CC  0100               	movlb	0	; () banked
  3056  0021CE  6FA4               	movwf	??_doWork& (0+255),b
  3057  0021D0  0101               	movlb	1	; () banked
  3058  0021D2  519B               	movf	doWork@i& (0+255),w,b
  3059  0021D4  0D02               	mullw	2
  3060  0021D6  0E67               	movlw	103
  3061  0021D8  24F3               	addwf	prodl,w,c
  3062  0021DA  6E0E               	movwf	?_readEEPROM,c
  3063  0021DC  0E00               	movlw	0
  3064  0021DE  20F4               	addwfc	prodh,w,c
  3065  0021E0  6E0F               	movwf	?_readEEPROM+1,c
  3066  0021E2  EC8D  F02E         	call	_readEEPROM	;wreg free
  3067  0021E6  0100               	movlb	0	; () banked
  3068  0021E8  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3069  0021EA  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3070  0021EC  51A4               	movf	??_doWork& (0+255),w,b
  3071  0021EE  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  3072  0021F0  0101               	movlb	1	; () banked
  3073  0021F2  6F95               	movwf	doWork@setpoint& (0+255),b
  3074  0021F4  0100               	movlb	0	; () banked
  3075  0021F6  0E00               	movlw	0
  3076  0021F8  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  3077  0021FA  0101               	movlb	1	; () banked
  3078  0021FC  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;main.c: 647: if (current_temp[ i ] > setpoint) {
  3082  0021FE  519B               	movf	doWork@i& (0+255),w,b
  3083  002200  0D02               	mullw	2
  3084  002202  0E00               	movlw	low _current_temp
  3085  002204  24F3               	addwf	prodl,w,c
  3086  002206  6ED9               	movwf	fsr2l,c
  3087  002208  0E01               	movlw	high _current_temp
  3088  00220A  20F4               	addwfc	prodh,w,c
  3089  00220C  6EDA               	movwf	fsr2h,c
  3090  00220E  CFDE F0A4          	movff	postinc2,??_doWork
  3091  002212  CFDD F0A5          	movff	postdec2,??_doWork+1
  3092  002216  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  3093  002218  0A80               	xorlw	128
  3094  00221A  0100               	movlb	0	; () banked
  3095  00221C  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3096  00221E  51A4               	movf	??_doWork& (0+255),w,b
  3097  002220  0101               	movlb	1	; () banked
  3098  002222  5D95               	subwf	doWork@setpoint& (0+255),w,b
  3099  002224  0100               	movlb	0	; () banked
  3100  002226  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3101  002228  0A80               	xorlw	128
  3102  00222A  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3103  00222C  E26F               	bc	l12184
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;main.c: 650: high_alarm |= (1 << i);
  3107  00222E  C19B  F0A4         	movff	doWork@i,??_doWork
  3108  002232  0E01               	movlw	1
  3109  002234  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3110  002236  2BA4               	incf	??_doWork& (0+255),f,b
  3111  002238  D002               	goto	u10674
  3112  00223A                     u10675:
  3113  00223A  90D8               	bcf	status,0,c
  3114  00223C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3115  00223E                     u10674:
  3116  00223E  2FA4               	decfsz	??_doWork& (0+255),f,b
  3117  002240  D7FC               	goto	u10675
  3118  002242  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3119  002244  13B4               	iorwf	_high_alarm& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 656: vscp_alarmstatus |= 2;
  3123  002246  824B               	bsf	_vscp_alarmstatus,1,c
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 659: if (readEEPROM(i + 0x43) & (1<<4)) {
  3127  002248  0E43               	movlw	67
  3128  00224A  0101               	movlb	1	; () banked
  3129  00224C  259B               	addwf	doWork@i& (0+255),w,b
  3130  00224E  6E0E               	movwf	?_readEEPROM,c
  3131  002250  6A0F               	clrf	?_readEEPROM+1,c
  3132  002252  0E00               	movlw	0
  3133  002254  220F               	addwfc	?_readEEPROM+1,f,c
  3134  002256  EC8D  F02E         	call	_readEEPROM	;wreg free
  3135  00225A  0100               	movlb	0	; () banked
  3136  00225C  6FA4               	movwf	??_doWork& (0+255),b
  3137  00225E  A9A4               	btfss	??_doWork& (0+255),4,b
  3138  002260  D055               	goto	l12184
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;main.c: 661: vscp_omsg.vscp_class = 1;
  3142  002262  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3143  002264  0E01               	movlw	1
  3144  002266  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3145                           
  3146                           ;main.c: 662: vscp_omsg.vscp_type = 2;
  3147  002268  0E02               	movlw	2
  3148  00226A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;main.c: 663: vscp_omsg.priority = 0x00;
  3152  00226C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  3153                           
  3154                           ;main.c: 664: vscp_omsg.flags = 0x80 + 3;
  3155  00226E  0E83               	movlw	131
  3156  002270  6FCA               	movwf	_vscp_omsg& (0+255),b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 666: if (readEEPROM(i + 0x43) & (1<<5)) {
  3160  002272  0E43               	movlw	67
  3161  002274  0101               	movlb	1	; () banked
  3162  002276  259B               	addwf	doWork@i& (0+255),w,b
  3163  002278  6E0E               	movwf	?_readEEPROM,c
  3164  00227A  6A0F               	clrf	?_readEEPROM+1,c
  3165  00227C  0E00               	movlw	0
  3166  00227E  220F               	addwfc	?_readEEPROM+1,f,c
  3167  002280  EC8D  F02E         	call	_readEEPROM	;wreg free
  3168  002284  0100               	movlb	0	; () banked
  3169  002286  6FA4               	movwf	??_doWork& (0+255),b
  3170  002288  ABA4               	btfss	??_doWork& (0+255),5,b
  3171  00228A  D017               	goto	l12174
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;main.c: 667: if (readEEPROM(i + 0x43) & (1<<6)) {
  3175  00228C  0E43               	movlw	67
  3176  00228E  0101               	movlb	1	; () banked
  3177  002290  259B               	addwf	doWork@i& (0+255),w,b
  3178  002292  6E0E               	movwf	?_readEEPROM,c
  3179  002294  6A0F               	clrf	?_readEEPROM+1,c
  3180  002296  0E00               	movlw	0
  3181  002298  220F               	addwfc	?_readEEPROM+1,f,c
  3182  00229A  EC8D  F02E         	call	_readEEPROM	;wreg free
  3183  00229E  0100               	movlb	0	; () banked
  3184  0022A0  6FA4               	movwf	??_doWork& (0+255),b
  3185  0022A2  ADA4               	btfss	??_doWork& (0+255),6,b
  3186  0022A4  D005               	goto	l12172
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;main.c: 668: vscp_omsg.vscp_class = 30;
  3190  0022A6  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3191  0022A8  0E1E               	movlw	30
  3192  0022AA  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3193                           
  3194                           ;main.c: 669: vscp_omsg.vscp_type = 6;
  3195  0022AC  0E06               	movlw	6
  3196  0022AE  D004               	goto	L2
  3197  0022B0                     l12172:
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;main.c: 671: vscp_omsg.vscp_class = 30;
  3201  0022B0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3202  0022B2  0E1E               	movlw	30
  3203  0022B4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3204                           
  3205                           ;main.c: 672: vscp_omsg.vscp_type = 5;
  3206  0022B6  0E05               	movlw	5
  3207  0022B8                     L2:
  3208  0022B8  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3209  0022BA                     l12174:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 673: }
  3213                           ;main.c: 674: }
  3214                           ;main.c: 676: vscp_omsg.data[ 0 ] = i;
  3215  0022BA  C19B  F0CF         	movff	doWork@i,_vscp_omsg+5
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 677: vscp_omsg.data[ 1 ] =
  3219                           ;main.c: 678: readEEPROM(2 * i +
  3220                           ;main.c: 679: 0x73);
  3221  0022BE  90D8               	bcf	status,0,c
  3222  0022C0  0101               	movlb	1	; () banked
  3223  0022C2  359B               	rlcf	doWork@i& (0+255),w,b
  3224  0022C4  0100               	movlb	0	; () banked
  3225  0022C6  6FA4               	movwf	??_doWork& (0+255),b
  3226  0022C8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3227  0022CA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3228  0022CC  0E73               	movlw	115
  3229  0022CE  25A4               	addwf	??_doWork& (0+255),w,b
  3230  0022D0  6E0E               	movwf	?_readEEPROM,c
  3231  0022D2  0E00               	movlw	0
  3232  0022D4  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3233  0022D6  6E0F               	movwf	?_readEEPROM+1,c
  3234  0022D8  EC8D  F02E         	call	_readEEPROM	;wreg free
  3235  0022DC  0100               	movlb	0	; () banked
  3236  0022DE  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 680: vscp_omsg.data[ 2 ] =
  3240                           ;main.c: 681: readEEPROM(2 * i +
  3241                           ;main.c: 682: 0x74);
  3242  0022E0  90D8               	bcf	status,0,c
  3243  0022E2  0101               	movlb	1	; () banked
  3244  0022E4  359B               	rlcf	doWork@i& (0+255),w,b
  3245  0022E6  0100               	movlb	0	; () banked
  3246  0022E8  6FA4               	movwf	??_doWork& (0+255),b
  3247  0022EA  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3248  0022EC  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3249  0022EE  0E74               	movlw	116
  3250  0022F0  25A4               	addwf	??_doWork& (0+255),w,b
  3251  0022F2  6E0E               	movwf	?_readEEPROM,c
  3252  0022F4  0E00               	movlw	0
  3253  0022F6  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3254  0022F8  6E0F               	movwf	?_readEEPROM+1,c
  3255  0022FA  EC8D  F02E         	call	_readEEPROM	;wreg free
  3256  0022FE  0100               	movlb	0	; () banked
  3257  002300  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;main.c: 685: if (!vscp_sendEvent()) {
  3261  002302  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  3262  002306  0900               	iorlw	0
  3263  002308  E101 D748          	bz	l12150
  3264  00230C                     l12184:
  3265                           
  3266                           ; BSR set to: 0
  3267  00230C  0101               	movlb	1	; () banked
  3268  00230E  2B9B               	incf	doWork@i& (0+255),f,b
  3269  002310  0E05               	movlw	5
  3270  002312  659B               	cpfsgt	doWork@i& (0+255),b
  3271  002314  D5BE               	goto	l12106
  3272  002316                     l224:
  3273  002316  0012               	return	
  3274  002318                     __end_of_doWork:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           prodh	equ	0xFF4
  3278                           prodl	equ	0xFF3
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           postdec1	equ	0xFE5
  3282                           fsr1h	equ	0xFE2
  3283                           fsr1l	equ	0xFE1
  3284                           indf2	equ	0xFDF
  3285                           postinc2	equ	0xFDE
  3286                           postdec2	equ	0xFDD
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function ___lwtofl *****************
  3292 ;; Defined at:
  3293 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  c               2   23[COMRAM] unsigned int 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;		None
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  4   23[COMRAM] unsigned int 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3307 ;;      Params:         4       0       0       0       0       0       0
  3308 ;;      Locals:         0       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0
  3310 ;;      Totals:         4       0       0       0       0       0       0
  3311 ;;Total ram usage:        4 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    3
  3314 ;; This function calls:
  3315 ;;		___flpack
  3316 ;; This function is called by:
  3317 ;;		_doWork
  3318 ;; This function uses a non-reentrant model
  3319 ;;
  3320                           
  3321                           	psect	text2
  3322  005A08                     __ptext2:
  3323                           	opt stack 0
  3324  005A08                     ___lwtofl:
  3325                           	opt stack 26
  3326                           
  3327                           ;incstack = 0
  3328                           ;incstack = 0
  3329  005A08  C018  F00E         	movff	___lwtofl@c,?___flpack
  3330  005A0C  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3331  005A10  6A10               	clrf	?___flpack+2,c
  3332  005A12  6A11               	clrf	?___flpack+3,c
  3333  005A14  0E96               	movlw	150
  3334  005A16  6E12               	movwf	?___flpack+4,c
  3335  005A18  0E00               	movlw	0
  3336  005A1A  6A13               	clrf	?___flpack+5,c
  3337  005A1C  ECD1  F025         	call	___flpack	;wreg free
  3338  005A20  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3339  005A24  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3340  005A28  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3341  005A2C  C00E  F018         	movff	?___flpack,?___lwtofl
  3342  005A30  0012               	return	
  3343  005A32                     __end_of___lwtofl:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           prodh	equ	0xFF4
  3347                           prodl	equ	0xFF3
  3348                           postinc0	equ	0xFEE
  3349                           wreg	equ	0xFE8
  3350                           postdec1	equ	0xFE5
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           postinc2	equ	0xFDE
  3355                           postdec2	equ	0xFDD
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function ___asfldiv *****************
  3361 ;; Defined at:
  3362 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  f1p             2    0[BANK0 ] PTR 
  3365 ;;		 -> doWork@avarage(4), 
  3366 ;;  f2              4    2[BANK0 ] PTR 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  4    0[BANK0 ] PTR 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : F/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3378 ;;      Params:         0       6       0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0       0       0
  3381 ;;      Totals:         0       6       0       0       0       0       0
  3382 ;;Total ram usage:        6 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:    4
  3385 ;; This function calls:
  3386 ;;		___fldiv
  3387 ;; This function is called by:
  3388 ;;		_doWork
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392                           	psect	text3
  3393  00561C                     __ptext3:
  3394                           	opt stack 0
  3395  00561C                     ___asfldiv:
  3396                           	opt stack 25
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;	Return value of ___asfldiv is never used
  3400                           
  3401                           ;incstack = 0
  3402                           ;incstack = 0
  3403  00561C  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3404  005620  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3405  005624  CFDE F02C          	movff	postinc2,?___fldiv
  3406  005628  CFDE F02D          	movff	postinc2,?___fldiv+1
  3407  00562C  CFDE F02E          	movff	postinc2,?___fldiv+2
  3408  005630  CFDE F02F          	movff	postinc2,?___fldiv+3
  3409  005634  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  3410  005638  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  3411  00563C  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  3412  005640  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  3413  005644  EC40  F027         	call	___fldiv	;wreg free
  3414  005648  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3415  00564C  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3416  005650  C02C  FFDE         	movff	?___fldiv,postinc2
  3417  005654  C02D  FFDE         	movff	?___fldiv+1,postinc2
  3418  005658  C02E  FFDE         	movff	?___fldiv+2,postinc2
  3419  00565C  C02F  FFDD         	movff	?___fldiv+3,postdec2
  3420  005660  06D9               	decf	fsr2l,f,c
  3421  005662  06D9               	decf	fsr2l,f,c
  3422  005664  0012               	return	
  3423  005666                     __end_of___asfldiv:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           postinc0	equ	0xFEE
  3429                           wreg	equ	0xFE8
  3430                           postdec1	equ	0xFE5
  3431                           fsr1h	equ	0xFE2
  3432                           fsr1l	equ	0xFE1
  3433                           indf2	equ	0xFDF
  3434                           postinc2	equ	0xFDE
  3435                           postdec2	equ	0xFDD
  3436                           fsr2h	equ	0xFDA
  3437                           fsr2l	equ	0xFD9
  3438                           status	equ	0xFD8
  3439                           
  3440 ;; *************** function ___asfladd *****************
  3441 ;; Defined at:
  3442 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  f1p             2   43[COMRAM] PTR 
  3445 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3446 ;;  f2              4   45[COMRAM] PTR 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  4   43[COMRAM] PTR 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3458 ;;      Params:         6       0       0       0       0       0       0
  3459 ;;      Locals:         0       0       0       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0
  3461 ;;      Totals:         6       0       0       0       0       0       0
  3462 ;;Total ram usage:        6 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    4
  3465 ;; This function calls:
  3466 ;;		___fladd
  3467 ;; This function is called by:
  3468 ;;		_doWork
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472                           	psect	text4
  3473  005666                     __ptext4:
  3474                           	opt stack 0
  3475  005666                     ___asfladd:
  3476                           	opt stack 25
  3477                           
  3478                           ;	Return value of ___asfladd is never used
  3479                           
  3480                           ;incstack = 0
  3481                           ;incstack = 0
  3482  005666  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3483  00566A  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3484  00566E  CFDE F01D          	movff	postinc2,?___fladd
  3485  005672  CFDE F01E          	movff	postinc2,?___fladd+1
  3486  005676  CFDE F01F          	movff	postinc2,?___fladd+2
  3487  00567A  CFDE F020          	movff	postinc2,?___fladd+3
  3488  00567E  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  3489  005682  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  3490  005686  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  3491  00568A  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  3492  00568E  EC4B  F021         	call	___fladd	;wreg free
  3493  005692  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3494  005696  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3495  00569A  C01D  FFDE         	movff	?___fladd,postinc2
  3496  00569E  C01E  FFDE         	movff	?___fladd+1,postinc2
  3497  0056A2  C01F  FFDE         	movff	?___fladd+2,postinc2
  3498  0056A6  C020  FFDD         	movff	?___fladd+3,postdec2
  3499  0056AA  06D9               	decf	fsr2l,f,c
  3500  0056AC  06D9               	decf	fsr2l,f,c
  3501  0056AE  0012               	return	
  3502  0056B0                     __end_of___asfladd:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           prodh	equ	0xFF4
  3506                           prodl	equ	0xFF3
  3507                           postinc0	equ	0xFEE
  3508                           wreg	equ	0xFE8
  3509                           postdec1	equ	0xFE5
  3510                           fsr1h	equ	0xFE2
  3511                           fsr1l	equ	0xFE1
  3512                           indf2	equ	0xFDF
  3513                           postinc2	equ	0xFDE
  3514                           postdec2	equ	0xFDD
  3515                           fsr2h	equ	0xFDA
  3516                           fsr2l	equ	0xFD9
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function ___aldiv *****************
  3520 ;; Defined at:
  3521 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;  dividend        4   28[BANK0 ] long 
  3524 ;;  divisor         4   32[BANK0 ] long 
  3525 ;; Auto vars:     Size  Location     Type
  3526 ;;  quotient        4   38[BANK0 ] long 
  3527 ;;  sign            1   37[BANK0 ] unsigned char 
  3528 ;;  counter         1   36[BANK0 ] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  4   28[BANK0 ] long 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0
  3533 ;; Tracked objects:
  3534 ;;		On entry : F/0
  3535 ;;		On exit  : F/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3538 ;;      Params:         0       8       0       0       0       0       0
  3539 ;;      Locals:         0       6       0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0
  3541 ;;      Totals:         0      14       0       0       0       0       0
  3542 ;;Total ram usage:       14 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    2
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_doWork
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           	psect	text5
  3553  004C62                     __ptext5:
  3554                           	opt stack 0
  3555  004C62                     ___aldiv:
  3556                           	opt stack 27
  3557                           
  3558                           ; BSR set to: 0
  3559                           
  3560                           ;incstack = 0
  3561                           ;incstack = 0
  3562  004C62  6B85               	clrf	___aldiv@sign& (0+255),b
  3563  004C64  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3564  004C66  D00A               	goto	l11458
  3565                           
  3566                           ; BSR set to: 0
  3567  004C68  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3568  004C6A  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3569  004C6C  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3570  004C6E  6D80               	negf	___aldiv@divisor& (0+255),b
  3571  004C70  0E00               	movlw	0
  3572  004C72  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3573  004C74  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3574  004C76  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3575                           
  3576                           ; BSR set to: 0
  3577  004C78  0E01               	movlw	1
  3578  004C7A  6F85               	movwf	___aldiv@sign& (0+255),b
  3579  004C7C                     l11458:
  3580                           
  3581                           ; BSR set to: 0
  3582  004C7C  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3583  004C7E  D00A               	goto	l11464
  3584                           
  3585                           ; BSR set to: 0
  3586  004C80  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3587  004C82  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3588  004C84  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3589  004C86  6D7C               	negf	___aldiv@dividend& (0+255),b
  3590  004C88  0E00               	movlw	0
  3591  004C8A  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3592  004C8C  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3593  004C8E  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3594                           
  3595                           ; BSR set to: 0
  3596  004C90  0E01               	movlw	1
  3597  004C92  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  3598  004C94                     l11464:
  3599                           
  3600                           ; BSR set to: 0
  3601  004C94  6B86               	clrf	___aldiv@quotient& (0+255),b
  3602  004C96  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  3603  004C98  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  3604  004C9A  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  3605                           
  3606                           ; BSR set to: 0
  3607  004C9C  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3608  004C9E  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  3609  004CA0  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3610  004CA2  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3611  004CA4  E029               	bz	l11486
  3612                           
  3613                           ; BSR set to: 0
  3614  004CA6  0E01               	movlw	1
  3615  004CA8  6F84               	movwf	___aldiv@counter& (0+255),b
  3616  004CAA  D006               	goto	l11472
  3617  004CAC                     l11470:
  3618                           
  3619                           ; BSR set to: 0
  3620  004CAC  90D8               	bcf	status,0,c
  3621  004CAE  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  3622  004CB0  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3623  004CB2  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3624  004CB4  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3625  004CB6  2B84               	incf	___aldiv@counter& (0+255),f,b
  3626  004CB8                     l11472:
  3627                           
  3628                           ; BSR set to: 0
  3629  004CB8  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3630  004CBA  D7F8               	goto	l11470
  3631  004CBC                     l11474:
  3632                           
  3633                           ; BSR set to: 0
  3634  004CBC  90D8               	bcf	status,0,c
  3635  004CBE  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  3636  004CC0  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3637  004CC2  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3638  004CC4  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3639                           
  3640                           ; BSR set to: 0
  3641  004CC6  5180               	movf	___aldiv@divisor& (0+255),w,b
  3642  004CC8  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  3643  004CCA  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3644  004CCC  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3645  004CCE  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3646  004CD0  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3647  004CD2  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3648  004CD4  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3649  004CD6  E309               	bnc	l11482
  3650                           
  3651                           ; BSR set to: 0
  3652  004CD8  5180               	movf	___aldiv@divisor& (0+255),w,b
  3653  004CDA  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  3654  004CDC  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3655  004CDE  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3656  004CE0  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3657  004CE2  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3658  004CE4  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3659  004CE6  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3660                           
  3661                           ; BSR set to: 0
  3662  004CE8  8186               	bsf	___aldiv@quotient& (0+255),0,b
  3663  004CEA                     l11482:
  3664                           
  3665                           ; BSR set to: 0
  3666  004CEA  90D8               	bcf	status,0,c
  3667  004CEC  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3668  004CEE  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3669  004CF0  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3670  004CF2  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  3671                           
  3672                           ; BSR set to: 0
  3673  004CF4  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  3674  004CF6  D7E2               	goto	l11474
  3675  004CF8                     l11486:
  3676                           
  3677                           ; BSR set to: 0
  3678  004CF8  5185               	movf	___aldiv@sign& (0+255),w,b
  3679  004CFA  E008               	bz	l11490
  3680                           
  3681                           ; BSR set to: 0
  3682  004CFC  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3683  004CFE  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3684  004D00  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3685  004D02  6D86               	negf	___aldiv@quotient& (0+255),b
  3686  004D04  0E00               	movlw	0
  3687  004D06  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3688  004D08  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3689  004D0A  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3690  004D0C                     l11490:
  3691                           
  3692                           ; BSR set to: 0
  3693  004D0C  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  3694  004D10  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  3695  004D14  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  3696  004D18  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  3697                           
  3698                           ; BSR set to: 0
  3699  004D1C  0012               	return	
  3700  004D1E                     __end_of___aldiv:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           prodh	equ	0xFF4
  3704                           prodl	equ	0xFF3
  3705                           postinc0	equ	0xFEE
  3706                           wreg	equ	0xFE8
  3707                           postdec1	equ	0xFE5
  3708                           fsr1h	equ	0xFE2
  3709                           fsr1l	equ	0xFE1
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _getCalibrationValue *****************
  3718 ;; Defined at:
  3719 ;;		line 872 in file "../main.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  i               1    wreg     unsigned char 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  i               1   24[COMRAM] unsigned char 
  3724 ;;  cal             2   22[COMRAM] short 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2   17[COMRAM] short 
  3727 ;; Registers used:
  3728 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : F/1
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3734 ;;      Params:         2       0       0       0       0       0       0
  3735 ;;      Locals:         3       0       0       0       0       0       0
  3736 ;;      Temps:          3       0       0       0       0       0       0
  3737 ;;      Totals:         8       0       0       0       0       0       0
  3738 ;;Total ram usage:        8 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    3
  3741 ;; This function calls:
  3742 ;;		_readEEPROM
  3743 ;; This function is called by:
  3744 ;;		_doWork
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text6
  3749  0056B0                     __ptext6:
  3750                           	opt stack 0
  3751  0056B0                     _getCalibrationValue:
  3752                           	opt stack 26
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;incstack = 0
  3756                           ;incstack = 0
  3757                           ;getCalibrationValue@i stored from wreg
  3758  0056B0  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3759                           
  3760                           ; BSR set to: 1
  3761                           ;main.c: 873: int16_t cal;
  3762                           ;main.c: 875: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3763                           ;main.c: 876: readEEPROM(2 * i + 0x9F);
  3764  0056B4  5019               	movf	getCalibrationValue@i,w,c
  3765  0056B6  0D02               	mullw	2
  3766  0056B8  0E9F               	movlw	159
  3767  0056BA  24F3               	addwf	prodl,w,c
  3768  0056BC  6E0E               	movwf	?_readEEPROM,c
  3769  0056BE  0E00               	movlw	0
  3770  0056C0  20F4               	addwfc	prodh,w,c
  3771  0056C2  6E0F               	movwf	?_readEEPROM+1,c
  3772  0056C4  EC8D  F02E         	call	_readEEPROM	;wreg free
  3773  0056C8  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3774  0056CA  5019               	movf	getCalibrationValue@i,w,c
  3775  0056CC  0D02               	mullw	2
  3776  0056CE  0E9E               	movlw	158
  3777  0056D0  24F3               	addwf	prodl,w,c
  3778  0056D2  6E0E               	movwf	?_readEEPROM,c
  3779  0056D4  0E00               	movlw	0
  3780  0056D6  20F4               	addwfc	prodh,w,c
  3781  0056D8  6E0F               	movwf	?_readEEPROM+1,c
  3782  0056DA  EC8D  F02E         	call	_readEEPROM	;wreg free
  3783  0056DE  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3784  0056E0  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3785  0056E2  5014               	movf	??_getCalibrationValue,w,c
  3786  0056E4  2415               	addwf	??_getCalibrationValue+1,w,c
  3787  0056E6  6E17               	movwf	getCalibrationValue@cal,c
  3788  0056E8  0E00               	movlw	0
  3789  0056EA  2016               	addwfc	??_getCalibrationValue+2,w,c
  3790  0056EC  6E18               	movwf	getCalibrationValue@cal+1,c
  3791                           
  3792                           ;main.c: 878: return cal;
  3793  0056EE  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3794  0056F2  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3795  0056F6  0012               	return	
  3796  0056F8                     __end_of_getCalibrationValue:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           postinc0	equ	0xFEE
  3802                           wreg	equ	0xFE8
  3803                           postdec1	equ	0xFE5
  3804                           fsr1h	equ	0xFE2
  3805                           fsr1l	equ	0xFE1
  3806                           indf2	equ	0xFDF
  3807                           postinc2	equ	0xFDE
  3808                           postdec2	equ	0xFDD
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function _log *****************
  3814 ;; Defined at:
  3815 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  x               4   33[BANK0 ] short 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  exponent        2   66[COMRAM] int 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  4   33[BANK0 ] int 
  3822 ;; Registers used:
  3823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/1
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3829 ;;      Params:         0       4       0       0       0       0       0
  3830 ;;      Locals:         2       0       0       0       0       0       0
  3831 ;;      Temps:          0       0       0       0       0       0       0
  3832 ;;      Totals:         2       4       0       0       0       0       0
  3833 ;;Total ram usage:        6 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    5
  3836 ;; This function calls:
  3837 ;;		___fladd
  3838 ;;		___flmul
  3839 ;;		___awtofl
  3840 ;;		_eval_poly
  3841 ;;		_frexp
  3842 ;; This function is called by:
  3843 ;;		_doWork
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           	psect	text7
  3848  004546                     __ptext7:
  3849                           	opt stack 0
  3850  004546                     _log:
  3851                           	opt stack 24
  3852                           
  3853                           ;incstack = 0
  3854                           ;incstack = 0
  3855  004546  0100               	movlb	0	; () banked
  3856  004548  BF84               	btfsc	(log@x+3)& (0+255),7,b
  3857  00454A  D007               	goto	u8780
  3858                           
  3859                           ; BSR set to: 0
  3860                           
  3861                           ; BSR set to: 0
  3862  00454C  EE20  F081         	lfsr	2,log@x
  3863  004550  50DE               	movf	postinc2,w,c
  3864  004552  10DE               	iorwf	postinc2,w,c
  3865  004554  10DE               	iorwf	postinc2,w,c
  3866  004556  10DE               	iorwf	postinc2,w,c
  3867  004558  E105               	bnz	l10442
  3868  00455A                     u8780:
  3869                           
  3870                           ; BSR set to: 0
  3871  00455A  6B81               	clrf	?_log& (0+255),b
  3872  00455C  6B82               	clrf	(?_log+1)& (0+255),b
  3873  00455E  6B83               	clrf	(?_log+2)& (0+255),b
  3874  004560  6B84               	clrf	(?_log+3)& (0+255),b
  3875  004562  D087               	goto	l1853
  3876  004564                     l10442:
  3877                           
  3878                           ; BSR set to: 0
  3879  004564  6B64               	clrf	(?___flmul+4)& (0+255),b
  3880  004566  6B65               	clrf	(?___flmul+5)& (0+255),b
  3881  004568  6B66               	clrf	(?___flmul+6)& (0+255),b
  3882  00456A  0E40               	movlw	64
  3883  00456C  6F67               	movwf	(?___flmul+7)& (0+255),b
  3884  00456E  0E43               	movlw	low log@exponent
  3885  004570  6E12               	movwf	?_frexp+4,c
  3886  004572  0E00               	movlw	high log@exponent
  3887  004574  6E13               	movwf	?_frexp+5,c
  3888  004576  0E0F               	movlw	15
  3889  004578  6E13               	movwf	?_frexp+5,c
  3890  00457A  0E5F               	movlw	__accesstop+-1
  3891  00457C  6412               	cpfsgt	?_frexp+4,c
  3892  00457E  6A13               	clrf	?_frexp+5,c
  3893  004580  C081  F00E         	movff	log@x,?_frexp
  3894  004584  C082  F00F         	movff	log@x+1,?_frexp+1
  3895  004588  C083  F010         	movff	log@x+2,?_frexp+2
  3896  00458C  C084  F011         	movff	log@x+3,?_frexp+3
  3897  004590  ECD0  F028         	call	_frexp	;wreg free
  3898  004594  C011  F063         	movff	?_frexp+3,?___flmul+3
  3899  004598  C010  F062         	movff	?_frexp+2,?___flmul+2
  3900  00459C  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3901  0045A0  C00E  F060         	movff	?_frexp,?___flmul
  3902  0045A4  ECA4  F024         	call	___flmul	;wreg free
  3903  0045A8  C063  F020         	movff	?___flmul+3,?___fladd+3
  3904  0045AC  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3905  0045B0  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3906  0045B4  C060  F01D         	movff	?___flmul,?___fladd
  3907  0045B8  6A21               	clrf	?___fladd+4,c
  3908  0045BA  6A22               	clrf	?___fladd+5,c
  3909  0045BC  0E80               	movlw	128
  3910  0045BE  6E23               	movwf	?___fladd+6,c
  3911  0045C0  0EBF               	movlw	191
  3912  0045C2  6E24               	movwf	?___fladd+7,c
  3913  0045C4  EC4B  F021         	call	___fladd	;wreg free
  3914  0045C8  C020  F084         	movff	?___fladd+3,log@x+3
  3915  0045CC  C01F  F083         	movff	?___fladd+2,log@x+2
  3916  0045D0  C01E  F082         	movff	?___fladd+1,log@x+1
  3917  0045D4  C01D  F081         	movff	?___fladd,log@x
  3918  0045D8  0643               	decf	log@exponent,f,c
  3919  0045DA  A0D8               	btfss	status,0,c
  3920  0045DC  0644               	decf	log@exponent+1,f,c
  3921  0045DE  C081  F076         	movff	log@x,?_eval_poly
  3922  0045E2  C082  F077         	movff	log@x+1,?_eval_poly+1
  3923  0045E6  C083  F078         	movff	log@x+2,?_eval_poly+2
  3924  0045EA  C084  F079         	movff	log@x+3,?_eval_poly+3
  3925  0045EE  0E48               	movlw	low log@coeff
  3926  0045F0  0100               	movlb	0	; () banked
  3927  0045F2  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3928  0045F4  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3929  0045F6  0E08               	movlw	8
  3930  0045F8  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3931  0045FA  EC71  F025         	call	_eval_poly	;wreg free
  3932  0045FE  C079  F084         	movff	?_eval_poly+3,log@x+3
  3933  004602  C078  F083         	movff	?_eval_poly+2,log@x+2
  3934  004606  C077  F082         	movff	?_eval_poly+1,log@x+1
  3935  00460A  C076  F081         	movff	?_eval_poly,log@x
  3936                           
  3937                           ; BSR set to: 0
  3938  00460E  0E18               	movlw	24
  3939  004610  6F64               	movwf	(?___flmul+4)& (0+255),b
  3940  004612  0E72               	movlw	114
  3941  004614  6F65               	movwf	(?___flmul+5)& (0+255),b
  3942  004616  0E31               	movlw	49
  3943  004618  6F66               	movwf	(?___flmul+6)& (0+255),b
  3944  00461A  0E3F               	movlw	63
  3945  00461C  6F67               	movwf	(?___flmul+7)& (0+255),b
  3946  00461E  C043  F018         	movff	log@exponent,?___awtofl
  3947  004622  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3948  004626  EC9F  F02C         	call	___awtofl	;wreg free
  3949  00462A  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3950  00462E  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3951  004632  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3952  004636  C018  F060         	movff	?___awtofl,?___flmul
  3953  00463A  ECA4  F024         	call	___flmul	;wreg free
  3954  00463E  C063  F020         	movff	?___flmul+3,?___fladd+3
  3955  004642  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3956  004646  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3957  00464A  C060  F01D         	movff	?___flmul,?___fladd
  3958  00464E  C081  F021         	movff	log@x,?___fladd+4
  3959  004652  C082  F022         	movff	log@x+1,?___fladd+5
  3960  004656  C083  F023         	movff	log@x+2,?___fladd+6
  3961  00465A  C084  F024         	movff	log@x+3,?___fladd+7
  3962  00465E  EC4B  F021         	call	___fladd	;wreg free
  3963  004662  C020  F084         	movff	?___fladd+3,?_log+3
  3964  004666  C01F  F083         	movff	?___fladd+2,?_log+2
  3965  00466A  C01E  F082         	movff	?___fladd+1,?_log+1
  3966  00466E  C01D  F081         	movff	?___fladd,?_log
  3967  004672                     l1853:
  3968  004672  0012               	return	
  3969  004674                     __end_of_log:
  3970                           	opt stack 0
  3971                           tblptru	equ	0xFF8
  3972                           prodh	equ	0xFF4
  3973                           prodl	equ	0xFF3
  3974                           postinc0	equ	0xFEE
  3975                           wreg	equ	0xFE8
  3976                           postdec1	equ	0xFE5
  3977                           fsr1h	equ	0xFE2
  3978                           fsr1l	equ	0xFE1
  3979                           indf2	equ	0xFDF
  3980                           postinc2	equ	0xFDE
  3981                           postdec2	equ	0xFDD
  3982                           fsr2h	equ	0xFDA
  3983                           fsr2l	equ	0xFD9
  3984                           status	equ	0xFD8
  3985                           
  3986 ;; *************** function _exp *****************
  3987 ;; Defined at:
  3988 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3989 ;; Parameters:    Size  Location     Type
  3990 ;;  x               4   57[BANK0 ] int 
  3991 ;; Auto vars:     Size  Location     Type
  3992 ;;  exponent        2   65[BANK0 ] int 
  3993 ;;  sign            1   67[BANK0 ] unsigned char 
  3994 ;; Return value:  Size  Location     Type
  3995 ;;                  4   57[BANK0 ] unsigned char 
  3996 ;; Registers used:
  3997 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/1
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4003 ;;      Params:         0       4       0       0       0       0       0
  4004 ;;      Locals:         0       7       0       0       0       0       0
  4005 ;;      Temps:          0       0       0       0       0       0       0
  4006 ;;      Totals:         0      11       0       0       0       0       0
  4007 ;;Total ram usage:       11 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    6
  4010 ;; This function calls:
  4011 ;;		___fldiv
  4012 ;;		___asflmul
  4013 ;;		___asflsub
  4014 ;;		___awtofl
  4015 ;;		_floor
  4016 ;;		_eval_poly
  4017 ;;		_ldexp
  4018 ;;		___flge
  4019 ;;		___flneg
  4020 ;;		___fltol
  4021 ;; This function is called by:
  4022 ;;		_doWork
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text8
  4027  003C1C                     __ptext8:
  4028                           	opt stack 0
  4029  003C1C                     _exp:
  4030                           	opt stack 23
  4031                           
  4032                           ;incstack = 0
  4033                           ;incstack = 0
  4034  003C1C  0100               	movlb	0	; () banked
  4035  003C1E  EE20  F099         	lfsr	2,exp@x
  4036  003C22  50DE               	movf	postinc2,w,c
  4037  003C24  10DE               	iorwf	postinc2,w,c
  4038  003C26  10DE               	iorwf	postinc2,w,c
  4039  003C28  10DE               	iorwf	postinc2,w,c
  4040  003C2A  E107               	bnz	l10404
  4041                           
  4042                           ; BSR set to: 0
  4043  003C2C  0E00               	movlw	0
  4044  003C2E  6F99               	movwf	?_exp& (0+255),b
  4045  003C30  6F9A               	movwf	(?_exp+1)& (0+255),b
  4046  003C32  0E80               	movlw	128
  4047  003C34  6F9B               	movwf	(?_exp+2)& (0+255),b
  4048  003C36  0E3F               	movlw	63
  4049  003C38  D018               	goto	L3
  4050  003C3A                     l10404:
  4051                           
  4052                           ; BSR set to: 0
  4053  003C3A  0E18               	movlw	24
  4054  003C3C  6E0E               	movwf	?___flge,c
  4055  003C3E  0E72               	movlw	114
  4056  003C40  6E0F               	movwf	?___flge+1,c
  4057  003C42  0E31               	movlw	49
  4058  003C44  6E10               	movwf	?___flge+2,c
  4059  003C46  0E44               	movlw	68
  4060  003C48  6E11               	movwf	?___flge+3,c
  4061  003C4A  C099  F012         	movff	exp@x,?___flge+4
  4062  003C4E  C09A  F013         	movff	exp@x+1,?___flge+5
  4063  003C52  C09B  F014         	movff	exp@x+2,?___flge+6
  4064  003C56  C09C  F015         	movff	exp@x+3,?___flge+7
  4065  003C5A  EC9C  F02A         	call	___flge	;wreg free
  4066  003C5E  E207               	bc	l10410
  4067  003C60  0100               	movlb	0	; () banked
  4068  003C62  6999               	setf	?_exp& (0+255),b
  4069  003C64  699A               	setf	(?_exp+1)& (0+255),b
  4070  003C66  0E7F               	movlw	127
  4071  003C68  6F9B               	movwf	(?_exp+2)& (0+255),b
  4072  003C6A                     L3:
  4073  003C6A  6F9C               	movwf	(?_exp+3)& (0+255),b
  4074  003C6C  D0C8               	goto	l1561
  4075  003C6E                     l10410:
  4076  003C6E  C099  F00E         	movff	exp@x,?___flge
  4077  003C72  C09A  F00F         	movff	exp@x+1,?___flge+1
  4078  003C76  C09B  F010         	movff	exp@x+2,?___flge+2
  4079  003C7A  C09C  F011         	movff	exp@x+3,?___flge+3
  4080  003C7E  0E87               	movlw	135
  4081  003C80  6E12               	movwf	?___flge+4,c
  4082  003C82  0E48               	movlw	72
  4083  003C84  6E13               	movwf	?___flge+5,c
  4084  003C86  0E3A               	movlw	58
  4085  003C88  6E14               	movwf	?___flge+6,c
  4086  003C8A  0EC4               	movlw	196
  4087  003C8C  6E15               	movwf	?___flge+7,c
  4088  003C8E  EC9C  F02A         	call	___flge	;wreg free
  4089  003C92  E202               	bc	l10414
  4090  003C94  0100               	movlb	0	; () banked
  4091  003C96  D08D               	goto	u8760
  4092  003C98                     l10414:
  4093  003C98  0100               	movlb	0	; () banked
  4094  003C9A  0E01               	movlw	1
  4095  003C9C  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  4096  003C9E  0E00               	movlw	0
  4097  003CA0  6FA3               	movwf	exp@sign& (0+255),b
  4098  003CA2  51A3               	movf	exp@sign& (0+255),w,b
  4099  003CA4  E012               	bz	l1564
  4100                           
  4101                           ; BSR set to: 0
  4102  003CA6  C099  F00E         	movff	exp@x,?___flneg
  4103  003CAA  C09A  F00F         	movff	exp@x+1,?___flneg+1
  4104  003CAE  C09B  F010         	movff	exp@x+2,?___flneg+2
  4105  003CB2  C09C  F011         	movff	exp@x+3,?___flneg+3
  4106  003CB6  EC91  F02D         	call	___flneg	;wreg free
  4107  003CBA  C011  F09C         	movff	?___flneg+3,exp@x+3
  4108  003CBE  C010  F09B         	movff	?___flneg+2,exp@x+2
  4109  003CC2  C00F  F09A         	movff	?___flneg+1,exp@x+1
  4110  003CC6  C00E  F099         	movff	?___flneg,exp@x
  4111  003CCA                     l1564:
  4112                           
  4113                           ; BSR set to: 0
  4114  003CCA  0E3B               	movlw	59
  4115  003CCC  6F76               	movwf	?___asflmul& (0+255),b
  4116  003CCE  0EAA               	movlw	170
  4117  003CD0  6F77               	movwf	(?___asflmul+1)& (0+255),b
  4118  003CD2  0EB8               	movlw	184
  4119  003CD4  6F78               	movwf	(?___asflmul+2)& (0+255),b
  4120  003CD6  0E3F               	movlw	63
  4121  003CD8  6F79               	movwf	(?___asflmul+3)& (0+255),b
  4122  003CDA  0E99               	movlw	exp@x& (0+255)
  4123  003CDC  ECC2  F02A         	call	___asflmul
  4124  003CE0  C099  F08F         	movff	exp@x,?_floor
  4125  003CE4  C09A  F090         	movff	exp@x+1,?_floor+1
  4126  003CE8  C09B  F091         	movff	exp@x+2,?_floor+2
  4127  003CEC  C09C  F092         	movff	exp@x+3,?_floor+3
  4128  003CF0  EC3A  F023         	call	_floor	;wreg free
  4129  003CF4  C092  F0A0         	movff	?_floor+3,_exp$2276+3
  4130  003CF8  C091  F09F         	movff	?_floor+2,_exp$2276+2
  4131  003CFC  C090  F09E         	movff	?_floor+1,_exp$2276+1
  4132  003D00  C08F  F09D         	movff	?_floor,_exp$2276
  4133  003D04  C09D  F076         	movff	_exp$2276,?___fltol
  4134  003D08  C09E  F077         	movff	_exp$2276+1,?___fltol+1
  4135  003D0C  C09F  F078         	movff	_exp$2276+2,?___fltol+2
  4136  003D10  C0A0  F079         	movff	_exp$2276+3,?___fltol+3
  4137  003D14  EC36  F028         	call	___fltol	;wreg free
  4138  003D18  C076  F0A1         	movff	?___fltol,exp@exponent
  4139  003D1C  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  4140                           
  4141                           ; BSR set to: 0
  4142  003D20  0E00               	movlw	high exp@x
  4143  003D22  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  4144  003D24  0E99               	movlw	low exp@x
  4145  003D26  6F7E               	movwf	?___asflsub& (0+255),b
  4146  003D28  C0A1  F018         	movff	exp@exponent,?___awtofl
  4147  003D2C  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  4148  003D30  EC9F  F02C         	call	___awtofl	;wreg free
  4149  003D34  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  4150  003D38  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  4151  003D3C  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  4152  003D40  C018  F080         	movff	?___awtofl,?___asflsub+2
  4153  003D44  EC75  F02A         	call	___asflsub	;wreg free
  4154                           
  4155                           ; BSR set to: 0
  4156  003D48  C099  F076         	movff	exp@x,?_eval_poly
  4157  003D4C  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  4158  003D50  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  4159  003D54  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  4160  003D58  0E20               	movlw	low exp@coeff
  4161  003D5A  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  4162  003D5C  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  4163  003D5E  0E09               	movlw	9
  4164  003D60  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  4165  003D62  EC71  F025         	call	_eval_poly	;wreg free
  4166  003D66  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  4167  003D6A  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  4168  003D6E  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  4169  003D72  C076  F081         	movff	?_eval_poly,?_ldexp
  4170  003D76  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  4171  003D7A  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  4172  003D7E  EC94  F027         	call	_ldexp	;wreg free
  4173  003D82  C084  F09C         	movff	?_ldexp+3,exp@x+3
  4174  003D86  C083  F09B         	movff	?_ldexp+2,exp@x+2
  4175  003D8A  C082  F09A         	movff	?_ldexp+1,exp@x+1
  4176  003D8E  C081  F099         	movff	?_ldexp,exp@x
  4177                           
  4178                           ; BSR set to: 0
  4179  003D92  51A3               	movf	exp@sign& (0+255),w,b
  4180  003D94  E02C               	bz	l1565
  4181                           
  4182                           ; BSR set to: 0
  4183  003D96  EE20  F099         	lfsr	2,exp@x
  4184  003D9A  0EFF               	movlw	255
  4185  003D9C  18DE               	xorwf	postinc2,w,c
  4186  003D9E  0EFF               	movlw	255
  4187  003DA0  B4D8               	btfsc	status,2,c
  4188  003DA2  18DE               	xorwf	postinc2,w,c
  4189  003DA4  0E7F               	movlw	127
  4190  003DA6  B4D8               	btfsc	status,2,c
  4191  003DA8  18DE               	xorwf	postinc2,w,c
  4192  003DAA  0E7F               	movlw	127
  4193  003DAC  B4D8               	btfsc	status,2,c
  4194  003DAE  18DE               	xorwf	postinc2,w,c
  4195  003DB0  E105               	bnz	l10430
  4196  003DB2                     u8760:
  4197                           
  4198                           ; BSR set to: 0
  4199  003DB2  6B99               	clrf	?_exp& (0+255),b
  4200  003DB4  6B9A               	clrf	(?_exp+1)& (0+255),b
  4201  003DB6  6B9B               	clrf	(?_exp+2)& (0+255),b
  4202  003DB8  6B9C               	clrf	(?_exp+3)& (0+255),b
  4203  003DBA  D021               	goto	l1561
  4204  003DBC                     l10430:
  4205                           
  4206                           ; BSR set to: 0
  4207  003DBC  6A2C               	clrf	?___fldiv,c
  4208  003DBE  6A2D               	clrf	?___fldiv+1,c
  4209  003DC0  0E80               	movlw	128
  4210  003DC2  6E2E               	movwf	?___fldiv+2,c
  4211  003DC4  0E3F               	movlw	63
  4212  003DC6  6E2F               	movwf	?___fldiv+3,c
  4213  003DC8  C099  F030         	movff	exp@x,?___fldiv+4
  4214  003DCC  C09A  F031         	movff	exp@x+1,?___fldiv+5
  4215  003DD0  C09B  F032         	movff	exp@x+2,?___fldiv+6
  4216  003DD4  C09C  F033         	movff	exp@x+3,?___fldiv+7
  4217  003DD8  EC40  F027         	call	___fldiv	;wreg free
  4218  003DDC  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  4219  003DE0  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  4220  003DE4  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  4221  003DE8  C02C  F099         	movff	?___fldiv,?_exp
  4222  003DEC  D008               	goto	l1561
  4223  003DEE                     l1565:
  4224                           
  4225                           ; BSR set to: 0
  4226  003DEE  C099  F099         	movff	exp@x,?_exp
  4227  003DF2  C09A  F09A         	movff	exp@x+1,?_exp+1
  4228  003DF6  C09B  F09B         	movff	exp@x+2,?_exp+2
  4229  003DFA  C09C  F09C         	movff	exp@x+3,?_exp+3
  4230  003DFE                     l1561:
  4231  003DFE  0012               	return	
  4232  003E00                     __end_of_exp:
  4233                           	opt stack 0
  4234                           tblptru	equ	0xFF8
  4235                           prodh	equ	0xFF4
  4236                           prodl	equ	0xFF3
  4237                           postinc0	equ	0xFEE
  4238                           wreg	equ	0xFE8
  4239                           postdec1	equ	0xFE5
  4240                           fsr1h	equ	0xFE2
  4241                           fsr1l	equ	0xFE1
  4242                           indf2	equ	0xFDF
  4243                           postinc2	equ	0xFDE
  4244                           postdec2	equ	0xFDD
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function ___flneg *****************
  4250 ;; Defined at:
  4251 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  f1              4   13[COMRAM] unsigned char 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;		None
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  4   13[COMRAM] unsigned char 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4260 ;; Tracked objects:
  4261 ;;		On entry : F/0
  4262 ;;		On exit  : F/0
  4263 ;;		Unchanged: F/0
  4264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4265 ;;      Params:         4       0       0       0       0       0       0
  4266 ;;      Locals:         0       0       0       0       0       0       0
  4267 ;;      Temps:          0       0       0       0       0       0       0
  4268 ;;      Totals:         4       0       0       0       0       0       0
  4269 ;;Total ram usage:        4 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    2
  4272 ;; This function calls:
  4273 ;;		Nothing
  4274 ;; This function is called by:
  4275 ;;		_exp
  4276 ;; This function uses a non-reentrant model
  4277 ;;
  4278                           
  4279                           	psect	text9
  4280  005B22                     __ptext9:
  4281                           	opt stack 0
  4282  005B22                     ___flneg:
  4283                           	opt stack 26
  4284                           
  4285                           ; BSR set to: 0
  4286                           
  4287                           ;incstack = 0
  4288                           ;incstack = 0
  4289  005B22  EE20  F00E         	lfsr	2,___flneg@f1
  4290  005B26  50DE               	movf	postinc2,w,c
  4291  005B28  10DE               	iorwf	postinc2,w,c
  4292  005B2A  10DE               	iorwf	postinc2,w,c
  4293  005B2C  10DE               	iorwf	postinc2,w,c
  4294  005B2E  E002               	bz	l11760
  4295                           
  4296                           ; BSR set to: 0
  4297  005B30  0E80               	movlw	128
  4298  005B32  1A11               	xorwf	___flneg@f1+3,f,c
  4299  005B34                     l11760:
  4300                           
  4301                           ; BSR set to: 0
  4302  005B34  C00E  F00E         	movff	___flneg@f1,?___flneg
  4303  005B38  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4304  005B3C  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4305  005B40  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4306                           
  4307                           ; BSR set to: 0
  4308  005B44  0012               	return	
  4309  005B46                     __end_of___flneg:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           postdec1	equ	0xFE5
  4317                           fsr1h	equ	0xFE2
  4318                           fsr1l	equ	0xFE1
  4319                           indf2	equ	0xFDF
  4320                           postinc2	equ	0xFDE
  4321                           postdec2	equ	0xFDD
  4322                           fsr2h	equ	0xFDA
  4323                           fsr2l	equ	0xFD9
  4324                           status	equ	0xFD8
  4325                           
  4326 ;; *************** function _ldexp *****************
  4327 ;; Defined at:
  4328 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;  value           4   33[BANK0 ] unsigned char 
  4331 ;;  newexp          2   37[BANK0 ] int 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  4   33[BANK0 ] int 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4338 ;; Tracked objects:
  4339 ;;		On entry : F/0
  4340 ;;		On exit  : F/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4343 ;;      Params:         0       6       0       0       0       0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0
  4345 ;;      Temps:          3       0       0       0       0       0       0
  4346 ;;      Totals:         3       6       0       0       0       0       0
  4347 ;;Total ram usage:        9 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		Nothing
  4352 ;; This function is called by:
  4353 ;;		_exp
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text10
  4358  004F28                     __ptext10:
  4359                           	opt stack 0
  4360  004F28                     _ldexp:
  4361                           	opt stack 26
  4362                           
  4363                           ; BSR set to: 0
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;incstack = 0
  4367                           ;incstack = 0
  4368  004F28  EE20  F081         	lfsr	2,ldexp@value
  4369  004F2C  50DE               	movf	postinc2,w,c
  4370  004F2E  10DE               	iorwf	postinc2,w,c
  4371  004F30  10DE               	iorwf	postinc2,w,c
  4372  004F32  10DE               	iorwf	postinc2,w,c
  4373  004F34  E014               	bz	u10170
  4374                           
  4375                           ; BSR set to: 0
  4376                           
  4377                           ; BSR set to: 0
  4378  004F36  5184               	movf	(ldexp@value+3)& (0+255),w,b
  4379  004F38  0B7F               	andlw	127
  4380  004F3A  6E43               	movwf	??_ldexp& (0+255),c
  4381  004F3C  90D8               	bcf	status,0,c
  4382  004F3E  3443               	rlcf	??_ldexp,w,c
  4383  004F40  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4384  004F42  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4385  004F44  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4386  004F46  5044               	movf	??_ldexp+1,w,c
  4387  004F48  2785               	addwf	ldexp@newexp& (0+255),f,b
  4388  004F4A  5045               	movf	??_ldexp+2,w,c
  4389  004F4C  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4390  004F4E  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  4391  004F50  36E8               	rlcf	wreg,f,c
  4392  004F52  0B01               	andlw	1
  4393  004F54  2785               	addwf	ldexp@newexp& (0+255),f,b
  4394  004F56  0E00               	movlw	0
  4395  004F58  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4396                           
  4397                           ; BSR set to: 0
  4398  004F5A  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4399  004F5C  D005               	goto	l11722
  4400  004F5E                     u10170:
  4401                           
  4402                           ; BSR set to: 0
  4403  004F5E  6B81               	clrf	?_ldexp& (0+255),b
  4404  004F60  6B82               	clrf	(?_ldexp+1)& (0+255),b
  4405  004F62  6B83               	clrf	(?_ldexp+2)& (0+255),b
  4406  004F64  6B84               	clrf	(?_ldexp+3)& (0+255),b
  4407  004F66  D031               	goto	l1686
  4408  004F68                     l11722:
  4409                           
  4410                           ; BSR set to: 0
  4411  004F68  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  4412  004F6A  0A80               	xorlw	128
  4413  004F6C  0F7F               	addlw	-129
  4414  004F6E  0E00               	movlw	0
  4415  004F70  B4D8               	btfsc	status,2,c
  4416  004F72  5D85               	subwf	ldexp@newexp& (0+255),w,b
  4417  004F74  E30E               	bnc	l11736
  4418                           
  4419                           ; BSR set to: 0
  4420  004F76  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  4421  004F78  D006               	goto	l11732
  4422                           
  4423                           ; BSR set to: 0
  4424  004F7A  6981               	setf	?_ldexp& (0+255),b
  4425  004F7C  6982               	setf	(?_ldexp+1)& (0+255),b
  4426  004F7E  0E7F               	movlw	127
  4427  004F80  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4428  004F82  0EFF               	movlw	255
  4429  004F84  D004               	goto	L4
  4430  004F86                     l11732:
  4431                           
  4432                           ; BSR set to: 0
  4433  004F86  6981               	setf	?_ldexp& (0+255),b
  4434  004F88  6982               	setf	(?_ldexp+1)& (0+255),b
  4435  004F8A  0E7F               	movlw	127
  4436  004F8C  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4437  004F8E                     L4:
  4438  004F8E  6F84               	movwf	(?_ldexp+3)& (0+255),b
  4439  004F90  D01C               	goto	l1686
  4440  004F92                     l11736:
  4441                           
  4442                           ; BSR set to: 0
  4443  004F92  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4444  004F94  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4445  004F96  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4446  004F98  3185               	rrcf	ldexp@newexp& (0+255),w,b
  4447  004F9A  6E43               	movwf	??_ldexp& (0+255),c
  4448  004F9C  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  4449  004F9E  0B80               	andlw	-128
  4450  004FA0  1843               	xorwf	??_ldexp,w,c
  4451  004FA2  6F84               	movwf	(ldexp@value+3)& (0+255),b
  4452  004FA4  C085  F043         	movff	ldexp@newexp,??_ldexp
  4453  004FA8  0E01               	movlw	1
  4454  004FAA  1643               	andwf	??_ldexp,f,c
  4455  004FAC  3243               	rrcf	??_ldexp,f,c
  4456  004FAE  3243               	rrcf	??_ldexp,f,c
  4457  004FB0  5183               	movf	(ldexp@value+2)& (0+255),w,b
  4458  004FB2  1843               	xorwf	??_ldexp,w,c
  4459  004FB4  0B7F               	andlw	-129
  4460  004FB6  1843               	xorwf	??_ldexp,w,c
  4461  004FB8  6F83               	movwf	(ldexp@value+2)& (0+255),b
  4462                           
  4463                           ; BSR set to: 0
  4464  004FBA  C081  F081         	movff	ldexp@value,?_ldexp
  4465  004FBE  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  4466  004FC2  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  4467  004FC6  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  4468  004FCA                     l1686:
  4469                           
  4470                           ; BSR set to: 0
  4471  004FCA  0012               	return	
  4472  004FCC                     __end_of_ldexp:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           prodh	equ	0xFF4
  4476                           prodl	equ	0xFF3
  4477                           postinc0	equ	0xFEE
  4478                           wreg	equ	0xFE8
  4479                           postdec1	equ	0xFE5
  4480                           fsr1h	equ	0xFE2
  4481                           fsr1l	equ	0xFE1
  4482                           indf2	equ	0xFDF
  4483                           postinc2	equ	0xFDE
  4484                           postdec2	equ	0xFDD
  4485                           fsr2h	equ	0xFDA
  4486                           fsr2l	equ	0xFD9
  4487                           status	equ	0xFD8
  4488                           
  4489 ;; *************** function _eval_poly *****************
  4490 ;; Defined at:
  4491 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;  x               4   22[BANK0 ] int 
  4494 ;;  d               1   26[BANK0 ] PTR const 
  4495 ;;		 -> log@coeff(36), exp@coeff(40), 
  4496 ;;  n               2   27[BANK0 ] int 
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;  res             4   29[BANK0 ] int 
  4499 ;; Return value:  Size  Location     Type
  4500 ;;                  4   22[BANK0 ] int 
  4501 ;; Registers used:
  4502 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : F/0
  4505 ;;		On exit  : F/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4508 ;;      Params:         0       7       0       0       0       0       0
  4509 ;;      Locals:         0       4       0       0       0       0       0
  4510 ;;      Temps:          1       0       0       0       0       0       0
  4511 ;;      Totals:         1      11       0       0       0       0       0
  4512 ;;Total ram usage:       12 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:    4
  4515 ;; This function calls:
  4516 ;;		___fladd
  4517 ;;		___flmul
  4518 ;; This function is called by:
  4519 ;;		_exp
  4520 ;;		_log
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           	psect	text11
  4525  004AE2                     __ptext11:
  4526                           	opt stack 0
  4527  004AE2                     _eval_poly:
  4528                           	opt stack 24
  4529                           
  4530                           ; BSR set to: 0
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;incstack = 0
  4534                           ;incstack = 0
  4535  004AE2  517B               	movf	eval_poly@n& (0+255),w,b
  4536  004AE4  0D04               	mullw	4
  4537  004AE6  517A               	movf	eval_poly@d& (0+255),w,b
  4538  004AE8  24F3               	addwf	prodl,w,c
  4539  004AEA  6E42               	movwf	??_eval_poly& (0+255),c
  4540  004AEC  C042  FFF6         	movff	??_eval_poly,tblptrl
  4541  004AF0  0E0B               	movlw	high __smallconst
  4542  004AF2  6EF7               	movwf	tblptrh,c
  4543  004AF4  0009               	tblrd		*+
  4544  004AF6  CFF5 F07D          	movff	tablat,eval_poly@res
  4545  004AFA  0009               	tblrd		*+
  4546  004AFC  CFF5 F07E          	movff	tablat,eval_poly@res+1
  4547  004B00  0009               	tblrd		*+
  4548  004B02  CFF5 F07F          	movff	tablat,eval_poly@res+2
  4549  004B06  000A               	tblrd		*-
  4550  004B08  CFF5 F080          	movff	tablat,eval_poly@res+3
  4551  004B0C  D03D               	goto	l11708
  4552  004B0E                     l11706:
  4553                           
  4554                           ; BSR set to: 0
  4555  004B0E  C07D  F064         	movff	eval_poly@res,?___flmul+4
  4556  004B12  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  4557  004B16  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  4558  004B1A  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  4559  004B1E  C076  F060         	movff	eval_poly@x,?___flmul
  4560  004B22  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  4561  004B26  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  4562  004B2A  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  4563  004B2E  ECA4  F024         	call	___flmul	;wreg free
  4564  004B32  C063  F020         	movff	?___flmul+3,?___fladd+3
  4565  004B36  C062  F01F         	movff	?___flmul+2,?___fladd+2
  4566  004B3A  C061  F01E         	movff	?___flmul+1,?___fladd+1
  4567  004B3E  C060  F01D         	movff	?___flmul,?___fladd
  4568  004B42  0100               	movlb	0	; () banked
  4569  004B44  077B               	decf	eval_poly@n& (0+255),f,b
  4570  004B46  A0D8               	btfss	status,0,c
  4571  004B48  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  4572  004B4A  517B               	movf	eval_poly@n& (0+255),w,b
  4573  004B4C  0D04               	mullw	4
  4574  004B4E  517A               	movf	eval_poly@d& (0+255),w,b
  4575  004B50  24F3               	addwf	prodl,w,c
  4576  004B52  6E42               	movwf	??_eval_poly& (0+255),c
  4577  004B54  C042  FFF6         	movff	??_eval_poly,tblptrl
  4578  004B58  0E0B               	movlw	high __smallconst
  4579  004B5A  6EF7               	movwf	tblptrh,c
  4580  004B5C  0009               	tblrd		*+
  4581  004B5E  CFF5 F021          	movff	tablat,?___fladd+4
  4582  004B62  0009               	tblrd		*+
  4583  004B64  CFF5 F022          	movff	tablat,?___fladd+5
  4584  004B68  0009               	tblrd		*+
  4585  004B6A  CFF5 F023          	movff	tablat,?___fladd+6
  4586  004B6E  000A               	tblrd		*-
  4587  004B70  CFF5 F024          	movff	tablat,?___fladd+7
  4588  004B74  EC4B  F021         	call	___fladd	;wreg free
  4589  004B78  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  4590  004B7C  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  4591  004B80  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  4592  004B84  C01D  F07D         	movff	?___fladd,eval_poly@res
  4593  004B88                     l11708:
  4594  004B88  0100               	movlb	0	; () banked
  4595  004B8A  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  4596  004B8C  117B               	iorwf	eval_poly@n& (0+255),w,b
  4597  004B8E  E1BF               	bnz	l11706
  4598                           
  4599                           ; BSR set to: 0
  4600  004B90  C07D  F076         	movff	eval_poly@res,?_eval_poly
  4601  004B94  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  4602  004B98  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  4603  004B9C  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  4604                           
  4605                           ; BSR set to: 0
  4606  004BA0  0012               	return	
  4607  004BA2                     __end_of_eval_poly:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           postdec1	equ	0xFE5
  4618                           fsr1h	equ	0xFE2
  4619                           fsr1l	equ	0xFE1
  4620                           indf2	equ	0xFDF
  4621                           postinc2	equ	0xFDE
  4622                           postdec2	equ	0xFDD
  4623                           fsr2h	equ	0xFDA
  4624                           fsr2l	equ	0xFD9
  4625                           status	equ	0xFD8
  4626                           
  4627 ;; *************** function _floor *****************
  4628 ;; Defined at:
  4629 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4630 ;; Parameters:    Size  Location     Type
  4631 ;;  x               4   47[BANK0 ] int 
  4632 ;; Auto vars:     Size  Location     Type
  4633 ;;  i               4   51[BANK0 ] int 
  4634 ;;  expon           2   55[BANK0 ] int 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  4   47[BANK0 ] int 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : F/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4644 ;;      Params:         0       4       0       0       0       0       0
  4645 ;;      Locals:         0       6       0       0       0       0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0
  4647 ;;      Totals:         0      10       0       0       0       0       0
  4648 ;;Total ram usage:       10 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    4
  4651 ;; This function calls:
  4652 ;;		___altofl
  4653 ;;		___fladd
  4654 ;;		___flge
  4655 ;;		_frexp
  4656 ;;		___fltol
  4657 ;; This function is called by:
  4658 ;;		_exp
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text12
  4663  004674                     __ptext12:
  4664                           	opt stack 0
  4665  004674                     _floor:
  4666                           	opt stack 24
  4667                           
  4668                           ; BSR set to: 0
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;incstack = 0
  4672                           ;incstack = 0
  4673  004674  C08F  F00E         	movff	floor@x,?_frexp
  4674  004678  C090  F00F         	movff	floor@x+1,?_frexp+1
  4675  00467C  C091  F010         	movff	floor@x+2,?_frexp+2
  4676  004680  C092  F011         	movff	floor@x+3,?_frexp+3
  4677  004684  0E00               	movlw	high floor@expon
  4678  004686  6E13               	movwf	?_frexp+5,c
  4679  004688  0E97               	movlw	low floor@expon
  4680  00468A  6E12               	movwf	?_frexp+4,c
  4681  00468C  ECD0  F028         	call	_frexp	;wreg free
  4682                           
  4683                           ; BSR set to: 0
  4684  004690  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  4685  004692  D00F               	goto	l11694
  4686                           
  4687                           ; BSR set to: 0
  4688  004694  AF92               	btfss	(floor@x+3)& (0+255),7,b
  4689  004696  D008               	goto	l1654
  4690                           
  4691                           ; BSR set to: 0
  4692  004698  0E00               	movlw	0
  4693  00469A  6F8F               	movwf	?_floor& (0+255),b
  4694  00469C  6F90               	movwf	(?_floor+1)& (0+255),b
  4695  00469E  0E80               	movlw	128
  4696  0046A0  6F91               	movwf	(?_floor+2)& (0+255),b
  4697  0046A2  0EBF               	movlw	191
  4698  0046A4  6F92               	movwf	(?_floor+3)& (0+255),b
  4699  0046A6  D063               	goto	l1655
  4700  0046A8                     l1654:
  4701                           
  4702                           ; BSR set to: 0
  4703  0046A8  6B8F               	clrf	?_floor& (0+255),b
  4704  0046AA  6B90               	clrf	(?_floor+1)& (0+255),b
  4705  0046AC  6B91               	clrf	(?_floor+2)& (0+255),b
  4706  0046AE  6B92               	clrf	(?_floor+3)& (0+255),b
  4707  0046B0  D05E               	goto	l1655
  4708  0046B2                     l11694:
  4709                           
  4710                           ; BSR set to: 0
  4711  0046B2  0E1D               	movlw	29
  4712  0046B4  5D97               	subwf	floor@expon& (0+255),w,b
  4713  0046B6  0E00               	movlw	0
  4714  0046B8  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  4715  0046BA  E309               	bnc	l11698
  4716                           
  4717                           ; BSR set to: 0
  4718  0046BC  C08F  F08F         	movff	floor@x,?_floor
  4719  0046C0  C090  F090         	movff	floor@x+1,?_floor+1
  4720  0046C4  C091  F091         	movff	floor@x+2,?_floor+2
  4721  0046C8  C092  F092         	movff	floor@x+3,?_floor+3
  4722  0046CC  D050               	goto	l1655
  4723  0046CE                     l11698:
  4724                           
  4725                           ; BSR set to: 0
  4726  0046CE  C08F  F076         	movff	floor@x,?___fltol
  4727  0046D2  C090  F077         	movff	floor@x+1,?___fltol+1
  4728  0046D6  C091  F078         	movff	floor@x+2,?___fltol+2
  4729  0046DA  C092  F079         	movff	floor@x+3,?___fltol+3
  4730  0046DE  EC36  F028         	call	___fltol	;wreg free
  4731  0046E2  C079  F08D         	movff	?___fltol+3,?___altofl+3
  4732  0046E6  C078  F08C         	movff	?___fltol+2,?___altofl+2
  4733  0046EA  C077  F08B         	movff	?___fltol+1,?___altofl+1
  4734  0046EE  C076  F08A         	movff	?___fltol,?___altofl
  4735  0046F2  EC7C  F02B         	call	___altofl	;wreg free
  4736  0046F6  C08D  F096         	movff	?___altofl+3,floor@i+3
  4737  0046FA  C08C  F095         	movff	?___altofl+2,floor@i+2
  4738  0046FE  C08B  F094         	movff	?___altofl+1,floor@i+1
  4739  004702  C08A  F093         	movff	?___altofl,floor@i
  4740  004706  C08F  F00E         	movff	floor@x,?___flge
  4741  00470A  C090  F00F         	movff	floor@x+1,?___flge+1
  4742  00470E  C091  F010         	movff	floor@x+2,?___flge+2
  4743  004712  C092  F011         	movff	floor@x+3,?___flge+3
  4744  004716  C093  F012         	movff	floor@i,?___flge+4
  4745  00471A  C094  F013         	movff	floor@i+1,?___flge+5
  4746  00471E  C095  F014         	movff	floor@i+2,?___flge+6
  4747  004722  C096  F015         	movff	floor@i+3,?___flge+7
  4748  004726  EC9C  F02A         	call	___flge	;wreg free
  4749  00472A  E219               	bc	l1657
  4750  00472C  C093  F01D         	movff	floor@i,?___fladd
  4751  004730  C094  F01E         	movff	floor@i+1,?___fladd+1
  4752  004734  C095  F01F         	movff	floor@i+2,?___fladd+2
  4753  004738  C096  F020         	movff	floor@i+3,?___fladd+3
  4754  00473C  6A21               	clrf	?___fladd+4,c
  4755  00473E  6A22               	clrf	?___fladd+5,c
  4756  004740  0E80               	movlw	128
  4757  004742  6E23               	movwf	?___fladd+6,c
  4758  004744  0EBF               	movlw	191
  4759  004746  6E24               	movwf	?___fladd+7,c
  4760  004748  EC4B  F021         	call	___fladd	;wreg free
  4761  00474C  C020  F092         	movff	?___fladd+3,?_floor+3
  4762  004750  C01F  F091         	movff	?___fladd+2,?_floor+2
  4763  004754  C01E  F090         	movff	?___fladd+1,?_floor+1
  4764  004758  C01D  F08F         	movff	?___fladd,?_floor
  4765  00475C  D008               	goto	l1655
  4766  00475E                     l1657:
  4767  00475E  C093  F08F         	movff	floor@i,?_floor
  4768  004762  C094  F090         	movff	floor@i+1,?_floor+1
  4769  004766  C095  F091         	movff	floor@i+2,?_floor+2
  4770  00476A  C096  F092         	movff	floor@i+3,?_floor+3
  4771  00476E                     l1655:
  4772  00476E  0012               	return	
  4773  004770                     __end_of_floor:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           postdec1	equ	0xFE5
  4784                           fsr1h	equ	0xFE2
  4785                           fsr1l	equ	0xFE1
  4786                           indf2	equ	0xFDF
  4787                           postinc2	equ	0xFDE
  4788                           postdec2	equ	0xFDD
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function ___fltol *****************
  4794 ;; Defined at:
  4795 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;  f1              4   22[BANK0 ] int 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;  exp1            1   27[BANK0 ] unsigned char 
  4800 ;;  sign1           1   26[BANK0 ] unsigned char 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  4   22[BANK0 ] long 
  4803 ;; Registers used:
  4804 ;;		wreg, status,2, status,0
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : F/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4810 ;;      Params:         0       4       0       0       0       0       0
  4811 ;;      Locals:         0       2       0       0       0       0       0
  4812 ;;      Temps:          4       0       0       0       0       0       0
  4813 ;;      Totals:         4       6       0       0       0       0       0
  4814 ;;Total ram usage:       10 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    2
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_doWork
  4821 ;;		_setEventData
  4822 ;;		_exp
  4823 ;;		_floor
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text13
  4828  00506C                     __ptext13:
  4829                           	opt stack 0
  4830  00506C                     ___fltol:
  4831                           	opt stack 27
  4832                           
  4833                           ;incstack = 0
  4834                           ;incstack = 0
  4835  00506C  0100               	movlb	0	; () banked
  4836  00506E  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4837  005070  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4838  005072  6F7B               	movwf	___fltol@exp1& (0+255),b
  4839  005074  677B               	tstfsz	___fltol@exp1& (0+255),b
  4840  005076  D005               	goto	l11788
  4841  005078                     l11786:
  4842                           
  4843                           ; BSR set to: 0
  4844  005078  6B76               	clrf	?___fltol& (0+255),b
  4845  00507A  6B77               	clrf	(?___fltol+1)& (0+255),b
  4846  00507C  6B78               	clrf	(?___fltol+2)& (0+255),b
  4847  00507E  6B79               	clrf	(?___fltol+3)& (0+255),b
  4848  005080  D043               	goto	l1666
  4849  005082                     l11788:
  4850                           
  4851                           ; BSR set to: 0
  4852  005082  C076  F042         	movff	___fltol@f1,??___fltol
  4853  005086  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4854  00508A  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4855  00508E  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4856  005092  0E20               	movlw	32
  4857  005094  D005               	goto	u10260
  4858  005096                     u10265:
  4859  005096  90D8               	bcf	status,0,c
  4860  005098  3245               	rrcf	??___fltol+3,f,c
  4861  00509A  3244               	rrcf	??___fltol+2,f,c
  4862  00509C  3243               	rrcf	??___fltol+1,f,c
  4863  00509E  3242               	rrcf	??___fltol,f,c
  4864  0050A0                     u10260:
  4865  0050A0  2EE8               	decfsz	wreg,f,c
  4866  0050A2  D7F9               	goto	u10265
  4867  0050A4  5042               	movf	??___fltol,w,c
  4868  0050A6  6F7A               	movwf	___fltol@sign1& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871  0050A8  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4872                           
  4873                           ; BSR set to: 0
  4874  0050AA  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4875                           
  4876                           ; BSR set to: 0
  4877  0050AC  0E96               	movlw	150
  4878  0050AE  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4879                           
  4880                           ; BSR set to: 0
  4881  0050B0  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4882  0050B2  D00C               	goto	l11806
  4883                           
  4884                           ; BSR set to: 0
  4885  0050B4  517B               	movf	___fltol@exp1& (0+255),w,b
  4886  0050B6  0A80               	xorlw	128
  4887  0050B8  0F97               	addlw	151
  4888  0050BA  E3DE               	bnc	l11786
  4889  0050BC                     l11802:
  4890                           
  4891                           ; BSR set to: 0
  4892  0050BC  90D8               	bcf	status,0,c
  4893  0050BE  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4894  0050C0  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4895  0050C2  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4896  0050C4  3376               	rrcf	___fltol@f1& (0+255),f,b
  4897                           
  4898                           ; BSR set to: 0
  4899  0050C6  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4900  0050C8  D7F9               	goto	l11802
  4901  0050CA  D00C               	goto	l11814
  4902  0050CC                     l11806:
  4903                           
  4904                           ; BSR set to: 0
  4905  0050CC  0E1F               	movlw	31
  4906  0050CE  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4907  0050D0  D007               	goto	l11812
  4908  0050D2  D7D2               	goto	l11786
  4909  0050D4                     l11810:
  4910                           
  4911                           ; BSR set to: 0
  4912  0050D4  90D8               	bcf	status,0,c
  4913  0050D6  3776               	rlcf	___fltol@f1& (0+255),f,b
  4914  0050D8  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4915  0050DA  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4916  0050DC  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4917  0050DE  077B               	decf	___fltol@exp1& (0+255),f,b
  4918  0050E0                     l11812:
  4919                           
  4920                           ; BSR set to: 0
  4921  0050E0  677B               	tstfsz	___fltol@exp1& (0+255),b
  4922  0050E2  D7F8               	goto	l11810
  4923  0050E4                     l11814:
  4924                           
  4925                           ; BSR set to: 0
  4926  0050E4  517A               	movf	___fltol@sign1& (0+255),w,b
  4927  0050E6  E008               	bz	l11818
  4928                           
  4929                           ; BSR set to: 0
  4930  0050E8  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  4931  0050EA  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  4932  0050EC  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  4933  0050EE  6D76               	negf	___fltol@f1& (0+255),b
  4934  0050F0  0E00               	movlw	0
  4935  0050F2  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4936  0050F4  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4937  0050F6  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4938  0050F8                     l11818:
  4939                           
  4940                           ; BSR set to: 0
  4941  0050F8  C076  F076         	movff	___fltol@f1,?___fltol
  4942  0050FC  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  4943  005100  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  4944  005104  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  4945  005108                     l1666:
  4946                           
  4947                           ; BSR set to: 0
  4948  005108  0012               	return	
  4949  00510A                     __end_of___fltol:
  4950                           	opt stack 0
  4951                           tblptru	equ	0xFF8
  4952                           tblptrh	equ	0xFF7
  4953                           tblptrl	equ	0xFF6
  4954                           tablat	equ	0xFF5
  4955                           prodh	equ	0xFF4
  4956                           prodl	equ	0xFF3
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postdec1	equ	0xFE5
  4960                           fsr1h	equ	0xFE2
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           postdec2	equ	0xFDD
  4965                           fsr2h	equ	0xFDA
  4966                           fsr2l	equ	0xFD9
  4967                           status	equ	0xFD8
  4968                           
  4969 ;; *************** function _frexp *****************
  4970 ;; Defined at:
  4971 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;  value           4   13[COMRAM] long 
  4974 ;;  eptr            2   17[COMRAM] PTR int 
  4975 ;;		 -> log@exponent(2), floor@expon(2), 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;                  4   13[COMRAM] PTR int 
  4980 ;; Registers used:
  4981 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4982 ;; Tracked objects:
  4983 ;;		On entry : F/0
  4984 ;;		On exit  : F/0
  4985 ;;		Unchanged: F/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4987 ;;      Params:         6       0       0       0       0       0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0
  4989 ;;      Temps:          3       0       0       0       0       0       0
  4990 ;;      Totals:         9       0       0       0       0       0       0
  4991 ;;Total ram usage:        9 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    2
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_floor
  4998 ;;		_log
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text14
  5003  0051A0                     __ptext14:
  5004                           	opt stack 0
  5005  0051A0                     _frexp:
  5006                           	opt stack 26
  5007                           
  5008                           ; BSR set to: 0
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;incstack = 0
  5012                           ;incstack = 0
  5013  0051A0  EE20  F00E         	lfsr	2,frexp@value
  5014  0051A4  50DE               	movf	postinc2,w,c
  5015  0051A6  10DE               	iorwf	postinc2,w,c
  5016  0051A8  10DE               	iorwf	postinc2,w,c
  5017  0051AA  10DE               	iorwf	postinc2,w,c
  5018  0051AC  E10C               	bnz	l11772
  5019                           
  5020                           ; BSR set to: 0
  5021  0051AE  C012  FFD9         	movff	frexp@eptr,fsr2l
  5022  0051B2  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5023  0051B6  0E00               	movlw	0
  5024  0051B8  6ADE               	clrf	postinc2,c
  5025  0051BA  6ADD               	clrf	postdec2,c
  5026                           
  5027                           ; BSR set to: 0
  5028  0051BC  6A0E               	clrf	?_frexp,c
  5029  0051BE  6A0F               	clrf	?_frexp+1,c
  5030  0051C0  6A10               	clrf	?_frexp+2,c
  5031  0051C2  6A11               	clrf	?_frexp+3,c
  5032  0051C4  D02F               	goto	l1682
  5033  0051C6                     l11772:
  5034                           
  5035                           ; BSR set to: 0
  5036  0051C6  5011               	movf	frexp@value+3,w,c
  5037  0051C8  0B7F               	andlw	127
  5038  0051CA  6E14               	movwf	??_frexp& (0+255),c
  5039  0051CC  90D8               	bcf	status,0,c
  5040  0051CE  3414               	rlcf	??_frexp,w,c
  5041  0051D0  6E15               	movwf	(??_frexp+1)& (0+255),c
  5042  0051D2  6A16               	clrf	(??_frexp+2)& (0+255),c
  5043  0051D4  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5044  0051D6  C012  FFD9         	movff	frexp@eptr,fsr2l
  5045  0051DA  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5046  0051DE  C015  FFDE         	movff	??_frexp+1,postinc2
  5047  0051E2  C016  FFDD         	movff	??_frexp+2,postdec2
  5048  0051E6  3410               	rlcf	frexp@value+2,w,c
  5049  0051E8  36E8               	rlcf	wreg,f,c
  5050  0051EA  0B01               	andlw	1
  5051  0051EC  C012  FFD9         	movff	frexp@eptr,fsr2l
  5052  0051F0  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5053  0051F4  12DE               	iorwf	postinc2,f,c
  5054  0051F6  0E00               	movlw	0
  5055  0051F8  12DD               	iorwf	postdec2,f,c
  5056                           
  5057                           ; BSR set to: 0
  5058  0051FA  C012  FFD9         	movff	frexp@eptr,fsr2l
  5059  0051FE  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5060  005202  0E82               	movlw	130
  5061  005204  26DE               	addwf	postinc2,f,c
  5062  005206  0EFF               	movlw	255
  5063  005208  22DD               	addwfc	postdec2,f,c
  5064                           
  5065                           ; BSR set to: 0
  5066  00520A  5011               	movf	frexp@value+3,w,c
  5067  00520C  0B80               	andlw	-128
  5068  00520E  093F               	iorlw	63
  5069  005210  6E11               	movwf	frexp@value+3,c
  5070                           
  5071                           ; BSR set to: 0
  5072  005212  9E10               	bcf	frexp@value+2,7,c
  5073                           
  5074                           ; BSR set to: 0
  5075  005214  C00E  F00E         	movff	frexp@value,?_frexp
  5076  005218  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5077  00521C  C010  F010         	movff	frexp@value+2,?_frexp+2
  5078  005220  C011  F011         	movff	frexp@value+3,?_frexp+3
  5079  005224                     l1682:
  5080                           
  5081                           ; BSR set to: 0
  5082  005224  0012               	return	
  5083  005226                     __end_of_frexp:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           postdec1	equ	0xFE5
  5094                           fsr1h	equ	0xFE2
  5095                           fsr1l	equ	0xFE1
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           
  5103 ;; *************** function ___flge *****************
  5104 ;; Defined at:
  5105 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;  ff1             4   13[COMRAM] PTR int 
  5108 ;;  ff2             4   17[COMRAM] PTR int 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;		None               void
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5120 ;;      Params:         8       0       0       0       0       0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0
  5123 ;;      Totals:         8       0       0       0       0       0       0
  5124 ;;Total ram usage:        8 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    2
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_exp
  5131 ;;		_floor
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text15
  5136  005538                     __ptext15:
  5137                           	opt stack 0
  5138  005538                     ___flge:
  5139                           	opt stack 26
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;incstack = 0
  5143                           ;incstack = 0
  5144  005538  AE11               	btfss	___flge@ff1+3,7,c
  5145  00553A  D009               	goto	l11746
  5146  00553C  6C0E               	negf	___flge@ff1,c
  5147  00553E  1E0F               	comf	___flge@ff1+1,f,c
  5148  005540  B0D8               	btfsc	status,0,c
  5149  005542  2A0F               	incf	___flge@ff1+1,f,c
  5150  005544  1E10               	comf	___flge@ff1+2,f,c
  5151  005546  B0D8               	btfsc	status,0,c
  5152  005548  2A10               	incf	___flge@ff1+2,f,c
  5153  00554A  0E80               	movlw	128
  5154  00554C  5611               	subfwb	___flge@ff1+3,f,c
  5155  00554E                     l11746:
  5156  00554E  AE15               	btfss	___flge@ff2+3,7,c
  5157  005550  D009               	goto	l1613
  5158  005552  6C12               	negf	___flge@ff2,c
  5159  005554  1E13               	comf	___flge@ff2+1,f,c
  5160  005556  B0D8               	btfsc	status,0,c
  5161  005558  2A13               	incf	___flge@ff2+1,f,c
  5162  00555A  1E14               	comf	___flge@ff2+2,f,c
  5163  00555C  B0D8               	btfsc	status,0,c
  5164  00555E  2A14               	incf	___flge@ff2+2,f,c
  5165  005560  0E80               	movlw	128
  5166  005562  5615               	subfwb	___flge@ff2+3,f,c
  5167  005564                     l1613:
  5168  005564  0E80               	movlw	128
  5169  005566  1A11               	xorwf	___flge@ff1+3,f,c
  5170  005568  1A15               	xorwf	___flge@ff2+3,f,c
  5171  00556A  5012               	movf	___flge@ff2,w,c
  5172  00556C  5C0E               	subwf	___flge@ff1,w,c
  5173  00556E  5013               	movf	___flge@ff2+1,w,c
  5174  005570  580F               	subwfb	___flge@ff1+1,w,c
  5175  005572  5014               	movf	___flge@ff2+2,w,c
  5176  005574  5810               	subwfb	___flge@ff1+2,w,c
  5177  005576  5015               	movf	___flge@ff2+3,w,c
  5178  005578  5811               	subwfb	___flge@ff1+3,w,c
  5179  00557A  E202               	bc	l11752
  5180  00557C  90D8               	bcf	status,0,c
  5181  00557E  D001               	goto	l1614
  5182  005580                     l11752:
  5183  005580  80D8               	bsf	status,0,c
  5184  005582                     l1614:
  5185  005582  0012               	return	
  5186  005584                     __end_of___flge:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           postinc0	equ	0xFEE
  5195                           wreg	equ	0xFE8
  5196                           postdec1	equ	0xFE5
  5197                           fsr1h	equ	0xFE2
  5198                           fsr1l	equ	0xFE1
  5199                           indf2	equ	0xFDF
  5200                           postinc2	equ	0xFDE
  5201                           postdec2	equ	0xFDD
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function ___altofl *****************
  5207 ;; Defined at:
  5208 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  c               4   42[BANK0 ] long 
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;  sign            1   46[BANK0 ] unsigned char 
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  4   42[BANK0 ] unsigned char 
  5215 ;; Registers used:
  5216 ;;		wreg, status,2, status,0, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : F/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5222 ;;      Params:         0       4       0       0       0       0       0
  5223 ;;      Locals:         0       1       0       0       0       0       0
  5224 ;;      Temps:          0       0       0       0       0       0       0
  5225 ;;      Totals:         0       5       0       0       0       0       0
  5226 ;;Total ram usage:        5 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:    3
  5229 ;; This function calls:
  5230 ;;		___flpack
  5231 ;; This function is called by:
  5232 ;;		_doWork
  5233 ;;		_floor
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text16
  5238  0056F8                     __ptext16:
  5239                           	opt stack 0
  5240  0056F8                     ___altofl:
  5241                           	opt stack 26
  5242                           
  5243                           ; BSR set to: 0
  5244                           
  5245                           ;incstack = 0
  5246                           ;incstack = 0
  5247  0056F8  6B8E               	clrf	___altofl@sign& (0+255),b
  5248  0056FA  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  5249  0056FC  D00A               	goto	l11500
  5250                           
  5251                           ; BSR set to: 0
  5252  0056FE  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  5253  005700  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  5254  005702  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  5255  005704  6D8A               	negf	___altofl@c& (0+255),b
  5256  005706  0E00               	movlw	0
  5257  005708  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  5258  00570A  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  5259  00570C  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  5260                           
  5261                           ; BSR set to: 0
  5262  00570E  0E01               	movlw	1
  5263  005710  6F8E               	movwf	___altofl@sign& (0+255),b
  5264  005712                     l11500:
  5265                           
  5266                           ; BSR set to: 0
  5267  005712  C08A  F00E         	movff	___altofl@c,?___flpack
  5268  005716  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  5269  00571A  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  5270  00571E  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  5271  005722  0E96               	movlw	150
  5272  005724  6E12               	movwf	?___flpack+4,c
  5273  005726  C08E  F013         	movff	___altofl@sign,?___flpack+5
  5274  00572A  ECD1  F025         	call	___flpack	;wreg free
  5275  00572E  C011  F08D         	movff	?___flpack+3,?___altofl+3
  5276  005732  C010  F08C         	movff	?___flpack+2,?___altofl+2
  5277  005736  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  5278  00573A  C00E  F08A         	movff	?___flpack,?___altofl
  5279  00573E  0012               	return	
  5280  005740                     __end_of___altofl:
  5281                           	opt stack 0
  5282                           tblptru	equ	0xFF8
  5283                           tblptrh	equ	0xFF7
  5284                           tblptrl	equ	0xFF6
  5285                           tablat	equ	0xFF5
  5286                           prodh	equ	0xFF4
  5287                           prodl	equ	0xFF3
  5288                           postinc0	equ	0xFEE
  5289                           wreg	equ	0xFE8
  5290                           postdec1	equ	0xFE5
  5291                           fsr1h	equ	0xFE2
  5292                           fsr1l	equ	0xFE1
  5293                           indf2	equ	0xFDF
  5294                           postinc2	equ	0xFDE
  5295                           postdec2	equ	0xFDD
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function ___asflsub *****************
  5301 ;; Defined at:
  5302 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  f1p             2   30[BANK0 ] PTR 
  5305 ;;		 -> exp@x(4), doWork@temp(4), 
  5306 ;;  f2              4   32[BANK0 ] PTR 
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;                  4   30[BANK0 ] PTR 
  5311 ;; Registers used:
  5312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : F/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5318 ;;      Params:         0       6       0       0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0
  5321 ;;      Totals:         0       6       0       0       0       0       0
  5322 ;;Total ram usage:        6 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; Hardware stack levels required when called:    5
  5325 ;; This function calls:
  5326 ;;		___flsub
  5327 ;; This function is called by:
  5328 ;;		_doWork
  5329 ;;		_exp
  5330 ;; This function uses a non-reentrant model
  5331 ;;
  5332                           
  5333                           	psect	text17
  5334  0054EA                     __ptext17:
  5335                           	opt stack 0
  5336  0054EA                     ___asflsub:
  5337                           	opt stack 24
  5338                           
  5339                           ;	Return value of ___asflsub is never used
  5340                           
  5341                           ;incstack = 0
  5342                           ;incstack = 0
  5343  0054EA  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5344  0054EE  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5345  0054F2  0100               	movlb	0	; () banked
  5346  0054F4  CFDE F076          	movff	postinc2,?___flsub
  5347  0054F8  CFDE F077          	movff	postinc2,?___flsub+1
  5348  0054FC  CFDE F078          	movff	postinc2,?___flsub+2
  5349  005500  CFDE F079          	movff	postinc2,?___flsub+3
  5350  005504  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  5351  005508  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  5352  00550C  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  5353  005510  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  5354  005514  EC28  F02C         	call	___flsub	;wreg free
  5355  005518  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5356  00551C  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5357  005520  0100               	movlb	0	; () banked
  5358  005522  C076  FFDE         	movff	?___flsub,postinc2
  5359  005526  C077  FFDE         	movff	?___flsub+1,postinc2
  5360  00552A  C078  FFDE         	movff	?___flsub+2,postinc2
  5361  00552E  C079  FFDD         	movff	?___flsub+3,postdec2
  5362  005532  06D9               	decf	fsr2l,f,c
  5363  005534  06D9               	decf	fsr2l,f,c
  5364                           
  5365                           ; BSR set to: 0
  5366  005536  0012               	return	
  5367  005538                     __end_of___asflsub:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function ___flsub *****************
  5388 ;; Defined at:
  5389 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  f1              4   22[BANK0 ] PTR 
  5392 ;;  f2              4   26[BANK0 ] PTR 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  4   22[BANK0 ] PTR 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5404 ;;      Params:         0       8       0       0       0       0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0
  5407 ;;      Totals:         0       8       0       0       0       0       0
  5408 ;;Total ram usage:        8 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    4
  5411 ;; This function calls:
  5412 ;;		___fladd
  5413 ;; This function is called by:
  5414 ;;		_doWork
  5415 ;;		___asflsub
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text18
  5420  005850                     __ptext18:
  5421                           	opt stack 0
  5422  005850                     ___flsub:
  5423                           	opt stack 25
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;incstack = 0
  5427                           ;incstack = 0
  5428  005850  0100               	movlb	0	; () banked
  5429  005852  0E80               	movlw	128
  5430  005854  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5431                           
  5432                           ; BSR set to: 0
  5433  005856  C076  F01D         	movff	___flsub@f1,?___fladd
  5434  00585A  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  5435  00585E  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  5436  005862  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  5437  005866  C07A  F021         	movff	___flsub@f2,?___fladd+4
  5438  00586A  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  5439  00586E  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  5440  005872  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  5441  005876  EC4B  F021         	call	___fladd	;wreg free
  5442  00587A  C020  F079         	movff	?___fladd+3,?___flsub+3
  5443  00587E  C01F  F078         	movff	?___fladd+2,?___flsub+2
  5444  005882  C01E  F077         	movff	?___fladd+1,?___flsub+1
  5445  005886  C01D  F076         	movff	?___fladd,?___flsub
  5446  00588A  0012               	return	
  5447  00588C                     __end_of___flsub:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           postdec1	equ	0xFE5
  5458                           fsr1h	equ	0xFE2
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           fsr2h	equ	0xFDA
  5464                           fsr2l	equ	0xFD9
  5465                           status	equ	0xFD8
  5466                           
  5467 ;; *************** function ___asflmul *****************
  5468 ;; Defined at:
  5469 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5470 ;; Parameters:    Size  Location     Type
  5471 ;;  mp              1    wreg     PTR 
  5472 ;;		 -> exp@x(4), 
  5473 ;;  multiplicand    4   22[BANK0 ] PTR 
  5474 ;; Auto vars:     Size  Location     Type
  5475 ;;  mp              1   65[COMRAM] PTR 
  5476 ;;		 -> exp@x(4), 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  4   22[BANK0 ] PTR 
  5479 ;; Registers used:
  5480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : F/0
  5483 ;;		On exit  : F/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5486 ;;      Params:         0       4       0       0       0       0       0
  5487 ;;      Locals:         1       0       0       0       0       0       0
  5488 ;;      Temps:          0       0       0       0       0       0       0
  5489 ;;      Totals:         1       4       0       0       0       0       0
  5490 ;;Total ram usage:        5 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    4
  5493 ;; This function calls:
  5494 ;;		___flmul
  5495 ;; This function is called by:
  5496 ;;		_exp
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           	psect	text19
  5501  005584                     __ptext19:
  5502                           	opt stack 0
  5503  005584                     ___asflmul:
  5504                           	opt stack 24
  5505                           
  5506                           ;incstack = 0
  5507                           ;incstack = 0
  5508                           ;___asflmul@mp stored from wreg
  5509  005584  CFE8 F042          	movff	wreg,___asflmul@mp
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;	Return value of ___asflmul is never used
  5513  005588  5042               	movf	___asflmul@mp,w,c
  5514  00558A  6ED9               	movwf	fsr2l,c
  5515  00558C  6ADA               	clrf	fsr2h,c
  5516  00558E  CFDE F060          	movff	postinc2,?___flmul
  5517  005592  CFDE F061          	movff	postinc2,?___flmul+1
  5518  005596  CFDE F062          	movff	postinc2,?___flmul+2
  5519  00559A  CFDE F063          	movff	postinc2,?___flmul+3
  5520  00559E  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  5521  0055A2  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  5522  0055A6  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  5523  0055AA  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  5524  0055AE  ECA4  F024         	call	___flmul	;wreg free
  5525  0055B2  5042               	movf	___asflmul@mp,w,c
  5526  0055B4  6ED9               	movwf	fsr2l,c
  5527  0055B6  6ADA               	clrf	fsr2h,c
  5528  0055B8  0100               	movlb	0	; () banked
  5529  0055BA  C060  FFDE         	movff	?___flmul,postinc2
  5530  0055BE  C061  FFDE         	movff	?___flmul+1,postinc2
  5531  0055C2  C062  FFDE         	movff	?___flmul+2,postinc2
  5532  0055C6  C063  FFDD         	movff	?___flmul+3,postdec2
  5533  0055CA  06D9               	decf	fsr2l,f,c
  5534  0055CC  06D9               	decf	fsr2l,f,c
  5535                           
  5536                           ; BSR set to: 0
  5537  0055CE  0012               	return	
  5538  0055D0                     __end_of___asflmul:
  5539                           	opt stack 0
  5540                           tblptru	equ	0xFF8
  5541                           tblptrh	equ	0xFF7
  5542                           tblptrl	equ	0xFF6
  5543                           tablat	equ	0xFF5
  5544                           prodh	equ	0xFF4
  5545                           prodl	equ	0xFF3
  5546                           postinc0	equ	0xFEE
  5547                           wreg	equ	0xFE8
  5548                           postdec1	equ	0xFE5
  5549                           fsr1h	equ	0xFE2
  5550                           fsr1l	equ	0xFE1
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function ___fldiv *****************
  5559 ;; Defined at:
  5560 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  f1              4   43[COMRAM] PTR 
  5563 ;;  f2              4   47[COMRAM] PTR 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  f3              4   58[COMRAM] PTR 
  5566 ;;  sign            1   64[COMRAM] unsigned char 
  5567 ;;  exp             1   63[COMRAM] unsigned char 
  5568 ;;  cntr            1   62[COMRAM] unsigned char 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  4   43[COMRAM] unsigned char 
  5571 ;; Registers used:
  5572 ;;		wreg, status,2, status,0, cstack
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/1
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5578 ;;      Params:         8       0       0       0       0       0       0
  5579 ;;      Locals:        14       0       0       0       0       0       0
  5580 ;;      Temps:          0       0       0       0       0       0       0
  5581 ;;      Totals:        22       0       0       0       0       0       0
  5582 ;;Total ram usage:       22 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; Hardware stack levels required when called:    3
  5585 ;; This function calls:
  5586 ;;		___flpack
  5587 ;; This function is called by:
  5588 ;;		_doWork
  5589 ;;		_Celsius2Fahrenheit
  5590 ;;		___asfldiv
  5591 ;;		_exp
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text20
  5596  004E80                     __ptext20:
  5597                           	opt stack 0
  5598  004E80                     ___fldiv:
  5599                           	opt stack 26
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;incstack = 0
  5603                           ;incstack = 0
  5604  004E80  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  5605  004E82  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  5606  004E84  6E40               	movwf	___fldiv@exp,c
  5607  004E86  6640               	tstfsz	___fldiv@exp& (0+255),c
  5608  004E88  D001               	goto	l11584
  5609  004E8A  D005               	goto	u10040
  5610  004E8C                     l11584:
  5611  004E8C  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  5612  004E8E  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  5613  004E90  6E41               	movwf	___fldiv@sign,c
  5614  004E92  6641               	tstfsz	___fldiv@sign& (0+255),c
  5615  004E94  D005               	goto	l11588
  5616  004E96                     u10040:
  5617  004E96  6A2C               	clrf	?___fldiv,c
  5618  004E98  6A2D               	clrf	?___fldiv+1,c
  5619  004E9A  6A2E               	clrf	?___fldiv+2,c
  5620  004E9C  6A2F               	clrf	?___fldiv+3,c
  5621  004E9E  D043               	goto	l1605
  5622  004EA0                     l11588:
  5623  004EA0  5041               	movf	___fldiv@sign,w,c
  5624  004EA2  0F89               	addlw	137
  5625  004EA4  5E40               	subwf	___fldiv@exp,f,c
  5626  004EA6  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  5627  004EAA  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  5628  004EAC  1A41               	xorwf	___fldiv@sign,f,c
  5629  004EAE  0E80               	movlw	128
  5630  004EB0  1641               	andwf	___fldiv@sign,f,c
  5631  004EB2  8E2E               	bsf	___fldiv@f1+2,7,c
  5632  004EB4  6A2F               	clrf	___fldiv@f1+3,c
  5633  004EB6  8E32               	bsf	___fldiv@f2+2,7,c
  5634  004EB8  6A33               	clrf	___fldiv@f2+3,c
  5635  004EBA  0E20               	movlw	32
  5636  004EBC  6E3F               	movwf	___fldiv@cntr,c
  5637  004EBE                     l11600:
  5638  004EBE  90D8               	bcf	status,0,c
  5639  004EC0  363B               	rlcf	___fldiv@f3,f,c
  5640  004EC2  363C               	rlcf	___fldiv@f3+1,f,c
  5641  004EC4  363D               	rlcf	___fldiv@f3+2,f,c
  5642  004EC6  363E               	rlcf	___fldiv@f3+3,f,c
  5643  004EC8  5030               	movf	___fldiv@f2,w,c
  5644  004ECA  5C2C               	subwf	___fldiv@f1,w,c
  5645  004ECC  5031               	movf	___fldiv@f2+1,w,c
  5646  004ECE  582D               	subwfb	___fldiv@f1+1,w,c
  5647  004ED0  5032               	movf	___fldiv@f2+2,w,c
  5648  004ED2  582E               	subwfb	___fldiv@f1+2,w,c
  5649  004ED4  5033               	movf	___fldiv@f2+3,w,c
  5650  004ED6  582F               	subwfb	___fldiv@f1+3,w,c
  5651  004ED8  E309               	bnc	l11608
  5652  004EDA  5030               	movf	___fldiv@f2,w,c
  5653  004EDC  5E2C               	subwf	___fldiv@f1,f,c
  5654  004EDE  5031               	movf	___fldiv@f2+1,w,c
  5655  004EE0  5A2D               	subwfb	___fldiv@f1+1,f,c
  5656  004EE2  5032               	movf	___fldiv@f2+2,w,c
  5657  004EE4  5A2E               	subwfb	___fldiv@f1+2,f,c
  5658  004EE6  5033               	movf	___fldiv@f2+3,w,c
  5659  004EE8  5A2F               	subwfb	___fldiv@f1+3,f,c
  5660  004EEA  803B               	bsf	___fldiv@f3,0,c
  5661  004EEC                     l11608:
  5662  004EEC  90D8               	bcf	status,0,c
  5663  004EEE  362C               	rlcf	___fldiv@f1,f,c
  5664  004EF0  362D               	rlcf	___fldiv@f1+1,f,c
  5665  004EF2  362E               	rlcf	___fldiv@f1+2,f,c
  5666  004EF4  362F               	rlcf	___fldiv@f1+3,f,c
  5667  004EF6  2E3F               	decfsz	___fldiv@cntr,f,c
  5668  004EF8  D7E2               	goto	l11600
  5669  004EFA  C03B  F00E         	movff	___fldiv@f3,?___flpack
  5670  004EFE  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5671  004F02  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  5672  004F06  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  5673  004F0A  C040  F012         	movff	___fldiv@exp,?___flpack+4
  5674  004F0E  C041  F013         	movff	___fldiv@sign,?___flpack+5
  5675  004F12  ECD1  F025         	call	___flpack	;wreg free
  5676  004F16  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  5677  004F1A  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  5678  004F1E  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  5679  004F22  C00E  F02C         	movff	?___flpack,?___fldiv
  5680  004F26                     l1605:
  5681  004F26  0012               	return	
  5682  004F28                     __end_of___fldiv:
  5683                           	opt stack 0
  5684                           tblptru	equ	0xFF8
  5685                           tblptrh	equ	0xFF7
  5686                           tblptrl	equ	0xFF6
  5687                           tablat	equ	0xFF5
  5688                           prodh	equ	0xFF4
  5689                           prodl	equ	0xFF3
  5690                           postinc0	equ	0xFEE
  5691                           wreg	equ	0xFE8
  5692                           postdec1	equ	0xFE5
  5693                           fsr1h	equ	0xFE2
  5694                           fsr1l	equ	0xFE1
  5695                           indf2	equ	0xFDF
  5696                           postinc2	equ	0xFDE
  5697                           postdec2	equ	0xFDD
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _vscp_doOneSecondWork *****************
  5703 ;; Defined at:
  5704 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;		None
  5709 ;; Return value:  Size  Location     Type
  5710 ;;		None               void
  5711 ;; Registers used:
  5712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : F/0
  5715 ;;		On exit  : F/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5718 ;;      Params:         0       0       0       0       0       0       0
  5719 ;;      Locals:         0       0       0       0       0       0       0
  5720 ;;      Temps:          0       1       0       0       0       0       0
  5721 ;;      Totals:         0       1       0       0       0       0       0
  5722 ;;Total ram usage:        1 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    8
  5725 ;; This function calls:
  5726 ;;		_vscp_getZone
  5727 ;;		_vscp_getSubzone
  5728 ;;		_vscp_sendHeartBeat
  5729 ;; This function is called by:
  5730 ;;		_main
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text21
  5735  0055D0                     __ptext21:
  5736                           	opt stack 0
  5737  0055D0                     _vscp_doOneSecondWork:
  5738                           	opt stack 22
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;vscp_firmware.c: 518: ++vscp_second;
  5742                           
  5743                           ;incstack = 0
  5744                           ;incstack = 0
  5745  0055D0  2A51               	incf	_vscp_second,f,c
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  5749  0055D2  0E3B               	movlw	59
  5750  0055D4  6451               	cpfsgt	_vscp_second,c
  5751  0055D6  D00C               	goto	l10214
  5752                           
  5753                           ; BSR set to: 0
  5754                           ;vscp_firmware.c: 521: vscp_second = 0;
  5755  0055D8  6A51               	clrf	_vscp_second,c
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;vscp_firmware.c: 522: vscp_minute++;
  5759  0055DA  2BB9               	incf	_vscp_minute& (0+255),f,b
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  5763  0055DC  51BB               	movf	_vscp_node_state& (0+255),w,b
  5764  0055DE  0A03               	xorlw	3
  5765  0055E0  E107               	bnz	l10214
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  5769                           ;vscp_firmware.c: 527: vscp_getSubzone());
  5770  0055E2  ECB1  F02E         	call	_vscp_getSubzone	;wreg free
  5771  0055E6  6E44               	movwf	?_vscp_sendHeartBeat,c
  5772  0055E8  ECB6  F02E         	call	_vscp_getZone	;wreg free
  5773  0055EC  EC6B  F02D         	call	_vscp_sendHeartBeat
  5774  0055F0                     l10214:
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;vscp_firmware.c: 528: }
  5778                           ;vscp_firmware.c: 529: }
  5779                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  5780  0055F0  0E3B               	movlw	59
  5781  0055F2  65B9               	cpfsgt	_vscp_minute& (0+255),b
  5782  0055F4  D002               	goto	l10220
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;vscp_firmware.c: 532: vscp_minute = 0;
  5786  0055F6  6BB9               	clrf	_vscp_minute& (0+255),b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;vscp_firmware.c: 533: vscp_hour++;
  5790  0055F8  2BB7               	incf	_vscp_hour& (0+255),f,b
  5791  0055FA                     l10220:
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;vscp_firmware.c: 534: }
  5795                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  5796  0055FA  0E17               	movlw	23
  5797  0055FC  65B7               	cpfsgt	_vscp_hour& (0+255),b
  5798  0055FE  D001               	goto	l10224
  5799                           
  5800                           ; BSR set to: 0
  5801  005600  6BB7               	clrf	_vscp_hour& (0+255),b
  5802  005602                     l10224:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  5806  005602  51BB               	movf	_vscp_node_state& (0+255),w,b
  5807  005604  0A03               	xorlw	3
  5808  005606  E109               	bnz	l1103
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  5812  005608  2A4C               	incf	_vscp_guid_reset,f,c
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  5816  00560A  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5817  00560E  0E0F               	movlw	15
  5818  005610  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5819  005612  0E02               	movlw	2
  5820  005614  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5821  005616  B0D8               	btfsc	status,0,c
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  5825  005618  6A4C               	clrf	_vscp_guid_reset,c
  5826  00561A                     l1103:
  5827                           
  5828                           ; BSR set to: 0
  5829  00561A  0012               	return	
  5830  00561C                     __end_of_vscp_doOneSecondWork:
  5831                           	opt stack 0
  5832                           tblptru	equ	0xFF8
  5833                           tblptrh	equ	0xFF7
  5834                           tblptrl	equ	0xFF6
  5835                           tablat	equ	0xFF5
  5836                           prodh	equ	0xFF4
  5837                           prodl	equ	0xFF3
  5838                           postinc0	equ	0xFEE
  5839                           wreg	equ	0xFE8
  5840                           postdec1	equ	0xFE5
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           fsr2h	equ	0xFDA
  5847                           fsr2l	equ	0xFD9
  5848                           status	equ	0xFD8
  5849                           
  5850 ;; *************** function _vscp_sendHeartBeat *****************
  5851 ;; Defined at:
  5852 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  5853 ;; Parameters:    Size  Location     Type
  5854 ;;  zone            1    wreg     unsigned char 
  5855 ;;  subzone         1   67[COMRAM] unsigned char 
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;  zone            1   68[COMRAM] unsigned char 
  5858 ;; Return value:  Size  Location     Type
  5859 ;;		None               void
  5860 ;; Registers used:
  5861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : F/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5867 ;;      Params:         1       0       0       0       0       0       0
  5868 ;;      Locals:         1       0       0       0       0       0       0
  5869 ;;      Temps:          0       0       0       0       0       0       0
  5870 ;;      Totals:         2       0       0       0       0       0       0
  5871 ;;Total ram usage:        2 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    7
  5874 ;; This function calls:
  5875 ;;		_vscp_sendEvent
  5876 ;; This function is called by:
  5877 ;;		_vscp_doOneSecondWork
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text22
  5882  005AD6                     __ptext22:
  5883                           	opt stack 0
  5884  005AD6                     _vscp_sendHeartBeat:
  5885                           	opt stack 22
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;incstack = 0
  5889                           ;incstack = 0
  5890                           ;vscp_sendHeartBeat@zone stored from wreg
  5891  005AD6  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5892                           
  5893                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  5894  005ADA  0E83               	movlw	131
  5895  005ADC  0100               	movlb	0	; () banked
  5896  005ADE  6FCA               	movwf	_vscp_omsg& (0+255),b
  5897                           
  5898                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  5899  005AE0  0E07               	movlw	7
  5900  005AE2  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  5901                           
  5902                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  5903  005AE4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  5904  005AE6  0E14               	movlw	20
  5905  005AE8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  5906                           
  5907                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  5908  005AEA  0E09               	movlw	9
  5909  005AEC  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  5913  005AEE  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  5917  005AF0  C045  F0D0         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  5921  005AF4  C044  F0D1         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;vscp_firmware.c: 380: vscp_sendEvent();
  5925  005AF8  EF57  F02D         	goto	_vscp_sendEvent	;wreg free
  5926  005AFC                     __end_of_vscp_sendHeartBeat:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1h	equ	0xFE2
  5938                           fsr1l	equ	0xFE1
  5939                           indf2	equ	0xFDF
  5940                           postinc2	equ	0xFDE
  5941                           postdec2	equ	0xFDD
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _vscp_getSubzone *****************
  5947 ;; Defined at:
  5948 ;;		line 2734 in file "../main.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      unsigned char 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : F/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5962 ;;      Params:         0       0       0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0       0       0
  5964 ;;      Temps:          0       0       0       0       0       0       0
  5965 ;;      Totals:         0       0       0       0       0       0       0
  5966 ;;Total ram usage:        0 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    3
  5969 ;; This function calls:
  5970 ;;		_readEEPROM
  5971 ;; This function is called by:
  5972 ;;		_vscp_doOneSecondWork
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text23
  5977  005D62                     __ptext23:
  5978                           	opt stack 0
  5979  005D62                     _vscp_getSubzone:
  5980                           	opt stack 26
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;main.c: 2735: return readEEPROM(0x42);
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;incstack = 0
  5987                           ;incstack = 0
  5988  005D62  6A0F               	clrf	?_readEEPROM+1,c
  5989  005D64  0E42               	movlw	66
  5990  005D66  6E0E               	movwf	?_readEEPROM,c
  5991  005D68  EF8D  F02E         	goto	_readEEPROM	;wreg free
  5992  005D6C                     __end_of_vscp_getSubzone:
  5993                           	opt stack 0
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           postdec1	equ	0xFE5
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _vscp_getZone *****************
  6013 ;; Defined at:
  6014 ;;		line 2725 in file "../main.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;                  1    wreg      unsigned char 
  6021 ;; Registers used:
  6022 ;;		wreg, status,2, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6028 ;;      Params:         0       0       0       0       0       0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0
  6031 ;;      Totals:         0       0       0       0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    3
  6035 ;; This function calls:
  6036 ;;		_readEEPROM
  6037 ;; This function is called by:
  6038 ;;		_vscp_doOneSecondWork
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text24
  6043  005D6C                     __ptext24:
  6044                           	opt stack 0
  6045  005D6C                     _vscp_getZone:
  6046                           	opt stack 26
  6047                           
  6048                           ;main.c: 2726: return readEEPROM(0x41);
  6049                           
  6050                           ;incstack = 0
  6051                           ;incstack = 0
  6052  005D6C  6A0F               	clrf	?_readEEPROM+1,c
  6053  005D6E  0E41               	movlw	65
  6054  005D70  6E0E               	movwf	?_readEEPROM,c
  6055  005D72  EF8D  F02E         	goto	_readEEPROM	;wreg free
  6056  005D76                     __end_of_vscp_getZone:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           postdec1	equ	0xFE5
  6067                           fsr1h	equ	0xFE2
  6068                           fsr1l	equ	0xFE1
  6069                           indf2	equ	0xFDF
  6070                           postinc2	equ	0xFDE
  6071                           postdec2	equ	0xFDD
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function _doOneSecondWork *****************
  6077 ;; Defined at:
  6078 ;;		line 702 in file "../main.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;		None
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  i               1   42[BANK0 ] unsigned char 
  6083 ;;  tmp             1   41[BANK0 ] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;		None               void
  6086 ;; Registers used:
  6087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : F/1
  6090 ;;		On exit  : F/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6093 ;;      Params:         0       0       0       0       0       0       0
  6094 ;;      Locals:         0       2       0       0       0       0       0
  6095 ;;      Temps:          0       2       0       0       0       0       0
  6096 ;;      Totals:         0       4       0       0       0       0       0
  6097 ;;Total ram usage:        4 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    8
  6100 ;; This function calls:
  6101 ;;		_readEEPROM
  6102 ;;		_vscp_sendEvent
  6103 ;;		_sendTempEvent
  6104 ;; This function is called by:
  6105 ;;		_main
  6106 ;; This function uses a non-reentrant model
  6107 ;;
  6108                           
  6109                           	psect	text25
  6110  003A14                     __ptext25:
  6111                           	opt stack 0
  6112  003A14                     _doOneSecondWork:
  6113                           	opt stack 22
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;main.c: 704: uint8_t tmp;
  6117                           ;main.c: 705: uint8_t i;
  6118                           ;main.c: 708: if ( 0x03 == vscp_node_state ) {
  6119                           
  6120                           ;incstack = 0
  6121                           ;incstack = 0
  6122  003A14  0100               	movlb	0	; () banked
  6123  003A16  51BB               	movf	_vscp_node_state& (0+255),w,b
  6124  003A18  0A03               	xorlw	3
  6125  003A1A  E001 D0FE          	bnz	l245
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;main.c: 710: for (i = 0; i < 6; i++) {
  6129  003A1E  6B8A               	clrf	doOneSecondWork@i& (0+255),b
  6130  003A20                     l10134:
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;main.c: 713: tmp = readEEPROM(0x49 + i);
  6134  003A20  0E49               	movlw	73
  6135  003A22  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6136  003A24  6E0E               	movwf	?_readEEPROM,c
  6137  003A26  6A0F               	clrf	?_readEEPROM+1,c
  6138  003A28  0E00               	movlw	0
  6139  003A2A  220F               	addwfc	?_readEEPROM+1,f,c
  6140  003A2C  EC8D  F02E         	call	_readEEPROM	;wreg free
  6141  003A30  0100               	movlb	0	; () banked
  6142  003A32  6F89               	movwf	doOneSecondWork@tmp& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;main.c: 714: if (tmp && (seconds_temp[i] > tmp)) {
  6146  003A34  5189               	movf	doOneSecondWork@tmp& (0+255),w,b
  6147  003A36  E016               	bz	l10144
  6148                           
  6149                           ; BSR set to: 0
  6150  003A38  0E0C               	movlw	low _seconds_temp
  6151  003A3A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6152  003A3C  6ED9               	movwf	fsr2l,c
  6153  003A3E  6ADA               	clrf	fsr2h,c
  6154  003A40  0E01               	movlw	high _seconds_temp
  6155  003A42  22DA               	addwfc	fsr2h,f,c
  6156  003A44  50DF               	movf	indf2,w,c
  6157  003A46  6189               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6158  003A48  D00D               	goto	l10144
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;main.c: 717: if ( sendTempEvent( i ) ) {
  6162  003A4A  518A               	movf	doOneSecondWork@i& (0+255),w,b
  6163  003A4C  EC13  F029         	call	_sendTempEvent
  6164  003A50  0900               	iorlw	0
  6165  003A52  E008               	bz	l10144
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;main.c: 718: seconds_temp[i] = 0;
  6169  003A54  0E0C               	movlw	low _seconds_temp
  6170  003A56  0100               	movlb	0	; () banked
  6171  003A58  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6172  003A5A  6ED9               	movwf	fsr2l,c
  6173  003A5C  6ADA               	clrf	fsr2h,c
  6174  003A5E  0E01               	movlw	high _seconds_temp
  6175  003A60  22DA               	addwfc	fsr2h,f,c
  6176  003A62  6ADF               	clrf	indf2,c
  6177  003A64                     l10144:
  6178                           
  6179                           ;main.c: 719: }
  6180                           ;main.c: 721: }
  6181                           ;main.c: 724: if (0x80 & readEEPROM(0x43 + i)) {
  6182  003A64  0E43               	movlw	67
  6183  003A66  0100               	movlb	0	; () banked
  6184  003A68  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6185  003A6A  6E0E               	movwf	?_readEEPROM,c
  6186  003A6C  6A0F               	clrf	?_readEEPROM+1,c
  6187  003A6E  0E00               	movlw	0
  6188  003A70  220F               	addwfc	?_readEEPROM+1,f,c
  6189  003A72  EC8D  F02E         	call	_readEEPROM	;wreg free
  6190  003A76  0100               	movlb	0	; () banked
  6191  003A78  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6192  003A7A  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  6193  003A7C  D0CA               	goto	l10198
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;main.c: 727: if (low_alarm & (1 << i)) {
  6197  003A7E  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6198  003A82  0E01               	movlw	1
  6199  003A84  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6200  003A86  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6201  003A88  D002               	goto	u8244
  6202  003A8A                     u8245:
  6203  003A8A  90D8               	bcf	status,0,c
  6204  003A8C  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6205  003A8E                     u8244:
  6206  003A8E  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6207  003A90  D7FC               	goto	u8245
  6208  003A92  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6209  003A94  15B5               	andwf	_low_alarm& (0+255),w,b
  6210  003A96  E058               	bz	l10172
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;main.c: 730: if (readEEPROM(i + 0x43) & (1<<3)) {
  6214  003A98  0E43               	movlw	67
  6215  003A9A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6216  003A9C  6E0E               	movwf	?_readEEPROM,c
  6217  003A9E  6A0F               	clrf	?_readEEPROM+1,c
  6218  003AA0  0E00               	movlw	0
  6219  003AA2  220F               	addwfc	?_readEEPROM+1,f,c
  6220  003AA4  EC8D  F02E         	call	_readEEPROM	;wreg free
  6221  003AA8  0100               	movlb	0	; () banked
  6222  003AAA  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6223  003AAC  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  6224  003AAE  D04C               	goto	l10172
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;main.c: 733: vscp_omsg.priority = 0x00;
  6228  003AB0  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;main.c: 734: vscp_omsg.flags = 0x80 + 3;
  6232  003AB2  0E83               	movlw	131
  6233  003AB4  6FCA               	movwf	_vscp_omsg& (0+255),b
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;main.c: 736: if (readEEPROM(i + 0x43) & (1<<5)) {
  6237  003AB6  0E43               	movlw	67
  6238  003AB8  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6239  003ABA  6E0E               	movwf	?_readEEPROM,c
  6240  003ABC  6A0F               	clrf	?_readEEPROM+1,c
  6241  003ABE  0E00               	movlw	0
  6242  003AC0  220F               	addwfc	?_readEEPROM+1,f,c
  6243  003AC2  EC8D  F02E         	call	_readEEPROM	;wreg free
  6244  003AC6  0100               	movlb	0	; () banked
  6245  003AC8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6246  003ACA  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6247  003ACC  D016               	goto	l10162
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<6)) {
  6251  003ACE  0E43               	movlw	67
  6252  003AD0  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6253  003AD2  6E0E               	movwf	?_readEEPROM,c
  6254  003AD4  6A0F               	clrf	?_readEEPROM+1,c
  6255  003AD6  0E00               	movlw	0
  6256  003AD8  220F               	addwfc	?_readEEPROM+1,f,c
  6257  003ADA  EC8D  F02E         	call	_readEEPROM	;wreg free
  6258  003ADE  0100               	movlb	0	; () banked
  6259  003AE0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6260  003AE2  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6261  003AE4  D005               	goto	l10160
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;main.c: 739: vscp_omsg.vscp_class = 30;
  6265  003AE6  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6266  003AE8  0E1E               	movlw	30
  6267  003AEA  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6268                           
  6269                           ;main.c: 740: vscp_omsg.vscp_type = 5;
  6270  003AEC  0E05               	movlw	5
  6271  003AEE  D009               	goto	L6
  6272  003AF0                     l10160:
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 742: else {
  6276                           ;main.c: 743: vscp_omsg.vscp_class = 30;
  6277  003AF0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6278  003AF2  0E1E               	movlw	30
  6279  003AF4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6280                           
  6281                           ;main.c: 744: vscp_omsg.vscp_type = 6;
  6282  003AF6  0E06               	movlw	6
  6283  003AF8  D004               	goto	L6
  6284  003AFA                     l10162:
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;main.c: 748: else {
  6288                           ;main.c: 750: vscp_omsg.vscp_class = 1;
  6289  003AFA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6290  003AFC  0E01               	movlw	1
  6291  003AFE  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6292                           
  6293                           ;main.c: 751: vscp_omsg.vscp_type = 2;
  6294  003B00  0E02               	movlw	2
  6295  003B02                     L6:
  6296  003B02  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;main.c: 752: }
  6300                           ;main.c: 754: vscp_omsg.data[ 0 ] = i;
  6301  003B04  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;main.c: 755: vscp_omsg.data[ 1 ] =
  6305                           ;main.c: 756: readEEPROM(2 * i + 0x73);
  6306  003B08  90D8               	bcf	status,0,c
  6307  003B0A  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6308  003B0C  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6309  003B0E  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6310  003B10  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6311  003B12  0E73               	movlw	115
  6312  003B14  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6313  003B16  6E0E               	movwf	?_readEEPROM,c
  6314  003B18  0E00               	movlw	0
  6315  003B1A  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6316  003B1C  6E0F               	movwf	?_readEEPROM+1,c
  6317  003B1E  EC8D  F02E         	call	_readEEPROM	;wreg free
  6318  003B22  0100               	movlb	0	; () banked
  6319  003B24  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;main.c: 757: vscp_omsg.data[ 2 ] =
  6323                           ;main.c: 758: readEEPROM(2 * i + 0x74);
  6324  003B26  90D8               	bcf	status,0,c
  6325  003B28  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6326  003B2A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6327  003B2C  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6328  003B2E  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6329  003B30  0E74               	movlw	116
  6330  003B32  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6331  003B34  6E0E               	movwf	?_readEEPROM,c
  6332  003B36  0E00               	movlw	0
  6333  003B38  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6334  003B3A  6E0F               	movwf	?_readEEPROM+1,c
  6335  003B3C  EC8D  F02E         	call	_readEEPROM	;wreg free
  6336  003B40  0100               	movlb	0	; () banked
  6337  003B42  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;main.c: 763: vscp_sendEvent();
  6341  003B44  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  6342  003B48                     l10172:
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;main.c: 765: }
  6346                           ;main.c: 766: }
  6347                           ;main.c: 769: if (high_alarm & (1 << i)) {
  6348  003B48  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6349  003B4C  0E01               	movlw	1
  6350  003B4E  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6351  003B50  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6352  003B52  D002               	goto	u8294
  6353  003B54                     u8295:
  6354  003B54  90D8               	bcf	status,0,c
  6355  003B56  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6356  003B58                     u8294:
  6357  003B58  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6358  003B5A  D7FC               	goto	u8295
  6359  003B5C  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6360  003B5E  15B4               	andwf	_high_alarm& (0+255),w,b
  6361  003B60  E058               	bz	l10198
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;main.c: 772: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6365  003B62  0E43               	movlw	67
  6366  003B64  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6367  003B66  6E0E               	movwf	?_readEEPROM,c
  6368  003B68  6A0F               	clrf	?_readEEPROM+1,c
  6369  003B6A  0E00               	movlw	0
  6370  003B6C  220F               	addwfc	?_readEEPROM+1,f,c
  6371  003B6E  EC8D  F02E         	call	_readEEPROM	;wreg free
  6372  003B72  0100               	movlb	0	; () banked
  6373  003B74  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6374  003B76  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6375  003B78  D04C               	goto	l10198
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;main.c: 774: vscp_omsg.priority = 0x00;
  6379  003B7A  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;main.c: 775: vscp_omsg.flags = 0x80 + 3;
  6383  003B7C  0E83               	movlw	131
  6384  003B7E  6FCA               	movwf	_vscp_omsg& (0+255),b
  6385                           
  6386                           ; BSR set to: 0
  6387                           ;main.c: 777: if (readEEPROM(i + 0x43) & (1<<5)) {
  6388  003B80  0E43               	movlw	67
  6389  003B82  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6390  003B84  6E0E               	movwf	?_readEEPROM,c
  6391  003B86  6A0F               	clrf	?_readEEPROM+1,c
  6392  003B88  0E00               	movlw	0
  6393  003B8A  220F               	addwfc	?_readEEPROM+1,f,c
  6394  003B8C  EC8D  F02E         	call	_readEEPROM	;wreg free
  6395  003B90  0100               	movlb	0	; () banked
  6396  003B92  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6397  003B94  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6398  003B96  D016               	goto	l10188
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;main.c: 778: if (readEEPROM(i + 0x43) & (1<<6)) {
  6402  003B98  0E43               	movlw	67
  6403  003B9A  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6404  003B9C  6E0E               	movwf	?_readEEPROM,c
  6405  003B9E  6A0F               	clrf	?_readEEPROM+1,c
  6406  003BA0  0E00               	movlw	0
  6407  003BA2  220F               	addwfc	?_readEEPROM+1,f,c
  6408  003BA4  EC8D  F02E         	call	_readEEPROM	;wreg free
  6409  003BA8  0100               	movlb	0	; () banked
  6410  003BAA  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6411  003BAC  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6412  003BAE  D005               	goto	l10186
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;main.c: 779: vscp_omsg.vscp_class = 30;
  6416  003BB0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6417  003BB2  0E1E               	movlw	30
  6418  003BB4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6419                           
  6420                           ;main.c: 780: vscp_omsg.vscp_type = 6;
  6421  003BB6  0E06               	movlw	6
  6422  003BB8  D009               	goto	L7
  6423  003BBA                     l10186:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;main.c: 782: else {
  6427                           ;main.c: 783: vscp_omsg.vscp_class = 30;
  6428  003BBA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6429  003BBC  0E1E               	movlw	30
  6430  003BBE  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6431                           
  6432                           ;main.c: 784: vscp_omsg.vscp_type = 5;
  6433  003BC0  0E05               	movlw	5
  6434  003BC2  D004               	goto	L7
  6435  003BC4                     l10188:
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;main.c: 787: else {
  6439                           ;main.c: 789: vscp_omsg.vscp_class = 1;
  6440  003BC4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6441  003BC6  0E01               	movlw	1
  6442  003BC8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6443                           
  6444                           ;main.c: 790: vscp_omsg.vscp_type = 2;
  6445  003BCA  0E02               	movlw	2
  6446  003BCC                     L7:
  6447  003BCC  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6448                           
  6449                           ; BSR set to: 0
  6450                           ;main.c: 791: }
  6451                           ;main.c: 793: vscp_omsg.data[ 0 ] = i;
  6452  003BCE  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;main.c: 794: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6456                           ;main.c: 795: 0x73);
  6457  003BD2  90D8               	bcf	status,0,c
  6458  003BD4  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6459  003BD6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6460  003BD8  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6461  003BDA  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6462  003BDC  0E73               	movlw	115
  6463  003BDE  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6464  003BE0  6E0E               	movwf	?_readEEPROM,c
  6465  003BE2  0E00               	movlw	0
  6466  003BE4  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6467  003BE6  6E0F               	movwf	?_readEEPROM+1,c
  6468  003BE8  EC8D  F02E         	call	_readEEPROM	;wreg free
  6469  003BEC  0100               	movlb	0	; () banked
  6470  003BEE  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;main.c: 796: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6474                           ;main.c: 797: 0x74);
  6475  003BF0  90D8               	bcf	status,0,c
  6476  003BF2  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6477  003BF4  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6478  003BF6  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6479  003BF8  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6480  003BFA  0E74               	movlw	116
  6481  003BFC  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6482  003BFE  6E0E               	movwf	?_readEEPROM,c
  6483  003C00  0E00               	movlw	0
  6484  003C02  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6485  003C04  6E0F               	movwf	?_readEEPROM+1,c
  6486  003C06  EC8D  F02E         	call	_readEEPROM	;wreg free
  6487  003C0A  0100               	movlb	0	; () banked
  6488  003C0C  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;main.c: 802: vscp_sendEvent();
  6492  003C0E  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  6493  003C12                     l10198:
  6494                           
  6495                           ; BSR set to: 0
  6496  003C12  2B8A               	incf	doOneSecondWork@i& (0+255),f,b
  6497                           
  6498                           ; BSR set to: 0
  6499  003C14  0E05               	movlw	5
  6500  003C16  658A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6501  003C18  D703               	goto	l10134
  6502  003C1A                     l245:
  6503                           
  6504                           ; BSR set to: 0
  6505  003C1A  0012               	return	
  6506  003C1C                     __end_of_doOneSecondWork:
  6507                           	opt stack 0
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           postinc0	equ	0xFEE
  6515                           wreg	equ	0xFE8
  6516                           postdec1	equ	0xFE5
  6517                           fsr1h	equ	0xFE2
  6518                           fsr1l	equ	0xFE1
  6519                           indf2	equ	0xFDF
  6520                           postinc2	equ	0xFDE
  6521                           postdec2	equ	0xFDD
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _vscp_error *****************
  6527 ;; Defined at:
  6528 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;		None               void
  6535 ;; Registers used:
  6536 ;;		None
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6542 ;;      Params:         0       0       0       0       0       0       0
  6543 ;;      Locals:         0       0       0       0       0       0       0
  6544 ;;      Temps:          0       0       0       0       0       0       0
  6545 ;;      Totals:         0       0       0       0       0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    2
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_main
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           	psect	text26
  6557  005DA6                     __ptext26:
  6558                           	opt stack 0
  6559  005DA6                     _vscp_error:
  6560                           	opt stack 28
  6561                           
  6562                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;incstack = 0
  6566                           ;incstack = 0
  6567  005DA6  6A4D               	clrf	_vscp_initledfunc,c
  6568  005DA8  0012               	return	
  6569  005DAA                     __end_of_vscp_error:
  6570                           	opt stack 0
  6571                           tblptru	equ	0xFF8
  6572                           tblptrh	equ	0xFF7
  6573                           tblptrl	equ	0xFF6
  6574                           tablat	equ	0xFF5
  6575                           prodh	equ	0xFF4
  6576                           prodl	equ	0xFF3
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           postdec1	equ	0xFE5
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _handle_sync *****************
  6590 ;; Defined at:
  6591 ;;		line 1253 in file "../main.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;		None
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  i               1   41[BANK0 ] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;		None               void
  6598 ;; Registers used:
  6599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6600 ;; Tracked objects:
  6601 ;;		On entry : F/0
  6602 ;;		On exit  : F/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6605 ;;      Params:         0       0       0       0       0       0       0
  6606 ;;      Locals:         0       1       0       0       0       0       0
  6607 ;;      Temps:          0       2       0       0       0       0       0
  6608 ;;      Totals:         0       3       0       0       0       0       0
  6609 ;;Total ram usage:        3 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:    8
  6612 ;; This function calls:
  6613 ;;		_readEEPROM
  6614 ;;		_sendTempEvent
  6615 ;; This function is called by:
  6616 ;;		_main
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           	psect	text27
  6621  0052AA                     __ptext27:
  6622                           	opt stack 0
  6623  0052AA                     _handle_sync:
  6624                           	opt stack 22
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;main.c: 1254: uint8_t i;
  6628                           ;main.c: 1257: for (i = 0; i < 6; i++) {
  6629                           
  6630                           ;incstack = 0
  6631                           ;incstack = 0
  6632  0052AA  6B89               	clrf	handle_sync@i& (0+255),b
  6633  0052AC                     l10108:
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;main.c: 1259: if ((0xff != vscp_imsg.data[ 1 ] ||
  6637                           ;main.c: 1260: (readEEPROM(2 * i + 0x73) != vscp_imsg.data[ 1 ])) &&
  6638                           ;main.c: 1261: (0xff != vscp_imsg.data[ 2 ] ||
  6639                           ;main.c: 1262: (readEEPROM(2 * i + 0x74) != vscp_imsg.data[ 2 ]))) {
  6640  0052AC  29C3               	incf	(_vscp_imsg+7)& (0+255),w,b
  6641  0052AE  E110               	bnz	l10112
  6642                           
  6643                           ; BSR set to: 0
  6644  0052B0  90D8               	bcf	status,0,c
  6645  0052B2  3589               	rlcf	handle_sync@i& (0+255),w,b
  6646  0052B4  6F87               	movwf	??_handle_sync& (0+255),b
  6647  0052B6  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6648  0052B8  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6649  0052BA  0E73               	movlw	115
  6650  0052BC  2587               	addwf	??_handle_sync& (0+255),w,b
  6651  0052BE  6E0E               	movwf	?_readEEPROM,c
  6652  0052C0  0E00               	movlw	0
  6653  0052C2  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6654  0052C4  6E0F               	movwf	?_readEEPROM+1,c
  6655  0052C6  EC8D  F02E         	call	_readEEPROM	;wreg free
  6656  0052CA  0100               	movlb	0	; () banked
  6657  0052CC  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6658  0052CE  E028               	bz	l10122
  6659  0052D0                     l10112:
  6660                           
  6661                           ; BSR set to: 0
  6662  0052D0  29C4               	incf	(_vscp_imsg+8)& (0+255),w,b
  6663  0052D2  E110               	bnz	l295
  6664                           
  6665                           ; BSR set to: 0
  6666  0052D4  90D8               	bcf	status,0,c
  6667  0052D6  3589               	rlcf	handle_sync@i& (0+255),w,b
  6668  0052D8  6F87               	movwf	??_handle_sync& (0+255),b
  6669  0052DA  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6670  0052DC  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6671  0052DE  0E74               	movlw	116
  6672  0052E0  2587               	addwf	??_handle_sync& (0+255),w,b
  6673  0052E2  6E0E               	movwf	?_readEEPROM,c
  6674  0052E4  0E00               	movlw	0
  6675  0052E6  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6676  0052E8  6E0F               	movwf	?_readEEPROM+1,c
  6677  0052EA  EC8D  F02E         	call	_readEEPROM	;wreg free
  6678  0052EE  0100               	movlb	0	; () banked
  6679  0052F0  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6680  0052F2  E016               	bz	l10122
  6681  0052F4                     l295:
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 1265: timeout_clock = 0;
  6685  0052F4  0101               	movlb	1	; () banked
  6686  0052F6  6B16               	clrf	_timeout_clock& (0+255),b
  6687  0052F8  6B17               	clrf	(_timeout_clock+1)& (0+255),b
  6688  0052FA  6B18               	clrf	(_timeout_clock+2)& (0+255),b
  6689  0052FC  6B19               	clrf	(_timeout_clock+3)& (0+255),b
  6690                           
  6691                           ;main.c: 1266: while (!sendTempEvent(i)) {
  6692  0052FE  D00A               	goto	l10120
  6693  005300                     l10116:
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;main.c: 1267: if (timeout_clock > 1000) break;
  6697  005300  0EE9               	movlw	233
  6698  005302  0101               	movlb	1	; () banked
  6699  005304  5D16               	subwf	_timeout_clock& (0+255),w,b
  6700  005306  0E03               	movlw	3
  6701  005308  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b
  6702  00530A  0E00               	movlw	0
  6703  00530C  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b
  6704  00530E  0E00               	movlw	0
  6705  005310  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b
  6706  005312  E206               	bc	l10122
  6707  005314                     l10120:
  6708                           
  6709                           ; BSR set to: 1
  6710  005314  0100               	movlb	0	; () banked
  6711  005316  5189               	movf	handle_sync@i& (0+255),w,b
  6712  005318  EC13  F029         	call	_sendTempEvent
  6713  00531C  0900               	iorlw	0
  6714  00531E  E0F0               	bz	l10116
  6715  005320                     l10122:
  6716  005320  0100               	movlb	0	; () banked
  6717  005322  2B89               	incf	handle_sync@i& (0+255),f,b
  6718                           
  6719                           ; BSR set to: 0
  6720  005324  0E05               	movlw	5
  6721  005326  6589               	cpfsgt	handle_sync@i& (0+255),b
  6722  005328  D7C1               	goto	l10108
  6723                           
  6724                           ; BSR set to: 0
  6725  00532A  0C05               	retlw	5
  6726  00532C                     __end_of_handle_sync:
  6727                           	opt stack 0
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           postinc0	equ	0xFEE
  6735                           wreg	equ	0xFE8
  6736                           postdec1	equ	0xFE5
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           indf2	equ	0xFDF
  6740                           postinc2	equ	0xFDE
  6741                           postdec2	equ	0xFDD
  6742                           fsr2h	equ	0xFDA
  6743                           fsr2l	equ	0xFD9
  6744                           status	equ	0xFD8
  6745                           
  6746 ;; *************** function _sendTempEvent *****************
  6747 ;; Defined at:
  6748 ;;		line 815 in file "../main.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  i               1    wreg     unsigned char 
  6751 ;; Auto vars:     Size  Location     Type
  6752 ;;  i               1   38[BANK0 ] unsigned char 
  6753 ;; Return value:  Size  Location     Type
  6754 ;;                  1    wreg      unsigned char 
  6755 ;; Registers used:
  6756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6757 ;; Tracked objects:
  6758 ;;		On entry : F/0
  6759 ;;		On exit  : F/0
  6760 ;;		Unchanged: 0/0
  6761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6762 ;;      Params:         0       0       0       0       0       0       0
  6763 ;;      Locals:         0       1       0       0       0       0       0
  6764 ;;      Temps:          0       1       0       0       0       0       0
  6765 ;;      Totals:         0       2       0       0       0       0       0
  6766 ;;Total ram usage:        2 bytes
  6767 ;; Hardware stack levels used:    1
  6768 ;; Hardware stack levels required when called:    7
  6769 ;; This function calls:
  6770 ;;		_readEEPROM
  6771 ;;		_vscp_sendEvent
  6772 ;;		_setEventData
  6773 ;; This function is called by:
  6774 ;;		_doOneSecondWork
  6775 ;;		_handle_sync
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           	psect	text28
  6780  005226                     __ptext28:
  6781                           	opt stack 0
  6782  005226                     _sendTempEvent:
  6783                           	opt stack 22
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;incstack = 0
  6787                           ;incstack = 0
  6788                           ;sendTempEvent@i stored from wreg
  6789  005226  CFE8 F086          	movff	wreg,sendTempEvent@i
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;main.c: 816: vscp_omsg.priority = 0x03;
  6793  00522A  0E03               	movlw	3
  6794  00522C  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  6795                           
  6796                           ;main.c: 817: vscp_omsg.flags = 0x80 + 4;
  6797  00522E  0E84               	movlw	132
  6798  005230  6FCA               	movwf	_vscp_omsg& (0+255),b
  6799                           
  6800                           ;main.c: 818: vscp_omsg.vscp_class = 10;
  6801  005232  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6802  005234  0E0A               	movlw	10
  6803  005236  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6804                           
  6805                           ;main.c: 819: vscp_omsg.vscp_type = 6;
  6806  005238  0E06               	movlw	6
  6807  00523A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;main.c: 822: vscp_omsg.data[ 0 ] = 0x80 |
  6811                           ;main.c: 823: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6812                           ;main.c: 824: i;
  6813  00523C  0E43               	movlw	67
  6814  00523E  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6815  005240  6E0E               	movwf	?_readEEPROM,c
  6816  005242  6A0F               	clrf	?_readEEPROM+1,c
  6817  005244  0E00               	movlw	0
  6818  005246  220F               	addwfc	?_readEEPROM+1,f,c
  6819  005248  EC8D  F02E         	call	_readEEPROM	;wreg free
  6820  00524C  0100               	movlb	0	; () banked
  6821  00524E  6F85               	movwf	??_sendTempEvent& (0+255),b
  6822  005250  0E03               	movlw	3
  6823  005252  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6824  005254  90D8               	bcf	status,0,c
  6825  005256  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6826  005258  90D8               	bcf	status,0,c
  6827  00525A  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6828  00525C  90D8               	bcf	status,0,c
  6829  00525E  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6830  005260  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6831  005262  0980               	iorlw	128
  6832  005264  6FCF               	movwf	(_vscp_omsg+5)& (0+255),b
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;main.c: 826: vscp_omsg.data[ 1 ] = 0x82;
  6836  005266  0E82               	movlw	130
  6837  005268  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;main.c: 828: setEventData( current_temp[i],
  6841                           ;main.c: 829: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6842  00526A  5186               	movf	sendTempEvent@i& (0+255),w,b
  6843  00526C  0D02               	mullw	2
  6844  00526E  0E00               	movlw	low _current_temp
  6845  005270  24F3               	addwf	prodl,w,c
  6846  005272  6ED9               	movwf	fsr2l,c
  6847  005274  0E01               	movlw	high _current_temp
  6848  005276  20F4               	addwfc	prodh,w,c
  6849  005278  6EDA               	movwf	fsr2h,c
  6850  00527A  CFDE F07C          	movff	postinc2,?_setEventData
  6851  00527E  CFDD F07D          	movff	postdec2,?_setEventData+1
  6852  005282  0E43               	movlw	67
  6853  005284  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6854  005286  6E0E               	movwf	?_readEEPROM,c
  6855  005288  6A0F               	clrf	?_readEEPROM+1,c
  6856  00528A  0E00               	movlw	0
  6857  00528C  220F               	addwfc	?_readEEPROM+1,f,c
  6858  00528E  EC8D  F02E         	call	_readEEPROM	;wreg free
  6859  005292  0B03               	andlw	3
  6860  005294  0100               	movlb	0	; () banked
  6861  005296  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6862  005298  ECE8  F026         	call	_setEventData	;wreg free
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;main.c: 832: if (!vscp_sendEvent()) {
  6866  00529C  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  6867  0052A0  0900               	iorlw	0
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;main.c: 833: return 0;
  6871  0052A2  0E00               	movlw	0
  6872  0052A4  A4D8               	btfss	status,2,c
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;main.c: 834: }
  6876                           ;main.c: 836: return 1;
  6877  0052A6  0E01               	movlw	1
  6878                           
  6879                           ; BSR set to: 0
  6880  0052A8  0012               	return	
  6881  0052AA                     __end_of_sendTempEvent:
  6882                           	opt stack 0
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           postdec1	equ	0xFE5
  6892                           fsr1h	equ	0xFE2
  6893                           fsr1l	equ	0xFE1
  6894                           indf2	equ	0xFDF
  6895                           postinc2	equ	0xFDE
  6896                           postdec2	equ	0xFDD
  6897                           fsr2h	equ	0xFDA
  6898                           fsr2l	equ	0xFD9
  6899                           status	equ	0xFD8
  6900                           
  6901 ;; *************** function _setEventData *****************
  6902 ;; Defined at:
  6903 ;;		line 844 in file "../main.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  v               2   28[BANK0 ] int 
  6906 ;;  unit            1   30[BANK0 ] unsigned char 
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;  newval          4   31[BANK0 ] unsigned char 
  6909 ;;  ival            2   35[BANK0 ] int 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;		None               void
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : F/0
  6916 ;;		On exit  : F/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6919 ;;      Params:         0       3       0       0       0       0       0
  6920 ;;      Locals:         0       6       0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0
  6922 ;;      Totals:         0       9       0       0       0       0       0
  6923 ;;Total ram usage:        9 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    5
  6926 ;; This function calls:
  6927 ;;		_Celsius2Kelvin
  6928 ;;		_Celsius2Fahrenheit
  6929 ;;		___awtofl
  6930 ;;		___fltol
  6931 ;; This function is called by:
  6932 ;;		_sendTempEvent
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           	psect	text29
  6937  004DD0                     __ptext29:
  6938                           	opt stack 0
  6939  004DD0                     _setEventData:
  6940                           	opt stack 23
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;main.c: 845: double newval;
  6944                           ;main.c: 846: int ival;
  6945                           ;main.c: 848: if (0 == unit) {
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;incstack = 0
  6949                           ;incstack = 0
  6950  004DD0  677E               	tstfsz	setEventData@unit& (0+255),b
  6951  004DD2  D019               	goto	l10486
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;main.c: 850: newval = Celsius2Kelvin(v);
  6955  004DD4  C07C  F018         	movff	setEventData@v,?___awtofl
  6956  004DD8  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6957  004DDC  EC9F  F02C         	call	___awtofl	;wreg free
  6958  004DE0  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6959  004DE4  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6960  004DE8  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6961  004DEC  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  6962  004DF0  ECBC  F02C         	call	_Celsius2Kelvin	;wreg free
  6963  004DF4  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6964  004DF8  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6965  004DFC  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6966  004E00  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  6967                           
  6968                           ;main.c: 851: } else if (2 == unit) {
  6969  004E04  D02A               	goto	l253
  6970  004E06                     l10486:
  6971                           
  6972                           ; BSR set to: 0
  6973  004E06  517E               	movf	setEventData@unit& (0+255),w,b
  6974  004E08  0A02               	xorlw	2
  6975  004E0A  E119               	bnz	l10490
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;main.c: 853: newval = Celsius2Fahrenheit(v);
  6979  004E0C  C07C  F018         	movff	setEventData@v,?___awtofl
  6980  004E10  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6981  004E14  EC9F  F02C         	call	___awtofl	;wreg free
  6982  004E18  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6983  004E1C  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6984  004E20  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6985  004E24  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  6986  004E28  EC0D  F02A         	call	_Celsius2Fahrenheit	;wreg free
  6987  004E2C  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6988  004E30  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6989  004E34  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6990  004E38  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6991                           
  6992                           ;main.c: 854: } else {
  6993  004E3C  D00E               	goto	l253
  6994  004E3E                     l10490:
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;main.c: 856: newval = v;
  6998  004E3E  C07C  F018         	movff	setEventData@v,?___awtofl
  6999  004E42  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  7000  004E46  EC9F  F02C         	call	___awtofl	;wreg free
  7001  004E4A  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7002  004E4E  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7003  004E52  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7004  004E56  C018  F07F         	movff	?___awtofl,setEventData@newval
  7005  004E5A                     l253:
  7006                           
  7007                           ;main.c: 857: }
  7008                           ;main.c: 859: ival = (int) newval;
  7009  004E5A  C07F  F076         	movff	setEventData@newval,?___fltol
  7010  004E5E  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7011  004E62  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7012  004E66  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7013  004E6A  EC36  F028         	call	___fltol	;wreg free
  7014  004E6E  C076  F083         	movff	?___fltol,setEventData@ival
  7015  004E72  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;main.c: 861: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7019  004E76  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7020  004E78  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;main.c: 862: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7024  004E7A  C083  F0D2         	movff	setEventData@ival,_vscp_omsg+8
  7025                           
  7026                           ; BSR set to: 0
  7027  004E7E  0012               	return	
  7028  004E80                     __end_of_setEventData:
  7029                           	opt stack 0
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           postinc0	equ	0xFEE
  7037                           wreg	equ	0xFE8
  7038                           postdec1	equ	0xFE5
  7039                           fsr1h	equ	0xFE2
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           postinc2	equ	0xFDE
  7043                           postdec2	equ	0xFDD
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8
  7047                           
  7048 ;; *************** function _Celsius2Fahrenheit *****************
  7049 ;; Defined at:
  7050 ;;		line 42 in file "../ntc.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  tc              4   22[BANK0 ] int 
  7053 ;; Auto vars:     Size  Location     Type
  7054 ;;		None
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  4   22[BANK0 ] int 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0, cstack
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7064 ;;      Params:         0       4       0       0       0       0       0
  7065 ;;      Locals:         0       0       0       0       0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0
  7067 ;;      Totals:         0       4       0       0       0       0       0
  7068 ;;Total ram usage:        4 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; Hardware stack levels required when called:    4
  7071 ;; This function calls:
  7072 ;;		___fladd
  7073 ;;		___fldiv
  7074 ;;		___flmul
  7075 ;; This function is called by:
  7076 ;;		_setEventData
  7077 ;; This function uses a non-reentrant model
  7078 ;;
  7079                           
  7080                           	psect	text30
  7081  00541A                     __ptext30:
  7082                           	opt stack 0
  7083  00541A                     _Celsius2Fahrenheit:
  7084                           	opt stack 23
  7085                           
  7086                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;incstack = 0
  7090                           ;incstack = 0
  7091  00541A  6A21               	clrf	?___fladd+4,c
  7092  00541C  6A22               	clrf	?___fladd+5,c
  7093  00541E  0E7A               	movlw	122
  7094  005420  6E23               	movwf	?___fladd+6,c
  7095  005422  0E46               	movlw	70
  7096  005424  6E24               	movwf	?___fladd+7,c
  7097  005426  0100               	movlb	0	; () banked
  7098  005428  6B64               	clrf	(?___flmul+4)& (0+255),b
  7099  00542A  6B65               	clrf	(?___flmul+5)& (0+255),b
  7100  00542C  0E10               	movlw	16
  7101  00542E  6F66               	movwf	(?___flmul+6)& (0+255),b
  7102  005430  0E41               	movlw	65
  7103  005432  6F67               	movwf	(?___flmul+7)& (0+255),b
  7104  005434  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7105  005438  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7106  00543C  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7107  005440  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7108  005444  ECA4  F024         	call	___flmul	;wreg free
  7109  005448  C063  F020         	movff	?___flmul+3,?___fladd+3
  7110  00544C  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7111  005450  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7112  005454  C060  F01D         	movff	?___flmul,?___fladd
  7113  005458  EC4B  F021         	call	___fladd	;wreg free
  7114  00545C  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7115  005460  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7116  005464  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7117  005468  C01D  F02C         	movff	?___fladd,?___fldiv
  7118  00546C  6A30               	clrf	?___fldiv+4,c
  7119  00546E  6A31               	clrf	?___fldiv+5,c
  7120  005470  0EA0               	movlw	160
  7121  005472  6E32               	movwf	?___fldiv+6,c
  7122  005474  0E40               	movlw	64
  7123  005476  6E33               	movwf	?___fldiv+7,c
  7124  005478  EC40  F027         	call	___fldiv	;wreg free
  7125  00547C  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7126  005480  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7127  005484  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7128  005488  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7129  00548C  0012               	return	
  7130  00548E                     __end_of_Celsius2Fahrenheit:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           postinc0	equ	0xFEE
  7139                           wreg	equ	0xFE8
  7140                           postdec1	equ	0xFE5
  7141                           fsr1h	equ	0xFE2
  7142                           fsr1l	equ	0xFE1
  7143                           indf2	equ	0xFDF
  7144                           postinc2	equ	0xFDE
  7145                           postdec2	equ	0xFDD
  7146                           fsr2h	equ	0xFDA
  7147                           fsr2l	equ	0xFD9
  7148                           status	equ	0xFD8
  7149                           
  7150 ;; *************** function ___fladd *****************
  7151 ;; Defined at:
  7152 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  f1              4   28[COMRAM] int 
  7155 ;;  f2              4   32[COMRAM] int 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  exp1            1   42[COMRAM] unsigned char 
  7158 ;;  exp2            1   41[COMRAM] unsigned char 
  7159 ;;  sign            1   40[COMRAM] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  4   28[COMRAM] unsigned char 
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7169 ;;      Params:         8       0       0       0       0       0       0
  7170 ;;      Locals:         6       0       0       0       0       0       0
  7171 ;;      Temps:          1       0       0       0       0       0       0
  7172 ;;      Totals:        15       0       0       0       0       0       0
  7173 ;;Total ram usage:       15 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    3
  7176 ;; This function calls:
  7177 ;;		___flpack
  7178 ;; This function is called by:
  7179 ;;		_doWork
  7180 ;;		_Celsius2Fahrenheit
  7181 ;;		_Celsius2Kelvin
  7182 ;;		___asfladd
  7183 ;;		_floor
  7184 ;;		___flsub
  7185 ;;		_log
  7186 ;;		_eval_poly
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           	psect	text31
  7191  004296                     __ptext31:
  7192                           	opt stack 0
  7193  004296                     ___fladd:
  7194                           	opt stack 25
  7195                           
  7196                           ;incstack = 0
  7197                           ;incstack = 0
  7198  004296  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7199  004298  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7200  00429A  6E2B               	movwf	___fladd@exp1,c
  7201  00429C  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7202  00429E  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7203  0042A0  6E2A               	movwf	___fladd@exp2,c
  7204  0042A2  502B               	movf	___fladd@exp1,w,c
  7205  0042A4  E009               	bz	l1573
  7206  0042A6  502A               	movf	___fladd@exp2,w,c
  7207  0042A8  602B               	cpfslt	___fladd@exp1,c
  7208  0042AA  D00F               	goto	l11514
  7209  0042AC  502B               	movf	___fladd@exp1,w,c
  7210  0042AE  5C2A               	subwf	___fladd@exp2,w,c
  7211  0042B0  6E25               	movwf	??___fladd& (0+255),c
  7212  0042B2  0E21               	movlw	33
  7213  0042B4  5C25               	subwf	??___fladd,w,c
  7214  0042B6  E309               	bnc	l11514
  7215  0042B8                     l1573:
  7216  0042B8  C021  F01D         	movff	___fladd@f2,?___fladd
  7217  0042BC  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7218  0042C0  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7219  0042C4  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7220  0042C8  D095               	goto	l1574
  7221  0042CA                     l11514:
  7222  0042CA  502A               	movf	___fladd@exp2,w,c
  7223  0042CC  E009               	bz	l1577
  7224  0042CE  502B               	movf	___fladd@exp1,w,c
  7225  0042D0  602A               	cpfslt	___fladd@exp2,c
  7226  0042D2  D00F               	goto	l11520
  7227  0042D4  502A               	movf	___fladd@exp2,w,c
  7228  0042D6  5C2B               	subwf	___fladd@exp1,w,c
  7229  0042D8  6E25               	movwf	??___fladd& (0+255),c
  7230  0042DA  0E21               	movlw	33
  7231  0042DC  5C25               	subwf	??___fladd,w,c
  7232  0042DE  E309               	bnc	l11520
  7233  0042E0                     l1577:
  7234  0042E0  C01D  F01D         	movff	___fladd@f1,?___fladd
  7235  0042E4  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7236  0042E8  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7237  0042EC  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7238  0042F0  D081               	goto	l1574
  7239  0042F2                     l11520:
  7240  0042F2  0E06               	movlw	6
  7241  0042F4  6E29               	movwf	___fladd@sign,c
  7242  0042F6  BE20               	btfsc	___fladd@f1+3,7,c
  7243  0042F8  8E29               	bsf	___fladd@sign,7,c
  7244  0042FA  BE24               	btfsc	___fladd@f2+3,7,c
  7245  0042FC  8C29               	bsf	___fladd@sign,6,c
  7246  0042FE  8E1F               	bsf	___fladd@f1+2,7,c
  7247  004300  6A20               	clrf	___fladd@f1+3,c
  7248  004302  8E23               	bsf	___fladd@f2+2,7,c
  7249  004304  6A24               	clrf	___fladd@f2+3,c
  7250  004306  502A               	movf	___fladd@exp2,w,c
  7251  004308  602B               	cpfslt	___fladd@exp1,c
  7252  00430A  D018               	goto	l11546
  7253  00430C                     l11536:
  7254  00430C  90D8               	bcf	status,0,c
  7255  00430E  3621               	rlcf	___fladd@f2,f,c
  7256  004310  3622               	rlcf	___fladd@f2+1,f,c
  7257  004312  3623               	rlcf	___fladd@f2+2,f,c
  7258  004314  3624               	rlcf	___fladd@f2+3,f,c
  7259  004316  062A               	decf	___fladd@exp2,f,c
  7260  004318  502A               	movf	___fladd@exp2,w,c
  7261  00431A  182B               	xorwf	___fladd@exp1,w,c
  7262  00431C  E00B               	bz	l11544
  7263  00431E  0629               	decf	___fladd@sign,f,c
  7264  004320  5029               	movf	___fladd@sign& (0+255),w,c
  7265  004322  0B07               	andlw	7
  7266  004324  E007               	bz	l11544
  7267  004326  D7F2               	goto	l11536
  7268  004328                     l11542:
  7269  004328  90D8               	bcf	status,0,c
  7270  00432A  3220               	rrcf	___fladd@f1+3,f,c
  7271  00432C  321F               	rrcf	___fladd@f1+2,f,c
  7272  00432E  321E               	rrcf	___fladd@f1+1,f,c
  7273  004330  321D               	rrcf	___fladd@f1,f,c
  7274  004332  2A2B               	incf	___fladd@exp1,f,c
  7275  004334                     l11544:
  7276  004334  502A               	movf	___fladd@exp2,w,c
  7277  004336  622B               	cpfseq	___fladd@exp1,c
  7278  004338  D7F7               	goto	l11542
  7279  00433A  D01A               	goto	l1588
  7280  00433C                     l11546:
  7281  00433C  502B               	movf	___fladd@exp1,w,c
  7282  00433E  602A               	cpfslt	___fladd@exp2,c
  7283  004340  D017               	goto	l1588
  7284  004342                     l11548:
  7285  004342  90D8               	bcf	status,0,c
  7286  004344  361D               	rlcf	___fladd@f1,f,c
  7287  004346  361E               	rlcf	___fladd@f1+1,f,c
  7288  004348  361F               	rlcf	___fladd@f1+2,f,c
  7289  00434A  3620               	rlcf	___fladd@f1+3,f,c
  7290  00434C  062B               	decf	___fladd@exp1,f,c
  7291  00434E  502A               	movf	___fladd@exp2,w,c
  7292  004350  182B               	xorwf	___fladd@exp1,w,c
  7293  004352  E00B               	bz	l11556
  7294  004354  0629               	decf	___fladd@sign,f,c
  7295  004356  5029               	movf	___fladd@sign& (0+255),w,c
  7296  004358  0B07               	andlw	7
  7297  00435A  E007               	bz	l11556
  7298  00435C  D7F2               	goto	l11548
  7299  00435E                     l11554:
  7300  00435E  90D8               	bcf	status,0,c
  7301  004360  3224               	rrcf	___fladd@f2+3,f,c
  7302  004362  3223               	rrcf	___fladd@f2+2,f,c
  7303  004364  3222               	rrcf	___fladd@f2+1,f,c
  7304  004366  3221               	rrcf	___fladd@f2,f,c
  7305  004368  2A2A               	incf	___fladd@exp2,f,c
  7306  00436A                     l11556:
  7307  00436A  502A               	movf	___fladd@exp2,w,c
  7308  00436C  622B               	cpfseq	___fladd@exp1,c
  7309  00436E  D7F7               	goto	l11554
  7310  004370                     l1588:
  7311  004370  AE29               	btfss	___fladd@sign,7,c
  7312  004372  D009               	goto	l11560
  7313  004374  1E1D               	comf	___fladd@f1,f,c
  7314  004376  1E1E               	comf	___fladd@f1+1,f,c
  7315  004378  1E1F               	comf	___fladd@f1+2,f,c
  7316  00437A  1E20               	comf	___fladd@f1+3,f,c
  7317  00437C  2A1D               	incf	___fladd@f1,f,c
  7318  00437E  0E00               	movlw	0
  7319  004380  221E               	addwfc	___fladd@f1+1,f,c
  7320  004382  221F               	addwfc	___fladd@f1+2,f,c
  7321  004384  2220               	addwfc	___fladd@f1+3,f,c
  7322  004386                     l11560:
  7323  004386  AC29               	btfss	___fladd@sign,6,c
  7324  004388  D009               	goto	l11564
  7325  00438A  1E21               	comf	___fladd@f2,f,c
  7326  00438C  1E22               	comf	___fladd@f2+1,f,c
  7327  00438E  1E23               	comf	___fladd@f2+2,f,c
  7328  004390  1E24               	comf	___fladd@f2+3,f,c
  7329  004392  2A21               	incf	___fladd@f2,f,c
  7330  004394  0E00               	movlw	0
  7331  004396  2222               	addwfc	___fladd@f2+1,f,c
  7332  004398  2223               	addwfc	___fladd@f2+2,f,c
  7333  00439A  2224               	addwfc	___fladd@f2+3,f,c
  7334  00439C                     l11564:
  7335  00439C  6A29               	clrf	___fladd@sign,c
  7336  00439E  501D               	movf	___fladd@f1,w,c
  7337  0043A0  2621               	addwf	___fladd@f2,f,c
  7338  0043A2  501E               	movf	___fladd@f1+1,w,c
  7339  0043A4  2222               	addwfc	___fladd@f2+1,f,c
  7340  0043A6  501F               	movf	___fladd@f1+2,w,c
  7341  0043A8  2223               	addwfc	___fladd@f2+2,f,c
  7342  0043AA  5020               	movf	___fladd@f1+3,w,c
  7343  0043AC  2224               	addwfc	___fladd@f2+3,f,c
  7344  0043AE  AE24               	btfss	___fladd@f2+3,7,c
  7345  0043B0  D00B               	goto	l11572
  7346  0043B2  1E21               	comf	___fladd@f2,f,c
  7347  0043B4  1E22               	comf	___fladd@f2+1,f,c
  7348  0043B6  1E23               	comf	___fladd@f2+2,f,c
  7349  0043B8  1E24               	comf	___fladd@f2+3,f,c
  7350  0043BA  2A21               	incf	___fladd@f2,f,c
  7351  0043BC  0E00               	movlw	0
  7352  0043BE  2222               	addwfc	___fladd@f2+1,f,c
  7353  0043C0  2223               	addwfc	___fladd@f2+2,f,c
  7354  0043C2  2224               	addwfc	___fladd@f2+3,f,c
  7355  0043C4  0E01               	movlw	1
  7356  0043C6  6E29               	movwf	___fladd@sign,c
  7357  0043C8                     l11572:
  7358  0043C8  C021  F00E         	movff	___fladd@f2,?___flpack
  7359  0043CC  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7360  0043D0  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7361  0043D4  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7362  0043D8  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7363  0043DC  C029  F013         	movff	___fladd@sign,?___flpack+5
  7364  0043E0  ECD1  F025         	call	___flpack	;wreg free
  7365  0043E4  C011  F020         	movff	?___flpack+3,?___fladd+3
  7366  0043E8  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7367  0043EC  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7368  0043F0  C00E  F01D         	movff	?___flpack,?___fladd
  7369  0043F4                     l1574:
  7370  0043F4  0012               	return	
  7371  0043F6                     __end_of___fladd:
  7372                           	opt stack 0
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           postinc0	equ	0xFEE
  7380                           wreg	equ	0xFE8
  7381                           postdec1	equ	0xFE5
  7382                           fsr1h	equ	0xFE2
  7383                           fsr1l	equ	0xFE1
  7384                           indf2	equ	0xFDF
  7385                           postinc2	equ	0xFDE
  7386                           postdec2	equ	0xFDD
  7387                           fsr2h	equ	0xFDA
  7388                           fsr2l	equ	0xFD9
  7389                           status	equ	0xFD8
  7390                           
  7391 ;; *************** function _Celsius2Kelvin *****************
  7392 ;; Defined at:
  7393 ;;		line 61 in file "../ntc.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  tc              4   43[COMRAM] unsigned char 
  7396 ;; Auto vars:     Size  Location     Type
  7397 ;;		None
  7398 ;; Return value:  Size  Location     Type
  7399 ;;                  4   43[COMRAM] unsigned char 
  7400 ;; Registers used:
  7401 ;;		wreg, status,2, status,0, cstack
  7402 ;; Tracked objects:
  7403 ;;		On entry : 0/0
  7404 ;;		On exit  : 0/0
  7405 ;;		Unchanged: 0/0
  7406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7407 ;;      Params:         4       0       0       0       0       0       0
  7408 ;;      Locals:         0       0       0       0       0       0       0
  7409 ;;      Temps:          0       0       0       0       0       0       0
  7410 ;;      Totals:         4       0       0       0       0       0       0
  7411 ;;Total ram usage:        4 bytes
  7412 ;; Hardware stack levels used:    1
  7413 ;; Hardware stack levels required when called:    4
  7414 ;; This function calls:
  7415 ;;		___fladd
  7416 ;; This function is called by:
  7417 ;;		_setEventData
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text32
  7422  005978                     __ptext32:
  7423                           	opt stack 0
  7424  005978                     _Celsius2Kelvin:
  7425                           	opt stack 23
  7426                           
  7427                           ;ntc.c: 62: return (27316.0 + tc);
  7428                           
  7429                           ;incstack = 0
  7430                           ;incstack = 0
  7431  005978  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7432  00597C  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7433  005980  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7434  005984  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7435  005988  6A21               	clrf	?___fladd+4,c
  7436  00598A  0E68               	movlw	104
  7437  00598C  6E22               	movwf	?___fladd+5,c
  7438  00598E  0ED5               	movlw	213
  7439  005990  6E23               	movwf	?___fladd+6,c
  7440  005992  0E46               	movlw	70
  7441  005994  6E24               	movwf	?___fladd+7,c
  7442  005996  EC4B  F021         	call	___fladd	;wreg free
  7443  00599A  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7444  00599E  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7445  0059A2  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7446  0059A6  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7447  0059AA  0012               	return	
  7448  0059AC                     __end_of_Celsius2Kelvin:
  7449                           	opt stack 0
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           postinc0	equ	0xFEE
  7457                           wreg	equ	0xFE8
  7458                           postdec1	equ	0xFE5
  7459                           fsr1h	equ	0xFE2
  7460                           fsr1l	equ	0xFE1
  7461                           indf2	equ	0xFDF
  7462                           postinc2	equ	0xFDE
  7463                           postdec2	equ	0xFDD
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _vscp_handleProtocolEvent *****************
  7469 ;; Defined at:
  7470 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;		None
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  bytes           1   44[BANK0 ] unsigned char 
  7475 ;;  page_save       2   40[BANK0 ] unsigned short 
  7476 ;;  i               1   50[BANK0 ] unsigned char 
  7477 ;;  page_save       2   38[BANK0 ] unsigned short 
  7478 ;;  byte            1   54[BANK0 ] unsigned char 
  7479 ;;  bytes           1   52[BANK0 ] unsigned char 
  7480 ;;  cb              1   49[BANK0 ] unsigned char 
  7481 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7482 ;;  j               1   57[BANK0 ] unsigned char 
  7483 ;;  i               1   55[BANK0 ] unsigned char 
  7484 ;;  k               1   51[BANK0 ] unsigned char 
  7485 ;;  i               1   53[BANK0 ] unsigned char 
  7486 ;;  len             1   47[BANK0 ] unsigned char 
  7487 ;;  pos             1   46[BANK0 ] unsigned char 
  7488 ;;  i               1   56[BANK0 ] unsigned char 
  7489 ;;  len             1   45[BANK0 ] unsigned char 
  7490 ;;  pos             1   43[BANK0 ] unsigned char 
  7491 ;;  offset          1   42[BANK0 ] unsigned char 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;		None               void
  7494 ;; Registers used:
  7495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7496 ;; Tracked objects:
  7497 ;;		On entry : F/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7501 ;;      Params:         0       0       0       0       0       0       0
  7502 ;;      Locals:         0      20       0       0       0       0       0
  7503 ;;      Temps:          0       7       0       0       0       0       0
  7504 ;;      Totals:         0      27       0       0       0       0       0
  7505 ;;Total ram usage:       27 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    8
  7508 ;; This function calls:
  7509 ;;		_vscp_init
  7510 ;;		_vscp_sendEvent
  7511 ;;		_vscp_readAppReg
  7512 ;;		_vscp_writeAppReg
  7513 ;;		_vscp_getGUID
  7514 ;;		_vscp_getMDF_URL
  7515 ;;		_vscp_getMatrixInfo
  7516 ;;		_vscp_goBootloaderMode
  7517 ;;		_vscp_handleHeartbeat
  7518 ;;		_vscp_handleSetNickname
  7519 ;;		_vscp_handleDropNickname
  7520 ;;		_vscp_newNodeOnline
  7521 ;;		_vscp_readRegister
  7522 ;;		_vscp_readStdReg
  7523 ;;		_vscp_writeRegister
  7524 ;;		_vscp_writeStdReg
  7525 ;;		___lbmod
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531                           	psect	text33
  7532  0031DE                     __ptext33:
  7533                           	opt stack 0
  7534  0031DE                     _vscp_handleProtocolEvent:
  7535                           	opt stack 22
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  7539                           
  7540                           ;incstack = 0
  7541                           ;incstack = 0
  7542  0031DE  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  7543  0031E0  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7544  0031E2  E101 D2DE          	bz	l10094
  7545  0031E6  D30E               	goto	l1270
  7546  0031E8                     l9682:
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  7550  0031E8  EC09  F02C         	call	_vscp_handleHeartbeat	;wreg free
  7551                           
  7552                           ;vscp_firmware.c: 796: break;
  7553  0031EC  D30B               	goto	l1270
  7554  0031EE                     l9684:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  7558  0031EE  EC19  F02D         	call	_vscp_newNodeOnline	;wreg free
  7559                           
  7560                           ;vscp_firmware.c: 801: break;
  7561  0031F2  D308               	goto	l1270
  7562  0031F4                     l9686:
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  7566  0031F4  ECA3  F02D         	call	_vscp_handleSetNickname	;wreg free
  7567                           
  7568                           ;vscp_firmware.c: 806: break;
  7569  0031F8  D305               	goto	l1270
  7570  0031FA                     l9688:
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  7574  0031FA  ECD6  F02C         	call	_vscp_handleDropNickname	;wreg free
  7575                           
  7576                           ;vscp_firmware.c: 811: break;
  7577  0031FE  D302               	goto	l1270
  7578  003200                     l9690:
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7582                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7583  003200  51BC               	movf	_vscp_imsg& (0+255),w,b
  7584  003202  0B0F               	andlw	15
  7585  003204  0A02               	xorlw	2
  7586  003206  E001 D2FD          	bnz	l1270
  7587                           
  7588                           ; BSR set to: 0
  7589  00320A  51BA               	movf	_vscp_nickname& (0+255),w,b
  7590  00320C  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7591  003210  62DF               	cpfseq	indf2,c
  7592  003212  D2F8               	goto	l1270
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  7596  003214  0E80               	movlw	128
  7597  003216  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7598  003218  D012               	goto	l9710
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7602  00321A  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7603  00321C  EC5B  F015         	call	_vscp_readAppReg
  7604  003220                     L8:
  7605  003220  0100               	movlb	0	; () banked
  7606  003222  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7610  003224  C0C3  F0CF         	movff	_vscp_imsg+7,_vscp_omsg+5
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  7614  003228  0E03               	movlw	3
  7615  00322A  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  7616                           
  7617                           ; BSR set to: 0
  7618                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  7619  00322C  0E82               	movlw	130
  7620  00322E  6FCA               	movwf	_vscp_omsg& (0+255),b
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  7624  003230  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  7625  003232  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  7629  003234  0E0A               	movlw	10
  7630  003236  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  7631  003238                     l9708:
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;vscp_firmware.c: 832: vscp_sendEvent();
  7635  003238  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  7636                           
  7637                           ;vscp_firmware.c: 833: } else {
  7638  00323C  D2E3               	goto	l1270
  7639  00323E                     l9710:
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  7643                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7644  00323E  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7645  003240  EC32  F024         	call	_vscp_readStdReg
  7646  003244  D7ED               	goto	L8
  7647  003246                     l9724:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7651                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7652  003246  51BC               	movf	_vscp_imsg& (0+255),w,b
  7653  003248  0B0F               	andlw	15
  7654  00324A  0A03               	xorlw	3
  7655  00324C  E001 D2DA          	bnz	l1270
  7656                           
  7657                           ; BSR set to: 0
  7658  003250  51BA               	movf	_vscp_nickname& (0+255),w,b
  7659  003252  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7660  003256  62DF               	cpfseq	indf2,c
  7661  003258  D2D5               	goto	l1270
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  7665  00325A  0E80               	movlw	128
  7666  00325C  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7667  00325E  D006               	goto	l9744
  7668                           
  7669                           ; BSR set to: 0
  7670                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  7671                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7672  003260  C0C4  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7673  003264  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7674  003266  ECB7  F005         	call	_vscp_writeAppReg
  7675  00326A  D7DA               	goto	L8
  7676  00326C                     l9744:
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  7680                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7681  00326C  C0C4  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7682  003270  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7683  003272  EC00  F01F         	call	_vscp_writeStdReg
  7684  003276  D7D4               	goto	L8
  7685  003278                     l9758:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7689                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7690                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7691                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7692                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7693                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7694                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7695  003278  51BA               	movf	_vscp_nickname& (0+255),w,b
  7696  00327A  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7697  00327E  62DF               	cpfseq	indf2,c
  7698  003280  D2C1               	goto	l1270
  7699                           
  7700                           ; BSR set to: 0
  7701  003282  0E00               	movlw	0
  7702  003284  EC71  F02E         	call	_vscp_getGUID
  7703  003288  0100               	movlb	0	; () banked
  7704  00328A  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7705  00328C  E001 D2BA          	bnz	l1270
  7706                           
  7707                           ; BSR set to: 0
  7708  003290  0E03               	movlw	3
  7709  003292  EC71  F02E         	call	_vscp_getGUID
  7710  003296  0100               	movlb	0	; () banked
  7711  003298  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7712  00329A  E001 D2B3          	bnz	l1270
  7713                           
  7714                           ; BSR set to: 0
  7715  00329E  0E05               	movlw	5
  7716  0032A0  EC71  F02E         	call	_vscp_getGUID
  7717  0032A4  0100               	movlb	0	; () banked
  7718  0032A6  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7719  0032A8  E001 D2AC          	bnz	l1270
  7720                           
  7721                           ; BSR set to: 0
  7722  0032AC  0E07               	movlw	7
  7723  0032AE  EC71  F02E         	call	_vscp_getGUID
  7724  0032B2  0100               	movlb	0	; () banked
  7725  0032B4  19C7               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7726  0032B6  E001 D2A5          	bnz	l1270
  7727                           
  7728                           ; BSR set to: 0
  7729  0032BA  5047               	movf	_vscp_page_select+1,w,c
  7730  0032BC  19C8               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7731  0032BE  E001 D2A1          	bnz	l1270
  7732                           
  7733                           ; BSR set to: 0
  7734  0032C2  5046               	movf	_vscp_page_select,w,c
  7735  0032C4  EE20  F0C9         	lfsr	2,_vscp_imsg+13
  7736  0032C8  62DF               	cpfseq	indf2,c
  7737  0032CA  D29C               	goto	l1270
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7741  0032CC  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7742  0032CE  EC45  F02E         	call	_vscp_goBootloaderMode
  7743  0032D2  D298               	goto	l1270
  7744  0032D4                     l9774:
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7748                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7749                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7750                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7751  0032D4  0E00               	movlw	0
  7752  0032D6  EC71  F02E         	call	_vscp_getGUID
  7753  0032DA  0100               	movlb	0	; () banked
  7754  0032DC  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7755  0032DE  E173               	bnz	l9818
  7756                           
  7757                           ; BSR set to: 0
  7758  0032E0  0E01               	movlw	1
  7759  0032E2  EC71  F02E         	call	_vscp_getGUID
  7760  0032E6  0100               	movlb	0	; () banked
  7761  0032E8  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7762  0032EA  E16D               	bnz	l9818
  7763                           
  7764                           ; BSR set to: 0
  7765  0032EC  0E02               	movlw	2
  7766  0032EE  EC71  F02E         	call	_vscp_getGUID
  7767  0032F2  0100               	movlb	0	; () banked
  7768  0032F4  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7769  0032F6  E167               	bnz	l9818
  7770                           
  7771                           ; BSR set to: 0
  7772  0032F8  0E03               	movlw	3
  7773  0032FA  EC71  F02E         	call	_vscp_getGUID
  7774  0032FE  0100               	movlb	0	; () banked
  7775  003300  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7776  003302  E161               	bnz	l9818
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  7780  003304  884C               	bsf	_vscp_guid_reset,4,c
  7781  003306  D05F               	goto	l9818
  7782  003308                     l9784:
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7786                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7787                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7788                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7789  003308  0E04               	movlw	4
  7790  00330A  EC71  F02E         	call	_vscp_getGUID
  7791  00330E  0100               	movlb	0	; () banked
  7792  003310  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7793  003312  E159               	bnz	l9818
  7794                           
  7795                           ; BSR set to: 0
  7796  003314  0E05               	movlw	5
  7797  003316  EC71  F02E         	call	_vscp_getGUID
  7798  00331A  0100               	movlb	0	; () banked
  7799  00331C  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7800  00331E  E153               	bnz	l9818
  7801                           
  7802                           ; BSR set to: 0
  7803  003320  0E06               	movlw	6
  7804  003322  EC71  F02E         	call	_vscp_getGUID
  7805  003326  0100               	movlb	0	; () banked
  7806  003328  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7807  00332A  E14D               	bnz	l9818
  7808                           
  7809                           ; BSR set to: 0
  7810  00332C  0E07               	movlw	7
  7811  00332E  EC71  F02E         	call	_vscp_getGUID
  7812  003332  0100               	movlb	0	; () banked
  7813  003334  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7814  003336  E147               	bnz	l9818
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  7818  003338  8A4C               	bsf	_vscp_guid_reset,5,c
  7819  00333A  D045               	goto	l9818
  7820  00333C                     l9794:
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7824                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7825                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7826                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7827  00333C  0E08               	movlw	8
  7828  00333E  EC71  F02E         	call	_vscp_getGUID
  7829  003342  0100               	movlb	0	; () banked
  7830  003344  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7831  003346  E13F               	bnz	l9818
  7832                           
  7833                           ; BSR set to: 0
  7834  003348  0E09               	movlw	9
  7835  00334A  EC71  F02E         	call	_vscp_getGUID
  7836  00334E  0100               	movlb	0	; () banked
  7837  003350  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7838  003352  E139               	bnz	l9818
  7839                           
  7840                           ; BSR set to: 0
  7841  003354  0E0A               	movlw	10
  7842  003356  EC71  F02E         	call	_vscp_getGUID
  7843  00335A  0100               	movlb	0	; () banked
  7844  00335C  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7845  00335E  E133               	bnz	l9818
  7846                           
  7847                           ; BSR set to: 0
  7848  003360  0E0B               	movlw	11
  7849  003362  EC71  F02E         	call	_vscp_getGUID
  7850  003366  0100               	movlb	0	; () banked
  7851  003368  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7852  00336A  E12D               	bnz	l9818
  7853                           
  7854                           ; BSR set to: 0
  7855                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  7856  00336C  8C4C               	bsf	_vscp_guid_reset,6,c
  7857  00336E  D02B               	goto	l9818
  7858  003370                     l9804:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7862                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7863                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7864                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7865  003370  0E0C               	movlw	12
  7866  003372  EC71  F02E         	call	_vscp_getGUID
  7867  003376  0100               	movlb	0	; () banked
  7868  003378  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7869  00337A  E125               	bnz	l9818
  7870                           
  7871                           ; BSR set to: 0
  7872  00337C  0E0D               	movlw	13
  7873  00337E  EC71  F02E         	call	_vscp_getGUID
  7874  003382  0100               	movlb	0	; () banked
  7875  003384  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7876  003386  E11F               	bnz	l9818
  7877                           
  7878                           ; BSR set to: 0
  7879  003388  0E0E               	movlw	14
  7880  00338A  EC71  F02E         	call	_vscp_getGUID
  7881  00338E  0100               	movlb	0	; () banked
  7882  003390  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7883  003392  E119               	bnz	l9818
  7884                           
  7885                           ; BSR set to: 0
  7886  003394  0E0F               	movlw	15
  7887  003396  EC71  F02E         	call	_vscp_getGUID
  7888  00339A  0100               	movlb	0	; () banked
  7889  00339C  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7890  00339E  E113               	bnz	l9818
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  7894  0033A0  8E4C               	bsf	_vscp_guid_reset,7,c
  7895  0033A2  D011               	goto	l9818
  7896  0033A4                     l1211:
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  7900  0033A4  6A4C               	clrf	_vscp_guid_reset,c
  7901                           
  7902                           ;vscp_firmware.c: 952: break;
  7903  0033A6  D00F               	goto	l9818
  7904  0033A8                     l9816:
  7905                           
  7906                           ; BSR set to: 0
  7907  0033A8  39C2               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7908  0033AA  0B0F               	andlw	15
  7909  0033AC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7910  0033AE  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7911                           
  7912                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7913                           ; Switch size 1, requested type "speed"
  7914                           ; Number of cases is 1, Range of values is 0 to 0
  7915                           ; switch strategies available:
  7916                           ; Name         Instructions Cycles
  7917                           ; simple_byte            4     3 (average)
  7918                           ;	Chosen strategy is simple_byte
  7919  0033B0  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7920  0033B2  E1F8               	bnz	l1211
  7921                           
  7922                           ; BSR set to: 0
  7923                           ; Switch size 1, requested type "speed"
  7924                           ; Number of cases is 4, Range of values is 0 to 3
  7925                           ; switch strategies available:
  7926                           ; Name         Instructions Cycles
  7927                           ; simple_byte           13     7 (average)
  7928                           ;	Chosen strategy is simple_byte
  7929  0033B4  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7930  0033B6  E08E               	bz	l9774
  7931  0033B8  0A01               	xorlw	1	; case 1
  7932  0033BA  E0A6               	bz	l9784
  7933  0033BC  0A03               	xorlw	3	; case 2
  7934  0033BE  E0BE               	bz	l9794
  7935  0033C0  0A01               	xorlw	1	; case 3
  7936  0033C2  E0D6               	bz	l9804
  7937  0033C4  D7EF               	goto	l1211
  7938  0033C6                     l9818:
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7942  0033C6  504C               	movf	_vscp_guid_reset,w,c
  7943  0033C8  0BF0               	andlw	240
  7944  0033CA  0AF0               	xorlw	240
  7945  0033CC  E001 D21A          	bnz	l1270
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;vscp_firmware.c: 957: vscp_init();
  7949  0033D0  ECA0  F02B         	call	_vscp_init	;wreg free
  7950  0033D4  D217               	goto	l1270
  7951  0033D6                     l9822:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7955  0033D6  51BA               	movf	_vscp_nickname& (0+255),w,b
  7956  0033D8  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7957  0033DC  62DF               	cpfseq	indf2,c
  7958  0033DE  D212               	goto	l1270
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;vscp_firmware.c: 965: uint8_t i;
  7962                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  7963  0033E0  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7964                           
  7965                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  7966  0033E2  C0C3  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7967                           
  7968                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  7969  0033E6  C0C4  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7970                           
  7971                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  7972  0033EA  6B98               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7973  0033EC  D049               	goto	l9854
  7974  0033EE                     l9826:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7978  0033EE  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7979  0033F0  2598               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7980  0033F2  EC07  F02E         	call	_vscp_readRegister
  7981  0033F6  0100               	movlb	0	; () banked
  7982  0033F8  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7983  0033FA  0E07               	movlw	7
  7984  0033FC  6E0E               	movwf	?___lbmod,c
  7985  0033FE  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7986  003400  EC43  F02D         	call	___lbmod
  7987  003404  0100               	movlb	0	; () banked
  7988  003406  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7989  003408  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7990  00340A  0FD0               	addlw	low (_vscp_omsg+6)
  7991  00340C  6ED9               	movwf	fsr2l,c
  7992  00340E  6ADA               	clrf	fsr2h,c
  7993  003410  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;vscp_firmware.c: 973: if ((i % 7) == 6 || i == (len - 1)) {
  7997  003414  0E07               	movlw	7
  7998  003416  6E0E               	movwf	?___lbmod,c
  7999  003418  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8000  00341A  EC43  F02D         	call	___lbmod
  8001  00341E  0A06               	xorlw	6
  8002  003420  E00B               	bz	l9832
  8003  003422  0EFF               	movlw	255
  8004  003424  0100               	movlb	0	; () banked
  8005  003426  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8006  003428  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8007  00342A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8008  00342C  0EFF               	movlw	255
  8009  00342E  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8010  003430  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8011  003432  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8012  003434  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8013  003436  E123               	bnz	l9852
  8014  003438                     l9832:
  8015                           
  8016                           ;vscp_firmware.c: 974: uint8_t bytes;
  8017                           ;vscp_firmware.c: 976: if ((i % 7) == 6) bytes = 7;
  8018  003438  0E07               	movlw	7
  8019  00343A  6E0E               	movwf	?___lbmod,c
  8020  00343C  0100               	movlb	0	; () banked
  8021  00343E  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8022  003440  EC43  F02D         	call	___lbmod
  8023  003444  0A06               	xorlw	6
  8024  003446  E103               	bnz	l9836
  8025  003448  0E07               	movlw	7
  8026  00344A  0100               	movlb	0	; () banked
  8027  00344C  D009               	goto	L9
  8028  00344E                     l9836:
  8029                           
  8030                           ;vscp_firmware.c: 977: else bytes = (i % 7) + 1;
  8031  00344E  0E07               	movlw	7
  8032  003450  6E0E               	movwf	?___lbmod,c
  8033  003452  0100               	movlb	0	; () banked
  8034  003454  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8035  003456  EC43  F02D         	call	___lbmod
  8036  00345A  0100               	movlb	0	; () banked
  8037  00345C  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8038  00345E  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8039  003460                     L9:
  8040  003460  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;vscp_firmware.c: 979: vscp_omsg.flags = 0x80 + bytes + 1;
  8044  003462  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8045  003464  0F81               	addlw	129
  8046  003466  6FCA               	movwf	_vscp_omsg& (0+255),b
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;vscp_firmware.c: 980: vscp_omsg.priority = 0x03;
  8050  003468  0E03               	movlw	3
  8051  00346A  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;vscp_firmware.c: 981: vscp_omsg.vscp_class = 0;
  8055  00346C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8056  00346E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;vscp_firmware.c: 982: vscp_omsg.vscp_type = 26;
  8060  003470  0E1A               	movlw	26
  8061  003472  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;vscp_firmware.c: 983: vscp_omsg.data[ 0 ] = pos;
  8065  003474  C08B  F0CF         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;vscp_firmware.c: 986: vscp_sendEvent();
  8069  003478  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;vscp_firmware.c: 987: pos++;
  8073  00347C  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8074  00347E                     l9852:
  8075                           
  8076                           ; BSR set to: 0
  8077  00347E  2B98               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8078  003480                     l9854:
  8079                           
  8080                           ; BSR set to: 0
  8081  003480  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8082  003482  5D98               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8083  003484  E301 D1BE          	bc	l1270
  8084  003488  D7B2               	goto	l9826
  8085  00348A                     l9856:
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;vscp_firmware.c: 995: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8089  00348A  51BA               	movf	_vscp_nickname& (0+255),w,b
  8090  00348C  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8091  003490  62DF               	cpfseq	indf2,c
  8092  003492  D1B8               	goto	l1270
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;vscp_firmware.c: 996: uint8_t i;
  8096                           ;vscp_firmware.c: 997: uint8_t pos = vscp_imsg.data[ 1 ];
  8097  003494  C0C3  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;vscp_firmware.c: 998: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8101  003498  51BC               	movf	_vscp_imsg& (0+255),w,b
  8102  00349A  0FFE               	addlw	254
  8103  00349C  0B07               	andlw	7
  8104  00349E  6F8F               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;vscp_firmware.c: 1000: for (i = 0; i < len; i++) {
  8108  0034A0  6B95               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8109  0034A2  D018               	goto	l9870
  8110  0034A4                     l9864:
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;vscp_firmware.c: 1002: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8114  0034A4  5195               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8115  0034A6  0FC4               	addlw	low (_vscp_imsg+8)
  8116  0034A8  6ED9               	movwf	fsr2l,c
  8117  0034AA  6ADA               	clrf	fsr2h,c
  8118  0034AC  50DF               	movf	indf2,w,c
  8119  0034AE  6E34               	movwf	?_vscp_writeRegister,c
  8120  0034B0  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8121  0034B2  2595               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8122  0034B4  ECC7  F02D         	call	_vscp_writeRegister
  8123                           
  8124                           ;vscp_firmware.c: 1003: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8125  0034B8  0100               	movlb	0	; () banked
  8126  0034BA  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8127  0034BC  2595               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8128  0034BE  EC07  F02E         	call	_vscp_readRegister
  8129  0034C2  0100               	movlb	0	; () banked
  8130  0034C4  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8131  0034C6  5195               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8132  0034C8  0FD0               	addlw	low (_vscp_omsg+6)
  8133  0034CA  6ED9               	movwf	fsr2l,c
  8134  0034CC  6ADA               	clrf	fsr2h,c
  8135  0034CE  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8136                           
  8137                           ; BSR set to: 0
  8138  0034D2  2B95               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8139  0034D4                     l9870:
  8140                           
  8141                           ; BSR set to: 0
  8142  0034D4  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8143  0034D6  5D95               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8144  0034D8  E3E5               	bnc	l9864
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;vscp_firmware.c: 1004: }
  8148                           ;vscp_firmware.c: 1006: vscp_omsg.priority = 0x03;
  8149  0034DA  0E03               	movlw	3
  8150  0034DC  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8151                           
  8152                           ; BSR set to: 0
  8153                           ;vscp_firmware.c: 1007: vscp_omsg.vscp_class = 0;
  8154  0034DE  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8155  0034E0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8156                           
  8157                           ;vscp_firmware.c: 1008: vscp_omsg.vscp_type = 26;
  8158  0034E2  0E1A               	movlw	26
  8159  0034E4  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;vscp_firmware.c: 1009: vscp_omsg.data[ 0 ] = 0;
  8163  0034E6  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;vscp_firmware.c: 1010: vscp_omsg.flags = 0x80 + len + 1;
  8167  0034E8  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8168  0034EA  0F81               	addlw	129
  8169  0034EC  6FCA               	movwf	_vscp_omsg& (0+255),b
  8170  0034EE  D6A4               	goto	l9708
  8171  0034F0                     l9882:
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;vscp_firmware.c: 1020: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8175  0034F0  51BA               	movf	_vscp_nickname& (0+255),w,b
  8176  0034F2  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8177  0034F6  62DF               	cpfseq	indf2,c
  8178  0034F8  D185               	goto	l1270
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;vscp_firmware.c: 1022: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8182                           ;vscp_firmware.c: 1023: vscp_imsg.data[ 1 ],
  8183                           ;vscp_firmware.c: 1024: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8184  0034FA  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8185  0034FC  EC5B  F015         	call	_vscp_readAppReg
  8186  003500  0100               	movlb	0	; () banked
  8187  003502  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8188  003504  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8189  003506  6E21               	movwf	?_vscp_writeAppReg,c
  8190  003508  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8191  00350A  ECB7  F005         	call	_vscp_writeAppReg
  8192  00350E  D688               	goto	L8
  8193  003510                     l9898:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;vscp_firmware.c: 1040: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8197  003510  51BA               	movf	_vscp_nickname& (0+255),w,b
  8198  003512  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8199  003516  62DF               	cpfseq	indf2,c
  8200  003518  D175               	goto	l1270
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;vscp_firmware.c: 1042: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8204                           ;vscp_firmware.c: 1043: vscp_imsg.data[ 1 ],
  8205                           ;vscp_firmware.c: 1044: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8206  00351A  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8207  00351C  EC5B  F015         	call	_vscp_readAppReg
  8208  003520  0100               	movlb	0	; () banked
  8209  003522  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8210  003524  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8211  003526  6E21               	movwf	?_vscp_writeAppReg,c
  8212  003528  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8213  00352A  ECB7  F005         	call	_vscp_writeAppReg
  8214  00352E  D678               	goto	L8
  8215  003530                     l9914:
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;vscp_firmware.c: 1060: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8219                           ;vscp_firmware.c: 1061: (0xff == vscp_imsg.data[ 0 ])) {
  8220  003530  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
  8221  003532  19BA               	xorwf	_vscp_nickname& (0+255),w,b
  8222  003534  E003               	bz	l1235
  8223                           
  8224                           ; BSR set to: 0
  8225  003536  29C2               	incf	(_vscp_imsg+6)& (0+255),w,b
  8226  003538  E001 D164          	bnz	l1270
  8227  00353C                     l1235:
  8228                           
  8229                           ; BSR set to: 0
  8230                           ;vscp_firmware.c: 1063: uint8_t i, j, k = 0;
  8231  00353C  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;vscp_firmware.c: 1067: vscp_omsg.priority = 0x03;
  8235  00353E  0E03               	movlw	3
  8236  003540  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8237                           
  8238                           ;vscp_firmware.c: 1068: vscp_omsg.flags = 0x80 + 8;
  8239  003542  0E88               	movlw	136
  8240  003544  6FCA               	movwf	_vscp_omsg& (0+255),b
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;vscp_firmware.c: 1069: vscp_omsg.vscp_class = 0;
  8244  003546  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8245  003548  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8246                           
  8247                           ;vscp_firmware.c: 1070: vscp_omsg.vscp_type = 32;
  8248  00354A  0E20               	movlw	32
  8249  00354C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;vscp_firmware.c: 1072: for (i = 0; i < 3; i++)
  8253  00354E  6B97               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8254  003550                     l1236:
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1073: {
  8258                           ;vscp_firmware.c: 1074: vscp_omsg.data[0] = i;
  8259  003550  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;vscp_firmware.c: 1076: for (j = 1; j < 8; j++) {
  8263  003554  0E01               	movlw	1
  8264  003556  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8265  003558                     l9934:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;vscp_firmware.c: 1077: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8269  003558  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8270  00355A  0FCF               	addlw	low (_vscp_omsg+5)
  8271  00355C  6ED9               	movwf	fsr2l,c
  8272  00355E  6ADA               	clrf	fsr2h,c
  8273  003560  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8274  003562  080F               	sublw	15
  8275  003564  EC71  F02E         	call	_vscp_getGUID
  8276  003568  6EDF               	movwf	indf2,c
  8277  00356A  0100               	movlb	0	; () banked
  8278  00356C  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;vscp_firmware.c: 1078: if (k > 16)
  8282  00356E  0E10               	movlw	16
  8283  003570  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8284  003572  D001               	goto	l9942
  8285  003574  D004               	goto	l9946
  8286  003576                     l9942:
  8287                           
  8288                           ; BSR set to: 0
  8289  003576  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8290                           
  8291                           ; BSR set to: 0
  8292  003578  0E07               	movlw	7
  8293  00357A  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8294  00357C  D7ED               	goto	l9934
  8295  00357E                     l9946:
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;vscp_firmware.c: 1080: }
  8299                           ;vscp_firmware.c: 1082: if (k > 16)
  8300  00357E  0E10               	movlw	16
  8301  003580  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8302  003582  D001               	goto	l9950
  8303  003584  D006               	goto	l1237
  8304  003586                     l9950:
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;vscp_firmware.c: 1085: vscp_sendEvent();
  8308  003586  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  8309                           
  8310                           ; BSR set to: 0
  8311  00358A  2B97               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8312                           
  8313                           ; BSR set to: 0
  8314  00358C  0E02               	movlw	2
  8315  00358E  6597               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8316  003590  D7DF               	goto	l1236
  8317  003592                     l1237:
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;vscp_firmware.c: 1086: }
  8321                           ;vscp_firmware.c: 1088: for (j = 0; j < 5; j++)
  8322  003592  6B99               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8323  003594                     l9960:
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;vscp_firmware.c: 1089: {
  8327                           ;vscp_firmware.c: 1090: if (vscp_getMDF_URL(j) > 0)
  8328  003594  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8329  003596  EC39  F02E         	call	_vscp_getMDF_URL
  8330  00359A  0900               	iorlw	0
  8331  00359C  E008               	bz	l9964
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;vscp_firmware.c: 1091: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8335  00359E  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8336  0035A0  0FD2               	addlw	low (_vscp_omsg+8)
  8337  0035A2  6ED9               	movwf	fsr2l,c
  8338  0035A4  6ADA               	clrf	fsr2h,c
  8339  0035A6  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8340  0035A8  EC39  F02E         	call	_vscp_getMDF_URL
  8341  0035AC  D005               	goto	L10
  8342  0035AE                     l9964:
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;vscp_firmware.c: 1092: else
  8346                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = 0;
  8347  0035AE  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8348  0035B0  0FD2               	addlw	low (_vscp_omsg+8)
  8349  0035B2  6ED9               	movwf	fsr2l,c
  8350  0035B4  6ADA               	clrf	fsr2h,c
  8351  0035B6  0E00               	movlw	0
  8352  0035B8                     L10:
  8353  0035B8  6EDF               	movwf	indf2,c
  8354                           
  8355                           ; BSR set to: 0
  8356  0035BA  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8357                           
  8358                           ; BSR set to: 0
  8359  0035BC  0E04               	movlw	4
  8360  0035BE  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8361  0035C0  D7E9               	goto	l9960
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;vscp_firmware.c: 1094: }
  8365                           ;vscp_firmware.c: 1096: vscp_sendEvent();
  8366  0035C2  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;vscp_firmware.c: 1098: k = 5;
  8370  0035C6  0E05               	movlw	5
  8371  0035C8  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;vscp_firmware.c: 1099: for (i = 3; i < 7; i++)
  8375  0035CA  0E03               	movlw	3
  8376  0035CC  6F97               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8377  0035CE                     l1246:
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;vscp_firmware.c: 1100: {
  8381                           ;vscp_firmware.c: 1101: vscp_omsg.data[0] = i;
  8382  0035CE  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;vscp_firmware.c: 1103: for (j = 1; j < 8; j++) {
  8386  0035D2  0E01               	movlw	1
  8387  0035D4  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8388  0035D6                     l9986:
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;vscp_firmware.c: 1104: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8392  0035D6  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8393  0035D8  0FCF               	addlw	low (_vscp_omsg+5)
  8394  0035DA  6ED9               	movwf	fsr2l,c
  8395  0035DC  6ADA               	clrf	fsr2h,c
  8396  0035DE  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8397  0035E0  EC39  F02E         	call	_vscp_getMDF_URL
  8398  0035E4  6EDF               	movwf	indf2,c
  8399                           
  8400                           ; BSR set to: 0
  8401  0035E6  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8402                           
  8403                           ; BSR set to: 0
  8404  0035E8  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8405                           
  8406                           ; BSR set to: 0
  8407  0035EA  0E07               	movlw	7
  8408  0035EC  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8409  0035EE  D7F3               	goto	l9986
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;vscp_firmware.c: 1105: }
  8413                           ;vscp_firmware.c: 1106: vscp_sendEvent();
  8414  0035F0  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  8415                           
  8416                           ; BSR set to: 0
  8417  0035F4  2B97               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8418                           
  8419                           ; BSR set to: 0
  8420  0035F6  0E06               	movlw	6
  8421  0035F8  6597               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8422  0035FA  D7E9               	goto	l1246
  8423  0035FC  D103               	goto	l1270
  8424  0035FE                     l10000:
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;vscp_firmware.c: 1115: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8428  0035FE  51BA               	movf	_vscp_nickname& (0+255),w,b
  8429  003600  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8430  003604  62DF               	cpfseq	indf2,c
  8431  003606  D0FE               	goto	l1270
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;vscp_firmware.c: 1117: vscp_omsg.priority = 0x03;
  8435  003608  0E03               	movlw	3
  8436  00360A  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8437                           
  8438                           ;vscp_firmware.c: 1118: vscp_omsg.flags = 0x80 + 7;
  8439  00360C  0E87               	movlw	135
  8440  00360E  6FCA               	movwf	_vscp_omsg& (0+255),b
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;vscp_firmware.c: 1119: vscp_omsg.vscp_class = 0;
  8444  003610  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8445  003612  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8446                           
  8447                           ;vscp_firmware.c: 1120: vscp_omsg.vscp_type = 34;
  8448  003614  0E22               	movlw	34
  8449  003616  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;vscp_firmware.c: 1122: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8453  003618  0ECF               	movlw	(_vscp_omsg+5)& (0+255)
  8454  00361A  EC14  F02E         	call	_vscp_getMatrixInfo
  8455  00361E  D60C               	goto	l9708
  8456  003620                     l10010:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;vscp_firmware.c: 1138: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8460  003620  51BA               	movf	_vscp_nickname& (0+255),w,b
  8461  003622  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8462  003626  62DF               	cpfseq	indf2,c
  8463  003628  D0ED               	goto	l1270
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;vscp_firmware.c: 1140: uint16_t page_save;
  8467                           ;vscp_firmware.c: 1141: uint8_t byte = 0, bytes = 0;
  8468  00362A  6B96               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;vscp_firmware.c: 1142: uint8_t bytes_this_time, cb;
  8472                           ;vscp_firmware.c: 1146: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8473  00362C  C0BC  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8474  003630  0E0F               	movlw	15
  8475  003632  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8476  003634  0E04               	movlw	4
  8477  003636  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8478  003638  E304               	bnc	l10018
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;vscp_firmware.c: 1149: bytes = vscp_imsg.data[4];
  8482  00363A  C0C6  F094         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1163
  8483                           
  8484                           ;vscp_firmware.c: 1151: if ( 0 == bytes ) {
  8485  00363E  6794               	tstfsz	vscp_handleProtocolEvent@bytes_1163& (0+255),b
  8486  003640  D002               	goto	l10022
  8487  003642                     l10018:
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;vscp_firmware.c: 1152: bytes = 1;
  8491  003642  0E01               	movlw	1
  8492  003644  6F94               	movwf	vscp_handleProtocolEvent@bytes_1163& (0+255),b
  8493  003646                     l10022:
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;vscp_firmware.c: 1157: }
  8497                           ;vscp_firmware.c: 1160: page_save = vscp_page_select;
  8498  003646  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8499  00364A  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;vscp_firmware.c: 1165: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8503  00364E  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8504  003650  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8505  003654  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8506  003656  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8507  00365A  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8508  00365C  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8509  00365E  6E46               	movwf	_vscp_page_select,c
  8510  003660  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8511  003662  6E47               	movwf	_vscp_page_select+1,c
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;vscp_firmware.c: 1168: vscp_omsg.priority = 0x03;
  8515  003664  0E03               	movlw	3
  8516  003666  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;vscp_firmware.c: 1169: vscp_omsg.vscp_class = 0;
  8520  003668  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8521  00366A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;vscp_firmware.c: 1170: vscp_omsg.vscp_type = 39;
  8525  00366C  0E27               	movlw	39
  8526  00366E  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;vscp_firmware.c: 1171: vscp_omsg.data[0] = 0;
  8530  003670  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;vscp_firmware.c: 1172: vscp_omsg.data[1] = vscp_imsg.data[1];
  8534  003672  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;vscp_firmware.c: 1173: vscp_omsg.data[2] = vscp_imsg.data[2];
  8538  003676  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8539  00367A                     l10038:
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;vscp_firmware.c: 1177: if ( ( bytes - byte ) >= 4 ) {
  8543  00367A  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8544  00367C  C094  F07F         	movff	vscp_handleProtocolEvent@bytes_1163,??_vscp_handleProtocolEvent
  8545  003680  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8546  003682  5F7F               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8547  003684  0E00               	movlw	0
  8548  003686  5B80               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8549  003688  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8550  00368A  0A80               	xorlw	128
  8551  00368C  0F80               	addlw	-128
  8552  00368E  0E04               	movlw	4
  8553  003690  B4D8               	btfsc	status,2,c
  8554  003692  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8555  003694  E302               	bnc	l10042
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;vscp_firmware.c: 1178: bytes_this_time = 4;
  8559  003696  0E04               	movlw	4
  8560  003698  D002               	goto	L12
  8561  00369A                     l10042:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;vscp_firmware.c: 1180: else {
  8565                           ;vscp_firmware.c: 1181: bytes_this_time = (bytes - byte);
  8566  00369A  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8567  00369C  5D94               	subwf	vscp_handleProtocolEvent@bytes_1163& (0+255),w,b
  8568  00369E                     L12:
  8569  00369E  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;vscp_firmware.c: 1182: }
  8573                           ;vscp_firmware.c: 1185: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8574  0036A0  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8575  0036A2  0F84               	addlw	132
  8576  0036A4  6FCA               	movwf	_vscp_omsg& (0+255),b
  8577                           
  8578                           ;vscp_firmware.c: 1186: vscp_omsg.data[3] =
  8579                           ;vscp_firmware.c: 1187: vscp_imsg.data[3] + byte;
  8580  0036A6  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8581  0036A8  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8582  0036AA  6FD2               	movwf	(_vscp_omsg+8)& (0+255),b
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;vscp_firmware.c: 1190: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8586  0036AC  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8587  0036AE  D00E               	goto	l10050
  8588  0036B0                     l10046:
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;vscp_firmware.c: 1191: vscp_omsg.data[ (4 + cb) ] =
  8592                           ;vscp_firmware.c: 1192: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8593  0036B0  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8594  0036B2  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8595  0036B4  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8596  0036B6  EC07  F02E         	call	_vscp_readRegister
  8597  0036BA  0100               	movlb	0	; () banked
  8598  0036BC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8599  0036BE  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8600  0036C0  0FD3               	addlw	low (_vscp_omsg+9)
  8601  0036C2  6ED9               	movwf	fsr2l,c
  8602  0036C4  6ADA               	clrf	fsr2h,c
  8603  0036C6  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8604                           
  8605                           ; BSR set to: 0
  8606  0036CA  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8607  0036CC                     l10050:
  8608                           
  8609                           ; BSR set to: 0
  8610  0036CC  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8611  0036CE  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8612  0036D0  E3EF               	bnc	l10046
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;vscp_firmware.c: 1193: }
  8616                           ;vscp_firmware.c: 1196: vscp_sendEvent();
  8617  0036D2  EC57  F02D         	call	_vscp_sendEvent	;wreg free
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;vscp_firmware.c: 1199: byte += bytes_this_time;
  8621  0036D6  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8622  0036D8  2796               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;vscp_firmware.c: 1202: vscp_omsg.data[0] += 1;
  8626  0036DA  2BCF               	incf	(_vscp_omsg+5)& (0+255),f,b
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;vscp_firmware.c: 1204: } while (byte < bytes);
  8630  0036DC  5194               	movf	vscp_handleProtocolEvent@bytes_1163& (0+255),w,b
  8631  0036DE  5D96               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8632  0036E0  E3CC               	bnc	l10038
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;vscp_firmware.c: 1207: vscp_page_select = page_save;
  8636  0036E2  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8637  0036E6  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8638  0036EA  D08C               	goto	l1270
  8639  0036EC                     l10060:
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;vscp_firmware.c: 1214: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8643  0036EC  51BA               	movf	_vscp_nickname& (0+255),w,b
  8644  0036EE  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8645  0036F2  62DF               	cpfseq	indf2,c
  8646  0036F4  D087               	goto	l1270
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;vscp_firmware.c: 1216: uint8_t i;
  8650                           ;vscp_firmware.c: 1217: uint16_t page_save;
  8651                           ;vscp_firmware.c: 1220: page_save = vscp_page_select;
  8652  0036F6  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8653  0036FA  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;vscp_firmware.c: 1224: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8657  0036FE  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8658  003700  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8659  003704  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8660  003706  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8661  00370A  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8662  00370C  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8663  00370E  6E46               	movwf	_vscp_page_select,c
  8664  003710  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8665  003712  6E47               	movwf	_vscp_page_select+1,c
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;vscp_firmware.c: 1226: for (i = vscp_imsg.data[ 3 ];
  8669  003714  C0C5  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8670                           
  8671                           ;vscp_firmware.c: 1229: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8672                           ;vscp_firmware.c: 1230: i++) {
  8673  003718  D014               	goto	l10072
  8674  00371A                     l10068:
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;vscp_firmware.c: 1231: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8678                           ;vscp_firmware.c: 1232: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8679  00371A  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8680  00371C  08C6               	sublw	low (_vscp_imsg+10)
  8681  00371E  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8682  003720  6ED9               	movwf	fsr2l,c
  8683  003722  6ADA               	clrf	fsr2h,c
  8684  003724  50DF               	movf	indf2,w,c
  8685  003726  6E34               	movwf	?_vscp_writeRegister,c
  8686  003728  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8687  00372A  ECC7  F02D         	call	_vscp_writeRegister
  8688  00372E  0100               	movlb	0	; () banked
  8689  003730  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8690  003732  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8691  003734  08D3               	sublw	low (_vscp_omsg+9)
  8692  003736  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8693  003738  6ED9               	movwf	fsr2l,c
  8694  00373A  6ADA               	clrf	fsr2h,c
  8695  00373C  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8696                           
  8697                           ; BSR set to: 0
  8698  003740  2B92               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8699  003742                     l10072:
  8700                           
  8701                           ; BSR set to: 0
  8702  003742  51BC               	movf	_vscp_imsg& (0+255),w,b
  8703  003744  0B0F               	andlw	15
  8704  003746  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8705  003748  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8706  00374A  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8707  00374C  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8708  00374E  0E00               	movlw	0
  8709  003750  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8710  003752  0EFC               	movlw	252
  8711  003754  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8712  003756  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8713  003758  0EFF               	movlw	255
  8714  00375A  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8715  00375C  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8716  00375E  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8717  003760  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8718  003762  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8719  003764  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8720  003766  0A80               	xorlw	128
  8721  003768  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8722  00376A  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8723  00376C  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8724  00376E  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8725  003770  0A80               	xorlw	128
  8726  003772  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8727  003774  E3D2               	bnc	l10068
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;vscp_firmware.c: 1233: }
  8731                           ;vscp_firmware.c: 1236: vscp_page_select = page_save;
  8732  003776  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8733  00377A  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;vscp_firmware.c: 1238: vscp_omsg.priority = 0x03;
  8737  00377E  0E03               	movlw	3
  8738  003780  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;vscp_firmware.c: 1239: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8742  003782  51BC               	movf	_vscp_imsg& (0+255),w,b
  8743  003784  0B0F               	andlw	15
  8744  003786  0F80               	addlw	128
  8745  003788  6FCA               	movwf	_vscp_omsg& (0+255),b
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;vscp_firmware.c: 1240: vscp_omsg.vscp_class = 0;
  8749  00378A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8750  00378C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;vscp_firmware.c: 1241: vscp_omsg.vscp_type = 39;
  8754  00378E  0E27               	movlw	39
  8755  003790  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;vscp_firmware.c: 1242: vscp_omsg.data[0] = 0;
  8759  003792  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;vscp_firmware.c: 1243: vscp_omsg.data[1] = vscp_imsg.data[1];
  8763  003794  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;vscp_firmware.c: 1244: vscp_omsg.data[2] = vscp_imsg.data[2];
  8767  003798  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;vscp_firmware.c: 1245: vscp_omsg.data[3] = vscp_imsg.data[3];
  8771  00379C  C0C5  F0D2         	movff	_vscp_imsg+9,_vscp_omsg+8
  8772  0037A0  D54B               	goto	l9708
  8773  0037A2                     l10094:
  8774                           
  8775                           ; BSR set to: 0
  8776  0037A2  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  8777                           
  8778                           ; Switch size 1, requested type "speed"
  8779                           ; Number of cases is 16, Range of values is 1 to 38
  8780                           ; switch strategies available:
  8781                           ; Name         Instructions Cycles
  8782                           ; simple_byte           49    25 (average)
  8783                           ;	Chosen strategy is simple_byte
  8784  0037A4  0A01               	xorlw	1	; case 1
  8785  0037A6  E101 D51F          	bz	l9682
  8786  0037AA  0A03               	xorlw	3	; case 2
  8787  0037AC  E101 D51F          	bz	l9684
  8788  0037B0  0A04               	xorlw	4	; case 6
  8789  0037B2  E101 D51F          	bz	l9686
  8790  0037B6  0A0E               	xorlw	14	; case 8
  8791  0037B8  E101 D51F          	bz	l9688
  8792  0037BC  0A01               	xorlw	1	; case 9
  8793  0037BE  E101 D51F          	bz	l9690
  8794  0037C2  0A02               	xorlw	2	; case 11
  8795  0037C4  E101 D53F          	bz	l9724
  8796  0037C8  0A07               	xorlw	7	; case 12
  8797  0037CA  E101 D555          	bz	l9758
  8798  0037CE  0A1B               	xorlw	27	; case 23
  8799  0037D0  E101 D5EA          	bz	l9816
  8800  0037D4  0A0F               	xorlw	15	; case 24
  8801  0037D6  E101 D5FE          	bz	l9822
  8802  0037DA  0A01               	xorlw	1	; case 25
  8803  0037DC  E101 D655          	bz	l9856
  8804  0037E0  0A04               	xorlw	4	; case 29
  8805  0037E2  E101 D685          	bz	l9882
  8806  0037E6  0A03               	xorlw	3	; case 30
  8807  0037E8  E101 D692          	bz	l9898
  8808  0037EC  0A01               	xorlw	1	; case 31
  8809  0037EE  E101 D69F          	bz	l9914
  8810  0037F2  0A3E               	xorlw	62	; case 33
  8811  0037F4  E101 D703          	bz	l10000
  8812  0037F8  0A04               	xorlw	4	; case 37
  8813  0037FA  E101 D711          	bz	l10010
  8814  0037FE  0A03               	xorlw	3	; case 38
  8815  003800  E101 D774          	bz	l10060
  8816  003804                     l1270:
  8817  003804  0012               	return	
  8818  003806                     __end_of_vscp_handleProtocolEvent:
  8819                           	opt stack 0
  8820                           tblptru	equ	0xFF8
  8821                           tblptrh	equ	0xFF7
  8822                           tblptrl	equ	0xFF6
  8823                           tablat	equ	0xFF5
  8824                           prodh	equ	0xFF4
  8825                           prodl	equ	0xFF3
  8826                           postinc0	equ	0xFEE
  8827                           wreg	equ	0xFE8
  8828                           postdec1	equ	0xFE5
  8829                           fsr1h	equ	0xFE2
  8830                           fsr1l	equ	0xFE1
  8831                           indf2	equ	0xFDF
  8832                           postinc2	equ	0xFDE
  8833                           postdec2	equ	0xFDD
  8834                           fsr2h	equ	0xFDA
  8835                           fsr2l	equ	0xFD9
  8836                           status	equ	0xFD8
  8837                           
  8838 ;; *************** function ___lbmod *****************
  8839 ;; Defined at:
  8840 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  dividend        1    wreg     unsigned char 
  8843 ;;  divisor         1   13[COMRAM] unsigned char 
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  dividend        1   14[COMRAM] unsigned char 
  8846 ;;  rem             1   16[COMRAM] unsigned char 
  8847 ;;  counter         1   15[COMRAM] unsigned char 
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      unsigned char 
  8850 ;; Registers used:
  8851 ;;		wreg, status,2, status,0
  8852 ;; Tracked objects:
  8853 ;;		On entry : F/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8857 ;;      Params:         1       0       0       0       0       0       0
  8858 ;;      Locals:         3       0       0       0       0       0       0
  8859 ;;      Temps:          0       0       0       0       0       0       0
  8860 ;;      Totals:         4       0       0       0       0       0       0
  8861 ;;Total ram usage:        4 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; Hardware stack levels required when called:    2
  8864 ;; This function calls:
  8865 ;;		Nothing
  8866 ;; This function is called by:
  8867 ;;		_vscp_handleProtocolEvent
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text34
  8872  005A86                     __ptext34:
  8873                           	opt stack 0
  8874  005A86                     ___lbmod:
  8875                           	opt stack 27
  8876                           
  8877                           ;incstack = 0
  8878                           ;incstack = 0
  8879                           ;___lbmod@dividend stored from wreg
  8880  005A86  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8881                           
  8882                           ; BSR set to: 0
  8883  005A8A  0E08               	movlw	8
  8884  005A8C  6E10               	movwf	___lbmod@counter,c
  8885                           
  8886                           ; BSR set to: 0
  8887  005A8E  6A11               	clrf	___lbmod@rem,c
  8888  005A90                     l9118:
  8889  005A90  90D8               	bcf	status,0,c
  8890  005A92  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8891  005A94  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8892  005A96  6E11               	movwf	___lbmod@rem,c
  8893  005A98  90D8               	bcf	status,0,c
  8894  005A9A  360F               	rlcf	___lbmod@dividend,f,c
  8895  005A9C  500E               	movf	___lbmod@divisor,w,c
  8896  005A9E  5C11               	subwf	___lbmod@rem,w,c
  8897  005AA0  E302               	bnc	l9126
  8898  005AA2  500E               	movf	___lbmod@divisor,w,c
  8899  005AA4  5E11               	subwf	___lbmod@rem,f,c
  8900  005AA6                     l9126:
  8901  005AA6  2E10               	decfsz	___lbmod@counter,f,c
  8902  005AA8  D7F3               	goto	l9118
  8903  005AAA  5011               	movf	___lbmod@rem,w,c
  8904  005AAC  0012               	return	
  8905  005AAE                     __end_of___lbmod:
  8906                           	opt stack 0
  8907                           tblptru	equ	0xFF8
  8908                           tblptrh	equ	0xFF7
  8909                           tblptrl	equ	0xFF6
  8910                           tablat	equ	0xFF5
  8911                           prodh	equ	0xFF4
  8912                           prodl	equ	0xFF3
  8913                           postinc0	equ	0xFEE
  8914                           wreg	equ	0xFE8
  8915                           postdec1	equ	0xFE5
  8916                           fsr1h	equ	0xFE2
  8917                           fsr1l	equ	0xFE1
  8918                           indf2	equ	0xFDF
  8919                           postinc2	equ	0xFDE
  8920                           postdec2	equ	0xFDD
  8921                           fsr2h	equ	0xFDA
  8922                           fsr2l	equ	0xFD9
  8923                           status	equ	0xFD8
  8924                           
  8925 ;; *************** function _vscp_writeRegister *****************
  8926 ;; Defined at:
  8927 ;;		line 678 in file "../../vscp_firmware/common/vscp_firmware.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  reg             1    wreg     unsigned char 
  8930 ;;  value           1   51[COMRAM] unsigned char 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  reg             1   52[COMRAM] unsigned char 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  1    wreg      unsigned char 
  8935 ;; Registers used:
  8936 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8937 ;; Tracked objects:
  8938 ;;		On entry : F/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8942 ;;      Params:         1       0       0       0       0       0       0
  8943 ;;      Locals:         1       0       0       0       0       0       0
  8944 ;;      Temps:          0       0       0       0       0       0       0
  8945 ;;      Totals:         2       0       0       0       0       0       0
  8946 ;;Total ram usage:        2 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    7
  8949 ;; This function calls:
  8950 ;;		_vscp_writeAppReg
  8951 ;;		_vscp_writeStdReg
  8952 ;; This function is called by:
  8953 ;;		_vscp_handleProtocolEvent
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text35
  8958  005B8E                     __ptext35:
  8959                           	opt stack 0
  8960  005B8E                     _vscp_writeRegister:
  8961                           	opt stack 22
  8962                           
  8963                           ;incstack = 0
  8964                           ;incstack = 0
  8965                           ;vscp_writeRegister@reg stored from wreg
  8966  005B8E  CFE8 F035          	movff	wreg,vscp_writeRegister@reg
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;vscp_firmware.c: 679: if (reg >= 0x80) {
  8970  005B92  0E7F               	movlw	127
  8971  005B94  6435               	cpfsgt	vscp_writeRegister@reg,c
  8972  005B96  D006               	goto	l11334
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;vscp_firmware.c: 680: return vscp_writeStdReg(reg, value);
  8976  005B98  C034  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8977  005B9C  5035               	movf	vscp_writeRegister@reg,w,c
  8978  005B9E  EC00  F01F         	call	_vscp_writeStdReg
  8979  005BA2  D005               	goto	l1147
  8980  005BA4                     l11334:
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;vscp_firmware.c: 682: return vscp_writeAppReg(reg, value);
  8984  005BA4  C034  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8985  005BA8  5035               	movf	vscp_writeRegister@reg,w,c
  8986  005BAA  ECB7  F005         	call	_vscp_writeAppReg
  8987  005BAE                     l1147:
  8988  005BAE  0012               	return	
  8989  005BB0                     __end_of_vscp_writeRegister:
  8990                           	opt stack 0
  8991                           tblptru	equ	0xFF8
  8992                           tblptrh	equ	0xFF7
  8993                           tblptrl	equ	0xFF6
  8994                           tablat	equ	0xFF5
  8995                           prodh	equ	0xFF4
  8996                           prodl	equ	0xFF3
  8997                           postinc0	equ	0xFEE
  8998                           wreg	equ	0xFE8
  8999                           postdec1	equ	0xFE5
  9000                           fsr1h	equ	0xFE2
  9001                           fsr1l	equ	0xFE1
  9002                           indf2	equ	0xFDF
  9003                           postinc2	equ	0xFDE
  9004                           postdec2	equ	0xFDD
  9005                           fsr2h	equ	0xFDA
  9006                           fsr2l	equ	0xFD9
  9007                           status	equ	0xFD8
  9008                           
  9009 ;; *************** function _vscp_writeStdReg *****************
  9010 ;; Defined at:
  9011 ;;		line 691 in file "../../vscp_firmware/common/vscp_firmware.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  reg             1    wreg     unsigned char 
  9014 ;;  value           1   33[COMRAM] unsigned char 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;  reg             1   50[COMRAM] unsigned char 
  9017 ;;  code            4   43[COMRAM] unsigned long 
  9018 ;;  idx             1   48[COMRAM] unsigned char 
  9019 ;;  code            4   39[COMRAM] unsigned long 
  9020 ;;  idx             1   47[COMRAM] unsigned char 
  9021 ;;  rv              1   49[COMRAM] unsigned char 
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      unsigned char 
  9024 ;; Registers used:
  9025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9026 ;; Tracked objects:
  9027 ;;		On entry : F/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9031 ;;      Params:         1       0       0       0       0       0       0
  9032 ;;      Locals:        12       0       0       0       0       0       0
  9033 ;;      Temps:          5       0       0       0       0       0       0
  9034 ;;      Totals:        18       0       0       0       0       0       0
  9035 ;;Total ram usage:       18 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    6
  9038 ;; This function calls:
  9039 ;;		_vscp_getGUID
  9040 ;;		_vscp_setGUID
  9041 ;;		_vscp_getUserID
  9042 ;;		_vscp_setUserID
  9043 ;;		_vscp_getManufacturerId
  9044 ;;		_vscp_setManufacturerId
  9045 ;;		_vscp_getFamilyCode
  9046 ;;		_vscp_getFamilyType
  9047 ;;		_vscp_restoreDefaults
  9048 ;; This function is called by:
  9049 ;;		_vscp_writeRegister
  9050 ;;		_vscp_handleProtocolEvent
  9051 ;; This function uses a non-reentrant model
  9052 ;;
  9053                           
  9054                           	psect	text36
  9055  003E00                     __ptext36:
  9056                           	opt stack 0
  9057  003E00                     _vscp_writeStdReg:
  9058                           	opt stack 23
  9059                           
  9060                           ;incstack = 0
  9061                           ;incstack = 0
  9062                           ;vscp_writeStdReg@reg stored from wreg
  9063  003E00  CFE8 F033          	movff	wreg,vscp_writeStdReg@reg
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;vscp_firmware.c: 692: uint8_t rv = ~value;
  9067  003E04  1C22               	comf	vscp_writeStdReg@value,w,c
  9068  003E06  6E32               	movwf	vscp_writeStdReg@rv,c
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;vscp_firmware.c: 694: if ((reg > (0x82 + 1)) &&
  9072                           ;vscp_firmware.c: 695: (reg < 0x89)) {
  9073  003E08  0E83               	movlw	131
  9074  003E0A  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9075  003E0C  D00E               	goto	l11346
  9076                           
  9077                           ; BSR set to: 0
  9078  003E0E  0E89               	movlw	137
  9079  003E10  6033               	cpfslt	vscp_writeStdReg@reg,c
  9080  003E12  D00B               	goto	l11346
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;vscp_firmware.c: 698: vscp_setUserID((reg - 0x84), value);
  9084  003E14  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9085  003E18  5033               	movf	vscp_writeStdReg@reg,w,c
  9086  003E1A  0F7C               	addlw	124
  9087  003E1C  EC2D  F02E         	call	_vscp_setUserID
  9088                           
  9089                           ;vscp_firmware.c: 699: rv = vscp_getUserID((reg - 0x84));
  9090  003E20  5033               	movf	vscp_writeStdReg@reg,w,c
  9091  003E22  0F7C               	addlw	124
  9092  003E24  EC67  F02E         	call	_vscp_getUserID
  9093  003E28  D083               	goto	L17
  9094  003E2A                     l11346:
  9095                           
  9096                           ; BSR set to: 0
  9097                           ;vscp_firmware.c: 702: else if (0x92 == reg) {
  9098  003E2A  5033               	movf	vscp_writeStdReg@reg,w,c
  9099  003E2C  0A92               	xorlw	146
  9100  003E2E  E10D               	bnz	l11352
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;vscp_firmware.c: 705: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9104  003E30  5022               	movf	vscp_writeStdReg@value,w,c
  9105  003E32  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9106  003E34  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9107  003E36  5046               	movf	_vscp_page_select,w,c
  9108  003E38  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9109  003E3A  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9110  003E3C  1023               	iorwf	??_vscp_writeStdReg,w,c
  9111  003E3E  6E46               	movwf	_vscp_page_select,c
  9112  003E40  5024               	movf	??_vscp_writeStdReg+1,w,c
  9113  003E42  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9114  003E44  6E47               	movwf	_vscp_page_select+1,c
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;vscp_firmware.c: 706: rv = (vscp_page_select >> 8) & 0xff;
  9118  003E46  5047               	movf	_vscp_page_select+1,w,c
  9119  003E48  D073               	goto	L17
  9120  003E4A                     l11352:
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;vscp_firmware.c: 708: else if (0x93 == reg) {
  9124  003E4A  5033               	movf	vscp_writeStdReg@reg,w,c
  9125  003E4C  0A93               	xorlw	147
  9126  003E4E  E10B               	bnz	l11358
  9127                           
  9128                           ; BSR set to: 0
  9129                           ;vscp_firmware.c: 711: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9130  003E50  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9131  003E52  5047               	movf	_vscp_page_select+1,w,c
  9132  003E54  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9133  003E56  5022               	movf	vscp_writeStdReg@value,w,c
  9134  003E58  1023               	iorwf	??_vscp_writeStdReg,w,c
  9135  003E5A  6E46               	movwf	_vscp_page_select,c
  9136  003E5C  5024               	movf	??_vscp_writeStdReg+1,w,c
  9137  003E5E  6E47               	movwf	_vscp_page_select+1,c
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;vscp_firmware.c: 712: rv = (vscp_page_select & 0xff);
  9141  003E60  C046  F032         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9142                           
  9143                           ;vscp_firmware.c: 713: }
  9144  003E64  D0B1               	goto	l11420
  9145  003E66                     l11358:
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;vscp_firmware.c: 718: else if ((reg > 0x88) && (reg < 0x91)) {
  9149  003E66  0E88               	movlw	136
  9150  003E68  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9151  003E6A  D019               	goto	l11370
  9152                           
  9153                           ; BSR set to: 0
  9154  003E6C  0E91               	movlw	145
  9155  003E6E  6033               	cpfslt	vscp_writeStdReg@reg,c
  9156  003E70  D016               	goto	l11370
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;vscp_firmware.c: 720: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9160                           ;vscp_firmware.c: 721: (0xff != (vscp_page_select & 0xff))) {
  9161  003E72  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9162  003E76  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9163  003E7A  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9164  003E7C  2824               	incf	??_vscp_writeStdReg+1,w,c
  9165  003E7E  E102               	bnz	l11366
  9166                           
  9167                           ; BSR set to: 0
  9168  003E80  2846               	incf	_vscp_page_select,w,c
  9169  003E82  E002               	bz	l11368
  9170  003E84                     l11366:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;vscp_firmware.c: 723: rv = ~value;
  9174  003E84  1C22               	comf	vscp_writeStdReg@value,w,c
  9175  003E86  D054               	goto	L17
  9176  003E88                     l11368:
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;vscp_firmware.c: 726: vscp_setManufacturerId(reg - 0x89, value);
  9180  003E88  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9181  003E8C  5033               	movf	vscp_writeStdReg@reg,w,c
  9182  003E8E  0F77               	addlw	119
  9183  003E90  EC21  F02E         	call	_vscp_setManufacturerId
  9184                           
  9185                           ;vscp_firmware.c: 727: rv = vscp_getManufacturerId(reg - 0x89);
  9186  003E94  5033               	movf	vscp_writeStdReg@reg,w,c
  9187  003E96  0F77               	addlw	119
  9188  003E98  EC5D  F02E         	call	_vscp_getManufacturerId
  9189  003E9C  D049               	goto	L17
  9190  003E9E                     l11370:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;vscp_firmware.c: 730: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9194  003E9E  0ECF               	movlw	207
  9195  003EA0  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9196  003EA2  D017               	goto	l11382
  9197                           
  9198                           ; BSR set to: 0
  9199  003EA4  0EE0               	movlw	224
  9200  003EA6  6033               	cpfslt	vscp_writeStdReg@reg,c
  9201  003EA8  D014               	goto	l11382
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;vscp_firmware.c: 732: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9205                           ;vscp_firmware.c: 733: (0xff != (vscp_page_select & 0xff))) {
  9206  003EAA  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9207  003EAE  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9208  003EB2  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9209  003EB4  2824               	incf	??_vscp_writeStdReg+1,w,c
  9210  003EB6  E1E6               	bnz	l11366
  9211                           
  9212                           ; BSR set to: 0
  9213  003EB8  2846               	incf	_vscp_page_select,w,c
  9214  003EBA  E1E4               	bnz	l11366
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;vscp_firmware.c: 737: else {
  9218                           ;vscp_firmware.c: 738: vscp_setGUID(reg - 0xD0, value);
  9219  003EBC  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9220  003EC0  5033               	movf	vscp_writeStdReg@reg,w,c
  9221  003EC2  0F30               	addlw	48
  9222  003EC4  ECD8  F02D         	call	_vscp_setGUID
  9223                           
  9224                           ;vscp_firmware.c: 739: rv = vscp_getGUID(reg - 0xD0);
  9225  003EC8  5033               	movf	vscp_writeStdReg@reg,w,c
  9226  003ECA  0F30               	addlw	48
  9227  003ECC  EC71  F02E         	call	_vscp_getGUID
  9228  003ED0  D02F               	goto	L17
  9229  003ED2                     l11382:
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;vscp_firmware.c: 743: else if ( ( reg >= 0x9A ) &&
  9233                           ;vscp_firmware.c: 744: ( reg < 0x9E ) ) {
  9234  003ED2  0E99               	movlw	153
  9235  003ED4  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9236  003ED6  D02E               	goto	l11392
  9237                           
  9238                           ; BSR set to: 0
  9239  003ED8  0E9E               	movlw	158
  9240  003EDA  6033               	cpfslt	vscp_writeStdReg@reg,c
  9241  003EDC  D02B               	goto	l11392
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;vscp_firmware.c: 746: uint32_t code = vscp_getFamilyCode();
  9245  003EDE  ECC0  F02E         	call	_vscp_getFamilyCode	;wreg free
  9246  003EE2  C011  F02B         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  9247  003EE6  C010  F02A         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  9248  003EEA  C00F  F029         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  9249  003EEE  C00E  F028         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;vscp_firmware.c: 747: uint8_t idx = reg - 0x9A;
  9253  003EF2  5033               	movf	vscp_writeStdReg@reg,w,c
  9254  003EF4  0F66               	addlw	102
  9255  003EF6  6E30               	movwf	vscp_writeStdReg@idx,c
  9256                           
  9257                           ; BSR set to: 0
  9258                           ;vscp_firmware.c: 748: rv = code >> (((3-idx)*8) & 0xff);
  9259  003EF8  5030               	movf	vscp_writeStdReg@idx,w,c
  9260  003EFA  0803               	sublw	3
  9261  003EFC  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9262  003EFE  90D8               	bcf	status,0,c
  9263  003F00  3623               	rlcf	??_vscp_writeStdReg,f,c
  9264  003F02  90D8               	bcf	status,0,c
  9265  003F04  3623               	rlcf	??_vscp_writeStdReg,f,c
  9266  003F06  90D8               	bcf	status,0,c
  9267  003F08  3623               	rlcf	??_vscp_writeStdReg,f,c
  9268  003F0A  5023               	movf	??_vscp_writeStdReg,w,c
  9269  003F0C  C028  F024         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  9270  003F10  C029  F025         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  9271  003F14  C02A  F026         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  9272  003F18  C02B  F027         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  9273  003F1C  2AE8               	incf	wreg,f,c
  9274  003F1E  D005               	goto	u9620
  9275  003F20                     u9625:
  9276  003F20  90D8               	bcf	status,0,c
  9277  003F22  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9278  003F24  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9279  003F26  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9280  003F28  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9281  003F2A                     u9620:
  9282  003F2A  2EE8               	decfsz	wreg,f,c
  9283  003F2C  D7F9               	goto	u9625
  9284  003F2E  D030               	goto	L18
  9285  003F30                     L17:
  9286  003F30  6E32               	movwf	vscp_writeStdReg@rv,c
  9287                           
  9288                           ;vscp_firmware.c: 749: }
  9289  003F32  D04A               	goto	l11420
  9290  003F34                     l11392:
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;vscp_firmware.c: 750: else if ( ( reg >= 0x9E ) &&
  9294                           ;vscp_firmware.c: 751: ( reg < 0xA2 ) ) {
  9295  003F34  0E9D               	movlw	157
  9296  003F36  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9297  003F38  D02D               	goto	l11402
  9298                           
  9299                           ; BSR set to: 0
  9300  003F3A  0EA2               	movlw	162
  9301  003F3C  6033               	cpfslt	vscp_writeStdReg@reg,c
  9302  003F3E  D02A               	goto	l11402
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;vscp_firmware.c: 753: uint32_t code = vscp_getFamilyType();
  9306  003F40  ECBB  F02E         	call	_vscp_getFamilyType	;wreg free
  9307  003F44  C011  F02F         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1147+3
  9308  003F48  C010  F02E         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1147+2
  9309  003F4C  C00F  F02D         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1147+1
  9310  003F50  C00E  F02C         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1147
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;vscp_firmware.c: 754: uint8_t idx = reg - 0x9E;
  9314  003F54  5033               	movf	vscp_writeStdReg@reg,w,c
  9315  003F56  0F62               	addlw	98
  9316  003F58  6E31               	movwf	vscp_writeStdReg@idx_1148,c
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;vscp_firmware.c: 755: rv = code >> (((3-idx)*8) & 0xff);
  9320  003F5A  5031               	movf	vscp_writeStdReg@idx_1148,w,c
  9321  003F5C  0803               	sublw	3
  9322  003F5E  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9323  003F60  90D8               	bcf	status,0,c
  9324  003F62  3623               	rlcf	??_vscp_writeStdReg,f,c
  9325  003F64  90D8               	bcf	status,0,c
  9326  003F66  3623               	rlcf	??_vscp_writeStdReg,f,c
  9327  003F68  90D8               	bcf	status,0,c
  9328  003F6A  3623               	rlcf	??_vscp_writeStdReg,f,c
  9329  003F6C  5023               	movf	??_vscp_writeStdReg,w,c
  9330  003F6E  C02C  F024         	movff	vscp_writeStdReg@code_1147,??_vscp_writeStdReg+1
  9331  003F72  C02D  F025         	movff	vscp_writeStdReg@code_1147+1,??_vscp_writeStdReg+2
  9332  003F76  C02E  F026         	movff	vscp_writeStdReg@code_1147+2,??_vscp_writeStdReg+3
  9333  003F7A  C02F  F027         	movff	vscp_writeStdReg@code_1147+3,??_vscp_writeStdReg+4
  9334  003F7E  2AE8               	incf	wreg,f,c
  9335  003F80  D005               	goto	u9650
  9336  003F82                     u9655:
  9337  003F82  90D8               	bcf	status,0,c
  9338  003F84  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9339  003F86  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9340  003F88  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9341  003F8A  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9342  003F8C                     u9650:
  9343  003F8C  2EE8               	decfsz	wreg,f,c
  9344  003F8E  D7F9               	goto	u9655
  9345  003F90                     L18:
  9346  003F90  5024               	movf	??_vscp_writeStdReg+1,w,c
  9347  003F92  D7CE               	goto	L17
  9348  003F94                     l11402:
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  9352  003F94  5033               	movf	vscp_writeStdReg@reg,w,c
  9353  003F96  0AA2               	xorlw	162
  9354  003F98  E001 D774          	bnz	l11366
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  9358  003F9C  5022               	movf	vscp_writeStdReg@value,w,c
  9359  003F9E  0A55               	xorlw	85
  9360  003FA0  E105               	bnz	l11410
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  9364  003FA2  0101               	movlb	1	; () banked
  9365  003FA4  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9366  003FA6  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9367                           
  9368                           ; BSR set to: 1
  9369                           ;vscp_firmware.c: 760: rv = 0x55;
  9370  003FA8  0E55               	movlw	85
  9371  003FAA  D7C2               	goto	L17
  9372  003FAC                     l11410:
  9373                           
  9374                           ; BSR set to: 0
  9375                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  9376  003FAC  5022               	movf	vscp_writeStdReg@value,w,c
  9377  003FAE  0AAA               	xorlw	170
  9378  003FB0  E10B               	bnz	l11420
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  9382  003FB2  0EE8               	movlw	232
  9383  003FB4  0101               	movlb	1	; () banked
  9384  003FB6  5D1A               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9385  003FB8  0E03               	movlw	3
  9386  003FBA  591B               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9387  003FBC  E204               	bc	l1177
  9388                           
  9389                           ; BSR set to: 1
  9390                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  9391  003FBE  ECCF  F02E         	call	_vscp_restoreDefaults	;wreg free
  9392                           
  9393                           ; BSR set to: 1
  9394                           ;vscp_firmware.c: 765: rv = 0xaa;
  9395  003FC2  0EAA               	movlw	170
  9396  003FC4  D7B5               	goto	L17
  9397  003FC6                     l1177:
  9398                           
  9399                           ; BSR set to: 1
  9400                           ;vscp_firmware.c: 767: else {
  9401                           ;vscp_firmware.c: 768: rv = 0;
  9402  003FC6  6A32               	clrf	vscp_writeStdReg@rv,c
  9403  003FC8                     l11420:
  9404                           
  9405                           ;vscp_firmware.c: 776: }
  9406                           ;vscp_firmware.c: 778: return rv;
  9407  003FC8  5032               	movf	vscp_writeStdReg@rv,w,c
  9408  003FCA  0012               	return	
  9409  003FCC                     __end_of_vscp_writeStdReg:
  9410                           	opt stack 0
  9411                           tblptru	equ	0xFF8
  9412                           tblptrh	equ	0xFF7
  9413                           tblptrl	equ	0xFF6
  9414                           tablat	equ	0xFF5
  9415                           prodh	equ	0xFF4
  9416                           prodl	equ	0xFF3
  9417                           postinc0	equ	0xFEE
  9418                           wreg	equ	0xFE8
  9419                           postdec1	equ	0xFE5
  9420                           fsr1h	equ	0xFE2
  9421                           fsr1l	equ	0xFE1
  9422                           indf2	equ	0xFDF
  9423                           postinc2	equ	0xFDE
  9424                           postdec2	equ	0xFDD
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function _vscp_restoreDefaults *****************
  9430 ;; Defined at:
  9431 ;;		line 2834 in file "../main.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;		None
  9436 ;; Return value:  Size  Location     Type
  9437 ;;		None               void
  9438 ;; Registers used:
  9439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9440 ;; Tracked objects:
  9441 ;;		On entry : F/1
  9442 ;;		On exit  : F/1
  9443 ;;		Unchanged: 0/0
  9444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9445 ;;      Params:         0       0       0       0       0       0       0
  9446 ;;      Locals:         0       0       0       0       0       0       0
  9447 ;;      Temps:          0       0       0       0       0       0       0
  9448 ;;      Totals:         0       0       0       0       0       0       0
  9449 ;;Total ram usage:        0 bytes
  9450 ;; Hardware stack levels used:    1
  9451 ;; Hardware stack levels required when called:    5
  9452 ;; This function calls:
  9453 ;;		_init_app_eeprom
  9454 ;;		_init_app_ram
  9455 ;; This function is called by:
  9456 ;;		_vscp_writeStdReg
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           	psect	text37
  9461  005D9E                     __ptext37:
  9462                           	opt stack 0
  9463  005D9E                     _vscp_restoreDefaults:
  9464                           	opt stack 23
  9465                           
  9466                           ; BSR set to: 1
  9467                           ;main.c: 2835: init_app_eeprom();
  9468                           
  9469                           ;incstack = 0
  9470                           ;incstack = 0
  9471  005D9E  EC8C  F011         	call	_init_app_eeprom	;wreg free
  9472                           
  9473                           ;main.c: 2836: init_app_ram();
  9474  005DA2  EFC4  F02B         	goto	_init_app_ram	;wreg free
  9475  005DA6                     __end_of_vscp_restoreDefaults:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           postinc0	equ	0xFEE
  9484                           wreg	equ	0xFE8
  9485                           postdec1	equ	0xFE5
  9486                           fsr1h	equ	0xFE2
  9487                           fsr1l	equ	0xFE1
  9488                           indf2	equ	0xFDF
  9489                           postinc2	equ	0xFDE
  9490                           postdec2	equ	0xFDD
  9491                           fsr2h	equ	0xFDA
  9492                           fsr2l	equ	0xFD9
  9493                           status	equ	0xFD8
  9494                           
  9495 ;; *************** function _init_app_eeprom *****************
  9496 ;; Defined at:
  9497 ;;		line 1020 in file "../main.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;		None
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  i               1   16[COMRAM] unsigned char 
  9502 ;; Return value:  Size  Location     Type
  9503 ;;		None               void
  9504 ;; Registers used:
  9505 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/1
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9511 ;;      Params:         0       0       0       0       0       0       0
  9512 ;;      Locals:         1       0       0       0       0       0       0
  9513 ;;      Temps:          0       0       0       0       0       0       0
  9514 ;;      Totals:         1       0       0       0       0       0       0
  9515 ;;Total ram usage:        1 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    3
  9518 ;; This function calls:
  9519 ;;		_writeEEPROM
  9520 ;; This function is called by:
  9521 ;;		_main
  9522 ;;		_vscp_restoreDefaults
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           	psect	text38
  9527  002318                     __ptext38:
  9528                           	opt stack 0
  9529  002318                     _init_app_eeprom:
  9530                           	opt stack 24
  9531                           
  9532                           ;main.c: 1022: writeEEPROM( 0x41, 0 );
  9533                           
  9534                           ; BSR set to: 1
  9535                           ;incstack = 0
  9536                           ;incstack = 0
  9537  002318  6A0F               	clrf	?_writeEEPROM+1,c
  9538  00231A  0E41               	movlw	65
  9539  00231C  6E0E               	movwf	?_writeEEPROM,c
  9540  00231E  0E00               	movlw	0
  9541  002320  6A10               	clrf	?_writeEEPROM+2,c
  9542  002322  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9543                           
  9544                           ;main.c: 1023: writeEEPROM( 0x41, 0 );
  9545  002326  6A0F               	clrf	?_writeEEPROM+1,c
  9546  002328  0E41               	movlw	65
  9547  00232A  6E0E               	movwf	?_writeEEPROM,c
  9548  00232C  0E00               	movlw	0
  9549  00232E  6A10               	clrf	?_writeEEPROM+2,c
  9550  002330  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9551                           
  9552                           ;main.c: 1025: writeEEPROM(0x43, 0b00000001);
  9553  002334  6A0F               	clrf	?_writeEEPROM+1,c
  9554  002336  0E43               	movlw	67
  9555  002338  6E0E               	movwf	?_writeEEPROM,c
  9556  00233A  0E01               	movlw	1
  9557  00233C  6E10               	movwf	?_writeEEPROM+2,c
  9558  00233E  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9559                           
  9560                           ;main.c: 1026: writeEEPROM(0x44, 0b00000001);
  9561  002342  6A0F               	clrf	?_writeEEPROM+1,c
  9562  002344  0E44               	movlw	68
  9563  002346  6E0E               	movwf	?_writeEEPROM,c
  9564  002348  0E01               	movlw	1
  9565  00234A  6E10               	movwf	?_writeEEPROM+2,c
  9566  00234C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9567                           
  9568                           ;main.c: 1027: writeEEPROM(0x45, 0b00000001);
  9569  002350  6A0F               	clrf	?_writeEEPROM+1,c
  9570  002352  0E45               	movlw	69
  9571  002354  6E0E               	movwf	?_writeEEPROM,c
  9572  002356  0E01               	movlw	1
  9573  002358  6E10               	movwf	?_writeEEPROM+2,c
  9574  00235A  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9575                           
  9576                           ;main.c: 1028: writeEEPROM(0x46, 0b00000001);
  9577  00235E  6A0F               	clrf	?_writeEEPROM+1,c
  9578  002360  0E46               	movlw	70
  9579  002362  6E0E               	movwf	?_writeEEPROM,c
  9580  002364  0E01               	movlw	1
  9581  002366  6E10               	movwf	?_writeEEPROM+2,c
  9582  002368  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9583                           
  9584                           ;main.c: 1029: writeEEPROM(0x47, 0b00000001);
  9585  00236C  6A0F               	clrf	?_writeEEPROM+1,c
  9586  00236E  0E47               	movlw	71
  9587  002370  6E0E               	movwf	?_writeEEPROM,c
  9588  002372  0E01               	movlw	1
  9589  002374  6E10               	movwf	?_writeEEPROM+2,c
  9590  002376  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9591                           
  9592                           ;main.c: 1030: writeEEPROM(0x48, 0b00000001);
  9593  00237A  6A0F               	clrf	?_writeEEPROM+1,c
  9594  00237C  0E48               	movlw	72
  9595  00237E  6E0E               	movwf	?_writeEEPROM,c
  9596  002380  0E01               	movlw	1
  9597  002382  6E10               	movwf	?_writeEEPROM+2,c
  9598  002384  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9599                           
  9600                           ;main.c: 1032: writeEEPROM(0x49, 30);
  9601  002388  6A0F               	clrf	?_writeEEPROM+1,c
  9602  00238A  0E49               	movlw	73
  9603  00238C  6E0E               	movwf	?_writeEEPROM,c
  9604  00238E  0E1E               	movlw	30
  9605  002390  6E10               	movwf	?_writeEEPROM+2,c
  9606  002392  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9607                           
  9608                           ;main.c: 1033: writeEEPROM(0x4A, 0);
  9609  002396  6A0F               	clrf	?_writeEEPROM+1,c
  9610  002398  0E4A               	movlw	74
  9611  00239A  6E0E               	movwf	?_writeEEPROM,c
  9612  00239C  0E00               	movlw	0
  9613  00239E  6A10               	clrf	?_writeEEPROM+2,c
  9614  0023A0  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9615                           
  9616                           ;main.c: 1034: writeEEPROM(0x4B, 0);
  9617  0023A4  6A0F               	clrf	?_writeEEPROM+1,c
  9618  0023A6  0E4B               	movlw	75
  9619  0023A8  6E0E               	movwf	?_writeEEPROM,c
  9620  0023AA  0E00               	movlw	0
  9621  0023AC  6A10               	clrf	?_writeEEPROM+2,c
  9622  0023AE  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9623                           
  9624                           ;main.c: 1035: writeEEPROM(0x4C, 0);
  9625  0023B2  6A0F               	clrf	?_writeEEPROM+1,c
  9626  0023B4  0E4C               	movlw	76
  9627  0023B6  6E0E               	movwf	?_writeEEPROM,c
  9628  0023B8  0E00               	movlw	0
  9629  0023BA  6A10               	clrf	?_writeEEPROM+2,c
  9630  0023BC  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9631                           
  9632                           ;main.c: 1036: writeEEPROM(0x4D, 0);
  9633  0023C0  6A0F               	clrf	?_writeEEPROM+1,c
  9634  0023C2  0E4D               	movlw	77
  9635  0023C4  6E0E               	movwf	?_writeEEPROM,c
  9636  0023C6  0E00               	movlw	0
  9637  0023C8  6A10               	clrf	?_writeEEPROM+2,c
  9638  0023CA  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9639                           
  9640                           ;main.c: 1037: writeEEPROM(0x4E, 0);
  9641  0023CE  6A0F               	clrf	?_writeEEPROM+1,c
  9642  0023D0  0E4E               	movlw	78
  9643  0023D2  6E0E               	movwf	?_writeEEPROM,c
  9644  0023D4  0E00               	movlw	0
  9645  0023D6  6A10               	clrf	?_writeEEPROM+2,c
  9646  0023D8  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9647                           
  9648                           ;main.c: 1041: writeEEPROM(0x4F, 0x0F);
  9649  0023DC  6A0F               	clrf	?_writeEEPROM+1,c
  9650  0023DE  0E4F               	movlw	79
  9651  0023E0  6E0E               	movwf	?_writeEEPROM,c
  9652  0023E2  0E0F               	movlw	15
  9653  0023E4  6E10               	movwf	?_writeEEPROM+2,c
  9654  0023E6  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9655                           
  9656                           ;main.c: 1042: writeEEPROM(0x50, 0x68);
  9657  0023EA  6A0F               	clrf	?_writeEEPROM+1,c
  9658  0023EC  0E50               	movlw	80
  9659  0023EE  6E0E               	movwf	?_writeEEPROM,c
  9660  0023F0  0E68               	movlw	104
  9661  0023F2  6E10               	movwf	?_writeEEPROM+2,c
  9662  0023F4  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9663                           
  9664                           ;main.c: 1044: writeEEPROM(0x51, 0x0D);
  9665  0023F8  6A0F               	clrf	?_writeEEPROM+1,c
  9666  0023FA  0E51               	movlw	81
  9667  0023FC  6E0E               	movwf	?_writeEEPROM,c
  9668  0023FE  0E0D               	movlw	13
  9669  002400  6E10               	movwf	?_writeEEPROM+2,c
  9670  002402  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9671                           
  9672                           ;main.c: 1045: writeEEPROM(0x52, 0x7F);
  9673  002406  6A0F               	clrf	?_writeEEPROM+1,c
  9674  002408  0E52               	movlw	82
  9675  00240A  6E0E               	movwf	?_writeEEPROM,c
  9676  00240C  0E7F               	movlw	127
  9677  00240E  6E10               	movwf	?_writeEEPROM+2,c
  9678  002410  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9679                           
  9680                           ;main.c: 1047: writeEEPROM(0x53, 0x0D);
  9681  002414  6A0F               	clrf	?_writeEEPROM+1,c
  9682  002416  0E53               	movlw	83
  9683  002418  6E0E               	movwf	?_writeEEPROM,c
  9684  00241A  0E0D               	movlw	13
  9685  00241C  6E10               	movwf	?_writeEEPROM+2,c
  9686  00241E  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9687                           
  9688                           ;main.c: 1048: writeEEPROM(0x54, 0x7F);
  9689  002422  6A0F               	clrf	?_writeEEPROM+1,c
  9690  002424  0E54               	movlw	84
  9691  002426  6E0E               	movwf	?_writeEEPROM,c
  9692  002428  0E7F               	movlw	127
  9693  00242A  6E10               	movwf	?_writeEEPROM+2,c
  9694  00242C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9695                           
  9696                           ;main.c: 1050: writeEEPROM(0x55, 0x0D);
  9697  002430  6A0F               	clrf	?_writeEEPROM+1,c
  9698  002432  0E55               	movlw	85
  9699  002434  6E0E               	movwf	?_writeEEPROM,c
  9700  002436  0E0D               	movlw	13
  9701  002438  6E10               	movwf	?_writeEEPROM+2,c
  9702  00243A  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9703                           
  9704                           ;main.c: 1051: writeEEPROM(0x56, 0x7F);
  9705  00243E  6A0F               	clrf	?_writeEEPROM+1,c
  9706  002440  0E56               	movlw	86
  9707  002442  6E0E               	movwf	?_writeEEPROM,c
  9708  002444  0E7F               	movlw	127
  9709  002446  6E10               	movwf	?_writeEEPROM+2,c
  9710  002448  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9711                           
  9712                           ;main.c: 1053: writeEEPROM(0x57, 0x0D);
  9713  00244C  6A0F               	clrf	?_writeEEPROM+1,c
  9714  00244E  0E57               	movlw	87
  9715  002450  6E0E               	movwf	?_writeEEPROM,c
  9716  002452  0E0D               	movlw	13
  9717  002454  6E10               	movwf	?_writeEEPROM+2,c
  9718  002456  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9719                           
  9720                           ;main.c: 1054: writeEEPROM(0x58, 0x7F);
  9721  00245A  6A0F               	clrf	?_writeEEPROM+1,c
  9722  00245C  0E58               	movlw	88
  9723  00245E  6E0E               	movwf	?_writeEEPROM,c
  9724  002460  0E7F               	movlw	127
  9725  002462  6E10               	movwf	?_writeEEPROM+2,c
  9726  002464  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9727                           
  9728                           ;main.c: 1056: writeEEPROM(0x59, 0x0D);
  9729  002468  6A0F               	clrf	?_writeEEPROM+1,c
  9730  00246A  0E59               	movlw	89
  9731  00246C  6E0E               	movwf	?_writeEEPROM,c
  9732  00246E  0E0D               	movlw	13
  9733  002470  6E10               	movwf	?_writeEEPROM+2,c
  9734  002472  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9735                           
  9736                           ;main.c: 1057: writeEEPROM(0x5A, 0x7F);
  9737  002476  6A0F               	clrf	?_writeEEPROM+1,c
  9738  002478  0E5A               	movlw	90
  9739  00247A  6E0E               	movwf	?_writeEEPROM,c
  9740  00247C  0E7F               	movlw	127
  9741  00247E  6E10               	movwf	?_writeEEPROM+2,c
  9742  002480  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9743                           
  9744                           ;main.c: 1061: writeEEPROM(0x5B, 0x80);
  9745  002484  6A0F               	clrf	?_writeEEPROM+1,c
  9746  002486  0E5B               	movlw	91
  9747  002488  6E0E               	movwf	?_writeEEPROM,c
  9748  00248A  0E80               	movlw	128
  9749  00248C  6E10               	movwf	?_writeEEPROM+2,c
  9750  00248E  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9751                           
  9752                           ;main.c: 1062: writeEEPROM(0x5C, 0xff);
  9753  002492  6A0F               	clrf	?_writeEEPROM+1,c
  9754  002494  0E5C               	movlw	92
  9755  002496  6E0E               	movwf	?_writeEEPROM,c
  9756  002498  0EFF               	movlw	255
  9757  00249A  6810               	setf	?_writeEEPROM+2,c
  9758  00249C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9759                           
  9760                           ;main.c: 1064: writeEEPROM(0x5D, 0x80);
  9761  0024A0  6A0F               	clrf	?_writeEEPROM+1,c
  9762  0024A2  0E5D               	movlw	93
  9763  0024A4  6E0E               	movwf	?_writeEEPROM,c
  9764  0024A6  0E80               	movlw	128
  9765  0024A8  6E10               	movwf	?_writeEEPROM+2,c
  9766  0024AA  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9767                           
  9768                           ;main.c: 1065: writeEEPROM(0x5E, 0xff);
  9769  0024AE  6A0F               	clrf	?_writeEEPROM+1,c
  9770  0024B0  0E5E               	movlw	94
  9771  0024B2  6E0E               	movwf	?_writeEEPROM,c
  9772  0024B4  0EFF               	movlw	255
  9773  0024B6  6810               	setf	?_writeEEPROM+2,c
  9774  0024B8  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9775                           
  9776                           ;main.c: 1067: writeEEPROM(0x5F, 0x80);
  9777  0024BC  6A0F               	clrf	?_writeEEPROM+1,c
  9778  0024BE  0E5F               	movlw	95
  9779  0024C0  6E0E               	movwf	?_writeEEPROM,c
  9780  0024C2  0E80               	movlw	128
  9781  0024C4  6E10               	movwf	?_writeEEPROM+2,c
  9782  0024C6  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9783                           
  9784                           ;main.c: 1068: writeEEPROM(0x60, 0xff);
  9785  0024CA  6A0F               	clrf	?_writeEEPROM+1,c
  9786  0024CC  0E60               	movlw	96
  9787  0024CE  6E0E               	movwf	?_writeEEPROM,c
  9788  0024D0  0EFF               	movlw	255
  9789  0024D2  6810               	setf	?_writeEEPROM+2,c
  9790  0024D4  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9791                           
  9792                           ;main.c: 1070: writeEEPROM(0x61, 0x80);
  9793  0024D8  6A0F               	clrf	?_writeEEPROM+1,c
  9794  0024DA  0E61               	movlw	97
  9795  0024DC  6E0E               	movwf	?_writeEEPROM,c
  9796  0024DE  0E80               	movlw	128
  9797  0024E0  6E10               	movwf	?_writeEEPROM+2,c
  9798  0024E2  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9799                           
  9800                           ;main.c: 1071: writeEEPROM(0x62, 0xff);
  9801  0024E6  6A0F               	clrf	?_writeEEPROM+1,c
  9802  0024E8  0E62               	movlw	98
  9803  0024EA  6E0E               	movwf	?_writeEEPROM,c
  9804  0024EC  0EFF               	movlw	255
  9805  0024EE  6810               	setf	?_writeEEPROM+2,c
  9806  0024F0  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9807                           
  9808                           ;main.c: 1073: writeEEPROM(0x63, 0x80);
  9809  0024F4  6A0F               	clrf	?_writeEEPROM+1,c
  9810  0024F6  0E63               	movlw	99
  9811  0024F8  6E0E               	movwf	?_writeEEPROM,c
  9812  0024FA  0E80               	movlw	128
  9813  0024FC  6E10               	movwf	?_writeEEPROM+2,c
  9814  0024FE  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9815                           
  9816                           ;main.c: 1074: writeEEPROM(0x64, 0xff);
  9817  002502  6A0F               	clrf	?_writeEEPROM+1,c
  9818  002504  0E64               	movlw	100
  9819  002506  6E0E               	movwf	?_writeEEPROM,c
  9820  002508  0EFF               	movlw	255
  9821  00250A  6810               	setf	?_writeEEPROM+2,c
  9822  00250C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9823                           
  9824                           ;main.c: 1076: writeEEPROM(0x65, 0x80);
  9825  002510  6A0F               	clrf	?_writeEEPROM+1,c
  9826  002512  0E65               	movlw	101
  9827  002514  6E0E               	movwf	?_writeEEPROM,c
  9828  002516  0E80               	movlw	128
  9829  002518  6E10               	movwf	?_writeEEPROM+2,c
  9830  00251A  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9831                           
  9832                           ;main.c: 1077: writeEEPROM(0x66, 0xff);
  9833  00251E  6A0F               	clrf	?_writeEEPROM+1,c
  9834  002520  0E66               	movlw	102
  9835  002522  6E0E               	movwf	?_writeEEPROM,c
  9836  002524  0EFF               	movlw	255
  9837  002526  6810               	setf	?_writeEEPROM+2,c
  9838  002528  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9839                           
  9840                           ;main.c: 1081: writeEEPROM(0x67, 0x7f);
  9841  00252C  6A0F               	clrf	?_writeEEPROM+1,c
  9842  00252E  0E67               	movlw	103
  9843  002530  6E0E               	movwf	?_writeEEPROM,c
  9844  002532  0E7F               	movlw	127
  9845  002534  6E10               	movwf	?_writeEEPROM+2,c
  9846  002536  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9847                           
  9848                           ;main.c: 1082: writeEEPROM(0x68, 0xff);
  9849  00253A  6A0F               	clrf	?_writeEEPROM+1,c
  9850  00253C  0E68               	movlw	104
  9851  00253E  6E0E               	movwf	?_writeEEPROM,c
  9852  002540  0EFF               	movlw	255
  9853  002542  6810               	setf	?_writeEEPROM+2,c
  9854  002544  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9855                           
  9856                           ;main.c: 1084: writeEEPROM(0x69, 0x7f);
  9857  002548  6A0F               	clrf	?_writeEEPROM+1,c
  9858  00254A  0E69               	movlw	105
  9859  00254C  6E0E               	movwf	?_writeEEPROM,c
  9860  00254E  0E7F               	movlw	127
  9861  002550  6E10               	movwf	?_writeEEPROM+2,c
  9862  002552  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9863                           
  9864                           ;main.c: 1085: writeEEPROM(0x6A, 0xff);
  9865  002556  6A0F               	clrf	?_writeEEPROM+1,c
  9866  002558  0E6A               	movlw	106
  9867  00255A  6E0E               	movwf	?_writeEEPROM,c
  9868  00255C  0EFF               	movlw	255
  9869  00255E  6810               	setf	?_writeEEPROM+2,c
  9870  002560  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9871                           
  9872                           ;main.c: 1087: writeEEPROM(0x6B, 0x7f);
  9873  002564  6A0F               	clrf	?_writeEEPROM+1,c
  9874  002566  0E6B               	movlw	107
  9875  002568  6E0E               	movwf	?_writeEEPROM,c
  9876  00256A  0E7F               	movlw	127
  9877  00256C  6E10               	movwf	?_writeEEPROM+2,c
  9878  00256E  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9879                           
  9880                           ;main.c: 1088: writeEEPROM(0x6C, 0xff);
  9881  002572  6A0F               	clrf	?_writeEEPROM+1,c
  9882  002574  0E6C               	movlw	108
  9883  002576  6E0E               	movwf	?_writeEEPROM,c
  9884  002578  0EFF               	movlw	255
  9885  00257A  6810               	setf	?_writeEEPROM+2,c
  9886  00257C  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9887                           
  9888                           ;main.c: 1090: writeEEPROM(0x6D, 0x7f);
  9889  002580  6A0F               	clrf	?_writeEEPROM+1,c
  9890  002582  0E6D               	movlw	109
  9891  002584  6E0E               	movwf	?_writeEEPROM,c
  9892  002586  0E7F               	movlw	127
  9893  002588  6E10               	movwf	?_writeEEPROM+2,c
  9894  00258A  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9895                           
  9896                           ;main.c: 1091: writeEEPROM(0x6E, 0xff);
  9897  00258E  6A0F               	clrf	?_writeEEPROM+1,c
  9898  002590  0E6E               	movlw	110
  9899  002592  6E0E               	movwf	?_writeEEPROM,c
  9900  002594  0EFF               	movlw	255
  9901  002596  6810               	setf	?_writeEEPROM+2,c
  9902  002598  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9903                           
  9904                           ;main.c: 1093: writeEEPROM(0x6F, 0x7f);
  9905  00259C  6A0F               	clrf	?_writeEEPROM+1,c
  9906  00259E  0E6F               	movlw	111
  9907  0025A0  6E0E               	movwf	?_writeEEPROM,c
  9908  0025A2  0E7F               	movlw	127
  9909  0025A4  6E10               	movwf	?_writeEEPROM+2,c
  9910  0025A6  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9911                           
  9912                           ;main.c: 1094: writeEEPROM(0x70, 0xff);
  9913  0025AA  6A0F               	clrf	?_writeEEPROM+1,c
  9914  0025AC  0E70               	movlw	112
  9915  0025AE  6E0E               	movwf	?_writeEEPROM,c
  9916  0025B0  0EFF               	movlw	255
  9917  0025B2  6810               	setf	?_writeEEPROM+2,c
  9918  0025B4  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9919                           
  9920                           ;main.c: 1096: writeEEPROM(0x71, 0x7f);
  9921  0025B8  6A0F               	clrf	?_writeEEPROM+1,c
  9922  0025BA  0E71               	movlw	113
  9923  0025BC  6E0E               	movwf	?_writeEEPROM,c
  9924  0025BE  0E7F               	movlw	127
  9925  0025C0  6E10               	movwf	?_writeEEPROM+2,c
  9926  0025C2  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9927                           
  9928                           ;main.c: 1097: writeEEPROM(0x72, 0xff);
  9929  0025C6  6A0F               	clrf	?_writeEEPROM+1,c
  9930  0025C8  0E72               	movlw	114
  9931  0025CA  6E0E               	movwf	?_writeEEPROM,c
  9932  0025CC  0EFF               	movlw	255
  9933  0025CE  6810               	setf	?_writeEEPROM+2,c
  9934  0025D0  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9935                           
  9936                           ;main.c: 1101: writeEEPROM(0x73, 0);
  9937  0025D4  6A0F               	clrf	?_writeEEPROM+1,c
  9938  0025D6  0E73               	movlw	115
  9939  0025D8  6E0E               	movwf	?_writeEEPROM,c
  9940  0025DA  0E00               	movlw	0
  9941  0025DC  6A10               	clrf	?_writeEEPROM+2,c
  9942  0025DE  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9943                           
  9944                           ;main.c: 1102: writeEEPROM(0x74, 0);
  9945  0025E2  6A0F               	clrf	?_writeEEPROM+1,c
  9946  0025E4  0E74               	movlw	116
  9947  0025E6  6E0E               	movwf	?_writeEEPROM,c
  9948  0025E8  0E00               	movlw	0
  9949  0025EA  6A10               	clrf	?_writeEEPROM+2,c
  9950  0025EC  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9951                           
  9952                           ;main.c: 1104: writeEEPROM(0x75, 0);
  9953  0025F0  6A0F               	clrf	?_writeEEPROM+1,c
  9954  0025F2  0E75               	movlw	117
  9955  0025F4  6E0E               	movwf	?_writeEEPROM,c
  9956  0025F6  0E00               	movlw	0
  9957  0025F8  6A10               	clrf	?_writeEEPROM+2,c
  9958  0025FA  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9959                           
  9960                           ;main.c: 1105: writeEEPROM(0x76, 0);
  9961  0025FE  6A0F               	clrf	?_writeEEPROM+1,c
  9962  002600  0E76               	movlw	118
  9963  002602  6E0E               	movwf	?_writeEEPROM,c
  9964  002604  0E00               	movlw	0
  9965  002606  6A10               	clrf	?_writeEEPROM+2,c
  9966  002608  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9967                           
  9968                           ;main.c: 1107: writeEEPROM(0x77, 0);
  9969  00260C  6A0F               	clrf	?_writeEEPROM+1,c
  9970  00260E  0E77               	movlw	119
  9971  002610  6E0E               	movwf	?_writeEEPROM,c
  9972  002612  0E00               	movlw	0
  9973  002614  6A10               	clrf	?_writeEEPROM+2,c
  9974  002616  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9975                           
  9976                           ;main.c: 1108: writeEEPROM(0x78, 0);
  9977  00261A  6A0F               	clrf	?_writeEEPROM+1,c
  9978  00261C  0E78               	movlw	120
  9979  00261E  6E0E               	movwf	?_writeEEPROM,c
  9980  002620  0E00               	movlw	0
  9981  002622  6A10               	clrf	?_writeEEPROM+2,c
  9982  002624  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9983                           
  9984                           ;main.c: 1110: writeEEPROM(0x79, 0);
  9985  002628  6A0F               	clrf	?_writeEEPROM+1,c
  9986  00262A  0E79               	movlw	121
  9987  00262C  6E0E               	movwf	?_writeEEPROM,c
  9988  00262E  0E00               	movlw	0
  9989  002630  6A10               	clrf	?_writeEEPROM+2,c
  9990  002632  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9991                           
  9992                           ;main.c: 1111: writeEEPROM(0x7A, 0);
  9993  002636  6A0F               	clrf	?_writeEEPROM+1,c
  9994  002638  0E7A               	movlw	122
  9995  00263A  6E0E               	movwf	?_writeEEPROM,c
  9996  00263C  0E00               	movlw	0
  9997  00263E  6A10               	clrf	?_writeEEPROM+2,c
  9998  002640  EC7E  F02D         	call	_writeEEPROM	;wreg free
  9999                           
 10000                           ;main.c: 1113: writeEEPROM(0x7B, 0);
 10001  002644  6A0F               	clrf	?_writeEEPROM+1,c
 10002  002646  0E7B               	movlw	123
 10003  002648  6E0E               	movwf	?_writeEEPROM,c
 10004  00264A  0E00               	movlw	0
 10005  00264C  6A10               	clrf	?_writeEEPROM+2,c
 10006  00264E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10007                           
 10008                           ;main.c: 1114: writeEEPROM(0x7C, 0);
 10009  002652  6A0F               	clrf	?_writeEEPROM+1,c
 10010  002654  0E7C               	movlw	124
 10011  002656  6E0E               	movwf	?_writeEEPROM,c
 10012  002658  0E00               	movlw	0
 10013  00265A  6A10               	clrf	?_writeEEPROM+2,c
 10014  00265C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10015                           
 10016                           ;main.c: 1116: writeEEPROM(0x7D, 0);
 10017  002660  6A0F               	clrf	?_writeEEPROM+1,c
 10018  002662  0E7D               	movlw	125
 10019  002664  6E0E               	movwf	?_writeEEPROM,c
 10020  002666  0E00               	movlw	0
 10021  002668  6A10               	clrf	?_writeEEPROM+2,c
 10022  00266A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10023                           
 10024                           ;main.c: 1117: writeEEPROM(0x7E, 0);
 10025  00266E  6A0F               	clrf	?_writeEEPROM+1,c
 10026  002670  0E7E               	movlw	126
 10027  002672  6E0E               	movwf	?_writeEEPROM,c
 10028  002674  0E00               	movlw	0
 10029  002676  6A10               	clrf	?_writeEEPROM+2,c
 10030  002678  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10031                           
 10032                           ;main.c: 1121: writeEEPROM(0x7F, 0x7f);
 10033  00267C  6A0F               	clrf	?_writeEEPROM+1,c
 10034  00267E  0E7F               	movlw	127
 10035  002680  6E0E               	movwf	?_writeEEPROM,c
 10036  002682  6E10               	movwf	?_writeEEPROM+2,c
 10037  002684  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10038                           
 10039                           ;main.c: 1122: writeEEPROM(0x80, 0xff);
 10040  002688  6A0F               	clrf	?_writeEEPROM+1,c
 10041  00268A  0E80               	movlw	128
 10042  00268C  6E0E               	movwf	?_writeEEPROM,c
 10043  00268E  0EFF               	movlw	255
 10044  002690  6810               	setf	?_writeEEPROM+2,c
 10045  002692  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10046                           
 10047                           ;main.c: 1124: writeEEPROM(0x81, 0x7f);
 10048  002696  6A0F               	clrf	?_writeEEPROM+1,c
 10049  002698  0E81               	movlw	129
 10050  00269A  6E0E               	movwf	?_writeEEPROM,c
 10051  00269C  0E7F               	movlw	127
 10052  00269E  6E10               	movwf	?_writeEEPROM+2,c
 10053  0026A0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10054                           
 10055                           ;main.c: 1125: writeEEPROM(0x82, 0xff);
 10056  0026A4  6A0F               	clrf	?_writeEEPROM+1,c
 10057  0026A6  0E82               	movlw	130
 10058  0026A8  6E0E               	movwf	?_writeEEPROM,c
 10059  0026AA  0EFF               	movlw	255
 10060  0026AC  6810               	setf	?_writeEEPROM+2,c
 10061  0026AE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10062                           
 10063                           ;main.c: 1127: writeEEPROM(0x83, 0x7f);
 10064  0026B2  6A0F               	clrf	?_writeEEPROM+1,c
 10065  0026B4  0E83               	movlw	131
 10066  0026B6  6E0E               	movwf	?_writeEEPROM,c
 10067  0026B8  0E7F               	movlw	127
 10068  0026BA  6E10               	movwf	?_writeEEPROM+2,c
 10069  0026BC  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10070                           
 10071                           ;main.c: 1128: writeEEPROM(0x84, 0xff);
 10072  0026C0  6A0F               	clrf	?_writeEEPROM+1,c
 10073  0026C2  0E84               	movlw	132
 10074  0026C4  6E0E               	movwf	?_writeEEPROM,c
 10075  0026C6  0EFF               	movlw	255
 10076  0026C8  6810               	setf	?_writeEEPROM+2,c
 10077  0026CA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10078                           
 10079                           ;main.c: 1130: writeEEPROM(0x85, 0x7f);
 10080  0026CE  6A0F               	clrf	?_writeEEPROM+1,c
 10081  0026D0  0E85               	movlw	133
 10082  0026D2  6E0E               	movwf	?_writeEEPROM,c
 10083  0026D4  0E7F               	movlw	127
 10084  0026D6  6E10               	movwf	?_writeEEPROM+2,c
 10085  0026D8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10086                           
 10087                           ;main.c: 1131: writeEEPROM(0x86, 0xff);
 10088  0026DC  6A0F               	clrf	?_writeEEPROM+1,c
 10089  0026DE  0E86               	movlw	134
 10090  0026E0  6E0E               	movwf	?_writeEEPROM,c
 10091  0026E2  0EFF               	movlw	255
 10092  0026E4  6810               	setf	?_writeEEPROM+2,c
 10093  0026E6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10094                           
 10095                           ;main.c: 1133: writeEEPROM(0x87, 0x7f);
 10096  0026EA  6A0F               	clrf	?_writeEEPROM+1,c
 10097  0026EC  0E87               	movlw	135
 10098  0026EE  6E0E               	movwf	?_writeEEPROM,c
 10099  0026F0  0E7F               	movlw	127
 10100  0026F2  6E10               	movwf	?_writeEEPROM+2,c
 10101  0026F4  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10102                           
 10103                           ;main.c: 1134: writeEEPROM(0x88, 0xff);
 10104  0026F8  6A0F               	clrf	?_writeEEPROM+1,c
 10105  0026FA  0E88               	movlw	136
 10106  0026FC  6E0E               	movwf	?_writeEEPROM,c
 10107  0026FE  0EFF               	movlw	255
 10108  002700  6810               	setf	?_writeEEPROM+2,c
 10109  002702  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10110                           
 10111                           ;main.c: 1136: writeEEPROM(0x89, 0x7f);
 10112  002706  6A0F               	clrf	?_writeEEPROM+1,c
 10113  002708  0E89               	movlw	137
 10114  00270A  6E0E               	movwf	?_writeEEPROM,c
 10115  00270C  0E7F               	movlw	127
 10116  00270E  6E10               	movwf	?_writeEEPROM+2,c
 10117  002710  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10118                           
 10119                           ;main.c: 1137: writeEEPROM(0x8A, 0xff);
 10120  002714  6A0F               	clrf	?_writeEEPROM+1,c
 10121  002716  0E8A               	movlw	138
 10122  002718  6E0E               	movwf	?_writeEEPROM,c
 10123  00271A  0EFF               	movlw	255
 10124  00271C  6810               	setf	?_writeEEPROM+2,c
 10125  00271E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10126                           
 10127                           ;main.c: 1141: writeEEPROM(0x8B, 0x80);
 10128  002722  6A0F               	clrf	?_writeEEPROM+1,c
 10129  002724  0E8B               	movlw	139
 10130  002726  6E0E               	movwf	?_writeEEPROM,c
 10131  002728  0E80               	movlw	128
 10132  00272A  6E10               	movwf	?_writeEEPROM+2,c
 10133  00272C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10134                           
 10135                           ;main.c: 1142: writeEEPROM(0x8C, 0x00);
 10136  002730  6A0F               	clrf	?_writeEEPROM+1,c
 10137  002732  0E8C               	movlw	140
 10138  002734  6E0E               	movwf	?_writeEEPROM,c
 10139  002736  0E00               	movlw	0
 10140  002738  6A10               	clrf	?_writeEEPROM+2,c
 10141  00273A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10142                           
 10143                           ;main.c: 1144: writeEEPROM(0x8D, 0x80);
 10144  00273E  6A0F               	clrf	?_writeEEPROM+1,c
 10145  002740  0E8D               	movlw	141
 10146  002742  6E0E               	movwf	?_writeEEPROM,c
 10147  002744  0E80               	movlw	128
 10148  002746  6E10               	movwf	?_writeEEPROM+2,c
 10149  002748  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10150                           
 10151                           ;main.c: 1145: writeEEPROM(0x8E, 0x00);
 10152  00274C  6A0F               	clrf	?_writeEEPROM+1,c
 10153  00274E  0E8E               	movlw	142
 10154  002750  6E0E               	movwf	?_writeEEPROM,c
 10155  002752  0E00               	movlw	0
 10156  002754  6A10               	clrf	?_writeEEPROM+2,c
 10157  002756  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10158                           
 10159                           ;main.c: 1147: writeEEPROM(0x8F, 0x80);
 10160  00275A  6A0F               	clrf	?_writeEEPROM+1,c
 10161  00275C  0E8F               	movlw	143
 10162  00275E  6E0E               	movwf	?_writeEEPROM,c
 10163  002760  0E80               	movlw	128
 10164  002762  6E10               	movwf	?_writeEEPROM+2,c
 10165  002764  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10166                           
 10167                           ;main.c: 1148: writeEEPROM(0x90, 0x00);
 10168  002768  6A0F               	clrf	?_writeEEPROM+1,c
 10169  00276A  0E90               	movlw	144
 10170  00276C  6E0E               	movwf	?_writeEEPROM,c
 10171  00276E  0E00               	movlw	0
 10172  002770  6A10               	clrf	?_writeEEPROM+2,c
 10173  002772  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10174                           
 10175                           ;main.c: 1150: writeEEPROM(0x91, 0x80);
 10176  002776  6A0F               	clrf	?_writeEEPROM+1,c
 10177  002778  0E91               	movlw	145
 10178  00277A  6E0E               	movwf	?_writeEEPROM,c
 10179  00277C  0E80               	movlw	128
 10180  00277E  6E10               	movwf	?_writeEEPROM+2,c
 10181  002780  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10182                           
 10183                           ;main.c: 1151: writeEEPROM(0x92, 0x00);
 10184  002784  6A0F               	clrf	?_writeEEPROM+1,c
 10185  002786  0E92               	movlw	146
 10186  002788  6E0E               	movwf	?_writeEEPROM,c
 10187  00278A  0E00               	movlw	0
 10188  00278C  6A10               	clrf	?_writeEEPROM+2,c
 10189  00278E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10190                           
 10191                           ;main.c: 1153: writeEEPROM(0x93, 0x80);
 10192  002792  6A0F               	clrf	?_writeEEPROM+1,c
 10193  002794  0E93               	movlw	147
 10194  002796  6E0E               	movwf	?_writeEEPROM,c
 10195  002798  0E80               	movlw	128
 10196  00279A  6E10               	movwf	?_writeEEPROM+2,c
 10197  00279C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10198                           
 10199                           ;main.c: 1154: writeEEPROM(0x94, 0x00);
 10200  0027A0  6A0F               	clrf	?_writeEEPROM+1,c
 10201  0027A2  0E94               	movlw	148
 10202  0027A4  6E0E               	movwf	?_writeEEPROM,c
 10203  0027A6  0E00               	movlw	0
 10204  0027A8  6A10               	clrf	?_writeEEPROM+2,c
 10205  0027AA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10206                           
 10207                           ;main.c: 1156: writeEEPROM(0x95, 0x80);
 10208  0027AE  6A0F               	clrf	?_writeEEPROM+1,c
 10209  0027B0  0E95               	movlw	149
 10210  0027B2  6E0E               	movwf	?_writeEEPROM,c
 10211  0027B4  0E80               	movlw	128
 10212  0027B6  6E10               	movwf	?_writeEEPROM+2,c
 10213  0027B8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10214                           
 10215                           ;main.c: 1157: writeEEPROM(0x96, 0x00);
 10216  0027BC  6A0F               	clrf	?_writeEEPROM+1,c
 10217  0027BE  0E96               	movlw	150
 10218  0027C0  6E0E               	movwf	?_writeEEPROM,c
 10219  0027C2  0E00               	movlw	0
 10220  0027C4  6A10               	clrf	?_writeEEPROM+2,c
 10221  0027C6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10222                           
 10223                           ;main.c: 1161: writeEEPROM(0x97, 2);
 10224  0027CA  6A0F               	clrf	?_writeEEPROM+1,c
 10225  0027CC  0E97               	movlw	151
 10226  0027CE  6E0E               	movwf	?_writeEEPROM,c
 10227  0027D0  0E02               	movlw	2
 10228  0027D2  6E10               	movwf	?_writeEEPROM+2,c
 10229  0027D4  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10230                           
 10231                           ;main.c: 1162: writeEEPROM(0x98, 2);
 10232  0027D8  6A0F               	clrf	?_writeEEPROM+1,c
 10233  0027DA  0E98               	movlw	152
 10234  0027DC  6E0E               	movwf	?_writeEEPROM,c
 10235  0027DE  0E02               	movlw	2
 10236  0027E0  6E10               	movwf	?_writeEEPROM+2,c
 10237  0027E2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10238                           
 10239                           ;main.c: 1163: writeEEPROM(0x99, 2);
 10240  0027E6  6A0F               	clrf	?_writeEEPROM+1,c
 10241  0027E8  0E99               	movlw	153
 10242  0027EA  6E0E               	movwf	?_writeEEPROM,c
 10243  0027EC  0E02               	movlw	2
 10244  0027EE  6E10               	movwf	?_writeEEPROM+2,c
 10245  0027F0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10246                           
 10247                           ;main.c: 1164: writeEEPROM(0x9A, 2);
 10248  0027F4  6A0F               	clrf	?_writeEEPROM+1,c
 10249  0027F6  0E9A               	movlw	154
 10250  0027F8  6E0E               	movwf	?_writeEEPROM,c
 10251  0027FA  0E02               	movlw	2
 10252  0027FC  6E10               	movwf	?_writeEEPROM+2,c
 10253  0027FE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10254                           
 10255                           ;main.c: 1165: writeEEPROM(0x9B, 2);
 10256  002802  6A0F               	clrf	?_writeEEPROM+1,c
 10257  002804  0E9B               	movlw	155
 10258  002806  6E0E               	movwf	?_writeEEPROM,c
 10259  002808  0E02               	movlw	2
 10260  00280A  6E10               	movwf	?_writeEEPROM+2,c
 10261  00280C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10262                           
 10263                           ;main.c: 1166: writeEEPROM(0x9C, 2);
 10264  002810  6A0F               	clrf	?_writeEEPROM+1,c
 10265  002812  0E9C               	movlw	156
 10266  002814  6E0E               	movwf	?_writeEEPROM,c
 10267  002816  0E02               	movlw	2
 10268  002818  6E10               	movwf	?_writeEEPROM+2,c
 10269  00281A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10270                           
 10271                           ;main.c: 1170: writeEEPROM(0xF2, 0xc3);
 10272  00281E  6A0F               	clrf	?_writeEEPROM+1,c
 10273  002820  0EF2               	movlw	242
 10274  002822  6E0E               	movwf	?_writeEEPROM,c
 10275  002824  0EC3               	movlw	195
 10276  002826  6E10               	movwf	?_writeEEPROM+2,c
 10277  002828  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10278                           
 10279                           ;main.c: 1171: writeEEPROM(0xF3, 0x50);
 10280  00282C  6A0F               	clrf	?_writeEEPROM+1,c
 10281  00282E  0EF3               	movlw	243
 10282  002830  6E0E               	movwf	?_writeEEPROM,c
 10283  002832  0E50               	movlw	80
 10284  002834  6E10               	movwf	?_writeEEPROM+2,c
 10285  002836  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10286                           
 10287                           ;main.c: 1175: writeEEPROM(0x9E, 0);
 10288  00283A  6A0F               	clrf	?_writeEEPROM+1,c
 10289  00283C  0E9E               	movlw	158
 10290  00283E  6E0E               	movwf	?_writeEEPROM,c
 10291  002840  0E00               	movlw	0
 10292  002842  6A10               	clrf	?_writeEEPROM+2,c
 10293  002844  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10294                           
 10295                           ;main.c: 1176: writeEEPROM(0x9F, 0);
 10296  002848  6A0F               	clrf	?_writeEEPROM+1,c
 10297  00284A  0E9F               	movlw	159
 10298  00284C  6E0E               	movwf	?_writeEEPROM,c
 10299  00284E  0E00               	movlw	0
 10300  002850  6A10               	clrf	?_writeEEPROM+2,c
 10301  002852  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10302                           
 10303                           ;main.c: 1177: writeEEPROM(0xA0, 0);
 10304  002856  6A0F               	clrf	?_writeEEPROM+1,c
 10305  002858  0EA0               	movlw	160
 10306  00285A  6E0E               	movwf	?_writeEEPROM,c
 10307  00285C  0E00               	movlw	0
 10308  00285E  6A10               	clrf	?_writeEEPROM+2,c
 10309  002860  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10310                           
 10311                           ;main.c: 1178: writeEEPROM(0xA1, 0);
 10312  002864  6A0F               	clrf	?_writeEEPROM+1,c
 10313  002866  0EA1               	movlw	161
 10314  002868  6E0E               	movwf	?_writeEEPROM,c
 10315  00286A  0E00               	movlw	0
 10316  00286C  6A10               	clrf	?_writeEEPROM+2,c
 10317  00286E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10318                           
 10319                           ;main.c: 1179: writeEEPROM(0xA2, 0);
 10320  002872  6A0F               	clrf	?_writeEEPROM+1,c
 10321  002874  0EA2               	movlw	162
 10322  002876  6E0E               	movwf	?_writeEEPROM,c
 10323  002878  0E00               	movlw	0
 10324  00287A  6A10               	clrf	?_writeEEPROM+2,c
 10325  00287C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10326                           
 10327                           ;main.c: 1180: writeEEPROM(0xA3, 0);
 10328  002880  6A0F               	clrf	?_writeEEPROM+1,c
 10329  002882  0EA3               	movlw	163
 10330  002884  6E0E               	movwf	?_writeEEPROM,c
 10331  002886  0E00               	movlw	0
 10332  002888  6A10               	clrf	?_writeEEPROM+2,c
 10333  00288A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10334                           
 10335                           ;main.c: 1181: writeEEPROM(0xA4, 0);
 10336  00288E  6A0F               	clrf	?_writeEEPROM+1,c
 10337  002890  0EA4               	movlw	164
 10338  002892  6E0E               	movwf	?_writeEEPROM,c
 10339  002894  0E00               	movlw	0
 10340  002896  6A10               	clrf	?_writeEEPROM+2,c
 10341  002898  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10342                           
 10343                           ;main.c: 1182: writeEEPROM(0xA5, 0);
 10344  00289C  6A0F               	clrf	?_writeEEPROM+1,c
 10345  00289E  0EA5               	movlw	165
 10346  0028A0  6E0E               	movwf	?_writeEEPROM,c
 10347  0028A2  0E00               	movlw	0
 10348  0028A4  6A10               	clrf	?_writeEEPROM+2,c
 10349  0028A6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10350                           
 10351                           ;main.c: 1183: writeEEPROM(0xA6, 0);
 10352  0028AA  6A0F               	clrf	?_writeEEPROM+1,c
 10353  0028AC  0EA6               	movlw	166
 10354  0028AE  6E0E               	movwf	?_writeEEPROM,c
 10355  0028B0  0E00               	movlw	0
 10356  0028B2  6A10               	clrf	?_writeEEPROM+2,c
 10357  0028B4  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10358                           
 10359                           ;main.c: 1184: writeEEPROM(0xA7, 0);
 10360  0028B8  6A0F               	clrf	?_writeEEPROM+1,c
 10361  0028BA  0EA7               	movlw	167
 10362  0028BC  6E0E               	movwf	?_writeEEPROM,c
 10363  0028BE  0E00               	movlw	0
 10364  0028C0  6A10               	clrf	?_writeEEPROM+2,c
 10365  0028C2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10366                           
 10367                           ;main.c: 1185: writeEEPROM(0xA8, 0);
 10368  0028C6  6A0F               	clrf	?_writeEEPROM+1,c
 10369  0028C8  0EA8               	movlw	168
 10370  0028CA  6E0E               	movwf	?_writeEEPROM,c
 10371  0028CC  0E00               	movlw	0
 10372  0028CE  6A10               	clrf	?_writeEEPROM+2,c
 10373  0028D0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10374                           
 10375                           ;main.c: 1186: writeEEPROM(0xA9, 0);
 10376  0028D4  6A0F               	clrf	?_writeEEPROM+1,c
 10377  0028D6  0EA9               	movlw	169
 10378  0028D8  6E0E               	movwf	?_writeEEPROM,c
 10379  0028DA  0E00               	movlw	0
 10380  0028DC  6A10               	clrf	?_writeEEPROM+2,c
 10381  0028DE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10382                           
 10383                           ;main.c: 1190: writeEEPROM(0xAA, 0);
 10384  0028E2  6A0F               	clrf	?_writeEEPROM+1,c
 10385  0028E4  0EAA               	movlw	170
 10386  0028E6  6E0E               	movwf	?_writeEEPROM,c
 10387  0028E8  0E00               	movlw	0
 10388  0028EA  6A10               	clrf	?_writeEEPROM+2,c
 10389  0028EC  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10390                           
 10391                           ;main.c: 1191: writeEEPROM(0xAB, 0);
 10392  0028F0  6A0F               	clrf	?_writeEEPROM+1,c
 10393  0028F2  0EAB               	movlw	171
 10394  0028F4  6E0E               	movwf	?_writeEEPROM,c
 10395  0028F6  0E00               	movlw	0
 10396  0028F8  6A10               	clrf	?_writeEEPROM+2,c
 10397  0028FA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10398                           
 10399                           ;main.c: 1192: writeEEPROM(0xAC, 0);
 10400  0028FE  6A0F               	clrf	?_writeEEPROM+1,c
 10401  002900  0EAC               	movlw	172
 10402  002902  6E0E               	movwf	?_writeEEPROM,c
 10403  002904  0E00               	movlw	0
 10404  002906  6A10               	clrf	?_writeEEPROM+2,c
 10405  002908  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10406                           
 10407                           ;main.c: 1193: writeEEPROM(0xAD, 0);
 10408  00290C  6A0F               	clrf	?_writeEEPROM+1,c
 10409  00290E  0EAD               	movlw	173
 10410  002910  6E0E               	movwf	?_writeEEPROM,c
 10411  002912  0E00               	movlw	0
 10412  002914  6A10               	clrf	?_writeEEPROM+2,c
 10413  002916  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10414                           
 10415                           ;main.c: 1194: writeEEPROM(0xAE, 0);
 10416  00291A  6A0F               	clrf	?_writeEEPROM+1,c
 10417  00291C  0EAE               	movlw	174
 10418  00291E  6E0E               	movwf	?_writeEEPROM,c
 10419  002920  0E00               	movlw	0
 10420  002922  6A10               	clrf	?_writeEEPROM+2,c
 10421  002924  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10422                           
 10423                           ;main.c: 1195: writeEEPROM(0xAF, 0);
 10424  002928  6A0F               	clrf	?_writeEEPROM+1,c
 10425  00292A  0EAF               	movlw	175
 10426  00292C  6E0E               	movwf	?_writeEEPROM,c
 10427  00292E  0E00               	movlw	0
 10428  002930  6A10               	clrf	?_writeEEPROM+2,c
 10429  002932  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10430                           
 10431                           ;main.c: 1196: writeEEPROM(0xB0, 0);
 10432  002936  6A0F               	clrf	?_writeEEPROM+1,c
 10433  002938  0EB0               	movlw	176
 10434  00293A  6E0E               	movwf	?_writeEEPROM,c
 10435  00293C  0E00               	movlw	0
 10436  00293E  6A10               	clrf	?_writeEEPROM+2,c
 10437  002940  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10438                           
 10439                           ;main.c: 1197: writeEEPROM(0xB1, 0);
 10440  002944  6A0F               	clrf	?_writeEEPROM+1,c
 10441  002946  0EB1               	movlw	177
 10442  002948  6E0E               	movwf	?_writeEEPROM,c
 10443  00294A  0E00               	movlw	0
 10444  00294C  6A10               	clrf	?_writeEEPROM+2,c
 10445  00294E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10446                           
 10447                           ;main.c: 1198: writeEEPROM(0xB2, 0);
 10448  002952  6A0F               	clrf	?_writeEEPROM+1,c
 10449  002954  0EB2               	movlw	178
 10450  002956  6E0E               	movwf	?_writeEEPROM,c
 10451  002958  0E00               	movlw	0
 10452  00295A  6A10               	clrf	?_writeEEPROM+2,c
 10453  00295C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10454                           
 10455                           ;main.c: 1199: writeEEPROM(0xB3, 0);
 10456  002960  6A0F               	clrf	?_writeEEPROM+1,c
 10457  002962  0EB3               	movlw	179
 10458  002964  6E0E               	movwf	?_writeEEPROM,c
 10459  002966  0E00               	movlw	0
 10460  002968  6A10               	clrf	?_writeEEPROM+2,c
 10461  00296A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10462                           
 10463                           ;main.c: 1200: writeEEPROM(0xB4, 0);
 10464  00296E  6A0F               	clrf	?_writeEEPROM+1,c
 10465  002970  0EB4               	movlw	180
 10466  002972  6E0E               	movwf	?_writeEEPROM,c
 10467  002974  0E00               	movlw	0
 10468  002976  6A10               	clrf	?_writeEEPROM+2,c
 10469  002978  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10470                           
 10471                           ;main.c: 1201: writeEEPROM(0xB5, 0);
 10472  00297C  6A0F               	clrf	?_writeEEPROM+1,c
 10473  00297E  0EB5               	movlw	181
 10474  002980  6E0E               	movwf	?_writeEEPROM,c
 10475  002982  0E00               	movlw	0
 10476  002984  6A10               	clrf	?_writeEEPROM+2,c
 10477  002986  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10478                           
 10479                           ;main.c: 1205: for (uint8_t i = 0; i < 6; i++) {
 10480  00298A  6A11               	clrf	init_app_eeprom@i,c
 10481  00298C                     l9570:
 10482                           
 10483                           ;main.c: 1206: writeEEPROM(0xB6 + i * 12, 0);
 10484  00298C  5011               	movf	init_app_eeprom@i,w,c
 10485  00298E  0D0C               	mullw	12
 10486  002990  0EB6               	movlw	182
 10487  002992  24F3               	addwf	prodl,w,c
 10488  002994  6E0E               	movwf	?_writeEEPROM,c
 10489  002996  0E00               	movlw	0
 10490  002998  20F4               	addwfc	prodh,w,c
 10491  00299A  6E0F               	movwf	?_writeEEPROM+1,c
 10492  00299C  0E00               	movlw	0
 10493  00299E  6A10               	clrf	?_writeEEPROM+2,c
 10494  0029A0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10495                           
 10496                           ;main.c: 1207: writeEEPROM(0xB7 + i * 12, 0);
 10497  0029A4  5011               	movf	init_app_eeprom@i,w,c
 10498  0029A6  0D0C               	mullw	12
 10499  0029A8  0EB7               	movlw	183
 10500  0029AA  24F3               	addwf	prodl,w,c
 10501  0029AC  6E0E               	movwf	?_writeEEPROM,c
 10502  0029AE  0E00               	movlw	0
 10503  0029B0  20F4               	addwfc	prodh,w,c
 10504  0029B2  6E0F               	movwf	?_writeEEPROM+1,c
 10505  0029B4  0E00               	movlw	0
 10506  0029B6  6A10               	clrf	?_writeEEPROM+2,c
 10507  0029B8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10508                           
 10509                           ;main.c: 1208: writeEEPROM(0xB8 + i * 12, 0);
 10510  0029BC  5011               	movf	init_app_eeprom@i,w,c
 10511  0029BE  0D0C               	mullw	12
 10512  0029C0  0EB8               	movlw	184
 10513  0029C2  24F3               	addwf	prodl,w,c
 10514  0029C4  6E0E               	movwf	?_writeEEPROM,c
 10515  0029C6  0E00               	movlw	0
 10516  0029C8  20F4               	addwfc	prodh,w,c
 10517  0029CA  6E0F               	movwf	?_writeEEPROM+1,c
 10518  0029CC  0E00               	movlw	0
 10519  0029CE  6A10               	clrf	?_writeEEPROM+2,c
 10520  0029D0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10521                           
 10522                           ;main.c: 1209: writeEEPROM(0xB9 + i * 12, 0);
 10523  0029D4  5011               	movf	init_app_eeprom@i,w,c
 10524  0029D6  0D0C               	mullw	12
 10525  0029D8  0EB9               	movlw	185
 10526  0029DA  24F3               	addwf	prodl,w,c
 10527  0029DC  6E0E               	movwf	?_writeEEPROM,c
 10528  0029DE  0E00               	movlw	0
 10529  0029E0  20F4               	addwfc	prodh,w,c
 10530  0029E2  6E0F               	movwf	?_writeEEPROM+1,c
 10531  0029E4  0E00               	movlw	0
 10532  0029E6  6A10               	clrf	?_writeEEPROM+2,c
 10533  0029E8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10534                           
 10535                           ;main.c: 1210: writeEEPROM(0xBA + i * 12, 0);
 10536  0029EC  5011               	movf	init_app_eeprom@i,w,c
 10537  0029EE  0D0C               	mullw	12
 10538  0029F0  0EBA               	movlw	186
 10539  0029F2  24F3               	addwf	prodl,w,c
 10540  0029F4  6E0E               	movwf	?_writeEEPROM,c
 10541  0029F6  0E00               	movlw	0
 10542  0029F8  20F4               	addwfc	prodh,w,c
 10543  0029FA  6E0F               	movwf	?_writeEEPROM+1,c
 10544  0029FC  0E00               	movlw	0
 10545  0029FE  6A10               	clrf	?_writeEEPROM+2,c
 10546  002A00  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10547                           
 10548                           ;main.c: 1211: writeEEPROM(0xBB + i * 12, 0);
 10549  002A04  5011               	movf	init_app_eeprom@i,w,c
 10550  002A06  0D0C               	mullw	12
 10551  002A08  0EBB               	movlw	187
 10552  002A0A  24F3               	addwf	prodl,w,c
 10553  002A0C  6E0E               	movwf	?_writeEEPROM,c
 10554  002A0E  0E00               	movlw	0
 10555  002A10  20F4               	addwfc	prodh,w,c
 10556  002A12  6E0F               	movwf	?_writeEEPROM+1,c
 10557  002A14  0E00               	movlw	0
 10558  002A16  6A10               	clrf	?_writeEEPROM+2,c
 10559  002A18  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10560                           
 10561                           ;main.c: 1212: writeEEPROM(0xBC + i * 12, 0);
 10562  002A1C  5011               	movf	init_app_eeprom@i,w,c
 10563  002A1E  0D0C               	mullw	12
 10564  002A20  0EBC               	movlw	188
 10565  002A22  24F3               	addwf	prodl,w,c
 10566  002A24  6E0E               	movwf	?_writeEEPROM,c
 10567  002A26  0E00               	movlw	0
 10568  002A28  20F4               	addwfc	prodh,w,c
 10569  002A2A  6E0F               	movwf	?_writeEEPROM+1,c
 10570  002A2C  0E00               	movlw	0
 10571  002A2E  6A10               	clrf	?_writeEEPROM+2,c
 10572  002A30  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10573                           
 10574                           ;main.c: 1213: writeEEPROM(0xBD + i * 12, 0);
 10575  002A34  5011               	movf	init_app_eeprom@i,w,c
 10576  002A36  0D0C               	mullw	12
 10577  002A38  0EBD               	movlw	189
 10578  002A3A  24F3               	addwf	prodl,w,c
 10579  002A3C  6E0E               	movwf	?_writeEEPROM,c
 10580  002A3E  0E00               	movlw	0
 10581  002A40  20F4               	addwfc	prodh,w,c
 10582  002A42  6E0F               	movwf	?_writeEEPROM+1,c
 10583  002A44  0E00               	movlw	0
 10584  002A46  6A10               	clrf	?_writeEEPROM+2,c
 10585  002A48  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10586                           
 10587                           ;main.c: 1214: writeEEPROM(0xBE + i * 12, 0);
 10588  002A4C  5011               	movf	init_app_eeprom@i,w,c
 10589  002A4E  0D0C               	mullw	12
 10590  002A50  0EBE               	movlw	190
 10591  002A52  24F3               	addwf	prodl,w,c
 10592  002A54  6E0E               	movwf	?_writeEEPROM,c
 10593  002A56  0E00               	movlw	0
 10594  002A58  20F4               	addwfc	prodh,w,c
 10595  002A5A  6E0F               	movwf	?_writeEEPROM+1,c
 10596  002A5C  0E00               	movlw	0
 10597  002A5E  6A10               	clrf	?_writeEEPROM+2,c
 10598  002A60  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10599                           
 10600                           ;main.c: 1215: writeEEPROM(0xBF + i * 12, 0);
 10601  002A64  5011               	movf	init_app_eeprom@i,w,c
 10602  002A66  0D0C               	mullw	12
 10603  002A68  0EBF               	movlw	191
 10604  002A6A  24F3               	addwf	prodl,w,c
 10605  002A6C  6E0E               	movwf	?_writeEEPROM,c
 10606  002A6E  0E00               	movlw	0
 10607  002A70  20F4               	addwfc	prodh,w,c
 10608  002A72  6E0F               	movwf	?_writeEEPROM+1,c
 10609  002A74  0E00               	movlw	0
 10610  002A76  6A10               	clrf	?_writeEEPROM+2,c
 10611  002A78  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10612                           
 10613                           ;main.c: 1216: writeEEPROM(0xC0 + i * 12, 0);
 10614  002A7C  5011               	movf	init_app_eeprom@i,w,c
 10615  002A7E  0D0C               	mullw	12
 10616  002A80  0EC0               	movlw	192
 10617  002A82  24F3               	addwf	prodl,w,c
 10618  002A84  6E0E               	movwf	?_writeEEPROM,c
 10619  002A86  0E00               	movlw	0
 10620  002A88  20F4               	addwfc	prodh,w,c
 10621  002A8A  6E0F               	movwf	?_writeEEPROM+1,c
 10622  002A8C  0E00               	movlw	0
 10623  002A8E  6A10               	clrf	?_writeEEPROM+2,c
 10624  002A90  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10625                           
 10626                           ;main.c: 1217: writeEEPROM(0xC1 + i * 12, 0);
 10627  002A94  5011               	movf	init_app_eeprom@i,w,c
 10628  002A96  0D0C               	mullw	12
 10629  002A98  0EC1               	movlw	193
 10630  002A9A  24F3               	addwf	prodl,w,c
 10631  002A9C  6E0E               	movwf	?_writeEEPROM,c
 10632  002A9E  0E00               	movlw	0
 10633  002AA0  20F4               	addwfc	prodh,w,c
 10634  002AA2  6E0F               	movwf	?_writeEEPROM+1,c
 10635  002AA4  0E00               	movlw	0
 10636  002AA6  6A10               	clrf	?_writeEEPROM+2,c
 10637  002AA8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 10638  002AAC  2A11               	incf	init_app_eeprom@i,f,c
 10639  002AAE  0E05               	movlw	5
 10640  002AB0  6411               	cpfsgt	init_app_eeprom@i,c
 10641  002AB2  D76C               	goto	l9570
 10642  002AB4  0C05               	retlw	5
 10643  002AB6                     __end_of_init_app_eeprom:
 10644                           	opt stack 0
 10645                           tblptru	equ	0xFF8
 10646                           tblptrh	equ	0xFF7
 10647                           tblptrl	equ	0xFF6
 10648                           tablat	equ	0xFF5
 10649                           prodh	equ	0xFF4
 10650                           prodl	equ	0xFF3
 10651                           postinc0	equ	0xFEE
 10652                           wreg	equ	0xFE8
 10653                           postdec1	equ	0xFE5
 10654                           fsr1h	equ	0xFE2
 10655                           fsr1l	equ	0xFE1
 10656                           indf2	equ	0xFDF
 10657                           postinc2	equ	0xFDE
 10658                           postdec2	equ	0xFDD
 10659                           fsr2h	equ	0xFDA
 10660                           fsr2l	equ	0xFD9
 10661                           status	equ	0xFD8
 10662                           
 10663 ;; *************** function _vscp_getFamilyType *****************
 10664 ;; Defined at:
 10665 ;;		line 2825 in file "../main.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;		None
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;		None
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  4   13[COMRAM] unsigned long 
 10672 ;; Registers used:
 10673 ;;		None
 10674 ;; Tracked objects:
 10675 ;;		On entry : F/0
 10676 ;;		On exit  : F/0
 10677 ;;		Unchanged: F/0
 10678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10679 ;;      Params:         4       0       0       0       0       0       0
 10680 ;;      Locals:         0       0       0       0       0       0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0
 10682 ;;      Totals:         4       0       0       0       0       0       0
 10683 ;;Total ram usage:        4 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    2
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_vscp_writeStdReg
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           	psect	text39
 10694  005D76                     __ptext39:
 10695                           	opt stack 0
 10696  005D76                     _vscp_getFamilyType:
 10697                           	opt stack 26
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;main.c: 2826: return 0;
 10701                           
 10702                           ;incstack = 0
 10703                           ;incstack = 0
 10704  005D76  6A0E               	clrf	?_vscp_getFamilyType,c
 10705  005D78  6A0F               	clrf	?_vscp_getFamilyType+1,c
 10706  005D7A  6A10               	clrf	?_vscp_getFamilyType+2,c
 10707  005D7C  6A11               	clrf	?_vscp_getFamilyType+3,c
 10708                           
 10709                           ; BSR set to: 0
 10710  005D7E  0012               	return	
 10711  005D80                     __end_of_vscp_getFamilyType:
 10712                           	opt stack 0
 10713                           tblptru	equ	0xFF8
 10714                           tblptrh	equ	0xFF7
 10715                           tblptrl	equ	0xFF6
 10716                           tablat	equ	0xFF5
 10717                           prodh	equ	0xFF4
 10718                           prodl	equ	0xFF3
 10719                           postinc0	equ	0xFEE
 10720                           wreg	equ	0xFE8
 10721                           postdec1	equ	0xFE5
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           postdec2	equ	0xFDD
 10727                           fsr2h	equ	0xFDA
 10728                           fsr2l	equ	0xFD9
 10729                           status	equ	0xFD8
 10730                           
 10731 ;; *************** function _vscp_getFamilyCode *****************
 10732 ;; Defined at:
 10733 ;;		line 2815 in file "../main.c"
 10734 ;; Parameters:    Size  Location     Type
 10735 ;;		None
 10736 ;; Auto vars:     Size  Location     Type
 10737 ;;		None
 10738 ;; Return value:  Size  Location     Type
 10739 ;;                  4   13[COMRAM] unsigned long 
 10740 ;; Registers used:
 10741 ;;		None
 10742 ;; Tracked objects:
 10743 ;;		On entry : F/0
 10744 ;;		On exit  : F/0
 10745 ;;		Unchanged: F/0
 10746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10747 ;;      Params:         4       0       0       0       0       0       0
 10748 ;;      Locals:         0       0       0       0       0       0       0
 10749 ;;      Temps:          0       0       0       0       0       0       0
 10750 ;;      Totals:         4       0       0       0       0       0       0
 10751 ;;Total ram usage:        4 bytes
 10752 ;; Hardware stack levels used:    1
 10753 ;; Hardware stack levels required when called:    2
 10754 ;; This function calls:
 10755 ;;		Nothing
 10756 ;; This function is called by:
 10757 ;;		_vscp_writeStdReg
 10758 ;; This function uses a non-reentrant model
 10759 ;;
 10760                           
 10761                           	psect	text40
 10762  005D80                     __ptext40:
 10763                           	opt stack 0
 10764  005D80                     _vscp_getFamilyCode:
 10765                           	opt stack 26
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;main.c: 2816: return 0L;
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;incstack = 0
 10772                           ;incstack = 0
 10773  005D80  6A0E               	clrf	?_vscp_getFamilyCode,c
 10774  005D82  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 10775  005D84  6A10               	clrf	?_vscp_getFamilyCode+2,c
 10776  005D86  6A11               	clrf	?_vscp_getFamilyCode+3,c
 10777                           
 10778                           ; BSR set to: 0
 10779  005D88  0012               	return	
 10780  005D8A                     __end_of_vscp_getFamilyCode:
 10781                           	opt stack 0
 10782                           tblptru	equ	0xFF8
 10783                           tblptrh	equ	0xFF7
 10784                           tblptrl	equ	0xFF6
 10785                           tablat	equ	0xFF5
 10786                           prodh	equ	0xFF4
 10787                           prodl	equ	0xFF3
 10788                           postinc0	equ	0xFEE
 10789                           wreg	equ	0xFE8
 10790                           postdec1	equ	0xFE5
 10791                           fsr1h	equ	0xFE2
 10792                           fsr1l	equ	0xFE1
 10793                           indf2	equ	0xFDF
 10794                           postinc2	equ	0xFDE
 10795                           postdec2	equ	0xFDD
 10796                           fsr2h	equ	0xFDA
 10797                           fsr2l	equ	0xFD9
 10798                           status	equ	0xFD8
 10799                           
 10800 ;; *************** function _vscp_setManufacturerId *****************
 10801 ;; Defined at:
 10802 ;;		line 2651 in file "../main.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  idx             1    wreg     unsigned char 
 10805 ;;  data            1   16[COMRAM] unsigned char 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;  idx             1   17[COMRAM] unsigned char 
 10808 ;; Return value:  Size  Location     Type
 10809 ;;		None               void
 10810 ;; Registers used:
 10811 ;;		wreg, status,2, status,0, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : F/0
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10817 ;;      Params:         1       0       0       0       0       0       0
 10818 ;;      Locals:         1       0       0       0       0       0       0
 10819 ;;      Temps:          0       0       0       0       0       0       0
 10820 ;;      Totals:         2       0       0       0       0       0       0
 10821 ;;Total ram usage:        2 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    3
 10824 ;; This function calls:
 10825 ;;		_writeEEPROM
 10826 ;; This function is called by:
 10827 ;;		_vscp_writeStdReg
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text41
 10832  005C42                     __ptext41:
 10833                           	opt stack 0
 10834  005C42                     _vscp_setManufacturerId:
 10835                           	opt stack 25
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;incstack = 0
 10839                           ;incstack = 0
 10840                           ;vscp_setManufacturerId@idx stored from wreg
 10841  005C42  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;main.c: 2652: writeEEPROM(0x09 + idx, data);
 10845  005C46  0E09               	movlw	9
 10846  005C48  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10847  005C4A  6E0E               	movwf	?_writeEEPROM,c
 10848  005C4C  6A0F               	clrf	?_writeEEPROM+1,c
 10849  005C4E  0E00               	movlw	0
 10850  005C50  220F               	addwfc	?_writeEEPROM+1,f,c
 10851  005C52  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10852  005C56  EF7E  F02D         	goto	_writeEEPROM	;wreg free
 10853  005C5A                     __end_of_vscp_setManufacturerId:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           postinc0	equ	0xFEE
 10862                           wreg	equ	0xFE8
 10863                           postdec1	equ	0xFE5
 10864                           fsr1h	equ	0xFE2
 10865                           fsr1l	equ	0xFE1
 10866                           indf2	equ	0xFDF
 10867                           postinc2	equ	0xFDE
 10868                           postdec2	equ	0xFDD
 10869                           fsr2h	equ	0xFDA
 10870                           fsr2l	equ	0xFD9
 10871                           status	equ	0xFD8
 10872                           
 10873 ;; *************** function _vscp_setUserID *****************
 10874 ;; Defined at:
 10875 ;;		line 2629 in file "../main.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;  idx             1    wreg     unsigned char 
 10878 ;;  data            1   16[COMRAM] unsigned char 
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;  idx             1   17[COMRAM] unsigned char 
 10881 ;; Return value:  Size  Location     Type
 10882 ;;		None               void
 10883 ;; Registers used:
 10884 ;;		wreg, status,2, status,0, cstack
 10885 ;; Tracked objects:
 10886 ;;		On entry : F/0
 10887 ;;		On exit  : 0/0
 10888 ;;		Unchanged: 0/0
 10889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10890 ;;      Params:         1       0       0       0       0       0       0
 10891 ;;      Locals:         1       0       0       0       0       0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0
 10893 ;;      Totals:         2       0       0       0       0       0       0
 10894 ;;Total ram usage:        2 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; Hardware stack levels required when called:    3
 10897 ;; This function calls:
 10898 ;;		_writeEEPROM
 10899 ;; This function is called by:
 10900 ;;		_vscp_writeStdReg
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           	psect	text42
 10905  005C5A                     __ptext42:
 10906                           	opt stack 0
 10907  005C5A                     _vscp_setUserID:
 10908                           	opt stack 25
 10909                           
 10910                           ;incstack = 0
 10911                           ;incstack = 0
 10912                           ;vscp_setUserID@idx stored from wreg
 10913  005C5A  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;main.c: 2630: writeEEPROM(idx + 0x04, data);
 10917  005C5E  0E04               	movlw	4
 10918  005C60  2412               	addwf	vscp_setUserID@idx,w,c
 10919  005C62  6E0E               	movwf	?_writeEEPROM,c
 10920  005C64  6A0F               	clrf	?_writeEEPROM+1,c
 10921  005C66  0E00               	movlw	0
 10922  005C68  220F               	addwfc	?_writeEEPROM+1,f,c
 10923  005C6A  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10924  005C6E  EF7E  F02D         	goto	_writeEEPROM	;wreg free
 10925  005C72                     __end_of_vscp_setUserID:
 10926                           	opt stack 0
 10927                           tblptru	equ	0xFF8
 10928                           tblptrh	equ	0xFF7
 10929                           tblptrl	equ	0xFF6
 10930                           tablat	equ	0xFF5
 10931                           prodh	equ	0xFF4
 10932                           prodl	equ	0xFF3
 10933                           postinc0	equ	0xFEE
 10934                           wreg	equ	0xFE8
 10935                           postdec1	equ	0xFE5
 10936                           fsr1h	equ	0xFE2
 10937                           fsr1l	equ	0xFE1
 10938                           indf2	equ	0xFDF
 10939                           postinc2	equ	0xFDE
 10940                           postdec2	equ	0xFDD
 10941                           fsr2h	equ	0xFDA
 10942                           fsr2l	equ	0xFD9
 10943                           status	equ	0xFD8
 10944                           
 10945 ;; *************** function _vscp_setGUID *****************
 10946 ;; Defined at:
 10947 ;;		line 2598 in file "../main.c"
 10948 ;; Parameters:    Size  Location     Type
 10949 ;;  idx             1    wreg     unsigned char 
 10950 ;;  data            1   16[COMRAM] unsigned char 
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;  idx             1   17[COMRAM] unsigned char 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;		None               void
 10955 ;; Registers used:
 10956 ;;		wreg, status,2, status,0, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : F/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10962 ;;      Params:         1       0       0       0       0       0       0
 10963 ;;      Locals:         1       0       0       0       0       0       0
 10964 ;;      Temps:          0       0       0       0       0       0       0
 10965 ;;      Totals:         2       0       0       0       0       0       0
 10966 ;;Total ram usage:        2 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    3
 10969 ;; This function calls:
 10970 ;;		_writeEEPROM
 10971 ;; This function is called by:
 10972 ;;		_vscp_writeStdReg
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           	psect	text43
 10977  005BB0                     __ptext43:
 10978                           	opt stack 0
 10979  005BB0                     _vscp_setGUID:
 10980                           	opt stack 25
 10981                           
 10982                           ;incstack = 0
 10983                           ;incstack = 0
 10984                           ;vscp_setGUID@idx stored from wreg
 10985  005BB0  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;main.c: 2599: if ( idx>15 ) return;
 10989  005BB4  0E0F               	movlw	15
 10990  005BB6  6412               	cpfsgt	vscp_setGUID@idx,c
 10991  005BB8  D001               	goto	l11010
 10992  005BBA  D00A               	goto	l552
 10993  005BBC                     l11010:
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;main.c: 2600: writeEEPROM( 0x11 + idx, data );
 10997  005BBC  0E11               	movlw	17
 10998  005BBE  2412               	addwf	vscp_setGUID@idx,w,c
 10999  005BC0  6E0E               	movwf	?_writeEEPROM,c
 11000  005BC2  6A0F               	clrf	?_writeEEPROM+1,c
 11001  005BC4  0E00               	movlw	0
 11002  005BC6  220F               	addwfc	?_writeEEPROM+1,f,c
 11003  005BC8  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 11004  005BCC  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11005  005BD0                     l552:
 11006  005BD0  0012               	return	
 11007  005BD2                     __end_of_vscp_setGUID:
 11008                           	opt stack 0
 11009                           tblptru	equ	0xFF8
 11010                           tblptrh	equ	0xFF7
 11011                           tblptrl	equ	0xFF6
 11012                           tablat	equ	0xFF5
 11013                           prodh	equ	0xFF4
 11014                           prodl	equ	0xFF3
 11015                           postinc0	equ	0xFEE
 11016                           wreg	equ	0xFE8
 11017                           postdec1	equ	0xFE5
 11018                           fsr1h	equ	0xFE2
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           postdec2	equ	0xFDD
 11023                           fsr2h	equ	0xFDA
 11024                           fsr2l	equ	0xFD9
 11025                           status	equ	0xFD8
 11026                           
 11027 ;; *************** function _vscp_writeAppReg *****************
 11028 ;; Defined at:
 11029 ;;		line 1891 in file "../main.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;  reg             1    wreg     unsigned char 
 11032 ;;  val             1   32[COMRAM] unsigned char 
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  reg             1   34[COMRAM] unsigned char 
 11035 ;;  pos             1   33[COMRAM] unsigned char 
 11036 ;;  rv              1   35[COMRAM] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      unsigned char 
 11039 ;; Registers used:
 11040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11041 ;; Tracked objects:
 11042 ;;		On entry : F/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11046 ;;      Params:         1       0       0       0       0       0       0
 11047 ;;      Locals:         3       0       0       0       0       0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0
 11049 ;;      Totals:         4       0       0       0       0       0       0
 11050 ;;Total ram usage:        4 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    4
 11053 ;; This function calls:
 11054 ;;		_writeEEPROM
 11055 ;;		_readEEPROM
 11056 ;;		_writeCoeffs2Ram
 11057 ;; This function is called by:
 11058 ;;		_vscp_writeRegister
 11059 ;;		_vscp_handleProtocolEvent
 11060 ;; This function uses a non-reentrant model
 11061 ;;
 11062                           
 11063                           	psect	text44
 11064  000B6E                     __ptext44:
 11065                           	opt stack 0
 11066  000B6E                     _vscp_writeAppReg:
 11067                           	opt stack 24
 11068                           
 11069                           ;incstack = 0
 11070                           ;incstack = 0
 11071                           ;vscp_writeAppReg@reg stored from wreg
 11072  000B6E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;main.c: 1892: uint8_t rv;
 11076                           ;main.c: 1899: rv = ~val;
 11077  000B72  1C21               	comf	vscp_writeAppReg@val,w,c
 11078  000B74  6E24               	movwf	vscp_writeAppReg@rv,c
 11079                           
 11080                           ;main.c: 1901: if (0 == vscp_page_select) {
 11081  000B76  5047               	movf	_vscp_page_select+1,w,c
 11082  000B78  1046               	iorwf	_vscp_page_select,w,c
 11083  000B7A  E102 EFB7  F00A    	bz	l10972
 11084  000B80  EFF1  F00B         	goto	l10974
 11085  000B84                     l10782:
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;main.c: 1907: writeEEPROM(0x41, val);
 11089  000B84  6A0F               	clrf	?_writeEEPROM+1,c
 11090  000B86  0E41               	movlw	65
 11091  000B88  6E0E               	movwf	?_writeEEPROM,c
 11092  000B8A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11093  000B8E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11094                           
 11095                           ;main.c: 1908: rv = readEEPROM(0x41);
 11096  000B92  6A0F               	clrf	?_readEEPROM+1,c
 11097  000B94  0E41               	movlw	65
 11098  000B96  6E0E               	movwf	?_readEEPROM,c
 11099  000B98  EC8D  F02E         	call	_readEEPROM	;wreg free
 11100  000B9C  EF35  F00C         	goto	L19
 11101  000BA0                     l10784:
 11102                           
 11103                           ; BSR set to: 0
 11104                           ;main.c: 1913: writeEEPROM(0x42, val);
 11105  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
 11106  000BA2  0E42               	movlw	66
 11107  000BA4  6E0E               	movwf	?_writeEEPROM,c
 11108  000BA6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11109  000BAA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11110                           
 11111                           ;main.c: 1914: rv = readEEPROM(0x42);
 11112  000BAE  6A0F               	clrf	?_readEEPROM+1,c
 11113  000BB0  0E42               	movlw	66
 11114  000BB2  6E0E               	movwf	?_readEEPROM,c
 11115  000BB4  EC8D  F02E         	call	_readEEPROM	;wreg free
 11116  000BB8  EF35  F00C         	goto	L19
 11117  000BBC                     l10786:
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;main.c: 1923: writeEEPROM(0x43, val);
 11121  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11122  000BBE  0E43               	movlw	67
 11123  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11124  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11125  000BC6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11126                           
 11127                           ;main.c: 1924: rv = readEEPROM(0x43);
 11128  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 11129  000BCC  0E43               	movlw	67
 11130  000BCE  6E0E               	movwf	?_readEEPROM,c
 11131  000BD0  EC8D  F02E         	call	_readEEPROM	;wreg free
 11132  000BD4  EF35  F00C         	goto	L19
 11133  000BD8                     l10788:
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;main.c: 1929: writeEEPROM(0x44, val);
 11137  000BD8  6A0F               	clrf	?_writeEEPROM+1,c
 11138  000BDA  0E44               	movlw	68
 11139  000BDC  6E0E               	movwf	?_writeEEPROM,c
 11140  000BDE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11141  000BE2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11142                           
 11143                           ;main.c: 1930: rv = readEEPROM(0x44);
 11144  000BE6  6A0F               	clrf	?_readEEPROM+1,c
 11145  000BE8  0E44               	movlw	68
 11146  000BEA  6E0E               	movwf	?_readEEPROM,c
 11147  000BEC  EC8D  F02E         	call	_readEEPROM	;wreg free
 11148  000BF0  EF35  F00C         	goto	L19
 11149  000BF4                     l10790:
 11150                           
 11151                           ; BSR set to: 0
 11152                           ;main.c: 1935: writeEEPROM(0x45, val);
 11153  000BF4  6A0F               	clrf	?_writeEEPROM+1,c
 11154  000BF6  0E45               	movlw	69
 11155  000BF8  6E0E               	movwf	?_writeEEPROM,c
 11156  000BFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11157  000BFE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11158                           
 11159                           ;main.c: 1936: rv = readEEPROM(0x45);
 11160  000C02  6A0F               	clrf	?_readEEPROM+1,c
 11161  000C04  0E45               	movlw	69
 11162  000C06  6E0E               	movwf	?_readEEPROM,c
 11163  000C08  EC8D  F02E         	call	_readEEPROM	;wreg free
 11164  000C0C  EF35  F00C         	goto	L19
 11165  000C10                     l10792:
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;main.c: 1941: writeEEPROM(0x46, val);
 11169  000C10  6A0F               	clrf	?_writeEEPROM+1,c
 11170  000C12  0E46               	movlw	70
 11171  000C14  6E0E               	movwf	?_writeEEPROM,c
 11172  000C16  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11173  000C1A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11174                           
 11175                           ;main.c: 1942: rv = readEEPROM(0x46);
 11176  000C1E  6A0F               	clrf	?_readEEPROM+1,c
 11177  000C20  0E46               	movlw	70
 11178  000C22  6E0E               	movwf	?_readEEPROM,c
 11179  000C24  EC8D  F02E         	call	_readEEPROM	;wreg free
 11180  000C28  EF35  F00C         	goto	L19
 11181  000C2C                     l10794:
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;main.c: 1947: writeEEPROM(0x47, val);
 11185  000C2C  6A0F               	clrf	?_writeEEPROM+1,c
 11186  000C2E  0E47               	movlw	71
 11187  000C30  6E0E               	movwf	?_writeEEPROM,c
 11188  000C32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11189  000C36  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11190                           
 11191                           ;main.c: 1948: rv = readEEPROM(0x47);
 11192  000C3A  6A0F               	clrf	?_readEEPROM+1,c
 11193  000C3C  0E47               	movlw	71
 11194  000C3E  6E0E               	movwf	?_readEEPROM,c
 11195  000C40  EC8D  F02E         	call	_readEEPROM	;wreg free
 11196  000C44  EF35  F00C         	goto	L19
 11197  000C48                     l10796:
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;main.c: 1953: writeEEPROM(0x48, val);
 11201  000C48  6A0F               	clrf	?_writeEEPROM+1,c
 11202  000C4A  0E48               	movlw	72
 11203  000C4C  6E0E               	movwf	?_writeEEPROM,c
 11204  000C4E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11205  000C52  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11206                           
 11207                           ;main.c: 1954: rv = readEEPROM(0x48);
 11208  000C56  6A0F               	clrf	?_readEEPROM+1,c
 11209  000C58  0E48               	movlw	72
 11210  000C5A  6E0E               	movwf	?_readEEPROM,c
 11211  000C5C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11212  000C60  EF35  F00C         	goto	L19
 11213  000C64                     l10798:
 11214                           
 11215                           ; BSR set to: 0
 11216                           ;main.c: 1963: writeEEPROM(0x49, val);
 11217  000C64  6A0F               	clrf	?_writeEEPROM+1,c
 11218  000C66  0E49               	movlw	73
 11219  000C68  6E0E               	movwf	?_writeEEPROM,c
 11220  000C6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11221  000C6E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11222                           
 11223                           ;main.c: 1964: rv = readEEPROM(0x49);
 11224  000C72  6A0F               	clrf	?_readEEPROM+1,c
 11225  000C74  0E49               	movlw	73
 11226  000C76  6E0E               	movwf	?_readEEPROM,c
 11227  000C78  EC8D  F02E         	call	_readEEPROM	;wreg free
 11228  000C7C  EF35  F00C         	goto	L19
 11229  000C80                     l10800:
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;main.c: 1969: writeEEPROM(0x4A, val);
 11233  000C80  6A0F               	clrf	?_writeEEPROM+1,c
 11234  000C82  0E4A               	movlw	74
 11235  000C84  6E0E               	movwf	?_writeEEPROM,c
 11236  000C86  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11237  000C8A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11238                           
 11239                           ;main.c: 1970: rv = readEEPROM(0x4A);
 11240  000C8E  6A0F               	clrf	?_readEEPROM+1,c
 11241  000C90  0E4A               	movlw	74
 11242  000C92  6E0E               	movwf	?_readEEPROM,c
 11243  000C94  EC8D  F02E         	call	_readEEPROM	;wreg free
 11244  000C98  EF35  F00C         	goto	L19
 11245  000C9C                     l10802:
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;main.c: 1975: writeEEPROM(0x4B, val);
 11249  000C9C  6A0F               	clrf	?_writeEEPROM+1,c
 11250  000C9E  0E4B               	movlw	75
 11251  000CA0  6E0E               	movwf	?_writeEEPROM,c
 11252  000CA2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11253  000CA6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11254                           
 11255                           ;main.c: 1976: rv = readEEPROM(0x4B);
 11256  000CAA  6A0F               	clrf	?_readEEPROM+1,c
 11257  000CAC  0E4B               	movlw	75
 11258  000CAE  6E0E               	movwf	?_readEEPROM,c
 11259  000CB0  EC8D  F02E         	call	_readEEPROM	;wreg free
 11260  000CB4  EF35  F00C         	goto	L19
 11261  000CB8                     l10804:
 11262                           
 11263                           ; BSR set to: 0
 11264                           ;main.c: 1981: writeEEPROM(0x4C, val);
 11265  000CB8  6A0F               	clrf	?_writeEEPROM+1,c
 11266  000CBA  0E4C               	movlw	76
 11267  000CBC  6E0E               	movwf	?_writeEEPROM,c
 11268  000CBE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11269  000CC2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11270                           
 11271                           ;main.c: 1982: rv = readEEPROM(0x4C);
 11272  000CC6  6A0F               	clrf	?_readEEPROM+1,c
 11273  000CC8  0E4C               	movlw	76
 11274  000CCA  6E0E               	movwf	?_readEEPROM,c
 11275  000CCC  EC8D  F02E         	call	_readEEPROM	;wreg free
 11276  000CD0  EF35  F00C         	goto	L19
 11277  000CD4                     l10806:
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;main.c: 1987: writeEEPROM(0x4D, val);
 11281  000CD4  6A0F               	clrf	?_writeEEPROM+1,c
 11282  000CD6  0E4D               	movlw	77
 11283  000CD8  6E0E               	movwf	?_writeEEPROM,c
 11284  000CDA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11285  000CDE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11286                           
 11287                           ;main.c: 1988: rv = readEEPROM(0x4D);
 11288  000CE2  6A0F               	clrf	?_readEEPROM+1,c
 11289  000CE4  0E4D               	movlw	77
 11290  000CE6  6E0E               	movwf	?_readEEPROM,c
 11291  000CE8  EC8D  F02E         	call	_readEEPROM	;wreg free
 11292  000CEC  EF35  F00C         	goto	L19
 11293  000CF0                     l10808:
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;main.c: 1993: writeEEPROM(0x4E, val);
 11297  000CF0  6A0F               	clrf	?_writeEEPROM+1,c
 11298  000CF2  0E4E               	movlw	78
 11299  000CF4  6E0E               	movwf	?_writeEEPROM,c
 11300  000CF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11301  000CFA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11302                           
 11303                           ;main.c: 1994: rv = readEEPROM(0x4E);
 11304  000CFE  6A0F               	clrf	?_readEEPROM+1,c
 11305  000D00  0E4E               	movlw	78
 11306  000D02  6E0E               	movwf	?_readEEPROM,c
 11307  000D04  EC8D  F02E         	call	_readEEPROM	;wreg free
 11308  000D08  EF35  F00C         	goto	L19
 11309  000D0C                     l10810:
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;main.c: 2003: writeEEPROM(0x4F, val);
 11313  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
 11314  000D0E  0E4F               	movlw	79
 11315  000D10  6E0E               	movwf	?_writeEEPROM,c
 11316  000D12  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11317  000D16  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11318                           
 11319                           ;main.c: 2004: rv = readEEPROM(0x4F);
 11320  000D1A  6A0F               	clrf	?_readEEPROM+1,c
 11321  000D1C  0E4F               	movlw	79
 11322  000D1E  6E0E               	movwf	?_readEEPROM,c
 11323  000D20  EC8D  F02E         	call	_readEEPROM	;wreg free
 11324  000D24  EF35  F00C         	goto	L19
 11325  000D28                     l10812:
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;main.c: 2009: writeEEPROM(0x50, val);
 11329  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11330  000D2A  0E50               	movlw	80
 11331  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11332  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11333  000D32  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11334                           
 11335                           ;main.c: 2010: rv = readEEPROM(0x50);
 11336  000D36  6A0F               	clrf	?_readEEPROM+1,c
 11337  000D38  0E50               	movlw	80
 11338  000D3A  6E0E               	movwf	?_readEEPROM,c
 11339  000D3C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11340  000D40  EF35  F00C         	goto	L19
 11341  000D44                     l10814:
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;main.c: 2015: writeEEPROM(0x51, val);
 11345  000D44  6A0F               	clrf	?_writeEEPROM+1,c
 11346  000D46  0E51               	movlw	81
 11347  000D48  6E0E               	movwf	?_writeEEPROM,c
 11348  000D4A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11349  000D4E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11350                           
 11351                           ;main.c: 2016: rv = readEEPROM(0x51);
 11352  000D52  6A0F               	clrf	?_readEEPROM+1,c
 11353  000D54  0E51               	movlw	81
 11354  000D56  6E0E               	movwf	?_readEEPROM,c
 11355  000D58  EC8D  F02E         	call	_readEEPROM	;wreg free
 11356  000D5C  EF35  F00C         	goto	L19
 11357  000D60                     l10816:
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;main.c: 2021: writeEEPROM(0x52, val);
 11361  000D60  6A0F               	clrf	?_writeEEPROM+1,c
 11362  000D62  0E52               	movlw	82
 11363  000D64  6E0E               	movwf	?_writeEEPROM,c
 11364  000D66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11365  000D6A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11366                           
 11367                           ;main.c: 2022: rv = readEEPROM(0x52);
 11368  000D6E  6A0F               	clrf	?_readEEPROM+1,c
 11369  000D70  0E52               	movlw	82
 11370  000D72  6E0E               	movwf	?_readEEPROM,c
 11371  000D74  EC8D  F02E         	call	_readEEPROM	;wreg free
 11372  000D78  EF35  F00C         	goto	L19
 11373  000D7C                     l10818:
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;main.c: 2027: writeEEPROM(0x53, val);
 11377  000D7C  6A0F               	clrf	?_writeEEPROM+1,c
 11378  000D7E  0E53               	movlw	83
 11379  000D80  6E0E               	movwf	?_writeEEPROM,c
 11380  000D82  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11381  000D86  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11382                           
 11383                           ;main.c: 2028: rv = readEEPROM(0x53);
 11384  000D8A  6A0F               	clrf	?_readEEPROM+1,c
 11385  000D8C  0E53               	movlw	83
 11386  000D8E  6E0E               	movwf	?_readEEPROM,c
 11387  000D90  EC8D  F02E         	call	_readEEPROM	;wreg free
 11388  000D94  EF35  F00C         	goto	L19
 11389  000D98                     l10820:
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;main.c: 2033: writeEEPROM(0x54, val);
 11393  000D98  6A0F               	clrf	?_writeEEPROM+1,c
 11394  000D9A  0E54               	movlw	84
 11395  000D9C  6E0E               	movwf	?_writeEEPROM,c
 11396  000D9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11397  000DA2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11398                           
 11399                           ;main.c: 2034: rv = readEEPROM(0x54);
 11400  000DA6  6A0F               	clrf	?_readEEPROM+1,c
 11401  000DA8  0E54               	movlw	84
 11402  000DAA  6E0E               	movwf	?_readEEPROM,c
 11403  000DAC  EC8D  F02E         	call	_readEEPROM	;wreg free
 11404  000DB0  EF35  F00C         	goto	L19
 11405  000DB4                     l10822:
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;main.c: 2039: writeEEPROM(0x55, val);
 11409  000DB4  6A0F               	clrf	?_writeEEPROM+1,c
 11410  000DB6  0E55               	movlw	85
 11411  000DB8  6E0E               	movwf	?_writeEEPROM,c
 11412  000DBA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11413  000DBE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11414                           
 11415                           ;main.c: 2040: rv = readEEPROM(0x55);
 11416  000DC2  6A0F               	clrf	?_readEEPROM+1,c
 11417  000DC4  0E55               	movlw	85
 11418  000DC6  6E0E               	movwf	?_readEEPROM,c
 11419  000DC8  EC8D  F02E         	call	_readEEPROM	;wreg free
 11420  000DCC  EF35  F00C         	goto	L19
 11421  000DD0                     l10824:
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;main.c: 2045: writeEEPROM(0x56, val);
 11425  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
 11426  000DD2  0E56               	movlw	86
 11427  000DD4  6E0E               	movwf	?_writeEEPROM,c
 11428  000DD6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11429  000DDA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11430                           
 11431                           ;main.c: 2046: rv = readEEPROM(0x56);
 11432  000DDE  6A0F               	clrf	?_readEEPROM+1,c
 11433  000DE0  0E56               	movlw	86
 11434  000DE2  6E0E               	movwf	?_readEEPROM,c
 11435  000DE4  EC8D  F02E         	call	_readEEPROM	;wreg free
 11436  000DE8  EF35  F00C         	goto	L19
 11437  000DEC                     l10826:
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;main.c: 2051: writeEEPROM(0x57, val);
 11441  000DEC  6A0F               	clrf	?_writeEEPROM+1,c
 11442  000DEE  0E57               	movlw	87
 11443  000DF0  6E0E               	movwf	?_writeEEPROM,c
 11444  000DF2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11445  000DF6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11446                           
 11447                           ;main.c: 2052: rv = readEEPROM(0x57);
 11448  000DFA  6A0F               	clrf	?_readEEPROM+1,c
 11449  000DFC  0E57               	movlw	87
 11450  000DFE  6E0E               	movwf	?_readEEPROM,c
 11451  000E00  EC8D  F02E         	call	_readEEPROM	;wreg free
 11452  000E04  EF35  F00C         	goto	L19
 11453  000E08                     l10828:
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;main.c: 2057: writeEEPROM(0x58, val);
 11457  000E08  6A0F               	clrf	?_writeEEPROM+1,c
 11458  000E0A  0E58               	movlw	88
 11459  000E0C  6E0E               	movwf	?_writeEEPROM,c
 11460  000E0E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11461  000E12  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11462                           
 11463                           ;main.c: 2058: rv = readEEPROM(0x58);
 11464  000E16  6A0F               	clrf	?_readEEPROM+1,c
 11465  000E18  0E58               	movlw	88
 11466  000E1A  6E0E               	movwf	?_readEEPROM,c
 11467  000E1C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11468  000E20  EF35  F00C         	goto	L19
 11469  000E24                     l10830:
 11470                           
 11471                           ; BSR set to: 0
 11472                           ;main.c: 2063: writeEEPROM(0x59, val);
 11473  000E24  6A0F               	clrf	?_writeEEPROM+1,c
 11474  000E26  0E59               	movlw	89
 11475  000E28  6E0E               	movwf	?_writeEEPROM,c
 11476  000E2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11477  000E2E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11478                           
 11479                           ;main.c: 2064: rv = readEEPROM(0x59);
 11480  000E32  6A0F               	clrf	?_readEEPROM+1,c
 11481  000E34  0E59               	movlw	89
 11482  000E36  6E0E               	movwf	?_readEEPROM,c
 11483  000E38  EC8D  F02E         	call	_readEEPROM	;wreg free
 11484  000E3C  EF35  F00C         	goto	L19
 11485  000E40                     l10832:
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;main.c: 2069: writeEEPROM(0x5A, val);
 11489  000E40  6A0F               	clrf	?_writeEEPROM+1,c
 11490  000E42  0E5A               	movlw	90
 11491  000E44  6E0E               	movwf	?_writeEEPROM,c
 11492  000E46  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11493  000E4A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11494                           
 11495                           ;main.c: 2070: rv = readEEPROM(0x5A);
 11496  000E4E  6A0F               	clrf	?_readEEPROM+1,c
 11497  000E50  0E5A               	movlw	90
 11498  000E52  6E0E               	movwf	?_readEEPROM,c
 11499  000E54  EC8D  F02E         	call	_readEEPROM	;wreg free
 11500  000E58  EF35  F00C         	goto	L19
 11501  000E5C                     l10834:
 11502                           
 11503                           ; BSR set to: 0
 11504                           ;main.c: 2079: writeEEPROM(0x5B, val);
 11505  000E5C  6A0F               	clrf	?_writeEEPROM+1,c
 11506  000E5E  0E5B               	movlw	91
 11507  000E60  6E0E               	movwf	?_writeEEPROM,c
 11508  000E62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11509  000E66  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11510                           
 11511                           ;main.c: 2080: rv = readEEPROM(0x5B);
 11512  000E6A  6A0F               	clrf	?_readEEPROM+1,c
 11513  000E6C  0E5B               	movlw	91
 11514  000E6E  6E0E               	movwf	?_readEEPROM,c
 11515  000E70  EC8D  F02E         	call	_readEEPROM	;wreg free
 11516  000E74  EF35  F00C         	goto	L19
 11517  000E78                     l10836:
 11518                           
 11519                           ; BSR set to: 0
 11520                           ;main.c: 2085: writeEEPROM(0x5C, val);
 11521  000E78  6A0F               	clrf	?_writeEEPROM+1,c
 11522  000E7A  0E5C               	movlw	92
 11523  000E7C  6E0E               	movwf	?_writeEEPROM,c
 11524  000E7E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11525  000E82  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11526                           
 11527                           ;main.c: 2086: rv = readEEPROM(0x5C);
 11528  000E86  6A0F               	clrf	?_readEEPROM+1,c
 11529  000E88  0E5C               	movlw	92
 11530  000E8A  6E0E               	movwf	?_readEEPROM,c
 11531  000E8C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11532  000E90  EF35  F00C         	goto	L19
 11533  000E94                     l10838:
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;main.c: 2091: writeEEPROM(0x5D, val);
 11537  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 11538  000E96  0E5D               	movlw	93
 11539  000E98  6E0E               	movwf	?_writeEEPROM,c
 11540  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11541  000E9E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11542                           
 11543                           ;main.c: 2092: rv = readEEPROM(0x5D);
 11544  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 11545  000EA4  0E5D               	movlw	93
 11546  000EA6  6E0E               	movwf	?_readEEPROM,c
 11547  000EA8  EC8D  F02E         	call	_readEEPROM	;wreg free
 11548  000EAC  EF35  F00C         	goto	L19
 11549  000EB0                     l10840:
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;main.c: 2097: writeEEPROM(0x5E, val);
 11553  000EB0  6A0F               	clrf	?_writeEEPROM+1,c
 11554  000EB2  0E5E               	movlw	94
 11555  000EB4  6E0E               	movwf	?_writeEEPROM,c
 11556  000EB6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11557  000EBA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11558                           
 11559                           ;main.c: 2098: rv = readEEPROM(0x5E);
 11560  000EBE  6A0F               	clrf	?_readEEPROM+1,c
 11561  000EC0  0E5E               	movlw	94
 11562  000EC2  6E0E               	movwf	?_readEEPROM,c
 11563  000EC4  EC8D  F02E         	call	_readEEPROM	;wreg free
 11564  000EC8  EF35  F00C         	goto	L19
 11565  000ECC                     l10842:
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;main.c: 2103: writeEEPROM(0x5F, val);
 11569  000ECC  6A0F               	clrf	?_writeEEPROM+1,c
 11570  000ECE  0E5F               	movlw	95
 11571  000ED0  6E0E               	movwf	?_writeEEPROM,c
 11572  000ED2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11573  000ED6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11574                           
 11575                           ;main.c: 2104: rv = readEEPROM(0x5F);
 11576  000EDA  6A0F               	clrf	?_readEEPROM+1,c
 11577  000EDC  0E5F               	movlw	95
 11578  000EDE  6E0E               	movwf	?_readEEPROM,c
 11579  000EE0  EC8D  F02E         	call	_readEEPROM	;wreg free
 11580  000EE4  EF35  F00C         	goto	L19
 11581  000EE8                     l10844:
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;main.c: 2109: writeEEPROM(0x60, val);
 11585  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 11586  000EEA  0E60               	movlw	96
 11587  000EEC  6E0E               	movwf	?_writeEEPROM,c
 11588  000EEE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11589  000EF2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11590                           
 11591                           ;main.c: 2110: rv = readEEPROM(0x60);
 11592  000EF6  6A0F               	clrf	?_readEEPROM+1,c
 11593  000EF8  0E60               	movlw	96
 11594  000EFA  6E0E               	movwf	?_readEEPROM,c
 11595  000EFC  EC8D  F02E         	call	_readEEPROM	;wreg free
 11596  000F00  EF35  F00C         	goto	L19
 11597  000F04                     l10846:
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;main.c: 2115: writeEEPROM(0x61, val);
 11601  000F04  6A0F               	clrf	?_writeEEPROM+1,c
 11602  000F06  0E61               	movlw	97
 11603  000F08  6E0E               	movwf	?_writeEEPROM,c
 11604  000F0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11605  000F0E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11606                           
 11607                           ;main.c: 2116: rv = readEEPROM(0x61);
 11608  000F12  6A0F               	clrf	?_readEEPROM+1,c
 11609  000F14  0E61               	movlw	97
 11610  000F16  6E0E               	movwf	?_readEEPROM,c
 11611  000F18  EC8D  F02E         	call	_readEEPROM	;wreg free
 11612  000F1C  EF35  F00C         	goto	L19
 11613  000F20                     l10848:
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;main.c: 2121: writeEEPROM(0x62, val);
 11617  000F20  6A0F               	clrf	?_writeEEPROM+1,c
 11618  000F22  0E62               	movlw	98
 11619  000F24  6E0E               	movwf	?_writeEEPROM,c
 11620  000F26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11621  000F2A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11622                           
 11623                           ;main.c: 2122: rv = readEEPROM(0x62);
 11624  000F2E  6A0F               	clrf	?_readEEPROM+1,c
 11625  000F30  0E62               	movlw	98
 11626  000F32  6E0E               	movwf	?_readEEPROM,c
 11627  000F34  EC8D  F02E         	call	_readEEPROM	;wreg free
 11628  000F38  EF35  F00C         	goto	L19
 11629  000F3C                     l10850:
 11630                           
 11631                           ; BSR set to: 0
 11632                           ;main.c: 2127: writeEEPROM(0x63, val);
 11633  000F3C  6A0F               	clrf	?_writeEEPROM+1,c
 11634  000F3E  0E63               	movlw	99
 11635  000F40  6E0E               	movwf	?_writeEEPROM,c
 11636  000F42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11637  000F46  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11638                           
 11639                           ;main.c: 2128: rv = readEEPROM(0x63);
 11640  000F4A  6A0F               	clrf	?_readEEPROM+1,c
 11641  000F4C  0E63               	movlw	99
 11642  000F4E  6E0E               	movwf	?_readEEPROM,c
 11643  000F50  EC8D  F02E         	call	_readEEPROM	;wreg free
 11644  000F54  EF35  F00C         	goto	L19
 11645  000F58                     l10852:
 11646                           
 11647                           ; BSR set to: 0
 11648                           ;main.c: 2133: writeEEPROM(0x64, val);
 11649  000F58  6A0F               	clrf	?_writeEEPROM+1,c
 11650  000F5A  0E64               	movlw	100
 11651  000F5C  6E0E               	movwf	?_writeEEPROM,c
 11652  000F5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11653  000F62  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11654                           
 11655                           ;main.c: 2134: rv = readEEPROM(0x64);
 11656  000F66  6A0F               	clrf	?_readEEPROM+1,c
 11657  000F68  0E64               	movlw	100
 11658  000F6A  6E0E               	movwf	?_readEEPROM,c
 11659  000F6C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11660  000F70  EF35  F00C         	goto	L19
 11661  000F74                     l10854:
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;main.c: 2139: writeEEPROM(0x65, val);
 11665  000F74  6A0F               	clrf	?_writeEEPROM+1,c
 11666  000F76  0E65               	movlw	101
 11667  000F78  6E0E               	movwf	?_writeEEPROM,c
 11668  000F7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11669  000F7E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11670                           
 11671                           ;main.c: 2140: rv = readEEPROM(0x65);
 11672  000F82  6A0F               	clrf	?_readEEPROM+1,c
 11673  000F84  0E65               	movlw	101
 11674  000F86  6E0E               	movwf	?_readEEPROM,c
 11675  000F88  EC8D  F02E         	call	_readEEPROM	;wreg free
 11676  000F8C  EF35  F00C         	goto	L19
 11677  000F90                     l10856:
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;main.c: 2145: writeEEPROM(0x66, val);
 11681  000F90  6A0F               	clrf	?_writeEEPROM+1,c
 11682  000F92  0E66               	movlw	102
 11683  000F94  6E0E               	movwf	?_writeEEPROM,c
 11684  000F96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11685  000F9A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11686                           
 11687                           ;main.c: 2146: rv = readEEPROM(0x66);
 11688  000F9E  6A0F               	clrf	?_readEEPROM+1,c
 11689  000FA0  0E66               	movlw	102
 11690  000FA2  6E0E               	movwf	?_readEEPROM,c
 11691  000FA4  EC8D  F02E         	call	_readEEPROM	;wreg free
 11692  000FA8  EF35  F00C         	goto	L19
 11693  000FAC                     l10858:
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;main.c: 2155: writeEEPROM(0x67, val);
 11697  000FAC  6A0F               	clrf	?_writeEEPROM+1,c
 11698  000FAE  0E67               	movlw	103
 11699  000FB0  6E0E               	movwf	?_writeEEPROM,c
 11700  000FB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11701  000FB6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11702                           
 11703                           ;main.c: 2156: rv = readEEPROM(0x67);
 11704  000FBA  6A0F               	clrf	?_readEEPROM+1,c
 11705  000FBC  0E67               	movlw	103
 11706  000FBE  6E0E               	movwf	?_readEEPROM,c
 11707  000FC0  EC8D  F02E         	call	_readEEPROM	;wreg free
 11708  000FC4  EF35  F00C         	goto	L19
 11709  000FC8                     l10860:
 11710                           
 11711                           ; BSR set to: 0
 11712                           ;main.c: 2161: writeEEPROM(0x68, val);
 11713  000FC8  6A0F               	clrf	?_writeEEPROM+1,c
 11714  000FCA  0E68               	movlw	104
 11715  000FCC  6E0E               	movwf	?_writeEEPROM,c
 11716  000FCE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11717  000FD2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11718                           
 11719                           ;main.c: 2162: rv = readEEPROM(0x68);
 11720  000FD6  6A0F               	clrf	?_readEEPROM+1,c
 11721  000FD8  0E68               	movlw	104
 11722  000FDA  6E0E               	movwf	?_readEEPROM,c
 11723  000FDC  EC8D  F02E         	call	_readEEPROM	;wreg free
 11724  000FE0  EF35  F00C         	goto	L19
 11725  000FE4                     l10862:
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;main.c: 2167: writeEEPROM(0x69, val);
 11729  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 11730  000FE6  0E69               	movlw	105
 11731  000FE8  6E0E               	movwf	?_writeEEPROM,c
 11732  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11733  000FEE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11734                           
 11735                           ;main.c: 2168: rv = readEEPROM(0x69);
 11736  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 11737  000FF4  0E69               	movlw	105
 11738  000FF6  6E0E               	movwf	?_readEEPROM,c
 11739  000FF8  EC8D  F02E         	call	_readEEPROM	;wreg free
 11740  000FFC  EF35  F00C         	goto	L19
 11741  001000                     l10864:
 11742                           
 11743                           ; BSR set to: 0
 11744                           ;main.c: 2173: writeEEPROM(0x6A, val);
 11745  001000  6A0F               	clrf	?_writeEEPROM+1,c
 11746  001002  0E6A               	movlw	106
 11747  001004  6E0E               	movwf	?_writeEEPROM,c
 11748  001006  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11749  00100A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11750                           
 11751                           ;main.c: 2174: rv = readEEPROM(0x6A);
 11752  00100E  6A0F               	clrf	?_readEEPROM+1,c
 11753  001010  0E6A               	movlw	106
 11754  001012  6E0E               	movwf	?_readEEPROM,c
 11755  001014  EC8D  F02E         	call	_readEEPROM	;wreg free
 11756  001018  EF35  F00C         	goto	L19
 11757  00101C                     l10866:
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;main.c: 2179: writeEEPROM(0x6B, val);
 11761  00101C  6A0F               	clrf	?_writeEEPROM+1,c
 11762  00101E  0E6B               	movlw	107
 11763  001020  6E0E               	movwf	?_writeEEPROM,c
 11764  001022  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11765  001026  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11766                           
 11767                           ;main.c: 2180: rv = readEEPROM(0x6B);
 11768  00102A  6A0F               	clrf	?_readEEPROM+1,c
 11769  00102C  0E6B               	movlw	107
 11770  00102E  6E0E               	movwf	?_readEEPROM,c
 11771  001030  EC8D  F02E         	call	_readEEPROM	;wreg free
 11772  001034  EF35  F00C         	goto	L19
 11773  001038                     l10868:
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;main.c: 2185: writeEEPROM(0x6C, val);
 11777  001038  6A0F               	clrf	?_writeEEPROM+1,c
 11778  00103A  0E6C               	movlw	108
 11779  00103C  6E0E               	movwf	?_writeEEPROM,c
 11780  00103E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11781  001042  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11782                           
 11783                           ;main.c: 2186: rv = readEEPROM(0x6C);
 11784  001046  6A0F               	clrf	?_readEEPROM+1,c
 11785  001048  0E6C               	movlw	108
 11786  00104A  6E0E               	movwf	?_readEEPROM,c
 11787  00104C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11788  001050  EF35  F00C         	goto	L19
 11789  001054                     l10870:
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;main.c: 2191: writeEEPROM(0x6D, val);
 11793  001054  6A0F               	clrf	?_writeEEPROM+1,c
 11794  001056  0E6D               	movlw	109
 11795  001058  6E0E               	movwf	?_writeEEPROM,c
 11796  00105A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11797  00105E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11798                           
 11799                           ;main.c: 2192: rv = readEEPROM(0x6D);
 11800  001062  6A0F               	clrf	?_readEEPROM+1,c
 11801  001064  0E6D               	movlw	109
 11802  001066  6E0E               	movwf	?_readEEPROM,c
 11803  001068  EC8D  F02E         	call	_readEEPROM	;wreg free
 11804  00106C  D3FE               	goto	L19
 11805  00106E                     l10872:
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;main.c: 2197: writeEEPROM(0x6E, val);
 11809  00106E  6A0F               	clrf	?_writeEEPROM+1,c
 11810  001070  0E6E               	movlw	110
 11811  001072  6E0E               	movwf	?_writeEEPROM,c
 11812  001074  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11813  001078  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11814                           
 11815                           ;main.c: 2198: rv = readEEPROM(0x6E);
 11816  00107C  6A0F               	clrf	?_readEEPROM+1,c
 11817  00107E  0E6E               	movlw	110
 11818  001080  6E0E               	movwf	?_readEEPROM,c
 11819  001082  EC8D  F02E         	call	_readEEPROM	;wreg free
 11820  001086  D3F1               	goto	L19
 11821  001088                     l10874:
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;main.c: 2203: writeEEPROM(0x6F, val);
 11825  001088  6A0F               	clrf	?_writeEEPROM+1,c
 11826  00108A  0E6F               	movlw	111
 11827  00108C  6E0E               	movwf	?_writeEEPROM,c
 11828  00108E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11829  001092  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11830                           
 11831                           ;main.c: 2204: rv = readEEPROM(0x6F);
 11832  001096  6A0F               	clrf	?_readEEPROM+1,c
 11833  001098  0E6F               	movlw	111
 11834  00109A  6E0E               	movwf	?_readEEPROM,c
 11835  00109C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11836  0010A0  D3E4               	goto	L19
 11837  0010A2                     l10876:
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;main.c: 2209: writeEEPROM(0x70, val);
 11841  0010A2  6A0F               	clrf	?_writeEEPROM+1,c
 11842  0010A4  0E70               	movlw	112
 11843  0010A6  6E0E               	movwf	?_writeEEPROM,c
 11844  0010A8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11845  0010AC  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11846                           
 11847                           ;main.c: 2210: rv = readEEPROM(0x70);
 11848  0010B0  6A0F               	clrf	?_readEEPROM+1,c
 11849  0010B2  0E70               	movlw	112
 11850  0010B4  6E0E               	movwf	?_readEEPROM,c
 11851  0010B6  EC8D  F02E         	call	_readEEPROM	;wreg free
 11852  0010BA  D3D7               	goto	L19
 11853  0010BC                     l10878:
 11854                           
 11855                           ; BSR set to: 0
 11856                           ;main.c: 2215: writeEEPROM(0x71, val);
 11857  0010BC  6A0F               	clrf	?_writeEEPROM+1,c
 11858  0010BE  0E71               	movlw	113
 11859  0010C0  6E0E               	movwf	?_writeEEPROM,c
 11860  0010C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11861  0010C6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11862                           
 11863                           ;main.c: 2216: rv = readEEPROM(0x71);
 11864  0010CA  6A0F               	clrf	?_readEEPROM+1,c
 11865  0010CC  0E71               	movlw	113
 11866  0010CE  6E0E               	movwf	?_readEEPROM,c
 11867  0010D0  EC8D  F02E         	call	_readEEPROM	;wreg free
 11868  0010D4  D3CA               	goto	L19
 11869  0010D6                     l10880:
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;main.c: 2221: writeEEPROM(0x72, val);
 11873  0010D6  6A0F               	clrf	?_writeEEPROM+1,c
 11874  0010D8  0E72               	movlw	114
 11875  0010DA  6E0E               	movwf	?_writeEEPROM,c
 11876  0010DC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11877  0010E0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11878                           
 11879                           ;main.c: 2222: rv = readEEPROM(0x72);
 11880  0010E4  6A0F               	clrf	?_readEEPROM+1,c
 11881  0010E6  0E72               	movlw	114
 11882  0010E8  6E0E               	movwf	?_readEEPROM,c
 11883  0010EA  EC8D  F02E         	call	_readEEPROM	;wreg free
 11884  0010EE  D3BD               	goto	L19
 11885  0010F0                     l10882:
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;main.c: 2231: writeEEPROM(0x73, val);
 11889  0010F0  6A0F               	clrf	?_writeEEPROM+1,c
 11890  0010F2  0E73               	movlw	115
 11891  0010F4  6E0E               	movwf	?_writeEEPROM,c
 11892  0010F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11893  0010FA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11894                           
 11895                           ;main.c: 2232: rv = readEEPROM(0x73);
 11896  0010FE  6A0F               	clrf	?_readEEPROM+1,c
 11897  001100  0E73               	movlw	115
 11898  001102  6E0E               	movwf	?_readEEPROM,c
 11899  001104  EC8D  F02E         	call	_readEEPROM	;wreg free
 11900  001108  D3B0               	goto	L19
 11901  00110A                     l10884:
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;main.c: 2237: writeEEPROM(0x74, val);
 11905  00110A  6A0F               	clrf	?_writeEEPROM+1,c
 11906  00110C  0E74               	movlw	116
 11907  00110E  6E0E               	movwf	?_writeEEPROM,c
 11908  001110  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11909  001114  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11910                           
 11911                           ;main.c: 2238: rv = readEEPROM(0x74);
 11912  001118  6A0F               	clrf	?_readEEPROM+1,c
 11913  00111A  0E74               	movlw	116
 11914  00111C  6E0E               	movwf	?_readEEPROM,c
 11915  00111E  EC8D  F02E         	call	_readEEPROM	;wreg free
 11916  001122  D3A3               	goto	L19
 11917  001124                     l10886:
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;main.c: 2243: writeEEPROM(0x75, val);
 11921  001124  6A0F               	clrf	?_writeEEPROM+1,c
 11922  001126  0E75               	movlw	117
 11923  001128  6E0E               	movwf	?_writeEEPROM,c
 11924  00112A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11925  00112E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11926                           
 11927                           ;main.c: 2244: rv = readEEPROM(0x75);
 11928  001132  6A0F               	clrf	?_readEEPROM+1,c
 11929  001134  0E75               	movlw	117
 11930  001136  6E0E               	movwf	?_readEEPROM,c
 11931  001138  EC8D  F02E         	call	_readEEPROM	;wreg free
 11932  00113C  D396               	goto	L19
 11933  00113E                     l10888:
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;main.c: 2249: writeEEPROM(0x76, val);
 11937  00113E  6A0F               	clrf	?_writeEEPROM+1,c
 11938  001140  0E76               	movlw	118
 11939  001142  6E0E               	movwf	?_writeEEPROM,c
 11940  001144  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11941  001148  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11942                           
 11943                           ;main.c: 2250: rv = readEEPROM(0x76);
 11944  00114C  6A0F               	clrf	?_readEEPROM+1,c
 11945  00114E  0E76               	movlw	118
 11946  001150  6E0E               	movwf	?_readEEPROM,c
 11947  001152  EC8D  F02E         	call	_readEEPROM	;wreg free
 11948  001156  D389               	goto	L19
 11949  001158                     l10890:
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;main.c: 2255: writeEEPROM(0x77, val);
 11953  001158  6A0F               	clrf	?_writeEEPROM+1,c
 11954  00115A  0E77               	movlw	119
 11955  00115C  6E0E               	movwf	?_writeEEPROM,c
 11956  00115E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11957  001162  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11958                           
 11959                           ;main.c: 2256: rv = readEEPROM(0x77);
 11960  001166  6A0F               	clrf	?_readEEPROM+1,c
 11961  001168  0E77               	movlw	119
 11962  00116A  6E0E               	movwf	?_readEEPROM,c
 11963  00116C  EC8D  F02E         	call	_readEEPROM	;wreg free
 11964  001170  D37C               	goto	L19
 11965  001172                     l10892:
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;main.c: 2261: writeEEPROM(0x78, val);
 11969  001172  6A0F               	clrf	?_writeEEPROM+1,c
 11970  001174  0E78               	movlw	120
 11971  001176  6E0E               	movwf	?_writeEEPROM,c
 11972  001178  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11973  00117C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11974                           
 11975                           ;main.c: 2262: rv = readEEPROM(0x78);
 11976  001180  6A0F               	clrf	?_readEEPROM+1,c
 11977  001182  0E78               	movlw	120
 11978  001184  6E0E               	movwf	?_readEEPROM,c
 11979  001186  EC8D  F02E         	call	_readEEPROM	;wreg free
 11980  00118A  D36F               	goto	L19
 11981  00118C                     l10894:
 11982                           
 11983                           ; BSR set to: 0
 11984                           ;main.c: 2267: writeEEPROM(0x79, val);
 11985  00118C  6A0F               	clrf	?_writeEEPROM+1,c
 11986  00118E  0E79               	movlw	121
 11987  001190  6E0E               	movwf	?_writeEEPROM,c
 11988  001192  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11989  001196  EC7E  F02D         	call	_writeEEPROM	;wreg free
 11990                           
 11991                           ;main.c: 2268: rv = readEEPROM(0x79);
 11992  00119A  6A0F               	clrf	?_readEEPROM+1,c
 11993  00119C  0E79               	movlw	121
 11994  00119E  6E0E               	movwf	?_readEEPROM,c
 11995  0011A0  EC8D  F02E         	call	_readEEPROM	;wreg free
 11996  0011A4  D362               	goto	L19
 11997  0011A6                     l10896:
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;main.c: 2273: writeEEPROM(0x7A, val);
 12001  0011A6  6A0F               	clrf	?_writeEEPROM+1,c
 12002  0011A8  0E7A               	movlw	122
 12003  0011AA  6E0E               	movwf	?_writeEEPROM,c
 12004  0011AC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12005  0011B0  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12006                           
 12007                           ;main.c: 2274: rv = readEEPROM(0x7A);
 12008  0011B4  6A0F               	clrf	?_readEEPROM+1,c
 12009  0011B6  0E7A               	movlw	122
 12010  0011B8  6E0E               	movwf	?_readEEPROM,c
 12011  0011BA  EC8D  F02E         	call	_readEEPROM	;wreg free
 12012  0011BE  D355               	goto	L19
 12013  0011C0                     l10898:
 12014                           
 12015                           ; BSR set to: 0
 12016                           ;main.c: 2279: writeEEPROM(0x7B, val);
 12017  0011C0  6A0F               	clrf	?_writeEEPROM+1,c
 12018  0011C2  0E7B               	movlw	123
 12019  0011C4  6E0E               	movwf	?_writeEEPROM,c
 12020  0011C6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12021  0011CA  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12022                           
 12023                           ;main.c: 2280: rv = readEEPROM(0x7B);
 12024  0011CE  6A0F               	clrf	?_readEEPROM+1,c
 12025  0011D0  0E7B               	movlw	123
 12026  0011D2  6E0E               	movwf	?_readEEPROM,c
 12027  0011D4  EC8D  F02E         	call	_readEEPROM	;wreg free
 12028  0011D8  D348               	goto	L19
 12029  0011DA                     l10900:
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;main.c: 2285: writeEEPROM(0x7C, val);
 12033  0011DA  6A0F               	clrf	?_writeEEPROM+1,c
 12034  0011DC  0E7C               	movlw	124
 12035  0011DE  6E0E               	movwf	?_writeEEPROM,c
 12036  0011E0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12037  0011E4  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12038                           
 12039                           ;main.c: 2286: rv = readEEPROM(0x7C);
 12040  0011E8  6A0F               	clrf	?_readEEPROM+1,c
 12041  0011EA  0E7C               	movlw	124
 12042  0011EC  6E0E               	movwf	?_readEEPROM,c
 12043  0011EE  EC8D  F02E         	call	_readEEPROM	;wreg free
 12044  0011F2  D33B               	goto	L19
 12045  0011F4                     l10902:
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;main.c: 2291: writeEEPROM(0x7D, val);
 12049  0011F4  6A0F               	clrf	?_writeEEPROM+1,c
 12050  0011F6  0E7D               	movlw	125
 12051  0011F8  6E0E               	movwf	?_writeEEPROM,c
 12052  0011FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12053  0011FE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12054                           
 12055                           ;main.c: 2292: rv = readEEPROM(0x7D);
 12056  001202  6A0F               	clrf	?_readEEPROM+1,c
 12057  001204  0E7D               	movlw	125
 12058  001206  6E0E               	movwf	?_readEEPROM,c
 12059  001208  EC8D  F02E         	call	_readEEPROM	;wreg free
 12060  00120C  D32E               	goto	L19
 12061  00120E                     l10904:
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;main.c: 2297: writeEEPROM(0x7E, val);
 12065  00120E  6A0F               	clrf	?_writeEEPROM+1,c
 12066  001210  0E7E               	movlw	126
 12067  001212  6E0E               	movwf	?_writeEEPROM,c
 12068  001214  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12069  001218  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12070                           
 12071                           ;main.c: 2298: rv = readEEPROM(0x7E);
 12072  00121C  6A0F               	clrf	?_readEEPROM+1,c
 12073  00121E  0E7E               	movlw	126
 12074  001220  6E0E               	movwf	?_readEEPROM,c
 12075  001222  EC8D  F02E         	call	_readEEPROM	;wreg free
 12076  001226  D321               	goto	L19
 12077  001228                     l10906:
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;main.c: 2307: writeEEPROM(0x7F, val );
 12081  001228  6A0F               	clrf	?_writeEEPROM+1,c
 12082  00122A  0E7F               	movlw	127
 12083  00122C  6E0E               	movwf	?_writeEEPROM,c
 12084  00122E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12085  001232  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12086                           
 12087                           ;main.c: 2308: rv = readEEPROM(0x7F);
 12088  001236  6A0F               	clrf	?_readEEPROM+1,c
 12089  001238  0E7F               	movlw	127
 12090  00123A  6E0E               	movwf	?_readEEPROM,c
 12091  00123C  EC8D  F02E         	call	_readEEPROM	;wreg free
 12092  001240  D314               	goto	L19
 12093  001242                     l10908:
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;main.c: 2313: writeEEPROM(0x80, val );
 12097  001242  6A0F               	clrf	?_writeEEPROM+1,c
 12098  001244  0E80               	movlw	128
 12099  001246  6E0E               	movwf	?_writeEEPROM,c
 12100  001248  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12101  00124C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12102                           
 12103                           ;main.c: 2314: rv = readEEPROM(0x80);
 12104  001250  6A0F               	clrf	?_readEEPROM+1,c
 12105  001252  0E80               	movlw	128
 12106  001254  6E0E               	movwf	?_readEEPROM,c
 12107  001256  EC8D  F02E         	call	_readEEPROM	;wreg free
 12108  00125A  D307               	goto	L19
 12109  00125C                     l10910:
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;main.c: 2319: writeEEPROM(0x81, val );
 12113  00125C  6A0F               	clrf	?_writeEEPROM+1,c
 12114  00125E  0E81               	movlw	129
 12115  001260  6E0E               	movwf	?_writeEEPROM,c
 12116  001262  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12117  001266  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12118                           
 12119                           ;main.c: 2320: rv = readEEPROM(0x81);
 12120  00126A  6A0F               	clrf	?_readEEPROM+1,c
 12121  00126C  0E81               	movlw	129
 12122  00126E  6E0E               	movwf	?_readEEPROM,c
 12123  001270  EC8D  F02E         	call	_readEEPROM	;wreg free
 12124  001274  D2FA               	goto	L19
 12125  001276                     l10912:
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;main.c: 2325: writeEEPROM(0x82, val );
 12129  001276  6A0F               	clrf	?_writeEEPROM+1,c
 12130  001278  0E82               	movlw	130
 12131  00127A  6E0E               	movwf	?_writeEEPROM,c
 12132  00127C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12133  001280  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12134                           
 12135                           ;main.c: 2326: rv = readEEPROM(0x82);
 12136  001284  6A0F               	clrf	?_readEEPROM+1,c
 12137  001286  0E82               	movlw	130
 12138  001288  6E0E               	movwf	?_readEEPROM,c
 12139  00128A  EC8D  F02E         	call	_readEEPROM	;wreg free
 12140  00128E  D2ED               	goto	L19
 12141  001290                     l10914:
 12142                           
 12143                           ; BSR set to: 0
 12144                           ;main.c: 2331: writeEEPROM(0x83, val );
 12145  001290  6A0F               	clrf	?_writeEEPROM+1,c
 12146  001292  0E83               	movlw	131
 12147  001294  6E0E               	movwf	?_writeEEPROM,c
 12148  001296  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12149  00129A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12150                           
 12151                           ;main.c: 2332: rv = readEEPROM(0x83);
 12152  00129E  6A0F               	clrf	?_readEEPROM+1,c
 12153  0012A0  0E83               	movlw	131
 12154  0012A2  6E0E               	movwf	?_readEEPROM,c
 12155  0012A4  EC8D  F02E         	call	_readEEPROM	;wreg free
 12156  0012A8  D2E0               	goto	L19
 12157  0012AA                     l10916:
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;main.c: 2337: writeEEPROM(0x84, val );
 12161  0012AA  6A0F               	clrf	?_writeEEPROM+1,c
 12162  0012AC  0E84               	movlw	132
 12163  0012AE  6E0E               	movwf	?_writeEEPROM,c
 12164  0012B0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12165  0012B4  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12166                           
 12167                           ;main.c: 2338: rv = readEEPROM(0x84);
 12168  0012B8  6A0F               	clrf	?_readEEPROM+1,c
 12169  0012BA  0E84               	movlw	132
 12170  0012BC  6E0E               	movwf	?_readEEPROM,c
 12171  0012BE  EC8D  F02E         	call	_readEEPROM	;wreg free
 12172  0012C2  D2D3               	goto	L19
 12173  0012C4                     l10918:
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;main.c: 2343: writeEEPROM(0x85, val );
 12177  0012C4  6A0F               	clrf	?_writeEEPROM+1,c
 12178  0012C6  0E85               	movlw	133
 12179  0012C8  6E0E               	movwf	?_writeEEPROM,c
 12180  0012CA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12181  0012CE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12182                           
 12183                           ;main.c: 2344: rv = readEEPROM(0x85);
 12184  0012D2  6A0F               	clrf	?_readEEPROM+1,c
 12185  0012D4  0E85               	movlw	133
 12186  0012D6  6E0E               	movwf	?_readEEPROM,c
 12187  0012D8  EC8D  F02E         	call	_readEEPROM	;wreg free
 12188  0012DC  D2C6               	goto	L19
 12189  0012DE                     l10920:
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;main.c: 2349: writeEEPROM(0x86, val );
 12193  0012DE  6A0F               	clrf	?_writeEEPROM+1,c
 12194  0012E0  0E86               	movlw	134
 12195  0012E2  6E0E               	movwf	?_writeEEPROM,c
 12196  0012E4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12197  0012E8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12198                           
 12199                           ;main.c: 2350: rv = readEEPROM(0x86);
 12200  0012EC  6A0F               	clrf	?_readEEPROM+1,c
 12201  0012EE  0E86               	movlw	134
 12202  0012F0  6E0E               	movwf	?_readEEPROM,c
 12203  0012F2  EC8D  F02E         	call	_readEEPROM	;wreg free
 12204  0012F6  D2B9               	goto	L19
 12205  0012F8                     l10922:
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;main.c: 2355: writeEEPROM(0x87, val );
 12209  0012F8  6A0F               	clrf	?_writeEEPROM+1,c
 12210  0012FA  0E87               	movlw	135
 12211  0012FC  6E0E               	movwf	?_writeEEPROM,c
 12212  0012FE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12213  001302  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12214                           
 12215                           ;main.c: 2356: rv = readEEPROM(0x87);
 12216  001306  6A0F               	clrf	?_readEEPROM+1,c
 12217  001308  0E87               	movlw	135
 12218  00130A  6E0E               	movwf	?_readEEPROM,c
 12219  00130C  EC8D  F02E         	call	_readEEPROM	;wreg free
 12220  001310  D2AC               	goto	L19
 12221  001312                     l10924:
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;main.c: 2361: writeEEPROM(0x88, val );
 12225  001312  6A0F               	clrf	?_writeEEPROM+1,c
 12226  001314  0E88               	movlw	136
 12227  001316  6E0E               	movwf	?_writeEEPROM,c
 12228  001318  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12229  00131C  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12230                           
 12231                           ;main.c: 2362: rv = readEEPROM(0x88);
 12232  001320  6A0F               	clrf	?_readEEPROM+1,c
 12233  001322  0E88               	movlw	136
 12234  001324  6E0E               	movwf	?_readEEPROM,c
 12235  001326  EC8D  F02E         	call	_readEEPROM	;wreg free
 12236  00132A  D29F               	goto	L19
 12237  00132C                     l10926:
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;main.c: 2367: writeEEPROM(0x89, val );
 12241  00132C  6A0F               	clrf	?_writeEEPROM+1,c
 12242  00132E  0E89               	movlw	137
 12243  001330  6E0E               	movwf	?_writeEEPROM,c
 12244  001332  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12245  001336  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12246                           
 12247                           ;main.c: 2368: rv = readEEPROM(0x89);
 12248  00133A  6A0F               	clrf	?_readEEPROM+1,c
 12249  00133C  0E89               	movlw	137
 12250  00133E  6E0E               	movwf	?_readEEPROM,c
 12251  001340  EC8D  F02E         	call	_readEEPROM	;wreg free
 12252  001344  D292               	goto	L19
 12253  001346                     l10928:
 12254                           
 12255                           ; BSR set to: 0
 12256                           ;main.c: 2373: writeEEPROM(0x8A, val );
 12257  001346  6A0F               	clrf	?_writeEEPROM+1,c
 12258  001348  0E8A               	movlw	138
 12259  00134A  6E0E               	movwf	?_writeEEPROM,c
 12260  00134C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12261  001350  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12262                           
 12263                           ;main.c: 2374: rv = readEEPROM(0x8A);
 12264  001354  6A0F               	clrf	?_readEEPROM+1,c
 12265  001356  0E8A               	movlw	138
 12266  001358  6E0E               	movwf	?_readEEPROM,c
 12267  00135A  EC8D  F02E         	call	_readEEPROM	;wreg free
 12268  00135E  D285               	goto	L19
 12269  001360                     l10930:
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;main.c: 2383: writeEEPROM(0x8B, val );
 12273  001360  6A0F               	clrf	?_writeEEPROM+1,c
 12274  001362  0E8B               	movlw	139
 12275  001364  6E0E               	movwf	?_writeEEPROM,c
 12276  001366  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12277  00136A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12278                           
 12279                           ;main.c: 2384: rv = readEEPROM(0x8B);
 12280  00136E  6A0F               	clrf	?_readEEPROM+1,c
 12281  001370  0E8B               	movlw	139
 12282  001372  6E0E               	movwf	?_readEEPROM,c
 12283  001374  EC8D  F02E         	call	_readEEPROM	;wreg free
 12284  001378  D278               	goto	L19
 12285  00137A                     l10932:
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;main.c: 2389: writeEEPROM(0x8C, val );
 12289  00137A  6A0F               	clrf	?_writeEEPROM+1,c
 12290  00137C  0E8C               	movlw	140
 12291  00137E  6E0E               	movwf	?_writeEEPROM,c
 12292  001380  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12293  001384  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12294                           
 12295                           ;main.c: 2390: rv = readEEPROM(0x8C);
 12296  001388  6A0F               	clrf	?_readEEPROM+1,c
 12297  00138A  0E8C               	movlw	140
 12298  00138C  6E0E               	movwf	?_readEEPROM,c
 12299  00138E  EC8D  F02E         	call	_readEEPROM	;wreg free
 12300  001392  D26B               	goto	L19
 12301  001394                     l10934:
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;main.c: 2395: writeEEPROM(0x8D, val );
 12305  001394  6A0F               	clrf	?_writeEEPROM+1,c
 12306  001396  0E8D               	movlw	141
 12307  001398  6E0E               	movwf	?_writeEEPROM,c
 12308  00139A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12309  00139E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12310                           
 12311                           ;main.c: 2396: rv = readEEPROM(0x8D);
 12312  0013A2  6A0F               	clrf	?_readEEPROM+1,c
 12313  0013A4  0E8D               	movlw	141
 12314  0013A6  6E0E               	movwf	?_readEEPROM,c
 12315  0013A8  EC8D  F02E         	call	_readEEPROM	;wreg free
 12316  0013AC  D25E               	goto	L19
 12317  0013AE                     l10936:
 12318                           
 12319                           ; BSR set to: 0
 12320                           ;main.c: 2401: writeEEPROM(0x8E, val );
 12321  0013AE  6A0F               	clrf	?_writeEEPROM+1,c
 12322  0013B0  0E8E               	movlw	142
 12323  0013B2  6E0E               	movwf	?_writeEEPROM,c
 12324  0013B4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12325  0013B8  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12326                           
 12327                           ;main.c: 2402: rv = readEEPROM(0x8E);
 12328  0013BC  6A0F               	clrf	?_readEEPROM+1,c
 12329  0013BE  0E8E               	movlw	142
 12330  0013C0  6E0E               	movwf	?_readEEPROM,c
 12331  0013C2  EC8D  F02E         	call	_readEEPROM	;wreg free
 12332  0013C6  D251               	goto	L19
 12333  0013C8                     l10938:
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;main.c: 2407: writeEEPROM(0x8F, val );
 12337  0013C8  6A0F               	clrf	?_writeEEPROM+1,c
 12338  0013CA  0E8F               	movlw	143
 12339  0013CC  6E0E               	movwf	?_writeEEPROM,c
 12340  0013CE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12341  0013D2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12342                           
 12343                           ;main.c: 2408: rv = readEEPROM(0x8F);
 12344  0013D6  6A0F               	clrf	?_readEEPROM+1,c
 12345  0013D8  0E8F               	movlw	143
 12346  0013DA  6E0E               	movwf	?_readEEPROM,c
 12347  0013DC  EC8D  F02E         	call	_readEEPROM	;wreg free
 12348  0013E0  D244               	goto	L19
 12349  0013E2                     l10940:
 12350                           
 12351                           ; BSR set to: 0
 12352                           ;main.c: 2413: writeEEPROM(0x90, val );
 12353  0013E2  6A0F               	clrf	?_writeEEPROM+1,c
 12354  0013E4  0E90               	movlw	144
 12355  0013E6  6E0E               	movwf	?_writeEEPROM,c
 12356  0013E8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12357  0013EC  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12358                           
 12359                           ;main.c: 2414: rv = readEEPROM(0x90);
 12360  0013F0  6A0F               	clrf	?_readEEPROM+1,c
 12361  0013F2  0E90               	movlw	144
 12362  0013F4  6E0E               	movwf	?_readEEPROM,c
 12363  0013F6  EC8D  F02E         	call	_readEEPROM	;wreg free
 12364  0013FA  D237               	goto	L19
 12365  0013FC                     l10942:
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;main.c: 2419: writeEEPROM(0x91, val );
 12369  0013FC  6A0F               	clrf	?_writeEEPROM+1,c
 12370  0013FE  0E91               	movlw	145
 12371  001400  6E0E               	movwf	?_writeEEPROM,c
 12372  001402  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12373  001406  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12374                           
 12375                           ;main.c: 2420: rv = readEEPROM(0x91);
 12376  00140A  6A0F               	clrf	?_readEEPROM+1,c
 12377  00140C  0E91               	movlw	145
 12378  00140E  6E0E               	movwf	?_readEEPROM,c
 12379  001410  EC8D  F02E         	call	_readEEPROM	;wreg free
 12380  001414  D22A               	goto	L19
 12381  001416                     l10944:
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;main.c: 2425: writeEEPROM(0x92, val );
 12385  001416  6A0F               	clrf	?_writeEEPROM+1,c
 12386  001418  0E92               	movlw	146
 12387  00141A  6E0E               	movwf	?_writeEEPROM,c
 12388  00141C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12389  001420  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12390                           
 12391                           ;main.c: 2426: rv = readEEPROM(0x92);
 12392  001424  6A0F               	clrf	?_readEEPROM+1,c
 12393  001426  0E92               	movlw	146
 12394  001428  6E0E               	movwf	?_readEEPROM,c
 12395  00142A  EC8D  F02E         	call	_readEEPROM	;wreg free
 12396  00142E  D21D               	goto	L19
 12397  001430                     l10946:
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;main.c: 2431: writeEEPROM(0x93, val );
 12401  001430  6A0F               	clrf	?_writeEEPROM+1,c
 12402  001432  0E93               	movlw	147
 12403  001434  6E0E               	movwf	?_writeEEPROM,c
 12404  001436  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12405  00143A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12406                           
 12407                           ;main.c: 2432: rv = readEEPROM(0x93);
 12408  00143E  6A0F               	clrf	?_readEEPROM+1,c
 12409  001440  0E93               	movlw	147
 12410  001442  6E0E               	movwf	?_readEEPROM,c
 12411  001444  EC8D  F02E         	call	_readEEPROM	;wreg free
 12412  001448  D210               	goto	L19
 12413  00144A                     l10948:
 12414                           
 12415                           ; BSR set to: 0
 12416                           ;main.c: 2437: writeEEPROM(0x94, val );
 12417  00144A  6A0F               	clrf	?_writeEEPROM+1,c
 12418  00144C  0E94               	movlw	148
 12419  00144E  6E0E               	movwf	?_writeEEPROM,c
 12420  001450  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12421  001454  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12422                           
 12423                           ;main.c: 2438: rv = readEEPROM(0x94);
 12424  001458  6A0F               	clrf	?_readEEPROM+1,c
 12425  00145A  0E94               	movlw	148
 12426  00145C  6E0E               	movwf	?_readEEPROM,c
 12427  00145E  EC8D  F02E         	call	_readEEPROM	;wreg free
 12428  001462  D203               	goto	L19
 12429  001464                     l10950:
 12430                           
 12431                           ; BSR set to: 0
 12432                           ;main.c: 2443: writeEEPROM(0x95, val );
 12433  001464  6A0F               	clrf	?_writeEEPROM+1,c
 12434  001466  0E95               	movlw	149
 12435  001468  6E0E               	movwf	?_writeEEPROM,c
 12436  00146A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12437  00146E  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12438                           
 12439                           ;main.c: 2444: rv = readEEPROM(0x95);
 12440  001472  6A0F               	clrf	?_readEEPROM+1,c
 12441  001474  0E95               	movlw	149
 12442  001476  6E0E               	movwf	?_readEEPROM,c
 12443  001478  EC8D  F02E         	call	_readEEPROM	;wreg free
 12444  00147C  D1F6               	goto	L19
 12445  00147E                     l10952:
 12446                           
 12447                           ; BSR set to: 0
 12448                           ;main.c: 2449: writeEEPROM(0x96, val );
 12449  00147E  6A0F               	clrf	?_writeEEPROM+1,c
 12450  001480  0E96               	movlw	150
 12451  001482  6E0E               	movwf	?_writeEEPROM,c
 12452  001484  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12453  001488  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12454                           
 12455                           ;main.c: 2450: rv = readEEPROM(0x96);
 12456  00148C  6A0F               	clrf	?_readEEPROM+1,c
 12457  00148E  0E96               	movlw	150
 12458  001490  6E0E               	movwf	?_readEEPROM,c
 12459  001492  EC8D  F02E         	call	_readEEPROM	;wreg free
 12460  001496  D1E9               	goto	L19
 12461  001498                     l10954:
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;main.c: 2459: writeEEPROM(0x97, val);
 12465  001498  6A0F               	clrf	?_writeEEPROM+1,c
 12466  00149A  0E97               	movlw	151
 12467  00149C  6E0E               	movwf	?_writeEEPROM,c
 12468  00149E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12469  0014A2  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12470                           
 12471                           ;main.c: 2460: rv = readEEPROM(0x97);
 12472  0014A6  6A0F               	clrf	?_readEEPROM+1,c
 12473  0014A8  0E97               	movlw	151
 12474  0014AA  6E0E               	movwf	?_readEEPROM,c
 12475  0014AC  EC8D  F02E         	call	_readEEPROM	;wreg free
 12476  0014B0  D1DC               	goto	L19
 12477  0014B2                     l10956:
 12478                           
 12479                           ; BSR set to: 0
 12480                           ;main.c: 2465: writeEEPROM(0x98, val);
 12481  0014B2  6A0F               	clrf	?_writeEEPROM+1,c
 12482  0014B4  0E98               	movlw	152
 12483  0014B6  6E0E               	movwf	?_writeEEPROM,c
 12484  0014B8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12485  0014BC  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12486                           
 12487                           ;main.c: 2466: rv = readEEPROM(0x98);
 12488  0014C0  6A0F               	clrf	?_readEEPROM+1,c
 12489  0014C2  0E98               	movlw	152
 12490  0014C4  6E0E               	movwf	?_readEEPROM,c
 12491  0014C6  EC8D  F02E         	call	_readEEPROM	;wreg free
 12492  0014CA  D1CF               	goto	L19
 12493  0014CC                     l10958:
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;main.c: 2471: writeEEPROM(0x99, val);
 12497  0014CC  6A0F               	clrf	?_writeEEPROM+1,c
 12498  0014CE  0E99               	movlw	153
 12499  0014D0  6E0E               	movwf	?_writeEEPROM,c
 12500  0014D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12501  0014D6  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12502  0014DA  6A0F               	clrf	?_readEEPROM+1,c
 12503  0014DC  0E99               	movlw	153
 12504  0014DE  6E0E               	movwf	?_readEEPROM,c
 12505  0014E0  EC8D  F02E         	call	_readEEPROM	;wreg free
 12506  0014E4                     l519:
 12507                           
 12508                           ;main.c: 2476: writeEEPROM(0x9A, val);
 12509  0014E4  6A0F               	clrf	?_writeEEPROM+1,c
 12510  0014E6  0E9A               	movlw	154
 12511  0014E8  6E0E               	movwf	?_writeEEPROM,c
 12512  0014EA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12513  0014EE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12514                           
 12515                           ;main.c: 2477: rv = readEEPROM(0x9A);
 12516  0014F2  6A0F               	clrf	?_readEEPROM+1,c
 12517  0014F4  0E9A               	movlw	154
 12518  0014F6  6E0E               	movwf	?_readEEPROM,c
 12519  0014F8  EC8D  F02E         	call	_readEEPROM	;wreg free
 12520  0014FC  D1B6               	goto	L19
 12521  0014FE                     l10960:
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;main.c: 2482: writeEEPROM(0x9B, val);
 12525  0014FE  6A0F               	clrf	?_writeEEPROM+1,c
 12526  001500  0E9B               	movlw	155
 12527  001502  6E0E               	movwf	?_writeEEPROM,c
 12528  001504  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12529  001508  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12530                           
 12531                           ;main.c: 2483: rv = readEEPROM(0x9B);
 12532  00150C  6A0F               	clrf	?_readEEPROM+1,c
 12533  00150E  0E9B               	movlw	155
 12534  001510  6E0E               	movwf	?_readEEPROM,c
 12535  001512  EC8D  F02E         	call	_readEEPROM	;wreg free
 12536  001516  D1A9               	goto	L19
 12537  001518                     l10962:
 12538                           
 12539                           ; BSR set to: 0
 12540                           ;main.c: 2488: writeEEPROM(0x9C, val);
 12541  001518  6A0F               	clrf	?_writeEEPROM+1,c
 12542  00151A  0E9C               	movlw	156
 12543  00151C  6E0E               	movwf	?_writeEEPROM,c
 12544  00151E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12545  001522  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12546                           
 12547                           ;main.c: 2489: rv = readEEPROM(0x9C);
 12548  001526  6A0F               	clrf	?_readEEPROM+1,c
 12549  001528  0E9C               	movlw	156
 12550  00152A  6E0E               	movwf	?_readEEPROM,c
 12551  00152C  EC8D  F02E         	call	_readEEPROM	;wreg free
 12552  001530  D19C               	goto	L19
 12553  001532                     l522:
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;main.c: 2494: rv = 0;
 12557  001532  6A24               	clrf	vscp_writeAppReg@rv,c
 12558                           
 12559                           ;main.c: 2495: break;
 12560  001534  D19B               	goto	l10998
 12561  001536                     l10964:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;main.c: 2503: writeEEPROM(0xF2, val);
 12565  001536  6A0F               	clrf	?_writeEEPROM+1,c
 12566  001538  0EF2               	movlw	242
 12567  00153A  6E0E               	movwf	?_writeEEPROM,c
 12568  00153C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12569  001540  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12570                           
 12571                           ;main.c: 2504: rv = readEEPROM(0xF2);
 12572  001544  6A0F               	clrf	?_readEEPROM+1,c
 12573  001546  0EF2               	movlw	242
 12574  001548  6E0E               	movwf	?_readEEPROM,c
 12575  00154A  EC8D  F02E         	call	_readEEPROM	;wreg free
 12576  00154E  D18D               	goto	L19
 12577  001550                     l10966:
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;main.c: 2508: writeEEPROM(0xF3, val);
 12581  001550  6A0F               	clrf	?_writeEEPROM+1,c
 12582  001552  0EF3               	movlw	243
 12583  001554  6E0E               	movwf	?_writeEEPROM,c
 12584  001556  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12585  00155A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12586                           
 12587                           ;main.c: 2509: rv = readEEPROM(0xF3);
 12588  00155E  6A0F               	clrf	?_readEEPROM+1,c
 12589  001560  0EF3               	movlw	243
 12590  001562  6E0E               	movwf	?_readEEPROM,c
 12591  001564  EC8D  F02E         	call	_readEEPROM	;wreg free
 12592  001568  D180               	goto	L19
 12593  00156A                     l10968:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;main.c: 2513: rv = ~val;
 12597  00156A  1C21               	comf	vscp_writeAppReg@val,w,c
 12598  00156C  D17E               	goto	L19
 12599  00156E                     l10972:
 12600                           
 12601                           ; BSR set to: 0
 12602  00156E  5023               	movf	vscp_writeAppReg@reg,w,c
 12603                           
 12604                           ; Switch size 1, requested type "speed"
 12605                           ; Number of cases is 96, Range of values is 0 to 119
 12606                           ; switch strategies available:
 12607                           ; Name         Instructions Cycles
 12608                           ; simple_byte          289   145 (average)
 12609                           ;	Chosen strategy is simple_byte
 12610  001570  E102 EFC2  F005    	bz	l10782
 12611  001576  0A01               	xorlw	1	; case 1
 12612  001578  E102 EFD0  F005    	bz	l10784
 12613  00157E  0A03               	xorlw	3	; case 2
 12614  001580  E102 EFDE  F005    	bz	l10786
 12615  001586  0A01               	xorlw	1	; case 3
 12616  001588  E102 EFEC  F005    	bz	l10788
 12617  00158E  0A07               	xorlw	7	; case 4
 12618  001590  E102 EFFA  F005    	bz	l10790
 12619  001596  0A01               	xorlw	1	; case 5
 12620  001598  E102 EF08  F006    	bz	l10792
 12621  00159E  0A03               	xorlw	3	; case 6
 12622  0015A0  E102 EF16  F006    	bz	l10794
 12623  0015A6  0A01               	xorlw	1	; case 7
 12624  0015A8  E102 EF24  F006    	bz	l10796
 12625  0015AE  0A13               	xorlw	19	; case 20
 12626  0015B0  E102 EF32  F006    	bz	l10798
 12627  0015B6  0A01               	xorlw	1	; case 21
 12628  0015B8  E102 EF40  F006    	bz	l10800
 12629  0015BE  0A03               	xorlw	3	; case 22
 12630  0015C0  E102 EF4E  F006    	bz	l10802
 12631  0015C6  0A01               	xorlw	1	; case 23
 12632  0015C8  E102 EF5C  F006    	bz	l10804
 12633  0015CE  0A0F               	xorlw	15	; case 24
 12634  0015D0  E102 EF6A  F006    	bz	l10806
 12635  0015D6  0A01               	xorlw	1	; case 25
 12636  0015D8  E102 EF78  F006    	bz	l10808
 12637  0015DE  0A3F               	xorlw	63	; case 38
 12638  0015E0  E102 EF86  F006    	bz	l10810
 12639  0015E6  0A01               	xorlw	1	; case 39
 12640  0015E8  E102 EF94  F006    	bz	l10812
 12641  0015EE  0A0F               	xorlw	15	; case 40
 12642  0015F0  E102 EFA2  F006    	bz	l10814
 12643  0015F6  0A01               	xorlw	1	; case 41
 12644  0015F8  E102 EFB0  F006    	bz	l10816
 12645  0015FE  0A03               	xorlw	3	; case 42
 12646  001600  E102 EFBE  F006    	bz	l10818
 12647  001606  0A01               	xorlw	1	; case 43
 12648  001608  E102 EFCC  F006    	bz	l10820
 12649  00160E  0A07               	xorlw	7	; case 44
 12650  001610  E102 EFDA  F006    	bz	l10822
 12651  001616  0A01               	xorlw	1	; case 45
 12652  001618  E102 EFE8  F006    	bz	l10824
 12653  00161E  0A03               	xorlw	3	; case 46
 12654  001620  E102 EFF6  F006    	bz	l10826
 12655  001626  0A01               	xorlw	1	; case 47
 12656  001628  E102 EF04  F007    	bz	l10828
 12657  00162E  0A1F               	xorlw	31	; case 48
 12658  001630  E102 EF12  F007    	bz	l10830
 12659  001636  0A01               	xorlw	1	; case 49
 12660  001638  E101 D402          	bz	l10832
 12661  00163C  0A03               	xorlw	3	; case 50
 12662  00163E  E101 D40D          	bz	l10834
 12663  001642  0A01               	xorlw	1	; case 51
 12664  001644  E101 D418          	bz	l10836
 12665  001648  0A07               	xorlw	7	; case 52
 12666  00164A  E101 D423          	bz	l10838
 12667  00164E  0A01               	xorlw	1	; case 53
 12668  001650  E101 D42E          	bz	l10840
 12669  001654  0A03               	xorlw	3	; case 54
 12670  001656  E101 D439          	bz	l10842
 12671  00165A  0A01               	xorlw	1	; case 55
 12672  00165C  E101 D444          	bz	l10844
 12673  001660  0A0F               	xorlw	15	; case 56
 12674  001662  E101 D44F          	bz	l10846
 12675  001666  0A01               	xorlw	1	; case 57
 12676  001668  E101 D45A          	bz	l10848
 12677  00166C  0A03               	xorlw	3	; case 58
 12678  00166E  E101 D465          	bz	l10850
 12679  001672  0A01               	xorlw	1	; case 59
 12680  001674  E101 D470          	bz	l10852
 12681  001678  0A07               	xorlw	7	; case 60
 12682  00167A  E101 D47B          	bz	l10854
 12683  00167E  0A01               	xorlw	1	; case 61
 12684  001680  E101 D486          	bz	l10856
 12685  001684  0A03               	xorlw	3	; case 62
 12686  001686  E101 D491          	bz	l10858
 12687  00168A  0A01               	xorlw	1	; case 63
 12688  00168C  E101 D49C          	bz	l10860
 12689  001690  0A7F               	xorlw	127	; case 64
 12690  001692  E101 D4A7          	bz	l10862
 12691  001696  0A01               	xorlw	1	; case 65
 12692  001698  E101 D4B2          	bz	l10864
 12693  00169C  0A03               	xorlw	3	; case 66
 12694  00169E  E101 D4BD          	bz	l10866
 12695  0016A2  0A01               	xorlw	1	; case 67
 12696  0016A4  E101 D4C8          	bz	l10868
 12697  0016A8  0A07               	xorlw	7	; case 68
 12698  0016AA  E101 D4D3          	bz	l10870
 12699  0016AE  0A01               	xorlw	1	; case 69
 12700  0016B0  E101 D4DD          	bz	l10872
 12701  0016B4  0A03               	xorlw	3	; case 70
 12702  0016B6  E101 D4E7          	bz	l10874
 12703  0016BA  0A01               	xorlw	1	; case 71
 12704  0016BC  E101 D4F1          	bz	l10876
 12705  0016C0  0A0F               	xorlw	15	; case 72
 12706  0016C2  E101 D4FB          	bz	l10878
 12707  0016C6  0A01               	xorlw	1	; case 73
 12708  0016C8  E101 D505          	bz	l10880
 12709  0016CC  0A03               	xorlw	3	; case 74
 12710  0016CE  E101 D50F          	bz	l10882
 12711  0016D2  0A01               	xorlw	1	; case 75
 12712  0016D4  E101 D519          	bz	l10884
 12713  0016D8  0A07               	xorlw	7	; case 76
 12714  0016DA  E101 D523          	bz	l10886
 12715  0016DE  0A01               	xorlw	1	; case 77
 12716  0016E0  E101 D52D          	bz	l10888
 12717  0016E4  0A03               	xorlw	3	; case 78
 12718  0016E6  E101 D537          	bz	l10890
 12719  0016EA  0A01               	xorlw	1	; case 79
 12720  0016EC  E101 D541          	bz	l10892
 12721  0016F0  0A1F               	xorlw	31	; case 80
 12722  0016F2  E101 D54B          	bz	l10894
 12723  0016F6  0A01               	xorlw	1	; case 81
 12724  0016F8  E101 D555          	bz	l10896
 12725  0016FC  0A03               	xorlw	3	; case 82
 12726  0016FE  E101 D55F          	bz	l10898
 12727  001702  0A01               	xorlw	1	; case 83
 12728  001704  E101 D569          	bz	l10900
 12729  001708  0A07               	xorlw	7	; case 84
 12730  00170A  E101 D573          	bz	l10902
 12731  00170E  0A01               	xorlw	1	; case 85
 12732  001710  E101 D57D          	bz	l10904
 12733  001714  0A03               	xorlw	3	; case 86
 12734  001716  E101 D587          	bz	l10906
 12735  00171A  0A01               	xorlw	1	; case 87
 12736  00171C  E101 D591          	bz	l10908
 12737  001720  0A0F               	xorlw	15	; case 88
 12738  001722  E101 D59B          	bz	l10910
 12739  001726  0A01               	xorlw	1	; case 89
 12740  001728  E101 D5A5          	bz	l10912
 12741  00172C  0A03               	xorlw	3	; case 90
 12742  00172E  E101 D5AF          	bz	l10914
 12743  001732  0A01               	xorlw	1	; case 91
 12744  001734  E101 D5B9          	bz	l10916
 12745  001738  0A07               	xorlw	7	; case 92
 12746  00173A  E101 D5C3          	bz	l10918
 12747  00173E  0A01               	xorlw	1	; case 93
 12748  001740  E101 D5CD          	bz	l10920
 12749  001744  0A03               	xorlw	3	; case 94
 12750  001746  E101 D5D7          	bz	l10922
 12751  00174A  0A01               	xorlw	1	; case 95
 12752  00174C  E101 D5E1          	bz	l10924
 12753  001750  0A3F               	xorlw	63	; case 96
 12754  001752  E101 D5EB          	bz	l10926
 12755  001756  0A01               	xorlw	1	; case 97
 12756  001758  E101 D5F5          	bz	l10928
 12757  00175C  0A03               	xorlw	3	; case 98
 12758  00175E  E101 D5FF          	bz	l10930
 12759  001762  0A01               	xorlw	1	; case 99
 12760  001764  E101 D609          	bz	l10932
 12761  001768  0A07               	xorlw	7	; case 100
 12762  00176A  E101 D613          	bz	l10934
 12763  00176E  0A01               	xorlw	1	; case 101
 12764  001770  E101 D61D          	bz	l10936
 12765  001774  0A03               	xorlw	3	; case 102
 12766  001776  E101 D627          	bz	l10938
 12767  00177A  0A01               	xorlw	1	; case 103
 12768  00177C  E101 D631          	bz	l10940
 12769  001780  0A0F               	xorlw	15	; case 104
 12770  001782  E101 D63B          	bz	l10942
 12771  001786  0A01               	xorlw	1	; case 105
 12772  001788  E101 D645          	bz	l10944
 12773  00178C  0A03               	xorlw	3	; case 106
 12774  00178E  E101 D64F          	bz	l10946
 12775  001792  0A01               	xorlw	1	; case 107
 12776  001794  E101 D659          	bz	l10948
 12777  001798  0A07               	xorlw	7	; case 108
 12778  00179A  E101 D663          	bz	l10950
 12779  00179E  0A01               	xorlw	1	; case 109
 12780  0017A0  E101 D66D          	bz	l10952
 12781  0017A4  0A03               	xorlw	3	; case 110
 12782  0017A6  E101 D677          	bz	l10954
 12783  0017AA  0A01               	xorlw	1	; case 111
 12784  0017AC  E101 D681          	bz	l10956
 12785  0017B0  0A1F               	xorlw	31	; case 112
 12786  0017B2  E101 D68B          	bz	l10958
 12787  0017B6  0A01               	xorlw	1	; case 113
 12788  0017B8  E101 D694          	bz	l519
 12789  0017BC  0A03               	xorlw	3	; case 114
 12790  0017BE  E101 D69E          	bz	l10960
 12791  0017C2  0A01               	xorlw	1	; case 115
 12792  0017C4  E101 D6A8          	bz	l10962
 12793  0017C8  0A07               	xorlw	7	; case 116
 12794  0017CA  E101 D6B2          	bz	l522
 12795  0017CE  0A01               	xorlw	1	; case 117
 12796  0017D0  E101 D6AF          	bz	l522
 12797  0017D4  0A03               	xorlw	3	; case 118
 12798  0017D6  E101 D6AE          	bz	l10964
 12799  0017DA  0A01               	xorlw	1	; case 119
 12800  0017DC  E101 D6B8          	bz	l10966
 12801  0017E0  D6C4               	goto	l10968
 12802  0017E2                     l10974:
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;main.c: 2517: else if (1 == vscp_page_select) {
 12806  0017E2  0446               	decf	_vscp_page_select,w,c
 12807  0017E4  1047               	iorwf	_vscp_page_select+1,w,c
 12808  0017E6  E142               	bnz	l10998
 12809                           
 12810                           ; BSR set to: 0
 12811                           ;main.c: 2520: if (reg < 72) {
 12812  0017E8  0E48               	movlw	72
 12813  0017EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12814  0017EC  D016               	goto	l10982
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;main.c: 2521: writeEEPROM(0xAA + reg, val);
 12818  0017EE  0EAA               	movlw	170
 12819  0017F0  2423               	addwf	vscp_writeAppReg@reg,w,c
 12820  0017F2  6E0E               	movwf	?_writeEEPROM,c
 12821  0017F4  6A0F               	clrf	?_writeEEPROM+1,c
 12822  0017F6  0E00               	movlw	0
 12823  0017F8  220F               	addwfc	?_writeEEPROM+1,f,c
 12824  0017FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12825  0017FE  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12826                           
 12827                           ;main.c: 2522: rv = readEEPROM(0xAA + reg );
 12828  001802  0EAA               	movlw	170
 12829  001804  2423               	addwf	vscp_writeAppReg@reg,w,c
 12830  001806  6E0E               	movwf	?_readEEPROM,c
 12831  001808  6A0F               	clrf	?_readEEPROM+1,c
 12832  00180A  0E00               	movlw	0
 12833  00180C  220F               	addwfc	?_readEEPROM+1,f,c
 12834  00180E  EC8D  F02E         	call	_readEEPROM	;wreg free
 12835  001812  6E24               	movwf	vscp_writeAppReg@rv,c
 12836                           
 12837                           ;main.c: 2523: writeCoeffs2Ram();
 12838  001814  ECE6  F027         	call	_writeCoeffs2Ram	;wreg free
 12839                           
 12840                           ;main.c: 2524: }
 12841  001818  D029               	goto	l10998
 12842  00181A                     l10982:
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;main.c: 2526: else if (reg < 84) {
 12846  00181A  0E54               	movlw	84
 12847  00181C  6023               	cpfslt	vscp_writeAppReg@reg,c
 12848  00181E  D010               	goto	l10994
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;main.c: 2528: uint8_t pos = reg - 72;
 12852  001820  5023               	movf	vscp_writeAppReg@reg,w,c
 12853  001822  0FB8               	addlw	184
 12854  001824  6E22               	movwf	vscp_writeAppReg@pos,c
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;main.c: 2529: if ( pos % 2 ) {
 12858  001826  A022               	btfss	vscp_writeAppReg@pos,0,c
 12859  001828  D002               	goto	l10990
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;main.c: 2530: pos--;
 12863  00182A  0622               	decf	vscp_writeAppReg@pos,f,c
 12864                           
 12865                           ;main.c: 2531: }
 12866  00182C  D001               	goto	l10992
 12867  00182E                     l10990:
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;main.c: 2532: else {
 12871                           ;main.c: 2533: pos++;
 12872  00182E  2A22               	incf	vscp_writeAppReg@pos,f,c
 12873  001830                     l10992:
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;main.c: 2534: }
 12877                           ;main.c: 2535: rv = adc[ pos ];
 12878  001830  0E9C               	movlw	low _adc
 12879  001832  2422               	addwf	vscp_writeAppReg@pos,w,c
 12880  001834  6ED9               	movwf	fsr2l,c
 12881  001836  6ADA               	clrf	fsr2h,c
 12882  001838  0E01               	movlw	high _adc
 12883  00183A  22DA               	addwfc	fsr2h,f,c
 12884  00183C  50DF               	movf	indf2,w,c
 12885  00183E  D015               	goto	L19
 12886  001840                     l10994:
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;main.c: 2538: else if (reg < 98) {
 12890  001840  0E62               	movlw	98
 12891  001842  6023               	cpfslt	vscp_writeAppReg@reg,c
 12892  001844  D013               	goto	l10998
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;main.c: 2539: writeEEPROM( 0x9E + reg - 84, val );
 12896  001846  0E4A               	movlw	74
 12897  001848  2423               	addwf	vscp_writeAppReg@reg,w,c
 12898  00184A  6E0E               	movwf	?_writeEEPROM,c
 12899  00184C  6A0F               	clrf	?_writeEEPROM+1,c
 12900  00184E  0E00               	movlw	0
 12901  001850  220F               	addwfc	?_writeEEPROM+1,f,c
 12902  001852  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12903  001856  EC7E  F02D         	call	_writeEEPROM	;wreg free
 12904                           
 12905                           ;main.c: 2540: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12906  00185A  0E4A               	movlw	74
 12907  00185C  2423               	addwf	vscp_writeAppReg@reg,w,c
 12908  00185E  6E0E               	movwf	?_readEEPROM,c
 12909  001860  6A0F               	clrf	?_readEEPROM+1,c
 12910  001862  0E00               	movlw	0
 12911  001864  220F               	addwfc	?_readEEPROM+1,f,c
 12912  001866  EC8D  F02E         	call	_readEEPROM	;wreg free
 12913  00186A                     L19:
 12914  00186A  6E24               	movwf	vscp_writeAppReg@rv,c
 12915  00186C                     l10998:
 12916                           
 12917                           ;main.c: 2541: }
 12918                           ;main.c: 2542: }
 12919                           ;main.c: 2544: return rv;
 12920  00186C  5024               	movf	vscp_writeAppReg@rv,w,c
 12921  00186E  0012               	return	
 12922  001870                     __end_of_vscp_writeAppReg:
 12923                           	opt stack 0
 12924                           tblptru	equ	0xFF8
 12925                           tblptrh	equ	0xFF7
 12926                           tblptrl	equ	0xFF6
 12927                           tablat	equ	0xFF5
 12928                           prodh	equ	0xFF4
 12929                           prodl	equ	0xFF3
 12930                           postinc0	equ	0xFEE
 12931                           wreg	equ	0xFE8
 12932                           postdec1	equ	0xFE5
 12933                           fsr1h	equ	0xFE2
 12934                           fsr1l	equ	0xFE1
 12935                           indf2	equ	0xFDF
 12936                           postinc2	equ	0xFDE
 12937                           postdec2	equ	0xFDD
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function _vscp_readRegister *****************
 12943 ;; Defined at:
 12944 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;  reg             1    wreg     unsigned char 
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;  reg             1   20[COMRAM] unsigned char 
 12949 ;; Return value:  Size  Location     Type
 12950 ;;                  1    wreg      unsigned char 
 12951 ;; Registers used:
 12952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : F/0
 12955 ;;		On exit  : 0/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12958 ;;      Params:         0       0       0       0       0       0       0
 12959 ;;      Locals:         1       0       0       0       0       0       0
 12960 ;;      Temps:          0       0       0       0       0       0       0
 12961 ;;      Totals:         1       0       0       0       0       0       0
 12962 ;;Total ram usage:        1 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    5
 12965 ;; This function calls:
 12966 ;;		_vscp_readAppReg
 12967 ;;		_vscp_readStdReg
 12968 ;; This function is called by:
 12969 ;;		_vscp_handleProtocolEvent
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text45
 12974  005C0E                     __ptext45:
 12975                           	opt stack 0
 12976  005C0E                     _vscp_readRegister:
 12977                           	opt stack 24
 12978                           
 12979                           ;incstack = 0
 12980                           ;incstack = 0
 12981                           ;vscp_readRegister@reg stored from wreg
 12982  005C0E  CFE8 F015          	movff	wreg,vscp_readRegister@reg
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 12986  005C12  0E7F               	movlw	127
 12987  005C14  6415               	cpfsgt	vscp_readRegister@reg,c
 12988  005C16  D004               	goto	l11246
 12989                           
 12990                           ; BSR set to: 0
 12991                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 12992  005C18  5015               	movf	vscp_readRegister@reg,w,c
 12993  005C1A  EC32  F024         	call	_vscp_readStdReg
 12994  005C1E  D003               	goto	l1107
 12995  005C20                     l11246:
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 12999  005C20  5015               	movf	vscp_readRegister@reg,w,c
 13000  005C22  EC5B  F015         	call	_vscp_readAppReg
 13001  005C26                     l1107:
 13002  005C26  0012               	return	
 13003  005C28                     __end_of_vscp_readRegister:
 13004                           	opt stack 0
 13005                           tblptru	equ	0xFF8
 13006                           tblptrh	equ	0xFF7
 13007                           tblptrl	equ	0xFF6
 13008                           tablat	equ	0xFF5
 13009                           prodh	equ	0xFF4
 13010                           prodl	equ	0xFF3
 13011                           postinc0	equ	0xFEE
 13012                           wreg	equ	0xFE8
 13013                           postdec1	equ	0xFE5
 13014                           fsr1h	equ	0xFE2
 13015                           fsr1l	equ	0xFE1
 13016                           indf2	equ	0xFDF
 13017                           postinc2	equ	0xFDE
 13018                           postdec2	equ	0xFDD
 13019                           fsr2h	equ	0xFDA
 13020                           fsr2l	equ	0xFD9
 13021                           status	equ	0xFD8
 13022                           
 13023 ;; *************** function _vscp_readStdReg *****************
 13024 ;; Defined at:
 13025 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 13026 ;; Parameters:    Size  Location     Type
 13027 ;;  reg             1    wreg     unsigned char 
 13028 ;; Auto vars:     Size  Location     Type
 13029 ;;  reg             1   19[COMRAM] unsigned char 
 13030 ;;  rv              1   18[COMRAM] unsigned char 
 13031 ;; Return value:  Size  Location     Type
 13032 ;;                  1    wreg      unsigned char 
 13033 ;; Registers used:
 13034 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13035 ;; Tracked objects:
 13036 ;;		On entry : F/0
 13037 ;;		On exit  : 0/0
 13038 ;;		Unchanged: 0/0
 13039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13040 ;;      Params:         0       0       0       0       0       0       0
 13041 ;;      Locals:         2       0       0       0       0       0       0
 13042 ;;      Temps:          0       0       0       0       0       0       0
 13043 ;;      Totals:         2       0       0       0       0       0       0
 13044 ;;Total ram usage:        2 bytes
 13045 ;; Hardware stack levels used:    1
 13046 ;; Hardware stack levels required when called:    4
 13047 ;; This function calls:
 13048 ;;		_vscp_getMajorVersion
 13049 ;;		_vscp_getMinorVersion
 13050 ;;		_vscp_getSubMinorVersion
 13051 ;;		_vscp_getGUID
 13052 ;;		_vscp_getMDF_URL
 13053 ;;		_vscp_getUserID
 13054 ;;		_vscp_getManufacturerId
 13055 ;;		_vscp_getBootLoaderAlgorithm
 13056 ;;		_vscp_getBufferSize
 13057 ;;		_vscp_getRegisterPagesUsed
 13058 ;; This function is called by:
 13059 ;;		_vscp_readRegister
 13060 ;;		_vscp_handleProtocolEvent
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           	psect	text46
 13065  004864                     __ptext46:
 13066                           	opt stack 0
 13067  004864                     _vscp_readStdReg:
 13068                           	opt stack 25
 13069                           
 13070                           ;incstack = 0
 13071                           ;incstack = 0
 13072                           ;vscp_readStdReg@reg stored from wreg
 13073  004864  CFE8 F014          	movff	wreg,vscp_readStdReg@reg
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 13077                           
 13078                           ; BSR set to: 0
 13079  004868  5014               	movf	vscp_readStdReg@reg,w,c
 13080  00486A  0A80               	xorlw	128
 13081  00486C  E104               	bnz	l11256
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 13085  00486E  C04B  F013         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13086                           
 13087                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 13088  004872  6A4B               	clrf	_vscp_alarmstatus,c
 13089                           
 13090                           ;vscp_firmware.c: 575: }
 13091  004874  D067               	goto	l11322
 13092  004876                     l11256:
 13093                           
 13094                           ; BSR set to: 0
 13095                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 13096  004876  5014               	movf	vscp_readStdReg@reg,w,c
 13097  004878  0A81               	xorlw	129
 13098  00487A  E102               	bnz	l11260
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;vscp_firmware.c: 579: rv = 1;
 13102  00487C  0E01               	movlw	1
 13103  00487E  D061               	goto	L20
 13104  004880                     l11260:
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 13108  004880  5014               	movf	vscp_readStdReg@reg,w,c
 13109  004882  0A82               	xorlw	130
 13110  004884  E102               	bnz	l11264
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;vscp_firmware.c: 585: rv = 5;
 13114  004886  0E05               	movlw	5
 13115  004888  D05C               	goto	L20
 13116  00488A                     l11264:
 13117                           
 13118                           ; BSR set to: 0
 13119                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 13120  00488A  5014               	movf	vscp_readStdReg@reg,w,c
 13121  00488C  0A83               	xorlw	131
 13122  00488E  E102               	bnz	l11268
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;vscp_firmware.c: 591: rv = 0;
 13126  004890  6A13               	clrf	vscp_readStdReg@rv,c
 13127                           
 13128                           ;vscp_firmware.c: 593: }
 13129  004892  D058               	goto	l11322
 13130  004894                     l11268:
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 13134  004894  5014               	movf	vscp_readStdReg@reg,w,c
 13135  004896  0A94               	xorlw	148
 13136  004898  E103               	bnz	l11272
 13137                           
 13138                           ; BSR set to: 0
 13139                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 13140  00489A  ECDE  F02E         	call	_vscp_getMajorVersion	;wreg free
 13141  00489E  D051               	goto	L20
 13142  0048A0                     l11272:
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 13146  0048A0  5014               	movf	vscp_readStdReg@reg,w,c
 13147  0048A2  0A95               	xorlw	149
 13148  0048A4  E103               	bnz	l11276
 13149                           
 13150                           ; BSR set to: 0
 13151                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 13152  0048A6  ECDD  F02E         	call	_vscp_getMinorVersion	;wreg free
 13153  0048AA  D04B               	goto	L20
 13154  0048AC                     l11276:
 13155                           
 13156                           ; BSR set to: 0
 13157                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 13158  0048AC  5014               	movf	vscp_readStdReg@reg,w,c
 13159  0048AE  0A96               	xorlw	150
 13160  0048B0  E103               	bnz	l11280
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 13164  0048B2  ECDC  F02E         	call	_vscp_getSubMinorVersion	;wreg free
 13165  0048B6  D045               	goto	L20
 13166  0048B8                     l11280:
 13167                           
 13168                           ; BSR set to: 0
 13169                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 13170  0048B8  0E89               	movlw	137
 13171  0048BA  6014               	cpfslt	vscp_readStdReg@reg,c
 13172  0048BC  D005               	goto	l11284
 13173                           
 13174                           ; BSR set to: 0
 13175                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 13176  0048BE  5014               	movf	vscp_readStdReg@reg,w,c
 13177  0048C0  0F7C               	addlw	124
 13178  0048C2  EC67  F02E         	call	_vscp_getUserID
 13179  0048C6  D03D               	goto	L20
 13180  0048C8                     l11284:
 13181                           
 13182                           ; BSR set to: 0
 13183                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 13184                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 13185  0048C8  0E88               	movlw	136
 13186  0048CA  6414               	cpfsgt	vscp_readStdReg@reg,c
 13187  0048CC  D008               	goto	l11290
 13188                           
 13189                           ; BSR set to: 0
 13190  0048CE  0E91               	movlw	145
 13191  0048D0  6014               	cpfslt	vscp_readStdReg@reg,c
 13192  0048D2  D005               	goto	l11290
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 13196  0048D4  5014               	movf	vscp_readStdReg@reg,w,c
 13197  0048D6  0F77               	addlw	119
 13198  0048D8  EC5D  F02E         	call	_vscp_getManufacturerId
 13199  0048DC  D032               	goto	L20
 13200  0048DE                     l11290:
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 13204  0048DE  5014               	movf	vscp_readStdReg@reg,w,c
 13205  0048E0  0A91               	xorlw	145
 13206  0048E2  E103               	bnz	l11294
 13207                           
 13208                           ; BSR set to: 0
 13209                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 13210  0048E4  C0BA  F013         	movff	_vscp_nickname,vscp_readStdReg@rv
 13211                           
 13212                           ;vscp_firmware.c: 630: }
 13213  0048E8  D02D               	goto	l11322
 13214  0048EA                     l11294:
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 13218  0048EA  5014               	movf	vscp_readStdReg@reg,w,c
 13219  0048EC  0A93               	xorlw	147
 13220  0048EE  E103               	bnz	l11298
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 13224  0048F0  C046  F013         	movff	_vscp_page_select,vscp_readStdReg@rv
 13225                           
 13226                           ;vscp_firmware.c: 636: }
 13227  0048F4  D027               	goto	l11322
 13228  0048F6                     l11298:
 13229                           
 13230                           ; BSR set to: 0
 13231                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 13232  0048F6  5014               	movf	vscp_readStdReg@reg,w,c
 13233  0048F8  0A92               	xorlw	146
 13234  0048FA  E102               	bnz	l11302
 13235                           
 13236                           ; BSR set to: 0
 13237                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 13238  0048FC  5047               	movf	_vscp_page_select+1,w,c
 13239  0048FE  D021               	goto	L20
 13240  004900                     l11302:
 13241                           
 13242                           ; BSR set to: 0
 13243                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 13244  004900  5014               	movf	vscp_readStdReg@reg,w,c
 13245  004902  0A97               	xorlw	151
 13246  004904  E103               	bnz	l11306
 13247                           
 13248                           ; BSR set to: 0
 13249                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 13250  004906  ECDB  F02E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13251  00490A  D01B               	goto	L20
 13252  00490C                     l11306:
 13253                           
 13254                           ; BSR set to: 0
 13255                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 13256  00490C  5014               	movf	vscp_readStdReg@reg,w,c
 13257  00490E  0A98               	xorlw	152
 13258  004910  E103               	bnz	l11310
 13259                           
 13260                           ; BSR set to: 0
 13261                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 13262  004912  ECDA  F02E         	call	_vscp_getBufferSize	;wreg free
 13263  004916  D015               	goto	L20
 13264  004918                     l11310:
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 13268  004918  5014               	movf	vscp_readStdReg@reg,w,c
 13269  00491A  0A99               	xorlw	153
 13270  00491C  E103               	bnz	l11314
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 13274  00491E  ECD9  F02E         	call	_vscp_getRegisterPagesUsed	;wreg free
 13275  004922  D00F               	goto	L20
 13276  004924                     l11314:
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;vscp_firmware.c: 656: else if ((reg > (0xD0 - 1)) &&
 13280                           ;vscp_firmware.c: 657: (reg < 0xE0)) {
 13281  004924  0ECF               	movlw	207
 13282  004926  6414               	cpfsgt	vscp_readStdReg@reg,c
 13283  004928  D008               	goto	l11320
 13284                           
 13285                           ; BSR set to: 0
 13286  00492A  0EE0               	movlw	224
 13287  00492C  6014               	cpfslt	vscp_readStdReg@reg,c
 13288  00492E  D005               	goto	l11320
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;vscp_firmware.c: 660: rv = vscp_getGUID(reg - 0xD0);
 13292  004930  5014               	movf	vscp_readStdReg@reg,w,c
 13293  004932  0F30               	addlw	48
 13294  004934  EC71  F02E         	call	_vscp_getGUID
 13295  004938  D004               	goto	L20
 13296  00493A                     l11320:
 13297                           
 13298                           ; BSR set to: 0
 13299                           ;vscp_firmware.c: 663: else {
 13300                           ;vscp_firmware.c: 666: rv = vscp_getMDF_URL(reg - 0xE0);
 13301  00493A  5014               	movf	vscp_readStdReg@reg,w,c
 13302  00493C  0F20               	addlw	32
 13303  00493E  EC39  F02E         	call	_vscp_getMDF_URL
 13304  004942                     L20:
 13305  004942  6E13               	movwf	vscp_readStdReg@rv,c
 13306  004944                     l11322:
 13307                           
 13308                           ;vscp_firmware.c: 668: }
 13309                           ;vscp_firmware.c: 670: return rv;
 13310  004944  5013               	movf	vscp_readStdReg@rv,w,c
 13311  004946  0012               	return	
 13312  004948                     __end_of_vscp_readStdReg:
 13313                           	opt stack 0
 13314                           tblptru	equ	0xFF8
 13315                           tblptrh	equ	0xFF7
 13316                           tblptrl	equ	0xFF6
 13317                           tablat	equ	0xFF5
 13318                           prodh	equ	0xFF4
 13319                           prodl	equ	0xFF3
 13320                           postinc0	equ	0xFEE
 13321                           wreg	equ	0xFE8
 13322                           postdec1	equ	0xFE5
 13323                           fsr1h	equ	0xFE2
 13324                           fsr1l	equ	0xFE1
 13325                           indf2	equ	0xFDF
 13326                           postinc2	equ	0xFDE
 13327                           postdec2	equ	0xFDD
 13328                           fsr2h	equ	0xFDA
 13329                           fsr2l	equ	0xFD9
 13330                           status	equ	0xFD8
 13331                           
 13332 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13333 ;; Defined at:
 13334 ;;		line 2716 in file "../main.c"
 13335 ;; Parameters:    Size  Location     Type
 13336 ;;		None
 13337 ;; Auto vars:     Size  Location     Type
 13338 ;;		None
 13339 ;; Return value:  Size  Location     Type
 13340 ;;                  1    wreg      unsigned char 
 13341 ;; Registers used:
 13342 ;;		wreg
 13343 ;; Tracked objects:
 13344 ;;		On entry : F/0
 13345 ;;		On exit  : F/0
 13346 ;;		Unchanged: F/0
 13347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13348 ;;      Params:         0       0       0       0       0       0       0
 13349 ;;      Locals:         0       0       0       0       0       0       0
 13350 ;;      Temps:          0       0       0       0       0       0       0
 13351 ;;      Totals:         0       0       0       0       0       0       0
 13352 ;;Total ram usage:        0 bytes
 13353 ;; Hardware stack levels used:    1
 13354 ;; Hardware stack levels required when called:    2
 13355 ;; This function calls:
 13356 ;;		Nothing
 13357 ;; This function is called by:
 13358 ;;		_vscp_readStdReg
 13359 ;; This function uses a non-reentrant model
 13360 ;;
 13361                           
 13362                           	psect	text47
 13363  005DB2                     __ptext47:
 13364                           	opt stack 0
 13365  005DB2                     _vscp_getRegisterPagesUsed:
 13366                           	opt stack 26
 13367                           
 13368                           ; BSR set to: 0
 13369                           
 13370                           ; BSR set to: 0
 13371                           ;main.c: 2717: return 1;
 13372                           
 13373                           ;incstack = 0
 13374                           ;incstack = 0
 13375  005DB2  0C01               	retlw	1
 13376  005DB4                     __end_of_vscp_getRegisterPagesUsed:
 13377                           	opt stack 0
 13378                           tblptru	equ	0xFF8
 13379                           tblptrh	equ	0xFF7
 13380                           tblptrl	equ	0xFF6
 13381                           tablat	equ	0xFF5
 13382                           prodh	equ	0xFF4
 13383                           prodl	equ	0xFF3
 13384                           postinc0	equ	0xFEE
 13385                           wreg	equ	0xFE8
 13386                           postdec1	equ	0xFE5
 13387                           fsr1h	equ	0xFE2
 13388                           fsr1l	equ	0xFE1
 13389                           indf2	equ	0xFDF
 13390                           postinc2	equ	0xFDE
 13391                           postdec2	equ	0xFDD
 13392                           fsr2h	equ	0xFDA
 13393                           fsr2l	equ	0xFD9
 13394                           status	equ	0xFD8
 13395                           
 13396 ;; *************** function _vscp_getBufferSize *****************
 13397 ;; Defined at:
 13398 ;;		line 2669 in file "../main.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;		None
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;		None
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  1    wreg      unsigned char 
 13405 ;; Registers used:
 13406 ;;		wreg
 13407 ;; Tracked objects:
 13408 ;;		On entry : F/0
 13409 ;;		On exit  : F/0
 13410 ;;		Unchanged: F/0
 13411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13412 ;;      Params:         0       0       0       0       0       0       0
 13413 ;;      Locals:         0       0       0       0       0       0       0
 13414 ;;      Temps:          0       0       0       0       0       0       0
 13415 ;;      Totals:         0       0       0       0       0       0       0
 13416 ;;Total ram usage:        0 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; Hardware stack levels required when called:    2
 13419 ;; This function calls:
 13420 ;;		Nothing
 13421 ;; This function is called by:
 13422 ;;		_vscp_readStdReg
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           	psect	text48
 13427  005DB4                     __ptext48:
 13428                           	opt stack 0
 13429  005DB4                     _vscp_getBufferSize:
 13430                           	opt stack 26
 13431                           
 13432                           ; BSR set to: 0
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;main.c: 2670: return 8;
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;incstack = 0
 13439                           ;incstack = 0
 13440  005DB4  0C08               	retlw	8
 13441  005DB6                     __end_of_vscp_getBufferSize:
 13442                           	opt stack 0
 13443                           tblptru	equ	0xFF8
 13444                           tblptrh	equ	0xFF7
 13445                           tblptrl	equ	0xFF6
 13446                           tablat	equ	0xFF5
 13447                           prodh	equ	0xFF4
 13448                           prodl	equ	0xFF3
 13449                           postinc0	equ	0xFEE
 13450                           wreg	equ	0xFE8
 13451                           postdec1	equ	0xFE5
 13452                           fsr1h	equ	0xFE2
 13453                           fsr1l	equ	0xFE1
 13454                           indf2	equ	0xFDF
 13455                           postinc2	equ	0xFDE
 13456                           postdec2	equ	0xFDD
 13457                           fsr2h	equ	0xFDA
 13458                           fsr2l	equ	0xFD9
 13459                           status	equ	0xFD8
 13460                           
 13461 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13462 ;; Defined at:
 13463 ;;		line 2660 in file "../main.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;		None
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;		None
 13468 ;; Return value:  Size  Location     Type
 13469 ;;                  1    wreg      unsigned char 
 13470 ;; Registers used:
 13471 ;;		wreg
 13472 ;; Tracked objects:
 13473 ;;		On entry : F/0
 13474 ;;		On exit  : F/0
 13475 ;;		Unchanged: F/0
 13476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13477 ;;      Params:         0       0       0       0       0       0       0
 13478 ;;      Locals:         0       0       0       0       0       0       0
 13479 ;;      Temps:          0       0       0       0       0       0       0
 13480 ;;      Totals:         0       0       0       0       0       0       0
 13481 ;;Total ram usage:        0 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:    2
 13484 ;; This function calls:
 13485 ;;		Nothing
 13486 ;; This function is called by:
 13487 ;;		_vscp_readStdReg
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           	psect	text49
 13492  005DB6                     __ptext49:
 13493                           	opt stack 0
 13494  005DB6                     _vscp_getBootLoaderAlgorithm:
 13495                           	opt stack 26
 13496                           
 13497                           ; BSR set to: 0
 13498                           
 13499                           ; BSR set to: 0
 13500                           ;main.c: 2661: return 0x01;
 13501                           
 13502                           ; BSR set to: 0
 13503                           ;incstack = 0
 13504                           ;incstack = 0
 13505  005DB6  0C01               	retlw	1
 13506  005DB8                     __end_of_vscp_getBootLoaderAlgorithm:
 13507                           	opt stack 0
 13508                           tblptru	equ	0xFF8
 13509                           tblptrh	equ	0xFF7
 13510                           tblptrl	equ	0xFF6
 13511                           tablat	equ	0xFF5
 13512                           prodh	equ	0xFF4
 13513                           prodl	equ	0xFF3
 13514                           postinc0	equ	0xFEE
 13515                           wreg	equ	0xFE8
 13516                           postdec1	equ	0xFE5
 13517                           fsr1h	equ	0xFE2
 13518                           fsr1l	equ	0xFE1
 13519                           indf2	equ	0xFDF
 13520                           postinc2	equ	0xFDE
 13521                           postdec2	equ	0xFDD
 13522                           fsr2h	equ	0xFDA
 13523                           fsr2l	equ	0xFD9
 13524                           status	equ	0xFD8
 13525                           
 13526 ;; *************** function _vscp_getManufacturerId *****************
 13527 ;; Defined at:
 13528 ;;		line 2640 in file "../main.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;  idx             1    wreg     unsigned char 
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;  idx             1   17[COMRAM] unsigned char 
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  1    wreg      unsigned char 
 13535 ;; Registers used:
 13536 ;;		wreg, status,2, status,0, cstack
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13542 ;;      Params:         0       0       0       0       0       0       0
 13543 ;;      Locals:         1       0       0       0       0       0       0
 13544 ;;      Temps:          0       0       0       0       0       0       0
 13545 ;;      Totals:         1       0       0       0       0       0       0
 13546 ;;Total ram usage:        1 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; Hardware stack levels required when called:    3
 13549 ;; This function calls:
 13550 ;;		_readEEPROM
 13551 ;; This function is called by:
 13552 ;;		_vscp_readStdReg
 13553 ;;		_vscp_writeStdReg
 13554 ;; This function uses a non-reentrant model
 13555 ;;
 13556                           
 13557                           	psect	text50
 13558  005CBA                     __ptext50:
 13559                           	opt stack 0
 13560  005CBA                     _vscp_getManufacturerId:
 13561                           	opt stack 25
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;incstack = 0
 13565                           ;incstack = 0
 13566                           ;vscp_getManufacturerId@idx stored from wreg
 13567  005CBA  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13568                           
 13569                           ;main.c: 2641: return readEEPROM(0x09 + idx);
 13570  005CBE  0E09               	movlw	9
 13571  005CC0  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13572  005CC2  6E0E               	movwf	?_readEEPROM,c
 13573  005CC4  6A0F               	clrf	?_readEEPROM+1,c
 13574  005CC6  0E00               	movlw	0
 13575  005CC8  220F               	addwfc	?_readEEPROM+1,f,c
 13576  005CCA  EF8D  F02E         	goto	_readEEPROM	;wreg free
 13577  005CCE                     __end_of_vscp_getManufacturerId:
 13578                           	opt stack 0
 13579                           tblptru	equ	0xFF8
 13580                           tblptrh	equ	0xFF7
 13581                           tblptrl	equ	0xFF6
 13582                           tablat	equ	0xFF5
 13583                           prodh	equ	0xFF4
 13584                           prodl	equ	0xFF3
 13585                           postinc0	equ	0xFEE
 13586                           wreg	equ	0xFE8
 13587                           postdec1	equ	0xFE5
 13588                           fsr1h	equ	0xFE2
 13589                           fsr1l	equ	0xFE1
 13590                           indf2	equ	0xFDF
 13591                           postinc2	equ	0xFDE
 13592                           postdec2	equ	0xFDD
 13593                           fsr2h	equ	0xFDA
 13594                           fsr2l	equ	0xFD9
 13595                           status	equ	0xFD8
 13596                           
 13597 ;; *************** function _vscp_getUserID *****************
 13598 ;; Defined at:
 13599 ;;		line 2620 in file "../main.c"
 13600 ;; Parameters:    Size  Location     Type
 13601 ;;  idx             1    wreg     unsigned char 
 13602 ;; Auto vars:     Size  Location     Type
 13603 ;;  idx             1   17[COMRAM] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;                  1    wreg      unsigned char 
 13606 ;; Registers used:
 13607 ;;		wreg, status,2, status,0, cstack
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13613 ;;      Params:         0       0       0       0       0       0       0
 13614 ;;      Locals:         1       0       0       0       0       0       0
 13615 ;;      Temps:          0       0       0       0       0       0       0
 13616 ;;      Totals:         1       0       0       0       0       0       0
 13617 ;;Total ram usage:        1 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    3
 13620 ;; This function calls:
 13621 ;;		_readEEPROM
 13622 ;; This function is called by:
 13623 ;;		_vscp_readStdReg
 13624 ;;		_vscp_writeStdReg
 13625 ;; This function uses a non-reentrant model
 13626 ;;
 13627                           
 13628                           	psect	text51
 13629  005CCE                     __ptext51:
 13630                           	opt stack 0
 13631  005CCE                     _vscp_getUserID:
 13632                           	opt stack 25
 13633                           
 13634                           ;incstack = 0
 13635                           ;incstack = 0
 13636                           ;vscp_getUserID@idx stored from wreg
 13637  005CCE  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13638                           
 13639                           ;main.c: 2621: return readEEPROM(0x04 + idx);
 13640  005CD2  0E04               	movlw	4
 13641  005CD4  2412               	addwf	vscp_getUserID@idx,w,c
 13642  005CD6  6E0E               	movwf	?_readEEPROM,c
 13643  005CD8  6A0F               	clrf	?_readEEPROM+1,c
 13644  005CDA  0E00               	movlw	0
 13645  005CDC  220F               	addwfc	?_readEEPROM+1,f,c
 13646  005CDE  EF8D  F02E         	goto	_readEEPROM	;wreg free
 13647  005CE2                     __end_of_vscp_getUserID:
 13648                           	opt stack 0
 13649                           tblptru	equ	0xFF8
 13650                           tblptrh	equ	0xFF7
 13651                           tblptrl	equ	0xFF6
 13652                           tablat	equ	0xFF5
 13653                           prodh	equ	0xFF4
 13654                           prodl	equ	0xFF3
 13655                           postinc0	equ	0xFEE
 13656                           wreg	equ	0xFE8
 13657                           postdec1	equ	0xFE5
 13658                           fsr1h	equ	0xFE2
 13659                           fsr1l	equ	0xFE1
 13660                           indf2	equ	0xFDF
 13661                           postinc2	equ	0xFDE
 13662                           postdec2	equ	0xFDD
 13663                           fsr2h	equ	0xFDA
 13664                           fsr2l	equ	0xFD9
 13665                           status	equ	0xFD8
 13666                           
 13667 ;; *************** function _vscp_getMDF_URL *****************
 13668 ;; Defined at:
 13669 ;;		line 2611 in file "../main.c"
 13670 ;; Parameters:    Size  Location     Type
 13671 ;;  idx             1    wreg     unsigned char 
 13672 ;; Auto vars:     Size  Location     Type
 13673 ;;  idx             1   14[COMRAM] unsigned char 
 13674 ;; Return value:  Size  Location     Type
 13675 ;;                  1    wreg      unsigned char 
 13676 ;; Registers used:
 13677 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13678 ;; Tracked objects:
 13679 ;;		On entry : F/0
 13680 ;;		On exit  : F/0
 13681 ;;		Unchanged: F/0
 13682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13683 ;;      Params:         0       0       0       0       0       0       0
 13684 ;;      Locals:         1       0       0       0       0       0       0
 13685 ;;      Temps:          1       0       0       0       0       0       0
 13686 ;;      Totals:         2       0       0       0       0       0       0
 13687 ;;Total ram usage:        2 bytes
 13688 ;; Hardware stack levels used:    1
 13689 ;; Hardware stack levels required when called:    2
 13690 ;; This function calls:
 13691 ;;		Nothing
 13692 ;; This function is called by:
 13693 ;;		_vscp_readStdReg
 13694 ;;		_vscp_handleProtocolEvent
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           	psect	text52
 13699  005C72                     __ptext52:
 13700                           	opt stack 0
 13701  005C72                     _vscp_getMDF_URL:
 13702                           	opt stack 26
 13703                           
 13704                           ;incstack = 0
 13705                           ;incstack = 0
 13706                           ;vscp_getMDF_URL@idx stored from wreg
 13707  005C72  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13708                           
 13709                           ; BSR set to: 0
 13710                           ;main.c: 2612: return vscp_deviceURL[ idx ];
 13711  005C76  500F               	movf	vscp_getMDF_URL@idx,w,c
 13712  005C78  0F00               	addlw	low _vscp_deviceURL
 13713  005C7A  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13714  005C7C  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13715  005C80  0E0B               	movlw	high __smallconst
 13716  005C82  6EF7               	movwf	tblptrh,c
 13717  005C84  0008               	tblrd		*
 13718  005C86  50F5               	movf	tablat,w,c
 13719                           
 13720                           ; BSR set to: 0
 13721  005C88  0012               	return	
 13722  005C8A                     __end_of_vscp_getMDF_URL:
 13723                           	opt stack 0
 13724                           tblptru	equ	0xFF8
 13725                           tblptrh	equ	0xFF7
 13726                           tblptrl	equ	0xFF6
 13727                           tablat	equ	0xFF5
 13728                           prodh	equ	0xFF4
 13729                           prodl	equ	0xFF3
 13730                           postinc0	equ	0xFEE
 13731                           wreg	equ	0xFE8
 13732                           postdec1	equ	0xFE5
 13733                           fsr1h	equ	0xFE2
 13734                           fsr1l	equ	0xFE1
 13735                           indf2	equ	0xFDF
 13736                           postinc2	equ	0xFDE
 13737                           postdec2	equ	0xFDD
 13738                           fsr2h	equ	0xFDA
 13739                           fsr2l	equ	0xFD9
 13740                           status	equ	0xFD8
 13741                           
 13742 ;; *************** function _vscp_getGUID *****************
 13743 ;; Defined at:
 13744 ;;		line 2588 in file "../main.c"
 13745 ;; Parameters:    Size  Location     Type
 13746 ;;  idx             1    wreg     unsigned char 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  idx             1   17[COMRAM] unsigned char 
 13749 ;; Return value:  Size  Location     Type
 13750 ;;                  1    wreg      unsigned char 
 13751 ;; Registers used:
 13752 ;;		wreg, status,2, status,0, cstack
 13753 ;; Tracked objects:
 13754 ;;		On entry : 0/0
 13755 ;;		On exit  : 0/0
 13756 ;;		Unchanged: 0/0
 13757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13758 ;;      Params:         0       0       0       0       0       0       0
 13759 ;;      Locals:         1       0       0       0       0       0       0
 13760 ;;      Temps:          0       0       0       0       0       0       0
 13761 ;;      Totals:         1       0       0       0       0       0       0
 13762 ;;Total ram usage:        1 bytes
 13763 ;; Hardware stack levels used:    1
 13764 ;; Hardware stack levels required when called:    3
 13765 ;; This function calls:
 13766 ;;		_readEEPROM
 13767 ;; This function is called by:
 13768 ;;		_vscp_readStdReg
 13769 ;;		_vscp_writeStdReg
 13770 ;;		_vscp_handleProtocolEvent
 13771 ;; This function uses a non-reentrant model
 13772 ;;
 13773                           
 13774                           	psect	text53
 13775  005CE2                     __ptext53:
 13776                           	opt stack 0
 13777  005CE2                     _vscp_getGUID:
 13778                           	opt stack 25
 13779                           
 13780                           ; BSR set to: 0
 13781                           ;incstack = 0
 13782                           ;incstack = 0
 13783                           ;vscp_getGUID@idx stored from wreg
 13784  005CE2  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13785                           
 13786                           ;main.c: 2589: return readEEPROM(0x11 + idx);
 13787  005CE6  0E11               	movlw	17
 13788  005CE8  2412               	addwf	vscp_getGUID@idx,w,c
 13789  005CEA  6E0E               	movwf	?_readEEPROM,c
 13790  005CEC  6A0F               	clrf	?_readEEPROM+1,c
 13791  005CEE  0E00               	movlw	0
 13792  005CF0  220F               	addwfc	?_readEEPROM+1,f,c
 13793  005CF2  EF8D  F02E         	goto	_readEEPROM	;wreg free
 13794  005CF6                     __end_of_vscp_getGUID:
 13795                           	opt stack 0
 13796                           tblptru	equ	0xFF8
 13797                           tblptrh	equ	0xFF7
 13798                           tblptrl	equ	0xFF6
 13799                           tablat	equ	0xFF5
 13800                           prodh	equ	0xFF4
 13801                           prodl	equ	0xFF3
 13802                           postinc0	equ	0xFEE
 13803                           wreg	equ	0xFE8
 13804                           postdec1	equ	0xFE5
 13805                           fsr1h	equ	0xFE2
 13806                           fsr1l	equ	0xFE1
 13807                           indf2	equ	0xFDF
 13808                           postinc2	equ	0xFDE
 13809                           postdec2	equ	0xFDD
 13810                           fsr2h	equ	0xFDA
 13811                           fsr2l	equ	0xFD9
 13812                           status	equ	0xFD8
 13813                           
 13814 ;; *************** function _vscp_getSubMinorVersion *****************
 13815 ;; Defined at:
 13816 ;;		line 2577 in file "../main.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;		None
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;		None
 13821 ;; Return value:  Size  Location     Type
 13822 ;;                  1    wreg      unsigned char 
 13823 ;; Registers used:
 13824 ;;		wreg
 13825 ;; Tracked objects:
 13826 ;;		On entry : F/0
 13827 ;;		On exit  : F/0
 13828 ;;		Unchanged: F/0
 13829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13830 ;;      Params:         0       0       0       0       0       0       0
 13831 ;;      Locals:         0       0       0       0       0       0       0
 13832 ;;      Temps:          0       0       0       0       0       0       0
 13833 ;;      Totals:         0       0       0       0       0       0       0
 13834 ;;Total ram usage:        0 bytes
 13835 ;; Hardware stack levels used:    1
 13836 ;; Hardware stack levels required when called:    2
 13837 ;; This function calls:
 13838 ;;		Nothing
 13839 ;; This function is called by:
 13840 ;;		_vscp_readStdReg
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           	psect	text54
 13845  005DB8                     __ptext54:
 13846                           	opt stack 0
 13847  005DB8                     _vscp_getSubMinorVersion:
 13848                           	opt stack 26
 13849                           
 13850                           ; BSR set to: 0
 13851                           
 13852                           ; BSR set to: 0
 13853                           ;main.c: 2578: return 1;
 13854                           
 13855                           ;incstack = 0
 13856                           ;incstack = 0
 13857  005DB8  0C01               	retlw	1
 13858  005DBA                     __end_of_vscp_getSubMinorVersion:
 13859                           	opt stack 0
 13860                           tblptru	equ	0xFF8
 13861                           tblptrh	equ	0xFF7
 13862                           tblptrl	equ	0xFF6
 13863                           tablat	equ	0xFF5
 13864                           prodh	equ	0xFF4
 13865                           prodl	equ	0xFF3
 13866                           postinc0	equ	0xFEE
 13867                           wreg	equ	0xFE8
 13868                           postdec1	equ	0xFE5
 13869                           fsr1h	equ	0xFE2
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           postdec2	equ	0xFDD
 13874                           fsr2h	equ	0xFDA
 13875                           fsr2l	equ	0xFD9
 13876                           status	equ	0xFD8
 13877                           
 13878 ;; *************** function _vscp_getMinorVersion *****************
 13879 ;; Defined at:
 13880 ;;		line 2568 in file "../main.c"
 13881 ;; Parameters:    Size  Location     Type
 13882 ;;		None
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;		None
 13885 ;; Return value:  Size  Location     Type
 13886 ;;                  1    wreg      unsigned char 
 13887 ;; Registers used:
 13888 ;;		wreg
 13889 ;; Tracked objects:
 13890 ;;		On entry : F/0
 13891 ;;		On exit  : F/0
 13892 ;;		Unchanged: F/0
 13893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13894 ;;      Params:         0       0       0       0       0       0       0
 13895 ;;      Locals:         0       0       0       0       0       0       0
 13896 ;;      Temps:          0       0       0       0       0       0       0
 13897 ;;      Totals:         0       0       0       0       0       0       0
 13898 ;;Total ram usage:        0 bytes
 13899 ;; Hardware stack levels used:    1
 13900 ;; Hardware stack levels required when called:    2
 13901 ;; This function calls:
 13902 ;;		Nothing
 13903 ;; This function is called by:
 13904 ;;		_vscp_readStdReg
 13905 ;; This function uses a non-reentrant model
 13906 ;;
 13907                           
 13908                           	psect	text55
 13909  005DBA                     __ptext55:
 13910                           	opt stack 0
 13911  005DBA                     _vscp_getMinorVersion:
 13912                           	opt stack 26
 13913                           
 13914                           ; BSR set to: 0
 13915                           
 13916                           ; BSR set to: 0
 13917                           ;main.c: 2569: return 2;
 13918                           
 13919                           ; BSR set to: 0
 13920                           ;incstack = 0
 13921                           ;incstack = 0
 13922  005DBA  0C02               	retlw	2
 13923  005DBC                     __end_of_vscp_getMinorVersion:
 13924                           	opt stack 0
 13925                           tblptru	equ	0xFF8
 13926                           tblptrh	equ	0xFF7
 13927                           tblptrl	equ	0xFF6
 13928                           tablat	equ	0xFF5
 13929                           prodh	equ	0xFF4
 13930                           prodl	equ	0xFF3
 13931                           postinc0	equ	0xFEE
 13932                           wreg	equ	0xFE8
 13933                           postdec1	equ	0xFE5
 13934                           fsr1h	equ	0xFE2
 13935                           fsr1l	equ	0xFE1
 13936                           indf2	equ	0xFDF
 13937                           postinc2	equ	0xFDE
 13938                           postdec2	equ	0xFDD
 13939                           fsr2h	equ	0xFDA
 13940                           fsr2l	equ	0xFD9
 13941                           status	equ	0xFD8
 13942                           
 13943 ;; *************** function _vscp_getMajorVersion *****************
 13944 ;; Defined at:
 13945 ;;		line 2559 in file "../main.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;		None
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;		None
 13950 ;; Return value:  Size  Location     Type
 13951 ;;                  1    wreg      unsigned char 
 13952 ;; Registers used:
 13953 ;;		wreg
 13954 ;; Tracked objects:
 13955 ;;		On entry : F/0
 13956 ;;		On exit  : F/0
 13957 ;;		Unchanged: F/0
 13958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13959 ;;      Params:         0       0       0       0       0       0       0
 13960 ;;      Locals:         0       0       0       0       0       0       0
 13961 ;;      Temps:          0       0       0       0       0       0       0
 13962 ;;      Totals:         0       0       0       0       0       0       0
 13963 ;;Total ram usage:        0 bytes
 13964 ;; Hardware stack levels used:    1
 13965 ;; Hardware stack levels required when called:    2
 13966 ;; This function calls:
 13967 ;;		Nothing
 13968 ;; This function is called by:
 13969 ;;		_vscp_readStdReg
 13970 ;; This function uses a non-reentrant model
 13971 ;;
 13972                           
 13973                           	psect	text56
 13974  005DBC                     __ptext56:
 13975                           	opt stack 0
 13976  005DBC                     _vscp_getMajorVersion:
 13977                           	opt stack 26
 13978                           
 13979                           ; BSR set to: 0
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;main.c: 2560: return 1;
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;incstack = 0
 13986                           ;incstack = 0
 13987  005DBC  0C01               	retlw	1
 13988  005DBE                     __end_of_vscp_getMajorVersion:
 13989                           	opt stack 0
 13990                           tblptru	equ	0xFF8
 13991                           tblptrh	equ	0xFF7
 13992                           tblptrl	equ	0xFF6
 13993                           tablat	equ	0xFF5
 13994                           prodh	equ	0xFF4
 13995                           prodl	equ	0xFF3
 13996                           postinc0	equ	0xFEE
 13997                           wreg	equ	0xFE8
 13998                           postdec1	equ	0xFE5
 13999                           fsr1h	equ	0xFE2
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           fsr2h	equ	0xFDA
 14005                           fsr2l	equ	0xFD9
 14006                           status	equ	0xFD8
 14007                           
 14008 ;; *************** function _vscp_newNodeOnline *****************
 14009 ;; Defined at:
 14010 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;		None
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;		None
 14015 ;; Return value:  Size  Location     Type
 14016 ;;		None               void
 14017 ;; Registers used:
 14018 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14019 ;; Tracked objects:
 14020 ;;		On entry : F/0
 14021 ;;		On exit  : F/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14024 ;;      Params:         0       0       0       0       0       0       0
 14025 ;;      Locals:         0       0       0       0       0       0       0
 14026 ;;      Temps:          1       0       0       0       0       0       0
 14027 ;;      Totals:         1       0       0       0       0       0       0
 14028 ;;Total ram usage:        1 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    7
 14031 ;; This function calls:
 14032 ;;		_vscp_sendEvent
 14033 ;; This function is called by:
 14034 ;;		_vscp_handleProtocolEvent
 14035 ;; This function uses a non-reentrant model
 14036 ;;
 14037                           
 14038                           	psect	text57
 14039  005A32                     __ptext57:
 14040                           	opt stack 0
 14041  005A32                     _vscp_newNodeOnline:
 14042                           	opt stack 22
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 14046                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;incstack = 0
 14050                           ;incstack = 0
 14051  005A32  C0BC  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14052  005A36  0E0F               	movlw	15
 14053  005A38  1644               	andwf	??_vscp_newNodeOnline,f,c
 14054  005A3A  0444               	decf	??_vscp_newNodeOnline,w,c
 14055  005A3C  E10E               	bnz	l1094
 14056                           
 14057                           ; BSR set to: 0
 14058  005A3E  51BA               	movf	_vscp_nickname& (0+255),w,b
 14059  005A40  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14060  005A44  62DF               	cpfseq	indf2,c
 14061  005A46  D009               	goto	l1094
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 14065  005A48  0E80               	movlw	128
 14066  005A4A  6FCA               	movwf	_vscp_omsg& (0+255),b
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 14070  005A4C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 14074  005A4E  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14075  005A50  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14076                           
 14077                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 14078  005A52  0E03               	movlw	3
 14079  005A54  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;vscp_firmware.c: 506: vscp_sendEvent();
 14083  005A56  EC57  F02D         	call	_vscp_sendEvent	;wreg free
 14084  005A5A                     l1094:
 14085                           
 14086                           ; BSR set to: 0
 14087  005A5A  0012               	return	
 14088  005A5C                     __end_of_vscp_newNodeOnline:
 14089                           	opt stack 0
 14090                           tblptru	equ	0xFF8
 14091                           tblptrh	equ	0xFF7
 14092                           tblptrl	equ	0xFF6
 14093                           tablat	equ	0xFF5
 14094                           prodh	equ	0xFF4
 14095                           prodl	equ	0xFF3
 14096                           postinc0	equ	0xFEE
 14097                           wreg	equ	0xFE8
 14098                           postdec1	equ	0xFE5
 14099                           fsr1h	equ	0xFE2
 14100                           fsr1l	equ	0xFE1
 14101                           indf2	equ	0xFDF
 14102                           postinc2	equ	0xFDE
 14103                           postdec2	equ	0xFDD
 14104                           fsr2h	equ	0xFDA
 14105                           fsr2l	equ	0xFD9
 14106                           status	equ	0xFD8
 14107                           
 14108 ;; *************** function _vscp_handleDropNickname *****************
 14109 ;; Defined at:
 14110 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;		None
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;  bytes           1   17[COMRAM] unsigned char 
 14115 ;; Return value:  Size  Location     Type
 14116 ;;		None               void
 14117 ;; Registers used:
 14118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14119 ;; Tracked objects:
 14120 ;;		On entry : F/0
 14121 ;;		On exit  : F/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14124 ;;      Params:         0       0       0       0       0       0       0
 14125 ;;      Locals:         1       0       0       0       0       0       0
 14126 ;;      Temps:          0       0       0       0       0       0       0
 14127 ;;      Totals:         1       0       0       0       0       0       0
 14128 ;;Total ram usage:        1 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; Hardware stack levels required when called:    5
 14131 ;; This function calls:
 14132 ;;		_vscp_init
 14133 ;;		_vscp_writeNicknamePermanent
 14134 ;; This function is called by:
 14135 ;;		_vscp_handleProtocolEvent
 14136 ;; This function uses a non-reentrant model
 14137 ;;
 14138                           
 14139                           	psect	text58
 14140  0059AC                     __ptext58:
 14141                           	opt stack 0
 14142  0059AC                     _vscp_handleDropNickname:
 14143                           	opt stack 24
 14144                           
 14145                           ; BSR set to: 0
 14146                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;incstack = 0
 14150                           ;incstack = 0
 14151  0059AC  51BC               	movf	_vscp_imsg& (0+255),w,b
 14152  0059AE  0B0F               	andlw	15
 14153  0059B0  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14157  0059B2  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14158  0059B4  E012               	bz	l1090
 14159                           
 14160                           ; BSR set to: 0
 14161  0059B6  51BA               	movf	_vscp_nickname& (0+255),w,b
 14162  0059B8  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14163  0059BC  62DF               	cpfseq	indf2,c
 14164  0059BE  D00D               	goto	l1090
 14165                           
 14166                           ; BSR set to: 0
 14167                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14168  0059C0  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14169  0059C2  E005               	bz	l1089
 14170                           
 14171                           ; BSR set to: 0
 14172  0059C4  0E01               	movlw	1
 14173  0059C6  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14174  0059C8  D008               	goto	l1090
 14175                           
 14176                           ; BSR set to: 0
 14177  0059CA  67C3               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14178  0059CC  D006               	goto	l1090
 14179  0059CE                     l1089:
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 14183  0059CE  69BA               	setf	_vscp_nickname& (0+255),b
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 14187  0059D0  0EFF               	movlw	255
 14188  0059D2  EC96  F02E         	call	_vscp_writeNicknamePermanent
 14189                           
 14190                           ;vscp_firmware.c: 473: vscp_init();
 14191  0059D6  ECA0  F02B         	call	_vscp_init	;wreg free
 14192  0059DA                     l1090:
 14193                           
 14194                           ; BSR set to: 0
 14195  0059DA  0012               	return	
 14196  0059DC                     __end_of_vscp_handleDropNickname:
 14197                           	opt stack 0
 14198                           tblptru	equ	0xFF8
 14199                           tblptrh	equ	0xFF7
 14200                           tblptrl	equ	0xFF6
 14201                           tablat	equ	0xFF5
 14202                           prodh	equ	0xFF4
 14203                           prodl	equ	0xFF3
 14204                           postinc0	equ	0xFEE
 14205                           wreg	equ	0xFE8
 14206                           postdec1	equ	0xFE5
 14207                           fsr1h	equ	0xFE2
 14208                           fsr1l	equ	0xFE1
 14209                           indf2	equ	0xFDF
 14210                           postinc2	equ	0xFDE
 14211                           postdec2	equ	0xFDD
 14212                           fsr2h	equ	0xFDA
 14213                           fsr2l	equ	0xFD9
 14214                           status	equ	0xFD8
 14215                           
 14216 ;; *************** function _vscp_init *****************
 14217 ;; Defined at:
 14218 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;		None
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;		None
 14223 ;; Return value:  Size  Location     Type
 14224 ;;		None               void
 14225 ;; Registers used:
 14226 ;;		wreg, status,2, cstack
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/1
 14229 ;;		On exit  : F/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14232 ;;      Params:         0       0       0       0       0       0       0
 14233 ;;      Locals:         0       0       0       0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0
 14235 ;;      Totals:         0       0       0       0       0       0       0
 14236 ;;Total ram usage:        0 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:    4
 14239 ;; This function calls:
 14240 ;;		_vscp_readNicknamePermanent
 14241 ;; This function is called by:
 14242 ;;		_main
 14243 ;;		_vscp_handleDropNickname
 14244 ;;		_vscp_handleProtocolEvent
 14245 ;; This function uses a non-reentrant model
 14246 ;;
 14247                           
 14248                           	psect	text59
 14249  005740                     __ptext59:
 14250                           	opt stack 0
 14251  005740                     _vscp_init:
 14252                           	opt stack 24
 14253                           
 14254                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 14255                           
 14256                           ; BSR set to: 0
 14257                           ;incstack = 0
 14258                           ;incstack = 0
 14259  005740  0E02               	movlw	2
 14260  005742  6E4D               	movwf	_vscp_initledfunc,c
 14261                           
 14262                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 14263  005744  ECC5  F02E         	call	_vscp_readNicknamePermanent	;wreg free
 14264  005748  0100               	movlb	0	; () banked
 14265  00574A  6FBA               	movwf	_vscp_nickname& (0+255),b
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 14269  00574C  67BA               	tstfsz	_vscp_nickname& (0+255),b
 14270  00574E  D001               	goto	l1031
 14271                           
 14272                           ; BSR set to: 0
 14273  005750  69BA               	setf	_vscp_nickname& (0+255),b
 14274  005752                     l1031:
 14275                           
 14276                           ; BSR set to: 0
 14277                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 14278  005752  6BBC               	clrf	_vscp_imsg& (0+255),b
 14279                           
 14280                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 14281  005754  6BBD               	clrf	(_vscp_imsg+1)& (0+255),b
 14282                           
 14283                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 14284  005756  6BBE               	clrf	(_vscp_imsg+2)& (0+255),b
 14285  005758  6BBF               	clrf	(_vscp_imsg+3)& (0+255),b
 14286                           
 14287                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 14288  00575A  6BC0               	clrf	(_vscp_imsg+4)& (0+255),b
 14289                           
 14290                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 14291  00575C  6BCA               	clrf	_vscp_omsg& (0+255),b
 14292                           
 14293                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 14294  00575E  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14295                           
 14296                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 14297  005760  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14298  005762  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14299                           
 14300                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 14301  005764  6BCE               	clrf	(_vscp_omsg+4)& (0+255),b
 14302                           
 14303                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 14304  005766  6A4B               	clrf	_vscp_alarmstatus,c
 14305                           
 14306                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 14307  005768  6A4F               	clrf	_vscp_probe_address,c
 14308                           
 14309                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 14310  00576A  6BBB               	clrf	_vscp_node_state& (0+255),b
 14311                           
 14312                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 14313  00576C  6A4E               	clrf	_vscp_node_substate,c
 14314                           
 14315                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 14316  00576E  6A50               	clrf	_vscp_probe_cnt,c
 14317                           
 14318                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 14319  005770  6A46               	clrf	_vscp_page_select,c
 14320  005772  6A47               	clrf	_vscp_page_select+1,c
 14321                           
 14322                           ;vscp_firmware.c: 151: vscp_timer = 0;
 14323  005774  0101               	movlb	1	; () banked
 14324  005776  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14325  005778  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14326                           
 14327                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 14328  00577A  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14329  00577C  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14330                           
 14331                           ;vscp_firmware.c: 153: vscp_second = 0;
 14332  00577E  6A51               	clrf	_vscp_second,c
 14333                           
 14334                           ;vscp_firmware.c: 154: vscp_minute = 0;
 14335  005780  0100               	movlb	0	; () banked
 14336  005782  6BB9               	clrf	_vscp_minute& (0+255),b
 14337                           
 14338                           ;vscp_firmware.c: 155: vscp_hour = 0;
 14339  005784  6BB7               	clrf	_vscp_hour& (0+255),b
 14340                           
 14341                           ; BSR set to: 0
 14342  005786  0012               	return	
 14343  005788                     __end_of_vscp_init:
 14344                           	opt stack 0
 14345                           tblptru	equ	0xFF8
 14346                           tblptrh	equ	0xFF7
 14347                           tblptrl	equ	0xFF6
 14348                           tablat	equ	0xFF5
 14349                           prodh	equ	0xFF4
 14350                           prodl	equ	0xFF3
 14351                           postinc0	equ	0xFEE
 14352                           wreg	equ	0xFE8
 14353                           postdec1	equ	0xFE5
 14354                           fsr1h	equ	0xFE2
 14355                           fsr1l	equ	0xFE1
 14356                           indf2	equ	0xFDF
 14357                           postinc2	equ	0xFDE
 14358                           postdec2	equ	0xFDD
 14359                           fsr2h	equ	0xFDA
 14360                           fsr2l	equ	0xFD9
 14361                           status	equ	0xFD8
 14362                           
 14363 ;; *************** function _vscp_readNicknamePermanent *****************
 14364 ;; Defined at:
 14365 ;;		line 2760 in file "../main.c"
 14366 ;; Parameters:    Size  Location     Type
 14367 ;;		None
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;		None
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  1    wreg      unsigned char 
 14372 ;; Registers used:
 14373 ;;		wreg, status,2, cstack
 14374 ;; Tracked objects:
 14375 ;;		On entry : 0/1
 14376 ;;		On exit  : 0/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14379 ;;      Params:         0       0       0       0       0       0       0
 14380 ;;      Locals:         0       0       0       0       0       0       0
 14381 ;;      Temps:          0       0       0       0       0       0       0
 14382 ;;      Totals:         0       0       0       0       0       0       0
 14383 ;;Total ram usage:        0 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    3
 14386 ;; This function calls:
 14387 ;;		_readEEPROM
 14388 ;; This function is called by:
 14389 ;;		_vscp_init
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text60
 14394  005D8A                     __ptext60:
 14395                           	opt stack 0
 14396  005D8A                     _vscp_readNicknamePermanent:
 14397                           	opt stack 24
 14398                           
 14399                           ;main.c: 2761: return readEEPROM( 0x01 );
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;incstack = 0
 14403                           ;incstack = 0
 14404  005D8A  6A0F               	clrf	?_readEEPROM+1,c
 14405  005D8C  0E01               	movlw	1
 14406  005D8E  6E0E               	movwf	?_readEEPROM,c
 14407  005D90  EF8D  F02E         	goto	_readEEPROM	;wreg free
 14408  005D94                     __end_of_vscp_readNicknamePermanent:
 14409                           	opt stack 0
 14410                           tblptru	equ	0xFF8
 14411                           tblptrh	equ	0xFF7
 14412                           tblptrl	equ	0xFF6
 14413                           tablat	equ	0xFF5
 14414                           prodh	equ	0xFF4
 14415                           prodl	equ	0xFF3
 14416                           postinc0	equ	0xFEE
 14417                           wreg	equ	0xFE8
 14418                           postdec1	equ	0xFE5
 14419                           fsr1h	equ	0xFE2
 14420                           fsr1l	equ	0xFE1
 14421                           indf2	equ	0xFDF
 14422                           postinc2	equ	0xFDE
 14423                           postdec2	equ	0xFDD
 14424                           fsr2h	equ	0xFDA
 14425                           fsr2l	equ	0xFD9
 14426                           status	equ	0xFD8
 14427                           
 14428 ;; *************** function _vscp_handleSetNickname *****************
 14429 ;; Defined at:
 14430 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 14431 ;; Parameters:    Size  Location     Type
 14432 ;;		None
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;		None
 14435 ;; Return value:  Size  Location     Type
 14436 ;;		None               void
 14437 ;; Registers used:
 14438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14439 ;; Tracked objects:
 14440 ;;		On entry : F/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14444 ;;      Params:         0       0       0       0       0       0       0
 14445 ;;      Locals:         0       0       0       0       0       0       0
 14446 ;;      Temps:          0       0       0       0       0       0       0
 14447 ;;      Totals:         0       0       0       0       0       0       0
 14448 ;;Total ram usage:        0 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    4
 14451 ;; This function calls:
 14452 ;;		_vscp_writeNicknamePermanent
 14453 ;;		_vscp_setSegmentCRC
 14454 ;; This function is called by:
 14455 ;;		_vscp_handleProtocolEvent
 14456 ;; This function uses a non-reentrant model
 14457 ;;
 14458                           
 14459                           	psect	text61
 14460  005B46                     __ptext61:
 14461                           	opt stack 0
 14462  005B46                     _vscp_handleSetNickname:
 14463                           	opt stack 25
 14464                           
 14465                           ; BSR set to: 0
 14466                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 14467                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14468                           
 14469                           ;incstack = 0
 14470                           ;incstack = 0
 14471  005B46  51BC               	movf	_vscp_imsg& (0+255),w,b
 14472  005B48  0B0F               	andlw	15
 14473  005B4A  0A02               	xorlw	2
 14474  005B4C  E10D               	bnz	l1083
 14475                           
 14476                           ; BSR set to: 0
 14477  005B4E  51BA               	movf	_vscp_nickname& (0+255),w,b
 14478  005B50  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14479  005B54  62DF               	cpfseq	indf2,c
 14480  005B56  D008               	goto	l1083
 14481                           
 14482                           ; BSR set to: 0
 14483                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 14484  005B58  C0C3  F0BA         	movff	_vscp_imsg+7,_vscp_nickname
 14485                           
 14486                           ; BSR set to: 0
 14487                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 14488  005B5C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14489  005B5E  EC96  F02E         	call	_vscp_writeNicknamePermanent
 14490                           
 14491                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 14492  005B62  0E40               	movlw	64
 14493  005B64  EC84  F02E         	call	_vscp_setSegmentCRC
 14494  005B68                     l1083:
 14495  005B68  0012               	return	
 14496  005B6A                     __end_of_vscp_handleSetNickname:
 14497                           	opt stack 0
 14498                           tblptru	equ	0xFF8
 14499                           tblptrh	equ	0xFF7
 14500                           tblptrl	equ	0xFF6
 14501                           tablat	equ	0xFF5
 14502                           prodh	equ	0xFF4
 14503                           prodl	equ	0xFF3
 14504                           postinc0	equ	0xFEE
 14505                           wreg	equ	0xFE8
 14506                           postdec1	equ	0xFE5
 14507                           fsr1h	equ	0xFE2
 14508                           fsr1l	equ	0xFE1
 14509                           indf2	equ	0xFDF
 14510                           postinc2	equ	0xFDE
 14511                           postdec2	equ	0xFDD
 14512                           fsr2h	equ	0xFDA
 14513                           fsr2l	equ	0xFD9
 14514                           status	equ	0xFD8
 14515                           
 14516 ;; *************** function _vscp_handleHeartbeat *****************
 14517 ;; Defined at:
 14518 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 14519 ;; Parameters:    Size  Location     Type
 14520 ;;		None
 14521 ;; Auto vars:     Size  Location     Type
 14522 ;;		None
 14523 ;; Return value:  Size  Location     Type
 14524 ;;		None               void
 14525 ;; Registers used:
 14526 ;;		wreg, status,2, status,0, cstack
 14527 ;; Tracked objects:
 14528 ;;		On entry : F/0
 14529 ;;		On exit  : 0/0
 14530 ;;		Unchanged: 0/0
 14531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14532 ;;      Params:         0       0       0       0       0       0       0
 14533 ;;      Locals:         0       0       0       0       0       0       0
 14534 ;;      Temps:          0       0       0       0       0       0       0
 14535 ;;      Totals:         0       0       0       0       0       0       0
 14536 ;;Total ram usage:        0 bytes
 14537 ;; Hardware stack levels used:    1
 14538 ;; Hardware stack levels required when called:    4
 14539 ;; This function calls:
 14540 ;;		_vscp_writeNicknamePermanent
 14541 ;;		_vscp_getSegmentCRC
 14542 ;;		_vscp_setSegmentCRC
 14543 ;; This function is called by:
 14544 ;;		_vscp_handleProtocolEvent
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548                           	psect	text62
 14549  005812                     __ptext62:
 14550                           	opt stack 0
 14551  005812                     _vscp_handleHeartbeat:
 14552                           	opt stack 25
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 14556                           
 14557                           ;incstack = 0
 14558                           ;incstack = 0
 14559  005812  ECCA  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14560  005816  0900               	iorlw	0
 14561  005818  E116               	bnz	l11202
 14562                           
 14563                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14564                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14565  00581A  0100               	movlb	0	; () banked
 14566  00581C  51BC               	movf	_vscp_imsg& (0+255),w,b
 14567  00581E  0B0F               	andlw	15
 14568  005820  0A05               	xorlw	5
 14569  005822  E115               	bnz	l1079
 14570                           
 14571                           ; BSR set to: 0
 14572  005824  ECCA  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14573  005828  0100               	movlb	0	; () banked
 14574  00582A  19C2               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14575  00582C  E010               	bz	l1079
 14576                           
 14577                           ; BSR set to: 0
 14578                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14579  00582E  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14580  005830  EC84  F02E         	call	_vscp_setSegmentCRC
 14581                           
 14582                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 14583  005834  0100               	movlb	0	; () banked
 14584  005836  69BA               	setf	_vscp_nickname& (0+255),b
 14585                           
 14586                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 14587  005838  0EFF               	movlw	255
 14588  00583A  EC96  F02E         	call	_vscp_writeNicknamePermanent
 14589                           
 14590                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 14591  00583E  0E01               	movlw	1
 14592  005840  0100               	movlb	0	; () banked
 14593  005842  6FBB               	movwf	_vscp_node_state& (0+255),b
 14594  005844  D004               	goto	l1079
 14595  005846                     l11202:
 14596                           
 14597                           ;vscp_firmware.c: 403: else {
 14598                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14599  005846  0100               	movlb	0	; () banked
 14600  005848  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14601  00584A  EC84  F02E         	call	_vscp_setSegmentCRC
 14602  00584E                     l1079:
 14603  00584E  0012               	return	
 14604  005850                     __end_of_vscp_handleHeartbeat:
 14605                           	opt stack 0
 14606                           tblptru	equ	0xFF8
 14607                           tblptrh	equ	0xFF7
 14608                           tblptrl	equ	0xFF6
 14609                           tablat	equ	0xFF5
 14610                           prodh	equ	0xFF4
 14611                           prodl	equ	0xFF3
 14612                           postinc0	equ	0xFEE
 14613                           wreg	equ	0xFE8
 14614                           postdec1	equ	0xFE5
 14615                           fsr1h	equ	0xFE2
 14616                           fsr1l	equ	0xFE1
 14617                           indf2	equ	0xFDF
 14618                           postinc2	equ	0xFDE
 14619                           postdec2	equ	0xFDD
 14620                           fsr2h	equ	0xFDA
 14621                           fsr2l	equ	0xFD9
 14622                           status	equ	0xFD8
 14623                           
 14624 ;; *************** function _vscp_goBootloaderMode *****************
 14625 ;; Defined at:
 14626 ;;		line 2743 in file "../main.c"
 14627 ;; Parameters:    Size  Location     Type
 14628 ;;  algorithm       1    wreg     unsigned char 
 14629 ;; Auto vars:     Size  Location     Type
 14630 ;;  algorithm       1   16[COMRAM] unsigned char 
 14631 ;; Return value:  Size  Location     Type
 14632 ;;		None               void
 14633 ;; Registers used:
 14634 ;;		wreg, status,2, status,0, cstack
 14635 ;; Tracked objects:
 14636 ;;		On entry : F/0
 14637 ;;		On exit  : 0/0
 14638 ;;		Unchanged: 0/0
 14639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14640 ;;      Params:         0       0       0       0       0       0       0
 14641 ;;      Locals:         1       0       0       0       0       0       0
 14642 ;;      Temps:          0       0       0       0       0       0       0
 14643 ;;      Totals:         1       0       0       0       0       0       0
 14644 ;;Total ram usage:        1 bytes
 14645 ;; Hardware stack levels used:    1
 14646 ;; Hardware stack levels required when called:    3
 14647 ;; This function calls:
 14648 ;;		_writeEEPROM
 14649 ;; This function is called by:
 14650 ;;		_vscp_handleProtocolEvent
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           	psect	text63
 14655  005C8A                     __ptext63:
 14656                           	opt stack 0
 14657  005C8A                     _vscp_goBootloaderMode:
 14658                           	opt stack 26
 14659                           
 14660                           ;incstack = 0
 14661                           ;incstack = 0
 14662                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14663  005C8A  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;main.c: 2744: if ( 0x01 != algorithm ) return;
 14667  005C8E  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14668  005C90  E107               	bnz	l594
 14669                           
 14670                           ; BSR set to: 0
 14671                           ;main.c: 2748: writeEEPROM(0x00, 0xff);
 14672  005C92  6A0F               	clrf	?_writeEEPROM+1,c
 14673  005C94  6A0E               	clrf	?_writeEEPROM,c
 14674  005C96  0EFF               	movlw	255
 14675  005C98  6810               	setf	?_writeEEPROM+2,c
 14676  005C9A  EC7E  F02D         	call	_writeEEPROM	;wreg free
 14677  005C9E  00FF               	reset		;# 
 14678  005CA0                     l594:
 14679  005CA0  0012               	return	
 14680  005CA2                     __end_of_vscp_goBootloaderMode:
 14681                           	opt stack 0
 14682                           tblptru	equ	0xFF8
 14683                           tblptrh	equ	0xFF7
 14684                           tblptrl	equ	0xFF6
 14685                           tablat	equ	0xFF5
 14686                           prodh	equ	0xFF4
 14687                           prodl	equ	0xFF3
 14688                           postinc0	equ	0xFEE
 14689                           wreg	equ	0xFE8
 14690                           postdec1	equ	0xFE5
 14691                           fsr1h	equ	0xFE2
 14692                           fsr1l	equ	0xFE1
 14693                           indf2	equ	0xFDF
 14694                           postinc2	equ	0xFDE
 14695                           postdec2	equ	0xFDD
 14696                           fsr2h	equ	0xFDA
 14697                           fsr2l	equ	0xFD9
 14698                           status	equ	0xFD8
 14699                           
 14700 ;; *************** function _vscp_getMatrixInfo *****************
 14701 ;; Defined at:
 14702 ;;		line 2678 in file "../main.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;  pData           1    wreg     PTR unsigned char 
 14705 ;;		 -> vscp_omsg(13), 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14708 ;;		 -> vscp_omsg(13), 
 14709 ;;  i               1   14[COMRAM] unsigned char 
 14710 ;; Return value:  Size  Location     Type
 14711 ;;		None               void
 14712 ;; Registers used:
 14713 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14714 ;; Tracked objects:
 14715 ;;		On entry : F/0
 14716 ;;		On exit  : F/0
 14717 ;;		Unchanged: F/0
 14718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14719 ;;      Params:         0       0       0       0       0       0       0
 14720 ;;      Locals:         2       0       0       0       0       0       0
 14721 ;;      Temps:          0       0       0       0       0       0       0
 14722 ;;      Totals:         2       0       0       0       0       0       0
 14723 ;;Total ram usage:        2 bytes
 14724 ;; Hardware stack levels used:    1
 14725 ;; Hardware stack levels required when called:    2
 14726 ;; This function calls:
 14727 ;;		Nothing
 14728 ;; This function is called by:
 14729 ;;		_vscp_handleProtocolEvent
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           	psect	text64
 14734  005C28                     __ptext64:
 14735                           	opt stack 0
 14736  005C28                     _vscp_getMatrixInfo:
 14737                           	opt stack 27
 14738                           
 14739                           ;incstack = 0
 14740                           ;incstack = 0
 14741                           ;vscp_getMatrixInfo@pData stored from wreg
 14742  005C28  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14743                           
 14744                           ; BSR set to: 0
 14745                           ;main.c: 2679: uint8_t i;
 14746                           ;main.c: 2683: for (i = 0; i < 8; i++) {
 14747  005C2C  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14748  005C2E                     l8066:
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;main.c: 2684: pData[ i ] = 0;
 14752  005C2E  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14753  005C30  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14754  005C32  6ED9               	movwf	fsr2l,c
 14755  005C34  6ADA               	clrf	fsr2h,c
 14756  005C36  6ADF               	clrf	indf2,c
 14757                           
 14758                           ; BSR set to: 0
 14759  005C38  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14760                           
 14761                           ; BSR set to: 0
 14762  005C3A  0E07               	movlw	7
 14763  005C3C  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14764  005C3E  D7F7               	goto	l8066
 14765                           
 14766                           ; BSR set to: 0
 14767  005C40  0C07               	retlw	7
 14768  005C42                     __end_of_vscp_getMatrixInfo:
 14769                           	opt stack 0
 14770                           tblptru	equ	0xFF8
 14771                           tblptrh	equ	0xFF7
 14772                           tblptrl	equ	0xFF6
 14773                           tablat	equ	0xFF5
 14774                           prodh	equ	0xFF4
 14775                           prodl	equ	0xFF3
 14776                           postinc0	equ	0xFEE
 14777                           wreg	equ	0xFE8
 14778                           postdec1	equ	0xFE5
 14779                           fsr1h	equ	0xFE2
 14780                           fsr1l	equ	0xFE1
 14781                           indf2	equ	0xFDF
 14782                           postinc2	equ	0xFDE
 14783                           postdec2	equ	0xFDD
 14784                           fsr2h	equ	0xFDA
 14785                           fsr2l	equ	0xFD9
 14786                           status	equ	0xFD8
 14787                           
 14788 ;; *************** function _vscp_handleProbeState *****************
 14789 ;; Defined at:
 14790 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 14791 ;; Parameters:    Size  Location     Type
 14792 ;;		None
 14793 ;; Auto vars:     Size  Location     Type
 14794 ;;		None
 14795 ;; Return value:  Size  Location     Type
 14796 ;;		None               void
 14797 ;; Registers used:
 14798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14799 ;; Tracked objects:
 14800 ;;		On entry : 0/0
 14801 ;;		On exit  : F/0
 14802 ;;		Unchanged: 0/0
 14803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14804 ;;      Params:         0       0       0       0       0       0       0
 14805 ;;      Locals:         0       0       0       0       0       0       0
 14806 ;;      Temps:          0       0       0       0       0       0       0
 14807 ;;      Totals:         0       0       0       0       0       0       0
 14808 ;;Total ram usage:        0 bytes
 14809 ;; Hardware stack levels used:    1
 14810 ;; Hardware stack levels required when called:    8
 14811 ;; This function calls:
 14812 ;;		_vscp_goActiveState
 14813 ;;		_vscp_sendEvent
 14814 ;;		_vscp_writeNicknamePermanent
 14815 ;;		_vscp_setSegmentCRC
 14816 ;; This function is called by:
 14817 ;;		_main
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           	psect	text65
 14822  004A1E                     __ptext65:
 14823                           	opt stack 0
 14824  004A1E                     _vscp_handleProbeState:
 14825                           	opt stack 22
 14826                           
 14827                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;incstack = 0
 14831                           ;incstack = 0
 14832  004A1E  D058               	goto	l9676
 14833  004A20                     l9606:
 14834                           
 14835                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 14836  004A20  284F               	incf	_vscp_probe_address,w,c
 14837  004A22  E012               	bz	l9622
 14838                           
 14839                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 14840  004A24  0E81               	movlw	129
 14841  004A26  0100               	movlb	0	; () banked
 14842  004A28  6FCA               	movwf	_vscp_omsg& (0+255),b
 14843                           
 14844                           ; BSR set to: 0
 14845                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 14846  004A2A  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 14850  004A2C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14851  004A2E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14852                           
 14853                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 14854  004A30  0E02               	movlw	2
 14855  004A32  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14856                           
 14857                           ; BSR set to: 0
 14858                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14859  004A34  C04F  F0CF         	movff	_vscp_probe_address,_vscp_omsg+5
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;vscp_firmware.c: 214: vscp_sendEvent();
 14863  004A38  EC57  F02D         	call	_vscp_sendEvent	;wreg free
 14864                           
 14865                           ; BSR set to: 0
 14866                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 14867  004A3C  0E01               	movlw	1
 14868  004A3E  6E4E               	movwf	_vscp_node_substate,c
 14869  004A40                     l9620:
 14870                           
 14871                           ; BSR set to: 0
 14872                           ;vscp_firmware.c: 217: vscp_timer = 0;
 14873  004A40  0101               	movlb	1	; () banked
 14874  004A42  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14875  004A44  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14876                           
 14877                           ;vscp_firmware.c: 219: } else {
 14878  004A46  D04A               	goto	l1046
 14879  004A48                     l9622:
 14880                           
 14881                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 14882  004A48  0E04               	movlw	4
 14883  004A4A  0100               	movlb	0	; () banked
 14884  004A4C  6FBB               	movwf	_vscp_node_state& (0+255),b
 14885                           
 14886                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 14887  004A4E  0E81               	movlw	129
 14888  004A50  6FCA               	movwf	_vscp_omsg& (0+255),b
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 14892  004A52  69CF               	setf	(_vscp_omsg+5)& (0+255),b
 14893                           
 14894                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 14895  004A54  0E07               	movlw	7
 14896  004A56  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 14900  004A58  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14901  004A5A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14902                           
 14903                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 14904  004A5C  0E03               	movlw	3
 14905  004A5E  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14906                           
 14907                           ; BSR set to: 0
 14908                           ;vscp_firmware.c: 232: vscp_sendEvent();
 14909  004A60  EC57  F02D         	call	_vscp_sendEvent	;wreg free
 14910  004A64  D03B               	goto	l1046
 14911  004A66                     l1047:
 14912                           
 14913                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 14914  004A66  0100               	movlb	0	; () banked
 14915  004A68  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 14916  004A6A  D00F               	goto	l9646
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 14920                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 14921  004A6C  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
 14922  004A6E  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14923  004A70  E135               	bnz	l1046
 14924                           
 14925                           ; BSR set to: 0
 14926  004A72  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
 14927  004A74  0A03               	xorlw	3
 14928  004A76  E132               	bnz	l1046
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 14932  004A78  664F               	tstfsz	_vscp_probe_address,c
 14933  004A7A  D003               	goto	l9640
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 14937  004A7C  0E02               	movlw	2
 14938  004A7E  6FBB               	movwf	_vscp_node_state& (0+255),b
 14939  004A80  D7DF               	goto	l9620
 14940  004A82                     l9640:
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;vscp_firmware.c: 256: vscp_probe_address++;
 14944  004A82  2A4F               	incf	_vscp_probe_address,f,c
 14945                           
 14946                           ; BSR set to: 0
 14947                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 14948  004A84  6A4E               	clrf	_vscp_node_substate,c
 14949  004A86                     l9644:
 14950                           
 14951                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 14952  004A86  6A50               	clrf	_vscp_probe_cnt,c
 14953  004A88  D029               	goto	l1046
 14954  004A8A                     l9646:
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 14958  004A8A  0EE9               	movlw	233
 14959  004A8C  0101               	movlb	1	; () banked
 14960  004A8E  5D1C               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14961  004A90  0E03               	movlw	3
 14962  004A92  591D               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14963  004A94  E323               	bnc	l1046
 14964                           
 14965                           ; BSR set to: 1
 14966                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 14967  004A96  2A50               	incf	_vscp_probe_cnt,f,c
 14968                           
 14969                           ; BSR set to: 1
 14970                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 14971  004A98  0E02               	movlw	2
 14972  004A9A  6450               	cpfsgt	_vscp_probe_cnt,c
 14973  004A9C  D017               	goto	l1054
 14974                           
 14975                           ; BSR set to: 1
 14976                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 14977  004A9E  664F               	tstfsz	_vscp_probe_address,c
 14978  004AA0  D005               	goto	l1055
 14979                           
 14980                           ; BSR set to: 1
 14981                           ;vscp_firmware.c: 274: vscp_probe_address++;
 14982  004AA2  2A4F               	incf	_vscp_probe_address,f,c
 14983                           
 14984                           ; BSR set to: 1
 14985                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 14986  004AA4  6A4E               	clrf	_vscp_node_substate,c
 14987                           
 14988                           ; BSR set to: 1
 14989                           ;vscp_firmware.c: 276: vscp_timer = 0;
 14990  004AA6  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14991  004AA8  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14992  004AAA  D7ED               	goto	l9644
 14993  004AAC                     l1055:
 14994                           
 14995                           ; BSR set to: 1
 14996                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 14997  004AAC  C04F  F0BA         	movff	_vscp_probe_address,_vscp_nickname
 14998                           
 14999                           ; BSR set to: 1
 15000                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 15001  004AB0  0E03               	movlw	3
 15002  004AB2  0100               	movlb	0	; () banked
 15003  004AB4  6FBB               	movwf	_vscp_node_state& (0+255),b
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 15007  004AB6  6A4E               	clrf	_vscp_node_substate,c
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 15011  004AB8  51BA               	movf	_vscp_nickname& (0+255),w,b
 15012  004ABA  EC96  F02E         	call	_vscp_writeNicknamePermanent
 15013                           
 15014                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 15015  004ABE  0E40               	movlw	64
 15016  004AC0  EC84  F02E         	call	_vscp_setSegmentCRC
 15017                           
 15018                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 15019  004AC4  6A50               	clrf	_vscp_probe_cnt,c
 15020                           
 15021                           ;vscp_firmware.c: 290: vscp_goActiveState();
 15022  004AC6  ECE9  F02D         	call	_vscp_goActiveState	;wreg free
 15023  004ACA  D008               	goto	l1046
 15024  004ACC                     l1054:
 15025                           
 15026                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 15027  004ACC  6A4E               	clrf	_vscp_node_substate,c
 15028  004ACE  D006               	goto	l1046
 15029  004AD0                     l9676:
 15030  004AD0  504E               	movf	_vscp_node_substate,w,c
 15031                           
 15032                           ; Switch size 1, requested type "speed"
 15033                           ; Number of cases is 3, Range of values is 0 to 2
 15034                           ; switch strategies available:
 15035                           ; Name         Instructions Cycles
 15036                           ; simple_byte           10     6 (average)
 15037                           ;	Chosen strategy is simple_byte
 15038  004AD2  E0A6               	bz	l9606
 15039  004AD4  0A01               	xorlw	1	; case 1
 15040  004AD6  E0C7               	bz	l1047
 15041  004AD8  0A03               	xorlw	3	; case 2
 15042  004ADA  E1F8               	bnz	l1054
 15043  004ADC                     l1046:
 15044                           
 15045                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 15046  004ADC  0100               	movlb	0	; () banked
 15047  004ADE  6BBC               	clrf	_vscp_imsg& (0+255),b
 15048                           
 15049                           ; BSR set to: 0
 15050  004AE0  0012               	return	
 15051  004AE2                     __end_of_vscp_handleProbeState:
 15052                           	opt stack 0
 15053                           tblptru	equ	0xFF8
 15054                           tblptrh	equ	0xFF7
 15055                           tblptrl	equ	0xFF6
 15056                           tablat	equ	0xFF5
 15057                           prodh	equ	0xFF4
 15058                           prodl	equ	0xFF3
 15059                           postinc0	equ	0xFEE
 15060                           wreg	equ	0xFE8
 15061                           postdec1	equ	0xFE5
 15062                           fsr1h	equ	0xFE2
 15063                           fsr1l	equ	0xFE1
 15064                           indf2	equ	0xFDF
 15065                           postinc2	equ	0xFDE
 15066                           postdec2	equ	0xFDD
 15067                           fsr2h	equ	0xFDA
 15068                           fsr2l	equ	0xFD9
 15069                           status	equ	0xFD8
 15070                           
 15071 ;; *************** function _vscp_goActiveState *****************
 15072 ;; Defined at:
 15073 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 15074 ;; Parameters:    Size  Location     Type
 15075 ;;		None
 15076 ;; Auto vars:     Size  Location     Type
 15077 ;;		None
 15078 ;; Return value:  Size  Location     Type
 15079 ;;		None               void
 15080 ;; Registers used:
 15081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15082 ;; Tracked objects:
 15083 ;;		On entry : 0/0
 15084 ;;		On exit  : F/0
 15085 ;;		Unchanged: 0/0
 15086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15087 ;;      Params:         0       0       0       0       0       0       0
 15088 ;;      Locals:         0       0       0       0       0       0       0
 15089 ;;      Temps:          0       0       0       0       0       0       0
 15090 ;;      Totals:         0       0       0       0       0       0       0
 15091 ;;Total ram usage:        0 bytes
 15092 ;; Hardware stack levels used:    1
 15093 ;; Hardware stack levels required when called:    7
 15094 ;; This function calls:
 15095 ;;		_vscp_sendEvent
 15096 ;; This function is called by:
 15097 ;;		_main
 15098 ;;		_vscp_handleProbeState
 15099 ;; This function uses a non-reentrant model
 15100 ;;
 15101                           
 15102                           	psect	text66
 15103  005BD2                     __ptext66:
 15104                           	opt stack 0
 15105  005BD2                     _vscp_goActiveState:
 15106                           	opt stack 22
 15107                           
 15108                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;incstack = 0
 15112                           ;incstack = 0
 15113  005BD2  0E81               	movlw	129
 15114  005BD4  0100               	movlb	0	; () banked
 15115  005BD6  6FCA               	movwf	_vscp_omsg& (0+255),b
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 15119  005BD8  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 15123  005BDA  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15124  005BDC  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15125                           
 15126                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 15127  005BDE  0E02               	movlw	2
 15128  005BE0  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15129                           
 15130                           ; BSR set to: 0
 15131                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 15132  005BE2  C0BA  F0CF         	movff	_vscp_nickname,_vscp_omsg+5
 15133                           
 15134                           ; BSR set to: 0
 15135                           ;vscp_firmware.c: 358: vscp_sendEvent();
 15136  005BE6  EC57  F02D         	call	_vscp_sendEvent	;wreg free
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 15140  005BEA  0E01               	movlw	1
 15141  005BEC  6E4D               	movwf	_vscp_initledfunc,c
 15142                           
 15143                           ; BSR set to: 0
 15144  005BEE  0C01               	retlw	1
 15145  005BF0                     __end_of_vscp_goActiveState:
 15146                           	opt stack 0
 15147                           tblptru	equ	0xFF8
 15148                           tblptrh	equ	0xFF7
 15149                           tblptrl	equ	0xFF6
 15150                           tablat	equ	0xFF5
 15151                           prodh	equ	0xFF4
 15152                           prodl	equ	0xFF3
 15153                           postinc0	equ	0xFEE
 15154                           wreg	equ	0xFE8
 15155                           postdec1	equ	0xFE5
 15156                           fsr1h	equ	0xFE2
 15157                           fsr1l	equ	0xFE1
 15158                           indf2	equ	0xFDF
 15159                           postinc2	equ	0xFDE
 15160                           postdec2	equ	0xFDD
 15161                           fsr2h	equ	0xFDA
 15162                           fsr2l	equ	0xFD9
 15163                           status	equ	0xFD8
 15164                           
 15165 ;; *************** function _vscp_sendEvent *****************
 15166 ;; Defined at:
 15167 ;;		line 1270 in file "../../vscp_firmware/common/vscp_firmware.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;  rv              1   66[COMRAM] unsigned char 
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  1    wreg      unsigned char 
 15174 ;; Registers used:
 15175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : F/0
 15178 ;;		On exit  : F/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15181 ;;      Params:         0       0       0       0       0       0       0
 15182 ;;      Locals:         1       0       0       0       0       0       0
 15183 ;;      Temps:          0       0       0       0       0       0       0
 15184 ;;      Totals:         1       0       0       0       0       0       0
 15185 ;;Total ram usage:        1 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    6
 15188 ;; This function calls:
 15189 ;;		_sendVSCPFrame
 15190 ;; This function is called by:
 15191 ;;		_doWork
 15192 ;;		_doOneSecondWork
 15193 ;;		_sendTempEvent
 15194 ;;		_vscp_handleProbeState
 15195 ;;		_vscp_goActiveState
 15196 ;;		_vscp_sendHeartBeat
 15197 ;;		_vscp_newNodeOnline
 15198 ;;		_vscp_handleProtocolEvent
 15199 ;; This function uses a non-reentrant model
 15200 ;;
 15201                           
 15202                           	psect	text67
 15203  005AAE                     __ptext67:
 15204                           	opt stack 0
 15205  005AAE                     _vscp_sendEvent:
 15206                           	opt stack 23
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;vscp_firmware.c: 1279: vscp_errorcnt++;
 15210                           
 15211                           ; BSR set to: 0
 15212                           ;incstack = 0
 15213                           ;incstack = 0
 15214  005AAE  C0CC  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15215  005AB2  C0CD  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15216  005AB6  C0CE  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15217  005ABA  C0BA  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15218  005ABE  C0CB  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15219  005AC2  51CA               	movf	_vscp_omsg& (0+255),w,b
 15220  005AC4  0B0F               	andlw	15
 15221  005AC6  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15222  005AC8  0ECF               	movlw	low (_vscp_omsg+5)
 15223  005ACA  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15224  005ACC  EC8F  F026         	call	_sendVSCPFrame	;wreg free
 15225  005AD0  6E43               	movwf	vscp_sendEvent@rv,c
 15226                           
 15227                           ; BSR set to: 0
 15228                           ;vscp_firmware.c: 1280: }
 15229                           ;vscp_firmware.c: 1282: return rv;
 15230  005AD2  5043               	movf	vscp_sendEvent@rv,w,c
 15231                           
 15232                           ; BSR set to: 0
 15233  005AD4  0012               	return	
 15234  005AD6                     __end_of_vscp_sendEvent:
 15235                           	opt stack 0
 15236                           tblptru	equ	0xFF8
 15237                           tblptrh	equ	0xFF7
 15238                           tblptrl	equ	0xFF6
 15239                           tablat	equ	0xFF5
 15240                           prodh	equ	0xFF4
 15241                           prodl	equ	0xFF3
 15242                           postinc0	equ	0xFEE
 15243                           wreg	equ	0xFE8
 15244                           postdec1	equ	0xFE5
 15245                           fsr1h	equ	0xFE2
 15246                           fsr1l	equ	0xFE1
 15247                           indf2	equ	0xFDF
 15248                           postinc2	equ	0xFDE
 15249                           postdec2	equ	0xFDD
 15250                           fsr2h	equ	0xFDA
 15251                           fsr2l	equ	0xFD9
 15252                           status	equ	0xFD8
 15253                           
 15254 ;; *************** function _sendVSCPFrame *****************
 15255 ;; Defined at:
 15256 ;;		line 2849 in file "../main.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15259 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15260 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15261 ;;  priority        1    4[BANK0 ] unsigned char 
 15262 ;;  size            1    5[BANK0 ] unsigned char 
 15263 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15264 ;;		 -> vscp_omsg(13), 
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;  id              4   27[BANK0 ] unsigned long 
 15267 ;; Return value:  Size  Location     Type
 15268 ;;                  1    wreg      unsigned char 
 15269 ;; Registers used:
 15270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15271 ;; Tracked objects:
 15272 ;;		On entry : F/0
 15273 ;;		On exit  : F/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15276 ;;      Params:         0       7       0       0       0       0       0
 15277 ;;      Locals:         0       4       0       0       0       0       0
 15278 ;;      Temps:          0      20       0       0       0       0       0
 15279 ;;      Totals:         0      31       0       0       0       0       0
 15280 ;;Total ram usage:       31 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    5
 15283 ;; This function calls:
 15284 ;;		_sendCANFrame
 15285 ;; This function is called by:
 15286 ;;		_vscp_sendEvent
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           	psect	text68
 15291  004D1E                     __ptext68:
 15292                           	opt stack 0
 15293  004D1E                     _sendVSCPFrame:
 15294                           	opt stack 23
 15295                           
 15296                           ; BSR set to: 0
 15297                           ;main.c: 2850: uint32_t id = ((uint32_t) priority << 26) |
 15298                           ;main.c: 2851: ((uint32_t) vscpclass << 16) |
 15299                           ;main.c: 2852: ((uint32_t) vscptype << 8) |
 15300                           ;main.c: 2853: nodeid;
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;incstack = 0
 15304                           ;incstack = 0
 15305  004D1E  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15306  004D22  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15307  004D24  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15308  004D26  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15309  004D28  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15310  004D2C  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15311  004D30  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15312  004D34  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15313  004D36  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15314  004D38  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15315  004D3A  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15316  004D3C  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15317  004D3E  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15318  004D40  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15319  004D42  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15320  004D46  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15321  004D4A  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15322  004D4C  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15323  004D4E  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15324  004D52  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15325  004D54  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15326  004D56  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15327  004D58  0E1A               	movlw	26
 15328  004D5A                     u8995:
 15329  004D5A  90D8               	bcf	status,0,c
 15330  004D5C  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15331  004D5E  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15332  004D60  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15333  004D62  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15334  004D64  2EE8               	decfsz	wreg,f,c
 15335  004D66  D7F9               	goto	u8995
 15336  004D68  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15337  004D6A  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15338  004D6C  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15339  004D6E  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15340  004D70  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15341  004D72  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15342  004D74  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15343  004D76  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15344  004D78  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15345  004D7A  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15346  004D7C  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15347  004D7E  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15348  004D80  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15349  004D82  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15350  004D84  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15351  004D86  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15352  004D88  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15353  004D8A  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15354  004D8C  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15355  004D8E  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15356  004D90  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15357  004D92  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15358  004D94  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15359  004D96  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15360  004D98  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15361  004D9A  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15362  004D9C  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15363  004D9E  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15364  004DA0  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15365  004DA2  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15366  004DA4  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15367  004DA6  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15368  004DA8  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15369                           
 15370                           ; BSR set to: 0
 15371                           ;main.c: 2857: vscp_errorcnt++;
 15372  004DAA  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15373  004DAE  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15374  004DB2  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15375  004DB6  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15376  004DBA  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15377  004DBE  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15378  004DC2  EC46  F02C         	call	_sendCANFrame	;wreg free
 15379  004DC6  0900               	iorlw	0
 15380                           
 15381                           ; BSR set to: 0
 15382                           ;main.c: 2858: return 0;
 15383  004DC8  0E00               	movlw	0
 15384  004DCA  A4D8               	btfss	status,2,c
 15385                           
 15386                           ; BSR set to: 0
 15387                           ;main.c: 2859: }
 15388                           ;main.c: 2861: return 1;
 15389  004DCC  0E01               	movlw	1
 15390                           
 15391                           ; BSR set to: 0
 15392  004DCE  0012               	return	
 15393  004DD0                     __end_of_sendVSCPFrame:
 15394                           	opt stack 0
 15395                           tblptru	equ	0xFF8
 15396                           tblptrh	equ	0xFF7
 15397                           tblptrl	equ	0xFF6
 15398                           tablat	equ	0xFF5
 15399                           prodh	equ	0xFF4
 15400                           prodl	equ	0xFF3
 15401                           postinc0	equ	0xFEE
 15402                           wreg	equ	0xFE8
 15403                           postdec1	equ	0xFE5
 15404                           fsr1h	equ	0xFE2
 15405                           fsr1l	equ	0xFE1
 15406                           indf2	equ	0xFDF
 15407                           postinc2	equ	0xFDE
 15408                           postdec2	equ	0xFDD
 15409                           fsr2h	equ	0xFDA
 15410                           fsr2l	equ	0xFD9
 15411                           status	equ	0xFD8
 15412                           
 15413 ;; *************** function _sendCANFrame *****************
 15414 ;; Defined at:
 15415 ;;		line 2896 in file "../main.c"
 15416 ;; Parameters:    Size  Location     Type
 15417 ;;  id              4   59[COMRAM] unsigned long 
 15418 ;;  dlc             1   63[COMRAM] unsigned char 
 15419 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15420 ;;		 -> vscp_omsg(13), 
 15421 ;; Auto vars:     Size  Location     Type
 15422 ;;  rv              1   65[COMRAM] unsigned char 
 15423 ;; Return value:  Size  Location     Type
 15424 ;;                  1    wreg      unsigned char 
 15425 ;; Registers used:
 15426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15427 ;; Tracked objects:
 15428 ;;		On entry : F/0
 15429 ;;		On exit  : F/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15432 ;;      Params:         6       0       0       0       0       0       0
 15433 ;;      Locals:         1       0       0       0       0       0       0
 15434 ;;      Temps:          0       0       0       0       0       0       0
 15435 ;;      Totals:         7       0       0       0       0       0       0
 15436 ;;Total ram usage:        7 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; Hardware stack levels required when called:    4
 15439 ;; This function calls:
 15440 ;;		_ECANSendMessage
 15441 ;; This function is called by:
 15442 ;;		_sendVSCPFrame
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           	psect	text69
 15447  00588C                     __ptext69:
 15448                           	opt stack 0
 15449  00588C                     _sendCANFrame:
 15450                           	opt stack 23
 15451                           
 15452                           ; BSR set to: 0
 15453                           ;main.c: 2897: uint8_t rv = 0;
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;incstack = 0
 15457                           ;incstack = 0
 15458  00588C  6A42               	clrf	sendCANFrame@rv,c
 15459                           
 15460                           ;main.c: 2898: sendTimer = 0;
 15461  00588E  6A4A               	clrf	_sendTimer,c
 15462                           
 15463                           ;main.c: 2900: while ( sendTimer < 1 ) {
 15464  005890  D015               	goto	l11074
 15465  005892                     l11070:
 15466                           
 15467                           ;main.c: 2901: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15468  005892  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15469  005896  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15470  00589A  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15471  00589E  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15472  0058A2  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15473  0058A6  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15474  0058AA  0E20               	movlw	32
 15475  0058AC  6E1E               	movwf	?_ECANSendMessage+6,c
 15476  0058AE  ECE6  F01F         	call	_ECANSendMessage	;wreg free
 15477  0058B2  0900               	iorlw	0
 15478  0058B4  E003               	bz	l11074
 15479                           
 15480                           ;main.c: 2902: rv = 1;
 15481  0058B6  0E01               	movlw	1
 15482  0058B8  6E42               	movwf	sendCANFrame@rv,c
 15483                           
 15484                           ;main.c: 2903: break;
 15485  0058BA  D002               	goto	l635
 15486  0058BC                     l11074:
 15487  0058BC  504A               	movf	_sendTimer,w,c
 15488  0058BE  E0E9               	bz	l11070
 15489  0058C0                     l635:
 15490                           
 15491                           ;main.c: 2904: }
 15492                           ;main.c: 2905: }
 15493                           ;main.c: 2907: vscp_omsg.flags = 0;
 15494  0058C0  0100               	movlb	0	; () banked
 15495  0058C2  6BCA               	clrf	_vscp_omsg& (0+255),b
 15496                           
 15497                           ; BSR set to: 0
 15498                           ;main.c: 2909: return rv;
 15499  0058C4  5042               	movf	sendCANFrame@rv,w,c
 15500                           
 15501                           ; BSR set to: 0
 15502  0058C6  0012               	return	
 15503  0058C8                     __end_of_sendCANFrame:
 15504                           	opt stack 0
 15505                           tblptru	equ	0xFF8
 15506                           tblptrh	equ	0xFF7
 15507                           tblptrl	equ	0xFF6
 15508                           tablat	equ	0xFF5
 15509                           prodh	equ	0xFF4
 15510                           prodl	equ	0xFF3
 15511                           postinc0	equ	0xFEE
 15512                           wreg	equ	0xFE8
 15513                           postdec1	equ	0xFE5
 15514                           fsr1h	equ	0xFE2
 15515                           fsr1l	equ	0xFE1
 15516                           indf2	equ	0xFDF
 15517                           postinc2	equ	0xFDE
 15518                           postdec2	equ	0xFDD
 15519                           fsr2h	equ	0xFDA
 15520                           fsr2l	equ	0xFD9
 15521                           status	equ	0xFD8
 15522                           
 15523 ;; *************** function _ECANSendMessage *****************
 15524 ;; Defined at:
 15525 ;;		line 617 in file "../ECAN.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;  id              4   23[COMRAM] unsigned long 
 15528 ;;  data            1   27[COMRAM] PTR unsigned char 
 15529 ;;		 -> vscp_omsg(13), 
 15530 ;;  dataLen         1   28[COMRAM] unsigned char 
 15531 ;;  msgFlags        1   29[COMRAM] enum E16306
 15532 ;; Auto vars:     Size  Location     Type
 15533 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15534 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15535 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15536 ;;		 -> B0CON(1), 
 15537 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15538 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15539 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15540 ;;		 -> B0CON(1), 
 15541 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15542 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15543 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15544 ;;		 -> B0CON(1), 
 15545 ;;  i               1   56[COMRAM] unsigned char 
 15546 ;;  temp            1   55[COMRAM] unsigned char 
 15547 ;;  tempBSEL0       1   52[COMRAM] struct .
 15548 ;;  j               1   51[COMRAM] unsigned char 
 15549 ;;  buffers         1   50[COMRAM] unsigned char 
 15550 ;;  mode            1   49[COMRAM] unsigned char 
 15551 ;; Return value:  Size  Location     Type
 15552 ;;                  1    wreg      enum E15660
 15553 ;; Registers used:
 15554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15560 ;;      Params:         7       0       0       0       0       0       0
 15561 ;;      Locals:        28       0       0       0       0       0       0
 15562 ;;      Temps:          1       0       0       0       0       0       0
 15563 ;;      Totals:        36       0       0       0       0       0       0
 15564 ;;Total ram usage:       36 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:    3
 15567 ;; This function calls:
 15568 ;;		__CANIDToRegs
 15569 ;; This function is called by:
 15570 ;;		_sendCANFrame
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           	psect	text70
 15575  003FCC                     __ptext70:
 15576                           	opt stack 0
 15577  003FCC                     _ECANSendMessage:
 15578                           	opt stack 23
 15579                           
 15580                           ;ECAN.c: 619: BYTE mode;
 15581                           ;ECAN.c: 620: BYTE buffers;
 15582                           ;ECAN.c: 628: BYTE i,j;
 15583                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15584                           ;ECAN.c: 630: BYTE* pb[9];
 15585                           ;ECAN.c: 631: BYTE temp;
 15586                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15587                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;incstack = 0
 15591                           ;incstack = 0
 15592  003FCC  0E0F               	movlw	15	;volatile
 15593  003FCE  6E21               	movwf	ECANSendMessage@pb+1,c
 15594  003FD0  0E40               	movlw	64	;volatile
 15595  003FD2  6E20               	movwf	ECANSendMessage@pb,c
 15596                           
 15597                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15598  003FD4  0E0F               	movlw	15	;volatile
 15599  003FD6  6E23               	movwf	ECANSendMessage@pb+3,c
 15600  003FD8  0E30               	movlw	48	;volatile
 15601  003FDA  6E22               	movwf	ECANSendMessage@pb+2,c
 15602                           
 15603                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15604  003FDC  0E0F               	movlw	15	;volatile
 15605  003FDE  6E25               	movwf	ECANSendMessage@pb+5,c
 15606  003FE0  0E20               	movlw	32	;volatile
 15607  003FE2  6E24               	movwf	ECANSendMessage@pb+4,c
 15608                           
 15609                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15610  003FE4  0E0E               	movlw	14	;volatile
 15611  003FE6  6E27               	movwf	ECANSendMessage@pb+7,c
 15612  003FE8  0E20               	movlw	32	;volatile
 15613  003FEA  6E26               	movwf	ECANSendMessage@pb+6,c
 15614                           
 15615                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15616  003FEC  0E0E               	movlw	14	;volatile
 15617  003FEE  6E29               	movwf	ECANSendMessage@pb+9,c
 15618  003FF0  0E30               	movlw	48	;volatile
 15619  003FF2  6E28               	movwf	ECANSendMessage@pb+8,c
 15620                           
 15621                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15622  003FF4  0E0E               	movlw	14	;volatile
 15623  003FF6  6E2B               	movwf	ECANSendMessage@pb+11,c
 15624  003FF8  0E40               	movlw	64	;volatile
 15625  003FFA  6E2A               	movwf	ECANSendMessage@pb+10,c
 15626                           
 15627                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15628  003FFC  0E0E               	movlw	14	;volatile
 15629  003FFE  6E2D               	movwf	ECANSendMessage@pb+13,c
 15630  004000  0E50               	movlw	80	;volatile
 15631  004002  6E2C               	movwf	ECANSendMessage@pb+12,c
 15632                           
 15633                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15634  004004  0E0E               	movlw	14	;volatile
 15635  004006  6E2F               	movwf	ECANSendMessage@pb+15,c
 15636  004008  0E60               	movlw	96	;volatile
 15637  00400A  6E2E               	movwf	ECANSendMessage@pb+14,c
 15638                           
 15639                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15640  00400C  0E0E               	movlw	14	;volatile
 15641  00400E  6E31               	movwf	ECANSendMessage@pb+17,c
 15642  004010  0E70               	movlw	112	;volatile
 15643  004012  6E30               	movwf	ECANSendMessage@pb+16,c
 15644                           
 15645                           ; BSR set to: 14
 15646                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15647  004014  5077               	movf	3959,w,c	;volatile
 15648  004016  0BC0               	andlw	192
 15649  004018  6E32               	movwf	ECANSendMessage@mode,c
 15650                           
 15651                           ; BSR set to: 14
 15652                           ;ECAN.c: 660: if ( mode == 0x00 )
 15653  00401A  6632               	tstfsz	ECANSendMessage@mode,c
 15654  00401C  D002               	goto	l11088
 15655                           
 15656                           ; BSR set to: 14
 15657                           ;ECAN.c: 661: buffers = 2;
 15658  00401E  0E02               	movlw	2
 15659  004020  D001               	goto	L21
 15660  004022                     l11088:
 15661                           
 15662                           ; BSR set to: 14
 15663                           ;ECAN.c: 662: else
 15664                           ;ECAN.c: 663: buffers = 8;
 15665  004022  0E08               	movlw	8
 15666  004024                     L21:
 15667  004024  6E33               	movwf	ECANSendMessage@buffers,c
 15668                           
 15669                           ; BSR set to: 14
 15670                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15671  004026  010D               	movlb	13	; () banked
 15672  004028  90D8               	bcf	status,0,c
 15673  00402A  31F8               	rrcf	248,w,b	;volatile
 15674  00402C  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15675                           
 15676                           ; BSR set to: 13
 15677                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15678  00402E  6A39               	clrf	ECANSendMessage@i,c
 15679  004030  D07B               	goto	l11148
 15680  004032                     l11094:
 15681                           
 15682                           ;ECAN.c: 688: {
 15683                           ;ECAN.c: 693: ptr = pb[i];
 15684  004032  5039               	movf	ECANSendMessage@i,w,c
 15685  004034  0D02               	mullw	2
 15686  004036  50F3               	movf	prodl,w,c
 15687  004038  0F20               	addlw	low ECANSendMessage@pb
 15688  00403A  6ED9               	movwf	fsr2l,c
 15689  00403C  6ADA               	clrf	fsr2h,c
 15690  00403E  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15691  004042  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15692                           
 15693                           ;ECAN.c: 694: tempPtr = ptr;
 15694  004046  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15695  00404A  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15696                           
 15697                           ;ECAN.c: 702: if ( i > 2 )
 15698  00404E  0E02               	movlw	2
 15699  004050  6439               	cpfsgt	ECANSendMessage@i,c
 15700  004052  D004               	goto	l11106
 15701                           
 15702                           ;ECAN.c: 703: {
 15703                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15704  004054  90D8               	bcf	status,0,c
 15705  004056  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15706                           
 15707                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15708  004058  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15709  00405A  D065               	goto	l11146
 15710  00405C                     l11106:
 15711                           
 15712                           ;ECAN.c: 714: }
 15713                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15714  00405C  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15715  004060  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15716  004064  50DF               	movf	indf2,w,c
 15717  004066  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15718  004068  B61F               	btfsc	??_ECANSendMessage,3,c
 15719  00406A  D05D               	goto	l11146
 15720                           
 15721                           ;ECAN.c: 721: {
 15722                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15723  00406C  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15724  004070  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15725  004074  0EFC               	movlw	252
 15726  004076  16DF               	andwf	indf2,f,c
 15727                           
 15728                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15729  004078  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15730  00407C  0E03               	movlw	3
 15731  00407E  161F               	andwf	??_ECANSendMessage,f,c
 15732  004080  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15733  004084  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15734  004088  501F               	movf	??_ECANSendMessage,w,c
 15735  00408A  12DF               	iorwf	indf2,f,c
 15736                           
 15737                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15738  00408C  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15739  00408E  D004               	goto	l823
 15740                           
 15741                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15742  004090  501D               	movf	ECANSendMessage@dataLen,w,c
 15743  004092  0940               	iorlw	64
 15744  004094  6E38               	movwf	ECANSendMessage@temp,c
 15745  004096  D002               	goto	l11116
 15746  004098                     l823:
 15747                           
 15748                           ;ECAN.c: 729: else
 15749                           ;ECAN.c: 730: temp = dataLen;
 15750  004098  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15751  00409C                     l11116:
 15752                           
 15753                           ;ECAN.c: 732: *(ptr+5) = temp;
 15754  00409C  EE20 F005          	lfsr	2,5
 15755  0040A0  503A               	movf	ECANSendMessage@ptr,w,c
 15756  0040A2  26D9               	addwf	fsr2l,f,c
 15757  0040A4  503B               	movf	ECANSendMessage@ptr+1,w,c
 15758  0040A6  22DA               	addwfc	fsr2h,f,c
 15759  0040A8  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15760                           
 15761                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15762  0040AC  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15763  0040AE  D003               	goto	l825
 15764                           
 15765                           ;ECAN.c: 736: temp = 1;
 15766  0040B0  0E01               	movlw	1
 15767  0040B2  6E38               	movwf	ECANSendMessage@temp,c
 15768  0040B4  D001               	goto	l11122
 15769  0040B6                     l825:
 15770                           
 15771                           ;ECAN.c: 738: else
 15772                           ;ECAN.c: 739: temp = 0;
 15773  0040B6  6A38               	clrf	ECANSendMessage@temp,c
 15774  0040B8                     l11122:
 15775                           
 15776                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15777  0040B8  283A               	incf	ECANSendMessage@ptr,w,c
 15778  0040BA  6E0E               	movwf	?__CANIDToRegs,c
 15779  0040BC  0E00               	movlw	0
 15780  0040BE  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15781  0040C0  6E0F               	movwf	?__CANIDToRegs+1,c
 15782  0040C2  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15783  0040C6  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15784  0040CA  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15785  0040CE  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15786  0040D2  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15787  0040D6  ECFB  F021         	call	__CANIDToRegs	;wreg free
 15788                           
 15789                           ;ECAN.c: 745: ptr += 6;
 15790  0040DA  0E06               	movlw	6
 15791  0040DC  263A               	addwf	ECANSendMessage@ptr,f,c
 15792  0040DE  0E00               	movlw	0
 15793  0040E0  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15794                           
 15795                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15796  0040E2  6A34               	clrf	ECANSendMessage@j,c
 15797  0040E4  D00D               	goto	l11136
 15798  0040E6                     l11128:
 15799                           
 15800                           ;ECAN.c: 748: *ptr++ = *data++;
 15801  0040E6  501C               	movf	ECANSendMessage@data,w,c
 15802  0040E8  6ED9               	movwf	fsr2l,c
 15803  0040EA  6ADA               	clrf	fsr2h,c
 15804  0040EC  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15805  0040F0  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15806  0040F4  CFDF FFE7          	movff	indf2,indf1
 15807  0040F8  2A1C               	incf	ECANSendMessage@data,f,c
 15808  0040FA  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15809  0040FC  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15810  0040FE  2A34               	incf	ECANSendMessage@j,f,c
 15811  004100                     l11136:
 15812  004100  501D               	movf	ECANSendMessage@dataLen,w,c
 15813  004102  5C34               	subwf	ECANSendMessage@j,w,c
 15814  004104  E3F0               	bnc	l11128
 15815                           
 15816                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15817  004106  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15818  00410A  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15819  00410E  50DF               	movf	indf2,w,c
 15820  004110  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15821  004112  B41F               	btfsc	??_ECANSendMessage,2,c
 15822  004114  D006               	goto	l11142
 15823                           
 15824                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15825  004116  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15826  00411A  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15827  00411E  0E00               	movlw	0
 15828  004120  86DB               	bsf	plusw2,3,c
 15829  004122                     l11142:
 15830                           
 15831                           ;ECAN.c: 755: return TRUE;
 15832  004122  0E01               	movlw	1
 15833  004124  D005               	goto	l831
 15834  004126                     l11146:
 15835  004126  2A39               	incf	ECANSendMessage@i,f,c
 15836  004128                     l11148:
 15837  004128  5033               	movf	ECANSendMessage@buffers,w,c
 15838  00412A  5C39               	subwf	ECANSendMessage@i,w,c
 15839  00412C  E382               	bnc	l11094
 15840                           
 15841                           ;ECAN.c: 756: }
 15842                           ;ECAN.c: 757: }
 15843                           ;ECAN.c: 760: return FALSE;
 15844  00412E  0E00               	movlw	0
 15845  004130                     l831:
 15846  004130  0012               	return	
 15847  004132                     __end_of_ECANSendMessage:
 15848                           	opt stack 0
 15849                           tblptru	equ	0xFF8
 15850                           tblptrh	equ	0xFF7
 15851                           tblptrl	equ	0xFF6
 15852                           tablat	equ	0xFF5
 15853                           prodh	equ	0xFF4
 15854                           prodl	equ	0xFF3
 15855                           postinc0	equ	0xFEE
 15856                           wreg	equ	0xFE8
 15857                           indf1	equ	0xFE7
 15858                           postdec1	equ	0xFE5
 15859                           fsr1h	equ	0xFE2
 15860                           fsr1l	equ	0xFE1
 15861                           indf2	equ	0xFDF
 15862                           postinc2	equ	0xFDE
 15863                           postdec2	equ	0xFDD
 15864                           plusw2	equ	0xFDB
 15865                           fsr2h	equ	0xFDA
 15866                           fsr2l	equ	0xFD9
 15867                           status	equ	0xFD8
 15868                           
 15869 ;; *************** function __CANIDToRegs *****************
 15870 ;; Defined at:
 15871 ;;		line 1099 in file "../ECAN.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15874 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15875 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15876 ;;		 -> B0CON(1), 
 15877 ;;  val             4   15[COMRAM] unsigned long 
 15878 ;;  type            1   19[COMRAM] unsigned char 
 15879 ;; Auto vars:     Size  Location     Type
 15880 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15881 ;;		 -> _CANIDToRegs@val(4), 
 15882 ;; Return value:  Size  Location     Type
 15883 ;;		None               void
 15884 ;; Registers used:
 15885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15886 ;; Tracked objects:
 15887 ;;		On entry : 0/D
 15888 ;;		On exit  : 0/0
 15889 ;;		Unchanged: 0/0
 15890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15891 ;;      Params:         7       0       0       0       0       0       0
 15892 ;;      Locals:         1       0       0       0       0       0       0
 15893 ;;      Temps:          2       0       0       0       0       0       0
 15894 ;;      Totals:        10       0       0       0       0       0       0
 15895 ;;Total ram usage:       10 bytes
 15896 ;; Hardware stack levels used:    1
 15897 ;; Hardware stack levels required when called:    2
 15898 ;; This function calls:
 15899 ;;		Nothing
 15900 ;; This function is called by:
 15901 ;;		_ECANSendMessage
 15902 ;; This function uses a non-reentrant model
 15903 ;;
 15904                           
 15905                           	psect	text71
 15906  0043F6                     __ptext71:
 15907                           	opt stack 0
 15908  0043F6                     __CANIDToRegs:
 15909                           	opt stack 23
 15910                           
 15911                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15912                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15913                           
 15914                           ;incstack = 0
 15915                           ;incstack = 0
 15916  0043F6  0E10               	movlw	low __CANIDToRegs@val
 15917  0043F8  6E17               	movwf	__CANIDToRegs@Value,c
 15918                           
 15919                           ;ECAN.c: 1104: if ( type == 0 )
 15920  0043FA  6614               	tstfsz	__CANIDToRegs@type,c
 15921  0043FC  D037               	goto	l11164
 15922                           
 15923                           ;ECAN.c: 1105: {
 15924                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15925  0043FE  5017               	movf	__CANIDToRegs@Value,w,c
 15926  004400  6ED9               	movwf	fsr2l,c
 15927  004402  6ADA               	clrf	fsr2h,c
 15928  004404  50DF               	movf	indf2,w,c
 15929  004406  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15930  004408  90D8               	bcf	status,0,c
 15931  00440A  3215               	rrcf	??__CANIDToRegs,f,c
 15932  00440C  90D8               	bcf	status,0,c
 15933  00440E  3215               	rrcf	??__CANIDToRegs,f,c
 15934  004410  90D8               	bcf	status,0,c
 15935  004412  3015               	rrcf	??__CANIDToRegs,w,c
 15936  004414  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15937  004418  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15938  00441C  6EDF               	movwf	indf2,c
 15939                           
 15940                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15941  00441E  5017               	movf	__CANIDToRegs@Value,w,c
 15942  004420  6ED9               	movwf	fsr2l,c
 15943  004422  6ADA               	clrf	fsr2h,c
 15944  004424  2AD9               	incf	fsr2l,f,c
 15945  004426  6ADA               	clrf	fsr2h,c
 15946  004428  50DF               	movf	indf2,w,c
 15947  00442A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15948  00442C  0E05               	movlw	5
 15949  00442E  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15950  004430                     u9135:
 15951  004430  90D8               	bcf	status,0,c
 15952  004432  3615               	rlcf	??__CANIDToRegs,f,c
 15953  004434  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15954  004436  D7FC               	goto	u9135
 15955  004438  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15956  00443C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15957  004440  5015               	movf	??__CANIDToRegs,w,c
 15958  004442  12DF               	iorwf	indf2,f,c
 15959                           
 15960                           ;ECAN.c: 1109: ptr++;
 15961  004444  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15962  004446  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15963                           
 15964                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15965  004448  5017               	movf	__CANIDToRegs@Value,w,c
 15966  00444A  6ED9               	movwf	fsr2l,c
 15967  00444C  6ADA               	clrf	fsr2h,c
 15968  00444E  50DF               	movf	indf2,w,c
 15969  004450  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15970  004452  0E05               	movlw	5
 15971  004454  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15972  004456                     u9145:
 15973  004456  90D8               	bcf	status,0,c
 15974  004458  3615               	rlcf	??__CANIDToRegs,f,c
 15975  00445A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15976  00445C  D7FC               	goto	u9145
 15977  00445E  5015               	movf	??__CANIDToRegs,w,c
 15978  004460  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15979  004464  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15980  004468  6EDF               	movwf	indf2,c
 15981                           
 15982                           ;ECAN.c: 1111: }
 15983  00446A  D06C               	goto	l885
 15984  00446C                     l11164:
 15985                           
 15986                           ;ECAN.c: 1112: else
 15987                           ;ECAN.c: 1113: {
 15988                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15989  00446C  5017               	movf	__CANIDToRegs@Value,w,c
 15990  00446E  6ED9               	movwf	fsr2l,c
 15991  004470  6ADA               	clrf	fsr2h,c
 15992  004472  0E02               	movlw	2
 15993  004474  26D9               	addwf	fsr2l,f,c
 15994  004476  6ADA               	clrf	fsr2h,c
 15995  004478  50DF               	movf	indf2,w,c
 15996  00447A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15997  00447C  0E05               	movlw	5
 15998  00447E  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15999  004480                     u9155:
 16000  004480  90D8               	bcf	status,0,c
 16001  004482  3215               	rrcf	??__CANIDToRegs,f,c
 16002  004484  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16003  004486  D7FC               	goto	u9155
 16004  004488  5015               	movf	??__CANIDToRegs,w,c
 16005  00448A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16006  00448E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16007  004492  6EDF               	movwf	indf2,c
 16008                           
 16009                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16010  004494  5017               	movf	__CANIDToRegs@Value,w,c
 16011  004496  6ED9               	movwf	fsr2l,c
 16012  004498  6ADA               	clrf	fsr2h,c
 16013  00449A  0E03               	movlw	3
 16014  00449C  26D9               	addwf	fsr2l,f,c
 16015  00449E  6ADA               	clrf	fsr2h,c
 16016  0044A0  50DF               	movf	indf2,w,c
 16017  0044A2  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16018  0044A4  90D8               	bcf	status,0,c
 16019  0044A6  3615               	rlcf	??__CANIDToRegs,f,c
 16020  0044A8  90D8               	bcf	status,0,c
 16021  0044AA  3615               	rlcf	??__CANIDToRegs,f,c
 16022  0044AC  90D8               	bcf	status,0,c
 16023  0044AE  3615               	rlcf	??__CANIDToRegs,f,c
 16024  0044B0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16025  0044B4  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16026  0044B8  5015               	movf	??__CANIDToRegs,w,c
 16027  0044BA  12DF               	iorwf	indf2,f,c
 16028                           
 16029                           ;ECAN.c: 1117: ptr++;
 16030  0044BC  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16031  0044BE  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16032                           
 16033                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16034  0044C0  5017               	movf	__CANIDToRegs@Value,w,c
 16035  0044C2  6ED9               	movwf	fsr2l,c
 16036  0044C4  6ADA               	clrf	fsr2h,c
 16037  0044C6  0E02               	movlw	2
 16038  0044C8  26D9               	addwf	fsr2l,f,c
 16039  0044CA  6ADA               	clrf	fsr2h,c
 16040  0044CC  50DF               	movf	indf2,w,c
 16041  0044CE  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16042  0044D0  90D8               	bcf	status,0,c
 16043  0044D2  3615               	rlcf	??__CANIDToRegs,f,c
 16044  0044D4  90D8               	bcf	status,0,c
 16045  0044D6  3615               	rlcf	??__CANIDToRegs,f,c
 16046  0044D8  90D8               	bcf	status,0,c
 16047  0044DA  3415               	rlcf	??__CANIDToRegs,w,c
 16048  0044DC  0BE0               	andlw	224
 16049  0044DE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16050  0044E2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16051  0044E6  6EDF               	movwf	indf2,c
 16052                           
 16053                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16054  0044E8  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16055  0044EC  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16056  0044F0  0E00               	movlw	0
 16057  0044F2  86DB               	bsf	plusw2,3,c
 16058                           
 16059                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16060  0044F4  5017               	movf	__CANIDToRegs@Value,w,c
 16061  0044F6  6ED9               	movwf	fsr2l,c
 16062  0044F8  6ADA               	clrf	fsr2h,c
 16063  0044FA  0E02               	movlw	2
 16064  0044FC  26D9               	addwf	fsr2l,f,c
 16065  0044FE  6ADA               	clrf	fsr2h,c
 16066  004500  50DF               	movf	indf2,w,c
 16067  004502  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16068  004504  0E03               	movlw	3
 16069  004506  1615               	andwf	??__CANIDToRegs,f,c
 16070  004508  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16071  00450C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16072  004510  5015               	movf	??__CANIDToRegs,w,c
 16073  004512  12DF               	iorwf	indf2,f,c
 16074                           
 16075                           ;ECAN.c: 1122: ptr++;
 16076  004514  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16077  004516  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16078                           
 16079                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16080  004518  5017               	movf	__CANIDToRegs@Value,w,c
 16081  00451A  6ED9               	movwf	fsr2l,c
 16082  00451C  6ADA               	clrf	fsr2h,c
 16083  00451E  2AD9               	incf	fsr2l,f,c
 16084  004520  6ADA               	clrf	fsr2h,c
 16085  004522  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16086  004526  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16087  00452A  CFDF FFE7          	movff	indf2,indf1
 16088                           
 16089                           ;ECAN.c: 1124: ptr++;
 16090  00452E  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16091  004530  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16092                           
 16093                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16094  004532  5017               	movf	__CANIDToRegs@Value,w,c
 16095  004534  6ED9               	movwf	fsr2l,c
 16096  004536  6ADA               	clrf	fsr2h,c
 16097  004538  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16098  00453C  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16099  004540  CFDF FFE7          	movff	indf2,indf1
 16100  004544                     l885:
 16101  004544  0012               	return	
 16102  004546                     __end_of__CANIDToRegs:
 16103                           	opt stack 0
 16104                           tblptru	equ	0xFF8
 16105                           tblptrh	equ	0xFF7
 16106                           tblptrl	equ	0xFF6
 16107                           tablat	equ	0xFF5
 16108                           prodh	equ	0xFF4
 16109                           prodl	equ	0xFF3
 16110                           postinc0	equ	0xFEE
 16111                           wreg	equ	0xFE8
 16112                           indf1	equ	0xFE7
 16113                           postdec1	equ	0xFE5
 16114                           fsr1h	equ	0xFE2
 16115                           fsr1l	equ	0xFE1
 16116                           indf2	equ	0xFDF
 16117                           postinc2	equ	0xFDE
 16118                           postdec2	equ	0xFDD
 16119                           plusw2	equ	0xFDB
 16120                           fsr2h	equ	0xFDA
 16121                           fsr2l	equ	0xFD9
 16122                           status	equ	0xFD8
 16123                           
 16124 ;; *************** function _vscp_getEvent *****************
 16125 ;; Defined at:
 16126 ;;		line 1290 in file "../../vscp_firmware/common/vscp_firmware.c"
 16127 ;; Parameters:    Size  Location     Type
 16128 ;;		None
 16129 ;; Auto vars:     Size  Location     Type
 16130 ;;  rv              1   49[COMRAM] unsigned char 
 16131 ;; Return value:  Size  Location     Type
 16132 ;;                  1    wreg      unsigned char 
 16133 ;; Registers used:
 16134 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16135 ;; Tracked objects:
 16136 ;;		On entry : F/0
 16137 ;;		On exit  : 0/0
 16138 ;;		Unchanged: 0/0
 16139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16140 ;;      Params:         0       0       0       0       0       0       0
 16141 ;;      Locals:         1       0       0       0       0       0       0
 16142 ;;      Temps:          0       0       0       0       0       0       0
 16143 ;;      Totals:         1       0       0       0       0       0       0
 16144 ;;Total ram usage:        1 bytes
 16145 ;; Hardware stack levels used:    1
 16146 ;; Hardware stack levels required when called:    6
 16147 ;; This function calls:
 16148 ;;		_getVSCPFrame
 16149 ;; This function is called by:
 16150 ;;		_main
 16151 ;; This function uses a non-reentrant model
 16152 ;;
 16153                           
 16154                           	psect	text72
 16155  005A5C                     __ptext72:
 16156                           	opt stack 0
 16157  005A5C                     _vscp_getEvent:
 16158                           	opt stack 24
 16159                           
 16160                           ; BSR set to: 0
 16161                           ;vscp_firmware.c: 1291: int8_t rv;
 16162                           ;vscp_firmware.c: 1297: if (vscp_imsg.flags & 0x80) return !0;
 16163                           
 16164                           ;incstack = 0
 16165                           ;incstack = 0
 16166  005A5C  BFBC               	btfsc	_vscp_imsg& (0+255),7,b
 16167  005A5E  D012               	goto	l1278
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;vscp_firmware.c: 1300: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 16171                           ;vscp_firmware.c: 1301: &vscp_imsg.vscp_type,
 16172                           ;vscp_firmware.c: 1302: &vscp_imsg.oaddr,
 16173                           ;vscp_firmware.c: 1303: &vscp_imsg.priority,
 16174                           ;vscp_firmware.c: 1304: &vscp_imsg.flags,
 16175                           ;vscp_firmware.c: 1305: vscp_imsg.data))) {
 16176  005A60  0EC0               	movlw	low (_vscp_imsg+4)
 16177  005A62  6E24               	movwf	?_getVSCPFrame,c
 16178  005A64  0EC1               	movlw	low (_vscp_imsg+5)
 16179  005A66  6E25               	movwf	?_getVSCPFrame+1,c
 16180  005A68  0EBD               	movlw	low (_vscp_imsg+1)
 16181  005A6A  6E26               	movwf	?_getVSCPFrame+2,c
 16182  005A6C  0EBC               	movlw	low _vscp_imsg
 16183  005A6E  6E27               	movwf	?_getVSCPFrame+3,c
 16184  005A70  0EC2               	movlw	low (_vscp_imsg+6)
 16185  005A72  6E28               	movwf	?_getVSCPFrame+4,c
 16186  005A74  0EBE               	movlw	(_vscp_imsg+2)& (0+255)
 16187  005A76  EC96  F029         	call	_getVSCPFrame
 16188  005A7A  6E32               	movwf	vscp_getEvent@rv,c
 16189  005A7C  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16190  005A7E  E002               	bz	l1278
 16191                           
 16192                           ;vscp_firmware.c: 1307: vscp_imsg.flags |= 0x80;
 16193  005A80  0100               	movlb	0	; () banked
 16194  005A82  8FBC               	bsf	_vscp_imsg& (0+255),7,b
 16195  005A84                     l1278:
 16196  005A84  0012               	return	
 16197  005A86                     __end_of_vscp_getEvent:
 16198                           	opt stack 0
 16199                           tblptru	equ	0xFF8
 16200                           tblptrh	equ	0xFF7
 16201                           tblptrl	equ	0xFF6
 16202                           tablat	equ	0xFF5
 16203                           prodh	equ	0xFF4
 16204                           prodl	equ	0xFF3
 16205                           postinc0	equ	0xFEE
 16206                           wreg	equ	0xFE8
 16207                           indf1	equ	0xFE7
 16208                           postdec1	equ	0xFE5
 16209                           fsr1h	equ	0xFE2
 16210                           fsr1l	equ	0xFE1
 16211                           indf2	equ	0xFDF
 16212                           postinc2	equ	0xFDE
 16213                           postdec2	equ	0xFDD
 16214                           plusw2	equ	0xFDB
 16215                           fsr2h	equ	0xFDA
 16216                           fsr2l	equ	0xFD9
 16217                           status	equ	0xFD8
 16218                           
 16219 ;; *************** function _getVSCPFrame *****************
 16220 ;; Defined at:
 16221 ;;		line 2875 in file "../main.c"
 16222 ;; Parameters:    Size  Location     Type
 16223 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16224 ;;		 -> vscp_imsg(14), 
 16225 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16226 ;;		 -> vscp_imsg(14), 
 16227 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16228 ;;		 -> vscp_imsg(14), 
 16229 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16230 ;;		 -> vscp_imsg(14), 
 16231 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16232 ;;		 -> vscp_imsg(14), 
 16233 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16234 ;;		 -> vscp_imsg(14), 
 16235 ;; Auto vars:     Size  Location     Type
 16236 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16237 ;;		 -> vscp_imsg(14), 
 16238 ;;  id              4   45[COMRAM] unsigned long 
 16239 ;; Return value:  Size  Location     Type
 16240 ;;                  1    wreg      unsigned char 
 16241 ;; Registers used:
 16242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16243 ;; Tracked objects:
 16244 ;;		On entry : F/0
 16245 ;;		On exit  : 0/0
 16246 ;;		Unchanged: 0/0
 16247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16248 ;;      Params:         5       0       0       0       0       0       0
 16249 ;;      Locals:         5       0       0       0       0       0       0
 16250 ;;      Temps:          4       0       0       0       0       0       0
 16251 ;;      Totals:        14       0       0       0       0       0       0
 16252 ;;Total ram usage:       14 bytes
 16253 ;; Hardware stack levels used:    1
 16254 ;; Hardware stack levels required when called:    5
 16255 ;; This function calls:
 16256 ;;		_getCANFrame
 16257 ;; This function is called by:
 16258 ;;		_vscp_getEvent
 16259 ;; This function uses a non-reentrant model
 16260 ;;
 16261                           
 16262                           	psect	text73
 16263  00532C                     __ptext73:
 16264                           	opt stack 0
 16265  00532C                     _getVSCPFrame:
 16266                           	opt stack 24
 16267                           
 16268                           ;incstack = 0
 16269                           ;incstack = 0
 16270                           ;getVSCPFrame@pvscpclass stored from wreg
 16271  00532C  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16272                           
 16273                           ; BSR set to: 0
 16274                           ;main.c: 2876: uint32_t id;
 16275                           ;main.c: 2878: if (!getCANFrame(&id, pSize, pData)) {
 16276  005330  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16277  005334  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16278  005338  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16279  00533A  ECEE  F02C         	call	_getCANFrame
 16280  00533E  0900               	iorlw	0
 16281  005340  E102               	bnz	l8142
 16282                           
 16283                           ;main.c: 2879: return 0;
 16284  005342  0E00               	movlw	0
 16285  005344  D02E               	goto	l629
 16286  005346                     l8142:
 16287                           
 16288                           ;main.c: 2880: }
 16289                           ;main.c: 2882: *pNodeId = id & 0x0ff;
 16290  005346  5025               	movf	getVSCPFrame@pNodeId,w,c
 16291  005348  6ED9               	movwf	fsr2l,c
 16292  00534A  6ADA               	clrf	fsr2h,c
 16293  00534C  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16294                           
 16295                           ;main.c: 2883: *pvscptype = (id >> 8) & 0xff;
 16296  005350  5024               	movf	getVSCPFrame@pvscptype,w,c
 16297  005352  6ED9               	movwf	fsr2l,c
 16298  005354  6ADA               	clrf	fsr2h,c
 16299  005356  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16300                           
 16301                           ;main.c: 2884: *pvscpclass = (id >> 16) & 0x1ff;
 16302  00535A  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16303  00535C  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16304  00535E  0E01               	movlw	1
 16305  005360  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16306  005362  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16307  005364  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16308  005366  6ED9               	movwf	fsr2l,c
 16309  005368  6ADA               	clrf	fsr2h,c
 16310  00536A  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16311  00536E  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16312                           
 16313                           ;main.c: 2885: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16314  005372  5026               	movf	getVSCPFrame@pPriority,w,c
 16315  005374  6ED9               	movwf	fsr2l,c
 16316  005376  6ADA               	clrf	fsr2h,c
 16317  005378  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16318  00537C  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16319  005380  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16320  005384  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16321  005388  0E1B               	movlw	27
 16322  00538A  D005               	goto	u5450
 16323  00538C                     u5455:
 16324  00538C  90D8               	bcf	status,0,c
 16325  00538E  322C               	rrcf	??_getVSCPFrame+3,f,c
 16326  005390  322B               	rrcf	??_getVSCPFrame+2,f,c
 16327  005392  322A               	rrcf	??_getVSCPFrame+1,f,c
 16328  005394  3229               	rrcf	??_getVSCPFrame,f,c
 16329  005396                     u5450:
 16330  005396  2EE8               	decfsz	wreg,f,c
 16331  005398  D7F9               	goto	u5455
 16332  00539A  5029               	movf	??_getVSCPFrame,w,c
 16333  00539C  0B07               	andlw	7
 16334  00539E  6EDF               	movwf	indf2,c
 16335                           
 16336                           ;main.c: 2887: return 1;
 16337  0053A0  0E01               	movlw	1
 16338  0053A2                     l629:
 16339  0053A2  0012               	return	
 16340  0053A4                     __end_of_getVSCPFrame:
 16341                           	opt stack 0
 16342                           tblptru	equ	0xFF8
 16343                           tblptrh	equ	0xFF7
 16344                           tblptrl	equ	0xFF6
 16345                           tablat	equ	0xFF5
 16346                           prodh	equ	0xFF4
 16347                           prodl	equ	0xFF3
 16348                           postinc0	equ	0xFEE
 16349                           wreg	equ	0xFE8
 16350                           indf1	equ	0xFE7
 16351                           postdec1	equ	0xFE5
 16352                           fsr1h	equ	0xFE2
 16353                           fsr1l	equ	0xFE1
 16354                           indf2	equ	0xFDF
 16355                           postinc2	equ	0xFDE
 16356                           postdec2	equ	0xFDD
 16357                           plusw2	equ	0xFDB
 16358                           fsr2h	equ	0xFDA
 16359                           fsr2l	equ	0xFD9
 16360                           status	equ	0xFD8
 16361                           
 16362 ;; *************** function _getCANFrame *****************
 16363 ;; Defined at:
 16364 ;;		line 2917 in file "../main.c"
 16365 ;; Parameters:    Size  Location     Type
 16366 ;;  pid             1    wreg     PTR unsigned long 
 16367 ;;		 -> getVSCPFrame@id(4), 
 16368 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16369 ;;		 -> vscp_imsg(14), 
 16370 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16371 ;;		 -> vscp_imsg(14), 
 16372 ;; Auto vars:     Size  Location     Type
 16373 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16374 ;;		 -> getVSCPFrame@id(4), 
 16375 ;;  flags           1   34[COMRAM] enum E16409
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  1    wreg      unsigned char 
 16378 ;; Registers used:
 16379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16380 ;; Tracked objects:
 16381 ;;		On entry : F/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16385 ;;      Params:         2       0       0       0       0       0       0
 16386 ;;      Locals:         2       0       0       0       0       0       0
 16387 ;;      Temps:          0       0       0       0       0       0       0
 16388 ;;      Totals:         4       0       0       0       0       0       0
 16389 ;;Total ram usage:        4 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    4
 16392 ;; This function calls:
 16393 ;;		_ECANReceiveMessage
 16394 ;; This function is called by:
 16395 ;;		_getVSCPFrame
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           	psect	text74
 16400  0059DC                     __ptext74:
 16401                           	opt stack 0
 16402  0059DC                     _getCANFrame:
 16403                           	opt stack 24
 16404                           
 16405                           ;incstack = 0
 16406                           ;incstack = 0
 16407                           ;getCANFrame@pid stored from wreg
 16408  0059DC  CFE8 F022          	movff	wreg,getCANFrame@pid
 16409                           
 16410                           ; BSR set to: 0
 16411                           ;main.c: 2918: ECAN_RX_MSG_FLAGS flags;
 16412                           ;main.c: 2922: if (vscp_imsg.flags & 0x80) return 0;
 16413  0059E0  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 16414  0059E2  D002               	goto	l8158
 16415  0059E4                     l8154:
 16416  0059E4  0E00               	movlw	0
 16417  0059E6  D00F               	goto	l640
 16418  0059E8                     l8158:
 16419                           
 16420                           ; BSR set to: 0
 16421                           ;main.c: 2924: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16422  0059E8  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16423  0059EC  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16424  0059F0  0E23               	movlw	low getCANFrame@flags
 16425  0059F2  6E17               	movwf	?_ECANReceiveMessage+2,c
 16426  0059F4  5022               	movf	getCANFrame@pid,w,c
 16427  0059F6  EC03  F01C         	call	_ECANReceiveMessage
 16428  0059FA  0900               	iorlw	0
 16429  0059FC  E0F3               	bz	l8154
 16430                           
 16431                           ;main.c: 2926: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16432  0059FE  AC23               	btfss	getCANFrame@flags,6,c
 16433                           
 16434                           ;main.c: 2929: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16435  005A00  AA23               	btfss	getCANFrame@flags,5,c
 16436  005A02  D7F0               	goto	l8154
 16437                           
 16438                           ;main.c: 2931: return 1;
 16439  005A04  0E01               	movlw	1
 16440  005A06                     l640:
 16441  005A06  0012               	return	
 16442  005A08                     __end_of_getCANFrame:
 16443                           	opt stack 0
 16444                           tblptru	equ	0xFF8
 16445                           tblptrh	equ	0xFF7
 16446                           tblptrl	equ	0xFF6
 16447                           tablat	equ	0xFF5
 16448                           prodh	equ	0xFF4
 16449                           prodl	equ	0xFF3
 16450                           postinc0	equ	0xFEE
 16451                           wreg	equ	0xFE8
 16452                           indf1	equ	0xFE7
 16453                           postdec1	equ	0xFE5
 16454                           fsr1h	equ	0xFE2
 16455                           fsr1l	equ	0xFE1
 16456                           indf2	equ	0xFDF
 16457                           postinc2	equ	0xFDE
 16458                           postdec2	equ	0xFDD
 16459                           plusw2	equ	0xFDB
 16460                           fsr2h	equ	0xFDA
 16461                           fsr2l	equ	0xFD9
 16462                           status	equ	0xFD8
 16463                           
 16464 ;; *************** function _ECANReceiveMessage *****************
 16465 ;; Defined at:
 16466 ;;		line 803 in file "../ECAN.c"
 16467 ;; Parameters:    Size  Location     Type
 16468 ;;  id              1    wreg     PTR unsigned long 
 16469 ;;		 -> getVSCPFrame@id(4), 
 16470 ;;  data            1   20[COMRAM] PTR unsigned char 
 16471 ;;		 -> vscp_imsg(14), 
 16472 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16473 ;;		 -> vscp_imsg(14), 
 16474 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16475 ;;		 -> getCANFrame@flags(1), 
 16476 ;; Auto vars:     Size  Location     Type
 16477 ;;  id              1   25[COMRAM] PTR unsigned long 
 16478 ;;		 -> getVSCPFrame@id(4), 
 16479 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16480 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16481 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16482 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16483 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16484 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16485 ;;  temp            1   28[COMRAM] struct .
 16486 ;;  mode            1   27[COMRAM] unsigned char 
 16487 ;;  i               1   26[COMRAM] unsigned char 
 16488 ;; Return value:  Size  Location     Type
 16489 ;;                  1    wreg      enum E15660
 16490 ;; Registers used:
 16491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16492 ;; Tracked objects:
 16493 ;;		On entry : F/0
 16494 ;;		On exit  : 0/0
 16495 ;;		Unchanged: 0/0
 16496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16497 ;;      Params:         3       0       0       0       0       0       0
 16498 ;;      Locals:         8       0       0       0       0       0       0
 16499 ;;      Temps:          0       0       0       0       0       0       0
 16500 ;;      Totals:        11       0       0       0       0       0       0
 16501 ;;Total ram usage:       11 bytes
 16502 ;; Hardware stack levels used:    1
 16503 ;; Hardware stack levels required when called:    3
 16504 ;; This function calls:
 16505 ;;		__ECANPointBuffer
 16506 ;;		__RegsToCANID
 16507 ;; This function is called by:
 16508 ;;		_getCANFrame
 16509 ;; This function uses a non-reentrant model
 16510 ;;
 16511                           
 16512                           	psect	text75
 16513  003806                     __ptext75:
 16514                           	opt stack 0
 16515  003806                     _ECANReceiveMessage:
 16516                           	opt stack 24
 16517                           
 16518                           ;incstack = 0
 16519                           ;incstack = 0
 16520                           ;ECANReceiveMessage@id stored from wreg
 16521  003806  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;ECAN.c: 805: BYTE mode;
 16525                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16526                           ;ECAN.c: 809: char i;
 16527                           ;ECAN.c: 810: BYTE_VAL temp;
 16528                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16529  00380A  6A48               	clrf	__ECANRxFilterHitInfo,c
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16533  00380C  5077               	movf	3959,w,c	;volatile
 16534  00380E  0BC0               	andlw	192
 16535  003810  6E1C               	movwf	ECANReceiveMessage@mode,c
 16536                           
 16537                           ; BSR set to: 0
 16538                           ;ECAN.c: 816: if ( mode == 0x00 )
 16539  003812  661C               	tstfsz	ECANReceiveMessage@mode,c
 16540  003814  D032               	goto	l8290
 16541                           
 16542                           ; BSR set to: 0
 16543                           ;ECAN.c: 822: {
 16544                           ;ECAN.c: 824: if ( RXB0FUL )
 16545  003816  AE60               	btfss	3936,7,c	;volatile
 16546  003818  D012               	goto	l836
 16547                           
 16548                           ; BSR set to: 0
 16549                           ;ECAN.c: 825: {
 16550                           ;ECAN.c: 827: RXB0IF = 0;
 16551  00381A  90A4               	bcf	4004,0,c	;volatile
 16552                           
 16553                           ;ECAN.c: 830: if ( RXB0OVFL )
 16554  00381C  AE74               	btfss	3956,7,c	;volatile
 16555  00381E  D006               	goto	l8266
 16556                           
 16557                           ; BSR set to: 0
 16558                           ;ECAN.c: 831: {
 16559                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16560  003820  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16561  003822  6ED9               	movwf	fsr2l,c
 16562  003824  6ADA               	clrf	fsr2h,c
 16563  003826  0E00               	movlw	0
 16564  003828  86DB               	bsf	plusw2,3,c
 16565                           
 16566                           ; BSR set to: 0
 16567                           ;ECAN.c: 833: RXB0OVFL = 0;
 16568  00382A  9E74               	bcf	3956,7,c	;volatile
 16569  00382C                     l8266:
 16570                           
 16571                           ; BSR set to: 0
 16572                           ;ECAN.c: 834: }
 16573                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16574  00382C  A060               	btfss	3936,0,c	;volatile
 16575  00382E  D002               	bra	u5625
 16576  003830  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16577  003832  D001               	bra	u5627
 16578  003834                     u5625:
 16579  003834  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16580  003836                     u5627:
 16581                           
 16582                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16583  003836  0E0F               	movlw	15	;volatile
 16584  003838  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16585  00383A  0E60               	movlw	96	;volatile
 16586  00383C  D01A               	goto	L22
 16587  00383E                     l836:
 16588                           
 16589                           ; BSR set to: 0
 16590                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16591  00383E  010F               	movlb	15	; () banked
 16592  003840  AF50               	btfss	80,7,b	;volatile
 16593  003842  D019               	goto	l8284
 16594                           
 16595                           ; BSR set to: 15
 16596                           ;ECAN.c: 842: {
 16597                           ;ECAN.c: 844: RXB1IF = 0;
 16598  003844  92A4               	bcf	4004,1,c	;volatile
 16599                           
 16600                           ;ECAN.c: 847: if ( RXB1OVFL )
 16601  003846  AC74               	btfss	3956,6,c	;volatile
 16602  003848  D006               	goto	l8276
 16603                           
 16604                           ; BSR set to: 15
 16605                           ;ECAN.c: 848: {
 16606                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16607  00384A  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16608  00384C  6ED9               	movwf	fsr2l,c
 16609  00384E  6ADA               	clrf	fsr2h,c
 16610  003850  0E00               	movlw	0
 16611  003852  86DB               	bsf	plusw2,3,c
 16612                           
 16613                           ; BSR set to: 15
 16614                           ;ECAN.c: 850: RXB1OVFL = 0;
 16615  003854  9C74               	bcf	3956,6,c	;volatile
 16616  003856                     l8276:
 16617                           
 16618                           ; BSR set to: 15
 16619                           ;ECAN.c: 851: }
 16620                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16621  003856  5150               	movf	80,w,b	;volatile
 16622  003858  0B07               	andlw	7
 16623  00385A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16624                           
 16625                           ; BSR set to: 15
 16626                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16627  00385C  0E02               	movlw	2
 16628  00385E  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16629  003860  D005               	goto	l8282
 16630                           
 16631                           ; BSR set to: 15
 16632                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16633  003862  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16634  003864  6ED9               	movwf	fsr2l,c
 16635  003866  6ADA               	clrf	fsr2h,c
 16636  003868  0E00               	movlw	0
 16637  00386A  8EDB               	bsf	plusw2,7,c
 16638  00386C                     l8282:
 16639                           
 16640                           ; BSR set to: 15
 16641                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16642  00386C  0E0F               	movlw	15	;volatile
 16643  00386E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16644  003870  0E50               	movlw	80	;volatile
 16645  003872                     L22:
 16646  003872  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16647                           
 16648                           ;ECAN.c: 860: }
 16649  003874  D065               	goto	l8344
 16650  003876                     l8284:
 16651                           
 16652                           ;ECAN.c: 861: else
 16653                           ;ECAN.c: 862: return FALSE;
 16654  003876  0E00               	movlw	0
 16655  003878  D0CC               	goto	l843
 16656  00387A                     l8290:
 16657                           
 16658                           ; BSR set to: 0
 16659                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16660  00387A  501C               	movf	ECANReceiveMessage@mode,w,c
 16661  00387C  0A40               	xorlw	64
 16662  00387E  E146               	bnz	l846
 16663                           
 16664                           ; BSR set to: 0
 16665                           ;ECAN.c: 875: {
 16666                           ;ECAN.c: 876: if ( RXB0FUL )
 16667  003880  AE60               	btfss	3936,7,c	;volatile
 16668  003882  D004               	goto	l847
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16672  003884  0E0F               	movlw	15	;volatile
 16673  003886  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16674  003888  0E60               	movlw	96	;volatile
 16675  00388A  D03E               	goto	L29
 16676  00388C                     l847:
 16677                           
 16678                           ; BSR set to: 0
 16679                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16680  00388C  010F               	movlb	15	; () banked
 16681  00388E  AF50               	btfss	80,7,b	;volatile
 16682  003890  D004               	goto	l849
 16683                           
 16684                           ; BSR set to: 15
 16685                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16686  003892  0E0F               	movlw	15	;volatile
 16687  003894  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16688  003896  0E50               	movlw	80	;volatile
 16689  003898  D037               	goto	L29
 16690  00389A                     l849:
 16691                           
 16692                           ; BSR set to: 15
 16693                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16694  00389A  010D               	movlb	13
 16695  00389C  B5F8               	btfsc	248,2,b	;volatile
 16696  00389E  D007               	goto	l851
 16697  0038A0  010E               	movlb	14
 16698  0038A2  AF20               	btfss	32,7,b	;volatile
 16699  0038A4  D004               	goto	l851
 16700                           
 16701                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16702  0038A6  0E0E               	movlw	14	;volatile
 16703  0038A8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16704  0038AA  0E20               	movlw	32	;volatile
 16705  0038AC  D02D               	goto	L29
 16706  0038AE                     l851:
 16707                           
 16708                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16709  0038AE  010D               	movlb	13
 16710  0038B0  B7F8               	btfsc	248,3,b	;volatile
 16711  0038B2  D007               	goto	l853
 16712  0038B4  010E               	movlb	14
 16713  0038B6  AF30               	btfss	48,7,b	;volatile
 16714  0038B8  D004               	goto	l853
 16715                           
 16716                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16717  0038BA  0E0E               	movlw	14	;volatile
 16718  0038BC  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16719  0038BE  0E30               	movlw	48	;volatile
 16720  0038C0  D023               	goto	L29
 16721  0038C2                     l853:
 16722                           
 16723                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16724  0038C2  010D               	movlb	13
 16725  0038C4  B9F8               	btfsc	248,4,b	;volatile
 16726  0038C6  D007               	goto	l855
 16727  0038C8  010E               	movlb	14
 16728  0038CA  AF40               	btfss	64,7,b	;volatile
 16729  0038CC  D004               	goto	l855
 16730                           
 16731                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16732  0038CE  0E0E               	movlw	14	;volatile
 16733  0038D0  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16734  0038D2  0E40               	movlw	64	;volatile
 16735  0038D4  D019               	goto	L29
 16736  0038D6                     l855:
 16737                           
 16738                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16739  0038D6  010D               	movlb	13
 16740  0038D8  BBF8               	btfsc	248,5,b	;volatile
 16741  0038DA  D005               	goto	l857
 16742  0038DC  010E               	movlb	14
 16743  0038DE  AF50               	btfss	80,7,b	;volatile
 16744  0038E0  D002               	goto	l857
 16745                           
 16746                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16747  0038E2  0E0E               	movlw	14	;volatile
 16748  0038E4  D7D7               	goto	L30
 16749  0038E6                     l857:
 16750                           
 16751                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16752  0038E6  010D               	movlb	13
 16753  0038E8  BDF8               	btfsc	248,6,b	;volatile
 16754  0038EA  D005               	goto	l859
 16755  0038EC  010E               	movlb	14
 16756  0038EE  AF60               	btfss	96,7,b	;volatile
 16757  0038F0  D002               	goto	l859
 16758                           
 16759                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16760  0038F2  0E0E               	movlw	14	;volatile
 16761  0038F4  D7C8               	goto	L31
 16762  0038F6                     l859:
 16763                           
 16764                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16765  0038F6  010D               	movlb	13
 16766  0038F8  BFF8               	btfsc	248,7,b	;volatile
 16767  0038FA  D7BD               	goto	l8284
 16768  0038FC  010E               	movlb	14
 16769  0038FE  AF70               	btfss	112,7,b	;volatile
 16770  003900  D7BA               	goto	l8284
 16771                           
 16772                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16773  003902  0E0E               	movlw	14	;volatile
 16774  003904  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16775  003906  0E70               	movlw	112	;volatile
 16776  003908                     L29:
 16777  003908  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16778  00390A  D00A               	goto	l8334
 16779  00390C                     l846:
 16780                           
 16781                           ; BSR set to: 0
 16782                           ;ECAN.c: 910: else
 16783                           ;ECAN.c: 915: {
 16784                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16785  00390C  AE74               	btfss	3956,7,c	;volatile
 16786  00390E  D7B3               	goto	l8284
 16787                           
 16788                           ; BSR set to: 0
 16789                           ;ECAN.c: 917: {
 16790                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16791  003910  506F               	movf	3951,w,c	;volatile
 16792  003912  0B07               	andlw	7
 16793  003914  ECD2  F029         	call	__ECANPointBuffer
 16794  003918  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16795  00391C  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16796  003920                     l8334:
 16797                           
 16798                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16799  003920  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16800  003924  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16801  003928  50DF               	movf	indf2,w,c
 16802  00392A  0B1F               	andlw	31
 16803  00392C  6E48               	movwf	__ECANRxFilterHitInfo,c
 16804                           
 16805                           ;ECAN.c: 932: RXB1IF = 0;
 16806  00392E  92A4               	bcf	4004,1,c	;volatile
 16807                           
 16808                           ;ECAN.c: 934: if ( RXB1OVFL )
 16809  003930  AC74               	btfss	3956,6,c	;volatile
 16810  003932  D006               	goto	l8344
 16811                           
 16812                           ;ECAN.c: 935: {
 16813                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16814  003934  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16815  003936  6ED9               	movwf	fsr2l,c
 16816  003938  6ADA               	clrf	fsr2h,c
 16817  00393A  0E00               	movlw	0
 16818  00393C  86DB               	bsf	plusw2,3,c
 16819                           
 16820                           ;ECAN.c: 937: RXB1OVFL = 0;
 16821  00393E  9C74               	bcf	3956,6,c	;volatile
 16822  003940                     l8344:
 16823                           
 16824                           ;ECAN.c: 942: savedPtr = ptr;
 16825  003940  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16826  003944  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16827                           
 16828                           ;ECAN.c: 943: *msgFlags = 0;
 16829  003948  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16830  00394A  6ED9               	movwf	fsr2l,c
 16831  00394C  6ADA               	clrf	fsr2h,c
 16832  00394E  6ADF               	clrf	indf2,c
 16833                           
 16834                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16835  003950  EE20 F005          	lfsr	2,5
 16836  003954  501E               	movf	ECANReceiveMessage@ptr,w,c
 16837  003956  26D9               	addwf	fsr2l,f,c
 16838  003958  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16839  00395A  22DA               	addwfc	fsr2h,f,c
 16840  00395C  50DF               	movf	indf2,w,c
 16841  00395E  6E1D               	movwf	ECANReceiveMessage@temp,c
 16842                           
 16843                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16844  003960  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16845  003962  6ED9               	movwf	fsr2l,c
 16846  003964  6ADA               	clrf	fsr2h,c
 16847  003966  501D               	movf	ECANReceiveMessage@temp,w,c
 16848  003968  0B0F               	andlw	15
 16849  00396A  6EDF               	movwf	indf2,c
 16850                           
 16851                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16852  00396C  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16853  00396E  D005               	goto	l867
 16854                           
 16855                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16856  003970  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16857  003972  6ED9               	movwf	fsr2l,c
 16858  003974  6ADA               	clrf	fsr2h,c
 16859  003976  0E00               	movlw	0
 16860  003978  8CDB               	bsf	plusw2,6,c
 16861  00397A                     l867:
 16862                           
 16863                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16864  00397A  EE20 F002          	lfsr	2,2
 16865  00397E  501E               	movf	ECANReceiveMessage@ptr,w,c
 16866  003980  26D9               	addwf	fsr2l,f,c
 16867  003982  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16868  003984  22DA               	addwfc	fsr2h,f,c
 16869  003986  50DF               	movf	indf2,w,c
 16870  003988  6E1D               	movwf	ECANReceiveMessage@temp,c
 16871                           
 16872                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16873  00398A  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16874  00398C  D008               	goto	l868
 16875                           
 16876                           ;ECAN.c: 956: {
 16877                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16878  00398E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16879  003990  6ED9               	movwf	fsr2l,c
 16880  003992  6ADA               	clrf	fsr2h,c
 16881  003994  0E00               	movlw	0
 16882  003996  8ADB               	bsf	plusw2,5,c
 16883                           
 16884                           ;ECAN.c: 958: temp.Val = 1;
 16885  003998  0E01               	movlw	1
 16886  00399A  6E1D               	movwf	ECANReceiveMessage@temp,c
 16887                           
 16888                           ;ECAN.c: 959: }
 16889  00399C  D001               	goto	l8362
 16890  00399E                     l868:
 16891                           
 16892                           ;ECAN.c: 960: else
 16893                           ;ECAN.c: 961: temp.Val = 0;
 16894  00399E  6A1D               	clrf	ECANReceiveMessage@temp,c
 16895  0039A0                     l8362:
 16896                           
 16897                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16898  0039A0  281E               	incf	ECANReceiveMessage@ptr,w,c
 16899  0039A2  6E0E               	movwf	?__RegsToCANID,c
 16900  0039A4  0E00               	movlw	0
 16901  0039A6  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16902  0039A8  6E0F               	movwf	?__RegsToCANID+1,c
 16903  0039AA  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16904  0039AE  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16905  0039B2  EC99  F020         	call	__RegsToCANID	;wreg free
 16906                           
 16907                           ;ECAN.c: 966: ptr += 6;
 16908  0039B6  0E06               	movlw	6
 16909  0039B8  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16910  0039BA  0E00               	movlw	0
 16911  0039BC  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16912                           
 16913                           ;ECAN.c: 967: temp.Val = *dataLen;
 16914  0039BE  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16915  0039C0  6ED9               	movwf	fsr2l,c
 16916  0039C2  6ADA               	clrf	fsr2h,c
 16917  0039C4  50DF               	movf	indf2,w,c
 16918  0039C6  6E1D               	movwf	ECANReceiveMessage@temp,c
 16919                           
 16920                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16921  0039C8  6A1B               	clrf	ECANReceiveMessage@i,c
 16922  0039CA  D00D               	goto	l8378
 16923  0039CC                     l8370:
 16924                           
 16925                           ;ECAN.c: 969: *data++ = *ptr++;
 16926  0039CC  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16927  0039D0  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16928  0039D4  5015               	movf	ECANReceiveMessage@data,w,c
 16929  0039D6  6EE1               	movwf	fsr1l,c
 16930  0039D8  6AE2               	clrf	fsr1h,c
 16931  0039DA  CFDF FFE7          	movff	indf2,indf1
 16932  0039DE  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16933  0039E0  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16934  0039E2  2A15               	incf	ECANReceiveMessage@data,f,c
 16935  0039E4  2A1B               	incf	ECANReceiveMessage@i,f,c
 16936  0039E6                     l8378:
 16937  0039E6  501D               	movf	ECANReceiveMessage@temp,w,c
 16938  0039E8  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16939  0039EA  E3F0               	bnc	l8370
 16940                           
 16941                           ;ECAN.c: 972: if ( IRXIF )
 16942  0039EC  AEA4               	btfss	4004,7,c	;volatile
 16943  0039EE  D006               	goto	l8384
 16944                           
 16945                           ;ECAN.c: 973: {
 16946                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16947  0039F0  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16948  0039F2  6ED9               	movwf	fsr2l,c
 16949  0039F4  6ADA               	clrf	fsr2h,c
 16950  0039F6  0E00               	movlw	0
 16951  0039F8  88DB               	bsf	plusw2,4,c
 16952                           
 16953                           ;ECAN.c: 975: IRXIF = 0;
 16954  0039FA  9EA4               	bcf	4004,7,c	;volatile
 16955  0039FC                     l8384:
 16956                           
 16957                           ;ECAN.c: 976: }
 16958                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16959  0039FC  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16960  003A00  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16961  003A04  0E7F               	movlw	127
 16962  003A06  16DF               	andwf	indf2,f,c
 16963                           
 16964                           ;ECAN.c: 983: if ( mode == 0x80 )
 16965  003A08  501C               	movf	ECANReceiveMessage@mode,w,c
 16966  003A0A  0A80               	xorlw	128
 16967  003A0C  B4D8               	btfsc	status,2,c
 16968                           
 16969                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16970  003A0E  9E74               	bcf	3956,7,c	;volatile
 16971                           
 16972                           ;ECAN.c: 990: return TRUE;
 16973  003A10  0E01               	movlw	1
 16974  003A12                     l843:
 16975  003A12  0012               	return	
 16976  003A14                     __end_of_ECANReceiveMessage:
 16977                           	opt stack 0
 16978                           tblptru	equ	0xFF8
 16979                           tblptrh	equ	0xFF7
 16980                           tblptrl	equ	0xFF6
 16981                           tablat	equ	0xFF5
 16982                           prodh	equ	0xFF4
 16983                           prodl	equ	0xFF3
 16984                           postinc0	equ	0xFEE
 16985                           wreg	equ	0xFE8
 16986                           indf1	equ	0xFE7
 16987                           postdec1	equ	0xFE5
 16988                           fsr1h	equ	0xFE2
 16989                           fsr1l	equ	0xFE1
 16990                           indf2	equ	0xFDF
 16991                           postinc2	equ	0xFDE
 16992                           postdec2	equ	0xFDD
 16993                           plusw2	equ	0xFDB
 16994                           fsr2h	equ	0xFDA
 16995                           fsr2l	equ	0xFD9
 16996                           status	equ	0xFD8
 16997                           
 16998 ;; *************** function __RegsToCANID *****************
 16999 ;; Defined at:
 17000 ;;		line 1156 in file "../ECAN.c"
 17001 ;; Parameters:    Size  Location     Type
 17002 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17003 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17004 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17005 ;;  val             1   15[COMRAM] PTR unsigned long 
 17006 ;;		 -> getVSCPFrame@id(4), 
 17007 ;;  type            1   16[COMRAM] unsigned char 
 17008 ;; Auto vars:     Size  Location     Type
 17009 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17010 ;;		 -> getVSCPFrame@id(4), 
 17011 ;; Return value:  Size  Location     Type
 17012 ;;		None               void
 17013 ;; Registers used:
 17014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17015 ;; Tracked objects:
 17016 ;;		On entry : 0/0
 17017 ;;		On exit  : 0/0
 17018 ;;		Unchanged: 0/0
 17019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17020 ;;      Params:         4       0       0       0       0       0       0
 17021 ;;      Locals:         1       0       0       0       0       0       0
 17022 ;;      Temps:          2       0       0       0       0       0       0
 17023 ;;      Totals:         7       0       0       0       0       0       0
 17024 ;;Total ram usage:        7 bytes
 17025 ;; Hardware stack levels used:    1
 17026 ;; Hardware stack levels required when called:    2
 17027 ;; This function calls:
 17028 ;;		Nothing
 17029 ;; This function is called by:
 17030 ;;		_ECANReceiveMessage
 17031 ;; This function uses a non-reentrant model
 17032 ;;
 17033                           
 17034                           	psect	text76
 17035  004132                     __ptext76:
 17036                           	opt stack 0
 17037  004132                     __RegsToCANID:
 17038                           	opt stack 24
 17039                           
 17040                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17041                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17042                           
 17043                           ;incstack = 0
 17044                           ;incstack = 0
 17045  004132  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17046                           
 17047                           ;ECAN.c: 1161: if ( type == 0 )
 17048  004136  6611               	tstfsz	__RegsToCANID@type,c
 17049  004138  D046               	goto	l8458
 17050                           
 17051                           ;ECAN.c: 1162: {
 17052                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17053  00413A  5014               	movf	__RegsToCANID@Value,w,c
 17054  00413C  6ED9               	movwf	fsr2l,c
 17055  00413E  6ADA               	clrf	fsr2h,c
 17056  004140  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17057  004144  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17058  004148  50E7               	movf	indf1,w,c
 17059  00414A  6E12               	movwf	??__RegsToCANID& (0+255),c
 17060  00414C  90D8               	bcf	status,0,c
 17061  00414E  3612               	rlcf	??__RegsToCANID,f,c
 17062  004150  90D8               	bcf	status,0,c
 17063  004152  3612               	rlcf	??__RegsToCANID,f,c
 17064  004154  90D8               	bcf	status,0,c
 17065  004156  3412               	rlcf	??__RegsToCANID,w,c
 17066  004158  6EDF               	movwf	indf2,c
 17067                           
 17068                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17069  00415A  5014               	movf	__RegsToCANID@Value,w,c
 17070  00415C  6ED9               	movwf	fsr2l,c
 17071  00415E  6ADA               	clrf	fsr2h,c
 17072  004160  2AD9               	incf	fsr2l,f,c
 17073  004162  6ADA               	clrf	fsr2h,c
 17074  004164  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17075  004168  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17076  00416C  50E7               	movf	indf1,w,c
 17077  00416E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17078  004170  0E05               	movlw	5
 17079  004172  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17080  004174                     u5945:
 17081  004174  90D8               	bcf	status,0,c
 17082  004176  3212               	rrcf	??__RegsToCANID,f,c
 17083  004178  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17084  00417A  D7FC               	goto	u5945
 17085  00417C  5012               	movf	??__RegsToCANID,w,c
 17086  00417E  6EDF               	movwf	indf2,c
 17087                           
 17088                           ;ECAN.c: 1166: ptr++;
 17089  004180  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17090  004182  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17091                           
 17092                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17093  004184  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17094  004188  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17095  00418C  50DF               	movf	indf2,w,c
 17096  00418E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17097  004190  0E05               	movlw	5
 17098  004192  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17099  004194                     u5955:
 17100  004194  90D8               	bcf	status,0,c
 17101  004196  3212               	rrcf	??__RegsToCANID,f,c
 17102  004198  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17103  00419A  D7FC               	goto	u5955
 17104  00419C  5014               	movf	__RegsToCANID@Value,w,c
 17105  00419E  6ED9               	movwf	fsr2l,c
 17106  0041A0  6ADA               	clrf	fsr2h,c
 17107  0041A2  5012               	movf	??__RegsToCANID,w,c
 17108  0041A4  12DF               	iorwf	indf2,f,c
 17109                           
 17110                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17111  0041A6  5014               	movf	__RegsToCANID@Value,w,c
 17112  0041A8  6ED9               	movwf	fsr2l,c
 17113  0041AA  6ADA               	clrf	fsr2h,c
 17114  0041AC  0E02               	movlw	2
 17115  0041AE  26D9               	addwf	fsr2l,f,c
 17116  0041B0  6ADA               	clrf	fsr2h,c
 17117  0041B2  6ADF               	clrf	indf2,c
 17118                           
 17119                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17120  0041B4  5014               	movf	__RegsToCANID@Value,w,c
 17121  0041B6  6ED9               	movwf	fsr2l,c
 17122  0041B8  6ADA               	clrf	fsr2h,c
 17123  0041BA  0E03               	movlw	3
 17124  0041BC  26D9               	addwf	fsr2l,f,c
 17125  0041BE  6ADA               	clrf	fsr2h,c
 17126  0041C0  0E00               	movlw	0
 17127  0041C2  6EDF               	movwf	indf2,c
 17128                           
 17129                           ;ECAN.c: 1170: }
 17130  0041C4  D067               	goto	l890
 17131  0041C6                     l8458:
 17132                           
 17133                           ;ECAN.c: 1171: else
 17134                           ;ECAN.c: 1172: {
 17135                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17136  0041C6  5014               	movf	__RegsToCANID@Value,w,c
 17137  0041C8  6ED9               	movwf	fsr2l,c
 17138  0041CA  6ADA               	clrf	fsr2h,c
 17139  0041CC  0E02               	movlw	2
 17140  0041CE  26D9               	addwf	fsr2l,f,c
 17141  0041D0  6ADA               	clrf	fsr2h,c
 17142  0041D2  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17143  0041D6  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17144  0041DA  50E7               	movf	indf1,w,c
 17145  0041DC  6E12               	movwf	??__RegsToCANID& (0+255),c
 17146  0041DE  0E05               	movlw	5
 17147  0041E0  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17148  0041E2                     u5965:
 17149  0041E2  90D8               	bcf	status,0,c
 17150  0041E4  3612               	rlcf	??__RegsToCANID,f,c
 17151  0041E6  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17152  0041E8  D7FC               	goto	u5965
 17153  0041EA  5012               	movf	??__RegsToCANID,w,c
 17154  0041EC  6EDF               	movwf	indf2,c
 17155                           
 17156                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17157  0041EE  5014               	movf	__RegsToCANID@Value,w,c
 17158  0041F0  6ED9               	movwf	fsr2l,c
 17159  0041F2  6ADA               	clrf	fsr2h,c
 17160  0041F4  0E03               	movlw	3
 17161  0041F6  26D9               	addwf	fsr2l,f,c
 17162  0041F8  6ADA               	clrf	fsr2h,c
 17163  0041FA  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17164  0041FE  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17165  004202  50E7               	movf	indf1,w,c
 17166  004204  6E12               	movwf	??__RegsToCANID& (0+255),c
 17167  004206  90D8               	bcf	status,0,c
 17168  004208  3212               	rrcf	??__RegsToCANID,f,c
 17169  00420A  90D8               	bcf	status,0,c
 17170  00420C  3212               	rrcf	??__RegsToCANID,f,c
 17171  00420E  90D8               	bcf	status,0,c
 17172  004210  3012               	rrcf	??__RegsToCANID,w,c
 17173  004212  6EDF               	movwf	indf2,c
 17174                           
 17175                           ;ECAN.c: 1176: ptr++;
 17176  004214  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17177  004216  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17178                           
 17179                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17180  004218  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17181  00421C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17182  004220  50DF               	movf	indf2,w,c
 17183  004222  6E12               	movwf	??__RegsToCANID& (0+255),c
 17184  004224  0E03               	movlw	3
 17185  004226  1612               	andwf	??__RegsToCANID,f,c
 17186  004228  5014               	movf	__RegsToCANID@Value,w,c
 17187  00422A  6ED9               	movwf	fsr2l,c
 17188  00422C  6ADA               	clrf	fsr2h,c
 17189  00422E  0E02               	movlw	2
 17190  004230  26D9               	addwf	fsr2l,f,c
 17191  004232  6ADA               	clrf	fsr2h,c
 17192  004234  5012               	movf	??__RegsToCANID,w,c
 17193  004236  12DF               	iorwf	indf2,f,c
 17194                           
 17195                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17196  004238  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17197  00423C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17198  004240  50DF               	movf	indf2,w,c
 17199  004242  6E12               	movwf	??__RegsToCANID& (0+255),c
 17200  004244  90D8               	bcf	status,0,c
 17201  004246  3212               	rrcf	??__RegsToCANID,f,c
 17202  004248  90D8               	bcf	status,0,c
 17203  00424A  3212               	rrcf	??__RegsToCANID,f,c
 17204  00424C  90D8               	bcf	status,0,c
 17205  00424E  3212               	rrcf	??__RegsToCANID,f,c
 17206  004250  0E1C               	movlw	28
 17207  004252  1612               	andwf	??__RegsToCANID,f,c
 17208  004254  5014               	movf	__RegsToCANID@Value,w,c
 17209  004256  6ED9               	movwf	fsr2l,c
 17210  004258  6ADA               	clrf	fsr2h,c
 17211  00425A  0E02               	movlw	2
 17212  00425C  26D9               	addwf	fsr2l,f,c
 17213  00425E  6ADA               	clrf	fsr2h,c
 17214  004260  5012               	movf	??__RegsToCANID,w,c
 17215  004262  12DF               	iorwf	indf2,f,c
 17216                           
 17217                           ;ECAN.c: 1180: ptr++;
 17218  004264  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17219  004266  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17220                           
 17221                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17222  004268  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17223  00426C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17224  004270  5014               	movf	__RegsToCANID@Value,w,c
 17225  004272  6EE1               	movwf	fsr1l,c
 17226  004274  6AE2               	clrf	fsr1h,c
 17227  004276  2AE1               	incf	fsr1l,f,c
 17228  004278  6AE2               	clrf	fsr1h,c
 17229  00427A  CFDF FFE7          	movff	indf2,indf1
 17230                           
 17231                           ;ECAN.c: 1182: ptr++;
 17232  00427E  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17233  004280  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17234                           
 17235                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17236  004282  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17237  004286  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17238  00428A  5014               	movf	__RegsToCANID@Value,w,c
 17239  00428C  6EE1               	movwf	fsr1l,c
 17240  00428E  6AE2               	clrf	fsr1h,c
 17241  004290  CFDF FFE7          	movff	indf2,indf1
 17242  004294                     l890:
 17243  004294  0012               	return	
 17244  004296                     __end_of__RegsToCANID:
 17245                           	opt stack 0
 17246                           tblptru	equ	0xFF8
 17247                           tblptrh	equ	0xFF7
 17248                           tblptrl	equ	0xFF6
 17249                           tablat	equ	0xFF5
 17250                           prodh	equ	0xFF4
 17251                           prodl	equ	0xFF3
 17252                           postinc0	equ	0xFEE
 17253                           wreg	equ	0xFE8
 17254                           indf1	equ	0xFE7
 17255                           postdec1	equ	0xFE5
 17256                           fsr1h	equ	0xFE2
 17257                           fsr1l	equ	0xFE1
 17258                           indf2	equ	0xFDF
 17259                           postinc2	equ	0xFDE
 17260                           postdec2	equ	0xFDD
 17261                           plusw2	equ	0xFDB
 17262                           fsr2h	equ	0xFDA
 17263                           fsr2l	equ	0xFD9
 17264                           status	equ	0xFD8
 17265                           
 17266 ;; *************** function __ECANPointBuffer *****************
 17267 ;; Defined at:
 17268 ;;		line 1207 in file "../ECAN.c"
 17269 ;; Parameters:    Size  Location     Type
 17270 ;;  b               1    wreg     unsigned char 
 17271 ;; Auto vars:     Size  Location     Type
 17272 ;;  b               1   16[COMRAM] unsigned char 
 17273 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17274 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17275 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17276 ;; Return value:  Size  Location     Type
 17277 ;;                  2   13[COMRAM] PTR unsigned char 
 17278 ;; Registers used:
 17279 ;;		wreg, status,2, status,0
 17280 ;; Tracked objects:
 17281 ;;		On entry : F/0
 17282 ;;		On exit  : 0/0
 17283 ;;		Unchanged: 0/0
 17284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17285 ;;      Params:         3       0       0       0       0       0       0
 17286 ;;      Locals:         3       0       0       0       0       0       0
 17287 ;;      Temps:          0       0       0       0       0       0       0
 17288 ;;      Totals:         6       0       0       0       0       0       0
 17289 ;;Total ram usage:        6 bytes
 17290 ;; Hardware stack levels used:    1
 17291 ;; Hardware stack levels required when called:    2
 17292 ;; This function calls:
 17293 ;;		Nothing
 17294 ;; This function is called by:
 17295 ;;		_ECANReceiveMessage
 17296 ;; This function uses a non-reentrant model
 17297 ;;
 17298                           
 17299                           	psect	text77
 17300  0053A4                     __ptext77:
 17301                           	opt stack 0
 17302  0053A4                     __ECANPointBuffer:
 17303                           	opt stack 24
 17304                           
 17305                           ;incstack = 0
 17306                           ;incstack = 0
 17307                           ;__ECANPointBuffer@b stored from wreg
 17308  0053A4  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17309                           
 17310                           ; BSR set to: 0
 17311                           ;ECAN.c: 1208: BYTE* pt;
 17312                           ;ECAN.c: 1210: switch(b)
 17313  0053A8  D024               	goto	l8444
 17314  0053AA                     l8426:
 17315                           
 17316                           ; BSR set to: 0
 17317                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17318  0053AA  0E0F               	movlw	15	;volatile
 17319  0053AC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17320  0053AE  0E60               	movlw	96	;volatile
 17321  0053B0  D01E               	goto	L38
 17322  0053B2                     l8428:
 17323                           
 17324                           ; BSR set to: 0
 17325                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17326  0053B2  010F               	movlb	15	; () banked
 17327  0053B4  0E0F               	movlw	15	;volatile
 17328  0053B6  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17329  0053B8  0E50               	movlw	80	;volatile
 17330  0053BA  D019               	goto	L38
 17331  0053BC                     l8430:
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17335  0053BC  010E               	movlb	14	; () banked
 17336  0053BE  0E0E               	movlw	14	;volatile
 17337  0053C0  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17338  0053C2  0E20               	movlw	32	;volatile
 17339  0053C4  D014               	goto	L38
 17340  0053C6                     l8432:
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17344  0053C6  010E               	movlb	14	; () banked
 17345  0053C8  0E0E               	movlw	14	;volatile
 17346  0053CA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17347  0053CC  0E30               	movlw	48	;volatile
 17348  0053CE  D00F               	goto	L38
 17349  0053D0                     l8434:
 17350                           
 17351                           ; BSR set to: 0
 17352                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17353  0053D0  010E               	movlb	14	; () banked
 17354  0053D2  0E0E               	movlw	14	;volatile
 17355  0053D4  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17356  0053D6  0E40               	movlw	64	;volatile
 17357  0053D8  D00A               	goto	L38
 17358  0053DA                     l8436:
 17359                           
 17360                           ; BSR set to: 0
 17361                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17362  0053DA  010E               	movlb	14	; () banked
 17363  0053DC  0E0E               	movlw	14	;volatile
 17364  0053DE  D7EB               	goto	L39
 17365  0053E0                     l8438:
 17366                           
 17367                           ; BSR set to: 0
 17368                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17369  0053E0  010E               	movlb	14	; () banked
 17370  0053E2  0E0E               	movlw	14	;volatile
 17371  0053E4  D7E3               	goto	L40
 17372  0053E6                     l8440:
 17373                           
 17374                           ; BSR set to: 0
 17375                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17376  0053E6  010E               	movlb	14	; () banked
 17377  0053E8  0E0E               	movlw	14	;volatile
 17378  0053EA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17379  0053EC  0E70               	movlw	112	;volatile
 17380  0053EE                     L38:
 17381  0053EE  6E12               	movwf	__ECANPointBuffer@pt,c
 17382                           
 17383                           ;ECAN.c: 1235: break;
 17384  0053F0  D00F               	goto	l895
 17385  0053F2                     l8444:
 17386                           
 17387                           ; BSR set to: 0
 17388  0053F2  5011               	movf	__ECANPointBuffer@b,w,c
 17389                           
 17390                           ; Switch size 1, requested type "speed"
 17391                           ; Number of cases is 7, Range of values is 0 to 6
 17392                           ; switch strategies available:
 17393                           ; Name         Instructions Cycles
 17394                           ; simple_byte           22    12 (average)
 17395                           ;	Chosen strategy is simple_byte
 17396  0053F4  E0DA               	bz	l8426
 17397  0053F6  0A01               	xorlw	1	; case 1
 17398  0053F8  E0DC               	bz	l8428
 17399  0053FA  0A03               	xorlw	3	; case 2
 17400  0053FC  E0DF               	bz	l8430
 17401  0053FE  0A01               	xorlw	1	; case 3
 17402  005400  E0E2               	bz	l8432
 17403  005402  0A07               	xorlw	7	; case 4
 17404  005404  E0E5               	bz	l8434
 17405  005406  0A01               	xorlw	1	; case 5
 17406  005408  E0E8               	bz	l8436
 17407  00540A  0A03               	xorlw	3	; case 6
 17408  00540C  E0E9               	bz	l8438
 17409  00540E  D7EB               	goto	l8440
 17410  005410                     l895:
 17411                           
 17412                           ;ECAN.c: 1237: return (pt);
 17413  005410  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17414  005414  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17415  005418  0012               	return	
 17416  00541A                     __end_of__ECANPointBuffer:
 17417                           	opt stack 0
 17418                           tblptru	equ	0xFF8
 17419                           tblptrh	equ	0xFF7
 17420                           tblptrl	equ	0xFF6
 17421                           tablat	equ	0xFF5
 17422                           prodh	equ	0xFF4
 17423                           prodl	equ	0xFF3
 17424                           postinc0	equ	0xFEE
 17425                           wreg	equ	0xFE8
 17426                           indf1	equ	0xFE7
 17427                           postdec1	equ	0xFE5
 17428                           fsr1h	equ	0xFE2
 17429                           fsr1l	equ	0xFE1
 17430                           indf2	equ	0xFDF
 17431                           postinc2	equ	0xFDE
 17432                           postdec2	equ	0xFDD
 17433                           plusw2	equ	0xFDB
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function _vscp_check_pstorage *****************
 17439 ;; Defined at:
 17440 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;		None
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;		None
 17445 ;; Return value:  Size  Location     Type
 17446 ;;                  1    wreg      unsigned char 
 17447 ;; Registers used:
 17448 ;;		wreg, status,2, status,0, cstack
 17449 ;; Tracked objects:
 17450 ;;		On entry : 1/1
 17451 ;;		On exit  : 0/0
 17452 ;;		Unchanged: 0/0
 17453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17454 ;;      Params:         0       0       0       0       0       0       0
 17455 ;;      Locals:         0       0       0       0       0       0       0
 17456 ;;      Temps:          0       0       0       0       0       0       0
 17457 ;;      Totals:         0       0       0       0       0       0       0
 17458 ;;Total ram usage:        0 bytes
 17459 ;; Hardware stack levels used:    1
 17460 ;; Hardware stack levels required when called:    4
 17461 ;; This function calls:
 17462 ;;		_vscp_writeNicknamePermanent
 17463 ;;		_vscp_getSegmentCRC
 17464 ;;		_vscp_setSegmentCRC
 17465 ;;		_vscp_setControlByte
 17466 ;; This function is called by:
 17467 ;;		_main
 17468 ;; This function uses a non-reentrant model
 17469 ;;
 17470                           
 17471                           	psect	text78
 17472  005B6A                     __ptext78:
 17473                           	opt stack 0
 17474  005B6A                     _vscp_check_pstorage:
 17475                           	opt stack 26
 17476                           
 17477                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17478                           
 17479                           ;incstack = 0
 17480                           ;incstack = 0
 17481  005B6A  ECCA  F02E         	call	_vscp_getSegmentCRC	;wreg free
 17482  005B6E  0BC0               	andlw	192
 17483  005B70  0A40               	xorlw	64
 17484  005B72  E102               	bnz	l9556
 17485                           
 17486                           ;vscp_firmware.c: 170: return !0;
 17487  005B74  0E01               	movlw	1
 17488  005B76  D00A               	goto	l1036
 17489  005B78                     l9556:
 17490                           
 17491                           ;vscp_firmware.c: 171: }
 17492                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 17493  005B78  0EFF               	movlw	255
 17494  005B7A  EC96  F02E         	call	_vscp_writeNicknamePermanent
 17495                           
 17496                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 17497  005B7E  0E00               	movlw	0
 17498  005B80  EC84  F02E         	call	_vscp_setSegmentCRC
 17499                           
 17500                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 17501  005B84  0EA0               	movlw	160
 17502  005B86  EC7B  F02E         	call	_vscp_setControlByte
 17503                           
 17504                           ;vscp_firmware.c: 183: return 0;
 17505  005B8A  0E00               	movlw	0
 17506  005B8C                     l1036:
 17507  005B8C  0012               	return	
 17508  005B8E                     __end_of_vscp_check_pstorage:
 17509                           	opt stack 0
 17510                           tblptru	equ	0xFF8
 17511                           tblptrh	equ	0xFF7
 17512                           tblptrl	equ	0xFF6
 17513                           tablat	equ	0xFF5
 17514                           prodh	equ	0xFF4
 17515                           prodl	equ	0xFF3
 17516                           postinc0	equ	0xFEE
 17517                           wreg	equ	0xFE8
 17518                           indf1	equ	0xFE7
 17519                           postdec1	equ	0xFE5
 17520                           fsr1h	equ	0xFE2
 17521                           fsr1l	equ	0xFE1
 17522                           indf2	equ	0xFDF
 17523                           postinc2	equ	0xFDE
 17524                           postdec2	equ	0xFDD
 17525                           plusw2	equ	0xFDB
 17526                           fsr2h	equ	0xFDA
 17527                           fsr2l	equ	0xFD9
 17528                           status	equ	0xFD8
 17529                           
 17530 ;; *************** function _vscp_setControlByte *****************
 17531 ;; Defined at:
 17532 ;;		line 2796 in file "../main.c"
 17533 ;; Parameters:    Size  Location     Type
 17534 ;;  ctrl            1    wreg     unsigned char 
 17535 ;; Auto vars:     Size  Location     Type
 17536 ;;  ctrl            1   16[COMRAM] unsigned char 
 17537 ;; Return value:  Size  Location     Type
 17538 ;;		None               void
 17539 ;; Registers used:
 17540 ;;		wreg, status,2, cstack
 17541 ;; Tracked objects:
 17542 ;;		On entry : 0/1
 17543 ;;		On exit  : 0/0
 17544 ;;		Unchanged: 0/0
 17545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17546 ;;      Params:         0       0       0       0       0       0       0
 17547 ;;      Locals:         1       0       0       0       0       0       0
 17548 ;;      Temps:          0       0       0       0       0       0       0
 17549 ;;      Totals:         1       0       0       0       0       0       0
 17550 ;;Total ram usage:        1 bytes
 17551 ;; Hardware stack levels used:    1
 17552 ;; Hardware stack levels required when called:    3
 17553 ;; This function calls:
 17554 ;;		_writeEEPROM
 17555 ;; This function is called by:
 17556 ;;		_vscp_check_pstorage
 17557 ;; This function uses a non-reentrant model
 17558 ;;
 17559                           
 17560                           	psect	text79
 17561  005CF6                     __ptext79:
 17562                           	opt stack 0
 17563  005CF6                     _vscp_setControlByte:
 17564                           	opt stack 26
 17565                           
 17566                           ;incstack = 0
 17567                           ;incstack = 0
 17568                           ;vscp_setControlByte@ctrl stored from wreg
 17569  005CF6  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17570                           
 17571                           ;main.c: 2797: writeEEPROM(0x03, ctrl);
 17572  005CFA  6A0F               	clrf	?_writeEEPROM+1,c
 17573  005CFC  0E03               	movlw	3
 17574  005CFE  6E0E               	movwf	?_writeEEPROM,c
 17575  005D00  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17576  005D04  EF7E  F02D         	goto	_writeEEPROM	;wreg free
 17577  005D08                     __end_of_vscp_setControlByte:
 17578                           	opt stack 0
 17579                           tblptru	equ	0xFF8
 17580                           tblptrh	equ	0xFF7
 17581                           tblptrl	equ	0xFF6
 17582                           tablat	equ	0xFF5
 17583                           prodh	equ	0xFF4
 17584                           prodl	equ	0xFF3
 17585                           postinc0	equ	0xFEE
 17586                           wreg	equ	0xFE8
 17587                           indf1	equ	0xFE7
 17588                           postdec1	equ	0xFE5
 17589                           fsr1h	equ	0xFE2
 17590                           fsr1l	equ	0xFE1
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           plusw2	equ	0xFDB
 17595                           fsr2h	equ	0xFDA
 17596                           fsr2l	equ	0xFD9
 17597                           status	equ	0xFD8
 17598                           
 17599 ;; *************** function _vscp_setSegmentCRC *****************
 17600 ;; Defined at:
 17601 ;;		line 2787 in file "../main.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;  crc             1    wreg     unsigned char 
 17604 ;; Auto vars:     Size  Location     Type
 17605 ;;  crc             1   16[COMRAM] unsigned char 
 17606 ;; Return value:  Size  Location     Type
 17607 ;;		None               void
 17608 ;; Registers used:
 17609 ;;		wreg, status,2, cstack
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17615 ;;      Params:         0       0       0       0       0       0       0
 17616 ;;      Locals:         1       0       0       0       0       0       0
 17617 ;;      Temps:          0       0       0       0       0       0       0
 17618 ;;      Totals:         1       0       0       0       0       0       0
 17619 ;;Total ram usage:        1 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; Hardware stack levels required when called:    3
 17622 ;; This function calls:
 17623 ;;		_writeEEPROM
 17624 ;; This function is called by:
 17625 ;;		_vscp_check_pstorage
 17626 ;;		_vscp_handleProbeState
 17627 ;;		_vscp_handleHeartbeat
 17628 ;;		_vscp_handleSetNickname
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           	psect	text80
 17633  005D08                     __ptext80:
 17634                           	opt stack 0
 17635  005D08                     _vscp_setSegmentCRC:
 17636                           	opt stack 25
 17637                           
 17638                           ;incstack = 0
 17639                           ;incstack = 0
 17640                           ;vscp_setSegmentCRC@crc stored from wreg
 17641  005D08  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17642                           
 17643                           ;main.c: 2788: writeEEPROM(0x02, crc);
 17644  005D0C  6A0F               	clrf	?_writeEEPROM+1,c
 17645  005D0E  0E02               	movlw	2
 17646  005D10  6E0E               	movwf	?_writeEEPROM,c
 17647  005D12  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17648  005D16  EF7E  F02D         	goto	_writeEEPROM	;wreg free
 17649  005D1A                     __end_of_vscp_setSegmentCRC:
 17650                           	opt stack 0
 17651                           tblptru	equ	0xFF8
 17652                           tblptrh	equ	0xFF7
 17653                           tblptrl	equ	0xFF6
 17654                           tablat	equ	0xFF5
 17655                           prodh	equ	0xFF4
 17656                           prodl	equ	0xFF3
 17657                           postinc0	equ	0xFEE
 17658                           wreg	equ	0xFE8
 17659                           indf1	equ	0xFE7
 17660                           postdec1	equ	0xFE5
 17661                           fsr1h	equ	0xFE2
 17662                           fsr1l	equ	0xFE1
 17663                           indf2	equ	0xFDF
 17664                           postinc2	equ	0xFDE
 17665                           postdec2	equ	0xFDD
 17666                           plusw2	equ	0xFDB
 17667                           fsr2h	equ	0xFDA
 17668                           fsr2l	equ	0xFD9
 17669                           status	equ	0xFD8
 17670                           
 17671 ;; *************** function _vscp_getSegmentCRC *****************
 17672 ;; Defined at:
 17673 ;;		line 2778 in file "../main.c"
 17674 ;; Parameters:    Size  Location     Type
 17675 ;;		None
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;		None
 17678 ;; Return value:  Size  Location     Type
 17679 ;;                  1    wreg      unsigned char 
 17680 ;; Registers used:
 17681 ;;		wreg, status,2, cstack
 17682 ;; Tracked objects:
 17683 ;;		On entry : 0/0
 17684 ;;		On exit  : 0/0
 17685 ;;		Unchanged: 0/0
 17686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17687 ;;      Params:         0       0       0       0       0       0       0
 17688 ;;      Locals:         0       0       0       0       0       0       0
 17689 ;;      Temps:          0       0       0       0       0       0       0
 17690 ;;      Totals:         0       0       0       0       0       0       0
 17691 ;;Total ram usage:        0 bytes
 17692 ;; Hardware stack levels used:    1
 17693 ;; Hardware stack levels required when called:    3
 17694 ;; This function calls:
 17695 ;;		_readEEPROM
 17696 ;; This function is called by:
 17697 ;;		_vscp_check_pstorage
 17698 ;;		_vscp_handleHeartbeat
 17699 ;; This function uses a non-reentrant model
 17700 ;;
 17701                           
 17702                           	psect	text81
 17703  005D94                     __ptext81:
 17704                           	opt stack 0
 17705  005D94                     _vscp_getSegmentCRC:
 17706                           	opt stack 25
 17707                           
 17708                           ;main.c: 2779: return readEEPROM(0x02);
 17709                           
 17710                           ;incstack = 0
 17711                           ;incstack = 0
 17712  005D94  6A0F               	clrf	?_readEEPROM+1,c
 17713  005D96  0E02               	movlw	2
 17714  005D98  6E0E               	movwf	?_readEEPROM,c
 17715  005D9A  EF8D  F02E         	goto	_readEEPROM	;wreg free
 17716  005D9E                     __end_of_vscp_getSegmentCRC:
 17717                           	opt stack 0
 17718                           tblptru	equ	0xFF8
 17719                           tblptrh	equ	0xFF7
 17720                           tblptrl	equ	0xFF6
 17721                           tablat	equ	0xFF5
 17722                           prodh	equ	0xFF4
 17723                           prodl	equ	0xFF3
 17724                           postinc0	equ	0xFEE
 17725                           wreg	equ	0xFE8
 17726                           indf1	equ	0xFE7
 17727                           postdec1	equ	0xFE5
 17728                           fsr1h	equ	0xFE2
 17729                           fsr1l	equ	0xFE1
 17730                           indf2	equ	0xFDF
 17731                           postinc2	equ	0xFDE
 17732                           postdec2	equ	0xFDD
 17733                           plusw2	equ	0xFDB
 17734                           fsr2h	equ	0xFDA
 17735                           fsr2l	equ	0xFD9
 17736                           status	equ	0xFD8
 17737                           
 17738 ;; *************** function _readEEPROM *****************
 17739 ;; Defined at:
 17740 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 17741 ;; Parameters:    Size  Location     Type
 17742 ;;  address         2   13[COMRAM] unsigned short 
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;  data            1   16[COMRAM] unsigned char 
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  1    wreg      unsigned char 
 17747 ;; Registers used:
 17748 ;;		wreg, status,2
 17749 ;; Tracked objects:
 17750 ;;		On entry : 0/0
 17751 ;;		On exit  : 0/0
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17754 ;;      Params:         2       0       0       0       0       0       0
 17755 ;;      Locals:         2       0       0       0       0       0       0
 17756 ;;      Temps:          0       0       0       0       0       0       0
 17757 ;;      Totals:         4       0       0       0       0       0       0
 17758 ;;Total ram usage:        4 bytes
 17759 ;; Hardware stack levels used:    1
 17760 ;; Hardware stack levels required when called:    2
 17761 ;; This function calls:
 17762 ;;		Nothing
 17763 ;; This function is called by:
 17764 ;;		_doWork
 17765 ;;		_doOneSecondWork
 17766 ;;		_sendTempEvent
 17767 ;;		_getCalibrationValue
 17768 ;;		_writeCoeffs2Ram
 17769 ;;		_handle_sync
 17770 ;;		_vscp_readAppReg
 17771 ;;		_vscp_writeAppReg
 17772 ;;		_vscp_getGUID
 17773 ;;		_vscp_getUserID
 17774 ;;		_vscp_getManufacturerId
 17775 ;;		_vscp_getZone
 17776 ;;		_vscp_getSubzone
 17777 ;;		_vscp_readNicknamePermanent
 17778 ;;		_vscp_getSegmentCRC
 17779 ;; This function uses a non-reentrant model
 17780 ;;
 17781                           
 17782                           	psect	text82
 17783  005D1A                     __ptext82:
 17784                           	opt stack 0
 17785  005D1A                     _readEEPROM:
 17786                           	opt stack 26
 17787                           
 17788                           ;eeprom.c: 93: uint8_t data;
 17789                           ;eeprom.c: 98: EEADR = address & 0xff;
 17790                           
 17791                           ;incstack = 0
 17792                           ;incstack = 0
 17793  005D1A  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17794                           
 17795                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 17796  005D1E  9EA6               	bcf	4006,7,c	;volatile
 17797                           
 17798                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 17799  005D20  9CA6               	bcf	4006,6,c	;volatile
 17800                           
 17801                           ;eeprom.c: 101: EECON1bits.RD = 1;
 17802  005D22  80A6               	bsf	4006,0,c	;volatile
 17803                           
 17804                           ;eeprom.c: 102: data = EEDATA;
 17805  005D24  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17806                           
 17807                           ;eeprom.c: 104: return data;
 17808  005D28  5011               	movf	readEEPROM@data,w,c
 17809  005D2A  0012               	return	
 17810  005D2C                     __end_of_readEEPROM:
 17811                           	opt stack 0
 17812                           tblptru	equ	0xFF8
 17813                           tblptrh	equ	0xFF7
 17814                           tblptrl	equ	0xFF6
 17815                           tablat	equ	0xFF5
 17816                           prodh	equ	0xFF4
 17817                           prodl	equ	0xFF3
 17818                           postinc0	equ	0xFEE
 17819                           wreg	equ	0xFE8
 17820                           indf1	equ	0xFE7
 17821                           postdec1	equ	0xFE5
 17822                           fsr1h	equ	0xFE2
 17823                           fsr1l	equ	0xFE1
 17824                           indf2	equ	0xFDF
 17825                           postinc2	equ	0xFDE
 17826                           postdec2	equ	0xFDD
 17827                           plusw2	equ	0xFDB
 17828                           fsr2h	equ	0xFDA
 17829                           fsr2l	equ	0xFD9
 17830                           status	equ	0xFD8
 17831                           
 17832 ;; *************** function _vscp_writeNicknamePermanent *****************
 17833 ;; Defined at:
 17834 ;;		line 2769 in file "../main.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  nickname        1    wreg     unsigned char 
 17837 ;; Auto vars:     Size  Location     Type
 17838 ;;  nickname        1   16[COMRAM] unsigned char 
 17839 ;; Return value:  Size  Location     Type
 17840 ;;		None               void
 17841 ;; Registers used:
 17842 ;;		wreg, status,2, cstack
 17843 ;; Tracked objects:
 17844 ;;		On entry : 0/0
 17845 ;;		On exit  : 0/0
 17846 ;;		Unchanged: 0/0
 17847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17848 ;;      Params:         0       0       0       0       0       0       0
 17849 ;;      Locals:         1       0       0       0       0       0       0
 17850 ;;      Temps:          0       0       0       0       0       0       0
 17851 ;;      Totals:         1       0       0       0       0       0       0
 17852 ;;Total ram usage:        1 bytes
 17853 ;; Hardware stack levels used:    1
 17854 ;; Hardware stack levels required when called:    3
 17855 ;; This function calls:
 17856 ;;		_writeEEPROM
 17857 ;; This function is called by:
 17858 ;;		_vscp_check_pstorage
 17859 ;;		_vscp_handleProbeState
 17860 ;;		_vscp_handleHeartbeat
 17861 ;;		_vscp_handleSetNickname
 17862 ;;		_vscp_handleDropNickname
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           	psect	text83
 17867  005D2C                     __ptext83:
 17868                           	opt stack 0
 17869  005D2C                     _vscp_writeNicknamePermanent:
 17870                           	opt stack 25
 17871                           
 17872                           ;incstack = 0
 17873                           ;incstack = 0
 17874                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17875  005D2C  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17876                           
 17877                           ;main.c: 2770: writeEEPROM( 0x01, nickname );
 17878  005D30  6A0F               	clrf	?_writeEEPROM+1,c
 17879  005D32  0E01               	movlw	1
 17880  005D34  6E0E               	movwf	?_writeEEPROM,c
 17881  005D36  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17882  005D3A  EF7E  F02D         	goto	_writeEEPROM	;wreg free
 17883  005D3E                     __end_of_vscp_writeNicknamePermanent:
 17884                           	opt stack 0
 17885                           tblptru	equ	0xFF8
 17886                           tblptrh	equ	0xFF7
 17887                           tblptrl	equ	0xFF6
 17888                           tablat	equ	0xFF5
 17889                           prodh	equ	0xFF4
 17890                           prodl	equ	0xFF3
 17891                           postinc0	equ	0xFEE
 17892                           wreg	equ	0xFE8
 17893                           indf1	equ	0xFE7
 17894                           postdec1	equ	0xFE5
 17895                           fsr1h	equ	0xFE2
 17896                           fsr1l	equ	0xFE1
 17897                           indf2	equ	0xFDF
 17898                           postinc2	equ	0xFDE
 17899                           postdec2	equ	0xFDD
 17900                           plusw2	equ	0xFDB
 17901                           fsr2h	equ	0xFDA
 17902                           fsr2l	equ	0xFD9
 17903                           status	equ	0xFD8
 17904                           
 17905 ;; *************** function _writeEEPROM *****************
 17906 ;; Defined at:
 17907 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 17908 ;; Parameters:    Size  Location     Type
 17909 ;;  address         2   13[COMRAM] unsigned short 
 17910 ;;  data            1   15[COMRAM] unsigned char 
 17911 ;; Auto vars:     Size  Location     Type
 17912 ;;		None
 17913 ;; Return value:  Size  Location     Type
 17914 ;;		None               void
 17915 ;; Registers used:
 17916 ;;		wreg, status,2
 17917 ;; Tracked objects:
 17918 ;;		On entry : 0/0
 17919 ;;		On exit  : 0/0
 17920 ;;		Unchanged: 0/0
 17921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17922 ;;      Params:         3       0       0       0       0       0       0
 17923 ;;      Locals:         0       0       0       0       0       0       0
 17924 ;;      Temps:          0       0       0       0       0       0       0
 17925 ;;      Totals:         3       0       0       0       0       0       0
 17926 ;;Total ram usage:        3 bytes
 17927 ;; Hardware stack levels used:    1
 17928 ;; Hardware stack levels required when called:    2
 17929 ;; This function calls:
 17930 ;;		Nothing
 17931 ;; This function is called by:
 17932 ;;		_main
 17933 ;;		_doWork
 17934 ;;		_init_app_eeprom
 17935 ;;		_vscp_writeAppReg
 17936 ;;		_vscp_setGUID
 17937 ;;		_vscp_setUserID
 17938 ;;		_vscp_setManufacturerId
 17939 ;;		_vscp_goBootloaderMode
 17940 ;;		_vscp_writeNicknamePermanent
 17941 ;;		_vscp_setSegmentCRC
 17942 ;;		_vscp_setControlByte
 17943 ;; This function uses a non-reentrant model
 17944 ;;
 17945                           
 17946                           	psect	text84
 17947  005AFC                     __ptext84:
 17948                           	opt stack 0
 17949  005AFC                     _writeEEPROM:
 17950                           	opt stack 27
 17951                           
 17952                           ;eeprom.c: 29: EEADR = address & 0xff;
 17953                           
 17954                           ;incstack = 0
 17955                           ;incstack = 0
 17956  005AFC  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17957                           
 17958                           ;eeprom.c: 30: EEDATA = data;
 17959  005B00  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17960                           
 17961                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 17962  005B04  9EA6               	bcf	4006,7,c	;volatile
 17963                           
 17964                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 17965  005B06  9CA6               	bcf	4006,6,c	;volatile
 17966                           
 17967                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 17968  005B08  84A6               	bsf	4006,2,c	;volatile
 17969                           
 17970                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 17971  005B0A  9EF2               	bcf	intcon,7,c	;volatile
 17972                           
 17973                           ;eeprom.c: 37: EECON2 = 0x55;
 17974  005B0C  0E55               	movlw	85
 17975  005B0E  6EA7               	movwf	4007,c	;volatile
 17976                           
 17977                           ;eeprom.c: 38: EECON2 = 0xaa;
 17978  005B10  0EAA               	movlw	170
 17979  005B12  6EA7               	movwf	4007,c	;volatile
 17980                           
 17981                           ;eeprom.c: 39: EECON1bits.WR = 1;
 17982  005B14  82A6               	bsf	4006,1,c	;volatile
 17983                           
 17984                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 17985  005B16  8EF2               	bsf	intcon,7,c	;volatile
 17986  005B18                     l918:
 17987  005B18  A8A1               	btfss	4001,4,c	;volatile
 17988  005B1A  D7FE               	goto	l918
 17989                           
 17990                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 17991  005B1C  98A1               	bcf	4001,4,c	;volatile
 17992                           
 17993                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 17994  005B1E  94A6               	bcf	4006,2,c	;volatile
 17995  005B20  0012               	return	
 17996  005B22                     __end_of_writeEEPROM:
 17997                           	opt stack 0
 17998                           tblptru	equ	0xFF8
 17999                           tblptrh	equ	0xFF7
 18000                           tblptrl	equ	0xFF6
 18001                           tablat	equ	0xFF5
 18002                           prodh	equ	0xFF4
 18003                           prodl	equ	0xFF3
 18004                           intcon	equ	0xFF2
 18005                           postinc0	equ	0xFEE
 18006                           wreg	equ	0xFE8
 18007                           indf1	equ	0xFE7
 18008                           postdec1	equ	0xFE5
 18009                           fsr1h	equ	0xFE2
 18010                           fsr1l	equ	0xFE1
 18011                           indf2	equ	0xFDF
 18012                           postinc2	equ	0xFDE
 18013                           postdec2	equ	0xFDD
 18014                           plusw2	equ	0xFDB
 18015                           fsr2h	equ	0xFDA
 18016                           fsr2l	equ	0xFD9
 18017                           status	equ	0xFD8
 18018                           
 18019 ;; *************** function _init *****************
 18020 ;; Defined at:
 18021 ;;		line 886 in file "../main.c"
 18022 ;; Parameters:    Size  Location     Type
 18023 ;;		None
 18024 ;; Auto vars:     Size  Location     Type
 18025 ;;		None
 18026 ;; Return value:  Size  Location     Type
 18027 ;;		None               void
 18028 ;; Registers used:
 18029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18030 ;; Tracked objects:
 18031 ;;		On entry : 0/0
 18032 ;;		On exit  : 1/1
 18033 ;;		Unchanged: 0/0
 18034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18035 ;;      Params:         0       0       0       0       0       0       0
 18036 ;;      Locals:         0       0       0       0       0       0       0
 18037 ;;      Temps:          0       0       0       0       0       0       0
 18038 ;;      Totals:         0       0       0       0       0       0       0
 18039 ;;Total ram usage:        0 bytes
 18040 ;; Hardware stack levels used:    1
 18041 ;; Hardware stack levels required when called:    5
 18042 ;; This function calls:
 18043 ;;		_WriteTimer0
 18044 ;;		_ConvertADC
 18045 ;;		_init_app_ram
 18046 ;;		_OpenTimer0
 18047 ;;		_OpenADC
 18048 ;;		_ECANInitialize
 18049 ;; This function is called by:
 18050 ;;		_main
 18051 ;; This function uses a non-reentrant model
 18052 ;;
 18053                           
 18054                           	psect	text85
 18055  0058C8                     __ptext85:
 18056                           	opt stack 0
 18057  0058C8                     _init:
 18058                           	opt stack 25
 18059                           
 18060                           ;main.c: 890: init_app_ram();
 18061                           
 18062                           ;incstack = 0
 18063                           ;incstack = 0
 18064  0058C8  ECC4  F02B         	call	_init_app_ram	;wreg free
 18065                           
 18066                           ; BSR set to: 1
 18067                           ;main.c: 898: TRISA = 0x07;
 18068  0058CC  0E07               	movlw	7
 18069  0058CE  6E92               	movwf	3986,c	;volatile
 18070                           
 18071                           ; BSR set to: 1
 18072                           ;main.c: 909: TRISB = 0x1B;
 18073  0058D0  0E1B               	movlw	27
 18074  0058D2  6E93               	movwf	3987,c	;volatile
 18075                           
 18076                           ; BSR set to: 1
 18077                           ;main.c: 919: TRISC = 0x01;
 18078  0058D4  0E01               	movlw	1
 18079  0058D6  6E94               	movwf	3988,c	;volatile
 18080                           
 18081                           ; BSR set to: 1
 18082                           ;main.c: 920: PORTC = 0x00;
 18083  0058D8  6A82               	clrf	3970,c	;volatile
 18084                           
 18085                           ; BSR set to: 1
 18086                           ;main.c: 922: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18087  0058DA  0E92               	movlw	146
 18088  0058DC  ECF8  F02D         	call	_OpenTimer0
 18089                           
 18090                           ; BSR set to: 1
 18091                           ;main.c: 923: WriteTimer0(0xfb1d);
 18092  0058E0  0EFB               	movlw	251
 18093  0058E2  6E0F               	movwf	?_WriteTimer0+1,c
 18094  0058E4  0E1D               	movlw	29
 18095  0058E6  6E0E               	movwf	?_WriteTimer0,c
 18096  0058E8  EC9F  F02E         	call	_WriteTimer0	;wreg free
 18097                           
 18098                           ; BSR set to: 1
 18099                           ;main.c: 925: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18100                           ;main.c: 926: 0b10000111 & 0b11111111 & 0b11110100 &
 18101                           ;main.c: 927: 0b11111110 & 0b11111101,
 18102                           ;main.c: 928: 15);
 18103  0058EC  0E84               	movlw	132
 18104  0058EE  6E0E               	movwf	?_OpenADC,c
 18105  0058F0  0E0F               	movlw	15
 18106  0058F2  6E0F               	movwf	?_OpenADC+1,c
 18107  0058F4  0EEF               	movlw	239
 18108  0058F6  EC47  F02A         	call	_OpenADC
 18109                           
 18110                           ; BSR set to: 1
 18111                           ;main.c: 931: ECANInitialize();
 18112  0058FA  EC85  F028         	call	_ECANInitialize	;wreg free
 18113                           
 18114                           ;main.c: 955: INTCONbits.GIE = 1;
 18115  0058FE  8EF2               	bsf	intcon,7,c	;volatile
 18116                           
 18117                           ;main.c: 957: ConvertADC();
 18118  005900  EFD5  F02E         	goto	_ConvertADC	;wreg free
 18119  005904                     __end_of_init:
 18120                           	opt stack 0
 18121                           tblptru	equ	0xFF8
 18122                           tblptrh	equ	0xFF7
 18123                           tblptrl	equ	0xFF6
 18124                           tablat	equ	0xFF5
 18125                           prodh	equ	0xFF4
 18126                           prodl	equ	0xFF3
 18127                           intcon	equ	0xFF2
 18128                           postinc0	equ	0xFEE
 18129                           wreg	equ	0xFE8
 18130                           indf1	equ	0xFE7
 18131                           postdec1	equ	0xFE5
 18132                           fsr1h	equ	0xFE2
 18133                           fsr1l	equ	0xFE1
 18134                           indf2	equ	0xFDF
 18135                           postinc2	equ	0xFDE
 18136                           postdec2	equ	0xFDD
 18137                           plusw2	equ	0xFDB
 18138                           fsr2h	equ	0xFDA
 18139                           fsr2l	equ	0xFD9
 18140                           status	equ	0xFD8
 18141                           
 18142 ;; *************** function _ECANInitialize *****************
 18143 ;; Defined at:
 18144 ;;		line 168 in file "../ECAN.c"
 18145 ;; Parameters:    Size  Location     Type
 18146 ;;		None
 18147 ;; Auto vars:     Size  Location     Type
 18148 ;;		None
 18149 ;; Return value:  Size  Location     Type
 18150 ;;		None               void
 18151 ;; Registers used:
 18152 ;;		wreg, status,2, status,0, cstack
 18153 ;; Tracked objects:
 18154 ;;		On entry : F/1
 18155 ;;		On exit  : 1/1
 18156 ;;		Unchanged: 0/0
 18157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18158 ;;      Params:         0       0       0       0       0       0       0
 18159 ;;      Locals:         0       0       0       0       0       0       0
 18160 ;;      Temps:          0       0       0       0       0       0       0
 18161 ;;      Totals:         0       0       0       0       0       0       0
 18162 ;;Total ram usage:        0 bytes
 18163 ;; Hardware stack levels used:    1
 18164 ;; Hardware stack levels required when called:    3
 18165 ;; This function calls:
 18166 ;;		_ECANSetOperationMode
 18167 ;; This function is called by:
 18168 ;;		_init
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           	psect	text86
 18173  00510A                     __ptext86:
 18174                           	opt stack 0
 18175  00510A                     _ECANInitialize:
 18176                           	opt stack 26
 18177                           
 18178                           ; BSR set to: 1
 18179                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18180                           
 18181                           ;incstack = 0
 18182                           ;incstack = 0
 18183  00510A  0E80               	movlw	128
 18184  00510C  EC51  F02E         	call	_ECANSetOperationMode
 18185                           
 18186                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18187  005110  0E09               	movlw	9
 18188  005112  6E70               	movwf	3952,c	;volatile
 18189                           
 18190                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18191  005114  0EFC               	movlw	252
 18192  005116  6E71               	movwf	3953,c	;volatile
 18193                           
 18194                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18195                           ;ECAN.c: 181: (0 << 6) |
 18196                           ;ECAN.c: 182: (2-1);
 18197  005118  0E01               	movlw	1
 18198  00511A  6E72               	movwf	3954,c	;volatile
 18199                           
 18200                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18201  00511C  0E20               	movlw	32
 18202  00511E  6E73               	movwf	3955,c	;volatile
 18203                           
 18204                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18205  005120  8E77               	bsf	3959,7,c	;volatile
 18206                           
 18207                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18208  005122  9C77               	bcf	3959,6,c	;volatile
 18209                           
 18210                           ;ECAN.c: 205: RXB0CON = 0;
 18211  005124  6A60               	clrf	3936,c	;volatile
 18212                           
 18213                           ;ECAN.c: 211: RXB1CON = 0;
 18214  005126  010F               	movlb	15	; () banked
 18215  005128  6B50               	clrf	80,b	;volatile
 18216                           
 18217                           ; BSR set to: 15
 18218                           ;ECAN.c: 221: B0CON = 0;
 18219  00512A  010E               	movlb	14	; () banked
 18220  00512C  6B20               	clrf	32,b	;volatile
 18221                           
 18222                           ; BSR set to: 14
 18223                           ;ECAN.c: 231: B1CON = 0;
 18224  00512E  6B30               	clrf	48,b	;volatile
 18225                           
 18226                           ; BSR set to: 14
 18227                           ;ECAN.c: 241: B2CON = 0;
 18228  005130  6B40               	clrf	64,b	;volatile
 18229                           
 18230                           ; BSR set to: 14
 18231                           ;ECAN.c: 254: B3CON = 0 << 2;
 18232  005132  6B50               	clrf	80,b	;volatile
 18233                           
 18234                           ; BSR set to: 14
 18235                           ;ECAN.c: 264: B4CON = 0 << 2;
 18236  005134  6B60               	clrf	96,b	;volatile
 18237                           
 18238                           ; BSR set to: 14
 18239                           ;ECAN.c: 274: B5CON = 0 << 2;
 18240  005136  6B70               	clrf	112,b	;volatile
 18241                           
 18242                           ; BSR set to: 14
 18243                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18244  005138  0EE0               	movlw	224
 18245  00513A  010D               	movlb	13	; () banked
 18246  00513C  6FF8               	movwf	248,b	;volatile
 18247                           
 18248                           ; BSR set to: 13
 18249                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18250  00513E  010F               	movlb	15	; () banked
 18251  005140  6B00               	clrf	0,b	;volatile
 18252                           
 18253                           ; BSR set to: 15
 18254  005142  0E08               	movlw	8
 18255  005144  6F01               	movwf	1,b	;volatile
 18256                           
 18257                           ; BSR set to: 15
 18258  005146  6B02               	clrf	2,b	;volatile
 18259                           
 18260                           ; BSR set to: 15
 18261  005148  6B03               	clrf	3,b	;volatile
 18262                           
 18263                           ; BSR set to: 15
 18264                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18265  00514A  6B04               	clrf	4,b	;volatile
 18266                           
 18267                           ; BSR set to: 15
 18268  00514C  0EE8               	movlw	232
 18269  00514E  6F05               	movwf	5,b	;volatile
 18270                           
 18271                           ; BSR set to: 15
 18272  005150  0E1A               	movlw	26
 18273  005152  6F06               	movwf	6,b	;volatile
 18274                           
 18275                           ; BSR set to: 15
 18276  005154  6B07               	clrf	7,b	;volatile
 18277                           
 18278                           ; BSR set to: 15
 18279                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18280  005156  0E03               	movlw	3
 18281  005158  010D               	movlb	13	; () banked
 18282  00515A  6FD4               	movwf	212,b	;volatile
 18283                           
 18284                           ; BSR set to: 13
 18285                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18286  00515C  6BD5               	clrf	213,b	;volatile
 18287                           
 18288                           ; BSR set to: 13
 18289                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18290  00515E  6BE0               	clrf	224,b	;volatile
 18291                           
 18292                           ; BSR set to: 13
 18293                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18294  005160  0E11               	movlw	17
 18295  005162  6FE1               	movwf	225,b	;volatile
 18296                           
 18297                           ; BSR set to: 13
 18298                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18299  005164  6FE2               	movwf	226,b	;volatile
 18300                           
 18301                           ; BSR set to: 13
 18302                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18303  005166  6BE3               	clrf	227,b	;volatile
 18304                           
 18305                           ; BSR set to: 13
 18306                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18307  005168  6BE4               	clrf	228,b	;volatile
 18308                           
 18309                           ; BSR set to: 13
 18310                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18311  00516A  6BE5               	clrf	229,b	;volatile
 18312                           
 18313                           ; BSR set to: 13
 18314                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18315  00516C  6BE6               	clrf	230,b	;volatile
 18316                           
 18317                           ; BSR set to: 13
 18318                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18319  00516E  6BE7               	clrf	231,b	;volatile
 18320                           
 18321                           ; BSR set to: 13
 18322                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18323  005170  0E54               	movlw	84
 18324  005172  6FF0               	movwf	240,b	;volatile
 18325                           
 18326                           ; BSR set to: 13
 18327                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18328  005174  0E05               	movlw	5
 18329  005176  6FF1               	movwf	241,b	;volatile
 18330                           
 18331                           ; BSR set to: 13
 18332                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18333  005178  6BF2               	clrf	242,b	;volatile
 18334                           
 18335                           ; BSR set to: 13
 18336                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18337  00517A  6BF2               	clrf	242,b	;volatile
 18338                           
 18339                           ; BSR set to: 13
 18340                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18341  00517C  0E0F               	movlw	15
 18342  00517E  010F               	movlb	15	; () banked
 18343  005180  6F18               	movwf	24,b	;volatile
 18344                           
 18345                           ; BSR set to: 15
 18346  005182  0EE0               	movlw	224
 18347  005184  6F19               	movwf	25,b	;volatile
 18348                           
 18349                           ; BSR set to: 15
 18350  005186  6B1A               	clrf	26,b	;volatile
 18351                           
 18352                           ; BSR set to: 15
 18353  005188  6B1B               	clrf	27,b	;volatile
 18354                           
 18355                           ; BSR set to: 15
 18356                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18357  00518A  8719               	bsf	25,3,b	;volatile
 18358                           
 18359                           ; BSR set to: 15
 18360                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18361  00518C  0E0F               	movlw	15
 18362  00518E  6F1C               	movwf	28,b	;volatile
 18363                           
 18364                           ; BSR set to: 15
 18365  005190  0EE0               	movlw	224
 18366  005192  6F1D               	movwf	29,b	;volatile
 18367                           
 18368                           ; BSR set to: 15
 18369  005194  691E               	setf	30,b	;volatile
 18370                           
 18371                           ; BSR set to: 15
 18372  005196  6B1F               	clrf	31,b	;volatile
 18373                           
 18374                           ; BSR set to: 15
 18375                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18376  005198  871D               	bsf	29,3,b	;volatile
 18377                           
 18378                           ; BSR set to: 15
 18379                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18380  00519A  0E00               	movlw	0
 18381  00519C  EF51  F02E         	goto	_ECANSetOperationMode
 18382  0051A0                     __end_of_ECANInitialize:
 18383                           	opt stack 0
 18384                           tblptru	equ	0xFF8
 18385                           tblptrh	equ	0xFF7
 18386                           tblptrl	equ	0xFF6
 18387                           tablat	equ	0xFF5
 18388                           prodh	equ	0xFF4
 18389                           prodl	equ	0xFF3
 18390                           intcon	equ	0xFF2
 18391                           postinc0	equ	0xFEE
 18392                           wreg	equ	0xFE8
 18393                           indf1	equ	0xFE7
 18394                           postdec1	equ	0xFE5
 18395                           fsr1h	equ	0xFE2
 18396                           fsr1l	equ	0xFE1
 18397                           indf2	equ	0xFDF
 18398                           postinc2	equ	0xFDE
 18399                           postdec2	equ	0xFDD
 18400                           plusw2	equ	0xFDB
 18401                           fsr2h	equ	0xFDA
 18402                           fsr2l	equ	0xFD9
 18403                           status	equ	0xFD8
 18404                           
 18405 ;; *************** function _ECANSetOperationMode *****************
 18406 ;; Defined at:
 18407 ;;		line 1012 in file "../ECAN.c"
 18408 ;; Parameters:    Size  Location     Type
 18409 ;;  mode            1    wreg     enum E16337
 18410 ;; Auto vars:     Size  Location     Type
 18411 ;;  mode            1   13[COMRAM] enum E16337
 18412 ;; Return value:  Size  Location     Type
 18413 ;;		None               void
 18414 ;; Registers used:
 18415 ;;		wreg, status,2, status,0
 18416 ;; Tracked objects:
 18417 ;;		On entry : 1/1
 18418 ;;		On exit  : 1/1
 18419 ;;		Unchanged: 1/0
 18420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18421 ;;      Params:         0       0       0       0       0       0       0
 18422 ;;      Locals:         1       0       0       0       0       0       0
 18423 ;;      Temps:          0       0       0       0       0       0       0
 18424 ;;      Totals:         1       0       0       0       0       0       0
 18425 ;;Total ram usage:        1 bytes
 18426 ;; Hardware stack levels used:    1
 18427 ;; Hardware stack levels required when called:    2
 18428 ;; This function calls:
 18429 ;;		Nothing
 18430 ;; This function is called by:
 18431 ;;		_ECANInitialize
 18432 ;; This function uses a non-reentrant model
 18433 ;;
 18434                           
 18435                           	psect	text87
 18436  005CA2                     __ptext87:
 18437                           	opt stack 0
 18438  005CA2                     _ECANSetOperationMode:
 18439                           	opt stack 26
 18440                           
 18441                           ;incstack = 0
 18442                           ;incstack = 0
 18443                           ;ECANSetOperationMode@mode stored from wreg
 18444  005CA2  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18445                           
 18446                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18447  005CA6  0E1F               	movlw	31
 18448  005CA8  166F               	andwf	3951,f,c	;volatile
 18449                           
 18450                           ;ECAN.c: 1014: CANCON |= mode;
 18451  005CAA  500E               	movf	ECANSetOperationMode@mode,w,c
 18452  005CAC  126F               	iorwf	3951,f,c	;volatile
 18453  005CAE                     l8396:
 18454  005CAE  506F               	movf	3951,w,c	;volatile
 18455  005CB0  0BE0               	andlw	224
 18456  005CB2  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18457  005CB4  B4D8               	btfsc	status,2,c
 18458  005CB6  0012               	return	
 18459  005CB8  D7FA               	goto	l8396
 18460  005CBA                     __end_of_ECANSetOperationMode:
 18461                           	opt stack 0
 18462                           tblptru	equ	0xFF8
 18463                           tblptrh	equ	0xFF7
 18464                           tblptrl	equ	0xFF6
 18465                           tablat	equ	0xFF5
 18466                           prodh	equ	0xFF4
 18467                           prodl	equ	0xFF3
 18468                           intcon	equ	0xFF2
 18469                           postinc0	equ	0xFEE
 18470                           wreg	equ	0xFE8
 18471                           indf1	equ	0xFE7
 18472                           postdec1	equ	0xFE5
 18473                           fsr1h	equ	0xFE2
 18474                           fsr1l	equ	0xFE1
 18475                           indf2	equ	0xFDF
 18476                           postinc2	equ	0xFDE
 18477                           postdec2	equ	0xFDD
 18478                           plusw2	equ	0xFDB
 18479                           fsr2h	equ	0xFDA
 18480                           fsr2l	equ	0xFD9
 18481                           status	equ	0xFD8
 18482                           
 18483 ;; *************** function _OpenADC *****************
 18484 ;; Defined at:
 18485 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;  config          1    wreg     unsigned char 
 18488 ;;  config2         1   13[COMRAM] unsigned char 
 18489 ;;  portconfig      1   14[COMRAM] unsigned char 
 18490 ;; Auto vars:     Size  Location     Type
 18491 ;;  config          1   17[COMRAM] unsigned char 
 18492 ;; Return value:  Size  Location     Type
 18493 ;;		None               void
 18494 ;; Registers used:
 18495 ;;		wreg, status,2, status,0
 18496 ;; Tracked objects:
 18497 ;;		On entry : F/1
 18498 ;;		On exit  : F/1
 18499 ;;		Unchanged: F/0
 18500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18501 ;;      Params:         2       0       0       0       0       0       0
 18502 ;;      Locals:         1       0       0       0       0       0       0
 18503 ;;      Temps:          2       0       0       0       0       0       0
 18504 ;;      Totals:         5       0       0       0       0       0       0
 18505 ;;Total ram usage:        5 bytes
 18506 ;; Hardware stack levels used:    1
 18507 ;; Hardware stack levels required when called:    2
 18508 ;; This function calls:
 18509 ;;		Nothing
 18510 ;; This function is called by:
 18511 ;;		_init
 18512 ;; This function uses a non-reentrant model
 18513 ;;
 18514                           
 18515                           	psect	text88
 18516  00548E                     __ptext88:
 18517                           	opt stack 0
 18518  00548E                     _OpenADC:
 18519                           	opt stack 27
 18520                           
 18521                           ;incstack = 0
 18522                           ;incstack = 0
 18523                           ;OpenADC@config stored from wreg
 18524  00548E  CFE8 F012          	movff	wreg,OpenADC@config
 18525                           
 18526                           ; BSR set to: 1
 18527  005492  6AC2               	clrf	4034,c	;volatile
 18528  005494  6AC0               	clrf	4032,c	;volatile
 18529                           
 18530                           ; BSR set to: 1
 18531  005496  90D8               	bcf	status,0,c
 18532  005498  300E               	rrcf	OpenADC@config2,w,c
 18533  00549A  0B3C               	andlw	60
 18534  00549C  6EC2               	movwf	4034,c	;volatile
 18535  00549E  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18536  0054A2  3A10               	swapf	??_OpenADC,f,c
 18537  0054A4  0EF0               	movlw	240
 18538  0054A6  1610               	andwf	??_OpenADC,f,c
 18539  0054A8  0E30               	movlw	48
 18540  0054AA  1610               	andwf	??_OpenADC,f,c
 18541  0054AC  500F               	movf	OpenADC@portconfig,w,c
 18542  0054AE  0B0F               	andlw	15
 18543  0054B0  1010               	iorwf	??_OpenADC,w,c
 18544  0054B2  6EC1               	movwf	4033,c	;volatile
 18545  0054B4  C012  F010         	movff	OpenADC@config,??_OpenADC
 18546  0054B8  90D8               	bcf	status,0,c
 18547  0054BA  3610               	rlcf	??_OpenADC,f,c
 18548  0054BC  90D8               	bcf	status,0,c
 18549  0054BE  3610               	rlcf	??_OpenADC,f,c
 18550  0054C0  0E38               	movlw	56
 18551  0054C2  1610               	andwf	??_OpenADC,f,c
 18552  0054C4  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18553  0054C8  3A11               	swapf	??_OpenADC+1,f,c
 18554  0054CA  0E0F               	movlw	15
 18555  0054CC  1611               	andwf	??_OpenADC+1,f,c
 18556  0054CE  0E07               	movlw	7
 18557  0054D0  1611               	andwf	??_OpenADC+1,f,c
 18558  0054D2  5012               	movf	OpenADC@config,w,c
 18559  0054D4  0B80               	andlw	128
 18560  0054D6  1011               	iorwf	??_OpenADC+1,w,c
 18561  0054D8  1010               	iorwf	??_OpenADC,w,c
 18562  0054DA  6EC0               	movwf	4032,c	;volatile
 18563                           
 18564                           ; BSR set to: 1
 18565  0054DC  AE0E               	btfss	OpenADC@config2,7,c
 18566  0054DE  D003               	goto	l1301
 18567                           
 18568                           ; BSR set to: 1
 18569  0054E0  9C9E               	bcf	3998,6,c	;volatile
 18570  0054E2  8C9D               	bsf	3997,6,c	;volatile
 18571  0054E4  8CF2               	bsf	intcon,6,c	;volatile
 18572  0054E6                     l1301:
 18573                           
 18574                           ; BSR set to: 1
 18575  0054E6  80C2               	bsf	4034,0,c	;volatile
 18576                           
 18577                           ; BSR set to: 1
 18578  0054E8  0012               	return	
 18579  0054EA                     __end_of_OpenADC:
 18580                           	opt stack 0
 18581                           tblptru	equ	0xFF8
 18582                           tblptrh	equ	0xFF7
 18583                           tblptrl	equ	0xFF6
 18584                           tablat	equ	0xFF5
 18585                           prodh	equ	0xFF4
 18586                           prodl	equ	0xFF3
 18587                           intcon	equ	0xFF2
 18588                           postinc0	equ	0xFEE
 18589                           wreg	equ	0xFE8
 18590                           indf1	equ	0xFE7
 18591                           postdec1	equ	0xFE5
 18592                           fsr1h	equ	0xFE2
 18593                           fsr1l	equ	0xFE1
 18594                           indf2	equ	0xFDF
 18595                           postinc2	equ	0xFDE
 18596                           postdec2	equ	0xFDD
 18597                           plusw2	equ	0xFDB
 18598                           fsr2h	equ	0xFDA
 18599                           fsr2l	equ	0xFD9
 18600                           status	equ	0xFD8
 18601                           
 18602 ;; *************** function _OpenTimer0 *****************
 18603 ;; Defined at:
 18604 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18605 ;; Parameters:    Size  Location     Type
 18606 ;;  config          1    wreg     unsigned char 
 18607 ;; Auto vars:     Size  Location     Type
 18608 ;;  config          1   13[COMRAM] unsigned char 
 18609 ;; Return value:  Size  Location     Type
 18610 ;;		None               void
 18611 ;; Registers used:
 18612 ;;		wreg, status,2, status,0
 18613 ;; Tracked objects:
 18614 ;;		On entry : F/1
 18615 ;;		On exit  : F/1
 18616 ;;		Unchanged: F/0
 18617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18618 ;;      Params:         0       0       0       0       0       0       0
 18619 ;;      Locals:         1       0       0       0       0       0       0
 18620 ;;      Temps:          0       0       0       0       0       0       0
 18621 ;;      Totals:         1       0       0       0       0       0       0
 18622 ;;Total ram usage:        1 bytes
 18623 ;; Hardware stack levels used:    1
 18624 ;; Hardware stack levels required when called:    2
 18625 ;; This function calls:
 18626 ;;		Nothing
 18627 ;; This function is called by:
 18628 ;;		_init
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           	psect	text89
 18633  005BF0                     __ptext89:
 18634                           	opt stack 0
 18635  005BF0                     _OpenTimer0:
 18636                           	opt stack 27
 18637                           
 18638                           ; BSR set to: 1
 18639                           ;incstack = 0
 18640                           ;incstack = 0
 18641                           ;OpenTimer0@config stored from wreg
 18642  005BF0  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18643                           
 18644                           ; BSR set to: 1
 18645  005BF4  500E               	movf	OpenTimer0@config,w,c
 18646  005BF6  0B7F               	andlw	127
 18647  005BF8  6ED5               	movwf	4053,c	;volatile
 18648                           
 18649                           ; BSR set to: 1
 18650  005BFA  6AD7               	clrf	4055,c	;volatile
 18651                           
 18652                           ; BSR set to: 1
 18653  005BFC  6AD6               	clrf	4054,c	;volatile
 18654                           
 18655                           ; BSR set to: 1
 18656  005BFE  94F2               	bcf	intcon,2,c	;volatile
 18657                           
 18658                           ; BSR set to: 1
 18659  005C00  AE0E               	btfss	OpenTimer0@config,7,c
 18660  005C02  D002               	goto	l1315
 18661                           
 18662                           ; BSR set to: 1
 18663  005C04  8AF2               	bsf	intcon,5,c	;volatile
 18664  005C06  D001               	goto	l1316
 18665  005C08                     l1315:
 18666                           
 18667                           ; BSR set to: 1
 18668  005C08  9AF2               	bcf	intcon,5,c	;volatile
 18669  005C0A                     l1316:
 18670                           
 18671                           ; BSR set to: 1
 18672  005C0A  8ED5               	bsf	4053,7,c	;volatile
 18673                           
 18674                           ; BSR set to: 1
 18675  005C0C  0012               	return	
 18676  005C0E                     __end_of_OpenTimer0:
 18677                           	opt stack 0
 18678                           tblptru	equ	0xFF8
 18679                           tblptrh	equ	0xFF7
 18680                           tblptrl	equ	0xFF6
 18681                           tablat	equ	0xFF5
 18682                           prodh	equ	0xFF4
 18683                           prodl	equ	0xFF3
 18684                           intcon	equ	0xFF2
 18685                           postinc0	equ	0xFEE
 18686                           wreg	equ	0xFE8
 18687                           indf1	equ	0xFE7
 18688                           postdec1	equ	0xFE5
 18689                           fsr1h	equ	0xFE2
 18690                           fsr1l	equ	0xFE1
 18691                           indf2	equ	0xFDF
 18692                           postinc2	equ	0xFDE
 18693                           postdec2	equ	0xFDD
 18694                           plusw2	equ	0xFDB
 18695                           fsr2h	equ	0xFDA
 18696                           fsr2l	equ	0xFD9
 18697                           status	equ	0xFD8
 18698                           
 18699 ;; *************** function _init_app_ram *****************
 18700 ;; Defined at:
 18701 ;;		line 985 in file "../main.c"
 18702 ;; Parameters:    Size  Location     Type
 18703 ;;		None
 18704 ;; Auto vars:     Size  Location     Type
 18705 ;;  i               1   32[COMRAM] unsigned char 
 18706 ;; Return value:  Size  Location     Type
 18707 ;;		None               void
 18708 ;; Registers used:
 18709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18710 ;; Tracked objects:
 18711 ;;		On entry : 0/1
 18712 ;;		On exit  : F/1
 18713 ;;		Unchanged: 0/0
 18714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18715 ;;      Params:         0       0       0       0       0       0       0
 18716 ;;      Locals:         1       0       0       0       0       0       0
 18717 ;;      Temps:          0       0       0       0       0       0       0
 18718 ;;      Totals:         1       0       0       0       0       0       0
 18719 ;;Total ram usage:        1 bytes
 18720 ;; Hardware stack levels used:    1
 18721 ;; Hardware stack levels required when called:    4
 18722 ;; This function calls:
 18723 ;;		_writeCoeffs2Ram
 18724 ;; This function is called by:
 18725 ;;		_init
 18726 ;;		_vscp_restoreDefaults
 18727 ;; This function uses a non-reentrant model
 18728 ;;
 18729                           
 18730                           	psect	text90
 18731  005788                     __ptext90:
 18732                           	opt stack 0
 18733  005788                     _init_app_ram:
 18734                           	opt stack 23
 18735                           
 18736                           ;main.c: 986: char i;
 18737                           ;main.c: 988: measurement_clock = 0;
 18738                           
 18739                           ; BSR set to: 1
 18740                           ;incstack = 0
 18741                           ;incstack = 0
 18742  005788  0101               	movlb	1	; () banked
 18743  00578A  6B12               	clrf	_measurement_clock& (0+255),b
 18744  00578C  6B13               	clrf	(_measurement_clock+1)& (0+255),b
 18745  00578E  6B14               	clrf	(_measurement_clock+2)& (0+255),b
 18746  005790  6B15               	clrf	(_measurement_clock+3)& (0+255),b
 18747                           
 18748                           ;main.c: 989: seconds = 0;
 18749  005792  0100               	movlb	0	; () banked
 18750  005794  6BB6               	clrf	_seconds& (0+255),b
 18751                           
 18752                           ;main.c: 992: for (i = 0; i < 6; i++) {
 18753  005796  6A21               	clrf	init_app_ram@i,c
 18754  005798                     l10510:
 18755                           
 18756                           ;main.c: 993: seconds_temp[i] = 0;
 18757  005798  0E0C               	movlw	low _seconds_temp
 18758  00579A  2421               	addwf	init_app_ram@i,w,c
 18759  00579C  6ED9               	movwf	fsr2l,c
 18760  00579E  6ADA               	clrf	fsr2h,c
 18761  0057A0  0E01               	movlw	high _seconds_temp
 18762  0057A2  22DA               	addwfc	fsr2h,f,c
 18763  0057A4  6ADF               	clrf	indf2,c
 18764                           
 18765                           ; BSR set to: 1
 18766                           ;main.c: 994: current_temp[i] = 0;
 18767  0057A6  5021               	movf	init_app_ram@i,w,c
 18768  0057A8  0D02               	mullw	2
 18769  0057AA  0E00               	movlw	low _current_temp
 18770  0057AC  24F3               	addwf	prodl,w,c
 18771  0057AE  6ED9               	movwf	fsr2l,c
 18772  0057B0  0E01               	movlw	high _current_temp
 18773  0057B2  20F4               	addwfc	prodh,w,c
 18774  0057B4  6EDA               	movwf	fsr2h,c
 18775  0057B6  6ADE               	clrf	postinc2,c
 18776  0057B8  6ADD               	clrf	postdec2,c
 18777                           
 18778                           ; BSR set to: 1
 18779  0057BA  2A21               	incf	init_app_ram@i,f,c
 18780                           
 18781                           ; BSR set to: 1
 18782  0057BC  0E05               	movlw	5
 18783  0057BE  6421               	cpfsgt	init_app_ram@i,c
 18784  0057C0  D7EB               	goto	l10510
 18785                           
 18786                           ; BSR set to: 1
 18787                           ;main.c: 995: }
 18788                           ;main.c: 998: adc_conversion_flags = 0;
 18789  0057C2  0100               	movlb	0	; () banked
 18790  0057C4  6BB3               	clrf	_adc_conversion_flags& (0+255),b
 18791                           
 18792                           ;main.c: 1001: adc_series_counter = 0;
 18793  0057C6  6A49               	clrf	_adc_series_counter,c
 18794                           
 18795                           ;main.c: 1004: low_alarm = 0;
 18796  0057C8  6BB5               	clrf	_low_alarm& (0+255),b
 18797                           
 18798                           ;main.c: 1007: high_alarm = 0;
 18799  0057CA  6BB4               	clrf	_high_alarm& (0+255),b
 18800                           
 18801                           ; BSR set to: 0
 18802                           ;main.c: 1010: writeCoeffs2Ram();
 18803  0057CC  EFE6  F027         	goto	_writeCoeffs2Ram	;wreg free
 18804  0057D0                     __end_of_init_app_ram:
 18805                           	opt stack 0
 18806                           tblptru	equ	0xFF8
 18807                           tblptrh	equ	0xFF7
 18808                           tblptrl	equ	0xFF6
 18809                           tablat	equ	0xFF5
 18810                           prodh	equ	0xFF4
 18811                           prodl	equ	0xFF3
 18812                           intcon	equ	0xFF2
 18813                           postinc0	equ	0xFEE
 18814                           wreg	equ	0xFE8
 18815                           indf1	equ	0xFE7
 18816                           postdec1	equ	0xFE5
 18817                           fsr1h	equ	0xFE2
 18818                           fsr1l	equ	0xFE1
 18819                           indf2	equ	0xFDF
 18820                           postinc2	equ	0xFDE
 18821                           postdec2	equ	0xFDD
 18822                           plusw2	equ	0xFDB
 18823                           fsr2h	equ	0xFDA
 18824                           fsr2l	equ	0xFD9
 18825                           status	equ	0xFD8
 18826                           
 18827 ;; *************** function _writeCoeffs2Ram *****************
 18828 ;; Defined at:
 18829 ;;		line 967 in file "../main.c"
 18830 ;; Parameters:    Size  Location     Type
 18831 ;;		None
 18832 ;; Auto vars:     Size  Location     Type
 18833 ;;  c               3   25[COMRAM] unsigned char [3]
 18834 ;;  j               2   30[COMRAM] int 
 18835 ;;  i               2   28[COMRAM] int 
 18836 ;; Return value:  Size  Location     Type
 18837 ;;		None               void
 18838 ;; Registers used:
 18839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18840 ;; Tracked objects:
 18841 ;;		On entry : 0/0
 18842 ;;		On exit  : F/1
 18843 ;;		Unchanged: 0/0
 18844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18845 ;;      Params:         0       0       0       0       0       0       0
 18846 ;;      Locals:         7       0       0       0       0       0       0
 18847 ;;      Temps:          2       0       0       0       0       0       0
 18848 ;;      Totals:         9       0       0       0       0       0       0
 18849 ;;Total ram usage:        9 bytes
 18850 ;; Hardware stack levels used:    1
 18851 ;; Hardware stack levels required when called:    3
 18852 ;; This function calls:
 18853 ;;		_readEEPROM
 18854 ;;		___wmul
 18855 ;; This function is called by:
 18856 ;;		_init_app_ram
 18857 ;;		_vscp_writeAppReg
 18858 ;; This function uses a non-reentrant model
 18859 ;;
 18860                           
 18861                           	psect	text91
 18862  004FCC                     __ptext91:
 18863                           	opt stack 0
 18864  004FCC                     _writeCoeffs2Ram:
 18865                           	opt stack 23
 18866                           
 18867                           ;main.c: 968: int i, j;
 18868                           ;main.c: 969: uint8_t c[3];
 18869                           ;main.c: 971: for (i = 0; i < 6; i++) {
 18870                           
 18871                           ; BSR set to: 1
 18872                           ;incstack = 0
 18873                           ;incstack = 0
 18874  004FCC  6A1D               	clrf	writeCoeffs2Ram@i,c
 18875  004FCE  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 18876  004FD0                     l10526:
 18877                           
 18878                           ;main.c: 972: for (j = 2; j > 0; j--) {
 18879  004FD0  6A20               	clrf	writeCoeffs2Ram@j+1,c
 18880  004FD2  0E02               	movlw	2
 18881  004FD4  6E1F               	movwf	writeCoeffs2Ram@j,c
 18882  004FD6                     l10532:
 18883                           
 18884                           ;main.c: 974: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 18885  004FD6  501F               	movf	writeCoeffs2Ram@j,w,c
 18886  004FD8  0802               	sublw	2
 18887  004FDA  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 18888  004FDC  5018               	movf	??_writeCoeffs2Ram,w,c
 18889  004FDE  0F1A               	addlw	low writeCoeffs2Ram@c
 18890  004FE0  6ED9               	movwf	fsr2l,c
 18891  004FE2  6ADA               	clrf	fsr2h,c
 18892  004FE4  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 18893  004FE8  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 18894  004FEC  6A15               	clrf	?___wmul+3,c
 18895  004FEE  0E03               	movlw	3
 18896  004FF0  6E14               	movwf	?___wmul+2,c
 18897  004FF2  EC82  F02C         	call	___wmul	;wreg free
 18898  004FF6  501F               	movf	writeCoeffs2Ram@j,w,c
 18899  004FF8  2612               	addwf	?___wmul,f,c
 18900  004FFA  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18901  004FFC  2213               	addwfc	?___wmul+1,f,c
 18902  004FFE  0EAA               	movlw	170
 18903  005000  2412               	addwf	?___wmul,w,c
 18904  005002  6E0E               	movwf	?_readEEPROM,c
 18905  005004  0E00               	movlw	0
 18906  005006  2013               	addwfc	?___wmul+1,w,c
 18907  005008  6E0F               	movwf	?_readEEPROM+1,c
 18908  00500A  EC8D  F02E         	call	_readEEPROM	;wreg free
 18909  00500E  6EDF               	movwf	indf2,c
 18910  005010  061F               	decf	writeCoeffs2Ram@j,f,c
 18911  005012  A0D8               	btfss	status,0,c
 18912  005014  0620               	decf	writeCoeffs2Ram@j+1,f,c
 18913  005016  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18914  005018  0A80               	xorlw	128
 18915  00501A  0F80               	addlw	-128
 18916  00501C  0E01               	movlw	1
 18917  00501E  B4D8               	btfsc	status,2,c
 18918  005020  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 18919  005022  E2D9               	bc	l10532
 18920                           
 18921                           ;main.c: 975: }
 18922                           ;main.c: 976: sh_coefficients[i] = *((double*) c);
 18923  005024  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 18924  005028  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 18925  00502C  90D8               	bcf	status,0,c
 18926  00502E  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18927  005030  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18928  005032  90D8               	bcf	status,0,c
 18929  005034  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18930  005036  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18931  005038  0101               	movlb	1	; () banked
 18932  00503A  0E1E               	movlw	low _sh_coefficients
 18933  00503C  2418               	addwf	??_writeCoeffs2Ram,w,c
 18934  00503E  6ED9               	movwf	fsr2l,c
 18935  005040  0E01               	movlw	high _sh_coefficients
 18936  005042  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 18937  005044  6EDA               	movwf	fsr2h,c
 18938  005046  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 18939  00504A  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 18940  00504E  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 18941  005052  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 18942                           
 18943                           ; BSR set to: 1
 18944  005056  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 18945  005058  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 18946                           
 18947                           ; BSR set to: 1
 18948  00505A  501E               	movf	writeCoeffs2Ram@i+1,w,c
 18949  00505C  0A80               	xorlw	128
 18950  00505E  0F80               	addlw	-128
 18951  005060  0E06               	movlw	6
 18952  005062  B4D8               	btfsc	status,2,c
 18953  005064  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 18954  005066  B0D8               	btfsc	status,0,c
 18955                           
 18956                           ; BSR set to: 1
 18957  005068  0012               	return	
 18958  00506A  D7B2               	goto	l10526
 18959  00506C                     __end_of_writeCoeffs2Ram:
 18960                           	opt stack 0
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           postinc0	equ	0xFEE
 18969                           wreg	equ	0xFE8
 18970                           indf1	equ	0xFE7
 18971                           postdec1	equ	0xFE5
 18972                           fsr1h	equ	0xFE2
 18973                           fsr1l	equ	0xFE1
 18974                           indf2	equ	0xFDF
 18975                           postinc2	equ	0xFDE
 18976                           postdec2	equ	0xFDD
 18977                           plusw2	equ	0xFDB
 18978                           fsr2h	equ	0xFDA
 18979                           fsr2l	equ	0xFD9
 18980                           status	equ	0xFD8
 18981                           
 18982 ;; *************** function ___wmul *****************
 18983 ;; Defined at:
 18984 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 18985 ;; Parameters:    Size  Location     Type
 18986 ;;  multiplier      2   17[COMRAM] unsigned int 
 18987 ;;  multiplicand    2   19[COMRAM] unsigned int 
 18988 ;; Auto vars:     Size  Location     Type
 18989 ;;  product         2   21[COMRAM] unsigned int 
 18990 ;; Return value:  Size  Location     Type
 18991 ;;                  2   17[COMRAM] unsigned int 
 18992 ;; Registers used:
 18993 ;;		wreg, status,2, status,0, prodl, prodh
 18994 ;; Tracked objects:
 18995 ;;		On entry : 0/1
 18996 ;;		On exit  : 0/0
 18997 ;;		Unchanged: 0/0
 18998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18999 ;;      Params:         4       0       0       0       0       0       0
 19000 ;;      Locals:         2       0       0       0       0       0       0
 19001 ;;      Temps:          0       0       0       0       0       0       0
 19002 ;;      Totals:         6       0       0       0       0       0       0
 19003 ;;Total ram usage:        6 bytes
 19004 ;; Hardware stack levels used:    1
 19005 ;; Hardware stack levels required when called:    2
 19006 ;; This function calls:
 19007 ;;		Nothing
 19008 ;; This function is called by:
 19009 ;;		_doWork
 19010 ;;		_writeCoeffs2Ram
 19011 ;; This function uses a non-reentrant model
 19012 ;;
 19013                           
 19014                           	psect	text92
 19015  005904                     __ptext92:
 19016                           	opt stack 0
 19017  005904                     ___wmul:
 19018                           	opt stack 27
 19019                           
 19020                           ; BSR set to: 1
 19021                           ;incstack = 0
 19022                           ;incstack = 0
 19023  005904  5012               	movf	___wmul@multiplier,w,c
 19024  005906  0214               	mulwf	___wmul@multiplicand,c
 19025  005908  CFF3 F016          	movff	prodl,___wmul@product
 19026  00590C  CFF4 F017          	movff	prodh,___wmul@product+1
 19027  005910  5012               	movf	___wmul@multiplier,w,c
 19028  005912  0215               	mulwf	___wmul@multiplicand+1,c
 19029  005914  CFF3 FFF4          	movff	prodl,prodh
 19030  005918  6AF3               	clrf	prodl,c
 19031  00591A  50F3               	movf	prodl,w,c
 19032  00591C  2616               	addwf	___wmul@product,f,c
 19033  00591E  50F4               	movf	prodh,w,c
 19034  005920  2217               	addwfc	___wmul@product+1,f,c
 19035  005922  5013               	movf	___wmul@multiplier+1,w,c
 19036  005924  0214               	mulwf	___wmul@multiplicand,c
 19037  005926  CFF3 FFF4          	movff	prodl,prodh
 19038  00592A  6AF3               	clrf	prodl,c
 19039  00592C  50F3               	movf	prodl,w,c
 19040  00592E  2616               	addwf	___wmul@product,f,c
 19041  005930  50F4               	movf	prodh,w,c
 19042  005932  2217               	addwfc	___wmul@product+1,f,c
 19043  005934  C016  F012         	movff	___wmul@product,?___wmul
 19044  005938  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19045  00593C  0012               	return	
 19046  00593E                     __end_of___wmul:
 19047                           	opt stack 0
 19048                           tblptru	equ	0xFF8
 19049                           tblptrh	equ	0xFF7
 19050                           tblptrl	equ	0xFF6
 19051                           tablat	equ	0xFF5
 19052                           prodh	equ	0xFF4
 19053                           prodl	equ	0xFF3
 19054                           intcon	equ	0xFF2
 19055                           postinc0	equ	0xFEE
 19056                           wreg	equ	0xFE8
 19057                           indf1	equ	0xFE7
 19058                           postdec1	equ	0xFE5
 19059                           fsr1h	equ	0xFE2
 19060                           fsr1l	equ	0xFE1
 19061                           indf2	equ	0xFDF
 19062                           postinc2	equ	0xFDE
 19063                           postdec2	equ	0xFDD
 19064                           plusw2	equ	0xFDB
 19065                           fsr2h	equ	0xFDA
 19066                           fsr2l	equ	0xFD9
 19067                           status	equ	0xFD8
 19068                           
 19069 ;; *************** function _ConvertADC *****************
 19070 ;; Defined at:
 19071 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;		None               void
 19078 ;; Registers used:
 19079 ;;		None
 19080 ;; Tracked objects:
 19081 ;;		On entry : 1/1
 19082 ;;		On exit  : 1/1
 19083 ;;		Unchanged: 1/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19085 ;;      Params:         0       0       0       0       0       0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0
 19088 ;;      Totals:         0       0       0       0       0       0       0
 19089 ;;Total ram usage:        0 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    2
 19092 ;; This function calls:
 19093 ;;		Nothing
 19094 ;; This function is called by:
 19095 ;;		_init
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           	psect	text93
 19100  005DAA                     __ptext93:
 19101                           	opt stack 0
 19102  005DAA                     _ConvertADC:
 19103                           	opt stack 27
 19104                           
 19105                           ;incstack = 0
 19106                           ;incstack = 0
 19107  005DAA  82C2               	bsf	4034,1,c	;volatile
 19108  005DAC  0012               	return	
 19109  005DAE                     __end_of_ConvertADC:
 19110                           	opt stack 0
 19111                           tblptru	equ	0xFF8
 19112                           tblptrh	equ	0xFF7
 19113                           tblptrl	equ	0xFF6
 19114                           tablat	equ	0xFF5
 19115                           prodh	equ	0xFF4
 19116                           prodl	equ	0xFF3
 19117                           intcon	equ	0xFF2
 19118                           postinc0	equ	0xFEE
 19119                           wreg	equ	0xFE8
 19120                           indf1	equ	0xFE7
 19121                           postdec1	equ	0xFE5
 19122                           fsr1h	equ	0xFE2
 19123                           fsr1l	equ	0xFE1
 19124                           indf2	equ	0xFDF
 19125                           postinc2	equ	0xFDE
 19126                           postdec2	equ	0xFDD
 19127                           plusw2	equ	0xFDB
 19128                           fsr2h	equ	0xFDA
 19129                           fsr2l	equ	0xFD9
 19130                           status	equ	0xFD8
 19131                           
 19132 ;; *************** function _WriteTimer0 *****************
 19133 ;; Defined at:
 19134 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19135 ;; Parameters:    Size  Location     Type
 19136 ;;  timer0          2   13[COMRAM] unsigned int 
 19137 ;; Auto vars:     Size  Location     Type
 19138 ;;  timer           2   15[COMRAM] struct Timers
 19139 ;; Return value:  Size  Location     Type
 19140 ;;		None               void
 19141 ;; Registers used:
 19142 ;;		None
 19143 ;; Tracked objects:
 19144 ;;		On entry : F/1
 19145 ;;		On exit  : F/1
 19146 ;;		Unchanged: F/0
 19147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19148 ;;      Params:         2       0       0       0       0       0       0
 19149 ;;      Locals:         2       0       0       0       0       0       0
 19150 ;;      Temps:          0       0       0       0       0       0       0
 19151 ;;      Totals:         4       0       0       0       0       0       0
 19152 ;;Total ram usage:        4 bytes
 19153 ;; Hardware stack levels used:    1
 19154 ;; Hardware stack levels required when called:    2
 19155 ;; This function calls:
 19156 ;;		Nothing
 19157 ;; This function is called by:
 19158 ;;		_init
 19159 ;; This function uses a non-reentrant model
 19160 ;;
 19161                           
 19162                           	psect	text94
 19163  005D3E                     __ptext94:
 19164                           	opt stack 0
 19165  005D3E                     _WriteTimer0:
 19166                           	opt stack 27
 19167                           
 19168                           ; BSR set to: 1
 19169                           
 19170                           ;incstack = 0
 19171                           ;incstack = 0
 19172  005D3E  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19173  005D42  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19174  005D46  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19175  005D4A  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19176                           
 19177                           ; BSR set to: 1
 19178  005D4E  0012               	return	
 19179  005D50                     __end_of_WriteTimer0:
 19180                           	opt stack 0
 19181                           tblptru	equ	0xFF8
 19182                           tblptrh	equ	0xFF7
 19183                           tblptrl	equ	0xFF6
 19184                           tablat	equ	0xFF5
 19185                           prodh	equ	0xFF4
 19186                           prodl	equ	0xFF3
 19187                           intcon	equ	0xFF2
 19188                           postinc0	equ	0xFEE
 19189                           wreg	equ	0xFE8
 19190                           indf1	equ	0xFE7
 19191                           postdec1	equ	0xFE5
 19192                           fsr1h	equ	0xFE2
 19193                           fsr1l	equ	0xFE1
 19194                           indf2	equ	0xFDF
 19195                           postinc2	equ	0xFDE
 19196                           postdec2	equ	0xFDD
 19197                           plusw2	equ	0xFDB
 19198                           fsr2h	equ	0xFDA
 19199                           fsr2l	equ	0xFD9
 19200                           status	equ	0xFD8
 19201                           
 19202 ;; *************** function ___awtofl *****************
 19203 ;; Defined at:
 19204 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19205 ;; Parameters:    Size  Location     Type
 19206 ;;  c               2   23[COMRAM] int 
 19207 ;; Auto vars:     Size  Location     Type
 19208 ;;  f1              4    0        int 
 19209 ;;  sign            1   29[COMRAM] unsigned char 
 19210 ;; Return value:  Size  Location     Type
 19211 ;;                  4   23[COMRAM] unsigned char 
 19212 ;; Registers used:
 19213 ;;		wreg, status,2, status,0, cstack
 19214 ;; Tracked objects:
 19215 ;;		On entry : F/0
 19216 ;;		On exit  : 0/0
 19217 ;;		Unchanged: 0/0
 19218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19219 ;;      Params:         4       0       0       0       0       0       0
 19220 ;;      Locals:         3       0       0       0       0       0       0
 19221 ;;      Temps:          0       0       0       0       0       0       0
 19222 ;;      Totals:         7       0       0       0       0       0       0
 19223 ;;Total ram usage:        7 bytes
 19224 ;; Hardware stack levels used:    1
 19225 ;; Hardware stack levels required when called:    3
 19226 ;; This function calls:
 19227 ;;		___flpack
 19228 ;; This function is called by:
 19229 ;;		_setEventData
 19230 ;;		_exp
 19231 ;;		_log
 19232 ;; This function uses a non-reentrant model
 19233 ;;
 19234                           
 19235                           	psect	text95
 19236  00593E                     __ptext95:
 19237                           	opt stack 0
 19238  00593E                     ___awtofl:
 19239                           	opt stack 25
 19240                           
 19241                           ; BSR set to: 0
 19242                           
 19243                           ; BSR set to: 1
 19244                           ;incstack = 0
 19245                           ;incstack = 0
 19246  00593E  6A1E               	clrf	___awtofl@sign,c
 19247  005940  AE19               	btfss	___awtofl@c+1,7,c
 19248  005942  D005               	goto	l11680
 19249                           
 19250                           ; BSR set to: 0
 19251  005944  6C18               	negf	___awtofl@c,c
 19252  005946  1E19               	comf	___awtofl@c+1,f,c
 19253  005948  B0D8               	btfsc	status,0,c
 19254  00594A  2A19               	incf	___awtofl@c+1,f,c
 19255  00594C  2A1E               	incf	___awtofl@sign,f,c
 19256  00594E                     l11680:
 19257                           
 19258                           ; BSR set to: 0
 19259  00594E  C018  F00E         	movff	___awtofl@c,?___flpack
 19260  005952  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19261  005956  6A10               	clrf	?___flpack+2,c
 19262  005958  6A11               	clrf	?___flpack+3,c
 19263  00595A  0E96               	movlw	150
 19264  00595C  6E12               	movwf	?___flpack+4,c
 19265  00595E  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19266  005962  ECD1  F025         	call	___flpack	;wreg free
 19267  005966  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19268  00596A  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19269  00596E  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19270  005972  C00E  F018         	movff	?___flpack,?___awtofl
 19271  005976  0012               	return	
 19272  005978                     __end_of___awtofl:
 19273                           	opt stack 0
 19274                           tblptru	equ	0xFF8
 19275                           tblptrh	equ	0xFF7
 19276                           tblptrl	equ	0xFF6
 19277                           tablat	equ	0xFF5
 19278                           prodh	equ	0xFF4
 19279                           prodl	equ	0xFF3
 19280                           intcon	equ	0xFF2
 19281                           postinc0	equ	0xFEE
 19282                           wreg	equ	0xFE8
 19283                           indf1	equ	0xFE7
 19284                           postdec1	equ	0xFE5
 19285                           fsr1h	equ	0xFE2
 19286                           fsr1l	equ	0xFE1
 19287                           indf2	equ	0xFDF
 19288                           postinc2	equ	0xFDE
 19289                           postdec2	equ	0xFDD
 19290                           plusw2	equ	0xFDB
 19291                           fsr2h	equ	0xFDA
 19292                           fsr2l	equ	0xFD9
 19293                           status	equ	0xFD8
 19294                           
 19295 ;; *************** function ___flmul *****************
 19296 ;; Defined at:
 19297 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19298 ;; Parameters:    Size  Location     Type
 19299 ;;  f1              4    0[BANK0 ] unsigned char 
 19300 ;;  f2              4    4[BANK0 ] unsigned char 
 19301 ;; Auto vars:     Size  Location     Type
 19302 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19303 ;;  sign            1   21[BANK0 ] unsigned char 
 19304 ;;  cntr            1   20[BANK0 ] unsigned char 
 19305 ;;  exp             1   15[BANK0 ] unsigned char 
 19306 ;; Return value:  Size  Location     Type
 19307 ;;                  4    0[BANK0 ] unsigned char 
 19308 ;; Registers used:
 19309 ;;		wreg, status,2, status,0, cstack
 19310 ;; Tracked objects:
 19311 ;;		On entry : 0/0
 19312 ;;		On exit  : 0/0
 19313 ;;		Unchanged: 0/0
 19314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19315 ;;      Params:         0       8       0       0       0       0       0
 19316 ;;      Locals:         0      14       0       0       0       0       0
 19317 ;;      Temps:          0       0       0       0       0       0       0
 19318 ;;      Totals:         0      22       0       0       0       0       0
 19319 ;;Total ram usage:       22 bytes
 19320 ;; Hardware stack levels used:    1
 19321 ;; Hardware stack levels required when called:    3
 19322 ;; This function calls:
 19323 ;;		___flpack
 19324 ;; This function is called by:
 19325 ;;		_doWork
 19326 ;;		_Celsius2Fahrenheit
 19327 ;;		___asflmul
 19328 ;;		_log
 19329 ;;		_eval_poly
 19330 ;; This function uses a non-reentrant model
 19331 ;;
 19332                           
 19333                           	psect	text96
 19334  004948                     __ptext96:
 19335                           	opt stack 0
 19336  004948                     ___flmul:
 19337                           	opt stack 26
 19338                           
 19339                           ;incstack = 0
 19340                           ;incstack = 0
 19341  004948  0100               	movlb	0	; () banked
 19342  00494A  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19343  00494C  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19344  00494E  6F6F               	movwf	___flmul@exp& (0+255),b
 19345  004950  676F               	tstfsz	___flmul@exp& (0+255),b
 19346  004952  D001               	goto	l11624
 19347  004954  D006               	goto	u10070
 19348  004956                     l11624:
 19349                           
 19350                           ; BSR set to: 0
 19351  004956  0100               	movlb	0	; () banked
 19352  004958  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19353  00495A  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19354  00495C  6F75               	movwf	___flmul@sign& (0+255),b
 19355  00495E  6775               	tstfsz	___flmul@sign& (0+255),b
 19356  004960  D005               	goto	l11628
 19357  004962                     u10070:
 19358                           
 19359                           ; BSR set to: 0
 19360  004962  6B60               	clrf	?___flmul& (0+255),b
 19361  004964  6B61               	clrf	(?___flmul+1)& (0+255),b
 19362  004966  6B62               	clrf	(?___flmul+2)& (0+255),b
 19363  004968  6B63               	clrf	(?___flmul+3)& (0+255),b
 19364  00496A  D058               	goto	l1620
 19365  00496C                     l11628:
 19366                           
 19367                           ; BSR set to: 0
 19368  00496C  5175               	movf	___flmul@sign& (0+255),w,b
 19369  00496E  0F7B               	addlw	123
 19370  004970  276F               	addwf	___flmul@exp& (0+255),f,b
 19371                           
 19372                           ; BSR set to: 0
 19373  004972  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19374  004976  0100               	movlb	0	; () banked
 19375  004978  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19376  00497A  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19377  00497C  0E80               	movlw	128
 19378  00497E  1775               	andwf	___flmul@sign& (0+255),f,b
 19379                           
 19380                           ; BSR set to: 0
 19381  004980  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19382                           
 19383                           ; BSR set to: 0
 19384  004982  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19385  004984  0E00               	movlw	0
 19386  004986  1767               	andwf	(___flmul@f2+3)& (0+255),f,b
 19387                           
 19388                           ; BSR set to: 0
 19389  004988  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19390  00498A  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19391  00498C  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19392  00498E  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19393                           
 19394                           ; BSR set to: 0
 19395  004990  0E07               	movlw	7
 19396  004992  6F74               	movwf	___flmul@cntr& (0+255),b
 19397  004994                     l11640:
 19398                           
 19399                           ; BSR set to: 0
 19400  004994  A160               	btfss	___flmul@f1& (0+255),0,b
 19401  004996  D008               	goto	l11644
 19402                           
 19403                           ; BSR set to: 0
 19404  004998  5164               	movf	___flmul@f2& (0+255),w,b
 19405  00499A  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19406  00499C  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19407  00499E  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19408  0049A0  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19409  0049A2  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19410  0049A4  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19411  0049A6  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19412  0049A8                     l11644:
 19413                           
 19414                           ; BSR set to: 0
 19415  0049A8  90D8               	bcf	status,0,c
 19416  0049AA  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19417  0049AC  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19418  0049AE  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19419  0049B0  3360               	rrcf	___flmul@f1& (0+255),f,b
 19420                           
 19421                           ; BSR set to: 0
 19422  0049B2  90D8               	bcf	status,0,c
 19423  0049B4  3764               	rlcf	___flmul@f2& (0+255),f,b
 19424  0049B6  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19425  0049B8  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19426  0049BA  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19427                           
 19428                           ; BSR set to: 0
 19429  0049BC  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19430  0049BE  D7EA               	goto	l11640
 19431                           
 19432                           ; BSR set to: 0
 19433  0049C0  0E11               	movlw	17
 19434  0049C2  6F74               	movwf	___flmul@cntr& (0+255),b
 19435  0049C4                     l11652:
 19436                           
 19437                           ; BSR set to: 0
 19438  0049C4  A160               	btfss	___flmul@f1& (0+255),0,b
 19439  0049C6  D008               	goto	l11656
 19440                           
 19441                           ; BSR set to: 0
 19442  0049C8  5164               	movf	___flmul@f2& (0+255),w,b
 19443  0049CA  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19444  0049CC  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19445  0049CE  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19446  0049D0  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19447  0049D2  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19448  0049D4  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19449  0049D6  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19450  0049D8                     l11656:
 19451                           
 19452                           ; BSR set to: 0
 19453  0049D8  90D8               	bcf	status,0,c
 19454  0049DA  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19455  0049DC  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19456  0049DE  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19457  0049E0  3360               	rrcf	___flmul@f1& (0+255),f,b
 19458                           
 19459                           ; BSR set to: 0
 19460  0049E2  90D8               	bcf	status,0,c
 19461  0049E4  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19462  0049E6  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19463  0049E8  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19464  0049EA  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19465                           
 19466                           ; BSR set to: 0
 19467  0049EC  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19468  0049EE  D7EA               	goto	l11652
 19469                           
 19470                           ; BSR set to: 0
 19471  0049F0  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19472  0049F4  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19473  0049F8  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19474  0049FC  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19475  004A00  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19476  004A04  C075  F013         	movff	___flmul@sign,?___flpack+5
 19477  004A08  ECD1  F025         	call	___flpack	;wreg free
 19478  004A0C  C011  F063         	movff	?___flpack+3,?___flmul+3
 19479  004A10  C010  F062         	movff	?___flpack+2,?___flmul+2
 19480  004A14  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19481  004A18  C00E  F060         	movff	?___flpack,?___flmul
 19482  004A1C                     l1620:
 19483  004A1C  0012               	return	
 19484  004A1E                     __end_of___flmul:
 19485                           	opt stack 0
 19486                           tblptru	equ	0xFF8
 19487                           tblptrh	equ	0xFF7
 19488                           tblptrl	equ	0xFF6
 19489                           tablat	equ	0xFF5
 19490                           prodh	equ	0xFF4
 19491                           prodl	equ	0xFF3
 19492                           intcon	equ	0xFF2
 19493                           postinc0	equ	0xFEE
 19494                           wreg	equ	0xFE8
 19495                           indf1	equ	0xFE7
 19496                           postdec1	equ	0xFE5
 19497                           fsr1h	equ	0xFE2
 19498                           fsr1l	equ	0xFE1
 19499                           indf2	equ	0xFDF
 19500                           postinc2	equ	0xFDE
 19501                           postdec2	equ	0xFDD
 19502                           plusw2	equ	0xFDB
 19503                           fsr2h	equ	0xFDA
 19504                           fsr2l	equ	0xFD9
 19505                           status	equ	0xFD8
 19506                           
 19507 ;; *************** function ___flpack *****************
 19508 ;; Defined at:
 19509 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19510 ;; Parameters:    Size  Location     Type
 19511 ;;  arg             4   13[COMRAM] unsigned long 
 19512 ;;  exp             1   17[COMRAM] unsigned char 
 19513 ;;  sign            1   18[COMRAM] unsigned char 
 19514 ;; Auto vars:     Size  Location     Type
 19515 ;;		None
 19516 ;; Return value:  Size  Location     Type
 19517 ;;                  4   13[COMRAM] unsigned char 
 19518 ;; Registers used:
 19519 ;;		wreg, status,2, status,0
 19520 ;; Tracked objects:
 19521 ;;		On entry : 0/0
 19522 ;;		On exit  : 0/0
 19523 ;;		Unchanged: 0/0
 19524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19525 ;;      Params:         6       0       0       0       0       0       0
 19526 ;;      Locals:         0       0       0       0       0       0       0
 19527 ;;      Temps:          4       0       0       0       0       0       0
 19528 ;;      Totals:        10       0       0       0       0       0       0
 19529 ;;Total ram usage:       10 bytes
 19530 ;; Hardware stack levels used:    1
 19531 ;; Hardware stack levels required when called:    2
 19532 ;; This function calls:
 19533 ;;		Nothing
 19534 ;; This function is called by:
 19535 ;;		___altofl
 19536 ;;		___awtofl
 19537 ;;		___fladd
 19538 ;;		___fldiv
 19539 ;;		___flmul
 19540 ;;		___lwtofl
 19541 ;; This function uses a non-reentrant model
 19542 ;;
 19543                           
 19544                           	psect	text97
 19545  004BA2                     __ptext97:
 19546                           	opt stack 0
 19547  004BA2                     ___flpack:
 19548                           	opt stack 26
 19549                           
 19550                           ;incstack = 0
 19551                           ;incstack = 0
 19552  004BA2  5012               	movf	___flpack@exp,w,c
 19553  004BA4  E005               	bz	l1535
 19554  004BA6  5011               	movf	___flpack@arg+3,w,c
 19555  004BA8  100E               	iorwf	___flpack@arg,w,c
 19556  004BAA  100F               	iorwf	___flpack@arg+1,w,c
 19557  004BAC  1010               	iorwf	___flpack@arg+2,w,c
 19558  004BAE  E10B               	bnz	l11430
 19559  004BB0                     l1535:
 19560  004BB0  6A0E               	clrf	?___flpack,c
 19561  004BB2  6A0F               	clrf	?___flpack+1,c
 19562  004BB4  6A10               	clrf	?___flpack+2,c
 19563  004BB6  6A11               	clrf	?___flpack+3,c
 19564  004BB8  D053               	goto	l1536
 19565  004BBA                     l11428:
 19566  004BBA  2A12               	incf	___flpack@exp,f,c
 19567  004BBC  90D8               	bcf	status,0,c
 19568  004BBE  3211               	rrcf	___flpack@arg+3,f,c
 19569  004BC0  3210               	rrcf	___flpack@arg+2,f,c
 19570  004BC2  320F               	rrcf	___flpack@arg+1,f,c
 19571  004BC4  320E               	rrcf	___flpack@arg,f,c
 19572  004BC6                     l11430:
 19573  004BC6  6A14               	clrf	??___flpack& (0+255),c
 19574  004BC8  6A15               	clrf	(??___flpack+1)& (0+255),c
 19575  004BCA  6A16               	clrf	(??___flpack+2)& (0+255),c
 19576  004BCC  0EFE               	movlw	254
 19577  004BCE  1411               	andwf	___flpack@arg+3,w,c
 19578  004BD0  6E17               	movwf	(??___flpack+3)& (0+255),c
 19579  004BD2  5017               	movf	??___flpack+3,w,c
 19580  004BD4  1014               	iorwf	??___flpack,w,c
 19581  004BD6  1015               	iorwf	??___flpack+1,w,c
 19582  004BD8  1016               	iorwf	??___flpack+2,w,c
 19583  004BDA  E00C               	bz	l1540
 19584  004BDC  D7EE               	goto	l11428
 19585  004BDE                     l11432:
 19586  004BDE  2A12               	incf	___flpack@exp,f,c
 19587  004BE0  2A0E               	incf	___flpack@arg,f,c
 19588  004BE2  0E00               	movlw	0
 19589  004BE4  220F               	addwfc	___flpack@arg+1,f,c
 19590  004BE6  2210               	addwfc	___flpack@arg+2,f,c
 19591  004BE8  2211               	addwfc	___flpack@arg+3,f,c
 19592  004BEA  90D8               	bcf	status,0,c
 19593  004BEC  3211               	rrcf	___flpack@arg+3,f,c
 19594  004BEE  3210               	rrcf	___flpack@arg+2,f,c
 19595  004BF0  320F               	rrcf	___flpack@arg+1,f,c
 19596  004BF2  320E               	rrcf	___flpack@arg,f,c
 19597  004BF4                     l1540:
 19598  004BF4  6A14               	clrf	??___flpack& (0+255),c
 19599  004BF6  6A15               	clrf	(??___flpack+1)& (0+255),c
 19600  004BF8  6A16               	clrf	(??___flpack+2)& (0+255),c
 19601  004BFA  5011               	movf	___flpack@arg+3,w,c
 19602  004BFC  6E17               	movwf	(??___flpack+3)& (0+255),c
 19603  004BFE  5017               	movf	??___flpack+3,w,c
 19604  004C00  1014               	iorwf	??___flpack,w,c
 19605  004C02  1015               	iorwf	??___flpack+1,w,c
 19606  004C04  1016               	iorwf	??___flpack+2,w,c
 19607  004C06  E007               	bz	l11440
 19608  004C08  D7EA               	goto	l11432
 19609  004C0A                     l11438:
 19610  004C0A  0612               	decf	___flpack@exp,f,c
 19611  004C0C  90D8               	bcf	status,0,c
 19612  004C0E  360E               	rlcf	___flpack@arg,f,c
 19613  004C10  360F               	rlcf	___flpack@arg+1,f,c
 19614  004C12  3610               	rlcf	___flpack@arg+2,f,c
 19615  004C14  3611               	rlcf	___flpack@arg+3,f,c
 19616  004C16                     l11440:
 19617  004C16  AE10               	btfss	___flpack@arg+2,7,c
 19618  004C18  D7F8               	goto	l11438
 19619  004C1A  B012               	btfsc	___flpack@exp,0,c
 19620  004C1C  D002               	goto	l1546
 19621  004C1E  0E7F               	movlw	127
 19622  004C20  1610               	andwf	___flpack@arg+2,f,c
 19623  004C22                     l1546:
 19624  004C22  90D8               	bcf	status,0,c
 19625  004C24  3212               	rrcf	___flpack@exp,f,c
 19626  004C26  C012  F014         	movff	___flpack@exp,??___flpack
 19627  004C2A  6A15               	clrf	(??___flpack+1)& (0+255),c
 19628  004C2C  6A16               	clrf	(??___flpack+2)& (0+255),c
 19629  004C2E  6A17               	clrf	(??___flpack+3)& (0+255),c
 19630  004C30  C014  F017         	movff	??___flpack,??___flpack+3
 19631  004C34  6A16               	clrf	??___flpack+2,c
 19632  004C36  6A15               	clrf	??___flpack+1,c
 19633  004C38  6A14               	clrf	??___flpack,c
 19634  004C3A  5014               	movf	??___flpack,w,c
 19635  004C3C  120E               	iorwf	___flpack@arg,f,c
 19636  004C3E  5015               	movf	??___flpack+1,w,c
 19637  004C40  120F               	iorwf	___flpack@arg+1,f,c
 19638  004C42  5016               	movf	??___flpack+2,w,c
 19639  004C44  1210               	iorwf	___flpack@arg+2,f,c
 19640  004C46  5017               	movf	??___flpack+3,w,c
 19641  004C48  1211               	iorwf	___flpack@arg+3,f,c
 19642  004C4A  5013               	movf	___flpack@sign,w,c
 19643  004C4C  A4D8               	btfss	status,2,c
 19644  004C4E  8E11               	bsf	___flpack@arg+3,7,c
 19645  004C50  C00E  F00E         	movff	___flpack@arg,?___flpack
 19646  004C54  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19647  004C58  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19648  004C5C  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19649  004C60                     l1536:
 19650  004C60  0012               	return	
 19651  004C62                     __end_of___flpack:
 19652                           	opt stack 0
 19653                           tblptru	equ	0xFF8
 19654                           tblptrh	equ	0xFF7
 19655                           tblptrl	equ	0xFF6
 19656                           tablat	equ	0xFF5
 19657                           prodh	equ	0xFF4
 19658                           prodl	equ	0xFF3
 19659                           intcon	equ	0xFF2
 19660                           postinc0	equ	0xFEE
 19661                           wreg	equ	0xFE8
 19662                           indf1	equ	0xFE7
 19663                           postdec1	equ	0xFE5
 19664                           fsr1h	equ	0xFE2
 19665                           fsr1l	equ	0xFE1
 19666                           indf2	equ	0xFDF
 19667                           postinc2	equ	0xFDE
 19668                           postdec2	equ	0xFDD
 19669                           plusw2	equ	0xFDB
 19670                           fsr2h	equ	0xFDA
 19671                           fsr2l	equ	0xFD9
 19672                           status	equ	0xFD8
 19673                           
 19674 ;; *************** function _vscp_readAppReg *****************
 19675 ;; Defined at:
 19676 ;;		line 1278 in file "../main.c"
 19677 ;; Parameters:    Size  Location     Type
 19678 ;;  reg             1    wreg     unsigned char 
 19679 ;; Auto vars:     Size  Location     Type
 19680 ;;  reg             1   18[COMRAM] unsigned char 
 19681 ;;  pos             1   17[COMRAM] unsigned char 
 19682 ;;  rv              1   19[COMRAM] unsigned char 
 19683 ;; Return value:  Size  Location     Type
 19684 ;;                  1    wreg      unsigned char 
 19685 ;; Registers used:
 19686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19687 ;; Tracked objects:
 19688 ;;		On entry : F/0
 19689 ;;		On exit  : 0/0
 19690 ;;		Unchanged: 0/0
 19691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19692 ;;      Params:         0       0       0       0       0       0       0
 19693 ;;      Locals:         3       0       0       0       0       0       0
 19694 ;;      Temps:          0       0       0       0       0       0       0
 19695 ;;      Totals:         3       0       0       0       0       0       0
 19696 ;;Total ram usage:        3 bytes
 19697 ;; Hardware stack levels used:    1
 19698 ;; Hardware stack levels required when called:    3
 19699 ;; This function calls:
 19700 ;;		_readEEPROM
 19701 ;; This function is called by:
 19702 ;;		_vscp_readRegister
 19703 ;;		_vscp_handleProtocolEvent
 19704 ;; This function uses a non-reentrant model
 19705 ;;
 19706                           
 19707                           	psect	text98
 19708  002AB6                     __ptext98:
 19709                           	opt stack 0
 19710  002AB6                     _vscp_readAppReg:
 19711                           	opt stack 25
 19712                           
 19713                           ;incstack = 0
 19714                           ;incstack = 0
 19715                           ;vscp_readAppReg@reg stored from wreg
 19716  002AB6  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19717                           
 19718                           ; BSR set to: 0
 19719                           ;main.c: 1279: uint8_t rv;
 19720                           ;main.c: 1284: if (0 == vscp_page_select) {
 19721  002ABA  5047               	movf	_vscp_page_select+1,w,c
 19722  002ABC  1046               	iorwf	_vscp_page_select,w,c
 19723  002ABE  E101 D219          	bz	l10750
 19724  002AC2  D35D               	goto	l10752
 19725  002AC4                     l10548:
 19726                           
 19727                           ; BSR set to: 0
 19728                           ;main.c: 1290: rv = readEEPROM(0x41);
 19729  002AC4  6A0F               	clrf	?_readEEPROM+1,c
 19730  002AC6  0E41               	movlw	65
 19731  002AC8  6E0E               	movwf	?_readEEPROM,c
 19732  002ACA  EC8D  F02E         	call	_readEEPROM	;wreg free
 19733  002ACE  D384               	goto	L41
 19734  002AD0                     l10550:
 19735                           
 19736                           ; BSR set to: 0
 19737                           ;main.c: 1295: rv = readEEPROM(0x42);
 19738  002AD0  6A0F               	clrf	?_readEEPROM+1,c
 19739  002AD2  0E42               	movlw	66
 19740  002AD4  6E0E               	movwf	?_readEEPROM,c
 19741  002AD6  EC8D  F02E         	call	_readEEPROM	;wreg free
 19742  002ADA  D37E               	goto	L41
 19743  002ADC                     l10552:
 19744                           
 19745                           ; BSR set to: 0
 19746                           ;main.c: 1300: rv = readEEPROM(0x43);
 19747  002ADC  6A0F               	clrf	?_readEEPROM+1,c
 19748  002ADE  0E43               	movlw	67
 19749  002AE0  6E0E               	movwf	?_readEEPROM,c
 19750  002AE2  EC8D  F02E         	call	_readEEPROM	;wreg free
 19751  002AE6  D378               	goto	L41
 19752  002AE8                     l10554:
 19753                           
 19754                           ; BSR set to: 0
 19755                           ;main.c: 1305: rv = readEEPROM(0x44);
 19756  002AE8  6A0F               	clrf	?_readEEPROM+1,c
 19757  002AEA  0E44               	movlw	68
 19758  002AEC  6E0E               	movwf	?_readEEPROM,c
 19759  002AEE  EC8D  F02E         	call	_readEEPROM	;wreg free
 19760  002AF2  D372               	goto	L41
 19761  002AF4                     l10556:
 19762                           
 19763                           ; BSR set to: 0
 19764                           ;main.c: 1310: rv = readEEPROM(0x45);
 19765  002AF4  6A0F               	clrf	?_readEEPROM+1,c
 19766  002AF6  0E45               	movlw	69
 19767  002AF8  6E0E               	movwf	?_readEEPROM,c
 19768  002AFA  EC8D  F02E         	call	_readEEPROM	;wreg free
 19769  002AFE  D36C               	goto	L41
 19770  002B00                     l10558:
 19771                           
 19772                           ; BSR set to: 0
 19773                           ;main.c: 1315: rv = readEEPROM(0x46);
 19774  002B00  6A0F               	clrf	?_readEEPROM+1,c
 19775  002B02  0E46               	movlw	70
 19776  002B04  6E0E               	movwf	?_readEEPROM,c
 19777  002B06  EC8D  F02E         	call	_readEEPROM	;wreg free
 19778  002B0A  D366               	goto	L41
 19779  002B0C                     l10560:
 19780                           
 19781                           ; BSR set to: 0
 19782                           ;main.c: 1320: rv = readEEPROM(0x47);
 19783  002B0C  6A0F               	clrf	?_readEEPROM+1,c
 19784  002B0E  0E47               	movlw	71
 19785  002B10  6E0E               	movwf	?_readEEPROM,c
 19786  002B12  EC8D  F02E         	call	_readEEPROM	;wreg free
 19787  002B16  D360               	goto	L41
 19788  002B18                     l10562:
 19789                           
 19790                           ; BSR set to: 0
 19791                           ;main.c: 1325: rv = readEEPROM(0x48);
 19792  002B18  6A0F               	clrf	?_readEEPROM+1,c
 19793  002B1A  0E48               	movlw	72
 19794  002B1C  6E0E               	movwf	?_readEEPROM,c
 19795  002B1E  EC8D  F02E         	call	_readEEPROM	;wreg free
 19796  002B22  D35A               	goto	L41
 19797  002B24                     l10564:
 19798                           
 19799                           ; BSR set to: 0
 19800                           ;main.c: 1330: rv = ((current_temp[0] & 0xff00) >> 8);
 19801  002B24  0101               	movlb	1	; () banked
 19802  002B26  5101               	movf	(_current_temp+1)& (0+255),w,b
 19803  002B28  D357               	goto	L41
 19804  002B2A                     l315:
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;main.c: 1335: rv = (current_temp[0] & 0x00ff);
 19808  002B2A  C100  F014         	movff	_current_temp,vscp_readAppReg@rv
 19809                           
 19810                           ;main.c: 1336: break;
 19811  002B2E  D355               	goto	l10774
 19812  002B30                     l10566:
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;main.c: 1340: rv = ((current_temp[1] & 0xff00) >> 8);
 19816  002B30  0101               	movlb	1	; () banked
 19817  002B32  5103               	movf	(_current_temp+3)& (0+255),w,b
 19818  002B34  D351               	goto	L41
 19819  002B36                     l317:
 19820                           
 19821                           ; BSR set to: 0
 19822                           ;main.c: 1345: rv = (current_temp[1] & 0x00ff);
 19823  002B36  C102  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19824                           
 19825                           ;main.c: 1346: break;
 19826  002B3A  D34F               	goto	l10774
 19827  002B3C                     l10568:
 19828                           
 19829                           ; BSR set to: 0
 19830                           ;main.c: 1350: rv = ((current_temp[2] & 0xff00) >> 8);
 19831  002B3C  0101               	movlb	1	; () banked
 19832  002B3E  5105               	movf	(_current_temp+5)& (0+255),w,b
 19833  002B40  D34B               	goto	L41
 19834  002B42                     l319:
 19835                           
 19836                           ; BSR set to: 0
 19837                           ;main.c: 1355: rv = (current_temp[2] & 0x00ff);
 19838  002B42  C104  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19839                           
 19840                           ;main.c: 1356: break;
 19841  002B46  D349               	goto	l10774
 19842  002B48                     l10570:
 19843                           
 19844                           ; BSR set to: 0
 19845                           ;main.c: 1360: rv = ((current_temp[3] & 0xff00) >> 8);
 19846  002B48  0101               	movlb	1	; () banked
 19847  002B4A  5107               	movf	(_current_temp+7)& (0+255),w,b
 19848  002B4C  D345               	goto	L41
 19849  002B4E                     l321:
 19850                           
 19851                           ; BSR set to: 0
 19852                           ;main.c: 1365: rv = (current_temp[3] & 0x00ff);
 19853  002B4E  C106  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 19854                           
 19855                           ;main.c: 1366: break;
 19856  002B52  D343               	goto	l10774
 19857  002B54                     l10572:
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;main.c: 1370: rv = ((current_temp[4] & 0xff00) >> 8);
 19861  002B54  0101               	movlb	1	; () banked
 19862  002B56  5109               	movf	(_current_temp+9)& (0+255),w,b
 19863  002B58  D33F               	goto	L41
 19864  002B5A                     l323:
 19865                           
 19866                           ; BSR set to: 0
 19867                           ;main.c: 1375: rv = (current_temp[4] & 0x00ff);
 19868  002B5A  C108  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 19869                           
 19870                           ;main.c: 1376: break;
 19871  002B5E  D33D               	goto	l10774
 19872  002B60                     l10576:
 19873                           
 19874                           ; BSR set to: 0
 19875                           ;main.c: 1390: rv = readEEPROM(0x49);
 19876  002B60  6A0F               	clrf	?_readEEPROM+1,c
 19877  002B62  0E49               	movlw	73
 19878  002B64  6E0E               	movwf	?_readEEPROM,c
 19879  002B66  EC8D  F02E         	call	_readEEPROM	;wreg free
 19880  002B6A  D336               	goto	L41
 19881  002B6C                     l10578:
 19882                           
 19883                           ; BSR set to: 0
 19884                           ;main.c: 1395: rv = readEEPROM(0x4A);
 19885  002B6C  6A0F               	clrf	?_readEEPROM+1,c
 19886  002B6E  0E4A               	movlw	74
 19887  002B70  6E0E               	movwf	?_readEEPROM,c
 19888  002B72  EC8D  F02E         	call	_readEEPROM	;wreg free
 19889  002B76  D330               	goto	L41
 19890  002B78                     l10580:
 19891                           
 19892                           ; BSR set to: 0
 19893                           ;main.c: 1400: rv = readEEPROM(0x4B);
 19894  002B78  6A0F               	clrf	?_readEEPROM+1,c
 19895  002B7A  0E4B               	movlw	75
 19896  002B7C  6E0E               	movwf	?_readEEPROM,c
 19897  002B7E  EC8D  F02E         	call	_readEEPROM	;wreg free
 19898  002B82  D32A               	goto	L41
 19899  002B84                     l10582:
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;main.c: 1405: rv = readEEPROM(0x4C);
 19903  002B84  6A0F               	clrf	?_readEEPROM+1,c
 19904  002B86  0E4C               	movlw	76
 19905  002B88  6E0E               	movwf	?_readEEPROM,c
 19906  002B8A  EC8D  F02E         	call	_readEEPROM	;wreg free
 19907  002B8E  D324               	goto	L41
 19908  002B90                     l10584:
 19909                           
 19910                           ; BSR set to: 0
 19911                           ;main.c: 1410: rv = readEEPROM(0x4D);
 19912  002B90  6A0F               	clrf	?_readEEPROM+1,c
 19913  002B92  0E4D               	movlw	77
 19914  002B94  6E0E               	movwf	?_readEEPROM,c
 19915  002B96  EC8D  F02E         	call	_readEEPROM	;wreg free
 19916  002B9A  D31E               	goto	L41
 19917  002B9C                     l10586:
 19918                           
 19919                           ; BSR set to: 0
 19920                           ;main.c: 1415: rv = readEEPROM(0x4E);
 19921  002B9C  6A0F               	clrf	?_readEEPROM+1,c
 19922  002B9E  0E4E               	movlw	78
 19923  002BA0  6E0E               	movwf	?_readEEPROM,c
 19924  002BA2  EC8D  F02E         	call	_readEEPROM	;wreg free
 19925  002BA6  D318               	goto	L41
 19926  002BA8                     l10588:
 19927                           
 19928                           ; BSR set to: 0
 19929                           ;main.c: 1422: rv = readEEPROM(0x4F);
 19930  002BA8  6A0F               	clrf	?_readEEPROM+1,c
 19931  002BAA  0E4F               	movlw	79
 19932  002BAC  6E0E               	movwf	?_readEEPROM,c
 19933  002BAE  EC8D  F02E         	call	_readEEPROM	;wreg free
 19934  002BB2  D312               	goto	L41
 19935  002BB4                     l10590:
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;main.c: 1427: rv = readEEPROM(0x50);
 19939  002BB4  6A0F               	clrf	?_readEEPROM+1,c
 19940  002BB6  0E50               	movlw	80
 19941  002BB8  6E0E               	movwf	?_readEEPROM,c
 19942  002BBA  EC8D  F02E         	call	_readEEPROM	;wreg free
 19943  002BBE  D30C               	goto	L41
 19944  002BC0                     l10592:
 19945                           
 19946                           ; BSR set to: 0
 19947                           ;main.c: 1432: rv = readEEPROM(0x51);
 19948  002BC0  6A0F               	clrf	?_readEEPROM+1,c
 19949  002BC2  0E51               	movlw	81
 19950  002BC4  6E0E               	movwf	?_readEEPROM,c
 19951  002BC6  EC8D  F02E         	call	_readEEPROM	;wreg free
 19952  002BCA  D306               	goto	L41
 19953  002BCC                     l10594:
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;main.c: 1437: rv = readEEPROM(0x52);
 19957  002BCC  6A0F               	clrf	?_readEEPROM+1,c
 19958  002BCE  0E52               	movlw	82
 19959  002BD0  6E0E               	movwf	?_readEEPROM,c
 19960  002BD2  EC8D  F02E         	call	_readEEPROM	;wreg free
 19961  002BD6  D300               	goto	L41
 19962  002BD8                     l10596:
 19963                           
 19964                           ; BSR set to: 0
 19965                           ;main.c: 1442: rv = readEEPROM(0x53);
 19966  002BD8  6A0F               	clrf	?_readEEPROM+1,c
 19967  002BDA  0E53               	movlw	83
 19968  002BDC  6E0E               	movwf	?_readEEPROM,c
 19969  002BDE  EC8D  F02E         	call	_readEEPROM	;wreg free
 19970  002BE2  D2FA               	goto	L41
 19971  002BE4                     l10598:
 19972                           
 19973                           ; BSR set to: 0
 19974                           ;main.c: 1447: rv = readEEPROM(0x54);
 19975  002BE4  6A0F               	clrf	?_readEEPROM+1,c
 19976  002BE6  0E54               	movlw	84
 19977  002BE8  6E0E               	movwf	?_readEEPROM,c
 19978  002BEA  EC8D  F02E         	call	_readEEPROM	;wreg free
 19979  002BEE  D2F4               	goto	L41
 19980  002BF0                     l10600:
 19981                           
 19982                           ; BSR set to: 0
 19983                           ;main.c: 1452: rv = readEEPROM(0x55);
 19984  002BF0  6A0F               	clrf	?_readEEPROM+1,c
 19985  002BF2  0E55               	movlw	85
 19986  002BF4  6E0E               	movwf	?_readEEPROM,c
 19987  002BF6  EC8D  F02E         	call	_readEEPROM	;wreg free
 19988  002BFA  D2EE               	goto	L41
 19989  002BFC                     l10602:
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;main.c: 1457: rv = readEEPROM(0x56);
 19993  002BFC  6A0F               	clrf	?_readEEPROM+1,c
 19994  002BFE  0E56               	movlw	86
 19995  002C00  6E0E               	movwf	?_readEEPROM,c
 19996  002C02  EC8D  F02E         	call	_readEEPROM	;wreg free
 19997  002C06  D2E8               	goto	L41
 19998  002C08                     l10604:
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;main.c: 1462: rv = readEEPROM(0x57);
 20002  002C08  6A0F               	clrf	?_readEEPROM+1,c
 20003  002C0A  0E57               	movlw	87
 20004  002C0C  6E0E               	movwf	?_readEEPROM,c
 20005  002C0E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20006  002C12  D2E2               	goto	L41
 20007  002C14                     l10606:
 20008                           
 20009                           ; BSR set to: 0
 20010                           ;main.c: 1467: rv = readEEPROM(0x58);
 20011  002C14  6A0F               	clrf	?_readEEPROM+1,c
 20012  002C16  0E58               	movlw	88
 20013  002C18  6E0E               	movwf	?_readEEPROM,c
 20014  002C1A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20015  002C1E  D2DC               	goto	L41
 20016  002C20                     l10608:
 20017                           
 20018                           ; BSR set to: 0
 20019                           ;main.c: 1472: rv = readEEPROM(0x59);
 20020  002C20  6A0F               	clrf	?_readEEPROM+1,c
 20021  002C22  0E59               	movlw	89
 20022  002C24  6E0E               	movwf	?_readEEPROM,c
 20023  002C26  EC8D  F02E         	call	_readEEPROM	;wreg free
 20024  002C2A  D2D6               	goto	L41
 20025  002C2C                     l10610:
 20026                           
 20027                           ; BSR set to: 0
 20028                           ;main.c: 1477: rv = readEEPROM(0x5A);
 20029  002C2C  6A0F               	clrf	?_readEEPROM+1,c
 20030  002C2E  0E5A               	movlw	90
 20031  002C30  6E0E               	movwf	?_readEEPROM,c
 20032  002C32  EC8D  F02E         	call	_readEEPROM	;wreg free
 20033  002C36  D2D0               	goto	L41
 20034  002C38                     l10612:
 20035                           
 20036                           ; BSR set to: 0
 20037                           ;main.c: 1486: rv = readEEPROM(0x5B);
 20038  002C38  6A0F               	clrf	?_readEEPROM+1,c
 20039  002C3A  0E5B               	movlw	91
 20040  002C3C  6E0E               	movwf	?_readEEPROM,c
 20041  002C3E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20042  002C42  D2CA               	goto	L41
 20043  002C44                     l10614:
 20044                           
 20045                           ; BSR set to: 0
 20046                           ;main.c: 1491: rv = readEEPROM(0x5C);
 20047  002C44  6A0F               	clrf	?_readEEPROM+1,c
 20048  002C46  0E5C               	movlw	92
 20049  002C48  6E0E               	movwf	?_readEEPROM,c
 20050  002C4A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20051  002C4E  D2C4               	goto	L41
 20052  002C50                     l10616:
 20053                           
 20054                           ; BSR set to: 0
 20055                           ;main.c: 1496: rv = readEEPROM(0x5D);
 20056  002C50  6A0F               	clrf	?_readEEPROM+1,c
 20057  002C52  0E5D               	movlw	93
 20058  002C54  6E0E               	movwf	?_readEEPROM,c
 20059  002C56  EC8D  F02E         	call	_readEEPROM	;wreg free
 20060  002C5A  D2BE               	goto	L41
 20061  002C5C                     l10618:
 20062                           
 20063                           ; BSR set to: 0
 20064                           ;main.c: 1501: rv = readEEPROM(0x5E);
 20065  002C5C  6A0F               	clrf	?_readEEPROM+1,c
 20066  002C5E  0E5E               	movlw	94
 20067  002C60  6E0E               	movwf	?_readEEPROM,c
 20068  002C62  EC8D  F02E         	call	_readEEPROM	;wreg free
 20069  002C66  D2B8               	goto	L41
 20070  002C68                     l10620:
 20071                           
 20072                           ; BSR set to: 0
 20073                           ;main.c: 1506: rv = readEEPROM(0x5F);
 20074  002C68  6A0F               	clrf	?_readEEPROM+1,c
 20075  002C6A  0E5F               	movlw	95
 20076  002C6C  6E0E               	movwf	?_readEEPROM,c
 20077  002C6E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20078  002C72  D2B2               	goto	L41
 20079  002C74                     l10622:
 20080                           
 20081                           ; BSR set to: 0
 20082                           ;main.c: 1511: rv = readEEPROM(0x60);
 20083  002C74  6A0F               	clrf	?_readEEPROM+1,c
 20084  002C76  0E60               	movlw	96
 20085  002C78  6E0E               	movwf	?_readEEPROM,c
 20086  002C7A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20087  002C7E  D2AC               	goto	L41
 20088  002C80                     l10624:
 20089                           
 20090                           ; BSR set to: 0
 20091                           ;main.c: 1516: rv = readEEPROM(0x61);
 20092  002C80  6A0F               	clrf	?_readEEPROM+1,c
 20093  002C82  0E61               	movlw	97
 20094  002C84  6E0E               	movwf	?_readEEPROM,c
 20095  002C86  EC8D  F02E         	call	_readEEPROM	;wreg free
 20096  002C8A  D2A6               	goto	L41
 20097  002C8C                     l10626:
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;main.c: 1521: rv = readEEPROM(0x62);
 20101  002C8C  6A0F               	clrf	?_readEEPROM+1,c
 20102  002C8E  0E62               	movlw	98
 20103  002C90  6E0E               	movwf	?_readEEPROM,c
 20104  002C92  EC8D  F02E         	call	_readEEPROM	;wreg free
 20105  002C96  D2A0               	goto	L41
 20106  002C98                     l10628:
 20107                           
 20108                           ; BSR set to: 0
 20109                           ;main.c: 1526: rv = readEEPROM(0x63);
 20110  002C98  6A0F               	clrf	?_readEEPROM+1,c
 20111  002C9A  0E63               	movlw	99
 20112  002C9C  6E0E               	movwf	?_readEEPROM,c
 20113  002C9E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20114  002CA2  D29A               	goto	L41
 20115  002CA4                     l10630:
 20116                           
 20117                           ; BSR set to: 0
 20118                           ;main.c: 1531: rv = readEEPROM(0x64);
 20119  002CA4  6A0F               	clrf	?_readEEPROM+1,c
 20120  002CA6  0E64               	movlw	100
 20121  002CA8  6E0E               	movwf	?_readEEPROM,c
 20122  002CAA  EC8D  F02E         	call	_readEEPROM	;wreg free
 20123  002CAE  D294               	goto	L41
 20124  002CB0                     l10632:
 20125                           
 20126                           ; BSR set to: 0
 20127                           ;main.c: 1536: rv = readEEPROM(0x65);
 20128  002CB0  6A0F               	clrf	?_readEEPROM+1,c
 20129  002CB2  0E65               	movlw	101
 20130  002CB4  6E0E               	movwf	?_readEEPROM,c
 20131  002CB6  EC8D  F02E         	call	_readEEPROM	;wreg free
 20132  002CBA  D28E               	goto	L41
 20133  002CBC                     l10634:
 20134                           
 20135                           ; BSR set to: 0
 20136                           ;main.c: 1541: rv = readEEPROM(0x66);
 20137  002CBC  6A0F               	clrf	?_readEEPROM+1,c
 20138  002CBE  0E66               	movlw	102
 20139  002CC0  6E0E               	movwf	?_readEEPROM,c
 20140  002CC2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20141  002CC6  D288               	goto	L41
 20142  002CC8                     l10636:
 20143                           
 20144                           ; BSR set to: 0
 20145                           ;main.c: 1551: rv = readEEPROM(0x67);
 20146  002CC8  6A0F               	clrf	?_readEEPROM+1,c
 20147  002CCA  0E67               	movlw	103
 20148  002CCC  6E0E               	movwf	?_readEEPROM,c
 20149  002CCE  EC8D  F02E         	call	_readEEPROM	;wreg free
 20150  002CD2  D282               	goto	L41
 20151  002CD4                     l10638:
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;main.c: 1556: rv = readEEPROM(0x68);
 20155  002CD4  6A0F               	clrf	?_readEEPROM+1,c
 20156  002CD6  0E68               	movlw	104
 20157  002CD8  6E0E               	movwf	?_readEEPROM,c
 20158  002CDA  EC8D  F02E         	call	_readEEPROM	;wreg free
 20159  002CDE  D27C               	goto	L41
 20160  002CE0                     l10640:
 20161                           
 20162                           ; BSR set to: 0
 20163                           ;main.c: 1561: rv = readEEPROM(0x69);
 20164  002CE0  6A0F               	clrf	?_readEEPROM+1,c
 20165  002CE2  0E69               	movlw	105
 20166  002CE4  6E0E               	movwf	?_readEEPROM,c
 20167  002CE6  EC8D  F02E         	call	_readEEPROM	;wreg free
 20168  002CEA  D276               	goto	L41
 20169  002CEC                     l10642:
 20170                           
 20171                           ; BSR set to: 0
 20172                           ;main.c: 1566: rv = readEEPROM(0x6A);
 20173  002CEC  6A0F               	clrf	?_readEEPROM+1,c
 20174  002CEE  0E6A               	movlw	106
 20175  002CF0  6E0E               	movwf	?_readEEPROM,c
 20176  002CF2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20177  002CF6  D270               	goto	L41
 20178  002CF8                     l10644:
 20179                           
 20180                           ; BSR set to: 0
 20181                           ;main.c: 1571: rv = readEEPROM(0x6B);
 20182  002CF8  6A0F               	clrf	?_readEEPROM+1,c
 20183  002CFA  0E6B               	movlw	107
 20184  002CFC  6E0E               	movwf	?_readEEPROM,c
 20185  002CFE  EC8D  F02E         	call	_readEEPROM	;wreg free
 20186  002D02  D26A               	goto	L41
 20187  002D04                     l10646:
 20188                           
 20189                           ; BSR set to: 0
 20190                           ;main.c: 1576: rv = readEEPROM(0x6C);
 20191  002D04  6A0F               	clrf	?_readEEPROM+1,c
 20192  002D06  0E6C               	movlw	108
 20193  002D08  6E0E               	movwf	?_readEEPROM,c
 20194  002D0A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20195  002D0E  D264               	goto	L41
 20196  002D10                     l10648:
 20197                           
 20198                           ; BSR set to: 0
 20199                           ;main.c: 1581: rv = readEEPROM(0x6D);
 20200  002D10  6A0F               	clrf	?_readEEPROM+1,c
 20201  002D12  0E6D               	movlw	109
 20202  002D14  6E0E               	movwf	?_readEEPROM,c
 20203  002D16  EC8D  F02E         	call	_readEEPROM	;wreg free
 20204  002D1A  D25E               	goto	L41
 20205  002D1C                     l10650:
 20206                           
 20207                           ; BSR set to: 0
 20208                           ;main.c: 1586: rv = readEEPROM(0x6E);
 20209  002D1C  6A0F               	clrf	?_readEEPROM+1,c
 20210  002D1E  0E6E               	movlw	110
 20211  002D20  6E0E               	movwf	?_readEEPROM,c
 20212  002D22  EC8D  F02E         	call	_readEEPROM	;wreg free
 20213  002D26  D258               	goto	L41
 20214  002D28                     l10652:
 20215                           
 20216                           ; BSR set to: 0
 20217                           ;main.c: 1591: rv = readEEPROM(0x6F);
 20218  002D28  6A0F               	clrf	?_readEEPROM+1,c
 20219  002D2A  0E6F               	movlw	111
 20220  002D2C  6E0E               	movwf	?_readEEPROM,c
 20221  002D2E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20222  002D32  D252               	goto	L41
 20223  002D34                     l10654:
 20224                           
 20225                           ; BSR set to: 0
 20226                           ;main.c: 1596: rv = readEEPROM(0x70);
 20227  002D34  6A0F               	clrf	?_readEEPROM+1,c
 20228  002D36  0E70               	movlw	112
 20229  002D38  6E0E               	movwf	?_readEEPROM,c
 20230  002D3A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20231  002D3E  D24C               	goto	L41
 20232  002D40                     l10656:
 20233                           
 20234                           ; BSR set to: 0
 20235                           ;main.c: 1601: rv = readEEPROM(0x71);
 20236  002D40  6A0F               	clrf	?_readEEPROM+1,c
 20237  002D42  0E71               	movlw	113
 20238  002D44  6E0E               	movwf	?_readEEPROM,c
 20239  002D46  EC8D  F02E         	call	_readEEPROM	;wreg free
 20240  002D4A  D246               	goto	L41
 20241  002D4C                     l10658:
 20242                           
 20243                           ; BSR set to: 0
 20244                           ;main.c: 1606: rv = readEEPROM(0x72);
 20245  002D4C  6A0F               	clrf	?_readEEPROM+1,c
 20246  002D4E  0E72               	movlw	114
 20247  002D50  6E0E               	movwf	?_readEEPROM,c
 20248  002D52  EC8D  F02E         	call	_readEEPROM	;wreg free
 20249  002D56  D240               	goto	L41
 20250  002D58                     l10660:
 20251                           
 20252                           ; BSR set to: 0
 20253                           ;main.c: 1615: rv = readEEPROM(0x73);
 20254  002D58  6A0F               	clrf	?_readEEPROM+1,c
 20255  002D5A  0E73               	movlw	115
 20256  002D5C  6E0E               	movwf	?_readEEPROM,c
 20257  002D5E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20258  002D62  D23A               	goto	L41
 20259  002D64                     l10662:
 20260                           
 20261                           ; BSR set to: 0
 20262                           ;main.c: 1620: rv = readEEPROM(0x74);
 20263  002D64  6A0F               	clrf	?_readEEPROM+1,c
 20264  002D66  0E74               	movlw	116
 20265  002D68  6E0E               	movwf	?_readEEPROM,c
 20266  002D6A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20267  002D6E  D234               	goto	L41
 20268  002D70                     l10684:
 20269                           
 20270                           ; BSR set to: 0
 20271                           ;main.c: 1679: rv = readEEPROM(0x7F);
 20272  002D70  6A0F               	clrf	?_readEEPROM+1,c
 20273  002D72  0E7F               	movlw	127
 20274  002D74  6E0E               	movwf	?_readEEPROM,c
 20275  002D76  EC8D  F02E         	call	_readEEPROM	;wreg free
 20276  002D7A  D22E               	goto	L41
 20277  002D7C                     l10686:
 20278                           
 20279                           ; BSR set to: 0
 20280                           ;main.c: 1684: rv = readEEPROM(0x80);
 20281  002D7C  6A0F               	clrf	?_readEEPROM+1,c
 20282  002D7E  0E80               	movlw	128
 20283  002D80  6E0E               	movwf	?_readEEPROM,c
 20284  002D82  EC8D  F02E         	call	_readEEPROM	;wreg free
 20285  002D86  D228               	goto	L41
 20286  002D88                     l10688:
 20287                           
 20288                           ; BSR set to: 0
 20289                           ;main.c: 1689: rv = readEEPROM(0x81);
 20290  002D88  6A0F               	clrf	?_readEEPROM+1,c
 20291  002D8A  0E81               	movlw	129
 20292  002D8C  6E0E               	movwf	?_readEEPROM,c
 20293  002D8E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20294  002D92  D222               	goto	L41
 20295  002D94                     l10690:
 20296                           
 20297                           ; BSR set to: 0
 20298                           ;main.c: 1694: rv = readEEPROM(0x82);
 20299  002D94  6A0F               	clrf	?_readEEPROM+1,c
 20300  002D96  0E82               	movlw	130
 20301  002D98  6E0E               	movwf	?_readEEPROM,c
 20302  002D9A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20303  002D9E  D21C               	goto	L41
 20304  002DA0                     l10692:
 20305                           
 20306                           ; BSR set to: 0
 20307                           ;main.c: 1699: rv = readEEPROM(0x83);
 20308  002DA0  6A0F               	clrf	?_readEEPROM+1,c
 20309  002DA2  0E83               	movlw	131
 20310  002DA4  6E0E               	movwf	?_readEEPROM,c
 20311  002DA6  EC8D  F02E         	call	_readEEPROM	;wreg free
 20312  002DAA  D216               	goto	L41
 20313  002DAC                     l10694:
 20314                           
 20315                           ; BSR set to: 0
 20316                           ;main.c: 1704: rv = readEEPROM(0x84);
 20317  002DAC  6A0F               	clrf	?_readEEPROM+1,c
 20318  002DAE  0E84               	movlw	132
 20319  002DB0  6E0E               	movwf	?_readEEPROM,c
 20320  002DB2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20321  002DB6  D210               	goto	L41
 20322  002DB8                     l10696:
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;main.c: 1709: rv = readEEPROM(0x85);
 20326  002DB8  6A0F               	clrf	?_readEEPROM+1,c
 20327  002DBA  0E85               	movlw	133
 20328  002DBC  6E0E               	movwf	?_readEEPROM,c
 20329  002DBE  EC8D  F02E         	call	_readEEPROM	;wreg free
 20330  002DC2  D20A               	goto	L41
 20331  002DC4                     l10698:
 20332                           
 20333                           ; BSR set to: 0
 20334                           ;main.c: 1714: rv = readEEPROM(0x86);
 20335  002DC4  6A0F               	clrf	?_readEEPROM+1,c
 20336  002DC6  0E86               	movlw	134
 20337  002DC8  6E0E               	movwf	?_readEEPROM,c
 20338  002DCA  EC8D  F02E         	call	_readEEPROM	;wreg free
 20339  002DCE  D204               	goto	L41
 20340  002DD0                     l10700:
 20341                           
 20342                           ; BSR set to: 0
 20343                           ;main.c: 1719: rv = readEEPROM(0x87);
 20344  002DD0  6A0F               	clrf	?_readEEPROM+1,c
 20345  002DD2  0E87               	movlw	135
 20346  002DD4  6E0E               	movwf	?_readEEPROM,c
 20347  002DD6  EC8D  F02E         	call	_readEEPROM	;wreg free
 20348  002DDA  D1FE               	goto	L41
 20349  002DDC                     l10702:
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;main.c: 1724: rv = readEEPROM(0x88);
 20353  002DDC  6A0F               	clrf	?_readEEPROM+1,c
 20354  002DDE  0E88               	movlw	136
 20355  002DE0  6E0E               	movwf	?_readEEPROM,c
 20356  002DE2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20357  002DE6  D1F8               	goto	L41
 20358  002DE8                     l10704:
 20359                           
 20360                           ; BSR set to: 0
 20361                           ;main.c: 1729: rv = readEEPROM(0x89);
 20362  002DE8  6A0F               	clrf	?_readEEPROM+1,c
 20363  002DEA  0E89               	movlw	137
 20364  002DEC  6E0E               	movwf	?_readEEPROM,c
 20365  002DEE  EC8D  F02E         	call	_readEEPROM	;wreg free
 20366  002DF2  D1F2               	goto	L41
 20367  002DF4                     l10706:
 20368                           
 20369                           ; BSR set to: 0
 20370                           ;main.c: 1734: rv = readEEPROM(0x8A);
 20371  002DF4  6A0F               	clrf	?_readEEPROM+1,c
 20372  002DF6  0E8A               	movlw	138
 20373  002DF8  6E0E               	movwf	?_readEEPROM,c
 20374  002DFA  EC8D  F02E         	call	_readEEPROM	;wreg free
 20375  002DFE  D1EC               	goto	L41
 20376  002E00                     l10708:
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;main.c: 1743: rv = readEEPROM(0x8B);
 20380  002E00  6A0F               	clrf	?_readEEPROM+1,c
 20381  002E02  0E8B               	movlw	139
 20382  002E04  6E0E               	movwf	?_readEEPROM,c
 20383  002E06  EC8D  F02E         	call	_readEEPROM	;wreg free
 20384  002E0A  D1E6               	goto	L41
 20385  002E0C                     l10710:
 20386                           
 20387                           ; BSR set to: 0
 20388                           ;main.c: 1748: rv = readEEPROM(0x8C);
 20389  002E0C  6A0F               	clrf	?_readEEPROM+1,c
 20390  002E0E  0E8C               	movlw	140
 20391  002E10  6E0E               	movwf	?_readEEPROM,c
 20392  002E12  EC8D  F02E         	call	_readEEPROM	;wreg free
 20393  002E16  D1E0               	goto	L41
 20394  002E18                     l10712:
 20395                           
 20396                           ; BSR set to: 0
 20397                           ;main.c: 1753: rv = readEEPROM(0x8D);
 20398  002E18  6A0F               	clrf	?_readEEPROM+1,c
 20399  002E1A  0E8D               	movlw	141
 20400  002E1C  6E0E               	movwf	?_readEEPROM,c
 20401  002E1E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20402  002E22  D1DA               	goto	L41
 20403  002E24                     l10714:
 20404                           
 20405                           ; BSR set to: 0
 20406                           ;main.c: 1758: rv = readEEPROM(0x8E);
 20407  002E24  6A0F               	clrf	?_readEEPROM+1,c
 20408  002E26  0E8E               	movlw	142
 20409  002E28  6E0E               	movwf	?_readEEPROM,c
 20410  002E2A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20411  002E2E  D1D4               	goto	L41
 20412  002E30                     l10716:
 20413                           
 20414                           ; BSR set to: 0
 20415                           ;main.c: 1763: rv = readEEPROM(0x8F);
 20416  002E30  6A0F               	clrf	?_readEEPROM+1,c
 20417  002E32  0E8F               	movlw	143
 20418  002E34  6E0E               	movwf	?_readEEPROM,c
 20419  002E36  EC8D  F02E         	call	_readEEPROM	;wreg free
 20420  002E3A  D1CE               	goto	L41
 20421  002E3C                     l10718:
 20422                           
 20423                           ; BSR set to: 0
 20424                           ;main.c: 1768: rv = readEEPROM(0x90);
 20425  002E3C  6A0F               	clrf	?_readEEPROM+1,c
 20426  002E3E  0E90               	movlw	144
 20427  002E40  6E0E               	movwf	?_readEEPROM,c
 20428  002E42  EC8D  F02E         	call	_readEEPROM	;wreg free
 20429  002E46  D1C8               	goto	L41
 20430  002E48                     l10720:
 20431                           
 20432                           ; BSR set to: 0
 20433                           ;main.c: 1773: rv = readEEPROM(0x91);
 20434  002E48  6A0F               	clrf	?_readEEPROM+1,c
 20435  002E4A  0E91               	movlw	145
 20436  002E4C  6E0E               	movwf	?_readEEPROM,c
 20437  002E4E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20438  002E52  D1C2               	goto	L41
 20439  002E54                     l10722:
 20440                           
 20441                           ; BSR set to: 0
 20442                           ;main.c: 1778: rv = readEEPROM(0x92);
 20443  002E54  6A0F               	clrf	?_readEEPROM+1,c
 20444  002E56  0E92               	movlw	146
 20445  002E58  6E0E               	movwf	?_readEEPROM,c
 20446  002E5A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20447  002E5E  D1BC               	goto	L41
 20448  002E60                     l10724:
 20449                           
 20450                           ; BSR set to: 0
 20451                           ;main.c: 1783: rv = readEEPROM(0x93);
 20452  002E60  6A0F               	clrf	?_readEEPROM+1,c
 20453  002E62  0E93               	movlw	147
 20454  002E64  6E0E               	movwf	?_readEEPROM,c
 20455  002E66  EC8D  F02E         	call	_readEEPROM	;wreg free
 20456  002E6A  D1B6               	goto	L41
 20457  002E6C                     l10726:
 20458                           
 20459                           ; BSR set to: 0
 20460                           ;main.c: 1788: rv = readEEPROM(0x94);
 20461  002E6C  6A0F               	clrf	?_readEEPROM+1,c
 20462  002E6E  0E94               	movlw	148
 20463  002E70  6E0E               	movwf	?_readEEPROM,c
 20464  002E72  EC8D  F02E         	call	_readEEPROM	;wreg free
 20465  002E76  D1B0               	goto	L41
 20466  002E78                     l10728:
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;main.c: 1793: rv = readEEPROM(0x95);
 20470  002E78  6A0F               	clrf	?_readEEPROM+1,c
 20471  002E7A  0E95               	movlw	149
 20472  002E7C  6E0E               	movwf	?_readEEPROM,c
 20473  002E7E  EC8D  F02E         	call	_readEEPROM	;wreg free
 20474  002E82  D1AA               	goto	L41
 20475  002E84                     l10730:
 20476                           
 20477                           ; BSR set to: 0
 20478                           ;main.c: 1798: rv = readEEPROM(0x96);
 20479  002E84  6A0F               	clrf	?_readEEPROM+1,c
 20480  002E86  0E96               	movlw	150
 20481  002E88  6E0E               	movwf	?_readEEPROM,c
 20482  002E8A  EC8D  F02E         	call	_readEEPROM	;wreg free
 20483  002E8E  D1A4               	goto	L41
 20484  002E90                     l10732:
 20485                           
 20486                           ; BSR set to: 0
 20487                           ;main.c: 1808: rv = readEEPROM(0x97);
 20488  002E90  6A0F               	clrf	?_readEEPROM+1,c
 20489  002E92  0E97               	movlw	151
 20490  002E94  6E0E               	movwf	?_readEEPROM,c
 20491  002E96  EC8D  F02E         	call	_readEEPROM	;wreg free
 20492  002E9A  D19E               	goto	L41
 20493  002E9C                     l10734:
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;main.c: 1813: rv = readEEPROM(0x98);
 20497  002E9C  6A0F               	clrf	?_readEEPROM+1,c
 20498  002E9E  0E98               	movlw	152
 20499  002EA0  6E0E               	movwf	?_readEEPROM,c
 20500  002EA2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20501  002EA6  D198               	goto	L41
 20502  002EA8                     l10736:
 20503                           
 20504                           ; BSR set to: 0
 20505                           ;main.c: 1818: rv = readEEPROM(0x99);
 20506  002EA8  6A0F               	clrf	?_readEEPROM+1,c
 20507  002EAA  0E99               	movlw	153
 20508  002EAC  6E0E               	movwf	?_readEEPROM,c
 20509  002EAE  EC8D  F02E         	call	_readEEPROM	;wreg free
 20510  002EB2  D192               	goto	L41
 20511  002EB4                     l10738:
 20512                           
 20513                           ; BSR set to: 0
 20514                           ;main.c: 1823: rv = readEEPROM(0x9A);
 20515  002EB4  6A0F               	clrf	?_readEEPROM+1,c
 20516  002EB6  0E9A               	movlw	154
 20517  002EB8  6E0E               	movwf	?_readEEPROM,c
 20518  002EBA  EC8D  F02E         	call	_readEEPROM	;wreg free
 20519  002EBE  D18C               	goto	L41
 20520  002EC0                     l10740:
 20521                           
 20522                           ; BSR set to: 0
 20523                           ;main.c: 1828: rv = readEEPROM(0x9B);
 20524  002EC0  6A0F               	clrf	?_readEEPROM+1,c
 20525  002EC2  0E9B               	movlw	155
 20526  002EC4  6E0E               	movwf	?_readEEPROM,c
 20527  002EC6  EC8D  F02E         	call	_readEEPROM	;wreg free
 20528  002ECA  D186               	goto	L41
 20529  002ECC                     l10742:
 20530                           
 20531                           ; BSR set to: 0
 20532                           ;main.c: 1833: rv = readEEPROM(0x9C);
 20533  002ECC  6A0F               	clrf	?_readEEPROM+1,c
 20534  002ECE  0E9C               	movlw	156
 20535  002ED0  6E0E               	movwf	?_readEEPROM,c
 20536  002ED2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20537  002ED6  D180               	goto	L41
 20538  002ED8                     l410:
 20539                           
 20540                           ; BSR set to: 0
 20541                           ;main.c: 1838: rv = 0;
 20542  002ED8  6A14               	clrf	vscp_readAppReg@rv,c
 20543                           
 20544                           ;main.c: 1839: break;
 20545  002EDA  D17F               	goto	l10774
 20546  002EDC                     l10744:
 20547                           
 20548                           ; BSR set to: 0
 20549                           ;main.c: 1847: rv = readEEPROM(0xF2);
 20550  002EDC  6A0F               	clrf	?_readEEPROM+1,c
 20551  002EDE  0EF2               	movlw	242
 20552  002EE0  6E0E               	movwf	?_readEEPROM,c
 20553  002EE2  EC8D  F02E         	call	_readEEPROM	;wreg free
 20554  002EE6  D178               	goto	L41
 20555  002EE8                     l10746:
 20556                           
 20557                           ; BSR set to: 0
 20558                           ;main.c: 1851: rv = readEEPROM(0xF3);
 20559  002EE8  6A0F               	clrf	?_readEEPROM+1,c
 20560  002EEA  0EF3               	movlw	243
 20561  002EEC  6E0E               	movwf	?_readEEPROM,c
 20562  002EEE  EC8D  F02E         	call	_readEEPROM	;wreg free
 20563  002EF2  D172               	goto	L41
 20564  002EF4                     l10750:
 20565                           
 20566                           ; BSR set to: 0
 20567  002EF4  5013               	movf	vscp_readAppReg@reg,w,c
 20568                           
 20569                           ; Switch size 1, requested type "speed"
 20570                           ; Number of cases is 108, Range of values is 0 to 119
 20571                           ; switch strategies available:
 20572                           ; Name         Instructions Cycles
 20573                           ; simple_byte          325   163 (average)
 20574                           ;	Chosen strategy is simple_byte
 20575  002EF6  E101 D5E5          	bz	l10548
 20576  002EFA  0A01               	xorlw	1	; case 1
 20577  002EFC  E101 D5E8          	bz	l10550
 20578  002F00  0A03               	xorlw	3	; case 2
 20579  002F02  E101 D5EB          	bz	l10552
 20580  002F06  0A01               	xorlw	1	; case 3
 20581  002F08  E101 D5EE          	bz	l10554
 20582  002F0C  0A07               	xorlw	7	; case 4
 20583  002F0E  E101 D5F1          	bz	l10556
 20584  002F12  0A01               	xorlw	1	; case 5
 20585  002F14  E101 D5F4          	bz	l10558
 20586  002F18  0A03               	xorlw	3	; case 6
 20587  002F1A  E101 D5F7          	bz	l10560
 20588  002F1E  0A01               	xorlw	1	; case 7
 20589  002F20  E101 D5FA          	bz	l10562
 20590  002F24  0A0F               	xorlw	15	; case 8
 20591  002F26  E101 D5FD          	bz	l10564
 20592  002F2A  0A01               	xorlw	1	; case 9
 20593  002F2C  E101 D5FD          	bz	l315
 20594  002F30  0A03               	xorlw	3	; case 10
 20595  002F32  E101 D5FD          	bz	l10566
 20596  002F36  0A01               	xorlw	1	; case 11
 20597  002F38  E101 D5FD          	bz	l317
 20598  002F3C  0A07               	xorlw	7	; case 12
 20599  002F3E  E101 D5FD          	bz	l10568
 20600  002F42  0A01               	xorlw	1	; case 13
 20601  002F44  E101 D5FD          	bz	l319
 20602  002F48  0A03               	xorlw	3	; case 14
 20603  002F4A  E101 D5FD          	bz	l10570
 20604  002F4E  0A01               	xorlw	1	; case 15
 20605  002F50  E101 D5FD          	bz	l321
 20606  002F54  0A1F               	xorlw	31	; case 16
 20607  002F56  E101 D5FD          	bz	l10572
 20608  002F5A  0A01               	xorlw	1	; case 17
 20609  002F5C  E101 D5FD          	bz	l323
 20610  002F60  0A03               	xorlw	3	; case 18
 20611  002F62  E101 D5F7          	bz	l10572
 20612  002F66  0A01               	xorlw	1	; case 19
 20613  002F68  E101 D5F7          	bz	l323
 20614  002F6C  0A07               	xorlw	7	; case 20
 20615  002F6E  E101 D5F7          	bz	l10576
 20616  002F72  0A01               	xorlw	1	; case 21
 20617  002F74  E101 D5FA          	bz	l10578
 20618  002F78  0A03               	xorlw	3	; case 22
 20619  002F7A  E101 D5FD          	bz	l10580
 20620  002F7E  0A01               	xorlw	1	; case 23
 20621  002F80  E101 D600          	bz	l10582
 20622  002F84  0A0F               	xorlw	15	; case 24
 20623  002F86  E101 D603          	bz	l10584
 20624  002F8A  0A01               	xorlw	1	; case 25
 20625  002F8C  E101 D606          	bz	l10586
 20626  002F90  0A3F               	xorlw	63	; case 38
 20627  002F92  E101 D609          	bz	l10588
 20628  002F96  0A01               	xorlw	1	; case 39
 20629  002F98  E101 D60C          	bz	l10590
 20630  002F9C  0A0F               	xorlw	15	; case 40
 20631  002F9E  E101 D60F          	bz	l10592
 20632  002FA2  0A01               	xorlw	1	; case 41
 20633  002FA4  E101 D612          	bz	l10594
 20634  002FA8  0A03               	xorlw	3	; case 42
 20635  002FAA  E101 D615          	bz	l10596
 20636  002FAE  0A01               	xorlw	1	; case 43
 20637  002FB0  E101 D618          	bz	l10598
 20638  002FB4  0A07               	xorlw	7	; case 44
 20639  002FB6  E101 D61B          	bz	l10600
 20640  002FBA  0A01               	xorlw	1	; case 45
 20641  002FBC  E101 D61E          	bz	l10602
 20642  002FC0  0A03               	xorlw	3	; case 46
 20643  002FC2  E101 D621          	bz	l10604
 20644  002FC6  0A01               	xorlw	1	; case 47
 20645  002FC8  E101 D624          	bz	l10606
 20646  002FCC  0A1F               	xorlw	31	; case 48
 20647  002FCE  E101 D627          	bz	l10608
 20648  002FD2  0A01               	xorlw	1	; case 49
 20649  002FD4  E101 D62A          	bz	l10610
 20650  002FD8  0A03               	xorlw	3	; case 50
 20651  002FDA  E101 D62D          	bz	l10612
 20652  002FDE  0A01               	xorlw	1	; case 51
 20653  002FE0  E101 D630          	bz	l10614
 20654  002FE4  0A07               	xorlw	7	; case 52
 20655  002FE6  E101 D633          	bz	l10616
 20656  002FEA  0A01               	xorlw	1	; case 53
 20657  002FEC  E101 D636          	bz	l10618
 20658  002FF0  0A03               	xorlw	3	; case 54
 20659  002FF2  E101 D639          	bz	l10620
 20660  002FF6  0A01               	xorlw	1	; case 55
 20661  002FF8  E101 D63C          	bz	l10622
 20662  002FFC  0A0F               	xorlw	15	; case 56
 20663  002FFE  E101 D63F          	bz	l10624
 20664  003002  0A01               	xorlw	1	; case 57
 20665  003004  E101 D642          	bz	l10626
 20666  003008  0A03               	xorlw	3	; case 58
 20667  00300A  E101 D645          	bz	l10628
 20668  00300E  0A01               	xorlw	1	; case 59
 20669  003010  E101 D648          	bz	l10630
 20670  003014  0A07               	xorlw	7	; case 60
 20671  003016  E101 D64B          	bz	l10632
 20672  00301A  0A01               	xorlw	1	; case 61
 20673  00301C  E101 D64E          	bz	l10634
 20674  003020  0A03               	xorlw	3	; case 62
 20675  003022  E101 D651          	bz	l10636
 20676  003026  0A01               	xorlw	1	; case 63
 20677  003028  E101 D654          	bz	l10638
 20678  00302C  0A7F               	xorlw	127	; case 64
 20679  00302E  E101 D657          	bz	l10640
 20680  003032  0A01               	xorlw	1	; case 65
 20681  003034  E101 D65A          	bz	l10642
 20682  003038  0A03               	xorlw	3	; case 66
 20683  00303A  E101 D65D          	bz	l10644
 20684  00303E  0A01               	xorlw	1	; case 67
 20685  003040  E101 D660          	bz	l10646
 20686  003044  0A07               	xorlw	7	; case 68
 20687  003046  E101 D663          	bz	l10648
 20688  00304A  0A01               	xorlw	1	; case 69
 20689  00304C  E101 D666          	bz	l10650
 20690  003050  0A03               	xorlw	3	; case 70
 20691  003052  E101 D669          	bz	l10652
 20692  003056  0A01               	xorlw	1	; case 71
 20693  003058  E101 D66C          	bz	l10654
 20694  00305C  0A0F               	xorlw	15	; case 72
 20695  00305E  E101 D66F          	bz	l10656
 20696  003062  0A01               	xorlw	1	; case 73
 20697  003064  E101 D672          	bz	l10658
 20698  003068  0A03               	xorlw	3	; case 74
 20699  00306A  E101 D675          	bz	l10660
 20700  00306E  0A01               	xorlw	1	; case 75
 20701  003070  E101 D678          	bz	l10662
 20702  003074  0A07               	xorlw	7	; case 76
 20703  003076  E101 D66F          	bz	l10660
 20704  00307A  0A01               	xorlw	1	; case 77
 20705  00307C  E101 D672          	bz	l10662
 20706  003080  0A03               	xorlw	3	; case 78
 20707  003082  E101 D669          	bz	l10660
 20708  003086  0A01               	xorlw	1	; case 79
 20709  003088  E101 D66C          	bz	l10662
 20710  00308C  0A1F               	xorlw	31	; case 80
 20711  00308E  E101 D663          	bz	l10660
 20712  003092  0A01               	xorlw	1	; case 81
 20713  003094  E101 D666          	bz	l10662
 20714  003098  0A03               	xorlw	3	; case 82
 20715  00309A  E101 D65D          	bz	l10660
 20716  00309E  0A01               	xorlw	1	; case 83
 20717  0030A0  E101 D660          	bz	l10662
 20718  0030A4  0A07               	xorlw	7	; case 84
 20719  0030A6  E101 D657          	bz	l10660
 20720  0030AA  0A01               	xorlw	1	; case 85
 20721  0030AC  E101 D65A          	bz	l10662
 20722  0030B0  0A03               	xorlw	3	; case 86
 20723  0030B2  E101 D65D          	bz	l10684
 20724  0030B6  0A01               	xorlw	1	; case 87
 20725  0030B8  E101 D660          	bz	l10686
 20726  0030BC  0A0F               	xorlw	15	; case 88
 20727  0030BE  E101 D663          	bz	l10688
 20728  0030C2  0A01               	xorlw	1	; case 89
 20729  0030C4  E101 D666          	bz	l10690
 20730  0030C8  0A03               	xorlw	3	; case 90
 20731  0030CA  E101 D669          	bz	l10692
 20732  0030CE  0A01               	xorlw	1	; case 91
 20733  0030D0  E101 D66C          	bz	l10694
 20734  0030D4  0A07               	xorlw	7	; case 92
 20735  0030D6  E101 D66F          	bz	l10696
 20736  0030DA  0A01               	xorlw	1	; case 93
 20737  0030DC  E101 D672          	bz	l10698
 20738  0030E0  0A03               	xorlw	3	; case 94
 20739  0030E2  E101 D675          	bz	l10700
 20740  0030E6  0A01               	xorlw	1	; case 95
 20741  0030E8  E101 D678          	bz	l10702
 20742  0030EC  0A3F               	xorlw	63	; case 96
 20743  0030EE  E101 D67B          	bz	l10704
 20744  0030F2  0A01               	xorlw	1	; case 97
 20745  0030F4  E101 D67E          	bz	l10706
 20746  0030F8  0A03               	xorlw	3	; case 98
 20747  0030FA  E101 D681          	bz	l10708
 20748  0030FE  0A01               	xorlw	1	; case 99
 20749  003100  E101 D684          	bz	l10710
 20750  003104  0A07               	xorlw	7	; case 100
 20751  003106  E101 D687          	bz	l10712
 20752  00310A  0A01               	xorlw	1	; case 101
 20753  00310C  E101 D68A          	bz	l10714
 20754  003110  0A03               	xorlw	3	; case 102
 20755  003112  E101 D68D          	bz	l10716
 20756  003116  0A01               	xorlw	1	; case 103
 20757  003118  E101 D690          	bz	l10718
 20758  00311C  0A0F               	xorlw	15	; case 104
 20759  00311E  E101 D693          	bz	l10720
 20760  003122  0A01               	xorlw	1	; case 105
 20761  003124  E101 D696          	bz	l10722
 20762  003128  0A03               	xorlw	3	; case 106
 20763  00312A  E101 D699          	bz	l10724
 20764  00312E  0A01               	xorlw	1	; case 107
 20765  003130  E101 D69C          	bz	l10726
 20766  003134  0A07               	xorlw	7	; case 108
 20767  003136  E101 D69F          	bz	l10728
 20768  00313A  0A01               	xorlw	1	; case 109
 20769  00313C  E101 D6A2          	bz	l10730
 20770  003140  0A03               	xorlw	3	; case 110
 20771  003142  E101 D6A5          	bz	l10732
 20772  003146  0A01               	xorlw	1	; case 111
 20773  003148  E101 D6A8          	bz	l10734
 20774  00314C  0A1F               	xorlw	31	; case 112
 20775  00314E  E101 D6AB          	bz	l10736
 20776  003152  0A01               	xorlw	1	; case 113
 20777  003154  E101 D6AE          	bz	l10738
 20778  003158  0A03               	xorlw	3	; case 114
 20779  00315A  E101 D6B1          	bz	l10740
 20780  00315E  0A01               	xorlw	1	; case 115
 20781  003160  E101 D6B4          	bz	l10742
 20782  003164  0A07               	xorlw	7	; case 116
 20783  003166  E101 D6B7          	bz	l410
 20784  00316A  0A01               	xorlw	1	; case 117
 20785  00316C  E101 D6B4          	bz	l410
 20786  003170  0A03               	xorlw	3	; case 118
 20787  003172  E101 D6B3          	bz	l10744
 20788  003176  0A01               	xorlw	1	; case 119
 20789  003178  E101 D6B6          	bz	l10746
 20790  00317C  D6AD               	goto	l410
 20791  00317E                     l10752:
 20792                           
 20793                           ; BSR set to: 0
 20794                           ;main.c: 1859: else if (1 == vscp_page_select) {
 20795  00317E  0446               	decf	_vscp_page_select,w,c
 20796  003180  1047               	iorwf	_vscp_page_select+1,w,c
 20797  003182  E12B               	bnz	l10774
 20798                           
 20799                           ; BSR set to: 0
 20800                           ;main.c: 1861: if (reg < 72) {
 20801  003184  0E48               	movlw	72
 20802  003186  6013               	cpfslt	vscp_readAppReg@reg,c
 20803  003188  D009               	goto	l10758
 20804                           
 20805                           ; BSR set to: 0
 20806                           ;main.c: 1862: rv = readEEPROM(0xAA + reg ) ;
 20807  00318A  0EAA               	movlw	170
 20808  00318C  2413               	addwf	vscp_readAppReg@reg,w,c
 20809  00318E  6E0E               	movwf	?_readEEPROM,c
 20810  003190  6A0F               	clrf	?_readEEPROM+1,c
 20811  003192  0E00               	movlw	0
 20812  003194  220F               	addwfc	?_readEEPROM+1,f,c
 20813  003196  EC8D  F02E         	call	_readEEPROM	;wreg free
 20814  00319A  D01E               	goto	L41
 20815  00319C                     l10758:
 20816                           
 20817                           ; BSR set to: 0
 20818                           ;main.c: 1865: else if (reg < 84) {
 20819  00319C  0E54               	movlw	84
 20820  00319E  6013               	cpfslt	vscp_readAppReg@reg,c
 20821  0031A0  D010               	goto	l10770
 20822                           
 20823                           ; BSR set to: 0
 20824                           ;main.c: 1867: uint8_t pos = reg - 72;
 20825  0031A2  5013               	movf	vscp_readAppReg@reg,w,c
 20826  0031A4  0FB8               	addlw	184
 20827  0031A6  6E12               	movwf	vscp_readAppReg@pos,c
 20828                           
 20829                           ; BSR set to: 0
 20830                           ;main.c: 1868: if ( pos % 2 ) {
 20831  0031A8  A012               	btfss	vscp_readAppReg@pos,0,c
 20832  0031AA  D002               	goto	l10766
 20833                           
 20834                           ; BSR set to: 0
 20835                           ;main.c: 1869: pos--;
 20836  0031AC  0612               	decf	vscp_readAppReg@pos,f,c
 20837                           
 20838                           ;main.c: 1870: }
 20839  0031AE  D001               	goto	l10768
 20840  0031B0                     l10766:
 20841                           
 20842                           ; BSR set to: 0
 20843                           ;main.c: 1871: else {
 20844                           ;main.c: 1872: pos++;
 20845  0031B0  2A12               	incf	vscp_readAppReg@pos,f,c
 20846  0031B2                     l10768:
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;main.c: 1873: }
 20850                           ;main.c: 1874: rv = adc[ pos ];
 20851  0031B2  0E9C               	movlw	low _adc
 20852  0031B4  2412               	addwf	vscp_readAppReg@pos,w,c
 20853  0031B6  6ED9               	movwf	fsr2l,c
 20854  0031B8  6ADA               	clrf	fsr2h,c
 20855  0031BA  0E01               	movlw	high _adc
 20856  0031BC  22DA               	addwfc	fsr2h,f,c
 20857  0031BE  50DF               	movf	indf2,w,c
 20858  0031C0  D00B               	goto	L41
 20859  0031C2                     l10770:
 20860                           
 20861                           ; BSR set to: 0
 20862                           ;main.c: 1877: else if (reg < 98) {
 20863  0031C2  0E62               	movlw	98
 20864  0031C4  6013               	cpfslt	vscp_readAppReg@reg,c
 20865  0031C6  D009               	goto	l10774
 20866                           
 20867                           ; BSR set to: 0
 20868                           ;main.c: 1878: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20869  0031C8  0E4A               	movlw	74
 20870  0031CA  2413               	addwf	vscp_readAppReg@reg,w,c
 20871  0031CC  6E0E               	movwf	?_readEEPROM,c
 20872  0031CE  6A0F               	clrf	?_readEEPROM+1,c
 20873  0031D0  0E00               	movlw	0
 20874  0031D2  220F               	addwfc	?_readEEPROM+1,f,c
 20875  0031D4  EC8D  F02E         	call	_readEEPROM	;wreg free
 20876  0031D8                     L41:
 20877  0031D8  6E14               	movwf	vscp_readAppReg@rv,c
 20878  0031DA                     l10774:
 20879                           
 20880                           ;main.c: 1879: }
 20881                           ;main.c: 1880: }
 20882                           ;main.c: 1882: return rv;
 20883  0031DA  5014               	movf	vscp_readAppReg@rv,w,c
 20884  0031DC  0012               	return	
 20885  0031DE                     __end_of_vscp_readAppReg:
 20886                           	opt stack 0
 20887                           tblptru	equ	0xFF8
 20888                           tblptrh	equ	0xFF7
 20889                           tblptrl	equ	0xFF6
 20890                           tablat	equ	0xFF5
 20891                           prodh	equ	0xFF4
 20892                           prodl	equ	0xFF3
 20893                           intcon	equ	0xFF2
 20894                           postinc0	equ	0xFEE
 20895                           wreg	equ	0xFE8
 20896                           indf1	equ	0xFE7
 20897                           postdec1	equ	0xFE5
 20898                           fsr1h	equ	0xFE2
 20899                           fsr1l	equ	0xFE1
 20900                           indf2	equ	0xFDF
 20901                           postinc2	equ	0xFDE
 20902                           postdec2	equ	0xFDD
 20903                           plusw2	equ	0xFDB
 20904                           fsr2h	equ	0xFDA
 20905                           fsr2l	equ	0xFD9
 20906                           status	equ	0xFD8
 20907                           
 20908 ;; *************** function _interrupt_at_low_vector *****************
 20909 ;; Defined at:
 20910 ;;		line 134 in file "../main.c"
 20911 ;; Parameters:    Size  Location     Type
 20912 ;;		None
 20913 ;; Auto vars:     Size  Location     Type
 20914 ;;		None
 20915 ;; Return value:  Size  Location     Type
 20916 ;;		None               void
 20917 ;; Registers used:
 20918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20919 ;; Tracked objects:
 20920 ;;		On entry : 0/0
 20921 ;;		On exit  : 0/0
 20922 ;;		Unchanged: 0/0
 20923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20924 ;;      Params:         0       0       0       0       0       0       0
 20925 ;;      Locals:         0       0       0       0       0       0       0
 20926 ;;      Temps:          9       0       0       0       0       0       0
 20927 ;;      Totals:         9       0       0       0       0       0       0
 20928 ;;Total ram usage:        9 bytes
 20929 ;; Hardware stack levels used:    1
 20930 ;; Hardware stack levels required when called:    1
 20931 ;; This function calls:
 20932 ;;		i1_ConvertADC
 20933 ;;		i1_WriteTimer0
 20934 ;; This function is called by:
 20935 ;;		Interrupt level 1
 20936 ;; This function uses a non-reentrant model
 20937 ;;
 20938                           
 20939                           	psect	intcodelo
 20940  000818                     __pintcodelo:
 20941                           	opt stack 0
 20942  000818                     _interrupt_at_low_vector:
 20943                           	opt stack 22
 20944                           
 20945                           ;incstack = 0
 20946  000818  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20947  00081C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20948  000820  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20949  000824  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20950  000828  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20951  00082C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20952  000830  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20953  000834                     
 20954                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 20955  000834  A4F2               	btfss	intcon,2,c	;volatile
 20956  000836  D001               	goto	i1u714_21
 20957  000838  D001               	goto	i1u714_20
 20958  00083A                     i1u714_21:
 20959  00083A  D045               	goto	i1l9188
 20960  00083C                     i1u714_20:
 20961  00083C                     
 20962                           ;main.c: 139: WriteTimer0(0xfb1d);
 20963  00083C  0EFB               	movlw	251
 20964  00083E  6E02               	movwf	?i1_WriteTimer0+1,c
 20965  000840  0E1D               	movlw	29
 20966  000842  6E01               	movwf	?i1_WriteTimer0,c
 20967  000844  ECA8  F02E         	call	i1_WriteTimer0	;wreg free
 20968  000848                     
 20969                           ;main.c: 141: vscp_timer++;
 20970  000848  0101               	movlb	1	; () banked
 20971  00084A  4B1C               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20972  00084C  2B1D               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20973  00084E                     
 20974                           ; BSR set to: 1
 20975                           ;main.c: 142: vscp_configtimer++;
 20976  00084E  4B1A               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20977  000850  2B1B               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20978  000852                     
 20979                           ; BSR set to: 1
 20980                           ;main.c: 143: measurement_clock++;
 20981  000852  0E01               	movlw	1
 20982  000854  2712               	addwf	_measurement_clock& (0+255),f,b
 20983  000856  0E00               	movlw	0
 20984  000858  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b
 20985  00085A  0E00               	movlw	0
 20986  00085C  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b
 20987  00085E  0E00               	movlw	0
 20988  000860  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b
 20989  000862                     
 20990                           ; BSR set to: 1
 20991                           ;main.c: 144: timeout_clock++;
 20992  000862  0E01               	movlw	1
 20993  000864  2716               	addwf	_timeout_clock& (0+255),f,b
 20994  000866  0E00               	movlw	0
 20995  000868  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b
 20996  00086A  0E00               	movlw	0
 20997  00086C  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b
 20998  00086E  0E00               	movlw	0
 20999  000870  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b
 21000  000872                     
 21001                           ; BSR set to: 1
 21002                           ;main.c: 147: if (!(PORTC & 0x01)) {
 21003  000872  B082               	btfsc	3970,0,c	;volatile
 21004  000874  D001               	goto	i1u715_21
 21005  000876  D001               	goto	i1u715_20
 21006  000878                     i1u715_21:
 21007  000878  D003               	goto	i1l138
 21008  00087A                     i1u715_20:
 21009  00087A                     
 21010                           ; BSR set to: 1
 21011                           ;main.c: 149: vscp_initbtncnt++;
 21012  00087A  0100               	movlb	0	; () banked
 21013  00087C  2BB8               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21014                           
 21015                           ;main.c: 150: }
 21016  00087E  D002               	goto	i1l9162
 21017  000880                     i1l138:
 21018                           
 21019                           ; BSR set to: 1
 21020                           ;main.c: 151: else {
 21021                           ;main.c: 152: vscp_initbtncnt = 0;
 21022  000880  0100               	movlb	0	; () banked
 21023  000882  6BB8               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21024  000884                     i1l9162:
 21025                           
 21026                           ; BSR set to: 0
 21027                           ;main.c: 153: }
 21028                           ;main.c: 156: vscp_statuscnt++;
 21029  000884  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21030  000886                     
 21031                           ; BSR set to: 0
 21032                           ;main.c: 157: if ( ( 0x02 ==
 21033                           ;main.c: 158: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21034  000886  504D               	movf	_vscp_initledfunc,w,c
 21035  000888  0A02               	xorlw	2
 21036  00088A  A4D8               	btfss	status,2,c
 21037  00088C  D001               	goto	i1u716_21
 21038  00088E  D001               	goto	i1u716_20
 21039  000890                     i1u716_21:
 21040  000890  D00E               	goto	i1l9176
 21041  000892                     i1u716_20:
 21042  000892                     
 21043                           ; BSR set to: 0
 21044  000892  0E64               	movlw	100
 21045  000894  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21046  000896  D001               	goto	i1u717_21
 21047  000898  D001               	goto	i1u717_20
 21048  00089A                     i1u717_21:
 21049  00089A  D009               	goto	i1l9176
 21050  00089C                     i1u717_20:
 21051  00089C                     
 21052                           ; BSR set to: 0
 21053                           ;main.c: 159: if ( PORTC & 0x02 ) {
 21054  00089C  A282               	btfss	3970,1,c	;volatile
 21055  00089E  D001               	goto	i1u718_21
 21056  0008A0  D001               	goto	i1u718_20
 21057  0008A2                     i1u718_21:
 21058  0008A2  D002               	goto	i1l9172
 21059  0008A4                     i1u718_20:
 21060  0008A4                     i1l9170:
 21061                           
 21062                           ; BSR set to: 0
 21063                           ;main.c: 160: PORTC &= ~0x02;
 21064  0008A4  9282               	bcf	3970,1,c	;volatile
 21065                           
 21066                           ;main.c: 161: }
 21067  0008A6  D001               	goto	i1l9174
 21068  0008A8                     i1l9172:
 21069                           
 21070                           ; BSR set to: 0
 21071                           ;main.c: 162: else {
 21072                           ;main.c: 163: PORTC |= 0x02;
 21073  0008A8  8282               	bsf	3970,1,c	;volatile
 21074  0008AA                     i1l9174:
 21075                           
 21076                           ; BSR set to: 0
 21077                           ;main.c: 164: }
 21078                           ;main.c: 165: vscp_statuscnt = 0;
 21079  0008AA  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21080                           
 21081                           ;main.c: 166: }
 21082  0008AC  D00B               	goto	i1l9186
 21083  0008AE                     i1l9176:
 21084                           
 21085                           ; BSR set to: 0
 21086                           ;main.c: 167: else if (0x01 == vscp_initledfunc) {
 21087  0008AE  044D               	decf	_vscp_initledfunc,w,c
 21088  0008B0  A4D8               	btfss	status,2,c
 21089  0008B2  D001               	goto	i1u719_21
 21090  0008B4  D001               	goto	i1u719_20
 21091  0008B6                     i1u719_21:
 21092  0008B6  D001               	goto	i1l144
 21093  0008B8                     i1u719_20:
 21094  0008B8  D7F7               	goto	i1l9172
 21095  0008BA                     i1l144:
 21096                           
 21097                           ; BSR set to: 0
 21098                           ;main.c: 171: else if (0x00 == vscp_initledfunc) {
 21099  0008BA  664D               	tstfsz	_vscp_initledfunc,c
 21100  0008BC  D001               	goto	i1u720_21
 21101  0008BE  D001               	goto	i1u720_20
 21102  0008C0                     i1u720_21:
 21103  0008C0  D001               	goto	i1l9186
 21104  0008C2                     i1u720_20:
 21105  0008C2  D7F0               	goto	i1l9170
 21106  0008C4                     i1l9186:
 21107                           
 21108                           ; BSR set to: 0
 21109                           ;main.c: 174: }
 21110                           ;main.c: 176: INTCONbits.TMR0IF = 0;
 21111  0008C4  94F2               	bcf	intcon,2,c	;volatile
 21112  0008C6                     i1l9188:
 21113                           
 21114                           ;main.c: 178: }
 21115                           ;main.c: 181: if ( PIR1bits.ADIF ) {
 21116  0008C6  AC9E               	btfss	3998,6,c	;volatile
 21117  0008C8  D001               	goto	i1u721_21
 21118  0008CA  D001               	goto	i1u721_20
 21119  0008CC                     i1u721_21:
 21120  0008CC  D0E5               	goto	i1l164
 21121  0008CE                     i1u721_20:
 21122  0008CE  D0C4               	goto	i1l9250
 21123  0008D0                     i1l9192:
 21124                           
 21125                           ;main.c: 187: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21126  0008D0  5049               	movf	_adc_series_counter,w,c
 21127  0008D2  0D0C               	mullw	12
 21128  0008D4  0E9C               	movlw	low _adc
 21129  0008D6  24F3               	addwf	prodl,w,c
 21130  0008D8  6ED9               	movwf	fsr2l,c
 21131  0008DA  0E01               	movlw	high _adc
 21132  0008DC  20F4               	addwfc	prodh,w,c
 21133  0008DE  6EDA               	movwf	fsr2h,c
 21134  0008E0  CFC4 FFDF          	movff	4036,indf2	;volatile
 21135                           
 21136                           ;main.c: 188: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21137  0008E4  5049               	movf	_adc_series_counter,w,c
 21138  0008E6  0D0C               	mullw	12
 21139  0008E8  0E9D               	movlw	low (_adc+1)
 21140  0008EA  24F3               	addwf	prodl,w,c
 21141  0008EC  6ED9               	movwf	fsr2l,c
 21142  0008EE  0E01               	movlw	high (_adc+1)
 21143  0008F0  20F4               	addwfc	prodh,w,c
 21144  0008F2  6EDA               	movwf	fsr2h,c
 21145  0008F4  CFC3 FFDF          	movff	4035,indf2	;volatile
 21146  0008F8                     
 21147                           ;main.c: 190: ADCON0 = (2<<2) + 1;
 21148  0008F8  0E09               	movlw	9
 21149  0008FA  6EC2               	movwf	4034,c	;volatile
 21150  0008FC                     
 21151                           ;main.c: 194: if ((80 - 1) == adc_series_counter) {
 21152  0008FC  5049               	movf	_adc_series_counter,w,c
 21153  0008FE  0A4F               	xorlw	79
 21154  000900  A4D8               	btfss	status,2,c
 21155  000902  D001               	goto	i1u722_21
 21156  000904  D001               	goto	i1u722_20
 21157  000906                     i1u722_21:
 21158  000906  D0C5               	goto	i1l9252
 21159  000908                     i1u722_20:
 21160  000908                     
 21161                           ;main.c: 195: adc_conversion_flags |= 1;
 21162  000908  0100               	movlb	0	; () banked
 21163  00090A  81B3               	bsf	_adc_conversion_flags& (0+255),0,b
 21164  00090C  D0C2               	goto	i1l9252
 21165  00090E                     i1l9200:
 21166                           
 21167                           ;main.c: 201: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21168  00090E  5049               	movf	_adc_series_counter,w,c
 21169  000910  0D0C               	mullw	12
 21170  000912  0E9E               	movlw	low (_adc+2)
 21171  000914  24F3               	addwf	prodl,w,c
 21172  000916  6ED9               	movwf	fsr2l,c
 21173  000918  0E01               	movlw	high (_adc+2)
 21174  00091A  20F4               	addwfc	prodh,w,c
 21175  00091C  6EDA               	movwf	fsr2h,c
 21176  00091E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21177                           
 21178                           ;main.c: 202: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21179  000922  5049               	movf	_adc_series_counter,w,c
 21180  000924  0D0C               	mullw	12
 21181  000926  0E9F               	movlw	low (_adc+3)
 21182  000928  24F3               	addwf	prodl,w,c
 21183  00092A  6ED9               	movwf	fsr2l,c
 21184  00092C  0E01               	movlw	high (_adc+3)
 21185  00092E  20F4               	addwfc	prodh,w,c
 21186  000930  6EDA               	movwf	fsr2h,c
 21187  000932  CFC3 FFDF          	movff	4035,indf2	;volatile
 21188  000936                     
 21189                           ;main.c: 205: ADCON0 = (1<<2) + 1;
 21190  000936  0E05               	movlw	5
 21191  000938  6EC2               	movwf	4034,c	;volatile
 21192  00093A                     
 21193                           ;main.c: 209: if ((80 - 1) == adc_series_counter) {
 21194  00093A  5049               	movf	_adc_series_counter,w,c
 21195  00093C  0A4F               	xorlw	79
 21196  00093E  A4D8               	btfss	status,2,c
 21197  000940  D001               	goto	i1u723_21
 21198  000942  D001               	goto	i1u723_20
 21199  000944                     i1u723_21:
 21200  000944  D0A6               	goto	i1l9252
 21201  000946                     i1u723_20:
 21202  000946                     
 21203                           ;main.c: 210: adc_conversion_flags |= 1 << 1;
 21204  000946  0100               	movlb	0	; () banked
 21205  000948  83B3               	bsf	_adc_conversion_flags& (0+255),1,b
 21206  00094A  D0A3               	goto	i1l9252
 21207  00094C                     i1l9208:
 21208                           
 21209                           ;main.c: 216: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21210  00094C  5049               	movf	_adc_series_counter,w,c
 21211  00094E  0D0C               	mullw	12
 21212  000950  0EA0               	movlw	low (_adc+4)
 21213  000952  24F3               	addwf	prodl,w,c
 21214  000954  6ED9               	movwf	fsr2l,c
 21215  000956  0E01               	movlw	high (_adc+4)
 21216  000958  20F4               	addwfc	prodh,w,c
 21217  00095A  6EDA               	movwf	fsr2h,c
 21218  00095C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21219                           
 21220                           ;main.c: 217: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21221  000960  5049               	movf	_adc_series_counter,w,c
 21222  000962  0D0C               	mullw	12
 21223  000964  0EA1               	movlw	low (_adc+5)
 21224  000966  24F3               	addwf	prodl,w,c
 21225  000968  6ED9               	movwf	fsr2l,c
 21226  00096A  0E01               	movlw	high (_adc+5)
 21227  00096C  20F4               	addwfc	prodh,w,c
 21228  00096E  6EDA               	movwf	fsr2h,c
 21229  000970  CFC3 FFDF          	movff	4035,indf2	;volatile
 21230  000974                     
 21231                           ;main.c: 220: ADCON0 = (0<<2) + 1;
 21232  000974  0E01               	movlw	1
 21233  000976  6EC2               	movwf	4034,c	;volatile
 21234  000978                     
 21235                           ;main.c: 224: if ((80 - 1) == adc_series_counter) {
 21236  000978  5049               	movf	_adc_series_counter,w,c
 21237  00097A  0A4F               	xorlw	79
 21238  00097C  A4D8               	btfss	status,2,c
 21239  00097E  D001               	goto	i1u724_21
 21240  000980  D001               	goto	i1u724_20
 21241  000982                     i1u724_21:
 21242  000982  D087               	goto	i1l9252
 21243  000984                     i1u724_20:
 21244  000984                     
 21245                           ;main.c: 225: adc_conversion_flags |= 1 << 2;
 21246  000984  0100               	movlb	0	; () banked
 21247  000986  85B3               	bsf	_adc_conversion_flags& (0+255),2,b
 21248  000988  D084               	goto	i1l9252
 21249  00098A                     i1l9216:
 21250                           
 21251                           ;main.c: 231: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21252  00098A  5049               	movf	_adc_series_counter,w,c
 21253  00098C  0D0C               	mullw	12
 21254  00098E  0EA2               	movlw	low (_adc+6)
 21255  000990  24F3               	addwf	prodl,w,c
 21256  000992  6ED9               	movwf	fsr2l,c
 21257  000994  0E01               	movlw	high (_adc+6)
 21258  000996  20F4               	addwfc	prodh,w,c
 21259  000998  6EDA               	movwf	fsr2h,c
 21260  00099A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21261                           
 21262                           ;main.c: 232: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21263  00099E  5049               	movf	_adc_series_counter,w,c
 21264  0009A0  0D0C               	mullw	12
 21265  0009A2  0EA3               	movlw	low (_adc+7)
 21266  0009A4  24F3               	addwf	prodl,w,c
 21267  0009A6  6ED9               	movwf	fsr2l,c
 21268  0009A8  0E01               	movlw	high (_adc+7)
 21269  0009AA  20F4               	addwfc	prodh,w,c
 21270  0009AC  6EDA               	movwf	fsr2h,c
 21271  0009AE  CFC3 FFDF          	movff	4035,indf2	;volatile
 21272  0009B2                     
 21273                           ;main.c: 234: ADCON0 = (9<<2) + 1;
 21274  0009B2  0E25               	movlw	37
 21275  0009B4  6EC2               	movwf	4034,c	;volatile
 21276  0009B6                     
 21277                           ;main.c: 238: if ((80 - 1) == adc_series_counter) {
 21278  0009B6  5049               	movf	_adc_series_counter,w,c
 21279  0009B8  0A4F               	xorlw	79
 21280  0009BA  A4D8               	btfss	status,2,c
 21281  0009BC  D001               	goto	i1u725_21
 21282  0009BE  D001               	goto	i1u725_20
 21283  0009C0                     i1u725_21:
 21284  0009C0  D068               	goto	i1l9252
 21285  0009C2                     i1u725_20:
 21286  0009C2                     
 21287                           ;main.c: 239: adc_conversion_flags |= 1 << 3;
 21288  0009C2  0100               	movlb	0	; () banked
 21289  0009C4  87B3               	bsf	_adc_conversion_flags& (0+255),3,b
 21290  0009C6  D065               	goto	i1l9252
 21291  0009C8                     i1l9224:
 21292                           
 21293                           ;main.c: 245: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21294  0009C8  5049               	movf	_adc_series_counter,w,c
 21295  0009CA  0D0C               	mullw	12
 21296  0009CC  0EA4               	movlw	low (_adc+8)
 21297  0009CE  24F3               	addwf	prodl,w,c
 21298  0009D0  6ED9               	movwf	fsr2l,c
 21299  0009D2  0E01               	movlw	high (_adc+8)
 21300  0009D4  20F4               	addwfc	prodh,w,c
 21301  0009D6  6EDA               	movwf	fsr2h,c
 21302  0009D8  CFC4 FFDF          	movff	4036,indf2	;volatile
 21303                           
 21304                           ;main.c: 246: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21305  0009DC  5049               	movf	_adc_series_counter,w,c
 21306  0009DE  0D0C               	mullw	12
 21307  0009E0  0EA5               	movlw	low (_adc+9)
 21308  0009E2  24F3               	addwf	prodl,w,c
 21309  0009E4  6ED9               	movwf	fsr2l,c
 21310  0009E6  0E01               	movlw	high (_adc+9)
 21311  0009E8  20F4               	addwfc	prodh,w,c
 21312  0009EA  6EDA               	movwf	fsr2h,c
 21313  0009EC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21314  0009F0                     
 21315                           ;main.c: 248: ADCON0 = (8<<2) + 1;
 21316  0009F0  0E21               	movlw	33
 21317  0009F2  6EC2               	movwf	4034,c	;volatile
 21318  0009F4                     
 21319                           ;main.c: 252: if ((80 - 1) == adc_series_counter) {
 21320  0009F4  5049               	movf	_adc_series_counter,w,c
 21321  0009F6  0A4F               	xorlw	79
 21322  0009F8  A4D8               	btfss	status,2,c
 21323  0009FA  D001               	goto	i1u726_21
 21324  0009FC  D001               	goto	i1u726_20
 21325  0009FE                     i1u726_21:
 21326  0009FE  D049               	goto	i1l9252
 21327  000A00                     i1u726_20:
 21328  000A00                     
 21329                           ;main.c: 253: adc_conversion_flags |= 1 << 4;
 21330  000A00  0100               	movlb	0	; () banked
 21331  000A02  89B3               	bsf	_adc_conversion_flags& (0+255),4,b
 21332  000A04  D046               	goto	i1l9252
 21333  000A06                     i1l9232:
 21334                           
 21335                           ;main.c: 259: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21336  000A06  5049               	movf	_adc_series_counter,w,c
 21337  000A08  0D0C               	mullw	12
 21338  000A0A  0EA6               	movlw	low (_adc+10)
 21339  000A0C  24F3               	addwf	prodl,w,c
 21340  000A0E  6ED9               	movwf	fsr2l,c
 21341  000A10  0E01               	movlw	high (_adc+10)
 21342  000A12  20F4               	addwfc	prodh,w,c
 21343  000A14  6EDA               	movwf	fsr2h,c
 21344  000A16  CFC4 FFDF          	movff	4036,indf2	;volatile
 21345                           
 21346                           ;main.c: 260: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21347  000A1A  5049               	movf	_adc_series_counter,w,c
 21348  000A1C  0D0C               	mullw	12
 21349  000A1E  0EA7               	movlw	low (_adc+11)
 21350  000A20  24F3               	addwf	prodl,w,c
 21351  000A22  6ED9               	movwf	fsr2l,c
 21352  000A24  0E01               	movlw	high (_adc+11)
 21353  000A26  20F4               	addwfc	prodh,w,c
 21354  000A28  6EDA               	movwf	fsr2h,c
 21355  000A2A  CFC3 FFDF          	movff	4035,indf2	;volatile
 21356  000A2E                     
 21357                           ;main.c: 262: ADCON0 = (10<<2) + 1;
 21358  000A2E  0E29               	movlw	41
 21359  000A30  6EC2               	movwf	4034,c	;volatile
 21360  000A32                     
 21361                           ;main.c: 266: if ((80 - 1) == adc_series_counter) {
 21362  000A32  5049               	movf	_adc_series_counter,w,c
 21363  000A34  0A4F               	xorlw	79
 21364  000A36  A4D8               	btfss	status,2,c
 21365  000A38  D001               	goto	i1u727_21
 21366  000A3A  D001               	goto	i1u727_20
 21367  000A3C                     i1u727_21:
 21368  000A3C  D002               	goto	i1l161
 21369  000A3E                     i1u727_20:
 21370  000A3E                     
 21371                           ;main.c: 267: adc_conversion_flags |= 1 << 5;
 21372  000A3E  0100               	movlb	0	; () banked
 21373  000A40  8BB3               	bsf	_adc_conversion_flags& (0+255),5,b
 21374  000A42                     i1l161:
 21375                           
 21376                           ;main.c: 268: }
 21377                           ;main.c: 271: adc_series_counter++;
 21378  000A42  2A49               	incf	_adc_series_counter,f,c
 21379  000A44                     
 21380                           ;main.c: 272: if (adc_series_counter >= 80) {
 21381  000A44  0E4F               	movlw	79
 21382  000A46  6449               	cpfsgt	_adc_series_counter,c
 21383  000A48  D001               	goto	i1u728_21
 21384  000A4A  D001               	goto	i1u728_20
 21385  000A4C                     i1u728_21:
 21386  000A4C  D022               	goto	i1l9252
 21387  000A4E                     i1u728_20:
 21388  000A4E                     i1l9242:
 21389                           
 21390                           ;main.c: 273: adc_series_counter = 0;
 21391  000A4E  6A49               	clrf	_adc_series_counter,c
 21392  000A50  D020               	goto	i1l9252
 21393  000A52                     i1l9244:
 21394                           
 21395                           ;main.c: 279: ADCON0 = (10<<2) + 1;
 21396  000A52  0E29               	movlw	41
 21397  000A54  6EC2               	movwf	4034,c	;volatile
 21398  000A56  D7FB               	goto	i1l9242
 21399  000A58                     i1l9250:
 21400  000A58  50C2               	movf	4034,w,c	;volatile
 21401  000A5A  0B3C               	andlw	60
 21402  000A5C  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21403  000A5E  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21404                           
 21405                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21406                           ; Switch size 1, requested type "speed"
 21407                           ; Number of cases is 1, Range of values is 0 to 0
 21408                           ; switch strategies available:
 21409                           ; Name         Instructions Cycles
 21410                           ; simple_byte            4     3 (average)
 21411                           ;	Chosen strategy is simple_byte
 21412  000A60  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21413  000A62  0A00               	xorlw	0	; case 0
 21414  000A64  B4D8               	btfsc	status,2,c
 21415  000A66  D001               	goto	i1l12242
 21416  000A68  D7F4               	goto	i1l9244
 21417  000A6A                     i1l12242:
 21418                           
 21419                           ; Switch size 1, requested type "speed"
 21420                           ; Number of cases is 6, Range of values is 0 to 40
 21421                           ; switch strategies available:
 21422                           ; Name         Instructions Cycles
 21423                           ; simple_byte           19    10 (average)
 21424                           ;	Chosen strategy is simple_byte
 21425  000A6A  5005               	movf	??_interrupt_at_low_vector,w,c
 21426  000A6C  0A00               	xorlw	0	; case 0
 21427  000A6E  B4D8               	btfsc	status,2,c
 21428  000A70  D78C               	goto	i1l9216
 21429  000A72  0A04               	xorlw	4	; case 4
 21430  000A74  B4D8               	btfsc	status,2,c
 21431  000A76  D76A               	goto	i1l9208
 21432  000A78  0A0C               	xorlw	12	; case 8
 21433  000A7A  B4D8               	btfsc	status,2,c
 21434  000A7C  D748               	goto	i1l9200
 21435  000A7E  0A28               	xorlw	40	; case 32
 21436  000A80  B4D8               	btfsc	status,2,c
 21437  000A82  D7C1               	goto	i1l9232
 21438  000A84  0A04               	xorlw	4	; case 36
 21439  000A86  B4D8               	btfsc	status,2,c
 21440  000A88  D79F               	goto	i1l9224
 21441  000A8A  0A0C               	xorlw	12	; case 40
 21442  000A8C  B4D8               	btfsc	status,2,c
 21443  000A8E  D720               	goto	i1l9192
 21444  000A90  D7E0               	goto	i1l9244
 21445  000A92                     i1l9252:
 21446                           
 21447                           ;main.c: 285: ConvertADC();
 21448  000A92  ECD7  F02E         	call	i1_ConvertADC	;wreg free
 21449  000A96                     
 21450                           ;main.c: 287: PIR1bits.ADIF = 0;
 21451  000A96  9C9E               	bcf	3998,6,c	;volatile
 21452  000A98                     i1l164:
 21453  000A98  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21454  000A9C  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21455  000AA0  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21456  000AA4  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21457  000AA8  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21458  000AAC  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21459  000AB0  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21460  000AB4  0010               	retfie	
 21461  000AB6                     __end_of_interrupt_at_low_vector:
 21462                           	opt stack 0
 21463                           tblptru	equ	0xFF8
 21464                           tblptrh	equ	0xFF7
 21465                           tblptrl	equ	0xFF6
 21466                           tablat	equ	0xFF5
 21467                           prodh	equ	0xFF4
 21468                           prodl	equ	0xFF3
 21469                           intcon	equ	0xFF2
 21470                           postinc0	equ	0xFEE
 21471                           wreg	equ	0xFE8
 21472                           indf1	equ	0xFE7
 21473                           postdec1	equ	0xFE5
 21474                           fsr1h	equ	0xFE2
 21475                           fsr1l	equ	0xFE1
 21476                           bsr	equ	0xFE0
 21477                           indf2	equ	0xFDF
 21478                           postinc2	equ	0xFDE
 21479                           postdec2	equ	0xFDD
 21480                           plusw2	equ	0xFDB
 21481                           fsr2h	equ	0xFDA
 21482                           fsr2l	equ	0xFD9
 21483                           status	equ	0xFD8
 21484                           
 21485 ;; *************** function i1_WriteTimer0 *****************
 21486 ;; Defined at:
 21487 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21488 ;; Parameters:    Size  Location     Type
 21489 ;;  timer0          2    0[COMRAM] unsigned int 
 21490 ;; Auto vars:     Size  Location     Type
 21491 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21492 ;; Return value:  Size  Location     Type
 21493 ;;		None               void
 21494 ;; Registers used:
 21495 ;;		None
 21496 ;; Tracked objects:
 21497 ;;		On entry : 0/0
 21498 ;;		On exit  : 0/0
 21499 ;;		Unchanged: 0/0
 21500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21501 ;;      Params:         2       0       0       0       0       0       0
 21502 ;;      Locals:         2       0       0       0       0       0       0
 21503 ;;      Temps:          0       0       0       0       0       0       0
 21504 ;;      Totals:         4       0       0       0       0       0       0
 21505 ;;Total ram usage:        4 bytes
 21506 ;; Hardware stack levels used:    1
 21507 ;; This function calls:
 21508 ;;		Nothing
 21509 ;; This function is called by:
 21510 ;;		_interrupt_at_low_vector
 21511 ;; This function uses a non-reentrant model
 21512 ;;
 21513                           
 21514                           	psect	text100
 21515  005D50                     __ptext100:
 21516                           	opt stack 0
 21517  005D50                     i1_WriteTimer0:
 21518                           	opt stack 22
 21519                           
 21520                           ;incstack = 0
 21521                           ;incstack = 0
 21522  005D50  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21523  005D54  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21524  005D58  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21525  005D5C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21526  005D60  0012               	return	
 21527  005D62                     __end_ofi1_WriteTimer0:
 21528                           	opt stack 0
 21529                           tblptru	equ	0xFF8
 21530                           tblptrh	equ	0xFF7
 21531                           tblptrl	equ	0xFF6
 21532                           tablat	equ	0xFF5
 21533                           prodh	equ	0xFF4
 21534                           prodl	equ	0xFF3
 21535                           intcon	equ	0xFF2
 21536                           postinc0	equ	0xFEE
 21537                           wreg	equ	0xFE8
 21538                           indf1	equ	0xFE7
 21539                           postdec1	equ	0xFE5
 21540                           fsr1h	equ	0xFE2
 21541                           fsr1l	equ	0xFE1
 21542                           bsr	equ	0xFE0
 21543                           indf2	equ	0xFDF
 21544                           postinc2	equ	0xFDE
 21545                           postdec2	equ	0xFDD
 21546                           plusw2	equ	0xFDB
 21547                           fsr2h	equ	0xFDA
 21548                           fsr2l	equ	0xFD9
 21549                           status	equ	0xFD8
 21550                           
 21551 ;; *************** function i1_ConvertADC *****************
 21552 ;; Defined at:
 21553 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21554 ;; Parameters:    Size  Location     Type
 21555 ;;		None
 21556 ;; Auto vars:     Size  Location     Type
 21557 ;;		None
 21558 ;; Return value:  Size  Location     Type
 21559 ;;		None               void
 21560 ;; Registers used:
 21561 ;;		None
 21562 ;; Tracked objects:
 21563 ;;		On entry : 0/0
 21564 ;;		On exit  : 0/0
 21565 ;;		Unchanged: 0/0
 21566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21567 ;;      Params:         0       0       0       0       0       0       0
 21568 ;;      Locals:         0       0       0       0       0       0       0
 21569 ;;      Temps:          0       0       0       0       0       0       0
 21570 ;;      Totals:         0       0       0       0       0       0       0
 21571 ;;Total ram usage:        0 bytes
 21572 ;; Hardware stack levels used:    1
 21573 ;; This function calls:
 21574 ;;		Nothing
 21575 ;; This function is called by:
 21576 ;;		_interrupt_at_low_vector
 21577 ;; This function uses a non-reentrant model
 21578 ;;
 21579                           
 21580                           	psect	text101
 21581  005DAE                     __ptext101:
 21582                           	opt stack 0
 21583  005DAE                     i1_ConvertADC:
 21584                           	opt stack 22
 21585                           
 21586                           ;incstack = 0
 21587                           ;incstack = 0
 21588  005DAE  82C2               	bsf	4034,1,c	;volatile
 21589  005DB0  0012               	return	
 21590  005DB2                     __end_ofi1_ConvertADC:
 21591                           	opt stack 0
 21592                           tblptru	equ	0xFF8
 21593                           tblptrh	equ	0xFF7
 21594                           tblptrl	equ	0xFF6
 21595                           tablat	equ	0xFF5
 21596                           prodh	equ	0xFF4
 21597                           prodl	equ	0xFF3
 21598                           intcon	equ	0xFF2
 21599                           postinc0	equ	0xFEE
 21600                           wreg	equ	0xFE8
 21601                           indf1	equ	0xFE7
 21602                           postdec1	equ	0xFE5
 21603                           fsr1h	equ	0xFE2
 21604                           fsr1l	equ	0xFE1
 21605                           bsr	equ	0xFE0
 21606                           indf2	equ	0xFDF
 21607                           postinc2	equ	0xFDE
 21608                           postdec2	equ	0xFDD
 21609                           plusw2	equ	0xFDB
 21610                           fsr2h	equ	0xFDA
 21611                           fsr2l	equ	0xFD9
 21612                           status	equ	0xFD8
 21613                           tblptru	equ	0xFF8
 21614                           tblptrh	equ	0xFF7
 21615                           tblptrl	equ	0xFF6
 21616                           tablat	equ	0xFF5
 21617                           prodh	equ	0xFF4
 21618                           prodl	equ	0xFF3
 21619                           intcon	equ	0xFF2
 21620                           postinc0	equ	0xFEE
 21621                           wreg	equ	0xFE8
 21622                           indf1	equ	0xFE7
 21623                           postdec1	equ	0xFE5
 21624                           fsr1h	equ	0xFE2
 21625                           fsr1l	equ	0xFE1
 21626                           bsr	equ	0xFE0
 21627                           indf2	equ	0xFDF
 21628                           postinc2	equ	0xFDE
 21629                           postdec2	equ	0xFDD
 21630                           plusw2	equ	0xFDB
 21631                           fsr2h	equ	0xFDA
 21632                           fsr2l	equ	0xFD9
 21633                           status	equ	0xFD8
 21634                           
 21635                           	psect	text102
 21636  000000                     __ptext102:
 21637                           	opt stack 0
 21638                           tblptru	equ	0xFF8
 21639                           tblptrh	equ	0xFF7
 21640                           tblptrl	equ	0xFF6
 21641                           tablat	equ	0xFF5
 21642                           prodh	equ	0xFF4
 21643                           prodl	equ	0xFF3
 21644                           intcon	equ	0xFF2
 21645                           postinc0	equ	0xFEE
 21646                           wreg	equ	0xFE8
 21647                           indf1	equ	0xFE7
 21648                           postdec1	equ	0xFE5
 21649                           fsr1h	equ	0xFE2
 21650                           fsr1l	equ	0xFE1
 21651                           bsr	equ	0xFE0
 21652                           indf2	equ	0xFDF
 21653                           postinc2	equ	0xFDE
 21654                           postdec2	equ	0xFDD
 21655                           plusw2	equ	0xFDB
 21656                           fsr2h	equ	0xFDA
 21657                           fsr2l	equ	0xFD9
 21658                           status	equ	0xFD8
 21659                           
 21660                           	psect	rparam
 21661  0000                     tblptru	equ	0xFF8
 21662                           tblptrh	equ	0xFF7
 21663                           tblptrl	equ	0xFF6
 21664                           tablat	equ	0xFF5
 21665                           prodh	equ	0xFF4
 21666                           prodl	equ	0xFF3
 21667                           intcon	equ	0xFF2
 21668                           postinc0	equ	0xFEE
 21669                           wreg	equ	0xFE8
 21670                           indf1	equ	0xFE7
 21671                           postdec1	equ	0xFE5
 21672                           fsr1h	equ	0xFE2
 21673                           fsr1l	equ	0xFE1
 21674                           bsr	equ	0xFE0
 21675                           indf2	equ	0xFDF
 21676                           postinc2	equ	0xFDE
 21677                           postdec2	equ	0xFDD
 21678                           plusw2	equ	0xFDB
 21679                           fsr2h	equ	0xFDA
 21680                           fsr2l	equ	0xFD9
 21681                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     83     119
    BANK1           256     54     156
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	 size(2) Largest target is 0

    ?_eval_poly	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	 size(2) Largest target is 0

    ?___flneg	 size(2) Largest target is 0

    ?___asflmul	 size(2) Largest target is 0

    ?___flpack	 size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readAppReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   93267
                                             82 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   34702
                                             68 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   10599
                                             39 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             39 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             37 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   26960
                                             31 BANK0     27    27      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7784
                                             51 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    3152
                                             33 COMRAM    18    17      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1890
                                             20 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             18 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      9C       7       60.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     53      77       5       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165       3        0.0%
DATA                 0      0     530      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar 24 15:47:14 2015

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 31DE  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 4DD0  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0014  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 4948  
                          ___asflsub@f1p 007E                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 5978                              __CFG_WDT$ON 000000  
                                    l201 1D80                                      l208 20CE  
                                    l224 2316                                      l321 2B4E  
                                    l410 2ED8                                      l323 2B5A  
                                    l315 2B2A                                      l317 2B36  
                                    l253 4E5A                                      l245 3C1A  
                                    l319 2B42                                      l183 47F2  
                                    l168 4784                                      l177 47C8  
                                    l522 1532                                      l519 14E4  
                                    l295 52F4                                      l640 5A06  
                                    l552 5BD0                                      l635 58C0  
                                    l629 53A2                                      l831 4130  
                                    l823 4098                                      l825 40B6  
                                    l594 5CA0                                      l851 38AE  
                                    l843 3A12                                      l836 383E  
                                    l853 38C2                                      l918 5B18  
                                    l846 390C                       vscp_readStdReg@reg 0014  
                                    l855 38D6                                      l847 388C  
                                    l857 38E6                                      l849 389A  
                                    l890 4294                                      l867 397A  
                                    l859 38F6                                      l868 399E  
                                    l885 4544                                      l895 5410  
         __size_of_vscp_handleProbeState 00C4                         setEventData@ival 0083  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 4AE2  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 007E                                      _adc 019C  
                                    _exp 3C1C                                      _log 4546  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0074  
                           ___flmul@sign 0075                            ___flpack@sign 0013  
                           ___fltol@exp1 007B                                     l1031 5752  
                                   l1103 561A                                     l1107 5C26  
                                   l1211 33A4                                     l1036 5B8C  
                                   l1301 54E6                                     l1054 4ACC  
                                   l1046 4ADC                                     l1055 4AAC  
                                   l1047 4A66                                     l1090 59DA  
                                   l1315 5C08                                     l1083 5B68  
                                   l1147 5BAE                                     l1235 353C  
                                   l1316 5C0A                                     l1236 3550  
                                   l1237 3592                                     l1094 5A5A  
                                   l1246 35CE                                     l1270 3804  
                                   l1079 584E                                     l1089 59CE  
                                   l1177 3FC6                                     l1540 4BF4  
                                   l1620 4A1C                                     l1605 4F26  
                                   l1613 5564                                     l1278 5A84  
                                   l1614 5582                                     l1535 4BB0  
                                   l1536 4C60                                     l1561 3DFE  
                                   l1546 4C22                                     l1564 3CCA  
                                   l1573 42B8                                     l1565 3DEE  
                                   l1574 43F4                                     l1654 46A8  
                                   l1655 476E                                     l1577 42E0  
                                   l1657 475E                                     l1682 5224  
                                   l1666 5108                                     l1588 4370  
                                   l1853 4672                                     l1686 4FCA  
                __end_of_doOneSecondWork 3C1C                vscp_getManufacturerId@idx 0012  
                                   ?_exp 0099                                     ?_log 0081  
                                   l8142 5346                                     l8154 59E4  
                                   l8066 5C2E                                     l8430 53BC  
                                   l8334 3920                                     l8158 59E8  
                                   l9126 5AA6                                     l9118 5A90  
                                   l8440 53E6                                     l8432 53C6  
                                   l8344 3940                                     l8434 53D0  
                                   l8426 53AA                                     l8370 39CC  
                                   l8362 39A0                                     l8282 386C  
                                   l8266 382C                                     l8290 387A  
                                   l8436 53DA                                     l8428 53B2  
                                   l8444 53F2                                     l8276 3856  
                                   l8284 3876                                     l8438 53E0  
                                   l8384 39FC                                     l8458 41C6  
                                   l8378 39E6                                     l8396 5CAE  
                                   l9620 4A40                                     l9622 4A48  
                                   l9606 4A20                                     l9710 323E  
                                   l9640 4A82                                     l9570 298C  
                                   l9556 5B78                                     l9644 4A86  
                                   l9804 3370                                     l9724 3246  
                                   l9708 3238                                     l9646 4A8A  
                                   l9822 33D6                                     l9832 3438  
                                   l9816 33A8                                     l9744 326C  
                                   l9914 3530                                     l9826 33EE  
                                   l9818 33C6                                     l9690 3200  
                                   l9682 31E8                                     l9676 4AD0  
                                   l9836 344E                                     l9852 347E  
                                   l9684 31EE                                     l9950 3586  
                                   l9942 3576                                     l9934 3558  
                                   l9870 34D4                                     l9854 3480  
                                   l9774 32D4                                     l9758 3278  
                                   l9686 31F4                                     l9960 3594  
                                   l9864 34A4                                     l9856 348A  
                                   l9784 3308                                     l9688 31FA  
                                   l9946 357E                                     l9882 34F0  
                                   l9794 333C                                     l9964 35AE  
                                   l9986 35D6                                     l9898 3510  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5450 5396                                     u5455 538C  
                                   u5625 3834                                     u5627 3836  
                                   u8244 3A8E                                     u8245 3A8A  
                                   u9135 4430                                     u5945 4174  
                                   u9145 4456                                     u5955 4194  
                                   u9155 4480                                     u5965 41E2  
                                   u8294 3B58                                     u8295 3B54  
                         sendCANFrame@rv 0042                                     u9620 3F2A  
                                   u8760 3DB2                                     u9625 3F20  
                                   u9650 3F8C                                     u8780 455A  
                                   u9655 3F82                                     u8995 4D5A  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 4770                                     _init 58C8  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0099                                     log@x 0081  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0B6E                              _vscp_minute 00B9  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0AB6  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 3E00  
                            _writeEEPROM 5AFC                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 54EA  
                        _sh_coefficients 011E                     __end_of_getVSCPFrame 53A4  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 59AC  
                   __size_of_getCANFrame 002C                                    l10000 35FE  
                                  l10010 3620                                    l10022 3646  
                                  l10120 5314                                    l10112 52D0  
                                  l11010 5BBC                                    l10050 36CC  
                                  l10042 369A                                    l10018 3642  
                                  l10122 5320                                    l10060 36EC  
                                  l10116 5300                                    l10108 52AC  
                                  l10220 55FA                                    l10046 36B0  
                                  l10038 367A                                    l10134 3A20  
                                  l10214 55F0                                    l10072 3742  
                                  l10160 3AF0                                    l10144 3A64  
                                  l10224 5602                                    l11122 40B8  
                                  l11106 405C                                    l11202 5846  
                                  l10162 3AFA                                    l10410 3C6E  
                                  l11116 409C                                    l10068 371A  
                                  l10172 3B48                                    l10404 3C3A  
                                  l12020 4852                                    l10510 5798  
                                  l11142 4122                                    l11070 5892  
                                  l11310 4918                                    l11302 4900  
                                  l10094 37A2                                    l10430 3DBC  
                                  l10414 3C98                                    l12014 483A  
                                  l10600 2BF0                                    l11128 40E6  
                                  l11136 4100                                    l11320 493A  
                                  l12112 1F5A                                    l12024 485A  
                                  _B0CON 000E20                                    l10610 2C2C  
                                  l10602 2BFC                                    l11146 4126  
                                  l11074 58BC                                    l11314 4924  
                                  l11306 490C                                    l11322 4944  
                                  l11410 3FAC                                    l11402 3F94  
                                  l10186 3BBA                                    l10442 4564  
                                  l12114 1F74                                    l12106 1E92  
                                  l12042 18D2                                    l12034 18A8  
                                  l10700 2DD0                                    l10620 2C68  
                                  l10612 2C38                                    l10604 2C08  
                                  l10532 4FD6                                    l11164 446C  
                                  l11148 4128                                    l11260 4880  
                                  l11420 3FC8                                    l10188 3BC4  
                                  l11500 5712                                    l10710 2E0C  
                                  l10702 2DDC                                    l10630 2CA4  
                                  l10622 2C74                                    l10614 2C44  
                                  l10606 2C14                                    l10550 2AD0  
                                  l11430 4BC6                                    l10526 4FD0  
                                  l11094 4032                                    l11246 5C20  
                                  l11334 5BA4                                    l10198 3C12  
                                  l12150 219C                                    l12134 2072  
                                  l10720 2E48                                    l10712 2E18  
                                  l10704 2DE8                                    l10640 2CE0  
                                  l10632 2CB0                                    l10624 2C80  
                                  l10616 2C50                                    l10608 2C20  
                                  l10560 2B0C                                    l10552 2ADC  
                                  l11440 4C16                                    l11432 4BDE  
                                  l11088 4022                                    l11280 48B8  
                                  l11272 48A0                                    l11264 488A  
                                  l11256 4876                                    l10800 0C80  
                                  l11352 3E4A                                    l11520 42F2  
                                  l11600 4EBE                                    l12152 21B6  
                                  l12136 207C                                    _B1CON 000E30  
                                  l10730 2E84                                    l10722 2E54  
                                  l10714 2E24                                    l10706 2DF4  
                                  l10650 2D1C                                    l10642 2CEC  
                                  l10634 2CBC                                    l10626 2C8C  
                                  l10618 2C5C                                    l10570 2B48  
                                  l10562 2B18                                    l10554 2AE8  
                                  l11290 48DE                                    l10810 0D0C  
                                  l10802 0C9C                                    l11370 3E9E  
                                  l11346 3E2A                                    l11514 42CA  
                                  l10490 4E3E                                    l10740 2EC0  
                                  l10732 2E90                                    l10724 2E60  
                                  l10716 2E30                                    l10708 2E00  
                                  l10660 2D58                                    l10652 2D28  
                                  l10644 2CF8                                    l10636 2CC8  
                                  l10628 2C98                                    l10580 2B78  
                                  l10572 2B54                                    l10564 2B24  
                                  l10556 2AF4                                    l10548 2AC4  
                                  l11428 4BBA                                    l11284 48C8  
                                  l11276 48AC                                    l11268 4894  
                                  l10900 11DA                                    l10820 0D98  
                                  l10812 0D28                                    l10804 0CB8  
                                  l12172 22B0                                    l12092 1E60  
                                  l10742 2ECC                                    l10734 2E9C  
                                  l10726 2E6C                                    l10718 2E3C  
                                  l10662 2D64                                    l10654 2D34  
                                  l10646 2D04                                    l10638 2CD4  
                                  l10590 2BB4                                    l10582 2B84  
                                  l10566 2B30                                    l10558 2B00  
                                  l10750 2EF4                                    l11438 4C0A  
                                  l11294 48EA                                    l10910 125C  
                                  l10902 11F4                                    l10830 0E24  
                                  l10822 0DB4                                    l10814 0D44  
                                  l10806 0CD4                                    l11382 3ED2  
                                  l11366 3E84                                    l11358 3E66  
                                  l11542 4328                                    l10486 4E06  
                                  l11470 4CAC                                    l12174 22BA  
                                  l12094 1E7A                                    l10744 2EDC  
                                  l10736 2EA8                                    l10728 2E78  
                                  l10656 2D40                                    l10648 2D10  
                                  l10592 2BC0                                    l10584 2B90  
                                  l10576 2B60                                    l10568 2B3C  
                                  l10752 317E                                    l11640 4994  
                                  l11624 4956                                    l10920 12DE  
                                  l10912 1276                                    l10904 120E  
                                  l10840 0EB0                                    l10832 0E40  
                                  l10824 0DD0                                    l10816 0D60  
                                  l10808 0CF0                                    l11392 3F34  
                                  l11368 3E88                                    l11560 4386  
                                  l11544 4334                                    l11536 430C  
                                  l11608 4EEC                                    l11472 4CB8  
                                  l11464 4C94                                    l12184 230C  
                                  _B2CON 000E40                                    l10770 31C2  
                                  l10746 2EE8                                    l10738 2EB4  
                                  l10690 2D94                                    l10658 2D4C  
                                  l10594 2BCC                                    l10586 2B9C  
                                  l10578 2B6C                                    l11298 48F6  
                                  l10930 1360                                    l10922 12F8  
                                  l10914 1290                                    l10906 1228  
                                  l10850 0F3C                                    l10842 0ECC  
                                  l10834 0E5C                                    l10826 0DEC  
                                  l10818 0D7C                                    l11554 435E  
                                  l11546 433C                                    l11810 50D4  
                                  l11802 50BC                                    l11706 4B0E  
                                  l11722 4F68                                    l11490 4D0C  
                                  l11482 4CEA                                    l11474 4CBC  
                                  l11458 4C7C                                    l10692 2DA0  
                                  l10684 2D70                                    l10596 2BD8  
                                  l10588 2BA8                                    l11652 49C4  
                                  l11644 49A8                                    l11628 496C  
                                  l10940 13E2                                    l10932 137A  
                                  l10924 1312                                    l10916 12AA  
                                  l10908 1242                                    l10860 0FC8  
                                  l10852 0F58                                    l10844 0EE8  
                                  l10836 0E78                                    l10828 0E08  
                                  l11572 43C8                                    l11564 439C  
                                  l11556 436A                                    l11548 4342  
                                  l11812 50E0                                    l11708 4B88  
                                  l11732 4F86                                    l10766 31B0  
                                  l10758 319C                                    l10694 2DAC  
                                  l10686 2D7C                                    l10598 2BE4  
                                  l10774 31DA                                    l10950 1464  
                                  l10942 13FC                                    l10934 1394  
                                  l10926 132C                                    l10918 12C4  
                                  l10870 1054                                    l10862 0FE4  
                                  l10854 0F74                                    l10846 0F04  
                                  l10838 0E94                                    l10790 0BF4  
                                  l10782 0B84                                    l11814 50E4  
                                  l11806 50CC                                    l11486 4CF8  
                                  l10768 31B2                                    l10696 2DB8  
                                  l10688 2D88                                    l11656 49D8  
                                  l11680 594E                                    l10960 14FE  
                                  l10952 147E                                    l10944 1416  
                                  l10936 13AE                                    l10928 1346  
                                  l10880 10D6                                    l10872 106E  
                                  l10864 1000                                    l10856 0F90  
                                  l10848 0F20                                    l10792 0C10  
                                  l10784 0BA0                                    l11584 4E8C  
                                  l11752 5580                                    l11736 4F92  
                                  l11760 5B34                                    _B3CON 000E50  
                                  l10698 2DC4                                    l10962 1518  
                                  l10954 1498                                    l10946 1430  
                                  l10938 13C8                                    l10890 1158  
                                  l10882 10F0                                    l10874 1088  
                                  l10866 101C                                    l10858 0FAC  
                                  l10794 0C2C                                    l10786 0BBC  
                                  l11746 554E                                    l11818 50F8  
                                  l10964 1536                                    l10956 14B2  
                                  l10948 144A                                    l10892 1172  
                                  l10884 110A                                    l10876 10A2  
                                  l10868 1038                                    l10796 0C48  
                                  l10788 0BD8                                    l10972 156E  
                                  l11588 4EA0                                    l11772 51C6  
                                  l10990 182E                                    l10982 181A  
                                  l10966 1550                                    l10958 14CC  
                                  l10894 118C                                    l10886 1124  
                                  l10878 10BC                                    l10798 0C64  
                                  l10974 17E2                                    l11694 46B2  
                                  l10992 1830                                    l10968 156A  
                                  l10896 11A6                                    l10888 113E  
                                  _B4CON 000E60                                    l10994 1840  
                                  l10898 11C0                                    l11786 5078  
                                  l11698 46CE            __size_of_vscp_getMajorVersion 0002  
                                  l11788 5082                                    l11972 47B8  
                                  l11964 47A6                                    l10998 186C  
                                  l11990 47EC                                    l11974 47BC  
                                  l11984 47D8                                    l11976 47C2  
                                  l11968 47AE                                    _B5CON 000E70  
                                  l11994 47F6                                    l11996 480E  
             __end_of_vscp_goActiveState 5BF0                            ___fltol@sign1 007A  
                        __end_of___aldiv 4D1E            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 43F6  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4F28  
                          i1_WriteTimer0 5D50                          __end_of___flneg 5B46  
                                  _EEADR 000FA9                          __end_of___lbmod 5AAE  
                        __end_of___flmul 4A1E                          __end_of___flsub 588C  
                        __end_of___fltol 510A                  _vscp_handleDropNickname 59AC  
                                  _BSEL0 000DF8                                    u10040 4E96  
                                  u10070 4962                                    u10170 4F5E  
                                  u10260 50A0                                    _T0CON 000FD5  
                                  u10265 5096                                    u10524 1EA4  
                                  u10444 18BA                                    u10525 1EA0  
                                  u10445 18B6                                    u10624 20DE  
                                  u10625 20DA                                    u10554 1F6A  
                                  u10555 1F66                                    u10654 21AC  
                                  u10574 2000                                    u10494 1E72  
                                  u10655 21A8                                    u10575 1FFC  
                                  u10495 1E6E                                    u10674 223E  
                                  u10675 223A                                    i1l144 08BA  
                                  i1l161 0A42                                    i1l138 0880  
                                  i1l164 0A98                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 5D94  
             _vscp_readNicknamePermanent 5D8A                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 007F  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001E                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 52AA                             _vscp_getGUID 5CE2  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 4674                                    _ldexp 4F28  
                           _vscp_getZone 5D6C                                    _frexp 51A0  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 5DB2  
                 __size_of_vscp_getEvent 002A                                    main@i 00B2  
                             _ConvertADC 5DAA                             _vscp_setGUID 5BB0  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 5DB8  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 5AFC                              exp@exponent 00A1  
                            ldexp@newexp 0085                     _ECANSetOperationMode 5CA2  
                        __initialization 57D0                              log@exponent 0043  
                           __end_of_main 4864                             __end_of_init 5904  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0818  
                        ?_Celsius2Kelvin 002C                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 31DE                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 016A                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 008F  
                                 ?_ldexp 0081                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 5740  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 4C62  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 5978                          __CFG_BBSIZ$2048 000000  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0032  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 5BF0  
                                 i1l9200 090E                                   i1l9210 0974  
                                 i1l9202 0936                                   i1l9220 09B6  
                                 i1l9212 0978                                   i1l9204 093A  
                                 i1l9230 0A00                                   i1l9222 09C2  
                                 i1l9214 0984                                   i1l9206 0946  
                                 i1l9150 0848                                   i1l9240 0A44  
                                 i1l9232 0A06                                   i1l9224 09C8  
                                 i1l9216 098A                                   i1l9208 094C  
                                 i1l9160 087A                                   i1l9152 084E  
                                 i1l9242 0A4E                                   i1l9234 0A2E  
                                 i1l9226 09F0                                   i1l9218 09B2  
                                 i1l9250 0A58                                   i1l9170 08A4  
                                 i1l9162 0884                                   i1l9154 0852  
                                 i1l9146 0834                                   i1l9244 0A52  
                                 i1l9236 0A32                                   i1l9228 09F4  
                                 i1l9252 0A92                                   i1l9172 08A8  
                                 i1l9164 0886                                   i1l9156 0862  
                                 i1l9148 083C                                   i1l9254 0A96  
                                 i1l9238 0A3E                                   i1l9174 08AA  
                                 i1l9166 0892                                   i1l9158 0872  
                                 i1l9192 08D0                                   i1l9168 089C  
                                 i1l9176 08AE                                   i1l9194 08F8  
                                 i1l9186 08C4                                   i1l9196 08FC  
                                 i1l9188 08C6                                   i1l9198 0908  
                        _init_app_eeprom 2318                         __end_of___lwtofl 5A32  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                         __CFG_WDTPS$128 000000                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5A32  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1167 0088                                   ___flge 5538  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0025                                   ___wmul 5904  
                              ??___fldiv 0034                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0042                                ??___flsub 0042  
                              ??___fltol 0042                            _vscp_getEvent 5A5C  
                                 _doWork 1870                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 0012  
                    vscp_writeAppReg@reg 0023               __end_of_vscp_setSegmentCRC 5D1A  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 57D8                                   clear_1 57EA  
                                 clear_2 57F6                                   clear_3 5802  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0096  
                                 floor@i 0093                                   floor@x 008F  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00BA  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0021  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004A  
                     __size_of___asflmul 004C                               ___fladd@f1 001D  
                             ___fladd@f2 0021                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0B48                         __end_oflog@coeff 0B6C  
                        ___lbmod@divisor 000E                               ___altofl@c 008A  
                             ___fldiv@f1 002C                               ___fldiv@f2 0030  
                             ___fldiv@f3 003B                               __accesstop 0060  
                __end_of__initialization 5808                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 541A                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 0060  
                             ___flmul@f2 0064                             eval_poly@res 007D  
                             ___flsub@f1 0076                               ___flsub@f2 007A  
                             ___fltol@f1 0076                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 5B8E  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 5B8E  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 4770                            __end_of_ldexp 4FCC  
                          __end_of_frexp 5226                      ?_vscp_writeRegister 0034  
                         ??_sendCANFrame 0042                               ___lwtofl@c 0018  
             __end_of_vscp_getFamilyCode 5D8A                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 020E             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 5D80  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0034  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1870  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 2AB6  
                   ??_Celsius2Fahrenheit 0042              __end_of_vscp_setControlByte 5D08  
               __end_of_vscp_writeStdReg 3FCC                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 007C  
                   ??_vscp_writeRegister 0035          __end_of_vscp_handleDropNickname 59DC  
                           _getVSCPFrame 532C                               __pbssBANK0 00B3  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00C0               __end_of_vscp_getBufferSize 5DB6  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0035  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 4FCC  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5DBA  
               ECANSetOperationMode@mode 000E                                  ?___wmul 0012  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                           doWork@setpoint 0195  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 56B0                        __end_of___asfldiv 5666  
                       WriteTimer0@timer 0010                                ?___altofl 008A  
                      __end_of___asflmul 55D0                                  _ECANCON 000F77  
                      __end_of___asflsub 5538                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 018C  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 0064  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 0018  
                    vscp_writeStdReg@idx 0030                      vscp_writeStdReg@reg 0033  
           __end_of_vscp_doOneSecondWork 561C                                  i1l12242 0A6A  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B4  
        __end_of_interrupt_at_low_vector 0AB6                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 4A1E                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 53A4               __end_of_vscp_getMatrixInfo 5C42  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0046  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 007C                       _vscp_goActiveState 5BD2  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 5DBE  
                     __size_of_vscp_init 0048                vscp_writeStdReg@code_1147 002C  
                             _readEEPROM 5D1A                   _vscp_getManufacturerId 5CBA  
                 _vscp_setManufacturerId 5C42                          _ECANSendMessage 3FCC  
                    ?_vscp_goActiveState 0001                                  _OpenADC 548E  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 0030                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 5D9E  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
               vscp_writeStdReg@idx_1148 0031        __end_of_vscp_getRegisterPagesUsed 5DB4  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 4C62  
                        __size_of___flge 004C                                  ___fladd 4296  
                                ___fldiv 4E80                                  ___flneg 5B22  
                                ___lbmod 5A86                                  ___flmul 4948  
                                ___flsub 5850                                  ___fltol 506C  
                        __size_of___wmul 003A                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0AA8                             __psmallconst 0B00  
                             ??___altofl 0046                     __end_of_init_app_ram 57D0  
                             ??___flpack 0014                       _vscp_sendHeartBeat 5AD6  
                                __pcinit 57D0                               ??___awtofl 001C  
                         _vscp_deviceURL 0B00                        __end_of_eval_poly 4BA2  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 4770                                  __ptext1 1870  
                                __ptext2 5A08                                  __ptext3 561C  
                                __ptext4 5666                                  __ptext5 4C62  
                                __ptext6 56B0                                  __ptext7 4546  
                                __ptext8 3C1C                                  __ptext9 5B22  
                             ??___lwtofl 001C                           _vscp_getUserID 5CCE  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E4                             __size_of_log 012E  
                  vscp_writeStdReg@value 0022                         ___aldiv@dividend 007C  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 00B6                                  doWork@B 018A  
                                doWork@i 019B                                  doWork@j 0190  
                                doWork@v 0186                      __end_of_WriteTimer0 5D50  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 0014  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 5808  
                                exp@sign 00A3             __end_of_vscp_handleHeartbeat 5850  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 506C                     __end_of_sendCANFrame 58C8  
                             doWork@Rinf 0166                       doOneSecondWork@tmp 0089  
                             doWork@temp 0197                vscp_handleProtocolEvent@i 0098  
              vscp_handleProtocolEvent@j 0099                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 5AAE  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0086                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 0084                           _vscp_setUserID 5C5A  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0B20  
    __end_of_vscp_writeNicknamePermanent 5D3E              _vscp_writeNicknamePermanent 5D2C  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 4D1E  
                 __end_of_vscp_getUserID 5CE2             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 5788  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 5A08  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0087                 __size_of_vscp_readAppReg 0728  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 0040                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 00E4                       _vscp_setSegmentCRC 5D08  
                      readEEPROM@address 000E                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 4132  
                      vscp_readStdReg@rv 0013                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 4296                      _getCalibrationValue 56B0  
                            ?_readEEPROM 000E                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 5AD6                               _vscp_error 5DA6  
                   _vscp_doOneSecondWork 55D0                       i1WriteTimer0@timer 0003  
                             _vscp_timer 011C                   __end_of_vscp_setUserID 5C72  
               __size_of_doOneSecondWork 0208                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 4E80                           ?_sendVSCPFrame 0060  
                         __end_of___flge 5584                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 593E                          ?_vscp_getUserID 0001  
                         __end_of_doWork 2318             __end_of_vscp_getMinorVersion 5DBC  
                            _WriteTimer0 5D3E                     _vscp_getMajorVersion 5DBC  
                     __end_of_ConvertADC 5DAE                     ?_getCalibrationValue 0012  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                      ?_vscp_writeAppReg 0021                      start_initialization 57D0  
                             eval_poly@d 007A                               eval_poly@n 007B  
                             eval_poly@x 0076                               ldexp@value 0081  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 3E00  
                            __end_of_log 4674                       ??_vscp_writeAppReg 0022  
                          _sendTempEvent 5226                        ?_vscp_writeStdReg 0022  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 0023  
                     _vscp_getFamilyCode 5D80                      __end_of_handle_sync 532C  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5D76  
                             frexp@value 000E                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 5C0E  
                   Celsius2Fahrenheit@tc 0076                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 3806  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0048                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0017                        ??_vscp_getSubzone 0012  
                               ??___flge 0016                 __end_of__ECANPointBuffer 541A  
                      __CANIDToRegs@type 0014                              _getCANFrame 59DC  
                               ??___wmul 0016                                 ??_doWork 00A4  
                     _vscp_getBufferSize 5DB4              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 3A14  
                    ??_vscp_readRegister 0015           __size_of_vscp_goBootloaderMode 0018  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 0014  
                  __end_ofi1_WriteTimer0 5D62            __end_of_vscp_goBootloaderMode 5CA2  
                   _vscp_handleHeartbeat 5812                       __end_of_OpenTimer0 5C0E  
                      __size_of___altofl 0048                        __size_of___flpack 00C0  
                              ___asfladd 5666                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0012  
                              ___asfldiv 561C                              __pbssBIGRAM 019C  
                              ___asflmul 5584                                ___asflsub 54EA  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 0166                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004B              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 003C  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5DB2                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0012                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5C28                             _init_app_ram 5788  
                   getCalibrationValue@i 0019                              _doWork$2270 016E  
                            _doWork$2271 0172                              _doWork$2272 0176  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0191  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0013  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5C28  
                 _vscp_handleSetNickname 5B46            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 510A  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext100 5D50  
                              __ptext101 5DAE                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 0012                              __pintcodelo 0818  
                      ??_doOneSecondWork 0087                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1157 008F               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 588C                              __smallconst 0B00  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                       _vscp_getSegmentCRC 5D94  
                         ??_vscp_getGUID 0012                                _eval_poly 4AE2  
                            _handle_sync 52AA                           ??_vscp_getZone 0012  
         __end_of_vscp_getManufacturerId 5CCE           __end_of_vscp_setManufacturerId 5C5A  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1156 008E  
                         __size_of_floor 00FC                           __size_of_ldexp 00A4  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011A                     vscp_writeStdReg@code 0028  
                        ___aldiv@divisor 0080                          ___aldiv@counter 0084  
                         ___wmul@product 0016                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 5DBA                                _sendTimer 004A  
                               _PIE1bits 000F9D                                _low_alarm 00B5  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 51A0  
                               i1u720_20 08C2                                 i1u720_21 08C0  
                               i1u721_20 08CE                                 i1u721_21 08CC  
                               i1u722_20 0908                                 i1u714_20 083C  
                               i1u722_21 0906                                 i1u714_21 083A  
                               i1u723_20 0946                                 i1u715_20 087A  
                               i1u723_21 0944                                 i1u715_21 0878  
                               i1u724_20 0984                                 i1u716_20 0892  
                               i1u724_21 0982                                 i1u716_21 0890  
                               i1u725_20 09C2                                 i1u717_20 089C  
                               i1u725_21 09C0                                 i1u717_21 089A  
                               i1u726_20 0A00                                 i1u718_20 08A4  
                               i1u726_21 09FE                                 i1u718_21 08A2  
                               i1u727_20 0A3E                                 i1u719_20 08B8  
                               i1u727_21 0A3C                                 i1u719_21 08B6  
                               i1u728_20 0A4E                                 i1u728_21 0A4C  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 5A86                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 0012                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 4546  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0012  
                           __RegsToCANID 4132                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0085              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0076                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 5740                                _vscp_imsg 00BC  
                              _vscp_hour 00B7                                _vscp_omsg 00CA  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 0628  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4DD0               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0112                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0010                 __size_of_init_app_eeprom 079E  
           __end_of_vscp_restoreDefaults 5DA6                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 0012  
                        _vscp_getMDF_URL 5C72                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0160  
                       __size_of___fldiv 00A8                         __size_of___flneg 0024  
                       _vscp_initledfunc 004D                         __size_of___lbmod 0028  
                       __size_of___flmul 00D6                   ??_vscp_handleHeartbeat 0012  
                       __size_of___flsub 003C                         __size_of___fltol 009E  
                               ___altofl 56F8                                 ___flpack 4BA2  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 593E                         getCANFrame@pdata 0021  
                               ___lwtofl 5A08                           sendTempEvent@i 0086  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0032  
                            ??___asfldiv 0042                              ??___asflmul 0042  
                               _exp$2276 009D                              ??___asflsub 0042  
                     __end_of_readEEPROM 5D2C                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4F28  
                               __ptext11 4AE2                                 __ptext20 4E80  
                               __ptext12 4674                                 __ptext21 55D0  
                               __ptext13 506C                                 __ptext30 541A  
                               __ptext22 5AD6                                 __ptext14 51A0  
                               __ptext31 4296                                 __ptext23 5D62  
                               __ptext15 5538                                 __ptext40 5D80  
                               __ptext32 5978                                 __ptext24 5D6C  
                               __ptext16 56F8                                 __ptext41 5C42  
                               __ptext33 31DE                                 __ptext25 3A14  
                               __ptext17 54EA                                 __ptext50 5CBA  
                               __ptext42 5C5A                                 __ptext34 5A86  
                               __ptext26 5DA6                                 __ptext18 5850  
                               __ptext51 5CCE                                 __ptext43 5BB0  
                               __ptext35 5B8E                                 __ptext27 52AA  
                               __ptext19 5584                                 __ptext60 5D8A  
                               __ptext52 5C72                                 __ptext44 0B6E  
                               __ptext36 3E00                                 __ptext28 5226  
                               __ptext61 5B46                                 __ptext53 5CE2  
                               __ptext45 5C0E                                 __ptext37 5D9E  
                               __ptext29 4DD0                                 __ptext70 3FCC  
                               __ptext62 5812                                 __ptext54 5DB8  
                               __ptext46 4864                                 __ptext38 2318  
                               __ptext71 43F6                                 __ptext63 5C8A  
                               __ptext55 5DBA                                 __ptext47 5DB2  
                               __ptext39 5D76                                 __ptext80 5D08  
                               __ptext72 5A5C                                 __ptext64 5C28  
                               __ptext56 5DBC                                 __ptext48 5DB4  
                               __ptext81 5D94                                 __ptext73 532C  
                               __ptext65 4A1E                                 __ptext57 5A32  
                               __ptext49 5DB6                                 __ptext90 5788  
                               __ptext82 5D1A                                 __ptext74 59DC  
                               __ptext66 5BD2                                 __ptext58 59AC  
                               __ptext91 4FCC                                 __ptext83 5D2C  
                               __ptext75 3806                                 __ptext67 5AAE  
                               __ptext59 5740                                 __ptext92 5904  
                               __ptext84 5AFC                                 __ptext76 4132  
                               __ptext68 4D1E                                 __ptext93 5DAA  
                               __ptext85 58C8                                 __ptext77 53A4  
                               __ptext69 588C                                 __ptext94 5D3E  
                               __ptext86 510A                                 __ptext78 5B6A  
                               __ptext95 593E                                 __ptext87 5CA2  
                               __ptext79 5CF6                                 __ptext96 4948  
                               __ptext88 548E                                 __ptext97 4BA2  
                               __ptext89 5BF0                                 __ptext98 2AB6  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5D62                         ??_vscp_setUserID 0012  
                          __size_of_main 00F4                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0D02                      _vscp_check_pstorage 5B6A  
                          init_app_ram@i 0021           vscp_handleProtocolEvent@i_1155 0095  
         vscp_handleProtocolEvent@i_1158 0097           vscp_handleProtocolEvent@i_1166 0092  
                       doOneSecondWork@i 008A                     __end_of_vscp_getGUID 5CF6  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 01CC  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5D76                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 5BD2                       vscp_readAppReg@reg 0013  
                     vscp_readAppReg@pos 0012                             i1_ConvertADC 5DAE  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                         init_app_eeprom@i 0011  
                    _vscp_setControlByte 5CF6                                 exp@coeff 0B20  
                  ___flmul@f3_as_product 0070                                 log@coeff 0B48  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 2AB6  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 0012  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004C  
                        _vscp_readStdReg 4864             vscp_handleDropNickname@bytes 0012  
             __end_of_vscp_newNodeOnline 5A5C                       _ECANReceiveMessage 3806  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00B8  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5C8A                     ?_vscp_setControlByte 0001  
                          _timeout_clock 0116                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00BB                             handle_sync@i 0089  
                        _doOneSecondWork 3A14                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 56F8  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 0150                           readEEPROM@data 0011  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 5DB8              _vscp_getBootLoaderAlgorithm 5DB6  
       __size_of_interrupt_at_low_vector 029E                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 5B22                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0012  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5C8A  
             __end_of_Celsius2Fahrenheit 548E             __end_of_ECANSetOperationMode 5CBA  
                   _vscp_restoreDefaults 5D9E              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0012                  __end_of_vscp_getSubzone 5D6C  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0085                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 5BB0                       __end_of_vscp_error 5DAA  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B3  
         __end_of_vscp_handleSetNickname 5B6A       vscp_handleProtocolEvent@bytes_1163 0094  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 0015  
                           ___fladd@exp1 002B                             ___fladd@exp2 002A  
                           ___fladd@sign 0029                             __CANIDToRegs 43F6  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 002C              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002E                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 0062  

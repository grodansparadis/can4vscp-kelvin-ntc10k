

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 26 00:12:14 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000B00                     __psmallconst:
   122                           	opt stack 0
   123  000B00                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000B00  77                 	db	119
   126  000B01  77                 	db	119
   127  000B02  77                 	db	119
   128  000B03  2E                 	db	46
   129  000B04  65                 	db	101
   130  000B05  75                 	db	117
   131  000B06  72                 	db	114
   132  000B07  6F                 	db	111
   133  000B08  73                 	db	115
   134  000B09  6F                 	db	111
   135  000B0A  75                 	db	117
   136  000B0B  72                 	db	114
   137  000B0C  63                 	db	99
   138  000B0D  65                 	db	101
   139  000B0E  2E                 	db	46
   140  000B0F  73                 	db	115
   141  000B10  65                 	db	101
   142  000B11  2F                 	db	47
   143  000B12  6E                 	db	110
   144  000B13  74                 	db	116
   145  000B14  63                 	db	99
   146  000B15  31                 	db	49
   147  000B16  30                 	db	48
   148  000B17  4B                 	db	75
   149  000B18  41                 	db	65
   150  000B19  5F                 	db	95
   151  000B1A  33                 	db	51
   152  000B1B  2E                 	db	46
   153  000B1C  78                 	db	120
   154  000B1D  6D                 	db	109
   155  000B1E  6C                 	db	108
   156  000B1F  00                 	db	0
   157  000B20                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000B20                     exp@coeff:
   160                           	opt stack 0
   161  000B20  0000               	dw	0
   162  000B22  3F80               	dw	16256
   163  000B24  7218               	dw	29208
   164  000B26  3F31               	dw	16177
   165  000B28  FDF0               	dw	65008
   166  000B2A  3E75               	dw	15989
   167  000B2C  5847               	dw	22599
   168  000B2E  3D63               	dw	15715
   169  000B30  9558               	dw	38232
   170  000B32  3C1D               	dw	15389
   171  000B34  C482               	dw	50306
   172  000B36  3AAE               	dw	15022
   173  000B38  78A8               	dw	30888
   174  000B3A  3921               	dw	14625
   175  000B3C  93EF               	dw	37871
   176  000B3E  3780               	dw	14208
   177  000B40  92A0               	dw	37536
   178  000B42  35A7               	dw	13735
   179  000B44  5646               	dw	22086
   180  000B46  3415               	dw	13333
   181  000B48                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000B48                     log@coeff:
   184                           	opt stack 0
   185  000B48  0000               	dw	0
   186  000B4A  0000               	dw	0
   187  000B4C  FFC4               	dw	65476
   188  000B4E  3F7F               	dw	16255
   189  000B50  EF80               	dw	61312
   190  000B52  BEFF               	dw	48895
   191  000B54  E190               	dw	57744
   192  000B56  3EA9               	dw	16041
   193  000B58  82EC               	dw	33516
   194  000B5A  BE76               	dw	48758
   195  000B5C  AD82               	dw	44418
   196  000B5E  3E2B               	dw	15915
   197  000B60  3C0E               	dw	15374
   198  000B62  BDC3               	dw	48579
   199  000B64  D187               	dw	53639
   200  000B66  3D13               	dw	15635
   201  000B68  7841               	dw	30785
   202  000B6A  BBD3               	dw	48083
   203  000B6C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  000B6C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  00573E                     __pcinit:
   305                           	opt stack 0
   306  00573E                     start_initialization:
   307                           	opt stack 0
   308  00573E                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  00573E  EE01  F0A6         	lfsr	0,__pbssBIGRAM
   313  005742  EE13 F0C0          	lfsr	1,960
   314  005746                     clear_0:
   315  005746  6AEE               	clrf	postinc0,c
   316  005748  50E5               	movf	postdec1,w,c
   317  00574A  50E1               	movf	fsr1l,w,c
   318  00574C  E1FC               	bnz	clear_0
   319  00574E  50E2               	movf	fsr1h,w,c
   320  005750  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (114 bytes)
   323  005752  EE01  F000         	lfsr	0,__pbssBANK1
   324  005756  0E72               	movlw	114
   325  005758                     clear_1:
   326  005758  6AEE               	clrf	postinc0,c
   327  00575A  06E8               	decf	wreg,f,c
   328  00575C  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (25 bytes)
   331  00575E  EE00  F0BF         	lfsr	0,__pbssBANK0
   332  005762  0E19               	movlw	25
   333  005764                     clear_2:
   334  005764  6AEE               	clrf	postinc0,c
   335  005766  06E8               	decf	wreg,f,c
   336  005768  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  00576A  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  00576E  0E0D               	movlw	13
   341  005770                     clear_3:
   342  005770  6AEE               	clrf	postinc0,c
   343  005772  06E8               	decf	wreg,f,c
   344  005774  E1FD               	bnz	clear_3
   345  005776                     end_of_initialization:
   346                           	opt stack 0
   347  005776                     __end_of__initialization:
   348                           	opt stack 0
   349  005776  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  005778  6EF8               	movwf	tblptru,c
   351  00577A  0100               	movlb	0
   352  00577C  EF70  F022         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _vscp_alarmstatus:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_guid_reset:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_initledfunc:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_minute:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000BF                     __pbssBANK0:
   408                           	opt stack 0
   409  0000BF                     _vscp_configtimer:
   410                           	opt stack 0
   411  0000BF                     	ds	2
   412  0000C1                     _vscp_timer:
   413                           	opt stack 0
   414  0000C1                     	ds	2
   415  0000C3                     _adc_conversion_flags:
   416                           	opt stack 0
   417  0000C3                     	ds	1
   418  0000C4                     _high_alarm:
   419                           	opt stack 0
   420  0000C4                     	ds	1
   421  0000C5                     _low_alarm:
   422                           	opt stack 0
   423  0000C5                     	ds	1
   424  0000C6                     _seconds:
   425                           	opt stack 0
   426  0000C6                     	ds	1
   427  0000C7                     _vscp_hour:
   428                           	opt stack 0
   429  0000C7                     	ds	1
   430  0000C8                     _vscp_initbtncnt:
   431                           	opt stack 0
   432  0000C8                     	ds	1
   433  0000C9                     _vscp_nickname:
   434                           	opt stack 0
   435  0000C9                     	ds	1
   436  0000CA                     _vscp_node_state:
   437                           	opt stack 0
   438  0000CA                     	ds	1
   439  0000CB                     _vscp_omsg:
   440                           	opt stack 0
   441  0000CB                     	ds	13
   442                           tblptru	equ	0xFF8
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1h	equ	0xFE2
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	bssBANK1
   450  000100                     __pbssBANK1:
   451                           	opt stack 0
   452  000100                     _current_temp:
   453                           	opt stack 0
   454  000100                     	ds	12
   455  00010C                     _seconds_temp:
   456                           	opt stack 0
   457  00010C                     	ds	6
   458  000112                     _measurement_clock:
   459                           	opt stack 0
   460  000112                     	ds	4
   461  000116                     _timeout_clock:
   462                           	opt stack 0
   463  000116                     	ds	4
   464  00011A                     _sendTimer:
   465                           	opt stack 0
   466  00011A                     	ds	2
   467  00011C                     _sh_coefficients:
   468                           	opt stack 0
   469  00011C                     	ds	72
   470  000164                     _vscp_imsg:
   471                           	opt stack 0
   472  000164                     	ds	14
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  0001A6                     __pbssBIGRAM:
   482                           	opt stack 0
   483  0001A6                     _adc:
   484                           	opt stack 0
   485  0001A6                     	ds	960
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK1
   494  000172                     __pcstackBANK1:
   495                           	opt stack 0
   496  000172                     doWork@Rinf:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x0
   500  000172                     	ds	4
   501  000176                     doWork@calVoltage:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  000176                     	ds	4
   506  00017A                     _doWork$2276:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x8
   510  00017A                     	ds	4
   511  00017E                     _doWork$2277:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xC
   515  00017E                     	ds	4
   516  000182                     _doWork$2278:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x10
   520  000182                     	ds	16
   521  000192                     doWork@v:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x20
   525  000192                     	ds	4
   526  000196                     doWork@B:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x24
   530  000196                     	ds	2
   531  000198                     doWork@resistance:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x26
   535  000198                     	ds	4
   536  00019C                     doWork@j:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x2A
   540  00019C                     	ds	1
   541  00019D                     doWork@avarage:
   542                           	opt stack 0
   543                           
   544                           ; 4 bytes @ 0x2B
   545  00019D                     	ds	4
   546  0001A1                     doWork@temp:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x2F
   550  0001A1                     	ds	4
   551  0001A5                     doWork@i:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x33
   555  0001A5                     	ds	1
   556                           tblptru	equ	0xFF8
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	cstackBANK0
   564  000060                     __pcstackBANK0:
   565                           	opt stack 0
   566  000060                     ?_sendVSCPFrame:
   567                           	opt stack 0
   568  000060                     ?___fldiv:
   569                           	opt stack 0
   570  000060                     sendVSCPFrame@vscpclass:
   571                           	opt stack 0
   572  000060                     ___fldiv@f1:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x0
   576  000060                     	ds	2
   577  000062                     sendVSCPFrame@vscptype:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x2
   581  000062                     	ds	1
   582  000063                     sendVSCPFrame@nodeid:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x3
   586  000063                     	ds	1
   587  000064                     sendVSCPFrame@priority:
   588                           	opt stack 0
   589  000064                     ___fldiv@f2:
   590                           	opt stack 0
   591                           
   592                           ; 4 bytes @ 0x4
   593  000064                     	ds	1
   594  000065                     sendVSCPFrame@size:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x5
   598  000065                     	ds	1
   599  000066                     sendVSCPFrame@pData:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x6
   603  000066                     	ds	1
   604  000067                     ??_sendVSCPFrame:
   605                           
   606                           ; 0 bytes @ 0x7
   607  000067                     	ds	1
   608  000068                     ?___flmul:
   609                           	opt stack 0
   610  000068                     ?___asfldiv:
   611                           	opt stack 0
   612  000068                     ___asfldiv@f1p:
   613                           	opt stack 0
   614  000068                     ___flmul@f1:
   615                           	opt stack 0
   616                           
   617                           ; 4 bytes @ 0x8
   618  000068                     	ds	2
   619  00006A                     ___asfldiv@f2:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0xA
   623  00006A                     	ds	2
   624  00006C                     ___flmul@f2:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0xC
   628  00006C                     	ds	11
   629  000077                     ___flmul@exp:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x17
   633  000077                     	ds	1
   634  000078                     ___flmul@f3_as_product:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x18
   638  000078                     	ds	3
   639  00007B                     sendVSCPFrame@id:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x1B
   643  00007B                     	ds	1
   644  00007C                     ___flmul@cntr:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x1C
   648  00007C                     	ds	1
   649  00007D                     ___flmul@sign:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x1D
   653  00007D                     	ds	1
   654  00007E                     ?_Celsius2Fahrenheit:
   655                           	opt stack 0
   656  00007E                     ?_eval_poly:
   657                           	opt stack 0
   658  00007E                     ?___asflmul:
   659                           	opt stack 0
   660  00007E                     ?___fltol:
   661                           	opt stack 0
   662  00007E                     Celsius2Fahrenheit@tc:
   663                           	opt stack 0
   664  00007E                     ___asflmul@multiplicand:
   665                           	opt stack 0
   666  00007E                     ___fltol@f1:
   667                           	opt stack 0
   668  00007E                     eval_poly@x:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x1E
   672  00007E                     	ds	1
   673  00007F                     ??_vscp_handleProtocolEvent:
   674  00007F                     ??_vscp_doOneSecondWork:
   675                           
   676                           ; 0 bytes @ 0x1F
   677  00007F                     	ds	3
   678  000082                     ??___fltol:
   679  000082                     eval_poly@d:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x22
   683  000082                     	ds	1
   684  000083                     eval_poly@n:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x23
   688  000083                     	ds	2
   689  000085                     eval_poly@res:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x25
   693  000085                     	ds	1
   694  000086                     ?_setEventData:
   695                           	opt stack 0
   696  000086                     ?___aldiv:
   697                           	opt stack 0
   698  000086                     setEventData@v:
   699                           	opt stack 0
   700  000086                     vscp_handleProtocolEvent@page_save:
   701                           	opt stack 0
   702  000086                     ___aldiv@dividend:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x26
   706  000086                     	ds	2
   707  000088                     setEventData@unit:
   708                           	opt stack 0
   709  000088                     vscp_handleProtocolEvent@page_save_1174:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x28
   713  000088                     	ds	1
   714  000089                     ?_log:
   715                           	opt stack 0
   716  000089                     ?_ldexp:
   717                           	opt stack 0
   718  000089                     setEventData@newval:
   719                           	opt stack 0
   720  000089                     ldexp@value:
   721                           	opt stack 0
   722  000089                     log@x:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x29
   726  000089                     	ds	1
   727  00008A                     vscp_handleProtocolEvent@offset:
   728                           	opt stack 0
   729  00008A                     ___aldiv@divisor:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x2A
   733  00008A                     	ds	1
   734  00008B                     vscp_handleProtocolEvent@pos:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x2B
   738  00008B                     	ds	1
   739  00008C                     vscp_handleProtocolEvent@bytes:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x2C
   743  00008C                     	ds	1
   744  00008D                     vscp_handleProtocolEvent@len:
   745                           	opt stack 0
   746  00008D                     setEventData@ival:
   747                           	opt stack 0
   748  00008D                     ldexp@newexp:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x2D
   752  00008D                     	ds	1
   753  00008E                     vscp_handleProtocolEvent@pos_1163:
   754                           	opt stack 0
   755  00008E                     ___aldiv@counter:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x2E
   759  00008E                     	ds	1
   760  00008F                     ??_ldexp:
   761  00008F                     sendTempEvent@i:
   762                           	opt stack 0
   763  00008F                     vscp_handleProtocolEvent@len_1164:
   764                           	opt stack 0
   765  00008F                     ___aldiv@sign:
   766                           	opt stack 0
   767                           
   768                           ; 1 bytes @ 0x2F
   769  00008F                     	ds	1
   770  000090                     ??_handle_sync:
   771  000090                     ??_doOneSecondWork:
   772  000090                     vscp_handleProtocolEvent@bytes_this_time:
   773                           	opt stack 0
   774  000090                     ___aldiv@quotient:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x30
   778  000090                     	ds	1
   779  000091                     vscp_handleProtocolEvent@cb:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x31
   783  000091                     	ds	1
   784  000092                     handle_sync@i:
   785                           	opt stack 0
   786  000092                     vscp_handleProtocolEvent@i_1173:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x32
   790  000092                     	ds	1
   791  000093                     vscp_handleProtocolEvent@k:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x33
   795  000093                     	ds	1
   796  000094                     ?___altofl:
   797                           	opt stack 0
   798  000094                     vscp_handleProtocolEvent@i_1162:
   799                           	opt stack 0
   800  000094                     ___altofl@c:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x34
   804  000094                     	ds	1
   805  000095                     vscp_handleProtocolEvent@byte:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x35
   809  000095                     	ds	1
   810  000096                     vscp_handleProtocolEvent@bytes_1169:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x36
   814  000096                     	ds	1
   815  000097                     doOneSecondWork@tmp:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x37
   819  000097                     	ds	1
   820  000098                     ?_floor:
   821                           	opt stack 0
   822  000098                     vscp_handleProtocolEvent@i_1165:
   823                           	opt stack 0
   824  000098                     doOneSecondWork@setpoint:
   825                           	opt stack 0
   826  000098                     floor@x:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x38
   830  000098                     	ds	1
   831  000099                     vscp_handleProtocolEvent@i:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x39
   835  000099                     	ds	1
   836  00009A                     doOneSecondWork@i:
   837                           	opt stack 0
   838  00009A                     vscp_handleProtocolEvent@j:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x3A
   842  00009A                     	ds	2
   843  00009C                     floor@i:
   844                           	opt stack 0
   845                           
   846                           ; 4 bytes @ 0x3C
   847  00009C                     	ds	4
   848  0000A0                     floor@expon:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x40
   852  0000A0                     	ds	2
   853  0000A2                     ?_exp:
   854                           	opt stack 0
   855  0000A2                     exp@x:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0x42
   859  0000A2                     	ds	4
   860  0000A6                     _exp$2282:
   861                           	opt stack 0
   862                           
   863                           ; 4 bytes @ 0x46
   864  0000A6                     	ds	4
   865  0000AA                     exp@exponent:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x4A
   869  0000AA                     	ds	2
   870  0000AC                     exp@sign:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x4C
   874  0000AC                     	ds	1
   875  0000AD                     ??_doWork:
   876                           
   877                           ; 0 bytes @ 0x4D
   878  0000AD                     	ds	14
   879  0000BB                     main@i:
   880                           	opt stack 0
   881                           
   882                           ; 4 bytes @ 0x5B
   883  0000BB                     	ds	4
   884                           tblptru	equ	0xFF8
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1h	equ	0xFE2
   889                           fsr1l	equ	0xFE1
   890                           
   891                           	psect	cstackCOMRAM
   892  000001                     __pcstackCOMRAM:
   893                           	opt stack 0
   894  000001                     ?i1_WriteTimer0:
   895                           	opt stack 0
   896  000001                     i1WriteTimer0@timer0:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x0
   900  000001                     	ds	2
   901  000003                     i1WriteTimer0@timer:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0x2
   905  000003                     	ds	2
   906  000005                     ??_interrupt_at_low_vector:
   907                           
   908                           ; 0 bytes @ 0x4
   909  000005                     	ds	9
   910  00000E                     ?_WriteTimer0:
   911                           	opt stack 0
   912  00000E                     ?_writeEEPROM:
   913                           	opt stack 0
   914  00000E                     ?_OpenADC:
   915                           	opt stack 0
   916  00000E                     ?__CANIDToRegs:
   917                           	opt stack 0
   918  00000E                     ?__RegsToCANID:
   919                           	opt stack 0
   920  00000E                     ??_vscp_getMDF_URL:
   921  00000E                     ?___flge:
   922                           	opt stack 0
   923  00000E                     ?___lbmod:
   924                           	opt stack 0
   925  00000E                     ?__ECANPointBuffer:
   926                           	opt stack 0
   927  00000E                     ?___wmul:
   928                           	opt stack 0
   929  00000E                     ?___flpack:
   930                           	opt stack 0
   931  00000E                     ?_frexp:
   932                           	opt stack 0
   933  00000E                     ?_vscp_getFamilyCode:
   934                           	opt stack 0
   935  00000E                     ?_vscp_getFamilyType:
   936                           	opt stack 0
   937  00000E                     ?___flneg:
   938                           	opt stack 0
   939  00000E                     init_app_ram@i:
   940                           	opt stack 0
   941  00000E                     vscp_getMatrixInfo@pData:
   942                           	opt stack 0
   943  00000E                     ECANSetOperationMode@mode:
   944                           	opt stack 0
   945  00000E                     OpenADC@config2:
   946                           	opt stack 0
   947  00000E                     OpenTimer0@config:
   948                           	opt stack 0
   949  00000E                     ___lbmod@divisor:
   950                           	opt stack 0
   951  00000E                     __CANIDToRegs@ptr:
   952                           	opt stack 0
   953  00000E                     __RegsToCANID@ptr:
   954                           	opt stack 0
   955  00000E                     writeEEPROM@address:
   956                           	opt stack 0
   957  00000E                     WriteTimer0@timer0:
   958                           	opt stack 0
   959  00000E                     ___wmul@multiplier:
   960                           	opt stack 0
   961  00000E                     ___flpack@arg:
   962                           	opt stack 0
   963  00000E                     ___flge@ff1:
   964                           	opt stack 0
   965  00000E                     ___flneg@f1:
   966                           	opt stack 0
   967  00000E                     frexp@value:
   968                           	opt stack 0
   969                           
   970                           ; 4 bytes @ 0xD
   971  00000E                     	ds	1
   972  00000F                     vscp_getMDF_URL@idx:
   973                           	opt stack 0
   974  00000F                     vscp_getMatrixInfo@i:
   975                           	opt stack 0
   976  00000F                     OpenADC@portconfig:
   977                           	opt stack 0
   978  00000F                     ___lbmod@dividend:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0xE
   982  00000F                     	ds	1
   983  000010                     ??_OpenADC:
   984  000010                     __RegsToCANID@val:
   985                           	opt stack 0
   986  000010                     writeEEPROM@data:
   987                           	opt stack 0
   988  000010                     ___lbmod@counter:
   989                           	opt stack 0
   990  000010                     WriteTimer0@timer:
   991                           	opt stack 0
   992  000010                     ___wmul@multiplicand:
   993                           	opt stack 0
   994  000010                     __CANIDToRegs@val:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0xF
   998  000010                     	ds	1
   999  000011                     ?_vscp_setGUID:
  1000                           	opt stack 0
  1001  000011                     ?_vscp_setUserID:
  1002                           	opt stack 0
  1003  000011                     ?_vscp_setManufacturerId:
  1004                           	opt stack 0
  1005  000011                     vscp_setGUID@data:
  1006                           	opt stack 0
  1007  000011                     vscp_setUserID@data:
  1008                           	opt stack 0
  1009  000011                     vscp_setManufacturerId@data:
  1010                           	opt stack 0
  1011  000011                     vscp_goBootloaderMode@algorithm:
  1012                           	opt stack 0
  1013  000011                     vscp_writeNicknamePermanent@nickname:
  1014                           	opt stack 0
  1015  000011                     vscp_setSegmentCRC@crc:
  1016                           	opt stack 0
  1017  000011                     vscp_setControlByte@ctrl:
  1018                           	opt stack 0
  1019  000011                     __RegsToCANID@type:
  1020                           	opt stack 0
  1021  000011                     __ECANPointBuffer@b:
  1022                           	opt stack 0
  1023  000011                     ___lbmod@rem:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x10
  1027  000011                     	ds	1
  1028  000012                     ??__RegsToCANID:
  1029  000012                     vscp_setGUID@idx:
  1030                           	opt stack 0
  1031  000012                     vscp_setUserID@idx:
  1032                           	opt stack 0
  1033  000012                     vscp_setManufacturerId@idx:
  1034                           	opt stack 0
  1035  000012                     OpenADC@config:
  1036                           	opt stack 0
  1037  000012                     ___flpack@exp:
  1038                           	opt stack 0
  1039  000012                     __ECANPointBuffer@pt:
  1040                           	opt stack 0
  1041  000012                     frexp@eptr:
  1042                           	opt stack 0
  1043  000012                     ___flge@ff2:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x11
  1047  000012                     	ds	1
  1048  000013                     ___flpack@sign:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x12
  1052  000013                     	ds	1
  1053  000014                     ??___flpack:
  1054  000014                     ??_frexp:
  1055  000014                     __CANIDToRegs@type:
  1056                           	opt stack 0
  1057  000014                     __RegsToCANID@Value:
  1058                           	opt stack 0
  1059  000014                     ___wmul@product:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x13
  1063  000014                     	ds	1
  1064  000015                     ??__CANIDToRegs:
  1065  000015                     ?_ECANReceiveMessage:
  1066                           	opt stack 0
  1067  000015                     ECANReceiveMessage@data:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x14
  1071  000015                     	ds	1
  1072  000016                     ?_readEEPROM:
  1073                           	opt stack 0
  1074  000016                     readEEPROM@address:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x15
  1078  000016                     	ds	1
  1079  000017                     __CANIDToRegs@Value:
  1080                           	opt stack 0
  1081  000017                     ECANReceiveMessage@dataLen:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x16
  1085  000017                     	ds	1
  1086  000018                     ?_ECANSendMessage:
  1087                           	opt stack 0
  1088  000018                     ?___awtofl:
  1089                           	opt stack 0
  1090  000018                     ___awtofl@c:
  1091                           	opt stack 0
  1092  000018                     ECANSendMessage@id:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x17
  1096  000018                     	ds	1
  1097  000019                     ECANReceiveMessage@msgFlags:
  1098                           	opt stack 0
  1099  000019                     readEEPROM@data:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x18
  1103  000019                     	ds	1
  1104  00001A                     ??_writeCoeffs2Ram:
  1105  00001A                     ?_getCalibrationValue:
  1106                           	opt stack 0
  1107  00001A                     ?___lwtofl:
  1108                           	opt stack 0
  1109  00001A                     vscp_readAppReg@pos:
  1110                           	opt stack 0
  1111  00001A                     vscp_getGUID@idx:
  1112                           	opt stack 0
  1113  00001A                     vscp_getUserID@idx:
  1114                           	opt stack 0
  1115  00001A                     vscp_getManufacturerId@idx:
  1116                           	opt stack 0
  1117  00001A                     vscp_handleDropNickname@bytes:
  1118                           	opt stack 0
  1119  00001A                     ECANReceiveMessage@savedPtr:
  1120                           	opt stack 0
  1121  00001A                     ___lwtofl@c:
  1122                           	opt stack 0
  1123                           
  1124                           ; 2 bytes @ 0x19
  1125  00001A                     	ds	1
  1126  00001B                     ??_vscp_readStdReg:
  1127  00001B                     ?_vscp_writeStdReg:
  1128                           	opt stack 0
  1129  00001B                     vscp_readAppReg@reg:
  1130                           	opt stack 0
  1131  00001B                     vscp_writeStdReg@value:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x1A
  1135  00001B                     	ds	1
  1136  00001C                     ??_getCalibrationValue:
  1137  00001C                     ??_vscp_writeStdReg:
  1138  00001C                     vscp_readAppReg@rv:
  1139                           	opt stack 0
  1140  00001C                     ECANSendMessage@data:
  1141                           	opt stack 0
  1142  00001C                     ECANReceiveMessage@id:
  1143                           	opt stack 0
  1144  00001C                     writeCoeffs2Ram@c:
  1145                           	opt stack 0
  1146                           
  1147                           ; 3 bytes @ 0x1B
  1148  00001C                     	ds	1
  1149  00001D                     ECANSendMessage@dataLen:
  1150                           	opt stack 0
  1151  00001D                     ECANReceiveMessage@i:
  1152                           	opt stack 0
  1153  00001D                     ___awtofl@sign:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x1C
  1157  00001D                     	ds	1
  1158  00001E                     ?___fladd:
  1159                           	opt stack 0
  1160  00001E                     ECANSendMessage@msgFlags:
  1161                           	opt stack 0
  1162  00001E                     ECANReceiveMessage@mode:
  1163                           	opt stack 0
  1164  00001E                     ___fladd@f1:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x1D
  1168  00001E                     	ds	1
  1169  00001F                     ??_ECANSendMessage:
  1170  00001F                     ECANReceiveMessage@temp:
  1171                           	opt stack 0
  1172  00001F                     writeCoeffs2Ram@i:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x1E
  1176  00001F                     	ds	1
  1177  000020                     vscp_writeStdReg@rv:
  1178                           	opt stack 0
  1179  000020                     ECANReceiveMessage@ptr:
  1180                           	opt stack 0
  1181  000020                     vscp_readStdReg@code:
  1182                           	opt stack 0
  1183  000020                     ECANSendMessage@pb:
  1184                           	opt stack 0
  1185                           
  1186                           ; 18 bytes @ 0x1F
  1187  000020                     	ds	1
  1188  000021                     vscp_writeStdReg@reg:
  1189                           	opt stack 0
  1190  000021                     getCalibrationValue@cal:
  1191                           	opt stack 0
  1192  000021                     writeCoeffs2Ram@j:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x20
  1196  000021                     	ds	1
  1197  000022                     ?_getCANFrame:
  1198                           	opt stack 0
  1199  000022                     getCANFrame@pdlc:
  1200                           	opt stack 0
  1201  000022                     ___fladd@f2:
  1202                           	opt stack 0
  1203                           
  1204                           ; 4 bytes @ 0x21
  1205  000022                     	ds	1
  1206  000023                     ?_vscp_writeAppReg:
  1207                           	opt stack 0
  1208  000023                     getCalibrationValue@i:
  1209                           	opt stack 0
  1210  000023                     vscp_writeAppReg@val:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x22
  1214  000023                     	ds	1
  1215  000024                     vscp_writeAppReg@pos:
  1216                           	opt stack 0
  1217  000024                     getCANFrame@pdata:
  1218                           	opt stack 0
  1219  000024                     vscp_readStdReg@code_1147:
  1220                           	opt stack 0
  1221                           
  1222                           ; 4 bytes @ 0x23
  1223  000024                     	ds	1
  1224  000025                     vscp_writeAppReg@reg:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x24
  1228  000025                     	ds	1
  1229  000026                     ??___fladd:
  1230  000026                     vscp_writeAppReg@rv:
  1231                           	opt stack 0
  1232  000026                     getCANFrame@pid:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x25
  1236  000026                     	ds	1
  1237  000027                     ?_vscp_writeRegister:
  1238                           	opt stack 0
  1239  000027                     getCANFrame@flags:
  1240                           	opt stack 0
  1241  000027                     vscp_writeRegister@value:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x26
  1245  000027                     	ds	1
  1246  000028                     ?_getVSCPFrame:
  1247                           	opt stack 0
  1248  000028                     vscp_readStdReg@idx:
  1249                           	opt stack 0
  1250  000028                     vscp_writeRegister@reg:
  1251                           	opt stack 0
  1252  000028                     getVSCPFrame@pvscpclass:
  1253                           	opt stack 0
  1254                           
  1255                           ; 2 bytes @ 0x27
  1256  000028                     	ds	1
  1257  000029                     vscp_readStdReg@idx_1148:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x28
  1261  000029                     	ds	1
  1262  00002A                     vscp_readStdReg@rv:
  1263                           	opt stack 0
  1264  00002A                     ___fladd@sign:
  1265                           	opt stack 0
  1266  00002A                     getVSCPFrame@pvscptype:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x29
  1270  00002A                     	ds	1
  1271  00002B                     vscp_readStdReg@reg:
  1272                           	opt stack 0
  1273  00002B                     ___fladd@exp2:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x2A
  1277  00002B                     	ds	1
  1278  00002C                     vscp_readRegister@reg:
  1279                           	opt stack 0
  1280  00002C                     ___fladd@exp1:
  1281                           	opt stack 0
  1282  00002C                     getVSCPFrame@pNodeId:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x2B
  1286  00002C                     	ds	1
  1287  00002D                     ?_Celsius2Kelvin:
  1288                           	opt stack 0
  1289  00002D                     ?___flsub:
  1290                           	opt stack 0
  1291  00002D                     ?___asfladd:
  1292                           	opt stack 0
  1293  00002D                     ___asfladd@f1p:
  1294                           	opt stack 0
  1295  00002D                     Celsius2Kelvin@tc:
  1296                           	opt stack 0
  1297  00002D                     ___flsub@f1:
  1298                           	opt stack 0
  1299                           
  1300                           ; 4 bytes @ 0x2C
  1301  00002D                     	ds	1
  1302  00002E                     getVSCPFrame@pPriority:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x2D
  1306  00002E                     	ds	1
  1307  00002F                     ___asfladd@f2:
  1308                           	opt stack 0
  1309                           
  1310                           ; 4 bytes @ 0x2E
  1311  00002F                     	ds	1
  1312  000030                     getVSCPFrame@pSize:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x2F
  1316  000030                     	ds	1
  1317  000031                     ___flsub@f2:
  1318                           	opt stack 0
  1319                           
  1320                           ; 4 bytes @ 0x30
  1321  000031                     	ds	1
  1322  000032                     ECANSendMessage@mode:
  1323                           	opt stack 0
  1324  000032                     getVSCPFrame@pData:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x31
  1328  000032                     	ds	1
  1329  000033                     ECANSendMessage@buffers:
  1330                           	opt stack 0
  1331                           
  1332                           ; 1 bytes @ 0x32
  1333  000033                     	ds	1
  1334  000034                     ??_getVSCPFrame:
  1335  000034                     ECANSendMessage@j:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x33
  1339  000034                     	ds	1
  1340  000035                     ?___asflsub:
  1341                           	opt stack 0
  1342  000035                     ECANSendMessage@tempBSEL0:
  1343                           	opt stack 0
  1344  000035                     ___asflsub@f1p:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x34
  1348  000035                     	ds	1
  1349  000036                     ECANSendMessage@tempPtr:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x35
  1353  000036                     	ds	1
  1354  000037                     ___asflsub@f2:
  1355                           	opt stack 0
  1356                           
  1357                           ; 4 bytes @ 0x36
  1358  000037                     	ds	1
  1359  000038                     ECANSendMessage@temp:
  1360                           	opt stack 0
  1361  000038                     getVSCPFrame@id:
  1362                           	opt stack 0
  1363                           
  1364                           ; 4 bytes @ 0x37
  1365  000038                     	ds	1
  1366  000039                     ECANSendMessage@i:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x38
  1370  000039                     	ds	1
  1371  00003A                     ECANSendMessage@ptr:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x39
  1375  00003A                     	ds	1
  1376  00003B                     
  1377                           ; 0 bytes @ 0x3A
  1378  00003B                     	ds	1
  1379  00003C                     ?_sendCANFrame:
  1380                           	opt stack 0
  1381  00003C                     vscp_getEvent@rv:
  1382                           	opt stack 0
  1383  00003C                     sendCANFrame@id:
  1384                           	opt stack 0
  1385  00003C                     ___fldiv@f3:
  1386                           	opt stack 0
  1387                           
  1388                           ; 4 bytes @ 0x3B
  1389  00003C                     	ds	4
  1390  000040                     sendCANFrame@dlc:
  1391                           	opt stack 0
  1392  000040                     ___fldiv@cntr:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x3F
  1396  000040                     	ds	1
  1397  000041                     sendCANFrame@pdata:
  1398                           	opt stack 0
  1399  000041                     ___fldiv@exp:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x40
  1403  000041                     	ds	1
  1404  000042                     sendCANFrame@rv:
  1405                           	opt stack 0
  1406  000042                     ___fldiv@sign:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x41
  1410  000042                     	ds	1
  1411  000043                     ??_eval_poly:
  1412  000043                     vscp_sendEvent@rv:
  1413                           	opt stack 0
  1414  000043                     ___asflmul@mp:
  1415                           	opt stack 0
  1416  000043                     ___fltol@sign1:
  1417                           	opt stack 0
  1418                           
  1419                           ; 1 bytes @ 0x42
  1420  000043                     	ds	1
  1421  000044                     ?_vscp_sendHeartBeat:
  1422                           	opt stack 0
  1423  000044                     ??_vscp_newNodeOnline:
  1424  000044                     vscp_sendHeartBeat@subzone:
  1425                           	opt stack 0
  1426  000044                     ___fltol@exp1:
  1427                           	opt stack 0
  1428  000044                     log@exponent:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x43
  1432  000044                     	ds	1
  1433  000045                     ??_sendTempEvent:
  1434  000045                     vscp_sendHeartBeat@zone:
  1435                           	opt stack 0
  1436  000045                     ___altofl@sign:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0x44
  1440  000045                     	ds	1
  1441  000046                     tblptru	equ	0xFF8
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postdec1	equ	0xFE5
  1445                           fsr1h	equ	0xFE2
  1446                           fsr1l	equ	0xFE1
  1447                           
  1448                           ; 0 bytes @ 0x45
  1449 ;;
  1450 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1451 ;;
  1452 ;; *************** function _main *****************
  1453 ;; Defined at:
  1454 ;;		line 301 in file "../main.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  i               4   91[BANK0 ] unsigned long 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;		None               void
  1461 ;; Registers used:
  1462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : F/1
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1468 ;;      Params:         0       0       0       0       0       0       0
  1469 ;;      Locals:         0       4       0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0
  1471 ;;      Totals:         0       4       0       0       0       0       0
  1472 ;;Total ram usage:        4 bytes
  1473 ;; Hardware stack levels required when called:    9
  1474 ;; This function calls:
  1475 ;;		_init
  1476 ;;		_vscp_check_pstorage
  1477 ;;		_init_app_eeprom
  1478 ;;		_vscp_init
  1479 ;;		_writeEEPROM
  1480 ;;		_vscp_getEvent
  1481 ;;		_vscp_goActiveState
  1482 ;;		_vscp_handleProbeState
  1483 ;;		_vscp_handleProtocolEvent
  1484 ;;		_handle_sync
  1485 ;;		_vscp_error
  1486 ;;		_doOneSecondWork
  1487 ;;		_vscp_doOneSecondWork
  1488 ;;		_doWork
  1489 ;; This function is called by:
  1490 ;;		Startup code after reset
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text0
  1495  0044E0                     __ptext0:
  1496                           	opt stack 0
  1497  0044E0                     _main:
  1498                           	opt stack 22
  1499                           
  1500                           ;main.c: 302: uint32_t i;
  1501                           ;main.c: 304: init();
  1502                           
  1503                           ;incstack = 0
  1504                           ;incstack = 0
  1505  0044E0  ECDF  F02B         	call	_init	;wreg free
  1506                           
  1507                           ;main.c: 308: if ( !vscp_check_pstorage() ) {
  1508  0044E4  EC46  F02D         	call	_vscp_check_pstorage	;wreg free
  1509  0044E8  0900               	iorlw	0
  1510  0044EA  B4D8               	btfsc	status,2,c
  1511                           
  1512                           ;main.c: 311: init_app_eeprom();
  1513  0044EC  EC37  F017         	call	_init_app_eeprom	;wreg free
  1514                           
  1515                           ;main.c: 313: }
  1516                           ;main.c: 315: vscp_init();
  1517  0044F0  EC12  F02B         	call	_vscp_init	;wreg free
  1518  0044F4                     l170:
  1519  0044F4  0004               	clrwdt		;# 
  1520                           
  1521                           ;main.c: 321: if ( ( vscp_initbtncnt > 250 ) &&
  1522                           ;main.c: 322: ( 0x01 != vscp_node_state ) ) {
  1523  0044F6  0EFA               	movlw	250
  1524  0044F8  0100               	movlb	0	; () banked
  1525  0044FA  65C8               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1526  0044FC  D00C               	goto	l9423
  1527                           
  1528                           ; BSR set to: 0
  1529  0044FE  05CA               	decf	_vscp_node_state& (0+255),w,b
  1530  004500  E00A               	bz	l9423
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 325: vscp_nickname = 0xff;
  1534  004502  69C9               	setf	_vscp_nickname& (0+255),b
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 326: writeEEPROM(0x01, 0xff);
  1538  004504  6A0F               	clrf	?_writeEEPROM+1,c
  1539  004506  0E01               	movlw	1
  1540  004508  6E0E               	movwf	?_writeEEPROM,c
  1541  00450A  0EFF               	movlw	255
  1542  00450C  6810               	setf	?_writeEEPROM+2,c
  1543  00450E  EC21  F02D         	call	_writeEEPROM	;wreg free
  1544                           
  1545                           ;main.c: 327: vscp_init();
  1546  004512  EC12  F02B         	call	_vscp_init	;wreg free
  1547  004516                     l9423:
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 329: }
  1551                           ;main.c: 333: vscp_imsg.flags = 0;
  1552  004516  0101               	movlb	1	; () banked
  1553  004518  6B64               	clrf	_vscp_imsg& (0+255),b
  1554                           
  1555                           ; BSR set to: 1
  1556                           ;main.c: 334: vscp_getEvent();
  1557  00451A  EC7D  F02B         	call	_vscp_getEvent	;wreg free
  1558                           
  1559                           ;main.c: 337: switch (vscp_node_state) {
  1560  00451E  D025               	goto	l9453
  1561  004520                     l9427:
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;main.c: 342: if (0xff == vscp_nickname) {
  1565  004520  29C9               	incf	_vscp_nickname& (0+255),w,b
  1566  004522  E103               	bnz	l9431
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 344: vscp_node_state = 0x01;
  1570  004524  0E01               	movlw	1
  1571  004526  6FCA               	movwf	_vscp_node_state& (0+255),b
  1572                           
  1573                           ;main.c: 345: }
  1574  004528  D02C               	goto	l9455
  1575  00452A                     l9431:
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;main.c: 346: else {
  1579                           ;main.c: 348: vscp_node_state = 0x03;
  1580  00452A  0E03               	movlw	3
  1581  00452C  6FCA               	movwf	_vscp_node_state& (0+255),b
  1582  00452E                     l9433:
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;main.c: 349: vscp_goActiveState();
  1586  00452E  EC89  F02D         	call	_vscp_goActiveState	;wreg free
  1587  004532  D027               	goto	l9455
  1588  004534                     l9435:
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;main.c: 354: vscp_handleProbeState();
  1592  004534  EC69  F024         	call	_vscp_handleProbeState	;wreg free
  1593                           
  1594                           ;main.c: 355: break;
  1595  004538  D024               	goto	l9455
  1596  00453A                     l179:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 364: if (vscp_imsg.flags & 0x80) {
  1600  00453A  0101               	movlb	1	; () banked
  1601  00453C  AF64               	btfss	_vscp_imsg& (0+255),7,b
  1602  00453E  D021               	goto	l9455
  1603                           
  1604                           ; BSR set to: 1
  1605                           ;main.c: 366: if ( 0 == vscp_imsg.vscp_class ) {
  1606  004540  5167               	movf	(_vscp_imsg+3)& (0+255),w,b
  1607  004542  1166               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1608  004544  E103               	bnz	l9443
  1609                           
  1610                           ; BSR set to: 1
  1611                           ;main.c: 369: vscp_handleProtocolEvent();
  1612  004546  ECD2  F013         	call	_vscp_handleProtocolEvent	;wreg free
  1613                           
  1614                           ;main.c: 371: }
  1615  00454A  D01B               	goto	l9455
  1616  00454C                     l9443:
  1617                           
  1618                           ; BSR set to: 1
  1619                           ;main.c: 372: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1620                           ;main.c: 373: ( 26 == vscp_imsg.vscp_type ) ) {
  1621  00454C  5166               	movf	(_vscp_imsg+2)& (0+255),w,b
  1622  00454E  0A1E               	xorlw	30
  1623  004550  1167               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1624  004552  E117               	bnz	l9455
  1625                           
  1626                           ; BSR set to: 1
  1627  004554  5168               	movf	(_vscp_imsg+4)& (0+255),w,b
  1628  004556  0A1A               	xorlw	26
  1629  004558  E114               	bnz	l9455
  1630                           
  1631                           ; BSR set to: 1
  1632                           ;main.c: 374: handle_sync();
  1633  00455A  EC2F  F028         	call	_handle_sync	;wreg free
  1634  00455E  D011               	goto	l9455
  1635  004560                     l9449:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;main.c: 381: vscp_error();
  1639  004560  EC68  F02E         	call	_vscp_error	;wreg free
  1640                           
  1641                           ;main.c: 382: break;
  1642  004564  D00E               	goto	l9455
  1643  004566                     l185:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;main.c: 385: vscp_node_state = 0x00;
  1647  004566  6BCA               	clrf	_vscp_node_state& (0+255),b
  1648                           
  1649                           ;main.c: 386: break;
  1650  004568  D00C               	goto	l9455
  1651  00456A                     l9453:
  1652  00456A  0100               	movlb	0	; () banked
  1653  00456C  51CA               	movf	_vscp_node_state& (0+255),w,b
  1654                           
  1655                           ; Switch size 1, requested type "speed"
  1656                           ; Number of cases is 5, Range of values is 0 to 4
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte           16     9 (average)
  1660                           ;	Chosen strategy is simple_byte
  1661  00456E  E0D8               	bz	l9427
  1662  004570  0A01               	xorlw	1	; case 1
  1663  004572  E0E0               	bz	l9435
  1664  004574  0A03               	xorlw	3	; case 2
  1665  004576  E0DB               	bz	l9433
  1666  004578  0A01               	xorlw	1	; case 3
  1667  00457A  E0DF               	bz	l179
  1668  00457C  0A07               	xorlw	7	; case 4
  1669  00457E  E0F0               	bz	l9449
  1670  004580  D7F2               	goto	l185
  1671  004582                     l9455:
  1672                           
  1673                           ;main.c: 392: if ( measurement_clock > 1000 ) {
  1674  004582  0EE9               	movlw	233
  1675  004584  0101               	movlb	1	; () banked
  1676  004586  5D12               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1677  004588  0E03               	movlw	3
  1678  00458A  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1679  00458C  0E00               	movlw	0
  1680  00458E  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1681  004590  0E00               	movlw	0
  1682  004592  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1683  004594  E3AF               	bnc	l170
  1684                           
  1685                           ; BSR set to: 1
  1686                           ;main.c: 394: measurement_clock = 0;
  1687  004596  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
  1688  004598  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1689  00459A  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1690  00459C  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1691                           
  1692                           ; BSR set to: 1
  1693                           ;main.c: 395: doOneSecondWork();
  1694  00459E  EC0E  F010         	call	_doOneSecondWork	;wreg free
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;main.c: 396: seconds++;
  1698  0045A2  2BC6               	incf	_seconds& (0+255),f,b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1702  0045A4  51CA               	movf	_vscp_node_state& (0+255),w,b
  1703  0045A6  0A03               	xorlw	3
  1704  0045A8  E11A               	bnz	l9477
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1708  0045AA  6BBB               	clrf	main@i& (0+255),b
  1709  0045AC  6BBC               	clrf	(main@i+1)& (0+255),b
  1710  0045AE  6BBD               	clrf	(main@i+2)& (0+255),b
  1711  0045B0  6BBE               	clrf	(main@i+3)& (0+255),b
  1712  0045B2                     l9471:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 402: seconds_temp[i]++;
  1716  0045B2  0E0C               	movlw	low _seconds_temp
  1717  0045B4  0100               	movlb	0	; () banked
  1718  0045B6  25BB               	addwf	main@i& (0+255),w,b
  1719  0045B8  6ED9               	movwf	fsr2l,c
  1720  0045BA  0E01               	movlw	high _seconds_temp
  1721  0045BC  21BC               	addwfc	(main@i+1)& (0+255),w,b
  1722  0045BE  6EDA               	movwf	fsr2h,c
  1723  0045C0  2ADF               	incf	indf2,f,c
  1724                           
  1725                           ; BSR set to: 0
  1726  0045C2  2BBB               	incf	main@i& (0+255),f,b
  1727  0045C4  0E00               	movlw	0
  1728  0045C6  23BC               	addwfc	(main@i+1)& (0+255),f,b
  1729  0045C8  23BD               	addwfc	(main@i+2)& (0+255),f,b
  1730  0045CA  23BE               	addwfc	(main@i+3)& (0+255),f,b
  1731                           
  1732                           ; BSR set to: 0
  1733  0045CC  0E06               	movlw	6
  1734  0045CE  5DBB               	subwf	main@i& (0+255),w,b
  1735  0045D0  0E00               	movlw	0
  1736  0045D2  59BC               	subwfb	(main@i+1)& (0+255),w,b
  1737  0045D4  0E00               	movlw	0
  1738  0045D6  59BD               	subwfb	(main@i+2)& (0+255),w,b
  1739  0045D8  0E00               	movlw	0
  1740  0045DA  59BE               	subwfb	(main@i+3)& (0+255),w,b
  1741  0045DC  E3EA               	bnc	l9471
  1742  0045DE                     l9477:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 403: }
  1746                           ;main.c: 404: }
  1747                           ;main.c: 406: if (seconds > 60) {
  1748  0045DE  0E3C               	movlw	60
  1749  0045E0  65C6               	cpfsgt	_seconds& (0+255),b
  1750  0045E2  D001               	goto	l9481
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 407: seconds = 0;
  1754  0045E4  6BC6               	clrf	_seconds& (0+255),b
  1755  0045E6                     l9481:
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;main.c: 408: }
  1759                           ;main.c: 412: if (0x03 == vscp_node_state) {
  1760  0045E6  51CA               	movf	_vscp_node_state& (0+255),w,b
  1761  0045E8  0A03               	xorlw	3
  1762  0045EA  B4D8               	btfsc	status,2,c
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 413: vscp_doOneSecondWork();
  1766  0045EC  EC7E  F02A         	call	_vscp_doOneSecondWork	;wreg free
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;main.c: 414: }
  1770                           ;main.c: 417: doWork();
  1771  0045F0  EC1B  F01A         	call	_doWork	;wreg free
  1772  0045F4  D77F               	goto	l170
  1773  0045F6                     __end_of_main:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1h	equ	0xFE2
  1780                           fsr1l	equ	0xFE1
  1781                           indf2	equ	0xFDF
  1782                           fsr2h	equ	0xFDA
  1783                           fsr2l	equ	0xFD9
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _doWork *****************
  1787 ;; Defined at:
  1788 ;;		line 432 in file "../main.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  temp            4   47[BANK1 ] unsigned long 
  1793 ;;  avarage         4   43[BANK1 ] unsigned long 
  1794 ;;  resistance      4   38[BANK1 ] unsigned long 
  1795 ;;  v               4   32[BANK1 ] unsigned long 
  1796 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1797 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1798 ;;  B               2   36[BANK1 ] unsigned short 
  1799 ;;  i               1   51[BANK1 ] unsigned char 
  1800 ;;  j               1   42[BANK1 ] unsigned char 
  1801 ;; Return value:  Size  Location     Type
  1802 ;;		None               void
  1803 ;; Registers used:
  1804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : F/0
  1807 ;;		On exit  : F/1
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1810 ;;      Params:         0       0       0       0       0       0       0
  1811 ;;      Locals:         0       0      52       0       0       0       0
  1812 ;;      Temps:          0      14       0       0       0       0       0
  1813 ;;      Totals:         0      14      52       0       0       0       0
  1814 ;;Total ram usage:       66 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    7
  1817 ;; This function calls:
  1818 ;;		_readEEPROM
  1819 ;;		_exp
  1820 ;;		_log
  1821 ;;		_getCalibrationValue
  1822 ;;		___aldiv
  1823 ;;		___altofl
  1824 ;;		___asfladd
  1825 ;;		___fladd
  1826 ;;		___asfldiv
  1827 ;;		___fldiv
  1828 ;;		___flmul
  1829 ;;		___asflsub
  1830 ;;		___flsub
  1831 ;;		___fltol
  1832 ;;		___lwtofl
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text1
  1839  003436                     __ptext1:
  1840                           	opt stack 0
  1841  003436                     _doWork:
  1842                           	opt stack 23
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;main.c: 433: uint8_t i, j;
  1846                           ;main.c: 434: uint16_t B;
  1847                           ;main.c: 435: double avarage;
  1848                           ;main.c: 436: double resistance;
  1849                           ;main.c: 437: double Rinf;
  1850                           ;main.c: 438: double temp;
  1851                           ;main.c: 439: double v;
  1852                           ;main.c: 440: double calVoltage;
  1853                           ;main.c: 442: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1854                           ;main.c: 443: readEEPROM(0xF3));
  1855                           
  1856                           ; BSR set to: 1
  1857                           ;incstack = 0
  1858                           ;incstack = 0
  1859  003436  6A17               	clrf	?_readEEPROM+1,c
  1860  003438  0EF3               	movlw	243
  1861  00343A  6E16               	movwf	?_readEEPROM,c
  1862  00343C  EC0F  F02E         	call	_readEEPROM	;wreg free
  1863  003440  0100               	movlb	0	; () banked
  1864  003442  6FAD               	movwf	??_doWork& (0+255),b
  1865  003444  6A17               	clrf	?_readEEPROM+1,c
  1866  003446  0EF2               	movlw	242
  1867  003448  6E16               	movwf	?_readEEPROM,c
  1868  00344A  EC0F  F02E         	call	_readEEPROM	;wreg free
  1869  00344E  6E1B               	movwf	?___lwtofl+1,c
  1870  003450  0100               	movlb	0	; () banked
  1871  003452  51AD               	movf	??_doWork& (0+255),w,b
  1872  003454  6E1A               	movwf	?___lwtofl,c
  1873  003456  ECBB  F02C         	call	___lwtofl	;wreg free
  1874  00345A  C01D  F179         	movff	?___lwtofl+3,doWork@calVoltage+3
  1875  00345E  C01C  F178         	movff	?___lwtofl+2,doWork@calVoltage+2
  1876  003462  C01B  F177         	movff	?___lwtofl+1,doWork@calVoltage+1
  1877  003466  C01A  F176         	movff	?___lwtofl,doWork@calVoltage
  1878                           
  1879                           ;main.c: 448: for (i = 0; i < 6; i++) {
  1880  00346A  0101               	movlb	1	; () banked
  1881  00346C  6BA5               	clrf	doWork@i& (0+255),b
  1882  00346E                     l10239:
  1883                           
  1884                           ; BSR set to: 1
  1885                           ;main.c: 450: if (adc_conversion_flags & 1 << i) {
  1886  00346E  C1A5  F0AD         	movff	doWork@i,??_doWork
  1887  003472  0E01               	movlw	1
  1888  003474  0100               	movlb	0	; () banked
  1889  003476  6FAE               	movwf	(??_doWork+1)& (0+255),b
  1890  003478  2BAD               	incf	??_doWork& (0+255),f,b
  1891  00347A  D002               	goto	u8624
  1892  00347C                     u8625:
  1893  00347C  90D8               	bcf	status,0,c
  1894  00347E  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  1895  003480                     u8624:
  1896  003480  2FAD               	decfsz	??_doWork& (0+255),f,b
  1897  003482  D7FC               	goto	u8625
  1898  003484  51AE               	movf	(??_doWork+1)& (0+255),w,b
  1899  003486  15C3               	andwf	_adc_conversion_flags& (0+255),w,b
  1900  003488  E101 D1FB          	bz	l10293
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;main.c: 453: avarage = 0;
  1904  00348C  0101               	movlb	1	; () banked
  1905  00348E  6B9D               	clrf	doWork@avarage& (0+255),b
  1906  003490  6B9E               	clrf	(doWork@avarage+1)& (0+255),b
  1907  003492  6B9F               	clrf	(doWork@avarage+2)& (0+255),b
  1908  003494  6BA0               	clrf	(doWork@avarage+3)& (0+255),b
  1909                           
  1910                           ;main.c: 454: for (j = 0; j < 80; j++) {
  1911  003496  6B9C               	clrf	doWork@j& (0+255),b
  1912  003498                     l10247:
  1913                           
  1914                           ; BSR set to: 1
  1915                           ;main.c: 455: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1916  003498  0E01               	movlw	high doWork@avarage
  1917  00349A  6E2E               	movwf	?___asfladd+1,c
  1918  00349C  0E9D               	movlw	low doWork@avarage
  1919  00349E  6E2D               	movwf	?___asfladd,c
  1920  0034A0  90D8               	bcf	status,0,c
  1921  0034A2  35A5               	rlcf	doWork@i& (0+255),w,b
  1922  0034A4  0100               	movlb	0	; () banked
  1923  0034A6  6FAD               	movwf	??_doWork& (0+255),b
  1924  0034A8  6BAE               	clrf	(??_doWork+1)& (0+255),b
  1925  0034AA  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  1926  0034AC  0101               	movlb	1	; () banked
  1927  0034AE  519C               	movf	doWork@j& (0+255),w,b
  1928  0034B0  0D0C               	mullw	12
  1929  0034B2  0EA7               	movlw	low (_adc+1)
  1930  0034B4  24F3               	addwf	prodl,w,c
  1931  0034B6  0100               	movlb	0	; () banked
  1932  0034B8  6FAF               	movwf	(??_doWork+2)& (0+255),b
  1933  0034BA  0E01               	movlw	high (_adc+1)
  1934  0034BC  20F4               	addwfc	prodh,w,c
  1935  0034BE  6FB0               	movwf	(??_doWork+3)& (0+255),b
  1936  0034C0  51AD               	movf	??_doWork& (0+255),w,b
  1937  0034C2  25AF               	addwf	(??_doWork+2)& (0+255),w,b
  1938  0034C4  6ED9               	movwf	fsr2l,c
  1939  0034C6  51AE               	movf	(??_doWork+1)& (0+255),w,b
  1940  0034C8  21B0               	addwfc	(??_doWork+3)& (0+255),w,b
  1941  0034CA  6EDA               	movwf	fsr2h,c
  1942  0034CC  50DF               	movf	indf2,w,c
  1943  0034CE  6FB1               	movwf	(??_doWork+4)& (0+255),b
  1944  0034D0  90D8               	bcf	status,0,c
  1945  0034D2  0101               	movlb	1	; () banked
  1946  0034D4  35A5               	rlcf	doWork@i& (0+255),w,b
  1947  0034D6  0100               	movlb	0	; () banked
  1948  0034D8  6FB2               	movwf	(??_doWork+5)& (0+255),b
  1949  0034DA  6BB3               	clrf	(??_doWork+6)& (0+255),b
  1950  0034DC  37B3               	rlcf	(??_doWork+6)& (0+255),f,b
  1951  0034DE  0101               	movlb	1	; () banked
  1952  0034E0  519C               	movf	doWork@j& (0+255),w,b
  1953  0034E2  0D0C               	mullw	12
  1954  0034E4  0EA6               	movlw	low _adc
  1955  0034E6  24F3               	addwf	prodl,w,c
  1956  0034E8  0100               	movlb	0	; () banked
  1957  0034EA  6FB4               	movwf	(??_doWork+7)& (0+255),b
  1958  0034EC  0E01               	movlw	high _adc
  1959  0034EE  20F4               	addwfc	prodh,w,c
  1960  0034F0  6FB5               	movwf	(??_doWork+8)& (0+255),b
  1961  0034F2  51B2               	movf	(??_doWork+5)& (0+255),w,b
  1962  0034F4  25B4               	addwf	(??_doWork+7)& (0+255),w,b
  1963  0034F6  6ED9               	movwf	fsr2l,c
  1964  0034F8  51B3               	movf	(??_doWork+6)& (0+255),w,b
  1965  0034FA  21B5               	addwfc	(??_doWork+8)& (0+255),w,b
  1966  0034FC  6EDA               	movwf	fsr2h,c
  1967  0034FE  50DF               	movf	indf2,w,c
  1968  003500  6E1B               	movwf	?___lwtofl+1,c
  1969  003502  51B1               	movf	(??_doWork+4)& (0+255),w,b
  1970  003504  6E1A               	movwf	?___lwtofl,c
  1971  003506  ECBB  F02C         	call	___lwtofl	;wreg free
  1972  00350A  C01D  F032         	movff	?___lwtofl+3,?___asfladd+5
  1973  00350E  C01C  F031         	movff	?___lwtofl+2,?___asfladd+4
  1974  003512  C01B  F030         	movff	?___lwtofl+1,?___asfladd+3
  1975  003516  C01A  F02F         	movff	?___lwtofl,?___asfladd+2
  1976  00351A  ECA4  F02A         	call	___asfladd	;wreg free
  1977  00351E  0101               	movlb	1	; () banked
  1978  003520  2B9C               	incf	doWork@j& (0+255),f,b
  1979                           
  1980                           ; BSR set to: 1
  1981  003522  0E4F               	movlw	79
  1982  003524  659C               	cpfsgt	doWork@j& (0+255),b
  1983  003526  D7B8               	goto	l10247
  1984                           
  1985                           ; BSR set to: 1
  1986                           ;main.c: 459: if (1) {
  1987  003528  0E01               	movlw	high doWork@avarage
  1988  00352A  0100               	movlb	0	; () banked
  1989  00352C  6F69               	movwf	(?___asfldiv+1)& (0+255),b
  1990  00352E  0E9D               	movlw	low doWork@avarage
  1991  003530  6F68               	movwf	?___asfldiv& (0+255),b
  1992  003532  6B6A               	clrf	(?___asfldiv+2)& (0+255),b
  1993  003534  6B6B               	clrf	(?___asfldiv+3)& (0+255),b
  1994  003536  0EA0               	movlw	160
  1995  003538  6F6C               	movwf	(?___asfldiv+4)& (0+255),b
  1996  00353A  0E42               	movlw	66
  1997  00353C  6F6D               	movwf	(?___asfldiv+5)& (0+255),b
  1998  00353E  EC0C  F02A         	call	___asfldiv	;wreg free
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;main.c: 467: B = (uint16_t)readEEPROM(2 * i + 0x4F)*256 +
  2002                           ;main.c: 468: readEEPROM(2 * i + 0x50);
  2003  003542  0101               	movlb	1	; () banked
  2004  003544  51A5               	movf	doWork@i& (0+255),w,b
  2005  003546  0D02               	mullw	2
  2006  003548  0E50               	movlw	80
  2007  00354A  24F3               	addwf	prodl,w,c
  2008  00354C  6E16               	movwf	?_readEEPROM,c
  2009  00354E  0E00               	movlw	0
  2010  003550  20F4               	addwfc	prodh,w,c
  2011  003552  6E17               	movwf	?_readEEPROM+1,c
  2012  003554  EC0F  F02E         	call	_readEEPROM	;wreg free
  2013  003558  0100               	movlb	0	; () banked
  2014  00355A  6FAD               	movwf	??_doWork& (0+255),b
  2015  00355C  0101               	movlb	1	; () banked
  2016  00355E  51A5               	movf	doWork@i& (0+255),w,b
  2017  003560  0D02               	mullw	2
  2018  003562  0E4F               	movlw	79
  2019  003564  24F3               	addwf	prodl,w,c
  2020  003566  6E16               	movwf	?_readEEPROM,c
  2021  003568  0E00               	movlw	0
  2022  00356A  20F4               	addwfc	prodh,w,c
  2023  00356C  6E17               	movwf	?_readEEPROM+1,c
  2024  00356E  EC0F  F02E         	call	_readEEPROM	;wreg free
  2025  003572  0101               	movlb	1	; () banked
  2026  003574  6F97               	movwf	(doWork@B+1)& (0+255),b
  2027  003576  0100               	movlb	0	; () banked
  2028  003578  51AD               	movf	??_doWork& (0+255),w,b
  2029  00357A  0101               	movlb	1	; () banked
  2030  00357C  6F96               	movwf	doWork@B& (0+255),b
  2031                           
  2032                           ; BSR set to: 1
  2033                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2034  00357E  0E33               	movlw	51
  2035  003580  0100               	movlb	0	; () banked
  2036  003582  6F64               	movwf	(?___fldiv+4)& (0+255),b
  2037  003584  0E13               	movlw	19
  2038  003586  6F65               	movwf	(?___fldiv+5)& (0+255),b
  2039  003588  0E95               	movlw	149
  2040  00358A  6F66               	movwf	(?___fldiv+6)& (0+255),b
  2041  00358C  0EC3               	movlw	195
  2042  00358E  6F67               	movwf	(?___fldiv+7)& (0+255),b
  2043  003590  C196  F01A         	movff	doWork@B,?___lwtofl
  2044  003594  C197  F01B         	movff	doWork@B+1,?___lwtofl+1
  2045  003598  ECBB  F02C         	call	___lwtofl	;wreg free
  2046  00359C  C01D  F063         	movff	?___lwtofl+3,?___fldiv+3
  2047  0035A0  C01C  F062         	movff	?___lwtofl+2,?___fldiv+2
  2048  0035A4  C01B  F061         	movff	?___lwtofl+1,?___fldiv+1
  2049  0035A8  C01A  F060         	movff	?___lwtofl,?___fldiv
  2050  0035AC  EC41  F026         	call	___fldiv	;wreg free
  2051  0035B0  C063  F17D         	movff	?___fldiv+3,_doWork$2276+3
  2052  0035B4  C062  F17C         	movff	?___fldiv+2,_doWork$2276+2
  2053  0035B8  C061  F17B         	movff	?___fldiv+1,_doWork$2276+1
  2054  0035BC  C060  F17A         	movff	?___fldiv,_doWork$2276
  2055                           
  2056                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2057  0035C0  C17A  F0A2         	movff	_doWork$2276,?_exp
  2058  0035C4  C17B  F0A3         	movff	_doWork$2276+1,?_exp+1
  2059  0035C8  C17C  F0A4         	movff	_doWork$2276+2,?_exp+2
  2060  0035CC  C17D  F0A5         	movff	_doWork$2276+3,?_exp+3
  2061  0035D0  EC52  F01D         	call	_exp	;wreg free
  2062  0035D4  C0A5  F181         	movff	?_exp+3,_doWork$2277+3
  2063  0035D8  C0A4  F180         	movff	?_exp+2,_doWork$2277+2
  2064  0035DC  C0A3  F17F         	movff	?_exp+1,_doWork$2277+1
  2065  0035E0  C0A2  F17E         	movff	?_exp,_doWork$2277
  2066                           
  2067                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2068  0035E4  C17E  F068         	movff	_doWork$2277,?___flmul
  2069  0035E8  C17F  F069         	movff	_doWork$2277+1,?___flmul+1
  2070  0035EC  C180  F06A         	movff	_doWork$2277+2,?___flmul+2
  2071  0035F0  C181  F06B         	movff	_doWork$2277+3,?___flmul+3
  2072  0035F4  0100               	movlb	0	; () banked
  2073  0035F6  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2074  0035F8  0E40               	movlw	64
  2075  0035FA  6F6D               	movwf	(?___flmul+5)& (0+255),b
  2076  0035FC  0E1C               	movlw	28
  2077  0035FE  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2078  003600  0E46               	movlw	70
  2079  003602  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2080  003604  ECFE  F023         	call	___flmul	;wreg free
  2081  003608  C06B  F175         	movff	?___flmul+3,doWork@Rinf+3
  2082  00360C  C06A  F174         	movff	?___flmul+2,doWork@Rinf+2
  2083  003610  C069  F173         	movff	?___flmul+1,doWork@Rinf+1
  2084  003614  C068  F172         	movff	?___flmul,doWork@Rinf
  2085                           
  2086                           ;main.c: 473: v = 5.0 * (double) avarage / 1025;
  2087  003618  0100               	movlb	0	; () banked
  2088  00361A  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2089  00361C  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2090  00361E  0EA0               	movlw	160
  2091  003620  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2092  003622  0E40               	movlw	64
  2093  003624  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2094  003626  C19D  F068         	movff	doWork@avarage,?___flmul
  2095  00362A  C19E  F069         	movff	doWork@avarage+1,?___flmul+1
  2096  00362E  C19F  F06A         	movff	doWork@avarage+2,?___flmul+2
  2097  003632  C1A0  F06B         	movff	doWork@avarage+3,?___flmul+3
  2098  003636  ECFE  F023         	call	___flmul	;wreg free
  2099  00363A  C06B  F063         	movff	?___flmul+3,?___fldiv+3
  2100  00363E  C06A  F062         	movff	?___flmul+2,?___fldiv+2
  2101  003642  C069  F061         	movff	?___flmul+1,?___fldiv+1
  2102  003646  C068  F060         	movff	?___flmul,?___fldiv
  2103  00364A  0100               	movlb	0	; () banked
  2104  00364C  6B64               	clrf	(?___fldiv+4)& (0+255),b
  2105  00364E  0E20               	movlw	32
  2106  003650  6F65               	movwf	(?___fldiv+5)& (0+255),b
  2107  003652  0E80               	movlw	128
  2108  003654  6F66               	movwf	(?___fldiv+6)& (0+255),b
  2109  003656  0E44               	movlw	68
  2110  003658  6F67               	movwf	(?___fldiv+7)& (0+255),b
  2111  00365A  EC41  F026         	call	___fldiv	;wreg free
  2112  00365E  C063  F195         	movff	?___fldiv+3,doWork@v+3
  2113  003662  C062  F194         	movff	?___fldiv+2,doWork@v+2
  2114  003666  C061  F193         	movff	?___fldiv+1,doWork@v+1
  2115  00366A  C060  F192         	movff	?___fldiv,doWork@v
  2116                           
  2117                           ;main.c: 475: resistance = (calVoltage - 10000.0 * v) / v;
  2118  00366E  0100               	movlb	0	; () banked
  2119  003670  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2120  003672  0E40               	movlw	64
  2121  003674  6F6D               	movwf	(?___flmul+5)& (0+255),b
  2122  003676  0E1C               	movlw	28
  2123  003678  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2124  00367A  0E46               	movlw	70
  2125  00367C  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2126  00367E  C192  F068         	movff	doWork@v,?___flmul
  2127  003682  C193  F069         	movff	doWork@v+1,?___flmul+1
  2128  003686  C194  F06A         	movff	doWork@v+2,?___flmul+2
  2129  00368A  C195  F06B         	movff	doWork@v+3,?___flmul+3
  2130  00368E  ECFE  F023         	call	___flmul	;wreg free
  2131  003692  C06B  F034         	movff	?___flmul+3,?___flsub+7
  2132  003696  C06A  F033         	movff	?___flmul+2,?___flsub+6
  2133  00369A  C069  F032         	movff	?___flmul+1,?___flsub+5
  2134  00369E  C068  F031         	movff	?___flmul,?___flsub+4
  2135  0036A2  C176  F02D         	movff	doWork@calVoltage,?___flsub
  2136  0036A6  C177  F02E         	movff	doWork@calVoltage+1,?___flsub+1
  2137  0036AA  C178  F02F         	movff	doWork@calVoltage+2,?___flsub+2
  2138  0036AE  C179  F030         	movff	doWork@calVoltage+3,?___flsub+3
  2139  0036B2  ECFD  F02B         	call	___flsub	;wreg free
  2140  0036B6  C030  F063         	movff	?___flsub+3,?___fldiv+3
  2141  0036BA  C02F  F062         	movff	?___flsub+2,?___fldiv+2
  2142  0036BE  C02E  F061         	movff	?___flsub+1,?___fldiv+1
  2143  0036C2  C02D  F060         	movff	?___flsub,?___fldiv
  2144  0036C6  C192  F064         	movff	doWork@v,?___fldiv+4
  2145  0036CA  C193  F065         	movff	doWork@v+1,?___fldiv+5
  2146  0036CE  C194  F066         	movff	doWork@v+2,?___fldiv+6
  2147  0036D2  C195  F067         	movff	doWork@v+3,?___fldiv+7
  2148  0036D6  EC41  F026         	call	___fldiv	;wreg free
  2149  0036DA  C063  F19B         	movff	?___fldiv+3,doWork@resistance+3
  2150  0036DE  C062  F19A         	movff	?___fldiv+2,doWork@resistance+2
  2151  0036E2  C061  F199         	movff	?___fldiv+1,doWork@resistance+1
  2152  0036E6  C060  F198         	movff	?___fldiv,doWork@resistance
  2153                           
  2154                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2155  0036EA  C172  F064         	movff	doWork@Rinf,?___fldiv+4
  2156  0036EE  C173  F065         	movff	doWork@Rinf+1,?___fldiv+5
  2157  0036F2  C174  F066         	movff	doWork@Rinf+2,?___fldiv+6
  2158  0036F6  C175  F067         	movff	doWork@Rinf+3,?___fldiv+7
  2159  0036FA  C198  F060         	movff	doWork@resistance,?___fldiv
  2160  0036FE  C199  F061         	movff	doWork@resistance+1,?___fldiv+1
  2161  003702  C19A  F062         	movff	doWork@resistance+2,?___fldiv+2
  2162  003706  C19B  F063         	movff	doWork@resistance+3,?___fldiv+3
  2163  00370A  EC41  F026         	call	___fldiv	;wreg free
  2164  00370E  C063  F08C         	movff	?___fldiv+3,?_log+3
  2165  003712  C062  F08B         	movff	?___fldiv+2,?_log+2
  2166  003716  C061  F08A         	movff	?___fldiv+1,?_log+1
  2167  00371A  C060  F089         	movff	?___fldiv,?_log
  2168  00371E  ECD9  F021         	call	_log	;wreg free
  2169  003722  C08C  F185         	movff	?_log+3,_doWork$2278+3
  2170  003726  C08B  F184         	movff	?_log+2,_doWork$2278+2
  2171  00372A  C08A  F183         	movff	?_log+1,_doWork$2278+1
  2172  00372E  C089  F182         	movff	?_log,_doWork$2278
  2173                           
  2174                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2175  003732  C196  F01A         	movff	doWork@B,?___lwtofl
  2176  003736  C197  F01B         	movff	doWork@B+1,?___lwtofl+1
  2177  00373A  ECBB  F02C         	call	___lwtofl	;wreg free
  2178  00373E  C01D  F063         	movff	?___lwtofl+3,?___fldiv+3
  2179  003742  C01C  F062         	movff	?___lwtofl+2,?___fldiv+2
  2180  003746  C01B  F061         	movff	?___lwtofl+1,?___fldiv+1
  2181  00374A  C01A  F060         	movff	?___lwtofl,?___fldiv
  2182  00374E  C182  F064         	movff	_doWork$2278,?___fldiv+4
  2183  003752  C183  F065         	movff	_doWork$2278+1,?___fldiv+5
  2184  003756  C184  F066         	movff	_doWork$2278+2,?___fldiv+6
  2185  00375A  C185  F067         	movff	_doWork$2278+3,?___fldiv+7
  2186  00375E  EC41  F026         	call	___fldiv	;wreg free
  2187  003762  C063  F1A4         	movff	?___fldiv+3,doWork@temp+3
  2188  003766  C062  F1A3         	movff	?___fldiv+2,doWork@temp+2
  2189  00376A  C061  F1A2         	movff	?___fldiv+1,doWork@temp+1
  2190  00376E  C060  F1A1         	movff	?___fldiv,doWork@temp
  2191                           
  2192                           ;main.c: 479: temp -= 273.15;
  2193  003772  0101               	movlb	1	; () banked
  2194  003774  0E01               	movlw	high doWork@temp
  2195  003776  6E36               	movwf	?___asflsub+1,c
  2196  003778  0EA1               	movlw	low doWork@temp
  2197  00377A  6E35               	movwf	?___asflsub,c
  2198  00377C  0E33               	movlw	51
  2199  00377E  6E37               	movwf	?___asflsub+2,c
  2200  003780  0E93               	movlw	147
  2201  003782  6E38               	movwf	?___asflsub+3,c
  2202  003784  0E88               	movlw	136
  2203  003786  6E39               	movwf	?___asflsub+4,c
  2204  003788  0E43               	movlw	67
  2205  00378A  6E3A               	movwf	?___asflsub+5,c
  2206  00378C  ECC9  F02A         	call	___asflsub	;wreg free
  2207                           
  2208                           ;main.c: 494: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2209  003790  0101               	movlb	1	; () banked
  2210  003792  51A5               	movf	doWork@i& (0+255),w,b
  2211  003794  0D02               	mullw	2
  2212  003796  0E00               	movlw	low _current_temp
  2213  003798  24F3               	addwf	prodl,w,c
  2214  00379A  6ED9               	movwf	fsr2l,c
  2215  00379C  0E01               	movlw	high _current_temp
  2216  00379E  20F4               	addwfc	prodh,w,c
  2217  0037A0  6EDA               	movwf	fsr2h,c
  2218  0037A2  CFDE F0AD          	movff	postinc2,??_doWork
  2219  0037A6  CFDD F0AE          	movff	postdec2,??_doWork+1
  2220  0037AA  C0AD  F0AF         	movff	??_doWork,??_doWork+2
  2221  0037AE  C0AE  F0B0         	movff	??_doWork+1,??_doWork+3
  2222  0037B2  0E00               	movlw	0
  2223  0037B4  0100               	movlb	0	; () banked
  2224  0037B6  BFB0               	btfsc	(??_doWork+3)& (0+255),7,b
  2225  0037B8  0EFF               	movlw	255
  2226  0037BA  6FB1               	movwf	(??_doWork+4)& (0+255),b
  2227  0037BC  6FB2               	movwf	(??_doWork+5)& (0+255),b
  2228  0037BE  0101               	movlb	1	; () banked
  2229  0037C0  51A5               	movf	doWork@i& (0+255),w,b
  2230  0037C2  ECB0  F029         	call	_getCalibrationValue
  2231  0037C6  C01A  F0B3         	movff	?_getCalibrationValue,??_doWork+6
  2232  0037CA  C01B  F0B4         	movff	?_getCalibrationValue+1,??_doWork+7
  2233  0037CE  0E00               	movlw	0
  2234  0037D0  0100               	movlb	0	; () banked
  2235  0037D2  BFB4               	btfsc	(??_doWork+7)& (0+255),7,b
  2236  0037D4  0EFF               	movlw	255
  2237  0037D6  6FB5               	movwf	(??_doWork+8)& (0+255),b
  2238  0037D8  6FB6               	movwf	(??_doWork+9)& (0+255),b
  2239  0037DA  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2240  0037DC  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2241  0037DE  0EC8               	movlw	200
  2242  0037E0  6F6E               	movwf	(?___flmul+6)& (0+255),b
  2243  0037E2  0E42               	movlw	66
  2244  0037E4  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2245  0037E6  C1A1  F068         	movff	doWork@temp,?___flmul
  2246  0037EA  C1A2  F069         	movff	doWork@temp+1,?___flmul+1
  2247  0037EE  C1A3  F06A         	movff	doWork@temp+2,?___flmul+2
  2248  0037F2  C1A4  F06B         	movff	doWork@temp+3,?___flmul+3
  2249  0037F6  ECFE  F023         	call	___flmul	;wreg free
  2250  0037FA  C06B  F081         	movff	?___flmul+3,?___fltol+3
  2251  0037FE  C06A  F080         	movff	?___flmul+2,?___fltol+2
  2252  003802  C069  F07F         	movff	?___flmul+1,?___fltol+1
  2253  003806  C068  F07E         	movff	?___flmul,?___fltol
  2254  00380A  EC43  F027         	call	___fltol	;wreg free
  2255  00380E  51B3               	movf	(??_doWork+6)& (0+255),w,b
  2256  003810  257E               	addwf	?___fltol& (0+255),w,b
  2257  003812  6FB7               	movwf	(??_doWork+10)& (0+255),b
  2258  003814  51B4               	movf	(??_doWork+7)& (0+255),w,b
  2259  003816  217F               	addwfc	(?___fltol+1)& (0+255),w,b
  2260  003818  6FB8               	movwf	(??_doWork+11)& (0+255),b
  2261  00381A  51B5               	movf	(??_doWork+8)& (0+255),w,b
  2262  00381C  2180               	addwfc	(?___fltol+2)& (0+255),w,b
  2263  00381E  6FB9               	movwf	(??_doWork+12)& (0+255),b
  2264  003820  51B6               	movf	(??_doWork+9)& (0+255),w,b
  2265  003822  2181               	addwfc	(?___fltol+3)& (0+255),w,b
  2266  003824  6FBA               	movwf	(??_doWork+13)& (0+255),b
  2267  003826  51AF               	movf	(??_doWork+2)& (0+255),w,b
  2268  003828  25B7               	addwf	(??_doWork+10)& (0+255),w,b
  2269  00382A  6F86               	movwf	?___aldiv& (0+255),b
  2270  00382C  51B0               	movf	(??_doWork+3)& (0+255),w,b
  2271  00382E  21B8               	addwfc	(??_doWork+11)& (0+255),w,b
  2272  003830  6F87               	movwf	(?___aldiv+1)& (0+255),b
  2273  003832  51B1               	movf	(??_doWork+4)& (0+255),w,b
  2274  003834  21B9               	addwfc	(??_doWork+12)& (0+255),w,b
  2275  003836  6F88               	movwf	(?___aldiv+2)& (0+255),b
  2276  003838  51B2               	movf	(??_doWork+5)& (0+255),w,b
  2277  00383A  21BA               	addwfc	(??_doWork+13)& (0+255),w,b
  2278  00383C  6F89               	movwf	(?___aldiv+3)& (0+255),b
  2279  00383E  0E02               	movlw	2
  2280  003840  6F8A               	movwf	(?___aldiv+4)& (0+255),b
  2281  003842  0E00               	movlw	0
  2282  003844  6B8B               	clrf	(?___aldiv+5)& (0+255),b
  2283  003846  6B8C               	clrf	(?___aldiv+6)& (0+255),b
  2284  003848  6B8D               	clrf	(?___aldiv+7)& (0+255),b
  2285  00384A  EC8A  F025         	call	___aldiv	;wreg free
  2286  00384E  0101               	movlb	1	; () banked
  2287  003850  51A5               	movf	doWork@i& (0+255),w,b
  2288  003852  0D02               	mullw	2
  2289  003854  0E00               	movlw	low _current_temp
  2290  003856  24F3               	addwf	prodl,w,c
  2291  003858  6ED9               	movwf	fsr2l,c
  2292  00385A  0E01               	movlw	high _current_temp
  2293  00385C  20F4               	addwfc	prodh,w,c
  2294  00385E  6EDA               	movwf	fsr2h,c
  2295  003860  0100               	movlb	0	; () banked
  2296  003862  C086  FFDE         	movff	?___aldiv,postinc2
  2297  003866  C087  FFDD         	movff	?___aldiv+1,postdec2
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 515: }
  2301                           ;main.c: 518: adc_conversion_flags &= ~(1 << i);
  2302                           
  2303                           ;main.c: 496: }
  2304  00386A  C1A5  F0AD         	movff	doWork@i,??_doWork
  2305  00386E  0E01               	movlw	1
  2306  003870  6FAE               	movwf	(??_doWork+1)& (0+255),b
  2307  003872  2BAD               	incf	??_doWork& (0+255),f,b
  2308  003874  D002               	goto	u8654
  2309  003876                     u8655:
  2310  003876  90D8               	bcf	status,0,c
  2311  003878  37AE               	rlcf	(??_doWork+1)& (0+255),f,b
  2312  00387A                     u8654:
  2313  00387A  2FAD               	decfsz	??_doWork& (0+255),f,b
  2314  00387C  D7FC               	goto	u8655
  2315  00387E  1DAE               	comf	(??_doWork+1)& (0+255),w,b
  2316  003880  17C3               	andwf	_adc_conversion_flags& (0+255),f,b
  2317  003882                     l10293:
  2318                           
  2319                           ; BSR set to: 0
  2320  003882  0101               	movlb	1	; () banked
  2321  003884  2BA5               	incf	doWork@i& (0+255),f,b
  2322                           
  2323                           ; BSR set to: 1
  2324  003886  0E05               	movlw	5
  2325  003888  65A5               	cpfsgt	doWork@i& (0+255),b
  2326  00388A  D5F1               	goto	l10239
  2327                           
  2328                           ; BSR set to: 1
  2329  00388C  0C05               	retlw	5
  2330  00388E                     __end_of_doWork:
  2331                           	opt stack 0
  2332                           tblptru	equ	0xFF8
  2333                           prodh	equ	0xFF4
  2334                           prodl	equ	0xFF3
  2335                           postinc0	equ	0xFEE
  2336                           wreg	equ	0xFE8
  2337                           postdec1	equ	0xFE5
  2338                           fsr1h	equ	0xFE2
  2339                           fsr1l	equ	0xFE1
  2340                           indf2	equ	0xFDF
  2341                           postinc2	equ	0xFDE
  2342                           postdec2	equ	0xFDD
  2343                           fsr2h	equ	0xFDA
  2344                           fsr2l	equ	0xFD9
  2345                           status	equ	0xFD8
  2346                           
  2347 ;; *************** function ___lwtofl *****************
  2348 ;; Defined at:
  2349 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;  c               2   25[COMRAM] unsigned int 
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;                  4   25[COMRAM] unsigned int 
  2356 ;; Registers used:
  2357 ;;		wreg, status,2, status,0, cstack
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 0/0
  2361 ;;		Unchanged: 0/0
  2362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2363 ;;      Params:         4       0       0       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0       0       0
  2366 ;;      Totals:         4       0       0       0       0       0       0
  2367 ;;Total ram usage:        4 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    3
  2370 ;; This function calls:
  2371 ;;		___flpack
  2372 ;; This function is called by:
  2373 ;;		_doWork
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376                           
  2377                           	psect	text2
  2378  005976                     __ptext2:
  2379                           	opt stack 0
  2380  005976                     ___lwtofl:
  2381                           	opt stack 26
  2382                           
  2383                           ; BSR set to: 1
  2384                           ;incstack = 0
  2385                           ;incstack = 0
  2386  005976  C01A  F00E         	movff	___lwtofl@c,?___flpack
  2387  00597A  C01B  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2388  00597E  6A10               	clrf	?___flpack+2,c
  2389  005980  6A11               	clrf	?___flpack+3,c
  2390  005982  0E96               	movlw	150
  2391  005984  6E12               	movwf	?___flpack+4,c
  2392  005986  0E00               	movlw	0
  2393  005988  6A13               	clrf	?___flpack+5,c
  2394  00598A  EC2A  F025         	call	___flpack	;wreg free
  2395  00598E  C011  F01D         	movff	?___flpack+3,?___lwtofl+3
  2396  005992  C010  F01C         	movff	?___flpack+2,?___lwtofl+2
  2397  005996  C00F  F01B         	movff	?___flpack+1,?___lwtofl+1
  2398  00599A  C00E  F01A         	movff	?___flpack,?___lwtofl
  2399  00599E  0012               	return	
  2400  0059A0                     __end_of___lwtofl:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           postinc0	equ	0xFEE
  2406                           wreg	equ	0xFE8
  2407                           postdec1	equ	0xFE5
  2408                           fsr1h	equ	0xFE2
  2409                           fsr1l	equ	0xFE1
  2410                           indf2	equ	0xFDF
  2411                           postinc2	equ	0xFDE
  2412                           postdec2	equ	0xFDD
  2413                           fsr2h	equ	0xFDA
  2414                           fsr2l	equ	0xFD9
  2415                           status	equ	0xFD8
  2416                           
  2417 ;; *************** function ___asfldiv *****************
  2418 ;; Defined at:
  2419 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  2420 ;; Parameters:    Size  Location     Type
  2421 ;;  f1p             2    8[BANK0 ] PTR 
  2422 ;;		 -> doWork@avarage(4), 
  2423 ;;  f2              4   10[BANK0 ] PTR 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;		None
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  4    8[BANK0 ] PTR 
  2428 ;; Registers used:
  2429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : F/0
  2432 ;;		On exit  : F/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2435 ;;      Params:         0       6       0       0       0       0       0
  2436 ;;      Locals:         0       0       0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0
  2438 ;;      Totals:         0       6       0       0       0       0       0
  2439 ;;Total ram usage:        6 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    4
  2442 ;; This function calls:
  2443 ;;		___fldiv
  2444 ;; This function is called by:
  2445 ;;		_doWork
  2446 ;; This function uses a non-reentrant model
  2447 ;;
  2448                           
  2449                           	psect	text3
  2450  005418                     __ptext3:
  2451                           	opt stack 0
  2452  005418                     ___asfldiv:
  2453                           	opt stack 25
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;	Return value of ___asfldiv is never used
  2457                           
  2458                           ;incstack = 0
  2459                           ;incstack = 0
  2460  005418  C068  FFD9         	movff	___asfldiv@f1p,fsr2l
  2461  00541C  C069  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2462  005420  CFDE F060          	movff	postinc2,?___fldiv
  2463  005424  CFDE F061          	movff	postinc2,?___fldiv+1
  2464  005428  CFDE F062          	movff	postinc2,?___fldiv+2
  2465  00542C  CFDE F063          	movff	postinc2,?___fldiv+3
  2466  005430  C06A  F064         	movff	___asfldiv@f2,?___fldiv+4
  2467  005434  C06B  F065         	movff	___asfldiv@f2+1,?___fldiv+5
  2468  005438  C06C  F066         	movff	___asfldiv@f2+2,?___fldiv+6
  2469  00543C  C06D  F067         	movff	___asfldiv@f2+3,?___fldiv+7
  2470  005440  EC41  F026         	call	___fldiv	;wreg free
  2471  005444  C068  FFD9         	movff	___asfldiv@f1p,fsr2l
  2472  005448  C069  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2473  00544C  0100               	movlb	0	; () banked
  2474  00544E  C060  FFDE         	movff	?___fldiv,postinc2
  2475  005452  C061  FFDE         	movff	?___fldiv+1,postinc2
  2476  005456  C062  FFDE         	movff	?___fldiv+2,postinc2
  2477  00545A  C063  FFDD         	movff	?___fldiv+3,postdec2
  2478  00545E  06D9               	decf	fsr2l,f,c
  2479  005460  06D9               	decf	fsr2l,f,c
  2480                           
  2481                           ; BSR set to: 0
  2482  005462  0012               	return	
  2483  005464                     __end_of___asfldiv:
  2484                           	opt stack 0
  2485                           tblptru	equ	0xFF8
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1h	equ	0xFE2
  2492                           fsr1l	equ	0xFE1
  2493                           indf2	equ	0xFDF
  2494                           postinc2	equ	0xFDE
  2495                           postdec2	equ	0xFDD
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function ___asfladd *****************
  2501 ;; Defined at:
  2502 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;  f1p             2   44[COMRAM] PTR 
  2505 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2506 ;;  f2              4   46[COMRAM] PTR 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;		None
  2509 ;; Return value:  Size  Location     Type
  2510 ;;                  4   44[COMRAM] PTR 
  2511 ;; Registers used:
  2512 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2513 ;; Tracked objects:
  2514 ;;		On entry : 0/0
  2515 ;;		On exit  : 0/0
  2516 ;;		Unchanged: 0/0
  2517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2518 ;;      Params:         6       0       0       0       0       0       0
  2519 ;;      Locals:         0       0       0       0       0       0       0
  2520 ;;      Temps:          0       0       0       0       0       0       0
  2521 ;;      Totals:         6       0       0       0       0       0       0
  2522 ;;Total ram usage:        6 bytes
  2523 ;; Hardware stack levels used:    1
  2524 ;; Hardware stack levels required when called:    4
  2525 ;; This function calls:
  2526 ;;		___fladd
  2527 ;; This function is called by:
  2528 ;;		_doWork
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text4
  2533  005548                     __ptext4:
  2534                           	opt stack 0
  2535  005548                     ___asfladd:
  2536                           	opt stack 25
  2537                           
  2538                           ;	Return value of ___asfladd is never used
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;incstack = 0
  2542                           ;incstack = 0
  2543  005548  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  2544  00554C  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2545  005550  CFDE F01E          	movff	postinc2,?___fladd
  2546  005554  CFDE F01F          	movff	postinc2,?___fladd+1
  2547  005558  CFDE F020          	movff	postinc2,?___fladd+2
  2548  00555C  CFDE F021          	movff	postinc2,?___fladd+3
  2549  005560  C02F  F022         	movff	___asfladd@f2,?___fladd+4
  2550  005564  C030  F023         	movff	___asfladd@f2+1,?___fladd+5
  2551  005568  C031  F024         	movff	___asfladd@f2+2,?___fladd+6
  2552  00556C  C032  F025         	movff	___asfladd@f2+3,?___fladd+7
  2553  005570  EC81  F020         	call	___fladd	;wreg free
  2554  005574  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  2555  005578  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2556  00557C  C01E  FFDE         	movff	?___fladd,postinc2
  2557  005580  C01F  FFDE         	movff	?___fladd+1,postinc2
  2558  005584  C020  FFDE         	movff	?___fladd+2,postinc2
  2559  005588  C021  FFDD         	movff	?___fladd+3,postdec2
  2560  00558C  06D9               	decf	fsr2l,f,c
  2561  00558E  06D9               	decf	fsr2l,f,c
  2562  005590  0012               	return	
  2563  005592                     __end_of___asfladd:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           prodh	equ	0xFF4
  2567                           prodl	equ	0xFF3
  2568                           postinc0	equ	0xFEE
  2569                           wreg	equ	0xFE8
  2570                           postdec1	equ	0xFE5
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           indf2	equ	0xFDF
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           fsr2h	equ	0xFDA
  2577                           fsr2l	equ	0xFD9
  2578                           status	equ	0xFD8
  2579                           
  2580 ;; *************** function ___aldiv *****************
  2581 ;; Defined at:
  2582 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  dividend        4   38[BANK0 ] long 
  2585 ;;  divisor         4   42[BANK0 ] long 
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;  quotient        4   48[BANK0 ] long 
  2588 ;;  sign            1   47[BANK0 ] unsigned char 
  2589 ;;  counter         1   46[BANK0 ] unsigned char 
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  4   38[BANK0 ] long 
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0
  2594 ;; Tracked objects:
  2595 ;;		On entry : F/0
  2596 ;;		On exit  : F/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2599 ;;      Params:         0       8       0       0       0       0       0
  2600 ;;      Locals:         0       6       0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0
  2602 ;;      Totals:         0      14       0       0       0       0       0
  2603 ;;Total ram usage:       14 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    2
  2606 ;; This function calls:
  2607 ;;		Nothing
  2608 ;; This function is called by:
  2609 ;;		_doWork
  2610 ;; This function uses a non-reentrant model
  2611 ;;
  2612                           
  2613                           	psect	text5
  2614  004B14                     __ptext5:
  2615                           	opt stack 0
  2616  004B14                     ___aldiv:
  2617                           	opt stack 27
  2618                           
  2619                           ; BSR set to: 0
  2620                           
  2621                           ;incstack = 0
  2622                           ;incstack = 0
  2623  004B14  6B8F               	clrf	___aldiv@sign& (0+255),b
  2624  004B16  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2625  004B18  D00A               	goto	l11315
  2626                           
  2627                           ; BSR set to: 0
  2628  004B1A  1F8D               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2629  004B1C  1F8C               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2630  004B1E  1F8B               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2631  004B20  6D8A               	negf	___aldiv@divisor& (0+255),b
  2632  004B22  0E00               	movlw	0
  2633  004B24  238B               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2634  004B26  238C               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2635  004B28  238D               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2636                           
  2637                           ; BSR set to: 0
  2638  004B2A  0E01               	movlw	1
  2639  004B2C  6F8F               	movwf	___aldiv@sign& (0+255),b
  2640  004B2E                     l11315:
  2641                           
  2642                           ; BSR set to: 0
  2643  004B2E  AF89               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2644  004B30  D00A               	goto	l11321
  2645                           
  2646                           ; BSR set to: 0
  2647  004B32  1F89               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2648  004B34  1F88               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2649  004B36  1F87               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2650  004B38  6D86               	negf	___aldiv@dividend& (0+255),b
  2651  004B3A  0E00               	movlw	0
  2652  004B3C  2387               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2653  004B3E  2388               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2654  004B40  2389               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2655                           
  2656                           ; BSR set to: 0
  2657  004B42  0E01               	movlw	1
  2658  004B44  1B8F               	xorwf	___aldiv@sign& (0+255),f,b
  2659  004B46                     l11321:
  2660                           
  2661                           ; BSR set to: 0
  2662  004B46  6B90               	clrf	___aldiv@quotient& (0+255),b
  2663  004B48  6B91               	clrf	(___aldiv@quotient+1)& (0+255),b
  2664  004B4A  6B92               	clrf	(___aldiv@quotient+2)& (0+255),b
  2665  004B4C  6B93               	clrf	(___aldiv@quotient+3)& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668  004B4E  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2669  004B50  118A               	iorwf	___aldiv@divisor& (0+255),w,b
  2670  004B52  118B               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2671  004B54  118C               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2672  004B56  E029               	bz	l11343
  2673                           
  2674                           ; BSR set to: 0
  2675  004B58  0E01               	movlw	1
  2676  004B5A  6F8E               	movwf	___aldiv@counter& (0+255),b
  2677  004B5C  D006               	goto	l11329
  2678  004B5E                     l11327:
  2679                           
  2680                           ; BSR set to: 0
  2681  004B5E  90D8               	bcf	status,0,c
  2682  004B60  378A               	rlcf	___aldiv@divisor& (0+255),f,b
  2683  004B62  378B               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2684  004B64  378C               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2685  004B66  378D               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2686  004B68  2B8E               	incf	___aldiv@counter& (0+255),f,b
  2687  004B6A                     l11329:
  2688                           
  2689                           ; BSR set to: 0
  2690  004B6A  AF8D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2691  004B6C  D7F8               	goto	l11327
  2692  004B6E                     l11331:
  2693                           
  2694                           ; BSR set to: 0
  2695  004B6E  90D8               	bcf	status,0,c
  2696  004B70  3790               	rlcf	___aldiv@quotient& (0+255),f,b
  2697  004B72  3791               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2698  004B74  3792               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2699  004B76  3793               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2700                           
  2701                           ; BSR set to: 0
  2702  004B78  518A               	movf	___aldiv@divisor& (0+255),w,b
  2703  004B7A  5D86               	subwf	___aldiv@dividend& (0+255),w,b
  2704  004B7C  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2705  004B7E  5987               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2706  004B80  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2707  004B82  5988               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2708  004B84  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2709  004B86  5989               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2710  004B88  E309               	bnc	l11339
  2711                           
  2712                           ; BSR set to: 0
  2713  004B8A  518A               	movf	___aldiv@divisor& (0+255),w,b
  2714  004B8C  5F86               	subwf	___aldiv@dividend& (0+255),f,b
  2715  004B8E  518B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2716  004B90  5B87               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2717  004B92  518C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2718  004B94  5B88               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2719  004B96  518D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2720  004B98  5B89               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2721                           
  2722                           ; BSR set to: 0
  2723  004B9A  8190               	bsf	___aldiv@quotient& (0+255),0,b
  2724  004B9C                     l11339:
  2725                           
  2726                           ; BSR set to: 0
  2727  004B9C  90D8               	bcf	status,0,c
  2728  004B9E  338D               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2729  004BA0  338C               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2730  004BA2  338B               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2731  004BA4  338A               	rrcf	___aldiv@divisor& (0+255),f,b
  2732                           
  2733                           ; BSR set to: 0
  2734  004BA6  2F8E               	decfsz	___aldiv@counter& (0+255),f,b
  2735  004BA8  D7E2               	goto	l11331
  2736  004BAA                     l11343:
  2737                           
  2738                           ; BSR set to: 0
  2739  004BAA  518F               	movf	___aldiv@sign& (0+255),w,b
  2740  004BAC  E008               	bz	l11347
  2741                           
  2742                           ; BSR set to: 0
  2743  004BAE  1F93               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2744  004BB0  1F92               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2745  004BB2  1F91               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2746  004BB4  6D90               	negf	___aldiv@quotient& (0+255),b
  2747  004BB6  0E00               	movlw	0
  2748  004BB8  2391               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2749  004BBA  2392               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2750  004BBC  2393               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2751  004BBE                     l11347:
  2752                           
  2753                           ; BSR set to: 0
  2754  004BBE  C090  F086         	movff	___aldiv@quotient,?___aldiv
  2755  004BC2  C091  F087         	movff	___aldiv@quotient+1,?___aldiv+1
  2756  004BC6  C092  F088         	movff	___aldiv@quotient+2,?___aldiv+2
  2757  004BCA  C093  F089         	movff	___aldiv@quotient+3,?___aldiv+3
  2758                           
  2759                           ; BSR set to: 0
  2760  004BCE  0012               	return	
  2761  004BD0                     __end_of___aldiv:
  2762                           	opt stack 0
  2763                           tblptru	equ	0xFF8
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           postinc0	equ	0xFEE
  2767                           wreg	equ	0xFE8
  2768                           postdec1	equ	0xFE5
  2769                           fsr1h	equ	0xFE2
  2770                           fsr1l	equ	0xFE1
  2771                           indf2	equ	0xFDF
  2772                           postinc2	equ	0xFDE
  2773                           postdec2	equ	0xFDD
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _getCalibrationValue *****************
  2779 ;; Defined at:
  2780 ;;		line 864 in file "../main.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  i               1    wreg     unsigned char 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  i               1   34[COMRAM] unsigned char 
  2785 ;;  cal             2   32[COMRAM] short 
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  2   25[COMRAM] short 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : F/1
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2795 ;;      Params:         2       0       0       0       0       0       0
  2796 ;;      Locals:         3       0       0       0       0       0       0
  2797 ;;      Temps:          5       0       0       0       0       0       0
  2798 ;;      Totals:        10       0       0       0       0       0       0
  2799 ;;Total ram usage:       10 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    3
  2802 ;; This function calls:
  2803 ;;		_readEEPROM
  2804 ;; This function is called by:
  2805 ;;		_doWork
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text6
  2810  005360                     __ptext6:
  2811                           	opt stack 0
  2812  005360                     _getCalibrationValue:
  2813                           	opt stack 26
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;incstack = 0
  2817                           ;incstack = 0
  2818                           ;getCalibrationValue@i stored from wreg
  2819  005360  CFE8 F023          	movff	wreg,getCalibrationValue@i
  2820                           
  2821                           ; BSR set to: 1
  2822                           ;main.c: 865: int16_t cal;
  2823                           ;main.c: 867: cal = ((uint8_t)readEEPROM(2 * i + 0x9E))<<8 +
  2824                           ;main.c: 868: readEEPROM(2 * i + 0x9F);
  2825  005364  5023               	movf	getCalibrationValue@i,w,c
  2826  005366  0D02               	mullw	2
  2827  005368  0E9F               	movlw	159
  2828  00536A  24F3               	addwf	prodl,w,c
  2829  00536C  6E16               	movwf	?_readEEPROM,c
  2830  00536E  0E00               	movlw	0
  2831  005370  20F4               	addwfc	prodh,w,c
  2832  005372  6E17               	movwf	?_readEEPROM+1,c
  2833  005374  EC0F  F02E         	call	_readEEPROM	;wreg free
  2834  005378  6E1C               	movwf	??_getCalibrationValue& (0+255),c
  2835  00537A  0E08               	movlw	8
  2836  00537C  261C               	addwf	??_getCalibrationValue,f,c
  2837  00537E  90D8               	bcf	status,0,c
  2838  005380  3423               	rlcf	getCalibrationValue@i,w,c
  2839  005382  6E1D               	movwf	(??_getCalibrationValue+1)& (0+255),c
  2840  005384  6A1E               	clrf	(??_getCalibrationValue+2)& (0+255),c
  2841  005386  361E               	rlcf	(??_getCalibrationValue+2)& (0+255),f,c
  2842  005388  0E9E               	movlw	158
  2843  00538A  241D               	addwf	??_getCalibrationValue+1,w,c
  2844  00538C  6E16               	movwf	?_readEEPROM,c
  2845  00538E  0E00               	movlw	0
  2846  005390  201E               	addwfc	??_getCalibrationValue+2,w,c
  2847  005392  6E17               	movwf	?_readEEPROM+1,c
  2848  005394  EC0F  F02E         	call	_readEEPROM	;wreg free
  2849  005398  6E1F               	movwf	(??_getCalibrationValue+3)& (0+255),c
  2850  00539A  6A20               	clrf	(??_getCalibrationValue+4)& (0+255),c
  2851  00539C  2A1C               	incf	??_getCalibrationValue,f,c
  2852  00539E  D003               	goto	u8764
  2853  0053A0                     u8765:
  2854  0053A0  90D8               	bcf	status,0,c
  2855  0053A2  361F               	rlcf	??_getCalibrationValue+3,f,c
  2856  0053A4  3620               	rlcf	??_getCalibrationValue+4,f,c
  2857  0053A6                     u8764:
  2858  0053A6  2E1C               	decfsz	??_getCalibrationValue,f,c
  2859  0053A8  D7FB               	goto	u8765
  2860  0053AA  C01F  F021         	movff	??_getCalibrationValue+3,getCalibrationValue@cal
  2861  0053AE  C020  F022         	movff	??_getCalibrationValue+4,getCalibrationValue@cal+1
  2862                           
  2863                           ;main.c: 870: return cal;
  2864  0053B2  C021  F01A         	movff	getCalibrationValue@cal,?_getCalibrationValue
  2865  0053B6  C022  F01B         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  2866  0053BA  0012               	return	
  2867  0053BC                     __end_of_getCalibrationValue:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           prodh	equ	0xFF4
  2871                           prodl	equ	0xFF3
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1h	equ	0xFE2
  2876                           fsr1l	equ	0xFE1
  2877                           indf2	equ	0xFDF
  2878                           postinc2	equ	0xFDE
  2879                           postdec2	equ	0xFDD
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function _log *****************
  2885 ;; Defined at:
  2886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  x               4   41[BANK0 ] short 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  exponent        2   67[COMRAM] int 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  4   41[BANK0 ] int 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/1
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2900 ;;      Params:         0       4       0       0       0       0       0
  2901 ;;      Locals:         2       0       0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0
  2903 ;;      Totals:         2       4       0       0       0       0       0
  2904 ;;Total ram usage:        6 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    5
  2907 ;; This function calls:
  2908 ;;		___fladd
  2909 ;;		___flmul
  2910 ;;		___awtofl
  2911 ;;		_eval_poly
  2912 ;;		_frexp
  2913 ;; This function is called by:
  2914 ;;		_doWork
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text7
  2919  0043B2                     __ptext7:
  2920                           	opt stack 0
  2921  0043B2                     _log:
  2922                           	opt stack 24
  2923                           
  2924                           ;incstack = 0
  2925                           ;incstack = 0
  2926  0043B2  0100               	movlb	0	; () banked
  2927  0043B4  BF8C               	btfsc	(log@x+3)& (0+255),7,b
  2928  0043B6  D007               	goto	u8750
  2929                           
  2930                           ; BSR set to: 0
  2931                           
  2932                           ; BSR set to: 0
  2933  0043B8  EE20  F089         	lfsr	2,log@x
  2934  0043BC  50DE               	movf	postinc2,w,c
  2935  0043BE  10DE               	iorwf	postinc2,w,c
  2936  0043C0  10DE               	iorwf	postinc2,w,c
  2937  0043C2  10DE               	iorwf	postinc2,w,c
  2938  0043C4  E105               	bnz	l10347
  2939  0043C6                     u8750:
  2940                           
  2941                           ; BSR set to: 0
  2942  0043C6  6B89               	clrf	?_log& (0+255),b
  2943  0043C8  6B8A               	clrf	(?_log+1)& (0+255),b
  2944  0043CA  6B8B               	clrf	(?_log+2)& (0+255),b
  2945  0043CC  6B8C               	clrf	(?_log+3)& (0+255),b
  2946  0043CE  D087               	goto	l1852
  2947  0043D0                     l10347:
  2948                           
  2949                           ; BSR set to: 0
  2950  0043D0  6B6C               	clrf	(?___flmul+4)& (0+255),b
  2951  0043D2  6B6D               	clrf	(?___flmul+5)& (0+255),b
  2952  0043D4  6B6E               	clrf	(?___flmul+6)& (0+255),b
  2953  0043D6  0E40               	movlw	64
  2954  0043D8  6F6F               	movwf	(?___flmul+7)& (0+255),b
  2955  0043DA  0E44               	movlw	low log@exponent
  2956  0043DC  6E12               	movwf	?_frexp+4,c
  2957  0043DE  0E00               	movlw	high log@exponent
  2958  0043E0  6E13               	movwf	?_frexp+5,c
  2959  0043E2  0E0F               	movlw	15
  2960  0043E4  6E13               	movwf	?_frexp+5,c
  2961  0043E6  0E5F               	movlw	__accesstop+-1
  2962  0043E8  6412               	cpfsgt	?_frexp+4,c
  2963  0043EA  6A13               	clrf	?_frexp+5,c
  2964  0043EC  C089  F00E         	movff	log@x,?_frexp
  2965  0043F0  C08A  F00F         	movff	log@x+1,?_frexp+1
  2966  0043F4  C08B  F010         	movff	log@x+2,?_frexp+2
  2967  0043F8  C08C  F011         	movff	log@x+3,?_frexp+3
  2968  0043FC  EC73  F028         	call	_frexp	;wreg free
  2969  004400  C011  F06B         	movff	?_frexp+3,?___flmul+3
  2970  004404  C010  F06A         	movff	?_frexp+2,?___flmul+2
  2971  004408  C00F  F069         	movff	?_frexp+1,?___flmul+1
  2972  00440C  C00E  F068         	movff	?_frexp,?___flmul
  2973  004410  ECFE  F023         	call	___flmul	;wreg free
  2974  004414  C06B  F021         	movff	?___flmul+3,?___fladd+3
  2975  004418  C06A  F020         	movff	?___flmul+2,?___fladd+2
  2976  00441C  C069  F01F         	movff	?___flmul+1,?___fladd+1
  2977  004420  C068  F01E         	movff	?___flmul,?___fladd
  2978  004424  6A22               	clrf	?___fladd+4,c
  2979  004426  6A23               	clrf	?___fladd+5,c
  2980  004428  0E80               	movlw	128
  2981  00442A  6E24               	movwf	?___fladd+6,c
  2982  00442C  0EBF               	movlw	191
  2983  00442E  6E25               	movwf	?___fladd+7,c
  2984  004430  EC81  F020         	call	___fladd	;wreg free
  2985  004434  C021  F08C         	movff	?___fladd+3,log@x+3
  2986  004438  C020  F08B         	movff	?___fladd+2,log@x+2
  2987  00443C  C01F  F08A         	movff	?___fladd+1,log@x+1
  2988  004440  C01E  F089         	movff	?___fladd,log@x
  2989  004444  0644               	decf	log@exponent,f,c
  2990  004446  A0D8               	btfss	status,0,c
  2991  004448  0645               	decf	log@exponent+1,f,c
  2992  00444A  C089  F07E         	movff	log@x,?_eval_poly
  2993  00444E  C08A  F07F         	movff	log@x+1,?_eval_poly+1
  2994  004452  C08B  F080         	movff	log@x+2,?_eval_poly+2
  2995  004456  C08C  F081         	movff	log@x+3,?_eval_poly+3
  2996  00445A  0E48               	movlw	low log@coeff
  2997  00445C  0100               	movlb	0	; () banked
  2998  00445E  6F82               	movwf	(?_eval_poly+4)& (0+255),b
  2999  004460  6B84               	clrf	(?_eval_poly+6)& (0+255),b
  3000  004462  0E08               	movlw	8
  3001  004464  6F83               	movwf	(?_eval_poly+5)& (0+255),b
  3002  004466  ECCA  F024         	call	_eval_poly	;wreg free
  3003  00446A  C081  F08C         	movff	?_eval_poly+3,log@x+3
  3004  00446E  C080  F08B         	movff	?_eval_poly+2,log@x+2
  3005  004472  C07F  F08A         	movff	?_eval_poly+1,log@x+1
  3006  004476  C07E  F089         	movff	?_eval_poly,log@x
  3007                           
  3008                           ; BSR set to: 0
  3009  00447A  0E18               	movlw	24
  3010  00447C  6F6C               	movwf	(?___flmul+4)& (0+255),b
  3011  00447E  0E72               	movlw	114
  3012  004480  6F6D               	movwf	(?___flmul+5)& (0+255),b
  3013  004482  0E31               	movlw	49
  3014  004484  6F6E               	movwf	(?___flmul+6)& (0+255),b
  3015  004486  0E3F               	movlw	63
  3016  004488  6F6F               	movwf	(?___flmul+7)& (0+255),b
  3017  00448A  C044  F018         	movff	log@exponent,?___awtofl
  3018  00448E  C045  F019         	movff	log@exponent+1,?___awtofl+1
  3019  004492  EC37  F02C         	call	___awtofl	;wreg free
  3020  004496  C01B  F06B         	movff	?___awtofl+3,?___flmul+3
  3021  00449A  C01A  F06A         	movff	?___awtofl+2,?___flmul+2
  3022  00449E  C019  F069         	movff	?___awtofl+1,?___flmul+1
  3023  0044A2  C018  F068         	movff	?___awtofl,?___flmul
  3024  0044A6  ECFE  F023         	call	___flmul	;wreg free
  3025  0044AA  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3026  0044AE  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3027  0044B2  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3028  0044B6  C068  F01E         	movff	?___flmul,?___fladd
  3029  0044BA  C089  F022         	movff	log@x,?___fladd+4
  3030  0044BE  C08A  F023         	movff	log@x+1,?___fladd+5
  3031  0044C2  C08B  F024         	movff	log@x+2,?___fladd+6
  3032  0044C6  C08C  F025         	movff	log@x+3,?___fladd+7
  3033  0044CA  EC81  F020         	call	___fladd	;wreg free
  3034  0044CE  C021  F08C         	movff	?___fladd+3,?_log+3
  3035  0044D2  C020  F08B         	movff	?___fladd+2,?_log+2
  3036  0044D6  C01F  F08A         	movff	?___fladd+1,?_log+1
  3037  0044DA  C01E  F089         	movff	?___fladd,?_log
  3038  0044DE                     l1852:
  3039  0044DE  0012               	return	
  3040  0044E0                     __end_of_log:
  3041                           	opt stack 0
  3042                           tblptru	equ	0xFF8
  3043                           prodh	equ	0xFF4
  3044                           prodl	equ	0xFF3
  3045                           postinc0	equ	0xFEE
  3046                           wreg	equ	0xFE8
  3047                           postdec1	equ	0xFE5
  3048                           fsr1h	equ	0xFE2
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _exp *****************
  3058 ;; Defined at:
  3059 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;  x               4   66[BANK0 ] int 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;  exponent        2   74[BANK0 ] int 
  3064 ;;  sign            1   76[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  4   66[BANK0 ] unsigned char 
  3067 ;; Registers used:
  3068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/1
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3074 ;;      Params:         0       4       0       0       0       0       0
  3075 ;;      Locals:         0       7       0       0       0       0       0
  3076 ;;      Temps:          0       0       0       0       0       0       0
  3077 ;;      Totals:         0      11       0       0       0       0       0
  3078 ;;Total ram usage:       11 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    6
  3081 ;; This function calls:
  3082 ;;		___fldiv
  3083 ;;		___asflmul
  3084 ;;		___asflsub
  3085 ;;		___awtofl
  3086 ;;		_floor
  3087 ;;		_eval_poly
  3088 ;;		_ldexp
  3089 ;;		___flge
  3090 ;;		___flneg
  3091 ;;		___fltol
  3092 ;; This function is called by:
  3093 ;;		_doWork
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text8
  3098  003AA4                     __ptext8:
  3099                           	opt stack 0
  3100  003AA4                     _exp:
  3101                           	opt stack 23
  3102                           
  3103                           ;incstack = 0
  3104                           ;incstack = 0
  3105  003AA4  0100               	movlb	0	; () banked
  3106  003AA6  EE20  F0A2         	lfsr	2,exp@x
  3107  003AAA  50DE               	movf	postinc2,w,c
  3108  003AAC  10DE               	iorwf	postinc2,w,c
  3109  003AAE  10DE               	iorwf	postinc2,w,c
  3110  003AB0  10DE               	iorwf	postinc2,w,c
  3111  003AB2  E107               	bnz	l10309
  3112                           
  3113                           ; BSR set to: 0
  3114  003AB4  0E00               	movlw	0
  3115  003AB6  6FA2               	movwf	?_exp& (0+255),b
  3116  003AB8  6FA3               	movwf	(?_exp+1)& (0+255),b
  3117  003ABA  0E80               	movlw	128
  3118  003ABC  6FA4               	movwf	(?_exp+2)& (0+255),b
  3119  003ABE  0E3F               	movlw	63
  3120  003AC0  D018               	goto	L1
  3121  003AC2                     l10309:
  3122                           
  3123                           ; BSR set to: 0
  3124  003AC2  0E18               	movlw	24
  3125  003AC4  6E0E               	movwf	?___flge,c
  3126  003AC6  0E72               	movlw	114
  3127  003AC8  6E0F               	movwf	?___flge+1,c
  3128  003ACA  0E31               	movlw	49
  3129  003ACC  6E10               	movwf	?___flge+2,c
  3130  003ACE  0E44               	movlw	68
  3131  003AD0  6E11               	movwf	?___flge+3,c
  3132  003AD2  C0A2  F012         	movff	exp@x,?___flge+4
  3133  003AD6  C0A3  F013         	movff	exp@x+1,?___flge+5
  3134  003ADA  C0A4  F014         	movff	exp@x+2,?___flge+6
  3135  003ADE  C0A5  F015         	movff	exp@x+3,?___flge+7
  3136  003AE2  EC32  F02A         	call	___flge	;wreg free
  3137  003AE6  E207               	bc	l10315
  3138  003AE8  0100               	movlb	0	; () banked
  3139  003AEA  69A2               	setf	?_exp& (0+255),b
  3140  003AEC  69A3               	setf	(?_exp+1)& (0+255),b
  3141  003AEE  0E7F               	movlw	127
  3142  003AF0  6FA4               	movwf	(?_exp+2)& (0+255),b
  3143  003AF2                     L1:
  3144  003AF2  6FA5               	movwf	(?_exp+3)& (0+255),b
  3145  003AF4  D0C9               	goto	l1560
  3146  003AF6                     l10315:
  3147  003AF6  C0A2  F00E         	movff	exp@x,?___flge
  3148  003AFA  C0A3  F00F         	movff	exp@x+1,?___flge+1
  3149  003AFE  C0A4  F010         	movff	exp@x+2,?___flge+2
  3150  003B02  C0A5  F011         	movff	exp@x+3,?___flge+3
  3151  003B06  0E87               	movlw	135
  3152  003B08  6E12               	movwf	?___flge+4,c
  3153  003B0A  0E48               	movlw	72
  3154  003B0C  6E13               	movwf	?___flge+5,c
  3155  003B0E  0E3A               	movlw	58
  3156  003B10  6E14               	movwf	?___flge+6,c
  3157  003B12  0EC4               	movlw	196
  3158  003B14  6E15               	movwf	?___flge+7,c
  3159  003B16  EC32  F02A         	call	___flge	;wreg free
  3160  003B1A  E202               	bc	l10319
  3161  003B1C  0100               	movlb	0	; () banked
  3162  003B1E  D08E               	goto	u8730
  3163  003B20                     l10319:
  3164  003B20  0100               	movlb	0	; () banked
  3165  003B22  0E01               	movlw	1
  3166  003B24  AFA5               	btfss	(exp@x+3)& (0+255),7,b
  3167  003B26  0E00               	movlw	0
  3168  003B28  6FAC               	movwf	exp@sign& (0+255),b
  3169  003B2A  51AC               	movf	exp@sign& (0+255),w,b
  3170  003B2C  E012               	bz	l1563
  3171                           
  3172                           ; BSR set to: 0
  3173  003B2E  C0A2  F00E         	movff	exp@x,?___flneg
  3174  003B32  C0A3  F00F         	movff	exp@x+1,?___flneg+1
  3175  003B36  C0A4  F010         	movff	exp@x+2,?___flneg+2
  3176  003B3A  C0A5  F011         	movff	exp@x+3,?___flneg+3
  3177  003B3E  EC34  F02D         	call	___flneg	;wreg free
  3178  003B42  C011  F0A5         	movff	?___flneg+3,exp@x+3
  3179  003B46  C010  F0A4         	movff	?___flneg+2,exp@x+2
  3180  003B4A  C00F  F0A3         	movff	?___flneg+1,exp@x+1
  3181  003B4E  C00E  F0A2         	movff	?___flneg,exp@x
  3182  003B52                     l1563:
  3183                           
  3184                           ; BSR set to: 0
  3185  003B52  0E3B               	movlw	59
  3186  003B54  6F7E               	movwf	?___asflmul& (0+255),b
  3187  003B56  0EAA               	movlw	170
  3188  003B58  6F7F               	movwf	(?___asflmul+1)& (0+255),b
  3189  003B5A  0EB8               	movlw	184
  3190  003B5C  6F80               	movwf	(?___asflmul+2)& (0+255),b
  3191  003B5E  0E3F               	movlw	63
  3192  003B60  6F81               	movwf	(?___asflmul+3)& (0+255),b
  3193  003B62  0EA2               	movlw	exp@x& (0+255)
  3194  003B64  EC58  F02A         	call	___asflmul
  3195  003B68  C0A2  F098         	movff	exp@x,?_floor
  3196  003B6C  C0A3  F099         	movff	exp@x+1,?_floor+1
  3197  003B70  C0A4  F09A         	movff	exp@x+2,?_floor+2
  3198  003B74  C0A5  F09B         	movff	exp@x+3,?_floor+3
  3199  003B78  EC80  F023         	call	_floor	;wreg free
  3200  003B7C  C09B  F0A9         	movff	?_floor+3,_exp$2282+3
  3201  003B80  C09A  F0A8         	movff	?_floor+2,_exp$2282+2
  3202  003B84  C099  F0A7         	movff	?_floor+1,_exp$2282+1
  3203  003B88  C098  F0A6         	movff	?_floor,_exp$2282
  3204  003B8C  C0A6  F07E         	movff	_exp$2282,?___fltol
  3205  003B90  C0A7  F07F         	movff	_exp$2282+1,?___fltol+1
  3206  003B94  C0A8  F080         	movff	_exp$2282+2,?___fltol+2
  3207  003B98  C0A9  F081         	movff	_exp$2282+3,?___fltol+3
  3208  003B9C  EC43  F027         	call	___fltol	;wreg free
  3209  003BA0  C07E  F0AA         	movff	?___fltol,exp@exponent
  3210  003BA4  C07F  F0AB         	movff	?___fltol+1,exp@exponent+1
  3211                           
  3212                           ; BSR set to: 0
  3213  003BA8  0E00               	movlw	high exp@x
  3214  003BAA  6E36               	movwf	?___asflsub+1,c
  3215  003BAC  0EA2               	movlw	low exp@x
  3216  003BAE  6E35               	movwf	?___asflsub,c
  3217  003BB0  C0AA  F018         	movff	exp@exponent,?___awtofl
  3218  003BB4  C0AB  F019         	movff	exp@exponent+1,?___awtofl+1
  3219  003BB8  EC37  F02C         	call	___awtofl	;wreg free
  3220  003BBC  C01B  F03A         	movff	?___awtofl+3,?___asflsub+5
  3221  003BC0  C01A  F039         	movff	?___awtofl+2,?___asflsub+4
  3222  003BC4  C019  F038         	movff	?___awtofl+1,?___asflsub+3
  3223  003BC8  C018  F037         	movff	?___awtofl,?___asflsub+2
  3224  003BCC  ECC9  F02A         	call	___asflsub	;wreg free
  3225  003BD0  C0A2  F07E         	movff	exp@x,?_eval_poly
  3226  003BD4  C0A3  F07F         	movff	exp@x+1,?_eval_poly+1
  3227  003BD8  C0A4  F080         	movff	exp@x+2,?_eval_poly+2
  3228  003BDC  C0A5  F081         	movff	exp@x+3,?_eval_poly+3
  3229  003BE0  0E20               	movlw	low exp@coeff
  3230  003BE2  0100               	movlb	0	; () banked
  3231  003BE4  6F82               	movwf	(?_eval_poly+4)& (0+255),b
  3232  003BE6  6B84               	clrf	(?_eval_poly+6)& (0+255),b
  3233  003BE8  0E09               	movlw	9
  3234  003BEA  6F83               	movwf	(?_eval_poly+5)& (0+255),b
  3235  003BEC  ECCA  F024         	call	_eval_poly	;wreg free
  3236  003BF0  C081  F08C         	movff	?_eval_poly+3,?_ldexp+3
  3237  003BF4  C080  F08B         	movff	?_eval_poly+2,?_ldexp+2
  3238  003BF8  C07F  F08A         	movff	?_eval_poly+1,?_ldexp+1
  3239  003BFC  C07E  F089         	movff	?_eval_poly,?_ldexp
  3240  003C00  C0AA  F08D         	movff	exp@exponent,?_ldexp+4
  3241  003C04  C0AB  F08E         	movff	exp@exponent+1,?_ldexp+5
  3242  003C08  ECF1  F026         	call	_ldexp	;wreg free
  3243  003C0C  C08C  F0A5         	movff	?_ldexp+3,exp@x+3
  3244  003C10  C08B  F0A4         	movff	?_ldexp+2,exp@x+2
  3245  003C14  C08A  F0A3         	movff	?_ldexp+1,exp@x+1
  3246  003C18  C089  F0A2         	movff	?_ldexp,exp@x
  3247                           
  3248                           ; BSR set to: 0
  3249  003C1C  51AC               	movf	exp@sign& (0+255),w,b
  3250  003C1E  E02C               	bz	l1564
  3251                           
  3252                           ; BSR set to: 0
  3253  003C20  EE20  F0A2         	lfsr	2,exp@x
  3254  003C24  0EFF               	movlw	255
  3255  003C26  18DE               	xorwf	postinc2,w,c
  3256  003C28  0EFF               	movlw	255
  3257  003C2A  B4D8               	btfsc	status,2,c
  3258  003C2C  18DE               	xorwf	postinc2,w,c
  3259  003C2E  0E7F               	movlw	127
  3260  003C30  B4D8               	btfsc	status,2,c
  3261  003C32  18DE               	xorwf	postinc2,w,c
  3262  003C34  0E7F               	movlw	127
  3263  003C36  B4D8               	btfsc	status,2,c
  3264  003C38  18DE               	xorwf	postinc2,w,c
  3265  003C3A  E105               	bnz	l10335
  3266  003C3C                     u8730:
  3267                           
  3268                           ; BSR set to: 0
  3269  003C3C  6BA2               	clrf	?_exp& (0+255),b
  3270  003C3E  6BA3               	clrf	(?_exp+1)& (0+255),b
  3271  003C40  6BA4               	clrf	(?_exp+2)& (0+255),b
  3272  003C42  6BA5               	clrf	(?_exp+3)& (0+255),b
  3273  003C44  D021               	goto	l1560
  3274  003C46                     l10335:
  3275                           
  3276                           ; BSR set to: 0
  3277  003C46  6B60               	clrf	?___fldiv& (0+255),b
  3278  003C48  6B61               	clrf	(?___fldiv+1)& (0+255),b
  3279  003C4A  0E80               	movlw	128
  3280  003C4C  6F62               	movwf	(?___fldiv+2)& (0+255),b
  3281  003C4E  0E3F               	movlw	63
  3282  003C50  6F63               	movwf	(?___fldiv+3)& (0+255),b
  3283  003C52  C0A2  F064         	movff	exp@x,?___fldiv+4
  3284  003C56  C0A3  F065         	movff	exp@x+1,?___fldiv+5
  3285  003C5A  C0A4  F066         	movff	exp@x+2,?___fldiv+6
  3286  003C5E  C0A5  F067         	movff	exp@x+3,?___fldiv+7
  3287  003C62  EC41  F026         	call	___fldiv	;wreg free
  3288  003C66  C063  F0A5         	movff	?___fldiv+3,?_exp+3
  3289  003C6A  C062  F0A4         	movff	?___fldiv+2,?_exp+2
  3290  003C6E  C061  F0A3         	movff	?___fldiv+1,?_exp+1
  3291  003C72  C060  F0A2         	movff	?___fldiv,?_exp
  3292  003C76  D008               	goto	l1560
  3293  003C78                     l1564:
  3294                           
  3295                           ; BSR set to: 0
  3296  003C78  C0A2  F0A2         	movff	exp@x,?_exp
  3297  003C7C  C0A3  F0A3         	movff	exp@x+1,?_exp+1
  3298  003C80  C0A4  F0A4         	movff	exp@x+2,?_exp+2
  3299  003C84  C0A5  F0A5         	movff	exp@x+3,?_exp+3
  3300  003C88                     l1560:
  3301  003C88  0012               	return	
  3302  003C8A                     __end_of_exp:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           prodh	equ	0xFF4
  3306                           prodl	equ	0xFF3
  3307                           postinc0	equ	0xFEE
  3308                           wreg	equ	0xFE8
  3309                           postdec1	equ	0xFE5
  3310                           fsr1h	equ	0xFE2
  3311                           fsr1l	equ	0xFE1
  3312                           indf2	equ	0xFDF
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function ___flneg *****************
  3320 ;; Defined at:
  3321 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  f1              4   13[COMRAM] unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  4   13[COMRAM] unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : F/0
  3332 ;;		On exit  : F/0
  3333 ;;		Unchanged: F/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         4       0       0       0       0       0       0
  3336 ;;      Locals:         0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0
  3338 ;;      Totals:         4       0       0       0       0       0       0
  3339 ;;Total ram usage:        4 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_exp
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text9
  3350  005A68                     __ptext9:
  3351                           	opt stack 0
  3352  005A68                     ___flneg:
  3353                           	opt stack 26
  3354                           
  3355                           ; BSR set to: 0
  3356                           
  3357                           ;incstack = 0
  3358                           ;incstack = 0
  3359  005A68  EE20  F00E         	lfsr	2,___flneg@f1
  3360  005A6C  50DE               	movf	postinc2,w,c
  3361  005A6E  10DE               	iorwf	postinc2,w,c
  3362  005A70  10DE               	iorwf	postinc2,w,c
  3363  005A72  10DE               	iorwf	postinc2,w,c
  3364  005A74  E002               	bz	l11617
  3365                           
  3366                           ; BSR set to: 0
  3367  005A76  0E80               	movlw	128
  3368  005A78  1A11               	xorwf	___flneg@f1+3,f,c
  3369  005A7A                     l11617:
  3370                           
  3371                           ; BSR set to: 0
  3372  005A7A  C00E  F00E         	movff	___flneg@f1,?___flneg
  3373  005A7E  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3374  005A82  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3375  005A86  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3376                           
  3377                           ; BSR set to: 0
  3378  005A8A  0012               	return	
  3379  005A8C                     __end_of___flneg:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1h	equ	0xFE2
  3388                           fsr1l	equ	0xFE1
  3389                           indf2	equ	0xFDF
  3390                           postinc2	equ	0xFDE
  3391                           postdec2	equ	0xFDD
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _ldexp *****************
  3397 ;; Defined at:
  3398 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  value           4   41[BANK0 ] unsigned char 
  3401 ;;  newexp          2   45[BANK0 ] int 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;		None
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  4   41[BANK0 ] int 
  3406 ;; Registers used:
  3407 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : F/0
  3410 ;;		On exit  : F/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3413 ;;      Params:         0       6       0       0       0       0       0
  3414 ;;      Locals:         0       0       0       0       0       0       0
  3415 ;;      Temps:          0       3       0       0       0       0       0
  3416 ;;      Totals:         0       9       0       0       0       0       0
  3417 ;;Total ram usage:        9 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    2
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_exp
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text10
  3428  004DE2                     __ptext10:
  3429                           	opt stack 0
  3430  004DE2                     _ldexp:
  3431                           	opt stack 26
  3432                           
  3433                           ; BSR set to: 0
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;incstack = 0
  3437                           ;incstack = 0
  3438  004DE2  EE20  F089         	lfsr	2,ldexp@value
  3439  004DE6  50DE               	movf	postinc2,w,c
  3440  004DE8  10DE               	iorwf	postinc2,w,c
  3441  004DEA  10DE               	iorwf	postinc2,w,c
  3442  004DEC  10DE               	iorwf	postinc2,w,c
  3443  004DEE  E014               	bz	u10110
  3444                           
  3445                           ; BSR set to: 0
  3446                           
  3447                           ; BSR set to: 0
  3448  004DF0  518C               	movf	(ldexp@value+3)& (0+255),w,b
  3449  004DF2  0B7F               	andlw	127
  3450  004DF4  6F8F               	movwf	??_ldexp& (0+255),b
  3451  004DF6  90D8               	bcf	status,0,c
  3452  004DF8  358F               	rlcf	??_ldexp& (0+255),w,b
  3453  004DFA  6F90               	movwf	(??_ldexp+1)& (0+255),b
  3454  004DFC  6B91               	clrf	(??_ldexp+2)& (0+255),b
  3455  004DFE  3791               	rlcf	(??_ldexp+2)& (0+255),f,b
  3456  004E00  5190               	movf	(??_ldexp+1)& (0+255),w,b
  3457  004E02  278D               	addwf	ldexp@newexp& (0+255),f,b
  3458  004E04  5191               	movf	(??_ldexp+2)& (0+255),w,b
  3459  004E06  238E               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3460  004E08  358B               	rlcf	(ldexp@value+2)& (0+255),w,b
  3461  004E0A  36E8               	rlcf	wreg,f,c
  3462  004E0C  0B01               	andlw	1
  3463  004E0E  278D               	addwf	ldexp@newexp& (0+255),f,b
  3464  004E10  0E00               	movlw	0
  3465  004E12  238E               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3466                           
  3467                           ; BSR set to: 0
  3468  004E14  AF8E               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3469  004E16  D005               	goto	l11579
  3470  004E18                     u10110:
  3471                           
  3472                           ; BSR set to: 0
  3473  004E18  6B89               	clrf	?_ldexp& (0+255),b
  3474  004E1A  6B8A               	clrf	(?_ldexp+1)& (0+255),b
  3475  004E1C  6B8B               	clrf	(?_ldexp+2)& (0+255),b
  3476  004E1E  6B8C               	clrf	(?_ldexp+3)& (0+255),b
  3477  004E20  D031               	goto	l1685
  3478  004E22                     l11579:
  3479                           
  3480                           ; BSR set to: 0
  3481  004E22  518E               	movf	(ldexp@newexp+1)& (0+255),w,b
  3482  004E24  0A80               	xorlw	128
  3483  004E26  0F7F               	addlw	-129
  3484  004E28  0E00               	movlw	0
  3485  004E2A  B4D8               	btfsc	status,2,c
  3486  004E2C  5D8D               	subwf	ldexp@newexp& (0+255),w,b
  3487  004E2E  E30E               	bnc	l11593
  3488                           
  3489                           ; BSR set to: 0
  3490  004E30  AF8C               	btfss	(ldexp@value+3)& (0+255),7,b
  3491  004E32  D006               	goto	l11589
  3492                           
  3493                           ; BSR set to: 0
  3494  004E34  6989               	setf	?_ldexp& (0+255),b
  3495  004E36  698A               	setf	(?_ldexp+1)& (0+255),b
  3496  004E38  0E7F               	movlw	127
  3497  004E3A  6F8B               	movwf	(?_ldexp+2)& (0+255),b
  3498  004E3C  0EFF               	movlw	255
  3499  004E3E  D004               	goto	L2
  3500  004E40                     l11589:
  3501                           
  3502                           ; BSR set to: 0
  3503  004E40  6989               	setf	?_ldexp& (0+255),b
  3504  004E42  698A               	setf	(?_ldexp+1)& (0+255),b
  3505  004E44  0E7F               	movlw	127
  3506  004E46  6F8B               	movwf	(?_ldexp+2)& (0+255),b
  3507  004E48                     L2:
  3508  004E48  6F8C               	movwf	(?_ldexp+3)& (0+255),b
  3509  004E4A  D01C               	goto	l1685
  3510  004E4C                     l11593:
  3511                           
  3512                           ; BSR set to: 0
  3513  004E4C  358E               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3514  004E4E  318E               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3515  004E50  6F90               	movwf	(??_ldexp+1)& (0+255),b
  3516  004E52  318D               	rrcf	ldexp@newexp& (0+255),w,b
  3517  004E54  6F8F               	movwf	??_ldexp& (0+255),b
  3518  004E56  198C               	xorwf	(ldexp@value+3)& (0+255),w,b
  3519  004E58  0B80               	andlw	-128
  3520  004E5A  198F               	xorwf	??_ldexp& (0+255),w,b
  3521  004E5C  6F8C               	movwf	(ldexp@value+3)& (0+255),b
  3522  004E5E  C08D  F08F         	movff	ldexp@newexp,??_ldexp
  3523  004E62  0E01               	movlw	1
  3524  004E64  178F               	andwf	??_ldexp& (0+255),f,b
  3525  004E66  338F               	rrcf	??_ldexp& (0+255),f,b
  3526  004E68  338F               	rrcf	??_ldexp& (0+255),f,b
  3527  004E6A  518B               	movf	(ldexp@value+2)& (0+255),w,b
  3528  004E6C  198F               	xorwf	??_ldexp& (0+255),w,b
  3529  004E6E  0B7F               	andlw	-129
  3530  004E70  198F               	xorwf	??_ldexp& (0+255),w,b
  3531  004E72  6F8B               	movwf	(ldexp@value+2)& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534  004E74  C089  F089         	movff	ldexp@value,?_ldexp
  3535  004E78  C08A  F08A         	movff	ldexp@value+1,?_ldexp+1
  3536  004E7C  C08B  F08B         	movff	ldexp@value+2,?_ldexp+2
  3537  004E80  C08C  F08C         	movff	ldexp@value+3,?_ldexp+3
  3538  004E84                     l1685:
  3539                           
  3540                           ; BSR set to: 0
  3541  004E84  0012               	return	
  3542  004E86                     __end_of_ldexp:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           postinc0	equ	0xFEE
  3548                           wreg	equ	0xFE8
  3549                           postdec1	equ	0xFE5
  3550                           fsr1h	equ	0xFE2
  3551                           fsr1l	equ	0xFE1
  3552                           indf2	equ	0xFDF
  3553                           postinc2	equ	0xFDE
  3554                           postdec2	equ	0xFDD
  3555                           fsr2h	equ	0xFDA
  3556                           fsr2l	equ	0xFD9
  3557                           status	equ	0xFD8
  3558                           
  3559 ;; *************** function _eval_poly *****************
  3560 ;; Defined at:
  3561 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;  x               4   30[BANK0 ] int 
  3564 ;;  d               1   34[BANK0 ] PTR const 
  3565 ;;		 -> log@coeff(36), exp@coeff(40), 
  3566 ;;  n               2   35[BANK0 ] int 
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  res             4   37[BANK0 ] int 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  4   30[BANK0 ] int 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : F/0
  3575 ;;		On exit  : F/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3578 ;;      Params:         0       7       0       0       0       0       0
  3579 ;;      Locals:         0       4       0       0       0       0       0
  3580 ;;      Temps:          1       0       0       0       0       0       0
  3581 ;;      Totals:         1      11       0       0       0       0       0
  3582 ;;Total ram usage:       12 bytes
  3583 ;; Hardware stack levels used:    1
  3584 ;; Hardware stack levels required when called:    4
  3585 ;; This function calls:
  3586 ;;		___fladd
  3587 ;;		___flmul
  3588 ;; This function is called by:
  3589 ;;		_exp
  3590 ;;		_log
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text11
  3595  004994                     __ptext11:
  3596                           	opt stack 0
  3597  004994                     _eval_poly:
  3598                           	opt stack 24
  3599                           
  3600                           ; BSR set to: 0
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;incstack = 0
  3604                           ;incstack = 0
  3605  004994  5183               	movf	eval_poly@n& (0+255),w,b
  3606  004996  0D04               	mullw	4
  3607  004998  5182               	movf	eval_poly@d& (0+255),w,b
  3608  00499A  24F3               	addwf	prodl,w,c
  3609  00499C  6E43               	movwf	??_eval_poly& (0+255),c
  3610  00499E  C043  FFF6         	movff	??_eval_poly,tblptrl
  3611  0049A2  0E0B               	movlw	high __smallconst
  3612  0049A4  6EF7               	movwf	tblptrh,c
  3613  0049A6  0009               	tblrd		*+
  3614  0049A8  CFF5 F085          	movff	tablat,eval_poly@res
  3615  0049AC  0009               	tblrd		*+
  3616  0049AE  CFF5 F086          	movff	tablat,eval_poly@res+1
  3617  0049B2  0009               	tblrd		*+
  3618  0049B4  CFF5 F087          	movff	tablat,eval_poly@res+2
  3619  0049B8  000A               	tblrd		*-
  3620  0049BA  CFF5 F088          	movff	tablat,eval_poly@res+3
  3621  0049BE  D03D               	goto	l11565
  3622  0049C0                     l11563:
  3623                           
  3624                           ; BSR set to: 0
  3625  0049C0  C085  F06C         	movff	eval_poly@res,?___flmul+4
  3626  0049C4  C086  F06D         	movff	eval_poly@res+1,?___flmul+5
  3627  0049C8  C087  F06E         	movff	eval_poly@res+2,?___flmul+6
  3628  0049CC  C088  F06F         	movff	eval_poly@res+3,?___flmul+7
  3629  0049D0  C07E  F068         	movff	eval_poly@x,?___flmul
  3630  0049D4  C07F  F069         	movff	eval_poly@x+1,?___flmul+1
  3631  0049D8  C080  F06A         	movff	eval_poly@x+2,?___flmul+2
  3632  0049DC  C081  F06B         	movff	eval_poly@x+3,?___flmul+3
  3633  0049E0  ECFE  F023         	call	___flmul	;wreg free
  3634  0049E4  C06B  F021         	movff	?___flmul+3,?___fladd+3
  3635  0049E8  C06A  F020         	movff	?___flmul+2,?___fladd+2
  3636  0049EC  C069  F01F         	movff	?___flmul+1,?___fladd+1
  3637  0049F0  C068  F01E         	movff	?___flmul,?___fladd
  3638  0049F4  0100               	movlb	0	; () banked
  3639  0049F6  0783               	decf	eval_poly@n& (0+255),f,b
  3640  0049F8  A0D8               	btfss	status,0,c
  3641  0049FA  0784               	decf	(eval_poly@n+1)& (0+255),f,b
  3642  0049FC  5183               	movf	eval_poly@n& (0+255),w,b
  3643  0049FE  0D04               	mullw	4
  3644  004A00  5182               	movf	eval_poly@d& (0+255),w,b
  3645  004A02  24F3               	addwf	prodl,w,c
  3646  004A04  6E43               	movwf	??_eval_poly& (0+255),c
  3647  004A06  C043  FFF6         	movff	??_eval_poly,tblptrl
  3648  004A0A  0E0B               	movlw	high __smallconst
  3649  004A0C  6EF7               	movwf	tblptrh,c
  3650  004A0E  0009               	tblrd		*+
  3651  004A10  CFF5 F022          	movff	tablat,?___fladd+4
  3652  004A14  0009               	tblrd		*+
  3653  004A16  CFF5 F023          	movff	tablat,?___fladd+5
  3654  004A1A  0009               	tblrd		*+
  3655  004A1C  CFF5 F024          	movff	tablat,?___fladd+6
  3656  004A20  000A               	tblrd		*-
  3657  004A22  CFF5 F025          	movff	tablat,?___fladd+7
  3658  004A26  EC81  F020         	call	___fladd	;wreg free
  3659  004A2A  C021  F088         	movff	?___fladd+3,eval_poly@res+3
  3660  004A2E  C020  F087         	movff	?___fladd+2,eval_poly@res+2
  3661  004A32  C01F  F086         	movff	?___fladd+1,eval_poly@res+1
  3662  004A36  C01E  F085         	movff	?___fladd,eval_poly@res
  3663  004A3A                     l11565:
  3664  004A3A  0100               	movlb	0	; () banked
  3665  004A3C  5184               	movf	(eval_poly@n+1)& (0+255),w,b
  3666  004A3E  1183               	iorwf	eval_poly@n& (0+255),w,b
  3667  004A40  E1BF               	bnz	l11563
  3668                           
  3669                           ; BSR set to: 0
  3670  004A42  C085  F07E         	movff	eval_poly@res,?_eval_poly
  3671  004A46  C086  F07F         	movff	eval_poly@res+1,?_eval_poly+1
  3672  004A4A  C087  F080         	movff	eval_poly@res+2,?_eval_poly+2
  3673  004A4E  C088  F081         	movff	eval_poly@res+3,?_eval_poly+3
  3674                           
  3675                           ; BSR set to: 0
  3676  004A52  0012               	return	
  3677  004A54                     __end_of_eval_poly:
  3678                           	opt stack 0
  3679                           tblptru	equ	0xFF8
  3680                           tblptrh	equ	0xFF7
  3681                           tblptrl	equ	0xFF6
  3682                           tablat	equ	0xFF5
  3683                           prodh	equ	0xFF4
  3684                           prodl	equ	0xFF3
  3685                           postinc0	equ	0xFEE
  3686                           wreg	equ	0xFE8
  3687                           postdec1	equ	0xFE5
  3688                           fsr1h	equ	0xFE2
  3689                           fsr1l	equ	0xFE1
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function _floor *****************
  3698 ;; Defined at:
  3699 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  x               4   56[BANK0 ] int 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;  i               4   60[BANK0 ] int 
  3704 ;;  expon           2   64[BANK0 ] int 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  4   56[BANK0 ] int 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : F/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3714 ;;      Params:         0       4       0       0       0       0       0
  3715 ;;      Locals:         0       6       0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0
  3717 ;;      Totals:         0      10       0       0       0       0       0
  3718 ;;Total ram usage:       10 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    4
  3721 ;; This function calls:
  3722 ;;		___altofl
  3723 ;;		___fladd
  3724 ;;		___flge
  3725 ;;		_frexp
  3726 ;;		___fltol
  3727 ;; This function is called by:
  3728 ;;		_exp
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text12
  3733  004700                     __ptext12:
  3734                           	opt stack 0
  3735  004700                     _floor:
  3736                           	opt stack 24
  3737                           
  3738                           ; BSR set to: 0
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;incstack = 0
  3742                           ;incstack = 0
  3743  004700  C098  F00E         	movff	floor@x,?_frexp
  3744  004704  C099  F00F         	movff	floor@x+1,?_frexp+1
  3745  004708  C09A  F010         	movff	floor@x+2,?_frexp+2
  3746  00470C  C09B  F011         	movff	floor@x+3,?_frexp+3
  3747  004710  0E00               	movlw	high floor@expon
  3748  004712  6E13               	movwf	?_frexp+5,c
  3749  004714  0EA0               	movlw	low floor@expon
  3750  004716  6E12               	movwf	?_frexp+4,c
  3751  004718  EC73  F028         	call	_frexp	;wreg free
  3752                           
  3753                           ; BSR set to: 0
  3754  00471C  AFA1               	btfss	(floor@expon+1)& (0+255),7,b
  3755  00471E  D00F               	goto	l11551
  3756                           
  3757                           ; BSR set to: 0
  3758  004720  AF9B               	btfss	(floor@x+3)& (0+255),7,b
  3759  004722  D008               	goto	l1653
  3760                           
  3761                           ; BSR set to: 0
  3762  004724  0E00               	movlw	0
  3763  004726  6F98               	movwf	?_floor& (0+255),b
  3764  004728  6F99               	movwf	(?_floor+1)& (0+255),b
  3765  00472A  0E80               	movlw	128
  3766  00472C  6F9A               	movwf	(?_floor+2)& (0+255),b
  3767  00472E  0EBF               	movlw	191
  3768  004730  6F9B               	movwf	(?_floor+3)& (0+255),b
  3769  004732  D063               	goto	l1654
  3770  004734                     l1653:
  3771                           
  3772                           ; BSR set to: 0
  3773  004734  6B98               	clrf	?_floor& (0+255),b
  3774  004736  6B99               	clrf	(?_floor+1)& (0+255),b
  3775  004738  6B9A               	clrf	(?_floor+2)& (0+255),b
  3776  00473A  6B9B               	clrf	(?_floor+3)& (0+255),b
  3777  00473C  D05E               	goto	l1654
  3778  00473E                     l11551:
  3779                           
  3780                           ; BSR set to: 0
  3781  00473E  0E1D               	movlw	29
  3782  004740  5DA0               	subwf	floor@expon& (0+255),w,b
  3783  004742  0E00               	movlw	0
  3784  004744  59A1               	subwfb	(floor@expon+1)& (0+255),w,b
  3785  004746  E309               	bnc	l11555
  3786                           
  3787                           ; BSR set to: 0
  3788  004748  C098  F098         	movff	floor@x,?_floor
  3789  00474C  C099  F099         	movff	floor@x+1,?_floor+1
  3790  004750  C09A  F09A         	movff	floor@x+2,?_floor+2
  3791  004754  C09B  F09B         	movff	floor@x+3,?_floor+3
  3792  004758  D050               	goto	l1654
  3793  00475A                     l11555:
  3794                           
  3795                           ; BSR set to: 0
  3796  00475A  C098  F07E         	movff	floor@x,?___fltol
  3797  00475E  C099  F07F         	movff	floor@x+1,?___fltol+1
  3798  004762  C09A  F080         	movff	floor@x+2,?___fltol+2
  3799  004766  C09B  F081         	movff	floor@x+3,?___fltol+3
  3800  00476A  EC43  F027         	call	___fltol	;wreg free
  3801  00476E  C081  F097         	movff	?___fltol+3,?___altofl+3
  3802  004772  C080  F096         	movff	?___fltol+2,?___altofl+2
  3803  004776  C07F  F095         	movff	?___fltol+1,?___altofl+1
  3804  00477A  C07E  F094         	movff	?___fltol,?___altofl
  3805  00477E  ECEE  F02A         	call	___altofl	;wreg free
  3806  004782  C097  F09F         	movff	?___altofl+3,floor@i+3
  3807  004786  C096  F09E         	movff	?___altofl+2,floor@i+2
  3808  00478A  C095  F09D         	movff	?___altofl+1,floor@i+1
  3809  00478E  C094  F09C         	movff	?___altofl,floor@i
  3810  004792  C098  F00E         	movff	floor@x,?___flge
  3811  004796  C099  F00F         	movff	floor@x+1,?___flge+1
  3812  00479A  C09A  F010         	movff	floor@x+2,?___flge+2
  3813  00479E  C09B  F011         	movff	floor@x+3,?___flge+3
  3814  0047A2  C09C  F012         	movff	floor@i,?___flge+4
  3815  0047A6  C09D  F013         	movff	floor@i+1,?___flge+5
  3816  0047AA  C09E  F014         	movff	floor@i+2,?___flge+6
  3817  0047AE  C09F  F015         	movff	floor@i+3,?___flge+7
  3818  0047B2  EC32  F02A         	call	___flge	;wreg free
  3819  0047B6  E219               	bc	l1656
  3820  0047B8  C09C  F01E         	movff	floor@i,?___fladd
  3821  0047BC  C09D  F01F         	movff	floor@i+1,?___fladd+1
  3822  0047C0  C09E  F020         	movff	floor@i+2,?___fladd+2
  3823  0047C4  C09F  F021         	movff	floor@i+3,?___fladd+3
  3824  0047C8  6A22               	clrf	?___fladd+4,c
  3825  0047CA  6A23               	clrf	?___fladd+5,c
  3826  0047CC  0E80               	movlw	128
  3827  0047CE  6E24               	movwf	?___fladd+6,c
  3828  0047D0  0EBF               	movlw	191
  3829  0047D2  6E25               	movwf	?___fladd+7,c
  3830  0047D4  EC81  F020         	call	___fladd	;wreg free
  3831  0047D8  C021  F09B         	movff	?___fladd+3,?_floor+3
  3832  0047DC  C020  F09A         	movff	?___fladd+2,?_floor+2
  3833  0047E0  C01F  F099         	movff	?___fladd+1,?_floor+1
  3834  0047E4  C01E  F098         	movff	?___fladd,?_floor
  3835  0047E8  D008               	goto	l1654
  3836  0047EA                     l1656:
  3837  0047EA  C09C  F098         	movff	floor@i,?_floor
  3838  0047EE  C09D  F099         	movff	floor@i+1,?_floor+1
  3839  0047F2  C09E  F09A         	movff	floor@i+2,?_floor+2
  3840  0047F6  C09F  F09B         	movff	floor@i+3,?_floor+3
  3841  0047FA                     l1654:
  3842  0047FA  0012               	return	
  3843  0047FC                     __end_of_floor:
  3844                           	opt stack 0
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           prodh	equ	0xFF4
  3850                           prodl	equ	0xFF3
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           postdec1	equ	0xFE5
  3854                           fsr1h	equ	0xFE2
  3855                           fsr1l	equ	0xFE1
  3856                           indf2	equ	0xFDF
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function ___fltol *****************
  3864 ;; Defined at:
  3865 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;  f1              4   30[BANK0 ] int 
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;  exp1            1   67[COMRAM] unsigned char 
  3870 ;;  sign1           1   66[COMRAM] unsigned char 
  3871 ;; Return value:  Size  Location     Type
  3872 ;;                  4   30[BANK0 ] long 
  3873 ;; Registers used:
  3874 ;;		wreg, status,2, status,0
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : F/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3880 ;;      Params:         0       4       0       0       0       0       0
  3881 ;;      Locals:         2       0       0       0       0       0       0
  3882 ;;      Temps:          0       4       0       0       0       0       0
  3883 ;;      Totals:         2       8       0       0       0       0       0
  3884 ;;Total ram usage:       10 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    2
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_doWork
  3891 ;;		_setEventData
  3892 ;;		_exp
  3893 ;;		_floor
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text13
  3898  004E86                     __ptext13:
  3899                           	opt stack 0
  3900  004E86                     ___fltol:
  3901                           	opt stack 27
  3902                           
  3903                           ;incstack = 0
  3904                           ;incstack = 0
  3905  004E86  0100               	movlb	0	; () banked
  3906  004E88  3580               	rlcf	(___fltol@f1+2)& (0+255),w,b
  3907  004E8A  3581               	rlcf	(___fltol@f1+3)& (0+255),w,b
  3908  004E8C  6E44               	movwf	___fltol@exp1,c
  3909  004E8E  6644               	tstfsz	___fltol@exp1& (0+255),c
  3910  004E90  D006               	goto	l11645
  3911  004E92                     l11643:
  3912  004E92  0100               	movlb	0	; () banked
  3913  004E94  6B7E               	clrf	?___fltol& (0+255),b
  3914  004E96  6B7F               	clrf	(?___fltol+1)& (0+255),b
  3915  004E98  6B80               	clrf	(?___fltol+2)& (0+255),b
  3916  004E9A  6B81               	clrf	(?___fltol+3)& (0+255),b
  3917  004E9C  D044               	goto	l1665
  3918  004E9E                     l11645:
  3919  004E9E  0100               	movlb	0	; () banked
  3920  004EA0  C07E  F082         	movff	___fltol@f1,??___fltol
  3921  004EA4  C07F  F083         	movff	___fltol@f1+1,??___fltol+1
  3922  004EA8  C080  F084         	movff	___fltol@f1+2,??___fltol+2
  3923  004EAC  C081  F085         	movff	___fltol@f1+3,??___fltol+3
  3924  004EB0  0E20               	movlw	32
  3925  004EB2  D005               	goto	u10200
  3926  004EB4                     u10205:
  3927  004EB4  90D8               	bcf	status,0,c
  3928  004EB6  3385               	rrcf	(??___fltol+3)& (0+255),f,b
  3929  004EB8  3384               	rrcf	(??___fltol+2)& (0+255),f,b
  3930  004EBA  3383               	rrcf	(??___fltol+1)& (0+255),f,b
  3931  004EBC  3382               	rrcf	??___fltol& (0+255),f,b
  3932  004EBE                     u10200:
  3933  004EBE  2EE8               	decfsz	wreg,f,c
  3934  004EC0  D7F9               	goto	u10205
  3935  004EC2  5182               	movf	??___fltol& (0+255),w,b
  3936  004EC4  6E43               	movwf	___fltol@sign1,c
  3937                           
  3938                           ; BSR set to: 0
  3939  004EC6  8F80               	bsf	(___fltol@f1+2)& (0+255),7,b
  3940                           
  3941                           ; BSR set to: 0
  3942  004EC8  6B81               	clrf	(___fltol@f1+3)& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945  004ECA  0E96               	movlw	150
  3946  004ECC  5E44               	subwf	___fltol@exp1,f,c
  3947                           
  3948                           ; BSR set to: 0
  3949  004ECE  AE44               	btfss	___fltol@exp1,7,c
  3950  004ED0  D00C               	goto	l11663
  3951                           
  3952                           ; BSR set to: 0
  3953  004ED2  5044               	movf	___fltol@exp1,w,c
  3954  004ED4  0A80               	xorlw	128
  3955  004ED6  0F97               	addlw	151
  3956  004ED8  E3DC               	bnc	l11643
  3957  004EDA                     l11659:
  3958                           
  3959                           ; BSR set to: 0
  3960  004EDA  90D8               	bcf	status,0,c
  3961  004EDC  3381               	rrcf	(___fltol@f1+3)& (0+255),f,b
  3962  004EDE  3380               	rrcf	(___fltol@f1+2)& (0+255),f,b
  3963  004EE0  337F               	rrcf	(___fltol@f1+1)& (0+255),f,b
  3964  004EE2  337E               	rrcf	___fltol@f1& (0+255),f,b
  3965                           
  3966                           ; BSR set to: 0
  3967  004EE4  3E44               	incfsz	___fltol@exp1,f,c
  3968  004EE6  D7F9               	goto	l11659
  3969  004EE8  D00C               	goto	l11671
  3970  004EEA                     l11663:
  3971                           
  3972                           ; BSR set to: 0
  3973  004EEA  0E1F               	movlw	31
  3974  004EEC  6444               	cpfsgt	___fltol@exp1,c
  3975  004EEE  D007               	goto	l11669
  3976  004EF0  D7D0               	goto	l11643
  3977  004EF2                     l11667:
  3978                           
  3979                           ; BSR set to: 0
  3980  004EF2  90D8               	bcf	status,0,c
  3981  004EF4  377E               	rlcf	___fltol@f1& (0+255),f,b
  3982  004EF6  377F               	rlcf	(___fltol@f1+1)& (0+255),f,b
  3983  004EF8  3780               	rlcf	(___fltol@f1+2)& (0+255),f,b
  3984  004EFA  3781               	rlcf	(___fltol@f1+3)& (0+255),f,b
  3985  004EFC  0644               	decf	___fltol@exp1,f,c
  3986  004EFE                     l11669:
  3987                           
  3988                           ; BSR set to: 0
  3989  004EFE  6644               	tstfsz	___fltol@exp1,c
  3990  004F00  D7F8               	goto	l11667
  3991  004F02                     l11671:
  3992                           
  3993                           ; BSR set to: 0
  3994  004F02  5043               	movf	___fltol@sign1,w,c
  3995  004F04  E008               	bz	l11675
  3996                           
  3997                           ; BSR set to: 0
  3998  004F06  1F81               	comf	(___fltol@f1+3)& (0+255),f,b
  3999  004F08  1F80               	comf	(___fltol@f1+2)& (0+255),f,b
  4000  004F0A  1F7F               	comf	(___fltol@f1+1)& (0+255),f,b
  4001  004F0C  6D7E               	negf	___fltol@f1& (0+255),b
  4002  004F0E  0E00               	movlw	0
  4003  004F10  237F               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4004  004F12  2380               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4005  004F14  2381               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4006  004F16                     l11675:
  4007                           
  4008                           ; BSR set to: 0
  4009  004F16  C07E  F07E         	movff	___fltol@f1,?___fltol
  4010  004F1A  C07F  F07F         	movff	___fltol@f1+1,?___fltol+1
  4011  004F1E  C080  F080         	movff	___fltol@f1+2,?___fltol+2
  4012  004F22  C081  F081         	movff	___fltol@f1+3,?___fltol+3
  4013  004F26                     l1665:
  4014                           
  4015                           ; BSR set to: 0
  4016  004F26  0012               	return	
  4017  004F28                     __end_of___fltol:
  4018                           	opt stack 0
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           prodh	equ	0xFF4
  4024                           prodl	equ	0xFF3
  4025                           postinc0	equ	0xFEE
  4026                           wreg	equ	0xFE8
  4027                           postdec1	equ	0xFE5
  4028                           fsr1h	equ	0xFE2
  4029                           fsr1l	equ	0xFE1
  4030                           indf2	equ	0xFDF
  4031                           postinc2	equ	0xFDE
  4032                           postdec2	equ	0xFDD
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _frexp *****************
  4038 ;; Defined at:
  4039 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  value           4   13[COMRAM] long 
  4042 ;;  eptr            2   17[COMRAM] PTR int 
  4043 ;;		 -> log@exponent(2), floor@expon(2), 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  4   13[COMRAM] PTR int 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4050 ;; Tracked objects:
  4051 ;;		On entry : F/0
  4052 ;;		On exit  : F/0
  4053 ;;		Unchanged: F/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4055 ;;      Params:         6       0       0       0       0       0       0
  4056 ;;      Locals:         0       0       0       0       0       0       0
  4057 ;;      Temps:          3       0       0       0       0       0       0
  4058 ;;      Totals:         9       0       0       0       0       0       0
  4059 ;;Total ram usage:        9 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    2
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_floor
  4066 ;;		_log
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text14
  4071  0050E6                     __ptext14:
  4072                           	opt stack 0
  4073  0050E6                     _frexp:
  4074                           	opt stack 26
  4075                           
  4076                           ; BSR set to: 0
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;incstack = 0
  4080                           ;incstack = 0
  4081  0050E6  EE20  F00E         	lfsr	2,frexp@value
  4082  0050EA  50DE               	movf	postinc2,w,c
  4083  0050EC  10DE               	iorwf	postinc2,w,c
  4084  0050EE  10DE               	iorwf	postinc2,w,c
  4085  0050F0  10DE               	iorwf	postinc2,w,c
  4086  0050F2  E10C               	bnz	l11629
  4087                           
  4088                           ; BSR set to: 0
  4089  0050F4  C012  FFD9         	movff	frexp@eptr,fsr2l
  4090  0050F8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4091  0050FC  0E00               	movlw	0
  4092  0050FE  6ADE               	clrf	postinc2,c
  4093  005100  6ADD               	clrf	postdec2,c
  4094                           
  4095                           ; BSR set to: 0
  4096  005102  6A0E               	clrf	?_frexp,c
  4097  005104  6A0F               	clrf	?_frexp+1,c
  4098  005106  6A10               	clrf	?_frexp+2,c
  4099  005108  6A11               	clrf	?_frexp+3,c
  4100  00510A  D02F               	goto	l1681
  4101  00510C                     l11629:
  4102                           
  4103                           ; BSR set to: 0
  4104  00510C  5011               	movf	frexp@value+3,w,c
  4105  00510E  0B7F               	andlw	127
  4106  005110  6E14               	movwf	??_frexp& (0+255),c
  4107  005112  90D8               	bcf	status,0,c
  4108  005114  3414               	rlcf	??_frexp,w,c
  4109  005116  6E15               	movwf	(??_frexp+1)& (0+255),c
  4110  005118  6A16               	clrf	(??_frexp+2)& (0+255),c
  4111  00511A  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4112  00511C  C012  FFD9         	movff	frexp@eptr,fsr2l
  4113  005120  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4114  005124  C015  FFDE         	movff	??_frexp+1,postinc2
  4115  005128  C016  FFDD         	movff	??_frexp+2,postdec2
  4116  00512C  3410               	rlcf	frexp@value+2,w,c
  4117  00512E  36E8               	rlcf	wreg,f,c
  4118  005130  0B01               	andlw	1
  4119  005132  C012  FFD9         	movff	frexp@eptr,fsr2l
  4120  005136  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4121  00513A  12DE               	iorwf	postinc2,f,c
  4122  00513C  0E00               	movlw	0
  4123  00513E  12DD               	iorwf	postdec2,f,c
  4124                           
  4125                           ; BSR set to: 0
  4126  005140  C012  FFD9         	movff	frexp@eptr,fsr2l
  4127  005144  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4128  005148  0E82               	movlw	130
  4129  00514A  26DE               	addwf	postinc2,f,c
  4130  00514C  0EFF               	movlw	255
  4131  00514E  22DD               	addwfc	postdec2,f,c
  4132                           
  4133                           ; BSR set to: 0
  4134  005150  5011               	movf	frexp@value+3,w,c
  4135  005152  0B80               	andlw	-128
  4136  005154  093F               	iorlw	63
  4137  005156  6E11               	movwf	frexp@value+3,c
  4138                           
  4139                           ; BSR set to: 0
  4140  005158  9E10               	bcf	frexp@value+2,7,c
  4141                           
  4142                           ; BSR set to: 0
  4143  00515A  C00E  F00E         	movff	frexp@value,?_frexp
  4144  00515E  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4145  005162  C010  F010         	movff	frexp@value+2,?_frexp+2
  4146  005166  C011  F011         	movff	frexp@value+3,?_frexp+3
  4147  00516A                     l1681:
  4148                           
  4149                           ; BSR set to: 0
  4150  00516A  0012               	return	
  4151  00516C                     __end_of_frexp:
  4152                           	opt stack 0
  4153                           tblptru	equ	0xFF8
  4154                           tblptrh	equ	0xFF7
  4155                           tblptrl	equ	0xFF6
  4156                           tablat	equ	0xFF5
  4157                           prodh	equ	0xFF4
  4158                           prodl	equ	0xFF3
  4159                           postinc0	equ	0xFEE
  4160                           wreg	equ	0xFE8
  4161                           postdec1	equ	0xFE5
  4162                           fsr1h	equ	0xFE2
  4163                           fsr1l	equ	0xFE1
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           postdec2	equ	0xFDD
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function ___flge *****************
  4172 ;; Defined at:
  4173 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  ff1             4   13[COMRAM] PTR int 
  4176 ;;  ff2             4   17[COMRAM] PTR int 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;		None               void
  4181 ;; Registers used:
  4182 ;;		wreg, status,2, status,0
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4188 ;;      Params:         8       0       0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0
  4191 ;;      Totals:         8       0       0       0       0       0       0
  4192 ;;Total ram usage:        8 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    2
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_exp
  4199 ;;		_floor
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text15
  4204  005464                     __ptext15:
  4205                           	opt stack 0
  4206  005464                     ___flge:
  4207                           	opt stack 26
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;incstack = 0
  4211                           ;incstack = 0
  4212  005464  AE11               	btfss	___flge@ff1+3,7,c
  4213  005466  D009               	goto	l11603
  4214  005468  6C0E               	negf	___flge@ff1,c
  4215  00546A  1E0F               	comf	___flge@ff1+1,f,c
  4216  00546C  B0D8               	btfsc	status,0,c
  4217  00546E  2A0F               	incf	___flge@ff1+1,f,c
  4218  005470  1E10               	comf	___flge@ff1+2,f,c
  4219  005472  B0D8               	btfsc	status,0,c
  4220  005474  2A10               	incf	___flge@ff1+2,f,c
  4221  005476  0E80               	movlw	128
  4222  005478  5611               	subfwb	___flge@ff1+3,f,c
  4223  00547A                     l11603:
  4224  00547A  AE15               	btfss	___flge@ff2+3,7,c
  4225  00547C  D009               	goto	l1612
  4226  00547E  6C12               	negf	___flge@ff2,c
  4227  005480  1E13               	comf	___flge@ff2+1,f,c
  4228  005482  B0D8               	btfsc	status,0,c
  4229  005484  2A13               	incf	___flge@ff2+1,f,c
  4230  005486  1E14               	comf	___flge@ff2+2,f,c
  4231  005488  B0D8               	btfsc	status,0,c
  4232  00548A  2A14               	incf	___flge@ff2+2,f,c
  4233  00548C  0E80               	movlw	128
  4234  00548E  5615               	subfwb	___flge@ff2+3,f,c
  4235  005490                     l1612:
  4236  005490  0E80               	movlw	128
  4237  005492  1A11               	xorwf	___flge@ff1+3,f,c
  4238  005494  1A15               	xorwf	___flge@ff2+3,f,c
  4239  005496  5012               	movf	___flge@ff2,w,c
  4240  005498  5C0E               	subwf	___flge@ff1,w,c
  4241  00549A  5013               	movf	___flge@ff2+1,w,c
  4242  00549C  580F               	subwfb	___flge@ff1+1,w,c
  4243  00549E  5014               	movf	___flge@ff2+2,w,c
  4244  0054A0  5810               	subwfb	___flge@ff1+2,w,c
  4245  0054A2  5015               	movf	___flge@ff2+3,w,c
  4246  0054A4  5811               	subwfb	___flge@ff1+3,w,c
  4247  0054A6  E202               	bc	l11609
  4248  0054A8  90D8               	bcf	status,0,c
  4249  0054AA  D001               	goto	l1613
  4250  0054AC                     l11609:
  4251  0054AC  80D8               	bsf	status,0,c
  4252  0054AE                     l1613:
  4253  0054AE  0012               	return	
  4254  0054B0                     __end_of___flge:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           indf2	equ	0xFDF
  4268                           postinc2	equ	0xFDE
  4269                           postdec2	equ	0xFDD
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function ___altofl *****************
  4275 ;; Defined at:
  4276 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  c               4   52[BANK0 ] long 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  sign            1   68[COMRAM] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  4   52[BANK0 ] unsigned char 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : F/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4290 ;;      Params:         0       4       0       0       0       0       0
  4291 ;;      Locals:         1       0       0       0       0       0       0
  4292 ;;      Temps:          0       0       0       0       0       0       0
  4293 ;;      Totals:         1       4       0       0       0       0       0
  4294 ;;Total ram usage:        5 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    3
  4297 ;; This function calls:
  4298 ;;		___flpack
  4299 ;; This function is called by:
  4300 ;;		_doWork
  4301 ;;		_floor
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text16
  4306  0055DC                     __ptext16:
  4307                           	opt stack 0
  4308  0055DC                     ___altofl:
  4309                           	opt stack 26
  4310                           
  4311                           ; BSR set to: 0
  4312                           
  4313                           ;incstack = 0
  4314                           ;incstack = 0
  4315  0055DC  6A45               	clrf	___altofl@sign,c
  4316  0055DE  AF97               	btfss	(___altofl@c+3)& (0+255),7,b
  4317  0055E0  D00A               	goto	l11357
  4318                           
  4319                           ; BSR set to: 0
  4320  0055E2  1F97               	comf	(___altofl@c+3)& (0+255),f,b
  4321  0055E4  1F96               	comf	(___altofl@c+2)& (0+255),f,b
  4322  0055E6  1F95               	comf	(___altofl@c+1)& (0+255),f,b
  4323  0055E8  6D94               	negf	___altofl@c& (0+255),b
  4324  0055EA  0E00               	movlw	0
  4325  0055EC  2395               	addwfc	(___altofl@c+1)& (0+255),f,b
  4326  0055EE  2396               	addwfc	(___altofl@c+2)& (0+255),f,b
  4327  0055F0  2397               	addwfc	(___altofl@c+3)& (0+255),f,b
  4328                           
  4329                           ; BSR set to: 0
  4330  0055F2  0E01               	movlw	1
  4331  0055F4  6E45               	movwf	___altofl@sign,c
  4332  0055F6                     l11357:
  4333                           
  4334                           ; BSR set to: 0
  4335  0055F6  C094  F00E         	movff	___altofl@c,?___flpack
  4336  0055FA  C095  F00F         	movff	___altofl@c+1,?___flpack+1
  4337  0055FE  C096  F010         	movff	___altofl@c+2,?___flpack+2
  4338  005602  C097  F011         	movff	___altofl@c+3,?___flpack+3
  4339  005606  0E96               	movlw	150
  4340  005608  6E12               	movwf	?___flpack+4,c
  4341  00560A  C045  F013         	movff	___altofl@sign,?___flpack+5
  4342  00560E  EC2A  F025         	call	___flpack	;wreg free
  4343  005612  C011  F097         	movff	?___flpack+3,?___altofl+3
  4344  005616  C010  F096         	movff	?___flpack+2,?___altofl+2
  4345  00561A  C00F  F095         	movff	?___flpack+1,?___altofl+1
  4346  00561E  C00E  F094         	movff	?___flpack,?___altofl
  4347  005622  0012               	return	
  4348  005624                     __end_of___altofl:
  4349                           	opt stack 0
  4350                           tblptru	equ	0xFF8
  4351                           tblptrh	equ	0xFF7
  4352                           tblptrl	equ	0xFF6
  4353                           tablat	equ	0xFF5
  4354                           prodh	equ	0xFF4
  4355                           prodl	equ	0xFF3
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           postdec1	equ	0xFE5
  4359                           fsr1h	equ	0xFE2
  4360                           fsr1l	equ	0xFE1
  4361                           indf2	equ	0xFDF
  4362                           postinc2	equ	0xFDE
  4363                           postdec2	equ	0xFDD
  4364                           fsr2h	equ	0xFDA
  4365                           fsr2l	equ	0xFD9
  4366                           status	equ	0xFD8
  4367                           
  4368 ;; *************** function ___asflsub *****************
  4369 ;; Defined at:
  4370 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  f1p             2   52[COMRAM] PTR 
  4373 ;;		 -> exp@x(4), doWork@temp(4), 
  4374 ;;  f2              4   54[COMRAM] PTR 
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  4   52[COMRAM] PTR 
  4379 ;; Registers used:
  4380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/1
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4386 ;;      Params:         6       0       0       0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0       0       0
  4389 ;;      Totals:         6       0       0       0       0       0       0
  4390 ;;Total ram usage:        6 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    5
  4393 ;; This function calls:
  4394 ;;		___flsub
  4395 ;; This function is called by:
  4396 ;;		_doWork
  4397 ;;		_exp
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text17
  4402  005592                     __ptext17:
  4403                           	opt stack 0
  4404  005592                     ___asflsub:
  4405                           	opt stack 24
  4406                           
  4407                           ;	Return value of ___asflsub is never used
  4408                           
  4409                           ;incstack = 0
  4410                           ;incstack = 0
  4411  005592  C035  FFD9         	movff	___asflsub@f1p,fsr2l
  4412  005596  C036  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4413  00559A  CFDE F02D          	movff	postinc2,?___flsub
  4414  00559E  CFDE F02E          	movff	postinc2,?___flsub+1
  4415  0055A2  CFDE F02F          	movff	postinc2,?___flsub+2
  4416  0055A6  CFDE F030          	movff	postinc2,?___flsub+3
  4417  0055AA  C037  F031         	movff	___asflsub@f2,?___flsub+4
  4418  0055AE  C038  F032         	movff	___asflsub@f2+1,?___flsub+5
  4419  0055B2  C039  F033         	movff	___asflsub@f2+2,?___flsub+6
  4420  0055B6  C03A  F034         	movff	___asflsub@f2+3,?___flsub+7
  4421  0055BA  ECFD  F02B         	call	___flsub	;wreg free
  4422  0055BE  C035  FFD9         	movff	___asflsub@f1p,fsr2l
  4423  0055C2  C036  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4424  0055C6  C02D  FFDE         	movff	?___flsub,postinc2
  4425  0055CA  C02E  FFDE         	movff	?___flsub+1,postinc2
  4426  0055CE  C02F  FFDE         	movff	?___flsub+2,postinc2
  4427  0055D2  C030  FFDD         	movff	?___flsub+3,postdec2
  4428  0055D6  06D9               	decf	fsr2l,f,c
  4429  0055D8  06D9               	decf	fsr2l,f,c
  4430  0055DA  0012               	return	
  4431  0055DC                     __end_of___asflsub:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           postdec1	equ	0xFE5
  4442                           fsr1h	equ	0xFE2
  4443                           fsr1l	equ	0xFE1
  4444                           indf2	equ	0xFDF
  4445                           postinc2	equ	0xFDE
  4446                           postdec2	equ	0xFDD
  4447                           fsr2h	equ	0xFDA
  4448                           fsr2l	equ	0xFD9
  4449                           status	equ	0xFD8
  4450                           
  4451 ;; *************** function ___flsub *****************
  4452 ;; Defined at:
  4453 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  4454 ;; Parameters:    Size  Location     Type
  4455 ;;  f1              4   44[COMRAM] PTR 
  4456 ;;  f2              4   48[COMRAM] PTR 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  4   44[COMRAM] PTR 
  4461 ;; Registers used:
  4462 ;;		wreg, status,2, status,0, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4468 ;;      Params:         8       0       0       0       0       0       0
  4469 ;;      Locals:         0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0
  4471 ;;      Totals:         8       0       0       0       0       0       0
  4472 ;;Total ram usage:        8 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    4
  4475 ;; This function calls:
  4476 ;;		___fladd
  4477 ;; This function is called by:
  4478 ;;		_doWork
  4479 ;;		___asflsub
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text18
  4484  0057FA                     __ptext18:
  4485                           	opt stack 0
  4486  0057FA                     ___flsub:
  4487                           	opt stack 25
  4488                           
  4489                           ;incstack = 0
  4490                           ;incstack = 0
  4491  0057FA  0E80               	movlw	128
  4492  0057FC  1A34               	xorwf	___flsub@f2+3,f,c
  4493  0057FE  C02D  F01E         	movff	___flsub@f1,?___fladd
  4494  005802  C02E  F01F         	movff	___flsub@f1+1,?___fladd+1
  4495  005806  C02F  F020         	movff	___flsub@f1+2,?___fladd+2
  4496  00580A  C030  F021         	movff	___flsub@f1+3,?___fladd+3
  4497  00580E  C031  F022         	movff	___flsub@f2,?___fladd+4
  4498  005812  C032  F023         	movff	___flsub@f2+1,?___fladd+5
  4499  005816  C033  F024         	movff	___flsub@f2+2,?___fladd+6
  4500  00581A  C034  F025         	movff	___flsub@f2+3,?___fladd+7
  4501  00581E  EC81  F020         	call	___fladd	;wreg free
  4502  005822  C021  F030         	movff	?___fladd+3,?___flsub+3
  4503  005826  C020  F02F         	movff	?___fladd+2,?___flsub+2
  4504  00582A  C01F  F02E         	movff	?___fladd+1,?___flsub+1
  4505  00582E  C01E  F02D         	movff	?___fladd,?___flsub
  4506  005832  0012               	return	
  4507  005834                     __end_of___flsub:
  4508                           	opt stack 0
  4509                           tblptru	equ	0xFF8
  4510                           tblptrh	equ	0xFF7
  4511                           tblptrl	equ	0xFF6
  4512                           tablat	equ	0xFF5
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           postinc0	equ	0xFEE
  4516                           wreg	equ	0xFE8
  4517                           postdec1	equ	0xFE5
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function ___asflmul *****************
  4528 ;; Defined at:
  4529 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  mp              1    wreg     PTR 
  4532 ;;		 -> exp@x(4), 
  4533 ;;  multiplicand    4   30[BANK0 ] PTR 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  mp              1   66[COMRAM] PTR 
  4536 ;;		 -> exp@x(4), 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  4   30[BANK0 ] PTR 
  4539 ;; Registers used:
  4540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4541 ;; Tracked objects:
  4542 ;;		On entry : F/0
  4543 ;;		On exit  : F/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4546 ;;      Params:         0       4       0       0       0       0       0
  4547 ;;      Locals:         1       0       0       0       0       0       0
  4548 ;;      Temps:          0       0       0       0       0       0       0
  4549 ;;      Totals:         1       4       0       0       0       0       0
  4550 ;;Total ram usage:        5 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    4
  4553 ;; This function calls:
  4554 ;;		___flmul
  4555 ;; This function is called by:
  4556 ;;		_exp
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text19
  4561  0054B0                     __ptext19:
  4562                           	opt stack 0
  4563  0054B0                     ___asflmul:
  4564                           	opt stack 24
  4565                           
  4566                           ;incstack = 0
  4567                           ;incstack = 0
  4568                           ;___asflmul@mp stored from wreg
  4569  0054B0  CFE8 F043          	movff	wreg,___asflmul@mp
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;	Return value of ___asflmul is never used
  4573  0054B4  5043               	movf	___asflmul@mp,w,c
  4574  0054B6  6ED9               	movwf	fsr2l,c
  4575  0054B8  6ADA               	clrf	fsr2h,c
  4576  0054BA  CFDE F068          	movff	postinc2,?___flmul
  4577  0054BE  CFDE F069          	movff	postinc2,?___flmul+1
  4578  0054C2  CFDE F06A          	movff	postinc2,?___flmul+2
  4579  0054C6  CFDE F06B          	movff	postinc2,?___flmul+3
  4580  0054CA  C07E  F06C         	movff	___asflmul@multiplicand,?___flmul+4
  4581  0054CE  C07F  F06D         	movff	___asflmul@multiplicand+1,?___flmul+5
  4582  0054D2  C080  F06E         	movff	___asflmul@multiplicand+2,?___flmul+6
  4583  0054D6  C081  F06F         	movff	___asflmul@multiplicand+3,?___flmul+7
  4584  0054DA  ECFE  F023         	call	___flmul	;wreg free
  4585  0054DE  5043               	movf	___asflmul@mp,w,c
  4586  0054E0  6ED9               	movwf	fsr2l,c
  4587  0054E2  6ADA               	clrf	fsr2h,c
  4588  0054E4  0100               	movlb	0	; () banked
  4589  0054E6  C068  FFDE         	movff	?___flmul,postinc2
  4590  0054EA  C069  FFDE         	movff	?___flmul+1,postinc2
  4591  0054EE  C06A  FFDE         	movff	?___flmul+2,postinc2
  4592  0054F2  C06B  FFDD         	movff	?___flmul+3,postdec2
  4593  0054F6  06D9               	decf	fsr2l,f,c
  4594  0054F8  06D9               	decf	fsr2l,f,c
  4595                           
  4596                           ; BSR set to: 0
  4597  0054FA  0012               	return	
  4598  0054FC                     __end_of___asflmul:
  4599                           	opt stack 0
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           prodh	equ	0xFF4
  4605                           prodl	equ	0xFF3
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           fsr2h	equ	0xFDA
  4615                           fsr2l	equ	0xFD9
  4616                           status	equ	0xFD8
  4617                           
  4618 ;; *************** function ___fldiv *****************
  4619 ;; Defined at:
  4620 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  f1              4    0[BANK0 ] PTR 
  4623 ;;  f2              4    4[BANK0 ] PTR 
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  f3              4   59[COMRAM] PTR 
  4626 ;;  sign            1   65[COMRAM] unsigned char 
  4627 ;;  exp             1   64[COMRAM] unsigned char 
  4628 ;;  cntr            1   63[COMRAM] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  4    0[BANK0 ] unsigned char 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, status,0, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4638 ;;      Params:         0       8       0       0       0       0       0
  4639 ;;      Locals:        14       0       0       0       0       0       0
  4640 ;;      Temps:          0       0       0       0       0       0       0
  4641 ;;      Totals:        14       8       0       0       0       0       0
  4642 ;;Total ram usage:       22 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    3
  4645 ;; This function calls:
  4646 ;;		___flpack
  4647 ;; This function is called by:
  4648 ;;		_doWork
  4649 ;;		_Celsius2Fahrenheit
  4650 ;;		___asfldiv
  4651 ;;		_exp
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text20
  4656  004C82                     __ptext20:
  4657                           	opt stack 0
  4658  004C82                     ___fldiv:
  4659                           	opt stack 26
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;incstack = 0
  4663                           ;incstack = 0
  4664  004C82  0100               	movlb	0	; () banked
  4665  004C84  3562               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  4666  004C86  3563               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  4667  004C88  6E41               	movwf	___fldiv@exp,c
  4668  004C8A  6641               	tstfsz	___fldiv@exp& (0+255),c
  4669  004C8C  D001               	goto	l11441
  4670  004C8E  D006               	goto	u9980
  4671  004C90                     l11441:
  4672  004C90  0100               	movlb	0	; () banked
  4673  004C92  3566               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  4674  004C94  3567               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  4675  004C96  6E42               	movwf	___fldiv@sign,c
  4676  004C98  6642               	tstfsz	___fldiv@sign& (0+255),c
  4677  004C9A  D006               	goto	l11445
  4678  004C9C                     u9980:
  4679  004C9C  0100               	movlb	0	; () banked
  4680  004C9E  6B60               	clrf	?___fldiv& (0+255),b
  4681  004CA0  6B61               	clrf	(?___fldiv+1)& (0+255),b
  4682  004CA2  6B62               	clrf	(?___fldiv+2)& (0+255),b
  4683  004CA4  6B63               	clrf	(?___fldiv+3)& (0+255),b
  4684  004CA6  D044               	goto	l1604
  4685  004CA8                     l11445:
  4686  004CA8  5042               	movf	___fldiv@sign,w,c
  4687  004CAA  0F89               	addlw	137
  4688  004CAC  5E41               	subwf	___fldiv@exp,f,c
  4689  004CAE  C063  F042         	movff	___fldiv@f1+3,___fldiv@sign
  4690  004CB2  0100               	movlb	0	; () banked
  4691  004CB4  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4692  004CB6  1A42               	xorwf	___fldiv@sign,f,c
  4693  004CB8  0E80               	movlw	128
  4694  004CBA  1642               	andwf	___fldiv@sign,f,c
  4695                           
  4696                           ; BSR set to: 0
  4697  004CBC  8F62               	bsf	(___fldiv@f1+2)& (0+255),7,b
  4698                           
  4699                           ; BSR set to: 0
  4700  004CBE  6B63               	clrf	(___fldiv@f1+3)& (0+255),b
  4701  004CC0  8F66               	bsf	(___fldiv@f2+2)& (0+255),7,b
  4702                           
  4703                           ; BSR set to: 0
  4704  004CC2  6B67               	clrf	(___fldiv@f2+3)& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707  004CC4  0E20               	movlw	32
  4708  004CC6  6E40               	movwf	___fldiv@cntr,c
  4709  004CC8                     l11457:
  4710                           
  4711                           ; BSR set to: 0
  4712  004CC8  90D8               	bcf	status,0,c
  4713  004CCA  363C               	rlcf	___fldiv@f3,f,c
  4714  004CCC  363D               	rlcf	___fldiv@f3+1,f,c
  4715  004CCE  363E               	rlcf	___fldiv@f3+2,f,c
  4716  004CD0  363F               	rlcf	___fldiv@f3+3,f,c
  4717                           
  4718                           ; BSR set to: 0
  4719  004CD2  5164               	movf	___fldiv@f2& (0+255),w,b
  4720  004CD4  5D60               	subwf	___fldiv@f1& (0+255),w,b
  4721  004CD6  5165               	movf	(___fldiv@f2+1)& (0+255),w,b
  4722  004CD8  5961               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  4723  004CDA  5166               	movf	(___fldiv@f2+2)& (0+255),w,b
  4724  004CDC  5962               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  4725  004CDE  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4726  004CE0  5963               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  4727  004CE2  E309               	bnc	l11465
  4728                           
  4729                           ; BSR set to: 0
  4730  004CE4  5164               	movf	___fldiv@f2& (0+255),w,b
  4731  004CE6  5F60               	subwf	___fldiv@f1& (0+255),f,b
  4732  004CE8  5165               	movf	(___fldiv@f2+1)& (0+255),w,b
  4733  004CEA  5B61               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  4734  004CEC  5166               	movf	(___fldiv@f2+2)& (0+255),w,b
  4735  004CEE  5B62               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  4736  004CF0  5167               	movf	(___fldiv@f2+3)& (0+255),w,b
  4737  004CF2  5B63               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  4738                           
  4739                           ; BSR set to: 0
  4740  004CF4  803C               	bsf	___fldiv@f3,0,c
  4741  004CF6                     l11465:
  4742                           
  4743                           ; BSR set to: 0
  4744  004CF6  90D8               	bcf	status,0,c
  4745  004CF8  3760               	rlcf	___fldiv@f1& (0+255),f,b
  4746  004CFA  3761               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  4747  004CFC  3762               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  4748  004CFE  3763               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  4749                           
  4750                           ; BSR set to: 0
  4751  004D00  2E40               	decfsz	___fldiv@cntr,f,c
  4752  004D02  D7E2               	goto	l11457
  4753                           
  4754                           ; BSR set to: 0
  4755  004D04  C03C  F00E         	movff	___fldiv@f3,?___flpack
  4756  004D08  C03D  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4757  004D0C  C03E  F010         	movff	___fldiv@f3+2,?___flpack+2
  4758  004D10  C03F  F011         	movff	___fldiv@f3+3,?___flpack+3
  4759  004D14  C041  F012         	movff	___fldiv@exp,?___flpack+4
  4760  004D18  C042  F013         	movff	___fldiv@sign,?___flpack+5
  4761  004D1C  EC2A  F025         	call	___flpack	;wreg free
  4762  004D20  C011  F063         	movff	?___flpack+3,?___fldiv+3
  4763  004D24  C010  F062         	movff	?___flpack+2,?___fldiv+2
  4764  004D28  C00F  F061         	movff	?___flpack+1,?___fldiv+1
  4765  004D2C  C00E  F060         	movff	?___flpack,?___fldiv
  4766  004D30                     l1604:
  4767  004D30  0012               	return	
  4768  004D32                     __end_of___fldiv:
  4769                           	opt stack 0
  4770                           tblptru	equ	0xFF8
  4771                           tblptrh	equ	0xFF7
  4772                           tblptrl	equ	0xFF6
  4773                           tablat	equ	0xFF5
  4774                           prodh	equ	0xFF4
  4775                           prodl	equ	0xFF3
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           postdec1	equ	0xFE5
  4779                           fsr1h	equ	0xFE2
  4780                           fsr1l	equ	0xFE1
  4781                           indf2	equ	0xFDF
  4782                           postinc2	equ	0xFDE
  4783                           postdec2	equ	0xFDD
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _vscp_doOneSecondWork *****************
  4789 ;; Defined at:
  4790 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;		None               void
  4797 ;; Registers used:
  4798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : F/0
  4801 ;;		On exit  : F/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4804 ;;      Params:         0       0       0       0       0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0
  4806 ;;      Temps:          0       1       0       0       0       0       0
  4807 ;;      Totals:         0       1       0       0       0       0       0
  4808 ;;Total ram usage:        1 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    8
  4811 ;; This function calls:
  4812 ;;		_vscp_getZone
  4813 ;;		_vscp_getSubzone
  4814 ;;		_vscp_sendHeartBeat
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text21
  4821  0054FC                     __ptext21:
  4822                           	opt stack 0
  4823  0054FC                     _vscp_doOneSecondWork:
  4824                           	opt stack 22
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;vscp_firmware.c: 526: ++vscp_second;
  4828                           
  4829                           ;incstack = 0
  4830                           ;incstack = 0
  4831  0054FC  2A51               	incf	_vscp_second,f,c
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  4835  0054FE  0E3B               	movlw	59
  4836  005500  6451               	cpfsgt	_vscp_second,c
  4837  005502  D00C               	goto	l10213
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;vscp_firmware.c: 529: vscp_second = 0;
  4841  005504  6A51               	clrf	_vscp_second,c
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;vscp_firmware.c: 530: vscp_minute++;
  4845  005506  2A4D               	incf	_vscp_minute,f,c
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  4849  005508  51CA               	movf	_vscp_node_state& (0+255),w,b
  4850  00550A  0A03               	xorlw	3
  4851  00550C  E107               	bnz	l10213
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  4855                           ;vscp_firmware.c: 535: vscp_getSubzone());
  4856  00550E  EC46  F02E         	call	_vscp_getSubzone	;wreg free
  4857  005512  6E44               	movwf	?_vscp_sendHeartBeat,c
  4858  005514  EC4B  F02E         	call	_vscp_getZone	;wreg free
  4859  005518  EC0E  F02D         	call	_vscp_sendHeartBeat
  4860  00551C                     l10213:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;vscp_firmware.c: 536: }
  4864                           ;vscp_firmware.c: 537: }
  4865                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  4866  00551C  0E3B               	movlw	59
  4867  00551E  644D               	cpfsgt	_vscp_minute,c
  4868  005520  D002               	goto	l10219
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;vscp_firmware.c: 540: vscp_minute = 0;
  4872  005522  6A4D               	clrf	_vscp_minute,c
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;vscp_firmware.c: 541: vscp_hour++;
  4876  005524  2BC7               	incf	_vscp_hour& (0+255),f,b
  4877  005526                     l10219:
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;vscp_firmware.c: 542: }
  4881                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  4882  005526  0E17               	movlw	23
  4883  005528  65C7               	cpfsgt	_vscp_hour& (0+255),b
  4884  00552A  D001               	goto	l10223
  4885                           
  4886                           ; BSR set to: 0
  4887  00552C  6BC7               	clrf	_vscp_hour& (0+255),b
  4888  00552E                     l10223:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  4892  00552E  51CA               	movf	_vscp_node_state& (0+255),w,b
  4893  005530  0A03               	xorlw	3
  4894  005532  E109               	bnz	l1100
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  4898  005534  2A4B               	incf	_vscp_guid_reset,f,c
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  4902  005536  C04B  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  4903  00553A  0E0F               	movlw	15
  4904  00553C  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  4905  00553E  0E02               	movlw	2
  4906  005540  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  4907  005542  B0D8               	btfsc	status,0,c
  4908                           
  4909                           ; BSR set to: 0
  4910                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  4911  005544  6A4B               	clrf	_vscp_guid_reset,c
  4912  005546                     l1100:
  4913                           
  4914                           ; BSR set to: 0
  4915  005546  0012               	return	
  4916  005548                     __end_of_vscp_doOneSecondWork:
  4917                           	opt stack 0
  4918                           tblptru	equ	0xFF8
  4919                           tblptrh	equ	0xFF7
  4920                           tblptrl	equ	0xFF6
  4921                           tablat	equ	0xFF5
  4922                           prodh	equ	0xFF4
  4923                           prodl	equ	0xFF3
  4924                           postinc0	equ	0xFEE
  4925                           wreg	equ	0xFE8
  4926                           postdec1	equ	0xFE5
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936 ;; *************** function _vscp_sendHeartBeat *****************
  4937 ;; Defined at:
  4938 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  zone            1    wreg     unsigned char 
  4941 ;;  subzone         1   67[COMRAM] unsigned char 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  zone            1   68[COMRAM] unsigned char 
  4944 ;; Return value:  Size  Location     Type
  4945 ;;		None               void
  4946 ;; Registers used:
  4947 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4948 ;; Tracked objects:
  4949 ;;		On entry : 0/0
  4950 ;;		On exit  : F/0
  4951 ;;		Unchanged: 0/0
  4952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4953 ;;      Params:         1       0       0       0       0       0       0
  4954 ;;      Locals:         1       0       0       0       0       0       0
  4955 ;;      Temps:          0       0       0       0       0       0       0
  4956 ;;      Totals:         2       0       0       0       0       0       0
  4957 ;;Total ram usage:        2 bytes
  4958 ;; Hardware stack levels used:    1
  4959 ;; Hardware stack levels required when called:    7
  4960 ;; This function calls:
  4961 ;;		_vscp_sendEvent
  4962 ;; This function is called by:
  4963 ;;		_vscp_doOneSecondWork
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text22
  4968  005A1C                     __ptext22:
  4969                           	opt stack 0
  4970  005A1C                     _vscp_sendHeartBeat:
  4971                           	opt stack 22
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;incstack = 0
  4975                           ;incstack = 0
  4976                           ;vscp_sendHeartBeat@zone stored from wreg
  4977  005A1C  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  4978                           
  4979                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  4980  005A20  0E83               	movlw	131
  4981  005A22  0100               	movlb	0	; () banked
  4982  005A24  6FCB               	movwf	_vscp_omsg& (0+255),b
  4983                           
  4984                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  4985  005A26  0E07               	movlw	7
  4986  005A28  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  4987                           
  4988                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  4989  005A2A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  4990  005A2C  0E14               	movlw	20
  4991  005A2E  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  4992                           
  4993                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  4994  005A30  0E09               	movlw	9
  4995  005A32  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  4999  005A34  6BD0               	clrf	(_vscp_omsg+5)& (0+255),b
  5000                           
  5001                           ; BSR set to: 0
  5002                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5003  005A36  C045  F0D1         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5007  005A3A  C044  F0D2         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5011  005A3E  EFE5  F02C         	goto	_vscp_sendEvent	;wreg free
  5012  005A42                     __end_of_vscp_sendHeartBeat:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           fsr1h	equ	0xFE2
  5024                           fsr1l	equ	0xFE1
  5025                           indf2	equ	0xFDF
  5026                           postinc2	equ	0xFDE
  5027                           postdec2	equ	0xFDD
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function _vscp_getSubzone *****************
  5033 ;; Defined at:
  5034 ;;		line 2733 in file "../main.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      unsigned char 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : F/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5048 ;;      Params:         0       0       0       0       0       0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0
  5051 ;;      Totals:         0       0       0       0       0       0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    3
  5055 ;; This function calls:
  5056 ;;		_readEEPROM
  5057 ;; This function is called by:
  5058 ;;		_vscp_doOneSecondWork
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text23
  5063  005C8C                     __ptext23:
  5064                           	opt stack 0
  5065  005C8C                     _vscp_getSubzone:
  5066                           	opt stack 26
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;main.c: 2734: return readEEPROM(0x42);
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;incstack = 0
  5073                           ;incstack = 0
  5074  005C8C  6A17               	clrf	?_readEEPROM+1,c
  5075  005C8E  0E42               	movlw	66
  5076  005C90  6E16               	movwf	?_readEEPROM,c
  5077  005C92  EF0F  F02E         	goto	_readEEPROM	;wreg free
  5078  005C96                     __end_of_vscp_getSubzone:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           postdec1	equ	0xFE5
  5089                           fsr1h	equ	0xFE2
  5090                           fsr1l	equ	0xFE1
  5091                           indf2	equ	0xFDF
  5092                           postinc2	equ	0xFDE
  5093                           postdec2	equ	0xFDD
  5094                           fsr2h	equ	0xFDA
  5095                           fsr2l	equ	0xFD9
  5096                           status	equ	0xFD8
  5097                           
  5098 ;; *************** function _vscp_getZone *****************
  5099 ;; Defined at:
  5100 ;;		line 2724 in file "../main.c"
  5101 ;; Parameters:    Size  Location     Type
  5102 ;;		None
  5103 ;; Auto vars:     Size  Location     Type
  5104 ;;		None
  5105 ;; Return value:  Size  Location     Type
  5106 ;;                  1    wreg      unsigned char 
  5107 ;; Registers used:
  5108 ;;		wreg, status,2, cstack
  5109 ;; Tracked objects:
  5110 ;;		On entry : 0/0
  5111 ;;		On exit  : 0/0
  5112 ;;		Unchanged: 0/0
  5113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5114 ;;      Params:         0       0       0       0       0       0       0
  5115 ;;      Locals:         0       0       0       0       0       0       0
  5116 ;;      Temps:          0       0       0       0       0       0       0
  5117 ;;      Totals:         0       0       0       0       0       0       0
  5118 ;;Total ram usage:        0 bytes
  5119 ;; Hardware stack levels used:    1
  5120 ;; Hardware stack levels required when called:    3
  5121 ;; This function calls:
  5122 ;;		_readEEPROM
  5123 ;; This function is called by:
  5124 ;;		_vscp_doOneSecondWork
  5125 ;; This function uses a non-reentrant model
  5126 ;;
  5127                           
  5128                           	psect	text24
  5129  005C96                     __ptext24:
  5130                           	opt stack 0
  5131  005C96                     _vscp_getZone:
  5132                           	opt stack 26
  5133                           
  5134                           ;main.c: 2725: return readEEPROM(0x41);
  5135                           
  5136                           ;incstack = 0
  5137                           ;incstack = 0
  5138  005C96  6A17               	clrf	?_readEEPROM+1,c
  5139  005C98  0E41               	movlw	65
  5140  005C9A  6E16               	movwf	?_readEEPROM,c
  5141  005C9C  EF0F  F02E         	goto	_readEEPROM	;wreg free
  5142  005CA0                     __end_of_vscp_getZone:
  5143                           	opt stack 0
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           postdec2	equ	0xFDD
  5158                           fsr2h	equ	0xFDA
  5159                           fsr2l	equ	0xFD9
  5160                           status	equ	0xFD8
  5161                           
  5162 ;; *************** function _doOneSecondWork *****************
  5163 ;; Defined at:
  5164 ;;		line 529 in file "../main.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;  setpoint        2   56[BANK0 ] short 
  5169 ;;  i               1   58[BANK0 ] unsigned char 
  5170 ;;  tmp             1   55[BANK0 ] unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;		None               void
  5173 ;; Registers used:
  5174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : F/1
  5177 ;;		On exit  : F/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5180 ;;      Params:         0       0       0       0       0       0       0
  5181 ;;      Locals:         0       4       0       0       0       0       0
  5182 ;;      Temps:          0       7       0       0       0       0       0
  5183 ;;      Totals:         0      11       0       0       0       0       0
  5184 ;;Total ram usage:       11 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    8
  5187 ;; This function calls:
  5188 ;;		_writeEEPROM
  5189 ;;		_readEEPROM
  5190 ;;		_sendTempEvent
  5191 ;;		_vscp_sendEvent
  5192 ;; This function is called by:
  5193 ;;		_main
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           	psect	text25
  5198  00201C                     __ptext25:
  5199                           	opt stack 0
  5200  00201C                     _doOneSecondWork:
  5201                           	opt stack 22
  5202                           
  5203                           ; BSR set to: 1
  5204                           ;main.c: 530: uint8_t tmp;
  5205                           ;main.c: 531: uint8_t i;
  5206                           ;main.c: 532: int16_t setpoint;
  5207                           ;main.c: 534: for (i = 0; i < 6; i++) {
  5208                           
  5209                           ;incstack = 0
  5210                           ;incstack = 0
  5211  00201C  0100               	movlb	0	; () banked
  5212  00201E  6B9A               	clrf	doOneSecondWork@i& (0+255),b
  5213  002020                     l10051:
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;main.c: 537: if (current_temp[ i ] < ((int16_t)( (((uint16_t)readEEPROM(0x7F + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x80 + 2*i)) ) ) {
  5217  002020  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5218  002022  0D02               	mullw	2
  5219  002024  0E7F               	movlw	127
  5220  002026  24F3               	addwf	prodl,w,c
  5221  002028  6E16               	movwf	?_readEEPROM,c
  5222  00202A  0E00               	movlw	0
  5223  00202C  20F4               	addwfc	prodh,w,c
  5224  00202E  6E17               	movwf	?_readEEPROM+1,c
  5225  002030  EC0F  F02E         	call	_readEEPROM	;wreg free
  5226  002034  0100               	movlb	0	; () banked
  5227  002036  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5228  002038  6B90               	clrf	??_doOneSecondWork& (0+255),b
  5229  00203A  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5230  00203C  0D02               	mullw	2
  5231  00203E  0E80               	movlw	128
  5232  002040  24F3               	addwf	prodl,w,c
  5233  002042  6E16               	movwf	?_readEEPROM,c
  5234  002044  0E00               	movlw	0
  5235  002046  20F4               	addwfc	prodh,w,c
  5236  002048  6E17               	movwf	?_readEEPROM+1,c
  5237  00204A  EC0F  F02E         	call	_readEEPROM	;wreg free
  5238  00204E  0100               	movlb	0	; () banked
  5239  002050  2790               	addwf	??_doOneSecondWork& (0+255),f,b
  5240  002052  0E00               	movlw	0
  5241  002054  2391               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5242  002056  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5243  002058  0D02               	mullw	2
  5244  00205A  0E00               	movlw	low _current_temp
  5245  00205C  24F3               	addwf	prodl,w,c
  5246  00205E  6ED9               	movwf	fsr2l,c
  5247  002060  0E01               	movlw	high _current_temp
  5248  002062  20F4               	addwfc	prodh,w,c
  5249  002064  6EDA               	movwf	fsr2h,c
  5250  002066  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  5251  00206A  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  5252  00206E  5193               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  5253  002070  0A80               	xorlw	128
  5254  002072  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5255  002074  5190               	movf	??_doOneSecondWork& (0+255),w,b
  5256  002076  5D92               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  5257  002078  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5258  00207A  0A80               	xorlw	128
  5259  00207C  5994               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  5260  00207E  E239               	bc	l209
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;main.c: 540: writeEEPROM(0x7F + 2*i, current_temp[ i ] >> 8);
  5264  002080  90D8               	bcf	status,0,c
  5265  002082  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5266  002084  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5267  002086  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5268  002088  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5269  00208A  0E7F               	movlw	127
  5270  00208C  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5271  00208E  6E0E               	movwf	?_writeEEPROM,c
  5272  002090  0E00               	movlw	0
  5273  002092  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5274  002094  6E0F               	movwf	?_writeEEPROM+1,c
  5275  002096  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5276  002098  0D02               	mullw	2
  5277  00209A  0E00               	movlw	low _current_temp
  5278  00209C  24F3               	addwf	prodl,w,c
  5279  00209E  6ED9               	movwf	fsr2l,c
  5280  0020A0  0E01               	movlw	high _current_temp
  5281  0020A2  20F4               	addwfc	prodh,w,c
  5282  0020A4  6EDA               	movwf	fsr2h,c
  5283  0020A6  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  5284  0020AA  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  5285  0020AE  C093  F092         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  5286  0020B2  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5287  0020B4  BF92               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  5288  0020B6  6993               	setf	(??_doOneSecondWork+3)& (0+255),b
  5289  0020B8  5192               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  5290  0020BA  6E10               	movwf	?_writeEEPROM+2,c
  5291  0020BC  EC21  F02D         	call	_writeEEPROM	;wreg free
  5292                           
  5293                           ;main.c: 541: writeEEPROM(0x80 + 2*i, current_temp[ i ] & 0xff);
  5294  0020C0  90D8               	bcf	status,0,c
  5295  0020C2  0100               	movlb	0	; () banked
  5296  0020C4  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5297  0020C6  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5298  0020C8  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5299  0020CA  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5300  0020CC  0E80               	movlw	128
  5301  0020CE  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5302  0020D0  6E0E               	movwf	?_writeEEPROM,c
  5303  0020D2  0E00               	movlw	0
  5304  0020D4  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5305  0020D6  6E0F               	movwf	?_writeEEPROM+1,c
  5306  0020D8  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5307  0020DA  0D02               	mullw	2
  5308  0020DC  0101               	movlb	1	; () banked
  5309  0020DE  0E00               	movlw	low _current_temp
  5310  0020E0  24F3               	addwf	prodl,w,c
  5311  0020E2  6ED9               	movwf	fsr2l,c
  5312  0020E4  0E01               	movlw	high _current_temp
  5313  0020E6  20F4               	addwfc	prodh,w,c
  5314  0020E8  6EDA               	movwf	fsr2h,c
  5315  0020EA  50DF               	movf	indf2,w,c
  5316  0020EC  6E10               	movwf	?_writeEEPROM+2,c
  5317  0020EE  EC21  F02D         	call	_writeEEPROM	;wreg free
  5318  0020F2                     l209:
  5319                           
  5320                           ;main.c: 542: }
  5321                           ;main.c: 545: if (current_temp[ i ] > ((int16_t)( (((uint16_t)readEEPROM(0x8B + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x8C + 2*i )) ) ) {
  5322  0020F2  0100               	movlb	0	; () banked
  5323  0020F4  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5324  0020F6  0D02               	mullw	2
  5325  0020F8  0E00               	movlw	low _current_temp
  5326  0020FA  24F3               	addwf	prodl,w,c
  5327  0020FC  6ED9               	movwf	fsr2l,c
  5328  0020FE  0E01               	movlw	high _current_temp
  5329  002100  20F4               	addwfc	prodh,w,c
  5330  002102  6EDA               	movwf	fsr2h,c
  5331  002104  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5332  002108  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  5333  00210C  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5334  00210E  0D02               	mullw	2
  5335  002110  0E8B               	movlw	139
  5336  002112  24F3               	addwf	prodl,w,c
  5337  002114  6E16               	movwf	?_readEEPROM,c
  5338  002116  0E00               	movlw	0
  5339  002118  20F4               	addwfc	prodh,w,c
  5340  00211A  6E17               	movwf	?_readEEPROM+1,c
  5341  00211C  EC0F  F02E         	call	_readEEPROM	;wreg free
  5342  002120  0100               	movlb	0	; () banked
  5343  002122  6F93               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5344  002124  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5345  002126  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5346  002128  0D02               	mullw	2
  5347  00212A  0E8C               	movlw	140
  5348  00212C  24F3               	addwf	prodl,w,c
  5349  00212E  6E16               	movwf	?_readEEPROM,c
  5350  002130  0E00               	movlw	0
  5351  002132  20F4               	addwfc	prodh,w,c
  5352  002134  6E17               	movwf	?_readEEPROM+1,c
  5353  002136  EC0F  F02E         	call	_readEEPROM	;wreg free
  5354  00213A  0100               	movlb	0	; () banked
  5355  00213C  2792               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5356  00213E  0E00               	movlw	0
  5357  002140  2393               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5358  002142  5193               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  5359  002144  0A80               	xorlw	128
  5360  002146  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5361  002148  5190               	movf	??_doOneSecondWork& (0+255),w,b
  5362  00214A  5D92               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  5363  00214C  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5364  00214E  0A80               	xorlw	128
  5365  002150  5994               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  5366  002152  E239               	bc	l10057
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;main.c: 548: writeEEPROM(0x8B + 2*i, current_temp[ i ] >> 8);
  5370  002154  90D8               	bcf	status,0,c
  5371  002156  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5372  002158  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5373  00215A  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5374  00215C  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5375  00215E  0E8B               	movlw	139
  5376  002160  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5377  002162  6E0E               	movwf	?_writeEEPROM,c
  5378  002164  0E00               	movlw	0
  5379  002166  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5380  002168  6E0F               	movwf	?_writeEEPROM+1,c
  5381  00216A  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5382  00216C  0D02               	mullw	2
  5383  00216E  0E00               	movlw	low _current_temp
  5384  002170  24F3               	addwf	prodl,w,c
  5385  002172  6ED9               	movwf	fsr2l,c
  5386  002174  0E01               	movlw	high _current_temp
  5387  002176  20F4               	addwfc	prodh,w,c
  5388  002178  6EDA               	movwf	fsr2h,c
  5389  00217A  CFDE F092          	movff	postinc2,??_doOneSecondWork+2
  5390  00217E  CFDD F093          	movff	postdec2,??_doOneSecondWork+3
  5391  002182  C093  F092         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  5392  002186  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5393  002188  BF92               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  5394  00218A  6993               	setf	(??_doOneSecondWork+3)& (0+255),b
  5395  00218C  5192               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  5396  00218E  6E10               	movwf	?_writeEEPROM+2,c
  5397  002190  EC21  F02D         	call	_writeEEPROM	;wreg free
  5398                           
  5399                           ;main.c: 549: writeEEPROM(0x8C + 2*i, current_temp[ i ] & 0xff );
  5400  002194  90D8               	bcf	status,0,c
  5401  002196  0100               	movlb	0	; () banked
  5402  002198  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5403  00219A  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5404  00219C  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5405  00219E  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5406  0021A0  0E8C               	movlw	140
  5407  0021A2  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5408  0021A4  6E0E               	movwf	?_writeEEPROM,c
  5409  0021A6  0E00               	movlw	0
  5410  0021A8  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5411  0021AA  6E0F               	movwf	?_writeEEPROM+1,c
  5412  0021AC  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5413  0021AE  0D02               	mullw	2
  5414  0021B0  0101               	movlb	1	; () banked
  5415  0021B2  0E00               	movlw	low _current_temp
  5416  0021B4  24F3               	addwf	prodl,w,c
  5417  0021B6  6ED9               	movwf	fsr2l,c
  5418  0021B8  0E01               	movlw	high _current_temp
  5419  0021BA  20F4               	addwfc	prodh,w,c
  5420  0021BC  6EDA               	movwf	fsr2h,c
  5421  0021BE  50DF               	movf	indf2,w,c
  5422  0021C0  6E10               	movwf	?_writeEEPROM+2,c
  5423  0021C2  EC21  F02D         	call	_writeEEPROM	;wreg free
  5424  0021C6                     l10057:
  5425                           
  5426                           ;main.c: 550: }
  5427                           ;main.c: 553: tmp = readEEPROM(0x49 + i);
  5428  0021C6  0E49               	movlw	73
  5429  0021C8  0100               	movlb	0	; () banked
  5430  0021CA  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5431  0021CC  6E16               	movwf	?_readEEPROM,c
  5432  0021CE  6A17               	clrf	?_readEEPROM+1,c
  5433  0021D0  0E00               	movlw	0
  5434  0021D2  2217               	addwfc	?_readEEPROM+1,f,c
  5435  0021D4  EC0F  F02E         	call	_readEEPROM	;wreg free
  5436  0021D8  0100               	movlb	0	; () banked
  5437  0021DA  6F97               	movwf	doOneSecondWork@tmp& (0+255),b
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;main.c: 554: if (tmp && (seconds_temp[i] > tmp)) {
  5441  0021DC  5197               	movf	doOneSecondWork@tmp& (0+255),w,b
  5442  0021DE  E016               	bz	l10067
  5443                           
  5444                           ; BSR set to: 0
  5445  0021E0  0E0C               	movlw	low _seconds_temp
  5446  0021E2  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5447  0021E4  6ED9               	movwf	fsr2l,c
  5448  0021E6  6ADA               	clrf	fsr2h,c
  5449  0021E8  0E01               	movlw	high _seconds_temp
  5450  0021EA  22DA               	addwfc	fsr2h,f,c
  5451  0021EC  50DF               	movf	indf2,w,c
  5452  0021EE  6197               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5453  0021F0  D00D               	goto	l10067
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;main.c: 557: if (sendTempEvent(i)) {
  5457  0021F2  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5458  0021F4  ECB6  F028         	call	_sendTempEvent
  5459  0021F8  0900               	iorlw	0
  5460  0021FA  E008               	bz	l10067
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;main.c: 558: seconds_temp[i] = 0;
  5464  0021FC  0E0C               	movlw	low _seconds_temp
  5465  0021FE  0100               	movlb	0	; () banked
  5466  002200  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5467  002202  6ED9               	movwf	fsr2l,c
  5468  002204  6ADA               	clrf	fsr2h,c
  5469  002206  0E01               	movlw	high _seconds_temp
  5470  002208  22DA               	addwfc	fsr2h,f,c
  5471  00220A  6ADF               	clrf	indf2,c
  5472  00220C                     l10067:
  5473                           
  5474                           ;main.c: 559: }
  5475                           ;main.c: 561: }
  5476                           ;main.c: 564: if (0x80 & readEEPROM(0x43 + i)) {
  5477  00220C  0E43               	movlw	67
  5478  00220E  0100               	movlb	0	; () banked
  5479  002210  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5480  002212  6E16               	movwf	?_readEEPROM,c
  5481  002214  6A17               	clrf	?_readEEPROM+1,c
  5482  002216  0E00               	movlw	0
  5483  002218  2217               	addwfc	?_readEEPROM+1,f,c
  5484  00221A  EC0F  F02E         	call	_readEEPROM	;wreg free
  5485  00221E  0100               	movlb	0	; () banked
  5486  002220  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5487  002222  AF90               	btfss	??_doOneSecondWork& (0+255),7,b
  5488  002224  D0CA               	goto	l10121
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;main.c: 567: if (low_alarm & (1 << i)) {
  5492  002226  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5493  00222A  0E01               	movlw	1
  5494  00222C  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5495  00222E  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5496  002230  D002               	goto	u8254
  5497  002232                     u8255:
  5498  002232  90D8               	bcf	status,0,c
  5499  002234  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5500  002236                     u8254:
  5501  002236  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5502  002238  D7FC               	goto	u8255
  5503  00223A  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5504  00223C  15C5               	andwf	_low_alarm& (0+255),w,b
  5505  00223E  E058               	bz	l10095
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;main.c: 570: if (readEEPROM(0x43 + i) & (1<<3)) {
  5509  002240  0E43               	movlw	67
  5510  002242  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5511  002244  6E16               	movwf	?_readEEPROM,c
  5512  002246  6A17               	clrf	?_readEEPROM+1,c
  5513  002248  0E00               	movlw	0
  5514  00224A  2217               	addwfc	?_readEEPROM+1,f,c
  5515  00224C  EC0F  F02E         	call	_readEEPROM	;wreg free
  5516  002250  0100               	movlb	0	; () banked
  5517  002252  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5518  002254  A790               	btfss	??_doOneSecondWork& (0+255),3,b
  5519  002256  D04C               	goto	l10095
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;main.c: 572: vscp_omsg.priority = 0x00;
  5523  002258  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5524                           
  5525                           ; BSR set to: 0
  5526                           ;main.c: 573: vscp_omsg.flags = 0x80 + 3;
  5527  00225A  0E83               	movlw	131
  5528  00225C  6FCB               	movwf	_vscp_omsg& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;main.c: 576: if (readEEPROM(0x43 + i) & (1<<5)) {
  5532  00225E  0E43               	movlw	67
  5533  002260  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5534  002262  6E16               	movwf	?_readEEPROM,c
  5535  002264  6A17               	clrf	?_readEEPROM+1,c
  5536  002266  0E00               	movlw	0
  5537  002268  2217               	addwfc	?_readEEPROM+1,f,c
  5538  00226A  EC0F  F02E         	call	_readEEPROM	;wreg free
  5539  00226E  0100               	movlb	0	; () banked
  5540  002270  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5541  002272  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5542  002274  D016               	goto	l10085
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;main.c: 578: if (readEEPROM(0x43 + i) & (1<<6)) {
  5546  002276  0E43               	movlw	67
  5547  002278  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5548  00227A  6E16               	movwf	?_readEEPROM,c
  5549  00227C  6A17               	clrf	?_readEEPROM+1,c
  5550  00227E  0E00               	movlw	0
  5551  002280  2217               	addwfc	?_readEEPROM+1,f,c
  5552  002282  EC0F  F02E         	call	_readEEPROM	;wreg free
  5553  002286  0100               	movlb	0	; () banked
  5554  002288  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5555  00228A  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5556  00228C  D005               	goto	l10083
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;main.c: 579: vscp_omsg.vscp_class = 30;
  5560  00228E  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5561  002290  0E1E               	movlw	30
  5562  002292  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5563                           
  5564                           ;main.c: 580: vscp_omsg.vscp_type = 5;
  5565  002294  0E05               	movlw	5
  5566  002296  D009               	goto	L4
  5567  002298                     l10083:
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;main.c: 582: else {
  5571                           ;main.c: 583: vscp_omsg.vscp_class = 30;
  5572  002298  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5573  00229A  0E1E               	movlw	30
  5574  00229C  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5575                           
  5576                           ;main.c: 584: vscp_omsg.vscp_type = 6;
  5577  00229E  0E06               	movlw	6
  5578  0022A0  D004               	goto	L4
  5579  0022A2                     l10085:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;main.c: 588: else {
  5583                           ;main.c: 590: vscp_omsg.vscp_class = 1;
  5584  0022A2  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5585  0022A4  0E01               	movlw	1
  5586  0022A6  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5587                           
  5588                           ;main.c: 591: vscp_omsg.vscp_type = 2;
  5589  0022A8  0E02               	movlw	2
  5590  0022AA                     L4:
  5591  0022AA  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;main.c: 592: }
  5595                           ;main.c: 594: vscp_omsg.data[ 0 ] = i;
  5596  0022AC  C09A  F0D0         	movff	doOneSecondWork@i,_vscp_omsg+5
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;main.c: 595: vscp_omsg.data[ 1 ] =
  5600                           ;main.c: 596: readEEPROM(0x73 + 2*i);
  5601  0022B0  90D8               	bcf	status,0,c
  5602  0022B2  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5603  0022B4  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5604  0022B6  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5605  0022B8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5606  0022BA  0E73               	movlw	115
  5607  0022BC  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5608  0022BE  6E16               	movwf	?_readEEPROM,c
  5609  0022C0  0E00               	movlw	0
  5610  0022C2  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5611  0022C4  6E17               	movwf	?_readEEPROM+1,c
  5612  0022C6  EC0F  F02E         	call	_readEEPROM	;wreg free
  5613  0022CA  0100               	movlb	0	; () banked
  5614  0022CC  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;main.c: 597: vscp_omsg.data[ 2 ] =
  5618                           ;main.c: 598: readEEPROM(0x74 + 2*i);
  5619  0022CE  90D8               	bcf	status,0,c
  5620  0022D0  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5621  0022D2  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5622  0022D4  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5623  0022D6  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5624  0022D8  0E74               	movlw	116
  5625  0022DA  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5626  0022DC  6E16               	movwf	?_readEEPROM,c
  5627  0022DE  0E00               	movlw	0
  5628  0022E0  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5629  0022E2  6E17               	movwf	?_readEEPROM+1,c
  5630  0022E4  EC0F  F02E         	call	_readEEPROM	;wreg free
  5631  0022E8  0100               	movlb	0	; () banked
  5632  0022EA  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;main.c: 603: vscp_sendEvent();
  5636  0022EC  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  5637  0022F0                     l10095:
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;main.c: 605: }
  5641                           ;main.c: 606: }
  5642                           ;main.c: 609: if (high_alarm & (1 << i)) {
  5643  0022F0  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5644  0022F4  0E01               	movlw	1
  5645  0022F6  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5646  0022F8  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5647  0022FA  D002               	goto	u8304
  5648  0022FC                     u8305:
  5649  0022FC  90D8               	bcf	status,0,c
  5650  0022FE  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5651  002300                     u8304:
  5652  002300  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5653  002302  D7FC               	goto	u8305
  5654  002304  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5655  002306  15C4               	andwf	_high_alarm& (0+255),w,b
  5656  002308  E058               	bz	l10121
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;main.c: 612: if ((readEEPROM(0x43 + i) & (1<<4))) {
  5660  00230A  0E43               	movlw	67
  5661  00230C  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5662  00230E  6E16               	movwf	?_readEEPROM,c
  5663  002310  6A17               	clrf	?_readEEPROM+1,c
  5664  002312  0E00               	movlw	0
  5665  002314  2217               	addwfc	?_readEEPROM+1,f,c
  5666  002316  EC0F  F02E         	call	_readEEPROM	;wreg free
  5667  00231A  0100               	movlb	0	; () banked
  5668  00231C  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5669  00231E  A990               	btfss	??_doOneSecondWork& (0+255),4,b
  5670  002320  D04C               	goto	l10121
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;main.c: 614: vscp_omsg.priority = 0x00;
  5674  002322  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;main.c: 615: vscp_omsg.flags = 0x80 + 3;
  5678  002324  0E83               	movlw	131
  5679  002326  6FCB               	movwf	_vscp_omsg& (0+255),b
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;main.c: 617: if (readEEPROM(0x43 + i) & (1<<5)) {
  5683  002328  0E43               	movlw	67
  5684  00232A  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5685  00232C  6E16               	movwf	?_readEEPROM,c
  5686  00232E  6A17               	clrf	?_readEEPROM+1,c
  5687  002330  0E00               	movlw	0
  5688  002332  2217               	addwfc	?_readEEPROM+1,f,c
  5689  002334  EC0F  F02E         	call	_readEEPROM	;wreg free
  5690  002338  0100               	movlb	0	; () banked
  5691  00233A  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5692  00233C  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  5693  00233E  D016               	goto	l10111
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;main.c: 619: if (readEEPROM(0x43 + i) & (1<<6)) {
  5697  002340  0E43               	movlw	67
  5698  002342  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5699  002344  6E16               	movwf	?_readEEPROM,c
  5700  002346  6A17               	clrf	?_readEEPROM+1,c
  5701  002348  0E00               	movlw	0
  5702  00234A  2217               	addwfc	?_readEEPROM+1,f,c
  5703  00234C  EC0F  F02E         	call	_readEEPROM	;wreg free
  5704  002350  0100               	movlb	0	; () banked
  5705  002352  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5706  002354  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  5707  002356  D005               	goto	l10109
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;main.c: 620: vscp_omsg.vscp_class = 30;
  5711  002358  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5712  00235A  0E1E               	movlw	30
  5713  00235C  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5714                           
  5715                           ;main.c: 621: vscp_omsg.vscp_type = 6;
  5716  00235E  0E06               	movlw	6
  5717  002360  D009               	goto	L5
  5718  002362                     l10109:
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;main.c: 623: else {
  5722                           ;main.c: 624: vscp_omsg.vscp_class = 30;
  5723  002362  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5724  002364  0E1E               	movlw	30
  5725  002366  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5726                           
  5727                           ;main.c: 625: vscp_omsg.vscp_type = 5;
  5728  002368  0E05               	movlw	5
  5729  00236A  D004               	goto	L5
  5730  00236C                     l10111:
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;main.c: 628: else {
  5734                           ;main.c: 630: vscp_omsg.vscp_class = 1;
  5735  00236C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5736  00236E  0E01               	movlw	1
  5737  002370  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5738                           
  5739                           ;main.c: 631: vscp_omsg.vscp_type = 2;
  5740  002372  0E02               	movlw	2
  5741  002374                     L5:
  5742  002374  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;main.c: 632: }
  5746                           ;main.c: 634: vscp_omsg.data[ 0 ] = i;
  5747  002376  C09A  F0D0         	movff	doOneSecondWork@i,_vscp_omsg+5
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;main.c: 635: vscp_omsg.data[ 1 ] =
  5751                           ;main.c: 636: readEEPROM(0x73 + 2*i);
  5752  00237A  90D8               	bcf	status,0,c
  5753  00237C  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5754  00237E  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5755  002380  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5756  002382  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5757  002384  0E73               	movlw	115
  5758  002386  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5759  002388  6E16               	movwf	?_readEEPROM,c
  5760  00238A  0E00               	movlw	0
  5761  00238C  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5762  00238E  6E17               	movwf	?_readEEPROM+1,c
  5763  002390  EC0F  F02E         	call	_readEEPROM	;wreg free
  5764  002394  0100               	movlb	0	; () banked
  5765  002396  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;main.c: 637: vscp_omsg.data[ 2 ] =
  5769                           ;main.c: 638: readEEPROM(0x74 + 2*i);
  5770  002398  90D8               	bcf	status,0,c
  5771  00239A  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5772  00239C  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5773  00239E  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5774  0023A0  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5775  0023A2  0E74               	movlw	116
  5776  0023A4  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  5777  0023A6  6E16               	movwf	?_readEEPROM,c
  5778  0023A8  0E00               	movlw	0
  5779  0023AA  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5780  0023AC  6E17               	movwf	?_readEEPROM+1,c
  5781  0023AE  EC0F  F02E         	call	_readEEPROM	;wreg free
  5782  0023B2  0100               	movlb	0	; () banked
  5783  0023B4  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;main.c: 643: vscp_sendEvent();
  5787  0023B6  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  5788  0023BA                     l10121:
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;main.c: 644: }
  5792                           ;main.c: 645: }
  5793                           ;main.c: 646: }
  5794                           ;main.c: 651: if (low_alarm & (1 << i)) {
  5795  0023BA  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5796  0023BE  0E01               	movlw	1
  5797  0023C0  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5798  0023C2  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5799  0023C4  D002               	goto	u8354
  5800  0023C6                     u8355:
  5801  0023C6  90D8               	bcf	status,0,c
  5802  0023C8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5803  0023CA                     u8354:
  5804  0023CA  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5805  0023CC  D7FC               	goto	u8355
  5806  0023CE  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5807  0023D0  15C5               	andwf	_low_alarm& (0+255),w,b
  5808  0023D2  E054               	bz	l10129
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;main.c: 654: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x5C + 2 * i)) ) +
  5812                           ;main.c: 656: (int8_t) readEEPROM(0x97 + i);
  5813  0023D4  0E97               	movlw	151
  5814  0023D6  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5815  0023D8  6E16               	movwf	?_readEEPROM,c
  5816  0023DA  6A17               	clrf	?_readEEPROM+1,c
  5817  0023DC  0E00               	movlw	0
  5818  0023DE  2217               	addwfc	?_readEEPROM+1,f,c
  5819  0023E0  EC0F  F02E         	call	_readEEPROM	;wreg free
  5820  0023E4  0100               	movlb	0	; () banked
  5821  0023E6  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5822  0023E8  90D8               	bcf	status,0,c
  5823  0023EA  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5824  0023EC  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5825  0023EE  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5826  0023F0  3792               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  5827  0023F2  0E5B               	movlw	91
  5828  0023F4  2591               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5829  0023F6  6E16               	movwf	?_readEEPROM,c
  5830  0023F8  0E00               	movlw	0
  5831  0023FA  2192               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5832  0023FC  6E17               	movwf	?_readEEPROM+1,c
  5833  0023FE  EC0F  F02E         	call	_readEEPROM	;wreg free
  5834  002402  0100               	movlb	0	; () banked
  5835  002404  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5836  002406  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5837  002408  90D8               	bcf	status,0,c
  5838  00240A  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  5839  00240C  6F95               	movwf	(??_doOneSecondWork+5)& (0+255),b
  5840  00240E  6B96               	clrf	(??_doOneSecondWork+6)& (0+255),b
  5841  002410  3796               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  5842  002412  0E5C               	movlw	92
  5843  002414  2595               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5844  002416  6E16               	movwf	?_readEEPROM,c
  5845  002418  0E00               	movlw	0
  5846  00241A  2196               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5847  00241C  6E17               	movwf	?_readEEPROM+1,c
  5848  00241E  EC0F  F02E         	call	_readEEPROM	;wreg free
  5849  002422  0100               	movlb	0	; () banked
  5850  002424  2793               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  5851  002426  0E00               	movlw	0
  5852  002428  2394               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  5853  00242A  5190               	movf	??_doOneSecondWork& (0+255),w,b
  5854  00242C  2593               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  5855  00242E  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  5856  002430  0E00               	movlw	0
  5857  002432  2194               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  5858  002434  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;main.c: 661: if (current_temp[ i ] > setpoint) {
  5862  002436  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5863  002438  0D02               	mullw	2
  5864  00243A  0E00               	movlw	low _current_temp
  5865  00243C  24F3               	addwf	prodl,w,c
  5866  00243E  6ED9               	movwf	fsr2l,c
  5867  002440  0E01               	movlw	high _current_temp
  5868  002442  20F4               	addwfc	prodh,w,c
  5869  002444  6EDA               	movwf	fsr2h,c
  5870  002446  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5871  00244A  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  5872  00244E  5199               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  5873  002450  0A80               	xorlw	128
  5874  002452  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  5875  002454  5190               	movf	??_doOneSecondWork& (0+255),w,b
  5876  002456  5D98               	subwf	doOneSecondWork@setpoint& (0+255),w,b
  5877  002458  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5878  00245A  0A80               	xorlw	128
  5879  00245C  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  5880  00245E  E301 D0A4          	bc	l228
  5881  002462                     l10127:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;main.c: 664: low_alarm &= ~(1 << i);
  5885  002462  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5886  002466  0E01               	movlw	1
  5887  002468  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5888  00246A  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5889  00246C  D002               	goto	u8384
  5890  00246E                     u8385:
  5891  00246E  90D8               	bcf	status,0,c
  5892  002470  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5893  002472                     u8384:
  5894  002472  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5895  002474  D7FC               	goto	u8385
  5896  002476  1D91               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  5897  002478  17C5               	andwf	_low_alarm& (0+255),f,b
  5898  00247A  D097               	goto	l228
  5899  00247C                     l10129:
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;main.c: 669: else {
  5903                           ;main.c: 673: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x5C + 2 * i)) );
  5904  00247C  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5905  00247E  0D02               	mullw	2
  5906  002480  0E5C               	movlw	92
  5907  002482  24F3               	addwf	prodl,w,c
  5908  002484  6E16               	movwf	?_readEEPROM,c
  5909  002486  0E00               	movlw	0
  5910  002488  20F4               	addwfc	prodh,w,c
  5911  00248A  6E17               	movwf	?_readEEPROM+1,c
  5912  00248C  EC0F  F02E         	call	_readEEPROM	;wreg free
  5913  002490  0100               	movlb	0	; () banked
  5914  002492  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5915  002494  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5916  002496  0D02               	mullw	2
  5917  002498  0E5B               	movlw	91
  5918  00249A  24F3               	addwf	prodl,w,c
  5919  00249C  6E16               	movwf	?_readEEPROM,c
  5920  00249E  0E00               	movlw	0
  5921  0024A0  20F4               	addwfc	prodh,w,c
  5922  0024A2  6E17               	movwf	?_readEEPROM+1,c
  5923  0024A4  EC0F  F02E         	call	_readEEPROM	;wreg free
  5924  0024A8  0100               	movlb	0	; () banked
  5925  0024AA  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5926  0024AC  5190               	movf	??_doOneSecondWork& (0+255),w,b
  5927  0024AE  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;main.c: 676: if (current_temp[ i ] < setpoint) {
  5931  0024B0  519A               	movf	doOneSecondWork@i& (0+255),w,b
  5932  0024B2  0D02               	mullw	2
  5933  0024B4  0E00               	movlw	low _current_temp
  5934  0024B6  24F3               	addwf	prodl,w,c
  5935  0024B8  6ED9               	movwf	fsr2l,c
  5936  0024BA  0E01               	movlw	high _current_temp
  5937  0024BC  20F4               	addwfc	prodh,w,c
  5938  0024BE  6EDA               	movwf	fsr2h,c
  5939  0024C0  CFDE F090          	movff	postinc2,??_doOneSecondWork
  5940  0024C4  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  5941  0024C8  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5942  0024CA  0A80               	xorlw	128
  5943  0024CC  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  5944  0024CE  5198               	movf	doOneSecondWork@setpoint& (0+255),w,b
  5945  0024D0  5D90               	subwf	??_doOneSecondWork& (0+255),w,b
  5946  0024D2  5199               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  5947  0024D4  0A80               	xorlw	128
  5948  0024D6  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  5949  0024D8  E268               	bc	l228
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;main.c: 679: low_alarm |= (1 << i);
  5953  0024DA  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  5954  0024DE  0E01               	movlw	1
  5955  0024E0  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5956  0024E2  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  5957  0024E4  D002               	goto	u8404
  5958  0024E6                     u8405:
  5959  0024E6  90D8               	bcf	status,0,c
  5960  0024E8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5961  0024EA                     u8404:
  5962  0024EA  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  5963  0024EC  D7FC               	goto	u8405
  5964  0024EE  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5965  0024F0  13C5               	iorwf	_low_alarm& (0+255),f,b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;main.c: 684: vscp_alarmstatus |= 1;
  5969  0024F2  804A               	bsf	_vscp_alarmstatus,0,c
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;main.c: 687: if (readEEPROM(i + 0x43) & (1<<3)) {
  5973  0024F4  0E43               	movlw	67
  5974  0024F6  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  5975  0024F8  6E16               	movwf	?_readEEPROM,c
  5976  0024FA  6A17               	clrf	?_readEEPROM+1,c
  5977  0024FC  0E00               	movlw	0
  5978  0024FE  2217               	addwfc	?_readEEPROM+1,f,c
  5979  002500  EC0F  F02E         	call	_readEEPROM	;wreg free
  5980  002504  0100               	movlb	0	; () banked
  5981  002506  6F90               	movwf	??_doOneSecondWork& (0+255),b
  5982  002508  A790               	btfss	??_doOneSecondWork& (0+255),3,b
  5983  00250A  D04F               	goto	l228
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;main.c: 689: vscp_omsg.vscp_class = 1;
  5987  00250C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  5988  00250E  0E01               	movlw	1
  5989  002510  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  5990                           
  5991                           ;main.c: 690: vscp_omsg.vscp_type = 2;
  5992  002512  0E02               	movlw	2
  5993  002514  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;main.c: 691: vscp_omsg.priority = 0x00;
  5997  002516  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  5998                           
  5999                           ;main.c: 692: vscp_omsg.flags = 0x80 + 3;
  6000  002518  0E83               	movlw	131
  6001  00251A  6FCB               	movwf	_vscp_omsg& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;main.c: 695: if (readEEPROM(0x43 + i) & (1<<5)) {
  6005  00251C  0E43               	movlw	67
  6006  00251E  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6007  002520  6E16               	movwf	?_readEEPROM,c
  6008  002522  6A17               	clrf	?_readEEPROM+1,c
  6009  002524  0E00               	movlw	0
  6010  002526  2217               	addwfc	?_readEEPROM+1,f,c
  6011  002528  EC0F  F02E         	call	_readEEPROM	;wreg free
  6012  00252C  0100               	movlb	0	; () banked
  6013  00252E  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6014  002530  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  6015  002532  D016               	goto	l10151
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;main.c: 697: if (readEEPROM(0x43 + i) & (1<<6)) {
  6019  002534  0E43               	movlw	67
  6020  002536  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6021  002538  6E16               	movwf	?_readEEPROM,c
  6022  00253A  6A17               	clrf	?_readEEPROM+1,c
  6023  00253C  0E00               	movlw	0
  6024  00253E  2217               	addwfc	?_readEEPROM+1,f,c
  6025  002540  EC0F  F02E         	call	_readEEPROM	;wreg free
  6026  002544  0100               	movlb	0	; () banked
  6027  002546  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6028  002548  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  6029  00254A  D005               	goto	l10149
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;main.c: 698: vscp_omsg.vscp_class = 30;
  6033  00254C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6034  00254E  0E1E               	movlw	30
  6035  002550  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6036                           
  6037                           ;main.c: 699: vscp_omsg.vscp_type = 5;
  6038  002552  0E05               	movlw	5
  6039  002554  D004               	goto	L6
  6040  002556                     l10149:
  6041                           
  6042                           ; BSR set to: 0
  6043                           ;main.c: 701: else {
  6044                           ;main.c: 702: vscp_omsg.vscp_class = 30;
  6045  002556  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6046  002558  0E1E               	movlw	30
  6047  00255A  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6048                           
  6049                           ;main.c: 703: vscp_omsg.vscp_type = 6;
  6050  00255C  0E06               	movlw	6
  6051  00255E                     L6:
  6052  00255E  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6053  002560                     l10151:
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;main.c: 704: }
  6057                           ;main.c: 706: }
  6058                           ;main.c: 708: vscp_omsg.data[ 0 ] = i;
  6059  002560  C09A  F0D0         	movff	doOneSecondWork@i,_vscp_omsg+5
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;main.c: 709: vscp_omsg.data[ 1 ] =
  6063                           ;main.c: 710: readEEPROM(0x73 + 2 * i);
  6064  002564  90D8               	bcf	status,0,c
  6065  002566  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6066  002568  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6067  00256A  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6068  00256C  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6069  00256E  0E73               	movlw	115
  6070  002570  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6071  002572  6E16               	movwf	?_readEEPROM,c
  6072  002574  0E00               	movlw	0
  6073  002576  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6074  002578  6E17               	movwf	?_readEEPROM+1,c
  6075  00257A  EC0F  F02E         	call	_readEEPROM	;wreg free
  6076  00257E  0100               	movlb	0	; () banked
  6077  002580  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;main.c: 711: vscp_omsg.data[ 2 ] =
  6081                           ;main.c: 712: readEEPROM(0x74 + 2 * i);
  6082  002582  90D8               	bcf	status,0,c
  6083  002584  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6084  002586  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6085  002588  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6086  00258A  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6087  00258C  0E74               	movlw	116
  6088  00258E  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6089  002590  6E16               	movwf	?_readEEPROM,c
  6090  002592  0E00               	movlw	0
  6091  002594  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6092  002596  6E17               	movwf	?_readEEPROM+1,c
  6093  002598  EC0F  F02E         	call	_readEEPROM	;wreg free
  6094  00259C  0100               	movlb	0	; () banked
  6095  00259E  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;main.c: 715: if (!vscp_sendEvent()) {
  6099  0025A0  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  6100  0025A4  0900               	iorlw	0
  6101  0025A6  E101 D75C          	bz	l10127
  6102  0025AA                     l228:
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;main.c: 719: }
  6106                           ;main.c: 721: }
  6107                           ;main.c: 722: }
  6108                           ;main.c: 723: }
  6109                           ;main.c: 726: if (high_alarm & (1 << i)) {
  6110  0025AA  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6111  0025AE  0E01               	movlw	1
  6112  0025B0  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6113  0025B2  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6114  0025B4  D002               	goto	u8454
  6115  0025B6                     u8455:
  6116  0025B6  90D8               	bcf	status,0,c
  6117  0025B8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6118  0025BA                     u8454:
  6119  0025BA  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6120  0025BC  D7FC               	goto	u8455
  6121  0025BE  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6122  0025C0  15C4               	andwf	_high_alarm& (0+255),w,b
  6123  0025C2  E054               	bz	l10167
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;main.c: 730: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) ) +
  6127                           ;main.c: 732: (int8_t) readEEPROM(0x97 + i);
  6128  0025C4  0E97               	movlw	151
  6129  0025C6  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6130  0025C8  6E16               	movwf	?_readEEPROM,c
  6131  0025CA  6A17               	clrf	?_readEEPROM+1,c
  6132  0025CC  0E00               	movlw	0
  6133  0025CE  2217               	addwfc	?_readEEPROM+1,f,c
  6134  0025D0  EC0F  F02E         	call	_readEEPROM	;wreg free
  6135  0025D4  0100               	movlb	0	; () banked
  6136  0025D6  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6137  0025D8  90D8               	bcf	status,0,c
  6138  0025DA  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6139  0025DC  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6140  0025DE  6B92               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6141  0025E0  3792               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  6142  0025E2  0E67               	movlw	103
  6143  0025E4  2591               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  6144  0025E6  6E16               	movwf	?_readEEPROM,c
  6145  0025E8  0E00               	movlw	0
  6146  0025EA  2192               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  6147  0025EC  6E17               	movwf	?_readEEPROM+1,c
  6148  0025EE  EC0F  F02E         	call	_readEEPROM	;wreg free
  6149  0025F2  0100               	movlb	0	; () banked
  6150  0025F4  6F94               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6151  0025F6  6B93               	clrf	(??_doOneSecondWork+3)& (0+255),b
  6152  0025F8  90D8               	bcf	status,0,c
  6153  0025FA  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6154  0025FC  6F95               	movwf	(??_doOneSecondWork+5)& (0+255),b
  6155  0025FE  6B96               	clrf	(??_doOneSecondWork+6)& (0+255),b
  6156  002600  3796               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  6157  002602  0E68               	movlw	104
  6158  002604  2595               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  6159  002606  6E16               	movwf	?_readEEPROM,c
  6160  002608  0E00               	movlw	0
  6161  00260A  2196               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  6162  00260C  6E17               	movwf	?_readEEPROM+1,c
  6163  00260E  EC0F  F02E         	call	_readEEPROM	;wreg free
  6164  002612  0100               	movlb	0	; () banked
  6165  002614  2793               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  6166  002616  0E00               	movlw	0
  6167  002618  2394               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  6168  00261A  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6169  00261C  2593               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  6170  00261E  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6171  002620  0E00               	movlw	0
  6172  002622  2194               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  6173  002624  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;main.c: 735: if (current_temp[ i ] < setpoint) {
  6177  002626  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6178  002628  0D02               	mullw	2
  6179  00262A  0E00               	movlw	low _current_temp
  6180  00262C  24F3               	addwf	prodl,w,c
  6181  00262E  6ED9               	movwf	fsr2l,c
  6182  002630  0E01               	movlw	high _current_temp
  6183  002632  20F4               	addwfc	prodh,w,c
  6184  002634  6EDA               	movwf	fsr2h,c
  6185  002636  CFDE F090          	movff	postinc2,??_doOneSecondWork
  6186  00263A  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  6187  00263E  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6188  002640  0A80               	xorlw	128
  6189  002642  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6190  002644  5198               	movf	doOneSecondWork@setpoint& (0+255),w,b
  6191  002646  5D90               	subwf	??_doOneSecondWork& (0+255),w,b
  6192  002648  5199               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  6193  00264A  0A80               	xorlw	128
  6194  00264C  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6195  00264E  E301 D0A4          	bc	l10199
  6196  002652                     l10165:
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;main.c: 738: high_alarm &= ~(1 << i);
  6200  002652  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6201  002656  0E01               	movlw	1
  6202  002658  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6203  00265A  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6204  00265C  D002               	goto	u8484
  6205  00265E                     u8485:
  6206  00265E  90D8               	bcf	status,0,c
  6207  002660  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6208  002662                     u8484:
  6209  002662  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6210  002664  D7FC               	goto	u8485
  6211  002666  1D91               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6212  002668  17C4               	andwf	_high_alarm& (0+255),f,b
  6213  00266A  D097               	goto	l10199
  6214  00266C                     l10167:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;main.c: 743: else {
  6218                           ;main.c: 748: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) );
  6219  00266C  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6220  00266E  0D02               	mullw	2
  6221  002670  0E68               	movlw	104
  6222  002672  24F3               	addwf	prodl,w,c
  6223  002674  6E16               	movwf	?_readEEPROM,c
  6224  002676  0E00               	movlw	0
  6225  002678  20F4               	addwfc	prodh,w,c
  6226  00267A  6E17               	movwf	?_readEEPROM+1,c
  6227  00267C  EC0F  F02E         	call	_readEEPROM	;wreg free
  6228  002680  0100               	movlb	0	; () banked
  6229  002682  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6230  002684  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6231  002686  0D02               	mullw	2
  6232  002688  0E67               	movlw	103
  6233  00268A  24F3               	addwf	prodl,w,c
  6234  00268C  6E16               	movwf	?_readEEPROM,c
  6235  00268E  0E00               	movlw	0
  6236  002690  20F4               	addwfc	prodh,w,c
  6237  002692  6E17               	movwf	?_readEEPROM+1,c
  6238  002694  EC0F  F02E         	call	_readEEPROM	;wreg free
  6239  002698  0100               	movlb	0	; () banked
  6240  00269A  6F99               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6241  00269C  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6242  00269E  6F98               	movwf	doOneSecondWork@setpoint& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;main.c: 751: if (current_temp[ i ] > setpoint) {
  6246  0026A0  519A               	movf	doOneSecondWork@i& (0+255),w,b
  6247  0026A2  0D02               	mullw	2
  6248  0026A4  0E00               	movlw	low _current_temp
  6249  0026A6  24F3               	addwf	prodl,w,c
  6250  0026A8  6ED9               	movwf	fsr2l,c
  6251  0026AA  0E01               	movlw	high _current_temp
  6252  0026AC  20F4               	addwfc	prodh,w,c
  6253  0026AE  6EDA               	movwf	fsr2h,c
  6254  0026B0  CFDE F090          	movff	postinc2,??_doOneSecondWork
  6255  0026B4  CFDD F091          	movff	postdec2,??_doOneSecondWork+1
  6256  0026B8  5199               	movf	(doOneSecondWork@setpoint+1)& (0+255),w,b
  6257  0026BA  0A80               	xorlw	128
  6258  0026BC  6F92               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6259  0026BE  5190               	movf	??_doOneSecondWork& (0+255),w,b
  6260  0026C0  5D98               	subwf	doOneSecondWork@setpoint& (0+255),w,b
  6261  0026C2  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6262  0026C4  0A80               	xorlw	128
  6263  0026C6  5992               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6264  0026C8  E268               	bc	l10199
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;main.c: 754: high_alarm |= (1 << i);
  6268  0026CA  C09A  F090         	movff	doOneSecondWork@i,??_doOneSecondWork
  6269  0026CE  0E01               	movlw	1
  6270  0026D0  6F91               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6271  0026D2  2B90               	incf	??_doOneSecondWork& (0+255),f,b
  6272  0026D4  D002               	goto	u8504
  6273  0026D6                     u8505:
  6274  0026D6  90D8               	bcf	status,0,c
  6275  0026D8  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6276  0026DA                     u8504:
  6277  0026DA  2F90               	decfsz	??_doOneSecondWork& (0+255),f,b
  6278  0026DC  D7FC               	goto	u8505
  6279  0026DE  5191               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6280  0026E0  13C4               	iorwf	_high_alarm& (0+255),f,b
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;main.c: 760: vscp_alarmstatus |= 2;
  6284  0026E2  824A               	bsf	_vscp_alarmstatus,1,c
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;main.c: 763: if (readEEPROM(0x43 + i) & (1<<4)) {
  6288  0026E4  0E43               	movlw	67
  6289  0026E6  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6290  0026E8  6E16               	movwf	?_readEEPROM,c
  6291  0026EA  6A17               	clrf	?_readEEPROM+1,c
  6292  0026EC  0E00               	movlw	0
  6293  0026EE  2217               	addwfc	?_readEEPROM+1,f,c
  6294  0026F0  EC0F  F02E         	call	_readEEPROM	;wreg free
  6295  0026F4  0100               	movlb	0	; () banked
  6296  0026F6  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6297  0026F8  A990               	btfss	??_doOneSecondWork& (0+255),4,b
  6298  0026FA  D04F               	goto	l10199
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;main.c: 765: vscp_omsg.vscp_class = 1;
  6302  0026FC  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6303  0026FE  0E01               	movlw	1
  6304  002700  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6305                           
  6306                           ;main.c: 766: vscp_omsg.vscp_type = 2;
  6307  002702  0E02               	movlw	2
  6308  002704  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;main.c: 767: vscp_omsg.priority = 0x00;
  6312  002706  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
  6313                           
  6314                           ;main.c: 768: vscp_omsg.flags = 0x80 + 3;
  6315  002708  0E83               	movlw	131
  6316  00270A  6FCB               	movwf	_vscp_omsg& (0+255),b
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;main.c: 770: if (readEEPROM(0x43 + i) & (1<<5)) {
  6320  00270C  0E43               	movlw	67
  6321  00270E  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6322  002710  6E16               	movwf	?_readEEPROM,c
  6323  002712  6A17               	clrf	?_readEEPROM+1,c
  6324  002714  0E00               	movlw	0
  6325  002716  2217               	addwfc	?_readEEPROM+1,f,c
  6326  002718  EC0F  F02E         	call	_readEEPROM	;wreg free
  6327  00271C  0100               	movlb	0	; () banked
  6328  00271E  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6329  002720  AB90               	btfss	??_doOneSecondWork& (0+255),5,b
  6330  002722  D016               	goto	l10189
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;main.c: 772: if (readEEPROM(0x43 + i) & (1<<6)) {
  6334  002724  0E43               	movlw	67
  6335  002726  259A               	addwf	doOneSecondWork@i& (0+255),w,b
  6336  002728  6E16               	movwf	?_readEEPROM,c
  6337  00272A  6A17               	clrf	?_readEEPROM+1,c
  6338  00272C  0E00               	movlw	0
  6339  00272E  2217               	addwfc	?_readEEPROM+1,f,c
  6340  002730  EC0F  F02E         	call	_readEEPROM	;wreg free
  6341  002734  0100               	movlb	0	; () banked
  6342  002736  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6343  002738  AD90               	btfss	??_doOneSecondWork& (0+255),6,b
  6344  00273A  D005               	goto	l10187
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;main.c: 773: vscp_omsg.vscp_class = 30;
  6348  00273C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6349  00273E  0E1E               	movlw	30
  6350  002740  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6351                           
  6352                           ;main.c: 774: vscp_omsg.vscp_type = 6;
  6353  002742  0E06               	movlw	6
  6354  002744  D004               	goto	L7
  6355  002746                     l10187:
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;main.c: 776: else {
  6359                           ;main.c: 777: vscp_omsg.vscp_class = 30;
  6360  002746  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6361  002748  0E1E               	movlw	30
  6362  00274A  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6363                           
  6364                           ;main.c: 778: vscp_omsg.vscp_type = 5;
  6365  00274C  0E05               	movlw	5
  6366  00274E                     L7:
  6367  00274E  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6368  002750                     l10189:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;main.c: 779: }
  6372                           ;main.c: 780: }
  6373                           ;main.c: 782: vscp_omsg.data[ 0 ] = i;
  6374  002750  C09A  F0D0         	movff	doOneSecondWork@i,_vscp_omsg+5
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 783: vscp_omsg.data[ 1 ] =
  6378                           ;main.c: 784: readEEPROM(0x73 + 2 * i);
  6379  002754  90D8               	bcf	status,0,c
  6380  002756  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6381  002758  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6382  00275A  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6383  00275C  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6384  00275E  0E73               	movlw	115
  6385  002760  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6386  002762  6E16               	movwf	?_readEEPROM,c
  6387  002764  0E00               	movlw	0
  6388  002766  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6389  002768  6E17               	movwf	?_readEEPROM+1,c
  6390  00276A  EC0F  F02E         	call	_readEEPROM	;wreg free
  6391  00276E  0100               	movlb	0	; () banked
  6392  002770  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;main.c: 785: vscp_omsg.data[ 2 ] =
  6396                           ;main.c: 786: readEEPROM(0x74 + 2 * i);
  6397  002772  90D8               	bcf	status,0,c
  6398  002774  359A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6399  002776  6F90               	movwf	??_doOneSecondWork& (0+255),b
  6400  002778  6B91               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6401  00277A  3791               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6402  00277C  0E74               	movlw	116
  6403  00277E  2590               	addwf	??_doOneSecondWork& (0+255),w,b
  6404  002780  6E16               	movwf	?_readEEPROM,c
  6405  002782  0E00               	movlw	0
  6406  002784  2191               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6407  002786  6E17               	movwf	?_readEEPROM+1,c
  6408  002788  EC0F  F02E         	call	_readEEPROM	;wreg free
  6409  00278C  0100               	movlb	0	; () banked
  6410  00278E  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;main.c: 789: if (!vscp_sendEvent()) {
  6414  002790  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  6415  002794  0900               	iorlw	0
  6416  002796  E101 D75C          	bz	l10165
  6417  00279A                     l10199:
  6418                           
  6419                           ; BSR set to: 0
  6420  00279A  2B9A               	incf	doOneSecondWork@i& (0+255),f,b
  6421  00279C  0E05               	movlw	5
  6422  00279E  659A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6423  0027A0  D43F               	goto	l10051
  6424                           
  6425                           ; BSR set to: 0
  6426  0027A2  0C05               	retlw	5
  6427  0027A4                     __end_of_doOneSecondWork:
  6428                           	opt stack 0
  6429                           tblptru	equ	0xFF8
  6430                           tblptrh	equ	0xFF7
  6431                           tblptrl	equ	0xFF6
  6432                           tablat	equ	0xFF5
  6433                           prodh	equ	0xFF4
  6434                           prodl	equ	0xFF3
  6435                           postinc0	equ	0xFEE
  6436                           wreg	equ	0xFE8
  6437                           postdec1	equ	0xFE5
  6438                           fsr1h	equ	0xFE2
  6439                           fsr1l	equ	0xFE1
  6440                           indf2	equ	0xFDF
  6441                           postinc2	equ	0xFDE
  6442                           postdec2	equ	0xFDD
  6443                           fsr2h	equ	0xFDA
  6444                           fsr2l	equ	0xFD9
  6445                           status	equ	0xFD8
  6446                           
  6447 ;; *************** function _vscp_error *****************
  6448 ;; Defined at:
  6449 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;		None
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;		None
  6454 ;; Return value:  Size  Location     Type
  6455 ;;		None               void
  6456 ;; Registers used:
  6457 ;;		None
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6463 ;;      Params:         0       0       0       0       0       0       0
  6464 ;;      Locals:         0       0       0       0       0       0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0
  6466 ;;      Totals:         0       0       0       0       0       0       0
  6467 ;;Total ram usage:        0 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    2
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_main
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text26
  6478  005CD0                     __ptext26:
  6479                           	opt stack 0
  6480  005CD0                     _vscp_error:
  6481                           	opt stack 28
  6482                           
  6483                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;incstack = 0
  6487                           ;incstack = 0
  6488  005CD0  6A4C               	clrf	_vscp_initledfunc,c
  6489  005CD2  0012               	return	
  6490  005CD4                     __end_of_vscp_error:
  6491                           	opt stack 0
  6492                           tblptru	equ	0xFF8
  6493                           tblptrh	equ	0xFF7
  6494                           tblptrl	equ	0xFF6
  6495                           tablat	equ	0xFF5
  6496                           prodh	equ	0xFF4
  6497                           prodl	equ	0xFF3
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           fsr1h	equ	0xFE2
  6502                           fsr1l	equ	0xFE1
  6503                           indf2	equ	0xFDF
  6504                           postinc2	equ	0xFDE
  6505                           postdec2	equ	0xFDD
  6506                           fsr2h	equ	0xFDA
  6507                           fsr2l	equ	0xFD9
  6508                           status	equ	0xFD8
  6509                           
  6510 ;; *************** function _handle_sync *****************
  6511 ;; Defined at:
  6512 ;;		line 1248 in file "../main.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  i               1   50[BANK0 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : F/1
  6523 ;;		On exit  : F/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6526 ;;      Params:         0       0       0       0       0       0       0
  6527 ;;      Locals:         0       1       0       0       0       0       0
  6528 ;;      Temps:          0       2       0       0       0       0       0
  6529 ;;      Totals:         0       3       0       0       0       0       0
  6530 ;;Total ram usage:        3 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    8
  6533 ;; This function calls:
  6534 ;;		_readEEPROM
  6535 ;;		_sendTempEvent
  6536 ;; This function is called by:
  6537 ;;		_main
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           	psect	text27
  6542  00505E                     __ptext27:
  6543                           	opt stack 0
  6544  00505E                     _handle_sync:
  6545                           	opt stack 22
  6546                           
  6547                           ; BSR set to: 1
  6548                           ;main.c: 1249: uint8_t i;
  6549                           ;main.c: 1251: for (i = 0; i < 6; i++) {
  6550                           
  6551                           ;incstack = 0
  6552                           ;incstack = 0
  6553  00505E  0100               	movlb	0	; () banked
  6554  005060  6B92               	clrf	handle_sync@i& (0+255),b
  6555  005062                     l10027:
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;main.c: 1253: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6559                           ;main.c: 1254: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6560                           ;main.c: 1255: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6561                           ;main.c: 1256: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6562  005062  0101               	movlb	1	; () banked
  6563  005064  296B               	incf	(_vscp_imsg+7)& (0+255),w,b
  6564  005066  E011               	bz	l10031
  6565                           
  6566                           ; BSR set to: 1
  6567  005068  90D8               	bcf	status,0,c
  6568  00506A  0100               	movlb	0	; () banked
  6569  00506C  3592               	rlcf	handle_sync@i& (0+255),w,b
  6570  00506E  6F90               	movwf	??_handle_sync& (0+255),b
  6571  005070  6B91               	clrf	(??_handle_sync+1)& (0+255),b
  6572  005072  3791               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6573  005074  0E73               	movlw	115
  6574  005076  2590               	addwf	??_handle_sync& (0+255),w,b
  6575  005078  6E16               	movwf	?_readEEPROM,c
  6576  00507A  0E00               	movlw	0
  6577  00507C  2191               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6578  00507E  6E17               	movwf	?_readEEPROM+1,c
  6579  005080  EC0F  F02E         	call	_readEEPROM	;wreg free
  6580  005084  0101               	movlb	1	; () banked
  6581  005086  196B               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6582  005088  E128               	bnz	l10041
  6583  00508A                     l10031:
  6584                           
  6585                           ; BSR set to: 1
  6586  00508A  296C               	incf	(_vscp_imsg+8)& (0+255),w,b
  6587  00508C  E011               	bz	l292
  6588                           
  6589                           ; BSR set to: 1
  6590  00508E  90D8               	bcf	status,0,c
  6591  005090  0100               	movlb	0	; () banked
  6592  005092  3592               	rlcf	handle_sync@i& (0+255),w,b
  6593  005094  6F90               	movwf	??_handle_sync& (0+255),b
  6594  005096  6B91               	clrf	(??_handle_sync+1)& (0+255),b
  6595  005098  3791               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6596  00509A  0E74               	movlw	116
  6597  00509C  2590               	addwf	??_handle_sync& (0+255),w,b
  6598  00509E  6E16               	movwf	?_readEEPROM,c
  6599  0050A0  0E00               	movlw	0
  6600  0050A2  2191               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6601  0050A4  6E17               	movwf	?_readEEPROM+1,c
  6602  0050A6  EC0F  F02E         	call	_readEEPROM	;wreg free
  6603  0050AA  0101               	movlb	1	; () banked
  6604  0050AC  196C               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6605  0050AE  E115               	bnz	l10041
  6606  0050B0                     l292:
  6607                           
  6608                           ; BSR set to: 1
  6609                           ;main.c: 1259: timeout_clock = 0;
  6610  0050B0  6B16               	clrf	_timeout_clock& (0+255),b	;volatile
  6611  0050B2  6B17               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6612  0050B4  6B18               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6613  0050B6  6B19               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6614                           
  6615                           ;main.c: 1260: while (!sendTempEvent(i)) {
  6616  0050B8  D00A               	goto	l10039
  6617  0050BA                     l10035:
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;main.c: 1261: if (timeout_clock > 1000) break;
  6621  0050BA  0EE9               	movlw	233
  6622  0050BC  0101               	movlb	1	; () banked
  6623  0050BE  5D16               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6624  0050C0  0E03               	movlw	3
  6625  0050C2  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6626  0050C4  0E00               	movlw	0
  6627  0050C6  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6628  0050C8  0E00               	movlw	0
  6629  0050CA  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6630  0050CC  E206               	bc	l10041
  6631  0050CE                     l10039:
  6632                           
  6633                           ; BSR set to: 1
  6634  0050CE  0100               	movlb	0	; () banked
  6635  0050D0  5192               	movf	handle_sync@i& (0+255),w,b
  6636  0050D2  ECB6  F028         	call	_sendTempEvent
  6637  0050D6  0900               	iorlw	0
  6638  0050D8  E0F0               	bz	l10035
  6639  0050DA                     l10041:
  6640  0050DA  0100               	movlb	0	; () banked
  6641  0050DC  2B92               	incf	handle_sync@i& (0+255),f,b
  6642                           
  6643                           ; BSR set to: 0
  6644  0050DE  0E05               	movlw	5
  6645  0050E0  6592               	cpfsgt	handle_sync@i& (0+255),b
  6646  0050E2  D7BF               	goto	l10027
  6647                           
  6648                           ; BSR set to: 0
  6649  0050E4  0C05               	retlw	5
  6650  0050E6                     __end_of_handle_sync:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           postdec1	equ	0xFE5
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           indf2	equ	0xFDF
  6664                           postinc2	equ	0xFDE
  6665                           postdec2	equ	0xFDD
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function _sendTempEvent *****************
  6671 ;; Defined at:
  6672 ;;		line 807 in file "../main.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  i               1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  i               1   47[BANK0 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      unsigned char 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : F/0
  6683 ;;		On exit  : F/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6686 ;;      Params:         0       0       0       0       0       0       0
  6687 ;;      Locals:         0       1       0       0       0       0       0
  6688 ;;      Temps:          1       0       0       0       0       0       0
  6689 ;;      Totals:         1       1       0       0       0       0       0
  6690 ;;Total ram usage:        2 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    7
  6693 ;; This function calls:
  6694 ;;		_readEEPROM
  6695 ;;		_vscp_sendEvent
  6696 ;;		_setEventData
  6697 ;; This function is called by:
  6698 ;;		_doOneSecondWork
  6699 ;;		_handle_sync
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text28
  6704  00516C                     __ptext28:
  6705                           	opt stack 0
  6706  00516C                     _sendTempEvent:
  6707                           	opt stack 22
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;incstack = 0
  6711                           ;incstack = 0
  6712                           ;sendTempEvent@i stored from wreg
  6713  00516C  CFE8 F08F          	movff	wreg,sendTempEvent@i
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;main.c: 808: vscp_omsg.priority = 0x03;
  6717  005170  0E03               	movlw	3
  6718  005172  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  6719                           
  6720                           ;main.c: 809: vscp_omsg.flags = 0x80 + 4;
  6721  005174  0E84               	movlw	132
  6722  005176  6FCB               	movwf	_vscp_omsg& (0+255),b
  6723                           
  6724                           ;main.c: 810: vscp_omsg.vscp_class = 10;
  6725  005178  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  6726  00517A  0E0A               	movlw	10
  6727  00517C  6FCD               	movwf	(_vscp_omsg+2)& (0+255),b
  6728                           
  6729                           ;main.c: 811: vscp_omsg.vscp_type = 6;
  6730  00517E  0E06               	movlw	6
  6731  005180  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;main.c: 814: vscp_omsg.data[ 0 ] = 0x80 |
  6735                           ;main.c: 815: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6736                           ;main.c: 816: i;
  6737  005182  0E43               	movlw	67
  6738  005184  258F               	addwf	sendTempEvent@i& (0+255),w,b
  6739  005186  6E16               	movwf	?_readEEPROM,c
  6740  005188  6A17               	clrf	?_readEEPROM+1,c
  6741  00518A  0E00               	movlw	0
  6742  00518C  2217               	addwfc	?_readEEPROM+1,f,c
  6743  00518E  EC0F  F02E         	call	_readEEPROM	;wreg free
  6744  005192  6E45               	movwf	??_sendTempEvent& (0+255),c
  6745  005194  0E03               	movlw	3
  6746  005196  1645               	andwf	??_sendTempEvent,f,c
  6747  005198  90D8               	bcf	status,0,c
  6748  00519A  3645               	rlcf	??_sendTempEvent,f,c
  6749  00519C  90D8               	bcf	status,0,c
  6750  00519E  3645               	rlcf	??_sendTempEvent,f,c
  6751  0051A0  90D8               	bcf	status,0,c
  6752  0051A2  3445               	rlcf	??_sendTempEvent,w,c
  6753  0051A4  0100               	movlb	0	; () banked
  6754  0051A6  118F               	iorwf	sendTempEvent@i& (0+255),w,b
  6755  0051A8  0980               	iorlw	128
  6756  0051AA  6FD0               	movwf	(_vscp_omsg+5)& (0+255),b
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;main.c: 818: vscp_omsg.data[ 1 ] = 0x82;
  6760  0051AC  0E82               	movlw	130
  6761  0051AE  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;main.c: 820: setEventData( current_temp[i],
  6765                           ;main.c: 821: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6766  0051B0  518F               	movf	sendTempEvent@i& (0+255),w,b
  6767  0051B2  0D02               	mullw	2
  6768  0051B4  0E00               	movlw	low _current_temp
  6769  0051B6  24F3               	addwf	prodl,w,c
  6770  0051B8  6ED9               	movwf	fsr2l,c
  6771  0051BA  0E01               	movlw	high _current_temp
  6772  0051BC  20F4               	addwfc	prodh,w,c
  6773  0051BE  6EDA               	movwf	fsr2h,c
  6774  0051C0  CFDE F086          	movff	postinc2,?_setEventData
  6775  0051C4  CFDD F087          	movff	postdec2,?_setEventData+1
  6776  0051C8  0E43               	movlw	67
  6777  0051CA  258F               	addwf	sendTempEvent@i& (0+255),w,b
  6778  0051CC  6E16               	movwf	?_readEEPROM,c
  6779  0051CE  6A17               	clrf	?_readEEPROM+1,c
  6780  0051D0  0E00               	movlw	0
  6781  0051D2  2217               	addwfc	?_readEEPROM+1,f,c
  6782  0051D4  EC0F  F02E         	call	_readEEPROM	;wreg free
  6783  0051D8  0B03               	andlw	3
  6784  0051DA  0100               	movlb	0	; () banked
  6785  0051DC  6F88               	movwf	(?_setEventData+2)& (0+255),b
  6786  0051DE  EC99  F026         	call	_setEventData	;wreg free
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;main.c: 824: if (!vscp_sendEvent()) {
  6790  0051E2  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  6791  0051E6  0900               	iorlw	0
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;main.c: 825: return 0;
  6795  0051E8  0E00               	movlw	0
  6796  0051EA  A4D8               	btfss	status,2,c
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;main.c: 826: }
  6800                           ;main.c: 828: return 1;
  6801  0051EC  0E01               	movlw	1
  6802                           
  6803                           ; BSR set to: 0
  6804  0051EE  0012               	return	
  6805  0051F0                     __end_of_sendTempEvent:
  6806                           	opt stack 0
  6807                           tblptru	equ	0xFF8
  6808                           tblptrh	equ	0xFF7
  6809                           tblptrl	equ	0xFF6
  6810                           tablat	equ	0xFF5
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           postinc0	equ	0xFEE
  6814                           wreg	equ	0xFE8
  6815                           postdec1	equ	0xFE5
  6816                           fsr1h	equ	0xFE2
  6817                           fsr1l	equ	0xFE1
  6818                           indf2	equ	0xFDF
  6819                           postinc2	equ	0xFDE
  6820                           postdec2	equ	0xFDD
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _setEventData *****************
  6826 ;; Defined at:
  6827 ;;		line 836 in file "../main.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  v               2   38[BANK0 ] int 
  6830 ;;  unit            1   40[BANK0 ] unsigned char 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  newval          4   41[BANK0 ] unsigned char 
  6833 ;;  ival            2   45[BANK0 ] int 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;		None               void
  6836 ;; Registers used:
  6837 ;;		wreg, status,2, status,0, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : F/0
  6840 ;;		On exit  : F/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6843 ;;      Params:         0       3       0       0       0       0       0
  6844 ;;      Locals:         0       6       0       0       0       0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0
  6846 ;;      Totals:         0       9       0       0       0       0       0
  6847 ;;Total ram usage:        9 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    5
  6850 ;; This function calls:
  6851 ;;		_Celsius2Kelvin
  6852 ;;		_Celsius2Fahrenheit
  6853 ;;		___awtofl
  6854 ;;		___fltol
  6855 ;; This function is called by:
  6856 ;;		_sendTempEvent
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text29
  6861  004D32                     __ptext29:
  6862                           	opt stack 0
  6863  004D32                     _setEventData:
  6864                           	opt stack 23
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 837: double newval;
  6868                           ;main.c: 838: int ival;
  6869                           ;main.c: 840: if (0 == unit) {
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;incstack = 0
  6873                           ;incstack = 0
  6874  004D32  6788               	tstfsz	setEventData@unit& (0+255),b
  6875  004D34  D019               	goto	l10391
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;main.c: 842: newval = Celsius2Kelvin(v);
  6879  004D36  C086  F018         	movff	setEventData@v,?___awtofl
  6880  004D3A  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  6881  004D3E  EC37  F02C         	call	___awtofl	;wreg free
  6882  004D42  C01B  F030         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6883  004D46  C01A  F02F         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6884  004D4A  C019  F02E         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6885  004D4E  C018  F02D         	movff	?___awtofl,?_Celsius2Kelvin
  6886  004D52  EC6F  F02C         	call	_Celsius2Kelvin	;wreg free
  6887  004D56  C030  F08C         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6888  004D5A  C02F  F08B         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6889  004D5E  C02E  F08A         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6890  004D62  C02D  F089         	movff	?_Celsius2Kelvin,setEventData@newval
  6891                           
  6892                           ;main.c: 843: } else if (2 == unit) {
  6893  004D66  D02A               	goto	l252
  6894  004D68                     l10391:
  6895                           
  6896                           ; BSR set to: 0
  6897  004D68  5188               	movf	setEventData@unit& (0+255),w,b
  6898  004D6A  0A02               	xorlw	2
  6899  004D6C  E119               	bnz	l10395
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;main.c: 845: newval = Celsius2Fahrenheit(v);
  6903  004D6E  C086  F018         	movff	setEventData@v,?___awtofl
  6904  004D72  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  6905  004D76  EC37  F02C         	call	___awtofl	;wreg free
  6906  004D7A  C01B  F081         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6907  004D7E  C01A  F080         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6908  004D82  C019  F07F         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6909  004D86  C018  F07E         	movff	?___awtofl,?_Celsius2Fahrenheit
  6910  004D8A  EC3A  F029         	call	_Celsius2Fahrenheit	;wreg free
  6911  004D8E  C081  F08C         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6912  004D92  C080  F08B         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6913  004D96  C07F  F08A         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6914  004D9A  C07E  F089         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6915                           
  6916                           ;main.c: 846: } else {
  6917  004D9E  D00E               	goto	l252
  6918  004DA0                     l10395:
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;main.c: 848: newval = v;
  6922  004DA0  C086  F018         	movff	setEventData@v,?___awtofl
  6923  004DA4  C087  F019         	movff	setEventData@v+1,?___awtofl+1
  6924  004DA8  EC37  F02C         	call	___awtofl	;wreg free
  6925  004DAC  C01B  F08C         	movff	?___awtofl+3,setEventData@newval+3
  6926  004DB0  C01A  F08B         	movff	?___awtofl+2,setEventData@newval+2
  6927  004DB4  C019  F08A         	movff	?___awtofl+1,setEventData@newval+1
  6928  004DB8  C018  F089         	movff	?___awtofl,setEventData@newval
  6929  004DBC                     l252:
  6930                           
  6931                           ;main.c: 849: }
  6932                           ;main.c: 851: ival = (int) newval;
  6933  004DBC  C089  F07E         	movff	setEventData@newval,?___fltol
  6934  004DC0  C08A  F07F         	movff	setEventData@newval+1,?___fltol+1
  6935  004DC4  C08B  F080         	movff	setEventData@newval+2,?___fltol+2
  6936  004DC8  C08C  F081         	movff	setEventData@newval+3,?___fltol+3
  6937  004DCC  EC43  F027         	call	___fltol	;wreg free
  6938  004DD0  C07E  F08D         	movff	?___fltol,setEventData@ival
  6939  004DD4  C07F  F08E         	movff	?___fltol+1,setEventData@ival+1
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;main.c: 853: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  6943  004DD8  518E               	movf	(setEventData@ival+1)& (0+255),w,b
  6944  004DDA  6FD2               	movwf	(_vscp_omsg+7)& (0+255),b
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;main.c: 854: vscp_omsg.data[ 3 ] = (ival & 0xff);
  6948  004DDC  C08D  F0D3         	movff	setEventData@ival,_vscp_omsg+8
  6949                           
  6950                           ; BSR set to: 0
  6951  004DE0  0012               	return	
  6952  004DE2                     __end_of_setEventData:
  6953                           	opt stack 0
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           postinc0	equ	0xFEE
  6961                           wreg	equ	0xFE8
  6962                           postdec1	equ	0xFE5
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           postdec2	equ	0xFDD
  6968                           fsr2h	equ	0xFDA
  6969                           fsr2l	equ	0xFD9
  6970                           status	equ	0xFD8
  6971                           
  6972 ;; *************** function _Celsius2Fahrenheit *****************
  6973 ;; Defined at:
  6974 ;;		line 42 in file "../ntc.c"
  6975 ;; Parameters:    Size  Location     Type
  6976 ;;  tc              4   30[BANK0 ] int 
  6977 ;; Auto vars:     Size  Location     Type
  6978 ;;		None
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  4   30[BANK0 ] int 
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, status,0, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6988 ;;      Params:         0       4       0       0       0       0       0
  6989 ;;      Locals:         0       0       0       0       0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0
  6991 ;;      Totals:         0       4       0       0       0       0       0
  6992 ;;Total ram usage:        4 bytes
  6993 ;; Hardware stack levels used:    1
  6994 ;; Hardware stack levels required when called:    4
  6995 ;; This function calls:
  6996 ;;		___fladd
  6997 ;;		___fldiv
  6998 ;;		___flmul
  6999 ;; This function is called by:
  7000 ;;		_setEventData
  7001 ;; This function uses a non-reentrant model
  7002 ;;
  7003                           
  7004                           	psect	text30
  7005  005274                     __ptext30:
  7006                           	opt stack 0
  7007  005274                     _Celsius2Fahrenheit:
  7008                           	opt stack 23
  7009                           
  7010                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;incstack = 0
  7014                           ;incstack = 0
  7015  005274  6A22               	clrf	?___fladd+4,c
  7016  005276  6A23               	clrf	?___fladd+5,c
  7017  005278  0E7A               	movlw	122
  7018  00527A  6E24               	movwf	?___fladd+6,c
  7019  00527C  0E46               	movlw	70
  7020  00527E  6E25               	movwf	?___fladd+7,c
  7021  005280  0100               	movlb	0	; () banked
  7022  005282  6B6C               	clrf	(?___flmul+4)& (0+255),b
  7023  005284  6B6D               	clrf	(?___flmul+5)& (0+255),b
  7024  005286  0E10               	movlw	16
  7025  005288  6F6E               	movwf	(?___flmul+6)& (0+255),b
  7026  00528A  0E41               	movlw	65
  7027  00528C  6F6F               	movwf	(?___flmul+7)& (0+255),b
  7028  00528E  C07E  F068         	movff	Celsius2Fahrenheit@tc,?___flmul
  7029  005292  C07F  F069         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7030  005296  C080  F06A         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7031  00529A  C081  F06B         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7032  00529E  ECFE  F023         	call	___flmul	;wreg free
  7033  0052A2  C06B  F021         	movff	?___flmul+3,?___fladd+3
  7034  0052A6  C06A  F020         	movff	?___flmul+2,?___fladd+2
  7035  0052AA  C069  F01F         	movff	?___flmul+1,?___fladd+1
  7036  0052AE  C068  F01E         	movff	?___flmul,?___fladd
  7037  0052B2  EC81  F020         	call	___fladd	;wreg free
  7038  0052B6  C021  F063         	movff	?___fladd+3,?___fldiv+3
  7039  0052BA  C020  F062         	movff	?___fladd+2,?___fldiv+2
  7040  0052BE  C01F  F061         	movff	?___fladd+1,?___fldiv+1
  7041  0052C2  C01E  F060         	movff	?___fladd,?___fldiv
  7042  0052C6  0100               	movlb	0	; () banked
  7043  0052C8  6B64               	clrf	(?___fldiv+4)& (0+255),b
  7044  0052CA  6B65               	clrf	(?___fldiv+5)& (0+255),b
  7045  0052CC  0EA0               	movlw	160
  7046  0052CE  6F66               	movwf	(?___fldiv+6)& (0+255),b
  7047  0052D0  0E40               	movlw	64
  7048  0052D2  6F67               	movwf	(?___fldiv+7)& (0+255),b
  7049  0052D4  EC41  F026         	call	___fldiv	;wreg free
  7050  0052D8  C063  F081         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7051  0052DC  C062  F080         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7052  0052E0  C061  F07F         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7053  0052E4  C060  F07E         	movff	?___fldiv,?_Celsius2Fahrenheit
  7054  0052E8  0012               	return	
  7055  0052EA                     __end_of_Celsius2Fahrenheit:
  7056                           	opt stack 0
  7057                           tblptru	equ	0xFF8
  7058                           tblptrh	equ	0xFF7
  7059                           tblptrl	equ	0xFF6
  7060                           tablat	equ	0xFF5
  7061                           prodh	equ	0xFF4
  7062                           prodl	equ	0xFF3
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           postdec1	equ	0xFE5
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075 ;; *************** function ___fladd *****************
  7076 ;; Defined at:
  7077 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7078 ;; Parameters:    Size  Location     Type
  7079 ;;  f1              4   29[COMRAM] int 
  7080 ;;  f2              4   33[COMRAM] int 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;  exp1            1   43[COMRAM] unsigned char 
  7083 ;;  exp2            1   42[COMRAM] unsigned char 
  7084 ;;  sign            1   41[COMRAM] unsigned char 
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  4   29[COMRAM] unsigned char 
  7087 ;; Registers used:
  7088 ;;		wreg, status,2, status,0, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7094 ;;      Params:         8       0       0       0       0       0       0
  7095 ;;      Locals:         6       0       0       0       0       0       0
  7096 ;;      Temps:          1       0       0       0       0       0       0
  7097 ;;      Totals:        15       0       0       0       0       0       0
  7098 ;;Total ram usage:       15 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    3
  7101 ;; This function calls:
  7102 ;;		___flpack
  7103 ;; This function is called by:
  7104 ;;		_doWork
  7105 ;;		_Celsius2Fahrenheit
  7106 ;;		_Celsius2Kelvin
  7107 ;;		___asfladd
  7108 ;;		_floor
  7109 ;;		___flsub
  7110 ;;		_log
  7111 ;;		_eval_poly
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           	psect	text31
  7116  004102                     __ptext31:
  7117                           	opt stack 0
  7118  004102                     ___fladd:
  7119                           	opt stack 25
  7120                           
  7121                           ;incstack = 0
  7122                           ;incstack = 0
  7123  004102  3420               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7124  004104  3421               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7125  004106  6E2C               	movwf	___fladd@exp1,c
  7126  004108  3424               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7127  00410A  3425               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7128  00410C  6E2B               	movwf	___fladd@exp2,c
  7129  00410E  502C               	movf	___fladd@exp1,w,c
  7130  004110  E009               	bz	l1572
  7131  004112  502B               	movf	___fladd@exp2,w,c
  7132  004114  602C               	cpfslt	___fladd@exp1,c
  7133  004116  D00F               	goto	l11371
  7134  004118  502C               	movf	___fladd@exp1,w,c
  7135  00411A  5C2B               	subwf	___fladd@exp2,w,c
  7136  00411C  6E26               	movwf	??___fladd& (0+255),c
  7137  00411E  0E21               	movlw	33
  7138  004120  5C26               	subwf	??___fladd,w,c
  7139  004122  E309               	bnc	l11371
  7140  004124                     l1572:
  7141  004124  C022  F01E         	movff	___fladd@f2,?___fladd
  7142  004128  C023  F01F         	movff	___fladd@f2+1,?___fladd+1
  7143  00412C  C024  F020         	movff	___fladd@f2+2,?___fladd+2
  7144  004130  C025  F021         	movff	___fladd@f2+3,?___fladd+3
  7145  004134  D095               	goto	l1573
  7146  004136                     l11371:
  7147  004136  502B               	movf	___fladd@exp2,w,c
  7148  004138  E009               	bz	l1576
  7149  00413A  502C               	movf	___fladd@exp1,w,c
  7150  00413C  602B               	cpfslt	___fladd@exp2,c
  7151  00413E  D00F               	goto	l11377
  7152  004140  502B               	movf	___fladd@exp2,w,c
  7153  004142  5C2C               	subwf	___fladd@exp1,w,c
  7154  004144  6E26               	movwf	??___fladd& (0+255),c
  7155  004146  0E21               	movlw	33
  7156  004148  5C26               	subwf	??___fladd,w,c
  7157  00414A  E309               	bnc	l11377
  7158  00414C                     l1576:
  7159  00414C  C01E  F01E         	movff	___fladd@f1,?___fladd
  7160  004150  C01F  F01F         	movff	___fladd@f1+1,?___fladd+1
  7161  004154  C020  F020         	movff	___fladd@f1+2,?___fladd+2
  7162  004158  C021  F021         	movff	___fladd@f1+3,?___fladd+3
  7163  00415C  D081               	goto	l1573
  7164  00415E                     l11377:
  7165  00415E  0E06               	movlw	6
  7166  004160  6E2A               	movwf	___fladd@sign,c
  7167  004162  BE21               	btfsc	___fladd@f1+3,7,c
  7168  004164  8E2A               	bsf	___fladd@sign,7,c
  7169  004166  BE25               	btfsc	___fladd@f2+3,7,c
  7170  004168  8C2A               	bsf	___fladd@sign,6,c
  7171  00416A  8E20               	bsf	___fladd@f1+2,7,c
  7172  00416C  6A21               	clrf	___fladd@f1+3,c
  7173  00416E  8E24               	bsf	___fladd@f2+2,7,c
  7174  004170  6A25               	clrf	___fladd@f2+3,c
  7175  004172  502B               	movf	___fladd@exp2,w,c
  7176  004174  602C               	cpfslt	___fladd@exp1,c
  7177  004176  D018               	goto	l11403
  7178  004178                     l11393:
  7179  004178  90D8               	bcf	status,0,c
  7180  00417A  3622               	rlcf	___fladd@f2,f,c
  7181  00417C  3623               	rlcf	___fladd@f2+1,f,c
  7182  00417E  3624               	rlcf	___fladd@f2+2,f,c
  7183  004180  3625               	rlcf	___fladd@f2+3,f,c
  7184  004182  062B               	decf	___fladd@exp2,f,c
  7185  004184  502B               	movf	___fladd@exp2,w,c
  7186  004186  182C               	xorwf	___fladd@exp1,w,c
  7187  004188  E00B               	bz	l11401
  7188  00418A  062A               	decf	___fladd@sign,f,c
  7189  00418C  502A               	movf	___fladd@sign& (0+255),w,c
  7190  00418E  0B07               	andlw	7
  7191  004190  E007               	bz	l11401
  7192  004192  D7F2               	goto	l11393
  7193  004194                     l11399:
  7194  004194  90D8               	bcf	status,0,c
  7195  004196  3221               	rrcf	___fladd@f1+3,f,c
  7196  004198  3220               	rrcf	___fladd@f1+2,f,c
  7197  00419A  321F               	rrcf	___fladd@f1+1,f,c
  7198  00419C  321E               	rrcf	___fladd@f1,f,c
  7199  00419E  2A2C               	incf	___fladd@exp1,f,c
  7200  0041A0                     l11401:
  7201  0041A0  502B               	movf	___fladd@exp2,w,c
  7202  0041A2  622C               	cpfseq	___fladd@exp1,c
  7203  0041A4  D7F7               	goto	l11399
  7204  0041A6  D01A               	goto	l1587
  7205  0041A8                     l11403:
  7206  0041A8  502C               	movf	___fladd@exp1,w,c
  7207  0041AA  602B               	cpfslt	___fladd@exp2,c
  7208  0041AC  D017               	goto	l1587
  7209  0041AE                     l11405:
  7210  0041AE  90D8               	bcf	status,0,c
  7211  0041B0  361E               	rlcf	___fladd@f1,f,c
  7212  0041B2  361F               	rlcf	___fladd@f1+1,f,c
  7213  0041B4  3620               	rlcf	___fladd@f1+2,f,c
  7214  0041B6  3621               	rlcf	___fladd@f1+3,f,c
  7215  0041B8  062C               	decf	___fladd@exp1,f,c
  7216  0041BA  502B               	movf	___fladd@exp2,w,c
  7217  0041BC  182C               	xorwf	___fladd@exp1,w,c
  7218  0041BE  E00B               	bz	l11413
  7219  0041C0  062A               	decf	___fladd@sign,f,c
  7220  0041C2  502A               	movf	___fladd@sign& (0+255),w,c
  7221  0041C4  0B07               	andlw	7
  7222  0041C6  E007               	bz	l11413
  7223  0041C8  D7F2               	goto	l11405
  7224  0041CA                     l11411:
  7225  0041CA  90D8               	bcf	status,0,c
  7226  0041CC  3225               	rrcf	___fladd@f2+3,f,c
  7227  0041CE  3224               	rrcf	___fladd@f2+2,f,c
  7228  0041D0  3223               	rrcf	___fladd@f2+1,f,c
  7229  0041D2  3222               	rrcf	___fladd@f2,f,c
  7230  0041D4  2A2B               	incf	___fladd@exp2,f,c
  7231  0041D6                     l11413:
  7232  0041D6  502B               	movf	___fladd@exp2,w,c
  7233  0041D8  622C               	cpfseq	___fladd@exp1,c
  7234  0041DA  D7F7               	goto	l11411
  7235  0041DC                     l1587:
  7236  0041DC  AE2A               	btfss	___fladd@sign,7,c
  7237  0041DE  D009               	goto	l11417
  7238  0041E0  1E1E               	comf	___fladd@f1,f,c
  7239  0041E2  1E1F               	comf	___fladd@f1+1,f,c
  7240  0041E4  1E20               	comf	___fladd@f1+2,f,c
  7241  0041E6  1E21               	comf	___fladd@f1+3,f,c
  7242  0041E8  2A1E               	incf	___fladd@f1,f,c
  7243  0041EA  0E00               	movlw	0
  7244  0041EC  221F               	addwfc	___fladd@f1+1,f,c
  7245  0041EE  2220               	addwfc	___fladd@f1+2,f,c
  7246  0041F0  2221               	addwfc	___fladd@f1+3,f,c
  7247  0041F2                     l11417:
  7248  0041F2  AC2A               	btfss	___fladd@sign,6,c
  7249  0041F4  D009               	goto	l11421
  7250  0041F6  1E22               	comf	___fladd@f2,f,c
  7251  0041F8  1E23               	comf	___fladd@f2+1,f,c
  7252  0041FA  1E24               	comf	___fladd@f2+2,f,c
  7253  0041FC  1E25               	comf	___fladd@f2+3,f,c
  7254  0041FE  2A22               	incf	___fladd@f2,f,c
  7255  004200  0E00               	movlw	0
  7256  004202  2223               	addwfc	___fladd@f2+1,f,c
  7257  004204  2224               	addwfc	___fladd@f2+2,f,c
  7258  004206  2225               	addwfc	___fladd@f2+3,f,c
  7259  004208                     l11421:
  7260  004208  6A2A               	clrf	___fladd@sign,c
  7261  00420A  501E               	movf	___fladd@f1,w,c
  7262  00420C  2622               	addwf	___fladd@f2,f,c
  7263  00420E  501F               	movf	___fladd@f1+1,w,c
  7264  004210  2223               	addwfc	___fladd@f2+1,f,c
  7265  004212  5020               	movf	___fladd@f1+2,w,c
  7266  004214  2224               	addwfc	___fladd@f2+2,f,c
  7267  004216  5021               	movf	___fladd@f1+3,w,c
  7268  004218  2225               	addwfc	___fladd@f2+3,f,c
  7269  00421A  AE25               	btfss	___fladd@f2+3,7,c
  7270  00421C  D00B               	goto	l11429
  7271  00421E  1E22               	comf	___fladd@f2,f,c
  7272  004220  1E23               	comf	___fladd@f2+1,f,c
  7273  004222  1E24               	comf	___fladd@f2+2,f,c
  7274  004224  1E25               	comf	___fladd@f2+3,f,c
  7275  004226  2A22               	incf	___fladd@f2,f,c
  7276  004228  0E00               	movlw	0
  7277  00422A  2223               	addwfc	___fladd@f2+1,f,c
  7278  00422C  2224               	addwfc	___fladd@f2+2,f,c
  7279  00422E  2225               	addwfc	___fladd@f2+3,f,c
  7280  004230  0E01               	movlw	1
  7281  004232  6E2A               	movwf	___fladd@sign,c
  7282  004234                     l11429:
  7283  004234  C022  F00E         	movff	___fladd@f2,?___flpack
  7284  004238  C023  F00F         	movff	___fladd@f2+1,?___flpack+1
  7285  00423C  C024  F010         	movff	___fladd@f2+2,?___flpack+2
  7286  004240  C025  F011         	movff	___fladd@f2+3,?___flpack+3
  7287  004244  C02C  F012         	movff	___fladd@exp1,?___flpack+4
  7288  004248  C02A  F013         	movff	___fladd@sign,?___flpack+5
  7289  00424C  EC2A  F025         	call	___flpack	;wreg free
  7290  004250  C011  F021         	movff	?___flpack+3,?___fladd+3
  7291  004254  C010  F020         	movff	?___flpack+2,?___fladd+2
  7292  004258  C00F  F01F         	movff	?___flpack+1,?___fladd+1
  7293  00425C  C00E  F01E         	movff	?___flpack,?___fladd
  7294  004260                     l1573:
  7295  004260  0012               	return	
  7296  004262                     __end_of___fladd:
  7297                           	opt stack 0
  7298                           tblptru	equ	0xFF8
  7299                           tblptrh	equ	0xFF7
  7300                           tblptrl	equ	0xFF6
  7301                           tablat	equ	0xFF5
  7302                           prodh	equ	0xFF4
  7303                           prodl	equ	0xFF3
  7304                           postinc0	equ	0xFEE
  7305                           wreg	equ	0xFE8
  7306                           postdec1	equ	0xFE5
  7307                           fsr1h	equ	0xFE2
  7308                           fsr1l	equ	0xFE1
  7309                           indf2	equ	0xFDF
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316 ;; *************** function _Celsius2Kelvin *****************
  7317 ;; Defined at:
  7318 ;;		line 61 in file "../ntc.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  tc              4   44[COMRAM] unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;		None
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  4   44[COMRAM] unsigned char 
  7325 ;; Registers used:
  7326 ;;		wreg, status,2, status,0, cstack
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7332 ;;      Params:         4       0       0       0       0       0       0
  7333 ;;      Locals:         0       0       0       0       0       0       0
  7334 ;;      Temps:          0       0       0       0       0       0       0
  7335 ;;      Totals:         4       0       0       0       0       0       0
  7336 ;;Total ram usage:        4 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    4
  7339 ;; This function calls:
  7340 ;;		___fladd
  7341 ;; This function is called by:
  7342 ;;		_setEventData
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text32
  7347  0058DE                     __ptext32:
  7348                           	opt stack 0
  7349  0058DE                     _Celsius2Kelvin:
  7350                           	opt stack 23
  7351                           
  7352                           ;ntc.c: 62: return (27316.0 + tc);
  7353                           
  7354                           ;incstack = 0
  7355                           ;incstack = 0
  7356  0058DE  C02D  F01E         	movff	Celsius2Kelvin@tc,?___fladd
  7357  0058E2  C02E  F01F         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7358  0058E6  C02F  F020         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7359  0058EA  C030  F021         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7360  0058EE  6A22               	clrf	?___fladd+4,c
  7361  0058F0  0E68               	movlw	104
  7362  0058F2  6E23               	movwf	?___fladd+5,c
  7363  0058F4  0ED5               	movlw	213
  7364  0058F6  6E24               	movwf	?___fladd+6,c
  7365  0058F8  0E46               	movlw	70
  7366  0058FA  6E25               	movwf	?___fladd+7,c
  7367  0058FC  EC81  F020         	call	___fladd	;wreg free
  7368  005900  C021  F030         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7369  005904  C020  F02F         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7370  005908  C01F  F02E         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7371  00590C  C01E  F02D         	movff	?___fladd,?_Celsius2Kelvin
  7372  005910  0012               	return	
  7373  005912                     __end_of_Celsius2Kelvin:
  7374                           	opt stack 0
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           prodh	equ	0xFF4
  7380                           prodl	equ	0xFF3
  7381                           postinc0	equ	0xFEE
  7382                           wreg	equ	0xFE8
  7383                           postdec1	equ	0xFE5
  7384                           fsr1h	equ	0xFE2
  7385                           fsr1l	equ	0xFE1
  7386                           indf2	equ	0xFDF
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _vscp_handleProtocolEvent *****************
  7394 ;; Defined at:
  7395 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  bytes           1   44[BANK0 ] unsigned char 
  7400 ;;  page_save       2   40[BANK0 ] unsigned short 
  7401 ;;  i               1   50[BANK0 ] unsigned char 
  7402 ;;  bytes           2   54[BANK0 ] unsigned short 
  7403 ;;  page_save       2   38[BANK0 ] unsigned short 
  7404 ;;  byte            1   53[BANK0 ] unsigned char 
  7405 ;;  cb              1   49[BANK0 ] unsigned char 
  7406 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7407 ;;  j               1   58[BANK0 ] unsigned char 
  7408 ;;  i               1   56[BANK0 ] unsigned char 
  7409 ;;  k               1   51[BANK0 ] unsigned char 
  7410 ;;  i               1   52[BANK0 ] unsigned char 
  7411 ;;  len             1   47[BANK0 ] unsigned char 
  7412 ;;  pos             1   46[BANK0 ] unsigned char 
  7413 ;;  i               1   57[BANK0 ] unsigned char 
  7414 ;;  len             1   45[BANK0 ] unsigned char 
  7415 ;;  pos             1   43[BANK0 ] unsigned char 
  7416 ;;  offset          1   42[BANK0 ] unsigned char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;		None               void
  7419 ;; Registers used:
  7420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : F/1
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7426 ;;      Params:         0       0       0       0       0       0       0
  7427 ;;      Locals:         0      21       0       0       0       0       0
  7428 ;;      Temps:          0       7       0       0       0       0       0
  7429 ;;      Totals:         0      28       0       0       0       0       0
  7430 ;;Total ram usage:       28 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:    8
  7433 ;; This function calls:
  7434 ;;		_vscp_init
  7435 ;;		_vscp_sendEvent
  7436 ;;		_vscp_readAppReg
  7437 ;;		_vscp_writeAppReg
  7438 ;;		_vscp_getGUID
  7439 ;;		_vscp_getMDF_URL
  7440 ;;		_vscp_getMatrixInfo
  7441 ;;		_vscp_goBootloaderMode
  7442 ;;		_vscp_handleHeartbeat
  7443 ;;		_vscp_handleSetNickname
  7444 ;;		_vscp_handleDropNickname
  7445 ;;		_vscp_newNodeOnline
  7446 ;;		_vscp_readRegister
  7447 ;;		_vscp_readStdReg
  7448 ;;		_vscp_writeRegister
  7449 ;;		_vscp_writeStdReg
  7450 ;;		___lbmod
  7451 ;; This function is called by:
  7452 ;;		_main
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text33
  7457  0027A4                     __ptext33:
  7458                           	opt stack 0
  7459  0027A4                     _vscp_handleProtocolEvent:
  7460                           	opt stack 22
  7461                           
  7462                           ; BSR set to: 1
  7463                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7464                           
  7465                           ;incstack = 0
  7466                           ;incstack = 0
  7467  0027A4  5167               	movf	(_vscp_imsg+3)& (0+255),w,b
  7468  0027A6  1166               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7469  0027A8  E101 D32F          	bz	l10013
  7470  0027AC  D35F               	goto	l1269
  7471  0027AE                     l9595:
  7472                           
  7473                           ; BSR set to: 1
  7474                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7475  0027AE  ECC0  F02B         	call	_vscp_handleHeartbeat	;wreg free
  7476                           
  7477                           ;vscp_firmware.c: 807: break;
  7478  0027B2  D35C               	goto	l1269
  7479  0027B4                     l9597:
  7480                           
  7481                           ; BSR set to: 1
  7482                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7483  0027B4  ECA3  F02C         	call	_vscp_newNodeOnline	;wreg free
  7484                           
  7485                           ;vscp_firmware.c: 812: break;
  7486  0027B8  D359               	goto	l1269
  7487  0027BA                     l9599:
  7488                           
  7489                           ; BSR set to: 1
  7490                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7491  0027BA  ECD0  F02C         	call	_vscp_handleSetNickname	;wreg free
  7492                           
  7493                           ;vscp_firmware.c: 817: break;
  7494  0027BE  D356               	goto	l1269
  7495  0027C0                     l9601:
  7496                           
  7497                           ; BSR set to: 1
  7498                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7499  0027C0  EC54  F02C         	call	_vscp_handleDropNickname	;wreg free
  7500                           
  7501                           ;vscp_firmware.c: 822: break;
  7502  0027C4  D353               	goto	l1269
  7503  0027C6                     l9603:
  7504                           
  7505                           ; BSR set to: 1
  7506                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7507                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7508  0027C6  5164               	movf	_vscp_imsg& (0+255),w,b
  7509  0027C8  0B0F               	andlw	15
  7510  0027CA  0A02               	xorlw	2
  7511  0027CC  E001 D34E          	bnz	l1269
  7512                           
  7513                           ; BSR set to: 1
  7514  0027D0  0100               	movlb	0	; () banked
  7515  0027D2  51C9               	movf	_vscp_nickname& (0+255),w,b
  7516  0027D4  0101               	movlb	1	; () banked
  7517  0027D6  EE21  F06A         	lfsr	2,_vscp_imsg+6
  7518  0027DA  62DF               	cpfseq	indf2,c
  7519  0027DC  D347               	goto	l1269
  7520                           
  7521                           ; BSR set to: 1
  7522                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7523  0027DE  0E80               	movlw	128
  7524  0027E0  616B               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7525  0027E2  D012               	goto	l9623
  7526                           
  7527                           ; BSR set to: 1
  7528                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7529  0027E4  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  7530  0027E6  EC38  F00C         	call	_vscp_readAppReg
  7531  0027EA                     L8:
  7532  0027EA  0100               	movlb	0	; () banked
  7533  0027EC  6FD1               	movwf	(_vscp_omsg+6)& (0+255),b
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7537  0027EE  C16B  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+5
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7541  0027F2  0E03               	movlw	3
  7542  0027F4  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7546  0027F6  0E82               	movlw	130
  7547  0027F8  6FCB               	movwf	_vscp_omsg& (0+255),b
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7551  0027FA  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  7552  0027FC  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7556  0027FE  0E0A               	movlw	10
  7557  002800  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  7558  002802                     l9621:
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7562  002802  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  7563                           
  7564                           ;vscp_firmware.c: 844: }
  7565  002806  D332               	goto	l1269
  7566  002808                     l9623:
  7567                           
  7568                           ; BSR set to: 1
  7569                           ;vscp_firmware.c: 845: else {
  7570                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7571                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7572  002808  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  7573  00280A  EC45  F01E         	call	_vscp_readStdReg
  7574  00280E  D7ED               	goto	L8
  7575  002810                     l9637:
  7576                           
  7577                           ; BSR set to: 1
  7578                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7579                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7580  002810  5164               	movf	_vscp_imsg& (0+255),w,b
  7581  002812  0B0F               	andlw	15
  7582  002814  0A03               	xorlw	3
  7583  002816  E001 D329          	bnz	l1269
  7584                           
  7585                           ; BSR set to: 1
  7586  00281A  0100               	movlb	0	; () banked
  7587  00281C  51C9               	movf	_vscp_nickname& (0+255),w,b
  7588  00281E  0101               	movlb	1	; () banked
  7589  002820  EE21  F06A         	lfsr	2,_vscp_imsg+6
  7590  002824  62DF               	cpfseq	indf2,c
  7591  002826  D322               	goto	l1269
  7592                           
  7593                           ; BSR set to: 1
  7594                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7595  002828  0E80               	movlw	128
  7596  00282A  616B               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7597  00282C  D006               	goto	l9657
  7598                           
  7599                           ; BSR set to: 1
  7600                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7601                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7602  00282E  C16C  F023         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7603  002832  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  7604  002834  ECB7  F005         	call	_vscp_writeAppReg
  7605  002838  D7D8               	goto	L8
  7606  00283A                     l9657:
  7607                           
  7608                           ; BSR set to: 1
  7609                           ;vscp_firmware.c: 888: else {
  7610                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7611                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7612  00283A  C16C  F01B         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7613  00283E  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  7614  002840  ECFB  F022         	call	_vscp_writeStdReg
  7615  002844  D7D2               	goto	L8
  7616  002846                     l9671:
  7617                           
  7618                           ; BSR set to: 1
  7619                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7620                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7621                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7622                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7623                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7624                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7625                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7626  002846  0100               	movlb	0	; () banked
  7627  002848  51C9               	movf	_vscp_nickname& (0+255),w,b
  7628  00284A  0101               	movlb	1	; () banked
  7629  00284C  EE21  F06A         	lfsr	2,_vscp_imsg+6
  7630  002850  62DF               	cpfseq	indf2,c
  7631  002852  D30C               	goto	l1269
  7632                           
  7633                           ; BSR set to: 1
  7634  002854  0E00               	movlw	0
  7635  002856  EC05  F02E         	call	_vscp_getGUID
  7636  00285A  0101               	movlb	1	; () banked
  7637  00285C  196C               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7638  00285E  E001 D305          	bnz	l1269
  7639                           
  7640                           ; BSR set to: 1
  7641  002862  0E03               	movlw	3
  7642  002864  EC05  F02E         	call	_vscp_getGUID
  7643  002868  0101               	movlb	1	; () banked
  7644  00286A  196D               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7645  00286C  E001 D2FE          	bnz	l1269
  7646                           
  7647                           ; BSR set to: 1
  7648  002870  0E05               	movlw	5
  7649  002872  EC05  F02E         	call	_vscp_getGUID
  7650  002876  0101               	movlb	1	; () banked
  7651  002878  196E               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7652  00287A  E001 D2F7          	bnz	l1269
  7653                           
  7654                           ; BSR set to: 1
  7655  00287E  0E07               	movlw	7
  7656  002880  EC05  F02E         	call	_vscp_getGUID
  7657  002884  0101               	movlb	1	; () banked
  7658  002886  196F               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7659  002888  E001 D2F0          	bnz	l1269
  7660                           
  7661                           ; BSR set to: 1
  7662  00288C  5047               	movf	_vscp_page_select+1,w,c
  7663  00288E  1970               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7664  002890  E001 D2EC          	bnz	l1269
  7665                           
  7666                           ; BSR set to: 1
  7667  002894  5046               	movf	_vscp_page_select,w,c
  7668  002896  EE21  F071         	lfsr	2,_vscp_imsg+13
  7669  00289A  62DF               	cpfseq	indf2,c
  7670  00289C  D2E7               	goto	l1269
  7671                           
  7672                           ; BSR set to: 1
  7673                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7674  00289E  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  7675  0028A0  EC7A  F02D         	call	_vscp_goBootloaderMode
  7676  0028A4  D2E3               	goto	l1269
  7677  0028A6                     l9687:
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7681                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7682                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7683                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7684  0028A6  0E00               	movlw	0
  7685  0028A8  EC05  F02E         	call	_vscp_getGUID
  7686  0028AC  0101               	movlb	1	; () banked
  7687  0028AE  196B               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7688  0028B0  E174               	bnz	l9731
  7689                           
  7690                           ; BSR set to: 1
  7691  0028B2  0E01               	movlw	1
  7692  0028B4  EC05  F02E         	call	_vscp_getGUID
  7693  0028B8  0101               	movlb	1	; () banked
  7694  0028BA  196C               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7695  0028BC  E16E               	bnz	l9731
  7696                           
  7697                           ; BSR set to: 1
  7698  0028BE  0E02               	movlw	2
  7699  0028C0  EC05  F02E         	call	_vscp_getGUID
  7700  0028C4  0101               	movlb	1	; () banked
  7701  0028C6  196D               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7702  0028C8  E168               	bnz	l9731
  7703                           
  7704                           ; BSR set to: 1
  7705  0028CA  0E03               	movlw	3
  7706  0028CC  EC05  F02E         	call	_vscp_getGUID
  7707  0028D0  0101               	movlb	1	; () banked
  7708  0028D2  196E               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7709  0028D4  E162               	bnz	l9731
  7710                           
  7711                           ; BSR set to: 1
  7712                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7713  0028D6  884B               	bsf	_vscp_guid_reset,4,c
  7714  0028D8  D060               	goto	l9731
  7715  0028DA                     l9697:
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7719                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7720                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7721                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7722  0028DA  0E04               	movlw	4
  7723  0028DC  EC05  F02E         	call	_vscp_getGUID
  7724  0028E0  0101               	movlb	1	; () banked
  7725  0028E2  196B               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7726  0028E4  E15A               	bnz	l9731
  7727                           
  7728                           ; BSR set to: 1
  7729  0028E6  0E05               	movlw	5
  7730  0028E8  EC05  F02E         	call	_vscp_getGUID
  7731  0028EC  0101               	movlb	1	; () banked
  7732  0028EE  196C               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7733  0028F0  E154               	bnz	l9731
  7734                           
  7735                           ; BSR set to: 1
  7736  0028F2  0E06               	movlw	6
  7737  0028F4  EC05  F02E         	call	_vscp_getGUID
  7738  0028F8  0101               	movlb	1	; () banked
  7739  0028FA  196D               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7740  0028FC  E14E               	bnz	l9731
  7741                           
  7742                           ; BSR set to: 1
  7743  0028FE  0E07               	movlw	7
  7744  002900  EC05  F02E         	call	_vscp_getGUID
  7745  002904  0101               	movlb	1	; () banked
  7746  002906  196E               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7747  002908  E148               	bnz	l9731
  7748                           
  7749                           ; BSR set to: 1
  7750                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7751  00290A  8A4B               	bsf	_vscp_guid_reset,5,c
  7752  00290C  D046               	goto	l9731
  7753  00290E                     l9707:
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7757                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7758                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7759                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7760  00290E  0E08               	movlw	8
  7761  002910  EC05  F02E         	call	_vscp_getGUID
  7762  002914  0101               	movlb	1	; () banked
  7763  002916  196B               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7764  002918  E140               	bnz	l9731
  7765                           
  7766                           ; BSR set to: 1
  7767  00291A  0E09               	movlw	9
  7768  00291C  EC05  F02E         	call	_vscp_getGUID
  7769  002920  0101               	movlb	1	; () banked
  7770  002922  196C               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7771  002924  E13A               	bnz	l9731
  7772                           
  7773                           ; BSR set to: 1
  7774  002926  0E0A               	movlw	10
  7775  002928  EC05  F02E         	call	_vscp_getGUID
  7776  00292C  0101               	movlb	1	; () banked
  7777  00292E  196D               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7778  002930  E134               	bnz	l9731
  7779                           
  7780                           ; BSR set to: 1
  7781  002932  0E0B               	movlw	11
  7782  002934  EC05  F02E         	call	_vscp_getGUID
  7783  002938  0101               	movlb	1	; () banked
  7784  00293A  196E               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7785  00293C  E12E               	bnz	l9731
  7786                           
  7787                           ; BSR set to: 1
  7788                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7789  00293E  8C4B               	bsf	_vscp_guid_reset,6,c
  7790  002940  D02C               	goto	l9731
  7791  002942                     l9717:
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7795                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7796                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7797                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7798  002942  0E0C               	movlw	12
  7799  002944  EC05  F02E         	call	_vscp_getGUID
  7800  002948  0101               	movlb	1	; () banked
  7801  00294A  196B               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7802  00294C  E126               	bnz	l9731
  7803                           
  7804                           ; BSR set to: 1
  7805  00294E  0E0D               	movlw	13
  7806  002950  EC05  F02E         	call	_vscp_getGUID
  7807  002954  0101               	movlb	1	; () banked
  7808  002956  196C               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7809  002958  E120               	bnz	l9731
  7810                           
  7811                           ; BSR set to: 1
  7812  00295A  0E0E               	movlw	14
  7813  00295C  EC05  F02E         	call	_vscp_getGUID
  7814  002960  0101               	movlb	1	; () banked
  7815  002962  196D               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7816  002964  E11A               	bnz	l9731
  7817                           
  7818                           ; BSR set to: 1
  7819  002966  0E0F               	movlw	15
  7820  002968  EC05  F02E         	call	_vscp_getGUID
  7821  00296C  0101               	movlb	1	; () banked
  7822  00296E  196E               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7823  002970  E114               	bnz	l9731
  7824                           
  7825                           ; BSR set to: 1
  7826                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7827  002972  8E4B               	bsf	_vscp_guid_reset,7,c
  7828  002974  D012               	goto	l9731
  7829  002976                     l1209:
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7833  002976  6A4B               	clrf	_vscp_guid_reset,c
  7834                           
  7835                           ;vscp_firmware.c: 965: break;
  7836  002978  D010               	goto	l9731
  7837  00297A                     l9729:
  7838                           
  7839                           ; BSR set to: 1
  7840  00297A  396A               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7841  00297C  0B0F               	andlw	15
  7842  00297E  0100               	movlb	0	; () banked
  7843  002980  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7844  002982  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7845                           
  7846                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7847                           ; Switch size 1, requested type "speed"
  7848                           ; Number of cases is 1, Range of values is 0 to 0
  7849                           ; switch strategies available:
  7850                           ; Name         Instructions Cycles
  7851                           ; simple_byte            4     3 (average)
  7852                           ;	Chosen strategy is simple_byte
  7853  002984  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7854  002986  E1F7               	bnz	l1209
  7855                           
  7856                           ; BSR set to: 0
  7857                           ; Switch size 1, requested type "speed"
  7858                           ; Number of cases is 4, Range of values is 0 to 3
  7859                           ; switch strategies available:
  7860                           ; Name         Instructions Cycles
  7861                           ; simple_byte           13     7 (average)
  7862                           ;	Chosen strategy is simple_byte
  7863  002988  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7864  00298A  E08D               	bz	l9687
  7865  00298C  0A01               	xorlw	1	; case 1
  7866  00298E  E0A5               	bz	l9697
  7867  002990  0A03               	xorlw	3	; case 2
  7868  002992  E0BD               	bz	l9707
  7869  002994  0A01               	xorlw	1	; case 3
  7870  002996  E0D5               	bz	l9717
  7871  002998  D7EE               	goto	l1209
  7872  00299A                     l9731:
  7873                           
  7874                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7875  00299A  504B               	movf	_vscp_guid_reset,w,c
  7876  00299C  0BF0               	andlw	240
  7877  00299E  0AF0               	xorlw	240
  7878  0029A0  E001 D264          	bnz	l1269
  7879                           
  7880                           ;vscp_firmware.c: 970: vscp_init();
  7881  0029A4  EC12  F02B         	call	_vscp_init	;wreg free
  7882  0029A8  D261               	goto	l1269
  7883  0029AA                     l9735:
  7884                           
  7885                           ; BSR set to: 1
  7886                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7887  0029AA  0100               	movlb	0	; () banked
  7888  0029AC  51C9               	movf	_vscp_nickname& (0+255),w,b
  7889  0029AE  0101               	movlb	1	; () banked
  7890  0029B0  EE21  F06A         	lfsr	2,_vscp_imsg+6
  7891  0029B4  62DF               	cpfseq	indf2,c
  7892  0029B6  D25A               	goto	l1269
  7893                           
  7894                           ; BSR set to: 1
  7895                           ;vscp_firmware.c: 978: uint8_t i;
  7896                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7897  0029B8  0100               	movlb	0	; () banked
  7898  0029BA  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7899                           
  7900                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7901  0029BC  C16B  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7902                           
  7903                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7904  0029C0  C16C  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7905                           
  7906                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7907  0029C4  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7908  0029C6  D049               	goto	l9767
  7909  0029C8                     l9739:
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7913  0029C8  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7914  0029CA  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7915  0029CC  ECA7  F02D         	call	_vscp_readRegister
  7916  0029D0  0100               	movlb	0	; () banked
  7917  0029D2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7918  0029D4  0E07               	movlw	7
  7919  0029D6  6E0E               	movwf	?___lbmod,c
  7920  0029D8  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7921  0029DA  ECFA  F02C         	call	___lbmod
  7922  0029DE  0100               	movlb	0	; () banked
  7923  0029E0  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7924  0029E2  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7925  0029E4  0FD1               	addlw	low (_vscp_omsg+6)
  7926  0029E6  6ED9               	movwf	fsr2l,c
  7927  0029E8  6ADA               	clrf	fsr2h,c
  7928  0029EA  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7932  0029EE  0E07               	movlw	7
  7933  0029F0  6E0E               	movwf	?___lbmod,c
  7934  0029F2  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7935  0029F4  ECFA  F02C         	call	___lbmod
  7936  0029F8  0A06               	xorlw	6
  7937  0029FA  E00B               	bz	l9745
  7938  0029FC  0EFF               	movlw	255
  7939  0029FE  0100               	movlb	0	; () banked
  7940  002A00  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7941  002A02  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7942  002A04  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7943  002A06  0EFF               	movlw	255
  7944  002A08  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7945  002A0A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7946  002A0C  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7947  002A0E  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7948  002A10  E123               	bnz	l9765
  7949  002A12                     l9745:
  7950                           
  7951                           ;vscp_firmware.c: 988: uint8_t bytes;
  7952                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7953  002A12  0E07               	movlw	7
  7954  002A14  6E0E               	movwf	?___lbmod,c
  7955  002A16  0100               	movlb	0	; () banked
  7956  002A18  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7957  002A1A  ECFA  F02C         	call	___lbmod
  7958  002A1E  0A06               	xorlw	6
  7959  002A20  E103               	bnz	l9749
  7960                           
  7961                           ;vscp_firmware.c: 991: bytes = 7;
  7962  002A22  0E07               	movlw	7
  7963  002A24  0100               	movlb	0	; () banked
  7964  002A26  D009               	goto	L9
  7965  002A28                     l9749:
  7966                           
  7967                           ;vscp_firmware.c: 993: else {
  7968                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7969  002A28  0E07               	movlw	7
  7970  002A2A  6E0E               	movwf	?___lbmod,c
  7971  002A2C  0100               	movlb	0	; () banked
  7972  002A2E  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7973  002A30  ECFA  F02C         	call	___lbmod
  7974  002A34  0100               	movlb	0	; () banked
  7975  002A36  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7976  002A38  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7977  002A3A                     L9:
  7978  002A3A  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7979                           
  7980                           ; BSR set to: 0
  7981                           ;vscp_firmware.c: 995: }
  7982                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7983  002A3C  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7984  002A3E  0F81               	addlw	129
  7985  002A40  6FCB               	movwf	_vscp_omsg& (0+255),b
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7989  002A42  0E07               	movlw	7
  7990  002A44  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7994  002A46  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  7995  002A48  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7999  002A4A  0E1A               	movlw	26
  8000  002A4C  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8004  002A4E  C08B  F0D0         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8008  002A52  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;vscp_firmware.c: 1005: pos++;
  8012  002A56  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8013  002A58                     l9765:
  8014                           
  8015                           ; BSR set to: 0
  8016  002A58  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8017  002A5A                     l9767:
  8018                           
  8019                           ; BSR set to: 0
  8020  002A5A  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8021  002A5C  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8022  002A5E  E301 D205          	bc	l1269
  8023  002A62  D7B2               	goto	l9739
  8024  002A64                     l9769:
  8025                           
  8026                           ; BSR set to: 1
  8027                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8028  002A64  0100               	movlb	0	; () banked
  8029  002A66  51C9               	movf	_vscp_nickname& (0+255),w,b
  8030  002A68  0101               	movlb	1	; () banked
  8031  002A6A  EE21  F06A         	lfsr	2,_vscp_imsg+6
  8032  002A6E  62DF               	cpfseq	indf2,c
  8033  002A70  D1FD               	goto	l1269
  8034                           
  8035                           ; BSR set to: 1
  8036                           ;vscp_firmware.c: 1014: uint8_t i;
  8037                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8038  002A72  C16B  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1163
  8039                           
  8040                           ; BSR set to: 1
  8041                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8042  002A76  5164               	movf	_vscp_imsg& (0+255),w,b
  8043  002A78  0FFE               	addlw	254
  8044  002A7A  0B07               	andlw	7
  8045  002A7C  0100               	movlb	0	; () banked
  8046  002A7E  6F8F               	movwf	vscp_handleProtocolEvent@len_1164& (0+255),b
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8050  002A80  6B94               	clrf	vscp_handleProtocolEvent@i_1162& (0+255),b
  8051  002A82  D01B               	goto	l9783
  8052  002A84                     l9777:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8056  002A84  0E6C               	movlw	low (_vscp_imsg+8)
  8057  002A86  0100               	movlb	0	; () banked
  8058  002A88  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8059  002A8A  6ED9               	movwf	fsr2l,c
  8060  002A8C  6ADA               	clrf	fsr2h,c
  8061  002A8E  0E01               	movlw	high (_vscp_imsg+8)
  8062  002A90  22DA               	addwfc	fsr2h,f,c
  8063  002A92  50DF               	movf	indf2,w,c
  8064  002A94  6E27               	movwf	?_vscp_writeRegister,c
  8065  002A96  518E               	movf	vscp_handleProtocolEvent@pos_1163& (0+255),w,b
  8066  002A98  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8067  002A9A  EC58  F02D         	call	_vscp_writeRegister
  8068                           
  8069                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8070  002A9E  0100               	movlb	0	; () banked
  8071  002AA0  518E               	movf	vscp_handleProtocolEvent@pos_1163& (0+255),w,b
  8072  002AA2  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8073  002AA4  ECA7  F02D         	call	_vscp_readRegister
  8074  002AA8  0100               	movlb	0	; () banked
  8075  002AAA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8076  002AAC  5194               	movf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8077  002AAE  0FD1               	addlw	low (_vscp_omsg+6)
  8078  002AB0  6ED9               	movwf	fsr2l,c
  8079  002AB2  6ADA               	clrf	fsr2h,c
  8080  002AB4  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8081                           
  8082                           ; BSR set to: 0
  8083  002AB8  2B94               	incf	vscp_handleProtocolEvent@i_1162& (0+255),f,b
  8084  002ABA                     l9783:
  8085                           
  8086                           ; BSR set to: 0
  8087  002ABA  518F               	movf	vscp_handleProtocolEvent@len_1164& (0+255),w,b
  8088  002ABC  5D94               	subwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8089  002ABE  E3E2               	bnc	l9777
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;vscp_firmware.c: 1022: }
  8093                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8094  002AC0  0E07               	movlw	7
  8095  002AC2  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8099  002AC4  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8100  002AC6  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8101                           
  8102                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8103  002AC8  0E1A               	movlw	26
  8104  002ACA  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8108  002ACC  6BD0               	clrf	(_vscp_omsg+5)& (0+255),b
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8112  002ACE  518F               	movf	vscp_handleProtocolEvent@len_1164& (0+255),w,b
  8113  002AD0  0F81               	addlw	129
  8114  002AD2  6FCB               	movwf	_vscp_omsg& (0+255),b
  8115  002AD4  D696               	goto	l9621
  8116  002AD6                     l9795:
  8117                           
  8118                           ; BSR set to: 1
  8119                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8120  002AD6  0100               	movlb	0	; () banked
  8121  002AD8  51C9               	movf	_vscp_nickname& (0+255),w,b
  8122  002ADA  0101               	movlb	1	; () banked
  8123  002ADC  EE21  F06A         	lfsr	2,_vscp_imsg+6
  8124  002AE0  62DF               	cpfseq	indf2,c
  8125  002AE2  D1C4               	goto	l1269
  8126                           
  8127                           ; BSR set to: 1
  8128                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8129                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8130                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8131  002AE4  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  8132  002AE6  EC38  F00C         	call	_vscp_readAppReg
  8133  002AEA  0100               	movlb	0	; () banked
  8134  002AEC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8135  002AEE  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8136  002AF0  6E23               	movwf	?_vscp_writeAppReg,c
  8137  002AF2  0101               	movlb	1	; () banked
  8138  002AF4  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  8139  002AF6  ECB7  F005         	call	_vscp_writeAppReg
  8140  002AFA  D677               	goto	L8
  8141  002AFC                     l9811:
  8142                           
  8143                           ; BSR set to: 1
  8144                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8145  002AFC  0100               	movlb	0	; () banked
  8146  002AFE  51C9               	movf	_vscp_nickname& (0+255),w,b
  8147  002B00  0101               	movlb	1	; () banked
  8148  002B02  EE21  F06A         	lfsr	2,_vscp_imsg+6
  8149  002B06  62DF               	cpfseq	indf2,c
  8150  002B08  D1B1               	goto	l1269
  8151                           
  8152                           ; BSR set to: 1
  8153                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8154                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8155                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8156  002B0A  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  8157  002B0C  EC38  F00C         	call	_vscp_readAppReg
  8158  002B10  0100               	movlb	0	; () banked
  8159  002B12  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8160  002B14  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8161  002B16  6E23               	movwf	?_vscp_writeAppReg,c
  8162  002B18  0101               	movlb	1	; () banked
  8163  002B1A  516B               	movf	(_vscp_imsg+7)& (0+255),w,b
  8164  002B1C  ECB7  F005         	call	_vscp_writeAppReg
  8165  002B20  D664               	goto	L8
  8166  002B22                     l9827:
  8167                           
  8168                           ; BSR set to: 1
  8169                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8170                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8171  002B22  516A               	movf	(_vscp_imsg+6)& (0+255),w,b
  8172  002B24  0100               	movlb	0	; () banked
  8173  002B26  19C9               	xorwf	_vscp_nickname& (0+255),w,b
  8174  002B28  E004               	bz	l1233
  8175                           
  8176                           ; BSR set to: 0
  8177  002B2A  0101               	movlb	1	; () banked
  8178  002B2C  296A               	incf	(_vscp_imsg+6)& (0+255),w,b
  8179  002B2E  E001 D19D          	bnz	l1269
  8180  002B32                     l1233:
  8181                           
  8182                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8183  002B32  0100               	movlb	0	; () banked
  8184  002B34  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8188  002B36  0E03               	movlw	3
  8189  002B38  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8190                           
  8191                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8192  002B3A  0E88               	movlw	136
  8193  002B3C  6FCB               	movwf	_vscp_omsg& (0+255),b
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8197  002B3E  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8198  002B40  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8199                           
  8200                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8201  002B42  0E20               	movlw	32
  8202  002B44  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8206  002B46  6B98               	clrf	vscp_handleProtocolEvent@i_1165& (0+255),b
  8207  002B48                     l1234:
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;vscp_firmware.c: 1091: {
  8211                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8212  002B48  C098  F0D0         	movff	vscp_handleProtocolEvent@i_1165,_vscp_omsg+5
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8216  002B4C  0E01               	movlw	1
  8217  002B4E  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8218  002B50                     l9847:
  8219                           
  8220                           ; BSR set to: 0
  8221                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8222  002B50  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8223  002B52  0FD0               	addlw	low (_vscp_omsg+5)
  8224  002B54  6ED9               	movwf	fsr2l,c
  8225  002B56  6ADA               	clrf	fsr2h,c
  8226  002B58  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8227  002B5A  080F               	sublw	15
  8228  002B5C  EC05  F02E         	call	_vscp_getGUID
  8229  002B60  6EDF               	movwf	indf2,c
  8230  002B62  0100               	movlb	0	; () banked
  8231  002B64  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;vscp_firmware.c: 1096: if (k > 16)
  8235  002B66  0E10               	movlw	16
  8236  002B68  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8237  002B6A  D001               	goto	l9855
  8238  002B6C  D004               	goto	l9859
  8239  002B6E                     l9855:
  8240                           
  8241                           ; BSR set to: 0
  8242  002B6E  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8243                           
  8244                           ; BSR set to: 0
  8245  002B70  0E07               	movlw	7
  8246  002B72  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8247  002B74  D7ED               	goto	l9847
  8248  002B76                     l9859:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;vscp_firmware.c: 1098: }
  8252                           ;vscp_firmware.c: 1100: if (k > 16)
  8253  002B76  0E10               	movlw	16
  8254  002B78  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8255  002B7A  D001               	goto	l9863
  8256  002B7C  D006               	goto	l1235
  8257  002B7E                     l9863:
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8261  002B7E  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  8262                           
  8263                           ; BSR set to: 0
  8264  002B82  2B98               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8265                           
  8266                           ; BSR set to: 0
  8267  002B84  0E02               	movlw	2
  8268  002B86  6598               	cpfsgt	vscp_handleProtocolEvent@i_1165& (0+255),b
  8269  002B88  D7DF               	goto	l1234
  8270  002B8A                     l1235:
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;vscp_firmware.c: 1104: }
  8274                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8275  002B8A  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8276  002B8C                     l9873:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;vscp_firmware.c: 1107: {
  8280                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8281  002B8C  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8282  002B8E  ECD9  F02D         	call	_vscp_getMDF_URL
  8283  002B92  0900               	iorlw	0
  8284  002B94  E009               	bz	l9877
  8285                           
  8286                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8287  002B96  0100               	movlb	0	; () banked
  8288  002B98  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8289  002B9A  0FD3               	addlw	low (_vscp_omsg+8)
  8290  002B9C  6ED9               	movwf	fsr2l,c
  8291  002B9E  6ADA               	clrf	fsr2h,c
  8292  002BA0  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8293  002BA2  ECD9  F02D         	call	_vscp_getMDF_URL
  8294  002BA6  D006               	goto	L10
  8295  002BA8                     l9877:
  8296                           
  8297                           ;vscp_firmware.c: 1110: else
  8298                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8299  002BA8  0100               	movlb	0	; () banked
  8300  002BAA  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8301  002BAC  0FD3               	addlw	low (_vscp_omsg+8)
  8302  002BAE  6ED9               	movwf	fsr2l,c
  8303  002BB0  6ADA               	clrf	fsr2h,c
  8304  002BB2  0E00               	movlw	0
  8305  002BB4                     L10:
  8306  002BB4  6EDF               	movwf	indf2,c
  8307  002BB6  0100               	movlb	0	; () banked
  8308  002BB8  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8309                           
  8310                           ; BSR set to: 0
  8311  002BBA  0E04               	movlw	4
  8312  002BBC  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8313  002BBE  D7E6               	goto	l9873
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;vscp_firmware.c: 1112: }
  8317                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8318  002BC0  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  8319                           
  8320                           ; BSR set to: 0
  8321                           ;vscp_firmware.c: 1116: k = 5;
  8322  002BC4  0E05               	movlw	5
  8323  002BC6  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8327  002BC8  0E03               	movlw	3
  8328  002BCA  6F98               	movwf	vscp_handleProtocolEvent@i_1165& (0+255),b
  8329  002BCC                     l1244:
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;vscp_firmware.c: 1118: {
  8333                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8334  002BCC  C098  F0D0         	movff	vscp_handleProtocolEvent@i_1165,_vscp_omsg+5
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8338  002BD0  0E01               	movlw	1
  8339  002BD2  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8340  002BD4                     l9899:
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8344  002BD4  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8345  002BD6  0FD0               	addlw	low (_vscp_omsg+5)
  8346  002BD8  6ED9               	movwf	fsr2l,c
  8347  002BDA  6ADA               	clrf	fsr2h,c
  8348  002BDC  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8349  002BDE  ECD9  F02D         	call	_vscp_getMDF_URL
  8350  002BE2  6EDF               	movwf	indf2,c
  8351  002BE4  0100               	movlb	0	; () banked
  8352  002BE6  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8353                           
  8354                           ; BSR set to: 0
  8355  002BE8  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8356                           
  8357                           ; BSR set to: 0
  8358  002BEA  0E07               	movlw	7
  8359  002BEC  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8360  002BEE  D7F2               	goto	l9899
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;vscp_firmware.c: 1123: }
  8364                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8365  002BF0  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  8366                           
  8367                           ; BSR set to: 0
  8368  002BF4  2B98               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8369                           
  8370                           ; BSR set to: 0
  8371  002BF6  0E06               	movlw	6
  8372  002BF8  6598               	cpfsgt	vscp_handleProtocolEvent@i_1165& (0+255),b
  8373  002BFA  D7E8               	goto	l1244
  8374  002BFC  D137               	goto	l1269
  8375  002BFE                     l9913:
  8376                           
  8377                           ; BSR set to: 1
  8378                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8379  002BFE  0100               	movlb	0	; () banked
  8380  002C00  51C9               	movf	_vscp_nickname& (0+255),w,b
  8381  002C02  0101               	movlb	1	; () banked
  8382  002C04  EE21  F06A         	lfsr	2,_vscp_imsg+6
  8383  002C08  62DF               	cpfseq	indf2,c
  8384  002C0A  D130               	goto	l1269
  8385                           
  8386                           ; BSR set to: 1
  8387                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8388  002C0C  0E03               	movlw	3
  8389  002C0E  0100               	movlb	0	; () banked
  8390  002C10  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8391                           
  8392                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8393  002C12  0E87               	movlw	135
  8394  002C14  6FCB               	movwf	_vscp_omsg& (0+255),b
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8398  002C16  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8399  002C18  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8400                           
  8401                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8402  002C1A  0E22               	movlw	34
  8403  002C1C  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8407  002C1E  0ED0               	movlw	(_vscp_omsg+5)& (0+255)
  8408  002C20  ECB4  F02D         	call	_vscp_getMatrixInfo
  8409  002C24  D5EE               	goto	l9621
  8410  002C26                     l9923:
  8411                           
  8412                           ; BSR set to: 1
  8413                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8414  002C26  0100               	movlb	0	; () banked
  8415  002C28  51C9               	movf	_vscp_nickname& (0+255),w,b
  8416  002C2A  0101               	movlb	1	; () banked
  8417  002C2C  EE21  F06A         	lfsr	2,_vscp_imsg+6
  8418  002C30  62DF               	cpfseq	indf2,c
  8419  002C32  D11C               	goto	l1269
  8420                           
  8421                           ; BSR set to: 1
  8422                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8423  002C34  0100               	movlb	0	; () banked
  8424  002C36  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8428                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8429  002C38  C164  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8430  002C3C  0E0F               	movlw	15
  8431  002C3E  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8432  002C40  0E04               	movlw	4
  8433  002C42  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8434  002C44  E312               	bnc	l9939
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8438  002C46  C16E  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1169
  8439  002C4A  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8443  002C4C  5197               	movf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8444  002C4E  1196               	iorwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8445  002C50  E103               	bnz	l9935
  8446                           
  8447                           ; BSR set to: 0
  8448  002C52  0E01               	movlw	1
  8449  002C54  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8450  002C56  6B96               	clrf	vscp_handleProtocolEvent@bytes_1169& (0+255),b
  8451  002C58                     l9935:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8455  002C58  0E01               	movlw	1
  8456  002C5A  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8457  002C5C  0E01               	movlw	1
  8458  002C5E  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8459  002C60  E307               	bnc	l9941
  8460                           
  8461                           ; BSR set to: 0
  8462  002C62  0E01               	movlw	1
  8463  002C64  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8464  002C66  0E00               	movlw	0
  8465  002C68  D002               	goto	L12
  8466  002C6A                     l9939:
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;vscp_firmware.c: 1173: else {
  8470                           ;vscp_firmware.c: 1174: bytes = 1;
  8471  002C6A  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8472  002C6C  0E01               	movlw	1
  8473  002C6E                     L12:
  8474  002C6E  6F96               	movwf	vscp_handleProtocolEvent@bytes_1169& (0+255),b
  8475  002C70                     l9941:
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;vscp_firmware.c: 1175: }
  8479                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8480  002C70  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8481  002C74  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8485  002C78  0101               	movlb	1	; () banked
  8486  002C7A  516C               	movf	(_vscp_imsg+8)& (0+255),w,b
  8487  002C7C  C16B  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8488  002C80  0100               	movlb	0	; () banked
  8489  002C82  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8490  002C84  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8491  002C88  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8492  002C8A  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8493  002C8C  6E46               	movwf	_vscp_page_select,c
  8494  002C8E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8495  002C90  6E47               	movwf	_vscp_page_select+1,c
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8499  002C92  0E07               	movlw	7
  8500  002C94  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8504  002C96  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8505  002C98  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8509  002C9A  0E27               	movlw	39
  8510  002C9C  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8514  002C9E  6BD0               	clrf	(_vscp_omsg+5)& (0+255),b
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8518  002CA0  C16B  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+6
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8522  002CA4  C16C  F0D2         	movff	_vscp_imsg+8,_vscp_omsg+7
  8523  002CA8                     l9957:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8527  002CA8  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8528  002CAA  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8529  002CAC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8530  002CAE  0E00               	movlw	0
  8531  002CB0  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8532  002CB2  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8533  002CB4  0E04               	movlw	4
  8534  002CB6  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8535  002CB8  0E00               	movlw	0
  8536  002CBA  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8537  002CBC  E302               	bnc	l9961
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8541  002CBE  0E04               	movlw	4
  8542  002CC0  D002               	goto	L13
  8543  002CC2                     l9961:
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;vscp_firmware.c: 1198: else {
  8547                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8548  002CC2  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8549  002CC4  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8550  002CC6                     L13:
  8551  002CC6  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;vscp_firmware.c: 1200: }
  8555                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8556  002CC8  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8557  002CCA  0F84               	addlw	132
  8558  002CCC  6FCB               	movwf	_vscp_omsg& (0+255),b
  8559                           
  8560                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8561                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8562  002CCE  0101               	movlb	1	; () banked
  8563  002CD0  516D               	movf	(_vscp_imsg+9)& (0+255),w,b
  8564  002CD2  0100               	movlb	0	; () banked
  8565  002CD4  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8566  002CD6  6FD3               	movwf	(_vscp_omsg+8)& (0+255),b
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8570  002CD8  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8571  002CDA  D010               	goto	l9969
  8572  002CDC                     l9965:
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8576                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8577  002CDC  0101               	movlb	1	; () banked
  8578  002CDE  516D               	movf	(_vscp_imsg+9)& (0+255),w,b
  8579  002CE0  0100               	movlb	0	; () banked
  8580  002CE2  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8581  002CE4  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8582  002CE6  ECA7  F02D         	call	_vscp_readRegister
  8583  002CEA  0100               	movlb	0	; () banked
  8584  002CEC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8585  002CEE  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8586  002CF0  0FD4               	addlw	low (_vscp_omsg+9)
  8587  002CF2  6ED9               	movwf	fsr2l,c
  8588  002CF4  6ADA               	clrf	fsr2h,c
  8589  002CF6  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8590                           
  8591                           ; BSR set to: 0
  8592  002CFA  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8593  002CFC                     l9969:
  8594                           
  8595                           ; BSR set to: 0
  8596  002CFC  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8597  002CFE  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8598  002D00  E3ED               	bnc	l9965
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;vscp_firmware.c: 1211: }
  8602                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8603  002D02  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8607  002D06  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8608  002D08  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8612  002D0A  2BD0               	incf	(_vscp_omsg+5)& (0+255),f,b
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8616  002D0C  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8617  002D0E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8618  002D10  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8619  002D12  5196               	movf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8620  002D14  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8621  002D16  5197               	movf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8622  002D18  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8623  002D1A  E3C6               	bnc	l9957
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8627  002D1C  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8628  002D20  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8629  002D24  D0A3               	goto	l1269
  8630  002D26                     l9979:
  8631                           
  8632                           ; BSR set to: 1
  8633                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8634  002D26  0100               	movlb	0	; () banked
  8635  002D28  51C9               	movf	_vscp_nickname& (0+255),w,b
  8636  002D2A  0101               	movlb	1	; () banked
  8637  002D2C  EE21  F06A         	lfsr	2,_vscp_imsg+6
  8638  002D30  62DF               	cpfseq	indf2,c
  8639  002D32  D09C               	goto	l1269
  8640                           
  8641                           ; BSR set to: 1
  8642                           ;vscp_firmware.c: 1234: uint8_t i;
  8643                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8644                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8645  002D34  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1174
  8646  002D38  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1174+1
  8647                           
  8648                           ; BSR set to: 1
  8649                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8650  002D3C  516C               	movf	(_vscp_imsg+8)& (0+255),w,b
  8651  002D3E  C16B  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8652  002D42  0100               	movlb	0	; () banked
  8653  002D44  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8654  002D46  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8655  002D4A  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8656  002D4C  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8657  002D4E  6E46               	movwf	_vscp_page_select,c
  8658  002D50  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8659  002D52  6E47               	movwf	_vscp_page_select+1,c
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8663  002D54  C16D  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1173
  8664                           
  8665                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8666                           ;vscp_firmware.c: 1248: i++) {
  8667  002D58  D022               	goto	l9991
  8668  002D5A                     l9987:
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8672                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8673  002D5A  0E6E               	movlw	low (_vscp_imsg+10)
  8674  002D5C  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8675  002D5E  0E01               	movlw	high (_vscp_imsg+10)
  8676  002D60  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8677  002D62  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8678  002D64  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8679  002D66  0E00               	movlw	0
  8680  002D68  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8681  002D6A  0101               	movlb	1	; () banked
  8682  002D6C  516D               	movf	(_vscp_imsg+9)& (0+255),w,b
  8683  002D6E  0100               	movlb	0	; () banked
  8684  002D70  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8685  002D72  6ED9               	movwf	fsr2l,c
  8686  002D74  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8687  002D76  A0D8               	btfss	status,0,c
  8688  002D78  0580               	decf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8689  002D7A  6EDA               	movwf	fsr2h,c
  8690  002D7C  50DF               	movf	indf2,w,c
  8691  002D7E  6E27               	movwf	?_vscp_writeRegister,c
  8692  002D80  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8693  002D82  EC58  F02D         	call	_vscp_writeRegister
  8694  002D86  0100               	movlb	0	; () banked
  8695  002D88  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8696  002D8A  0101               	movlb	1	; () banked
  8697  002D8C  516D               	movf	(_vscp_imsg+9)& (0+255),w,b
  8698  002D8E  0100               	movlb	0	; () banked
  8699  002D90  08D4               	sublw	low (_vscp_omsg+9)
  8700  002D92  2592               	addwf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8701  002D94  6ED9               	movwf	fsr2l,c
  8702  002D96  6ADA               	clrf	fsr2h,c
  8703  002D98  C081  FFDF         	movff	??_vscp_handleProtocolEvent+2,indf2
  8704                           
  8705                           ; BSR set to: 0
  8706  002D9C  2B92               	incf	vscp_handleProtocolEvent@i_1173& (0+255),f,b
  8707  002D9E                     l9991:
  8708                           
  8709                           ; BSR set to: 0
  8710  002D9E  0101               	movlb	1	; () banked
  8711  002DA0  5164               	movf	_vscp_imsg& (0+255),w,b
  8712  002DA2  0B0F               	andlw	15
  8713  002DA4  0100               	movlb	0	; () banked
  8714  002DA6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8715  002DA8  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8716  002DAA  0101               	movlb	1	; () banked
  8717  002DAC  516D               	movf	(_vscp_imsg+9)& (0+255),w,b
  8718  002DAE  0100               	movlb	0	; () banked
  8719  002DB0  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8720  002DB2  0E00               	movlw	0
  8721  002DB4  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8722  002DB6  0EFC               	movlw	252
  8723  002DB8  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8724  002DBA  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8725  002DBC  0EFF               	movlw	255
  8726  002DBE  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8727  002DC0  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8728  002DC2  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8729  002DC4  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8730  002DC6  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8731  002DC8  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8732  002DCA  0A80               	xorlw	128
  8733  002DCC  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8734  002DCE  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8735  002DD0  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8736  002DD2  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8737  002DD4  0A80               	xorlw	128
  8738  002DD6  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8739  002DD8  E3C0               	bnc	l9987
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;vscp_firmware.c: 1251: }
  8743                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8744  002DDA  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1174,_vscp_page_select
  8745  002DDE  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1174+1,_vscp_page_select+1
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8749  002DE2  0E07               	movlw	7
  8750  002DE4  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8754  002DE6  0101               	movlb	1	; () banked
  8755  002DE8  5164               	movf	_vscp_imsg& (0+255),w,b
  8756  002DEA  0B0F               	andlw	15
  8757  002DEC  0F80               	addlw	128
  8758  002DEE  0100               	movlb	0	; () banked
  8759  002DF0  6FCB               	movwf	_vscp_omsg& (0+255),b
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8763  002DF2  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
  8764  002DF4  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8768  002DF6  0E27               	movlw	39
  8769  002DF8  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8773  002DFA  6BD0               	clrf	(_vscp_omsg+5)& (0+255),b
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8777  002DFC  C16B  F0D1         	movff	_vscp_imsg+7,_vscp_omsg+6
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8781  002E00  C16C  F0D2         	movff	_vscp_imsg+8,_vscp_omsg+7
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8785  002E04  C16D  F0D3         	movff	_vscp_imsg+9,_vscp_omsg+8
  8786  002E08  D4FC               	goto	l9621
  8787  002E0A                     l10013:
  8788                           
  8789                           ; BSR set to: 1
  8790  002E0A  5168               	movf	(_vscp_imsg+4)& (0+255),w,b
  8791                           
  8792                           ; Switch size 1, requested type "speed"
  8793                           ; Number of cases is 16, Range of values is 1 to 38
  8794                           ; switch strategies available:
  8795                           ; Name         Instructions Cycles
  8796                           ; simple_byte           49    25 (average)
  8797                           ;	Chosen strategy is simple_byte
  8798  002E0C  0A01               	xorlw	1	; case 1
  8799  002E0E  E101 D4CE          	bz	l9595
  8800  002E12  0A03               	xorlw	3	; case 2
  8801  002E14  E101 D4CE          	bz	l9597
  8802  002E18  0A04               	xorlw	4	; case 6
  8803  002E1A  E101 D4CE          	bz	l9599
  8804  002E1E  0A0E               	xorlw	14	; case 8
  8805  002E20  E101 D4CE          	bz	l9601
  8806  002E24  0A01               	xorlw	1	; case 9
  8807  002E26  E101 D4CE          	bz	l9603
  8808  002E2A  0A02               	xorlw	2	; case 11
  8809  002E2C  E101 D4F0          	bz	l9637
  8810  002E30  0A07               	xorlw	7	; case 12
  8811  002E32  E101 D508          	bz	l9671
  8812  002E36  0A1B               	xorlw	27	; case 23
  8813  002E38  E101 D59F          	bz	l9729
  8814  002E3C  0A0F               	xorlw	15	; case 24
  8815  002E3E  E101 D5B4          	bz	l9735
  8816  002E42  0A01               	xorlw	1	; case 25
  8817  002E44  E101 D60E          	bz	l9769
  8818  002E48  0A04               	xorlw	4	; case 29
  8819  002E4A  E101 D644          	bz	l9795
  8820  002E4E  0A03               	xorlw	3	; case 30
  8821  002E50  E101 D654          	bz	l9811
  8822  002E54  0A01               	xorlw	1	; case 31
  8823  002E56  E101 D664          	bz	l9827
  8824  002E5A  0A3E               	xorlw	62	; case 33
  8825  002E5C  E101 D6CF          	bz	l9913
  8826  002E60  0A04               	xorlw	4	; case 37
  8827  002E62  E101 D6E0          	bz	l9923
  8828  002E66  0A03               	xorlw	3	; case 38
  8829  002E68  E101 D75D          	bz	l9979
  8830  002E6C                     l1269:
  8831  002E6C  0012               	return	
  8832  002E6E                     __end_of_vscp_handleProtocolEvent:
  8833                           	opt stack 0
  8834                           tblptru	equ	0xFF8
  8835                           tblptrh	equ	0xFF7
  8836                           tblptrl	equ	0xFF6
  8837                           tablat	equ	0xFF5
  8838                           prodh	equ	0xFF4
  8839                           prodl	equ	0xFF3
  8840                           postinc0	equ	0xFEE
  8841                           wreg	equ	0xFE8
  8842                           postdec1	equ	0xFE5
  8843                           fsr1h	equ	0xFE2
  8844                           fsr1l	equ	0xFE1
  8845                           indf2	equ	0xFDF
  8846                           postinc2	equ	0xFDE
  8847                           postdec2	equ	0xFDD
  8848                           fsr2h	equ	0xFDA
  8849                           fsr2l	equ	0xFD9
  8850                           status	equ	0xFD8
  8851                           
  8852 ;; *************** function ___lbmod *****************
  8853 ;; Defined at:
  8854 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;  dividend        1    wreg     unsigned char 
  8857 ;;  divisor         1   13[COMRAM] unsigned char 
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;  dividend        1   14[COMRAM] unsigned char 
  8860 ;;  rem             1   16[COMRAM] unsigned char 
  8861 ;;  counter         1   15[COMRAM] unsigned char 
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  1    wreg      unsigned char 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0
  8866 ;; Tracked objects:
  8867 ;;		On entry : F/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8871 ;;      Params:         1       0       0       0       0       0       0
  8872 ;;      Locals:         3       0       0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0
  8874 ;;      Totals:         4       0       0       0       0       0       0
  8875 ;;Total ram usage:        4 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    2
  8878 ;; This function calls:
  8879 ;;		Nothing
  8880 ;; This function is called by:
  8881 ;;		_vscp_handleProtocolEvent
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text34
  8886  0059F4                     __ptext34:
  8887                           	opt stack 0
  8888  0059F4                     ___lbmod:
  8889                           	opt stack 27
  8890                           
  8891                           ;incstack = 0
  8892                           ;incstack = 0
  8893                           ;___lbmod@dividend stored from wreg
  8894  0059F4  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8895                           
  8896                           ; BSR set to: 0
  8897  0059F8  0E08               	movlw	8
  8898  0059FA  6E10               	movwf	___lbmod@counter,c
  8899                           
  8900                           ; BSR set to: 0
  8901  0059FC  6A11               	clrf	___lbmod@rem,c
  8902  0059FE                     l9069:
  8903  0059FE  90D8               	bcf	status,0,c
  8904  005A00  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8905  005A02  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8906  005A04  6E11               	movwf	___lbmod@rem,c
  8907  005A06  90D8               	bcf	status,0,c
  8908  005A08  360F               	rlcf	___lbmod@dividend,f,c
  8909  005A0A  500E               	movf	___lbmod@divisor,w,c
  8910  005A0C  5C11               	subwf	___lbmod@rem,w,c
  8911  005A0E  E302               	bnc	l9077
  8912  005A10  500E               	movf	___lbmod@divisor,w,c
  8913  005A12  5E11               	subwf	___lbmod@rem,f,c
  8914  005A14                     l9077:
  8915  005A14  2E10               	decfsz	___lbmod@counter,f,c
  8916  005A16  D7F3               	goto	l9069
  8917  005A18  5011               	movf	___lbmod@rem,w,c
  8918  005A1A  0012               	return	
  8919  005A1C                     __end_of___lbmod:
  8920                           	opt stack 0
  8921                           tblptru	equ	0xFF8
  8922                           tblptrh	equ	0xFF7
  8923                           tblptrl	equ	0xFF6
  8924                           tablat	equ	0xFF5
  8925                           prodh	equ	0xFF4
  8926                           prodl	equ	0xFF3
  8927                           postinc0	equ	0xFEE
  8928                           wreg	equ	0xFE8
  8929                           postdec1	equ	0xFE5
  8930                           fsr1h	equ	0xFE2
  8931                           fsr1l	equ	0xFE1
  8932                           indf2	equ	0xFDF
  8933                           postinc2	equ	0xFDE
  8934                           postdec2	equ	0xFDD
  8935                           fsr2h	equ	0xFDA
  8936                           fsr2l	equ	0xFD9
  8937                           status	equ	0xFD8
  8938                           
  8939 ;; *************** function _vscp_writeRegister *****************
  8940 ;; Defined at:
  8941 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8942 ;; Parameters:    Size  Location     Type
  8943 ;;  reg             1    wreg     unsigned char 
  8944 ;;  value           1   38[COMRAM] unsigned char 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  reg             1   39[COMRAM] unsigned char 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  1    wreg      unsigned char 
  8949 ;; Registers used:
  8950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : F/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8956 ;;      Params:         1       0       0       0       0       0       0
  8957 ;;      Locals:         1       0       0       0       0       0       0
  8958 ;;      Temps:          0       0       0       0       0       0       0
  8959 ;;      Totals:         2       0       0       0       0       0       0
  8960 ;;Total ram usage:        2 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    6
  8963 ;; This function calls:
  8964 ;;		_vscp_writeAppReg
  8965 ;;		_vscp_writeStdReg
  8966 ;; This function is called by:
  8967 ;;		_vscp_handleProtocolEvent
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text35
  8972  005AB0                     __ptext35:
  8973                           	opt stack 0
  8974  005AB0                     _vscp_writeRegister:
  8975                           	opt stack 23
  8976                           
  8977                           ;incstack = 0
  8978                           ;incstack = 0
  8979                           ;vscp_writeRegister@reg stored from wreg
  8980  005AB0  CFE8 F028          	movff	wreg,vscp_writeRegister@reg
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8984  005AB4  0E7F               	movlw	127
  8985  005AB6  6428               	cpfsgt	vscp_writeRegister@reg,c
  8986  005AB8  D006               	goto	l11211
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8990  005ABA  C027  F01B         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8991  005ABE  5028               	movf	vscp_writeRegister@reg,w,c
  8992  005AC0  ECFB  F022         	call	_vscp_writeStdReg
  8993  005AC4  D005               	goto	l1149
  8994  005AC6                     l11211:
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;vscp_firmware.c: 705: else {
  8998                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8999  005AC6  C027  F023         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9000  005ACA  5028               	movf	vscp_writeRegister@reg,w,c
  9001  005ACC  ECB7  F005         	call	_vscp_writeAppReg
  9002  005AD0                     l1149:
  9003  005AD0  0012               	return	
  9004  005AD2                     __end_of_vscp_writeRegister:
  9005                           	opt stack 0
  9006                           tblptru	equ	0xFF8
  9007                           tblptrh	equ	0xFF7
  9008                           tblptrl	equ	0xFF6
  9009                           tablat	equ	0xFF5
  9010                           prodh	equ	0xFF4
  9011                           prodl	equ	0xFF3
  9012                           postinc0	equ	0xFEE
  9013                           wreg	equ	0xFE8
  9014                           postdec1	equ	0xFE5
  9015                           fsr1h	equ	0xFE2
  9016                           fsr1l	equ	0xFE1
  9017                           indf2	equ	0xFDF
  9018                           postinc2	equ	0xFDE
  9019                           postdec2	equ	0xFDD
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function _vscp_writeStdReg *****************
  9025 ;; Defined at:
  9026 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  reg             1    wreg     unsigned char 
  9029 ;;  value           1   26[COMRAM] unsigned char 
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  reg             1   32[COMRAM] unsigned char 
  9032 ;;  rv              1   31[COMRAM] unsigned char 
  9033 ;; Return value:  Size  Location     Type
  9034 ;;                  1    wreg      unsigned char 
  9035 ;; Registers used:
  9036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9037 ;; Tracked objects:
  9038 ;;		On entry : E/1
  9039 ;;		On exit  : 0/0
  9040 ;;		Unchanged: 0/0
  9041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9042 ;;      Params:         1       0       0       0       0       0       0
  9043 ;;      Locals:         2       0       0       0       0       0       0
  9044 ;;      Temps:          4       0       0       0       0       0       0
  9045 ;;      Totals:         7       0       0       0       0       0       0
  9046 ;;Total ram usage:        7 bytes
  9047 ;; Hardware stack levels used:    1
  9048 ;; Hardware stack levels required when called:    5
  9049 ;; This function calls:
  9050 ;;		_vscp_getGUID
  9051 ;;		_vscp_setGUID
  9052 ;;		_vscp_getUserID
  9053 ;;		_vscp_setUserID
  9054 ;;		_vscp_getManufacturerId
  9055 ;;		_vscp_setManufacturerId
  9056 ;;		_vscp_restoreDefaults
  9057 ;; This function is called by:
  9058 ;;		_vscp_writeRegister
  9059 ;;		_vscp_handleProtocolEvent
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text36
  9064  0045F6                     __ptext36:
  9065                           	opt stack 0
  9066  0045F6                     _vscp_writeStdReg:
  9067                           	opt stack 24
  9068                           
  9069                           ;incstack = 0
  9070                           ;incstack = 0
  9071                           ;vscp_writeStdReg@reg stored from wreg
  9072  0045F6  CFE8 F021          	movff	wreg,vscp_writeStdReg@reg
  9073                           
  9074                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9075  0045FA  1C1B               	comf	vscp_writeStdReg@value,w,c
  9076  0045FC  6E20               	movwf	vscp_writeStdReg@rv,c
  9077                           
  9078                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9079                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9080  0045FE  0E83               	movlw	131
  9081  004600  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9082  004602  D00E               	goto	l11223
  9083  004604  0E89               	movlw	137
  9084  004606  6021               	cpfslt	vscp_writeStdReg@reg,c
  9085  004608  D00B               	goto	l11223
  9086                           
  9087                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9088  00460A  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9089  00460E  5021               	movf	vscp_writeStdReg@reg,w,c
  9090  004610  0F7C               	addlw	124
  9091  004612  ECCD  F02D         	call	_vscp_setUserID
  9092                           
  9093                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9094  004616  5021               	movf	vscp_writeStdReg@reg,w,c
  9095  004618  0F7C               	addlw	124
  9096  00461A  ECFB  F02D         	call	_vscp_getUserID
  9097  00461E  D06B               	goto	L19
  9098  004620                     l11223:
  9099                           
  9100                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9101  004620  5021               	movf	vscp_writeStdReg@reg,w,c
  9102  004622  0A92               	xorlw	146
  9103  004624  E10D               	bnz	l11229
  9104                           
  9105                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9106  004626  501B               	movf	vscp_writeStdReg@value,w,c
  9107  004628  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9108  00462A  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9109  00462C  5046               	movf	_vscp_page_select,w,c
  9110  00462E  6E1E               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9111  004630  6A1F               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9112  004632  101C               	iorwf	??_vscp_writeStdReg,w,c
  9113  004634  6E46               	movwf	_vscp_page_select,c
  9114  004636  501D               	movf	??_vscp_writeStdReg+1,w,c
  9115  004638  101F               	iorwf	??_vscp_writeStdReg+3,w,c
  9116  00463A  6E47               	movwf	_vscp_page_select+1,c
  9117                           
  9118                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9119  00463C  5047               	movf	_vscp_page_select+1,w,c
  9120  00463E  D05B               	goto	L19
  9121  004640                     l11229:
  9122                           
  9123                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9124  004640  5021               	movf	vscp_writeStdReg@reg,w,c
  9125  004642  0A93               	xorlw	147
  9126  004644  E10B               	bnz	l11235
  9127                           
  9128                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9129  004646  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9130  004648  5047               	movf	_vscp_page_select+1,w,c
  9131  00464A  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9132  00464C  501B               	movf	vscp_writeStdReg@value,w,c
  9133  00464E  101C               	iorwf	??_vscp_writeStdReg,w,c
  9134  004650  6E46               	movwf	_vscp_page_select,c
  9135  004652  501D               	movf	??_vscp_writeStdReg+1,w,c
  9136  004654  6E47               	movwf	_vscp_page_select+1,c
  9137                           
  9138                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9139  004656  C046  F020         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9140                           
  9141                           ;vscp_firmware.c: 737: }
  9142  00465A  D050               	goto	l11277
  9143  00465C                     l11235:
  9144                           
  9145                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9146  00465C  0E88               	movlw	136
  9147  00465E  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9148  004660  D019               	goto	l11247
  9149  004662  0E91               	movlw	145
  9150  004664  6021               	cpfslt	vscp_writeStdReg@reg,c
  9151  004666  D016               	goto	l11247
  9152                           
  9153                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9154                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9155  004668  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9156  00466C  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9157  004670  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9158  004672  281D               	incf	??_vscp_writeStdReg+1,w,c
  9159  004674  E102               	bnz	l11243
  9160  004676  2846               	incf	_vscp_page_select,w,c
  9161  004678  E002               	bz	l11245
  9162  00467A                     l11243:
  9163                           
  9164                           ;vscp_firmware.c: 747: rv = ~value;
  9165  00467A  1C1B               	comf	vscp_writeStdReg@value,w,c
  9166  00467C  D03C               	goto	L19
  9167  00467E                     l11245:
  9168                           
  9169                           ;vscp_firmware.c: 749: else {
  9170                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9171  00467E  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9172  004682  5021               	movf	vscp_writeStdReg@reg,w,c
  9173  004684  0F77               	addlw	119
  9174  004686  ECC1  F02D         	call	_vscp_setManufacturerId
  9175                           
  9176                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9177  00468A  5021               	movf	vscp_writeStdReg@reg,w,c
  9178  00468C  0F77               	addlw	119
  9179  00468E  ECF1  F02D         	call	_vscp_getManufacturerId
  9180  004692  D031               	goto	L19
  9181  004694                     l11247:
  9182                           
  9183                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9184  004694  0ECF               	movlw	207
  9185  004696  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9186  004698  D017               	goto	l11259
  9187  00469A  0EE0               	movlw	224
  9188  00469C  6021               	cpfslt	vscp_writeStdReg@reg,c
  9189  00469E  D014               	goto	l11259
  9190                           
  9191                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9192                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9193  0046A0  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9194  0046A4  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9195  0046A8  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9196  0046AA  281D               	incf	??_vscp_writeStdReg+1,w,c
  9197  0046AC  E1E6               	bnz	l11243
  9198  0046AE  2846               	incf	_vscp_page_select,w,c
  9199  0046B0  E1E4               	bnz	l11243
  9200                           
  9201                           ;vscp_firmware.c: 762: else {
  9202                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9203  0046B2  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9204  0046B6  5021               	movf	vscp_writeStdReg@reg,w,c
  9205  0046B8  0F30               	addlw	48
  9206  0046BA  EC69  F02D         	call	_vscp_setGUID
  9207                           
  9208                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9209  0046BE  5021               	movf	vscp_writeStdReg@reg,w,c
  9210  0046C0  0F30               	addlw	48
  9211  0046C2  EC05  F02E         	call	_vscp_getGUID
  9212  0046C6  D017               	goto	L19
  9213  0046C8                     l11259:
  9214                           
  9215                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9216  0046C8  5021               	movf	vscp_writeStdReg@reg,w,c
  9217  0046CA  0AA2               	xorlw	162
  9218  0046CC  E1D6               	bnz	l11243
  9219                           
  9220                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9221  0046CE  501B               	movf	vscp_writeStdReg@value,w,c
  9222  0046D0  0A55               	xorlw	85
  9223  0046D2  E105               	bnz	l11267
  9224                           
  9225                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9226  0046D4  0100               	movlb	0	; () banked
  9227  0046D6  6BBF               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9228  0046D8  6BC0               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;vscp_firmware.c: 771: rv = 0x55;
  9232  0046DA  0E55               	movlw	85
  9233  0046DC  D00C               	goto	L19
  9234  0046DE                     l11267:
  9235                           
  9236                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9237  0046DE  501B               	movf	vscp_writeStdReg@value,w,c
  9238  0046E0  0AAA               	xorlw	170
  9239  0046E2  E10C               	bnz	l11277
  9240                           
  9241                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9242  0046E4  0EE8               	movlw	232
  9243  0046E6  0100               	movlb	0	; () banked
  9244  0046E8  5DBF               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9245  0046EA  0E03               	movlw	3
  9246  0046EC  59C0               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9247  0046EE  E205               	bc	l1175
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9251  0046F0  EC64  F02E         	call	_vscp_restoreDefaults	;wreg free
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;vscp_firmware.c: 776: rv = 0xaa;
  9255  0046F4  0EAA               	movlw	170
  9256  0046F6                     L19:
  9257  0046F6  6E20               	movwf	vscp_writeStdReg@rv,c
  9258                           
  9259                           ;vscp_firmware.c: 777: }
  9260  0046F8  D001               	goto	l11277
  9261  0046FA                     l1175:
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;vscp_firmware.c: 778: else {
  9265                           ;vscp_firmware.c: 779: rv = 0;
  9266  0046FA  6A20               	clrf	vscp_writeStdReg@rv,c
  9267  0046FC                     l11277:
  9268                           
  9269                           ;vscp_firmware.c: 787: }
  9270                           ;vscp_firmware.c: 789: return rv;
  9271  0046FC  5020               	movf	vscp_writeStdReg@rv,w,c
  9272  0046FE  0012               	return	
  9273  004700                     __end_of_vscp_writeStdReg:
  9274                           	opt stack 0
  9275                           tblptru	equ	0xFF8
  9276                           tblptrh	equ	0xFF7
  9277                           tblptrl	equ	0xFF6
  9278                           tablat	equ	0xFF5
  9279                           prodh	equ	0xFF4
  9280                           prodl	equ	0xFF3
  9281                           postinc0	equ	0xFEE
  9282                           wreg	equ	0xFE8
  9283                           postdec1	equ	0xFE5
  9284                           fsr1h	equ	0xFE2
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293 ;; *************** function _vscp_restoreDefaults *****************
  9294 ;; Defined at:
  9295 ;;		line 2835 in file "../main.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;		None
  9300 ;; Return value:  Size  Location     Type
  9301 ;;		None               void
  9302 ;; Registers used:
  9303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9304 ;; Tracked objects:
  9305 ;;		On entry : F/0
  9306 ;;		On exit  : F/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9309 ;;      Params:         0       0       0       0       0       0       0
  9310 ;;      Locals:         0       0       0       0       0       0       0
  9311 ;;      Temps:          0       0       0       0       0       0       0
  9312 ;;      Totals:         0       0       0       0       0       0       0
  9313 ;;Total ram usage:        0 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    4
  9316 ;; This function calls:
  9317 ;;		_init_app_eeprom
  9318 ;;		_init_app_ram
  9319 ;; This function is called by:
  9320 ;;		_vscp_writeStdReg
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           	psect	text37
  9325  005CC8                     __ptext37:
  9326                           	opt stack 0
  9327  005CC8                     _vscp_restoreDefaults:
  9328                           	opt stack 24
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;main.c: 2836: init_app_eeprom();
  9332                           
  9333                           ;incstack = 0
  9334                           ;incstack = 0
  9335  005CC8  EC37  F017         	call	_init_app_eeprom	;wreg free
  9336                           
  9337                           ;main.c: 2837: init_app_ram();
  9338  005CCC  EF5A  F02B         	goto	_init_app_ram	;wreg free
  9339  005CD0                     __end_of_vscp_restoreDefaults:
  9340                           	opt stack 0
  9341                           tblptru	equ	0xFF8
  9342                           tblptrh	equ	0xFF7
  9343                           tblptrl	equ	0xFF6
  9344                           tablat	equ	0xFF5
  9345                           prodh	equ	0xFF4
  9346                           prodl	equ	0xFF3
  9347                           postinc0	equ	0xFEE
  9348                           wreg	equ	0xFE8
  9349                           postdec1	equ	0xFE5
  9350                           fsr1h	equ	0xFE2
  9351                           fsr1l	equ	0xFE1
  9352                           indf2	equ	0xFDF
  9353                           postinc2	equ	0xFDE
  9354                           postdec2	equ	0xFDD
  9355                           fsr2h	equ	0xFDA
  9356                           fsr2l	equ	0xFD9
  9357                           status	equ	0xFD8
  9358                           
  9359 ;; *************** function _init_app_eeprom *****************
  9360 ;; Defined at:
  9361 ;;		line 1012 in file "../main.c"
  9362 ;; Parameters:    Size  Location     Type
  9363 ;;		None
  9364 ;; Auto vars:     Size  Location     Type
  9365 ;;		None
  9366 ;; Return value:  Size  Location     Type
  9367 ;;		None               void
  9368 ;; Registers used:
  9369 ;;		wreg, status,2, cstack
  9370 ;; Tracked objects:
  9371 ;;		On entry : 0/0
  9372 ;;		On exit  : 0/0
  9373 ;;		Unchanged: 0/0
  9374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9375 ;;      Params:         0       0       0       0       0       0       0
  9376 ;;      Locals:         0       0       0       0       0       0       0
  9377 ;;      Temps:          0       0       0       0       0       0       0
  9378 ;;      Totals:         0       0       0       0       0       0       0
  9379 ;;Total ram usage:        0 bytes
  9380 ;; Hardware stack levels used:    1
  9381 ;; Hardware stack levels required when called:    3
  9382 ;; This function calls:
  9383 ;;		_writeEEPROM
  9384 ;; This function is called by:
  9385 ;;		_main
  9386 ;;		_vscp_restoreDefaults
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text38
  9391  002E6E                     __ptext38:
  9392                           	opt stack 0
  9393  002E6E                     _init_app_eeprom:
  9394                           	opt stack 24
  9395                           
  9396                           ;main.c: 1014: writeEEPROM( 0x41, 0 );
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;incstack = 0
  9400                           ;incstack = 0
  9401  002E6E  6A0F               	clrf	?_writeEEPROM+1,c
  9402  002E70  0E41               	movlw	65
  9403  002E72  6E0E               	movwf	?_writeEEPROM,c
  9404  002E74  0E00               	movlw	0
  9405  002E76  6A10               	clrf	?_writeEEPROM+2,c
  9406  002E78  EC21  F02D         	call	_writeEEPROM	;wreg free
  9407                           
  9408                           ;main.c: 1015: writeEEPROM( 0x41, 0 );
  9409  002E7C  6A0F               	clrf	?_writeEEPROM+1,c
  9410  002E7E  0E41               	movlw	65
  9411  002E80  6E0E               	movwf	?_writeEEPROM,c
  9412  002E82  0E00               	movlw	0
  9413  002E84  6A10               	clrf	?_writeEEPROM+2,c
  9414  002E86  EC21  F02D         	call	_writeEEPROM	;wreg free
  9415                           
  9416                           ;main.c: 1017: writeEEPROM(0x43, 0b00000001);
  9417  002E8A  6A0F               	clrf	?_writeEEPROM+1,c
  9418  002E8C  0E43               	movlw	67
  9419  002E8E  6E0E               	movwf	?_writeEEPROM,c
  9420  002E90  0E01               	movlw	1
  9421  002E92  6E10               	movwf	?_writeEEPROM+2,c
  9422  002E94  EC21  F02D         	call	_writeEEPROM	;wreg free
  9423                           
  9424                           ;main.c: 1018: writeEEPROM(0x44, 0b00000001);
  9425  002E98  6A0F               	clrf	?_writeEEPROM+1,c
  9426  002E9A  0E44               	movlw	68
  9427  002E9C  6E0E               	movwf	?_writeEEPROM,c
  9428  002E9E  0E01               	movlw	1
  9429  002EA0  6E10               	movwf	?_writeEEPROM+2,c
  9430  002EA2  EC21  F02D         	call	_writeEEPROM	;wreg free
  9431                           
  9432                           ;main.c: 1019: writeEEPROM(0x45, 0b00000001);
  9433  002EA6  6A0F               	clrf	?_writeEEPROM+1,c
  9434  002EA8  0E45               	movlw	69
  9435  002EAA  6E0E               	movwf	?_writeEEPROM,c
  9436  002EAC  0E01               	movlw	1
  9437  002EAE  6E10               	movwf	?_writeEEPROM+2,c
  9438  002EB0  EC21  F02D         	call	_writeEEPROM	;wreg free
  9439                           
  9440                           ;main.c: 1020: writeEEPROM(0x46, 0b00000001);
  9441  002EB4  6A0F               	clrf	?_writeEEPROM+1,c
  9442  002EB6  0E46               	movlw	70
  9443  002EB8  6E0E               	movwf	?_writeEEPROM,c
  9444  002EBA  0E01               	movlw	1
  9445  002EBC  6E10               	movwf	?_writeEEPROM+2,c
  9446  002EBE  EC21  F02D         	call	_writeEEPROM	;wreg free
  9447                           
  9448                           ;main.c: 1021: writeEEPROM(0x47, 0b00000001);
  9449  002EC2  6A0F               	clrf	?_writeEEPROM+1,c
  9450  002EC4  0E47               	movlw	71
  9451  002EC6  6E0E               	movwf	?_writeEEPROM,c
  9452  002EC8  0E01               	movlw	1
  9453  002ECA  6E10               	movwf	?_writeEEPROM+2,c
  9454  002ECC  EC21  F02D         	call	_writeEEPROM	;wreg free
  9455                           
  9456                           ;main.c: 1022: writeEEPROM(0x48, 0b00000001);
  9457  002ED0  6A0F               	clrf	?_writeEEPROM+1,c
  9458  002ED2  0E48               	movlw	72
  9459  002ED4  6E0E               	movwf	?_writeEEPROM,c
  9460  002ED6  0E01               	movlw	1
  9461  002ED8  6E10               	movwf	?_writeEEPROM+2,c
  9462  002EDA  EC21  F02D         	call	_writeEEPROM	;wreg free
  9463                           
  9464                           ;main.c: 1024: writeEEPROM(0x49, 30);
  9465  002EDE  6A0F               	clrf	?_writeEEPROM+1,c
  9466  002EE0  0E49               	movlw	73
  9467  002EE2  6E0E               	movwf	?_writeEEPROM,c
  9468  002EE4  0E1E               	movlw	30
  9469  002EE6  6E10               	movwf	?_writeEEPROM+2,c
  9470  002EE8  EC21  F02D         	call	_writeEEPROM	;wreg free
  9471                           
  9472                           ;main.c: 1025: writeEEPROM(0x4A, 0);
  9473  002EEC  6A0F               	clrf	?_writeEEPROM+1,c
  9474  002EEE  0E4A               	movlw	74
  9475  002EF0  6E0E               	movwf	?_writeEEPROM,c
  9476  002EF2  0E00               	movlw	0
  9477  002EF4  6A10               	clrf	?_writeEEPROM+2,c
  9478  002EF6  EC21  F02D         	call	_writeEEPROM	;wreg free
  9479                           
  9480                           ;main.c: 1026: writeEEPROM(0x4B, 0);
  9481  002EFA  6A0F               	clrf	?_writeEEPROM+1,c
  9482  002EFC  0E4B               	movlw	75
  9483  002EFE  6E0E               	movwf	?_writeEEPROM,c
  9484  002F00  0E00               	movlw	0
  9485  002F02  6A10               	clrf	?_writeEEPROM+2,c
  9486  002F04  EC21  F02D         	call	_writeEEPROM	;wreg free
  9487                           
  9488                           ;main.c: 1027: writeEEPROM(0x4C, 0);
  9489  002F08  6A0F               	clrf	?_writeEEPROM+1,c
  9490  002F0A  0E4C               	movlw	76
  9491  002F0C  6E0E               	movwf	?_writeEEPROM,c
  9492  002F0E  0E00               	movlw	0
  9493  002F10  6A10               	clrf	?_writeEEPROM+2,c
  9494  002F12  EC21  F02D         	call	_writeEEPROM	;wreg free
  9495                           
  9496                           ;main.c: 1028: writeEEPROM(0x4D, 0);
  9497  002F16  6A0F               	clrf	?_writeEEPROM+1,c
  9498  002F18  0E4D               	movlw	77
  9499  002F1A  6E0E               	movwf	?_writeEEPROM,c
  9500  002F1C  0E00               	movlw	0
  9501  002F1E  6A10               	clrf	?_writeEEPROM+2,c
  9502  002F20  EC21  F02D         	call	_writeEEPROM	;wreg free
  9503                           
  9504                           ;main.c: 1029: writeEEPROM(0x4E, 0);
  9505  002F24  6A0F               	clrf	?_writeEEPROM+1,c
  9506  002F26  0E4E               	movlw	78
  9507  002F28  6E0E               	movwf	?_writeEEPROM,c
  9508  002F2A  0E00               	movlw	0
  9509  002F2C  6A10               	clrf	?_writeEEPROM+2,c
  9510  002F2E  EC21  F02D         	call	_writeEEPROM	;wreg free
  9511                           
  9512                           ;main.c: 1033: writeEEPROM(0x4F, 0x0F);
  9513  002F32  6A0F               	clrf	?_writeEEPROM+1,c
  9514  002F34  0E4F               	movlw	79
  9515  002F36  6E0E               	movwf	?_writeEEPROM,c
  9516  002F38  0E0F               	movlw	15
  9517  002F3A  6E10               	movwf	?_writeEEPROM+2,c
  9518  002F3C  EC21  F02D         	call	_writeEEPROM	;wreg free
  9519                           
  9520                           ;main.c: 1034: writeEEPROM(0x50, 0x68);
  9521  002F40  6A0F               	clrf	?_writeEEPROM+1,c
  9522  002F42  0E50               	movlw	80
  9523  002F44  6E0E               	movwf	?_writeEEPROM,c
  9524  002F46  0E68               	movlw	104
  9525  002F48  6E10               	movwf	?_writeEEPROM+2,c
  9526  002F4A  EC21  F02D         	call	_writeEEPROM	;wreg free
  9527                           
  9528                           ;main.c: 1036: writeEEPROM(0x51, 0x0D);
  9529  002F4E  6A0F               	clrf	?_writeEEPROM+1,c
  9530  002F50  0E51               	movlw	81
  9531  002F52  6E0E               	movwf	?_writeEEPROM,c
  9532  002F54  0E0D               	movlw	13
  9533  002F56  6E10               	movwf	?_writeEEPROM+2,c
  9534  002F58  EC21  F02D         	call	_writeEEPROM	;wreg free
  9535                           
  9536                           ;main.c: 1037: writeEEPROM(0x52, 0x7F);
  9537  002F5C  6A0F               	clrf	?_writeEEPROM+1,c
  9538  002F5E  0E52               	movlw	82
  9539  002F60  6E0E               	movwf	?_writeEEPROM,c
  9540  002F62  0E7F               	movlw	127
  9541  002F64  6E10               	movwf	?_writeEEPROM+2,c
  9542  002F66  EC21  F02D         	call	_writeEEPROM	;wreg free
  9543                           
  9544                           ;main.c: 1039: writeEEPROM(0x53, 0x0D);
  9545  002F6A  6A0F               	clrf	?_writeEEPROM+1,c
  9546  002F6C  0E53               	movlw	83
  9547  002F6E  6E0E               	movwf	?_writeEEPROM,c
  9548  002F70  0E0D               	movlw	13
  9549  002F72  6E10               	movwf	?_writeEEPROM+2,c
  9550  002F74  EC21  F02D         	call	_writeEEPROM	;wreg free
  9551                           
  9552                           ;main.c: 1040: writeEEPROM(0x54, 0x7F);
  9553  002F78  6A0F               	clrf	?_writeEEPROM+1,c
  9554  002F7A  0E54               	movlw	84
  9555  002F7C  6E0E               	movwf	?_writeEEPROM,c
  9556  002F7E  0E7F               	movlw	127
  9557  002F80  6E10               	movwf	?_writeEEPROM+2,c
  9558  002F82  EC21  F02D         	call	_writeEEPROM	;wreg free
  9559                           
  9560                           ;main.c: 1042: writeEEPROM(0x55, 0x0D);
  9561  002F86  6A0F               	clrf	?_writeEEPROM+1,c
  9562  002F88  0E55               	movlw	85
  9563  002F8A  6E0E               	movwf	?_writeEEPROM,c
  9564  002F8C  0E0D               	movlw	13
  9565  002F8E  6E10               	movwf	?_writeEEPROM+2,c
  9566  002F90  EC21  F02D         	call	_writeEEPROM	;wreg free
  9567                           
  9568                           ;main.c: 1043: writeEEPROM(0x56, 0x7F);
  9569  002F94  6A0F               	clrf	?_writeEEPROM+1,c
  9570  002F96  0E56               	movlw	86
  9571  002F98  6E0E               	movwf	?_writeEEPROM,c
  9572  002F9A  0E7F               	movlw	127
  9573  002F9C  6E10               	movwf	?_writeEEPROM+2,c
  9574  002F9E  EC21  F02D         	call	_writeEEPROM	;wreg free
  9575                           
  9576                           ;main.c: 1045: writeEEPROM(0x57, 0x0D);
  9577  002FA2  6A0F               	clrf	?_writeEEPROM+1,c
  9578  002FA4  0E57               	movlw	87
  9579  002FA6  6E0E               	movwf	?_writeEEPROM,c
  9580  002FA8  0E0D               	movlw	13
  9581  002FAA  6E10               	movwf	?_writeEEPROM+2,c
  9582  002FAC  EC21  F02D         	call	_writeEEPROM	;wreg free
  9583                           
  9584                           ;main.c: 1046: writeEEPROM(0x58, 0x7F);
  9585  002FB0  6A0F               	clrf	?_writeEEPROM+1,c
  9586  002FB2  0E58               	movlw	88
  9587  002FB4  6E0E               	movwf	?_writeEEPROM,c
  9588  002FB6  0E7F               	movlw	127
  9589  002FB8  6E10               	movwf	?_writeEEPROM+2,c
  9590  002FBA  EC21  F02D         	call	_writeEEPROM	;wreg free
  9591                           
  9592                           ;main.c: 1048: writeEEPROM(0x59, 0x0D);
  9593  002FBE  6A0F               	clrf	?_writeEEPROM+1,c
  9594  002FC0  0E59               	movlw	89
  9595  002FC2  6E0E               	movwf	?_writeEEPROM,c
  9596  002FC4  0E0D               	movlw	13
  9597  002FC6  6E10               	movwf	?_writeEEPROM+2,c
  9598  002FC8  EC21  F02D         	call	_writeEEPROM	;wreg free
  9599                           
  9600                           ;main.c: 1049: writeEEPROM(0x5A, 0x7F);
  9601  002FCC  6A0F               	clrf	?_writeEEPROM+1,c
  9602  002FCE  0E5A               	movlw	90
  9603  002FD0  6E0E               	movwf	?_writeEEPROM,c
  9604  002FD2  0E7F               	movlw	127
  9605  002FD4  6E10               	movwf	?_writeEEPROM+2,c
  9606  002FD6  EC21  F02D         	call	_writeEEPROM	;wreg free
  9607                           
  9608                           ;main.c: 1053: writeEEPROM(0x5B, 0x80);
  9609  002FDA  6A0F               	clrf	?_writeEEPROM+1,c
  9610  002FDC  0E5B               	movlw	91
  9611  002FDE  6E0E               	movwf	?_writeEEPROM,c
  9612  002FE0  0E80               	movlw	128
  9613  002FE2  6E10               	movwf	?_writeEEPROM+2,c
  9614  002FE4  EC21  F02D         	call	_writeEEPROM	;wreg free
  9615                           
  9616                           ;main.c: 1054: writeEEPROM(0x5C, 0xff);
  9617  002FE8  6A0F               	clrf	?_writeEEPROM+1,c
  9618  002FEA  0E5C               	movlw	92
  9619  002FEC  6E0E               	movwf	?_writeEEPROM,c
  9620  002FEE  0EFF               	movlw	255
  9621  002FF0  6810               	setf	?_writeEEPROM+2,c
  9622  002FF2  EC21  F02D         	call	_writeEEPROM	;wreg free
  9623                           
  9624                           ;main.c: 1056: writeEEPROM(0x5D, 0x80);
  9625  002FF6  6A0F               	clrf	?_writeEEPROM+1,c
  9626  002FF8  0E5D               	movlw	93
  9627  002FFA  6E0E               	movwf	?_writeEEPROM,c
  9628  002FFC  0E80               	movlw	128
  9629  002FFE  6E10               	movwf	?_writeEEPROM+2,c
  9630  003000  EC21  F02D         	call	_writeEEPROM	;wreg free
  9631                           
  9632                           ;main.c: 1057: writeEEPROM(0x5E, 0xff);
  9633  003004  6A0F               	clrf	?_writeEEPROM+1,c
  9634  003006  0E5E               	movlw	94
  9635  003008  6E0E               	movwf	?_writeEEPROM,c
  9636  00300A  0EFF               	movlw	255
  9637  00300C  6810               	setf	?_writeEEPROM+2,c
  9638  00300E  EC21  F02D         	call	_writeEEPROM	;wreg free
  9639                           
  9640                           ;main.c: 1059: writeEEPROM(0x5F, 0x80);
  9641  003012  6A0F               	clrf	?_writeEEPROM+1,c
  9642  003014  0E5F               	movlw	95
  9643  003016  6E0E               	movwf	?_writeEEPROM,c
  9644  003018  0E80               	movlw	128
  9645  00301A  6E10               	movwf	?_writeEEPROM+2,c
  9646  00301C  EC21  F02D         	call	_writeEEPROM	;wreg free
  9647                           
  9648                           ;main.c: 1060: writeEEPROM(0x60, 0xff);
  9649  003020  6A0F               	clrf	?_writeEEPROM+1,c
  9650  003022  0E60               	movlw	96
  9651  003024  6E0E               	movwf	?_writeEEPROM,c
  9652  003026  0EFF               	movlw	255
  9653  003028  6810               	setf	?_writeEEPROM+2,c
  9654  00302A  EC21  F02D         	call	_writeEEPROM	;wreg free
  9655                           
  9656                           ;main.c: 1062: writeEEPROM(0x61, 0x80);
  9657  00302E  6A0F               	clrf	?_writeEEPROM+1,c
  9658  003030  0E61               	movlw	97
  9659  003032  6E0E               	movwf	?_writeEEPROM,c
  9660  003034  0E80               	movlw	128
  9661  003036  6E10               	movwf	?_writeEEPROM+2,c
  9662  003038  EC21  F02D         	call	_writeEEPROM	;wreg free
  9663                           
  9664                           ;main.c: 1063: writeEEPROM(0x62, 0xff);
  9665  00303C  6A0F               	clrf	?_writeEEPROM+1,c
  9666  00303E  0E62               	movlw	98
  9667  003040  6E0E               	movwf	?_writeEEPROM,c
  9668  003042  0EFF               	movlw	255
  9669  003044  6810               	setf	?_writeEEPROM+2,c
  9670  003046  EC21  F02D         	call	_writeEEPROM	;wreg free
  9671                           
  9672                           ;main.c: 1065: writeEEPROM(0x63, 0x80);
  9673  00304A  6A0F               	clrf	?_writeEEPROM+1,c
  9674  00304C  0E63               	movlw	99
  9675  00304E  6E0E               	movwf	?_writeEEPROM,c
  9676  003050  0E80               	movlw	128
  9677  003052  6E10               	movwf	?_writeEEPROM+2,c
  9678  003054  EC21  F02D         	call	_writeEEPROM	;wreg free
  9679                           
  9680                           ;main.c: 1066: writeEEPROM(0x64, 0xff);
  9681  003058  6A0F               	clrf	?_writeEEPROM+1,c
  9682  00305A  0E64               	movlw	100
  9683  00305C  6E0E               	movwf	?_writeEEPROM,c
  9684  00305E  0EFF               	movlw	255
  9685  003060  6810               	setf	?_writeEEPROM+2,c
  9686  003062  EC21  F02D         	call	_writeEEPROM	;wreg free
  9687                           
  9688                           ;main.c: 1068: writeEEPROM(0x65, 0x80);
  9689  003066  6A0F               	clrf	?_writeEEPROM+1,c
  9690  003068  0E65               	movlw	101
  9691  00306A  6E0E               	movwf	?_writeEEPROM,c
  9692  00306C  0E80               	movlw	128
  9693  00306E  6E10               	movwf	?_writeEEPROM+2,c
  9694  003070  EC21  F02D         	call	_writeEEPROM	;wreg free
  9695                           
  9696                           ;main.c: 1069: writeEEPROM(0x66, 0xff);
  9697  003074  6A0F               	clrf	?_writeEEPROM+1,c
  9698  003076  0E66               	movlw	102
  9699  003078  6E0E               	movwf	?_writeEEPROM,c
  9700  00307A  0EFF               	movlw	255
  9701  00307C  6810               	setf	?_writeEEPROM+2,c
  9702  00307E  EC21  F02D         	call	_writeEEPROM	;wreg free
  9703                           
  9704                           ;main.c: 1073: writeEEPROM(0x67, 0x7f);
  9705  003082  6A0F               	clrf	?_writeEEPROM+1,c
  9706  003084  0E67               	movlw	103
  9707  003086  6E0E               	movwf	?_writeEEPROM,c
  9708  003088  0E7F               	movlw	127
  9709  00308A  6E10               	movwf	?_writeEEPROM+2,c
  9710  00308C  EC21  F02D         	call	_writeEEPROM	;wreg free
  9711                           
  9712                           ;main.c: 1074: writeEEPROM(0x68, 0xff);
  9713  003090  6A0F               	clrf	?_writeEEPROM+1,c
  9714  003092  0E68               	movlw	104
  9715  003094  6E0E               	movwf	?_writeEEPROM,c
  9716  003096  0EFF               	movlw	255
  9717  003098  6810               	setf	?_writeEEPROM+2,c
  9718  00309A  EC21  F02D         	call	_writeEEPROM	;wreg free
  9719                           
  9720                           ;main.c: 1076: writeEEPROM(0x69, 0x7f);
  9721  00309E  6A0F               	clrf	?_writeEEPROM+1,c
  9722  0030A0  0E69               	movlw	105
  9723  0030A2  6E0E               	movwf	?_writeEEPROM,c
  9724  0030A4  0E7F               	movlw	127
  9725  0030A6  6E10               	movwf	?_writeEEPROM+2,c
  9726  0030A8  EC21  F02D         	call	_writeEEPROM	;wreg free
  9727                           
  9728                           ;main.c: 1077: writeEEPROM(0x6A, 0xff);
  9729  0030AC  6A0F               	clrf	?_writeEEPROM+1,c
  9730  0030AE  0E6A               	movlw	106
  9731  0030B0  6E0E               	movwf	?_writeEEPROM,c
  9732  0030B2  0EFF               	movlw	255
  9733  0030B4  6810               	setf	?_writeEEPROM+2,c
  9734  0030B6  EC21  F02D         	call	_writeEEPROM	;wreg free
  9735                           
  9736                           ;main.c: 1079: writeEEPROM(0x6B, 0x7f);
  9737  0030BA  6A0F               	clrf	?_writeEEPROM+1,c
  9738  0030BC  0E6B               	movlw	107
  9739  0030BE  6E0E               	movwf	?_writeEEPROM,c
  9740  0030C0  0E7F               	movlw	127
  9741  0030C2  6E10               	movwf	?_writeEEPROM+2,c
  9742  0030C4  EC21  F02D         	call	_writeEEPROM	;wreg free
  9743                           
  9744                           ;main.c: 1080: writeEEPROM(0x6C, 0xff);
  9745  0030C8  6A0F               	clrf	?_writeEEPROM+1,c
  9746  0030CA  0E6C               	movlw	108
  9747  0030CC  6E0E               	movwf	?_writeEEPROM,c
  9748  0030CE  0EFF               	movlw	255
  9749  0030D0  6810               	setf	?_writeEEPROM+2,c
  9750  0030D2  EC21  F02D         	call	_writeEEPROM	;wreg free
  9751                           
  9752                           ;main.c: 1082: writeEEPROM(0x6D, 0x7f);
  9753  0030D6  6A0F               	clrf	?_writeEEPROM+1,c
  9754  0030D8  0E6D               	movlw	109
  9755  0030DA  6E0E               	movwf	?_writeEEPROM,c
  9756  0030DC  0E7F               	movlw	127
  9757  0030DE  6E10               	movwf	?_writeEEPROM+2,c
  9758  0030E0  EC21  F02D         	call	_writeEEPROM	;wreg free
  9759                           
  9760                           ;main.c: 1083: writeEEPROM(0x6E, 0xff);
  9761  0030E4  6A0F               	clrf	?_writeEEPROM+1,c
  9762  0030E6  0E6E               	movlw	110
  9763  0030E8  6E0E               	movwf	?_writeEEPROM,c
  9764  0030EA  0EFF               	movlw	255
  9765  0030EC  6810               	setf	?_writeEEPROM+2,c
  9766  0030EE  EC21  F02D         	call	_writeEEPROM	;wreg free
  9767                           
  9768                           ;main.c: 1085: writeEEPROM(0x6F, 0x7f);
  9769  0030F2  6A0F               	clrf	?_writeEEPROM+1,c
  9770  0030F4  0E6F               	movlw	111
  9771  0030F6  6E0E               	movwf	?_writeEEPROM,c
  9772  0030F8  0E7F               	movlw	127
  9773  0030FA  6E10               	movwf	?_writeEEPROM+2,c
  9774  0030FC  EC21  F02D         	call	_writeEEPROM	;wreg free
  9775                           
  9776                           ;main.c: 1086: writeEEPROM(0x70, 0xff);
  9777  003100  6A0F               	clrf	?_writeEEPROM+1,c
  9778  003102  0E70               	movlw	112
  9779  003104  6E0E               	movwf	?_writeEEPROM,c
  9780  003106  0EFF               	movlw	255
  9781  003108  6810               	setf	?_writeEEPROM+2,c
  9782  00310A  EC21  F02D         	call	_writeEEPROM	;wreg free
  9783                           
  9784                           ;main.c: 1088: writeEEPROM(0x71, 0x7f);
  9785  00310E  6A0F               	clrf	?_writeEEPROM+1,c
  9786  003110  0E71               	movlw	113
  9787  003112  6E0E               	movwf	?_writeEEPROM,c
  9788  003114  0E7F               	movlw	127
  9789  003116  6E10               	movwf	?_writeEEPROM+2,c
  9790  003118  EC21  F02D         	call	_writeEEPROM	;wreg free
  9791                           
  9792                           ;main.c: 1089: writeEEPROM(0x72, 0xff);
  9793  00311C  6A0F               	clrf	?_writeEEPROM+1,c
  9794  00311E  0E72               	movlw	114
  9795  003120  6E0E               	movwf	?_writeEEPROM,c
  9796  003122  0EFF               	movlw	255
  9797  003124  6810               	setf	?_writeEEPROM+2,c
  9798  003126  EC21  F02D         	call	_writeEEPROM	;wreg free
  9799                           
  9800                           ;main.c: 1093: writeEEPROM(0x73, 0);
  9801  00312A  6A0F               	clrf	?_writeEEPROM+1,c
  9802  00312C  0E73               	movlw	115
  9803  00312E  6E0E               	movwf	?_writeEEPROM,c
  9804  003130  0E00               	movlw	0
  9805  003132  6A10               	clrf	?_writeEEPROM+2,c
  9806  003134  EC21  F02D         	call	_writeEEPROM	;wreg free
  9807                           
  9808                           ;main.c: 1094: writeEEPROM(0x74, 0);
  9809  003138  6A0F               	clrf	?_writeEEPROM+1,c
  9810  00313A  0E74               	movlw	116
  9811  00313C  6E0E               	movwf	?_writeEEPROM,c
  9812  00313E  0E00               	movlw	0
  9813  003140  6A10               	clrf	?_writeEEPROM+2,c
  9814  003142  EC21  F02D         	call	_writeEEPROM	;wreg free
  9815                           
  9816                           ;main.c: 1096: writeEEPROM(0x75, 0);
  9817  003146  6A0F               	clrf	?_writeEEPROM+1,c
  9818  003148  0E75               	movlw	117
  9819  00314A  6E0E               	movwf	?_writeEEPROM,c
  9820  00314C  0E00               	movlw	0
  9821  00314E  6A10               	clrf	?_writeEEPROM+2,c
  9822  003150  EC21  F02D         	call	_writeEEPROM	;wreg free
  9823                           
  9824                           ;main.c: 1097: writeEEPROM(0x76, 0);
  9825  003154  6A0F               	clrf	?_writeEEPROM+1,c
  9826  003156  0E76               	movlw	118
  9827  003158  6E0E               	movwf	?_writeEEPROM,c
  9828  00315A  0E00               	movlw	0
  9829  00315C  6A10               	clrf	?_writeEEPROM+2,c
  9830  00315E  EC21  F02D         	call	_writeEEPROM	;wreg free
  9831                           
  9832                           ;main.c: 1099: writeEEPROM(0x77, 0);
  9833  003162  6A0F               	clrf	?_writeEEPROM+1,c
  9834  003164  0E77               	movlw	119
  9835  003166  6E0E               	movwf	?_writeEEPROM,c
  9836  003168  0E00               	movlw	0
  9837  00316A  6A10               	clrf	?_writeEEPROM+2,c
  9838  00316C  EC21  F02D         	call	_writeEEPROM	;wreg free
  9839                           
  9840                           ;main.c: 1100: writeEEPROM(0x78, 0);
  9841  003170  6A0F               	clrf	?_writeEEPROM+1,c
  9842  003172  0E78               	movlw	120
  9843  003174  6E0E               	movwf	?_writeEEPROM,c
  9844  003176  0E00               	movlw	0
  9845  003178  6A10               	clrf	?_writeEEPROM+2,c
  9846  00317A  EC21  F02D         	call	_writeEEPROM	;wreg free
  9847                           
  9848                           ;main.c: 1102: writeEEPROM(0x79, 0);
  9849  00317E  6A0F               	clrf	?_writeEEPROM+1,c
  9850  003180  0E79               	movlw	121
  9851  003182  6E0E               	movwf	?_writeEEPROM,c
  9852  003184  0E00               	movlw	0
  9853  003186  6A10               	clrf	?_writeEEPROM+2,c
  9854  003188  EC21  F02D         	call	_writeEEPROM	;wreg free
  9855                           
  9856                           ;main.c: 1103: writeEEPROM(0x7A, 0);
  9857  00318C  6A0F               	clrf	?_writeEEPROM+1,c
  9858  00318E  0E7A               	movlw	122
  9859  003190  6E0E               	movwf	?_writeEEPROM,c
  9860  003192  0E00               	movlw	0
  9861  003194  6A10               	clrf	?_writeEEPROM+2,c
  9862  003196  EC21  F02D         	call	_writeEEPROM	;wreg free
  9863                           
  9864                           ;main.c: 1105: writeEEPROM(0x7B, 0);
  9865  00319A  6A0F               	clrf	?_writeEEPROM+1,c
  9866  00319C  0E7B               	movlw	123
  9867  00319E  6E0E               	movwf	?_writeEEPROM,c
  9868  0031A0  0E00               	movlw	0
  9869  0031A2  6A10               	clrf	?_writeEEPROM+2,c
  9870  0031A4  EC21  F02D         	call	_writeEEPROM	;wreg free
  9871                           
  9872                           ;main.c: 1106: writeEEPROM(0x7C, 0);
  9873  0031A8  6A0F               	clrf	?_writeEEPROM+1,c
  9874  0031AA  0E7C               	movlw	124
  9875  0031AC  6E0E               	movwf	?_writeEEPROM,c
  9876  0031AE  0E00               	movlw	0
  9877  0031B0  6A10               	clrf	?_writeEEPROM+2,c
  9878  0031B2  EC21  F02D         	call	_writeEEPROM	;wreg free
  9879                           
  9880                           ;main.c: 1108: writeEEPROM(0x7D, 0);
  9881  0031B6  6A0F               	clrf	?_writeEEPROM+1,c
  9882  0031B8  0E7D               	movlw	125
  9883  0031BA  6E0E               	movwf	?_writeEEPROM,c
  9884  0031BC  0E00               	movlw	0
  9885  0031BE  6A10               	clrf	?_writeEEPROM+2,c
  9886  0031C0  EC21  F02D         	call	_writeEEPROM	;wreg free
  9887                           
  9888                           ;main.c: 1109: writeEEPROM(0x7E, 0);
  9889  0031C4  6A0F               	clrf	?_writeEEPROM+1,c
  9890  0031C6  0E7E               	movlw	126
  9891  0031C8  6E0E               	movwf	?_writeEEPROM,c
  9892  0031CA  0E00               	movlw	0
  9893  0031CC  6A10               	clrf	?_writeEEPROM+2,c
  9894  0031CE  EC21  F02D         	call	_writeEEPROM	;wreg free
  9895                           
  9896                           ;main.c: 1113: writeEEPROM(0x7F, 0x7f);
  9897  0031D2  6A0F               	clrf	?_writeEEPROM+1,c
  9898  0031D4  0E7F               	movlw	127
  9899  0031D6  6E0E               	movwf	?_writeEEPROM,c
  9900  0031D8  6E10               	movwf	?_writeEEPROM+2,c
  9901  0031DA  EC21  F02D         	call	_writeEEPROM	;wreg free
  9902                           
  9903                           ;main.c: 1114: writeEEPROM(0x80, 0xff);
  9904  0031DE  6A0F               	clrf	?_writeEEPROM+1,c
  9905  0031E0  0E80               	movlw	128
  9906  0031E2  6E0E               	movwf	?_writeEEPROM,c
  9907  0031E4  0EFF               	movlw	255
  9908  0031E6  6810               	setf	?_writeEEPROM+2,c
  9909  0031E8  EC21  F02D         	call	_writeEEPROM	;wreg free
  9910                           
  9911                           ;main.c: 1116: writeEEPROM(0x81, 0x7f);
  9912  0031EC  6A0F               	clrf	?_writeEEPROM+1,c
  9913  0031EE  0E81               	movlw	129
  9914  0031F0  6E0E               	movwf	?_writeEEPROM,c
  9915  0031F2  0E7F               	movlw	127
  9916  0031F4  6E10               	movwf	?_writeEEPROM+2,c
  9917  0031F6  EC21  F02D         	call	_writeEEPROM	;wreg free
  9918                           
  9919                           ;main.c: 1117: writeEEPROM(0x82, 0xff);
  9920  0031FA  6A0F               	clrf	?_writeEEPROM+1,c
  9921  0031FC  0E82               	movlw	130
  9922  0031FE  6E0E               	movwf	?_writeEEPROM,c
  9923  003200  0EFF               	movlw	255
  9924  003202  6810               	setf	?_writeEEPROM+2,c
  9925  003204  EC21  F02D         	call	_writeEEPROM	;wreg free
  9926                           
  9927                           ;main.c: 1119: writeEEPROM(0x83, 0x7f);
  9928  003208  6A0F               	clrf	?_writeEEPROM+1,c
  9929  00320A  0E83               	movlw	131
  9930  00320C  6E0E               	movwf	?_writeEEPROM,c
  9931  00320E  0E7F               	movlw	127
  9932  003210  6E10               	movwf	?_writeEEPROM+2,c
  9933  003212  EC21  F02D         	call	_writeEEPROM	;wreg free
  9934                           
  9935                           ;main.c: 1120: writeEEPROM(0x84, 0xff);
  9936  003216  6A0F               	clrf	?_writeEEPROM+1,c
  9937  003218  0E84               	movlw	132
  9938  00321A  6E0E               	movwf	?_writeEEPROM,c
  9939  00321C  0EFF               	movlw	255
  9940  00321E  6810               	setf	?_writeEEPROM+2,c
  9941  003220  EC21  F02D         	call	_writeEEPROM	;wreg free
  9942                           
  9943                           ;main.c: 1122: writeEEPROM(0x85, 0x7f);
  9944  003224  6A0F               	clrf	?_writeEEPROM+1,c
  9945  003226  0E85               	movlw	133
  9946  003228  6E0E               	movwf	?_writeEEPROM,c
  9947  00322A  0E7F               	movlw	127
  9948  00322C  6E10               	movwf	?_writeEEPROM+2,c
  9949  00322E  EC21  F02D         	call	_writeEEPROM	;wreg free
  9950                           
  9951                           ;main.c: 1123: writeEEPROM(0x86, 0xff);
  9952  003232  6A0F               	clrf	?_writeEEPROM+1,c
  9953  003234  0E86               	movlw	134
  9954  003236  6E0E               	movwf	?_writeEEPROM,c
  9955  003238  0EFF               	movlw	255
  9956  00323A  6810               	setf	?_writeEEPROM+2,c
  9957  00323C  EC21  F02D         	call	_writeEEPROM	;wreg free
  9958                           
  9959                           ;main.c: 1125: writeEEPROM(0x87, 0x7f);
  9960  003240  6A0F               	clrf	?_writeEEPROM+1,c
  9961  003242  0E87               	movlw	135
  9962  003244  6E0E               	movwf	?_writeEEPROM,c
  9963  003246  0E7F               	movlw	127
  9964  003248  6E10               	movwf	?_writeEEPROM+2,c
  9965  00324A  EC21  F02D         	call	_writeEEPROM	;wreg free
  9966                           
  9967                           ;main.c: 1126: writeEEPROM(0x88, 0xff);
  9968  00324E  6A0F               	clrf	?_writeEEPROM+1,c
  9969  003250  0E88               	movlw	136
  9970  003252  6E0E               	movwf	?_writeEEPROM,c
  9971  003254  0EFF               	movlw	255
  9972  003256  6810               	setf	?_writeEEPROM+2,c
  9973  003258  EC21  F02D         	call	_writeEEPROM	;wreg free
  9974                           
  9975                           ;main.c: 1128: writeEEPROM(0x89, 0x7f);
  9976  00325C  6A0F               	clrf	?_writeEEPROM+1,c
  9977  00325E  0E89               	movlw	137
  9978  003260  6E0E               	movwf	?_writeEEPROM,c
  9979  003262  0E7F               	movlw	127
  9980  003264  6E10               	movwf	?_writeEEPROM+2,c
  9981  003266  EC21  F02D         	call	_writeEEPROM	;wreg free
  9982                           
  9983                           ;main.c: 1129: writeEEPROM(0x8A, 0xff);
  9984  00326A  6A0F               	clrf	?_writeEEPROM+1,c
  9985  00326C  0E8A               	movlw	138
  9986  00326E  6E0E               	movwf	?_writeEEPROM,c
  9987  003270  0EFF               	movlw	255
  9988  003272  6810               	setf	?_writeEEPROM+2,c
  9989  003274  EC21  F02D         	call	_writeEEPROM	;wreg free
  9990                           
  9991                           ;main.c: 1133: writeEEPROM(0x8B, 0x80);
  9992  003278  6A0F               	clrf	?_writeEEPROM+1,c
  9993  00327A  0E8B               	movlw	139
  9994  00327C  6E0E               	movwf	?_writeEEPROM,c
  9995  00327E  0E80               	movlw	128
  9996  003280  6E10               	movwf	?_writeEEPROM+2,c
  9997  003282  EC21  F02D         	call	_writeEEPROM	;wreg free
  9998                           
  9999                           ;main.c: 1134: writeEEPROM(0x8C, 0x00);
 10000  003286  6A0F               	clrf	?_writeEEPROM+1,c
 10001  003288  0E8C               	movlw	140
 10002  00328A  6E0E               	movwf	?_writeEEPROM,c
 10003  00328C  0E00               	movlw	0
 10004  00328E  6A10               	clrf	?_writeEEPROM+2,c
 10005  003290  EC21  F02D         	call	_writeEEPROM	;wreg free
 10006                           
 10007                           ;main.c: 1136: writeEEPROM(0x8D, 0x80);
 10008  003294  6A0F               	clrf	?_writeEEPROM+1,c
 10009  003296  0E8D               	movlw	141
 10010  003298  6E0E               	movwf	?_writeEEPROM,c
 10011  00329A  0E80               	movlw	128
 10012  00329C  6E10               	movwf	?_writeEEPROM+2,c
 10013  00329E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10014                           
 10015                           ;main.c: 1137: writeEEPROM(0x8E, 0x00);
 10016  0032A2  6A0F               	clrf	?_writeEEPROM+1,c
 10017  0032A4  0E8E               	movlw	142
 10018  0032A6  6E0E               	movwf	?_writeEEPROM,c
 10019  0032A8  0E00               	movlw	0
 10020  0032AA  6A10               	clrf	?_writeEEPROM+2,c
 10021  0032AC  EC21  F02D         	call	_writeEEPROM	;wreg free
 10022                           
 10023                           ;main.c: 1139: writeEEPROM(0x8F, 0x80);
 10024  0032B0  6A0F               	clrf	?_writeEEPROM+1,c
 10025  0032B2  0E8F               	movlw	143
 10026  0032B4  6E0E               	movwf	?_writeEEPROM,c
 10027  0032B6  0E80               	movlw	128
 10028  0032B8  6E10               	movwf	?_writeEEPROM+2,c
 10029  0032BA  EC21  F02D         	call	_writeEEPROM	;wreg free
 10030                           
 10031                           ;main.c: 1140: writeEEPROM(0x90, 0x00);
 10032  0032BE  6A0F               	clrf	?_writeEEPROM+1,c
 10033  0032C0  0E90               	movlw	144
 10034  0032C2  6E0E               	movwf	?_writeEEPROM,c
 10035  0032C4  0E00               	movlw	0
 10036  0032C6  6A10               	clrf	?_writeEEPROM+2,c
 10037  0032C8  EC21  F02D         	call	_writeEEPROM	;wreg free
 10038                           
 10039                           ;main.c: 1142: writeEEPROM(0x91, 0x80);
 10040  0032CC  6A0F               	clrf	?_writeEEPROM+1,c
 10041  0032CE  0E91               	movlw	145
 10042  0032D0  6E0E               	movwf	?_writeEEPROM,c
 10043  0032D2  0E80               	movlw	128
 10044  0032D4  6E10               	movwf	?_writeEEPROM+2,c
 10045  0032D6  EC21  F02D         	call	_writeEEPROM	;wreg free
 10046                           
 10047                           ;main.c: 1143: writeEEPROM(0x92, 0x00);
 10048  0032DA  6A0F               	clrf	?_writeEEPROM+1,c
 10049  0032DC  0E92               	movlw	146
 10050  0032DE  6E0E               	movwf	?_writeEEPROM,c
 10051  0032E0  0E00               	movlw	0
 10052  0032E2  6A10               	clrf	?_writeEEPROM+2,c
 10053  0032E4  EC21  F02D         	call	_writeEEPROM	;wreg free
 10054                           
 10055                           ;main.c: 1145: writeEEPROM(0x93, 0x80);
 10056  0032E8  6A0F               	clrf	?_writeEEPROM+1,c
 10057  0032EA  0E93               	movlw	147
 10058  0032EC  6E0E               	movwf	?_writeEEPROM,c
 10059  0032EE  0E80               	movlw	128
 10060  0032F0  6E10               	movwf	?_writeEEPROM+2,c
 10061  0032F2  EC21  F02D         	call	_writeEEPROM	;wreg free
 10062                           
 10063                           ;main.c: 1146: writeEEPROM(0x94, 0x00);
 10064  0032F6  6A0F               	clrf	?_writeEEPROM+1,c
 10065  0032F8  0E94               	movlw	148
 10066  0032FA  6E0E               	movwf	?_writeEEPROM,c
 10067  0032FC  0E00               	movlw	0
 10068  0032FE  6A10               	clrf	?_writeEEPROM+2,c
 10069  003300  EC21  F02D         	call	_writeEEPROM	;wreg free
 10070                           
 10071                           ;main.c: 1148: writeEEPROM(0x95, 0x80);
 10072  003304  6A0F               	clrf	?_writeEEPROM+1,c
 10073  003306  0E95               	movlw	149
 10074  003308  6E0E               	movwf	?_writeEEPROM,c
 10075  00330A  0E80               	movlw	128
 10076  00330C  6E10               	movwf	?_writeEEPROM+2,c
 10077  00330E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10078                           
 10079                           ;main.c: 1149: writeEEPROM(0x96, 0x00);
 10080  003312  6A0F               	clrf	?_writeEEPROM+1,c
 10081  003314  0E96               	movlw	150
 10082  003316  6E0E               	movwf	?_writeEEPROM,c
 10083  003318  0E00               	movlw	0
 10084  00331A  6A10               	clrf	?_writeEEPROM+2,c
 10085  00331C  EC21  F02D         	call	_writeEEPROM	;wreg free
 10086                           
 10087                           ;main.c: 1153: writeEEPROM(0x97, 2);
 10088  003320  6A0F               	clrf	?_writeEEPROM+1,c
 10089  003322  0E97               	movlw	151
 10090  003324  6E0E               	movwf	?_writeEEPROM,c
 10091  003326  0E02               	movlw	2
 10092  003328  6E10               	movwf	?_writeEEPROM+2,c
 10093  00332A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10094                           
 10095                           ;main.c: 1154: writeEEPROM(0x98, 2);
 10096  00332E  6A0F               	clrf	?_writeEEPROM+1,c
 10097  003330  0E98               	movlw	152
 10098  003332  6E0E               	movwf	?_writeEEPROM,c
 10099  003334  0E02               	movlw	2
 10100  003336  6E10               	movwf	?_writeEEPROM+2,c
 10101  003338  EC21  F02D         	call	_writeEEPROM	;wreg free
 10102                           
 10103                           ;main.c: 1155: writeEEPROM(0x99, 2);
 10104  00333C  6A0F               	clrf	?_writeEEPROM+1,c
 10105  00333E  0E99               	movlw	153
 10106  003340  6E0E               	movwf	?_writeEEPROM,c
 10107  003342  0E02               	movlw	2
 10108  003344  6E10               	movwf	?_writeEEPROM+2,c
 10109  003346  EC21  F02D         	call	_writeEEPROM	;wreg free
 10110                           
 10111                           ;main.c: 1156: writeEEPROM(0x9A, 2);
 10112  00334A  6A0F               	clrf	?_writeEEPROM+1,c
 10113  00334C  0E9A               	movlw	154
 10114  00334E  6E0E               	movwf	?_writeEEPROM,c
 10115  003350  0E02               	movlw	2
 10116  003352  6E10               	movwf	?_writeEEPROM+2,c
 10117  003354  EC21  F02D         	call	_writeEEPROM	;wreg free
 10118                           
 10119                           ;main.c: 1157: writeEEPROM(0x9B, 2);
 10120  003358  6A0F               	clrf	?_writeEEPROM+1,c
 10121  00335A  0E9B               	movlw	155
 10122  00335C  6E0E               	movwf	?_writeEEPROM,c
 10123  00335E  0E02               	movlw	2
 10124  003360  6E10               	movwf	?_writeEEPROM+2,c
 10125  003362  EC21  F02D         	call	_writeEEPROM	;wreg free
 10126                           
 10127                           ;main.c: 1158: writeEEPROM(0x9C, 2);
 10128  003366  6A0F               	clrf	?_writeEEPROM+1,c
 10129  003368  0E9C               	movlw	156
 10130  00336A  6E0E               	movwf	?_writeEEPROM,c
 10131  00336C  0E02               	movlw	2
 10132  00336E  6E10               	movwf	?_writeEEPROM+2,c
 10133  003370  EC21  F02D         	call	_writeEEPROM	;wreg free
 10134                           
 10135                           ;main.c: 1162: writeEEPROM(0xF2, 0xc3);
 10136  003374  6A0F               	clrf	?_writeEEPROM+1,c
 10137  003376  0EF2               	movlw	242
 10138  003378  6E0E               	movwf	?_writeEEPROM,c
 10139  00337A  0EC3               	movlw	195
 10140  00337C  6E10               	movwf	?_writeEEPROM+2,c
 10141  00337E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10142                           
 10143                           ;main.c: 1163: writeEEPROM(0xF3, 0x50);
 10144  003382  6A0F               	clrf	?_writeEEPROM+1,c
 10145  003384  0EF3               	movlw	243
 10146  003386  6E0E               	movwf	?_writeEEPROM,c
 10147  003388  0E50               	movlw	80
 10148  00338A  6E10               	movwf	?_writeEEPROM+2,c
 10149  00338C  EC21  F02D         	call	_writeEEPROM	;wreg free
 10150                           
 10151                           ;main.c: 1167: writeEEPROM(0x9E, 0);
 10152  003390  6A0F               	clrf	?_writeEEPROM+1,c
 10153  003392  0E9E               	movlw	158
 10154  003394  6E0E               	movwf	?_writeEEPROM,c
 10155  003396  0E00               	movlw	0
 10156  003398  6A10               	clrf	?_writeEEPROM+2,c
 10157  00339A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10158                           
 10159                           ;main.c: 1168: writeEEPROM(0x9F, 0);
 10160  00339E  6A0F               	clrf	?_writeEEPROM+1,c
 10161  0033A0  0E9F               	movlw	159
 10162  0033A2  6E0E               	movwf	?_writeEEPROM,c
 10163  0033A4  0E00               	movlw	0
 10164  0033A6  6A10               	clrf	?_writeEEPROM+2,c
 10165  0033A8  EC21  F02D         	call	_writeEEPROM	;wreg free
 10166                           
 10167                           ;main.c: 1169: writeEEPROM(0xA0, 0);
 10168  0033AC  6A0F               	clrf	?_writeEEPROM+1,c
 10169  0033AE  0EA0               	movlw	160
 10170  0033B0  6E0E               	movwf	?_writeEEPROM,c
 10171  0033B2  0E00               	movlw	0
 10172  0033B4  6A10               	clrf	?_writeEEPROM+2,c
 10173  0033B6  EC21  F02D         	call	_writeEEPROM	;wreg free
 10174                           
 10175                           ;main.c: 1170: writeEEPROM(0xA1, 0);
 10176  0033BA  6A0F               	clrf	?_writeEEPROM+1,c
 10177  0033BC  0EA1               	movlw	161
 10178  0033BE  6E0E               	movwf	?_writeEEPROM,c
 10179  0033C0  0E00               	movlw	0
 10180  0033C2  6A10               	clrf	?_writeEEPROM+2,c
 10181  0033C4  EC21  F02D         	call	_writeEEPROM	;wreg free
 10182                           
 10183                           ;main.c: 1171: writeEEPROM(0xA2, 0);
 10184  0033C8  6A0F               	clrf	?_writeEEPROM+1,c
 10185  0033CA  0EA2               	movlw	162
 10186  0033CC  6E0E               	movwf	?_writeEEPROM,c
 10187  0033CE  0E00               	movlw	0
 10188  0033D0  6A10               	clrf	?_writeEEPROM+2,c
 10189  0033D2  EC21  F02D         	call	_writeEEPROM	;wreg free
 10190                           
 10191                           ;main.c: 1172: writeEEPROM(0xA3, 0);
 10192  0033D6  6A0F               	clrf	?_writeEEPROM+1,c
 10193  0033D8  0EA3               	movlw	163
 10194  0033DA  6E0E               	movwf	?_writeEEPROM,c
 10195  0033DC  0E00               	movlw	0
 10196  0033DE  6A10               	clrf	?_writeEEPROM+2,c
 10197  0033E0  EC21  F02D         	call	_writeEEPROM	;wreg free
 10198                           
 10199                           ;main.c: 1173: writeEEPROM(0xA4, 0);
 10200  0033E4  6A0F               	clrf	?_writeEEPROM+1,c
 10201  0033E6  0EA4               	movlw	164
 10202  0033E8  6E0E               	movwf	?_writeEEPROM,c
 10203  0033EA  0E00               	movlw	0
 10204  0033EC  6A10               	clrf	?_writeEEPROM+2,c
 10205  0033EE  EC21  F02D         	call	_writeEEPROM	;wreg free
 10206                           
 10207                           ;main.c: 1174: writeEEPROM(0xA5, 0);
 10208  0033F2  6A0F               	clrf	?_writeEEPROM+1,c
 10209  0033F4  0EA5               	movlw	165
 10210  0033F6  6E0E               	movwf	?_writeEEPROM,c
 10211  0033F8  0E00               	movlw	0
 10212  0033FA  6A10               	clrf	?_writeEEPROM+2,c
 10213  0033FC  EC21  F02D         	call	_writeEEPROM	;wreg free
 10214                           
 10215                           ;main.c: 1175: writeEEPROM(0xA6, 0);
 10216  003400  6A0F               	clrf	?_writeEEPROM+1,c
 10217  003402  0EA6               	movlw	166
 10218  003404  6E0E               	movwf	?_writeEEPROM,c
 10219  003406  0E00               	movlw	0
 10220  003408  6A10               	clrf	?_writeEEPROM+2,c
 10221  00340A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10222                           
 10223                           ;main.c: 1176: writeEEPROM(0xA7, 0);
 10224  00340E  6A0F               	clrf	?_writeEEPROM+1,c
 10225  003410  0EA7               	movlw	167
 10226  003412  6E0E               	movwf	?_writeEEPROM,c
 10227  003414  0E00               	movlw	0
 10228  003416  6A10               	clrf	?_writeEEPROM+2,c
 10229  003418  EC21  F02D         	call	_writeEEPROM	;wreg free
 10230                           
 10231                           ;main.c: 1177: writeEEPROM(0xA8, 0);
 10232  00341C  6A0F               	clrf	?_writeEEPROM+1,c
 10233  00341E  0EA8               	movlw	168
 10234  003420  6E0E               	movwf	?_writeEEPROM,c
 10235  003422  0E00               	movlw	0
 10236  003424  6A10               	clrf	?_writeEEPROM+2,c
 10237  003426  EC21  F02D         	call	_writeEEPROM	;wreg free
 10238                           
 10239                           ;main.c: 1178: writeEEPROM(0xA9, 0);
 10240  00342A  6A0F               	clrf	?_writeEEPROM+1,c
 10241  00342C  0EA9               	movlw	169
 10242  00342E  6E0E               	movwf	?_writeEEPROM,c
 10243  003430  6A10               	clrf	?_writeEEPROM+2,c
 10244  003432  EF21  F02D         	goto	_writeEEPROM	;wreg free
 10245  003436                     __end_of_init_app_eeprom:
 10246                           	opt stack 0
 10247                           tblptru	equ	0xFF8
 10248                           tblptrh	equ	0xFF7
 10249                           tblptrl	equ	0xFF6
 10250                           tablat	equ	0xFF5
 10251                           prodh	equ	0xFF4
 10252                           prodl	equ	0xFF3
 10253                           postinc0	equ	0xFEE
 10254                           wreg	equ	0xFE8
 10255                           postdec1	equ	0xFE5
 10256                           fsr1h	equ	0xFE2
 10257                           fsr1l	equ	0xFE1
 10258                           indf2	equ	0xFDF
 10259                           postinc2	equ	0xFDE
 10260                           postdec2	equ	0xFDD
 10261                           fsr2h	equ	0xFDA
 10262                           fsr2l	equ	0xFD9
 10263                           status	equ	0xFD8
 10264                           
 10265 ;; *************** function _vscp_setManufacturerId *****************
 10266 ;; Defined at:
 10267 ;;		line 2650 in file "../main.c"
 10268 ;; Parameters:    Size  Location     Type
 10269 ;;  idx             1    wreg     unsigned char 
 10270 ;;  data            1   16[COMRAM] unsigned char 
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;  idx             1   17[COMRAM] unsigned char 
 10273 ;; Return value:  Size  Location     Type
 10274 ;;		None               void
 10275 ;; Registers used:
 10276 ;;		wreg, status,2, status,0, cstack
 10277 ;; Tracked objects:
 10278 ;;		On entry : E/1
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10282 ;;      Params:         1       0       0       0       0       0       0
 10283 ;;      Locals:         1       0       0       0       0       0       0
 10284 ;;      Temps:          0       0       0       0       0       0       0
 10285 ;;      Totals:         2       0       0       0       0       0       0
 10286 ;;Total ram usage:        2 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    3
 10289 ;; This function calls:
 10290 ;;		_writeEEPROM
 10291 ;; This function is called by:
 10292 ;;		_vscp_writeStdReg
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text39
 10297  005B82                     __ptext39:
 10298                           	opt stack 0
 10299  005B82                     _vscp_setManufacturerId:
 10300                           	opt stack 25
 10301                           
 10302                           ;incstack = 0
 10303                           ;incstack = 0
 10304                           ;vscp_setManufacturerId@idx stored from wreg
 10305  005B82  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10306                           
 10307                           ;main.c: 2651: writeEEPROM(0x09 + idx, data);
 10308  005B86  0E09               	movlw	9
 10309  005B88  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10310  005B8A  6E0E               	movwf	?_writeEEPROM,c
 10311  005B8C  6A0F               	clrf	?_writeEEPROM+1,c
 10312  005B8E  0E00               	movlw	0
 10313  005B90  220F               	addwfc	?_writeEEPROM+1,f,c
 10314  005B92  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10315  005B96  EF21  F02D         	goto	_writeEEPROM	;wreg free
 10316  005B9A                     __end_of_vscp_setManufacturerId:
 10317                           	opt stack 0
 10318                           tblptru	equ	0xFF8
 10319                           tblptrh	equ	0xFF7
 10320                           tblptrl	equ	0xFF6
 10321                           tablat	equ	0xFF5
 10322                           prodh	equ	0xFF4
 10323                           prodl	equ	0xFF3
 10324                           postinc0	equ	0xFEE
 10325                           wreg	equ	0xFE8
 10326                           postdec1	equ	0xFE5
 10327                           fsr1h	equ	0xFE2
 10328                           fsr1l	equ	0xFE1
 10329                           indf2	equ	0xFDF
 10330                           postinc2	equ	0xFDE
 10331                           postdec2	equ	0xFDD
 10332                           fsr2h	equ	0xFDA
 10333                           fsr2l	equ	0xFD9
 10334                           status	equ	0xFD8
 10335                           
 10336 ;; *************** function _vscp_setUserID *****************
 10337 ;; Defined at:
 10338 ;;		line 2628 in file "../main.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;  idx             1    wreg     unsigned char 
 10341 ;;  data            1   16[COMRAM] unsigned char 
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  idx             1   17[COMRAM] unsigned char 
 10344 ;; Return value:  Size  Location     Type
 10345 ;;		None               void
 10346 ;; Registers used:
 10347 ;;		wreg, status,2, status,0, cstack
 10348 ;; Tracked objects:
 10349 ;;		On entry : E/1
 10350 ;;		On exit  : 0/0
 10351 ;;		Unchanged: 0/0
 10352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10353 ;;      Params:         1       0       0       0       0       0       0
 10354 ;;      Locals:         1       0       0       0       0       0       0
 10355 ;;      Temps:          0       0       0       0       0       0       0
 10356 ;;      Totals:         2       0       0       0       0       0       0
 10357 ;;Total ram usage:        2 bytes
 10358 ;; Hardware stack levels used:    1
 10359 ;; Hardware stack levels required when called:    3
 10360 ;; This function calls:
 10361 ;;		_writeEEPROM
 10362 ;; This function is called by:
 10363 ;;		_vscp_writeStdReg
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           	psect	text40
 10368  005B9A                     __ptext40:
 10369                           	opt stack 0
 10370  005B9A                     _vscp_setUserID:
 10371                           	opt stack 25
 10372                           
 10373                           ;incstack = 0
 10374                           ;incstack = 0
 10375                           ;vscp_setUserID@idx stored from wreg
 10376  005B9A  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10377                           
 10378                           ;main.c: 2629: writeEEPROM(idx + 0x04, data);
 10379  005B9E  0E04               	movlw	4
 10380  005BA0  2412               	addwf	vscp_setUserID@idx,w,c
 10381  005BA2  6E0E               	movwf	?_writeEEPROM,c
 10382  005BA4  6A0F               	clrf	?_writeEEPROM+1,c
 10383  005BA6  0E00               	movlw	0
 10384  005BA8  220F               	addwfc	?_writeEEPROM+1,f,c
 10385  005BAA  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10386  005BAE  EF21  F02D         	goto	_writeEEPROM	;wreg free
 10387  005BB2                     __end_of_vscp_setUserID:
 10388                           	opt stack 0
 10389                           tblptru	equ	0xFF8
 10390                           tblptrh	equ	0xFF7
 10391                           tblptrl	equ	0xFF6
 10392                           tablat	equ	0xFF5
 10393                           prodh	equ	0xFF4
 10394                           prodl	equ	0xFF3
 10395                           postinc0	equ	0xFEE
 10396                           wreg	equ	0xFE8
 10397                           postdec1	equ	0xFE5
 10398                           fsr1h	equ	0xFE2
 10399                           fsr1l	equ	0xFE1
 10400                           indf2	equ	0xFDF
 10401                           postinc2	equ	0xFDE
 10402                           postdec2	equ	0xFDD
 10403                           fsr2h	equ	0xFDA
 10404                           fsr2l	equ	0xFD9
 10405                           status	equ	0xFD8
 10406                           
 10407 ;; *************** function _vscp_setGUID *****************
 10408 ;; Defined at:
 10409 ;;		line 2597 in file "../main.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;  idx             1    wreg     unsigned char 
 10412 ;;  data            1   16[COMRAM] unsigned char 
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;  idx             1   17[COMRAM] unsigned char 
 10415 ;; Return value:  Size  Location     Type
 10416 ;;		None               void
 10417 ;; Registers used:
 10418 ;;		wreg, status,2, status,0, cstack
 10419 ;; Tracked objects:
 10420 ;;		On entry : E/1
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10424 ;;      Params:         1       0       0       0       0       0       0
 10425 ;;      Locals:         1       0       0       0       0       0       0
 10426 ;;      Temps:          0       0       0       0       0       0       0
 10427 ;;      Totals:         2       0       0       0       0       0       0
 10428 ;;Total ram usage:        2 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    3
 10431 ;; This function calls:
 10432 ;;		_writeEEPROM
 10433 ;; This function is called by:
 10434 ;;		_vscp_writeStdReg
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text41
 10439  005AD2                     __ptext41:
 10440                           	opt stack 0
 10441  005AD2                     _vscp_setGUID:
 10442                           	opt stack 25
 10443                           
 10444                           ;incstack = 0
 10445                           ;incstack = 0
 10446                           ;vscp_setGUID@idx stored from wreg
 10447  005AD2  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10448                           
 10449                           ;main.c: 2598: if ( idx>15 ) return;
 10450  005AD6  0E0F               	movlw	15
 10451  005AD8  6412               	cpfsgt	vscp_setGUID@idx,c
 10452  005ADA  D001               	goto	l7981
 10453  005ADC  D00A               	goto	l549
 10454  005ADE                     l7981:
 10455                           
 10456                           ;main.c: 2599: writeEEPROM( 0x11 + idx, data );
 10457  005ADE  0E11               	movlw	17
 10458  005AE0  2412               	addwf	vscp_setGUID@idx,w,c
 10459  005AE2  6E0E               	movwf	?_writeEEPROM,c
 10460  005AE4  6A0F               	clrf	?_writeEEPROM+1,c
 10461  005AE6  0E00               	movlw	0
 10462  005AE8  220F               	addwfc	?_writeEEPROM+1,f,c
 10463  005AEA  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10464  005AEE  EC21  F02D         	call	_writeEEPROM	;wreg free
 10465  005AF2                     l549:
 10466  005AF2  0012               	return	
 10467  005AF4                     __end_of_vscp_setGUID:
 10468                           	opt stack 0
 10469                           tblptru	equ	0xFF8
 10470                           tblptrh	equ	0xFF7
 10471                           tblptrl	equ	0xFF6
 10472                           tablat	equ	0xFF5
 10473                           prodh	equ	0xFF4
 10474                           prodl	equ	0xFF3
 10475                           postinc0	equ	0xFEE
 10476                           wreg	equ	0xFE8
 10477                           postdec1	equ	0xFE5
 10478                           fsr1h	equ	0xFE2
 10479                           fsr1l	equ	0xFE1
 10480                           indf2	equ	0xFDF
 10481                           postinc2	equ	0xFDE
 10482                           postdec2	equ	0xFDD
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _vscp_writeAppReg *****************
 10488 ;; Defined at:
 10489 ;;		line 1888 in file "../main.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;  reg             1    wreg     unsigned char 
 10492 ;;  val             1   34[COMRAM] unsigned char 
 10493 ;; Auto vars:     Size  Location     Type
 10494 ;;  reg             1   36[COMRAM] unsigned char 
 10495 ;;  pos             1   35[COMRAM] unsigned char 
 10496 ;;  rv              1   37[COMRAM] unsigned char 
 10497 ;; Return value:  Size  Location     Type
 10498 ;;                  1    wreg      unsigned char 
 10499 ;; Registers used:
 10500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10501 ;; Tracked objects:
 10502 ;;		On entry : E/1
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10506 ;;      Params:         1       0       0       0       0       0       0
 10507 ;;      Locals:         3       0       0       0       0       0       0
 10508 ;;      Temps:          0       0       0       0       0       0       0
 10509 ;;      Totals:         4       0       0       0       0       0       0
 10510 ;;Total ram usage:        4 bytes
 10511 ;; Hardware stack levels used:    1
 10512 ;; Hardware stack levels required when called:    4
 10513 ;; This function calls:
 10514 ;;		_writeEEPROM
 10515 ;;		_readEEPROM
 10516 ;;		_writeCoeffs2Ram
 10517 ;; This function is called by:
 10518 ;;		_vscp_writeRegister
 10519 ;;		_vscp_handleProtocolEvent
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text42
 10524  000B6E                     __ptext42:
 10525                           	opt stack 0
 10526  000B6E                     _vscp_writeAppReg:
 10527                           	opt stack 24
 10528                           
 10529                           ;incstack = 0
 10530                           ;incstack = 0
 10531                           ;vscp_writeAppReg@reg stored from wreg
 10532  000B6E  CFE8 F025          	movff	wreg,vscp_writeAppReg@reg
 10533                           
 10534                           ;main.c: 1889: uint8_t rv;
 10535                           ;main.c: 1896: rv = ~val;
 10536  000B72  1C23               	comf	vscp_writeAppReg@val,w,c
 10537  000B74  6E26               	movwf	vscp_writeAppReg@rv,c
 10538                           
 10539                           ;main.c: 1898: if (0 == vscp_page_select) {
 10540  000B76  5047               	movf	_vscp_page_select+1,w,c
 10541  000B78  1046               	iorwf	_vscp_page_select,w,c
 10542  000B7A  E102 EFB7  F00A    	bz	l10861
 10543  000B80  EFF1  F00B         	goto	l10863
 10544  000B84                     l10671:
 10545                           
 10546                           ;main.c: 1904: writeEEPROM(0x41, val);
 10547  000B84  6A0F               	clrf	?_writeEEPROM+1,c
 10548  000B86  0E41               	movlw	65
 10549  000B88  6E0E               	movwf	?_writeEEPROM,c
 10550  000B8A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10551  000B8E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10552                           
 10553                           ;main.c: 1905: rv = readEEPROM(0x41);
 10554  000B92  6A17               	clrf	?_readEEPROM+1,c
 10555  000B94  0E41               	movlw	65
 10556  000B96  6E16               	movwf	?_readEEPROM,c
 10557  000B98  EC0F  F02E         	call	_readEEPROM	;wreg free
 10558  000B9C  EF35  F00C         	goto	L20
 10559  000BA0                     l10673:
 10560                           
 10561                           ;main.c: 1910: writeEEPROM(0x42, val);
 10562  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
 10563  000BA2  0E42               	movlw	66
 10564  000BA4  6E0E               	movwf	?_writeEEPROM,c
 10565  000BA6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10566  000BAA  EC21  F02D         	call	_writeEEPROM	;wreg free
 10567                           
 10568                           ;main.c: 1911: rv = readEEPROM(0x42);
 10569  000BAE  6A17               	clrf	?_readEEPROM+1,c
 10570  000BB0  0E42               	movlw	66
 10571  000BB2  6E16               	movwf	?_readEEPROM,c
 10572  000BB4  EC0F  F02E         	call	_readEEPROM	;wreg free
 10573  000BB8  EF35  F00C         	goto	L20
 10574  000BBC                     l10675:
 10575                           
 10576                           ;main.c: 1920: writeEEPROM(0x43, val);
 10577  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 10578  000BBE  0E43               	movlw	67
 10579  000BC0  6E0E               	movwf	?_writeEEPROM,c
 10580  000BC2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10581  000BC6  EC21  F02D         	call	_writeEEPROM	;wreg free
 10582                           
 10583                           ;main.c: 1921: rv = readEEPROM(0x43);
 10584  000BCA  6A17               	clrf	?_readEEPROM+1,c
 10585  000BCC  0E43               	movlw	67
 10586  000BCE  6E16               	movwf	?_readEEPROM,c
 10587  000BD0  EC0F  F02E         	call	_readEEPROM	;wreg free
 10588  000BD4  EF35  F00C         	goto	L20
 10589  000BD8                     l10677:
 10590                           
 10591                           ;main.c: 1926: writeEEPROM(0x44, val);
 10592  000BD8  6A0F               	clrf	?_writeEEPROM+1,c
 10593  000BDA  0E44               	movlw	68
 10594  000BDC  6E0E               	movwf	?_writeEEPROM,c
 10595  000BDE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10596  000BE2  EC21  F02D         	call	_writeEEPROM	;wreg free
 10597                           
 10598                           ;main.c: 1927: rv = readEEPROM(0x44);
 10599  000BE6  6A17               	clrf	?_readEEPROM+1,c
 10600  000BE8  0E44               	movlw	68
 10601  000BEA  6E16               	movwf	?_readEEPROM,c
 10602  000BEC  EC0F  F02E         	call	_readEEPROM	;wreg free
 10603  000BF0  EF35  F00C         	goto	L20
 10604  000BF4                     l10679:
 10605                           
 10606                           ;main.c: 1932: writeEEPROM(0x45, val);
 10607  000BF4  6A0F               	clrf	?_writeEEPROM+1,c
 10608  000BF6  0E45               	movlw	69
 10609  000BF8  6E0E               	movwf	?_writeEEPROM,c
 10610  000BFA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10611  000BFE  EC21  F02D         	call	_writeEEPROM	;wreg free
 10612                           
 10613                           ;main.c: 1933: rv = readEEPROM(0x45);
 10614  000C02  6A17               	clrf	?_readEEPROM+1,c
 10615  000C04  0E45               	movlw	69
 10616  000C06  6E16               	movwf	?_readEEPROM,c
 10617  000C08  EC0F  F02E         	call	_readEEPROM	;wreg free
 10618  000C0C  EF35  F00C         	goto	L20
 10619  000C10                     l10681:
 10620                           
 10621                           ;main.c: 1938: writeEEPROM(0x46, val);
 10622  000C10  6A0F               	clrf	?_writeEEPROM+1,c
 10623  000C12  0E46               	movlw	70
 10624  000C14  6E0E               	movwf	?_writeEEPROM,c
 10625  000C16  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10626  000C1A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10627                           
 10628                           ;main.c: 1939: rv = readEEPROM(0x46);
 10629  000C1E  6A17               	clrf	?_readEEPROM+1,c
 10630  000C20  0E46               	movlw	70
 10631  000C22  6E16               	movwf	?_readEEPROM,c
 10632  000C24  EC0F  F02E         	call	_readEEPROM	;wreg free
 10633  000C28  EF35  F00C         	goto	L20
 10634  000C2C                     l10683:
 10635                           
 10636                           ;main.c: 1944: writeEEPROM(0x47, val);
 10637  000C2C  6A0F               	clrf	?_writeEEPROM+1,c
 10638  000C2E  0E47               	movlw	71
 10639  000C30  6E0E               	movwf	?_writeEEPROM,c
 10640  000C32  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10641  000C36  EC21  F02D         	call	_writeEEPROM	;wreg free
 10642                           
 10643                           ;main.c: 1945: rv = readEEPROM(0x47);
 10644  000C3A  6A17               	clrf	?_readEEPROM+1,c
 10645  000C3C  0E47               	movlw	71
 10646  000C3E  6E16               	movwf	?_readEEPROM,c
 10647  000C40  EC0F  F02E         	call	_readEEPROM	;wreg free
 10648  000C44  EF35  F00C         	goto	L20
 10649  000C48                     l10685:
 10650                           
 10651                           ;main.c: 1950: writeEEPROM(0x48, val);
 10652  000C48  6A0F               	clrf	?_writeEEPROM+1,c
 10653  000C4A  0E48               	movlw	72
 10654  000C4C  6E0E               	movwf	?_writeEEPROM,c
 10655  000C4E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10656  000C52  EC21  F02D         	call	_writeEEPROM	;wreg free
 10657                           
 10658                           ;main.c: 1951: rv = readEEPROM(0x48);
 10659  000C56  6A17               	clrf	?_readEEPROM+1,c
 10660  000C58  0E48               	movlw	72
 10661  000C5A  6E16               	movwf	?_readEEPROM,c
 10662  000C5C  EC0F  F02E         	call	_readEEPROM	;wreg free
 10663  000C60  EF35  F00C         	goto	L20
 10664  000C64                     l10687:
 10665                           
 10666                           ;main.c: 1960: writeEEPROM(0x49, val);
 10667  000C64  6A0F               	clrf	?_writeEEPROM+1,c
 10668  000C66  0E49               	movlw	73
 10669  000C68  6E0E               	movwf	?_writeEEPROM,c
 10670  000C6A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10671  000C6E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10672                           
 10673                           ;main.c: 1961: rv = readEEPROM(0x49);
 10674  000C72  6A17               	clrf	?_readEEPROM+1,c
 10675  000C74  0E49               	movlw	73
 10676  000C76  6E16               	movwf	?_readEEPROM,c
 10677  000C78  EC0F  F02E         	call	_readEEPROM	;wreg free
 10678  000C7C  EF35  F00C         	goto	L20
 10679  000C80                     l10689:
 10680                           
 10681                           ;main.c: 1966: writeEEPROM(0x4A, val);
 10682  000C80  6A0F               	clrf	?_writeEEPROM+1,c
 10683  000C82  0E4A               	movlw	74
 10684  000C84  6E0E               	movwf	?_writeEEPROM,c
 10685  000C86  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10686  000C8A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10687                           
 10688                           ;main.c: 1967: rv = readEEPROM(0x4A);
 10689  000C8E  6A17               	clrf	?_readEEPROM+1,c
 10690  000C90  0E4A               	movlw	74
 10691  000C92  6E16               	movwf	?_readEEPROM,c
 10692  000C94  EC0F  F02E         	call	_readEEPROM	;wreg free
 10693  000C98  EF35  F00C         	goto	L20
 10694  000C9C                     l10691:
 10695                           
 10696                           ;main.c: 1972: writeEEPROM(0x4B, val);
 10697  000C9C  6A0F               	clrf	?_writeEEPROM+1,c
 10698  000C9E  0E4B               	movlw	75
 10699  000CA0  6E0E               	movwf	?_writeEEPROM,c
 10700  000CA2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10701  000CA6  EC21  F02D         	call	_writeEEPROM	;wreg free
 10702                           
 10703                           ;main.c: 1973: rv = readEEPROM(0x4B);
 10704  000CAA  6A17               	clrf	?_readEEPROM+1,c
 10705  000CAC  0E4B               	movlw	75
 10706  000CAE  6E16               	movwf	?_readEEPROM,c
 10707  000CB0  EC0F  F02E         	call	_readEEPROM	;wreg free
 10708  000CB4  EF35  F00C         	goto	L20
 10709  000CB8                     l10693:
 10710                           
 10711                           ;main.c: 1978: writeEEPROM(0x4C, val);
 10712  000CB8  6A0F               	clrf	?_writeEEPROM+1,c
 10713  000CBA  0E4C               	movlw	76
 10714  000CBC  6E0E               	movwf	?_writeEEPROM,c
 10715  000CBE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10716  000CC2  EC21  F02D         	call	_writeEEPROM	;wreg free
 10717                           
 10718                           ;main.c: 1979: rv = readEEPROM(0x4C);
 10719  000CC6  6A17               	clrf	?_readEEPROM+1,c
 10720  000CC8  0E4C               	movlw	76
 10721  000CCA  6E16               	movwf	?_readEEPROM,c
 10722  000CCC  EC0F  F02E         	call	_readEEPROM	;wreg free
 10723  000CD0  EF35  F00C         	goto	L20
 10724  000CD4                     l10695:
 10725                           
 10726                           ;main.c: 1984: writeEEPROM(0x4D, val);
 10727  000CD4  6A0F               	clrf	?_writeEEPROM+1,c
 10728  000CD6  0E4D               	movlw	77
 10729  000CD8  6E0E               	movwf	?_writeEEPROM,c
 10730  000CDA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10731  000CDE  EC21  F02D         	call	_writeEEPROM	;wreg free
 10732                           
 10733                           ;main.c: 1985: rv = readEEPROM(0x4D);
 10734  000CE2  6A17               	clrf	?_readEEPROM+1,c
 10735  000CE4  0E4D               	movlw	77
 10736  000CE6  6E16               	movwf	?_readEEPROM,c
 10737  000CE8  EC0F  F02E         	call	_readEEPROM	;wreg free
 10738  000CEC  EF35  F00C         	goto	L20
 10739  000CF0                     l10697:
 10740                           
 10741                           ;main.c: 1990: writeEEPROM(0x4E, val);
 10742  000CF0  6A0F               	clrf	?_writeEEPROM+1,c
 10743  000CF2  0E4E               	movlw	78
 10744  000CF4  6E0E               	movwf	?_writeEEPROM,c
 10745  000CF6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10746  000CFA  EC21  F02D         	call	_writeEEPROM	;wreg free
 10747                           
 10748                           ;main.c: 1991: rv = readEEPROM(0x4E);
 10749  000CFE  6A17               	clrf	?_readEEPROM+1,c
 10750  000D00  0E4E               	movlw	78
 10751  000D02  6E16               	movwf	?_readEEPROM,c
 10752  000D04  EC0F  F02E         	call	_readEEPROM	;wreg free
 10753  000D08  EF35  F00C         	goto	L20
 10754  000D0C                     l10699:
 10755                           
 10756                           ;main.c: 2000: writeEEPROM(0x4F, val);
 10757  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
 10758  000D0E  0E4F               	movlw	79
 10759  000D10  6E0E               	movwf	?_writeEEPROM,c
 10760  000D12  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10761  000D16  EC21  F02D         	call	_writeEEPROM	;wreg free
 10762                           
 10763                           ;main.c: 2001: rv = readEEPROM(0x4F);
 10764  000D1A  6A17               	clrf	?_readEEPROM+1,c
 10765  000D1C  0E4F               	movlw	79
 10766  000D1E  6E16               	movwf	?_readEEPROM,c
 10767  000D20  EC0F  F02E         	call	_readEEPROM	;wreg free
 10768  000D24  EF35  F00C         	goto	L20
 10769  000D28                     l10701:
 10770                           
 10771                           ;main.c: 2006: writeEEPROM(0x50, val);
 10772  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 10773  000D2A  0E50               	movlw	80
 10774  000D2C  6E0E               	movwf	?_writeEEPROM,c
 10775  000D2E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10776  000D32  EC21  F02D         	call	_writeEEPROM	;wreg free
 10777                           
 10778                           ;main.c: 2007: rv = readEEPROM(0x50);
 10779  000D36  6A17               	clrf	?_readEEPROM+1,c
 10780  000D38  0E50               	movlw	80
 10781  000D3A  6E16               	movwf	?_readEEPROM,c
 10782  000D3C  EC0F  F02E         	call	_readEEPROM	;wreg free
 10783  000D40  EF35  F00C         	goto	L20
 10784  000D44                     l10703:
 10785                           
 10786                           ;main.c: 2012: writeEEPROM(0x51, val);
 10787  000D44  6A0F               	clrf	?_writeEEPROM+1,c
 10788  000D46  0E51               	movlw	81
 10789  000D48  6E0E               	movwf	?_writeEEPROM,c
 10790  000D4A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10791  000D4E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10792                           
 10793                           ;main.c: 2013: rv = readEEPROM(0x51);
 10794  000D52  6A17               	clrf	?_readEEPROM+1,c
 10795  000D54  0E51               	movlw	81
 10796  000D56  6E16               	movwf	?_readEEPROM,c
 10797  000D58  EC0F  F02E         	call	_readEEPROM	;wreg free
 10798  000D5C  EF35  F00C         	goto	L20
 10799  000D60                     l10705:
 10800                           
 10801                           ;main.c: 2018: writeEEPROM(0x52, val);
 10802  000D60  6A0F               	clrf	?_writeEEPROM+1,c
 10803  000D62  0E52               	movlw	82
 10804  000D64  6E0E               	movwf	?_writeEEPROM,c
 10805  000D66  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10806  000D6A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10807                           
 10808                           ;main.c: 2019: rv = readEEPROM(0x52);
 10809  000D6E  6A17               	clrf	?_readEEPROM+1,c
 10810  000D70  0E52               	movlw	82
 10811  000D72  6E16               	movwf	?_readEEPROM,c
 10812  000D74  EC0F  F02E         	call	_readEEPROM	;wreg free
 10813  000D78  EF35  F00C         	goto	L20
 10814  000D7C                     l10707:
 10815                           
 10816                           ;main.c: 2024: writeEEPROM(0x53, val);
 10817  000D7C  6A0F               	clrf	?_writeEEPROM+1,c
 10818  000D7E  0E53               	movlw	83
 10819  000D80  6E0E               	movwf	?_writeEEPROM,c
 10820  000D82  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10821  000D86  EC21  F02D         	call	_writeEEPROM	;wreg free
 10822                           
 10823                           ;main.c: 2025: rv = readEEPROM(0x53);
 10824  000D8A  6A17               	clrf	?_readEEPROM+1,c
 10825  000D8C  0E53               	movlw	83
 10826  000D8E  6E16               	movwf	?_readEEPROM,c
 10827  000D90  EC0F  F02E         	call	_readEEPROM	;wreg free
 10828  000D94  EF35  F00C         	goto	L20
 10829  000D98                     l10709:
 10830                           
 10831                           ;main.c: 2030: writeEEPROM(0x54, val);
 10832  000D98  6A0F               	clrf	?_writeEEPROM+1,c
 10833  000D9A  0E54               	movlw	84
 10834  000D9C  6E0E               	movwf	?_writeEEPROM,c
 10835  000D9E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10836  000DA2  EC21  F02D         	call	_writeEEPROM	;wreg free
 10837                           
 10838                           ;main.c: 2031: rv = readEEPROM(0x54);
 10839  000DA6  6A17               	clrf	?_readEEPROM+1,c
 10840  000DA8  0E54               	movlw	84
 10841  000DAA  6E16               	movwf	?_readEEPROM,c
 10842  000DAC  EC0F  F02E         	call	_readEEPROM	;wreg free
 10843  000DB0  EF35  F00C         	goto	L20
 10844  000DB4                     l10711:
 10845                           
 10846                           ;main.c: 2036: writeEEPROM(0x55, val);
 10847  000DB4  6A0F               	clrf	?_writeEEPROM+1,c
 10848  000DB6  0E55               	movlw	85
 10849  000DB8  6E0E               	movwf	?_writeEEPROM,c
 10850  000DBA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10851  000DBE  EC21  F02D         	call	_writeEEPROM	;wreg free
 10852                           
 10853                           ;main.c: 2037: rv = readEEPROM(0x55);
 10854  000DC2  6A17               	clrf	?_readEEPROM+1,c
 10855  000DC4  0E55               	movlw	85
 10856  000DC6  6E16               	movwf	?_readEEPROM,c
 10857  000DC8  EC0F  F02E         	call	_readEEPROM	;wreg free
 10858  000DCC  EF35  F00C         	goto	L20
 10859  000DD0                     l10713:
 10860                           
 10861                           ;main.c: 2042: writeEEPROM(0x56, val);
 10862  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
 10863  000DD2  0E56               	movlw	86
 10864  000DD4  6E0E               	movwf	?_writeEEPROM,c
 10865  000DD6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10866  000DDA  EC21  F02D         	call	_writeEEPROM	;wreg free
 10867                           
 10868                           ;main.c: 2043: rv = readEEPROM(0x56);
 10869  000DDE  6A17               	clrf	?_readEEPROM+1,c
 10870  000DE0  0E56               	movlw	86
 10871  000DE2  6E16               	movwf	?_readEEPROM,c
 10872  000DE4  EC0F  F02E         	call	_readEEPROM	;wreg free
 10873  000DE8  EF35  F00C         	goto	L20
 10874  000DEC                     l10715:
 10875                           
 10876                           ;main.c: 2048: writeEEPROM(0x57, val);
 10877  000DEC  6A0F               	clrf	?_writeEEPROM+1,c
 10878  000DEE  0E57               	movlw	87
 10879  000DF0  6E0E               	movwf	?_writeEEPROM,c
 10880  000DF2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10881  000DF6  EC21  F02D         	call	_writeEEPROM	;wreg free
 10882                           
 10883                           ;main.c: 2049: rv = readEEPROM(0x57);
 10884  000DFA  6A17               	clrf	?_readEEPROM+1,c
 10885  000DFC  0E57               	movlw	87
 10886  000DFE  6E16               	movwf	?_readEEPROM,c
 10887  000E00  EC0F  F02E         	call	_readEEPROM	;wreg free
 10888  000E04  EF35  F00C         	goto	L20
 10889  000E08                     l10717:
 10890                           
 10891                           ;main.c: 2054: writeEEPROM(0x58, val);
 10892  000E08  6A0F               	clrf	?_writeEEPROM+1,c
 10893  000E0A  0E58               	movlw	88
 10894  000E0C  6E0E               	movwf	?_writeEEPROM,c
 10895  000E0E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10896  000E12  EC21  F02D         	call	_writeEEPROM	;wreg free
 10897                           
 10898                           ;main.c: 2055: rv = readEEPROM(0x58);
 10899  000E16  6A17               	clrf	?_readEEPROM+1,c
 10900  000E18  0E58               	movlw	88
 10901  000E1A  6E16               	movwf	?_readEEPROM,c
 10902  000E1C  EC0F  F02E         	call	_readEEPROM	;wreg free
 10903  000E20  EF35  F00C         	goto	L20
 10904  000E24                     l10719:
 10905                           
 10906                           ;main.c: 2060: writeEEPROM(0x59, val);
 10907  000E24  6A0F               	clrf	?_writeEEPROM+1,c
 10908  000E26  0E59               	movlw	89
 10909  000E28  6E0E               	movwf	?_writeEEPROM,c
 10910  000E2A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10911  000E2E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10912                           
 10913                           ;main.c: 2061: rv = readEEPROM(0x59);
 10914  000E32  6A17               	clrf	?_readEEPROM+1,c
 10915  000E34  0E59               	movlw	89
 10916  000E36  6E16               	movwf	?_readEEPROM,c
 10917  000E38  EC0F  F02E         	call	_readEEPROM	;wreg free
 10918  000E3C  EF35  F00C         	goto	L20
 10919  000E40                     l10721:
 10920                           
 10921                           ;main.c: 2066: writeEEPROM(0x5A, val);
 10922  000E40  6A0F               	clrf	?_writeEEPROM+1,c
 10923  000E42  0E5A               	movlw	90
 10924  000E44  6E0E               	movwf	?_writeEEPROM,c
 10925  000E46  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10926  000E4A  EC21  F02D         	call	_writeEEPROM	;wreg free
 10927                           
 10928                           ;main.c: 2067: rv = readEEPROM(0x5A);
 10929  000E4E  6A17               	clrf	?_readEEPROM+1,c
 10930  000E50  0E5A               	movlw	90
 10931  000E52  6E16               	movwf	?_readEEPROM,c
 10932  000E54  EC0F  F02E         	call	_readEEPROM	;wreg free
 10933  000E58  EF35  F00C         	goto	L20
 10934  000E5C                     l10723:
 10935                           
 10936                           ;main.c: 2076: writeEEPROM(0x5B, val);
 10937  000E5C  6A0F               	clrf	?_writeEEPROM+1,c
 10938  000E5E  0E5B               	movlw	91
 10939  000E60  6E0E               	movwf	?_writeEEPROM,c
 10940  000E62  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10941  000E66  EC21  F02D         	call	_writeEEPROM	;wreg free
 10942                           
 10943                           ;main.c: 2077: rv = readEEPROM(0x5B);
 10944  000E6A  6A17               	clrf	?_readEEPROM+1,c
 10945  000E6C  0E5B               	movlw	91
 10946  000E6E  6E16               	movwf	?_readEEPROM,c
 10947  000E70  EC0F  F02E         	call	_readEEPROM	;wreg free
 10948  000E74  EF35  F00C         	goto	L20
 10949  000E78                     l10725:
 10950                           
 10951                           ;main.c: 2082: writeEEPROM(0x5C, val);
 10952  000E78  6A0F               	clrf	?_writeEEPROM+1,c
 10953  000E7A  0E5C               	movlw	92
 10954  000E7C  6E0E               	movwf	?_writeEEPROM,c
 10955  000E7E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10956  000E82  EC21  F02D         	call	_writeEEPROM	;wreg free
 10957                           
 10958                           ;main.c: 2083: rv = readEEPROM(0x5C);
 10959  000E86  6A17               	clrf	?_readEEPROM+1,c
 10960  000E88  0E5C               	movlw	92
 10961  000E8A  6E16               	movwf	?_readEEPROM,c
 10962  000E8C  EC0F  F02E         	call	_readEEPROM	;wreg free
 10963  000E90  EF35  F00C         	goto	L20
 10964  000E94                     l10727:
 10965                           
 10966                           ;main.c: 2088: writeEEPROM(0x5D, val);
 10967  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 10968  000E96  0E5D               	movlw	93
 10969  000E98  6E0E               	movwf	?_writeEEPROM,c
 10970  000E9A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10971  000E9E  EC21  F02D         	call	_writeEEPROM	;wreg free
 10972                           
 10973                           ;main.c: 2089: rv = readEEPROM(0x5D);
 10974  000EA2  6A17               	clrf	?_readEEPROM+1,c
 10975  000EA4  0E5D               	movlw	93
 10976  000EA6  6E16               	movwf	?_readEEPROM,c
 10977  000EA8  EC0F  F02E         	call	_readEEPROM	;wreg free
 10978  000EAC  EF35  F00C         	goto	L20
 10979  000EB0                     l10729:
 10980                           
 10981                           ;main.c: 2094: writeEEPROM(0x5E, val);
 10982  000EB0  6A0F               	clrf	?_writeEEPROM+1,c
 10983  000EB2  0E5E               	movlw	94
 10984  000EB4  6E0E               	movwf	?_writeEEPROM,c
 10985  000EB6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10986  000EBA  EC21  F02D         	call	_writeEEPROM	;wreg free
 10987                           
 10988                           ;main.c: 2095: rv = readEEPROM(0x5E);
 10989  000EBE  6A17               	clrf	?_readEEPROM+1,c
 10990  000EC0  0E5E               	movlw	94
 10991  000EC2  6E16               	movwf	?_readEEPROM,c
 10992  000EC4  EC0F  F02E         	call	_readEEPROM	;wreg free
 10993  000EC8  EF35  F00C         	goto	L20
 10994  000ECC                     l10731:
 10995                           
 10996                           ;main.c: 2100: writeEEPROM(0x5F, val);
 10997  000ECC  6A0F               	clrf	?_writeEEPROM+1,c
 10998  000ECE  0E5F               	movlw	95
 10999  000ED0  6E0E               	movwf	?_writeEEPROM,c
 11000  000ED2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11001  000ED6  EC21  F02D         	call	_writeEEPROM	;wreg free
 11002                           
 11003                           ;main.c: 2101: rv = readEEPROM(0x5F);
 11004  000EDA  6A17               	clrf	?_readEEPROM+1,c
 11005  000EDC  0E5F               	movlw	95
 11006  000EDE  6E16               	movwf	?_readEEPROM,c
 11007  000EE0  EC0F  F02E         	call	_readEEPROM	;wreg free
 11008  000EE4  EF35  F00C         	goto	L20
 11009  000EE8                     l10733:
 11010                           
 11011                           ;main.c: 2106: writeEEPROM(0x60, val);
 11012  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 11013  000EEA  0E60               	movlw	96
 11014  000EEC  6E0E               	movwf	?_writeEEPROM,c
 11015  000EEE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11016  000EF2  EC21  F02D         	call	_writeEEPROM	;wreg free
 11017                           
 11018                           ;main.c: 2107: rv = readEEPROM(0x60);
 11019  000EF6  6A17               	clrf	?_readEEPROM+1,c
 11020  000EF8  0E60               	movlw	96
 11021  000EFA  6E16               	movwf	?_readEEPROM,c
 11022  000EFC  EC0F  F02E         	call	_readEEPROM	;wreg free
 11023  000F00  EF35  F00C         	goto	L20
 11024  000F04                     l10735:
 11025                           
 11026                           ;main.c: 2112: writeEEPROM(0x61, val);
 11027  000F04  6A0F               	clrf	?_writeEEPROM+1,c
 11028  000F06  0E61               	movlw	97
 11029  000F08  6E0E               	movwf	?_writeEEPROM,c
 11030  000F0A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11031  000F0E  EC21  F02D         	call	_writeEEPROM	;wreg free
 11032                           
 11033                           ;main.c: 2113: rv = readEEPROM(0x61);
 11034  000F12  6A17               	clrf	?_readEEPROM+1,c
 11035  000F14  0E61               	movlw	97
 11036  000F16  6E16               	movwf	?_readEEPROM,c
 11037  000F18  EC0F  F02E         	call	_readEEPROM	;wreg free
 11038  000F1C  EF35  F00C         	goto	L20
 11039  000F20                     l10737:
 11040                           
 11041                           ;main.c: 2118: writeEEPROM(0x62, val);
 11042  000F20  6A0F               	clrf	?_writeEEPROM+1,c
 11043  000F22  0E62               	movlw	98
 11044  000F24  6E0E               	movwf	?_writeEEPROM,c
 11045  000F26  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11046  000F2A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11047                           
 11048                           ;main.c: 2119: rv = readEEPROM(0x62);
 11049  000F2E  6A17               	clrf	?_readEEPROM+1,c
 11050  000F30  0E62               	movlw	98
 11051  000F32  6E16               	movwf	?_readEEPROM,c
 11052  000F34  EC0F  F02E         	call	_readEEPROM	;wreg free
 11053  000F38  EF35  F00C         	goto	L20
 11054  000F3C                     l10739:
 11055                           
 11056                           ;main.c: 2124: writeEEPROM(0x63, val);
 11057  000F3C  6A0F               	clrf	?_writeEEPROM+1,c
 11058  000F3E  0E63               	movlw	99
 11059  000F40  6E0E               	movwf	?_writeEEPROM,c
 11060  000F42  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11061  000F46  EC21  F02D         	call	_writeEEPROM	;wreg free
 11062                           
 11063                           ;main.c: 2125: rv = readEEPROM(0x63);
 11064  000F4A  6A17               	clrf	?_readEEPROM+1,c
 11065  000F4C  0E63               	movlw	99
 11066  000F4E  6E16               	movwf	?_readEEPROM,c
 11067  000F50  EC0F  F02E         	call	_readEEPROM	;wreg free
 11068  000F54  EF35  F00C         	goto	L20
 11069  000F58                     l10741:
 11070                           
 11071                           ;main.c: 2130: writeEEPROM(0x64, val);
 11072  000F58  6A0F               	clrf	?_writeEEPROM+1,c
 11073  000F5A  0E64               	movlw	100
 11074  000F5C  6E0E               	movwf	?_writeEEPROM,c
 11075  000F5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11076  000F62  EC21  F02D         	call	_writeEEPROM	;wreg free
 11077                           
 11078                           ;main.c: 2131: rv = readEEPROM(0x64);
 11079  000F66  6A17               	clrf	?_readEEPROM+1,c
 11080  000F68  0E64               	movlw	100
 11081  000F6A  6E16               	movwf	?_readEEPROM,c
 11082  000F6C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11083  000F70  EF35  F00C         	goto	L20
 11084  000F74                     l10743:
 11085                           
 11086                           ;main.c: 2136: writeEEPROM(0x65, val);
 11087  000F74  6A0F               	clrf	?_writeEEPROM+1,c
 11088  000F76  0E65               	movlw	101
 11089  000F78  6E0E               	movwf	?_writeEEPROM,c
 11090  000F7A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11091  000F7E  EC21  F02D         	call	_writeEEPROM	;wreg free
 11092                           
 11093                           ;main.c: 2137: rv = readEEPROM(0x65);
 11094  000F82  6A17               	clrf	?_readEEPROM+1,c
 11095  000F84  0E65               	movlw	101
 11096  000F86  6E16               	movwf	?_readEEPROM,c
 11097  000F88  EC0F  F02E         	call	_readEEPROM	;wreg free
 11098  000F8C  EF35  F00C         	goto	L20
 11099  000F90                     l10745:
 11100                           
 11101                           ;main.c: 2142: writeEEPROM(0x66, val);
 11102  000F90  6A0F               	clrf	?_writeEEPROM+1,c
 11103  000F92  0E66               	movlw	102
 11104  000F94  6E0E               	movwf	?_writeEEPROM,c
 11105  000F96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11106  000F9A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11107                           
 11108                           ;main.c: 2143: rv = readEEPROM(0x66);
 11109  000F9E  6A17               	clrf	?_readEEPROM+1,c
 11110  000FA0  0E66               	movlw	102
 11111  000FA2  6E16               	movwf	?_readEEPROM,c
 11112  000FA4  EC0F  F02E         	call	_readEEPROM	;wreg free
 11113  000FA8  EF35  F00C         	goto	L20
 11114  000FAC                     l10747:
 11115                           
 11116                           ;main.c: 2152: writeEEPROM(0x67, val);
 11117  000FAC  6A0F               	clrf	?_writeEEPROM+1,c
 11118  000FAE  0E67               	movlw	103
 11119  000FB0  6E0E               	movwf	?_writeEEPROM,c
 11120  000FB2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11121  000FB6  EC21  F02D         	call	_writeEEPROM	;wreg free
 11122                           
 11123                           ;main.c: 2153: rv = readEEPROM(0x67);
 11124  000FBA  6A17               	clrf	?_readEEPROM+1,c
 11125  000FBC  0E67               	movlw	103
 11126  000FBE  6E16               	movwf	?_readEEPROM,c
 11127  000FC0  EC0F  F02E         	call	_readEEPROM	;wreg free
 11128  000FC4  EF35  F00C         	goto	L20
 11129  000FC8                     l10749:
 11130                           
 11131                           ;main.c: 2158: writeEEPROM(0x68, val);
 11132  000FC8  6A0F               	clrf	?_writeEEPROM+1,c
 11133  000FCA  0E68               	movlw	104
 11134  000FCC  6E0E               	movwf	?_writeEEPROM,c
 11135  000FCE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11136  000FD2  EC21  F02D         	call	_writeEEPROM	;wreg free
 11137                           
 11138                           ;main.c: 2159: rv = readEEPROM(0x68);
 11139  000FD6  6A17               	clrf	?_readEEPROM+1,c
 11140  000FD8  0E68               	movlw	104
 11141  000FDA  6E16               	movwf	?_readEEPROM,c
 11142  000FDC  EC0F  F02E         	call	_readEEPROM	;wreg free
 11143  000FE0  EF35  F00C         	goto	L20
 11144  000FE4                     l10751:
 11145                           
 11146                           ;main.c: 2164: writeEEPROM(0x69, val);
 11147  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 11148  000FE6  0E69               	movlw	105
 11149  000FE8  6E0E               	movwf	?_writeEEPROM,c
 11150  000FEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11151  000FEE  EC21  F02D         	call	_writeEEPROM	;wreg free
 11152                           
 11153                           ;main.c: 2165: rv = readEEPROM(0x69);
 11154  000FF2  6A17               	clrf	?_readEEPROM+1,c
 11155  000FF4  0E69               	movlw	105
 11156  000FF6  6E16               	movwf	?_readEEPROM,c
 11157  000FF8  EC0F  F02E         	call	_readEEPROM	;wreg free
 11158  000FFC  EF35  F00C         	goto	L20
 11159  001000                     l10753:
 11160                           
 11161                           ;main.c: 2170: writeEEPROM(0x6A, val);
 11162  001000  6A0F               	clrf	?_writeEEPROM+1,c
 11163  001002  0E6A               	movlw	106
 11164  001004  6E0E               	movwf	?_writeEEPROM,c
 11165  001006  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11166  00100A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11167                           
 11168                           ;main.c: 2171: rv = readEEPROM(0x6A);
 11169  00100E  6A17               	clrf	?_readEEPROM+1,c
 11170  001010  0E6A               	movlw	106
 11171  001012  6E16               	movwf	?_readEEPROM,c
 11172  001014  EC0F  F02E         	call	_readEEPROM	;wreg free
 11173  001018  EF35  F00C         	goto	L20
 11174  00101C                     l10755:
 11175                           
 11176                           ;main.c: 2176: writeEEPROM(0x6B, val);
 11177  00101C  6A0F               	clrf	?_writeEEPROM+1,c
 11178  00101E  0E6B               	movlw	107
 11179  001020  6E0E               	movwf	?_writeEEPROM,c
 11180  001022  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11181  001026  EC21  F02D         	call	_writeEEPROM	;wreg free
 11182                           
 11183                           ;main.c: 2177: rv = readEEPROM(0x6B);
 11184  00102A  6A17               	clrf	?_readEEPROM+1,c
 11185  00102C  0E6B               	movlw	107
 11186  00102E  6E16               	movwf	?_readEEPROM,c
 11187  001030  EC0F  F02E         	call	_readEEPROM	;wreg free
 11188  001034  EF35  F00C         	goto	L20
 11189  001038                     l10757:
 11190                           
 11191                           ;main.c: 2182: writeEEPROM(0x6C, val);
 11192  001038  6A0F               	clrf	?_writeEEPROM+1,c
 11193  00103A  0E6C               	movlw	108
 11194  00103C  6E0E               	movwf	?_writeEEPROM,c
 11195  00103E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11196  001042  EC21  F02D         	call	_writeEEPROM	;wreg free
 11197                           
 11198                           ;main.c: 2183: rv = readEEPROM(0x6C);
 11199  001046  6A17               	clrf	?_readEEPROM+1,c
 11200  001048  0E6C               	movlw	108
 11201  00104A  6E16               	movwf	?_readEEPROM,c
 11202  00104C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11203  001050  EF35  F00C         	goto	L20
 11204  001054                     l10759:
 11205                           
 11206                           ;main.c: 2188: writeEEPROM(0x6D, val);
 11207  001054  6A0F               	clrf	?_writeEEPROM+1,c
 11208  001056  0E6D               	movlw	109
 11209  001058  6E0E               	movwf	?_writeEEPROM,c
 11210  00105A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11211  00105E  EC21  F02D         	call	_writeEEPROM	;wreg free
 11212                           
 11213                           ;main.c: 2189: rv = readEEPROM(0x6D);
 11214  001062  6A17               	clrf	?_readEEPROM+1,c
 11215  001064  0E6D               	movlw	109
 11216  001066  6E16               	movwf	?_readEEPROM,c
 11217  001068  EC0F  F02E         	call	_readEEPROM	;wreg free
 11218  00106C  D3FE               	goto	L20
 11219  00106E                     l10761:
 11220                           
 11221                           ;main.c: 2194: writeEEPROM(0x6E, val);
 11222  00106E  6A0F               	clrf	?_writeEEPROM+1,c
 11223  001070  0E6E               	movlw	110
 11224  001072  6E0E               	movwf	?_writeEEPROM,c
 11225  001074  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11226  001078  EC21  F02D         	call	_writeEEPROM	;wreg free
 11227                           
 11228                           ;main.c: 2195: rv = readEEPROM(0x6E);
 11229  00107C  6A17               	clrf	?_readEEPROM+1,c
 11230  00107E  0E6E               	movlw	110
 11231  001080  6E16               	movwf	?_readEEPROM,c
 11232  001082  EC0F  F02E         	call	_readEEPROM	;wreg free
 11233  001086  D3F1               	goto	L20
 11234  001088                     l10763:
 11235                           
 11236                           ;main.c: 2200: writeEEPROM(0x6F, val);
 11237  001088  6A0F               	clrf	?_writeEEPROM+1,c
 11238  00108A  0E6F               	movlw	111
 11239  00108C  6E0E               	movwf	?_writeEEPROM,c
 11240  00108E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11241  001092  EC21  F02D         	call	_writeEEPROM	;wreg free
 11242                           
 11243                           ;main.c: 2201: rv = readEEPROM(0x6F);
 11244  001096  6A17               	clrf	?_readEEPROM+1,c
 11245  001098  0E6F               	movlw	111
 11246  00109A  6E16               	movwf	?_readEEPROM,c
 11247  00109C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11248  0010A0  D3E4               	goto	L20
 11249  0010A2                     l10765:
 11250                           
 11251                           ;main.c: 2206: writeEEPROM(0x70, val);
 11252  0010A2  6A0F               	clrf	?_writeEEPROM+1,c
 11253  0010A4  0E70               	movlw	112
 11254  0010A6  6E0E               	movwf	?_writeEEPROM,c
 11255  0010A8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11256  0010AC  EC21  F02D         	call	_writeEEPROM	;wreg free
 11257                           
 11258                           ;main.c: 2207: rv = readEEPROM(0x70);
 11259  0010B0  6A17               	clrf	?_readEEPROM+1,c
 11260  0010B2  0E70               	movlw	112
 11261  0010B4  6E16               	movwf	?_readEEPROM,c
 11262  0010B6  EC0F  F02E         	call	_readEEPROM	;wreg free
 11263  0010BA  D3D7               	goto	L20
 11264  0010BC                     l10767:
 11265                           
 11266                           ;main.c: 2212: writeEEPROM(0x71, val);
 11267  0010BC  6A0F               	clrf	?_writeEEPROM+1,c
 11268  0010BE  0E71               	movlw	113
 11269  0010C0  6E0E               	movwf	?_writeEEPROM,c
 11270  0010C2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11271  0010C6  EC21  F02D         	call	_writeEEPROM	;wreg free
 11272                           
 11273                           ;main.c: 2213: rv = readEEPROM(0x71);
 11274  0010CA  6A17               	clrf	?_readEEPROM+1,c
 11275  0010CC  0E71               	movlw	113
 11276  0010CE  6E16               	movwf	?_readEEPROM,c
 11277  0010D0  EC0F  F02E         	call	_readEEPROM	;wreg free
 11278  0010D4  D3CA               	goto	L20
 11279  0010D6                     l10769:
 11280                           
 11281                           ;main.c: 2218: writeEEPROM(0x72, val);
 11282  0010D6  6A0F               	clrf	?_writeEEPROM+1,c
 11283  0010D8  0E72               	movlw	114
 11284  0010DA  6E0E               	movwf	?_writeEEPROM,c
 11285  0010DC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11286  0010E0  EC21  F02D         	call	_writeEEPROM	;wreg free
 11287                           
 11288                           ;main.c: 2219: rv = readEEPROM(0x72);
 11289  0010E4  6A17               	clrf	?_readEEPROM+1,c
 11290  0010E6  0E72               	movlw	114
 11291  0010E8  6E16               	movwf	?_readEEPROM,c
 11292  0010EA  EC0F  F02E         	call	_readEEPROM	;wreg free
 11293  0010EE  D3BD               	goto	L20
 11294  0010F0                     l10771:
 11295                           
 11296                           ;main.c: 2228: writeEEPROM(0x73, val);
 11297  0010F0  6A0F               	clrf	?_writeEEPROM+1,c
 11298  0010F2  0E73               	movlw	115
 11299  0010F4  6E0E               	movwf	?_writeEEPROM,c
 11300  0010F6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11301  0010FA  EC21  F02D         	call	_writeEEPROM	;wreg free
 11302                           
 11303                           ;main.c: 2229: rv = readEEPROM(0x73);
 11304  0010FE  6A17               	clrf	?_readEEPROM+1,c
 11305  001100  0E73               	movlw	115
 11306  001102  6E16               	movwf	?_readEEPROM,c
 11307  001104  EC0F  F02E         	call	_readEEPROM	;wreg free
 11308  001108  D3B0               	goto	L20
 11309  00110A                     l10773:
 11310                           
 11311                           ;main.c: 2234: writeEEPROM(0x74, val);
 11312  00110A  6A0F               	clrf	?_writeEEPROM+1,c
 11313  00110C  0E74               	movlw	116
 11314  00110E  6E0E               	movwf	?_writeEEPROM,c
 11315  001110  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11316  001114  EC21  F02D         	call	_writeEEPROM	;wreg free
 11317                           
 11318                           ;main.c: 2235: rv = readEEPROM(0x74);
 11319  001118  6A17               	clrf	?_readEEPROM+1,c
 11320  00111A  0E74               	movlw	116
 11321  00111C  6E16               	movwf	?_readEEPROM,c
 11322  00111E  EC0F  F02E         	call	_readEEPROM	;wreg free
 11323  001122  D3A3               	goto	L20
 11324  001124                     l10775:
 11325                           
 11326                           ;main.c: 2240: writeEEPROM(0x75, val);
 11327  001124  6A0F               	clrf	?_writeEEPROM+1,c
 11328  001126  0E75               	movlw	117
 11329  001128  6E0E               	movwf	?_writeEEPROM,c
 11330  00112A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11331  00112E  EC21  F02D         	call	_writeEEPROM	;wreg free
 11332                           
 11333                           ;main.c: 2241: rv = readEEPROM(0x75);
 11334  001132  6A17               	clrf	?_readEEPROM+1,c
 11335  001134  0E75               	movlw	117
 11336  001136  6E16               	movwf	?_readEEPROM,c
 11337  001138  EC0F  F02E         	call	_readEEPROM	;wreg free
 11338  00113C  D396               	goto	L20
 11339  00113E                     l10777:
 11340                           
 11341                           ;main.c: 2246: writeEEPROM(0x76, val);
 11342  00113E  6A0F               	clrf	?_writeEEPROM+1,c
 11343  001140  0E76               	movlw	118
 11344  001142  6E0E               	movwf	?_writeEEPROM,c
 11345  001144  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11346  001148  EC21  F02D         	call	_writeEEPROM	;wreg free
 11347                           
 11348                           ;main.c: 2247: rv = readEEPROM(0x76);
 11349  00114C  6A17               	clrf	?_readEEPROM+1,c
 11350  00114E  0E76               	movlw	118
 11351  001150  6E16               	movwf	?_readEEPROM,c
 11352  001152  EC0F  F02E         	call	_readEEPROM	;wreg free
 11353  001156  D389               	goto	L20
 11354  001158                     l10779:
 11355                           
 11356                           ;main.c: 2252: writeEEPROM(0x77, val);
 11357  001158  6A0F               	clrf	?_writeEEPROM+1,c
 11358  00115A  0E77               	movlw	119
 11359  00115C  6E0E               	movwf	?_writeEEPROM,c
 11360  00115E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11361  001162  EC21  F02D         	call	_writeEEPROM	;wreg free
 11362                           
 11363                           ;main.c: 2253: rv = readEEPROM(0x77);
 11364  001166  6A17               	clrf	?_readEEPROM+1,c
 11365  001168  0E77               	movlw	119
 11366  00116A  6E16               	movwf	?_readEEPROM,c
 11367  00116C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11368  001170  D37C               	goto	L20
 11369  001172                     l10781:
 11370                           
 11371                           ;main.c: 2258: writeEEPROM(0x78, val);
 11372  001172  6A0F               	clrf	?_writeEEPROM+1,c
 11373  001174  0E78               	movlw	120
 11374  001176  6E0E               	movwf	?_writeEEPROM,c
 11375  001178  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11376  00117C  EC21  F02D         	call	_writeEEPROM	;wreg free
 11377                           
 11378                           ;main.c: 2259: rv = readEEPROM(0x78);
 11379  001180  6A17               	clrf	?_readEEPROM+1,c
 11380  001182  0E78               	movlw	120
 11381  001184  6E16               	movwf	?_readEEPROM,c
 11382  001186  EC0F  F02E         	call	_readEEPROM	;wreg free
 11383  00118A  D36F               	goto	L20
 11384  00118C                     l10783:
 11385                           
 11386                           ;main.c: 2264: writeEEPROM(0x79, val);
 11387  00118C  6A0F               	clrf	?_writeEEPROM+1,c
 11388  00118E  0E79               	movlw	121
 11389  001190  6E0E               	movwf	?_writeEEPROM,c
 11390  001192  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11391  001196  EC21  F02D         	call	_writeEEPROM	;wreg free
 11392                           
 11393                           ;main.c: 2265: rv = readEEPROM(0x79);
 11394  00119A  6A17               	clrf	?_readEEPROM+1,c
 11395  00119C  0E79               	movlw	121
 11396  00119E  6E16               	movwf	?_readEEPROM,c
 11397  0011A0  EC0F  F02E         	call	_readEEPROM	;wreg free
 11398  0011A4  D362               	goto	L20
 11399  0011A6                     l10785:
 11400                           
 11401                           ;main.c: 2270: writeEEPROM(0x7A, val);
 11402  0011A6  6A0F               	clrf	?_writeEEPROM+1,c
 11403  0011A8  0E7A               	movlw	122
 11404  0011AA  6E0E               	movwf	?_writeEEPROM,c
 11405  0011AC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11406  0011B0  EC21  F02D         	call	_writeEEPROM	;wreg free
 11407                           
 11408                           ;main.c: 2271: rv = readEEPROM(0x7A);
 11409  0011B4  6A17               	clrf	?_readEEPROM+1,c
 11410  0011B6  0E7A               	movlw	122
 11411  0011B8  6E16               	movwf	?_readEEPROM,c
 11412  0011BA  EC0F  F02E         	call	_readEEPROM	;wreg free
 11413  0011BE  D355               	goto	L20
 11414  0011C0                     l10787:
 11415                           
 11416                           ;main.c: 2276: writeEEPROM(0x7B, val);
 11417  0011C0  6A0F               	clrf	?_writeEEPROM+1,c
 11418  0011C2  0E7B               	movlw	123
 11419  0011C4  6E0E               	movwf	?_writeEEPROM,c
 11420  0011C6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11421  0011CA  EC21  F02D         	call	_writeEEPROM	;wreg free
 11422                           
 11423                           ;main.c: 2277: rv = readEEPROM(0x7B);
 11424  0011CE  6A17               	clrf	?_readEEPROM+1,c
 11425  0011D0  0E7B               	movlw	123
 11426  0011D2  6E16               	movwf	?_readEEPROM,c
 11427  0011D4  EC0F  F02E         	call	_readEEPROM	;wreg free
 11428  0011D8  D348               	goto	L20
 11429  0011DA                     l10789:
 11430                           
 11431                           ;main.c: 2282: writeEEPROM(0x7C, val);
 11432  0011DA  6A0F               	clrf	?_writeEEPROM+1,c
 11433  0011DC  0E7C               	movlw	124
 11434  0011DE  6E0E               	movwf	?_writeEEPROM,c
 11435  0011E0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11436  0011E4  EC21  F02D         	call	_writeEEPROM	;wreg free
 11437                           
 11438                           ;main.c: 2283: rv = readEEPROM(0x7C);
 11439  0011E8  6A17               	clrf	?_readEEPROM+1,c
 11440  0011EA  0E7C               	movlw	124
 11441  0011EC  6E16               	movwf	?_readEEPROM,c
 11442  0011EE  EC0F  F02E         	call	_readEEPROM	;wreg free
 11443  0011F2  D33B               	goto	L20
 11444  0011F4                     l10791:
 11445                           
 11446                           ;main.c: 2288: writeEEPROM(0x7D, val);
 11447  0011F4  6A0F               	clrf	?_writeEEPROM+1,c
 11448  0011F6  0E7D               	movlw	125
 11449  0011F8  6E0E               	movwf	?_writeEEPROM,c
 11450  0011FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11451  0011FE  EC21  F02D         	call	_writeEEPROM	;wreg free
 11452                           
 11453                           ;main.c: 2289: rv = readEEPROM(0x7D);
 11454  001202  6A17               	clrf	?_readEEPROM+1,c
 11455  001204  0E7D               	movlw	125
 11456  001206  6E16               	movwf	?_readEEPROM,c
 11457  001208  EC0F  F02E         	call	_readEEPROM	;wreg free
 11458  00120C  D32E               	goto	L20
 11459  00120E                     l10793:
 11460                           
 11461                           ;main.c: 2294: writeEEPROM(0x7E, val);
 11462  00120E  6A0F               	clrf	?_writeEEPROM+1,c
 11463  001210  0E7E               	movlw	126
 11464  001212  6E0E               	movwf	?_writeEEPROM,c
 11465  001214  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11466  001218  EC21  F02D         	call	_writeEEPROM	;wreg free
 11467                           
 11468                           ;main.c: 2295: rv = readEEPROM(0x7E);
 11469  00121C  6A17               	clrf	?_readEEPROM+1,c
 11470  00121E  0E7E               	movlw	126
 11471  001220  6E16               	movwf	?_readEEPROM,c
 11472  001222  EC0F  F02E         	call	_readEEPROM	;wreg free
 11473  001226  D321               	goto	L20
 11474  001228                     l10795:
 11475                           
 11476                           ;main.c: 2304: writeEEPROM(0x7F, val );
 11477  001228  6A0F               	clrf	?_writeEEPROM+1,c
 11478  00122A  0E7F               	movlw	127
 11479  00122C  6E0E               	movwf	?_writeEEPROM,c
 11480  00122E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11481  001232  EC21  F02D         	call	_writeEEPROM	;wreg free
 11482                           
 11483                           ;main.c: 2305: rv = readEEPROM(0x7F);
 11484  001236  6A17               	clrf	?_readEEPROM+1,c
 11485  001238  0E7F               	movlw	127
 11486  00123A  6E16               	movwf	?_readEEPROM,c
 11487  00123C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11488  001240  D314               	goto	L20
 11489  001242                     l10797:
 11490                           
 11491                           ;main.c: 2310: writeEEPROM(0x80, val );
 11492  001242  6A0F               	clrf	?_writeEEPROM+1,c
 11493  001244  0E80               	movlw	128
 11494  001246  6E0E               	movwf	?_writeEEPROM,c
 11495  001248  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11496  00124C  EC21  F02D         	call	_writeEEPROM	;wreg free
 11497                           
 11498                           ;main.c: 2311: rv = readEEPROM(0x80);
 11499  001250  6A17               	clrf	?_readEEPROM+1,c
 11500  001252  0E80               	movlw	128
 11501  001254  6E16               	movwf	?_readEEPROM,c
 11502  001256  EC0F  F02E         	call	_readEEPROM	;wreg free
 11503  00125A  D307               	goto	L20
 11504  00125C                     l10799:
 11505                           
 11506                           ;main.c: 2316: writeEEPROM(0x81, val );
 11507  00125C  6A0F               	clrf	?_writeEEPROM+1,c
 11508  00125E  0E81               	movlw	129
 11509  001260  6E0E               	movwf	?_writeEEPROM,c
 11510  001262  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11511  001266  EC21  F02D         	call	_writeEEPROM	;wreg free
 11512                           
 11513                           ;main.c: 2317: rv = readEEPROM(0x81);
 11514  00126A  6A17               	clrf	?_readEEPROM+1,c
 11515  00126C  0E81               	movlw	129
 11516  00126E  6E16               	movwf	?_readEEPROM,c
 11517  001270  EC0F  F02E         	call	_readEEPROM	;wreg free
 11518  001274  D2FA               	goto	L20
 11519  001276                     l10801:
 11520                           
 11521                           ;main.c: 2322: writeEEPROM(0x82, val );
 11522  001276  6A0F               	clrf	?_writeEEPROM+1,c
 11523  001278  0E82               	movlw	130
 11524  00127A  6E0E               	movwf	?_writeEEPROM,c
 11525  00127C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11526  001280  EC21  F02D         	call	_writeEEPROM	;wreg free
 11527                           
 11528                           ;main.c: 2323: rv = readEEPROM(0x82);
 11529  001284  6A17               	clrf	?_readEEPROM+1,c
 11530  001286  0E82               	movlw	130
 11531  001288  6E16               	movwf	?_readEEPROM,c
 11532  00128A  EC0F  F02E         	call	_readEEPROM	;wreg free
 11533  00128E  D2ED               	goto	L20
 11534  001290                     l10803:
 11535                           
 11536                           ;main.c: 2328: writeEEPROM(0x83, val );
 11537  001290  6A0F               	clrf	?_writeEEPROM+1,c
 11538  001292  0E83               	movlw	131
 11539  001294  6E0E               	movwf	?_writeEEPROM,c
 11540  001296  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11541  00129A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11542                           
 11543                           ;main.c: 2329: rv = readEEPROM(0x83);
 11544  00129E  6A17               	clrf	?_readEEPROM+1,c
 11545  0012A0  0E83               	movlw	131
 11546  0012A2  6E16               	movwf	?_readEEPROM,c
 11547  0012A4  EC0F  F02E         	call	_readEEPROM	;wreg free
 11548  0012A8  D2E0               	goto	L20
 11549  0012AA                     l10805:
 11550                           
 11551                           ;main.c: 2334: writeEEPROM(0x84, val );
 11552  0012AA  6A0F               	clrf	?_writeEEPROM+1,c
 11553  0012AC  0E84               	movlw	132
 11554  0012AE  6E0E               	movwf	?_writeEEPROM,c
 11555  0012B0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11556  0012B4  EC21  F02D         	call	_writeEEPROM	;wreg free
 11557                           
 11558                           ;main.c: 2335: rv = readEEPROM(0x84);
 11559  0012B8  6A17               	clrf	?_readEEPROM+1,c
 11560  0012BA  0E84               	movlw	132
 11561  0012BC  6E16               	movwf	?_readEEPROM,c
 11562  0012BE  EC0F  F02E         	call	_readEEPROM	;wreg free
 11563  0012C2  D2D3               	goto	L20
 11564  0012C4                     l10807:
 11565                           
 11566                           ;main.c: 2340: writeEEPROM(0x85, val );
 11567  0012C4  6A0F               	clrf	?_writeEEPROM+1,c
 11568  0012C6  0E85               	movlw	133
 11569  0012C8  6E0E               	movwf	?_writeEEPROM,c
 11570  0012CA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11571  0012CE  EC21  F02D         	call	_writeEEPROM	;wreg free
 11572                           
 11573                           ;main.c: 2341: rv = readEEPROM(0x85);
 11574  0012D2  6A17               	clrf	?_readEEPROM+1,c
 11575  0012D4  0E85               	movlw	133
 11576  0012D6  6E16               	movwf	?_readEEPROM,c
 11577  0012D8  EC0F  F02E         	call	_readEEPROM	;wreg free
 11578  0012DC  D2C6               	goto	L20
 11579  0012DE                     l10809:
 11580                           
 11581                           ;main.c: 2346: writeEEPROM(0x86, val );
 11582  0012DE  6A0F               	clrf	?_writeEEPROM+1,c
 11583  0012E0  0E86               	movlw	134
 11584  0012E2  6E0E               	movwf	?_writeEEPROM,c
 11585  0012E4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11586  0012E8  EC21  F02D         	call	_writeEEPROM	;wreg free
 11587                           
 11588                           ;main.c: 2347: rv = readEEPROM(0x86);
 11589  0012EC  6A17               	clrf	?_readEEPROM+1,c
 11590  0012EE  0E86               	movlw	134
 11591  0012F0  6E16               	movwf	?_readEEPROM,c
 11592  0012F2  EC0F  F02E         	call	_readEEPROM	;wreg free
 11593  0012F6  D2B9               	goto	L20
 11594  0012F8                     l10811:
 11595                           
 11596                           ;main.c: 2352: writeEEPROM(0x87, val );
 11597  0012F8  6A0F               	clrf	?_writeEEPROM+1,c
 11598  0012FA  0E87               	movlw	135
 11599  0012FC  6E0E               	movwf	?_writeEEPROM,c
 11600  0012FE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11601  001302  EC21  F02D         	call	_writeEEPROM	;wreg free
 11602                           
 11603                           ;main.c: 2353: rv = readEEPROM(0x87);
 11604  001306  6A17               	clrf	?_readEEPROM+1,c
 11605  001308  0E87               	movlw	135
 11606  00130A  6E16               	movwf	?_readEEPROM,c
 11607  00130C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11608  001310  D2AC               	goto	L20
 11609  001312                     l10813:
 11610                           
 11611                           ;main.c: 2358: writeEEPROM(0x88, val );
 11612  001312  6A0F               	clrf	?_writeEEPROM+1,c
 11613  001314  0E88               	movlw	136
 11614  001316  6E0E               	movwf	?_writeEEPROM,c
 11615  001318  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11616  00131C  EC21  F02D         	call	_writeEEPROM	;wreg free
 11617                           
 11618                           ;main.c: 2359: rv = readEEPROM(0x88);
 11619  001320  6A17               	clrf	?_readEEPROM+1,c
 11620  001322  0E88               	movlw	136
 11621  001324  6E16               	movwf	?_readEEPROM,c
 11622  001326  EC0F  F02E         	call	_readEEPROM	;wreg free
 11623  00132A  D29F               	goto	L20
 11624  00132C                     l10815:
 11625                           
 11626                           ;main.c: 2364: writeEEPROM(0x89, val );
 11627  00132C  6A0F               	clrf	?_writeEEPROM+1,c
 11628  00132E  0E89               	movlw	137
 11629  001330  6E0E               	movwf	?_writeEEPROM,c
 11630  001332  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11631  001336  EC21  F02D         	call	_writeEEPROM	;wreg free
 11632                           
 11633                           ;main.c: 2365: rv = readEEPROM(0x89);
 11634  00133A  6A17               	clrf	?_readEEPROM+1,c
 11635  00133C  0E89               	movlw	137
 11636  00133E  6E16               	movwf	?_readEEPROM,c
 11637  001340  EC0F  F02E         	call	_readEEPROM	;wreg free
 11638  001344  D292               	goto	L20
 11639  001346                     l10817:
 11640                           
 11641                           ;main.c: 2370: writeEEPROM(0x8A, val );
 11642  001346  6A0F               	clrf	?_writeEEPROM+1,c
 11643  001348  0E8A               	movlw	138
 11644  00134A  6E0E               	movwf	?_writeEEPROM,c
 11645  00134C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11646  001350  EC21  F02D         	call	_writeEEPROM	;wreg free
 11647                           
 11648                           ;main.c: 2371: rv = readEEPROM(0x8A);
 11649  001354  6A17               	clrf	?_readEEPROM+1,c
 11650  001356  0E8A               	movlw	138
 11651  001358  6E16               	movwf	?_readEEPROM,c
 11652  00135A  EC0F  F02E         	call	_readEEPROM	;wreg free
 11653  00135E  D285               	goto	L20
 11654  001360                     l10819:
 11655                           
 11656                           ;main.c: 2380: writeEEPROM(0x8B, val );
 11657  001360  6A0F               	clrf	?_writeEEPROM+1,c
 11658  001362  0E8B               	movlw	139
 11659  001364  6E0E               	movwf	?_writeEEPROM,c
 11660  001366  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11661  00136A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11662                           
 11663                           ;main.c: 2381: rv = readEEPROM(0x8B);
 11664  00136E  6A17               	clrf	?_readEEPROM+1,c
 11665  001370  0E8B               	movlw	139
 11666  001372  6E16               	movwf	?_readEEPROM,c
 11667  001374  EC0F  F02E         	call	_readEEPROM	;wreg free
 11668  001378  D278               	goto	L20
 11669  00137A                     l10821:
 11670                           
 11671                           ;main.c: 2386: writeEEPROM(0x8C, val );
 11672  00137A  6A0F               	clrf	?_writeEEPROM+1,c
 11673  00137C  0E8C               	movlw	140
 11674  00137E  6E0E               	movwf	?_writeEEPROM,c
 11675  001380  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11676  001384  EC21  F02D         	call	_writeEEPROM	;wreg free
 11677                           
 11678                           ;main.c: 2387: rv = readEEPROM(0x8C);
 11679  001388  6A17               	clrf	?_readEEPROM+1,c
 11680  00138A  0E8C               	movlw	140
 11681  00138C  6E16               	movwf	?_readEEPROM,c
 11682  00138E  EC0F  F02E         	call	_readEEPROM	;wreg free
 11683  001392  D26B               	goto	L20
 11684  001394                     l10823:
 11685                           
 11686                           ;main.c: 2392: writeEEPROM(0x8D, val );
 11687  001394  6A0F               	clrf	?_writeEEPROM+1,c
 11688  001396  0E8D               	movlw	141
 11689  001398  6E0E               	movwf	?_writeEEPROM,c
 11690  00139A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11691  00139E  EC21  F02D         	call	_writeEEPROM	;wreg free
 11692                           
 11693                           ;main.c: 2393: rv = readEEPROM(0x8D);
 11694  0013A2  6A17               	clrf	?_readEEPROM+1,c
 11695  0013A4  0E8D               	movlw	141
 11696  0013A6  6E16               	movwf	?_readEEPROM,c
 11697  0013A8  EC0F  F02E         	call	_readEEPROM	;wreg free
 11698  0013AC  D25E               	goto	L20
 11699  0013AE                     l10825:
 11700                           
 11701                           ;main.c: 2398: writeEEPROM(0x8E, val );
 11702  0013AE  6A0F               	clrf	?_writeEEPROM+1,c
 11703  0013B0  0E8E               	movlw	142
 11704  0013B2  6E0E               	movwf	?_writeEEPROM,c
 11705  0013B4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11706  0013B8  EC21  F02D         	call	_writeEEPROM	;wreg free
 11707                           
 11708                           ;main.c: 2399: rv = readEEPROM(0x8E);
 11709  0013BC  6A17               	clrf	?_readEEPROM+1,c
 11710  0013BE  0E8E               	movlw	142
 11711  0013C0  6E16               	movwf	?_readEEPROM,c
 11712  0013C2  EC0F  F02E         	call	_readEEPROM	;wreg free
 11713  0013C6  D251               	goto	L20
 11714  0013C8                     l10827:
 11715                           
 11716                           ;main.c: 2404: writeEEPROM(0x8F, val );
 11717  0013C8  6A0F               	clrf	?_writeEEPROM+1,c
 11718  0013CA  0E8F               	movlw	143
 11719  0013CC  6E0E               	movwf	?_writeEEPROM,c
 11720  0013CE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11721  0013D2  EC21  F02D         	call	_writeEEPROM	;wreg free
 11722                           
 11723                           ;main.c: 2405: rv = readEEPROM(0x8F);
 11724  0013D6  6A17               	clrf	?_readEEPROM+1,c
 11725  0013D8  0E8F               	movlw	143
 11726  0013DA  6E16               	movwf	?_readEEPROM,c
 11727  0013DC  EC0F  F02E         	call	_readEEPROM	;wreg free
 11728  0013E0  D244               	goto	L20
 11729  0013E2                     l10829:
 11730                           
 11731                           ;main.c: 2410: writeEEPROM(0x90, val );
 11732  0013E2  6A0F               	clrf	?_writeEEPROM+1,c
 11733  0013E4  0E90               	movlw	144
 11734  0013E6  6E0E               	movwf	?_writeEEPROM,c
 11735  0013E8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11736  0013EC  EC21  F02D         	call	_writeEEPROM	;wreg free
 11737                           
 11738                           ;main.c: 2411: rv = readEEPROM(0x90);
 11739  0013F0  6A17               	clrf	?_readEEPROM+1,c
 11740  0013F2  0E90               	movlw	144
 11741  0013F4  6E16               	movwf	?_readEEPROM,c
 11742  0013F6  EC0F  F02E         	call	_readEEPROM	;wreg free
 11743  0013FA  D237               	goto	L20
 11744  0013FC                     l10831:
 11745                           
 11746                           ;main.c: 2416: writeEEPROM(0x91, val );
 11747  0013FC  6A0F               	clrf	?_writeEEPROM+1,c
 11748  0013FE  0E91               	movlw	145
 11749  001400  6E0E               	movwf	?_writeEEPROM,c
 11750  001402  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11751  001406  EC21  F02D         	call	_writeEEPROM	;wreg free
 11752                           
 11753                           ;main.c: 2417: rv = readEEPROM(0x91);
 11754  00140A  6A17               	clrf	?_readEEPROM+1,c
 11755  00140C  0E91               	movlw	145
 11756  00140E  6E16               	movwf	?_readEEPROM,c
 11757  001410  EC0F  F02E         	call	_readEEPROM	;wreg free
 11758  001414  D22A               	goto	L20
 11759  001416                     l10833:
 11760                           
 11761                           ;main.c: 2422: writeEEPROM(0x92, val );
 11762  001416  6A0F               	clrf	?_writeEEPROM+1,c
 11763  001418  0E92               	movlw	146
 11764  00141A  6E0E               	movwf	?_writeEEPROM,c
 11765  00141C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11766  001420  EC21  F02D         	call	_writeEEPROM	;wreg free
 11767                           
 11768                           ;main.c: 2423: rv = readEEPROM(0x92);
 11769  001424  6A17               	clrf	?_readEEPROM+1,c
 11770  001426  0E92               	movlw	146
 11771  001428  6E16               	movwf	?_readEEPROM,c
 11772  00142A  EC0F  F02E         	call	_readEEPROM	;wreg free
 11773  00142E  D21D               	goto	L20
 11774  001430                     l10835:
 11775                           
 11776                           ;main.c: 2428: writeEEPROM(0x93, val );
 11777  001430  6A0F               	clrf	?_writeEEPROM+1,c
 11778  001432  0E93               	movlw	147
 11779  001434  6E0E               	movwf	?_writeEEPROM,c
 11780  001436  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11781  00143A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11782                           
 11783                           ;main.c: 2429: rv = readEEPROM(0x93);
 11784  00143E  6A17               	clrf	?_readEEPROM+1,c
 11785  001440  0E93               	movlw	147
 11786  001442  6E16               	movwf	?_readEEPROM,c
 11787  001444  EC0F  F02E         	call	_readEEPROM	;wreg free
 11788  001448  D210               	goto	L20
 11789  00144A                     l10837:
 11790                           
 11791                           ;main.c: 2434: writeEEPROM(0x94, val );
 11792  00144A  6A0F               	clrf	?_writeEEPROM+1,c
 11793  00144C  0E94               	movlw	148
 11794  00144E  6E0E               	movwf	?_writeEEPROM,c
 11795  001450  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11796  001454  EC21  F02D         	call	_writeEEPROM	;wreg free
 11797                           
 11798                           ;main.c: 2435: rv = readEEPROM(0x94);
 11799  001458  6A17               	clrf	?_readEEPROM+1,c
 11800  00145A  0E94               	movlw	148
 11801  00145C  6E16               	movwf	?_readEEPROM,c
 11802  00145E  EC0F  F02E         	call	_readEEPROM	;wreg free
 11803  001462  D203               	goto	L20
 11804  001464                     l10839:
 11805                           
 11806                           ;main.c: 2440: writeEEPROM(0x95, val );
 11807  001464  6A0F               	clrf	?_writeEEPROM+1,c
 11808  001466  0E95               	movlw	149
 11809  001468  6E0E               	movwf	?_writeEEPROM,c
 11810  00146A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11811  00146E  EC21  F02D         	call	_writeEEPROM	;wreg free
 11812                           
 11813                           ;main.c: 2441: rv = readEEPROM(0x95);
 11814  001472  6A17               	clrf	?_readEEPROM+1,c
 11815  001474  0E95               	movlw	149
 11816  001476  6E16               	movwf	?_readEEPROM,c
 11817  001478  EC0F  F02E         	call	_readEEPROM	;wreg free
 11818  00147C  D1F6               	goto	L20
 11819  00147E                     l10841:
 11820                           
 11821                           ;main.c: 2446: writeEEPROM(0x96, val );
 11822  00147E  6A0F               	clrf	?_writeEEPROM+1,c
 11823  001480  0E96               	movlw	150
 11824  001482  6E0E               	movwf	?_writeEEPROM,c
 11825  001484  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11826  001488  EC21  F02D         	call	_writeEEPROM	;wreg free
 11827                           
 11828                           ;main.c: 2447: rv = readEEPROM(0x96);
 11829  00148C  6A17               	clrf	?_readEEPROM+1,c
 11830  00148E  0E96               	movlw	150
 11831  001490  6E16               	movwf	?_readEEPROM,c
 11832  001492  EC0F  F02E         	call	_readEEPROM	;wreg free
 11833  001496  D1E9               	goto	L20
 11834  001498                     l10843:
 11835                           
 11836                           ;main.c: 2456: writeEEPROM(0x97, val);
 11837  001498  6A0F               	clrf	?_writeEEPROM+1,c
 11838  00149A  0E97               	movlw	151
 11839  00149C  6E0E               	movwf	?_writeEEPROM,c
 11840  00149E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11841  0014A2  EC21  F02D         	call	_writeEEPROM	;wreg free
 11842                           
 11843                           ;main.c: 2457: rv = readEEPROM(0x97);
 11844  0014A6  6A17               	clrf	?_readEEPROM+1,c
 11845  0014A8  0E97               	movlw	151
 11846  0014AA  6E16               	movwf	?_readEEPROM,c
 11847  0014AC  EC0F  F02E         	call	_readEEPROM	;wreg free
 11848  0014B0  D1DC               	goto	L20
 11849  0014B2                     l10845:
 11850                           
 11851                           ;main.c: 2462: writeEEPROM(0x98, val);
 11852  0014B2  6A0F               	clrf	?_writeEEPROM+1,c
 11853  0014B4  0E98               	movlw	152
 11854  0014B6  6E0E               	movwf	?_writeEEPROM,c
 11855  0014B8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11856  0014BC  EC21  F02D         	call	_writeEEPROM	;wreg free
 11857                           
 11858                           ;main.c: 2463: rv = readEEPROM(0x98);
 11859  0014C0  6A17               	clrf	?_readEEPROM+1,c
 11860  0014C2  0E98               	movlw	152
 11861  0014C4  6E16               	movwf	?_readEEPROM,c
 11862  0014C6  EC0F  F02E         	call	_readEEPROM	;wreg free
 11863  0014CA  D1CF               	goto	L20
 11864  0014CC                     l10847:
 11865                           
 11866                           ;main.c: 2468: writeEEPROM(0x99, val);
 11867  0014CC  6A0F               	clrf	?_writeEEPROM+1,c
 11868  0014CE  0E99               	movlw	153
 11869  0014D0  6E0E               	movwf	?_writeEEPROM,c
 11870  0014D2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11871  0014D6  EC21  F02D         	call	_writeEEPROM	;wreg free
 11872  0014DA  6A17               	clrf	?_readEEPROM+1,c
 11873  0014DC  0E99               	movlw	153
 11874  0014DE  6E16               	movwf	?_readEEPROM,c
 11875  0014E0  EC0F  F02E         	call	_readEEPROM	;wreg free
 11876  0014E4                     l516:
 11877                           
 11878                           ;main.c: 2473: writeEEPROM(0x9A, val);
 11879  0014E4  6A0F               	clrf	?_writeEEPROM+1,c
 11880  0014E6  0E9A               	movlw	154
 11881  0014E8  6E0E               	movwf	?_writeEEPROM,c
 11882  0014EA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11883  0014EE  EC21  F02D         	call	_writeEEPROM	;wreg free
 11884                           
 11885                           ;main.c: 2474: rv = readEEPROM(0x9A);
 11886  0014F2  6A17               	clrf	?_readEEPROM+1,c
 11887  0014F4  0E9A               	movlw	154
 11888  0014F6  6E16               	movwf	?_readEEPROM,c
 11889  0014F8  EC0F  F02E         	call	_readEEPROM	;wreg free
 11890  0014FC  D1B6               	goto	L20
 11891  0014FE                     l10849:
 11892                           
 11893                           ;main.c: 2479: writeEEPROM(0x9B, val);
 11894  0014FE  6A0F               	clrf	?_writeEEPROM+1,c
 11895  001500  0E9B               	movlw	155
 11896  001502  6E0E               	movwf	?_writeEEPROM,c
 11897  001504  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11898  001508  EC21  F02D         	call	_writeEEPROM	;wreg free
 11899                           
 11900                           ;main.c: 2480: rv = readEEPROM(0x9B);
 11901  00150C  6A17               	clrf	?_readEEPROM+1,c
 11902  00150E  0E9B               	movlw	155
 11903  001510  6E16               	movwf	?_readEEPROM,c
 11904  001512  EC0F  F02E         	call	_readEEPROM	;wreg free
 11905  001516  D1A9               	goto	L20
 11906  001518                     l10851:
 11907                           
 11908                           ;main.c: 2485: writeEEPROM(0x9C, val);
 11909  001518  6A0F               	clrf	?_writeEEPROM+1,c
 11910  00151A  0E9C               	movlw	156
 11911  00151C  6E0E               	movwf	?_writeEEPROM,c
 11912  00151E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11913  001522  EC21  F02D         	call	_writeEEPROM	;wreg free
 11914                           
 11915                           ;main.c: 2486: rv = readEEPROM(0x9C);
 11916  001526  6A17               	clrf	?_readEEPROM+1,c
 11917  001528  0E9C               	movlw	156
 11918  00152A  6E16               	movwf	?_readEEPROM,c
 11919  00152C  EC0F  F02E         	call	_readEEPROM	;wreg free
 11920  001530  D19C               	goto	L20
 11921  001532                     l519:
 11922                           
 11923                           ;main.c: 2491: rv = 0;
 11924  001532  6A26               	clrf	vscp_writeAppReg@rv,c
 11925                           
 11926                           ;main.c: 2492: break;
 11927  001534  D19B               	goto	l10887
 11928  001536                     l10853:
 11929                           
 11930                           ;main.c: 2501: writeEEPROM(0xF2, val);
 11931  001536  6A0F               	clrf	?_writeEEPROM+1,c
 11932  001538  0EF2               	movlw	242
 11933  00153A  6E0E               	movwf	?_writeEEPROM,c
 11934  00153C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11935  001540  EC21  F02D         	call	_writeEEPROM	;wreg free
 11936                           
 11937                           ;main.c: 2502: rv = readEEPROM(0xF2);
 11938  001544  6A17               	clrf	?_readEEPROM+1,c
 11939  001546  0EF2               	movlw	242
 11940  001548  6E16               	movwf	?_readEEPROM,c
 11941  00154A  EC0F  F02E         	call	_readEEPROM	;wreg free
 11942  00154E  D18D               	goto	L20
 11943  001550                     l10855:
 11944                           
 11945                           ;main.c: 2507: writeEEPROM(0xF3, val);
 11946  001550  6A0F               	clrf	?_writeEEPROM+1,c
 11947  001552  0EF3               	movlw	243
 11948  001554  6E0E               	movwf	?_writeEEPROM,c
 11949  001556  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11950  00155A  EC21  F02D         	call	_writeEEPROM	;wreg free
 11951                           
 11952                           ;main.c: 2508: rv = readEEPROM(0xF3);
 11953  00155E  6A17               	clrf	?_readEEPROM+1,c
 11954  001560  0EF3               	movlw	243
 11955  001562  6E16               	movwf	?_readEEPROM,c
 11956  001564  EC0F  F02E         	call	_readEEPROM	;wreg free
 11957  001568  D180               	goto	L20
 11958  00156A                     l10857:
 11959                           
 11960                           ;main.c: 2512: rv = ~val;
 11961  00156A  1C23               	comf	vscp_writeAppReg@val,w,c
 11962  00156C  D17E               	goto	L20
 11963  00156E                     l10861:
 11964  00156E  5025               	movf	vscp_writeAppReg@reg,w,c
 11965                           
 11966                           ; Switch size 1, requested type "speed"
 11967                           ; Number of cases is 96, Range of values is 0 to 119
 11968                           ; switch strategies available:
 11969                           ; Name         Instructions Cycles
 11970                           ; simple_byte          289   145 (average)
 11971                           ;	Chosen strategy is simple_byte
 11972  001570  E102 EFC2  F005    	bz	l10671
 11973  001576  0A01               	xorlw	1	; case 1
 11974  001578  E102 EFD0  F005    	bz	l10673
 11975  00157E  0A03               	xorlw	3	; case 2
 11976  001580  E102 EFDE  F005    	bz	l10675
 11977  001586  0A01               	xorlw	1	; case 3
 11978  001588  E102 EFEC  F005    	bz	l10677
 11979  00158E  0A07               	xorlw	7	; case 4
 11980  001590  E102 EFFA  F005    	bz	l10679
 11981  001596  0A01               	xorlw	1	; case 5
 11982  001598  E102 EF08  F006    	bz	l10681
 11983  00159E  0A03               	xorlw	3	; case 6
 11984  0015A0  E102 EF16  F006    	bz	l10683
 11985  0015A6  0A01               	xorlw	1	; case 7
 11986  0015A8  E102 EF24  F006    	bz	l10685
 11987  0015AE  0A13               	xorlw	19	; case 20
 11988  0015B0  E102 EF32  F006    	bz	l10687
 11989  0015B6  0A01               	xorlw	1	; case 21
 11990  0015B8  E102 EF40  F006    	bz	l10689
 11991  0015BE  0A03               	xorlw	3	; case 22
 11992  0015C0  E102 EF4E  F006    	bz	l10691
 11993  0015C6  0A01               	xorlw	1	; case 23
 11994  0015C8  E102 EF5C  F006    	bz	l10693
 11995  0015CE  0A0F               	xorlw	15	; case 24
 11996  0015D0  E102 EF6A  F006    	bz	l10695
 11997  0015D6  0A01               	xorlw	1	; case 25
 11998  0015D8  E102 EF78  F006    	bz	l10697
 11999  0015DE  0A3F               	xorlw	63	; case 38
 12000  0015E0  E102 EF86  F006    	bz	l10699
 12001  0015E6  0A01               	xorlw	1	; case 39
 12002  0015E8  E102 EF94  F006    	bz	l10701
 12003  0015EE  0A0F               	xorlw	15	; case 40
 12004  0015F0  E102 EFA2  F006    	bz	l10703
 12005  0015F6  0A01               	xorlw	1	; case 41
 12006  0015F8  E102 EFB0  F006    	bz	l10705
 12007  0015FE  0A03               	xorlw	3	; case 42
 12008  001600  E102 EFBE  F006    	bz	l10707
 12009  001606  0A01               	xorlw	1	; case 43
 12010  001608  E102 EFCC  F006    	bz	l10709
 12011  00160E  0A07               	xorlw	7	; case 44
 12012  001610  E102 EFDA  F006    	bz	l10711
 12013  001616  0A01               	xorlw	1	; case 45
 12014  001618  E102 EFE8  F006    	bz	l10713
 12015  00161E  0A03               	xorlw	3	; case 46
 12016  001620  E102 EFF6  F006    	bz	l10715
 12017  001626  0A01               	xorlw	1	; case 47
 12018  001628  E102 EF04  F007    	bz	l10717
 12019  00162E  0A1F               	xorlw	31	; case 48
 12020  001630  E102 EF12  F007    	bz	l10719
 12021  001636  0A01               	xorlw	1	; case 49
 12022  001638  E101 D402          	bz	l10721
 12023  00163C  0A03               	xorlw	3	; case 50
 12024  00163E  E101 D40D          	bz	l10723
 12025  001642  0A01               	xorlw	1	; case 51
 12026  001644  E101 D418          	bz	l10725
 12027  001648  0A07               	xorlw	7	; case 52
 12028  00164A  E101 D423          	bz	l10727
 12029  00164E  0A01               	xorlw	1	; case 53
 12030  001650  E101 D42E          	bz	l10729
 12031  001654  0A03               	xorlw	3	; case 54
 12032  001656  E101 D439          	bz	l10731
 12033  00165A  0A01               	xorlw	1	; case 55
 12034  00165C  E101 D444          	bz	l10733
 12035  001660  0A0F               	xorlw	15	; case 56
 12036  001662  E101 D44F          	bz	l10735
 12037  001666  0A01               	xorlw	1	; case 57
 12038  001668  E101 D45A          	bz	l10737
 12039  00166C  0A03               	xorlw	3	; case 58
 12040  00166E  E101 D465          	bz	l10739
 12041  001672  0A01               	xorlw	1	; case 59
 12042  001674  E101 D470          	bz	l10741
 12043  001678  0A07               	xorlw	7	; case 60
 12044  00167A  E101 D47B          	bz	l10743
 12045  00167E  0A01               	xorlw	1	; case 61
 12046  001680  E101 D486          	bz	l10745
 12047  001684  0A03               	xorlw	3	; case 62
 12048  001686  E101 D491          	bz	l10747
 12049  00168A  0A01               	xorlw	1	; case 63
 12050  00168C  E101 D49C          	bz	l10749
 12051  001690  0A7F               	xorlw	127	; case 64
 12052  001692  E101 D4A7          	bz	l10751
 12053  001696  0A01               	xorlw	1	; case 65
 12054  001698  E101 D4B2          	bz	l10753
 12055  00169C  0A03               	xorlw	3	; case 66
 12056  00169E  E101 D4BD          	bz	l10755
 12057  0016A2  0A01               	xorlw	1	; case 67
 12058  0016A4  E101 D4C8          	bz	l10757
 12059  0016A8  0A07               	xorlw	7	; case 68
 12060  0016AA  E101 D4D3          	bz	l10759
 12061  0016AE  0A01               	xorlw	1	; case 69
 12062  0016B0  E101 D4DD          	bz	l10761
 12063  0016B4  0A03               	xorlw	3	; case 70
 12064  0016B6  E101 D4E7          	bz	l10763
 12065  0016BA  0A01               	xorlw	1	; case 71
 12066  0016BC  E101 D4F1          	bz	l10765
 12067  0016C0  0A0F               	xorlw	15	; case 72
 12068  0016C2  E101 D4FB          	bz	l10767
 12069  0016C6  0A01               	xorlw	1	; case 73
 12070  0016C8  E101 D505          	bz	l10769
 12071  0016CC  0A03               	xorlw	3	; case 74
 12072  0016CE  E101 D50F          	bz	l10771
 12073  0016D2  0A01               	xorlw	1	; case 75
 12074  0016D4  E101 D519          	bz	l10773
 12075  0016D8  0A07               	xorlw	7	; case 76
 12076  0016DA  E101 D523          	bz	l10775
 12077  0016DE  0A01               	xorlw	1	; case 77
 12078  0016E0  E101 D52D          	bz	l10777
 12079  0016E4  0A03               	xorlw	3	; case 78
 12080  0016E6  E101 D537          	bz	l10779
 12081  0016EA  0A01               	xorlw	1	; case 79
 12082  0016EC  E101 D541          	bz	l10781
 12083  0016F0  0A1F               	xorlw	31	; case 80
 12084  0016F2  E101 D54B          	bz	l10783
 12085  0016F6  0A01               	xorlw	1	; case 81
 12086  0016F8  E101 D555          	bz	l10785
 12087  0016FC  0A03               	xorlw	3	; case 82
 12088  0016FE  E101 D55F          	bz	l10787
 12089  001702  0A01               	xorlw	1	; case 83
 12090  001704  E101 D569          	bz	l10789
 12091  001708  0A07               	xorlw	7	; case 84
 12092  00170A  E101 D573          	bz	l10791
 12093  00170E  0A01               	xorlw	1	; case 85
 12094  001710  E101 D57D          	bz	l10793
 12095  001714  0A03               	xorlw	3	; case 86
 12096  001716  E101 D587          	bz	l10795
 12097  00171A  0A01               	xorlw	1	; case 87
 12098  00171C  E101 D591          	bz	l10797
 12099  001720  0A0F               	xorlw	15	; case 88
 12100  001722  E101 D59B          	bz	l10799
 12101  001726  0A01               	xorlw	1	; case 89
 12102  001728  E101 D5A5          	bz	l10801
 12103  00172C  0A03               	xorlw	3	; case 90
 12104  00172E  E101 D5AF          	bz	l10803
 12105  001732  0A01               	xorlw	1	; case 91
 12106  001734  E101 D5B9          	bz	l10805
 12107  001738  0A07               	xorlw	7	; case 92
 12108  00173A  E101 D5C3          	bz	l10807
 12109  00173E  0A01               	xorlw	1	; case 93
 12110  001740  E101 D5CD          	bz	l10809
 12111  001744  0A03               	xorlw	3	; case 94
 12112  001746  E101 D5D7          	bz	l10811
 12113  00174A  0A01               	xorlw	1	; case 95
 12114  00174C  E101 D5E1          	bz	l10813
 12115  001750  0A3F               	xorlw	63	; case 96
 12116  001752  E101 D5EB          	bz	l10815
 12117  001756  0A01               	xorlw	1	; case 97
 12118  001758  E101 D5F5          	bz	l10817
 12119  00175C  0A03               	xorlw	3	; case 98
 12120  00175E  E101 D5FF          	bz	l10819
 12121  001762  0A01               	xorlw	1	; case 99
 12122  001764  E101 D609          	bz	l10821
 12123  001768  0A07               	xorlw	7	; case 100
 12124  00176A  E101 D613          	bz	l10823
 12125  00176E  0A01               	xorlw	1	; case 101
 12126  001770  E101 D61D          	bz	l10825
 12127  001774  0A03               	xorlw	3	; case 102
 12128  001776  E101 D627          	bz	l10827
 12129  00177A  0A01               	xorlw	1	; case 103
 12130  00177C  E101 D631          	bz	l10829
 12131  001780  0A0F               	xorlw	15	; case 104
 12132  001782  E101 D63B          	bz	l10831
 12133  001786  0A01               	xorlw	1	; case 105
 12134  001788  E101 D645          	bz	l10833
 12135  00178C  0A03               	xorlw	3	; case 106
 12136  00178E  E101 D64F          	bz	l10835
 12137  001792  0A01               	xorlw	1	; case 107
 12138  001794  E101 D659          	bz	l10837
 12139  001798  0A07               	xorlw	7	; case 108
 12140  00179A  E101 D663          	bz	l10839
 12141  00179E  0A01               	xorlw	1	; case 109
 12142  0017A0  E101 D66D          	bz	l10841
 12143  0017A4  0A03               	xorlw	3	; case 110
 12144  0017A6  E101 D677          	bz	l10843
 12145  0017AA  0A01               	xorlw	1	; case 111
 12146  0017AC  E101 D681          	bz	l10845
 12147  0017B0  0A1F               	xorlw	31	; case 112
 12148  0017B2  E101 D68B          	bz	l10847
 12149  0017B6  0A01               	xorlw	1	; case 113
 12150  0017B8  E101 D694          	bz	l516
 12151  0017BC  0A03               	xorlw	3	; case 114
 12152  0017BE  E101 D69E          	bz	l10849
 12153  0017C2  0A01               	xorlw	1	; case 115
 12154  0017C4  E101 D6A8          	bz	l10851
 12155  0017C8  0A07               	xorlw	7	; case 116
 12156  0017CA  E101 D6B2          	bz	l519
 12157  0017CE  0A01               	xorlw	1	; case 117
 12158  0017D0  E101 D6AF          	bz	l519
 12159  0017D4  0A03               	xorlw	3	; case 118
 12160  0017D6  E101 D6AE          	bz	l10853
 12161  0017DA  0A01               	xorlw	1	; case 119
 12162  0017DC  E101 D6B8          	bz	l10855
 12163  0017E0  D6C4               	goto	l10857
 12164  0017E2                     l10863:
 12165                           
 12166                           ;main.c: 2516: else if (1 == vscp_page_select) {
 12167  0017E2  0446               	decf	_vscp_page_select,w,c
 12168  0017E4  1047               	iorwf	_vscp_page_select+1,w,c
 12169  0017E6  E142               	bnz	l10887
 12170                           
 12171                           ;main.c: 2519: if (reg < 72) {
 12172  0017E8  0E48               	movlw	72
 12173  0017EA  6025               	cpfslt	vscp_writeAppReg@reg,c
 12174  0017EC  D016               	goto	l10871
 12175                           
 12176                           ;main.c: 2520: writeEEPROM(0xAA + reg, val);
 12177  0017EE  0EAA               	movlw	170
 12178  0017F0  2425               	addwf	vscp_writeAppReg@reg,w,c
 12179  0017F2  6E0E               	movwf	?_writeEEPROM,c
 12180  0017F4  6A0F               	clrf	?_writeEEPROM+1,c
 12181  0017F6  0E00               	movlw	0
 12182  0017F8  220F               	addwfc	?_writeEEPROM+1,f,c
 12183  0017FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12184  0017FE  EC21  F02D         	call	_writeEEPROM	;wreg free
 12185                           
 12186                           ;main.c: 2521: rv = readEEPROM(0xAA + reg );
 12187  001802  0EAA               	movlw	170
 12188  001804  2425               	addwf	vscp_writeAppReg@reg,w,c
 12189  001806  6E16               	movwf	?_readEEPROM,c
 12190  001808  6A17               	clrf	?_readEEPROM+1,c
 12191  00180A  0E00               	movlw	0
 12192  00180C  2217               	addwfc	?_readEEPROM+1,f,c
 12193  00180E  EC0F  F02E         	call	_readEEPROM	;wreg free
 12194  001812  6E26               	movwf	vscp_writeAppReg@rv,c
 12195                           
 12196                           ;main.c: 2522: writeCoeffs2Ram();
 12197  001814  EC94  F027         	call	_writeCoeffs2Ram	;wreg free
 12198                           
 12199                           ;main.c: 2523: }
 12200  001818  D029               	goto	l10887
 12201  00181A                     l10871:
 12202                           
 12203                           ;main.c: 2525: else if (reg < 84) {
 12204  00181A  0E54               	movlw	84
 12205  00181C  6025               	cpfslt	vscp_writeAppReg@reg,c
 12206  00181E  D010               	goto	l10883
 12207                           
 12208                           ;main.c: 2527: uint8_t pos = reg - 72;
 12209  001820  5025               	movf	vscp_writeAppReg@reg,w,c
 12210  001822  0FB8               	addlw	184
 12211  001824  6E24               	movwf	vscp_writeAppReg@pos,c
 12212                           
 12213                           ;main.c: 2528: if ( pos % 2 ) {
 12214  001826  A024               	btfss	vscp_writeAppReg@pos,0,c
 12215  001828  D002               	goto	l10879
 12216                           
 12217                           ;main.c: 2529: pos--;
 12218  00182A  0624               	decf	vscp_writeAppReg@pos,f,c
 12219                           
 12220                           ;main.c: 2530: }
 12221  00182C  D001               	goto	l10881
 12222  00182E                     l10879:
 12223                           
 12224                           ;main.c: 2531: else {
 12225                           ;main.c: 2532: pos++;
 12226  00182E  2A24               	incf	vscp_writeAppReg@pos,f,c
 12227  001830                     l10881:
 12228                           
 12229                           ;main.c: 2533: }
 12230                           ;main.c: 2534: rv = adc[ pos ];
 12231  001830  0EA6               	movlw	low _adc
 12232  001832  2424               	addwf	vscp_writeAppReg@pos,w,c
 12233  001834  6ED9               	movwf	fsr2l,c
 12234  001836  6ADA               	clrf	fsr2h,c
 12235  001838  0E01               	movlw	high _adc
 12236  00183A  22DA               	addwfc	fsr2h,f,c
 12237  00183C  50DF               	movf	indf2,w,c
 12238  00183E  D015               	goto	L20
 12239  001840                     l10883:
 12240                           
 12241                           ;main.c: 2537: else if (reg < 98) {
 12242  001840  0E62               	movlw	98
 12243  001842  6025               	cpfslt	vscp_writeAppReg@reg,c
 12244  001844  D013               	goto	l10887
 12245                           
 12246                           ;main.c: 2538: writeEEPROM( 0x9E + reg - 84, val );
 12247  001846  0E4A               	movlw	74
 12248  001848  2425               	addwf	vscp_writeAppReg@reg,w,c
 12249  00184A  6E0E               	movwf	?_writeEEPROM,c
 12250  00184C  6A0F               	clrf	?_writeEEPROM+1,c
 12251  00184E  0E00               	movlw	0
 12252  001850  220F               	addwfc	?_writeEEPROM+1,f,c
 12253  001852  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12254  001856  EC21  F02D         	call	_writeEEPROM	;wreg free
 12255                           
 12256                           ;main.c: 2539: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12257  00185A  0E4A               	movlw	74
 12258  00185C  2425               	addwf	vscp_writeAppReg@reg,w,c
 12259  00185E  6E16               	movwf	?_readEEPROM,c
 12260  001860  6A17               	clrf	?_readEEPROM+1,c
 12261  001862  0E00               	movlw	0
 12262  001864  2217               	addwfc	?_readEEPROM+1,f,c
 12263  001866  EC0F  F02E         	call	_readEEPROM	;wreg free
 12264  00186A                     L20:
 12265  00186A  6E26               	movwf	vscp_writeAppReg@rv,c
 12266  00186C                     l10887:
 12267                           
 12268                           ;main.c: 2540: }
 12269                           ;main.c: 2541: }
 12270                           ;main.c: 2543: return rv;
 12271  00186C  5026               	movf	vscp_writeAppReg@rv,w,c
 12272  00186E  0012               	return	
 12273  001870                     __end_of_vscp_writeAppReg:
 12274                           	opt stack 0
 12275                           tblptru	equ	0xFF8
 12276                           tblptrh	equ	0xFF7
 12277                           tblptrl	equ	0xFF6
 12278                           tablat	equ	0xFF5
 12279                           prodh	equ	0xFF4
 12280                           prodl	equ	0xFF3
 12281                           postinc0	equ	0xFEE
 12282                           wreg	equ	0xFE8
 12283                           postdec1	equ	0xFE5
 12284                           fsr1h	equ	0xFE2
 12285                           fsr1l	equ	0xFE1
 12286                           indf2	equ	0xFDF
 12287                           postinc2	equ	0xFDE
 12288                           postdec2	equ	0xFDD
 12289                           fsr2h	equ	0xFDA
 12290                           fsr2l	equ	0xFD9
 12291                           status	equ	0xFD8
 12292                           
 12293 ;; *************** function _writeCoeffs2Ram *****************
 12294 ;; Defined at:
 12295 ;;		line 959 in file "../main.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;		None
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  c               3   27[COMRAM] unsigned char [3]
 12300 ;;  j               2   32[COMRAM] int 
 12301 ;;  i               2   30[COMRAM] int 
 12302 ;; Return value:  Size  Location     Type
 12303 ;;		None               void
 12304 ;; Registers used:
 12305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/1
 12308 ;;		On exit  : F/1
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12311 ;;      Params:         0       0       0       0       0       0       0
 12312 ;;      Locals:         7       0       0       0       0       0       0
 12313 ;;      Temps:          2       0       0       0       0       0       0
 12314 ;;      Totals:         9       0       0       0       0       0       0
 12315 ;;Total ram usage:        9 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    3
 12318 ;; This function calls:
 12319 ;;		_readEEPROM
 12320 ;;		___wmul
 12321 ;; This function is called by:
 12322 ;;		_vscp_writeAppReg
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           	psect	text43
 12327  004F28                     __ptext43:
 12328                           	opt stack 0
 12329  004F28                     _writeCoeffs2Ram:
 12330                           	opt stack 24
 12331                           
 12332                           ;main.c: 960: int i, j;
 12333                           ;main.c: 961: uint8_t c[3];
 12334                           ;main.c: 963: for (i = 0; i < 6; i++) {
 12335                           
 12336                           ;incstack = 0
 12337                           ;incstack = 0
 12338  004F28  6A1F               	clrf	writeCoeffs2Ram@i,c
 12339  004F2A  6A20               	clrf	writeCoeffs2Ram@i+1,c
 12340  004F2C                     l10415:
 12341                           
 12342                           ;main.c: 964: for (j = 2; j > 0; j--) {
 12343  004F2C  6A22               	clrf	writeCoeffs2Ram@j+1,c
 12344  004F2E  0E02               	movlw	2
 12345  004F30  6E21               	movwf	writeCoeffs2Ram@j,c
 12346  004F32                     l10421:
 12347                           
 12348                           ;main.c: 966: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 12349  004F32  5021               	movf	writeCoeffs2Ram@j,w,c
 12350  004F34  0802               	sublw	2
 12351  004F36  6E1A               	movwf	??_writeCoeffs2Ram& (0+255),c
 12352  004F38  501A               	movf	??_writeCoeffs2Ram,w,c
 12353  004F3A  0F1C               	addlw	low writeCoeffs2Ram@c
 12354  004F3C  6ED9               	movwf	fsr2l,c
 12355  004F3E  6ADA               	clrf	fsr2h,c
 12356  004F40  C01F  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 12357  004F44  C020  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 12358  004F48  6A11               	clrf	?___wmul+3,c
 12359  004F4A  0E03               	movlw	3
 12360  004F4C  6E10               	movwf	?___wmul+2,c
 12361  004F4E  EC1A  F02C         	call	___wmul	;wreg free
 12362  004F52  5021               	movf	writeCoeffs2Ram@j,w,c
 12363  004F54  260E               	addwf	?___wmul,f,c
 12364  004F56  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12365  004F58  220F               	addwfc	?___wmul+1,f,c
 12366  004F5A  0EAA               	movlw	170
 12367  004F5C  240E               	addwf	?___wmul,w,c
 12368  004F5E  6E16               	movwf	?_readEEPROM,c
 12369  004F60  0E00               	movlw	0
 12370  004F62  200F               	addwfc	?___wmul+1,w,c
 12371  004F64  6E17               	movwf	?_readEEPROM+1,c
 12372  004F66  EC0F  F02E         	call	_readEEPROM	;wreg free
 12373  004F6A  6EDF               	movwf	indf2,c
 12374  004F6C  0621               	decf	writeCoeffs2Ram@j,f,c
 12375  004F6E  A0D8               	btfss	status,0,c
 12376  004F70  0622               	decf	writeCoeffs2Ram@j+1,f,c
 12377  004F72  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12378  004F74  0A80               	xorlw	128
 12379  004F76  0F80               	addlw	-128
 12380  004F78  0E01               	movlw	1
 12381  004F7A  B4D8               	btfsc	status,2,c
 12382  004F7C  5C21               	subwf	writeCoeffs2Ram@j,w,c
 12383  004F7E  E2D9               	bc	l10421
 12384                           
 12385                           ;main.c: 967: }
 12386                           ;main.c: 968: sh_coefficients[i] = *((double*) c);
 12387  004F80  C01F  F01A         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 12388  004F84  C020  F01B         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 12389  004F88  90D8               	bcf	status,0,c
 12390  004F8A  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12391  004F8C  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12392  004F8E  90D8               	bcf	status,0,c
 12393  004F90  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12394  004F92  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12395  004F94  0101               	movlb	1	; () banked
 12396  004F96  0E1C               	movlw	low _sh_coefficients
 12397  004F98  241A               	addwf	??_writeCoeffs2Ram,w,c
 12398  004F9A  6ED9               	movwf	fsr2l,c
 12399  004F9C  0E01               	movlw	high _sh_coefficients
 12400  004F9E  201B               	addwfc	??_writeCoeffs2Ram+1,w,c
 12401  004FA0  6EDA               	movwf	fsr2h,c
 12402  004FA2  C01C  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 12403  004FA6  C01D  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 12404  004FAA  C01E  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 12405  004FAE  C01F  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 12406                           
 12407                           ; BSR set to: 1
 12408  004FB2  4A1F               	infsnz	writeCoeffs2Ram@i,f,c
 12409  004FB4  2A20               	incf	writeCoeffs2Ram@i+1,f,c
 12410                           
 12411                           ; BSR set to: 1
 12412  004FB6  5020               	movf	writeCoeffs2Ram@i+1,w,c
 12413  004FB8  0A80               	xorlw	128
 12414  004FBA  0F80               	addlw	-128
 12415  004FBC  0E06               	movlw	6
 12416  004FBE  B4D8               	btfsc	status,2,c
 12417  004FC0  5C1F               	subwf	writeCoeffs2Ram@i,w,c
 12418  004FC2  B0D8               	btfsc	status,0,c
 12419                           
 12420                           ; BSR set to: 1
 12421  004FC4  0012               	return	
 12422  004FC6  D7B2               	goto	l10415
 12423  004FC8                     __end_of_writeCoeffs2Ram:
 12424                           	opt stack 0
 12425                           tblptru	equ	0xFF8
 12426                           tblptrh	equ	0xFF7
 12427                           tblptrl	equ	0xFF6
 12428                           tablat	equ	0xFF5
 12429                           prodh	equ	0xFF4
 12430                           prodl	equ	0xFF3
 12431                           postinc0	equ	0xFEE
 12432                           wreg	equ	0xFE8
 12433                           postdec1	equ	0xFE5
 12434                           fsr1h	equ	0xFE2
 12435                           fsr1l	equ	0xFE1
 12436                           indf2	equ	0xFDF
 12437                           postinc2	equ	0xFDE
 12438                           postdec2	equ	0xFDD
 12439                           fsr2h	equ	0xFDA
 12440                           fsr2l	equ	0xFD9
 12441                           status	equ	0xFD8
 12442                           
 12443 ;; *************** function ___wmul *****************
 12444 ;; Defined at:
 12445 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 12446 ;; Parameters:    Size  Location     Type
 12447 ;;  multiplier      2   13[COMRAM] unsigned int 
 12448 ;;  multiplicand    2   15[COMRAM] unsigned int 
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;  product         2   19[COMRAM] unsigned int 
 12451 ;; Return value:  Size  Location     Type
 12452 ;;                  2   13[COMRAM] unsigned int 
 12453 ;; Registers used:
 12454 ;;		wreg, status,2, status,0, prodl, prodh
 12455 ;; Tracked objects:
 12456 ;;		On entry : 0/1
 12457 ;;		On exit  : 0/0
 12458 ;;		Unchanged: 0/0
 12459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12460 ;;      Params:         4       0       0       0       0       0       0
 12461 ;;      Locals:         4       0       0       0       0       0       0
 12462 ;;      Temps:          0       0       0       0       0       0       0
 12463 ;;      Totals:         8       0       0       0       0       0       0
 12464 ;;Total ram usage:        8 bytes
 12465 ;; Hardware stack levels used:    1
 12466 ;; Hardware stack levels required when called:    2
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		_writeCoeffs2Ram
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text44
 12475  005834                     __ptext44:
 12476                           	opt stack 0
 12477  005834                     ___wmul:
 12478                           	opt stack 24
 12479                           
 12480                           ; BSR set to: 1
 12481                           ;incstack = 0
 12482                           ;incstack = 0
 12483  005834  500E               	movf	___wmul@multiplier,w,c
 12484  005836  0210               	mulwf	___wmul@multiplicand,c
 12485  005838  CFF3 F014          	movff	prodl,___wmul@product
 12486  00583C  CFF4 F015          	movff	prodh,___wmul@product+1
 12487  005840  500E               	movf	___wmul@multiplier,w,c
 12488  005842  0211               	mulwf	___wmul@multiplicand+1,c
 12489  005844  CFF3 FFF4          	movff	prodl,prodh
 12490  005848  6AF3               	clrf	prodl,c
 12491  00584A  50F3               	movf	prodl,w,c
 12492  00584C  2614               	addwf	___wmul@product,f,c
 12493  00584E  50F4               	movf	prodh,w,c
 12494  005850  2215               	addwfc	___wmul@product+1,f,c
 12495  005852  500F               	movf	___wmul@multiplier+1,w,c
 12496  005854  0210               	mulwf	___wmul@multiplicand,c
 12497  005856  CFF3 FFF4          	movff	prodl,prodh
 12498  00585A  6AF3               	clrf	prodl,c
 12499  00585C  50F3               	movf	prodl,w,c
 12500  00585E  2614               	addwf	___wmul@product,f,c
 12501  005860  50F4               	movf	prodh,w,c
 12502  005862  2215               	addwfc	___wmul@product+1,f,c
 12503  005864  C014  F00E         	movff	___wmul@product,?___wmul
 12504  005868  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 12505  00586C  0012               	return	
 12506  00586E                     __end_of___wmul:
 12507                           	opt stack 0
 12508                           tblptru	equ	0xFF8
 12509                           tblptrh	equ	0xFF7
 12510                           tblptrl	equ	0xFF6
 12511                           tablat	equ	0xFF5
 12512                           prodh	equ	0xFF4
 12513                           prodl	equ	0xFF3
 12514                           postinc0	equ	0xFEE
 12515                           wreg	equ	0xFE8
 12516                           postdec1	equ	0xFE5
 12517                           fsr1h	equ	0xFE2
 12518                           fsr1l	equ	0xFE1
 12519                           indf2	equ	0xFDF
 12520                           postinc2	equ	0xFDE
 12521                           postdec2	equ	0xFDD
 12522                           fsr2h	equ	0xFDA
 12523                           fsr2l	equ	0xFD9
 12524                           status	equ	0xFD8
 12525                           
 12526 ;; *************** function _vscp_readRegister *****************
 12527 ;; Defined at:
 12528 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;  reg             1    wreg     unsigned char 
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;  reg             1   43[COMRAM] unsigned char 
 12533 ;; Return value:  Size  Location     Type
 12534 ;;                  1    wreg      unsigned char 
 12535 ;; Registers used:
 12536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12537 ;; Tracked objects:
 12538 ;;		On entry : F/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12542 ;;      Params:         0       0       0       0       0       0       0
 12543 ;;      Locals:         1       0       0       0       0       0       0
 12544 ;;      Temps:          0       0       0       0       0       0       0
 12545 ;;      Totals:         1       0       0       0       0       0       0
 12546 ;;Total ram usage:        1 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    5
 12549 ;; This function calls:
 12550 ;;		_vscp_readAppReg
 12551 ;;		_vscp_readStdReg
 12552 ;; This function is called by:
 12553 ;;		_vscp_handleProtocolEvent
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           	psect	text45
 12558  005B4E                     __ptext45:
 12559                           	opt stack 0
 12560  005B4E                     _vscp_readRegister:
 12561                           	opt stack 24
 12562                           
 12563                           ;incstack = 0
 12564                           ;incstack = 0
 12565                           ;vscp_readRegister@reg stored from wreg
 12566  005B4E  CFE8 F02C          	movff	wreg,vscp_readRegister@reg
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12570  005B52  0E7F               	movlw	127
 12571  005B54  642C               	cpfsgt	vscp_readRegister@reg,c
 12572  005B56  D004               	goto	l11101
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12576  005B58  502C               	movf	vscp_readRegister@reg,w,c
 12577  005B5A  EC45  F01E         	call	_vscp_readStdReg
 12578  005B5E  D003               	goto	l1104
 12579  005B60                     l11101:
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;vscp_firmware.c: 565: else {
 12583                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12584  005B60  502C               	movf	vscp_readRegister@reg,w,c
 12585  005B62  EC38  F00C         	call	_vscp_readAppReg
 12586  005B66                     l1104:
 12587  005B66  0012               	return	
 12588  005B68                     __end_of_vscp_readRegister:
 12589                           	opt stack 0
 12590                           tblptru	equ	0xFF8
 12591                           tblptrh	equ	0xFF7
 12592                           tblptrl	equ	0xFF6
 12593                           tablat	equ	0xFF5
 12594                           prodh	equ	0xFF4
 12595                           prodl	equ	0xFF3
 12596                           postinc0	equ	0xFEE
 12597                           wreg	equ	0xFE8
 12598                           postdec1	equ	0xFE5
 12599                           fsr1h	equ	0xFE2
 12600                           fsr1l	equ	0xFE1
 12601                           indf2	equ	0xFDF
 12602                           postinc2	equ	0xFDE
 12603                           postdec2	equ	0xFDD
 12604                           fsr2h	equ	0xFDA
 12605                           fsr2l	equ	0xFD9
 12606                           status	equ	0xFD8
 12607                           
 12608 ;; *************** function _vscp_readStdReg *****************
 12609 ;; Defined at:
 12610 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12611 ;; Parameters:    Size  Location     Type
 12612 ;;  reg             1    wreg     unsigned char 
 12613 ;; Auto vars:     Size  Location     Type
 12614 ;;  reg             1   42[COMRAM] unsigned char 
 12615 ;;  code            4   35[COMRAM] unsigned long 
 12616 ;;  idx             1   40[COMRAM] unsigned char 
 12617 ;;  code            4   31[COMRAM] unsigned long 
 12618 ;;  idx             1   39[COMRAM] unsigned char 
 12619 ;;  rv              1   41[COMRAM] unsigned char 
 12620 ;; Return value:  Size  Location     Type
 12621 ;;                  1    wreg      unsigned char 
 12622 ;; Registers used:
 12623 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12624 ;; Tracked objects:
 12625 ;;		On entry : E/1
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12629 ;;      Params:         0       0       0       0       0       0       0
 12630 ;;      Locals:        12       0       0       0       0       0       0
 12631 ;;      Temps:          5       0       0       0       0       0       0
 12632 ;;      Totals:        17       0       0       0       0       0       0
 12633 ;;Total ram usage:       17 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; Hardware stack levels required when called:    4
 12636 ;; This function calls:
 12637 ;;		_vscp_getMajorVersion
 12638 ;;		_vscp_getMinorVersion
 12639 ;;		_vscp_getSubMinorVersion
 12640 ;;		_vscp_getGUID
 12641 ;;		_vscp_getMDF_URL
 12642 ;;		_vscp_getUserID
 12643 ;;		_vscp_getManufacturerId
 12644 ;;		_vscp_getBootLoaderAlgorithm
 12645 ;;		_vscp_getBufferSize
 12646 ;;		_vscp_getRegisterPagesUsed
 12647 ;;		_vscp_getFamilyCode
 12648 ;;		_vscp_getFamilyType
 12649 ;; This function is called by:
 12650 ;;		_vscp_readRegister
 12651 ;;		_vscp_handleProtocolEvent
 12652 ;; This function uses a non-reentrant model
 12653 ;;
 12654                           
 12655                           	psect	text46
 12656  003C8A                     __ptext46:
 12657                           	opt stack 0
 12658  003C8A                     _vscp_readStdReg:
 12659                           	opt stack 25
 12660                           
 12661                           ;incstack = 0
 12662                           ;incstack = 0
 12663                           ;vscp_readStdReg@reg stored from wreg
 12664  003C8A  CFE8 F02B          	movff	wreg,vscp_readStdReg@reg
 12665                           
 12666                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12667  003C8E  6A2A               	clrf	vscp_readStdReg@rv,c
 12668                           
 12669                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12670  003C90  502B               	movf	vscp_readStdReg@reg,w,c
 12671  003C92  0A80               	xorlw	128
 12672  003C94  E104               	bnz	l11111
 12673                           
 12674                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12675  003C96  C04A  F02A         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12676                           
 12677                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12678  003C9A  6A4A               	clrf	_vscp_alarmstatus,c
 12679                           
 12680                           ;vscp_firmware.c: 584: }
 12681  003C9C  D0CB               	goto	l11199
 12682  003C9E                     l11111:
 12683                           
 12684                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12685  003C9E  502B               	movf	vscp_readStdReg@reg,w,c
 12686  003CA0  0A81               	xorlw	129
 12687  003CA2  E102               	bnz	l11115
 12688                           
 12689                           ;vscp_firmware.c: 588: rv = 1;
 12690  003CA4  0E01               	movlw	1
 12691  003CA6  D081               	goto	L31
 12692  003CA8                     l11115:
 12693                           
 12694                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12695  003CA8  502B               	movf	vscp_readStdReg@reg,w,c
 12696  003CAA  0A82               	xorlw	130
 12697  003CAC  E102               	bnz	l11119
 12698                           
 12699                           ;vscp_firmware.c: 594: rv = 5;
 12700  003CAE  0E05               	movlw	5
 12701  003CB0  D07C               	goto	L31
 12702  003CB2                     l11119:
 12703                           
 12704                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12705  003CB2  502B               	movf	vscp_readStdReg@reg,w,c
 12706  003CB4  0A83               	xorlw	131
 12707  003CB6  E102               	bnz	l11123
 12708                           
 12709                           ;vscp_firmware.c: 600: rv = 0;
 12710  003CB8  6A2A               	clrf	vscp_readStdReg@rv,c
 12711                           
 12712                           ;vscp_firmware.c: 602: }
 12713  003CBA  D0BC               	goto	l11199
 12714  003CBC                     l11123:
 12715                           
 12716                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 12717  003CBC  502B               	movf	vscp_readStdReg@reg,w,c
 12718  003CBE  0A94               	xorlw	148
 12719  003CC0  E103               	bnz	l11127
 12720                           
 12721                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 12722  003CC2  EC73  F02E         	call	_vscp_getMajorVersion	;wreg free
 12723  003CC6  D071               	goto	L31
 12724  003CC8                     l11127:
 12725                           
 12726                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 12727  003CC8  502B               	movf	vscp_readStdReg@reg,w,c
 12728  003CCA  0A95               	xorlw	149
 12729  003CCC  E103               	bnz	l11131
 12730                           
 12731                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 12732  003CCE  EC72  F02E         	call	_vscp_getMinorVersion	;wreg free
 12733  003CD2  D06B               	goto	L31
 12734  003CD4                     l11131:
 12735                           
 12736                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 12737  003CD4  502B               	movf	vscp_readStdReg@reg,w,c
 12738  003CD6  0A96               	xorlw	150
 12739  003CD8  E103               	bnz	l11135
 12740                           
 12741                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 12742  003CDA  EC71  F02E         	call	_vscp_getSubMinorVersion	;wreg free
 12743  003CDE  D065               	goto	L31
 12744  003CE0                     l11135:
 12745                           
 12746                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 12747  003CE0  0E89               	movlw	137
 12748  003CE2  602B               	cpfslt	vscp_readStdReg@reg,c
 12749  003CE4  D005               	goto	l11139
 12750                           
 12751                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 12752  003CE6  502B               	movf	vscp_readStdReg@reg,w,c
 12753  003CE8  0F7C               	addlw	124
 12754  003CEA  ECFB  F02D         	call	_vscp_getUserID
 12755  003CEE  D05D               	goto	L31
 12756  003CF0                     l11139:
 12757                           
 12758                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 12759                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 12760  003CF0  0E88               	movlw	136
 12761  003CF2  642B               	cpfsgt	vscp_readStdReg@reg,c
 12762  003CF4  D008               	goto	l11145
 12763  003CF6  0E91               	movlw	145
 12764  003CF8  602B               	cpfslt	vscp_readStdReg@reg,c
 12765  003CFA  D005               	goto	l11145
 12766                           
 12767                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 12768  003CFC  502B               	movf	vscp_readStdReg@reg,w,c
 12769  003CFE  0F77               	addlw	119
 12770  003D00  ECF1  F02D         	call	_vscp_getManufacturerId
 12771  003D04  D052               	goto	L31
 12772  003D06                     l11145:
 12773                           
 12774                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 12775  003D06  502B               	movf	vscp_readStdReg@reg,w,c
 12776  003D08  0A91               	xorlw	145
 12777  003D0A  E103               	bnz	l11149
 12778                           
 12779                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 12780  003D0C  C0C9  F02A         	movff	_vscp_nickname,vscp_readStdReg@rv
 12781                           
 12782                           ;vscp_firmware.c: 639: }
 12783  003D10  D091               	goto	l11199
 12784  003D12                     l11149:
 12785                           
 12786                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 12787  003D12  502B               	movf	vscp_readStdReg@reg,w,c
 12788  003D14  0A93               	xorlw	147
 12789  003D16  E103               	bnz	l11153
 12790                           
 12791                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 12792  003D18  C046  F02A         	movff	_vscp_page_select,vscp_readStdReg@rv
 12793                           
 12794                           ;vscp_firmware.c: 645: }
 12795  003D1C  D08B               	goto	l11199
 12796  003D1E                     l11153:
 12797                           
 12798                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 12799  003D1E  502B               	movf	vscp_readStdReg@reg,w,c
 12800  003D20  0A92               	xorlw	146
 12801  003D22  E102               	bnz	l11157
 12802                           
 12803                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 12804  003D24  5047               	movf	_vscp_page_select+1,w,c
 12805  003D26  D041               	goto	L31
 12806  003D28                     l11157:
 12807                           
 12808                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 12809  003D28  502B               	movf	vscp_readStdReg@reg,w,c
 12810  003D2A  0A97               	xorlw	151
 12811  003D2C  E103               	bnz	l11161
 12812                           
 12813                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 12814  003D2E  EC70  F02E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 12815  003D32  D03B               	goto	L31
 12816  003D34                     l11161:
 12817                           
 12818                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 12819  003D34  502B               	movf	vscp_readStdReg@reg,w,c
 12820  003D36  0A98               	xorlw	152
 12821  003D38  E103               	bnz	l11165
 12822                           
 12823                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 12824  003D3A  EC6F  F02E         	call	_vscp_getBufferSize	;wreg free
 12825  003D3E  D035               	goto	L31
 12826  003D40                     l11165:
 12827                           
 12828                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 12829  003D40  502B               	movf	vscp_readStdReg@reg,w,c
 12830  003D42  0A99               	xorlw	153
 12831  003D44  E103               	bnz	l11169
 12832                           
 12833                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 12834  003D46  EC6E  F02E         	call	_vscp_getRegisterPagesUsed	;wreg free
 12835  003D4A  D02F               	goto	L31
 12836  003D4C                     l11169:
 12837                           
 12838                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 12839                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 12840  003D4C  0E99               	movlw	153
 12841  003D4E  642B               	cpfsgt	vscp_readStdReg@reg,c
 12842  003D50  D02E               	goto	l11179
 12843  003D52  0E9E               	movlw	158
 12844  003D54  602B               	cpfslt	vscp_readStdReg@reg,c
 12845  003D56  D02B               	goto	l11179
 12846                           
 12847                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 12848  003D58  EC55  F02E         	call	_vscp_getFamilyCode	;wreg free
 12849  003D5C  C011  F023         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 12850  003D60  C010  F022         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 12851  003D64  C00F  F021         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 12852  003D68  C00E  F020         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 12853                           
 12854                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 12855  003D6C  502B               	movf	vscp_readStdReg@reg,w,c
 12856  003D6E  0F66               	addlw	102
 12857  003D70  6E28               	movwf	vscp_readStdReg@idx,c
 12858                           
 12859                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12860  003D72  5028               	movf	vscp_readStdReg@idx,w,c
 12861  003D74  0803               	sublw	3
 12862  003D76  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 12863  003D78  90D8               	bcf	status,0,c
 12864  003D7A  361B               	rlcf	??_vscp_readStdReg,f,c
 12865  003D7C  90D8               	bcf	status,0,c
 12866  003D7E  361B               	rlcf	??_vscp_readStdReg,f,c
 12867  003D80  90D8               	bcf	status,0,c
 12868  003D82  361B               	rlcf	??_vscp_readStdReg,f,c
 12869  003D84  501B               	movf	??_vscp_readStdReg,w,c
 12870  003D86  C020  F01C         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 12871  003D8A  C021  F01D         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 12872  003D8E  C022  F01E         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 12873  003D92  C023  F01F         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 12874  003D96  2AE8               	incf	wreg,f,c
 12875  003D98  D005               	goto	u9400
 12876  003D9A                     u9405:
 12877  003D9A  90D8               	bcf	status,0,c
 12878  003D9C  321F               	rrcf	??_vscp_readStdReg+4,f,c
 12879  003D9E  321E               	rrcf	??_vscp_readStdReg+3,f,c
 12880  003DA0  321D               	rrcf	??_vscp_readStdReg+2,f,c
 12881  003DA2  321C               	rrcf	??_vscp_readStdReg+1,f,c
 12882  003DA4                     u9400:
 12883  003DA4  2EE8               	decfsz	wreg,f,c
 12884  003DA6  D7F9               	goto	u9405
 12885  003DA8  D030               	goto	L32
 12886  003DAA                     L31:
 12887  003DAA  6E2A               	movwf	vscp_readStdReg@rv,c
 12888                           
 12889                           ;vscp_firmware.c: 671: }
 12890  003DAC  D043               	goto	l11199
 12891  003DAE                     l11179:
 12892                           
 12893                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 12894                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 12895  003DAE  0E9D               	movlw	157
 12896  003DB0  642B               	cpfsgt	vscp_readStdReg@reg,c
 12897  003DB2  D02D               	goto	l11189
 12898  003DB4  0EA2               	movlw	162
 12899  003DB6  602B               	cpfslt	vscp_readStdReg@reg,c
 12900  003DB8  D02A               	goto	l11189
 12901                           
 12902                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 12903  003DBA  EC50  F02E         	call	_vscp_getFamilyType	;wreg free
 12904  003DBE  C011  F027         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1147+3
 12905  003DC2  C010  F026         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1147+2
 12906  003DC6  C00F  F025         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1147+1
 12907  003DCA  C00E  F024         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1147
 12908                           
 12909                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 12910  003DCE  502B               	movf	vscp_readStdReg@reg,w,c
 12911  003DD0  0F62               	addlw	98
 12912  003DD2  6E29               	movwf	vscp_readStdReg@idx_1148,c
 12913                           
 12914                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12915  003DD4  5029               	movf	vscp_readStdReg@idx_1148,w,c
 12916  003DD6  0803               	sublw	3
 12917  003DD8  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 12918  003DDA  90D8               	bcf	status,0,c
 12919  003DDC  361B               	rlcf	??_vscp_readStdReg,f,c
 12920  003DDE  90D8               	bcf	status,0,c
 12921  003DE0  361B               	rlcf	??_vscp_readStdReg,f,c
 12922  003DE2  90D8               	bcf	status,0,c
 12923  003DE4  361B               	rlcf	??_vscp_readStdReg,f,c
 12924  003DE6  501B               	movf	??_vscp_readStdReg,w,c
 12925  003DE8  C024  F01C         	movff	vscp_readStdReg@code_1147,??_vscp_readStdReg+1
 12926  003DEC  C025  F01D         	movff	vscp_readStdReg@code_1147+1,??_vscp_readStdReg+2
 12927  003DF0  C026  F01E         	movff	vscp_readStdReg@code_1147+2,??_vscp_readStdReg+3
 12928  003DF4  C027  F01F         	movff	vscp_readStdReg@code_1147+3,??_vscp_readStdReg+4
 12929  003DF8  2AE8               	incf	wreg,f,c
 12930  003DFA  D005               	goto	u9430
 12931  003DFC                     u9435:
 12932  003DFC  90D8               	bcf	status,0,c
 12933  003DFE  321F               	rrcf	??_vscp_readStdReg+4,f,c
 12934  003E00  321E               	rrcf	??_vscp_readStdReg+3,f,c
 12935  003E02  321D               	rrcf	??_vscp_readStdReg+2,f,c
 12936  003E04  321C               	rrcf	??_vscp_readStdReg+1,f,c
 12937  003E06                     u9430:
 12938  003E06  2EE8               	decfsz	wreg,f,c
 12939  003E08  D7F9               	goto	u9435
 12940  003E0A                     L32:
 12941  003E0A  501C               	movf	??_vscp_readStdReg+1,w,c
 12942  003E0C  D7CE               	goto	L31
 12943  003E0E                     l11189:
 12944                           
 12945                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 12946                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 12947  003E0E  0ECF               	movlw	207
 12948  003E10  642B               	cpfsgt	vscp_readStdReg@reg,c
 12949  003E12  D008               	goto	l11195
 12950  003E14  0EE0               	movlw	224
 12951  003E16  602B               	cpfslt	vscp_readStdReg@reg,c
 12952  003E18  D005               	goto	l11195
 12953                           
 12954                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 12955  003E1A  502B               	movf	vscp_readStdReg@reg,w,c
 12956  003E1C  0F30               	addlw	48
 12957  003E1E  EC05  F02E         	call	_vscp_getGUID
 12958  003E22  D7C3               	goto	L31
 12959  003E24                     l11195:
 12960                           
 12961                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 12962  003E24  0EDF               	movlw	223
 12963  003E26  642B               	cpfsgt	vscp_readStdReg@reg,c
 12964  003E28  D005               	goto	l11199
 12965                           
 12966                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 12967  003E2A  502B               	movf	vscp_readStdReg@reg,w,c
 12968  003E2C  0F20               	addlw	32
 12969  003E2E  ECD9  F02D         	call	_vscp_getMDF_URL
 12970  003E32  D7BB               	goto	L31
 12971  003E34                     l11199:
 12972                           
 12973                           ;vscp_firmware.c: 691: }
 12974                           ;vscp_firmware.c: 693: return rv;
 12975  003E34  502A               	movf	vscp_readStdReg@rv,w,c
 12976  003E36  0012               	return	
 12977  003E38                     __end_of_vscp_readStdReg:
 12978                           	opt stack 0
 12979                           tblptru	equ	0xFF8
 12980                           tblptrh	equ	0xFF7
 12981                           tblptrl	equ	0xFF6
 12982                           tablat	equ	0xFF5
 12983                           prodh	equ	0xFF4
 12984                           prodl	equ	0xFF3
 12985                           postinc0	equ	0xFEE
 12986                           wreg	equ	0xFE8
 12987                           postdec1	equ	0xFE5
 12988                           fsr1h	equ	0xFE2
 12989                           fsr1l	equ	0xFE1
 12990                           indf2	equ	0xFDF
 12991                           postinc2	equ	0xFDE
 12992                           postdec2	equ	0xFDD
 12993                           fsr2h	equ	0xFDA
 12994                           fsr2l	equ	0xFD9
 12995                           status	equ	0xFD8
 12996                           
 12997 ;; *************** function _vscp_getFamilyType *****************
 12998 ;; Defined at:
 12999 ;;		line 2826 in file "../main.c"
 13000 ;; Parameters:    Size  Location     Type
 13001 ;;		None
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;		None
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  4   13[COMRAM] unsigned long 
 13006 ;; Registers used:
 13007 ;;		None
 13008 ;; Tracked objects:
 13009 ;;		On entry : E/1
 13010 ;;		On exit  : E/0
 13011 ;;		Unchanged: E/0
 13012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13013 ;;      Params:         4       0       0       0       0       0       0
 13014 ;;      Locals:         0       0       0       0       0       0       0
 13015 ;;      Temps:          0       0       0       0       0       0       0
 13016 ;;      Totals:         4       0       0       0       0       0       0
 13017 ;;Total ram usage:        4 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; Hardware stack levels required when called:    2
 13020 ;; This function calls:
 13021 ;;		Nothing
 13022 ;; This function is called by:
 13023 ;;		_vscp_readStdReg
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           	psect	text47
 13028  005CA0                     __ptext47:
 13029                           	opt stack 0
 13030  005CA0                     _vscp_getFamilyType:
 13031                           	opt stack 26
 13032                           
 13033                           ;main.c: 2827: return 0;
 13034                           
 13035                           ;incstack = 0
 13036                           ;incstack = 0
 13037  005CA0  6A0E               	clrf	?_vscp_getFamilyType,c
 13038  005CA2  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13039  005CA4  6A10               	clrf	?_vscp_getFamilyType+2,c
 13040  005CA6  6A11               	clrf	?_vscp_getFamilyType+3,c
 13041  005CA8  0012               	return	
 13042  005CAA                     __end_of_vscp_getFamilyType:
 13043                           	opt stack 0
 13044                           tblptru	equ	0xFF8
 13045                           tblptrh	equ	0xFF7
 13046                           tblptrl	equ	0xFF6
 13047                           tablat	equ	0xFF5
 13048                           prodh	equ	0xFF4
 13049                           prodl	equ	0xFF3
 13050                           postinc0	equ	0xFEE
 13051                           wreg	equ	0xFE8
 13052                           postdec1	equ	0xFE5
 13053                           fsr1h	equ	0xFE2
 13054                           fsr1l	equ	0xFE1
 13055                           indf2	equ	0xFDF
 13056                           postinc2	equ	0xFDE
 13057                           postdec2	equ	0xFDD
 13058                           fsr2h	equ	0xFDA
 13059                           fsr2l	equ	0xFD9
 13060                           status	equ	0xFD8
 13061                           
 13062 ;; *************** function _vscp_getFamilyCode *****************
 13063 ;; Defined at:
 13064 ;;		line 2816 in file "../main.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;		None
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;		None
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  4   13[COMRAM] unsigned long 
 13071 ;; Registers used:
 13072 ;;		None
 13073 ;; Tracked objects:
 13074 ;;		On entry : E/1
 13075 ;;		On exit  : E/0
 13076 ;;		Unchanged: E/0
 13077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13078 ;;      Params:         4       0       0       0       0       0       0
 13079 ;;      Locals:         0       0       0       0       0       0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0
 13081 ;;      Totals:         4       0       0       0       0       0       0
 13082 ;;Total ram usage:        4 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    2
 13085 ;; This function calls:
 13086 ;;		Nothing
 13087 ;; This function is called by:
 13088 ;;		_vscp_readStdReg
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           	psect	text48
 13093  005CAA                     __ptext48:
 13094                           	opt stack 0
 13095  005CAA                     _vscp_getFamilyCode:
 13096                           	opt stack 26
 13097                           
 13098                           ;main.c: 2817: return 0L;
 13099                           
 13100                           ;incstack = 0
 13101                           ;incstack = 0
 13102  005CAA  6A0E               	clrf	?_vscp_getFamilyCode,c
 13103  005CAC  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13104  005CAE  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13105  005CB0  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13106  005CB2  0012               	return	
 13107  005CB4                     __end_of_vscp_getFamilyCode:
 13108                           	opt stack 0
 13109                           tblptru	equ	0xFF8
 13110                           tblptrh	equ	0xFF7
 13111                           tblptrl	equ	0xFF6
 13112                           tablat	equ	0xFF5
 13113                           prodh	equ	0xFF4
 13114                           prodl	equ	0xFF3
 13115                           postinc0	equ	0xFEE
 13116                           wreg	equ	0xFE8
 13117                           postdec1	equ	0xFE5
 13118                           fsr1h	equ	0xFE2
 13119                           fsr1l	equ	0xFE1
 13120                           indf2	equ	0xFDF
 13121                           postinc2	equ	0xFDE
 13122                           postdec2	equ	0xFDD
 13123                           fsr2h	equ	0xFDA
 13124                           fsr2l	equ	0xFD9
 13125                           status	equ	0xFD8
 13126                           
 13127 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13128 ;; Defined at:
 13129 ;;		line 2715 in file "../main.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;		None
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;		None
 13134 ;; Return value:  Size  Location     Type
 13135 ;;                  1    wreg      unsigned char 
 13136 ;; Registers used:
 13137 ;;		wreg
 13138 ;; Tracked objects:
 13139 ;;		On entry : E/1
 13140 ;;		On exit  : E/0
 13141 ;;		Unchanged: E/0
 13142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13143 ;;      Params:         0       0       0       0       0       0       0
 13144 ;;      Locals:         0       0       0       0       0       0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0
 13146 ;;      Totals:         0       0       0       0       0       0       0
 13147 ;;Total ram usage:        0 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    2
 13150 ;; This function calls:
 13151 ;;		Nothing
 13152 ;; This function is called by:
 13153 ;;		_vscp_readStdReg
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           	psect	text49
 13158  005CDC                     __ptext49:
 13159                           	opt stack 0
 13160  005CDC                     _vscp_getRegisterPagesUsed:
 13161                           	opt stack 26
 13162                           
 13163                           ;main.c: 2716: return 1;
 13164                           
 13165                           ;incstack = 0
 13166                           ;incstack = 0
 13167  005CDC  0C01               	retlw	1
 13168  005CDE                     __end_of_vscp_getRegisterPagesUsed:
 13169                           	opt stack 0
 13170                           tblptru	equ	0xFF8
 13171                           tblptrh	equ	0xFF7
 13172                           tblptrl	equ	0xFF6
 13173                           tablat	equ	0xFF5
 13174                           prodh	equ	0xFF4
 13175                           prodl	equ	0xFF3
 13176                           postinc0	equ	0xFEE
 13177                           wreg	equ	0xFE8
 13178                           postdec1	equ	0xFE5
 13179                           fsr1h	equ	0xFE2
 13180                           fsr1l	equ	0xFE1
 13181                           indf2	equ	0xFDF
 13182                           postinc2	equ	0xFDE
 13183                           postdec2	equ	0xFDD
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function _vscp_getBufferSize *****************
 13189 ;; Defined at:
 13190 ;;		line 2668 in file "../main.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;		None
 13193 ;; Auto vars:     Size  Location     Type
 13194 ;;		None
 13195 ;; Return value:  Size  Location     Type
 13196 ;;                  1    wreg      unsigned char 
 13197 ;; Registers used:
 13198 ;;		wreg
 13199 ;; Tracked objects:
 13200 ;;		On entry : E/1
 13201 ;;		On exit  : E/0
 13202 ;;		Unchanged: E/0
 13203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13204 ;;      Params:         0       0       0       0       0       0       0
 13205 ;;      Locals:         0       0       0       0       0       0       0
 13206 ;;      Temps:          0       0       0       0       0       0       0
 13207 ;;      Totals:         0       0       0       0       0       0       0
 13208 ;;Total ram usage:        0 bytes
 13209 ;; Hardware stack levels used:    1
 13210 ;; Hardware stack levels required when called:    2
 13211 ;; This function calls:
 13212 ;;		Nothing
 13213 ;; This function is called by:
 13214 ;;		_vscp_readStdReg
 13215 ;; This function uses a non-reentrant model
 13216 ;;
 13217                           
 13218                           	psect	text50
 13219  005CDE                     __ptext50:
 13220                           	opt stack 0
 13221  005CDE                     _vscp_getBufferSize:
 13222                           	opt stack 26
 13223                           
 13224                           ;main.c: 2669: return 8;
 13225                           
 13226                           ;incstack = 0
 13227                           ;incstack = 0
 13228  005CDE  0C08               	retlw	8
 13229  005CE0                     __end_of_vscp_getBufferSize:
 13230                           	opt stack 0
 13231                           tblptru	equ	0xFF8
 13232                           tblptrh	equ	0xFF7
 13233                           tblptrl	equ	0xFF6
 13234                           tablat	equ	0xFF5
 13235                           prodh	equ	0xFF4
 13236                           prodl	equ	0xFF3
 13237                           postinc0	equ	0xFEE
 13238                           wreg	equ	0xFE8
 13239                           postdec1	equ	0xFE5
 13240                           fsr1h	equ	0xFE2
 13241                           fsr1l	equ	0xFE1
 13242                           indf2	equ	0xFDF
 13243                           postinc2	equ	0xFDE
 13244                           postdec2	equ	0xFDD
 13245                           fsr2h	equ	0xFDA
 13246                           fsr2l	equ	0xFD9
 13247                           status	equ	0xFD8
 13248                           
 13249 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13250 ;; Defined at:
 13251 ;;		line 2659 in file "../main.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;		None
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;		None
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  1    wreg      unsigned char 
 13258 ;; Registers used:
 13259 ;;		wreg
 13260 ;; Tracked objects:
 13261 ;;		On entry : E/1
 13262 ;;		On exit  : E/0
 13263 ;;		Unchanged: E/0
 13264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13265 ;;      Params:         0       0       0       0       0       0       0
 13266 ;;      Locals:         0       0       0       0       0       0       0
 13267 ;;      Temps:          0       0       0       0       0       0       0
 13268 ;;      Totals:         0       0       0       0       0       0       0
 13269 ;;Total ram usage:        0 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    2
 13272 ;; This function calls:
 13273 ;;		Nothing
 13274 ;; This function is called by:
 13275 ;;		_vscp_readStdReg
 13276 ;; This function uses a non-reentrant model
 13277 ;;
 13278                           
 13279                           	psect	text51
 13280  005CE0                     __ptext51:
 13281                           	opt stack 0
 13282  005CE0                     _vscp_getBootLoaderAlgorithm:
 13283                           	opt stack 26
 13284                           
 13285                           ;main.c: 2660: return 0x01;
 13286                           
 13287                           ;incstack = 0
 13288                           ;incstack = 0
 13289  005CE0  0C01               	retlw	1
 13290  005CE2                     __end_of_vscp_getBootLoaderAlgorithm:
 13291                           	opt stack 0
 13292                           tblptru	equ	0xFF8
 13293                           tblptrh	equ	0xFF7
 13294                           tblptrl	equ	0xFF6
 13295                           tablat	equ	0xFF5
 13296                           prodh	equ	0xFF4
 13297                           prodl	equ	0xFF3
 13298                           postinc0	equ	0xFEE
 13299                           wreg	equ	0xFE8
 13300                           postdec1	equ	0xFE5
 13301                           fsr1h	equ	0xFE2
 13302                           fsr1l	equ	0xFE1
 13303                           indf2	equ	0xFDF
 13304                           postinc2	equ	0xFDE
 13305                           postdec2	equ	0xFDD
 13306                           fsr2h	equ	0xFDA
 13307                           fsr2l	equ	0xFD9
 13308                           status	equ	0xFD8
 13309                           
 13310 ;; *************** function _vscp_getManufacturerId *****************
 13311 ;; Defined at:
 13312 ;;		line 2639 in file "../main.c"
 13313 ;; Parameters:    Size  Location     Type
 13314 ;;  idx             1    wreg     unsigned char 
 13315 ;; Auto vars:     Size  Location     Type
 13316 ;;  idx             1   25[COMRAM] unsigned char 
 13317 ;; Return value:  Size  Location     Type
 13318 ;;                  1    wreg      unsigned char 
 13319 ;; Registers used:
 13320 ;;		wreg, status,2, status,0, cstack
 13321 ;; Tracked objects:
 13322 ;;		On entry : 0/1
 13323 ;;		On exit  : 0/0
 13324 ;;		Unchanged: 0/0
 13325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13326 ;;      Params:         0       0       0       0       0       0       0
 13327 ;;      Locals:         1       0       0       0       0       0       0
 13328 ;;      Temps:          0       0       0       0       0       0       0
 13329 ;;      Totals:         1       0       0       0       0       0       0
 13330 ;;Total ram usage:        1 bytes
 13331 ;; Hardware stack levels used:    1
 13332 ;; Hardware stack levels required when called:    3
 13333 ;; This function calls:
 13334 ;;		_readEEPROM
 13335 ;; This function is called by:
 13336 ;;		_vscp_readStdReg
 13337 ;;		_vscp_writeStdReg
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           	psect	text52
 13342  005BE2                     __ptext52:
 13343                           	opt stack 0
 13344  005BE2                     _vscp_getManufacturerId:
 13345                           	opt stack 25
 13346                           
 13347                           ;incstack = 0
 13348                           ;incstack = 0
 13349                           ;vscp_getManufacturerId@idx stored from wreg
 13350  005BE2  CFE8 F01A          	movff	wreg,vscp_getManufacturerId@idx
 13351                           
 13352                           ;main.c: 2640: return readEEPROM(0x09 + idx);
 13353  005BE6  0E09               	movlw	9
 13354  005BE8  241A               	addwf	vscp_getManufacturerId@idx,w,c
 13355  005BEA  6E16               	movwf	?_readEEPROM,c
 13356  005BEC  6A17               	clrf	?_readEEPROM+1,c
 13357  005BEE  0E00               	movlw	0
 13358  005BF0  2217               	addwfc	?_readEEPROM+1,f,c
 13359  005BF2  EF0F  F02E         	goto	_readEEPROM	;wreg free
 13360  005BF6                     __end_of_vscp_getManufacturerId:
 13361                           	opt stack 0
 13362                           tblptru	equ	0xFF8
 13363                           tblptrh	equ	0xFF7
 13364                           tblptrl	equ	0xFF6
 13365                           tablat	equ	0xFF5
 13366                           prodh	equ	0xFF4
 13367                           prodl	equ	0xFF3
 13368                           postinc0	equ	0xFEE
 13369                           wreg	equ	0xFE8
 13370                           postdec1	equ	0xFE5
 13371                           fsr1h	equ	0xFE2
 13372                           fsr1l	equ	0xFE1
 13373                           indf2	equ	0xFDF
 13374                           postinc2	equ	0xFDE
 13375                           postdec2	equ	0xFDD
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           
 13380 ;; *************** function _vscp_getUserID *****************
 13381 ;; Defined at:
 13382 ;;		line 2619 in file "../main.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;  idx             1    wreg     unsigned char 
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;  idx             1   25[COMRAM] unsigned char 
 13387 ;; Return value:  Size  Location     Type
 13388 ;;                  1    wreg      unsigned char 
 13389 ;; Registers used:
 13390 ;;		wreg, status,2, status,0, cstack
 13391 ;; Tracked objects:
 13392 ;;		On entry : 0/1
 13393 ;;		On exit  : 0/0
 13394 ;;		Unchanged: 0/0
 13395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13396 ;;      Params:         0       0       0       0       0       0       0
 13397 ;;      Locals:         1       0       0       0       0       0       0
 13398 ;;      Temps:          0       0       0       0       0       0       0
 13399 ;;      Totals:         1       0       0       0       0       0       0
 13400 ;;Total ram usage:        1 bytes
 13401 ;; Hardware stack levels used:    1
 13402 ;; Hardware stack levels required when called:    3
 13403 ;; This function calls:
 13404 ;;		_readEEPROM
 13405 ;; This function is called by:
 13406 ;;		_vscp_readStdReg
 13407 ;;		_vscp_writeStdReg
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text53
 13412  005BF6                     __ptext53:
 13413                           	opt stack 0
 13414  005BF6                     _vscp_getUserID:
 13415                           	opt stack 25
 13416                           
 13417                           ;incstack = 0
 13418                           ;incstack = 0
 13419                           ;vscp_getUserID@idx stored from wreg
 13420  005BF6  CFE8 F01A          	movff	wreg,vscp_getUserID@idx
 13421                           
 13422                           ;main.c: 2620: return readEEPROM(0x04 + idx);
 13423  005BFA  0E04               	movlw	4
 13424  005BFC  241A               	addwf	vscp_getUserID@idx,w,c
 13425  005BFE  6E16               	movwf	?_readEEPROM,c
 13426  005C00  6A17               	clrf	?_readEEPROM+1,c
 13427  005C02  0E00               	movlw	0
 13428  005C04  2217               	addwfc	?_readEEPROM+1,f,c
 13429  005C06  EF0F  F02E         	goto	_readEEPROM	;wreg free
 13430  005C0A                     __end_of_vscp_getUserID:
 13431                           	opt stack 0
 13432                           tblptru	equ	0xFF8
 13433                           tblptrh	equ	0xFF7
 13434                           tblptrl	equ	0xFF6
 13435                           tablat	equ	0xFF5
 13436                           prodh	equ	0xFF4
 13437                           prodl	equ	0xFF3
 13438                           postinc0	equ	0xFEE
 13439                           wreg	equ	0xFE8
 13440                           postdec1	equ	0xFE5
 13441                           fsr1h	equ	0xFE2
 13442                           fsr1l	equ	0xFE1
 13443                           indf2	equ	0xFDF
 13444                           postinc2	equ	0xFDE
 13445                           postdec2	equ	0xFDD
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _vscp_getMDF_URL *****************
 13451 ;; Defined at:
 13452 ;;		line 2610 in file "../main.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;  idx             1    wreg     unsigned char 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  idx             1   14[COMRAM] unsigned char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      unsigned char 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13461 ;; Tracked objects:
 13462 ;;		On entry : E/0
 13463 ;;		On exit  : E/0
 13464 ;;		Unchanged: E/0
 13465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13466 ;;      Params:         0       0       0       0       0       0       0
 13467 ;;      Locals:         1       0       0       0       0       0       0
 13468 ;;      Temps:          1       0       0       0       0       0       0
 13469 ;;      Totals:         2       0       0       0       0       0       0
 13470 ;;Total ram usage:        2 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    2
 13473 ;; This function calls:
 13474 ;;		Nothing
 13475 ;; This function is called by:
 13476 ;;		_vscp_readStdReg
 13477 ;;		_vscp_handleProtocolEvent
 13478 ;; This function uses a non-reentrant model
 13479 ;;
 13480                           
 13481                           	psect	text54
 13482  005BB2                     __ptext54:
 13483                           	opt stack 0
 13484  005BB2                     _vscp_getMDF_URL:
 13485                           	opt stack 26
 13486                           
 13487                           ;incstack = 0
 13488                           ;incstack = 0
 13489                           ;vscp_getMDF_URL@idx stored from wreg
 13490  005BB2  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13491                           
 13492                           ;main.c: 2611: return vscp_deviceURL[ idx ];
 13493  005BB6  500F               	movf	vscp_getMDF_URL@idx,w,c
 13494  005BB8  0F00               	addlw	low _vscp_deviceURL
 13495  005BBA  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13496  005BBC  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13497  005BC0  0E0B               	movlw	high __smallconst
 13498  005BC2  6EF7               	movwf	tblptrh,c
 13499  005BC4  0008               	tblrd		*
 13500  005BC6  50F5               	movf	tablat,w,c
 13501  005BC8  0012               	return	
 13502  005BCA                     __end_of_vscp_getMDF_URL:
 13503                           	opt stack 0
 13504                           tblptru	equ	0xFF8
 13505                           tblptrh	equ	0xFF7
 13506                           tblptrl	equ	0xFF6
 13507                           tablat	equ	0xFF5
 13508                           prodh	equ	0xFF4
 13509                           prodl	equ	0xFF3
 13510                           postinc0	equ	0xFEE
 13511                           wreg	equ	0xFE8
 13512                           postdec1	equ	0xFE5
 13513                           fsr1h	equ	0xFE2
 13514                           fsr1l	equ	0xFE1
 13515                           indf2	equ	0xFDF
 13516                           postinc2	equ	0xFDE
 13517                           postdec2	equ	0xFDD
 13518                           fsr2h	equ	0xFDA
 13519                           fsr2l	equ	0xFD9
 13520                           status	equ	0xFD8
 13521                           
 13522 ;; *************** function _vscp_getGUID *****************
 13523 ;; Defined at:
 13524 ;;		line 2587 in file "../main.c"
 13525 ;; Parameters:    Size  Location     Type
 13526 ;;  idx             1    wreg     unsigned char 
 13527 ;; Auto vars:     Size  Location     Type
 13528 ;;  idx             1   25[COMRAM] unsigned char 
 13529 ;; Return value:  Size  Location     Type
 13530 ;;                  1    wreg      unsigned char 
 13531 ;; Registers used:
 13532 ;;		wreg, status,2, status,0, cstack
 13533 ;; Tracked objects:
 13534 ;;		On entry : 0/1
 13535 ;;		On exit  : 0/0
 13536 ;;		Unchanged: 0/0
 13537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13538 ;;      Params:         0       0       0       0       0       0       0
 13539 ;;      Locals:         1       0       0       0       0       0       0
 13540 ;;      Temps:          0       0       0       0       0       0       0
 13541 ;;      Totals:         1       0       0       0       0       0       0
 13542 ;;Total ram usage:        1 bytes
 13543 ;; Hardware stack levels used:    1
 13544 ;; Hardware stack levels required when called:    3
 13545 ;; This function calls:
 13546 ;;		_readEEPROM
 13547 ;; This function is called by:
 13548 ;;		_vscp_readStdReg
 13549 ;;		_vscp_writeStdReg
 13550 ;;		_vscp_handleProtocolEvent
 13551 ;; This function uses a non-reentrant model
 13552 ;;
 13553                           
 13554                           	psect	text55
 13555  005C0A                     __ptext55:
 13556                           	opt stack 0
 13557  005C0A                     _vscp_getGUID:
 13558                           	opt stack 25
 13559                           
 13560                           ;incstack = 0
 13561                           ;incstack = 0
 13562                           ;vscp_getGUID@idx stored from wreg
 13563  005C0A  CFE8 F01A          	movff	wreg,vscp_getGUID@idx
 13564                           
 13565                           ;main.c: 2588: return readEEPROM(0x11 + idx);
 13566  005C0E  0E11               	movlw	17
 13567  005C10  241A               	addwf	vscp_getGUID@idx,w,c
 13568  005C12  6E16               	movwf	?_readEEPROM,c
 13569  005C14  6A17               	clrf	?_readEEPROM+1,c
 13570  005C16  0E00               	movlw	0
 13571  005C18  2217               	addwfc	?_readEEPROM+1,f,c
 13572  005C1A  EF0F  F02E         	goto	_readEEPROM	;wreg free
 13573  005C1E                     __end_of_vscp_getGUID:
 13574                           	opt stack 0
 13575                           tblptru	equ	0xFF8
 13576                           tblptrh	equ	0xFF7
 13577                           tblptrl	equ	0xFF6
 13578                           tablat	equ	0xFF5
 13579                           prodh	equ	0xFF4
 13580                           prodl	equ	0xFF3
 13581                           postinc0	equ	0xFEE
 13582                           wreg	equ	0xFE8
 13583                           postdec1	equ	0xFE5
 13584                           fsr1h	equ	0xFE2
 13585                           fsr1l	equ	0xFE1
 13586                           indf2	equ	0xFDF
 13587                           postinc2	equ	0xFDE
 13588                           postdec2	equ	0xFDD
 13589                           fsr2h	equ	0xFDA
 13590                           fsr2l	equ	0xFD9
 13591                           status	equ	0xFD8
 13592                           
 13593 ;; *************** function _vscp_getSubMinorVersion *****************
 13594 ;; Defined at:
 13595 ;;		line 2576 in file "../main.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;		None
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;		None
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  1    wreg      unsigned char 
 13602 ;; Registers used:
 13603 ;;		wreg
 13604 ;; Tracked objects:
 13605 ;;		On entry : E/1
 13606 ;;		On exit  : E/0
 13607 ;;		Unchanged: E/0
 13608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13609 ;;      Params:         0       0       0       0       0       0       0
 13610 ;;      Locals:         0       0       0       0       0       0       0
 13611 ;;      Temps:          0       0       0       0       0       0       0
 13612 ;;      Totals:         0       0       0       0       0       0       0
 13613 ;;Total ram usage:        0 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    2
 13616 ;; This function calls:
 13617 ;;		Nothing
 13618 ;; This function is called by:
 13619 ;;		_vscp_readStdReg
 13620 ;; This function uses a non-reentrant model
 13621 ;;
 13622                           
 13623                           	psect	text56
 13624  005CE2                     __ptext56:
 13625                           	opt stack 0
 13626  005CE2                     _vscp_getSubMinorVersion:
 13627                           	opt stack 26
 13628                           
 13629                           ;main.c: 2577: return 2;
 13630                           
 13631                           ;incstack = 0
 13632                           ;incstack = 0
 13633  005CE2  0C02               	retlw	2
 13634  005CE4                     __end_of_vscp_getSubMinorVersion:
 13635                           	opt stack 0
 13636                           tblptru	equ	0xFF8
 13637                           tblptrh	equ	0xFF7
 13638                           tblptrl	equ	0xFF6
 13639                           tablat	equ	0xFF5
 13640                           prodh	equ	0xFF4
 13641                           prodl	equ	0xFF3
 13642                           postinc0	equ	0xFEE
 13643                           wreg	equ	0xFE8
 13644                           postdec1	equ	0xFE5
 13645                           fsr1h	equ	0xFE2
 13646                           fsr1l	equ	0xFE1
 13647                           indf2	equ	0xFDF
 13648                           postinc2	equ	0xFDE
 13649                           postdec2	equ	0xFDD
 13650                           fsr2h	equ	0xFDA
 13651                           fsr2l	equ	0xFD9
 13652                           status	equ	0xFD8
 13653                           
 13654 ;; *************** function _vscp_getMinorVersion *****************
 13655 ;; Defined at:
 13656 ;;		line 2567 in file "../main.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;		None
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  1    wreg      unsigned char 
 13663 ;; Registers used:
 13664 ;;		wreg
 13665 ;; Tracked objects:
 13666 ;;		On entry : E/1
 13667 ;;		On exit  : E/0
 13668 ;;		Unchanged: E/0
 13669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13670 ;;      Params:         0       0       0       0       0       0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0
 13672 ;;      Temps:          0       0       0       0       0       0       0
 13673 ;;      Totals:         0       0       0       0       0       0       0
 13674 ;;Total ram usage:        0 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    2
 13677 ;; This function calls:
 13678 ;;		Nothing
 13679 ;; This function is called by:
 13680 ;;		_vscp_readStdReg
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           	psect	text57
 13685  005CE4                     __ptext57:
 13686                           	opt stack 0
 13687  005CE4                     _vscp_getMinorVersion:
 13688                           	opt stack 26
 13689                           
 13690                           ;main.c: 2568: return 2;
 13691                           
 13692                           ;incstack = 0
 13693                           ;incstack = 0
 13694  005CE4  0C02               	retlw	2
 13695  005CE6                     __end_of_vscp_getMinorVersion:
 13696                           	opt stack 0
 13697                           tblptru	equ	0xFF8
 13698                           tblptrh	equ	0xFF7
 13699                           tblptrl	equ	0xFF6
 13700                           tablat	equ	0xFF5
 13701                           prodh	equ	0xFF4
 13702                           prodl	equ	0xFF3
 13703                           postinc0	equ	0xFEE
 13704                           wreg	equ	0xFE8
 13705                           postdec1	equ	0xFE5
 13706                           fsr1h	equ	0xFE2
 13707                           fsr1l	equ	0xFE1
 13708                           indf2	equ	0xFDF
 13709                           postinc2	equ	0xFDE
 13710                           postdec2	equ	0xFDD
 13711                           fsr2h	equ	0xFDA
 13712                           fsr2l	equ	0xFD9
 13713                           status	equ	0xFD8
 13714                           
 13715 ;; *************** function _vscp_getMajorVersion *****************
 13716 ;; Defined at:
 13717 ;;		line 2558 in file "../main.c"
 13718 ;; Parameters:    Size  Location     Type
 13719 ;;		None
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;		None
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  1    wreg      unsigned char 
 13724 ;; Registers used:
 13725 ;;		wreg
 13726 ;; Tracked objects:
 13727 ;;		On entry : E/1
 13728 ;;		On exit  : E/0
 13729 ;;		Unchanged: E/0
 13730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13731 ;;      Params:         0       0       0       0       0       0       0
 13732 ;;      Locals:         0       0       0       0       0       0       0
 13733 ;;      Temps:          0       0       0       0       0       0       0
 13734 ;;      Totals:         0       0       0       0       0       0       0
 13735 ;;Total ram usage:        0 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    2
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_vscp_readStdReg
 13742 ;; This function uses a non-reentrant model
 13743 ;;
 13744                           
 13745                           	psect	text58
 13746  005CE6                     __ptext58:
 13747                           	opt stack 0
 13748  005CE6                     _vscp_getMajorVersion:
 13749                           	opt stack 26
 13750                           
 13751                           ;main.c: 2559: return 1;
 13752                           
 13753                           ;incstack = 0
 13754                           ;incstack = 0
 13755  005CE6  0C01               	retlw	1
 13756  005CE8                     __end_of_vscp_getMajorVersion:
 13757                           	opt stack 0
 13758                           tblptru	equ	0xFF8
 13759                           tblptrh	equ	0xFF7
 13760                           tblptrl	equ	0xFF6
 13761                           tablat	equ	0xFF5
 13762                           prodh	equ	0xFF4
 13763                           prodl	equ	0xFF3
 13764                           postinc0	equ	0xFEE
 13765                           wreg	equ	0xFE8
 13766                           postdec1	equ	0xFE5
 13767                           fsr1h	equ	0xFE2
 13768                           fsr1l	equ	0xFE1
 13769                           indf2	equ	0xFDF
 13770                           postinc2	equ	0xFDE
 13771                           postdec2	equ	0xFDD
 13772                           fsr2h	equ	0xFDA
 13773                           fsr2l	equ	0xFD9
 13774                           status	equ	0xFD8
 13775                           
 13776 ;; *************** function _vscp_newNodeOnline *****************
 13777 ;; Defined at:
 13778 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 13779 ;; Parameters:    Size  Location     Type
 13780 ;;		None
 13781 ;; Auto vars:     Size  Location     Type
 13782 ;;		None
 13783 ;; Return value:  Size  Location     Type
 13784 ;;		None               void
 13785 ;; Registers used:
 13786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13787 ;; Tracked objects:
 13788 ;;		On entry : F/1
 13789 ;;		On exit  : E/0
 13790 ;;		Unchanged: 0/0
 13791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13792 ;;      Params:         0       0       0       0       0       0       0
 13793 ;;      Locals:         0       0       0       0       0       0       0
 13794 ;;      Temps:          1       0       0       0       0       0       0
 13795 ;;      Totals:         1       0       0       0       0       0       0
 13796 ;;Total ram usage:        1 bytes
 13797 ;; Hardware stack levels used:    1
 13798 ;; Hardware stack levels required when called:    7
 13799 ;; This function calls:
 13800 ;;		_vscp_sendEvent
 13801 ;; This function is called by:
 13802 ;;		_vscp_handleProtocolEvent
 13803 ;; This function uses a non-reentrant model
 13804 ;;
 13805                           
 13806                           	psect	text59
 13807  005946                     __ptext59:
 13808                           	opt stack 0
 13809  005946                     _vscp_newNodeOnline:
 13810                           	opt stack 22
 13811                           
 13812                           ; BSR set to: 1
 13813                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 13814                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13815                           
 13816                           ;incstack = 0
 13817                           ;incstack = 0
 13818  005946  C164  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 13819  00594A  0E0F               	movlw	15
 13820  00594C  1644               	andwf	??_vscp_newNodeOnline,f,c
 13821  00594E  0444               	decf	??_vscp_newNodeOnline,w,c
 13822  005950  E111               	bnz	l1091
 13823                           
 13824                           ; BSR set to: 1
 13825  005952  0100               	movlb	0	; () banked
 13826  005954  51C9               	movf	_vscp_nickname& (0+255),w,b
 13827  005956  0101               	movlb	1	; () banked
 13828  005958  EE21  F06A         	lfsr	2,_vscp_imsg+6
 13829  00595C  62DF               	cpfseq	indf2,c
 13830  00595E  D00A               	goto	l1091
 13831                           
 13832                           ; BSR set to: 1
 13833                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 13834  005960  0E80               	movlw	128
 13835  005962  0100               	movlb	0	; () banked
 13836  005964  6FCB               	movwf	_vscp_omsg& (0+255),b
 13837                           
 13838                           ; BSR set to: 0
 13839                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 13840  005966  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 13844  005968  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 13845  00596A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 13846                           
 13847                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 13848  00596C  0E03               	movlw	3
 13849  00596E  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 13850                           
 13851                           ; BSR set to: 0
 13852                           ;vscp_firmware.c: 514: vscp_sendEvent();
 13853  005970  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
 13854  005974                     l1091:
 13855  005974  0012               	return	
 13856  005976                     __end_of_vscp_newNodeOnline:
 13857                           	opt stack 0
 13858                           tblptru	equ	0xFF8
 13859                           tblptrh	equ	0xFF7
 13860                           tblptrl	equ	0xFF6
 13861                           tablat	equ	0xFF5
 13862                           prodh	equ	0xFF4
 13863                           prodl	equ	0xFF3
 13864                           postinc0	equ	0xFEE
 13865                           wreg	equ	0xFE8
 13866                           postdec1	equ	0xFE5
 13867                           fsr1h	equ	0xFE2
 13868                           fsr1l	equ	0xFE1
 13869                           indf2	equ	0xFDF
 13870                           postinc2	equ	0xFDE
 13871                           postdec2	equ	0xFDD
 13872                           fsr2h	equ	0xFDA
 13873                           fsr2l	equ	0xFD9
 13874                           status	equ	0xFD8
 13875                           
 13876 ;; *************** function _vscp_handleDropNickname *****************
 13877 ;; Defined at:
 13878 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 13879 ;; Parameters:    Size  Location     Type
 13880 ;;		None
 13881 ;; Auto vars:     Size  Location     Type
 13882 ;;  bytes           1   25[COMRAM] unsigned char 
 13883 ;; Return value:  Size  Location     Type
 13884 ;;		None               void
 13885 ;; Registers used:
 13886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13887 ;; Tracked objects:
 13888 ;;		On entry : F/1
 13889 ;;		On exit  : E/0
 13890 ;;		Unchanged: 0/0
 13891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13892 ;;      Params:         0       0       0       0       0       0       0
 13893 ;;      Locals:         1       0       0       0       0       0       0
 13894 ;;      Temps:          0       0       0       0       0       0       0
 13895 ;;      Totals:         1       0       0       0       0       0       0
 13896 ;;Total ram usage:        1 bytes
 13897 ;; Hardware stack levels used:    1
 13898 ;; Hardware stack levels required when called:    5
 13899 ;; This function calls:
 13900 ;;		_vscp_init
 13901 ;;		_vscp_writeNicknamePermanent
 13902 ;; This function is called by:
 13903 ;;		_vscp_handleProtocolEvent
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           	psect	text60
 13908  0058A8                     __ptext60:
 13909                           	opt stack 0
 13910  0058A8                     _vscp_handleDropNickname:
 13911                           	opt stack 24
 13912                           
 13913                           ; BSR set to: 1
 13914                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 13915                           
 13916                           ;incstack = 0
 13917                           ;incstack = 0
 13918  0058A8  5164               	movf	_vscp_imsg& (0+255),w,b
 13919  0058AA  0B0F               	andlw	15
 13920  0058AC  6E1A               	movwf	vscp_handleDropNickname@bytes,c
 13921                           
 13922                           ; BSR set to: 1
 13923                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13924  0058AE  501A               	movf	vscp_handleDropNickname@bytes,w,c
 13925  0058B0  E015               	bz	l1087
 13926                           
 13927                           ; BSR set to: 1
 13928  0058B2  0100               	movlb	0	; () banked
 13929  0058B4  51C9               	movf	_vscp_nickname& (0+255),w,b
 13930  0058B6  0101               	movlb	1	; () banked
 13931  0058B8  EE21  F06A         	lfsr	2,_vscp_imsg+6
 13932  0058BC  62DF               	cpfseq	indf2,c
 13933  0058BE  D00E               	goto	l1087
 13934                           
 13935                           ; BSR set to: 1
 13936                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 13937  0058C0  041A               	decf	vscp_handleDropNickname@bytes,w,c
 13938  0058C2  E005               	bz	l1086
 13939                           
 13940                           ; BSR set to: 1
 13941  0058C4  0E01               	movlw	1
 13942  0058C6  641A               	cpfsgt	vscp_handleDropNickname@bytes,c
 13943  0058C8  D009               	goto	l1087
 13944                           
 13945                           ; BSR set to: 1
 13946  0058CA  676B               	tstfsz	(_vscp_imsg+7)& (0+255),b
 13947  0058CC  D007               	goto	l1087
 13948  0058CE                     l1086:
 13949                           
 13950                           ; BSR set to: 1
 13951                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 13952  0058CE  0100               	movlb	0	; () banked
 13953  0058D0  69C9               	setf	_vscp_nickname& (0+255),b
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 13957  0058D2  0EFF               	movlw	255
 13958  0058D4  EC2B  F02E         	call	_vscp_writeNicknamePermanent
 13959                           
 13960                           ;vscp_firmware.c: 481: vscp_init();
 13961  0058D8  EC12  F02B         	call	_vscp_init	;wreg free
 13962  0058DC                     l1087:
 13963  0058DC  0012               	return	
 13964  0058DE                     __end_of_vscp_handleDropNickname:
 13965                           	opt stack 0
 13966                           tblptru	equ	0xFF8
 13967                           tblptrh	equ	0xFF7
 13968                           tblptrl	equ	0xFF6
 13969                           tablat	equ	0xFF5
 13970                           prodh	equ	0xFF4
 13971                           prodl	equ	0xFF3
 13972                           postinc0	equ	0xFEE
 13973                           wreg	equ	0xFE8
 13974                           postdec1	equ	0xFE5
 13975                           fsr1h	equ	0xFE2
 13976                           fsr1l	equ	0xFE1
 13977                           indf2	equ	0xFDF
 13978                           postinc2	equ	0xFDE
 13979                           postdec2	equ	0xFDD
 13980                           fsr2h	equ	0xFDA
 13981                           fsr2l	equ	0xFD9
 13982                           status	equ	0xFD8
 13983                           
 13984 ;; *************** function _vscp_init *****************
 13985 ;; Defined at:
 13986 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;		None
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;		None
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : F/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14000 ;;      Params:         0       0       0       0       0       0       0
 14001 ;;      Locals:         0       0       0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0       0       0
 14003 ;;      Totals:         0       0       0       0       0       0       0
 14004 ;;Total ram usage:        0 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    4
 14007 ;; This function calls:
 14008 ;;		_vscp_readNicknamePermanent
 14009 ;; This function is called by:
 14010 ;;		_main
 14011 ;;		_vscp_handleDropNickname
 14012 ;;		_vscp_handleProtocolEvent
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text61
 14017  005624                     __ptext61:
 14018                           	opt stack 0
 14019  005624                     _vscp_init:
 14020                           	opt stack 24
 14021                           
 14022                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14023                           
 14024                           ;incstack = 0
 14025                           ;incstack = 0
 14026  005624  0E02               	movlw	2
 14027  005626  6E4C               	movwf	_vscp_initledfunc,c
 14028                           
 14029                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14030  005628  EC5A  F02E         	call	_vscp_readNicknamePermanent	;wreg free
 14031  00562C  0100               	movlb	0	; () banked
 14032  00562E  6FC9               	movwf	_vscp_nickname& (0+255),b
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14036  005630  67C9               	tstfsz	_vscp_nickname& (0+255),b
 14037  005632  D001               	goto	l1028
 14038                           
 14039                           ; BSR set to: 0
 14040  005634  69C9               	setf	_vscp_nickname& (0+255),b
 14041  005636                     l1028:
 14042                           
 14043                           ; BSR set to: 0
 14044                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14045  005636  0101               	movlb	1	; () banked
 14046  005638  6B64               	clrf	_vscp_imsg& (0+255),b
 14047                           
 14048                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14049  00563A  6B65               	clrf	(_vscp_imsg+1)& (0+255),b
 14050                           
 14051                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14052  00563C  6B66               	clrf	(_vscp_imsg+2)& (0+255),b
 14053  00563E  6B67               	clrf	(_vscp_imsg+3)& (0+255),b
 14054                           
 14055                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14056  005640  6B68               	clrf	(_vscp_imsg+4)& (0+255),b
 14057                           
 14058                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14059  005642  0100               	movlb	0	; () banked
 14060  005644  6BCB               	clrf	_vscp_omsg& (0+255),b
 14061                           
 14062                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14063  005646  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14064                           
 14065                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14066  005648  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14067  00564A  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14068                           
 14069                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14070  00564C  6BCF               	clrf	(_vscp_omsg+4)& (0+255),b
 14071                           
 14072                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14073  00564E  6A4A               	clrf	_vscp_alarmstatus,c
 14074                           
 14075                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14076  005650  6A4F               	clrf	_vscp_probe_address,c
 14077                           
 14078                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14079  005652  6BCA               	clrf	_vscp_node_state& (0+255),b
 14080                           
 14081                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14082  005654  6A4E               	clrf	_vscp_node_substate,c
 14083                           
 14084                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14085  005656  6A50               	clrf	_vscp_probe_cnt,c
 14086                           
 14087                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14088  005658  6A46               	clrf	_vscp_page_select,c
 14089  00565A  6A47               	clrf	_vscp_page_select+1,c
 14090                           
 14091                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14092  00565C  6BC1               	clrf	_vscp_timer& (0+255),b	;volatile
 14093  00565E  6BC2               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14094                           
 14095                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14096  005660  6BBF               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14097  005662  6BC0               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14098                           
 14099                           ;vscp_firmware.c: 155: vscp_second = 0;
 14100  005664  6A51               	clrf	_vscp_second,c
 14101                           
 14102                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14103  005666  6A4D               	clrf	_vscp_minute,c
 14104                           
 14105                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14106  005668  6BC7               	clrf	_vscp_hour& (0+255),b
 14107                           
 14108                           ; BSR set to: 0
 14109  00566A  0012               	return	
 14110  00566C                     __end_of_vscp_init:
 14111                           	opt stack 0
 14112                           tblptru	equ	0xFF8
 14113                           tblptrh	equ	0xFF7
 14114                           tblptrl	equ	0xFF6
 14115                           tablat	equ	0xFF5
 14116                           prodh	equ	0xFF4
 14117                           prodl	equ	0xFF3
 14118                           postinc0	equ	0xFEE
 14119                           wreg	equ	0xFE8
 14120                           postdec1	equ	0xFE5
 14121                           fsr1h	equ	0xFE2
 14122                           fsr1l	equ	0xFE1
 14123                           indf2	equ	0xFDF
 14124                           postinc2	equ	0xFDE
 14125                           postdec2	equ	0xFDD
 14126                           fsr2h	equ	0xFDA
 14127                           fsr2l	equ	0xFD9
 14128                           status	equ	0xFD8
 14129                           
 14130 ;; *************** function _vscp_readNicknamePermanent *****************
 14131 ;; Defined at:
 14132 ;;		line 2761 in file "../main.c"
 14133 ;; Parameters:    Size  Location     Type
 14134 ;;		None
 14135 ;; Auto vars:     Size  Location     Type
 14136 ;;		None
 14137 ;; Return value:  Size  Location     Type
 14138 ;;                  1    wreg      unsigned char 
 14139 ;; Registers used:
 14140 ;;		wreg, status,2, cstack
 14141 ;; Tracked objects:
 14142 ;;		On entry : 0/0
 14143 ;;		On exit  : 0/0
 14144 ;;		Unchanged: 0/0
 14145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14146 ;;      Params:         0       0       0       0       0       0       0
 14147 ;;      Locals:         0       0       0       0       0       0       0
 14148 ;;      Temps:          0       0       0       0       0       0       0
 14149 ;;      Totals:         0       0       0       0       0       0       0
 14150 ;;Total ram usage:        0 bytes
 14151 ;; Hardware stack levels used:    1
 14152 ;; Hardware stack levels required when called:    3
 14153 ;; This function calls:
 14154 ;;		_readEEPROM
 14155 ;; This function is called by:
 14156 ;;		_vscp_init
 14157 ;; This function uses a non-reentrant model
 14158 ;;
 14159                           
 14160                           	psect	text62
 14161  005CB4                     __ptext62:
 14162                           	opt stack 0
 14163  005CB4                     _vscp_readNicknamePermanent:
 14164                           	opt stack 24
 14165                           
 14166                           ;main.c: 2762: return readEEPROM( 0x01 );
 14167                           
 14168                           ; BSR set to: 0
 14169                           ;incstack = 0
 14170                           ;incstack = 0
 14171  005CB4  6A17               	clrf	?_readEEPROM+1,c
 14172  005CB6  0E01               	movlw	1
 14173  005CB8  6E16               	movwf	?_readEEPROM,c
 14174  005CBA  EF0F  F02E         	goto	_readEEPROM	;wreg free
 14175  005CBE                     __end_of_vscp_readNicknamePermanent:
 14176                           	opt stack 0
 14177                           tblptru	equ	0xFF8
 14178                           tblptrh	equ	0xFF7
 14179                           tblptrl	equ	0xFF6
 14180                           tablat	equ	0xFF5
 14181                           prodh	equ	0xFF4
 14182                           prodl	equ	0xFF3
 14183                           postinc0	equ	0xFEE
 14184                           wreg	equ	0xFE8
 14185                           postdec1	equ	0xFE5
 14186                           fsr1h	equ	0xFE2
 14187                           fsr1l	equ	0xFE1
 14188                           indf2	equ	0xFDF
 14189                           postinc2	equ	0xFDE
 14190                           postdec2	equ	0xFDD
 14191                           fsr2h	equ	0xFDA
 14192                           fsr2l	equ	0xFD9
 14193                           status	equ	0xFD8
 14194                           
 14195 ;; *************** function _readEEPROM *****************
 14196 ;; Defined at:
 14197 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 14198 ;; Parameters:    Size  Location     Type
 14199 ;;  address         2   21[COMRAM] unsigned short 
 14200 ;; Auto vars:     Size  Location     Type
 14201 ;;  data            1   24[COMRAM] unsigned char 
 14202 ;; Return value:  Size  Location     Type
 14203 ;;                  1    wreg      unsigned char 
 14204 ;; Registers used:
 14205 ;;		wreg, status,2
 14206 ;; Tracked objects:
 14207 ;;		On entry : 0/0
 14208 ;;		On exit  : 0/0
 14209 ;;		Unchanged: 0/0
 14210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14211 ;;      Params:         2       0       0       0       0       0       0
 14212 ;;      Locals:         2       0       0       0       0       0       0
 14213 ;;      Temps:          0       0       0       0       0       0       0
 14214 ;;      Totals:         4       0       0       0       0       0       0
 14215 ;;Total ram usage:        4 bytes
 14216 ;; Hardware stack levels used:    1
 14217 ;; Hardware stack levels required when called:    2
 14218 ;; This function calls:
 14219 ;;		Nothing
 14220 ;; This function is called by:
 14221 ;;		_doWork
 14222 ;;		_doOneSecondWork
 14223 ;;		_sendTempEvent
 14224 ;;		_getCalibrationValue
 14225 ;;		_writeCoeffs2Ram
 14226 ;;		_handle_sync
 14227 ;;		_vscp_readAppReg
 14228 ;;		_vscp_writeAppReg
 14229 ;;		_vscp_getGUID
 14230 ;;		_vscp_getUserID
 14231 ;;		_vscp_getManufacturerId
 14232 ;;		_vscp_getZone
 14233 ;;		_vscp_getSubzone
 14234 ;;		_vscp_readNicknamePermanent
 14235 ;;		_vscp_getSegmentCRC
 14236 ;; This function uses a non-reentrant model
 14237 ;;
 14238                           
 14239                           	psect	text63
 14240  005C1E                     __ptext63:
 14241                           	opt stack 0
 14242  005C1E                     _readEEPROM:
 14243                           	opt stack 26
 14244                           
 14245                           ;eeprom.c: 95: uint8_t data;
 14246                           ;eeprom.c: 100: EEADR = address & 0xff;
 14247                           
 14248                           ;incstack = 0
 14249                           ;incstack = 0
 14250  005C1E  C016  FFA9         	movff	readEEPROM@address,4009	;volatile
 14251                           
 14252                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 14253  005C22  9EA6               	bcf	4006,7,c	;volatile
 14254                           
 14255                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 14256  005C24  9CA6               	bcf	4006,6,c	;volatile
 14257                           
 14258                           ;eeprom.c: 103: EECON1bits.RD = 1;
 14259  005C26  80A6               	bsf	4006,0,c	;volatile
 14260  005C28  F000               	nop		;# 
 14261                           
 14262                           ;eeprom.c: 105: data = EEDATA;
 14263  005C2A  CFA8 F019          	movff	4008,readEEPROM@data	;volatile
 14264                           
 14265                           ;eeprom.c: 107: return data;
 14266  005C2E  5019               	movf	readEEPROM@data,w,c
 14267  005C30  0012               	return	
 14268  005C32                     __end_of_readEEPROM:
 14269                           	opt stack 0
 14270                           tblptru	equ	0xFF8
 14271                           tblptrh	equ	0xFF7
 14272                           tblptrl	equ	0xFF6
 14273                           tablat	equ	0xFF5
 14274                           prodh	equ	0xFF4
 14275                           prodl	equ	0xFF3
 14276                           postinc0	equ	0xFEE
 14277                           wreg	equ	0xFE8
 14278                           postdec1	equ	0xFE5
 14279                           fsr1h	equ	0xFE2
 14280                           fsr1l	equ	0xFE1
 14281                           indf2	equ	0xFDF
 14282                           postinc2	equ	0xFDE
 14283                           postdec2	equ	0xFDD
 14284                           fsr2h	equ	0xFDA
 14285                           fsr2l	equ	0xFD9
 14286                           status	equ	0xFD8
 14287                           
 14288 ;; *************** function _vscp_handleSetNickname *****************
 14289 ;; Defined at:
 14290 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;		None
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;		None
 14295 ;; Return value:  Size  Location     Type
 14296 ;;		None               void
 14297 ;; Registers used:
 14298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14299 ;; Tracked objects:
 14300 ;;		On entry : F/1
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14304 ;;      Params:         0       0       0       0       0       0       0
 14305 ;;      Locals:         0       0       0       0       0       0       0
 14306 ;;      Temps:          0       0       0       0       0       0       0
 14307 ;;      Totals:         0       0       0       0       0       0       0
 14308 ;;Total ram usage:        0 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    4
 14311 ;; This function calls:
 14312 ;;		_vscp_writeNicknamePermanent
 14313 ;;		_vscp_setSegmentCRC
 14314 ;; This function is called by:
 14315 ;;		_vscp_handleProtocolEvent
 14316 ;; This function uses a non-reentrant model
 14317 ;;
 14318                           
 14319                           	psect	text64
 14320  0059A0                     __ptext64:
 14321                           	opt stack 0
 14322  0059A0                     _vscp_handleSetNickname:
 14323                           	opt stack 25
 14324                           
 14325                           ; BSR set to: 1
 14326                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14327                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14328                           
 14329                           ;incstack = 0
 14330                           ;incstack = 0
 14331  0059A0  5164               	movf	_vscp_imsg& (0+255),w,b
 14332  0059A2  0B0F               	andlw	15
 14333  0059A4  0A02               	xorlw	2
 14334  0059A6  E110               	bnz	l1080
 14335                           
 14336                           ; BSR set to: 1
 14337  0059A8  0100               	movlb	0	; () banked
 14338  0059AA  51C9               	movf	_vscp_nickname& (0+255),w,b
 14339  0059AC  0101               	movlb	1	; () banked
 14340  0059AE  EE21  F06A         	lfsr	2,_vscp_imsg+6
 14341  0059B2  62DF               	cpfseq	indf2,c
 14342  0059B4  D009               	goto	l1080
 14343                           
 14344                           ; BSR set to: 1
 14345                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14346  0059B6  C16B  F0C9         	movff	_vscp_imsg+7,_vscp_nickname
 14347                           
 14348                           ; BSR set to: 1
 14349                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14350  0059BA  0100               	movlb	0	; () banked
 14351  0059BC  51C9               	movf	_vscp_nickname& (0+255),w,b
 14352  0059BE  EC2B  F02E         	call	_vscp_writeNicknamePermanent
 14353                           
 14354                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14355  0059C2  0E40               	movlw	64
 14356  0059C4  EC22  F02E         	call	_vscp_setSegmentCRC
 14357  0059C8                     l1080:
 14358  0059C8  0012               	return	
 14359  0059CA                     __end_of_vscp_handleSetNickname:
 14360                           	opt stack 0
 14361                           tblptru	equ	0xFF8
 14362                           tblptrh	equ	0xFF7
 14363                           tblptrl	equ	0xFF6
 14364                           tablat	equ	0xFF5
 14365                           prodh	equ	0xFF4
 14366                           prodl	equ	0xFF3
 14367                           postinc0	equ	0xFEE
 14368                           wreg	equ	0xFE8
 14369                           postdec1	equ	0xFE5
 14370                           fsr1h	equ	0xFE2
 14371                           fsr1l	equ	0xFE1
 14372                           indf2	equ	0xFDF
 14373                           postinc2	equ	0xFDE
 14374                           postdec2	equ	0xFDD
 14375                           fsr2h	equ	0xFDA
 14376                           fsr2l	equ	0xFD9
 14377                           status	equ	0xFD8
 14378                           
 14379 ;; *************** function _vscp_handleHeartbeat *****************
 14380 ;; Defined at:
 14381 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14382 ;; Parameters:    Size  Location     Type
 14383 ;;		None
 14384 ;; Auto vars:     Size  Location     Type
 14385 ;;		None
 14386 ;; Return value:  Size  Location     Type
 14387 ;;		None               void
 14388 ;; Registers used:
 14389 ;;		wreg, status,2, status,0, cstack
 14390 ;; Tracked objects:
 14391 ;;		On entry : F/1
 14392 ;;		On exit  : 0/0
 14393 ;;		Unchanged: 0/0
 14394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14395 ;;      Params:         0       0       0       0       0       0       0
 14396 ;;      Locals:         0       0       0       0       0       0       0
 14397 ;;      Temps:          0       0       0       0       0       0       0
 14398 ;;      Totals:         0       0       0       0       0       0       0
 14399 ;;Total ram usage:        0 bytes
 14400 ;; Hardware stack levels used:    1
 14401 ;; Hardware stack levels required when called:    4
 14402 ;; This function calls:
 14403 ;;		_vscp_writeNicknamePermanent
 14404 ;;		_vscp_getSegmentCRC
 14405 ;;		_vscp_setSegmentCRC
 14406 ;; This function is called by:
 14407 ;;		_vscp_handleProtocolEvent
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           	psect	text65
 14412  005780                     __ptext65:
 14413                           	opt stack 0
 14414  005780                     _vscp_handleHeartbeat:
 14415                           	opt stack 25
 14416                           
 14417                           ; BSR set to: 1
 14418                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14419                           
 14420                           ;incstack = 0
 14421                           ;incstack = 0
 14422  005780  EC5F  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14423  005784  0900               	iorlw	0
 14424  005786  E116               	bnz	l11065
 14425                           
 14426                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14427                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14428  005788  0101               	movlb	1	; () banked
 14429  00578A  5164               	movf	_vscp_imsg& (0+255),w,b
 14430  00578C  0B0F               	andlw	15
 14431  00578E  0A05               	xorlw	5
 14432  005790  E115               	bnz	l1076
 14433                           
 14434                           ; BSR set to: 1
 14435  005792  EC5F  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14436  005796  0101               	movlb	1	; () banked
 14437  005798  196A               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14438  00579A  E010               	bz	l1076
 14439                           
 14440                           ; BSR set to: 1
 14441                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14442  00579C  516A               	movf	(_vscp_imsg+6)& (0+255),w,b
 14443  00579E  EC22  F02E         	call	_vscp_setSegmentCRC
 14444                           
 14445                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14446  0057A2  0100               	movlb	0	; () banked
 14447  0057A4  69C9               	setf	_vscp_nickname& (0+255),b
 14448                           
 14449                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14450  0057A6  0EFF               	movlw	255
 14451  0057A8  EC2B  F02E         	call	_vscp_writeNicknamePermanent
 14452                           
 14453                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14454  0057AC  0E01               	movlw	1
 14455  0057AE  0100               	movlb	0	; () banked
 14456  0057B0  6FCA               	movwf	_vscp_node_state& (0+255),b
 14457  0057B2  D004               	goto	l1076
 14458  0057B4                     l11065:
 14459                           
 14460                           ;vscp_firmware.c: 411: else {
 14461                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14462  0057B4  0101               	movlb	1	; () banked
 14463  0057B6  516A               	movf	(_vscp_imsg+6)& (0+255),w,b
 14464  0057B8  EC22  F02E         	call	_vscp_setSegmentCRC
 14465  0057BC                     l1076:
 14466  0057BC  0012               	return	
 14467  0057BE                     __end_of_vscp_handleHeartbeat:
 14468                           	opt stack 0
 14469                           tblptru	equ	0xFF8
 14470                           tblptrh	equ	0xFF7
 14471                           tblptrl	equ	0xFF6
 14472                           tablat	equ	0xFF5
 14473                           prodh	equ	0xFF4
 14474                           prodl	equ	0xFF3
 14475                           postinc0	equ	0xFEE
 14476                           wreg	equ	0xFE8
 14477                           postdec1	equ	0xFE5
 14478                           fsr1h	equ	0xFE2
 14479                           fsr1l	equ	0xFE1
 14480                           indf2	equ	0xFDF
 14481                           postinc2	equ	0xFDE
 14482                           postdec2	equ	0xFDD
 14483                           fsr2h	equ	0xFDA
 14484                           fsr2l	equ	0xFD9
 14485                           status	equ	0xFD8
 14486                           
 14487 ;; *************** function _vscp_goBootloaderMode *****************
 14488 ;; Defined at:
 14489 ;;		line 2742 in file "../main.c"
 14490 ;; Parameters:    Size  Location     Type
 14491 ;;  algorithm       1    wreg     unsigned char 
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;  algorithm       1   16[COMRAM] unsigned char 
 14494 ;; Return value:  Size  Location     Type
 14495 ;;		None               void
 14496 ;; Registers used:
 14497 ;;		wreg, status,2, status,0, cstack
 14498 ;; Tracked objects:
 14499 ;;		On entry : F/1
 14500 ;;		On exit  : 0/0
 14501 ;;		Unchanged: 0/0
 14502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14503 ;;      Params:         0       0       0       0       0       0       0
 14504 ;;      Locals:         1       0       0       0       0       0       0
 14505 ;;      Temps:          0       0       0       0       0       0       0
 14506 ;;      Totals:         1       0       0       0       0       0       0
 14507 ;;Total ram usage:        1 bytes
 14508 ;; Hardware stack levels used:    1
 14509 ;; Hardware stack levels required when called:    3
 14510 ;; This function calls:
 14511 ;;		_writeEEPROM
 14512 ;;		_ECANSetOperationMode
 14513 ;; This function is called by:
 14514 ;;		_vscp_handleProtocolEvent
 14515 ;; This function uses a non-reentrant model
 14516 ;;
 14517                           
 14518                           	psect	text66
 14519  005AF4                     __ptext66:
 14520                           	opt stack 0
 14521  005AF4                     _vscp_goBootloaderMode:
 14522                           	opt stack 26
 14523                           
 14524                           ;incstack = 0
 14525                           ;incstack = 0
 14526                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14527  005AF4  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14528                           
 14529                           ; BSR set to: 1
 14530                           ;main.c: 2743: if ( 0x01 != algorithm ) return;
 14531  005AF8  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14532  005AFA  E10A               	bnz	l591
 14533                           
 14534                           ; BSR set to: 1
 14535                           ;main.c: 2747: writeEEPROM(0x00, 0xff);
 14536  005AFC  6A0F               	clrf	?_writeEEPROM+1,c
 14537  005AFE  6A0E               	clrf	?_writeEEPROM,c
 14538  005B00  0EFF               	movlw	255
 14539  005B02  6810               	setf	?_writeEEPROM+2,c
 14540  005B04  EC21  F02D         	call	_writeEEPROM	;wreg free
 14541                           
 14542                           ;main.c: 2750: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 14543  005B08  0E80               	movlw	128
 14544  005B0A  ECE5  F02D         	call	_ECANSetOperationMode
 14545  005B0E  00FF               	reset		;# 
 14546  005B10                     l591:
 14547  005B10  0012               	return	
 14548  005B12                     __end_of_vscp_goBootloaderMode:
 14549                           	opt stack 0
 14550                           tblptru	equ	0xFF8
 14551                           tblptrh	equ	0xFF7
 14552                           tblptrl	equ	0xFF6
 14553                           tablat	equ	0xFF5
 14554                           prodh	equ	0xFF4
 14555                           prodl	equ	0xFF3
 14556                           postinc0	equ	0xFEE
 14557                           wreg	equ	0xFE8
 14558                           postdec1	equ	0xFE5
 14559                           fsr1h	equ	0xFE2
 14560                           fsr1l	equ	0xFE1
 14561                           indf2	equ	0xFDF
 14562                           postinc2	equ	0xFDE
 14563                           postdec2	equ	0xFDD
 14564                           fsr2h	equ	0xFDA
 14565                           fsr2l	equ	0xFD9
 14566                           status	equ	0xFD8
 14567                           
 14568 ;; *************** function _vscp_getMatrixInfo *****************
 14569 ;; Defined at:
 14570 ;;		line 2677 in file "../main.c"
 14571 ;; Parameters:    Size  Location     Type
 14572 ;;  pData           1    wreg     PTR unsigned char 
 14573 ;;		 -> vscp_omsg(13), 
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14576 ;;		 -> vscp_omsg(13), 
 14577 ;;  i               1   14[COMRAM] unsigned char 
 14578 ;; Return value:  Size  Location     Type
 14579 ;;		None               void
 14580 ;; Registers used:
 14581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14582 ;; Tracked objects:
 14583 ;;		On entry : F/0
 14584 ;;		On exit  : F/0
 14585 ;;		Unchanged: F/0
 14586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14587 ;;      Params:         0       0       0       0       0       0       0
 14588 ;;      Locals:         2       0       0       0       0       0       0
 14589 ;;      Temps:          0       0       0       0       0       0       0
 14590 ;;      Totals:         2       0       0       0       0       0       0
 14591 ;;Total ram usage:        2 bytes
 14592 ;; Hardware stack levels used:    1
 14593 ;; Hardware stack levels required when called:    2
 14594 ;; This function calls:
 14595 ;;		Nothing
 14596 ;; This function is called by:
 14597 ;;		_vscp_handleProtocolEvent
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           	psect	text67
 14602  005B68                     __ptext67:
 14603                           	opt stack 0
 14604  005B68                     _vscp_getMatrixInfo:
 14605                           	opt stack 27
 14606                           
 14607                           ;incstack = 0
 14608                           ;incstack = 0
 14609                           ;vscp_getMatrixInfo@pData stored from wreg
 14610  005B68  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;main.c: 2678: uint8_t i;
 14614                           ;main.c: 2682: for (i = 0; i < 8; i++) {
 14615  005B6C  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14616  005B6E                     l8013:
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;main.c: 2683: pData[ i ] = 0;
 14620  005B6E  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14621  005B70  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14622  005B72  6ED9               	movwf	fsr2l,c
 14623  005B74  6ADA               	clrf	fsr2h,c
 14624  005B76  6ADF               	clrf	indf2,c
 14625                           
 14626                           ; BSR set to: 0
 14627  005B78  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14628                           
 14629                           ; BSR set to: 0
 14630  005B7A  0E07               	movlw	7
 14631  005B7C  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14632  005B7E  D7F7               	goto	l8013
 14633                           
 14634                           ; BSR set to: 0
 14635  005B80  0C07               	retlw	7
 14636  005B82                     __end_of_vscp_getMatrixInfo:
 14637                           	opt stack 0
 14638                           tblptru	equ	0xFF8
 14639                           tblptrh	equ	0xFF7
 14640                           tblptrl	equ	0xFF6
 14641                           tablat	equ	0xFF5
 14642                           prodh	equ	0xFF4
 14643                           prodl	equ	0xFF3
 14644                           postinc0	equ	0xFEE
 14645                           wreg	equ	0xFE8
 14646                           postdec1	equ	0xFE5
 14647                           fsr1h	equ	0xFE2
 14648                           fsr1l	equ	0xFE1
 14649                           indf2	equ	0xFDF
 14650                           postinc2	equ	0xFDE
 14651                           postdec2	equ	0xFDD
 14652                           fsr2h	equ	0xFDA
 14653                           fsr2l	equ	0xFD9
 14654                           status	equ	0xFD8
 14655                           
 14656 ;; *************** function _vscp_handleProbeState *****************
 14657 ;; Defined at:
 14658 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;		None
 14661 ;; Auto vars:     Size  Location     Type
 14662 ;;		None
 14663 ;; Return value:  Size  Location     Type
 14664 ;;		None               void
 14665 ;; Registers used:
 14666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14667 ;; Tracked objects:
 14668 ;;		On entry : 0/0
 14669 ;;		On exit  : F/1
 14670 ;;		Unchanged: 0/0
 14671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14672 ;;      Params:         0       0       0       0       0       0       0
 14673 ;;      Locals:         0       0       0       0       0       0       0
 14674 ;;      Temps:          0       0       0       0       0       0       0
 14675 ;;      Totals:         0       0       0       0       0       0       0
 14676 ;;Total ram usage:        0 bytes
 14677 ;; Hardware stack levels used:    1
 14678 ;; Hardware stack levels required when called:    8
 14679 ;; This function calls:
 14680 ;;		_vscp_goActiveState
 14681 ;;		_vscp_sendEvent
 14682 ;;		_vscp_writeNicknamePermanent
 14683 ;;		_vscp_setSegmentCRC
 14684 ;; This function is called by:
 14685 ;;		_main
 14686 ;; This function uses a non-reentrant model
 14687 ;;
 14688                           
 14689                           	psect	text68
 14690  0048D2                     __ptext68:
 14691                           	opt stack 0
 14692  0048D2                     _vscp_handleProbeState:
 14693                           	opt stack 22
 14694                           
 14695                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;incstack = 0
 14699                           ;incstack = 0
 14700  0048D2  D057               	goto	l9589
 14701  0048D4                     l9519:
 14702                           
 14703                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 14704  0048D4  284F               	incf	_vscp_probe_address,w,c
 14705  0048D6  E011               	bz	l9535
 14706                           
 14707                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 14708  0048D8  0E81               	movlw	129
 14709  0048DA  0100               	movlb	0	; () banked
 14710  0048DC  6FCB               	movwf	_vscp_omsg& (0+255),b
 14711                           
 14712                           ; BSR set to: 0
 14713                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 14714  0048DE  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14715                           
 14716                           ; BSR set to: 0
 14717                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 14718  0048E0  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14719  0048E2  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14720                           
 14721                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 14722  0048E4  0E02               	movlw	2
 14723  0048E6  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14727  0048E8  C04F  F0D0         	movff	_vscp_probe_address,_vscp_omsg+5
 14728                           
 14729                           ; BSR set to: 0
 14730                           ;vscp_firmware.c: 216: vscp_sendEvent();
 14731  0048EC  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
 14732                           
 14733                           ; BSR set to: 0
 14734                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 14735  0048F0  0E01               	movlw	1
 14736  0048F2  6E4E               	movwf	_vscp_node_substate,c
 14737  0048F4                     l9533:
 14738                           
 14739                           ; BSR set to: 0
 14740                           ;vscp_firmware.c: 219: vscp_timer = 0;
 14741  0048F4  6BC1               	clrf	_vscp_timer& (0+255),b	;volatile
 14742  0048F6  6BC2               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14743                           
 14744                           ;vscp_firmware.c: 221: }
 14745  0048F8  D04A               	goto	l1043
 14746  0048FA                     l9535:
 14747                           
 14748                           ;vscp_firmware.c: 222: else {
 14749                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 14750  0048FA  0E04               	movlw	4
 14751  0048FC  0100               	movlb	0	; () banked
 14752  0048FE  6FCA               	movwf	_vscp_node_state& (0+255),b
 14753                           
 14754                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 14755  004900  0E81               	movlw	129
 14756  004902  6FCB               	movwf	_vscp_omsg& (0+255),b
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 14760  004904  69D0               	setf	(_vscp_omsg+5)& (0+255),b
 14761                           
 14762                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 14763  004906  0E07               	movlw	7
 14764  004908  6FCC               	movwf	(_vscp_omsg+1)& (0+255),b
 14765                           
 14766                           ; BSR set to: 0
 14767                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 14768  00490A  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14769  00490C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14770                           
 14771                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 14772  00490E  0E03               	movlw	3
 14773  004910  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;vscp_firmware.c: 235: vscp_sendEvent();
 14777  004912  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
 14778  004916  D03B               	goto	l1043
 14779  004918                     l1044:
 14780                           
 14781                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 14782  004918  0101               	movlb	1	; () banked
 14783  00491A  AF64               	btfss	_vscp_imsg& (0+255),7,b
 14784  00491C  D010               	goto	l9559
 14785                           
 14786                           ; BSR set to: 1
 14787                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 14788                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 14789  00491E  5167               	movf	(_vscp_imsg+3)& (0+255),w,b
 14790  004920  1166               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14791  004922  E135               	bnz	l1043
 14792                           
 14793                           ; BSR set to: 1
 14794  004924  5168               	movf	(_vscp_imsg+4)& (0+255),w,b
 14795  004926  0A03               	xorlw	3
 14796  004928  E132               	bnz	l1043
 14797                           
 14798                           ; BSR set to: 1
 14799                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 14800  00492A  664F               	tstfsz	_vscp_probe_address,c
 14801  00492C  D004               	goto	l9553
 14802                           
 14803                           ; BSR set to: 1
 14804                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 14805  00492E  0E02               	movlw	2
 14806  004930  0100               	movlb	0	; () banked
 14807  004932  6FCA               	movwf	_vscp_node_state& (0+255),b
 14808  004934  D7DF               	goto	l9533
 14809  004936                     l9553:
 14810                           
 14811                           ; BSR set to: 1
 14812                           ;vscp_firmware.c: 257: else {
 14813                           ;vscp_firmware.c: 260: vscp_probe_address++;
 14814  004936  2A4F               	incf	_vscp_probe_address,f,c
 14815                           
 14816                           ; BSR set to: 1
 14817                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 14818  004938  6A4E               	clrf	_vscp_node_substate,c
 14819  00493A                     l9557:
 14820                           
 14821                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 14822  00493A  6A50               	clrf	_vscp_probe_cnt,c
 14823  00493C  D028               	goto	l1043
 14824  00493E                     l9559:
 14825                           
 14826                           ; BSR set to: 1
 14827                           ;vscp_firmware.c: 267: else {
 14828                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 14829  00493E  0EE9               	movlw	233
 14830  004940  0100               	movlb	0	; () banked
 14831  004942  5DC1               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14832  004944  0E03               	movlw	3
 14833  004946  59C2               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14834  004948  E322               	bnc	l1043
 14835                           
 14836                           ; BSR set to: 0
 14837                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 14838  00494A  2A50               	incf	_vscp_probe_cnt,f,c
 14839                           
 14840                           ; BSR set to: 0
 14841                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 14842  00494C  0E02               	movlw	2
 14843  00494E  6450               	cpfsgt	_vscp_probe_cnt,c
 14844  004950  D016               	goto	l1051
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 14848  004952  664F               	tstfsz	_vscp_probe_address,c
 14849  004954  D005               	goto	l1052
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;vscp_firmware.c: 279: vscp_probe_address++;
 14853  004956  2A4F               	incf	_vscp_probe_address,f,c
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 14857  004958  6A4E               	clrf	_vscp_node_substate,c
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;vscp_firmware.c: 281: vscp_timer = 0;
 14861  00495A  6BC1               	clrf	_vscp_timer& (0+255),b	;volatile
 14862  00495C  6BC2               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14863  00495E  D7ED               	goto	l9557
 14864  004960                     l1052:
 14865                           
 14866                           ; BSR set to: 0
 14867                           ;vscp_firmware.c: 285: else {
 14868                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 14869  004960  C04F  F0C9         	movff	_vscp_probe_address,_vscp_nickname
 14870                           
 14871                           ; BSR set to: 0
 14872                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 14873  004964  0E03               	movlw	3
 14874  004966  6FCA               	movwf	_vscp_node_state& (0+255),b
 14875                           
 14876                           ; BSR set to: 0
 14877                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 14878  004968  6A4E               	clrf	_vscp_node_substate,c
 14879                           
 14880                           ; BSR set to: 0
 14881                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 14882  00496A  51C9               	movf	_vscp_nickname& (0+255),w,b
 14883  00496C  EC2B  F02E         	call	_vscp_writeNicknamePermanent
 14884                           
 14885                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 14886  004970  0E40               	movlw	64
 14887  004972  EC22  F02E         	call	_vscp_setSegmentCRC
 14888                           
 14889                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 14890  004976  6A50               	clrf	_vscp_probe_cnt,c
 14891                           
 14892                           ;vscp_firmware.c: 296: vscp_goActiveState();
 14893  004978  EC89  F02D         	call	_vscp_goActiveState	;wreg free
 14894  00497C  D008               	goto	l1043
 14895  00497E                     l1051:
 14896                           
 14897                           ;vscp_firmware.c: 300: else {
 14898                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 14899  00497E  6A4E               	clrf	_vscp_node_substate,c
 14900  004980  D006               	goto	l1043
 14901  004982                     l9589:
 14902  004982  504E               	movf	_vscp_node_substate,w,c
 14903                           
 14904                           ; Switch size 1, requested type "speed"
 14905                           ; Number of cases is 3, Range of values is 0 to 2
 14906                           ; switch strategies available:
 14907                           ; Name         Instructions Cycles
 14908                           ; simple_byte           10     6 (average)
 14909                           ;	Chosen strategy is simple_byte
 14910  004984  E0A7               	bz	l9519
 14911  004986  0A01               	xorlw	1	; case 1
 14912  004988  E0C7               	bz	l1044
 14913  00498A  0A03               	xorlw	3	; case 2
 14914  00498C  E1F8               	bnz	l1051
 14915  00498E                     l1043:
 14916                           
 14917                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 14918  00498E  0101               	movlb	1	; () banked
 14919  004990  6B64               	clrf	_vscp_imsg& (0+255),b
 14920                           
 14921                           ; BSR set to: 1
 14922  004992  0012               	return	
 14923  004994                     __end_of_vscp_handleProbeState:
 14924                           	opt stack 0
 14925                           tblptru	equ	0xFF8
 14926                           tblptrh	equ	0xFF7
 14927                           tblptrl	equ	0xFF6
 14928                           tablat	equ	0xFF5
 14929                           prodh	equ	0xFF4
 14930                           prodl	equ	0xFF3
 14931                           postinc0	equ	0xFEE
 14932                           wreg	equ	0xFE8
 14933                           postdec1	equ	0xFE5
 14934                           fsr1h	equ	0xFE2
 14935                           fsr1l	equ	0xFE1
 14936                           indf2	equ	0xFDF
 14937                           postinc2	equ	0xFDE
 14938                           postdec2	equ	0xFDD
 14939                           fsr2h	equ	0xFDA
 14940                           fsr2l	equ	0xFD9
 14941                           status	equ	0xFD8
 14942                           
 14943 ;; *************** function _vscp_goActiveState *****************
 14944 ;; Defined at:
 14945 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;		None
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;		None
 14950 ;; Return value:  Size  Location     Type
 14951 ;;		None               void
 14952 ;; Registers used:
 14953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : F/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14959 ;;      Params:         0       0       0       0       0       0       0
 14960 ;;      Locals:         0       0       0       0       0       0       0
 14961 ;;      Temps:          0       0       0       0       0       0       0
 14962 ;;      Totals:         0       0       0       0       0       0       0
 14963 ;;Total ram usage:        0 bytes
 14964 ;; Hardware stack levels used:    1
 14965 ;; Hardware stack levels required when called:    7
 14966 ;; This function calls:
 14967 ;;		_vscp_sendEvent
 14968 ;; This function is called by:
 14969 ;;		_main
 14970 ;;		_vscp_handleProbeState
 14971 ;; This function uses a non-reentrant model
 14972 ;;
 14973                           
 14974                           	psect	text69
 14975  005B12                     __ptext69:
 14976                           	opt stack 0
 14977  005B12                     _vscp_goActiveState:
 14978                           	opt stack 22
 14979                           
 14980                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 14981                           
 14982                           ; BSR set to: 1
 14983                           ;incstack = 0
 14984                           ;incstack = 0
 14985  005B12  0E81               	movlw	129
 14986  005B14  0100               	movlb	0	; () banked
 14987  005B16  6FCB               	movwf	_vscp_omsg& (0+255),b
 14988                           
 14989                           ; BSR set to: 0
 14990                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 14991  005B18  6BCC               	clrf	(_vscp_omsg+1)& (0+255),b
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 14995  005B1A  6BCD               	clrf	(_vscp_omsg+2)& (0+255),b
 14996  005B1C  6BCE               	clrf	(_vscp_omsg+3)& (0+255),b
 14997                           
 14998                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 14999  005B1E  0E02               	movlw	2
 15000  005B20  6FCF               	movwf	(_vscp_omsg+4)& (0+255),b
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15004  005B22  C0C9  F0D0         	movff	_vscp_nickname,_vscp_omsg+5
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15008  005B26  ECE5  F02C         	call	_vscp_sendEvent	;wreg free
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15012  005B2A  0E01               	movlw	1
 15013  005B2C  6E4C               	movwf	_vscp_initledfunc,c
 15014                           
 15015                           ; BSR set to: 0
 15016  005B2E  0C01               	retlw	1
 15017  005B30                     __end_of_vscp_goActiveState:
 15018                           	opt stack 0
 15019                           tblptru	equ	0xFF8
 15020                           tblptrh	equ	0xFF7
 15021                           tblptrl	equ	0xFF6
 15022                           tablat	equ	0xFF5
 15023                           prodh	equ	0xFF4
 15024                           prodl	equ	0xFF3
 15025                           postinc0	equ	0xFEE
 15026                           wreg	equ	0xFE8
 15027                           postdec1	equ	0xFE5
 15028                           fsr1h	equ	0xFE2
 15029                           fsr1l	equ	0xFE1
 15030                           indf2	equ	0xFDF
 15031                           postinc2	equ	0xFDE
 15032                           postdec2	equ	0xFDD
 15033                           fsr2h	equ	0xFDA
 15034                           fsr2l	equ	0xFD9
 15035                           status	equ	0xFD8
 15036                           
 15037 ;; *************** function _vscp_sendEvent *****************
 15038 ;; Defined at:
 15039 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15040 ;; Parameters:    Size  Location     Type
 15041 ;;		None
 15042 ;; Auto vars:     Size  Location     Type
 15043 ;;  rv              1   66[COMRAM] unsigned char 
 15044 ;; Return value:  Size  Location     Type
 15045 ;;                  1    wreg      unsigned char 
 15046 ;; Registers used:
 15047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15048 ;; Tracked objects:
 15049 ;;		On entry : E/0
 15050 ;;		On exit  : F/0
 15051 ;;		Unchanged: 0/0
 15052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15053 ;;      Params:         0       0       0       0       0       0       0
 15054 ;;      Locals:         1       0       0       0       0       0       0
 15055 ;;      Temps:          0       0       0       0       0       0       0
 15056 ;;      Totals:         1       0       0       0       0       0       0
 15057 ;;Total ram usage:        1 bytes
 15058 ;; Hardware stack levels used:    1
 15059 ;; Hardware stack levels required when called:    6
 15060 ;; This function calls:
 15061 ;;		_sendVSCPFrame
 15062 ;; This function is called by:
 15063 ;;		_doOneSecondWork
 15064 ;;		_sendTempEvent
 15065 ;;		_vscp_handleProbeState
 15066 ;;		_vscp_goActiveState
 15067 ;;		_vscp_sendHeartBeat
 15068 ;;		_vscp_newNodeOnline
 15069 ;;		_vscp_handleProtocolEvent
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           	psect	text70
 15074  0059CA                     __ptext70:
 15075                           	opt stack 0
 15076  0059CA                     _vscp_sendEvent:
 15077                           	opt stack 22
 15078                           
 15079                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;incstack = 0
 15083                           ;incstack = 0
 15084  0059CA  C0CD  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15085  0059CE  C0CE  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15086  0059D2  C0CF  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15087  0059D6  C0C9  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15088  0059DA  C0CC  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15089  0059DE  0100               	movlb	0	; () banked
 15090  0059E0  51CB               	movf	_vscp_omsg& (0+255),w,b
 15091  0059E2  0B0F               	andlw	15
 15092  0059E4  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15093  0059E6  0ED0               	movlw	low (_vscp_omsg+5)
 15094  0059E8  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15095  0059EA  ECE8  F025         	call	_sendVSCPFrame	;wreg free
 15096  0059EE  6E43               	movwf	vscp_sendEvent@rv,c
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;vscp_firmware.c: 1298: }
 15100                           ;vscp_firmware.c: 1300: return rv;
 15101  0059F0  5043               	movf	vscp_sendEvent@rv,w,c
 15102                           
 15103                           ; BSR set to: 0
 15104  0059F2  0012               	return	
 15105  0059F4                     __end_of_vscp_sendEvent:
 15106                           	opt stack 0
 15107                           tblptru	equ	0xFF8
 15108                           tblptrh	equ	0xFF7
 15109                           tblptrl	equ	0xFF6
 15110                           tablat	equ	0xFF5
 15111                           prodh	equ	0xFF4
 15112                           prodl	equ	0xFF3
 15113                           postinc0	equ	0xFEE
 15114                           wreg	equ	0xFE8
 15115                           postdec1	equ	0xFE5
 15116                           fsr1h	equ	0xFE2
 15117                           fsr1l	equ	0xFE1
 15118                           indf2	equ	0xFDF
 15119                           postinc2	equ	0xFDE
 15120                           postdec2	equ	0xFDD
 15121                           fsr2h	equ	0xFDA
 15122                           fsr2l	equ	0xFD9
 15123                           status	equ	0xFD8
 15124                           
 15125 ;; *************** function _sendVSCPFrame *****************
 15126 ;; Defined at:
 15127 ;;		line 2850 in file "../main.c"
 15128 ;; Parameters:    Size  Location     Type
 15129 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15130 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15131 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15132 ;;  priority        1    4[BANK0 ] unsigned char 
 15133 ;;  size            1    5[BANK0 ] unsigned char 
 15134 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15135 ;;		 -> vscp_omsg(13), 
 15136 ;; Auto vars:     Size  Location     Type
 15137 ;;  id              4   27[BANK0 ] unsigned long 
 15138 ;; Return value:  Size  Location     Type
 15139 ;;                  1    wreg      unsigned char 
 15140 ;; Registers used:
 15141 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15142 ;; Tracked objects:
 15143 ;;		On entry : F/0
 15144 ;;		On exit  : F/0
 15145 ;;		Unchanged: 0/0
 15146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15147 ;;      Params:         0       7       0       0       0       0       0
 15148 ;;      Locals:         0       4       0       0       0       0       0
 15149 ;;      Temps:          0      20       0       0       0       0       0
 15150 ;;      Totals:         0      31       0       0       0       0       0
 15151 ;;Total ram usage:       31 bytes
 15152 ;; Hardware stack levels used:    1
 15153 ;; Hardware stack levels required when called:    5
 15154 ;; This function calls:
 15155 ;;		_sendCANFrame
 15156 ;; This function is called by:
 15157 ;;		_vscp_sendEvent
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161                           	psect	text71
 15162  004BD0                     __ptext71:
 15163                           	opt stack 0
 15164  004BD0                     _sendVSCPFrame:
 15165                           	opt stack 22
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;main.c: 2851: uint32_t id = ((uint32_t) priority << 26) |
 15169                           ;main.c: 2852: ((uint32_t) vscpclass << 16) |
 15170                           ;main.c: 2853: ((uint32_t) vscptype << 8) |
 15171                           ;main.c: 2854: nodeid;
 15172                           
 15173                           ; BSR set to: 0
 15174                           ;incstack = 0
 15175                           ;incstack = 0
 15176  004BD0  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15177  004BD4  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15178  004BD6  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15179  004BD8  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15180  004BDA  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15181  004BDE  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15182  004BE2  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15183  004BE6  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15184  004BE8  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15185  004BEA  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15186  004BEC  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15187  004BEE  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15188  004BF0  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15189  004BF2  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15190  004BF4  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15191  004BF8  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15192  004BFC  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15193  004BFE  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15194  004C00  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15195  004C04  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15196  004C06  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15197  004C08  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15198  004C0A  0E1A               	movlw	26
 15199  004C0C                     u8945:
 15200  004C0C  90D8               	bcf	status,0,c
 15201  004C0E  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15202  004C10  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15203  004C12  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15204  004C14  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15205  004C16  2EE8               	decfsz	wreg,f,c
 15206  004C18  D7F9               	goto	u8945
 15207  004C1A  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15208  004C1C  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15209  004C1E  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15210  004C20  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15211  004C22  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15212  004C24  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15213  004C26  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15214  004C28  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15215  004C2A  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15216  004C2C  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15217  004C2E  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15218  004C30  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15219  004C32  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15220  004C34  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15221  004C36  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15222  004C38  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15223  004C3A  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15224  004C3C  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15225  004C3E  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15226  004C40  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15227  004C42  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15228  004C44  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15229  004C46  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15230  004C48  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15231  004C4A  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15232  004C4C  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15233  004C4E  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15234  004C50  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15235  004C52  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15236  004C54  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15237  004C56  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15238  004C58  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15239  004C5A  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;main.c: 2858: vscp_errorcnt++;
 15243  004C5C  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15244  004C60  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15245  004C64  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15246  004C68  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15247  004C6C  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15248  004C70  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15249  004C74  EC36  F02B         	call	_sendCANFrame	;wreg free
 15250  004C78  0900               	iorlw	0
 15251                           
 15252                           ; BSR set to: 0
 15253                           ;main.c: 2859: return 0;
 15254  004C7A  0E00               	movlw	0
 15255  004C7C  A4D8               	btfss	status,2,c
 15256                           
 15257                           ; BSR set to: 0
 15258                           ;main.c: 2860: }
 15259                           ;main.c: 2862: return 1;
 15260  004C7E  0E01               	movlw	1
 15261                           
 15262                           ; BSR set to: 0
 15263  004C80  0012               	return	
 15264  004C82                     __end_of_sendVSCPFrame:
 15265                           	opt stack 0
 15266                           tblptru	equ	0xFF8
 15267                           tblptrh	equ	0xFF7
 15268                           tblptrl	equ	0xFF6
 15269                           tablat	equ	0xFF5
 15270                           prodh	equ	0xFF4
 15271                           prodl	equ	0xFF3
 15272                           postinc0	equ	0xFEE
 15273                           wreg	equ	0xFE8
 15274                           postdec1	equ	0xFE5
 15275                           fsr1h	equ	0xFE2
 15276                           fsr1l	equ	0xFE1
 15277                           indf2	equ	0xFDF
 15278                           postinc2	equ	0xFDE
 15279                           postdec2	equ	0xFDD
 15280                           fsr2h	equ	0xFDA
 15281                           fsr2l	equ	0xFD9
 15282                           status	equ	0xFD8
 15283                           
 15284 ;; *************** function _sendCANFrame *****************
 15285 ;; Defined at:
 15286 ;;		line 2897 in file "../main.c"
 15287 ;; Parameters:    Size  Location     Type
 15288 ;;  id              4   59[COMRAM] unsigned long 
 15289 ;;  dlc             1   63[COMRAM] unsigned char 
 15290 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15291 ;;		 -> vscp_omsg(13), 
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;  rv              1   65[COMRAM] unsigned char 
 15294 ;; Return value:  Size  Location     Type
 15295 ;;                  1    wreg      unsigned char 
 15296 ;; Registers used:
 15297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15298 ;; Tracked objects:
 15299 ;;		On entry : F/0
 15300 ;;		On exit  : F/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15303 ;;      Params:         6       0       0       0       0       0       0
 15304 ;;      Locals:         1       0       0       0       0       0       0
 15305 ;;      Temps:          0       0       0       0       0       0       0
 15306 ;;      Totals:         7       0       0       0       0       0       0
 15307 ;;Total ram usage:        7 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    4
 15310 ;; This function calls:
 15311 ;;		_ECANSendMessage
 15312 ;; This function is called by:
 15313 ;;		_sendVSCPFrame
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           	psect	text72
 15318  00566C                     __ptext72:
 15319                           	opt stack 0
 15320  00566C                     _sendCANFrame:
 15321                           	opt stack 22
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;main.c: 2898: uint8_t rv = 0;
 15325                           
 15326                           ; BSR set to: 0
 15327                           ;incstack = 0
 15328                           ;incstack = 0
 15329  00566C  6A42               	clrf	sendCANFrame@rv,c
 15330                           
 15331                           ;main.c: 2900: sendTimer = 0;
 15332  00566E  0101               	movlb	1	; () banked
 15333  005670  6B1A               	clrf	_sendTimer& (0+255),b	;volatile
 15334  005672  6B1B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 15335                           
 15336                           ;main.c: 2901: while ( sendTimer < 1000 ) {
 15337  005674  D015               	goto	l10937
 15338  005676                     l10933:
 15339                           
 15340                           ; BSR set to: 1
 15341                           ;main.c: 2902: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15342  005676  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15343  00567A  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15344  00567E  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15345  005682  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15346  005686  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15347  00568A  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15348  00568E  0E20               	movlw	32
 15349  005690  6E1E               	movwf	?_ECANSendMessage+6,c
 15350  005692  EC1C  F01F         	call	_ECANSendMessage	;wreg free
 15351  005696  0900               	iorlw	0
 15352  005698  E003               	bz	l10937
 15353                           
 15354                           ;main.c: 2903: rv = 1;
 15355  00569A  0E01               	movlw	1
 15356  00569C  6E42               	movwf	sendCANFrame@rv,c
 15357                           
 15358                           ;main.c: 2904: break;
 15359  00569E  D006               	goto	l632
 15360  0056A0                     l10937:
 15361  0056A0  0EE8               	movlw	232
 15362  0056A2  0101               	movlb	1	; () banked
 15363  0056A4  5D1A               	subwf	_sendTimer& (0+255),w,b	;volatile
 15364  0056A6  0E03               	movlw	3
 15365  0056A8  591B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 15366  0056AA  E3E5               	bnc	l10933
 15367  0056AC                     l632:
 15368                           
 15369                           ;main.c: 2905: }
 15370                           ;main.c: 2906: }
 15371                           ;main.c: 2908: vscp_omsg.flags = 0;
 15372  0056AC  0100               	movlb	0	; () banked
 15373  0056AE  6BCB               	clrf	_vscp_omsg& (0+255),b
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;main.c: 2910: return rv;
 15377  0056B0  5042               	movf	sendCANFrame@rv,w,c
 15378                           
 15379                           ; BSR set to: 0
 15380  0056B2  0012               	return	
 15381  0056B4                     __end_of_sendCANFrame:
 15382                           	opt stack 0
 15383                           tblptru	equ	0xFF8
 15384                           tblptrh	equ	0xFF7
 15385                           tblptrl	equ	0xFF6
 15386                           tablat	equ	0xFF5
 15387                           prodh	equ	0xFF4
 15388                           prodl	equ	0xFF3
 15389                           postinc0	equ	0xFEE
 15390                           wreg	equ	0xFE8
 15391                           postdec1	equ	0xFE5
 15392                           fsr1h	equ	0xFE2
 15393                           fsr1l	equ	0xFE1
 15394                           indf2	equ	0xFDF
 15395                           postinc2	equ	0xFDE
 15396                           postdec2	equ	0xFDD
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401 ;; *************** function _ECANSendMessage *****************
 15402 ;; Defined at:
 15403 ;;		line 617 in file "../ECAN.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;  id              4   23[COMRAM] unsigned long 
 15406 ;;  data            1   27[COMRAM] PTR unsigned char 
 15407 ;;		 -> vscp_omsg(13), 
 15408 ;;  dataLen         1   28[COMRAM] unsigned char 
 15409 ;;  msgFlags        1   29[COMRAM] enum E16306
 15410 ;; Auto vars:     Size  Location     Type
 15411 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15412 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15413 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15414 ;;		 -> B0CON(1), 
 15415 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15416 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15417 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15418 ;;		 -> B0CON(1), 
 15419 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15420 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15421 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15422 ;;		 -> B0CON(1), 
 15423 ;;  i               1   56[COMRAM] unsigned char 
 15424 ;;  temp            1   55[COMRAM] unsigned char 
 15425 ;;  tempBSEL0       1   52[COMRAM] struct .
 15426 ;;  j               1   51[COMRAM] unsigned char 
 15427 ;;  buffers         1   50[COMRAM] unsigned char 
 15428 ;;  mode            1   49[COMRAM] unsigned char 
 15429 ;; Return value:  Size  Location     Type
 15430 ;;                  1    wreg      enum E15660
 15431 ;; Registers used:
 15432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15433 ;; Tracked objects:
 15434 ;;		On entry : E/1
 15435 ;;		On exit  : 3/1
 15436 ;;		Unchanged: 0/0
 15437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15438 ;;      Params:         7       0       0       0       0       0       0
 15439 ;;      Locals:        28       0       0       0       0       0       0
 15440 ;;      Temps:          1       0       0       0       0       0       0
 15441 ;;      Totals:        36       0       0       0       0       0       0
 15442 ;;Total ram usage:       36 bytes
 15443 ;; Hardware stack levels used:    1
 15444 ;; Hardware stack levels required when called:    3
 15445 ;; This function calls:
 15446 ;;		__CANIDToRegs
 15447 ;; This function is called by:
 15448 ;;		_sendCANFrame
 15449 ;; This function uses a non-reentrant model
 15450 ;;
 15451                           
 15452                           	psect	text73
 15453  003E38                     __ptext73:
 15454                           	opt stack 0
 15455  003E38                     _ECANSendMessage:
 15456                           	opt stack 22
 15457                           
 15458                           ;ECAN.c: 619: BYTE mode;
 15459                           ;ECAN.c: 620: BYTE buffers;
 15460                           ;ECAN.c: 628: BYTE i,j;
 15461                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15462                           ;ECAN.c: 630: BYTE* pb[9];
 15463                           ;ECAN.c: 631: BYTE temp;
 15464                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15465                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;incstack = 0
 15469                           ;incstack = 0
 15470  003E38  0E0F               	movlw	15	;volatile
 15471  003E3A  6E21               	movwf	ECANSendMessage@pb+1,c
 15472  003E3C  0E40               	movlw	64	;volatile
 15473  003E3E  6E20               	movwf	ECANSendMessage@pb,c
 15474                           
 15475                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15476  003E40  0E0F               	movlw	15	;volatile
 15477  003E42  6E23               	movwf	ECANSendMessage@pb+3,c
 15478  003E44  0E30               	movlw	48	;volatile
 15479  003E46  6E22               	movwf	ECANSendMessage@pb+2,c
 15480                           
 15481                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15482  003E48  0E0F               	movlw	15	;volatile
 15483  003E4A  6E25               	movwf	ECANSendMessage@pb+5,c
 15484  003E4C  0E20               	movlw	32	;volatile
 15485  003E4E  6E24               	movwf	ECANSendMessage@pb+4,c
 15486                           
 15487                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15488  003E50  0E0E               	movlw	14	;volatile
 15489  003E52  6E27               	movwf	ECANSendMessage@pb+7,c
 15490  003E54  0E20               	movlw	32	;volatile
 15491  003E56  6E26               	movwf	ECANSendMessage@pb+6,c
 15492                           
 15493                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15494  003E58  0E0E               	movlw	14	;volatile
 15495  003E5A  6E29               	movwf	ECANSendMessage@pb+9,c
 15496  003E5C  0E30               	movlw	48	;volatile
 15497  003E5E  6E28               	movwf	ECANSendMessage@pb+8,c
 15498                           
 15499                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15500  003E60  0E0E               	movlw	14	;volatile
 15501  003E62  6E2B               	movwf	ECANSendMessage@pb+11,c
 15502  003E64  0E40               	movlw	64	;volatile
 15503  003E66  6E2A               	movwf	ECANSendMessage@pb+10,c
 15504                           
 15505                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15506  003E68  0E0E               	movlw	14	;volatile
 15507  003E6A  6E2D               	movwf	ECANSendMessage@pb+13,c
 15508  003E6C  0E50               	movlw	80	;volatile
 15509  003E6E  6E2C               	movwf	ECANSendMessage@pb+12,c
 15510                           
 15511                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15512  003E70  0E0E               	movlw	14	;volatile
 15513  003E72  6E2F               	movwf	ECANSendMessage@pb+15,c
 15514  003E74  0E60               	movlw	96	;volatile
 15515  003E76  6E2E               	movwf	ECANSendMessage@pb+14,c
 15516                           
 15517                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15518  003E78  0E0E               	movlw	14	;volatile
 15519  003E7A  6E31               	movwf	ECANSendMessage@pb+17,c
 15520  003E7C  0E70               	movlw	112	;volatile
 15521  003E7E  6E30               	movwf	ECANSendMessage@pb+16,c
 15522                           
 15523                           ; BSR set to: 14
 15524                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15525  003E80  5077               	movf	3959,w,c	;volatile
 15526  003E82  0BC0               	andlw	192
 15527  003E84  6E32               	movwf	ECANSendMessage@mode,c
 15528                           
 15529                           ; BSR set to: 14
 15530                           ;ECAN.c: 660: if ( mode == 0x00 )
 15531  003E86  6632               	tstfsz	ECANSendMessage@mode,c
 15532  003E88  D002               	goto	l10951
 15533                           
 15534                           ; BSR set to: 14
 15535                           ;ECAN.c: 661: buffers = 2;
 15536  003E8A  0E02               	movlw	2
 15537  003E8C  D001               	goto	L33
 15538  003E8E                     l10951:
 15539                           
 15540                           ; BSR set to: 14
 15541                           ;ECAN.c: 662: else
 15542                           ;ECAN.c: 663: buffers = 8;
 15543  003E8E  0E08               	movlw	8
 15544  003E90                     L33:
 15545  003E90  6E33               	movwf	ECANSendMessage@buffers,c
 15546                           
 15547                           ; BSR set to: 14
 15548                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15549  003E92  010D               	movlb	13	; () banked
 15550  003E94  90D8               	bcf	status,0,c
 15551  003E96  31F8               	rrcf	248,w,b	;volatile
 15552  003E98  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15553                           
 15554                           ; BSR set to: 13
 15555                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15556  003E9A  6A39               	clrf	ECANSendMessage@i,c
 15557  003E9C  D07B               	goto	l11011
 15558  003E9E                     l10957:
 15559                           
 15560                           ;ECAN.c: 688: {
 15561                           ;ECAN.c: 693: ptr = pb[i];
 15562  003E9E  5039               	movf	ECANSendMessage@i,w,c
 15563  003EA0  0D02               	mullw	2
 15564  003EA2  50F3               	movf	prodl,w,c
 15565  003EA4  0F20               	addlw	low ECANSendMessage@pb
 15566  003EA6  6ED9               	movwf	fsr2l,c
 15567  003EA8  6ADA               	clrf	fsr2h,c
 15568  003EAA  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15569  003EAE  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15570                           
 15571                           ;ECAN.c: 694: tempPtr = ptr;
 15572  003EB2  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15573  003EB6  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15574                           
 15575                           ;ECAN.c: 702: if ( i > 2 )
 15576  003EBA  0E02               	movlw	2
 15577  003EBC  6439               	cpfsgt	ECANSendMessage@i,c
 15578  003EBE  D004               	goto	l10969
 15579                           
 15580                           ;ECAN.c: 703: {
 15581                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15582  003EC0  90D8               	bcf	status,0,c
 15583  003EC2  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15584                           
 15585                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15586  003EC4  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15587  003EC6  D065               	goto	l11009
 15588  003EC8                     l10969:
 15589                           
 15590                           ;ECAN.c: 714: }
 15591                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15592  003EC8  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15593  003ECC  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15594  003ED0  50DF               	movf	indf2,w,c
 15595  003ED2  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15596  003ED4  B61F               	btfsc	??_ECANSendMessage,3,c
 15597  003ED6  D05D               	goto	l11009
 15598                           
 15599                           ;ECAN.c: 721: {
 15600                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15601  003ED8  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15602  003EDC  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15603  003EE0  0EFC               	movlw	252
 15604  003EE2  16DF               	andwf	indf2,f,c
 15605                           
 15606                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15607  003EE4  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15608  003EE8  0E03               	movlw	3
 15609  003EEA  161F               	andwf	??_ECANSendMessage,f,c
 15610  003EEC  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15611  003EF0  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15612  003EF4  501F               	movf	??_ECANSendMessage,w,c
 15613  003EF6  12DF               	iorwf	indf2,f,c
 15614                           
 15615                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15616  003EF8  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15617  003EFA  D004               	goto	l820
 15618                           
 15619                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15620  003EFC  501D               	movf	ECANSendMessage@dataLen,w,c
 15621  003EFE  0940               	iorlw	64
 15622  003F00  6E38               	movwf	ECANSendMessage@temp,c
 15623  003F02  D002               	goto	l10979
 15624  003F04                     l820:
 15625                           
 15626                           ;ECAN.c: 729: else
 15627                           ;ECAN.c: 730: temp = dataLen;
 15628  003F04  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15629  003F08                     l10979:
 15630                           
 15631                           ;ECAN.c: 732: *(ptr+5) = temp;
 15632  003F08  EE20 F005          	lfsr	2,5
 15633  003F0C  503A               	movf	ECANSendMessage@ptr,w,c
 15634  003F0E  26D9               	addwf	fsr2l,f,c
 15635  003F10  503B               	movf	ECANSendMessage@ptr+1,w,c
 15636  003F12  22DA               	addwfc	fsr2h,f,c
 15637  003F14  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15638                           
 15639                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15640  003F18  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15641  003F1A  D003               	goto	l822
 15642                           
 15643                           ;ECAN.c: 736: temp = 1;
 15644  003F1C  0E01               	movlw	1
 15645  003F1E  6E38               	movwf	ECANSendMessage@temp,c
 15646  003F20  D001               	goto	l10985
 15647  003F22                     l822:
 15648                           
 15649                           ;ECAN.c: 738: else
 15650                           ;ECAN.c: 739: temp = 0;
 15651  003F22  6A38               	clrf	ECANSendMessage@temp,c
 15652  003F24                     l10985:
 15653                           
 15654                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15655  003F24  283A               	incf	ECANSendMessage@ptr,w,c
 15656  003F26  6E0E               	movwf	?__CANIDToRegs,c
 15657  003F28  0E00               	movlw	0
 15658  003F2A  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15659  003F2C  6E0F               	movwf	?__CANIDToRegs+1,c
 15660  003F2E  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15661  003F32  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15662  003F36  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15663  003F3A  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15664  003F3E  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15665  003F42  EC31  F021         	call	__CANIDToRegs	;wreg free
 15666                           
 15667                           ;ECAN.c: 745: ptr += 6;
 15668  003F46  0E06               	movlw	6
 15669  003F48  263A               	addwf	ECANSendMessage@ptr,f,c
 15670  003F4A  0E00               	movlw	0
 15671  003F4C  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15672                           
 15673                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15674  003F4E  6A34               	clrf	ECANSendMessage@j,c
 15675  003F50  D00D               	goto	l10999
 15676  003F52                     l10991:
 15677                           
 15678                           ;ECAN.c: 748: *ptr++ = *data++;
 15679  003F52  501C               	movf	ECANSendMessage@data,w,c
 15680  003F54  6ED9               	movwf	fsr2l,c
 15681  003F56  6ADA               	clrf	fsr2h,c
 15682  003F58  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15683  003F5C  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15684  003F60  CFDF FFE7          	movff	indf2,indf1
 15685  003F64  2A1C               	incf	ECANSendMessage@data,f,c
 15686  003F66  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15687  003F68  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15688  003F6A  2A34               	incf	ECANSendMessage@j,f,c
 15689  003F6C                     l10999:
 15690  003F6C  501D               	movf	ECANSendMessage@dataLen,w,c
 15691  003F6E  5C34               	subwf	ECANSendMessage@j,w,c
 15692  003F70  E3F0               	bnc	l10991
 15693                           
 15694                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15695  003F72  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15696  003F76  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15697  003F7A  50DF               	movf	indf2,w,c
 15698  003F7C  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15699  003F7E  B41F               	btfsc	??_ECANSendMessage,2,c
 15700  003F80  D006               	goto	l11005
 15701                           
 15702                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15703  003F82  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15704  003F86  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15705  003F8A  0E00               	movlw	0
 15706  003F8C  86DB               	bsf	plusw2,3,c
 15707  003F8E                     l11005:
 15708                           
 15709                           ;ECAN.c: 755: return TRUE;
 15710  003F8E  0E01               	movlw	1
 15711  003F90  D005               	goto	l828
 15712  003F92                     l11009:
 15713  003F92  2A39               	incf	ECANSendMessage@i,f,c
 15714  003F94                     l11011:
 15715  003F94  5033               	movf	ECANSendMessage@buffers,w,c
 15716  003F96  5C39               	subwf	ECANSendMessage@i,w,c
 15717  003F98  E382               	bnc	l10957
 15718                           
 15719                           ;ECAN.c: 756: }
 15720                           ;ECAN.c: 757: }
 15721                           ;ECAN.c: 760: return FALSE;
 15722  003F9A  0E00               	movlw	0
 15723  003F9C                     l828:
 15724  003F9C  0012               	return	
 15725  003F9E                     __end_of_ECANSendMessage:
 15726                           	opt stack 0
 15727                           tblptru	equ	0xFF8
 15728                           tblptrh	equ	0xFF7
 15729                           tblptrl	equ	0xFF6
 15730                           tablat	equ	0xFF5
 15731                           prodh	equ	0xFF4
 15732                           prodl	equ	0xFF3
 15733                           postinc0	equ	0xFEE
 15734                           wreg	equ	0xFE8
 15735                           indf1	equ	0xFE7
 15736                           postdec1	equ	0xFE5
 15737                           fsr1h	equ	0xFE2
 15738                           fsr1l	equ	0xFE1
 15739                           indf2	equ	0xFDF
 15740                           postinc2	equ	0xFDE
 15741                           postdec2	equ	0xFDD
 15742                           plusw2	equ	0xFDB
 15743                           fsr2h	equ	0xFDA
 15744                           fsr2l	equ	0xFD9
 15745                           status	equ	0xFD8
 15746                           
 15747 ;; *************** function __CANIDToRegs *****************
 15748 ;; Defined at:
 15749 ;;		line 1099 in file "../ECAN.c"
 15750 ;; Parameters:    Size  Location     Type
 15751 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15752 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15753 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15754 ;;		 -> B0CON(1), 
 15755 ;;  val             4   15[COMRAM] unsigned long 
 15756 ;;  type            1   19[COMRAM] unsigned char 
 15757 ;; Auto vars:     Size  Location     Type
 15758 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15759 ;;		 -> _CANIDToRegs@val(4), 
 15760 ;; Return value:  Size  Location     Type
 15761 ;;		None               void
 15762 ;; Registers used:
 15763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15764 ;; Tracked objects:
 15765 ;;		On entry : 3/D
 15766 ;;		On exit  : 3/1
 15767 ;;		Unchanged: 2/0
 15768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15769 ;;      Params:         7       0       0       0       0       0       0
 15770 ;;      Locals:         1       0       0       0       0       0       0
 15771 ;;      Temps:          2       0       0       0       0       0       0
 15772 ;;      Totals:        10       0       0       0       0       0       0
 15773 ;;Total ram usage:       10 bytes
 15774 ;; Hardware stack levels used:    1
 15775 ;; Hardware stack levels required when called:    2
 15776 ;; This function calls:
 15777 ;;		Nothing
 15778 ;; This function is called by:
 15779 ;;		_ECANSendMessage
 15780 ;; This function uses a non-reentrant model
 15781 ;;
 15782                           
 15783                           	psect	text74
 15784  004262                     __ptext74:
 15785                           	opt stack 0
 15786  004262                     __CANIDToRegs:
 15787                           	opt stack 22
 15788                           
 15789                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15790                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15791                           
 15792                           ;incstack = 0
 15793                           ;incstack = 0
 15794  004262  0E10               	movlw	low __CANIDToRegs@val
 15795  004264  6E17               	movwf	__CANIDToRegs@Value,c
 15796                           
 15797                           ;ECAN.c: 1104: if ( type == 0 )
 15798  004266  6614               	tstfsz	__CANIDToRegs@type,c
 15799  004268  D037               	goto	l11027
 15800                           
 15801                           ;ECAN.c: 1105: {
 15802                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15803  00426A  5017               	movf	__CANIDToRegs@Value,w,c
 15804  00426C  6ED9               	movwf	fsr2l,c
 15805  00426E  6ADA               	clrf	fsr2h,c
 15806  004270  50DF               	movf	indf2,w,c
 15807  004272  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15808  004274  90D8               	bcf	status,0,c
 15809  004276  3215               	rrcf	??__CANIDToRegs,f,c
 15810  004278  90D8               	bcf	status,0,c
 15811  00427A  3215               	rrcf	??__CANIDToRegs,f,c
 15812  00427C  90D8               	bcf	status,0,c
 15813  00427E  3015               	rrcf	??__CANIDToRegs,w,c
 15814  004280  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15815  004284  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15816  004288  6EDF               	movwf	indf2,c
 15817                           
 15818                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15819  00428A  5017               	movf	__CANIDToRegs@Value,w,c
 15820  00428C  6ED9               	movwf	fsr2l,c
 15821  00428E  6ADA               	clrf	fsr2h,c
 15822  004290  2AD9               	incf	fsr2l,f,c
 15823  004292  6ADA               	clrf	fsr2h,c
 15824  004294  50DF               	movf	indf2,w,c
 15825  004296  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15826  004298  0E05               	movlw	5
 15827  00429A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15828  00429C                     u9085:
 15829  00429C  90D8               	bcf	status,0,c
 15830  00429E  3615               	rlcf	??__CANIDToRegs,f,c
 15831  0042A0  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15832  0042A2  D7FC               	goto	u9085
 15833  0042A4  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15834  0042A8  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15835  0042AC  5015               	movf	??__CANIDToRegs,w,c
 15836  0042AE  12DF               	iorwf	indf2,f,c
 15837                           
 15838                           ;ECAN.c: 1109: ptr++;
 15839  0042B0  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15840  0042B2  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15841                           
 15842                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15843  0042B4  5017               	movf	__CANIDToRegs@Value,w,c
 15844  0042B6  6ED9               	movwf	fsr2l,c
 15845  0042B8  6ADA               	clrf	fsr2h,c
 15846  0042BA  50DF               	movf	indf2,w,c
 15847  0042BC  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15848  0042BE  0E05               	movlw	5
 15849  0042C0  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15850  0042C2                     u9095:
 15851  0042C2  90D8               	bcf	status,0,c
 15852  0042C4  3615               	rlcf	??__CANIDToRegs,f,c
 15853  0042C6  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15854  0042C8  D7FC               	goto	u9095
 15855  0042CA  5015               	movf	??__CANIDToRegs,w,c
 15856  0042CC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15857  0042D0  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15858  0042D4  6EDF               	movwf	indf2,c
 15859                           
 15860                           ;ECAN.c: 1111: }
 15861  0042D6  D06C               	goto	l882
 15862  0042D8                     l11027:
 15863                           
 15864                           ;ECAN.c: 1112: else
 15865                           ;ECAN.c: 1113: {
 15866                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15867  0042D8  5017               	movf	__CANIDToRegs@Value,w,c
 15868  0042DA  6ED9               	movwf	fsr2l,c
 15869  0042DC  6ADA               	clrf	fsr2h,c
 15870  0042DE  0E02               	movlw	2
 15871  0042E0  26D9               	addwf	fsr2l,f,c
 15872  0042E2  6ADA               	clrf	fsr2h,c
 15873  0042E4  50DF               	movf	indf2,w,c
 15874  0042E6  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15875  0042E8  0E05               	movlw	5
 15876  0042EA  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15877  0042EC                     u9105:
 15878  0042EC  90D8               	bcf	status,0,c
 15879  0042EE  3215               	rrcf	??__CANIDToRegs,f,c
 15880  0042F0  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15881  0042F2  D7FC               	goto	u9105
 15882  0042F4  5015               	movf	??__CANIDToRegs,w,c
 15883  0042F6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15884  0042FA  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15885  0042FE  6EDF               	movwf	indf2,c
 15886                           
 15887                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 15888  004300  5017               	movf	__CANIDToRegs@Value,w,c
 15889  004302  6ED9               	movwf	fsr2l,c
 15890  004304  6ADA               	clrf	fsr2h,c
 15891  004306  0E03               	movlw	3
 15892  004308  26D9               	addwf	fsr2l,f,c
 15893  00430A  6ADA               	clrf	fsr2h,c
 15894  00430C  50DF               	movf	indf2,w,c
 15895  00430E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15896  004310  90D8               	bcf	status,0,c
 15897  004312  3615               	rlcf	??__CANIDToRegs,f,c
 15898  004314  90D8               	bcf	status,0,c
 15899  004316  3615               	rlcf	??__CANIDToRegs,f,c
 15900  004318  90D8               	bcf	status,0,c
 15901  00431A  3615               	rlcf	??__CANIDToRegs,f,c
 15902  00431C  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15903  004320  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15904  004324  5015               	movf	??__CANIDToRegs,w,c
 15905  004326  12DF               	iorwf	indf2,f,c
 15906                           
 15907                           ;ECAN.c: 1117: ptr++;
 15908  004328  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15909  00432A  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15910                           
 15911                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 15912  00432C  5017               	movf	__CANIDToRegs@Value,w,c
 15913  00432E  6ED9               	movwf	fsr2l,c
 15914  004330  6ADA               	clrf	fsr2h,c
 15915  004332  0E02               	movlw	2
 15916  004334  26D9               	addwf	fsr2l,f,c
 15917  004336  6ADA               	clrf	fsr2h,c
 15918  004338  50DF               	movf	indf2,w,c
 15919  00433A  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15920  00433C  90D8               	bcf	status,0,c
 15921  00433E  3615               	rlcf	??__CANIDToRegs,f,c
 15922  004340  90D8               	bcf	status,0,c
 15923  004342  3615               	rlcf	??__CANIDToRegs,f,c
 15924  004344  90D8               	bcf	status,0,c
 15925  004346  3415               	rlcf	??__CANIDToRegs,w,c
 15926  004348  0BE0               	andlw	224
 15927  00434A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15928  00434E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15929  004352  6EDF               	movwf	indf2,c
 15930                           
 15931                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 15932  004354  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15933  004358  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15934  00435C  0E00               	movlw	0
 15935  00435E  86DB               	bsf	plusw2,3,c
 15936                           
 15937                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 15938  004360  5017               	movf	__CANIDToRegs@Value,w,c
 15939  004362  6ED9               	movwf	fsr2l,c
 15940  004364  6ADA               	clrf	fsr2h,c
 15941  004366  0E02               	movlw	2
 15942  004368  26D9               	addwf	fsr2l,f,c
 15943  00436A  6ADA               	clrf	fsr2h,c
 15944  00436C  50DF               	movf	indf2,w,c
 15945  00436E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15946  004370  0E03               	movlw	3
 15947  004372  1615               	andwf	??__CANIDToRegs,f,c
 15948  004374  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15949  004378  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15950  00437C  5015               	movf	??__CANIDToRegs,w,c
 15951  00437E  12DF               	iorwf	indf2,f,c
 15952                           
 15953                           ;ECAN.c: 1122: ptr++;
 15954  004380  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15955  004382  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15956                           
 15957                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 15958  004384  5017               	movf	__CANIDToRegs@Value,w,c
 15959  004386  6ED9               	movwf	fsr2l,c
 15960  004388  6ADA               	clrf	fsr2h,c
 15961  00438A  2AD9               	incf	fsr2l,f,c
 15962  00438C  6ADA               	clrf	fsr2h,c
 15963  00438E  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15964  004392  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15965  004396  CFDF FFE7          	movff	indf2,indf1
 15966                           
 15967                           ;ECAN.c: 1124: ptr++;
 15968  00439A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15969  00439C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15970                           
 15971                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 15972  00439E  5017               	movf	__CANIDToRegs@Value,w,c
 15973  0043A0  6ED9               	movwf	fsr2l,c
 15974  0043A2  6ADA               	clrf	fsr2h,c
 15975  0043A4  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 15976  0043A8  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 15977  0043AC  CFDF FFE7          	movff	indf2,indf1
 15978  0043B0                     l882:
 15979  0043B0  0012               	return	
 15980  0043B2                     __end_of__CANIDToRegs:
 15981                           	opt stack 0
 15982                           tblptru	equ	0xFF8
 15983                           tblptrh	equ	0xFF7
 15984                           tblptrl	equ	0xFF6
 15985                           tablat	equ	0xFF5
 15986                           prodh	equ	0xFF4
 15987                           prodl	equ	0xFF3
 15988                           postinc0	equ	0xFEE
 15989                           wreg	equ	0xFE8
 15990                           indf1	equ	0xFE7
 15991                           postdec1	equ	0xFE5
 15992                           fsr1h	equ	0xFE2
 15993                           fsr1l	equ	0xFE1
 15994                           indf2	equ	0xFDF
 15995                           postinc2	equ	0xFDE
 15996                           postdec2	equ	0xFDD
 15997                           plusw2	equ	0xFDB
 15998                           fsr2h	equ	0xFDA
 15999                           fsr2l	equ	0xFD9
 16000                           status	equ	0xFD8
 16001                           
 16002 ;; *************** function _vscp_getEvent *****************
 16003 ;; Defined at:
 16004 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16005 ;; Parameters:    Size  Location     Type
 16006 ;;		None
 16007 ;; Auto vars:     Size  Location     Type
 16008 ;;  rv              1   59[COMRAM] unsigned char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;                  1    wreg      unsigned char 
 16011 ;; Registers used:
 16012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16013 ;; Tracked objects:
 16014 ;;		On entry : F/1
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16018 ;;      Params:         0       0       0       0       0       0       0
 16019 ;;      Locals:         1       0       0       0       0       0       0
 16020 ;;      Temps:          0       0       0       0       0       0       0
 16021 ;;      Totals:         1       0       0       0       0       0       0
 16022 ;;Total ram usage:        1 bytes
 16023 ;; Hardware stack levels used:    1
 16024 ;; Hardware stack levels required when called:    6
 16025 ;; This function calls:
 16026 ;;		_getVSCPFrame
 16027 ;; This function is called by:
 16028 ;;		_main
 16029 ;; This function uses a non-reentrant model
 16030 ;;
 16031                           
 16032                           	psect	text75
 16033  0056FA                     __ptext75:
 16034                           	opt stack 0
 16035  0056FA                     _vscp_getEvent:
 16036                           	opt stack 24
 16037                           
 16038                           ; BSR set to: 1
 16039                           ;vscp_firmware.c: 1309: int8_t rv;
 16040                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16041                           
 16042                           ;incstack = 0
 16043                           ;incstack = 0
 16044  0056FA  BF64               	btfsc	_vscp_imsg& (0+255),7,b
 16045  0056FC  D01F               	goto	l1277
 16046                           
 16047                           ; BSR set to: 1
 16048                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16049                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16050                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16051                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16052                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16053                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16054  0056FE  0E01               	movlw	high (_vscp_imsg+2)
 16055  005700  6E29               	movwf	?_getVSCPFrame+1,c
 16056  005702  0E66               	movlw	low (_vscp_imsg+2)
 16057  005704  6E28               	movwf	?_getVSCPFrame,c
 16058  005706  0E01               	movlw	high (_vscp_imsg+4)
 16059  005708  6E2B               	movwf	?_getVSCPFrame+3,c
 16060  00570A  0E68               	movlw	low (_vscp_imsg+4)
 16061  00570C  6E2A               	movwf	?_getVSCPFrame+2,c
 16062  00570E  0E01               	movlw	high (_vscp_imsg+5)
 16063  005710  6E2D               	movwf	?_getVSCPFrame+5,c
 16064  005712  0E69               	movlw	low (_vscp_imsg+5)
 16065  005714  6E2C               	movwf	?_getVSCPFrame+4,c
 16066  005716  0E01               	movlw	high (_vscp_imsg+1)
 16067  005718  6E2F               	movwf	?_getVSCPFrame+7,c
 16068  00571A  0E65               	movlw	low (_vscp_imsg+1)
 16069  00571C  6E2E               	movwf	?_getVSCPFrame+6,c
 16070  00571E  0E01               	movlw	high _vscp_imsg
 16071  005720  6E31               	movwf	?_getVSCPFrame+9,c
 16072  005722  0E64               	movlw	low _vscp_imsg
 16073  005724  6E30               	movwf	?_getVSCPFrame+8,c
 16074  005726  0E01               	movlw	high (_vscp_imsg+6)
 16075  005728  6E33               	movwf	?_getVSCPFrame+11,c
 16076  00572A  0E6A               	movlw	low (_vscp_imsg+6)
 16077  00572C  6E32               	movwf	?_getVSCPFrame+10,c
 16078  00572E  ECF8  F028         	call	_getVSCPFrame	;wreg free
 16079  005732  6E3C               	movwf	vscp_getEvent@rv,c
 16080  005734  503C               	movf	vscp_getEvent@rv& (0+255),w,c
 16081  005736  E002               	bz	l1277
 16082                           
 16083                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16084  005738  0101               	movlb	1	; () banked
 16085  00573A  8F64               	bsf	_vscp_imsg& (0+255),7,b
 16086  00573C                     l1277:
 16087  00573C  0012               	return	
 16088  00573E                     __end_of_vscp_getEvent:
 16089                           	opt stack 0
 16090                           tblptru	equ	0xFF8
 16091                           tblptrh	equ	0xFF7
 16092                           tblptrl	equ	0xFF6
 16093                           tablat	equ	0xFF5
 16094                           prodh	equ	0xFF4
 16095                           prodl	equ	0xFF3
 16096                           postinc0	equ	0xFEE
 16097                           wreg	equ	0xFE8
 16098                           indf1	equ	0xFE7
 16099                           postdec1	equ	0xFE5
 16100                           fsr1h	equ	0xFE2
 16101                           fsr1l	equ	0xFE1
 16102                           indf2	equ	0xFDF
 16103                           postinc2	equ	0xFDE
 16104                           postdec2	equ	0xFDD
 16105                           plusw2	equ	0xFDB
 16106                           fsr2h	equ	0xFDA
 16107                           fsr2l	equ	0xFD9
 16108                           status	equ	0xFD8
 16109                           
 16110 ;; *************** function _getVSCPFrame *****************
 16111 ;; Defined at:
 16112 ;;		line 2876 in file "../main.c"
 16113 ;; Parameters:    Size  Location     Type
 16114 ;;  pvscpclass      2   39[COMRAM] PTR unsigned short 
 16115 ;;		 -> vscp_imsg(14), 
 16116 ;;  pvscptype       2   41[COMRAM] PTR unsigned char 
 16117 ;;		 -> vscp_imsg(14), 
 16118 ;;  pNodeId         2   43[COMRAM] PTR unsigned char 
 16119 ;;		 -> vscp_imsg(14), 
 16120 ;;  pPriority       2   45[COMRAM] PTR unsigned char 
 16121 ;;		 -> vscp_imsg(14), 
 16122 ;;  pSize           2   47[COMRAM] PTR unsigned char 
 16123 ;;		 -> vscp_imsg(14), 
 16124 ;;  pData           2   49[COMRAM] PTR unsigned char 
 16125 ;;		 -> vscp_imsg(14), 
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;  id              4   55[COMRAM] unsigned long 
 16128 ;; Return value:  Size  Location     Type
 16129 ;;                  1    wreg      unsigned char 
 16130 ;; Registers used:
 16131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16132 ;; Tracked objects:
 16133 ;;		On entry : F/1
 16134 ;;		On exit  : 0/0
 16135 ;;		Unchanged: 0/0
 16136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16137 ;;      Params:        12       0       0       0       0       0       0
 16138 ;;      Locals:         4       0       0       0       0       0       0
 16139 ;;      Temps:          4       0       0       0       0       0       0
 16140 ;;      Totals:        20       0       0       0       0       0       0
 16141 ;;Total ram usage:       20 bytes
 16142 ;; Hardware stack levels used:    1
 16143 ;; Hardware stack levels required when called:    5
 16144 ;; This function calls:
 16145 ;;		_getCANFrame
 16146 ;; This function is called by:
 16147 ;;		_vscp_getEvent
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           	psect	text76
 16152  0051F0                     __ptext76:
 16153                           	opt stack 0
 16154  0051F0                     _getVSCPFrame:
 16155                           	opt stack 24
 16156                           
 16157                           ; BSR set to: 1
 16158                           ;main.c: 2877: uint32_t id;
 16159                           ;main.c: 2879: if (!getCANFrame(&id, pSize, pData)) {
 16160                           
 16161                           ;incstack = 0
 16162                           ;incstack = 0
 16163  0051F0  C030  F022         	movff	getVSCPFrame@pSize,?_getCANFrame
 16164  0051F4  C031  F023         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 16165  0051F8  C032  F024         	movff	getVSCPFrame@pData,?_getCANFrame+2
 16166  0051FC  C033  F025         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 16167  005200  0E38               	movlw	getVSCPFrame@id& (0+255)
 16168  005202  EC89  F02C         	call	_getCANFrame
 16169  005206  0900               	iorlw	0
 16170  005208  E102               	bnz	l8095
 16171                           
 16172                           ;main.c: 2880: return 0;
 16173  00520A  0E00               	movlw	0
 16174  00520C  D032               	goto	l626
 16175  00520E                     l8095:
 16176                           
 16177                           ;main.c: 2881: }
 16178                           ;main.c: 2883: *pNodeId = id & 0x0ff;
 16179  00520E  C02C  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 16180  005212  C02D  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 16181  005216  C038  FFDF         	movff	getVSCPFrame@id,indf2
 16182                           
 16183                           ;main.c: 2884: *pvscptype = (id >> 8) & 0xff;
 16184  00521A  C02A  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 16185  00521E  C02B  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 16186  005222  C039  FFDF         	movff	getVSCPFrame@id+1,indf2
 16187                           
 16188                           ;main.c: 2885: *pvscpclass = (id >> 16) & 0x1ff;
 16189  005226  503A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16190  005228  6E34               	movwf	??_getVSCPFrame& (0+255),c
 16191  00522A  0E01               	movlw	1
 16192  00522C  143B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16193  00522E  6E35               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16194  005230  C028  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 16195  005234  C029  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 16196  005238  C034  FFDE         	movff	??_getVSCPFrame,postinc2
 16197  00523C  C035  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16198                           
 16199                           ;main.c: 2886: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16200  005240  C038  F034         	movff	getVSCPFrame@id,??_getVSCPFrame
 16201  005244  C039  F035         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16202  005248  C03A  F036         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16203  00524C  C03B  F037         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16204  005250  0E1B               	movlw	27
 16205  005252  D005               	goto	u5450
 16206  005254                     u5455:
 16207  005254  90D8               	bcf	status,0,c
 16208  005256  3237               	rrcf	??_getVSCPFrame+3,f,c
 16209  005258  3236               	rrcf	??_getVSCPFrame+2,f,c
 16210  00525A  3235               	rrcf	??_getVSCPFrame+1,f,c
 16211  00525C  3234               	rrcf	??_getVSCPFrame,f,c
 16212  00525E                     u5450:
 16213  00525E  2EE8               	decfsz	wreg,f,c
 16214  005260  D7F9               	goto	u5455
 16215  005262  5034               	movf	??_getVSCPFrame,w,c
 16216  005264  0B07               	andlw	7
 16217  005266  C02E  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 16218  00526A  C02F  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 16219  00526E  6EDF               	movwf	indf2,c
 16220                           
 16221                           ;main.c: 2888: return 1;
 16222  005270  0E01               	movlw	1
 16223  005272                     l626:
 16224  005272  0012               	return	
 16225  005274                     __end_of_getVSCPFrame:
 16226                           	opt stack 0
 16227                           tblptru	equ	0xFF8
 16228                           tblptrh	equ	0xFF7
 16229                           tblptrl	equ	0xFF6
 16230                           tablat	equ	0xFF5
 16231                           prodh	equ	0xFF4
 16232                           prodl	equ	0xFF3
 16233                           postinc0	equ	0xFEE
 16234                           wreg	equ	0xFE8
 16235                           indf1	equ	0xFE7
 16236                           postdec1	equ	0xFE5
 16237                           fsr1h	equ	0xFE2
 16238                           fsr1l	equ	0xFE1
 16239                           indf2	equ	0xFDF
 16240                           postinc2	equ	0xFDE
 16241                           postdec2	equ	0xFDD
 16242                           plusw2	equ	0xFDB
 16243                           fsr2h	equ	0xFDA
 16244                           fsr2l	equ	0xFD9
 16245                           status	equ	0xFD8
 16246                           
 16247 ;; *************** function _getCANFrame *****************
 16248 ;; Defined at:
 16249 ;;		line 2918 in file "../main.c"
 16250 ;; Parameters:    Size  Location     Type
 16251 ;;  pid             1    wreg     PTR unsigned long 
 16252 ;;		 -> getVSCPFrame@id(4), 
 16253 ;;  pdlc            2   33[COMRAM] PTR unsigned char 
 16254 ;;		 -> vscp_imsg(14), 
 16255 ;;  pdata           2   35[COMRAM] PTR unsigned char 
 16256 ;;		 -> vscp_imsg(14), 
 16257 ;; Auto vars:     Size  Location     Type
 16258 ;;  pid             1   37[COMRAM] PTR unsigned long 
 16259 ;;		 -> getVSCPFrame@id(4), 
 16260 ;;  flags           1   38[COMRAM] enum E16409
 16261 ;; Return value:  Size  Location     Type
 16262 ;;                  1    wreg      unsigned char 
 16263 ;; Registers used:
 16264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16265 ;; Tracked objects:
 16266 ;;		On entry : F/1
 16267 ;;		On exit  : 0/0
 16268 ;;		Unchanged: 0/0
 16269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16270 ;;      Params:         4       0       0       0       0       0       0
 16271 ;;      Locals:         2       0       0       0       0       0       0
 16272 ;;      Temps:          0       0       0       0       0       0       0
 16273 ;;      Totals:         6       0       0       0       0       0       0
 16274 ;;Total ram usage:        6 bytes
 16275 ;; Hardware stack levels used:    1
 16276 ;; Hardware stack levels required when called:    4
 16277 ;; This function calls:
 16278 ;;		_ECANReceiveMessage
 16279 ;; This function is called by:
 16280 ;;		_getVSCPFrame
 16281 ;; This function uses a non-reentrant model
 16282 ;;
 16283                           
 16284                           	psect	text77
 16285  005912                     __ptext77:
 16286                           	opt stack 0
 16287  005912                     _getCANFrame:
 16288                           	opt stack 24
 16289                           
 16290                           ;incstack = 0
 16291                           ;incstack = 0
 16292                           ;getCANFrame@pid stored from wreg
 16293  005912  CFE8 F026          	movff	wreg,getCANFrame@pid
 16294                           
 16295                           ; BSR set to: 1
 16296                           ;main.c: 2919: ECAN_RX_MSG_FLAGS flags;
 16297                           ;main.c: 2923: if (vscp_imsg.flags & 0x80) return 0;
 16298  005916  AF64               	btfss	_vscp_imsg& (0+255),7,b
 16299  005918  D002               	goto	l8111
 16300  00591A                     l8107:
 16301  00591A  0E00               	movlw	0
 16302  00591C  D013               	goto	l637
 16303  00591E                     l8111:
 16304                           
 16305                           ; BSR set to: 1
 16306                           ;main.c: 2925: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16307  00591E  C024  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16308  005922  C025  F016         	movff	getCANFrame@pdata+1,?_ECANReceiveMessage+1
 16309  005926  C022  F017         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+2
 16310  00592A  C023  F018         	movff	getCANFrame@pdlc+1,?_ECANReceiveMessage+3
 16311  00592E  0E27               	movlw	low getCANFrame@flags
 16312  005930  6E19               	movwf	?_ECANReceiveMessage+4,c
 16313  005932  5026               	movf	getCANFrame@pid,w,c
 16314  005934  EC47  F01C         	call	_ECANReceiveMessage
 16315  005938  0900               	iorlw	0
 16316  00593A  E0EF               	bz	l8107
 16317                           
 16318                           ;main.c: 2927: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16319  00593C  AC27               	btfss	getCANFrame@flags,6,c
 16320                           
 16321                           ;main.c: 2930: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16322  00593E  AA27               	btfss	getCANFrame@flags,5,c
 16323  005940  D7EC               	goto	l8107
 16324                           
 16325                           ;main.c: 2932: return 1;
 16326  005942  0E01               	movlw	1
 16327  005944                     l637:
 16328  005944  0012               	return	
 16329  005946                     __end_of_getCANFrame:
 16330                           	opt stack 0
 16331                           tblptru	equ	0xFF8
 16332                           tblptrh	equ	0xFF7
 16333                           tblptrl	equ	0xFF6
 16334                           tablat	equ	0xFF5
 16335                           prodh	equ	0xFF4
 16336                           prodl	equ	0xFF3
 16337                           postinc0	equ	0xFEE
 16338                           wreg	equ	0xFE8
 16339                           indf1	equ	0xFE7
 16340                           postdec1	equ	0xFE5
 16341                           fsr1h	equ	0xFE2
 16342                           fsr1l	equ	0xFE1
 16343                           indf2	equ	0xFDF
 16344                           postinc2	equ	0xFDE
 16345                           postdec2	equ	0xFDD
 16346                           plusw2	equ	0xFDB
 16347                           fsr2h	equ	0xFDA
 16348                           fsr2l	equ	0xFD9
 16349                           status	equ	0xFD8
 16350                           
 16351 ;; *************** function _ECANReceiveMessage *****************
 16352 ;; Defined at:
 16353 ;;		line 803 in file "../ECAN.c"
 16354 ;; Parameters:    Size  Location     Type
 16355 ;;  id              1    wreg     PTR unsigned long 
 16356 ;;		 -> getVSCPFrame@id(4), 
 16357 ;;  data            2   20[COMRAM] PTR unsigned char 
 16358 ;;		 -> vscp_imsg(14), 
 16359 ;;  dataLen         2   22[COMRAM] PTR unsigned char 
 16360 ;;		 -> vscp_imsg(14), 
 16361 ;;  msgFlags        1   24[COMRAM] PTR enum E16324
 16362 ;;		 -> getCANFrame@flags(1), 
 16363 ;; Auto vars:     Size  Location     Type
 16364 ;;  id              1   27[COMRAM] PTR unsigned long 
 16365 ;;		 -> getVSCPFrame@id(4), 
 16366 ;;  ptr             2   31[COMRAM] PTR unsigned char 
 16367 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16368 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16369 ;;  savedPtr        2   25[COMRAM] PTR unsigned char 
 16370 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16371 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16372 ;;  temp            1   30[COMRAM] struct .
 16373 ;;  mode            1   29[COMRAM] unsigned char 
 16374 ;;  i               1   28[COMRAM] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  1    wreg      enum E15660
 16377 ;; Registers used:
 16378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16379 ;; Tracked objects:
 16380 ;;		On entry : F/1
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16384 ;;      Params:         5       0       0       0       0       0       0
 16385 ;;      Locals:         8       0       0       0       0       0       0
 16386 ;;      Temps:          0       0       0       0       0       0       0
 16387 ;;      Totals:        13       0       0       0       0       0       0
 16388 ;;Total ram usage:       13 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    3
 16391 ;; This function calls:
 16392 ;;		__ECANPointBuffer
 16393 ;;		__RegsToCANID
 16394 ;; This function is called by:
 16395 ;;		_getCANFrame
 16396 ;; This function uses a non-reentrant model
 16397 ;;
 16398                           
 16399                           	psect	text78
 16400  00388E                     __ptext78:
 16401                           	opt stack 0
 16402  00388E                     _ECANReceiveMessage:
 16403                           	opt stack 24
 16404                           
 16405                           ;incstack = 0
 16406                           ;incstack = 0
 16407                           ;ECANReceiveMessage@id stored from wreg
 16408  00388E  CFE8 F01C          	movff	wreg,ECANReceiveMessage@id
 16409                           
 16410                           ; BSR set to: 1
 16411                           ;ECAN.c: 805: BYTE mode;
 16412                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16413                           ;ECAN.c: 809: char i;
 16414                           ;ECAN.c: 810: BYTE_VAL temp;
 16415                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16416  003892  6A48               	clrf	__ECANRxFilterHitInfo,c
 16417                           
 16418                           ; BSR set to: 1
 16419                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16420  003894  5077               	movf	3959,w,c	;volatile
 16421  003896  0BC0               	andlw	192
 16422  003898  6E1E               	movwf	ECANReceiveMessage@mode,c
 16423                           
 16424                           ; BSR set to: 1
 16425                           ;ECAN.c: 816: if ( mode == 0x00 )
 16426  00389A  661E               	tstfsz	ECANReceiveMessage@mode,c
 16427  00389C  D032               	goto	l8243
 16428                           
 16429                           ; BSR set to: 1
 16430                           ;ECAN.c: 822: {
 16431                           ;ECAN.c: 824: if ( RXB0FUL )
 16432  00389E  AE60               	btfss	3936,7,c	;volatile
 16433  0038A0  D012               	goto	l833
 16434                           
 16435                           ; BSR set to: 1
 16436                           ;ECAN.c: 825: {
 16437                           ;ECAN.c: 827: RXB0IF = 0;
 16438  0038A2  90A4               	bcf	4004,0,c	;volatile
 16439                           
 16440                           ;ECAN.c: 830: if ( RXB0OVFL )
 16441  0038A4  AE74               	btfss	3956,7,c	;volatile
 16442  0038A6  D006               	goto	l8219
 16443                           
 16444                           ; BSR set to: 1
 16445                           ;ECAN.c: 831: {
 16446                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16447  0038A8  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16448  0038AA  6ED9               	movwf	fsr2l,c
 16449  0038AC  6ADA               	clrf	fsr2h,c
 16450  0038AE  0E00               	movlw	0
 16451  0038B0  86DB               	bsf	plusw2,3,c
 16452                           
 16453                           ; BSR set to: 1
 16454                           ;ECAN.c: 833: RXB0OVFL = 0;
 16455  0038B2  9E74               	bcf	3956,7,c	;volatile
 16456  0038B4                     l8219:
 16457                           
 16458                           ; BSR set to: 1
 16459                           ;ECAN.c: 834: }
 16460                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16461  0038B4  A060               	btfss	3936,0,c	;volatile
 16462  0038B6  D002               	bra	u5625
 16463  0038B8  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16464  0038BA  D001               	bra	u5627
 16465  0038BC                     u5625:
 16466  0038BC  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16467  0038BE                     u5627:
 16468                           
 16469                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16470  0038BE  0E0F               	movlw	15	;volatile
 16471  0038C0  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16472  0038C2  0E60               	movlw	96	;volatile
 16473  0038C4  D01A               	goto	L34
 16474  0038C6                     l833:
 16475                           
 16476                           ; BSR set to: 1
 16477                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16478  0038C6  010F               	movlb	15	; () banked
 16479  0038C8  AF50               	btfss	80,7,b	;volatile
 16480  0038CA  D019               	goto	l8237
 16481                           
 16482                           ; BSR set to: 15
 16483                           ;ECAN.c: 842: {
 16484                           ;ECAN.c: 844: RXB1IF = 0;
 16485  0038CC  92A4               	bcf	4004,1,c	;volatile
 16486                           
 16487                           ;ECAN.c: 847: if ( RXB1OVFL )
 16488  0038CE  AC74               	btfss	3956,6,c	;volatile
 16489  0038D0  D006               	goto	l8229
 16490                           
 16491                           ; BSR set to: 15
 16492                           ;ECAN.c: 848: {
 16493                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16494  0038D2  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16495  0038D4  6ED9               	movwf	fsr2l,c
 16496  0038D6  6ADA               	clrf	fsr2h,c
 16497  0038D8  0E00               	movlw	0
 16498  0038DA  86DB               	bsf	plusw2,3,c
 16499                           
 16500                           ; BSR set to: 15
 16501                           ;ECAN.c: 850: RXB1OVFL = 0;
 16502  0038DC  9C74               	bcf	3956,6,c	;volatile
 16503  0038DE                     l8229:
 16504                           
 16505                           ; BSR set to: 15
 16506                           ;ECAN.c: 851: }
 16507                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16508  0038DE  5150               	movf	80,w,b	;volatile
 16509  0038E0  0B07               	andlw	7
 16510  0038E2  6E48               	movwf	__ECANRxFilterHitInfo,c
 16511                           
 16512                           ; BSR set to: 15
 16513                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16514  0038E4  0E02               	movlw	2
 16515  0038E6  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16516  0038E8  D005               	goto	l8235
 16517                           
 16518                           ; BSR set to: 15
 16519                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16520  0038EA  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16521  0038EC  6ED9               	movwf	fsr2l,c
 16522  0038EE  6ADA               	clrf	fsr2h,c
 16523  0038F0  0E00               	movlw	0
 16524  0038F2  8EDB               	bsf	plusw2,7,c
 16525  0038F4                     l8235:
 16526                           
 16527                           ; BSR set to: 15
 16528                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16529  0038F4  0E0F               	movlw	15	;volatile
 16530  0038F6  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16531  0038F8  0E50               	movlw	80	;volatile
 16532  0038FA                     L34:
 16533  0038FA  6E20               	movwf	ECANReceiveMessage@ptr,c
 16534                           
 16535                           ;ECAN.c: 860: }
 16536  0038FC  D065               	goto	l8297
 16537  0038FE                     l8237:
 16538                           
 16539                           ;ECAN.c: 861: else
 16540                           ;ECAN.c: 862: return FALSE;
 16541  0038FE  0E00               	movlw	0
 16542  003900  D0D0               	goto	l840
 16543  003902                     l8243:
 16544                           
 16545                           ; BSR set to: 1
 16546                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16547  003902  501E               	movf	ECANReceiveMessage@mode,w,c
 16548  003904  0A40               	xorlw	64
 16549  003906  E146               	bnz	l843
 16550                           
 16551                           ; BSR set to: 1
 16552                           ;ECAN.c: 875: {
 16553                           ;ECAN.c: 876: if ( RXB0FUL )
 16554  003908  AE60               	btfss	3936,7,c	;volatile
 16555  00390A  D004               	goto	l844
 16556                           
 16557                           ; BSR set to: 1
 16558                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16559  00390C  0E0F               	movlw	15	;volatile
 16560  00390E  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16561  003910  0E60               	movlw	96	;volatile
 16562  003912  D03E               	goto	L41
 16563  003914                     l844:
 16564                           
 16565                           ; BSR set to: 1
 16566                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16567  003914  010F               	movlb	15	; () banked
 16568  003916  AF50               	btfss	80,7,b	;volatile
 16569  003918  D004               	goto	l846
 16570                           
 16571                           ; BSR set to: 15
 16572                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16573  00391A  0E0F               	movlw	15	;volatile
 16574  00391C  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16575  00391E  0E50               	movlw	80	;volatile
 16576  003920  D037               	goto	L41
 16577  003922                     l846:
 16578                           
 16579                           ; BSR set to: 15
 16580                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16581  003922  010D               	movlb	13
 16582  003924  B5F8               	btfsc	248,2,b	;volatile
 16583  003926  D007               	goto	l848
 16584  003928  010E               	movlb	14
 16585  00392A  AF20               	btfss	32,7,b	;volatile
 16586  00392C  D004               	goto	l848
 16587                           
 16588                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16589  00392E  0E0E               	movlw	14	;volatile
 16590  003930  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16591  003932  0E20               	movlw	32	;volatile
 16592  003934  D02D               	goto	L41
 16593  003936                     l848:
 16594                           
 16595                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16596  003936  010D               	movlb	13
 16597  003938  B7F8               	btfsc	248,3,b	;volatile
 16598  00393A  D007               	goto	l850
 16599  00393C  010E               	movlb	14
 16600  00393E  AF30               	btfss	48,7,b	;volatile
 16601  003940  D004               	goto	l850
 16602                           
 16603                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16604  003942  0E0E               	movlw	14	;volatile
 16605  003944  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16606  003946  0E30               	movlw	48	;volatile
 16607  003948  D023               	goto	L41
 16608  00394A                     l850:
 16609                           
 16610                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16611  00394A  010D               	movlb	13
 16612  00394C  B9F8               	btfsc	248,4,b	;volatile
 16613  00394E  D007               	goto	l852
 16614  003950  010E               	movlb	14
 16615  003952  AF40               	btfss	64,7,b	;volatile
 16616  003954  D004               	goto	l852
 16617                           
 16618                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16619  003956  0E0E               	movlw	14	;volatile
 16620  003958  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16621  00395A  0E40               	movlw	64	;volatile
 16622  00395C  D019               	goto	L41
 16623  00395E                     l852:
 16624                           
 16625                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16626  00395E  010D               	movlb	13
 16627  003960  BBF8               	btfsc	248,5,b	;volatile
 16628  003962  D005               	goto	l854
 16629  003964  010E               	movlb	14
 16630  003966  AF50               	btfss	80,7,b	;volatile
 16631  003968  D002               	goto	l854
 16632                           
 16633                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16634  00396A  0E0E               	movlw	14	;volatile
 16635  00396C  D7D7               	goto	L42
 16636  00396E                     l854:
 16637                           
 16638                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16639  00396E  010D               	movlb	13
 16640  003970  BDF8               	btfsc	248,6,b	;volatile
 16641  003972  D005               	goto	l856
 16642  003974  010E               	movlb	14
 16643  003976  AF60               	btfss	96,7,b	;volatile
 16644  003978  D002               	goto	l856
 16645                           
 16646                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16647  00397A  0E0E               	movlw	14	;volatile
 16648  00397C  D7C8               	goto	L43
 16649  00397E                     l856:
 16650                           
 16651                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16652  00397E  010D               	movlb	13
 16653  003980  BFF8               	btfsc	248,7,b	;volatile
 16654  003982  D7BD               	goto	l8237
 16655  003984  010E               	movlb	14
 16656  003986  AF70               	btfss	112,7,b	;volatile
 16657  003988  D7BA               	goto	l8237
 16658                           
 16659                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16660  00398A  0E0E               	movlw	14	;volatile
 16661  00398C  6E21               	movwf	ECANReceiveMessage@ptr+1,c
 16662  00398E  0E70               	movlw	112	;volatile
 16663  003990                     L41:
 16664  003990  6E20               	movwf	ECANReceiveMessage@ptr,c
 16665  003992  D00A               	goto	l8287
 16666  003994                     l843:
 16667                           
 16668                           ; BSR set to: 1
 16669                           ;ECAN.c: 910: else
 16670                           ;ECAN.c: 915: {
 16671                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16672  003994  AE74               	btfss	3956,7,c	;volatile
 16673  003996  D7B3               	goto	l8237
 16674                           
 16675                           ; BSR set to: 1
 16676                           ;ECAN.c: 917: {
 16677                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16678  003998  506F               	movf	3951,w,c	;volatile
 16679  00399A  0B07               	andlw	7
 16680  00399C  EC75  F029         	call	__ECANPointBuffer
 16681  0039A0  C00E  F020         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16682  0039A4  C00F  F021         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16683  0039A8                     l8287:
 16684                           
 16685                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16686  0039A8  C020  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16687  0039AC  C021  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16688  0039B0  50DF               	movf	indf2,w,c
 16689  0039B2  0B1F               	andlw	31
 16690  0039B4  6E48               	movwf	__ECANRxFilterHitInfo,c
 16691                           
 16692                           ;ECAN.c: 932: RXB1IF = 0;
 16693  0039B6  92A4               	bcf	4004,1,c	;volatile
 16694                           
 16695                           ;ECAN.c: 934: if ( RXB1OVFL )
 16696  0039B8  AC74               	btfss	3956,6,c	;volatile
 16697  0039BA  D006               	goto	l8297
 16698                           
 16699                           ;ECAN.c: 935: {
 16700                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16701  0039BC  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16702  0039BE  6ED9               	movwf	fsr2l,c
 16703  0039C0  6ADA               	clrf	fsr2h,c
 16704  0039C2  0E00               	movlw	0
 16705  0039C4  86DB               	bsf	plusw2,3,c
 16706                           
 16707                           ;ECAN.c: 937: RXB1OVFL = 0;
 16708  0039C6  9C74               	bcf	3956,6,c	;volatile
 16709  0039C8                     l8297:
 16710                           
 16711                           ;ECAN.c: 942: savedPtr = ptr;
 16712  0039C8  C020  F01A         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16713  0039CC  C021  F01B         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16714                           
 16715                           ;ECAN.c: 943: *msgFlags = 0;
 16716  0039D0  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16717  0039D2  6ED9               	movwf	fsr2l,c
 16718  0039D4  6ADA               	clrf	fsr2h,c
 16719  0039D6  6ADF               	clrf	indf2,c
 16720                           
 16721                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16722  0039D8  EE20 F005          	lfsr	2,5
 16723  0039DC  5020               	movf	ECANReceiveMessage@ptr,w,c
 16724  0039DE  26D9               	addwf	fsr2l,f,c
 16725  0039E0  5021               	movf	ECANReceiveMessage@ptr+1,w,c
 16726  0039E2  22DA               	addwfc	fsr2h,f,c
 16727  0039E4  50DF               	movf	indf2,w,c
 16728  0039E6  6E1F               	movwf	ECANReceiveMessage@temp,c
 16729                           
 16730                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16731  0039E8  501F               	movf	ECANReceiveMessage@temp,w,c
 16732  0039EA  0B0F               	andlw	15
 16733  0039EC  C017  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
 16734  0039F0  C018  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
 16735  0039F4  6EDF               	movwf	indf2,c
 16736                           
 16737                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16738  0039F6  AC1F               	btfss	ECANReceiveMessage@temp,6,c
 16739  0039F8  D005               	goto	l864
 16740                           
 16741                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16742  0039FA  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16743  0039FC  6ED9               	movwf	fsr2l,c
 16744  0039FE  6ADA               	clrf	fsr2h,c
 16745  003A00  0E00               	movlw	0
 16746  003A02  8CDB               	bsf	plusw2,6,c
 16747  003A04                     l864:
 16748                           
 16749                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16750  003A04  EE20 F002          	lfsr	2,2
 16751  003A08  5020               	movf	ECANReceiveMessage@ptr,w,c
 16752  003A0A  26D9               	addwf	fsr2l,f,c
 16753  003A0C  5021               	movf	ECANReceiveMessage@ptr+1,w,c
 16754  003A0E  22DA               	addwfc	fsr2h,f,c
 16755  003A10  50DF               	movf	indf2,w,c
 16756  003A12  6E1F               	movwf	ECANReceiveMessage@temp,c
 16757                           
 16758                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16759  003A14  A61F               	btfss	ECANReceiveMessage@temp,3,c
 16760  003A16  D008               	goto	l865
 16761                           
 16762                           ;ECAN.c: 956: {
 16763                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16764  003A18  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16765  003A1A  6ED9               	movwf	fsr2l,c
 16766  003A1C  6ADA               	clrf	fsr2h,c
 16767  003A1E  0E00               	movlw	0
 16768  003A20  8ADB               	bsf	plusw2,5,c
 16769                           
 16770                           ;ECAN.c: 958: temp.Val = 1;
 16771  003A22  0E01               	movlw	1
 16772  003A24  6E1F               	movwf	ECANReceiveMessage@temp,c
 16773                           
 16774                           ;ECAN.c: 959: }
 16775  003A26  D001               	goto	l8315
 16776  003A28                     l865:
 16777                           
 16778                           ;ECAN.c: 960: else
 16779                           ;ECAN.c: 961: temp.Val = 0;
 16780  003A28  6A1F               	clrf	ECANReceiveMessage@temp,c
 16781  003A2A                     l8315:
 16782                           
 16783                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16784  003A2A  2820               	incf	ECANReceiveMessage@ptr,w,c
 16785  003A2C  6E0E               	movwf	?__RegsToCANID,c
 16786  003A2E  0E00               	movlw	0
 16787  003A30  2021               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16788  003A32  6E0F               	movwf	?__RegsToCANID+1,c
 16789  003A34  C01C  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16790  003A38  C01F  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16791  003A3C  ECCF  F01F         	call	__RegsToCANID	;wreg free
 16792                           
 16793                           ;ECAN.c: 966: ptr += 6;
 16794  003A40  0E06               	movlw	6
 16795  003A42  2620               	addwf	ECANReceiveMessage@ptr,f,c
 16796  003A44  0E00               	movlw	0
 16797  003A46  2221               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16798                           
 16799                           ;ECAN.c: 967: temp.Val = *dataLen;
 16800  003A48  C017  FFD9         	movff	ECANReceiveMessage@dataLen,fsr2l
 16801  003A4C  C018  FFDA         	movff	ECANReceiveMessage@dataLen+1,fsr2h
 16802  003A50  50DF               	movf	indf2,w,c
 16803  003A52  6E1F               	movwf	ECANReceiveMessage@temp,c
 16804                           
 16805                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16806  003A54  6A1D               	clrf	ECANReceiveMessage@i,c
 16807  003A56  D00F               	goto	l8331
 16808  003A58                     l8323:
 16809                           
 16810                           ;ECAN.c: 969: *data++ = *ptr++;
 16811  003A58  C020  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16812  003A5C  C021  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16813  003A60  C015  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 16814  003A64  C016  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 16815  003A68  CFDF FFE7          	movff	indf2,indf1
 16816  003A6C  4A20               	infsnz	ECANReceiveMessage@ptr,f,c
 16817  003A6E  2A21               	incf	ECANReceiveMessage@ptr+1,f,c
 16818  003A70  4A15               	infsnz	ECANReceiveMessage@data,f,c
 16819  003A72  2A16               	incf	ECANReceiveMessage@data+1,f,c
 16820  003A74  2A1D               	incf	ECANReceiveMessage@i,f,c
 16821  003A76                     l8331:
 16822  003A76  501F               	movf	ECANReceiveMessage@temp,w,c
 16823  003A78  5C1D               	subwf	ECANReceiveMessage@i,w,c
 16824  003A7A  E3EE               	bnc	l8323
 16825                           
 16826                           ;ECAN.c: 972: if ( IRXIF )
 16827  003A7C  AEA4               	btfss	4004,7,c	;volatile
 16828  003A7E  D006               	goto	l8337
 16829                           
 16830                           ;ECAN.c: 973: {
 16831                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16832  003A80  5019               	movf	ECANReceiveMessage@msgFlags,w,c
 16833  003A82  6ED9               	movwf	fsr2l,c
 16834  003A84  6ADA               	clrf	fsr2h,c
 16835  003A86  0E00               	movlw	0
 16836  003A88  88DB               	bsf	plusw2,4,c
 16837                           
 16838                           ;ECAN.c: 975: IRXIF = 0;
 16839  003A8A  9EA4               	bcf	4004,7,c	;volatile
 16840  003A8C                     l8337:
 16841                           
 16842                           ;ECAN.c: 976: }
 16843                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16844  003A8C  C01A  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16845  003A90  C01B  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16846  003A94  0E7F               	movlw	127
 16847  003A96  16DF               	andwf	indf2,f,c
 16848                           
 16849                           ;ECAN.c: 983: if ( mode == 0x80 )
 16850  003A98  501E               	movf	ECANReceiveMessage@mode,w,c
 16851  003A9A  0A80               	xorlw	128
 16852  003A9C  B4D8               	btfsc	status,2,c
 16853                           
 16854                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16855  003A9E  9E74               	bcf	3956,7,c	;volatile
 16856                           
 16857                           ;ECAN.c: 990: return TRUE;
 16858  003AA0  0E01               	movlw	1
 16859  003AA2                     l840:
 16860  003AA2  0012               	return	
 16861  003AA4                     __end_of_ECANReceiveMessage:
 16862                           	opt stack 0
 16863                           tblptru	equ	0xFF8
 16864                           tblptrh	equ	0xFF7
 16865                           tblptrl	equ	0xFF6
 16866                           tablat	equ	0xFF5
 16867                           prodh	equ	0xFF4
 16868                           prodl	equ	0xFF3
 16869                           postinc0	equ	0xFEE
 16870                           wreg	equ	0xFE8
 16871                           indf1	equ	0xFE7
 16872                           postdec1	equ	0xFE5
 16873                           fsr1h	equ	0xFE2
 16874                           fsr1l	equ	0xFE1
 16875                           indf2	equ	0xFDF
 16876                           postinc2	equ	0xFDE
 16877                           postdec2	equ	0xFDD
 16878                           plusw2	equ	0xFDB
 16879                           fsr2h	equ	0xFDA
 16880                           fsr2l	equ	0xFD9
 16881                           status	equ	0xFD8
 16882                           
 16883 ;; *************** function __RegsToCANID *****************
 16884 ;; Defined at:
 16885 ;;		line 1156 in file "../ECAN.c"
 16886 ;; Parameters:    Size  Location     Type
 16887 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16888 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16889 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16890 ;;  val             1   15[COMRAM] PTR unsigned long 
 16891 ;;		 -> getVSCPFrame@id(4), 
 16892 ;;  type            1   16[COMRAM] unsigned char 
 16893 ;; Auto vars:     Size  Location     Type
 16894 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 16895 ;;		 -> getVSCPFrame@id(4), 
 16896 ;; Return value:  Size  Location     Type
 16897 ;;		None               void
 16898 ;; Registers used:
 16899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16900 ;; Tracked objects:
 16901 ;;		On entry : 0/1
 16902 ;;		On exit  : 0/0
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16905 ;;      Params:         4       0       0       0       0       0       0
 16906 ;;      Locals:         1       0       0       0       0       0       0
 16907 ;;      Temps:          2       0       0       0       0       0       0
 16908 ;;      Totals:         7       0       0       0       0       0       0
 16909 ;;Total ram usage:        7 bytes
 16910 ;; Hardware stack levels used:    1
 16911 ;; Hardware stack levels required when called:    2
 16912 ;; This function calls:
 16913 ;;		Nothing
 16914 ;; This function is called by:
 16915 ;;		_ECANReceiveMessage
 16916 ;; This function uses a non-reentrant model
 16917 ;;
 16918                           
 16919                           	psect	text79
 16920  003F9E                     __ptext79:
 16921                           	opt stack 0
 16922  003F9E                     __RegsToCANID:
 16923                           	opt stack 24
 16924                           
 16925                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 16926                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 16927                           
 16928                           ;incstack = 0
 16929                           ;incstack = 0
 16930  003F9E  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 16931                           
 16932                           ;ECAN.c: 1161: if ( type == 0 )
 16933  003FA2  6611               	tstfsz	__RegsToCANID@type,c
 16934  003FA4  D046               	goto	l8407
 16935                           
 16936                           ;ECAN.c: 1162: {
 16937                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 16938  003FA6  5014               	movf	__RegsToCANID@Value,w,c
 16939  003FA8  6ED9               	movwf	fsr2l,c
 16940  003FAA  6ADA               	clrf	fsr2h,c
 16941  003FAC  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16942  003FB0  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16943  003FB4  50E7               	movf	indf1,w,c
 16944  003FB6  6E12               	movwf	??__RegsToCANID& (0+255),c
 16945  003FB8  90D8               	bcf	status,0,c
 16946  003FBA  3612               	rlcf	??__RegsToCANID,f,c
 16947  003FBC  90D8               	bcf	status,0,c
 16948  003FBE  3612               	rlcf	??__RegsToCANID,f,c
 16949  003FC0  90D8               	bcf	status,0,c
 16950  003FC2  3412               	rlcf	??__RegsToCANID,w,c
 16951  003FC4  6EDF               	movwf	indf2,c
 16952                           
 16953                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 16954  003FC6  5014               	movf	__RegsToCANID@Value,w,c
 16955  003FC8  6ED9               	movwf	fsr2l,c
 16956  003FCA  6ADA               	clrf	fsr2h,c
 16957  003FCC  2AD9               	incf	fsr2l,f,c
 16958  003FCE  6ADA               	clrf	fsr2h,c
 16959  003FD0  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 16960  003FD4  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 16961  003FD8  50E7               	movf	indf1,w,c
 16962  003FDA  6E12               	movwf	??__RegsToCANID& (0+255),c
 16963  003FDC  0E05               	movlw	5
 16964  003FDE  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16965  003FE0                     u5935:
 16966  003FE0  90D8               	bcf	status,0,c
 16967  003FE2  3212               	rrcf	??__RegsToCANID,f,c
 16968  003FE4  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16969  003FE6  D7FC               	goto	u5935
 16970  003FE8  5012               	movf	??__RegsToCANID,w,c
 16971  003FEA  6EDF               	movwf	indf2,c
 16972                           
 16973                           ;ECAN.c: 1166: ptr++;
 16974  003FEC  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 16975  003FEE  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 16976                           
 16977                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 16978  003FF0  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 16979  003FF4  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 16980  003FF8  50DF               	movf	indf2,w,c
 16981  003FFA  6E12               	movwf	??__RegsToCANID& (0+255),c
 16982  003FFC  0E05               	movlw	5
 16983  003FFE  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 16984  004000                     u5945:
 16985  004000  90D8               	bcf	status,0,c
 16986  004002  3212               	rrcf	??__RegsToCANID,f,c
 16987  004004  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 16988  004006  D7FC               	goto	u5945
 16989  004008  5014               	movf	__RegsToCANID@Value,w,c
 16990  00400A  6ED9               	movwf	fsr2l,c
 16991  00400C  6ADA               	clrf	fsr2h,c
 16992  00400E  5012               	movf	??__RegsToCANID,w,c
 16993  004010  12DF               	iorwf	indf2,f,c
 16994                           
 16995                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 16996  004012  5014               	movf	__RegsToCANID@Value,w,c
 16997  004014  6ED9               	movwf	fsr2l,c
 16998  004016  6ADA               	clrf	fsr2h,c
 16999  004018  0E02               	movlw	2
 17000  00401A  26D9               	addwf	fsr2l,f,c
 17001  00401C  6ADA               	clrf	fsr2h,c
 17002  00401E  6ADF               	clrf	indf2,c
 17003                           
 17004                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17005  004020  5014               	movf	__RegsToCANID@Value,w,c
 17006  004022  6ED9               	movwf	fsr2l,c
 17007  004024  6ADA               	clrf	fsr2h,c
 17008  004026  0E03               	movlw	3
 17009  004028  26D9               	addwf	fsr2l,f,c
 17010  00402A  6ADA               	clrf	fsr2h,c
 17011  00402C  0E00               	movlw	0
 17012  00402E  6EDF               	movwf	indf2,c
 17013                           
 17014                           ;ECAN.c: 1170: }
 17015  004030  D067               	goto	l887
 17016  004032                     l8407:
 17017                           
 17018                           ;ECAN.c: 1171: else
 17019                           ;ECAN.c: 1172: {
 17020                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17021  004032  5014               	movf	__RegsToCANID@Value,w,c
 17022  004034  6ED9               	movwf	fsr2l,c
 17023  004036  6ADA               	clrf	fsr2h,c
 17024  004038  0E02               	movlw	2
 17025  00403A  26D9               	addwf	fsr2l,f,c
 17026  00403C  6ADA               	clrf	fsr2h,c
 17027  00403E  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17028  004042  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17029  004046  50E7               	movf	indf1,w,c
 17030  004048  6E12               	movwf	??__RegsToCANID& (0+255),c
 17031  00404A  0E05               	movlw	5
 17032  00404C  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17033  00404E                     u5955:
 17034  00404E  90D8               	bcf	status,0,c
 17035  004050  3612               	rlcf	??__RegsToCANID,f,c
 17036  004052  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17037  004054  D7FC               	goto	u5955
 17038  004056  5012               	movf	??__RegsToCANID,w,c
 17039  004058  6EDF               	movwf	indf2,c
 17040                           
 17041                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17042  00405A  5014               	movf	__RegsToCANID@Value,w,c
 17043  00405C  6ED9               	movwf	fsr2l,c
 17044  00405E  6ADA               	clrf	fsr2h,c
 17045  004060  0E03               	movlw	3
 17046  004062  26D9               	addwf	fsr2l,f,c
 17047  004064  6ADA               	clrf	fsr2h,c
 17048  004066  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17049  00406A  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17050  00406E  50E7               	movf	indf1,w,c
 17051  004070  6E12               	movwf	??__RegsToCANID& (0+255),c
 17052  004072  90D8               	bcf	status,0,c
 17053  004074  3212               	rrcf	??__RegsToCANID,f,c
 17054  004076  90D8               	bcf	status,0,c
 17055  004078  3212               	rrcf	??__RegsToCANID,f,c
 17056  00407A  90D8               	bcf	status,0,c
 17057  00407C  3012               	rrcf	??__RegsToCANID,w,c
 17058  00407E  6EDF               	movwf	indf2,c
 17059                           
 17060                           ;ECAN.c: 1176: ptr++;
 17061  004080  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17062  004082  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17063                           
 17064                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17065  004084  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17066  004088  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17067  00408C  50DF               	movf	indf2,w,c
 17068  00408E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17069  004090  0E03               	movlw	3
 17070  004092  1612               	andwf	??__RegsToCANID,f,c
 17071  004094  5014               	movf	__RegsToCANID@Value,w,c
 17072  004096  6ED9               	movwf	fsr2l,c
 17073  004098  6ADA               	clrf	fsr2h,c
 17074  00409A  0E02               	movlw	2
 17075  00409C  26D9               	addwf	fsr2l,f,c
 17076  00409E  6ADA               	clrf	fsr2h,c
 17077  0040A0  5012               	movf	??__RegsToCANID,w,c
 17078  0040A2  12DF               	iorwf	indf2,f,c
 17079                           
 17080                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17081  0040A4  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17082  0040A8  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17083  0040AC  50DF               	movf	indf2,w,c
 17084  0040AE  6E12               	movwf	??__RegsToCANID& (0+255),c
 17085  0040B0  90D8               	bcf	status,0,c
 17086  0040B2  3212               	rrcf	??__RegsToCANID,f,c
 17087  0040B4  90D8               	bcf	status,0,c
 17088  0040B6  3212               	rrcf	??__RegsToCANID,f,c
 17089  0040B8  90D8               	bcf	status,0,c
 17090  0040BA  3212               	rrcf	??__RegsToCANID,f,c
 17091  0040BC  0E1C               	movlw	28
 17092  0040BE  1612               	andwf	??__RegsToCANID,f,c
 17093  0040C0  5014               	movf	__RegsToCANID@Value,w,c
 17094  0040C2  6ED9               	movwf	fsr2l,c
 17095  0040C4  6ADA               	clrf	fsr2h,c
 17096  0040C6  0E02               	movlw	2
 17097  0040C8  26D9               	addwf	fsr2l,f,c
 17098  0040CA  6ADA               	clrf	fsr2h,c
 17099  0040CC  5012               	movf	??__RegsToCANID,w,c
 17100  0040CE  12DF               	iorwf	indf2,f,c
 17101                           
 17102                           ;ECAN.c: 1180: ptr++;
 17103  0040D0  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17104  0040D2  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17105                           
 17106                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17107  0040D4  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17108  0040D8  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17109  0040DC  5014               	movf	__RegsToCANID@Value,w,c
 17110  0040DE  6EE1               	movwf	fsr1l,c
 17111  0040E0  6AE2               	clrf	fsr1h,c
 17112  0040E2  2AE1               	incf	fsr1l,f,c
 17113  0040E4  6AE2               	clrf	fsr1h,c
 17114  0040E6  CFDF FFE7          	movff	indf2,indf1
 17115                           
 17116                           ;ECAN.c: 1182: ptr++;
 17117  0040EA  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17118  0040EC  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17119                           
 17120                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17121  0040EE  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17122  0040F2  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17123  0040F6  5014               	movf	__RegsToCANID@Value,w,c
 17124  0040F8  6EE1               	movwf	fsr1l,c
 17125  0040FA  6AE2               	clrf	fsr1h,c
 17126  0040FC  CFDF FFE7          	movff	indf2,indf1
 17127  004100                     l887:
 17128  004100  0012               	return	
 17129  004102                     __end_of__RegsToCANID:
 17130                           	opt stack 0
 17131                           tblptru	equ	0xFF8
 17132                           tblptrh	equ	0xFF7
 17133                           tblptrl	equ	0xFF6
 17134                           tablat	equ	0xFF5
 17135                           prodh	equ	0xFF4
 17136                           prodl	equ	0xFF3
 17137                           postinc0	equ	0xFEE
 17138                           wreg	equ	0xFE8
 17139                           indf1	equ	0xFE7
 17140                           postdec1	equ	0xFE5
 17141                           fsr1h	equ	0xFE2
 17142                           fsr1l	equ	0xFE1
 17143                           indf2	equ	0xFDF
 17144                           postinc2	equ	0xFDE
 17145                           postdec2	equ	0xFDD
 17146                           plusw2	equ	0xFDB
 17147                           fsr2h	equ	0xFDA
 17148                           fsr2l	equ	0xFD9
 17149                           status	equ	0xFD8
 17150                           
 17151 ;; *************** function __ECANPointBuffer *****************
 17152 ;; Defined at:
 17153 ;;		line 1207 in file "../ECAN.c"
 17154 ;; Parameters:    Size  Location     Type
 17155 ;;  b               1    wreg     unsigned char 
 17156 ;; Auto vars:     Size  Location     Type
 17157 ;;  b               1   16[COMRAM] unsigned char 
 17158 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17159 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17160 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17161 ;; Return value:  Size  Location     Type
 17162 ;;                  2   13[COMRAM] PTR unsigned char 
 17163 ;; Registers used:
 17164 ;;		wreg, status,2, status,0
 17165 ;; Tracked objects:
 17166 ;;		On entry : F/1
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17170 ;;      Params:         3       0       0       0       0       0       0
 17171 ;;      Locals:         3       0       0       0       0       0       0
 17172 ;;      Temps:          0       0       0       0       0       0       0
 17173 ;;      Totals:         6       0       0       0       0       0       0
 17174 ;;Total ram usage:        6 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    2
 17177 ;; This function calls:
 17178 ;;		Nothing
 17179 ;; This function is called by:
 17180 ;;		_ECANReceiveMessage
 17181 ;; This function uses a non-reentrant model
 17182 ;;
 17183                           
 17184                           	psect	text80
 17185  0052EA                     __ptext80:
 17186                           	opt stack 0
 17187  0052EA                     __ECANPointBuffer:
 17188                           	opt stack 24
 17189                           
 17190                           ;incstack = 0
 17191                           ;incstack = 0
 17192                           ;__ECANPointBuffer@b stored from wreg
 17193  0052EA  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17194                           
 17195                           ; BSR set to: 1
 17196                           ;ECAN.c: 1208: BYTE* pt;
 17197                           ;ECAN.c: 1210: switch(b)
 17198  0052EE  D024               	goto	l8393
 17199  0052F0                     l8375:
 17200                           
 17201                           ; BSR set to: 1
 17202                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17203  0052F0  0E0F               	movlw	15	;volatile
 17204  0052F2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17205  0052F4  0E60               	movlw	96	;volatile
 17206  0052F6  D01E               	goto	L50
 17207  0052F8                     l8377:
 17208                           
 17209                           ; BSR set to: 1
 17210                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17211  0052F8  010F               	movlb	15	; () banked
 17212  0052FA  0E0F               	movlw	15	;volatile
 17213  0052FC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17214  0052FE  0E50               	movlw	80	;volatile
 17215  005300  D019               	goto	L50
 17216  005302                     l8379:
 17217                           
 17218                           ; BSR set to: 1
 17219                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17220  005302  010E               	movlb	14	; () banked
 17221  005304  0E0E               	movlw	14	;volatile
 17222  005306  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17223  005308  0E20               	movlw	32	;volatile
 17224  00530A  D014               	goto	L50
 17225  00530C                     l8381:
 17226                           
 17227                           ; BSR set to: 1
 17228                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17229  00530C  010E               	movlb	14	; () banked
 17230  00530E  0E0E               	movlw	14	;volatile
 17231  005310  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17232  005312  0E30               	movlw	48	;volatile
 17233  005314  D00F               	goto	L50
 17234  005316                     l8383:
 17235                           
 17236                           ; BSR set to: 1
 17237                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17238  005316  010E               	movlb	14	; () banked
 17239  005318  0E0E               	movlw	14	;volatile
 17240  00531A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17241  00531C  0E40               	movlw	64	;volatile
 17242  00531E  D00A               	goto	L50
 17243  005320                     l8385:
 17244                           
 17245                           ; BSR set to: 1
 17246                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17247  005320  010E               	movlb	14	; () banked
 17248  005322  0E0E               	movlw	14	;volatile
 17249  005324  D7EB               	goto	L51
 17250  005326                     l8387:
 17251                           
 17252                           ; BSR set to: 1
 17253                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17254  005326  010E               	movlb	14	; () banked
 17255  005328  0E0E               	movlw	14	;volatile
 17256  00532A  D7E3               	goto	L52
 17257  00532C                     l8389:
 17258                           
 17259                           ; BSR set to: 1
 17260                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17261  00532C  010E               	movlb	14	; () banked
 17262  00532E  0E0E               	movlw	14	;volatile
 17263  005330  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17264  005332  0E70               	movlw	112	;volatile
 17265  005334                     L50:
 17266  005334  6E12               	movwf	__ECANPointBuffer@pt,c
 17267                           
 17268                           ;ECAN.c: 1235: break;
 17269  005336  D00F               	goto	l892
 17270  005338                     l8393:
 17271                           
 17272                           ; BSR set to: 1
 17273  005338  5011               	movf	__ECANPointBuffer@b,w,c
 17274                           
 17275                           ; Switch size 1, requested type "speed"
 17276                           ; Number of cases is 7, Range of values is 0 to 6
 17277                           ; switch strategies available:
 17278                           ; Name         Instructions Cycles
 17279                           ; simple_byte           22    12 (average)
 17280                           ;	Chosen strategy is simple_byte
 17281  00533A  E0DA               	bz	l8375
 17282  00533C  0A01               	xorlw	1	; case 1
 17283  00533E  E0DC               	bz	l8377
 17284  005340  0A03               	xorlw	3	; case 2
 17285  005342  E0DF               	bz	l8379
 17286  005344  0A01               	xorlw	1	; case 3
 17287  005346  E0E2               	bz	l8381
 17288  005348  0A07               	xorlw	7	; case 4
 17289  00534A  E0E5               	bz	l8383
 17290  00534C  0A01               	xorlw	1	; case 5
 17291  00534E  E0E8               	bz	l8385
 17292  005350  0A03               	xorlw	3	; case 6
 17293  005352  E0E9               	bz	l8387
 17294  005354  D7EB               	goto	l8389
 17295  005356                     l892:
 17296                           
 17297                           ;ECAN.c: 1237: return (pt);
 17298  005356  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17299  00535A  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17300  00535E  0012               	return	
 17301  005360                     __end_of__ECANPointBuffer:
 17302                           	opt stack 0
 17303                           tblptru	equ	0xFF8
 17304                           tblptrh	equ	0xFF7
 17305                           tblptrl	equ	0xFF6
 17306                           tablat	equ	0xFF5
 17307                           prodh	equ	0xFF4
 17308                           prodl	equ	0xFF3
 17309                           postinc0	equ	0xFEE
 17310                           wreg	equ	0xFE8
 17311                           indf1	equ	0xFE7
 17312                           postdec1	equ	0xFE5
 17313                           fsr1h	equ	0xFE2
 17314                           fsr1l	equ	0xFE1
 17315                           indf2	equ	0xFDF
 17316                           postinc2	equ	0xFDE
 17317                           postdec2	equ	0xFDD
 17318                           plusw2	equ	0xFDB
 17319                           fsr2h	equ	0xFDA
 17320                           fsr2l	equ	0xFD9
 17321                           status	equ	0xFD8
 17322                           
 17323 ;; *************** function _vscp_check_pstorage *****************
 17324 ;; Defined at:
 17325 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17326 ;; Parameters:    Size  Location     Type
 17327 ;;		None
 17328 ;; Auto vars:     Size  Location     Type
 17329 ;;		None
 17330 ;; Return value:  Size  Location     Type
 17331 ;;                  1    wreg      unsigned char 
 17332 ;; Registers used:
 17333 ;;		wreg, status,2, status,0, cstack
 17334 ;; Tracked objects:
 17335 ;;		On entry : 0/0
 17336 ;;		On exit  : 0/0
 17337 ;;		Unchanged: 0/0
 17338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17339 ;;      Params:         0       0       0       0       0       0       0
 17340 ;;      Locals:         0       0       0       0       0       0       0
 17341 ;;      Temps:          0       0       0       0       0       0       0
 17342 ;;      Totals:         0       0       0       0       0       0       0
 17343 ;;Total ram usage:        0 bytes
 17344 ;; Hardware stack levels used:    1
 17345 ;; Hardware stack levels required when called:    4
 17346 ;; This function calls:
 17347 ;;		_vscp_writeNicknamePermanent
 17348 ;;		_vscp_getSegmentCRC
 17349 ;;		_vscp_setSegmentCRC
 17350 ;;		_vscp_setControlByte
 17351 ;; This function is called by:
 17352 ;;		_main
 17353 ;; This function uses a non-reentrant model
 17354 ;;
 17355                           
 17356                           	psect	text81
 17357  005A8C                     __ptext81:
 17358                           	opt stack 0
 17359  005A8C                     _vscp_check_pstorage:
 17360                           	opt stack 26
 17361                           
 17362                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17363                           
 17364                           ;incstack = 0
 17365                           ;incstack = 0
 17366  005A8C  EC5F  F02E         	call	_vscp_getSegmentCRC	;wreg free
 17367  005A90  0BC0               	andlw	192
 17368  005A92  0A40               	xorlw	64
 17369  005A94  E102               	bnz	l9491
 17370                           
 17371                           ;vscp_firmware.c: 172: return !0;
 17372  005A96  0E01               	movlw	1
 17373  005A98  D00A               	goto	l1033
 17374  005A9A                     l9491:
 17375                           
 17376                           ;vscp_firmware.c: 173: }
 17377                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17378  005A9A  0EFF               	movlw	255
 17379  005A9C  EC2B  F02E         	call	_vscp_writeNicknamePermanent
 17380                           
 17381                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17382  005AA0  0E00               	movlw	0
 17383  005AA2  EC22  F02E         	call	_vscp_setSegmentCRC
 17384                           
 17385                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17386  005AA6  0EA0               	movlw	160
 17387  005AA8  EC19  F02E         	call	_vscp_setControlByte
 17388                           
 17389                           ;vscp_firmware.c: 185: return 0;
 17390  005AAC  0E00               	movlw	0
 17391  005AAE                     l1033:
 17392  005AAE  0012               	return	
 17393  005AB0                     __end_of_vscp_check_pstorage:
 17394                           	opt stack 0
 17395                           tblptru	equ	0xFF8
 17396                           tblptrh	equ	0xFF7
 17397                           tblptrl	equ	0xFF6
 17398                           tablat	equ	0xFF5
 17399                           prodh	equ	0xFF4
 17400                           prodl	equ	0xFF3
 17401                           postinc0	equ	0xFEE
 17402                           wreg	equ	0xFE8
 17403                           indf1	equ	0xFE7
 17404                           postdec1	equ	0xFE5
 17405                           fsr1h	equ	0xFE2
 17406                           fsr1l	equ	0xFE1
 17407                           indf2	equ	0xFDF
 17408                           postinc2	equ	0xFDE
 17409                           postdec2	equ	0xFDD
 17410                           plusw2	equ	0xFDB
 17411                           fsr2h	equ	0xFDA
 17412                           fsr2l	equ	0xFD9
 17413                           status	equ	0xFD8
 17414                           
 17415 ;; *************** function _vscp_setControlByte *****************
 17416 ;; Defined at:
 17417 ;;		line 2797 in file "../main.c"
 17418 ;; Parameters:    Size  Location     Type
 17419 ;;  ctrl            1    wreg     unsigned char 
 17420 ;; Auto vars:     Size  Location     Type
 17421 ;;  ctrl            1   16[COMRAM] unsigned char 
 17422 ;; Return value:  Size  Location     Type
 17423 ;;		None               void
 17424 ;; Registers used:
 17425 ;;		wreg, status,2, cstack
 17426 ;; Tracked objects:
 17427 ;;		On entry : 0/0
 17428 ;;		On exit  : 0/0
 17429 ;;		Unchanged: 0/0
 17430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17431 ;;      Params:         0       0       0       0       0       0       0
 17432 ;;      Locals:         1       0       0       0       0       0       0
 17433 ;;      Temps:          0       0       0       0       0       0       0
 17434 ;;      Totals:         1       0       0       0       0       0       0
 17435 ;;Total ram usage:        1 bytes
 17436 ;; Hardware stack levels used:    1
 17437 ;; Hardware stack levels required when called:    3
 17438 ;; This function calls:
 17439 ;;		_writeEEPROM
 17440 ;; This function is called by:
 17441 ;;		_vscp_check_pstorage
 17442 ;; This function uses a non-reentrant model
 17443 ;;
 17444                           
 17445                           	psect	text82
 17446  005C32                     __ptext82:
 17447                           	opt stack 0
 17448  005C32                     _vscp_setControlByte:
 17449                           	opt stack 26
 17450                           
 17451                           ;incstack = 0
 17452                           ;incstack = 0
 17453                           ;vscp_setControlByte@ctrl stored from wreg
 17454  005C32  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17455                           
 17456                           ;main.c: 2798: writeEEPROM(0x03, ctrl);
 17457  005C36  6A0F               	clrf	?_writeEEPROM+1,c
 17458  005C38  0E03               	movlw	3
 17459  005C3A  6E0E               	movwf	?_writeEEPROM,c
 17460  005C3C  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17461  005C40  EF21  F02D         	goto	_writeEEPROM	;wreg free
 17462  005C44                     __end_of_vscp_setControlByte:
 17463                           	opt stack 0
 17464                           tblptru	equ	0xFF8
 17465                           tblptrh	equ	0xFF7
 17466                           tblptrl	equ	0xFF6
 17467                           tablat	equ	0xFF5
 17468                           prodh	equ	0xFF4
 17469                           prodl	equ	0xFF3
 17470                           postinc0	equ	0xFEE
 17471                           wreg	equ	0xFE8
 17472                           indf1	equ	0xFE7
 17473                           postdec1	equ	0xFE5
 17474                           fsr1h	equ	0xFE2
 17475                           fsr1l	equ	0xFE1
 17476                           indf2	equ	0xFDF
 17477                           postinc2	equ	0xFDE
 17478                           postdec2	equ	0xFDD
 17479                           plusw2	equ	0xFDB
 17480                           fsr2h	equ	0xFDA
 17481                           fsr2l	equ	0xFD9
 17482                           status	equ	0xFD8
 17483                           
 17484 ;; *************** function _vscp_setSegmentCRC *****************
 17485 ;; Defined at:
 17486 ;;		line 2788 in file "../main.c"
 17487 ;; Parameters:    Size  Location     Type
 17488 ;;  crc             1    wreg     unsigned char 
 17489 ;; Auto vars:     Size  Location     Type
 17490 ;;  crc             1   16[COMRAM] unsigned char 
 17491 ;; Return value:  Size  Location     Type
 17492 ;;		None               void
 17493 ;; Registers used:
 17494 ;;		wreg, status,2, cstack
 17495 ;; Tracked objects:
 17496 ;;		On entry : 0/0
 17497 ;;		On exit  : 0/0
 17498 ;;		Unchanged: 0/0
 17499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17500 ;;      Params:         0       0       0       0       0       0       0
 17501 ;;      Locals:         1       0       0       0       0       0       0
 17502 ;;      Temps:          0       0       0       0       0       0       0
 17503 ;;      Totals:         1       0       0       0       0       0       0
 17504 ;;Total ram usage:        1 bytes
 17505 ;; Hardware stack levels used:    1
 17506 ;; Hardware stack levels required when called:    3
 17507 ;; This function calls:
 17508 ;;		_writeEEPROM
 17509 ;; This function is called by:
 17510 ;;		_vscp_check_pstorage
 17511 ;;		_vscp_handleProbeState
 17512 ;;		_vscp_handleHeartbeat
 17513 ;;		_vscp_handleSetNickname
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           	psect	text83
 17518  005C44                     __ptext83:
 17519                           	opt stack 0
 17520  005C44                     _vscp_setSegmentCRC:
 17521                           	opt stack 25
 17522                           
 17523                           ;incstack = 0
 17524                           ;incstack = 0
 17525                           ;vscp_setSegmentCRC@crc stored from wreg
 17526  005C44  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17527                           
 17528                           ;main.c: 2789: writeEEPROM(0x02, crc);
 17529  005C48  6A0F               	clrf	?_writeEEPROM+1,c
 17530  005C4A  0E02               	movlw	2
 17531  005C4C  6E0E               	movwf	?_writeEEPROM,c
 17532  005C4E  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17533  005C52  EF21  F02D         	goto	_writeEEPROM	;wreg free
 17534  005C56                     __end_of_vscp_setSegmentCRC:
 17535                           	opt stack 0
 17536                           tblptru	equ	0xFF8
 17537                           tblptrh	equ	0xFF7
 17538                           tblptrl	equ	0xFF6
 17539                           tablat	equ	0xFF5
 17540                           prodh	equ	0xFF4
 17541                           prodl	equ	0xFF3
 17542                           postinc0	equ	0xFEE
 17543                           wreg	equ	0xFE8
 17544                           indf1	equ	0xFE7
 17545                           postdec1	equ	0xFE5
 17546                           fsr1h	equ	0xFE2
 17547                           fsr1l	equ	0xFE1
 17548                           indf2	equ	0xFDF
 17549                           postinc2	equ	0xFDE
 17550                           postdec2	equ	0xFDD
 17551                           plusw2	equ	0xFDB
 17552                           fsr2h	equ	0xFDA
 17553                           fsr2l	equ	0xFD9
 17554                           status	equ	0xFD8
 17555                           
 17556 ;; *************** function _vscp_getSegmentCRC *****************
 17557 ;; Defined at:
 17558 ;;		line 2779 in file "../main.c"
 17559 ;; Parameters:    Size  Location     Type
 17560 ;;		None
 17561 ;; Auto vars:     Size  Location     Type
 17562 ;;		None
 17563 ;; Return value:  Size  Location     Type
 17564 ;;                  1    wreg      unsigned char 
 17565 ;; Registers used:
 17566 ;;		wreg, status,2, cstack
 17567 ;; Tracked objects:
 17568 ;;		On entry : 0/1
 17569 ;;		On exit  : 0/0
 17570 ;;		Unchanged: 0/0
 17571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17572 ;;      Params:         0       0       0       0       0       0       0
 17573 ;;      Locals:         0       0       0       0       0       0       0
 17574 ;;      Temps:          0       0       0       0       0       0       0
 17575 ;;      Totals:         0       0       0       0       0       0       0
 17576 ;;Total ram usage:        0 bytes
 17577 ;; Hardware stack levels used:    1
 17578 ;; Hardware stack levels required when called:    3
 17579 ;; This function calls:
 17580 ;;		_readEEPROM
 17581 ;; This function is called by:
 17582 ;;		_vscp_check_pstorage
 17583 ;;		_vscp_handleHeartbeat
 17584 ;; This function uses a non-reentrant model
 17585 ;;
 17586                           
 17587                           	psect	text84
 17588  005CBE                     __ptext84:
 17589                           	opt stack 0
 17590  005CBE                     _vscp_getSegmentCRC:
 17591                           	opt stack 25
 17592                           
 17593                           ;main.c: 2780: return readEEPROM(0x02);
 17594                           
 17595                           ;incstack = 0
 17596                           ;incstack = 0
 17597  005CBE  6A17               	clrf	?_readEEPROM+1,c
 17598  005CC0  0E02               	movlw	2
 17599  005CC2  6E16               	movwf	?_readEEPROM,c
 17600  005CC4  EF0F  F02E         	goto	_readEEPROM	;wreg free
 17601  005CC8                     __end_of_vscp_getSegmentCRC:
 17602                           	opt stack 0
 17603                           tblptru	equ	0xFF8
 17604                           tblptrh	equ	0xFF7
 17605                           tblptrl	equ	0xFF6
 17606                           tablat	equ	0xFF5
 17607                           prodh	equ	0xFF4
 17608                           prodl	equ	0xFF3
 17609                           postinc0	equ	0xFEE
 17610                           wreg	equ	0xFE8
 17611                           indf1	equ	0xFE7
 17612                           postdec1	equ	0xFE5
 17613                           fsr1h	equ	0xFE2
 17614                           fsr1l	equ	0xFE1
 17615                           indf2	equ	0xFDF
 17616                           postinc2	equ	0xFDE
 17617                           postdec2	equ	0xFDD
 17618                           plusw2	equ	0xFDB
 17619                           fsr2h	equ	0xFDA
 17620                           fsr2l	equ	0xFD9
 17621                           status	equ	0xFD8
 17622                           
 17623 ;; *************** function _vscp_writeNicknamePermanent *****************
 17624 ;; Defined at:
 17625 ;;		line 2770 in file "../main.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;  nickname        1    wreg     unsigned char 
 17628 ;; Auto vars:     Size  Location     Type
 17629 ;;  nickname        1   16[COMRAM] unsigned char 
 17630 ;; Return value:  Size  Location     Type
 17631 ;;		None               void
 17632 ;; Registers used:
 17633 ;;		wreg, status,2, cstack
 17634 ;; Tracked objects:
 17635 ;;		On entry : 0/0
 17636 ;;		On exit  : 0/0
 17637 ;;		Unchanged: 0/0
 17638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17639 ;;      Params:         0       0       0       0       0       0       0
 17640 ;;      Locals:         1       0       0       0       0       0       0
 17641 ;;      Temps:          0       0       0       0       0       0       0
 17642 ;;      Totals:         1       0       0       0       0       0       0
 17643 ;;Total ram usage:        1 bytes
 17644 ;; Hardware stack levels used:    1
 17645 ;; Hardware stack levels required when called:    3
 17646 ;; This function calls:
 17647 ;;		_writeEEPROM
 17648 ;; This function is called by:
 17649 ;;		_vscp_check_pstorage
 17650 ;;		_vscp_handleProbeState
 17651 ;;		_vscp_handleHeartbeat
 17652 ;;		_vscp_handleSetNickname
 17653 ;;		_vscp_handleDropNickname
 17654 ;; This function uses a non-reentrant model
 17655 ;;
 17656                           
 17657                           	psect	text85
 17658  005C56                     __ptext85:
 17659                           	opt stack 0
 17660  005C56                     _vscp_writeNicknamePermanent:
 17661                           	opt stack 25
 17662                           
 17663                           ;incstack = 0
 17664                           ;incstack = 0
 17665                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17666  005C56  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17667                           
 17668                           ;main.c: 2771: writeEEPROM( 0x01, nickname );
 17669  005C5A  6A0F               	clrf	?_writeEEPROM+1,c
 17670  005C5C  0E01               	movlw	1
 17671  005C5E  6E0E               	movwf	?_writeEEPROM,c
 17672  005C60  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17673  005C64  EF21  F02D         	goto	_writeEEPROM	;wreg free
 17674  005C68                     __end_of_vscp_writeNicknamePermanent:
 17675                           	opt stack 0
 17676                           tblptru	equ	0xFF8
 17677                           tblptrh	equ	0xFF7
 17678                           tblptrl	equ	0xFF6
 17679                           tablat	equ	0xFF5
 17680                           prodh	equ	0xFF4
 17681                           prodl	equ	0xFF3
 17682                           postinc0	equ	0xFEE
 17683                           wreg	equ	0xFE8
 17684                           indf1	equ	0xFE7
 17685                           postdec1	equ	0xFE5
 17686                           fsr1h	equ	0xFE2
 17687                           fsr1l	equ	0xFE1
 17688                           indf2	equ	0xFDF
 17689                           postinc2	equ	0xFDE
 17690                           postdec2	equ	0xFDD
 17691                           plusw2	equ	0xFDB
 17692                           fsr2h	equ	0xFDA
 17693                           fsr2l	equ	0xFD9
 17694                           status	equ	0xFD8
 17695                           
 17696 ;; *************** function _writeEEPROM *****************
 17697 ;; Defined at:
 17698 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 17699 ;; Parameters:    Size  Location     Type
 17700 ;;  address         2   13[COMRAM] unsigned short 
 17701 ;;  data            1   15[COMRAM] unsigned char 
 17702 ;; Auto vars:     Size  Location     Type
 17703 ;;		None
 17704 ;; Return value:  Size  Location     Type
 17705 ;;		None               void
 17706 ;; Registers used:
 17707 ;;		wreg, status,2
 17708 ;; Tracked objects:
 17709 ;;		On entry : 0/0
 17710 ;;		On exit  : 0/0
 17711 ;;		Unchanged: 0/0
 17712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17713 ;;      Params:         3       0       0       0       0       0       0
 17714 ;;      Locals:         0       0       0       0       0       0       0
 17715 ;;      Temps:          0       0       0       0       0       0       0
 17716 ;;      Totals:         3       0       0       0       0       0       0
 17717 ;;Total ram usage:        3 bytes
 17718 ;; Hardware stack levels used:    1
 17719 ;; Hardware stack levels required when called:    2
 17720 ;; This function calls:
 17721 ;;		Nothing
 17722 ;; This function is called by:
 17723 ;;		_main
 17724 ;;		_doOneSecondWork
 17725 ;;		_init_app_eeprom
 17726 ;;		_vscp_writeAppReg
 17727 ;;		_vscp_setGUID
 17728 ;;		_vscp_setUserID
 17729 ;;		_vscp_setManufacturerId
 17730 ;;		_vscp_goBootloaderMode
 17731 ;;		_vscp_writeNicknamePermanent
 17732 ;;		_vscp_setSegmentCRC
 17733 ;;		_vscp_setControlByte
 17734 ;; This function uses a non-reentrant model
 17735 ;;
 17736                           
 17737                           	psect	text86
 17738  005A42                     __ptext86:
 17739                           	opt stack 0
 17740  005A42                     _writeEEPROM:
 17741                           	opt stack 27
 17742                           
 17743                           ;eeprom.c: 30: EEADR = address & 0xff;
 17744                           
 17745                           ;incstack = 0
 17746                           ;incstack = 0
 17747  005A42  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17748                           
 17749                           ;eeprom.c: 31: EEDATA = data;
 17750  005A46  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17751                           
 17752                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 17753  005A4A  9EA6               	bcf	4006,7,c	;volatile
 17754                           
 17755                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 17756  005A4C  9CA6               	bcf	4006,6,c	;volatile
 17757                           
 17758                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 17759  005A4E  84A6               	bsf	4006,2,c	;volatile
 17760                           
 17761                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 17762  005A50  9EF2               	bcf	intcon,7,c	;volatile
 17763                           
 17764                           ;eeprom.c: 38: EECON2 = 0x55;
 17765  005A52  0E55               	movlw	85
 17766  005A54  6EA7               	movwf	4007,c	;volatile
 17767                           
 17768                           ;eeprom.c: 39: EECON2 = 0xaa;
 17769  005A56  0EAA               	movlw	170
 17770  005A58  6EA7               	movwf	4007,c	;volatile
 17771                           
 17772                           ;eeprom.c: 40: EECON1bits.WR = 1;
 17773  005A5A  82A6               	bsf	4006,1,c	;volatile
 17774                           
 17775                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 17776  005A5C  8EF2               	bsf	intcon,7,c	;volatile
 17777  005A5E                     l915:
 17778  005A5E  A8A1               	btfss	4001,4,c	;volatile
 17779  005A60  D7FE               	goto	l915
 17780                           
 17781                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 17782  005A62  98A1               	bcf	4001,4,c	;volatile
 17783                           
 17784                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 17785  005A64  94A6               	bcf	4006,2,c	;volatile
 17786  005A66  0012               	return	
 17787  005A68                     __end_of_writeEEPROM:
 17788                           	opt stack 0
 17789                           tblptru	equ	0xFF8
 17790                           tblptrh	equ	0xFF7
 17791                           tblptrl	equ	0xFF6
 17792                           tablat	equ	0xFF5
 17793                           prodh	equ	0xFF4
 17794                           prodl	equ	0xFF3
 17795                           intcon	equ	0xFF2
 17796                           postinc0	equ	0xFEE
 17797                           wreg	equ	0xFE8
 17798                           indf1	equ	0xFE7
 17799                           postdec1	equ	0xFE5
 17800                           fsr1h	equ	0xFE2
 17801                           fsr1l	equ	0xFE1
 17802                           indf2	equ	0xFDF
 17803                           postinc2	equ	0xFDE
 17804                           postdec2	equ	0xFDD
 17805                           plusw2	equ	0xFDB
 17806                           fsr2h	equ	0xFDA
 17807                           fsr2l	equ	0xFD9
 17808                           status	equ	0xFD8
 17809                           
 17810 ;; *************** function _init *****************
 17811 ;; Defined at:
 17812 ;;		line 878 in file "../main.c"
 17813 ;; Parameters:    Size  Location     Type
 17814 ;;		None
 17815 ;; Auto vars:     Size  Location     Type
 17816 ;;		None
 17817 ;; Return value:  Size  Location     Type
 17818 ;;		None               void
 17819 ;; Registers used:
 17820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17826 ;;      Params:         0       0       0       0       0       0       0
 17827 ;;      Locals:         0       0       0       0       0       0       0
 17828 ;;      Temps:          0       0       0       0       0       0       0
 17829 ;;      Totals:         0       0       0       0       0       0       0
 17830 ;;Total ram usage:        0 bytes
 17831 ;; Hardware stack levels used:    1
 17832 ;; Hardware stack levels required when called:    4
 17833 ;; This function calls:
 17834 ;;		_WriteTimer0
 17835 ;;		_ConvertADC
 17836 ;;		_init_app_ram
 17837 ;;		_OpenTimer0
 17838 ;;		_OpenADC
 17839 ;;		_ECANInitialize
 17840 ;; This function is called by:
 17841 ;;		_main
 17842 ;; This function uses a non-reentrant model
 17843 ;;
 17844                           
 17845                           	psect	text87
 17846  0057BE                     __ptext87:
 17847                           	opt stack 0
 17848  0057BE                     _init:
 17849                           	opt stack 26
 17850                           
 17851                           ;main.c: 882: init_app_ram();
 17852                           
 17853                           ;incstack = 0
 17854                           ;incstack = 0
 17855  0057BE  EC5A  F02B         	call	_init_app_ram	;wreg free
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;main.c: 890: TRISA = 0x07;
 17859  0057C2  0E07               	movlw	7
 17860  0057C4  6E92               	movwf	3986,c	;volatile
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;main.c: 901: TRISB = 0x1B;
 17864  0057C6  0E1B               	movlw	27
 17865  0057C8  6E93               	movwf	3987,c	;volatile
 17866                           
 17867                           ; BSR set to: 0
 17868                           ;main.c: 911: TRISC = 0x01;
 17869  0057CA  0E01               	movlw	1
 17870  0057CC  6E94               	movwf	3988,c	;volatile
 17871                           
 17872                           ; BSR set to: 0
 17873                           ;main.c: 912: PORTC = 0x00;
 17874  0057CE  6A82               	clrf	3970,c	;volatile
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;main.c: 914: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 17878  0057D0  0E92               	movlw	146
 17879  0057D2  EC98  F02D         	call	_OpenTimer0
 17880                           
 17881                           ; BSR set to: 0
 17882                           ;main.c: 915: WriteTimer0(0xfb1d);
 17883  0057D6  0EFB               	movlw	251
 17884  0057D8  6E0F               	movwf	?_WriteTimer0+1,c
 17885  0057DA  0E1D               	movlw	29
 17886  0057DC  6E0E               	movwf	?_WriteTimer0,c
 17887  0057DE  EC34  F02E         	call	_WriteTimer0	;wreg free
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;main.c: 917: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 17891                           ;main.c: 918: 0b10000111 & 0b11111111 & 0b11110100 &
 17892                           ;main.c: 919: 0b11111110 & 0b11111101,
 17893                           ;main.c: 920: 15);
 17894  0057E2  0E84               	movlw	132
 17895  0057E4  6E0E               	movwf	?_OpenADC,c
 17896  0057E6  0E0F               	movlw	15
 17897  0057E8  6E0F               	movwf	?_OpenADC+1,c
 17898  0057EA  0EEF               	movlw	239
 17899  0057EC  ECDE  F029         	call	_OpenADC
 17900                           
 17901                           ; BSR set to: 0
 17902                           ;main.c: 923: ECANInitialize();
 17903  0057F0  ECE4  F027         	call	_ECANInitialize	;wreg free
 17904                           
 17905                           ;main.c: 947: INTCONbits.GIE = 1;
 17906  0057F4  8EF2               	bsf	intcon,7,c	;volatile
 17907                           
 17908                           ;main.c: 949: ConvertADC();
 17909  0057F6  EF6A  F02E         	goto	_ConvertADC	;wreg free
 17910  0057FA                     __end_of_init:
 17911                           	opt stack 0
 17912                           tblptru	equ	0xFF8
 17913                           tblptrh	equ	0xFF7
 17914                           tblptrl	equ	0xFF6
 17915                           tablat	equ	0xFF5
 17916                           prodh	equ	0xFF4
 17917                           prodl	equ	0xFF3
 17918                           intcon	equ	0xFF2
 17919                           postinc0	equ	0xFEE
 17920                           wreg	equ	0xFE8
 17921                           indf1	equ	0xFE7
 17922                           postdec1	equ	0xFE5
 17923                           fsr1h	equ	0xFE2
 17924                           fsr1l	equ	0xFE1
 17925                           indf2	equ	0xFDF
 17926                           postinc2	equ	0xFDE
 17927                           postdec2	equ	0xFDD
 17928                           plusw2	equ	0xFDB
 17929                           fsr2h	equ	0xFDA
 17930                           fsr2l	equ	0xFD9
 17931                           status	equ	0xFD8
 17932                           
 17933 ;; *************** function _ECANInitialize *****************
 17934 ;; Defined at:
 17935 ;;		line 168 in file "../ECAN.c"
 17936 ;; Parameters:    Size  Location     Type
 17937 ;;		None
 17938 ;; Auto vars:     Size  Location     Type
 17939 ;;		None
 17940 ;; Return value:  Size  Location     Type
 17941 ;;		None               void
 17942 ;; Registers used:
 17943 ;;		wreg, status,2, status,0, cstack
 17944 ;; Tracked objects:
 17945 ;;		On entry : F/0
 17946 ;;		On exit  : 0/0
 17947 ;;		Unchanged: 0/0
 17948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17949 ;;      Params:         0       0       0       0       0       0       0
 17950 ;;      Locals:         0       0       0       0       0       0       0
 17951 ;;      Temps:          0       0       0       0       0       0       0
 17952 ;;      Totals:         0       0       0       0       0       0       0
 17953 ;;Total ram usage:        0 bytes
 17954 ;; Hardware stack levels used:    1
 17955 ;; Hardware stack levels required when called:    3
 17956 ;; This function calls:
 17957 ;;		_ECANSetOperationMode
 17958 ;; This function is called by:
 17959 ;;		_init
 17960 ;; This function uses a non-reentrant model
 17961 ;;
 17962                           
 17963                           	psect	text88
 17964  004FC8                     __ptext88:
 17965                           	opt stack 0
 17966  004FC8                     _ECANInitialize:
 17967                           	opt stack 26
 17968                           
 17969                           ; BSR set to: 0
 17970                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 17971                           
 17972                           ;incstack = 0
 17973                           ;incstack = 0
 17974  004FC8  0E80               	movlw	128
 17975  004FCA  ECE5  F02D         	call	_ECANSetOperationMode
 17976                           
 17977                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 17978  004FCE  0E09               	movlw	9
 17979  004FD0  6E70               	movwf	3952,c	;volatile
 17980                           
 17981                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 17982  004FD2  0EFC               	movlw	252
 17983  004FD4  6E71               	movwf	3953,c	;volatile
 17984                           
 17985                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 17986                           ;ECAN.c: 181: (0 << 6) |
 17987                           ;ECAN.c: 182: (2-1);
 17988  004FD6  0E01               	movlw	1
 17989  004FD8  6E72               	movwf	3954,c	;volatile
 17990                           
 17991                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 17992  004FDA  0E20               	movlw	32
 17993  004FDC  6E73               	movwf	3955,c	;volatile
 17994                           
 17995                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 17996  004FDE  8E77               	bsf	3959,7,c	;volatile
 17997                           
 17998                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 17999  004FE0  9C77               	bcf	3959,6,c	;volatile
 18000                           
 18001                           ;ECAN.c: 205: RXB0CON = 0;
 18002  004FE2  6A60               	clrf	3936,c	;volatile
 18003                           
 18004                           ;ECAN.c: 211: RXB1CON = 0;
 18005  004FE4  010F               	movlb	15	; () banked
 18006  004FE6  6B50               	clrf	80,b	;volatile
 18007                           
 18008                           ; BSR set to: 15
 18009                           ;ECAN.c: 221: B0CON = 0;
 18010  004FE8  010E               	movlb	14	; () banked
 18011  004FEA  6B20               	clrf	32,b	;volatile
 18012                           
 18013                           ; BSR set to: 14
 18014                           ;ECAN.c: 231: B1CON = 0;
 18015  004FEC  6B30               	clrf	48,b	;volatile
 18016                           
 18017                           ; BSR set to: 14
 18018                           ;ECAN.c: 241: B2CON = 0;
 18019  004FEE  6B40               	clrf	64,b	;volatile
 18020                           
 18021                           ; BSR set to: 14
 18022                           ;ECAN.c: 254: B3CON = 0 << 2;
 18023  004FF0  6B50               	clrf	80,b	;volatile
 18024                           
 18025                           ; BSR set to: 14
 18026                           ;ECAN.c: 264: B4CON = 0 << 2;
 18027  004FF2  6B60               	clrf	96,b	;volatile
 18028                           
 18029                           ; BSR set to: 14
 18030                           ;ECAN.c: 274: B5CON = 0 << 2;
 18031  004FF4  6B70               	clrf	112,b	;volatile
 18032                           
 18033                           ; BSR set to: 14
 18034                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18035  004FF6  0EE0               	movlw	224
 18036  004FF8  010D               	movlb	13	; () banked
 18037  004FFA  6FF8               	movwf	248,b	;volatile
 18038                           
 18039                           ; BSR set to: 13
 18040                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18041  004FFC  010F               	movlb	15	; () banked
 18042  004FFE  6B00               	clrf	0,b	;volatile
 18043                           
 18044                           ; BSR set to: 15
 18045  005000  0E08               	movlw	8
 18046  005002  6F01               	movwf	1,b	;volatile
 18047                           
 18048                           ; BSR set to: 15
 18049  005004  6B02               	clrf	2,b	;volatile
 18050                           
 18051                           ; BSR set to: 15
 18052  005006  6B03               	clrf	3,b	;volatile
 18053                           
 18054                           ; BSR set to: 15
 18055                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18056  005008  6B04               	clrf	4,b	;volatile
 18057                           
 18058                           ; BSR set to: 15
 18059  00500A  0EE8               	movlw	232
 18060  00500C  6F05               	movwf	5,b	;volatile
 18061                           
 18062                           ; BSR set to: 15
 18063  00500E  0E1A               	movlw	26
 18064  005010  6F06               	movwf	6,b	;volatile
 18065                           
 18066                           ; BSR set to: 15
 18067  005012  6B07               	clrf	7,b	;volatile
 18068                           
 18069                           ; BSR set to: 15
 18070                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18071  005014  0E03               	movlw	3
 18072  005016  010D               	movlb	13	; () banked
 18073  005018  6FD4               	movwf	212,b	;volatile
 18074                           
 18075                           ; BSR set to: 13
 18076                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18077  00501A  6BD5               	clrf	213,b	;volatile
 18078                           
 18079                           ; BSR set to: 13
 18080                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18081  00501C  6BE0               	clrf	224,b	;volatile
 18082                           
 18083                           ; BSR set to: 13
 18084                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18085  00501E  0E11               	movlw	17
 18086  005020  6FE1               	movwf	225,b	;volatile
 18087                           
 18088                           ; BSR set to: 13
 18089                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18090  005022  6FE2               	movwf	226,b	;volatile
 18091                           
 18092                           ; BSR set to: 13
 18093                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18094  005024  6BE3               	clrf	227,b	;volatile
 18095                           
 18096                           ; BSR set to: 13
 18097                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18098  005026  6BE4               	clrf	228,b	;volatile
 18099                           
 18100                           ; BSR set to: 13
 18101                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18102  005028  6BE5               	clrf	229,b	;volatile
 18103                           
 18104                           ; BSR set to: 13
 18105                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18106  00502A  6BE6               	clrf	230,b	;volatile
 18107                           
 18108                           ; BSR set to: 13
 18109                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18110  00502C  6BE7               	clrf	231,b	;volatile
 18111                           
 18112                           ; BSR set to: 13
 18113                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18114  00502E  0E54               	movlw	84
 18115  005030  6FF0               	movwf	240,b	;volatile
 18116                           
 18117                           ; BSR set to: 13
 18118                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18119  005032  0E05               	movlw	5
 18120  005034  6FF1               	movwf	241,b	;volatile
 18121                           
 18122                           ; BSR set to: 13
 18123                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18124  005036  6BF2               	clrf	242,b	;volatile
 18125                           
 18126                           ; BSR set to: 13
 18127                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18128  005038  6BF2               	clrf	242,b	;volatile
 18129                           
 18130                           ; BSR set to: 13
 18131                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18132  00503A  0E0F               	movlw	15
 18133  00503C  010F               	movlb	15	; () banked
 18134  00503E  6F18               	movwf	24,b	;volatile
 18135                           
 18136                           ; BSR set to: 15
 18137  005040  0EE0               	movlw	224
 18138  005042  6F19               	movwf	25,b	;volatile
 18139                           
 18140                           ; BSR set to: 15
 18141  005044  6B1A               	clrf	26,b	;volatile
 18142                           
 18143                           ; BSR set to: 15
 18144  005046  6B1B               	clrf	27,b	;volatile
 18145                           
 18146                           ; BSR set to: 15
 18147                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18148  005048  8719               	bsf	25,3,b	;volatile
 18149                           
 18150                           ; BSR set to: 15
 18151                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18152  00504A  0E0F               	movlw	15
 18153  00504C  6F1C               	movwf	28,b	;volatile
 18154                           
 18155                           ; BSR set to: 15
 18156  00504E  0EE0               	movlw	224
 18157  005050  6F1D               	movwf	29,b	;volatile
 18158                           
 18159                           ; BSR set to: 15
 18160  005052  691E               	setf	30,b	;volatile
 18161                           
 18162                           ; BSR set to: 15
 18163  005054  6B1F               	clrf	31,b	;volatile
 18164                           
 18165                           ; BSR set to: 15
 18166                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18167  005056  871D               	bsf	29,3,b	;volatile
 18168                           
 18169                           ; BSR set to: 15
 18170                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18171  005058  0E00               	movlw	0
 18172  00505A  EFE5  F02D         	goto	_ECANSetOperationMode
 18173  00505E                     __end_of_ECANInitialize:
 18174                           	opt stack 0
 18175                           tblptru	equ	0xFF8
 18176                           tblptrh	equ	0xFF7
 18177                           tblptrl	equ	0xFF6
 18178                           tablat	equ	0xFF5
 18179                           prodh	equ	0xFF4
 18180                           prodl	equ	0xFF3
 18181                           intcon	equ	0xFF2
 18182                           postinc0	equ	0xFEE
 18183                           wreg	equ	0xFE8
 18184                           indf1	equ	0xFE7
 18185                           postdec1	equ	0xFE5
 18186                           fsr1h	equ	0xFE2
 18187                           fsr1l	equ	0xFE1
 18188                           indf2	equ	0xFDF
 18189                           postinc2	equ	0xFDE
 18190                           postdec2	equ	0xFDD
 18191                           plusw2	equ	0xFDB
 18192                           fsr2h	equ	0xFDA
 18193                           fsr2l	equ	0xFD9
 18194                           status	equ	0xFD8
 18195                           
 18196 ;; *************** function _ECANSetOperationMode *****************
 18197 ;; Defined at:
 18198 ;;		line 1012 in file "../ECAN.c"
 18199 ;; Parameters:    Size  Location     Type
 18200 ;;  mode            1    wreg     enum E16337
 18201 ;; Auto vars:     Size  Location     Type
 18202 ;;  mode            1   13[COMRAM] enum E16337
 18203 ;; Return value:  Size  Location     Type
 18204 ;;		None               void
 18205 ;; Registers used:
 18206 ;;		wreg, status,2, status,0
 18207 ;; Tracked objects:
 18208 ;;		On entry : 0/1
 18209 ;;		On exit  : 0/0
 18210 ;;		Unchanged: 0/0
 18211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18212 ;;      Params:         0       0       0       0       0       0       0
 18213 ;;      Locals:         1       0       0       0       0       0       0
 18214 ;;      Temps:          0       0       0       0       0       0       0
 18215 ;;      Totals:         1       0       0       0       0       0       0
 18216 ;;Total ram usage:        1 bytes
 18217 ;; Hardware stack levels used:    1
 18218 ;; Hardware stack levels required when called:    2
 18219 ;; This function calls:
 18220 ;;		Nothing
 18221 ;; This function is called by:
 18222 ;;		_vscp_goBootloaderMode
 18223 ;;		_ECANInitialize
 18224 ;; This function uses a non-reentrant model
 18225 ;;
 18226                           
 18227                           	psect	text89
 18228  005BCA                     __ptext89:
 18229                           	opt stack 0
 18230  005BCA                     _ECANSetOperationMode:
 18231                           	opt stack 26
 18232                           
 18233                           ;incstack = 0
 18234                           ;incstack = 0
 18235                           ;ECANSetOperationMode@mode stored from wreg
 18236  005BCA  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18237                           
 18238                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18239  005BCE  0E1F               	movlw	31
 18240  005BD0  166F               	andwf	3951,f,c	;volatile
 18241                           
 18242                           ;ECAN.c: 1014: CANCON |= mode;
 18243  005BD2  500E               	movf	ECANSetOperationMode@mode,w,c
 18244  005BD4  126F               	iorwf	3951,f,c	;volatile
 18245  005BD6                     l8041:
 18246  005BD6  506F               	movf	3951,w,c	;volatile
 18247  005BD8  0BE0               	andlw	224
 18248  005BDA  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18249  005BDC  B4D8               	btfsc	status,2,c
 18250  005BDE  0012               	return	
 18251  005BE0  D7FA               	goto	l8041
 18252  005BE2                     __end_of_ECANSetOperationMode:
 18253                           	opt stack 0
 18254                           tblptru	equ	0xFF8
 18255                           tblptrh	equ	0xFF7
 18256                           tblptrl	equ	0xFF6
 18257                           tablat	equ	0xFF5
 18258                           prodh	equ	0xFF4
 18259                           prodl	equ	0xFF3
 18260                           intcon	equ	0xFF2
 18261                           postinc0	equ	0xFEE
 18262                           wreg	equ	0xFE8
 18263                           indf1	equ	0xFE7
 18264                           postdec1	equ	0xFE5
 18265                           fsr1h	equ	0xFE2
 18266                           fsr1l	equ	0xFE1
 18267                           indf2	equ	0xFDF
 18268                           postinc2	equ	0xFDE
 18269                           postdec2	equ	0xFDD
 18270                           plusw2	equ	0xFDB
 18271                           fsr2h	equ	0xFDA
 18272                           fsr2l	equ	0xFD9
 18273                           status	equ	0xFD8
 18274                           
 18275 ;; *************** function _OpenADC *****************
 18276 ;; Defined at:
 18277 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18278 ;; Parameters:    Size  Location     Type
 18279 ;;  config          1    wreg     unsigned char 
 18280 ;;  config2         1   13[COMRAM] unsigned char 
 18281 ;;  portconfig      1   14[COMRAM] unsigned char 
 18282 ;; Auto vars:     Size  Location     Type
 18283 ;;  config          1   17[COMRAM] unsigned char 
 18284 ;; Return value:  Size  Location     Type
 18285 ;;		None               void
 18286 ;; Registers used:
 18287 ;;		wreg, status,2, status,0
 18288 ;; Tracked objects:
 18289 ;;		On entry : F/0
 18290 ;;		On exit  : F/0
 18291 ;;		Unchanged: F/0
 18292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18293 ;;      Params:         2       0       0       0       0       0       0
 18294 ;;      Locals:         1       0       0       0       0       0       0
 18295 ;;      Temps:          2       0       0       0       0       0       0
 18296 ;;      Totals:         5       0       0       0       0       0       0
 18297 ;;Total ram usage:        5 bytes
 18298 ;; Hardware stack levels used:    1
 18299 ;; Hardware stack levels required when called:    2
 18300 ;; This function calls:
 18301 ;;		Nothing
 18302 ;; This function is called by:
 18303 ;;		_init
 18304 ;; This function uses a non-reentrant model
 18305 ;;
 18306                           
 18307                           	psect	text90
 18308  0053BC                     __ptext90:
 18309                           	opt stack 0
 18310  0053BC                     _OpenADC:
 18311                           	opt stack 27
 18312                           
 18313                           ;incstack = 0
 18314                           ;incstack = 0
 18315                           ;OpenADC@config stored from wreg
 18316  0053BC  CFE8 F012          	movff	wreg,OpenADC@config
 18317                           
 18318                           ; BSR set to: 0
 18319  0053C0  6AC2               	clrf	4034,c	;volatile
 18320  0053C2  6AC0               	clrf	4032,c	;volatile
 18321                           
 18322                           ; BSR set to: 0
 18323  0053C4  90D8               	bcf	status,0,c
 18324  0053C6  300E               	rrcf	OpenADC@config2,w,c
 18325  0053C8  0B3C               	andlw	60
 18326  0053CA  6EC2               	movwf	4034,c	;volatile
 18327  0053CC  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18328  0053D0  3A10               	swapf	??_OpenADC,f,c
 18329  0053D2  0EF0               	movlw	240
 18330  0053D4  1610               	andwf	??_OpenADC,f,c
 18331  0053D6  0E30               	movlw	48
 18332  0053D8  1610               	andwf	??_OpenADC,f,c
 18333  0053DA  500F               	movf	OpenADC@portconfig,w,c
 18334  0053DC  0B0F               	andlw	15
 18335  0053DE  1010               	iorwf	??_OpenADC,w,c
 18336  0053E0  6EC1               	movwf	4033,c	;volatile
 18337  0053E2  C012  F010         	movff	OpenADC@config,??_OpenADC
 18338  0053E6  90D8               	bcf	status,0,c
 18339  0053E8  3610               	rlcf	??_OpenADC,f,c
 18340  0053EA  90D8               	bcf	status,0,c
 18341  0053EC  3610               	rlcf	??_OpenADC,f,c
 18342  0053EE  0E38               	movlw	56
 18343  0053F0  1610               	andwf	??_OpenADC,f,c
 18344  0053F2  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18345  0053F6  3A11               	swapf	??_OpenADC+1,f,c
 18346  0053F8  0E0F               	movlw	15
 18347  0053FA  1611               	andwf	??_OpenADC+1,f,c
 18348  0053FC  0E07               	movlw	7
 18349  0053FE  1611               	andwf	??_OpenADC+1,f,c
 18350  005400  5012               	movf	OpenADC@config,w,c
 18351  005402  0B80               	andlw	128
 18352  005404  1011               	iorwf	??_OpenADC+1,w,c
 18353  005406  1010               	iorwf	??_OpenADC,w,c
 18354  005408  6EC0               	movwf	4032,c	;volatile
 18355                           
 18356                           ; BSR set to: 0
 18357  00540A  AE0E               	btfss	OpenADC@config2,7,c
 18358  00540C  D003               	goto	l1300
 18359                           
 18360                           ; BSR set to: 0
 18361  00540E  9C9E               	bcf	3998,6,c	;volatile
 18362  005410  8C9D               	bsf	3997,6,c	;volatile
 18363  005412  8CF2               	bsf	intcon,6,c	;volatile
 18364  005414                     l1300:
 18365                           
 18366                           ; BSR set to: 0
 18367  005414  80C2               	bsf	4034,0,c	;volatile
 18368                           
 18369                           ; BSR set to: 0
 18370  005416  0012               	return	
 18371  005418                     __end_of_OpenADC:
 18372                           	opt stack 0
 18373                           tblptru	equ	0xFF8
 18374                           tblptrh	equ	0xFF7
 18375                           tblptrl	equ	0xFF6
 18376                           tablat	equ	0xFF5
 18377                           prodh	equ	0xFF4
 18378                           prodl	equ	0xFF3
 18379                           intcon	equ	0xFF2
 18380                           postinc0	equ	0xFEE
 18381                           wreg	equ	0xFE8
 18382                           indf1	equ	0xFE7
 18383                           postdec1	equ	0xFE5
 18384                           fsr1h	equ	0xFE2
 18385                           fsr1l	equ	0xFE1
 18386                           indf2	equ	0xFDF
 18387                           postinc2	equ	0xFDE
 18388                           postdec2	equ	0xFDD
 18389                           plusw2	equ	0xFDB
 18390                           fsr2h	equ	0xFDA
 18391                           fsr2l	equ	0xFD9
 18392                           status	equ	0xFD8
 18393                           
 18394 ;; *************** function _OpenTimer0 *****************
 18395 ;; Defined at:
 18396 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18397 ;; Parameters:    Size  Location     Type
 18398 ;;  config          1    wreg     unsigned char 
 18399 ;; Auto vars:     Size  Location     Type
 18400 ;;  config          1   13[COMRAM] unsigned char 
 18401 ;; Return value:  Size  Location     Type
 18402 ;;		None               void
 18403 ;; Registers used:
 18404 ;;		wreg, status,2, status,0
 18405 ;; Tracked objects:
 18406 ;;		On entry : F/0
 18407 ;;		On exit  : F/0
 18408 ;;		Unchanged: F/0
 18409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18410 ;;      Params:         0       0       0       0       0       0       0
 18411 ;;      Locals:         1       0       0       0       0       0       0
 18412 ;;      Temps:          0       0       0       0       0       0       0
 18413 ;;      Totals:         1       0       0       0       0       0       0
 18414 ;;Total ram usage:        1 bytes
 18415 ;; Hardware stack levels used:    1
 18416 ;; Hardware stack levels required when called:    2
 18417 ;; This function calls:
 18418 ;;		Nothing
 18419 ;; This function is called by:
 18420 ;;		_init
 18421 ;; This function uses a non-reentrant model
 18422 ;;
 18423                           
 18424                           	psect	text91
 18425  005B30                     __ptext91:
 18426                           	opt stack 0
 18427  005B30                     _OpenTimer0:
 18428                           	opt stack 27
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;incstack = 0
 18432                           ;incstack = 0
 18433                           ;OpenTimer0@config stored from wreg
 18434  005B30  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18435                           
 18436                           ; BSR set to: 0
 18437  005B34  500E               	movf	OpenTimer0@config,w,c
 18438  005B36  0B7F               	andlw	127
 18439  005B38  6ED5               	movwf	4053,c	;volatile
 18440                           
 18441                           ; BSR set to: 0
 18442  005B3A  6AD7               	clrf	4055,c	;volatile
 18443                           
 18444                           ; BSR set to: 0
 18445  005B3C  6AD6               	clrf	4054,c	;volatile
 18446                           
 18447                           ; BSR set to: 0
 18448  005B3E  94F2               	bcf	intcon,2,c	;volatile
 18449                           
 18450                           ; BSR set to: 0
 18451  005B40  AE0E               	btfss	OpenTimer0@config,7,c
 18452  005B42  D002               	goto	l1314
 18453                           
 18454                           ; BSR set to: 0
 18455  005B44  8AF2               	bsf	intcon,5,c	;volatile
 18456  005B46  D001               	goto	l1315
 18457  005B48                     l1314:
 18458                           
 18459                           ; BSR set to: 0
 18460  005B48  9AF2               	bcf	intcon,5,c	;volatile
 18461  005B4A                     l1315:
 18462                           
 18463                           ; BSR set to: 0
 18464  005B4A  8ED5               	bsf	4053,7,c	;volatile
 18465                           
 18466                           ; BSR set to: 0
 18467  005B4C  0012               	return	
 18468  005B4E                     __end_of_OpenTimer0:
 18469                           	opt stack 0
 18470                           tblptru	equ	0xFF8
 18471                           tblptrh	equ	0xFF7
 18472                           tblptrl	equ	0xFF6
 18473                           tablat	equ	0xFF5
 18474                           prodh	equ	0xFF4
 18475                           prodl	equ	0xFF3
 18476                           intcon	equ	0xFF2
 18477                           postinc0	equ	0xFEE
 18478                           wreg	equ	0xFE8
 18479                           indf1	equ	0xFE7
 18480                           postdec1	equ	0xFE5
 18481                           fsr1h	equ	0xFE2
 18482                           fsr1l	equ	0xFE1
 18483                           indf2	equ	0xFDF
 18484                           postinc2	equ	0xFDE
 18485                           postdec2	equ	0xFDD
 18486                           plusw2	equ	0xFDB
 18487                           fsr2h	equ	0xFDA
 18488                           fsr2l	equ	0xFD9
 18489                           status	equ	0xFD8
 18490                           
 18491 ;; *************** function _init_app_ram *****************
 18492 ;; Defined at:
 18493 ;;		line 977 in file "../main.c"
 18494 ;; Parameters:    Size  Location     Type
 18495 ;;		None
 18496 ;; Auto vars:     Size  Location     Type
 18497 ;;  i               1   13[COMRAM] unsigned char 
 18498 ;; Return value:  Size  Location     Type
 18499 ;;		None               void
 18500 ;; Registers used:
 18501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18502 ;; Tracked objects:
 18503 ;;		On entry : 0/0
 18504 ;;		On exit  : F/0
 18505 ;;		Unchanged: 0/0
 18506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18507 ;;      Params:         0       0       0       0       0       0       0
 18508 ;;      Locals:         1       0       0       0       0       0       0
 18509 ;;      Temps:          0       0       0       0       0       0       0
 18510 ;;      Totals:         1       0       0       0       0       0       0
 18511 ;;Total ram usage:        1 bytes
 18512 ;; Hardware stack levels used:    1
 18513 ;; Hardware stack levels required when called:    2
 18514 ;; This function calls:
 18515 ;;		Nothing
 18516 ;; This function is called by:
 18517 ;;		_init
 18518 ;;		_vscp_restoreDefaults
 18519 ;; This function uses a non-reentrant model
 18520 ;;
 18521                           
 18522                           	psect	text92
 18523  0056B4                     __ptext92:
 18524                           	opt stack 0
 18525  0056B4                     _init_app_ram:
 18526                           	opt stack 25
 18527                           
 18528                           ;main.c: 978: char i;
 18529                           ;main.c: 980: measurement_clock = 0;
 18530                           
 18531                           ; BSR set to: 0
 18532                           ;incstack = 0
 18533                           ;incstack = 0
 18534  0056B4  0101               	movlb	1	; () banked
 18535  0056B6  6B12               	clrf	_measurement_clock& (0+255),b	;volatile
 18536  0056B8  6B13               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18537  0056BA  6B14               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18538  0056BC  6B15               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18539                           
 18540                           ;main.c: 981: seconds = 0;
 18541  0056BE  0100               	movlb	0	; () banked
 18542  0056C0  6BC6               	clrf	_seconds& (0+255),b
 18543                           
 18544                           ;main.c: 984: for (i = 0; i < 6; i++) {
 18545  0056C2  6A0E               	clrf	init_app_ram@i,c
 18546  0056C4                     l7353:
 18547                           
 18548                           ;main.c: 985: seconds_temp[i] = 0;
 18549  0056C4  0E0C               	movlw	low _seconds_temp
 18550  0056C6  240E               	addwf	init_app_ram@i,w,c
 18551  0056C8  6ED9               	movwf	fsr2l,c
 18552  0056CA  6ADA               	clrf	fsr2h,c
 18553  0056CC  0E01               	movlw	high _seconds_temp
 18554  0056CE  22DA               	addwfc	fsr2h,f,c
 18555  0056D0  6ADF               	clrf	indf2,c
 18556                           
 18557                           ; BSR set to: 1
 18558                           ;main.c: 986: current_temp[i] = 0;
 18559  0056D2  500E               	movf	init_app_ram@i,w,c
 18560  0056D4  0D02               	mullw	2
 18561  0056D6  0E00               	movlw	low _current_temp
 18562  0056D8  24F3               	addwf	prodl,w,c
 18563  0056DA  6ED9               	movwf	fsr2l,c
 18564  0056DC  0E01               	movlw	high _current_temp
 18565  0056DE  20F4               	addwfc	prodh,w,c
 18566  0056E0  6EDA               	movwf	fsr2h,c
 18567  0056E2  6ADE               	clrf	postinc2,c
 18568  0056E4  6ADD               	clrf	postdec2,c
 18569                           
 18570                           ; BSR set to: 1
 18571  0056E6  2A0E               	incf	init_app_ram@i,f,c
 18572                           
 18573                           ; BSR set to: 1
 18574  0056E8  0E05               	movlw	5
 18575  0056EA  640E               	cpfsgt	init_app_ram@i,c
 18576  0056EC  D7EB               	goto	l7353
 18577                           
 18578                           ; BSR set to: 1
 18579                           ;main.c: 987: }
 18580                           ;main.c: 990: adc_conversion_flags = 0;
 18581  0056EE  0100               	movlb	0	; () banked
 18582  0056F0  6BC3               	clrf	_adc_conversion_flags& (0+255),b
 18583                           
 18584                           ;main.c: 993: adc_series_counter = 0;
 18585  0056F2  6A49               	clrf	_adc_series_counter,c
 18586                           
 18587                           ;main.c: 996: low_alarm = 0;
 18588  0056F4  6BC5               	clrf	_low_alarm& (0+255),b
 18589                           
 18590                           ;main.c: 999: high_alarm = 0;
 18591  0056F6  6BC4               	clrf	_high_alarm& (0+255),b
 18592                           
 18593                           ; BSR set to: 0
 18594  0056F8  0012               	return	
 18595  0056FA                     __end_of_init_app_ram:
 18596                           	opt stack 0
 18597                           tblptru	equ	0xFF8
 18598                           tblptrh	equ	0xFF7
 18599                           tblptrl	equ	0xFF6
 18600                           tablat	equ	0xFF5
 18601                           prodh	equ	0xFF4
 18602                           prodl	equ	0xFF3
 18603                           intcon	equ	0xFF2
 18604                           postinc0	equ	0xFEE
 18605                           wreg	equ	0xFE8
 18606                           indf1	equ	0xFE7
 18607                           postdec1	equ	0xFE5
 18608                           fsr1h	equ	0xFE2
 18609                           fsr1l	equ	0xFE1
 18610                           indf2	equ	0xFDF
 18611                           postinc2	equ	0xFDE
 18612                           postdec2	equ	0xFDD
 18613                           plusw2	equ	0xFDB
 18614                           fsr2h	equ	0xFDA
 18615                           fsr2l	equ	0xFD9
 18616                           status	equ	0xFD8
 18617                           
 18618 ;; *************** function _ConvertADC *****************
 18619 ;; Defined at:
 18620 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 18621 ;; Parameters:    Size  Location     Type
 18622 ;;		None
 18623 ;; Auto vars:     Size  Location     Type
 18624 ;;		None
 18625 ;; Return value:  Size  Location     Type
 18626 ;;		None               void
 18627 ;; Registers used:
 18628 ;;		None
 18629 ;; Tracked objects:
 18630 ;;		On entry : 0/0
 18631 ;;		On exit  : 0/0
 18632 ;;		Unchanged: 0/0
 18633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18634 ;;      Params:         0       0       0       0       0       0       0
 18635 ;;      Locals:         0       0       0       0       0       0       0
 18636 ;;      Temps:          0       0       0       0       0       0       0
 18637 ;;      Totals:         0       0       0       0       0       0       0
 18638 ;;Total ram usage:        0 bytes
 18639 ;; Hardware stack levels used:    1
 18640 ;; Hardware stack levels required when called:    2
 18641 ;; This function calls:
 18642 ;;		Nothing
 18643 ;; This function is called by:
 18644 ;;		_init
 18645 ;; This function uses a non-reentrant model
 18646 ;;
 18647                           
 18648                           	psect	text93
 18649  005CD4                     __ptext93:
 18650                           	opt stack 0
 18651  005CD4                     _ConvertADC:
 18652                           	opt stack 27
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;incstack = 0
 18656                           ;incstack = 0
 18657  005CD4  82C2               	bsf	4034,1,c	;volatile
 18658  005CD6  0012               	return	
 18659  005CD8                     __end_of_ConvertADC:
 18660                           	opt stack 0
 18661                           tblptru	equ	0xFF8
 18662                           tblptrh	equ	0xFF7
 18663                           tblptrl	equ	0xFF6
 18664                           tablat	equ	0xFF5
 18665                           prodh	equ	0xFF4
 18666                           prodl	equ	0xFF3
 18667                           intcon	equ	0xFF2
 18668                           postinc0	equ	0xFEE
 18669                           wreg	equ	0xFE8
 18670                           indf1	equ	0xFE7
 18671                           postdec1	equ	0xFE5
 18672                           fsr1h	equ	0xFE2
 18673                           fsr1l	equ	0xFE1
 18674                           indf2	equ	0xFDF
 18675                           postinc2	equ	0xFDE
 18676                           postdec2	equ	0xFDD
 18677                           plusw2	equ	0xFDB
 18678                           fsr2h	equ	0xFDA
 18679                           fsr2l	equ	0xFD9
 18680                           status	equ	0xFD8
 18681                           
 18682 ;; *************** function _WriteTimer0 *****************
 18683 ;; Defined at:
 18684 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18685 ;; Parameters:    Size  Location     Type
 18686 ;;  timer0          2   13[COMRAM] unsigned int 
 18687 ;; Auto vars:     Size  Location     Type
 18688 ;;  timer           2   15[COMRAM] struct Timers
 18689 ;; Return value:  Size  Location     Type
 18690 ;;		None               void
 18691 ;; Registers used:
 18692 ;;		None
 18693 ;; Tracked objects:
 18694 ;;		On entry : F/0
 18695 ;;		On exit  : F/0
 18696 ;;		Unchanged: F/0
 18697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18698 ;;      Params:         2       0       0       0       0       0       0
 18699 ;;      Locals:         2       0       0       0       0       0       0
 18700 ;;      Temps:          0       0       0       0       0       0       0
 18701 ;;      Totals:         4       0       0       0       0       0       0
 18702 ;;Total ram usage:        4 bytes
 18703 ;; Hardware stack levels used:    1
 18704 ;; Hardware stack levels required when called:    2
 18705 ;; This function calls:
 18706 ;;		Nothing
 18707 ;; This function is called by:
 18708 ;;		_init
 18709 ;; This function uses a non-reentrant model
 18710 ;;
 18711                           
 18712                           	psect	text94
 18713  005C68                     __ptext94:
 18714                           	opt stack 0
 18715  005C68                     _WriteTimer0:
 18716                           	opt stack 27
 18717                           
 18718                           ; BSR set to: 0
 18719                           
 18720                           ;incstack = 0
 18721                           ;incstack = 0
 18722  005C68  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 18723  005C6C  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 18724  005C70  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 18725  005C74  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 18726                           
 18727                           ; BSR set to: 0
 18728  005C78  0012               	return	
 18729  005C7A                     __end_of_WriteTimer0:
 18730                           	opt stack 0
 18731                           tblptru	equ	0xFF8
 18732                           tblptrh	equ	0xFF7
 18733                           tblptrl	equ	0xFF6
 18734                           tablat	equ	0xFF5
 18735                           prodh	equ	0xFF4
 18736                           prodl	equ	0xFF3
 18737                           intcon	equ	0xFF2
 18738                           postinc0	equ	0xFEE
 18739                           wreg	equ	0xFE8
 18740                           indf1	equ	0xFE7
 18741                           postdec1	equ	0xFE5
 18742                           fsr1h	equ	0xFE2
 18743                           fsr1l	equ	0xFE1
 18744                           indf2	equ	0xFDF
 18745                           postinc2	equ	0xFDE
 18746                           postdec2	equ	0xFDD
 18747                           plusw2	equ	0xFDB
 18748                           fsr2h	equ	0xFDA
 18749                           fsr2l	equ	0xFD9
 18750                           status	equ	0xFD8
 18751                           
 18752 ;; *************** function ___awtofl *****************
 18753 ;; Defined at:
 18754 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;  c               2   23[COMRAM] int 
 18757 ;; Auto vars:     Size  Location     Type
 18758 ;;  f1              4    0        int 
 18759 ;;  sign            1   28[COMRAM] unsigned char 
 18760 ;; Return value:  Size  Location     Type
 18761 ;;                  4   23[COMRAM] unsigned char 
 18762 ;; Registers used:
 18763 ;;		wreg, status,2, status,0, cstack
 18764 ;; Tracked objects:
 18765 ;;		On entry : F/0
 18766 ;;		On exit  : 0/0
 18767 ;;		Unchanged: 0/0
 18768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18769 ;;      Params:         4       0       0       0       0       0       0
 18770 ;;      Locals:         2       0       0       0       0       0       0
 18771 ;;      Temps:          0       0       0       0       0       0       0
 18772 ;;      Totals:         6       0       0       0       0       0       0
 18773 ;;Total ram usage:        6 bytes
 18774 ;; Hardware stack levels used:    1
 18775 ;; Hardware stack levels required when called:    3
 18776 ;; This function calls:
 18777 ;;		___flpack
 18778 ;; This function is called by:
 18779 ;;		_setEventData
 18780 ;;		_exp
 18781 ;;		_log
 18782 ;; This function uses a non-reentrant model
 18783 ;;
 18784                           
 18785                           	psect	text95
 18786  00586E                     __ptext95:
 18787                           	opt stack 0
 18788  00586E                     ___awtofl:
 18789                           	opt stack 25
 18790                           
 18791                           ; BSR set to: 0
 18792                           
 18793                           ; BSR set to: 0
 18794                           ;incstack = 0
 18795                           ;incstack = 0
 18796  00586E  6A1D               	clrf	___awtofl@sign,c
 18797  005870  AE19               	btfss	___awtofl@c+1,7,c
 18798  005872  D005               	goto	l11537
 18799                           
 18800                           ; BSR set to: 0
 18801  005874  6C18               	negf	___awtofl@c,c
 18802  005876  1E19               	comf	___awtofl@c+1,f,c
 18803  005878  B0D8               	btfsc	status,0,c
 18804  00587A  2A19               	incf	___awtofl@c+1,f,c
 18805  00587C  2A1D               	incf	___awtofl@sign,f,c
 18806  00587E                     l11537:
 18807                           
 18808                           ; BSR set to: 0
 18809  00587E  C018  F00E         	movff	___awtofl@c,?___flpack
 18810  005882  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 18811  005886  6A10               	clrf	?___flpack+2,c
 18812  005888  6A11               	clrf	?___flpack+3,c
 18813  00588A  0E96               	movlw	150
 18814  00588C  6E12               	movwf	?___flpack+4,c
 18815  00588E  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 18816  005892  EC2A  F025         	call	___flpack	;wreg free
 18817  005896  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 18818  00589A  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 18819  00589E  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 18820  0058A2  C00E  F018         	movff	?___flpack,?___awtofl
 18821  0058A6  0012               	return	
 18822  0058A8                     __end_of___awtofl:
 18823                           	opt stack 0
 18824                           tblptru	equ	0xFF8
 18825                           tblptrh	equ	0xFF7
 18826                           tblptrl	equ	0xFF6
 18827                           tablat	equ	0xFF5
 18828                           prodh	equ	0xFF4
 18829                           prodl	equ	0xFF3
 18830                           intcon	equ	0xFF2
 18831                           postinc0	equ	0xFEE
 18832                           wreg	equ	0xFE8
 18833                           indf1	equ	0xFE7
 18834                           postdec1	equ	0xFE5
 18835                           fsr1h	equ	0xFE2
 18836                           fsr1l	equ	0xFE1
 18837                           indf2	equ	0xFDF
 18838                           postinc2	equ	0xFDE
 18839                           postdec2	equ	0xFDD
 18840                           plusw2	equ	0xFDB
 18841                           fsr2h	equ	0xFDA
 18842                           fsr2l	equ	0xFD9
 18843                           status	equ	0xFD8
 18844                           
 18845 ;; *************** function ___flmul *****************
 18846 ;; Defined at:
 18847 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 18848 ;; Parameters:    Size  Location     Type
 18849 ;;  f1              4    8[BANK0 ] unsigned char 
 18850 ;;  f2              4   12[BANK0 ] unsigned char 
 18851 ;; Auto vars:     Size  Location     Type
 18852 ;;  f3_as_produc    4   24[BANK0 ] unsigned long 
 18853 ;;  sign            1   29[BANK0 ] unsigned char 
 18854 ;;  cntr            1   28[BANK0 ] unsigned char 
 18855 ;;  exp             1   23[BANK0 ] unsigned char 
 18856 ;; Return value:  Size  Location     Type
 18857 ;;                  4    8[BANK0 ] unsigned char 
 18858 ;; Registers used:
 18859 ;;		wreg, status,2, status,0, cstack
 18860 ;; Tracked objects:
 18861 ;;		On entry : 0/0
 18862 ;;		On exit  : 0/0
 18863 ;;		Unchanged: 0/0
 18864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18865 ;;      Params:         0       8       0       0       0       0       0
 18866 ;;      Locals:         0      14       0       0       0       0       0
 18867 ;;      Temps:          0       0       0       0       0       0       0
 18868 ;;      Totals:         0      22       0       0       0       0       0
 18869 ;;Total ram usage:       22 bytes
 18870 ;; Hardware stack levels used:    1
 18871 ;; Hardware stack levels required when called:    3
 18872 ;; This function calls:
 18873 ;;		___flpack
 18874 ;; This function is called by:
 18875 ;;		_doWork
 18876 ;;		_Celsius2Fahrenheit
 18877 ;;		___asflmul
 18878 ;;		_log
 18879 ;;		_eval_poly
 18880 ;; This function uses a non-reentrant model
 18881 ;;
 18882                           
 18883                           	psect	text96
 18884  0047FC                     __ptext96:
 18885                           	opt stack 0
 18886  0047FC                     ___flmul:
 18887                           	opt stack 26
 18888                           
 18889                           ;incstack = 0
 18890                           ;incstack = 0
 18891  0047FC  0100               	movlb	0	; () banked
 18892  0047FE  356A               	rlcf	(___flmul@f1+2)& (0+255),w,b
 18893  004800  356B               	rlcf	(___flmul@f1+3)& (0+255),w,b
 18894  004802  6F77               	movwf	___flmul@exp& (0+255),b
 18895  004804  6777               	tstfsz	___flmul@exp& (0+255),b
 18896  004806  D001               	goto	l11481
 18897  004808  D006               	goto	u10010
 18898  00480A                     l11481:
 18899                           
 18900                           ; BSR set to: 0
 18901  00480A  0100               	movlb	0	; () banked
 18902  00480C  356E               	rlcf	(___flmul@f2+2)& (0+255),w,b
 18903  00480E  356F               	rlcf	(___flmul@f2+3)& (0+255),w,b
 18904  004810  6F7D               	movwf	___flmul@sign& (0+255),b
 18905  004812  677D               	tstfsz	___flmul@sign& (0+255),b
 18906  004814  D005               	goto	l11485
 18907  004816                     u10010:
 18908                           
 18909                           ; BSR set to: 0
 18910  004816  6B68               	clrf	?___flmul& (0+255),b
 18911  004818  6B69               	clrf	(?___flmul+1)& (0+255),b
 18912  00481A  6B6A               	clrf	(?___flmul+2)& (0+255),b
 18913  00481C  6B6B               	clrf	(?___flmul+3)& (0+255),b
 18914  00481E  D058               	goto	l1619
 18915  004820                     l11485:
 18916                           
 18917                           ; BSR set to: 0
 18918  004820  517D               	movf	___flmul@sign& (0+255),w,b
 18919  004822  0F7B               	addlw	123
 18920  004824  2777               	addwf	___flmul@exp& (0+255),f,b
 18921                           
 18922                           ; BSR set to: 0
 18923  004826  C06B  F07D         	movff	___flmul@f1+3,___flmul@sign
 18924  00482A  0100               	movlb	0	; () banked
 18925  00482C  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 18926  00482E  1B7D               	xorwf	___flmul@sign& (0+255),f,b
 18927  004830  0E80               	movlw	128
 18928  004832  177D               	andwf	___flmul@sign& (0+255),f,b
 18929                           
 18930                           ; BSR set to: 0
 18931  004834  8F6A               	bsf	(___flmul@f1+2)& (0+255),7,b
 18932                           
 18933                           ; BSR set to: 0
 18934  004836  8F6E               	bsf	(___flmul@f2+2)& (0+255),7,b
 18935  004838  0E00               	movlw	0
 18936  00483A  176F               	andwf	(___flmul@f2+3)& (0+255),f,b
 18937                           
 18938                           ; BSR set to: 0
 18939  00483C  6B78               	clrf	___flmul@f3_as_product& (0+255),b
 18940  00483E  6B79               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 18941  004840  6B7A               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 18942  004842  6B7B               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 18943                           
 18944                           ; BSR set to: 0
 18945  004844  0E07               	movlw	7
 18946  004846  6F7C               	movwf	___flmul@cntr& (0+255),b
 18947  004848                     l11497:
 18948                           
 18949                           ; BSR set to: 0
 18950  004848  A168               	btfss	___flmul@f1& (0+255),0,b
 18951  00484A  D008               	goto	l11501
 18952                           
 18953                           ; BSR set to: 0
 18954  00484C  516C               	movf	___flmul@f2& (0+255),w,b
 18955  00484E  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
 18956  004850  516D               	movf	(___flmul@f2+1)& (0+255),w,b
 18957  004852  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 18958  004854  516E               	movf	(___flmul@f2+2)& (0+255),w,b
 18959  004856  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 18960  004858  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 18961  00485A  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 18962  00485C                     l11501:
 18963                           
 18964                           ; BSR set to: 0
 18965  00485C  90D8               	bcf	status,0,c
 18966  00485E  336B               	rrcf	(___flmul@f1+3)& (0+255),f,b
 18967  004860  336A               	rrcf	(___flmul@f1+2)& (0+255),f,b
 18968  004862  3369               	rrcf	(___flmul@f1+1)& (0+255),f,b
 18969  004864  3368               	rrcf	___flmul@f1& (0+255),f,b
 18970                           
 18971                           ; BSR set to: 0
 18972  004866  90D8               	bcf	status,0,c
 18973  004868  376C               	rlcf	___flmul@f2& (0+255),f,b
 18974  00486A  376D               	rlcf	(___flmul@f2+1)& (0+255),f,b
 18975  00486C  376E               	rlcf	(___flmul@f2+2)& (0+255),f,b
 18976  00486E  376F               	rlcf	(___flmul@f2+3)& (0+255),f,b
 18977                           
 18978                           ; BSR set to: 0
 18979  004870  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
 18980  004872  D7EA               	goto	l11497
 18981                           
 18982                           ; BSR set to: 0
 18983  004874  0E11               	movlw	17
 18984  004876  6F7C               	movwf	___flmul@cntr& (0+255),b
 18985  004878                     l11509:
 18986                           
 18987                           ; BSR set to: 0
 18988  004878  A168               	btfss	___flmul@f1& (0+255),0,b
 18989  00487A  D008               	goto	l11513
 18990                           
 18991                           ; BSR set to: 0
 18992  00487C  516C               	movf	___flmul@f2& (0+255),w,b
 18993  00487E  2778               	addwf	___flmul@f3_as_product& (0+255),f,b
 18994  004880  516D               	movf	(___flmul@f2+1)& (0+255),w,b
 18995  004882  2379               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 18996  004884  516E               	movf	(___flmul@f2+2)& (0+255),w,b
 18997  004886  237A               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 18998  004888  516F               	movf	(___flmul@f2+3)& (0+255),w,b
 18999  00488A  237B               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19000  00488C                     l11513:
 19001                           
 19002                           ; BSR set to: 0
 19003  00488C  90D8               	bcf	status,0,c
 19004  00488E  336B               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19005  004890  336A               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19006  004892  3369               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19007  004894  3368               	rrcf	___flmul@f1& (0+255),f,b
 19008                           
 19009                           ; BSR set to: 0
 19010  004896  90D8               	bcf	status,0,c
 19011  004898  337B               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19012  00489A  337A               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19013  00489C  3379               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19014  00489E  3378               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19015                           
 19016                           ; BSR set to: 0
 19017  0048A0  2F7C               	decfsz	___flmul@cntr& (0+255),f,b
 19018  0048A2  D7EA               	goto	l11509
 19019                           
 19020                           ; BSR set to: 0
 19021  0048A4  C078  F00E         	movff	___flmul@f3_as_product,?___flpack
 19022  0048A8  C079  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19023  0048AC  C07A  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19024  0048B0  C07B  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19025  0048B4  C077  F012         	movff	___flmul@exp,?___flpack+4
 19026  0048B8  C07D  F013         	movff	___flmul@sign,?___flpack+5
 19027  0048BC  EC2A  F025         	call	___flpack	;wreg free
 19028  0048C0  C011  F06B         	movff	?___flpack+3,?___flmul+3
 19029  0048C4  C010  F06A         	movff	?___flpack+2,?___flmul+2
 19030  0048C8  C00F  F069         	movff	?___flpack+1,?___flmul+1
 19031  0048CC  C00E  F068         	movff	?___flpack,?___flmul
 19032  0048D0                     l1619:
 19033  0048D0  0012               	return	
 19034  0048D2                     __end_of___flmul:
 19035                           	opt stack 0
 19036                           tblptru	equ	0xFF8
 19037                           tblptrh	equ	0xFF7
 19038                           tblptrl	equ	0xFF6
 19039                           tablat	equ	0xFF5
 19040                           prodh	equ	0xFF4
 19041                           prodl	equ	0xFF3
 19042                           intcon	equ	0xFF2
 19043                           postinc0	equ	0xFEE
 19044                           wreg	equ	0xFE8
 19045                           indf1	equ	0xFE7
 19046                           postdec1	equ	0xFE5
 19047                           fsr1h	equ	0xFE2
 19048                           fsr1l	equ	0xFE1
 19049                           indf2	equ	0xFDF
 19050                           postinc2	equ	0xFDE
 19051                           postdec2	equ	0xFDD
 19052                           plusw2	equ	0xFDB
 19053                           fsr2h	equ	0xFDA
 19054                           fsr2l	equ	0xFD9
 19055                           status	equ	0xFD8
 19056                           
 19057 ;; *************** function ___flpack *****************
 19058 ;; Defined at:
 19059 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19060 ;; Parameters:    Size  Location     Type
 19061 ;;  arg             4   13[COMRAM] unsigned long 
 19062 ;;  exp             1   17[COMRAM] unsigned char 
 19063 ;;  sign            1   18[COMRAM] unsigned char 
 19064 ;; Auto vars:     Size  Location     Type
 19065 ;;		None
 19066 ;; Return value:  Size  Location     Type
 19067 ;;                  4   13[COMRAM] unsigned char 
 19068 ;; Registers used:
 19069 ;;		wreg, status,2, status,0
 19070 ;; Tracked objects:
 19071 ;;		On entry : 0/0
 19072 ;;		On exit  : 0/0
 19073 ;;		Unchanged: 0/0
 19074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19075 ;;      Params:         6       0       0       0       0       0       0
 19076 ;;      Locals:         0       0       0       0       0       0       0
 19077 ;;      Temps:          4       0       0       0       0       0       0
 19078 ;;      Totals:        10       0       0       0       0       0       0
 19079 ;;Total ram usage:       10 bytes
 19080 ;; Hardware stack levels used:    1
 19081 ;; Hardware stack levels required when called:    2
 19082 ;; This function calls:
 19083 ;;		Nothing
 19084 ;; This function is called by:
 19085 ;;		___altofl
 19086 ;;		___awtofl
 19087 ;;		___fladd
 19088 ;;		___fldiv
 19089 ;;		___flmul
 19090 ;;		___lwtofl
 19091 ;; This function uses a non-reentrant model
 19092 ;;
 19093                           
 19094                           	psect	text97
 19095  004A54                     __ptext97:
 19096                           	opt stack 0
 19097  004A54                     ___flpack:
 19098                           	opt stack 26
 19099                           
 19100                           ;incstack = 0
 19101                           ;incstack = 0
 19102  004A54  5012               	movf	___flpack@exp,w,c
 19103  004A56  E005               	bz	l1534
 19104  004A58  5011               	movf	___flpack@arg+3,w,c
 19105  004A5A  100E               	iorwf	___flpack@arg,w,c
 19106  004A5C  100F               	iorwf	___flpack@arg+1,w,c
 19107  004A5E  1010               	iorwf	___flpack@arg+2,w,c
 19108  004A60  E10B               	bnz	l11287
 19109  004A62                     l1534:
 19110  004A62  6A0E               	clrf	?___flpack,c
 19111  004A64  6A0F               	clrf	?___flpack+1,c
 19112  004A66  6A10               	clrf	?___flpack+2,c
 19113  004A68  6A11               	clrf	?___flpack+3,c
 19114  004A6A  D053               	goto	l1535
 19115  004A6C                     l11285:
 19116  004A6C  2A12               	incf	___flpack@exp,f,c
 19117  004A6E  90D8               	bcf	status,0,c
 19118  004A70  3211               	rrcf	___flpack@arg+3,f,c
 19119  004A72  3210               	rrcf	___flpack@arg+2,f,c
 19120  004A74  320F               	rrcf	___flpack@arg+1,f,c
 19121  004A76  320E               	rrcf	___flpack@arg,f,c
 19122  004A78                     l11287:
 19123  004A78  6A14               	clrf	??___flpack& (0+255),c
 19124  004A7A  6A15               	clrf	(??___flpack+1)& (0+255),c
 19125  004A7C  6A16               	clrf	(??___flpack+2)& (0+255),c
 19126  004A7E  0EFE               	movlw	254
 19127  004A80  1411               	andwf	___flpack@arg+3,w,c
 19128  004A82  6E17               	movwf	(??___flpack+3)& (0+255),c
 19129  004A84  5017               	movf	??___flpack+3,w,c
 19130  004A86  1014               	iorwf	??___flpack,w,c
 19131  004A88  1015               	iorwf	??___flpack+1,w,c
 19132  004A8A  1016               	iorwf	??___flpack+2,w,c
 19133  004A8C  E00C               	bz	l1539
 19134  004A8E  D7EE               	goto	l11285
 19135  004A90                     l11289:
 19136  004A90  2A12               	incf	___flpack@exp,f,c
 19137  004A92  2A0E               	incf	___flpack@arg,f,c
 19138  004A94  0E00               	movlw	0
 19139  004A96  220F               	addwfc	___flpack@arg+1,f,c
 19140  004A98  2210               	addwfc	___flpack@arg+2,f,c
 19141  004A9A  2211               	addwfc	___flpack@arg+3,f,c
 19142  004A9C  90D8               	bcf	status,0,c
 19143  004A9E  3211               	rrcf	___flpack@arg+3,f,c
 19144  004AA0  3210               	rrcf	___flpack@arg+2,f,c
 19145  004AA2  320F               	rrcf	___flpack@arg+1,f,c
 19146  004AA4  320E               	rrcf	___flpack@arg,f,c
 19147  004AA6                     l1539:
 19148  004AA6  6A14               	clrf	??___flpack& (0+255),c
 19149  004AA8  6A15               	clrf	(??___flpack+1)& (0+255),c
 19150  004AAA  6A16               	clrf	(??___flpack+2)& (0+255),c
 19151  004AAC  5011               	movf	___flpack@arg+3,w,c
 19152  004AAE  6E17               	movwf	(??___flpack+3)& (0+255),c
 19153  004AB0  5017               	movf	??___flpack+3,w,c
 19154  004AB2  1014               	iorwf	??___flpack,w,c
 19155  004AB4  1015               	iorwf	??___flpack+1,w,c
 19156  004AB6  1016               	iorwf	??___flpack+2,w,c
 19157  004AB8  E007               	bz	l11297
 19158  004ABA  D7EA               	goto	l11289
 19159  004ABC                     l11295:
 19160  004ABC  0612               	decf	___flpack@exp,f,c
 19161  004ABE  90D8               	bcf	status,0,c
 19162  004AC0  360E               	rlcf	___flpack@arg,f,c
 19163  004AC2  360F               	rlcf	___flpack@arg+1,f,c
 19164  004AC4  3610               	rlcf	___flpack@arg+2,f,c
 19165  004AC6  3611               	rlcf	___flpack@arg+3,f,c
 19166  004AC8                     l11297:
 19167  004AC8  AE10               	btfss	___flpack@arg+2,7,c
 19168  004ACA  D7F8               	goto	l11295
 19169  004ACC  B012               	btfsc	___flpack@exp,0,c
 19170  004ACE  D002               	goto	l1545
 19171  004AD0  0E7F               	movlw	127
 19172  004AD2  1610               	andwf	___flpack@arg+2,f,c
 19173  004AD4                     l1545:
 19174  004AD4  90D8               	bcf	status,0,c
 19175  004AD6  3212               	rrcf	___flpack@exp,f,c
 19176  004AD8  C012  F014         	movff	___flpack@exp,??___flpack
 19177  004ADC  6A15               	clrf	(??___flpack+1)& (0+255),c
 19178  004ADE  6A16               	clrf	(??___flpack+2)& (0+255),c
 19179  004AE0  6A17               	clrf	(??___flpack+3)& (0+255),c
 19180  004AE2  C014  F017         	movff	??___flpack,??___flpack+3
 19181  004AE6  6A16               	clrf	??___flpack+2,c
 19182  004AE8  6A15               	clrf	??___flpack+1,c
 19183  004AEA  6A14               	clrf	??___flpack,c
 19184  004AEC  5014               	movf	??___flpack,w,c
 19185  004AEE  120E               	iorwf	___flpack@arg,f,c
 19186  004AF0  5015               	movf	??___flpack+1,w,c
 19187  004AF2  120F               	iorwf	___flpack@arg+1,f,c
 19188  004AF4  5016               	movf	??___flpack+2,w,c
 19189  004AF6  1210               	iorwf	___flpack@arg+2,f,c
 19190  004AF8  5017               	movf	??___flpack+3,w,c
 19191  004AFA  1211               	iorwf	___flpack@arg+3,f,c
 19192  004AFC  5013               	movf	___flpack@sign,w,c
 19193  004AFE  A4D8               	btfss	status,2,c
 19194  004B00  8E11               	bsf	___flpack@arg+3,7,c
 19195  004B02  C00E  F00E         	movff	___flpack@arg,?___flpack
 19196  004B06  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19197  004B0A  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19198  004B0E  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19199  004B12                     l1535:
 19200  004B12  0012               	return	
 19201  004B14                     __end_of___flpack:
 19202                           	opt stack 0
 19203                           tblptru	equ	0xFF8
 19204                           tblptrh	equ	0xFF7
 19205                           tblptrl	equ	0xFF6
 19206                           tablat	equ	0xFF5
 19207                           prodh	equ	0xFF4
 19208                           prodl	equ	0xFF3
 19209                           intcon	equ	0xFF2
 19210                           postinc0	equ	0xFEE
 19211                           wreg	equ	0xFE8
 19212                           indf1	equ	0xFE7
 19213                           postdec1	equ	0xFE5
 19214                           fsr1h	equ	0xFE2
 19215                           fsr1l	equ	0xFE1
 19216                           indf2	equ	0xFDF
 19217                           postinc2	equ	0xFDE
 19218                           postdec2	equ	0xFDD
 19219                           plusw2	equ	0xFDB
 19220                           fsr2h	equ	0xFDA
 19221                           fsr2l	equ	0xFD9
 19222                           status	equ	0xFD8
 19223                           
 19224 ;; *************** function _vscp_readAppReg *****************
 19225 ;; Defined at:
 19226 ;;		line 1272 in file "../main.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;  reg             1    wreg     unsigned char 
 19229 ;; Auto vars:     Size  Location     Type
 19230 ;;  reg             1   26[COMRAM] unsigned char 
 19231 ;;  pos             1   25[COMRAM] unsigned char 
 19232 ;;  rv              1   27[COMRAM] unsigned char 
 19233 ;; Return value:  Size  Location     Type
 19234 ;;                  1    wreg      unsigned char 
 19235 ;; Registers used:
 19236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19237 ;; Tracked objects:
 19238 ;;		On entry : E/1
 19239 ;;		On exit  : 0/0
 19240 ;;		Unchanged: 0/0
 19241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19242 ;;      Params:         0       0       0       0       0       0       0
 19243 ;;      Locals:         3       0       0       0       0       0       0
 19244 ;;      Temps:          0       0       0       0       0       0       0
 19245 ;;      Totals:         3       0       0       0       0       0       0
 19246 ;;Total ram usage:        3 bytes
 19247 ;; Hardware stack levels used:    1
 19248 ;; Hardware stack levels required when called:    3
 19249 ;; This function calls:
 19250 ;;		_readEEPROM
 19251 ;; This function is called by:
 19252 ;;		_vscp_readRegister
 19253 ;;		_vscp_handleProtocolEvent
 19254 ;; This function uses a non-reentrant model
 19255 ;;
 19256                           
 19257                           	psect	text98
 19258  001870                     __ptext98:
 19259                           	opt stack 0
 19260  001870                     _vscp_readAppReg:
 19261                           	opt stack 25
 19262                           
 19263                           ;incstack = 0
 19264                           ;incstack = 0
 19265                           ;vscp_readAppReg@reg stored from wreg
 19266  001870  CFE8 F01B          	movff	wreg,vscp_readAppReg@reg
 19267                           
 19268                           ;main.c: 1273: uint8_t rv;
 19269                           ;main.c: 1278: if (0 == vscp_page_select) {
 19270  001874  5047               	movf	_vscp_page_select+1,w,c
 19271  001876  1046               	iorwf	_vscp_page_select,w,c
 19272  001878  E101 D25B          	bz	l10639
 19273  00187C  D39F               	goto	l10641
 19274  00187E                     l10437:
 19275                           
 19276                           ;main.c: 1284: rv = readEEPROM( 0x41 );
 19277  00187E  6A17               	clrf	?_readEEPROM+1,c
 19278  001880  0E41               	movlw	65
 19279  001882  6E16               	movwf	?_readEEPROM,c
 19280  001884  EC0F  F02E         	call	_readEEPROM	;wreg free
 19281  001888  D3C6               	goto	L53
 19282  00188A                     l10439:
 19283                           
 19284                           ;main.c: 1289: rv = readEEPROM( 0x42 );
 19285  00188A  6A17               	clrf	?_readEEPROM+1,c
 19286  00188C  0E42               	movlw	66
 19287  00188E  6E16               	movwf	?_readEEPROM,c
 19288  001890  EC0F  F02E         	call	_readEEPROM	;wreg free
 19289  001894  D3C0               	goto	L53
 19290  001896                     l10441:
 19291                           
 19292                           ;main.c: 1294: rv = readEEPROM( 0x43 );
 19293  001896  6A17               	clrf	?_readEEPROM+1,c
 19294  001898  0E43               	movlw	67
 19295  00189A  6E16               	movwf	?_readEEPROM,c
 19296  00189C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19297  0018A0  D3BA               	goto	L53
 19298  0018A2                     l10443:
 19299                           
 19300                           ;main.c: 1299: rv = readEEPROM (0x44 );
 19301  0018A2  6A17               	clrf	?_readEEPROM+1,c
 19302  0018A4  0E44               	movlw	68
 19303  0018A6  6E16               	movwf	?_readEEPROM,c
 19304  0018A8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19305  0018AC  D3B4               	goto	L53
 19306  0018AE                     l10445:
 19307                           
 19308                           ;main.c: 1304: rv = readEEPROM( 0x45 );
 19309  0018AE  6A17               	clrf	?_readEEPROM+1,c
 19310  0018B0  0E45               	movlw	69
 19311  0018B2  6E16               	movwf	?_readEEPROM,c
 19312  0018B4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19313  0018B8  D3AE               	goto	L53
 19314  0018BA                     l10447:
 19315                           
 19316                           ;main.c: 1309: rv = readEEPROM( 0x46 );
 19317  0018BA  6A17               	clrf	?_readEEPROM+1,c
 19318  0018BC  0E46               	movlw	70
 19319  0018BE  6E16               	movwf	?_readEEPROM,c
 19320  0018C0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19321  0018C4  D3A8               	goto	L53
 19322  0018C6                     l10449:
 19323                           
 19324                           ;main.c: 1314: rv = readEEPROM( 0x47 );
 19325  0018C6  6A17               	clrf	?_readEEPROM+1,c
 19326  0018C8  0E47               	movlw	71
 19327  0018CA  6E16               	movwf	?_readEEPROM,c
 19328  0018CC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19329  0018D0  D3A2               	goto	L53
 19330  0018D2                     l10451:
 19331                           
 19332                           ;main.c: 1319: rv = readEEPROM( 0x48 );
 19333  0018D2  6A17               	clrf	?_readEEPROM+1,c
 19334  0018D4  0E48               	movlw	72
 19335  0018D6  6E16               	movwf	?_readEEPROM,c
 19336  0018D8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19337  0018DC  D39C               	goto	L53
 19338  0018DE                     l10453:
 19339                           
 19340                           ;main.c: 1324: rv = ((current_temp[0] & 0xff00) >> 8);
 19341  0018DE  0101               	movlb	1	; () banked
 19342  0018E0  5101               	movf	(_current_temp+1)& (0+255),w,b
 19343  0018E2  D399               	goto	L53
 19344  0018E4                     l312:
 19345                           
 19346                           ;main.c: 1329: rv = (current_temp[0] & 0x00ff);
 19347  0018E4  C100  F01C         	movff	_current_temp,vscp_readAppReg@rv
 19348                           
 19349                           ;main.c: 1330: break;
 19350  0018E8  D397               	goto	l10663
 19351  0018EA                     l10455:
 19352                           
 19353                           ;main.c: 1334: rv = ((current_temp[1] & 0xff00) >> 8);
 19354  0018EA  0101               	movlb	1	; () banked
 19355  0018EC  5103               	movf	(_current_temp+3)& (0+255),w,b
 19356  0018EE  D393               	goto	L53
 19357  0018F0                     l314:
 19358                           
 19359                           ;main.c: 1339: rv = (current_temp[1] & 0x00ff);
 19360  0018F0  C102  F01C         	movff	_current_temp+2,vscp_readAppReg@rv
 19361                           
 19362                           ;main.c: 1340: break;
 19363  0018F4  D391               	goto	l10663
 19364  0018F6                     l10457:
 19365                           
 19366                           ;main.c: 1344: rv = ((current_temp[2] & 0xff00) >> 8);
 19367  0018F6  0101               	movlb	1	; () banked
 19368  0018F8  5105               	movf	(_current_temp+5)& (0+255),w,b
 19369  0018FA  D38D               	goto	L53
 19370  0018FC                     l316:
 19371                           
 19372                           ;main.c: 1349: rv = (current_temp[2] & 0x00ff);
 19373  0018FC  C104  F01C         	movff	_current_temp+4,vscp_readAppReg@rv
 19374                           
 19375                           ;main.c: 1350: break;
 19376  001900  D38B               	goto	l10663
 19377  001902                     l10459:
 19378                           
 19379                           ;main.c: 1354: rv = ((current_temp[3] & 0xff00) >> 8);
 19380  001902  0101               	movlb	1	; () banked
 19381  001904  5107               	movf	(_current_temp+7)& (0+255),w,b
 19382  001906  D387               	goto	L53
 19383  001908                     l318:
 19384                           
 19385                           ;main.c: 1359: rv = (current_temp[3] & 0x00ff);
 19386  001908  C106  F01C         	movff	_current_temp+6,vscp_readAppReg@rv
 19387                           
 19388                           ;main.c: 1360: break;
 19389  00190C  D385               	goto	l10663
 19390  00190E                     l10461:
 19391                           
 19392                           ;main.c: 1364: rv = ((current_temp[4] & 0xff00) >> 8);
 19393  00190E  0101               	movlb	1	; () banked
 19394  001910  5109               	movf	(_current_temp+9)& (0+255),w,b
 19395  001912  D381               	goto	L53
 19396  001914                     l320:
 19397                           
 19398                           ;main.c: 1369: rv = (current_temp[4] & 0x00ff);
 19399  001914  C108  F01C         	movff	_current_temp+8,vscp_readAppReg@rv
 19400                           
 19401                           ;main.c: 1370: break;
 19402  001918  D37F               	goto	l10663
 19403  00191A                     l10463:
 19404                           
 19405                           ;main.c: 1374: rv = ((current_temp[5] & 0xff00) >> 8);
 19406  00191A  0101               	movlb	1	; () banked
 19407  00191C  510B               	movf	(_current_temp+11)& (0+255),w,b
 19408  00191E  D37B               	goto	L53
 19409  001920                     l322:
 19410                           
 19411                           ;main.c: 1379: rv = (current_temp[5] & 0x00ff);
 19412  001920  C10A  F01C         	movff	_current_temp+10,vscp_readAppReg@rv
 19413                           
 19414                           ;main.c: 1380: break;
 19415  001924  D379               	goto	l10663
 19416  001926                     l10465:
 19417                           
 19418                           ;main.c: 1384: rv = readEEPROM(0x49);
 19419  001926  6A17               	clrf	?_readEEPROM+1,c
 19420  001928  0E49               	movlw	73
 19421  00192A  6E16               	movwf	?_readEEPROM,c
 19422  00192C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19423  001930  D372               	goto	L53
 19424  001932                     l10467:
 19425                           
 19426                           ;main.c: 1389: rv = readEEPROM(0x4A);
 19427  001932  6A17               	clrf	?_readEEPROM+1,c
 19428  001934  0E4A               	movlw	74
 19429  001936  6E16               	movwf	?_readEEPROM,c
 19430  001938  EC0F  F02E         	call	_readEEPROM	;wreg free
 19431  00193C  D36C               	goto	L53
 19432  00193E                     l10469:
 19433                           
 19434                           ;main.c: 1394: rv = readEEPROM(0x4B);
 19435  00193E  6A17               	clrf	?_readEEPROM+1,c
 19436  001940  0E4B               	movlw	75
 19437  001942  6E16               	movwf	?_readEEPROM,c
 19438  001944  EC0F  F02E         	call	_readEEPROM	;wreg free
 19439  001948  D366               	goto	L53
 19440  00194A                     l10471:
 19441                           
 19442                           ;main.c: 1399: rv = readEEPROM(0x4C);
 19443  00194A  6A17               	clrf	?_readEEPROM+1,c
 19444  00194C  0E4C               	movlw	76
 19445  00194E  6E16               	movwf	?_readEEPROM,c
 19446  001950  EC0F  F02E         	call	_readEEPROM	;wreg free
 19447  001954  D360               	goto	L53
 19448  001956                     l10473:
 19449                           
 19450                           ;main.c: 1404: rv = readEEPROM(0x4D);
 19451  001956  6A17               	clrf	?_readEEPROM+1,c
 19452  001958  0E4D               	movlw	77
 19453  00195A  6E16               	movwf	?_readEEPROM,c
 19454  00195C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19455  001960  D35A               	goto	L53
 19456  001962                     l10475:
 19457                           
 19458                           ;main.c: 1409: rv = readEEPROM(0x4E);
 19459  001962  6A17               	clrf	?_readEEPROM+1,c
 19460  001964  0E4E               	movlw	78
 19461  001966  6E16               	movwf	?_readEEPROM,c
 19462  001968  EC0F  F02E         	call	_readEEPROM	;wreg free
 19463  00196C  D354               	goto	L53
 19464  00196E                     l10477:
 19465                           
 19466                           ;main.c: 1416: rv = readEEPROM(0x4F);
 19467  00196E  6A17               	clrf	?_readEEPROM+1,c
 19468  001970  0E4F               	movlw	79
 19469  001972  6E16               	movwf	?_readEEPROM,c
 19470  001974  EC0F  F02E         	call	_readEEPROM	;wreg free
 19471  001978  D34E               	goto	L53
 19472  00197A                     l10479:
 19473                           
 19474                           ;main.c: 1421: rv = readEEPROM(0x50);
 19475  00197A  6A17               	clrf	?_readEEPROM+1,c
 19476  00197C  0E50               	movlw	80
 19477  00197E  6E16               	movwf	?_readEEPROM,c
 19478  001980  EC0F  F02E         	call	_readEEPROM	;wreg free
 19479  001984  D348               	goto	L53
 19480  001986                     l10481:
 19481                           
 19482                           ;main.c: 1426: rv = readEEPROM(0x51);
 19483  001986  6A17               	clrf	?_readEEPROM+1,c
 19484  001988  0E51               	movlw	81
 19485  00198A  6E16               	movwf	?_readEEPROM,c
 19486  00198C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19487  001990  D342               	goto	L53
 19488  001992                     l10483:
 19489                           
 19490                           ;main.c: 1431: rv = readEEPROM(0x52);
 19491  001992  6A17               	clrf	?_readEEPROM+1,c
 19492  001994  0E52               	movlw	82
 19493  001996  6E16               	movwf	?_readEEPROM,c
 19494  001998  EC0F  F02E         	call	_readEEPROM	;wreg free
 19495  00199C  D33C               	goto	L53
 19496  00199E                     l10485:
 19497                           
 19498                           ;main.c: 1436: rv = readEEPROM(0x53);
 19499  00199E  6A17               	clrf	?_readEEPROM+1,c
 19500  0019A0  0E53               	movlw	83
 19501  0019A2  6E16               	movwf	?_readEEPROM,c
 19502  0019A4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19503  0019A8  D336               	goto	L53
 19504  0019AA                     l10487:
 19505                           
 19506                           ;main.c: 1441: rv = readEEPROM(0x54);
 19507  0019AA  6A17               	clrf	?_readEEPROM+1,c
 19508  0019AC  0E54               	movlw	84
 19509  0019AE  6E16               	movwf	?_readEEPROM,c
 19510  0019B0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19511  0019B4  D330               	goto	L53
 19512  0019B6                     l10489:
 19513                           
 19514                           ;main.c: 1446: rv = readEEPROM(0x55);
 19515  0019B6  6A17               	clrf	?_readEEPROM+1,c
 19516  0019B8  0E55               	movlw	85
 19517  0019BA  6E16               	movwf	?_readEEPROM,c
 19518  0019BC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19519  0019C0  D32A               	goto	L53
 19520  0019C2                     l10491:
 19521                           
 19522                           ;main.c: 1451: rv = readEEPROM(0x56);
 19523  0019C2  6A17               	clrf	?_readEEPROM+1,c
 19524  0019C4  0E56               	movlw	86
 19525  0019C6  6E16               	movwf	?_readEEPROM,c
 19526  0019C8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19527  0019CC  D324               	goto	L53
 19528  0019CE                     l10493:
 19529                           
 19530                           ;main.c: 1456: rv = readEEPROM(0x57);
 19531  0019CE  6A17               	clrf	?_readEEPROM+1,c
 19532  0019D0  0E57               	movlw	87
 19533  0019D2  6E16               	movwf	?_readEEPROM,c
 19534  0019D4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19535  0019D8  D31E               	goto	L53
 19536  0019DA                     l10495:
 19537                           
 19538                           ;main.c: 1461: rv = readEEPROM(0x58);
 19539  0019DA  6A17               	clrf	?_readEEPROM+1,c
 19540  0019DC  0E58               	movlw	88
 19541  0019DE  6E16               	movwf	?_readEEPROM,c
 19542  0019E0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19543  0019E4  D318               	goto	L53
 19544  0019E6                     l10497:
 19545                           
 19546                           ;main.c: 1466: rv = readEEPROM(0x59);
 19547  0019E6  6A17               	clrf	?_readEEPROM+1,c
 19548  0019E8  0E59               	movlw	89
 19549  0019EA  6E16               	movwf	?_readEEPROM,c
 19550  0019EC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19551  0019F0  D312               	goto	L53
 19552  0019F2                     l10499:
 19553                           
 19554                           ;main.c: 1471: rv = readEEPROM(0x5A);
 19555  0019F2  6A17               	clrf	?_readEEPROM+1,c
 19556  0019F4  0E5A               	movlw	90
 19557  0019F6  6E16               	movwf	?_readEEPROM,c
 19558  0019F8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19559  0019FC  D30C               	goto	L53
 19560  0019FE                     l10501:
 19561                           
 19562                           ;main.c: 1480: rv = readEEPROM(0x5B);
 19563  0019FE  6A17               	clrf	?_readEEPROM+1,c
 19564  001A00  0E5B               	movlw	91
 19565  001A02  6E16               	movwf	?_readEEPROM,c
 19566  001A04  EC0F  F02E         	call	_readEEPROM	;wreg free
 19567  001A08  D306               	goto	L53
 19568  001A0A                     l10503:
 19569                           
 19570                           ;main.c: 1485: rv = readEEPROM(0x5C);
 19571  001A0A  6A17               	clrf	?_readEEPROM+1,c
 19572  001A0C  0E5C               	movlw	92
 19573  001A0E  6E16               	movwf	?_readEEPROM,c
 19574  001A10  EC0F  F02E         	call	_readEEPROM	;wreg free
 19575  001A14  D300               	goto	L53
 19576  001A16                     l10505:
 19577                           
 19578                           ;main.c: 1490: rv = readEEPROM(0x5D);
 19579  001A16  6A17               	clrf	?_readEEPROM+1,c
 19580  001A18  0E5D               	movlw	93
 19581  001A1A  6E16               	movwf	?_readEEPROM,c
 19582  001A1C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19583  001A20  D2FA               	goto	L53
 19584  001A22                     l10507:
 19585                           
 19586                           ;main.c: 1495: rv = readEEPROM(0x5E);
 19587  001A22  6A17               	clrf	?_readEEPROM+1,c
 19588  001A24  0E5E               	movlw	94
 19589  001A26  6E16               	movwf	?_readEEPROM,c
 19590  001A28  EC0F  F02E         	call	_readEEPROM	;wreg free
 19591  001A2C  D2F4               	goto	L53
 19592  001A2E                     l10509:
 19593                           
 19594                           ;main.c: 1500: rv = readEEPROM(0x5F);
 19595  001A2E  6A17               	clrf	?_readEEPROM+1,c
 19596  001A30  0E5F               	movlw	95
 19597  001A32  6E16               	movwf	?_readEEPROM,c
 19598  001A34  EC0F  F02E         	call	_readEEPROM	;wreg free
 19599  001A38  D2EE               	goto	L53
 19600  001A3A                     l10511:
 19601                           
 19602                           ;main.c: 1505: rv = readEEPROM(0x60);
 19603  001A3A  6A17               	clrf	?_readEEPROM+1,c
 19604  001A3C  0E60               	movlw	96
 19605  001A3E  6E16               	movwf	?_readEEPROM,c
 19606  001A40  EC0F  F02E         	call	_readEEPROM	;wreg free
 19607  001A44  D2E8               	goto	L53
 19608  001A46                     l10513:
 19609                           
 19610                           ;main.c: 1510: rv = readEEPROM(0x61);
 19611  001A46  6A17               	clrf	?_readEEPROM+1,c
 19612  001A48  0E61               	movlw	97
 19613  001A4A  6E16               	movwf	?_readEEPROM,c
 19614  001A4C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19615  001A50  D2E2               	goto	L53
 19616  001A52                     l10515:
 19617                           
 19618                           ;main.c: 1515: rv = readEEPROM(0x62);
 19619  001A52  6A17               	clrf	?_readEEPROM+1,c
 19620  001A54  0E62               	movlw	98
 19621  001A56  6E16               	movwf	?_readEEPROM,c
 19622  001A58  EC0F  F02E         	call	_readEEPROM	;wreg free
 19623  001A5C  D2DC               	goto	L53
 19624  001A5E                     l10517:
 19625                           
 19626                           ;main.c: 1520: rv = readEEPROM(0x63);
 19627  001A5E  6A17               	clrf	?_readEEPROM+1,c
 19628  001A60  0E63               	movlw	99
 19629  001A62  6E16               	movwf	?_readEEPROM,c
 19630  001A64  EC0F  F02E         	call	_readEEPROM	;wreg free
 19631  001A68  D2D6               	goto	L53
 19632  001A6A                     l10519:
 19633                           
 19634                           ;main.c: 1525: rv = readEEPROM(0x64);
 19635  001A6A  6A17               	clrf	?_readEEPROM+1,c
 19636  001A6C  0E64               	movlw	100
 19637  001A6E  6E16               	movwf	?_readEEPROM,c
 19638  001A70  EC0F  F02E         	call	_readEEPROM	;wreg free
 19639  001A74  D2D0               	goto	L53
 19640  001A76                     l10521:
 19641                           
 19642                           ;main.c: 1530: rv = readEEPROM(0x65);
 19643  001A76  6A17               	clrf	?_readEEPROM+1,c
 19644  001A78  0E65               	movlw	101
 19645  001A7A  6E16               	movwf	?_readEEPROM,c
 19646  001A7C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19647  001A80  D2CA               	goto	L53
 19648  001A82                     l10523:
 19649                           
 19650                           ;main.c: 1535: rv = readEEPROM(0x66);
 19651  001A82  6A17               	clrf	?_readEEPROM+1,c
 19652  001A84  0E66               	movlw	102
 19653  001A86  6E16               	movwf	?_readEEPROM,c
 19654  001A88  EC0F  F02E         	call	_readEEPROM	;wreg free
 19655  001A8C  D2C4               	goto	L53
 19656  001A8E                     l10525:
 19657                           
 19658                           ;main.c: 1545: rv = readEEPROM(0x67);
 19659  001A8E  6A17               	clrf	?_readEEPROM+1,c
 19660  001A90  0E67               	movlw	103
 19661  001A92  6E16               	movwf	?_readEEPROM,c
 19662  001A94  EC0F  F02E         	call	_readEEPROM	;wreg free
 19663  001A98  D2BE               	goto	L53
 19664  001A9A                     l10527:
 19665                           
 19666                           ;main.c: 1550: rv = readEEPROM(0x68);
 19667  001A9A  6A17               	clrf	?_readEEPROM+1,c
 19668  001A9C  0E68               	movlw	104
 19669  001A9E  6E16               	movwf	?_readEEPROM,c
 19670  001AA0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19671  001AA4  D2B8               	goto	L53
 19672  001AA6                     l10529:
 19673                           
 19674                           ;main.c: 1555: rv = readEEPROM(0x69);
 19675  001AA6  6A17               	clrf	?_readEEPROM+1,c
 19676  001AA8  0E69               	movlw	105
 19677  001AAA  6E16               	movwf	?_readEEPROM,c
 19678  001AAC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19679  001AB0  D2B2               	goto	L53
 19680  001AB2                     l10531:
 19681                           
 19682                           ;main.c: 1560: rv = readEEPROM(0x6A);
 19683  001AB2  6A17               	clrf	?_readEEPROM+1,c
 19684  001AB4  0E6A               	movlw	106
 19685  001AB6  6E16               	movwf	?_readEEPROM,c
 19686  001AB8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19687  001ABC  D2AC               	goto	L53
 19688  001ABE                     l10533:
 19689                           
 19690                           ;main.c: 1565: rv = readEEPROM(0x6B);
 19691  001ABE  6A17               	clrf	?_readEEPROM+1,c
 19692  001AC0  0E6B               	movlw	107
 19693  001AC2  6E16               	movwf	?_readEEPROM,c
 19694  001AC4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19695  001AC8  D2A6               	goto	L53
 19696  001ACA                     l10535:
 19697                           
 19698                           ;main.c: 1570: rv = readEEPROM(0x6C);
 19699  001ACA  6A17               	clrf	?_readEEPROM+1,c
 19700  001ACC  0E6C               	movlw	108
 19701  001ACE  6E16               	movwf	?_readEEPROM,c
 19702  001AD0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19703  001AD4  D2A0               	goto	L53
 19704  001AD6                     l10537:
 19705                           
 19706                           ;main.c: 1575: rv = readEEPROM(0x6D);
 19707  001AD6  6A17               	clrf	?_readEEPROM+1,c
 19708  001AD8  0E6D               	movlw	109
 19709  001ADA  6E16               	movwf	?_readEEPROM,c
 19710  001ADC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19711  001AE0  D29A               	goto	L53
 19712  001AE2                     l10539:
 19713                           
 19714                           ;main.c: 1580: rv = readEEPROM(0x6E);
 19715  001AE2  6A17               	clrf	?_readEEPROM+1,c
 19716  001AE4  0E6E               	movlw	110
 19717  001AE6  6E16               	movwf	?_readEEPROM,c
 19718  001AE8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19719  001AEC  D294               	goto	L53
 19720  001AEE                     l10541:
 19721                           
 19722                           ;main.c: 1585: rv = readEEPROM(0x6F);
 19723  001AEE  6A17               	clrf	?_readEEPROM+1,c
 19724  001AF0  0E6F               	movlw	111
 19725  001AF2  6E16               	movwf	?_readEEPROM,c
 19726  001AF4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19727  001AF8  D28E               	goto	L53
 19728  001AFA                     l10543:
 19729                           
 19730                           ;main.c: 1590: rv = readEEPROM(0x70);
 19731  001AFA  6A17               	clrf	?_readEEPROM+1,c
 19732  001AFC  0E70               	movlw	112
 19733  001AFE  6E16               	movwf	?_readEEPROM,c
 19734  001B00  EC0F  F02E         	call	_readEEPROM	;wreg free
 19735  001B04  D288               	goto	L53
 19736  001B06                     l10545:
 19737                           
 19738                           ;main.c: 1595: rv = readEEPROM(0x71);
 19739  001B06  6A17               	clrf	?_readEEPROM+1,c
 19740  001B08  0E71               	movlw	113
 19741  001B0A  6E16               	movwf	?_readEEPROM,c
 19742  001B0C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19743  001B10  D282               	goto	L53
 19744  001B12                     l10547:
 19745                           
 19746                           ;main.c: 1600: rv = readEEPROM(0x72);
 19747  001B12  6A17               	clrf	?_readEEPROM+1,c
 19748  001B14  0E72               	movlw	114
 19749  001B16  6E16               	movwf	?_readEEPROM,c
 19750  001B18  EC0F  F02E         	call	_readEEPROM	;wreg free
 19751  001B1C  D27C               	goto	L53
 19752  001B1E                     l10549:
 19753                           
 19754                           ;main.c: 1609: rv = readEEPROM(0x73);
 19755  001B1E  6A17               	clrf	?_readEEPROM+1,c
 19756  001B20  0E73               	movlw	115
 19757  001B22  6E16               	movwf	?_readEEPROM,c
 19758  001B24  EC0F  F02E         	call	_readEEPROM	;wreg free
 19759  001B28  D276               	goto	L53
 19760  001B2A                     l10551:
 19761                           
 19762                           ;main.c: 1614: rv = readEEPROM(0x74);
 19763  001B2A  6A17               	clrf	?_readEEPROM+1,c
 19764  001B2C  0E74               	movlw	116
 19765  001B2E  6E16               	movwf	?_readEEPROM,c
 19766  001B30  EC0F  F02E         	call	_readEEPROM	;wreg free
 19767  001B34  D270               	goto	L53
 19768  001B36                     l10553:
 19769                           
 19770                           ;main.c: 1619: rv = readEEPROM(0x75);
 19771  001B36  6A17               	clrf	?_readEEPROM+1,c
 19772  001B38  0E75               	movlw	117
 19773  001B3A  6E16               	movwf	?_readEEPROM,c
 19774  001B3C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19775  001B40  D26A               	goto	L53
 19776  001B42                     l10555:
 19777                           
 19778                           ;main.c: 1624: rv = readEEPROM(0x76);
 19779  001B42  6A17               	clrf	?_readEEPROM+1,c
 19780  001B44  0E76               	movlw	118
 19781  001B46  6E16               	movwf	?_readEEPROM,c
 19782  001B48  EC0F  F02E         	call	_readEEPROM	;wreg free
 19783  001B4C  D264               	goto	L53
 19784  001B4E                     l10557:
 19785                           
 19786                           ;main.c: 1629: rv = readEEPROM(0x77);
 19787  001B4E  6A17               	clrf	?_readEEPROM+1,c
 19788  001B50  0E77               	movlw	119
 19789  001B52  6E16               	movwf	?_readEEPROM,c
 19790  001B54  EC0F  F02E         	call	_readEEPROM	;wreg free
 19791  001B58  D25E               	goto	L53
 19792  001B5A                     l10559:
 19793                           
 19794                           ;main.c: 1634: rv = readEEPROM(0x78);
 19795  001B5A  6A17               	clrf	?_readEEPROM+1,c
 19796  001B5C  0E78               	movlw	120
 19797  001B5E  6E16               	movwf	?_readEEPROM,c
 19798  001B60  EC0F  F02E         	call	_readEEPROM	;wreg free
 19799  001B64  D258               	goto	L53
 19800  001B66                     l10561:
 19801                           
 19802                           ;main.c: 1639: rv = readEEPROM(0x79);
 19803  001B66  6A17               	clrf	?_readEEPROM+1,c
 19804  001B68  0E79               	movlw	121
 19805  001B6A  6E16               	movwf	?_readEEPROM,c
 19806  001B6C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19807  001B70  D252               	goto	L53
 19808  001B72                     l10563:
 19809                           
 19810                           ;main.c: 1644: rv = readEEPROM(0x7A);
 19811  001B72  6A17               	clrf	?_readEEPROM+1,c
 19812  001B74  0E7A               	movlw	122
 19813  001B76  6E16               	movwf	?_readEEPROM,c
 19814  001B78  EC0F  F02E         	call	_readEEPROM	;wreg free
 19815  001B7C  D24C               	goto	L53
 19816  001B7E                     l10565:
 19817                           
 19818                           ;main.c: 1649: rv = readEEPROM(0x7B);
 19819  001B7E  6A17               	clrf	?_readEEPROM+1,c
 19820  001B80  0E7B               	movlw	123
 19821  001B82  6E16               	movwf	?_readEEPROM,c
 19822  001B84  EC0F  F02E         	call	_readEEPROM	;wreg free
 19823  001B88  D246               	goto	L53
 19824  001B8A                     l10567:
 19825                           
 19826                           ;main.c: 1654: rv = readEEPROM(0x7C);
 19827  001B8A  6A17               	clrf	?_readEEPROM+1,c
 19828  001B8C  0E7C               	movlw	124
 19829  001B8E  6E16               	movwf	?_readEEPROM,c
 19830  001B90  EC0F  F02E         	call	_readEEPROM	;wreg free
 19831  001B94  D240               	goto	L53
 19832  001B96                     l10569:
 19833                           
 19834                           ;main.c: 1659: rv = readEEPROM(0x7D);
 19835  001B96  6A17               	clrf	?_readEEPROM+1,c
 19836  001B98  0E7D               	movlw	125
 19837  001B9A  6E16               	movwf	?_readEEPROM,c
 19838  001B9C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19839  001BA0  D23A               	goto	L53
 19840  001BA2                     l10571:
 19841                           
 19842                           ;main.c: 1664: rv = readEEPROM(0x7E);
 19843  001BA2  6A17               	clrf	?_readEEPROM+1,c
 19844  001BA4  0E7E               	movlw	126
 19845  001BA6  6E16               	movwf	?_readEEPROM,c
 19846  001BA8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19847  001BAC  D234               	goto	L53
 19848  001BAE                     l10573:
 19849                           
 19850                           ;main.c: 1673: rv = readEEPROM(0x7F);
 19851  001BAE  6A17               	clrf	?_readEEPROM+1,c
 19852  001BB0  0E7F               	movlw	127
 19853  001BB2  6E16               	movwf	?_readEEPROM,c
 19854  001BB4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19855  001BB8  D22E               	goto	L53
 19856  001BBA                     l10575:
 19857                           
 19858                           ;main.c: 1678: rv = readEEPROM(0x80);
 19859  001BBA  6A17               	clrf	?_readEEPROM+1,c
 19860  001BBC  0E80               	movlw	128
 19861  001BBE  6E16               	movwf	?_readEEPROM,c
 19862  001BC0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19863  001BC4  D228               	goto	L53
 19864  001BC6                     l10577:
 19865                           
 19866                           ;main.c: 1683: rv = readEEPROM(0x81);
 19867  001BC6  6A17               	clrf	?_readEEPROM+1,c
 19868  001BC8  0E81               	movlw	129
 19869  001BCA  6E16               	movwf	?_readEEPROM,c
 19870  001BCC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19871  001BD0  D222               	goto	L53
 19872  001BD2                     l10579:
 19873                           
 19874                           ;main.c: 1688: rv = readEEPROM(0x82);
 19875  001BD2  6A17               	clrf	?_readEEPROM+1,c
 19876  001BD4  0E82               	movlw	130
 19877  001BD6  6E16               	movwf	?_readEEPROM,c
 19878  001BD8  EC0F  F02E         	call	_readEEPROM	;wreg free
 19879  001BDC  D21C               	goto	L53
 19880  001BDE                     l10581:
 19881                           
 19882                           ;main.c: 1693: rv = readEEPROM(0x83);
 19883  001BDE  6A17               	clrf	?_readEEPROM+1,c
 19884  001BE0  0E83               	movlw	131
 19885  001BE2  6E16               	movwf	?_readEEPROM,c
 19886  001BE4  EC0F  F02E         	call	_readEEPROM	;wreg free
 19887  001BE8  D216               	goto	L53
 19888  001BEA                     l10583:
 19889                           
 19890                           ;main.c: 1698: rv = readEEPROM(0x84);
 19891  001BEA  6A17               	clrf	?_readEEPROM+1,c
 19892  001BEC  0E84               	movlw	132
 19893  001BEE  6E16               	movwf	?_readEEPROM,c
 19894  001BF0  EC0F  F02E         	call	_readEEPROM	;wreg free
 19895  001BF4  D210               	goto	L53
 19896  001BF6                     l10585:
 19897                           
 19898                           ;main.c: 1703: rv = readEEPROM(0x85);
 19899  001BF6  6A17               	clrf	?_readEEPROM+1,c
 19900  001BF8  0E85               	movlw	133
 19901  001BFA  6E16               	movwf	?_readEEPROM,c
 19902  001BFC  EC0F  F02E         	call	_readEEPROM	;wreg free
 19903  001C00  D20A               	goto	L53
 19904  001C02                     l10587:
 19905                           
 19906                           ;main.c: 1708: rv = readEEPROM(0x86);
 19907  001C02  6A17               	clrf	?_readEEPROM+1,c
 19908  001C04  0E86               	movlw	134
 19909  001C06  6E16               	movwf	?_readEEPROM,c
 19910  001C08  EC0F  F02E         	call	_readEEPROM	;wreg free
 19911  001C0C  D204               	goto	L53
 19912  001C0E                     l10589:
 19913                           
 19914                           ;main.c: 1713: rv = readEEPROM(0x87);
 19915  001C0E  6A17               	clrf	?_readEEPROM+1,c
 19916  001C10  0E87               	movlw	135
 19917  001C12  6E16               	movwf	?_readEEPROM,c
 19918  001C14  EC0F  F02E         	call	_readEEPROM	;wreg free
 19919  001C18  D1FE               	goto	L53
 19920  001C1A                     l10591:
 19921                           
 19922                           ;main.c: 1718: rv = readEEPROM(0x88);
 19923  001C1A  6A17               	clrf	?_readEEPROM+1,c
 19924  001C1C  0E88               	movlw	136
 19925  001C1E  6E16               	movwf	?_readEEPROM,c
 19926  001C20  EC0F  F02E         	call	_readEEPROM	;wreg free
 19927  001C24  D1F8               	goto	L53
 19928  001C26                     l10593:
 19929                           
 19930                           ;main.c: 1723: rv = readEEPROM(0x89);
 19931  001C26  6A17               	clrf	?_readEEPROM+1,c
 19932  001C28  0E89               	movlw	137
 19933  001C2A  6E16               	movwf	?_readEEPROM,c
 19934  001C2C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19935  001C30  D1F2               	goto	L53
 19936  001C32                     l10595:
 19937                           
 19938                           ;main.c: 1728: rv = readEEPROM(0x8A);
 19939  001C32  6A17               	clrf	?_readEEPROM+1,c
 19940  001C34  0E8A               	movlw	138
 19941  001C36  6E16               	movwf	?_readEEPROM,c
 19942  001C38  EC0F  F02E         	call	_readEEPROM	;wreg free
 19943  001C3C  D1EC               	goto	L53
 19944  001C3E                     l10597:
 19945                           
 19946                           ;main.c: 1737: rv = readEEPROM(0x8B);
 19947  001C3E  6A17               	clrf	?_readEEPROM+1,c
 19948  001C40  0E8B               	movlw	139
 19949  001C42  6E16               	movwf	?_readEEPROM,c
 19950  001C44  EC0F  F02E         	call	_readEEPROM	;wreg free
 19951  001C48  D1E6               	goto	L53
 19952  001C4A                     l10599:
 19953                           
 19954                           ;main.c: 1742: rv = readEEPROM(0x8C);
 19955  001C4A  6A17               	clrf	?_readEEPROM+1,c
 19956  001C4C  0E8C               	movlw	140
 19957  001C4E  6E16               	movwf	?_readEEPROM,c
 19958  001C50  EC0F  F02E         	call	_readEEPROM	;wreg free
 19959  001C54  D1E0               	goto	L53
 19960  001C56                     l10601:
 19961                           
 19962                           ;main.c: 1747: rv = readEEPROM(0x8D);
 19963  001C56  6A17               	clrf	?_readEEPROM+1,c
 19964  001C58  0E8D               	movlw	141
 19965  001C5A  6E16               	movwf	?_readEEPROM,c
 19966  001C5C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19967  001C60  D1DA               	goto	L53
 19968  001C62                     l10603:
 19969                           
 19970                           ;main.c: 1752: rv = readEEPROM(0x8E);
 19971  001C62  6A17               	clrf	?_readEEPROM+1,c
 19972  001C64  0E8E               	movlw	142
 19973  001C66  6E16               	movwf	?_readEEPROM,c
 19974  001C68  EC0F  F02E         	call	_readEEPROM	;wreg free
 19975  001C6C  D1D4               	goto	L53
 19976  001C6E                     l10605:
 19977                           
 19978                           ;main.c: 1757: rv = readEEPROM(0x8F);
 19979  001C6E  6A17               	clrf	?_readEEPROM+1,c
 19980  001C70  0E8F               	movlw	143
 19981  001C72  6E16               	movwf	?_readEEPROM,c
 19982  001C74  EC0F  F02E         	call	_readEEPROM	;wreg free
 19983  001C78  D1CE               	goto	L53
 19984  001C7A                     l10607:
 19985                           
 19986                           ;main.c: 1762: rv = readEEPROM(0x90);
 19987  001C7A  6A17               	clrf	?_readEEPROM+1,c
 19988  001C7C  0E90               	movlw	144
 19989  001C7E  6E16               	movwf	?_readEEPROM,c
 19990  001C80  EC0F  F02E         	call	_readEEPROM	;wreg free
 19991  001C84  D1C8               	goto	L53
 19992  001C86                     l10609:
 19993                           
 19994                           ;main.c: 1767: rv = readEEPROM(0x91);
 19995  001C86  6A17               	clrf	?_readEEPROM+1,c
 19996  001C88  0E91               	movlw	145
 19997  001C8A  6E16               	movwf	?_readEEPROM,c
 19998  001C8C  EC0F  F02E         	call	_readEEPROM	;wreg free
 19999  001C90  D1C2               	goto	L53
 20000  001C92                     l10611:
 20001                           
 20002                           ;main.c: 1772: rv = readEEPROM(0x92);
 20003  001C92  6A17               	clrf	?_readEEPROM+1,c
 20004  001C94  0E92               	movlw	146
 20005  001C96  6E16               	movwf	?_readEEPROM,c
 20006  001C98  EC0F  F02E         	call	_readEEPROM	;wreg free
 20007  001C9C  D1BC               	goto	L53
 20008  001C9E                     l10613:
 20009                           
 20010                           ;main.c: 1777: rv = readEEPROM(0x93);
 20011  001C9E  6A17               	clrf	?_readEEPROM+1,c
 20012  001CA0  0E93               	movlw	147
 20013  001CA2  6E16               	movwf	?_readEEPROM,c
 20014  001CA4  EC0F  F02E         	call	_readEEPROM	;wreg free
 20015  001CA8  D1B6               	goto	L53
 20016  001CAA                     l10615:
 20017                           
 20018                           ;main.c: 1782: rv = readEEPROM(0x94);
 20019  001CAA  6A17               	clrf	?_readEEPROM+1,c
 20020  001CAC  0E94               	movlw	148
 20021  001CAE  6E16               	movwf	?_readEEPROM,c
 20022  001CB0  EC0F  F02E         	call	_readEEPROM	;wreg free
 20023  001CB4  D1B0               	goto	L53
 20024  001CB6                     l10617:
 20025                           
 20026                           ;main.c: 1787: rv = readEEPROM(0x95);
 20027  001CB6  6A17               	clrf	?_readEEPROM+1,c
 20028  001CB8  0E95               	movlw	149
 20029  001CBA  6E16               	movwf	?_readEEPROM,c
 20030  001CBC  EC0F  F02E         	call	_readEEPROM	;wreg free
 20031  001CC0  D1AA               	goto	L53
 20032  001CC2                     l10619:
 20033                           
 20034                           ;main.c: 1792: rv = readEEPROM(0x96);
 20035  001CC2  6A17               	clrf	?_readEEPROM+1,c
 20036  001CC4  0E96               	movlw	150
 20037  001CC6  6E16               	movwf	?_readEEPROM,c
 20038  001CC8  EC0F  F02E         	call	_readEEPROM	;wreg free
 20039  001CCC  D1A4               	goto	L53
 20040  001CCE                     l10621:
 20041                           
 20042                           ;main.c: 1802: rv = readEEPROM(0x97);
 20043  001CCE  6A17               	clrf	?_readEEPROM+1,c
 20044  001CD0  0E97               	movlw	151
 20045  001CD2  6E16               	movwf	?_readEEPROM,c
 20046  001CD4  EC0F  F02E         	call	_readEEPROM	;wreg free
 20047  001CD8  D19E               	goto	L53
 20048  001CDA                     l10623:
 20049                           
 20050                           ;main.c: 1807: rv = readEEPROM(0x98);
 20051  001CDA  6A17               	clrf	?_readEEPROM+1,c
 20052  001CDC  0E98               	movlw	152
 20053  001CDE  6E16               	movwf	?_readEEPROM,c
 20054  001CE0  EC0F  F02E         	call	_readEEPROM	;wreg free
 20055  001CE4  D198               	goto	L53
 20056  001CE6                     l10625:
 20057                           
 20058                           ;main.c: 1812: rv = readEEPROM(0x99);
 20059  001CE6  6A17               	clrf	?_readEEPROM+1,c
 20060  001CE8  0E99               	movlw	153
 20061  001CEA  6E16               	movwf	?_readEEPROM,c
 20062  001CEC  EC0F  F02E         	call	_readEEPROM	;wreg free
 20063  001CF0  D192               	goto	L53
 20064  001CF2                     l10627:
 20065                           
 20066                           ;main.c: 1817: rv = readEEPROM(0x9A);
 20067  001CF2  6A17               	clrf	?_readEEPROM+1,c
 20068  001CF4  0E9A               	movlw	154
 20069  001CF6  6E16               	movwf	?_readEEPROM,c
 20070  001CF8  EC0F  F02E         	call	_readEEPROM	;wreg free
 20071  001CFC  D18C               	goto	L53
 20072  001CFE                     l10629:
 20073                           
 20074                           ;main.c: 1822: rv = readEEPROM(0x9B);
 20075  001CFE  6A17               	clrf	?_readEEPROM+1,c
 20076  001D00  0E9B               	movlw	155
 20077  001D02  6E16               	movwf	?_readEEPROM,c
 20078  001D04  EC0F  F02E         	call	_readEEPROM	;wreg free
 20079  001D08  D186               	goto	L53
 20080  001D0A                     l10631:
 20081                           
 20082                           ;main.c: 1827: rv = readEEPROM(0x9C);
 20083  001D0A  6A17               	clrf	?_readEEPROM+1,c
 20084  001D0C  0E9C               	movlw	156
 20085  001D0E  6E16               	movwf	?_readEEPROM,c
 20086  001D10  EC0F  F02E         	call	_readEEPROM	;wreg free
 20087  001D14  D180               	goto	L53
 20088  001D16                     l407:
 20089                           
 20090                           ;main.c: 1832: rv = 0;
 20091  001D16  6A1C               	clrf	vscp_readAppReg@rv,c
 20092                           
 20093                           ;main.c: 1833: break;
 20094  001D18  D17F               	goto	l10663
 20095  001D1A                     l10633:
 20096                           
 20097                           ;main.c: 1842: rv = readEEPROM(0xF2);
 20098  001D1A  6A17               	clrf	?_readEEPROM+1,c
 20099  001D1C  0EF2               	movlw	242
 20100  001D1E  6E16               	movwf	?_readEEPROM,c
 20101  001D20  EC0F  F02E         	call	_readEEPROM	;wreg free
 20102  001D24  D178               	goto	L53
 20103  001D26                     l10635:
 20104                           
 20105                           ;main.c: 1847: rv = readEEPROM(0xF3);
 20106  001D26  6A17               	clrf	?_readEEPROM+1,c
 20107  001D28  0EF3               	movlw	243
 20108  001D2A  6E16               	movwf	?_readEEPROM,c
 20109  001D2C  EC0F  F02E         	call	_readEEPROM	;wreg free
 20110  001D30  D172               	goto	L53
 20111  001D32                     l10639:
 20112  001D32  501B               	movf	vscp_readAppReg@reg,w,c
 20113                           
 20114                           ; Switch size 1, requested type "speed"
 20115                           ; Number of cases is 108, Range of values is 0 to 119
 20116                           ; switch strategies available:
 20117                           ; Name         Instructions Cycles
 20118                           ; simple_byte          325   163 (average)
 20119                           ;	Chosen strategy is simple_byte
 20120  001D34  E101 D5A3          	bz	l10437
 20121  001D38  0A01               	xorlw	1	; case 1
 20122  001D3A  E101 D5A6          	bz	l10439
 20123  001D3E  0A03               	xorlw	3	; case 2
 20124  001D40  E101 D5A9          	bz	l10441
 20125  001D44  0A01               	xorlw	1	; case 3
 20126  001D46  E101 D5AC          	bz	l10443
 20127  001D4A  0A07               	xorlw	7	; case 4
 20128  001D4C  E101 D5AF          	bz	l10445
 20129  001D50  0A01               	xorlw	1	; case 5
 20130  001D52  E101 D5B2          	bz	l10447
 20131  001D56  0A03               	xorlw	3	; case 6
 20132  001D58  E101 D5B5          	bz	l10449
 20133  001D5C  0A01               	xorlw	1	; case 7
 20134  001D5E  E101 D5B8          	bz	l10451
 20135  001D62  0A0F               	xorlw	15	; case 8
 20136  001D64  E101 D5BB          	bz	l10453
 20137  001D68  0A01               	xorlw	1	; case 9
 20138  001D6A  E101 D5BB          	bz	l312
 20139  001D6E  0A03               	xorlw	3	; case 10
 20140  001D70  E101 D5BB          	bz	l10455
 20141  001D74  0A01               	xorlw	1	; case 11
 20142  001D76  E101 D5BB          	bz	l314
 20143  001D7A  0A07               	xorlw	7	; case 12
 20144  001D7C  E101 D5BB          	bz	l10457
 20145  001D80  0A01               	xorlw	1	; case 13
 20146  001D82  E101 D5BB          	bz	l316
 20147  001D86  0A03               	xorlw	3	; case 14
 20148  001D88  E101 D5BB          	bz	l10459
 20149  001D8C  0A01               	xorlw	1	; case 15
 20150  001D8E  E101 D5BB          	bz	l318
 20151  001D92  0A1F               	xorlw	31	; case 16
 20152  001D94  E101 D5BB          	bz	l10461
 20153  001D98  0A01               	xorlw	1	; case 17
 20154  001D9A  E101 D5BB          	bz	l320
 20155  001D9E  0A03               	xorlw	3	; case 18
 20156  001DA0  E101 D5BB          	bz	l10463
 20157  001DA4  0A01               	xorlw	1	; case 19
 20158  001DA6  E101 D5BB          	bz	l322
 20159  001DAA  0A07               	xorlw	7	; case 20
 20160  001DAC  E101 D5BB          	bz	l10465
 20161  001DB0  0A01               	xorlw	1	; case 21
 20162  001DB2  E101 D5BE          	bz	l10467
 20163  001DB6  0A03               	xorlw	3	; case 22
 20164  001DB8  E101 D5C1          	bz	l10469
 20165  001DBC  0A01               	xorlw	1	; case 23
 20166  001DBE  E101 D5C4          	bz	l10471
 20167  001DC2  0A0F               	xorlw	15	; case 24
 20168  001DC4  E101 D5C7          	bz	l10473
 20169  001DC8  0A01               	xorlw	1	; case 25
 20170  001DCA  E101 D5CA          	bz	l10475
 20171  001DCE  0A3F               	xorlw	63	; case 38
 20172  001DD0  E101 D5CD          	bz	l10477
 20173  001DD4  0A01               	xorlw	1	; case 39
 20174  001DD6  E101 D5D0          	bz	l10479
 20175  001DDA  0A0F               	xorlw	15	; case 40
 20176  001DDC  E101 D5D3          	bz	l10481
 20177  001DE0  0A01               	xorlw	1	; case 41
 20178  001DE2  E101 D5D6          	bz	l10483
 20179  001DE6  0A03               	xorlw	3	; case 42
 20180  001DE8  E101 D5D9          	bz	l10485
 20181  001DEC  0A01               	xorlw	1	; case 43
 20182  001DEE  E101 D5DC          	bz	l10487
 20183  001DF2  0A07               	xorlw	7	; case 44
 20184  001DF4  E101 D5DF          	bz	l10489
 20185  001DF8  0A01               	xorlw	1	; case 45
 20186  001DFA  E101 D5E2          	bz	l10491
 20187  001DFE  0A03               	xorlw	3	; case 46
 20188  001E00  E101 D5E5          	bz	l10493
 20189  001E04  0A01               	xorlw	1	; case 47
 20190  001E06  E101 D5E8          	bz	l10495
 20191  001E0A  0A1F               	xorlw	31	; case 48
 20192  001E0C  E101 D5EB          	bz	l10497
 20193  001E10  0A01               	xorlw	1	; case 49
 20194  001E12  E101 D5EE          	bz	l10499
 20195  001E16  0A03               	xorlw	3	; case 50
 20196  001E18  E101 D5F1          	bz	l10501
 20197  001E1C  0A01               	xorlw	1	; case 51
 20198  001E1E  E101 D5F4          	bz	l10503
 20199  001E22  0A07               	xorlw	7	; case 52
 20200  001E24  E101 D5F7          	bz	l10505
 20201  001E28  0A01               	xorlw	1	; case 53
 20202  001E2A  E101 D5FA          	bz	l10507
 20203  001E2E  0A03               	xorlw	3	; case 54
 20204  001E30  E101 D5FD          	bz	l10509
 20205  001E34  0A01               	xorlw	1	; case 55
 20206  001E36  E101 D600          	bz	l10511
 20207  001E3A  0A0F               	xorlw	15	; case 56
 20208  001E3C  E101 D603          	bz	l10513
 20209  001E40  0A01               	xorlw	1	; case 57
 20210  001E42  E101 D606          	bz	l10515
 20211  001E46  0A03               	xorlw	3	; case 58
 20212  001E48  E101 D609          	bz	l10517
 20213  001E4C  0A01               	xorlw	1	; case 59
 20214  001E4E  E101 D60C          	bz	l10519
 20215  001E52  0A07               	xorlw	7	; case 60
 20216  001E54  E101 D60F          	bz	l10521
 20217  001E58  0A01               	xorlw	1	; case 61
 20218  001E5A  E101 D612          	bz	l10523
 20219  001E5E  0A03               	xorlw	3	; case 62
 20220  001E60  E101 D615          	bz	l10525
 20221  001E64  0A01               	xorlw	1	; case 63
 20222  001E66  E101 D618          	bz	l10527
 20223  001E6A  0A7F               	xorlw	127	; case 64
 20224  001E6C  E101 D61B          	bz	l10529
 20225  001E70  0A01               	xorlw	1	; case 65
 20226  001E72  E101 D61E          	bz	l10531
 20227  001E76  0A03               	xorlw	3	; case 66
 20228  001E78  E101 D621          	bz	l10533
 20229  001E7C  0A01               	xorlw	1	; case 67
 20230  001E7E  E101 D624          	bz	l10535
 20231  001E82  0A07               	xorlw	7	; case 68
 20232  001E84  E101 D627          	bz	l10537
 20233  001E88  0A01               	xorlw	1	; case 69
 20234  001E8A  E101 D62A          	bz	l10539
 20235  001E8E  0A03               	xorlw	3	; case 70
 20236  001E90  E101 D62D          	bz	l10541
 20237  001E94  0A01               	xorlw	1	; case 71
 20238  001E96  E101 D630          	bz	l10543
 20239  001E9A  0A0F               	xorlw	15	; case 72
 20240  001E9C  E101 D633          	bz	l10545
 20241  001EA0  0A01               	xorlw	1	; case 73
 20242  001EA2  E101 D636          	bz	l10547
 20243  001EA6  0A03               	xorlw	3	; case 74
 20244  001EA8  E101 D639          	bz	l10549
 20245  001EAC  0A01               	xorlw	1	; case 75
 20246  001EAE  E101 D63C          	bz	l10551
 20247  001EB2  0A07               	xorlw	7	; case 76
 20248  001EB4  E101 D63F          	bz	l10553
 20249  001EB8  0A01               	xorlw	1	; case 77
 20250  001EBA  E101 D642          	bz	l10555
 20251  001EBE  0A03               	xorlw	3	; case 78
 20252  001EC0  E101 D645          	bz	l10557
 20253  001EC4  0A01               	xorlw	1	; case 79
 20254  001EC6  E101 D648          	bz	l10559
 20255  001ECA  0A1F               	xorlw	31	; case 80
 20256  001ECC  E101 D64B          	bz	l10561
 20257  001ED0  0A01               	xorlw	1	; case 81
 20258  001ED2  E101 D64E          	bz	l10563
 20259  001ED6  0A03               	xorlw	3	; case 82
 20260  001ED8  E101 D651          	bz	l10565
 20261  001EDC  0A01               	xorlw	1	; case 83
 20262  001EDE  E101 D654          	bz	l10567
 20263  001EE2  0A07               	xorlw	7	; case 84
 20264  001EE4  E101 D657          	bz	l10569
 20265  001EE8  0A01               	xorlw	1	; case 85
 20266  001EEA  E101 D65A          	bz	l10571
 20267  001EEE  0A03               	xorlw	3	; case 86
 20268  001EF0  E101 D65D          	bz	l10573
 20269  001EF4  0A01               	xorlw	1	; case 87
 20270  001EF6  E101 D660          	bz	l10575
 20271  001EFA  0A0F               	xorlw	15	; case 88
 20272  001EFC  E101 D663          	bz	l10577
 20273  001F00  0A01               	xorlw	1	; case 89
 20274  001F02  E101 D666          	bz	l10579
 20275  001F06  0A03               	xorlw	3	; case 90
 20276  001F08  E101 D669          	bz	l10581
 20277  001F0C  0A01               	xorlw	1	; case 91
 20278  001F0E  E101 D66C          	bz	l10583
 20279  001F12  0A07               	xorlw	7	; case 92
 20280  001F14  E101 D66F          	bz	l10585
 20281  001F18  0A01               	xorlw	1	; case 93
 20282  001F1A  E101 D672          	bz	l10587
 20283  001F1E  0A03               	xorlw	3	; case 94
 20284  001F20  E101 D675          	bz	l10589
 20285  001F24  0A01               	xorlw	1	; case 95
 20286  001F26  E101 D678          	bz	l10591
 20287  001F2A  0A3F               	xorlw	63	; case 96
 20288  001F2C  E101 D67B          	bz	l10593
 20289  001F30  0A01               	xorlw	1	; case 97
 20290  001F32  E101 D67E          	bz	l10595
 20291  001F36  0A03               	xorlw	3	; case 98
 20292  001F38  E101 D681          	bz	l10597
 20293  001F3C  0A01               	xorlw	1	; case 99
 20294  001F3E  E101 D684          	bz	l10599
 20295  001F42  0A07               	xorlw	7	; case 100
 20296  001F44  E101 D687          	bz	l10601
 20297  001F48  0A01               	xorlw	1	; case 101
 20298  001F4A  E101 D68A          	bz	l10603
 20299  001F4E  0A03               	xorlw	3	; case 102
 20300  001F50  E101 D68D          	bz	l10605
 20301  001F54  0A01               	xorlw	1	; case 103
 20302  001F56  E101 D690          	bz	l10607
 20303  001F5A  0A0F               	xorlw	15	; case 104
 20304  001F5C  E101 D693          	bz	l10609
 20305  001F60  0A01               	xorlw	1	; case 105
 20306  001F62  E101 D696          	bz	l10611
 20307  001F66  0A03               	xorlw	3	; case 106
 20308  001F68  E101 D699          	bz	l10613
 20309  001F6C  0A01               	xorlw	1	; case 107
 20310  001F6E  E101 D69C          	bz	l10615
 20311  001F72  0A07               	xorlw	7	; case 108
 20312  001F74  E101 D69F          	bz	l10617
 20313  001F78  0A01               	xorlw	1	; case 109
 20314  001F7A  E101 D6A2          	bz	l10619
 20315  001F7E  0A03               	xorlw	3	; case 110
 20316  001F80  E101 D6A5          	bz	l10621
 20317  001F84  0A01               	xorlw	1	; case 111
 20318  001F86  E101 D6A8          	bz	l10623
 20319  001F8A  0A1F               	xorlw	31	; case 112
 20320  001F8C  E101 D6AB          	bz	l10625
 20321  001F90  0A01               	xorlw	1	; case 113
 20322  001F92  E101 D6AE          	bz	l10627
 20323  001F96  0A03               	xorlw	3	; case 114
 20324  001F98  E101 D6B1          	bz	l10629
 20325  001F9C  0A01               	xorlw	1	; case 115
 20326  001F9E  E101 D6B4          	bz	l10631
 20327  001FA2  0A07               	xorlw	7	; case 116
 20328  001FA4  E101 D6B7          	bz	l407
 20329  001FA8  0A01               	xorlw	1	; case 117
 20330  001FAA  E101 D6B4          	bz	l407
 20331  001FAE  0A03               	xorlw	3	; case 118
 20332  001FB0  E101 D6B3          	bz	l10633
 20333  001FB4  0A01               	xorlw	1	; case 119
 20334  001FB6  E101 D6B6          	bz	l10635
 20335  001FBA  D6AD               	goto	l407
 20336  001FBC                     l10641:
 20337                           
 20338                           ;main.c: 1855: else if (1 == vscp_page_select) {
 20339  001FBC  0446               	decf	_vscp_page_select,w,c
 20340  001FBE  1047               	iorwf	_vscp_page_select+1,w,c
 20341  001FC0  E12B               	bnz	l10663
 20342                           
 20343                           ;main.c: 1858: if (reg < 72) {
 20344  001FC2  0E48               	movlw	72
 20345  001FC4  601B               	cpfslt	vscp_readAppReg@reg,c
 20346  001FC6  D009               	goto	l10647
 20347                           
 20348                           ;main.c: 1859: rv = readEEPROM(0xAA + reg ) ;
 20349  001FC8  0EAA               	movlw	170
 20350  001FCA  241B               	addwf	vscp_readAppReg@reg,w,c
 20351  001FCC  6E16               	movwf	?_readEEPROM,c
 20352  001FCE  6A17               	clrf	?_readEEPROM+1,c
 20353  001FD0  0E00               	movlw	0
 20354  001FD2  2217               	addwfc	?_readEEPROM+1,f,c
 20355  001FD4  EC0F  F02E         	call	_readEEPROM	;wreg free
 20356  001FD8  D01E               	goto	L53
 20357  001FDA                     l10647:
 20358                           
 20359                           ;main.c: 1862: else if (reg < 84) {
 20360  001FDA  0E54               	movlw	84
 20361  001FDC  601B               	cpfslt	vscp_readAppReg@reg,c
 20362  001FDE  D010               	goto	l10659
 20363                           
 20364                           ;main.c: 1864: uint8_t pos = reg - 72;
 20365  001FE0  501B               	movf	vscp_readAppReg@reg,w,c
 20366  001FE2  0FB8               	addlw	184
 20367  001FE4  6E1A               	movwf	vscp_readAppReg@pos,c
 20368                           
 20369                           ;main.c: 1865: if ( pos % 2 ) {
 20370  001FE6  A01A               	btfss	vscp_readAppReg@pos,0,c
 20371  001FE8  D002               	goto	l10655
 20372                           
 20373                           ;main.c: 1866: pos--;
 20374  001FEA  061A               	decf	vscp_readAppReg@pos,f,c
 20375                           
 20376                           ;main.c: 1867: }
 20377  001FEC  D001               	goto	l10657
 20378  001FEE                     l10655:
 20379                           
 20380                           ;main.c: 1868: else {
 20381                           ;main.c: 1869: pos++;
 20382  001FEE  2A1A               	incf	vscp_readAppReg@pos,f,c
 20383  001FF0                     l10657:
 20384                           
 20385                           ;main.c: 1870: }
 20386                           ;main.c: 1871: rv = adc[ pos ];
 20387  001FF0  0EA6               	movlw	low _adc
 20388  001FF2  241A               	addwf	vscp_readAppReg@pos,w,c
 20389  001FF4  6ED9               	movwf	fsr2l,c
 20390  001FF6  6ADA               	clrf	fsr2h,c
 20391  001FF8  0E01               	movlw	high _adc
 20392  001FFA  22DA               	addwfc	fsr2h,f,c
 20393  001FFC  50DF               	movf	indf2,w,c
 20394  001FFE  D00B               	goto	L53
 20395  002000                     l10659:
 20396                           
 20397                           ;main.c: 1874: else if (reg < 98) {
 20398  002000  0E62               	movlw	98
 20399  002002  601B               	cpfslt	vscp_readAppReg@reg,c
 20400  002004  D009               	goto	l10663
 20401                           
 20402                           ;main.c: 1875: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20403  002006  0E4A               	movlw	74
 20404  002008  241B               	addwf	vscp_readAppReg@reg,w,c
 20405  00200A  6E16               	movwf	?_readEEPROM,c
 20406  00200C  6A17               	clrf	?_readEEPROM+1,c
 20407  00200E  0E00               	movlw	0
 20408  002010  2217               	addwfc	?_readEEPROM+1,f,c
 20409  002012  EC0F  F02E         	call	_readEEPROM	;wreg free
 20410  002016                     L53:
 20411  002016  6E1C               	movwf	vscp_readAppReg@rv,c
 20412  002018                     l10663:
 20413                           
 20414                           ;main.c: 1876: }
 20415                           ;main.c: 1877: }
 20416                           ;main.c: 1879: return rv;
 20417  002018  501C               	movf	vscp_readAppReg@rv,w,c
 20418  00201A  0012               	return	
 20419  00201C                     __end_of_vscp_readAppReg:
 20420                           	opt stack 0
 20421                           tblptru	equ	0xFF8
 20422                           tblptrh	equ	0xFF7
 20423                           tblptrl	equ	0xFF6
 20424                           tablat	equ	0xFF5
 20425                           prodh	equ	0xFF4
 20426                           prodl	equ	0xFF3
 20427                           intcon	equ	0xFF2
 20428                           postinc0	equ	0xFEE
 20429                           wreg	equ	0xFE8
 20430                           indf1	equ	0xFE7
 20431                           postdec1	equ	0xFE5
 20432                           fsr1h	equ	0xFE2
 20433                           fsr1l	equ	0xFE1
 20434                           indf2	equ	0xFDF
 20435                           postinc2	equ	0xFDE
 20436                           postdec2	equ	0xFDD
 20437                           plusw2	equ	0xFDB
 20438                           fsr2h	equ	0xFDA
 20439                           fsr2l	equ	0xFD9
 20440                           status	equ	0xFD8
 20441                           
 20442 ;; *************** function _interrupt_at_low_vector *****************
 20443 ;; Defined at:
 20444 ;;		line 134 in file "../main.c"
 20445 ;; Parameters:    Size  Location     Type
 20446 ;;		None
 20447 ;; Auto vars:     Size  Location     Type
 20448 ;;		None
 20449 ;; Return value:  Size  Location     Type
 20450 ;;		None               void
 20451 ;; Registers used:
 20452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20453 ;; Tracked objects:
 20454 ;;		On entry : 0/0
 20455 ;;		On exit  : 0/0
 20456 ;;		Unchanged: 0/0
 20457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20458 ;;      Params:         0       0       0       0       0       0       0
 20459 ;;      Locals:         0       0       0       0       0       0       0
 20460 ;;      Temps:          9       0       0       0       0       0       0
 20461 ;;      Totals:         9       0       0       0       0       0       0
 20462 ;;Total ram usage:        9 bytes
 20463 ;; Hardware stack levels used:    1
 20464 ;; Hardware stack levels required when called:    1
 20465 ;; This function calls:
 20466 ;;		i1_ConvertADC
 20467 ;;		i1_WriteTimer0
 20468 ;; This function is called by:
 20469 ;;		Interrupt level 1
 20470 ;; This function uses a non-reentrant model
 20471 ;;
 20472                           
 20473                           	psect	intcodelo
 20474  000818                     __pintcodelo:
 20475                           	opt stack 0
 20476  000818                     _interrupt_at_low_vector:
 20477                           	opt stack 22
 20478                           
 20479                           ;incstack = 0
 20480  000818  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20481  00081C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20482  000820  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20483  000824  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20484  000828  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20485  00082C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20486  000830  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20487  000834                     
 20488                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 20489  000834  A4F2               	btfss	intcon,2,c	;volatile
 20490  000836  D001               	goto	i1u714_21
 20491  000838  D001               	goto	i1u714_20
 20492  00083A                     i1u714_21:
 20493  00083A  D048               	goto	i1l9141
 20494  00083C                     i1u714_20:
 20495  00083C                     
 20496                           ;main.c: 139: WriteTimer0(0xfb1d);
 20497  00083C  0EFB               	movlw	251
 20498  00083E  6E02               	movwf	?i1_WriteTimer0+1,c
 20499  000840  0E1D               	movlw	29
 20500  000842  6E01               	movwf	?i1_WriteTimer0,c
 20501  000844  EC3D  F02E         	call	i1_WriteTimer0	;wreg free
 20502  000848                     
 20503                           ;main.c: 141: vscp_timer++;
 20504  000848  0100               	movlb	0	; () banked
 20505  00084A  4BC1               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20506  00084C  2BC2               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20507  00084E                     
 20508                           ; BSR set to: 0
 20509                           ;main.c: 142: vscp_configtimer++;
 20510  00084E  4BBF               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20511  000850  2BC0               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20512  000852                     
 20513                           ; BSR set to: 0
 20514                           ;main.c: 143: measurement_clock++;
 20515  000852  0E01               	movlw	1
 20516  000854  0101               	movlb	1	; () banked
 20517  000856  2712               	addwf	_measurement_clock& (0+255),f,b	;volatile
 20518  000858  0E00               	movlw	0
 20519  00085A  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 20520  00085C  0E00               	movlw	0
 20521  00085E  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 20522  000860  0E00               	movlw	0
 20523  000862  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 20524  000864                     
 20525                           ; BSR set to: 1
 20526                           ;main.c: 144: timeout_clock++;
 20527  000864  0E01               	movlw	1
 20528  000866  2716               	addwf	_timeout_clock& (0+255),f,b	;volatile
 20529  000868  0E00               	movlw	0
 20530  00086A  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 20531  00086C  0E00               	movlw	0
 20532  00086E  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 20533  000870  0E00               	movlw	0
 20534  000872  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 20535  000874                     
 20536                           ; BSR set to: 1
 20537                           ;main.c: 145: sendTimer++;
 20538  000874  4B1A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 20539  000876  2B1B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 20540  000878                     
 20541                           ; BSR set to: 1
 20542                           ;main.c: 148: if (!(PORTC & 0x01)) {
 20543  000878  B082               	btfsc	3970,0,c	;volatile
 20544  00087A  D001               	goto	i1u715_21
 20545  00087C  D001               	goto	i1u715_20
 20546  00087E                     i1u715_21:
 20547  00087E  D003               	goto	i1l140
 20548  000880                     i1u715_20:
 20549  000880                     
 20550                           ; BSR set to: 1
 20551                           ;main.c: 150: vscp_initbtncnt++;
 20552  000880  0100               	movlb	0	; () banked
 20553  000882  2BC8               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 20554                           
 20555                           ;main.c: 151: }
 20556  000884  D002               	goto	i1l9115
 20557  000886                     i1l140:
 20558                           
 20559                           ; BSR set to: 1
 20560                           ;main.c: 152: else {
 20561                           ;main.c: 153: vscp_initbtncnt = 0;
 20562  000886  0100               	movlb	0	; () banked
 20563  000888  6BC8               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 20564  00088A                     i1l9115:
 20565                           
 20566                           ; BSR set to: 0
 20567                           ;main.c: 154: }
 20568                           ;main.c: 157: vscp_statuscnt++;
 20569  00088A  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 20570  00088C                     
 20571                           ; BSR set to: 0
 20572                           ;main.c: 158: if ( ( 0x02 ==
 20573                           ;main.c: 159: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 20574  00088C  504C               	movf	_vscp_initledfunc,w,c
 20575  00088E  0A02               	xorlw	2
 20576  000890  A4D8               	btfss	status,2,c
 20577  000892  D001               	goto	i1u716_21
 20578  000894  D001               	goto	i1u716_20
 20579  000896                     i1u716_21:
 20580  000896  D00E               	goto	i1l9129
 20581  000898                     i1u716_20:
 20582  000898                     
 20583                           ; BSR set to: 0
 20584  000898  0E64               	movlw	100
 20585  00089A  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 20586  00089C  D001               	goto	i1u717_21
 20587  00089E  D001               	goto	i1u717_20
 20588  0008A0                     i1u717_21:
 20589  0008A0  D009               	goto	i1l9129
 20590  0008A2                     i1u717_20:
 20591  0008A2                     
 20592                           ; BSR set to: 0
 20593                           ;main.c: 160: if ( PORTC & 0x02 ) {
 20594  0008A2  A282               	btfss	3970,1,c	;volatile
 20595  0008A4  D001               	goto	i1u718_21
 20596  0008A6  D001               	goto	i1u718_20
 20597  0008A8                     i1u718_21:
 20598  0008A8  D002               	goto	i1l9125
 20599  0008AA                     i1u718_20:
 20600  0008AA                     i1l9123:
 20601                           
 20602                           ; BSR set to: 0
 20603                           ;main.c: 161: PORTC &= ~0x02;
 20604  0008AA  9282               	bcf	3970,1,c	;volatile
 20605                           
 20606                           ;main.c: 162: }
 20607  0008AC  D001               	goto	i1l9127
 20608  0008AE                     i1l9125:
 20609                           
 20610                           ; BSR set to: 0
 20611                           ;main.c: 163: else {
 20612                           ;main.c: 164: PORTC |= 0x02;
 20613  0008AE  8282               	bsf	3970,1,c	;volatile
 20614  0008B0                     i1l9127:
 20615                           
 20616                           ; BSR set to: 0
 20617                           ;main.c: 165: }
 20618                           ;main.c: 166: vscp_statuscnt = 0;
 20619  0008B0  6A52               	clrf	_vscp_statuscnt,c	;volatile
 20620                           
 20621                           ;main.c: 167: }
 20622  0008B2  D00B               	goto	i1l9139
 20623  0008B4                     i1l9129:
 20624                           
 20625                           ; BSR set to: 0
 20626                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 20627  0008B4  044C               	decf	_vscp_initledfunc,w,c
 20628  0008B6  A4D8               	btfss	status,2,c
 20629  0008B8  D001               	goto	i1u719_21
 20630  0008BA  D001               	goto	i1u719_20
 20631  0008BC                     i1u719_21:
 20632  0008BC  D001               	goto	i1l146
 20633  0008BE                     i1u719_20:
 20634  0008BE  D7F7               	goto	i1l9125
 20635  0008C0                     i1l146:
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 20639  0008C0  664C               	tstfsz	_vscp_initledfunc,c
 20640  0008C2  D001               	goto	i1u720_21
 20641  0008C4  D001               	goto	i1u720_20
 20642  0008C6                     i1u720_21:
 20643  0008C6  D001               	goto	i1l9139
 20644  0008C8                     i1u720_20:
 20645  0008C8  D7F0               	goto	i1l9123
 20646  0008CA                     i1l9139:
 20647                           
 20648                           ; BSR set to: 0
 20649                           ;main.c: 175: }
 20650                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 20651  0008CA  94F2               	bcf	intcon,2,c	;volatile
 20652  0008CC                     i1l9141:
 20653                           
 20654                           ;main.c: 179: }
 20655                           ;main.c: 182: if ( PIR1bits.ADIF ) {
 20656  0008CC  AC9E               	btfss	3998,6,c	;volatile
 20657  0008CE  D001               	goto	i1u721_21
 20658  0008D0  D001               	goto	i1u721_20
 20659  0008D2                     i1u721_21:
 20660  0008D2  D0E5               	goto	i1l166
 20661  0008D4                     i1u721_20:
 20662  0008D4  D0C4               	goto	i1l9203
 20663  0008D6                     i1l9145:
 20664                           
 20665                           ;main.c: 188: adc[(12 * adc_series_counter) + 0] = ADRESH;
 20666  0008D6  5049               	movf	_adc_series_counter,w,c
 20667  0008D8  0D0C               	mullw	12
 20668  0008DA  0EA6               	movlw	low _adc
 20669  0008DC  24F3               	addwf	prodl,w,c
 20670  0008DE  6ED9               	movwf	fsr2l,c
 20671  0008E0  0E01               	movlw	high _adc
 20672  0008E2  20F4               	addwfc	prodh,w,c
 20673  0008E4  6EDA               	movwf	fsr2h,c
 20674  0008E6  CFC4 FFDF          	movff	4036,indf2	;volatile
 20675                           
 20676                           ;main.c: 189: adc[(12 * adc_series_counter) + 1] = ADRESL;
 20677  0008EA  5049               	movf	_adc_series_counter,w,c
 20678  0008EC  0D0C               	mullw	12
 20679  0008EE  0EA7               	movlw	low (_adc+1)
 20680  0008F0  24F3               	addwf	prodl,w,c
 20681  0008F2  6ED9               	movwf	fsr2l,c
 20682  0008F4  0E01               	movlw	high (_adc+1)
 20683  0008F6  20F4               	addwfc	prodh,w,c
 20684  0008F8  6EDA               	movwf	fsr2h,c
 20685  0008FA  CFC3 FFDF          	movff	4035,indf2	;volatile
 20686  0008FE                     
 20687                           ;main.c: 191: ADCON0 = (2<<2) + 1;
 20688  0008FE  0E09               	movlw	9
 20689  000900  6EC2               	movwf	4034,c	;volatile
 20690  000902                     
 20691                           ;main.c: 195: if ((80 - 1) == adc_series_counter) {
 20692  000902  5049               	movf	_adc_series_counter,w,c
 20693  000904  0A4F               	xorlw	79
 20694  000906  A4D8               	btfss	status,2,c
 20695  000908  D001               	goto	i1u722_21
 20696  00090A  D001               	goto	i1u722_20
 20697  00090C                     i1u722_21:
 20698  00090C  D0C5               	goto	i1l9205
 20699  00090E                     i1u722_20:
 20700  00090E                     
 20701                           ;main.c: 196: adc_conversion_flags |= 1;
 20702  00090E  0100               	movlb	0	; () banked
 20703  000910  81C3               	bsf	_adc_conversion_flags& (0+255),0,b
 20704  000912  D0C2               	goto	i1l9205
 20705  000914                     i1l9153:
 20706                           
 20707                           ;main.c: 202: adc[(12 * adc_series_counter) + 2] = ADRESH;
 20708  000914  5049               	movf	_adc_series_counter,w,c
 20709  000916  0D0C               	mullw	12
 20710  000918  0EA8               	movlw	low (_adc+2)
 20711  00091A  24F3               	addwf	prodl,w,c
 20712  00091C  6ED9               	movwf	fsr2l,c
 20713  00091E  0E01               	movlw	high (_adc+2)
 20714  000920  20F4               	addwfc	prodh,w,c
 20715  000922  6EDA               	movwf	fsr2h,c
 20716  000924  CFC4 FFDF          	movff	4036,indf2	;volatile
 20717                           
 20718                           ;main.c: 203: adc[(12 * adc_series_counter) + 3] = ADRESL;
 20719  000928  5049               	movf	_adc_series_counter,w,c
 20720  00092A  0D0C               	mullw	12
 20721  00092C  0EA9               	movlw	low (_adc+3)
 20722  00092E  24F3               	addwf	prodl,w,c
 20723  000930  6ED9               	movwf	fsr2l,c
 20724  000932  0E01               	movlw	high (_adc+3)
 20725  000934  20F4               	addwfc	prodh,w,c
 20726  000936  6EDA               	movwf	fsr2h,c
 20727  000938  CFC3 FFDF          	movff	4035,indf2	;volatile
 20728  00093C                     
 20729                           ;main.c: 206: ADCON0 = (1<<2) + 1;
 20730  00093C  0E05               	movlw	5
 20731  00093E  6EC2               	movwf	4034,c	;volatile
 20732  000940                     
 20733                           ;main.c: 210: if ((80 - 1) == adc_series_counter) {
 20734  000940  5049               	movf	_adc_series_counter,w,c
 20735  000942  0A4F               	xorlw	79
 20736  000944  A4D8               	btfss	status,2,c
 20737  000946  D001               	goto	i1u723_21
 20738  000948  D001               	goto	i1u723_20
 20739  00094A                     i1u723_21:
 20740  00094A  D0A6               	goto	i1l9205
 20741  00094C                     i1u723_20:
 20742  00094C                     
 20743                           ;main.c: 211: adc_conversion_flags |= 1 << 1;
 20744  00094C  0100               	movlb	0	; () banked
 20745  00094E  83C3               	bsf	_adc_conversion_flags& (0+255),1,b
 20746  000950  D0A3               	goto	i1l9205
 20747  000952                     i1l9161:
 20748                           
 20749                           ;main.c: 217: adc[(12 * adc_series_counter) + 4] = ADRESH;
 20750  000952  5049               	movf	_adc_series_counter,w,c
 20751  000954  0D0C               	mullw	12
 20752  000956  0EAA               	movlw	low (_adc+4)
 20753  000958  24F3               	addwf	prodl,w,c
 20754  00095A  6ED9               	movwf	fsr2l,c
 20755  00095C  0E01               	movlw	high (_adc+4)
 20756  00095E  20F4               	addwfc	prodh,w,c
 20757  000960  6EDA               	movwf	fsr2h,c
 20758  000962  CFC4 FFDF          	movff	4036,indf2	;volatile
 20759                           
 20760                           ;main.c: 218: adc[(12 * adc_series_counter) + 5] = ADRESL;
 20761  000966  5049               	movf	_adc_series_counter,w,c
 20762  000968  0D0C               	mullw	12
 20763  00096A  0EAB               	movlw	low (_adc+5)
 20764  00096C  24F3               	addwf	prodl,w,c
 20765  00096E  6ED9               	movwf	fsr2l,c
 20766  000970  0E01               	movlw	high (_adc+5)
 20767  000972  20F4               	addwfc	prodh,w,c
 20768  000974  6EDA               	movwf	fsr2h,c
 20769  000976  CFC3 FFDF          	movff	4035,indf2	;volatile
 20770  00097A                     
 20771                           ;main.c: 221: ADCON0 = (0<<2) + 1;
 20772  00097A  0E01               	movlw	1
 20773  00097C  6EC2               	movwf	4034,c	;volatile
 20774  00097E                     
 20775                           ;main.c: 225: if ((80 - 1) == adc_series_counter) {
 20776  00097E  5049               	movf	_adc_series_counter,w,c
 20777  000980  0A4F               	xorlw	79
 20778  000982  A4D8               	btfss	status,2,c
 20779  000984  D001               	goto	i1u724_21
 20780  000986  D001               	goto	i1u724_20
 20781  000988                     i1u724_21:
 20782  000988  D087               	goto	i1l9205
 20783  00098A                     i1u724_20:
 20784  00098A                     
 20785                           ;main.c: 226: adc_conversion_flags |= 1 << 2;
 20786  00098A  0100               	movlb	0	; () banked
 20787  00098C  85C3               	bsf	_adc_conversion_flags& (0+255),2,b
 20788  00098E  D084               	goto	i1l9205
 20789  000990                     i1l9169:
 20790                           
 20791                           ;main.c: 232: adc[(12 * adc_series_counter) + 6] = ADRESH;
 20792  000990  5049               	movf	_adc_series_counter,w,c
 20793  000992  0D0C               	mullw	12
 20794  000994  0EAC               	movlw	low (_adc+6)
 20795  000996  24F3               	addwf	prodl,w,c
 20796  000998  6ED9               	movwf	fsr2l,c
 20797  00099A  0E01               	movlw	high (_adc+6)
 20798  00099C  20F4               	addwfc	prodh,w,c
 20799  00099E  6EDA               	movwf	fsr2h,c
 20800  0009A0  CFC4 FFDF          	movff	4036,indf2	;volatile
 20801                           
 20802                           ;main.c: 233: adc[(12 * adc_series_counter) + 7] = ADRESL;
 20803  0009A4  5049               	movf	_adc_series_counter,w,c
 20804  0009A6  0D0C               	mullw	12
 20805  0009A8  0EAD               	movlw	low (_adc+7)
 20806  0009AA  24F3               	addwf	prodl,w,c
 20807  0009AC  6ED9               	movwf	fsr2l,c
 20808  0009AE  0E01               	movlw	high (_adc+7)
 20809  0009B0  20F4               	addwfc	prodh,w,c
 20810  0009B2  6EDA               	movwf	fsr2h,c
 20811  0009B4  CFC3 FFDF          	movff	4035,indf2	;volatile
 20812  0009B8                     
 20813                           ;main.c: 235: ADCON0 = (9<<2) + 1;
 20814  0009B8  0E25               	movlw	37
 20815  0009BA  6EC2               	movwf	4034,c	;volatile
 20816  0009BC                     
 20817                           ;main.c: 239: if ((80 - 1) == adc_series_counter) {
 20818  0009BC  5049               	movf	_adc_series_counter,w,c
 20819  0009BE  0A4F               	xorlw	79
 20820  0009C0  A4D8               	btfss	status,2,c
 20821  0009C2  D001               	goto	i1u725_21
 20822  0009C4  D001               	goto	i1u725_20
 20823  0009C6                     i1u725_21:
 20824  0009C6  D068               	goto	i1l9205
 20825  0009C8                     i1u725_20:
 20826  0009C8                     
 20827                           ;main.c: 240: adc_conversion_flags |= 1 << 3;
 20828  0009C8  0100               	movlb	0	; () banked
 20829  0009CA  87C3               	bsf	_adc_conversion_flags& (0+255),3,b
 20830  0009CC  D065               	goto	i1l9205
 20831  0009CE                     i1l9177:
 20832                           
 20833                           ;main.c: 246: adc[(12 * adc_series_counter) + 8] = ADRESH;
 20834  0009CE  5049               	movf	_adc_series_counter,w,c
 20835  0009D0  0D0C               	mullw	12
 20836  0009D2  0EAE               	movlw	low (_adc+8)
 20837  0009D4  24F3               	addwf	prodl,w,c
 20838  0009D6  6ED9               	movwf	fsr2l,c
 20839  0009D8  0E01               	movlw	high (_adc+8)
 20840  0009DA  20F4               	addwfc	prodh,w,c
 20841  0009DC  6EDA               	movwf	fsr2h,c
 20842  0009DE  CFC4 FFDF          	movff	4036,indf2	;volatile
 20843                           
 20844                           ;main.c: 247: adc[(12 * adc_series_counter) + 9] = ADRESL;
 20845  0009E2  5049               	movf	_adc_series_counter,w,c
 20846  0009E4  0D0C               	mullw	12
 20847  0009E6  0EAF               	movlw	low (_adc+9)
 20848  0009E8  24F3               	addwf	prodl,w,c
 20849  0009EA  6ED9               	movwf	fsr2l,c
 20850  0009EC  0E01               	movlw	high (_adc+9)
 20851  0009EE  20F4               	addwfc	prodh,w,c
 20852  0009F0  6EDA               	movwf	fsr2h,c
 20853  0009F2  CFC3 FFDF          	movff	4035,indf2	;volatile
 20854  0009F6                     
 20855                           ;main.c: 249: ADCON0 = (8<<2) + 1;
 20856  0009F6  0E21               	movlw	33
 20857  0009F8  6EC2               	movwf	4034,c	;volatile
 20858  0009FA                     
 20859                           ;main.c: 253: if ((80 - 1) == adc_series_counter) {
 20860  0009FA  5049               	movf	_adc_series_counter,w,c
 20861  0009FC  0A4F               	xorlw	79
 20862  0009FE  A4D8               	btfss	status,2,c
 20863  000A00  D001               	goto	i1u726_21
 20864  000A02  D001               	goto	i1u726_20
 20865  000A04                     i1u726_21:
 20866  000A04  D049               	goto	i1l9205
 20867  000A06                     i1u726_20:
 20868  000A06                     
 20869                           ;main.c: 254: adc_conversion_flags |= 1 << 4;
 20870  000A06  0100               	movlb	0	; () banked
 20871  000A08  89C3               	bsf	_adc_conversion_flags& (0+255),4,b
 20872  000A0A  D046               	goto	i1l9205
 20873  000A0C                     i1l9185:
 20874                           
 20875                           ;main.c: 260: adc[(12 * adc_series_counter) + 10] = ADRESH;
 20876  000A0C  5049               	movf	_adc_series_counter,w,c
 20877  000A0E  0D0C               	mullw	12
 20878  000A10  0EB0               	movlw	low (_adc+10)
 20879  000A12  24F3               	addwf	prodl,w,c
 20880  000A14  6ED9               	movwf	fsr2l,c
 20881  000A16  0E01               	movlw	high (_adc+10)
 20882  000A18  20F4               	addwfc	prodh,w,c
 20883  000A1A  6EDA               	movwf	fsr2h,c
 20884  000A1C  CFC4 FFDF          	movff	4036,indf2	;volatile
 20885                           
 20886                           ;main.c: 261: adc[(12 * adc_series_counter) + 11] = ADRESL;
 20887  000A20  5049               	movf	_adc_series_counter,w,c
 20888  000A22  0D0C               	mullw	12
 20889  000A24  0EB1               	movlw	low (_adc+11)
 20890  000A26  24F3               	addwf	prodl,w,c
 20891  000A28  6ED9               	movwf	fsr2l,c
 20892  000A2A  0E01               	movlw	high (_adc+11)
 20893  000A2C  20F4               	addwfc	prodh,w,c
 20894  000A2E  6EDA               	movwf	fsr2h,c
 20895  000A30  CFC3 FFDF          	movff	4035,indf2	;volatile
 20896  000A34                     
 20897                           ;main.c: 263: ADCON0 = (10<<2) + 1;
 20898  000A34  0E29               	movlw	41
 20899  000A36  6EC2               	movwf	4034,c	;volatile
 20900  000A38                     
 20901                           ;main.c: 267: if ((80 - 1) == adc_series_counter) {
 20902  000A38  5049               	movf	_adc_series_counter,w,c
 20903  000A3A  0A4F               	xorlw	79
 20904  000A3C  A4D8               	btfss	status,2,c
 20905  000A3E  D001               	goto	i1u727_21
 20906  000A40  D001               	goto	i1u727_20
 20907  000A42                     i1u727_21:
 20908  000A42  D002               	goto	i1l163
 20909  000A44                     i1u727_20:
 20910  000A44                     
 20911                           ;main.c: 268: adc_conversion_flags |= 1 << 5;
 20912  000A44  0100               	movlb	0	; () banked
 20913  000A46  8BC3               	bsf	_adc_conversion_flags& (0+255),5,b
 20914  000A48                     i1l163:
 20915                           
 20916                           ;main.c: 269: }
 20917                           ;main.c: 272: adc_series_counter++;
 20918  000A48  2A49               	incf	_adc_series_counter,f,c
 20919  000A4A                     
 20920                           ;main.c: 273: if (adc_series_counter >= 80) {
 20921  000A4A  0E4F               	movlw	79
 20922  000A4C  6449               	cpfsgt	_adc_series_counter,c
 20923  000A4E  D001               	goto	i1u728_21
 20924  000A50  D001               	goto	i1u728_20
 20925  000A52                     i1u728_21:
 20926  000A52  D022               	goto	i1l9205
 20927  000A54                     i1u728_20:
 20928  000A54                     i1l9195:
 20929                           
 20930                           ;main.c: 274: adc_series_counter = 0;
 20931  000A54  6A49               	clrf	_adc_series_counter,c
 20932  000A56  D020               	goto	i1l9205
 20933  000A58                     i1l9197:
 20934                           
 20935                           ;main.c: 280: ADCON0 = (10<<2) + 1;
 20936  000A58  0E29               	movlw	41
 20937  000A5A  6EC2               	movwf	4034,c	;volatile
 20938  000A5C  D7FB               	goto	i1l9195
 20939  000A5E                     i1l9203:
 20940  000A5E  50C2               	movf	4034,w,c	;volatile
 20941  000A60  0B3C               	andlw	60
 20942  000A62  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 20943  000A64  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 20944                           
 20945                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20946                           ; Switch size 1, requested type "speed"
 20947                           ; Number of cases is 1, Range of values is 0 to 0
 20948                           ; switch strategies available:
 20949                           ; Name         Instructions Cycles
 20950                           ; simple_byte            4     3 (average)
 20951                           ;	Chosen strategy is simple_byte
 20952  000A66  5006               	movf	??_interrupt_at_low_vector+1,w,c
 20953  000A68  0A00               	xorlw	0	; case 0
 20954  000A6A  B4D8               	btfsc	status,2,c
 20955  000A6C  D001               	goto	i1l11745
 20956  000A6E  D7F4               	goto	i1l9197
 20957  000A70                     i1l11745:
 20958                           
 20959                           ; Switch size 1, requested type "speed"
 20960                           ; Number of cases is 6, Range of values is 0 to 40
 20961                           ; switch strategies available:
 20962                           ; Name         Instructions Cycles
 20963                           ; simple_byte           19    10 (average)
 20964                           ;	Chosen strategy is simple_byte
 20965  000A70  5005               	movf	??_interrupt_at_low_vector,w,c
 20966  000A72  0A00               	xorlw	0	; case 0
 20967  000A74  B4D8               	btfsc	status,2,c
 20968  000A76  D78C               	goto	i1l9169
 20969  000A78  0A04               	xorlw	4	; case 4
 20970  000A7A  B4D8               	btfsc	status,2,c
 20971  000A7C  D76A               	goto	i1l9161
 20972  000A7E  0A0C               	xorlw	12	; case 8
 20973  000A80  B4D8               	btfsc	status,2,c
 20974  000A82  D748               	goto	i1l9153
 20975  000A84  0A28               	xorlw	40	; case 32
 20976  000A86  B4D8               	btfsc	status,2,c
 20977  000A88  D7C1               	goto	i1l9185
 20978  000A8A  0A04               	xorlw	4	; case 36
 20979  000A8C  B4D8               	btfsc	status,2,c
 20980  000A8E  D79F               	goto	i1l9177
 20981  000A90  0A0C               	xorlw	12	; case 40
 20982  000A92  B4D8               	btfsc	status,2,c
 20983  000A94  D720               	goto	i1l9145
 20984  000A96  D7E0               	goto	i1l9197
 20985  000A98                     i1l9205:
 20986                           
 20987                           ;main.c: 286: ConvertADC();
 20988  000A98  EC6C  F02E         	call	i1_ConvertADC	;wreg free
 20989  000A9C                     
 20990                           ;main.c: 288: PIR1bits.ADIF = 0;
 20991  000A9C  9C9E               	bcf	3998,6,c	;volatile
 20992  000A9E                     i1l166:
 20993  000A9E  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 20994  000AA2  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 20995  000AA6  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 20996  000AAA  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 20997  000AAE  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 20998  000AB2  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 20999  000AB6  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21000  000ABA  0010               	retfie	
 21001  000ABC                     __end_of_interrupt_at_low_vector:
 21002                           	opt stack 0
 21003                           tblptru	equ	0xFF8
 21004                           tblptrh	equ	0xFF7
 21005                           tblptrl	equ	0xFF6
 21006                           tablat	equ	0xFF5
 21007                           prodh	equ	0xFF4
 21008                           prodl	equ	0xFF3
 21009                           intcon	equ	0xFF2
 21010                           postinc0	equ	0xFEE
 21011                           wreg	equ	0xFE8
 21012                           indf1	equ	0xFE7
 21013                           postdec1	equ	0xFE5
 21014                           fsr1h	equ	0xFE2
 21015                           fsr1l	equ	0xFE1
 21016                           bsr	equ	0xFE0
 21017                           indf2	equ	0xFDF
 21018                           postinc2	equ	0xFDE
 21019                           postdec2	equ	0xFDD
 21020                           plusw2	equ	0xFDB
 21021                           fsr2h	equ	0xFDA
 21022                           fsr2l	equ	0xFD9
 21023                           status	equ	0xFD8
 21024                           
 21025 ;; *************** function i1_WriteTimer0 *****************
 21026 ;; Defined at:
 21027 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21028 ;; Parameters:    Size  Location     Type
 21029 ;;  timer0          2    0[COMRAM] unsigned int 
 21030 ;; Auto vars:     Size  Location     Type
 21031 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21032 ;; Return value:  Size  Location     Type
 21033 ;;		None               void
 21034 ;; Registers used:
 21035 ;;		None
 21036 ;; Tracked objects:
 21037 ;;		On entry : 0/0
 21038 ;;		On exit  : 0/0
 21039 ;;		Unchanged: 0/0
 21040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21041 ;;      Params:         2       0       0       0       0       0       0
 21042 ;;      Locals:         2       0       0       0       0       0       0
 21043 ;;      Temps:          0       0       0       0       0       0       0
 21044 ;;      Totals:         4       0       0       0       0       0       0
 21045 ;;Total ram usage:        4 bytes
 21046 ;; Hardware stack levels used:    1
 21047 ;; This function calls:
 21048 ;;		Nothing
 21049 ;; This function is called by:
 21050 ;;		_interrupt_at_low_vector
 21051 ;; This function uses a non-reentrant model
 21052 ;;
 21053                           
 21054                           	psect	text100
 21055  005C7A                     __ptext100:
 21056                           	opt stack 0
 21057  005C7A                     i1_WriteTimer0:
 21058                           	opt stack 22
 21059                           
 21060                           ;incstack = 0
 21061                           ;incstack = 0
 21062  005C7A  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21063  005C7E  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21064  005C82  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21065  005C86  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21066  005C8A  0012               	return	
 21067  005C8C                     __end_ofi1_WriteTimer0:
 21068                           	opt stack 0
 21069                           tblptru	equ	0xFF8
 21070                           tblptrh	equ	0xFF7
 21071                           tblptrl	equ	0xFF6
 21072                           tablat	equ	0xFF5
 21073                           prodh	equ	0xFF4
 21074                           prodl	equ	0xFF3
 21075                           intcon	equ	0xFF2
 21076                           postinc0	equ	0xFEE
 21077                           wreg	equ	0xFE8
 21078                           indf1	equ	0xFE7
 21079                           postdec1	equ	0xFE5
 21080                           fsr1h	equ	0xFE2
 21081                           fsr1l	equ	0xFE1
 21082                           bsr	equ	0xFE0
 21083                           indf2	equ	0xFDF
 21084                           postinc2	equ	0xFDE
 21085                           postdec2	equ	0xFDD
 21086                           plusw2	equ	0xFDB
 21087                           fsr2h	equ	0xFDA
 21088                           fsr2l	equ	0xFD9
 21089                           status	equ	0xFD8
 21090                           
 21091 ;; *************** function i1_ConvertADC *****************
 21092 ;; Defined at:
 21093 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21094 ;; Parameters:    Size  Location     Type
 21095 ;;		None
 21096 ;; Auto vars:     Size  Location     Type
 21097 ;;		None
 21098 ;; Return value:  Size  Location     Type
 21099 ;;		None               void
 21100 ;; Registers used:
 21101 ;;		None
 21102 ;; Tracked objects:
 21103 ;;		On entry : 0/0
 21104 ;;		On exit  : 0/0
 21105 ;;		Unchanged: 0/0
 21106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21107 ;;      Params:         0       0       0       0       0       0       0
 21108 ;;      Locals:         0       0       0       0       0       0       0
 21109 ;;      Temps:          0       0       0       0       0       0       0
 21110 ;;      Totals:         0       0       0       0       0       0       0
 21111 ;;Total ram usage:        0 bytes
 21112 ;; Hardware stack levels used:    1
 21113 ;; This function calls:
 21114 ;;		Nothing
 21115 ;; This function is called by:
 21116 ;;		_interrupt_at_low_vector
 21117 ;; This function uses a non-reentrant model
 21118 ;;
 21119                           
 21120                           	psect	text101
 21121  005CD8                     __ptext101:
 21122                           	opt stack 0
 21123  005CD8                     i1_ConvertADC:
 21124                           	opt stack 22
 21125                           
 21126                           ;incstack = 0
 21127                           ;incstack = 0
 21128  005CD8  82C2               	bsf	4034,1,c	;volatile
 21129  005CDA  0012               	return	
 21130  005CDC                     __end_ofi1_ConvertADC:
 21131                           	opt stack 0
 21132                           tblptru	equ	0xFF8
 21133                           tblptrh	equ	0xFF7
 21134                           tblptrl	equ	0xFF6
 21135                           tablat	equ	0xFF5
 21136                           prodh	equ	0xFF4
 21137                           prodl	equ	0xFF3
 21138                           intcon	equ	0xFF2
 21139                           postinc0	equ	0xFEE
 21140                           wreg	equ	0xFE8
 21141                           indf1	equ	0xFE7
 21142                           postdec1	equ	0xFE5
 21143                           fsr1h	equ	0xFE2
 21144                           fsr1l	equ	0xFE1
 21145                           bsr	equ	0xFE0
 21146                           indf2	equ	0xFDF
 21147                           postinc2	equ	0xFDE
 21148                           postdec2	equ	0xFDD
 21149                           plusw2	equ	0xFDB
 21150                           fsr2h	equ	0xFDA
 21151                           fsr2l	equ	0xFD9
 21152                           status	equ	0xFD8
 21153                           tblptru	equ	0xFF8
 21154                           tblptrh	equ	0xFF7
 21155                           tblptrl	equ	0xFF6
 21156                           tablat	equ	0xFF5
 21157                           prodh	equ	0xFF4
 21158                           prodl	equ	0xFF3
 21159                           intcon	equ	0xFF2
 21160                           postinc0	equ	0xFEE
 21161                           wreg	equ	0xFE8
 21162                           indf1	equ	0xFE7
 21163                           postdec1	equ	0xFE5
 21164                           fsr1h	equ	0xFE2
 21165                           fsr1l	equ	0xFE1
 21166                           bsr	equ	0xFE0
 21167                           indf2	equ	0xFDF
 21168                           postinc2	equ	0xFDE
 21169                           postdec2	equ	0xFDD
 21170                           plusw2	equ	0xFDB
 21171                           fsr2h	equ	0xFDA
 21172                           fsr2l	equ	0xFD9
 21173                           status	equ	0xFD8
 21174                           
 21175                           	psect	text102
 21176  000000                     __ptext102:
 21177                           	opt stack 0
 21178                           tblptru	equ	0xFF8
 21179                           tblptrh	equ	0xFF7
 21180                           tblptrl	equ	0xFF6
 21181                           tablat	equ	0xFF5
 21182                           prodh	equ	0xFF4
 21183                           prodl	equ	0xFF3
 21184                           intcon	equ	0xFF2
 21185                           postinc0	equ	0xFEE
 21186                           wreg	equ	0xFE8
 21187                           indf1	equ	0xFE7
 21188                           postdec1	equ	0xFE5
 21189                           fsr1h	equ	0xFE2
 21190                           fsr1l	equ	0xFE1
 21191                           bsr	equ	0xFE0
 21192                           indf2	equ	0xFDF
 21193                           postinc2	equ	0xFDE
 21194                           postdec2	equ	0xFDD
 21195                           plusw2	equ	0xFDB
 21196                           fsr2h	equ	0xFDA
 21197                           fsr2l	equ	0xFD9
 21198                           status	equ	0xFD8
 21199                           
 21200                           	psect	rparam
 21201  0000                     tblptru	equ	0xFF8
 21202                           tblptrh	equ	0xFF7
 21203                           tblptrl	equ	0xFF6
 21204                           tablat	equ	0xFF5
 21205                           prodh	equ	0xFF4
 21206                           prodl	equ	0xFF3
 21207                           intcon	equ	0xFF2
 21208                           postinc0	equ	0xFEE
 21209                           wreg	equ	0xFE8
 21210                           indf1	equ	0xFE7
 21211                           postdec1	equ	0xFE5
 21212                           fsr1h	equ	0xFE2
 21213                           fsr1l	equ	0xFE1
 21214                           bsr	equ	0xFE0
 21215                           indf2	equ	0xFDF
 21216                           postinc2	equ	0xFDE
 21217                           postdec2	equ	0xFDD
 21218                           plusw2	equ	0xFDB
 21219                           fsr2h	equ	0xFDA
 21220                           fsr2l	equ	0xFD9
 21221                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1112
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     95     120
    BANK1           256     52     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	 size(2) Largest target is 0

    ?_eval_poly	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	 size(2) Largest target is 0

    ?___flneg	 size(2) Largest target is 0

    ?___asflmul	 size(2) Largest target is 0

    ?___flpack	 size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___fladd	short  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	short  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 14
		 -> vscp_imsg(BANK1[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->_log
    _doWork->___altofl
    ___lwtofl->_readEEPROM
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _ldexp->_eval_poly
    _floor->___altofl
    ___altofl->___fltol
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    ___fladd->___awtofl
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_readEEPROM
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_readEEPROM
    _readEEPROM->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame
    ___flmul->___fldiv

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   85413
                                             91 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   29188
                                             77 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             25 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     822
                                              8 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             44 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             38 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                 10     8      2     161
                                             25 COMRAM    10     8      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             67 COMRAM     2     2      0
                                             41 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             66 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             41 BANK0      9     3      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             66 COMRAM     1     1      0
                                             30 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             56 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             66 COMRAM     2     2      0
                                             30 BANK0      8     4      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             68 COMRAM     1     1      0
                                             52 BANK0      4     0      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             52 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             44 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             66 COMRAM     1     1      0
                                             30 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             52 COMRAM    14    14      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   12267
                                             48 BANK0     11    11      0
                        _writeEEPROM
                         _readEEPROM
                      _sendTempEvent
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             48 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             68 COMRAM     1     1      0
                                             47 BANK0      1     1      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             38 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             30 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             29 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             44 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24270
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6122
                                             38 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1581
                                             26 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     134
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4386
                                             34 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     555
                                             25 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             43 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             26 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             25 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             21 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     110
                                             16 COMRAM     1     1      0
                        _writeEEPROM
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             59 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        20     8     12    1592
                                             39 COMRAM    20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          6     2      4    1328
                                             33 COMRAM     6     2      4
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  13     8      5    1180
                                             20 COMRAM    13     8      5
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      44
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     402
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              8 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             25 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
         ___wmul (ARG)
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
         ___wmul (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
         ___wmul (ARG)
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
         ___wmul (ARG)
       _writeCoeffs2Ram
         _readEEPROM
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _readEEPROM
           ___wmul (ARG)
     _vscp_getGUID
       _readEEPROM
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
       _ECANSetOperationMode
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
           ___wmul (ARG)
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
           ___wmul (ARG)
         _writeCoeffs2Ram
           _readEEPROM
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _handle_sync
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _writeEEPROM
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
         ___wmul (ARG)
     _vscp_getSubzone
       _readEEPROM
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _readEEPROM
           ___wmul (ARG)
   _doWork
     _readEEPROM
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     34      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5F      78       5       75.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     170       3        0.0%
DATA                 0      0     53B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 26 00:12:14 2015

                          ___asfldiv@f1p 0068                            ___altofl@sign 0045  
                           ___fldiv@cntr 0040                  __end_of_vscp_readAppReg 201C  
                           ___fldiv@sign 0042                    __end_of_sendVSCPFrame 4C82  
                           ___asflmul@mp 0043                             ___asflsub@f2 0037  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0010  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3E38  
                          ___asflsub@f1p 0035                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 58DE                              __CFG_WDT$ON 000000  
                                    l320 1914                                      l312 18E4  
                                    l209 20F2                                      l322 1920  
                                    l314 18F0                                      l170 44F4  
                                    l316 18FC                                      l252 4DBC  
                                    l228 25AA                                      l318 1908  
                                    l407 1D16                                      l185 4566  
                     vscp_readStdReg@idx 0028                                      l179 453A  
                                    l516 14E4                                      l292 50B0  
                                    l519 1532                                      l632 56AC  
                                    l626 5272                                      l820 3F04  
                                    l637 5944                                      l549 5AF2  
                                    l822 3F22                                      l591 5B10  
                                    l840 3AA2                                      l833 38C6  
                                    l850 394A                                      l915 5A5E  
                                    l843 3994                                      l852 395E  
                                    l844 3914                                      l828 3F9C  
                                    l854 396E                                      l846 3922  
                     vscp_readStdReg@reg 002B                                      l864 3A04  
                                    l856 397E                                      l848 3936  
                                    l865 3A28                                      l882 43B0  
                                    l892 5356                                      l887 4100  
         __size_of_vscp_handleProbeState 00C2                         setEventData@ival 008D  
                         getVSCPFrame@id 0038            __end_of_vscp_handleProbeState 4994  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 0088                                      _adc 01A6  
                                    _exp 3AA4                                      _log 43B2  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 007C  
                           ___flmul@sign 007D                            ___flpack@sign 0013  
                           ___fltol@exp1 0044                                     l1100 5546  
                                   l1104 5B66                                     l1033 5AAE  
                                   l1051 497E                                     l1043 498E  
                                   l1300 5414                                     l1052 4960  
                                   l1044 4918                                     l1028 5636  
                                   l1080 59C8                                     l1233 2B32  
                                   l1209 2976                                     l1314 5B48  
                                   l1234 2B48                                     l1315 5B4A  
                                   l1091 5974                                     l1235 2B8A  
                                   l1076 57BC                                     l1244 2BCC  
                                   l1149 5AD0                                     l1086 58CE  
                                   l1087 58DC                                     l1175 46FA  
                                   l1604 4D30                                     l1612 5490  
                                   l1277 573C                                     l1269 2E6C  
                                   l1613 54AE                                     l1534 4A62  
                                   l1535 4B12                                     l1560 3C88  
                                   l1545 4AD4                                     l1539 4AA6  
                                   l1619 48D0                                     l1563 3B52  
                                   l1572 4124                                     l1564 3C78  
                                   l1573 4260                                     l1653 4734  
                                   l1654 47FA                                     l1576 414C  
                                   l1656 47EA                                     l1681 516A  
                                   l1665 4F26                                     l1587 41DC  
                                   l1852 44DE                                     l1685 4E84  
                __end_of_doOneSecondWork 27A4                      vscp_readStdReg@code 0020  
                                   l8013 5B6E                                     l8111 591E  
              vscp_getManufacturerId@idx 001A                                     l8041 5BD6  
                                   l8107 591A                                     ?_exp 00A2  
                                   ?_log 0089                                     l7353 56C4  
                                   l8323 3A58                                     l8331 3A76  
                                   l8315 3A2A                                     l8235 38F4  
                                   l8219 38B4                                     l8243 3902  
                                   l8229 38DE                                     l8237 38FE  
                                   l8407 4032                                     l8095 520E  
                                   l8337 3A8C                                     l8381 530C  
                                   l9077 5A14                                     l9069 59FE  
                                   l8383 5316                                     l8375 52F0  
                                   l8287 39A8                                     l9431 452A  
                                   l9423 4516                                     l8385 5320  
                                   l8377 52F8                                     l8393 5338  
                                   l8297 39C8                                     l9601 27C0  
                                   l9433 452E                                     l8387 5326  
                                   l8379 5302                                     l9603 27C6  
                                   l9443 454C                                     l9435 4534  
                                   l9427 4520                                     l8389 532C  
                                   l9533 48F4                                     l9621 2802  
                                   l9453 456A                                     l9535 48FA  
                                   l9519 48D4                                     l9623 2808  
                                   l9471 45B2                                     l9455 4582  
                                   l9553 4936                                     l9481 45E6  
                                   l9449 4560                                     l9491 5A9A  
                                   l9811 2AFC                                     l9707 290E  
                                   l9731 299A                                     l9557 493A  
                                   l7981 5ADE                                     l9717 2942  
                                   l9637 2810                                     l9477 45DE  
                                   l9559 493E                                     l9735 29AA  
                                   l9671 2846                                     l9913 2BFE  
                                   l9745 2A12                                     l9729 297A  
                                   l9657 283A                                     l9923 2C26  
                                   l9827 2B22                                     l9739 29C8  
                                   l9595 27AE                                     l9589 4982  
                                   l9941 2C70                                     l9749 2A28  
                                   l9765 2A58                                     l9597 27B4  
                                   l9935 2C58                                     l9863 2B7E  
                                   l9855 2B6E                                     l9847 2B50  
                                   l9783 2ABA                                     l9767 2A5A  
                                   l9687 28A6                                     l9599 27BA  
                                   l9961 2CC2                                     l9873 2B8C  
                                   l9777 2A84                                     l9769 2A64  
                                   l9697 28DA                                     l9939 2C6A  
                                   l9859 2B76                                     l9795 2AD6  
                                   l9965 2CDC                                     l9957 2CA8  
                                   l9877 2BA8                                     l9991 2D9E  
                                   l9969 2CFC                                     l9987 2D5A  
                                   l9979 2D26                                     l9899 2BD4  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5450 525E                                     u5455 5254  
                                   u5625 38BC                                     u5627 38BE  
                                   u8304 2300                                     u9105 42EC  
                                   u8305 22FC                                     u8404 24EA  
                                   u8405 24E6                                     u8254 2236  
                                   u5935 3FE0                                     u8255 2232  
                                   u9400 3DA4                                     u8504 26DA  
                                   u5945 4000                                     u8505 26D6  
                                   u8354 23CA                                     u5955 404E  
                                   u8355 23C6                                     u9085 429C  
                                   u9405 3D9A                                     u9430 3E06  
                                   u8454 25BA                                     u9095 42C2  
                                   u8455 25B6                                     u8384 2472  
                                   u8624 3480                           sendCANFrame@rv 0042  
                                   u8385 246E                                     u8625 347C  
                                   u8730 3C3C                                     u9435 3DFC  
                                   u8484 2662                                     u8485 265E  
                                   u8750 43C6                                     u8654 387A  
                                   u8655 3876                                     u8764 53A6  
                                   u8765 53A0                                     u8945 4C0C  
                                   u9980 4C9C                         ??_ECANInitialize 000F  
              vscp_setManufacturerId@idx 0012                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 44E0  
                                   _init 57BE                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     exp@x 00A2  
                                   log@x 0089                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0B6E  
                            _vscp_minute 004D                              _vscp_second 0051  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 0ABC            __size_of_vscp_doOneSecondWork 004C  
                      vscp_getUserID@idx 001A                    __size_of_vscp_setGUID 0022  
                       _vscp_writeStdReg 45F6                              _writeEEPROM 5A42  
              ECANReceiveMessage@dataLen 0017                    getVSCPFrame@pPriority 002E  
                        __end_of_OpenADC 5418                          _sh_coefficients 011C  
                   __end_of_getVSCPFrame 5274                                    ??_exp 0046  
                                  ??_log 0044              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 0010                         __RegsToCANID@ptr 000E  
                 __end_of_Celsius2Kelvin 5912                     __size_of_getCANFrame 0034  
                                  l10013 2E0A                                    l10031 508A  
                                  l10111 236C                                    l10041 50DA  
                                  l10121 23BA                                    l11011 3F94  
                                  l10035 50BA                                    l10027 5062  
                                  l10051 2020                                    l11005 3F8E  
                                  l11101 5B60                                    l10109 2362  
                                  l10213 551C                                    l11111 3C9E  
                                  l10039 50CE                                    l10151 2560  
                                  l10127 2462                                    l10223 552E  
                                  l11009 3F92                                    l10129 247C  
                                  l10057 21C6                                    l11027 42D8  
                                  l11131 3CD4                                    l11123 3CBC  
                                  l11115 3CA8                                    l11211 5AC6  
                                  l10083 2298                                    l10067 220C  
                                  l10219 5526                                    l10315 3AF6  
                                  l10501 19FE                                    l10421 4F32  
                                  l10165 2652                                    l10149 2556  
                                  l10085 22A2                                    l10309 3AC2  
                                  l10511 1A3A                                    l10503 1A0A  
                                  l11135 3CE0                                    l11127 3CC8  
                                  l11119 3CB2                                    l10415 4F2C  
                                  l11223 4620                                    l10167 266C  
                                  l10095 22F0                                    l10335 3C46  
                                  l10319 3B20                                    l10247 3498  
                                  l10239 346E                                    _B0CON 000E20  
                                  l10601 1C56                                    l10521 1A76  
                                  l10513 1A46                                    l10505 1A16  
                                  l10441 1896                                    l11065 57B4  
                                  l11161 3D34                                    l11153 3D1E  
                                  l11145 3D06                                    l11401 41A0  
                                  l11321 4B46                                    l10611 1C92  
                                  l10603 1C62                                    l10531 1AB2  
                                  l10523 1A82                                    l10515 1A52  
                                  l10507 1A22                                    l10451 18D2  
                                  l10443 18A2                                    l11139 3CF0  
                                  l11243 467A                                    l11235 465C  
                                  l11411 41CA                                    l11403 41A8  
                                  l10187 2746                                    l10347 43D0  
                                  l11331 4B6E                                    l11315 4B2E  
                                  l10621 1CCE                                    l10613 1C9E  
                                  l10605 1C6E                                    l10541 1AEE  
                                  l10533 1ABE                                    l10525 1A8E  
                                  l10517 1A5E                                    l10509 1A2E  
                                  l10461 190E                                    l10453 18DE  
                                  l10445 18AE                                    l10437 187E  
                                  l11501 485C                                    l11165 3D40  
                                  l11157 3D28                                    l11149 3D12  
                                  l10701 0D28                                    l11245 467E  
                                  l11229 4640                                    l11421 4208  
                                  l11413 41D6                                    l11405 41AE  
                                  l10189 2750                                    l10293 3882  
                                  l10631 1D0A                                    l10623 1CDA  
                                  l10615 1CAA                                    l10607 1C7A  
                                  l10551 1B2A                                    l10543 1AFA  
                                  l10535 1ACA                                    l10527 1A9A  
                                  l10519 1A6A                                    l10471 194A  
                                  l10463 191A                                    l10455 18EA  
                                  l10447 18BA                                    l10439 188A  
                                  l10711 0DB4                                    l10703 0D44  
                                  l11247 4694                                    l10391 4D68  
                                  l10199 279A                                    l11327 4B5E  
                                  l11343 4BAA                                    _B1CON 000E30  
                                  l10633 1D1A                                    l10625 1CE6  
                                  l10617 1CB6                                    l10609 1C86  
                                  l10561 1B66                                    l10553 1B36  
                                  l10545 1B06                                    l10537 1AD6  
                                  l10529 1AA6                                    l10481 1986  
                                  l10473 1956                                    l10465 1926  
                                  l10457 18F6                                    l10449 18C6  
                                  l10641 1FBC                                    l11513 488C  
                                  l11169 3D4C                                    l10801 1276  
                                  l10721 0E40                                    l10713 0DD0  
                                  l10705 0D60                                    l11417 41F2  
                                  l11441 4C90                                    l11329 4B6A  
                                  l10635 1D26                                    l10627 1CF2  
                                  l10619 1CC2                                    l10571 1BA2  
                                  l10563 1B72                                    l10555 1B42  
                                  l10547 1B12                                    l10539 1AE2  
                                  l10491 19C2                                    l10483 1992  
                                  l10475 1962                                    l10467 1932  
                                  l10459 1902                                    l11195 3E24  
                                  l11179 3DAE                                    l10811 12F8  
                                  l10803 1290                                    l10731 0ECC  
                                  l10723 0E5C                                    l10715 0DEC  
                                  l10707 0D7C                                    l11267 46DE  
                                  l11259 46C8                                    l11371 4136  
                                  l10395 4DA0                                    l11603 547A  
                                  l11347 4BBE                                    l11339 4B9C  
                                  l10629 1CFE                                    l10581 1BDE  
                                  l10573 1BAE                                    l10565 1B7E  
                                  l10557 1B4E                                    l10549 1B1E  
                                  l10493 19CE                                    l10485 199E  
                                  l10477 196E                                    l10469 193E  
                                  l11285 4A6C                                    l11509 4878  
                                  l11189 3E0E                                    l10821 137A  
                                  l10813 1312                                    l10805 12AA  
                                  l10741 0F58                                    l10733 0EE8  
                                  l10725 0E78                                    l10717 0E08  
                                  l10709 0D98                                    l11277 46FC  
                                  l11429 4234                                    l11445 4CA8  
                                  l11357 55F6                                    l10655 1FEE  
                                  l10647 1FDA                                    l10591 1C1A  
                                  l10583 1BEA                                    l10575 1BBA  
                                  l10567 1B8A                                    l10559 1B5A  
                                  l10495 19DA                                    l10487 19AA  
                                  l10479 197A                                    l10663 2018  
                                  l10639 1D32                                    l11295 4ABC  
                                  l11287 4A78                                    l11199 3E34  
                                  l10831 13FC                                    l10823 1394  
                                  l10815 132C                                    l10807 12C4  
                                  l10751 0FE4                                    l10743 0F74  
                                  l10735 0F04                                    l10727 0E94  
                                  l10719 0E24                                    l10671 0B84  
                                  l11551 473E                                    _B2CON 000E40  
                                  l10657 1FF0                                    l10593 1C26  
                                  l10585 1BF6                                    l10577 1BC6  
                                  l10569 1B96                                    l10497 19E6  
                                  l10489 19B6                                    l11297 4AC8  
                                  l11289 4A90                                    l11481 480A  
                                  l11537 587E                                    l10841 147E  
                                  l10833 1416                                    l10825 13AE  
                                  l10817 1346                                    l10809 12DE  
                                  l10761 106E                                    l10753 1000  
                                  l10745 0F90                                    l10737 0F20  
                                  l10729 0EB0                                    l10681 0C10  
                                  l10673 0BA0                                    l11393 4178  
                                  l11377 415E                                    l11465 4CF6  
                                  l11457 4CC8                                    l11609 54AC  
                                  l11617 5A7A                                    l10659 2000  
                                  l10595 1C32                                    l10587 1C02  
                                  l10579 1BD2                                    l10499 19F2  
                                  l10851 1518                                    l10843 1498  
                                  l10835 1430                                    l10827 13C8  
                                  l10819 1360                                    l10771 10F0  
                                  l10763 1088                                    l10755 101C  
                                  l10747 0FAC                                    l10739 0F3C  
                                  l10691 0C9C                                    l10683 0C2C  
                                  l10675 0BBC                                    l11643 4E92  
                                  l11555 475A                                    l11563 49C0  
                                  l10597 1C3E                                    l10589 1C0E  
                                  l11485 4820                                    l10933 5676  
                                  l10853 1536                                    l10845 14B2  
                                  l10837 144A                                    l10829 13E2  
                                  l10781 1172                                    l10773 110A  
                                  l10765 10A2                                    l10757 1038  
                                  l10749 0FC8                                    l10693 0CB8  
                                  l10685 0C48                                    l10677 0BD8  
                                  l10861 156E                                    l11629 510C  
                                  l11645 4E9E                                    l11565 4A3A  
                                  l10599 1C4A                                    l10951 3E8E  
                                  l10871 181A                                    l10855 1550  
                                  l10847 14CC                                    l10839 1464  
                                  l10791 11F4                                    l10783 118C  
                                  l10775 1124                                    l10767 10BC  
                                  l10759 1054                                    l10695 0CD4  
                                  l10687 0C64                                    l10679 0BF4  
                                  l10863 17E2                                    l11399 4194  
                                  l11671 4F02                                    l11663 4EEA  
                                  _B3CON 000E50                                    l11497 4848  
                                  l10937 56A0                                    l10881 1830  
                                  l10857 156A                                    l10849 14FE  
                                  l10793 120E                                    l10785 11A6  
                                  l10777 113E                                    l10769 10D6  
                                  l10697 0CF0                                    l10689 0C80  
                                  l11593 4E4C                                    l10883 1840  
                                  l10795 1228                                    l10787 11C0  
                                  l10779 1158                                    l10699 0D0C  
                                  l11675 4F16                                    l11667 4EF2  
                                  l11659 4EDA                                    l11579 4E22  
                                  l10957 3E9E                                    l10797 1242  
                                  l10789 11DA                                    l11669 4EFE  
                                  l11589 4E40                                    l10991 3F52  
                                  l10879 182E                                    l10799 125C  
                                  l10887 186C                                    _B4CON 000E60  
                                  l10985 3F24                                    l10969 3EC8  
                                  l10979 3F08            __size_of_vscp_getMajorVersion 0002  
                                  l10999 3F6C                                    _B5CON 000E70  
             __end_of_vscp_goActiveState 5B30                            ___fltol@sign1 0043  
                        __end_of___aldiv 4BD0            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 4262  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4D32  
                          i1_WriteTimer0 5C7A                          __end_of___flneg 5A8C  
                                  _EEADR 000FA9                          __end_of___lbmod 5A1C  
                        __end_of___flmul 48D2                          __end_of___flsub 5834  
                        __end_of___fltol 4F28                  _vscp_handleDropNickname 58A8  
                                  _BSEL0 000DF8                                    u10010 4816  
                                  u10110 4E18                                    u10200 4EBE  
                                  u10205 4EB4                                    _T0CON 000FD5  
                                  i1l140 0886                                    i1l146 08C0  
                                  i1l163 0A48                                    i1l166 0A9E  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 001A  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 5CBE               _vscp_readNicknamePermanent 5CB4  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 0089                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001D  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 51F0  
                           _vscp_getGUID 5C0A                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 4700  
                                  _ldexp 4DE2                             _vscp_getZone 5C96  
                                  _frexp 50E6                       vscp_writeAppReg@rv 0026  
              _vscp_getRegisterPagesUsed 5CDC                   __size_of_vscp_getEvent 0044  
                                  main@i 00BB                               _ConvertADC 5CD4  
                           _vscp_setGUID 5AD2                                    tablat 000FF5  
                _vscp_getSubMinorVersion 5CE2                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5A42  
                            exp@exponent 00AA                              ldexp@newexp 008D  
                   _ECANSetOperationMode 5BCA                          __initialization 573E  
                            log@exponent 0044                             __end_of_main 45F6  
                           __end_of_init 57FA                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0818                          ?_Celsius2Kelvin 002D  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 002A                   ??_vscp_restoreDefaults 0011  
                                 ??_main 0046                                   ??_init 0013  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 001A  
               ??_vscp_setManufacturerId 0012                 _vscp_handleProtocolEvent 27A4  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0019                         doWork@calVoltage 0176  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 0098                                   ?_ldexp 0089  
                   __size_of_handle_sync 0088                                   ?_frexp 000E  
                       __end_of___altofl 5624               ECANReceiveMessage@savedPtr 001A  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 4B14                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 58A8  
                        __CFG_BBSIZ$2048 000000                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0020                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 5B30                                   i1l9101 0848  
                                 i1l9111 0878                                   i1l9103 084E  
                                 i1l9121 08A2                                   i1l9113 0880  
                                 i1l9105 0852                                   i1l9203 0A5E  
                                 i1l9123 08AA                                   i1l9115 088A  
                                 i1l9107 0864                                   i1l9205 0A98  
                                 i1l9125 08AE                                   i1l9117 088C  
                                 i1l9109 0874                                   i1l9141 08CC  
                                 i1l9207 0A9C                                   i1l9151 090E  
                                 i1l9127 08B0                                   i1l9119 0898  
                                 i1l9161 0952                                   i1l9153 0914  
                                 i1l9145 08D6                                   i1l9129 08B4  
                                 i1l9171 09B8                                   i1l9163 097A  
                                 i1l9155 093C                                   i1l9147 08FE  
                                 i1l9139 08CA                                   i1l9181 09FA  
                                 i1l9173 09BC                                   i1l9165 097E  
                                 i1l9157 0940                                   i1l9149 0902  
                                 i1l9191 0A44                                   i1l9183 0A06  
                                 i1l9175 09C8                                   i1l9167 098A  
                                 i1l9159 094C                                   i1l9193 0A4A  
                                 i1l9185 0A0C                                   i1l9177 09CE  
                                 i1l9169 0990                                   i1l9097 0834  
                                 i1l9195 0A54                                   i1l9187 0A34  
                                 i1l9179 09F6                                   i1l9099 083C  
                                 i1l9197 0A58                                   i1l9189 0A38  
                        _init_app_eeprom 2E6E                         __end_of___lwtofl 59A0  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                         __CFG_WDTPS$128 000000                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001E                   ECANReceiveMessage@temp 001F  
                      getVSCPFrame@pData 0032                        getVSCPFrame@pSize 0030  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5946  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1174 0088                                   ___flge 5464  
                         getCANFrame@pid 0026                                ??___aldiv 0045  
                              ??___fladd 0026                                   ___wmul 5834  
                              ??___fldiv 0035                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0043                                ??___flsub 0035  
                              ??___fltol 0082                            _vscp_getEvent 56FA  
                                 _doWork 3436                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 001A  
                    vscp_writeAppReg@reg 0025               __end_of_vscp_setSegmentCRC 5C56  
                    vscp_writeAppReg@val 0023                      vscp_writeAppReg@pos 0024  
                                 clear_0 5746                                   clear_1 5758  
                                 clear_2 5764                                   clear_3 5770  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0095  
                                 floor@i 009C                                   floor@x 0098  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00C9  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000E  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004C  
                     __size_of___asflmul 004C                               ___fladd@f1 001E  
                             ___fladd@f2 0022                       __size_of___asflsub 004A  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0B48                         __end_oflog@coeff 0B6C  
                        ___lbmod@divisor 000E                               ___altofl@c 0094  
                             ___fldiv@f1 0060                               ___fldiv@f2 0064  
                             ___fldiv@f3 003C                               __accesstop 0060  
                __end_of__initialization 5776                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 5274                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 0068  
                             ___flmul@f2 006C                             eval_poly@res 0085  
                             ___flsub@f1 002D                               ___flsub@f2 0031  
                             ___fltol@f1 007E                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0084                       _vscp_writeRegister 5AB0  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 002A                      ?_Celsius2Fahrenheit 007E  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 007E              __end_of_vscp_check_pstorage 5AB0  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 47FC                            __end_of_ldexp 4E86  
                          __end_of_frexp 516C                      ?_vscp_writeRegister 0027  
                         ??_sendCANFrame 0042                               ___lwtofl@c 001A  
             __end_of_vscp_getFamilyCode 5CB4                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 0216             __size_of_getCalibrationValue 005C  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 5CAA  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0027  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1870  
                 getVSCPFrame@pvscpclass 0028                  __end_of_init_app_eeprom 3436  
                   ??_Celsius2Fahrenheit 0043              __end_of_vscp_setControlByte 5C44  
               __end_of_vscp_writeStdReg 4700                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 008F  
                                ??_frexp 0014                            ?_setEventData 0086  
                   ??_vscp_writeRegister 0028          __end_of_vscp_handleDropNickname 58DE  
                           _getVSCPFrame 51F0                               __pbssBANK0 00BF  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00C0               __end_of_vscp_getBufferSize 5CE0  
                       Celsius2Kelvin@tc 002D                    vscp_writeRegister@reg 0028  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 4F28  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5CE4  
               ECANSetOperationMode@mode 000E                                  ?___wmul 000E  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 5592  
                      __end_of___asfldiv 5464                         WriteTimer0@timer 0010  
                              ?___altofl 0094                        __end_of___asflmul 54FC  
                                _ECANCON 000F77                        __end_of___asflsub 55DC  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 0198                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 001A                      vscp_writeStdReg@reg 0021  
           __end_of_vscp_doOneSecondWork 5548                                  i1l11745 0A70  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00C4  
        __end_of_interrupt_at_low_vector 0ABC                 vscp_readStdReg@code_1147 0024  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 48D2  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 52EA  
             __end_of_vscp_getMatrixInfo 5B82                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 0045                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 0086  
                     _vscp_goActiveState 5B12                   __size_of_sendVSCPFrame 00B2  
           __end_of_vscp_getMajorVersion 5CE8                       __size_of_vscp_init 0048  
                             _readEEPROM 5C1E                   _vscp_getManufacturerId 5BE2  
                 _vscp_setManufacturerId 5B82                          _ECANSendMessage 3E38  
                    ?_vscp_goActiveState 0001                                  _OpenADC 53BC  
                                __Hparam 0000                          ??_vscp_getEvent 003C  
                       ??_Celsius2Kelvin 0031                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 5CC8  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0026  
      __end_of_vscp_getRegisterPagesUsed 5CDE                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 4B14                          __size_of___flge 004C  
                                ___fladd 4102                                  ___fldiv 4C82  
                                ___flneg 5A68                                  ___lbmod 59F4  
                                ___flmul 47FC                                  ___flsub 57FA  
                                ___fltol 4E86                          __size_of___wmul 003A  
                        getCANFrame@pdlc 0022                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 0458  
                           __psmallconst 0B00                               ??___altofl 0045  
                   __end_of_init_app_ram 56FA                               ??___flpack 0014  
                     _vscp_sendHeartBeat 5A1C                                  __pcinit 573E  
                             ??___awtofl 001C                           _vscp_deviceURL 0B00  
                      __end_of_eval_poly 4A54                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 44E0  
                                __ptext1 3436                                  __ptext2 5976  
                                __ptext3 5418                                  __ptext4 5548  
                                __ptext5 4B14                                  __ptext6 5360  
                                __ptext7 43B2                                  __ptext8 3AA4  
                                __ptext9 5A68                               ??___lwtofl 001E  
                         _vscp_getUserID 5BF6                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E6  
                           __size_of_log 012E                    vscp_writeStdReg@value 001B  
                       ___aldiv@dividend 0086                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00C6  
                                doWork@B 0196                                  doWork@i 01A5  
                                doWork@j 019C                                  doWork@v 0192  
                    __end_of_WriteTimer0 5C7A                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 001C                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 5776                                  exp@sign 00AC  
           __end_of_vscp_handleHeartbeat 57BE                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 4FC8  
                   __end_of_sendCANFrame 56B4                               doWork@Rinf 0172  
                     doOneSecondWork@tmp 0097                               doWork@temp 01A1  
              vscp_handleProtocolEvent@i 0099                vscp_handleProtocolEvent@j 009A  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 59CA                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0090  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 0084  
                         _vscp_setUserID 5B9A                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0B20      __end_of_vscp_writeNicknamePermanent 5C68  
            _vscp_writeNicknamePermanent 5C56                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 4BD0                   __end_of_vscp_getUserID 5C0A  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 566C                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 5946            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0090  
               __size_of_vscp_readAppReg 07AC                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001C                         writeCoeffs2Ram@i 001F  
                       writeCoeffs2Ram@j 0021                              ___fldiv@exp 0041  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 01AE  
                     _vscp_setSegmentCRC 5C44                        readEEPROM@address 0016  
                           ??_ConvertADC 000E               vscp_handleProtocolEvent@cb 0091  
                __end_of_ECANSendMessage 3F9E                        vscp_readStdReg@rv 002A  
                            ___lbmod@rem 0011                              ___flmul@exp 0077  
                          ?__CANIDToRegs 000E                     __end_of__RegsToCANID 4102  
                    _getCalibrationValue 5360                              ?_readEEPROM 0016  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 59F4  
                             _vscp_error 5CD0                     _vscp_doOneSecondWork 54FC  
                     i1WriteTimer0@timer 0003                               _vscp_timer 00C1  
                 __end_of_vscp_setUserID 5BB2                 __size_of_doOneSecondWork 0788  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 4DE2  
                         ?_sendVSCPFrame 0060                           __end_of___flge 54B0  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 586E  
                        ?_vscp_getUserID 0001                           __end_of_doWork 388E  
           __end_of_vscp_getMinorVersion 5CE6                              _WriteTimer0 5C68  
                   _vscp_getMajorVersion 5CE6                       __end_of_ConvertADC 5CD8  
                   ?_getCalibrationValue 001A                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 00A0                        ?_vscp_writeAppReg 0023  
                    start_initialization 573E                               eval_poly@d 0082  
                             eval_poly@n 0083                               eval_poly@x 007E  
                             ldexp@value 0089          __size_of_vscp_handleSetNickname 002A  
                            __end_of_exp 3C8A                              __end_of_log 44E0  
                     ??_vscp_writeAppReg 0024                            _sendTempEvent 516C  
                      ?_vscp_writeStdReg 001B                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 0030                             ??_OpenTimer0 000E  
                     ??_vscp_writeStdReg 001C                       _vscp_getFamilyCode 5CAA  
                    __end_of_handle_sync 50E6                  doOneSecondWork@setpoint 0098  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5CA0  
                             frexp@value 000E                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 5B4E  
                   Celsius2Fahrenheit@tc 007E                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0020                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 2E6E  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0046                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0021                        ??_vscp_getSubzone 001A  
                               ??___flge 0016                 __end_of__ECANPointBuffer 5360  
                      __CANIDToRegs@type 0014                              _getCANFrame 5912  
                               ??___wmul 0012                                 ??_doWork 00AD  
                     _vscp_getBufferSize 5CDE              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 3AA4  
                    ??_vscp_readRegister 002C           __size_of_vscp_goBootloaderMode 001E  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 001C  
                  __end_ofi1_WriteTimer0 5C8C            __end_of_vscp_goBootloaderMode 5B12  
                   _vscp_handleHeartbeat 5780                       __end_of_OpenTimer0 5B4E  
                      __size_of___altofl 0048                        __size_of___flpack 00C0  
                              ___asfladd 5548                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0014  
                              ___asfldiv 5418                              __pbssBIGRAM 01A6  
                              ___asflmul 54B0                                ___asflsub 5592  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 0172                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0076  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0048  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5CDC                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 001A                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5B68                             _init_app_ram 56B4  
                   getCalibrationValue@i 0023                              _doWork$2276 017A  
                            _doWork$2277 017E                              _doWork$2278 0182  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 019D  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 001B  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5B68  
                 _vscp_handleSetNickname 59A0            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4FC8  
                               ?___aldiv 0086                                 ?___fladd 001E  
                               ?___fldiv 0060                                __ptext100 5C7A  
                              __ptext101 5CD8                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0068                                 ?___flsub 002D  
                               ?___fltol 007E                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 001A                              __pintcodelo 0818  
                      ??_doOneSecondWork 0090                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1164 008F                  vscp_readStdReg@idx_1148 0029  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 566C  
                            __smallconst 0B00                               ?___asfladd 002D  
                      WriteTimer0@timer0 000E                               ?___asfldiv 0068  
                             ?___asflmul 007E                               ?___asflsub 0035  
                     _vscp_getSegmentCRC 5CBE                           ??_vscp_getGUID 001A  
                              _eval_poly 4994                              _handle_sync 505E  
                         ??_vscp_getZone 001A           __end_of_vscp_getManufacturerId 5BF6  
         __end_of_vscp_setManufacturerId 5B9A                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1163 008E                           __size_of_floor 00FC  
                         __size_of_ldexp 00A4                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 00BF  
                        ___aldiv@divisor 008A                          ___aldiv@counter 008E  
                         ___wmul@product 0014                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 5CE4                                _sendTimer 011A  
                               _PIE1bits 000F9D                                _low_alarm 00C5  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 505E  
                               i1u720_20 08C8                                 i1u720_21 08C6  
                               i1u721_20 08D4                                 i1u721_21 08D2  
                               i1u722_20 090E                                 i1u714_20 083C  
                               i1u722_21 090C                                 i1u714_21 083A  
                               i1u723_20 094C                                 i1u715_20 0880  
                               i1u723_21 094A                                 i1u715_21 087E  
                               i1u724_20 098A                                 i1u716_20 0898  
                               i1u724_21 0988                                 i1u716_21 0896  
                               i1u725_20 09C8                                 i1u717_20 08A2  
                               i1u725_21 09C6                                 i1u717_21 08A0  
                               i1u726_20 0A06                                 i1u718_20 08AA  
                               i1u726_21 0A04                                 i1u718_21 08A8  
                               i1u727_20 0A44                                 i1u719_20 08BE  
                               i1u727_21 0A42                                 i1u719_21 08BC  
                               i1u728_20 0A54                                 i1u728_21 0A52  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 573E                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 003C  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 001A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 43B2  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 000E  
                           __RegsToCANID 3F9E                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0045              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 007E                      getVSCPFrame@pNodeId 002C  
                              _vscp_init 5624                                _vscp_imsg 0164  
                              _vscp_hour 00C7                                _vscp_omsg 00CB  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 06CA  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4D32               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0112                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0018                 __size_of_init_app_eeprom 05C8  
           __end_of_vscp_restoreDefaults 5CD0                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001C  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 001A  
                        _vscp_getMDF_URL 5BB2                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0160  
                       __size_of___fldiv 00B0                         __size_of___flneg 0024  
                       _vscp_initledfunc 004C                         __size_of___lbmod 0028  
                       __size_of___flmul 00D6                   ??_vscp_handleHeartbeat 001A  
                       __size_of___flsub 003A                         __size_of___fltol 00A2  
                               ___altofl 55DC                                 ___flpack 4A54  
                       getCANFrame@flags 0027                             ?_WriteTimer0 000E  
                               ___awtofl 586E                         getCANFrame@pdata 0024  
                               ___lwtofl 5976                           sendTempEvent@i 008F  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0033  
                            ??___asfldiv 0043                              ??___asflmul 0043  
                               _exp$2282 00A6                              ??___asflsub 003B  
                     __end_of_readEEPROM 5C32                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4DE2  
                               __ptext11 4994                                 __ptext20 4C82  
                               __ptext12 4700                                 __ptext21 54FC  
                               __ptext13 4E86                                 __ptext30 5274  
                               __ptext22 5A1C                                 __ptext14 50E6  
                               __ptext31 4102                                 __ptext23 5C8C  
                               __ptext15 5464                                 __ptext40 5B9A  
                               __ptext32 58DE                                 __ptext24 5C96  
                               __ptext16 55DC                                 __ptext41 5AD2  
                               __ptext33 27A4                                 __ptext25 201C  
                               __ptext17 5592                                 __ptext50 5CDE  
                               __ptext42 0B6E                                 __ptext34 59F4  
                               __ptext26 5CD0                                 __ptext18 57FA  
                               __ptext51 5CE0                                 __ptext43 4F28  
                               __ptext35 5AB0                                 __ptext27 505E  
                               __ptext19 54B0                                 __ptext60 58A8  
                               __ptext52 5BE2                                 __ptext44 5834  
                               __ptext36 45F6                                 __ptext28 516C  
                               __ptext61 5624                                 __ptext53 5BF6  
                               __ptext45 5B4E                                 __ptext37 5CC8  
                               __ptext29 4D32                                 __ptext70 59CA  
                               __ptext62 5CB4                                 __ptext54 5BB2  
                               __ptext46 3C8A                                 __ptext38 2E6E  
                               __ptext71 4BD0                                 __ptext63 5C1E  
                               __ptext55 5C0A                                 __ptext47 5CA0  
                               __ptext39 5B82                                 __ptext80 52EA  
                               __ptext72 566C                                 __ptext64 59A0  
                               __ptext56 5CE2                                 __ptext48 5CAA  
                               __ptext81 5A8C                                 __ptext73 3E38  
                               __ptext65 5780                                 __ptext57 5CE4  
                               __ptext49 5CDC                                 __ptext90 53BC  
                               __ptext82 5C32                                 __ptext74 4262  
                               __ptext66 5AF4                                 __ptext58 5CE6  
                               __ptext91 5B30                                 __ptext83 5C44  
                               __ptext75 56FA                                 __ptext67 5B68  
                               __ptext59 5946                                 __ptext92 56B4  
                               __ptext84 5CBE                                 __ptext76 51F0  
                               __ptext68 48D2                                 __ptext93 5CD4  
                               __ptext85 5C56                                 __ptext77 5912  
                               __ptext69 5B12                                 __ptext94 5C68  
                               __ptext86 5A42                                 __ptext78 388E  
                               __ptext95 586E                                 __ptext87 57BE  
                               __ptext79 3F9E                                 __ptext96 47FC  
                               __ptext88 4FC8                                 __ptext97 4A54  
                               __ptext89 5BCA                                 __ptext98 1870  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0028                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5C8C                         ??_vscp_setUserID 0012  
                          __size_of_main 0116                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0D02                      _vscp_check_pstorage 5A8C  
                          init_app_ram@i 000E           vscp_handleProtocolEvent@i_1162 0094  
         vscp_handleProtocolEvent@i_1165 0098           vscp_handleProtocolEvent@i_1173 0092  
                       doOneSecondWork@i 009A                     __end_of_vscp_getGUID 5C1E  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 010A  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0022                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5CA0                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 5AF4                       vscp_readAppReg@reg 001B  
                     vscp_readAppReg@pos 001A                             i1_ConvertADC 5CD8  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                      _vscp_setControlByte 5C32  
                               exp@coeff 0B20                    ___flmul@f3_as_product 0078  
                               log@coeff 0B48              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 1870                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0036  
                             _INTCONbits 000FF2                              ??_eval_poly 0043  
           ??_vscp_readNicknamePermanent 001A                      ECANReceiveMessage@i 001D  
                        _vscp_guid_reset 004B                          _vscp_readStdReg 3C8A  
           vscp_handleDropNickname@bytes 001A               __end_of_vscp_newNodeOnline 5976  
                     _ECANReceiveMessage 388E                           ??_getVSCPFrame 0034  
                        _vscp_initbtncnt 00C8                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 5BCA  
                   ?_vscp_setControlByte 0001                            _timeout_clock 0116  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00CA  
                           handle_sync@i 0092                          _doOneSecondWork 201C  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0011  
            __end_of_getCalibrationValue 53BC                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0011                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 0019                 __size_of_writeCoeffs2Ram 00A0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 5CE2  
            _vscp_getBootLoaderAlgorithm 5CE0         __size_of_interrupt_at_low_vector 02A4  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 5A68  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 001A  
                  ??_vscp_check_pstorage 001A                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 5AF4               __end_of_Celsius2Fahrenheit 52EA  
           __end_of_ECANSetOperationMode 5BE2                     _vscp_restoreDefaults 5CC8  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 001A  
                __end_of_vscp_getSubzone 5C96                             ?_handle_sync 0001  
            __size_of_vscp_getFamilyType 000A                             ___aldiv@sign 008F  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 5AD2  
                     __end_of_vscp_error 5CD4                   ECANSendMessage@tempPtr 0036  
                   _adc_conversion_flags 00C3           __end_of_vscp_handleSetNickname 59CA  
     vscp_handleProtocolEvent@bytes_1169 0096                    ??_vscp_setControlByte 0011  
                   vscp_readRegister@reg 002C                             ___fladd@exp1 002C  
                           ___fladd@exp2 002B                             ___fladd@sign 002A  
                           __CANIDToRegs 4262                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 002D  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 002F  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 006A  

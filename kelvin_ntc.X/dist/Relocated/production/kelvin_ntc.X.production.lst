

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sat Feb 14 18:20:23 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000600                     __psmallconst:
   122                           	opt stack 0
   123  000600                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000600  77                 	db	119
   126  000601  77                 	db	119
   127  000602  77                 	db	119
   128  000603  2E                 	db	46
   129  000604  65                 	db	101
   130  000605  75                 	db	117
   131  000606  72                 	db	114
   132  000607  6F                 	db	111
   133  000608  73                 	db	115
   134  000609  6F                 	db	111
   135  00060A  75                 	db	117
   136  00060B  72                 	db	114
   137  00060C  63                 	db	99
   138  00060D  65                 	db	101
   139  00060E  2E                 	db	46
   140  00060F  73                 	db	115
   141  000610  65                 	db	101
   142  000611  2F                 	db	47
   143  000612  6E                 	db	110
   144  000613  74                 	db	116
   145  000614  63                 	db	99
   146  000615  31                 	db	49
   147  000616  30                 	db	48
   148  000617  4B                 	db	75
   149  000618  41                 	db	65
   150  000619  5F                 	db	95
   151  00061A  32                 	db	50
   152  00061B  2E                 	db	46
   153  00061C  78                 	db	120
   154  00061D  6D                 	db	109
   155  00061E  6C                 	db	108
   156  00061F  00                 	db	0
   157  000620                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000620                     exp@coeff:
   160                           	opt stack 0
   161  000620  0000               	dw	0
   162  000622  3F80               	dw	16256
   163  000624  7218               	dw	29208
   164  000626  3F31               	dw	16177
   165  000628  FDF0               	dw	65008
   166  00062A  3E75               	dw	15989
   167  00062C  5847               	dw	22599
   168  00062E  3D63               	dw	15715
   169  000630  9558               	dw	38232
   170  000632  3C1D               	dw	15389
   171  000634  C482               	dw	50306
   172  000636  3AAE               	dw	15022
   173  000638  78A8               	dw	30888
   174  00063A  3921               	dw	14625
   175  00063C  93EF               	dw	37871
   176  00063E  3780               	dw	14208
   177  000640  92A0               	dw	37536
   178  000642  35A7               	dw	13735
   179  000644  5646               	dw	22086
   180  000646  3415               	dw	13333
   181  000648                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000648                     log@coeff:
   184                           	opt stack 0
   185  000648  0000               	dw	0
   186  00064A  0000               	dw	0
   187  00064C  FFC4               	dw	65476
   188  00064E  3F7F               	dw	16255
   189  000650  EF80               	dw	61312
   190  000652  BEFF               	dw	48895
   191  000654  E190               	dw	57744
   192  000656  3EA9               	dw	16041
   193  000658  82EC               	dw	33516
   194  00065A  BE76               	dw	48758
   195  00065C  AD82               	dw	44418
   196  00065E  3E2B               	dw	15915
   197  000660  3C0E               	dw	15374
   198  000662  BDC3               	dw	48579
   199  000664  D187               	dw	53639
   200  000666  3D13               	dw	15635
   201  000668  7841               	dw	30785
   202  00066A  BBD3               	dw	48083
   203  00066C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  00066C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  005408                     __pcinit:
   305                           	opt stack 0
   306  005408                     start_initialization:
   307                           	opt stack 0
   308  005408                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  005408  EE01  F09D         	lfsr	0,__pbssBIGRAM
   313  00540C  EE13 F0C0          	lfsr	1,960
   314  005410                     clear_0:
   315  005410  6AEE               	clrf	postinc0,c
   316  005412  50E5               	movf	postdec1,w,c
   317  005414  50E1               	movf	fsr1l,w,c
   318  005416  E1FC               	bnz	clear_0
   319  005418  50E2               	movf	fsr1h,w,c
   320  00541A  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (103 bytes)
   323  00541C  EE01  F000         	lfsr	0,__pbssBANK1
   324  005420  0E67               	movlw	103
   325  005422                     clear_1:
   326  005422  6AEE               	clrf	postinc0,c
   327  005424  06E8               	decf	wreg,f,c
   328  005426  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (36 bytes)
   331  005428  EE00  F0B3         	lfsr	0,__pbssBANK0
   332  00542C  0E24               	movlw	36
   333  00542E                     clear_2:
   334  00542E  6AEE               	clrf	postinc0,c
   335  005430  06E8               	decf	wreg,f,c
   336  005432  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  005434  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  005438  0E0D               	movlw	13
   341  00543A                     clear_3:
   342  00543A  6AEE               	clrf	postinc0,c
   343  00543C  06E8               	decf	wreg,f,c
   344  00543E  E1FD               	bnz	clear_3
   345  005440                     end_of_initialization:
   346                           	opt stack 0
   347  005440                     __end_of__initialization:
   348                           	opt stack 0
   349  005440  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  005442  6EF8               	movwf	tblptru,c
   351  005444  0100               	movlb	0
   352  005446  EFCF  F021         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _calibration_index:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _sendTimer:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_alarmstatus:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_guid_reset:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_initledfunc:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_node_substate:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_address:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_probe_cnt:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000B3                     __pbssBANK0:
   408                           	opt stack 0
   409  0000B3                     _adc_conversion_flags:
   410                           	opt stack 0
   411  0000B3                     	ds	1
   412  0000B4                     _high_alarm:
   413                           	opt stack 0
   414  0000B4                     	ds	1
   415  0000B5                     _low_alarm:
   416                           	opt stack 0
   417  0000B5                     	ds	1
   418  0000B6                     _seconds:
   419                           	opt stack 0
   420  0000B6                     	ds	1
   421  0000B7                     _vscp_initbtncnt:
   422                           	opt stack 0
   423  0000B7                     	ds	1
   424  0000B8                     _vscp_minute:
   425                           	opt stack 0
   426  0000B8                     	ds	1
   427  0000B9                     _vscp_nickname:
   428                           	opt stack 0
   429  0000B9                     	ds	1
   430  0000BA                     _vscp_node_state:
   431                           	opt stack 0
   432  0000BA                     	ds	1
   433  0000BB                     _vscp_second:
   434                           	opt stack 0
   435  0000BB                     	ds	1
   436  0000BC                     _vscp_imsg:
   437                           	opt stack 0
   438  0000BC                     	ds	14
   439  0000CA                     _vscp_omsg:
   440                           	opt stack 0
   441  0000CA                     	ds	13
   442                           tblptru	equ	0xFF8
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1h	equ	0xFE2
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	bssBANK1
   450  000100                     __pbssBANK1:
   451                           	opt stack 0
   452  000100                     _current_temp:
   453                           	opt stack 0
   454  000100                     	ds	12
   455  00010C                     _seconds_temp:
   456                           	opt stack 0
   457  00010C                     	ds	6
   458  000112                     _measurement_clock:
   459                           	opt stack 0
   460  000112                     	ds	4
   461  000116                     _timeout_clock:
   462                           	opt stack 0
   463  000116                     	ds	4
   464  00011A                     _vscp_configtimer:
   465                           	opt stack 0
   466  00011A                     	ds	2
   467  00011C                     _vscp_timer:
   468                           	opt stack 0
   469  00011C                     	ds	2
   470  00011E                     _vscp_hour:
   471                           	opt stack 0
   472  00011E                     	ds	1
   473  00011F                     _sh_coefficients:
   474                           	opt stack 0
   475  00011F                     	ds	72
   476                           tblptru	equ	0xFF8
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1h	equ	0xFE2
   481                           fsr1l	equ	0xFE1
   482                           
   483                           	psect	bssBIGRAM
   484  00019D                     __pbssBIGRAM:
   485                           	opt stack 0
   486  00019D                     _adc:
   487                           	opt stack 0
   488  00019D                     	ds	960
   489                           tblptru	equ	0xFF8
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           postdec1	equ	0xFE5
   493                           fsr1h	equ	0xFE2
   494                           fsr1l	equ	0xFE1
   495                           
   496                           	psect	cstackBANK1
   497  000167                     __pcstackBANK1:
   498                           	opt stack 0
   499  000167                     doWork@Rinf:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x0
   503  000167                     	ds	4
   504  00016B                     doWork@calVoltage:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x4
   508  00016B                     	ds	4
   509  00016F                     _doWork$2268:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x8
   513  00016F                     	ds	4
   514  000173                     _doWork$2269:
   515                           	opt stack 0
   516                           
   517                           ; 4 bytes @ 0xC
   518  000173                     	ds	4
   519  000177                     _doWork$2270:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x10
   523  000177                     	ds	16
   524  000187                     doWork@v:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x20
   528  000187                     	ds	4
   529  00018B                     doWork@B:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x24
   533  00018B                     	ds	2
   534  00018D                     doWork@resistance:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x26
   538  00018D                     	ds	4
   539  000191                     doWork@j:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x2A
   543  000191                     	ds	1
   544  000192                     doWork@avarage:
   545                           	opt stack 0
   546                           
   547                           ; 4 bytes @ 0x2B
   548  000192                     	ds	4
   549  000196                     doWork@setpoint:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x2F
   553  000196                     	ds	2
   554  000198                     doWork@temp:
   555                           	opt stack 0
   556                           
   557                           ; 4 bytes @ 0x31
   558  000198                     	ds	4
   559  00019C                     doWork@i:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x35
   563  00019C                     	ds	1
   564                           tblptru	equ	0xFF8
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           postdec1	equ	0xFE5
   568                           fsr1h	equ	0xFE2
   569                           fsr1l	equ	0xFE1
   570                           
   571                           	psect	cstackBANK0
   572  000060                     __pcstackBANK0:
   573                           	opt stack 0
   574  000060                     ?_sendVSCPFrame:
   575                           	opt stack 0
   576  000060                     ?___flmul:
   577                           	opt stack 0
   578  000060                     ?___asfldiv:
   579                           	opt stack 0
   580  000060                     sendVSCPFrame@vscpclass:
   581                           	opt stack 0
   582  000060                     ___asfldiv@f1p:
   583                           	opt stack 0
   584  000060                     ___flmul@f1:
   585                           	opt stack 0
   586                           
   587                           ; 4 bytes @ 0x0
   588  000060                     	ds	2
   589  000062                     sendVSCPFrame@vscptype:
   590                           	opt stack 0
   591  000062                     ___asfldiv@f2:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x2
   595  000062                     	ds	1
   596  000063                     sendVSCPFrame@nodeid:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x3
   600  000063                     	ds	1
   601  000064                     sendVSCPFrame@priority:
   602                           	opt stack 0
   603  000064                     ___flmul@f2:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x4
   607  000064                     	ds	1
   608  000065                     sendVSCPFrame@size:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x5
   612  000065                     	ds	1
   613  000066                     sendVSCPFrame@pData:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x6
   617  000066                     	ds	1
   618  000067                     ??_sendVSCPFrame:
   619                           
   620                           ; 0 bytes @ 0x7
   621  000067                     	ds	8
   622  00006F                     ___flmul@exp:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0xF
   626  00006F                     	ds	1
   627  000070                     ___flmul@f3_as_product:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x10
   631  000070                     	ds	4
   632  000074                     ___flmul@cntr:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x14
   636  000074                     	ds	1
   637  000075                     ___flmul@sign:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x15
   641  000075                     	ds	1
   642  000076                     ?_Celsius2Fahrenheit:
   643                           	opt stack 0
   644  000076                     ?___flsub:
   645                           	opt stack 0
   646  000076                     ?_eval_poly:
   647                           	opt stack 0
   648  000076                     ?___asflmul:
   649                           	opt stack 0
   650  000076                     ?___fltol:
   651                           	opt stack 0
   652  000076                     Celsius2Fahrenheit@tc:
   653                           	opt stack 0
   654  000076                     ___asflmul@multiplicand:
   655                           	opt stack 0
   656  000076                     ___flsub@f1:
   657                           	opt stack 0
   658  000076                     ___fltol@f1:
   659                           	opt stack 0
   660  000076                     eval_poly@x:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x16
   664  000076                     	ds	4
   665  00007A                     ___fltol@sign1:
   666                           	opt stack 0
   667  00007A                     eval_poly@d:
   668                           	opt stack 0
   669  00007A                     ___flsub@f2:
   670                           	opt stack 0
   671                           
   672                           ; 4 bytes @ 0x1A
   673  00007A                     	ds	1
   674  00007B                     ___fltol@exp1:
   675                           	opt stack 0
   676  00007B                     eval_poly@n:
   677                           	opt stack 0
   678  00007B                     sendVSCPFrame@id:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x1B
   682  00007B                     	ds	1
   683  00007C                     ?_setEventData:
   684                           	opt stack 0
   685  00007C                     ?___aldiv:
   686                           	opt stack 0
   687  00007C                     setEventData@v:
   688                           	opt stack 0
   689  00007C                     ___aldiv@dividend:
   690                           	opt stack 0
   691                           
   692                           ; 4 bytes @ 0x1C
   693  00007C                     	ds	1
   694  00007D                     eval_poly@res:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x1D
   698  00007D                     	ds	1
   699  00007E                     ?___asflsub:
   700                           	opt stack 0
   701  00007E                     setEventData@unit:
   702                           	opt stack 0
   703  00007E                     ___asflsub@f1p:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x1E
   707  00007E                     	ds	1
   708  00007F                     ??_vscp_handleProtocolEvent:
   709  00007F                     ??_vscp_doOneSecondWork:
   710  00007F                     setEventData@newval:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x1F
   714  00007F                     	ds	1
   715  000080                     ___aldiv@divisor:
   716                           	opt stack 0
   717  000080                     ___asflsub@f2:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x20
   721  000080                     	ds	1
   722  000081                     ?_log:
   723                           	opt stack 0
   724  000081                     ?_ldexp:
   725                           	opt stack 0
   726  000081                     ldexp@value:
   727                           	opt stack 0
   728  000081                     log@x:
   729                           	opt stack 0
   730                           
   731                           ; 4 bytes @ 0x21
   732  000081                     	ds	2
   733  000083                     setEventData@ival:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x23
   737  000083                     	ds	1
   738  000084                     ___aldiv@counter:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x24
   742  000084                     	ds	1
   743  000085                     ??_sendTempEvent:
   744  000085                     ___aldiv@sign:
   745                           	opt stack 0
   746  000085                     ldexp@newexp:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x25
   750  000085                     	ds	1
   751  000086                     sendTempEvent@i:
   752                           	opt stack 0
   753  000086                     vscp_handleProtocolEvent@page_save:
   754                           	opt stack 0
   755  000086                     ___aldiv@quotient:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x26
   759  000086                     	ds	1
   760  000087                     ??_handle_sync:
   761  000087                     ??_doOneSecondWork:
   762                           
   763                           ; 0 bytes @ 0x27
   764  000087                     	ds	1
   765  000088                     vscp_handleProtocolEvent@page_save_1165:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x28
   769  000088                     	ds	1
   770  000089                     doOneSecondWork@tmp:
   771                           	opt stack 0
   772  000089                     handle_sync@i:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x29
   776  000089                     	ds	1
   777  00008A                     ?___altofl:
   778                           	opt stack 0
   779  00008A                     doOneSecondWork@i:
   780                           	opt stack 0
   781  00008A                     vscp_handleProtocolEvent@offset:
   782                           	opt stack 0
   783  00008A                     ___altofl@c:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x2A
   787  00008A                     	ds	1
   788  00008B                     vscp_handleProtocolEvent@pos:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x2B
   792  00008B                     	ds	1
   793  00008C                     vscp_handleProtocolEvent@bytes:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x2C
   797  00008C                     	ds	1
   798  00008D                     vscp_handleProtocolEvent@len:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x2D
   802  00008D                     	ds	1
   803  00008E                     vscp_handleProtocolEvent@pos_1154:
   804                           	opt stack 0
   805  00008E                     ___altofl@sign:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x2E
   809  00008E                     	ds	1
   810  00008F                     ?_floor:
   811                           	opt stack 0
   812  00008F                     vscp_handleProtocolEvent@len_1155:
   813                           	opt stack 0
   814  00008F                     floor@x:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x2F
   818  00008F                     	ds	1
   819  000090                     vscp_handleProtocolEvent@bytes_this_time:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x30
   823  000090                     	ds	1
   824  000091                     vscp_handleProtocolEvent@cb:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x31
   828  000091                     	ds	1
   829  000092                     vscp_handleProtocolEvent@i_1164:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x32
   833  000092                     	ds	1
   834  000093                     vscp_handleProtocolEvent@k:
   835                           	opt stack 0
   836  000093                     floor@i:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0x33
   840  000093                     	ds	1
   841  000094                     vscp_handleProtocolEvent@bytes_1161:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x34
   845  000094                     	ds	1
   846  000095                     vscp_handleProtocolEvent@i_1153:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x35
   850  000095                     	ds	1
   851  000096                     vscp_handleProtocolEvent@byte:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x36
   855  000096                     	ds	1
   856  000097                     vscp_handleProtocolEvent@i_1156:
   857                           	opt stack 0
   858  000097                     floor@expon:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x37
   862  000097                     	ds	1
   863  000098                     vscp_handleProtocolEvent@i:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x38
   867  000098                     	ds	1
   868  000099                     ?_exp:
   869                           	opt stack 0
   870  000099                     vscp_handleProtocolEvent@j:
   871                           	opt stack 0
   872  000099                     exp@x:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x39
   876  000099                     	ds	4
   877  00009D                     _exp$2274:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x3D
   881  00009D                     	ds	4
   882  0000A1                     exp@exponent:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x41
   886  0000A1                     	ds	2
   887  0000A3                     exp@sign:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x43
   891  0000A3                     	ds	1
   892  0000A4                     ??_doWork:
   893                           
   894                           ; 0 bytes @ 0x44
   895  0000A4                     	ds	14
   896  0000B2                     main@i:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x52
   900  0000B2                     	ds	1
   901                           tblptru	equ	0xFF8
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1h	equ	0xFE2
   906                           fsr1l	equ	0xFE1
   907                           
   908                           	psect	cstackCOMRAM
   909  000001                     __pcstackCOMRAM:
   910                           	opt stack 0
   911  000001                     ?i1_WriteTimer0:
   912                           	opt stack 0
   913  000001                     i1WriteTimer0@timer0:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x0
   917  000001                     	ds	2
   918  000003                     i1WriteTimer0@timer:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x2
   922  000003                     	ds	2
   923  000005                     ??_interrupt_at_low_vector:
   924                           
   925                           ; 0 bytes @ 0x4
   926  000005                     	ds	9
   927  00000E                     ?_WriteTimer0:
   928                           	opt stack 0
   929  00000E                     ?_writeEEPROM:
   930                           	opt stack 0
   931  00000E                     ?_OpenADC:
   932                           	opt stack 0
   933  00000E                     ?__CANIDToRegs:
   934                           	opt stack 0
   935  00000E                     ?__RegsToCANID:
   936                           	opt stack 0
   937  00000E                     ??_vscp_getMDF_URL:
   938  00000E                     ?___flge:
   939                           	opt stack 0
   940  00000E                     ?_readEEPROM:
   941                           	opt stack 0
   942  00000E                     ?___lbmod:
   943                           	opt stack 0
   944  00000E                     ?__ECANPointBuffer:
   945                           	opt stack 0
   946  00000E                     ?___flpack:
   947                           	opt stack 0
   948  00000E                     ?_frexp:
   949                           	opt stack 0
   950  00000E                     ?_vscp_getFamilyCode:
   951                           	opt stack 0
   952  00000E                     ?_vscp_getFamilyType:
   953                           	opt stack 0
   954  00000E                     ?___flneg:
   955                           	opt stack 0
   956  00000E                     vscp_getMatrixInfo@pData:
   957                           	opt stack 0
   958  00000E                     ECANSetOperationMode@mode:
   959                           	opt stack 0
   960  00000E                     OpenADC@config2:
   961                           	opt stack 0
   962  00000E                     OpenTimer0@config:
   963                           	opt stack 0
   964  00000E                     ___lbmod@divisor:
   965                           	opt stack 0
   966  00000E                     __CANIDToRegs@ptr:
   967                           	opt stack 0
   968  00000E                     __RegsToCANID@ptr:
   969                           	opt stack 0
   970  00000E                     writeEEPROM@address:
   971                           	opt stack 0
   972  00000E                     readEEPROM@address:
   973                           	opt stack 0
   974  00000E                     WriteTimer0@timer0:
   975                           	opt stack 0
   976  00000E                     ___flpack@arg:
   977                           	opt stack 0
   978  00000E                     ___flge@ff1:
   979                           	opt stack 0
   980  00000E                     ___flneg@f1:
   981                           	opt stack 0
   982  00000E                     frexp@value:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0xD
   986  00000E                     	ds	1
   987  00000F                     vscp_getMDF_URL@idx:
   988                           	opt stack 0
   989  00000F                     vscp_getMatrixInfo@i:
   990                           	opt stack 0
   991  00000F                     OpenADC@portconfig:
   992                           	opt stack 0
   993  00000F                     ___lbmod@dividend:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0xE
   997  00000F                     	ds	1
   998  000010                     ??_OpenADC:
   999  000010                     __RegsToCANID@val:
  1000                           	opt stack 0
  1001  000010                     writeEEPROM@data:
  1002                           	opt stack 0
  1003  000010                     ___lbmod@counter:
  1004                           	opt stack 0
  1005  000010                     WriteTimer0@timer:
  1006                           	opt stack 0
  1007  000010                     __CANIDToRegs@val:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0xF
  1011  000010                     	ds	1
  1012  000011                     ?_vscp_setGUID:
  1013                           	opt stack 0
  1014  000011                     ?_vscp_setUserID:
  1015                           	opt stack 0
  1016  000011                     ?_vscp_setManufacturerId:
  1017                           	opt stack 0
  1018  000011                     init_app_eeprom@i:
  1019                           	opt stack 0
  1020  000011                     vscp_setGUID@data:
  1021                           	opt stack 0
  1022  000011                     vscp_setUserID@data:
  1023                           	opt stack 0
  1024  000011                     vscp_setManufacturerId@data:
  1025                           	opt stack 0
  1026  000011                     vscp_writeNicknamePermanent@nickname:
  1027                           	opt stack 0
  1028  000011                     vscp_setSegmentCRC@crc:
  1029                           	opt stack 0
  1030  000011                     vscp_setControlByte@ctrl:
  1031                           	opt stack 0
  1032  000011                     __RegsToCANID@type:
  1033                           	opt stack 0
  1034  000011                     __ECANPointBuffer@b:
  1035                           	opt stack 0
  1036  000011                     readEEPROM@data:
  1037                           	opt stack 0
  1038  000011                     ___lbmod@rem:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x10
  1042  000011                     	ds	1
  1043  000012                     ??__RegsToCANID:
  1044  000012                     ?_getCalibrationValue:
  1045                           	opt stack 0
  1046  000012                     ?___wmul:
  1047                           	opt stack 0
  1048  000012                     vscp_readAppReg@pos:
  1049                           	opt stack 0
  1050  000012                     vscp_getGUID@idx:
  1051                           	opt stack 0
  1052  000012                     vscp_setGUID@idx:
  1053                           	opt stack 0
  1054  000012                     vscp_getUserID@idx:
  1055                           	opt stack 0
  1056  000012                     vscp_setUserID@idx:
  1057                           	opt stack 0
  1058  000012                     vscp_getManufacturerId@idx:
  1059                           	opt stack 0
  1060  000012                     vscp_setManufacturerId@idx:
  1061                           	opt stack 0
  1062  000012                     vscp_handleDropNickname@bytes:
  1063                           	opt stack 0
  1064  000012                     OpenADC@config:
  1065                           	opt stack 0
  1066  000012                     ___flpack@exp:
  1067                           	opt stack 0
  1068  000012                     __ECANPointBuffer@pt:
  1069                           	opt stack 0
  1070  000012                     frexp@eptr:
  1071                           	opt stack 0
  1072  000012                     ___wmul@multiplier:
  1073                           	opt stack 0
  1074  000012                     ___flge@ff2:
  1075                           	opt stack 0
  1076                           
  1077                           ; 4 bytes @ 0x11
  1078  000012                     	ds	1
  1079  000013                     vscp_readAppReg@reg:
  1080                           	opt stack 0
  1081  000013                     vscp_readStdReg@rv:
  1082                           	opt stack 0
  1083  000013                     ___flpack@sign:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x12
  1087  000013                     	ds	1
  1088  000014                     ??_getCalibrationValue:
  1089  000014                     ??___flpack:
  1090  000014                     ??_frexp:
  1091  000014                     vscp_readAppReg@rv:
  1092                           	opt stack 0
  1093  000014                     __CANIDToRegs@type:
  1094                           	opt stack 0
  1095  000014                     __RegsToCANID@Value:
  1096                           	opt stack 0
  1097  000014                     vscp_readStdReg@reg:
  1098                           	opt stack 0
  1099  000014                     ___wmul@multiplicand:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x13
  1103  000014                     	ds	1
  1104  000015                     ??__CANIDToRegs:
  1105  000015                     ?_ECANReceiveMessage:
  1106                           	opt stack 0
  1107  000015                     ECANReceiveMessage@data:
  1108                           	opt stack 0
  1109  000015                     vscp_readRegister@reg:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x14
  1113  000015                     	ds	1
  1114  000016                     ECANReceiveMessage@dataLen:
  1115                           	opt stack 0
  1116  000016                     ___wmul@product:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x15
  1120  000016                     	ds	1
  1121  000017                     ECANReceiveMessage@msgFlags:
  1122                           	opt stack 0
  1123  000017                     __CANIDToRegs@Value:
  1124                           	opt stack 0
  1125  000017                     getCalibrationValue@cal:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x16
  1129  000017                     	ds	1
  1130  000018                     ??_writeCoeffs2Ram:
  1131  000018                     ?_ECANSendMessage:
  1132                           	opt stack 0
  1133  000018                     ?___awtofl:
  1134                           	opt stack 0
  1135  000018                     ?___lwtofl:
  1136                           	opt stack 0
  1137  000018                     ECANReceiveMessage@savedPtr:
  1138                           	opt stack 0
  1139  000018                     ___awtofl@c:
  1140                           	opt stack 0
  1141  000018                     ___lwtofl@c:
  1142                           	opt stack 0
  1143  000018                     ECANSendMessage@id:
  1144                           	opt stack 0
  1145                           
  1146                           ; 4 bytes @ 0x17
  1147  000018                     	ds	1
  1148  000019                     getCalibrationValue@i:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x18
  1152  000019                     	ds	1
  1153  00001A                     ECANReceiveMessage@id:
  1154                           	opt stack 0
  1155  00001A                     writeCoeffs2Ram@c:
  1156                           	opt stack 0
  1157                           
  1158                           ; 3 bytes @ 0x19
  1159  00001A                     	ds	1
  1160  00001B                     ECANReceiveMessage@i:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x1A
  1164  00001B                     	ds	1
  1165  00001C                     ECANSendMessage@data:
  1166                           	opt stack 0
  1167  00001C                     ECANReceiveMessage@mode:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x1B
  1171  00001C                     	ds	1
  1172  00001D                     ?___fladd:
  1173                           	opt stack 0
  1174  00001D                     ECANSendMessage@dataLen:
  1175                           	opt stack 0
  1176  00001D                     ECANReceiveMessage@temp:
  1177                           	opt stack 0
  1178  00001D                     writeCoeffs2Ram@i:
  1179                           	opt stack 0
  1180  00001D                     ___fladd@f1:
  1181                           	opt stack 0
  1182                           
  1183                           ; 4 bytes @ 0x1C
  1184  00001D                     	ds	1
  1185  00001E                     ECANSendMessage@msgFlags:
  1186                           	opt stack 0
  1187  00001E                     ___awtofl@sign:
  1188                           	opt stack 0
  1189  00001E                     ECANReceiveMessage@ptr:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x1D
  1193  00001E                     	ds	1
  1194  00001F                     ??_ECANSendMessage:
  1195  00001F                     writeCoeffs2Ram@j:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x1E
  1199  00001F                     	ds	1
  1200  000020                     ?_getCANFrame:
  1201                           	opt stack 0
  1202  000020                     getCANFrame@pdlc:
  1203                           	opt stack 0
  1204  000020                     ECANSendMessage@pb:
  1205                           	opt stack 0
  1206                           
  1207                           ; 18 bytes @ 0x1F
  1208  000020                     	ds	1
  1209  000021                     ?_vscp_writeAppReg:
  1210                           	opt stack 0
  1211  000021                     init_app_ram@i:
  1212                           	opt stack 0
  1213  000021                     vscp_writeAppReg@val:
  1214                           	opt stack 0
  1215  000021                     getCANFrame@pdata:
  1216                           	opt stack 0
  1217  000021                     ___fladd@f2:
  1218                           	opt stack 0
  1219                           
  1220                           ; 4 bytes @ 0x20
  1221  000021                     	ds	1
  1222  000022                     ?_vscp_writeStdReg:
  1223                           	opt stack 0
  1224  000022                     vscp_writeAppReg@reg:
  1225                           	opt stack 0
  1226  000022                     getCANFrame@pid:
  1227                           	opt stack 0
  1228  000022                     vscp_writeStdReg@value:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x21
  1232  000022                     	ds	1
  1233  000023                     ??_vscp_writeStdReg:
  1234  000023                     vscp_writeAppReg@rv:
  1235                           	opt stack 0
  1236  000023                     getCANFrame@flags:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x22
  1240  000023                     	ds	1
  1241  000024                     ?_getVSCPFrame:
  1242                           	opt stack 0
  1243  000024                     getVSCPFrame@pvscptype:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0x23
  1247  000024                     	ds	1
  1248  000025                     ??___fladd:
  1249  000025                     getVSCPFrame@pNodeId:
  1250                           	opt stack 0
  1251                           
  1252                           ; 1 bytes @ 0x24
  1253  000025                     	ds	1
  1254  000026                     getVSCPFrame@pPriority:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x25
  1258  000026                     	ds	1
  1259  000027                     getVSCPFrame@pSize:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x26
  1263  000027                     	ds	1
  1264  000028                     getVSCPFrame@pData:
  1265                           	opt stack 0
  1266  000028                     vscp_writeStdReg@code:
  1267                           	opt stack 0
  1268                           
  1269                           ; 4 bytes @ 0x27
  1270  000028                     	ds	1
  1271  000029                     ??_getVSCPFrame:
  1272  000029                     ___fladd@sign:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x28
  1276  000029                     	ds	1
  1277  00002A                     ___fladd@exp2:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x29
  1281  00002A                     	ds	1
  1282  00002B                     ___fladd@exp1:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x2A
  1286  00002B                     	ds	1
  1287  00002C                     ?_Celsius2Kelvin:
  1288                           	opt stack 0
  1289  00002C                     ?___fldiv:
  1290                           	opt stack 0
  1291  00002C                     ?___asfladd:
  1292                           	opt stack 0
  1293  00002C                     ___asfladd@f1p:
  1294                           	opt stack 0
  1295  00002C                     Celsius2Kelvin@tc:
  1296                           	opt stack 0
  1297  00002C                     vscp_writeStdReg@code_1145:
  1298                           	opt stack 0
  1299  00002C                     ___fldiv@f1:
  1300                           	opt stack 0
  1301                           
  1302                           ; 4 bytes @ 0x2B
  1303  00002C                     	ds	1
  1304  00002D                     getVSCPFrame@pvscpclass:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x2C
  1308  00002D                     	ds	1
  1309  00002E                     getVSCPFrame@id:
  1310                           	opt stack 0
  1311  00002E                     ___asfladd@f2:
  1312                           	opt stack 0
  1313                           
  1314                           ; 4 bytes @ 0x2D
  1315  00002E                     	ds	2
  1316  000030                     vscp_writeStdReg@idx:
  1317                           	opt stack 0
  1318  000030                     ___fldiv@f2:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x2F
  1322  000030                     	ds	1
  1323  000031                     vscp_writeStdReg@idx_1146:
  1324                           	opt stack 0
  1325                           
  1326                           ; 1 bytes @ 0x30
  1327  000031                     	ds	1
  1328  000032                     ECANSendMessage@mode:
  1329                           	opt stack 0
  1330  000032                     vscp_writeStdReg@rv:
  1331                           	opt stack 0
  1332  000032                     vscp_getEvent@rv:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x31
  1336  000032                     	ds	1
  1337  000033                     ECANSendMessage@buffers:
  1338                           	opt stack 0
  1339  000033                     vscp_writeStdReg@reg:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x32
  1343  000033                     	ds	1
  1344  000034                     ?_vscp_writeRegister:
  1345                           	opt stack 0
  1346  000034                     ECANSendMessage@j:
  1347                           	opt stack 0
  1348  000034                     vscp_writeRegister@value:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x33
  1352  000034                     	ds	1
  1353  000035                     ECANSendMessage@tempBSEL0:
  1354                           	opt stack 0
  1355  000035                     vscp_writeRegister@reg:
  1356                           	opt stack 0
  1357                           
  1358                           ; 1 bytes @ 0x34
  1359  000035                     	ds	1
  1360  000036                     ECANSendMessage@tempPtr:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x35
  1364  000036                     	ds	2
  1365  000038                     ECANSendMessage@temp:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x37
  1369  000038                     	ds	1
  1370  000039                     ECANSendMessage@i:
  1371                           	opt stack 0
  1372                           
  1373                           ; 1 bytes @ 0x38
  1374  000039                     	ds	1
  1375  00003A                     ECANSendMessage@ptr:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x39
  1379  00003A                     	ds	1
  1380  00003B                     ___fldiv@f3:
  1381                           	opt stack 0
  1382                           
  1383                           ; 4 bytes @ 0x3A
  1384  00003B                     	ds	1
  1385  00003C                     ?_sendCANFrame:
  1386                           	opt stack 0
  1387  00003C                     sendCANFrame@id:
  1388                           	opt stack 0
  1389                           
  1390                           ; 4 bytes @ 0x3B
  1391  00003C                     	ds	3
  1392  00003F                     ___fldiv@cntr:
  1393                           	opt stack 0
  1394                           
  1395                           ; 1 bytes @ 0x3E
  1396  00003F                     	ds	1
  1397  000040                     sendCANFrame@dlc:
  1398                           	opt stack 0
  1399  000040                     ___fldiv@exp:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x3F
  1403  000040                     	ds	1
  1404  000041                     sendCANFrame@pdata:
  1405                           	opt stack 0
  1406  000041                     ___fldiv@sign:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x40
  1410  000041                     	ds	1
  1411  000042                     ??_eval_poly:
  1412  000042                     ??___fltol:
  1413  000042                     sendCANFrame@rv:
  1414                           	opt stack 0
  1415  000042                     ___asflmul@mp:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x41
  1419  000042                     	ds	1
  1420  000043                     ??_ldexp:
  1421  000043                     vscp_sendEvent@rv:
  1422                           	opt stack 0
  1423  000043                     log@exponent:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x42
  1427  000043                     	ds	1
  1428  000044                     ?_vscp_sendHeartBeat:
  1429                           	opt stack 0
  1430  000044                     ??_vscp_newNodeOnline:
  1431  000044                     vscp_sendHeartBeat@subzone:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x43
  1435  000044                     	ds	1
  1436  000045                     vscp_sendHeartBeat@zone:
  1437                           	opt stack 0
  1438                           
  1439                           ; 1 bytes @ 0x44
  1440  000045                     	ds	1
  1441  000046                     tblptru	equ	0xFF8
  1442                           postinc0	equ	0xFEE
  1443                           wreg	equ	0xFE8
  1444                           postdec1	equ	0xFE5
  1445                           fsr1h	equ	0xFE2
  1446                           fsr1l	equ	0xFE1
  1447                           
  1448                           ; 0 bytes @ 0x45
  1449 ;;
  1450 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1451 ;;
  1452 ;; *************** function _main *****************
  1453 ;; Defined at:
  1454 ;;		line 297 in file "../main.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;		None
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;  i               1   82[BANK0 ] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;		None               void
  1461 ;; Registers used:
  1462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : E/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1468 ;;      Params:         0       0       0       0       0       0       0
  1469 ;;      Locals:         0       1       0       0       0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0
  1471 ;;      Totals:         0       1       0       0       0       0       0
  1472 ;;Total ram usage:        1 bytes
  1473 ;; Hardware stack levels required when called:    9
  1474 ;; This function calls:
  1475 ;;		_init
  1476 ;;		_vscp_check_pstorage
  1477 ;;		_init_app_eeprom
  1478 ;;		_vscp_init
  1479 ;;		_writeEEPROM
  1480 ;;		_vscp_getEvent
  1481 ;;		_vscp_goActiveState
  1482 ;;		_vscp_handleProbeState
  1483 ;;		_vscp_handleProtocolEvent
  1484 ;;		_handle_sync
  1485 ;;		_vscp_error
  1486 ;;		_doOneSecondWork
  1487 ;;		_vscp_doOneSecondWork
  1488 ;;		_doWork
  1489 ;; This function is called by:
  1490 ;;		Startup code after reset
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text0
  1495  00439E                     __ptext0:
  1496                           	opt stack 0
  1497  00439E                     _main:
  1498                           	opt stack 22
  1499                           
  1500                           ;main.c: 298: unsigned char i;
  1501                           ;main.c: 300: init();
  1502                           
  1503                           ;incstack = 0
  1504                           ;incstack = 0
  1505  00439E  EC80  F02A         	call	_init	;wreg free
  1506                           
  1507                           ;main.c: 304: if (!vscp_check_pstorage()) {
  1508  0043A2  ECD1  F02B         	call	_vscp_check_pstorage	;wreg free
  1509  0043A6  0900               	iorlw	0
  1510  0043A8  B4D8               	btfsc	status,2,c
  1511                           
  1512                           ;main.c: 307: init_app_eeprom();
  1513  0043AA  ECA8  F00F         	call	_init_app_eeprom	;wreg free
  1514                           
  1515                           ;main.c: 309: }
  1516                           ;main.c: 311: vscp_init();
  1517  0043AE  EC73  F029         	call	_vscp_init	;wreg free
  1518  0043B2                     l168:
  1519  0043B2  0004               	clrwdt		;# 
  1520                           
  1521                           ;main.c: 317: if ((vscp_initbtncnt > 250) &&
  1522                           ;main.c: 318: (0x01 != vscp_node_state)) {
  1523  0043B4  0EFA               	movlw	250
  1524  0043B6  0100               	movlb	0	; () banked
  1525  0043B8  65B7               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1526  0043BA  D00C               	goto	l11928
  1527                           
  1528                           ; BSR set to: 0
  1529  0043BC  05BA               	decf	_vscp_node_state& (0+255),w,b
  1530  0043BE  E00A               	bz	l11928
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 321: vscp_nickname = 0xff;
  1534  0043C0  69B9               	setf	_vscp_nickname& (0+255),b
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 322: writeEEPROM(0x01, 0xff);
  1538  0043C2  6A0F               	clrf	?_writeEEPROM+1,c
  1539  0043C4  0E01               	movlw	1
  1540  0043C6  6E0E               	movwf	?_writeEEPROM,c
  1541  0043C8  0EFF               	movlw	255
  1542  0043CA  6810               	setf	?_writeEEPROM+2,c
  1543  0043CC  EC9A  F02B         	call	_writeEEPROM	;wreg free
  1544                           
  1545                           ;main.c: 323: vscp_init();
  1546  0043D0  EC73  F029         	call	_vscp_init	;wreg free
  1547  0043D4                     l11928:
  1548                           
  1549                           ;main.c: 325: }
  1550                           ;main.c: 329: vscp_imsg.flags = 0;
  1551  0043D4  0100               	movlb	0	; () banked
  1552  0043D6  6BBC               	clrf	_vscp_imsg& (0+255),b
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;main.c: 330: vscp_getEvent();
  1556  0043D8  EC4A  F02B         	call	_vscp_getEvent	;wreg free
  1557                           
  1558                           ;main.c: 333: switch (vscp_node_state) {
  1559  0043DC  D024               	goto	l11958
  1560  0043DE                     l11932:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 338: if (0xff == vscp_nickname) {
  1564  0043DE  29B9               	incf	_vscp_nickname& (0+255),w,b
  1565  0043E0  E103               	bnz	l11936
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 340: vscp_node_state = 0x01;
  1569  0043E2  0E01               	movlw	1
  1570  0043E4  6FBA               	movwf	_vscp_node_state& (0+255),b
  1571                           
  1572                           ;main.c: 341: } else {
  1573  0043E6  D02B               	goto	l11960
  1574  0043E8                     l11936:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 343: vscp_node_state = 0x03;
  1578  0043E8  0E03               	movlw	3
  1579  0043EA  6FBA               	movwf	_vscp_node_state& (0+255),b
  1580  0043EC                     l11938:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 344: vscp_goActiveState();
  1584  0043EC  EC05  F02C         	call	_vscp_goActiveState	;wreg free
  1585  0043F0  D026               	goto	l11960
  1586  0043F2                     l11940:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 349: vscp_handleProbeState();
  1590  0043F2  EC27  F023         	call	_vscp_handleProbeState	;wreg free
  1591                           
  1592                           ;main.c: 350: break;
  1593  0043F6  D023               	goto	l11960
  1594  0043F8                     l177:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;main.c: 359: if (vscp_imsg.flags & 0x80) {
  1598  0043F8  AFBC               	btfss	_vscp_imsg& (0+255),7,b
  1599  0043FA  D021               	goto	l11960
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 361: if (0 == vscp_imsg.vscp_class) {
  1603  0043FC  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  1604  0043FE  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1605  004400  E103               	bnz	l11948
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 364: vscp_handleProtocolEvent();
  1609  004402  ECF9  F016         	call	_vscp_handleProtocolEvent	;wreg free
  1610                           
  1611                           ;main.c: 366: } else if ((30 == vscp_imsg.vscp_class) &&
  1612  004406  D01B               	goto	l11960
  1613  004408                     l11948:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;main.c: 367: (26 == vscp_imsg.vscp_type)) {
  1617  004408  51BE               	movf	(_vscp_imsg+2)& (0+255),w,b
  1618  00440A  0A1E               	xorlw	30
  1619  00440C  11BF               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1620  00440E  E117               	bnz	l11960
  1621                           
  1622                           ; BSR set to: 0
  1623  004410  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  1624  004412  0A1A               	xorlw	26
  1625  004414  E114               	bnz	l11960
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 368: handle_sync();
  1629  004416  EC6D  F027         	call	_handle_sync	;wreg free
  1630  00441A  D011               	goto	l11960
  1631  00441C                     l11954:
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;main.c: 375: vscp_error();
  1635  00441C  ECEB  F02C         	call	_vscp_error	;wreg free
  1636                           
  1637                           ;main.c: 376: break;
  1638  004420  D00E               	goto	l11960
  1639  004422                     l183:
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;main.c: 379: vscp_node_state = 0x00;
  1643  004422  6BBA               	clrf	_vscp_node_state& (0+255),b
  1644                           
  1645                           ;main.c: 380: break;
  1646  004424  D00C               	goto	l11960
  1647  004426                     l11958:
  1648  004426  0100               	movlb	0	; () banked
  1649  004428  51BA               	movf	_vscp_node_state& (0+255),w,b
  1650                           
  1651                           ; Switch size 1, requested type "speed"
  1652                           ; Number of cases is 5, Range of values is 0 to 4
  1653                           ; switch strategies available:
  1654                           ; Name         Instructions Cycles
  1655                           ; simple_byte           16     9 (average)
  1656                           ;	Chosen strategy is simple_byte
  1657  00442A  E0D9               	bz	l11932
  1658  00442C  0A01               	xorlw	1	; case 1
  1659  00442E  E0E1               	bz	l11940
  1660  004430  0A03               	xorlw	3	; case 2
  1661  004432  E0DC               	bz	l11938
  1662  004434  0A01               	xorlw	1	; case 3
  1663  004436  E0E0               	bz	l177
  1664  004438  0A07               	xorlw	7	; case 4
  1665  00443A  E0F0               	bz	l11954
  1666  00443C  D7F2               	goto	l183
  1667  00443E                     l11960:
  1668                           
  1669                           ;main.c: 386: if ( measurement_clock > 1000 ) {
  1670  00443E  0EE9               	movlw	233
  1671  004440  0101               	movlb	1	; () banked
  1672  004442  5D12               	subwf	_measurement_clock& (0+255),w,b
  1673  004444  0E03               	movlw	3
  1674  004446  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b
  1675  004448  0E00               	movlw	0
  1676  00444A  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b
  1677  00444C  0E00               	movlw	0
  1678  00444E  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b
  1679  004450  E3B0               	bnc	l168
  1680                           
  1681                           ; BSR set to: 1
  1682                           ;main.c: 388: measurement_clock = 0;
  1683  004452  6B12               	clrf	_measurement_clock& (0+255),b
  1684  004454  6B13               	clrf	(_measurement_clock+1)& (0+255),b
  1685  004456  6B14               	clrf	(_measurement_clock+2)& (0+255),b
  1686  004458  6B15               	clrf	(_measurement_clock+3)& (0+255),b
  1687                           
  1688                           ; BSR set to: 1
  1689                           ;main.c: 389: doOneSecondWork();
  1690  00445A  EC21  F01B         	call	_doOneSecondWork	;wreg free
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;main.c: 390: seconds++;
  1694  00445E  2BB6               	incf	_seconds& (0+255),f,b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;main.c: 391: sendTimer++;
  1698  004460  2A4B               	incf	_sendTimer,f,c
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;main.c: 395: if (0x03 == vscp_node_state) {
  1702  004462  51BA               	movf	_vscp_node_state& (0+255),w,b
  1703  004464  0A03               	xorlw	3
  1704  004466  E10D               	bnz	l11984
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 396: for (i = 0; i < 6; i++) {
  1708  004468  6BB2               	clrf	main@i& (0+255),b
  1709  00446A                     l11978:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;main.c: 397: seconds_temp[i]++;
  1713  00446A  0E0C               	movlw	low _seconds_temp
  1714  00446C  0100               	movlb	0	; () banked
  1715  00446E  25B2               	addwf	main@i& (0+255),w,b
  1716  004470  6ED9               	movwf	fsr2l,c
  1717  004472  6ADA               	clrf	fsr2h,c
  1718  004474  0E01               	movlw	high _seconds_temp
  1719  004476  22DA               	addwfc	fsr2h,f,c
  1720  004478  2ADF               	incf	indf2,f,c
  1721                           
  1722                           ; BSR set to: 1
  1723  00447A  2BB2               	incf	main@i& (0+255),f,b
  1724                           
  1725                           ; BSR set to: 0
  1726  00447C  0E05               	movlw	5
  1727  00447E  65B2               	cpfsgt	main@i& (0+255),b
  1728  004480  D7F4               	goto	l11978
  1729  004482                     l11984:
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 398: }
  1733                           ;main.c: 399: }
  1734                           ;main.c: 401: if (seconds > 60) {
  1735  004482  0E3C               	movlw	60
  1736  004484  65B6               	cpfsgt	_seconds& (0+255),b
  1737  004486  D001               	goto	l11988
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 402: seconds = 0;
  1741  004488  6BB6               	clrf	_seconds& (0+255),b
  1742  00448A                     l11988:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 403: }
  1746                           ;main.c: 406: vscp_doOneSecondWork();
  1747  00448A  EC8D  F028         	call	_vscp_doOneSecondWork	;wreg free
  1748                           
  1749                           ;main.c: 409: doWork();
  1750  00448E  EC54  F00A         	call	_doWork	;wreg free
  1751  004492  D78F               	goto	l168
  1752  004494                     __end_of_main:
  1753                           	opt stack 0
  1754                           tblptru	equ	0xFF8
  1755                           postinc0	equ	0xFEE
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _doWork *****************
  1766 ;; Defined at:
  1767 ;;		line 425 in file "../main.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  temp            4   49[BANK1 ] unsigned char 
  1772 ;;  avarage         4   43[BANK1 ] unsigned char 
  1773 ;;  resistance      4   38[BANK1 ] unsigned char 
  1774 ;;  v               4   32[BANK1 ] unsigned char 
  1775 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1776 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1777 ;;  setpoint        2   47[BANK1 ] int 
  1778 ;;  B               2   36[BANK1 ] unsigned short 
  1779 ;;  i               1   53[BANK1 ] unsigned char 
  1780 ;;  j               1   42[BANK1 ] unsigned char 
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : F/0
  1787 ;;		On exit  : E/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1790 ;;      Params:         0       0       0       0       0       0       0
  1791 ;;      Locals:         0       0      54       0       0       0       0
  1792 ;;      Temps:          0      14       0       0       0       0       0
  1793 ;;      Totals:         0      14      54       0       0       0       0
  1794 ;;Total ram usage:       68 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    7
  1797 ;; This function calls:
  1798 ;;		_writeEEPROM
  1799 ;;		_readEEPROM
  1800 ;;		_exp
  1801 ;;		_log
  1802 ;;		_getCalibrationValue
  1803 ;;		_vscp_sendEvent
  1804 ;;		___aldiv
  1805 ;;		___altofl
  1806 ;;		___asfladd
  1807 ;;		___fladd
  1808 ;;		___asfldiv
  1809 ;;		___fldiv
  1810 ;;		___flmul
  1811 ;;		___asflsub
  1812 ;;		___flsub
  1813 ;;		___fltol
  1814 ;;		___lwtofl
  1815 ;;		___wmul
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text1
  1822  0014A8                     __ptext1:
  1823                           	opt stack 0
  1824  0014A8                     _doWork:
  1825                           	opt stack 23
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;main.c: 426: uint8_t i, j;
  1829                           ;main.c: 427: uint16_t B;
  1830                           ;main.c: 428: double avarage;
  1831                           ;main.c: 429: double resistance;
  1832                           ;main.c: 430: double Rinf;
  1833                           ;main.c: 431: double temp;
  1834                           ;main.c: 432: double v;
  1835                           ;main.c: 433: double calVoltage;
  1836                           ;main.c: 434: int setpoint;
  1837                           ;main.c: 436: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1838                           ;main.c: 437: readEEPROM(0xF3));
  1839                           
  1840                           ;incstack = 0
  1841                           ;incstack = 0
  1842  0014A8  6A0F               	clrf	?_readEEPROM+1,c
  1843  0014AA  0EF3               	movlw	243
  1844  0014AC  6E0E               	movwf	?_readEEPROM,c
  1845  0014AE  EC9D  F02C         	call	_readEEPROM	;wreg free
  1846  0014B2  0100               	movlb	0	; () banked
  1847  0014B4  6FA4               	movwf	??_doWork& (0+255),b
  1848  0014B6  6A0F               	clrf	?_readEEPROM+1,c
  1849  0014B8  0EF2               	movlw	242
  1850  0014BA  6E0E               	movwf	?_readEEPROM,c
  1851  0014BC  EC9D  F02C         	call	_readEEPROM	;wreg free
  1852  0014C0  6E19               	movwf	?___lwtofl+1,c
  1853  0014C2  0100               	movlb	0	; () banked
  1854  0014C4  51A4               	movf	??_doWork& (0+255),w,b
  1855  0014C6  6E18               	movwf	?___lwtofl,c
  1856  0014C8  EC20  F02B         	call	___lwtofl	;wreg free
  1857  0014CC  C01B  F16E         	movff	?___lwtofl+3,doWork@calVoltage+3
  1858  0014D0  C01A  F16D         	movff	?___lwtofl+2,doWork@calVoltage+2
  1859  0014D4  C019  F16C         	movff	?___lwtofl+1,doWork@calVoltage+1
  1860  0014D8  C018  F16B         	movff	?___lwtofl,doWork@calVoltage
  1861                           
  1862                           ;main.c: 442: for (i = 0; i < 6; i++) {
  1863  0014DC  0101               	movlb	1	; () banked
  1864  0014DE  6B9C               	clrf	doWork@i& (0+255),b
  1865  0014E0                     l11998:
  1866                           
  1867                           ; BSR set to: 1
  1868                           ;main.c: 444: if (adc_conversion_flags & 1 << i) {
  1869  0014E0  C19C  F0A4         	movff	doWork@i,??_doWork
  1870  0014E4  0E01               	movlw	1
  1871  0014E6  0100               	movlb	0	; () banked
  1872  0014E8  6FA5               	movwf	(??_doWork+1)& (0+255),b
  1873  0014EA  2BA4               	incf	??_doWork& (0+255),f,b
  1874  0014EC  D002               	goto	u10414
  1875  0014EE                     u10415:
  1876  0014EE  90D8               	bcf	status,0,c
  1877  0014F0  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1878  0014F2                     u10414:
  1879  0014F2  2FA4               	decfsz	??_doWork& (0+255),f,b
  1880  0014F4  D7FC               	goto	u10415
  1881  0014F6  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1882  0014F8  15B3               	andwf	_adc_conversion_flags& (0+255),w,b
  1883  0014FA  E101 D2DA          	bz	l12058
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 447: avarage = 0;
  1887  0014FE  0101               	movlb	1	; () banked
  1888  001500  6B92               	clrf	doWork@avarage& (0+255),b
  1889  001502  6B93               	clrf	(doWork@avarage+1)& (0+255),b
  1890  001504  6B94               	clrf	(doWork@avarage+2)& (0+255),b
  1891  001506  6B95               	clrf	(doWork@avarage+3)& (0+255),b
  1892                           
  1893                           ;main.c: 448: for (j = 0; j < 80; j++) {
  1894  001508  6B91               	clrf	doWork@j& (0+255),b
  1895  00150A                     l12006:
  1896                           
  1897                           ; BSR set to: 1
  1898                           ;main.c: 449: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1899  00150A  0E01               	movlw	high doWork@avarage
  1900  00150C  6E2D               	movwf	?___asfladd+1,c
  1901  00150E  0E92               	movlw	low doWork@avarage
  1902  001510  6E2C               	movwf	?___asfladd,c
  1903  001512  90D8               	bcf	status,0,c
  1904  001514  359C               	rlcf	doWork@i& (0+255),w,b
  1905  001516  0100               	movlb	0	; () banked
  1906  001518  6FA4               	movwf	??_doWork& (0+255),b
  1907  00151A  6BA5               	clrf	(??_doWork+1)& (0+255),b
  1908  00151C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1909  00151E  0101               	movlb	1	; () banked
  1910  001520  5191               	movf	doWork@j& (0+255),w,b
  1911  001522  0D0C               	mullw	12
  1912  001524  0E9E               	movlw	low (_adc+1)
  1913  001526  24F3               	addwf	prodl,w,c
  1914  001528  0100               	movlb	0	; () banked
  1915  00152A  6FA6               	movwf	(??_doWork+2)& (0+255),b
  1916  00152C  0E01               	movlw	high (_adc+1)
  1917  00152E  20F4               	addwfc	prodh,w,c
  1918  001530  6FA7               	movwf	(??_doWork+3)& (0+255),b
  1919  001532  51A4               	movf	??_doWork& (0+255),w,b
  1920  001534  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  1921  001536  6ED9               	movwf	fsr2l,c
  1922  001538  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1923  00153A  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  1924  00153C  6EDA               	movwf	fsr2h,c
  1925  00153E  50DF               	movf	indf2,w,c
  1926  001540  6FA8               	movwf	(??_doWork+4)& (0+255),b
  1927  001542  90D8               	bcf	status,0,c
  1928  001544  0101               	movlb	1	; () banked
  1929  001546  359C               	rlcf	doWork@i& (0+255),w,b
  1930  001548  0100               	movlb	0	; () banked
  1931  00154A  6FA9               	movwf	(??_doWork+5)& (0+255),b
  1932  00154C  6BAA               	clrf	(??_doWork+6)& (0+255),b
  1933  00154E  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  1934  001550  0101               	movlb	1	; () banked
  1935  001552  5191               	movf	doWork@j& (0+255),w,b
  1936  001554  0D0C               	mullw	12
  1937  001556  0E9D               	movlw	low _adc
  1938  001558  24F3               	addwf	prodl,w,c
  1939  00155A  0100               	movlb	0	; () banked
  1940  00155C  6FAB               	movwf	(??_doWork+7)& (0+255),b
  1941  00155E  0E01               	movlw	high _adc
  1942  001560  20F4               	addwfc	prodh,w,c
  1943  001562  6FAC               	movwf	(??_doWork+8)& (0+255),b
  1944  001564  51A9               	movf	(??_doWork+5)& (0+255),w,b
  1945  001566  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  1946  001568  6ED9               	movwf	fsr2l,c
  1947  00156A  51AA               	movf	(??_doWork+6)& (0+255),w,b
  1948  00156C  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  1949  00156E  6EDA               	movwf	fsr2h,c
  1950  001570  50DF               	movf	indf2,w,c
  1951  001572  6E19               	movwf	?___lwtofl+1,c
  1952  001574  51A8               	movf	(??_doWork+4)& (0+255),w,b
  1953  001576  6E18               	movwf	?___lwtofl,c
  1954  001578  EC20  F02B         	call	___lwtofl	;wreg free
  1955  00157C  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  1956  001580  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  1957  001584  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  1958  001588  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  1959  00158C  EC4E  F029         	call	___asfladd	;wreg free
  1960  001590  0101               	movlb	1	; () banked
  1961  001592  2B91               	incf	doWork@j& (0+255),f,b
  1962                           
  1963                           ; BSR set to: 1
  1964  001594  0E4F               	movlw	79
  1965  001596  6591               	cpfsgt	doWork@j& (0+255),b
  1966  001598  D7B8               	goto	l12006
  1967                           
  1968                           ; BSR set to: 1
  1969                           ;main.c: 453: if (1) {
  1970  00159A  0E01               	movlw	high doWork@avarage
  1971  00159C  0100               	movlb	0	; () banked
  1972  00159E  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  1973  0015A0  0E92               	movlw	low doWork@avarage
  1974  0015A2  6F60               	movwf	?___asfldiv& (0+255),b
  1975  0015A4  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  1976  0015A6  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  1977  0015A8  0EA0               	movlw	160
  1978  0015AA  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  1979  0015AC  0E42               	movlw	66
  1980  0015AE  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  1981  0015B0  EC29  F029         	call	___asfldiv	;wreg free
  1982                           
  1983                           ;main.c: 461: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  1984                           ;main.c: 462: readEEPROM(2 * i + 0x50);
  1985  0015B4  0101               	movlb	1	; () banked
  1986  0015B6  519C               	movf	doWork@i& (0+255),w,b
  1987  0015B8  0D02               	mullw	2
  1988  0015BA  0E50               	movlw	80
  1989  0015BC  24F3               	addwf	prodl,w,c
  1990  0015BE  6E0E               	movwf	?_readEEPROM,c
  1991  0015C0  0E00               	movlw	0
  1992  0015C2  20F4               	addwfc	prodh,w,c
  1993  0015C4  6E0F               	movwf	?_readEEPROM+1,c
  1994  0015C6  EC9D  F02C         	call	_readEEPROM	;wreg free
  1995  0015CA  0100               	movlb	0	; () banked
  1996  0015CC  6FA4               	movwf	??_doWork& (0+255),b
  1997  0015CE  0101               	movlb	1	; () banked
  1998  0015D0  519C               	movf	doWork@i& (0+255),w,b
  1999  0015D2  0D02               	mullw	2
  2000  0015D4  0E4F               	movlw	79
  2001  0015D6  24F3               	addwf	prodl,w,c
  2002  0015D8  6E0E               	movwf	?_readEEPROM,c
  2003  0015DA  0E00               	movlw	0
  2004  0015DC  20F4               	addwfc	prodh,w,c
  2005  0015DE  6E0F               	movwf	?_readEEPROM+1,c
  2006  0015E0  EC9D  F02C         	call	_readEEPROM	;wreg free
  2007  0015E4  0101               	movlb	1	; () banked
  2008  0015E6  6F8C               	movwf	(doWork@B+1)& (0+255),b
  2009  0015E8  0100               	movlb	0	; () banked
  2010  0015EA  51A4               	movf	??_doWork& (0+255),w,b
  2011  0015EC  0101               	movlb	1	; () banked
  2012  0015EE  6F8B               	movwf	doWork@B& (0+255),b
  2013                           
  2014                           ; BSR set to: 1
  2015                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2016  0015F0  0E33               	movlw	51
  2017  0015F2  6E30               	movwf	?___fldiv+4,c
  2018  0015F4  0E13               	movlw	19
  2019  0015F6  6E31               	movwf	?___fldiv+5,c
  2020  0015F8  0E95               	movlw	149
  2021  0015FA  6E32               	movwf	?___fldiv+6,c
  2022  0015FC  0EC3               	movlw	195
  2023  0015FE  6E33               	movwf	?___fldiv+7,c
  2024  001600  C18B  F018         	movff	doWork@B,?___lwtofl
  2025  001604  C18C  F019         	movff	doWork@B+1,?___lwtofl+1
  2026  001608  EC20  F02B         	call	___lwtofl	;wreg free
  2027  00160C  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2028  001610  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2029  001614  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2030  001618  C018  F02C         	movff	?___lwtofl,?___fldiv
  2031  00161C  EC58  F025         	call	___fldiv	;wreg free
  2032  001620  C02F  F172         	movff	?___fldiv+3,_doWork$2268+3
  2033  001624  C02E  F171         	movff	?___fldiv+2,_doWork$2268+2
  2034  001628  C02D  F170         	movff	?___fldiv+1,_doWork$2268+1
  2035  00162C  C02C  F16F         	movff	?___fldiv,_doWork$2268
  2036                           
  2037                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2038  001630  C16F  F099         	movff	_doWork$2268,?_exp
  2039  001634  C170  F09A         	movff	_doWork$2268+1,?_exp+1
  2040  001638  C171  F09B         	movff	_doWork$2268+2,?_exp+2
  2041  00163C  C172  F09C         	movff	_doWork$2268+3,?_exp+3
  2042  001640  EC25  F01C         	call	_exp	;wreg free
  2043  001644  C09C  F176         	movff	?_exp+3,_doWork$2269+3
  2044  001648  C09B  F175         	movff	?_exp+2,_doWork$2269+2
  2045  00164C  C09A  F174         	movff	?_exp+1,_doWork$2269+1
  2046  001650  C099  F173         	movff	?_exp,_doWork$2269
  2047                           
  2048                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2049  001654  C173  F060         	movff	_doWork$2269,?___flmul
  2050  001658  C174  F061         	movff	_doWork$2269+1,?___flmul+1
  2051  00165C  C175  F062         	movff	_doWork$2269+2,?___flmul+2
  2052  001660  C176  F063         	movff	_doWork$2269+3,?___flmul+3
  2053  001664  0100               	movlb	0	; () banked
  2054  001666  6B64               	clrf	(?___flmul+4)& (0+255),b
  2055  001668  0E40               	movlw	64
  2056  00166A  6F65               	movwf	(?___flmul+5)& (0+255),b
  2057  00166C  0E1C               	movlw	28
  2058  00166E  6F66               	movwf	(?___flmul+6)& (0+255),b
  2059  001670  0E46               	movlw	70
  2060  001672  6F67               	movwf	(?___flmul+7)& (0+255),b
  2061  001674  ECBC  F022         	call	___flmul	;wreg free
  2062  001678  C063  F16A         	movff	?___flmul+3,doWork@Rinf+3
  2063  00167C  C062  F169         	movff	?___flmul+2,doWork@Rinf+2
  2064  001680  C061  F168         	movff	?___flmul+1,doWork@Rinf+1
  2065  001684  C060  F167         	movff	?___flmul,doWork@Rinf
  2066                           
  2067                           ;main.c: 467: v = 5.0 * (double) avarage / 1025;
  2068  001688  0100               	movlb	0	; () banked
  2069  00168A  6B64               	clrf	(?___flmul+4)& (0+255),b
  2070  00168C  6B65               	clrf	(?___flmul+5)& (0+255),b
  2071  00168E  0EA0               	movlw	160
  2072  001690  6F66               	movwf	(?___flmul+6)& (0+255),b
  2073  001692  0E40               	movlw	64
  2074  001694  6F67               	movwf	(?___flmul+7)& (0+255),b
  2075  001696  C192  F060         	movff	doWork@avarage,?___flmul
  2076  00169A  C193  F061         	movff	doWork@avarage+1,?___flmul+1
  2077  00169E  C194  F062         	movff	doWork@avarage+2,?___flmul+2
  2078  0016A2  C195  F063         	movff	doWork@avarage+3,?___flmul+3
  2079  0016A6  ECBC  F022         	call	___flmul	;wreg free
  2080  0016AA  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2081  0016AE  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2082  0016B2  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2083  0016B6  C060  F02C         	movff	?___flmul,?___fldiv
  2084  0016BA  6A30               	clrf	?___fldiv+4,c
  2085  0016BC  0E20               	movlw	32
  2086  0016BE  6E31               	movwf	?___fldiv+5,c
  2087  0016C0  0E80               	movlw	128
  2088  0016C2  6E32               	movwf	?___fldiv+6,c
  2089  0016C4  0E44               	movlw	68
  2090  0016C6  6E33               	movwf	?___fldiv+7,c
  2091  0016C8  EC58  F025         	call	___fldiv	;wreg free
  2092  0016CC  C02F  F18A         	movff	?___fldiv+3,doWork@v+3
  2093  0016D0  C02E  F189         	movff	?___fldiv+2,doWork@v+2
  2094  0016D4  C02D  F188         	movff	?___fldiv+1,doWork@v+1
  2095  0016D8  C02C  F187         	movff	?___fldiv,doWork@v
  2096                           
  2097                           ;main.c: 469: resistance = (calVoltage - 10000.0 * v) / v;
  2098  0016DC  0100               	movlb	0	; () banked
  2099  0016DE  6B64               	clrf	(?___flmul+4)& (0+255),b
  2100  0016E0  0E40               	movlw	64
  2101  0016E2  6F65               	movwf	(?___flmul+5)& (0+255),b
  2102  0016E4  0E1C               	movlw	28
  2103  0016E6  6F66               	movwf	(?___flmul+6)& (0+255),b
  2104  0016E8  0E46               	movlw	70
  2105  0016EA  6F67               	movwf	(?___flmul+7)& (0+255),b
  2106  0016EC  C187  F060         	movff	doWork@v,?___flmul
  2107  0016F0  C188  F061         	movff	doWork@v+1,?___flmul+1
  2108  0016F4  C189  F062         	movff	doWork@v+2,?___flmul+2
  2109  0016F8  C18A  F063         	movff	doWork@v+3,?___flmul+3
  2110  0016FC  ECBC  F022         	call	___flmul	;wreg free
  2111  001700  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2112  001704  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2113  001708  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2114  00170C  C060  F07A         	movff	?___flmul,?___flsub+4
  2115  001710  C16B  F076         	movff	doWork@calVoltage,?___flsub
  2116  001714  C16C  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2117  001718  C16D  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2118  00171C  C16E  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2119  001720  EC44  F02A         	call	___flsub	;wreg free
  2120  001724  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2121  001728  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2122  00172C  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2123  001730  C076  F02C         	movff	?___flsub,?___fldiv
  2124  001734  C187  F030         	movff	doWork@v,?___fldiv+4
  2125  001738  C188  F031         	movff	doWork@v+1,?___fldiv+5
  2126  00173C  C189  F032         	movff	doWork@v+2,?___fldiv+6
  2127  001740  C18A  F033         	movff	doWork@v+3,?___fldiv+7
  2128  001744  EC58  F025         	call	___fldiv	;wreg free
  2129  001748  C02F  F190         	movff	?___fldiv+3,doWork@resistance+3
  2130  00174C  C02E  F18F         	movff	?___fldiv+2,doWork@resistance+2
  2131  001750  C02D  F18E         	movff	?___fldiv+1,doWork@resistance+1
  2132  001754  C02C  F18D         	movff	?___fldiv,doWork@resistance
  2133                           
  2134                           ;main.c: 471: temp = ((double) B) / log(resistance / Rinf);
  2135  001758  C167  F030         	movff	doWork@Rinf,?___fldiv+4
  2136  00175C  C168  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2137  001760  C169  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2138  001764  C16A  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2139  001768  C18D  F02C         	movff	doWork@resistance,?___fldiv
  2140  00176C  C18E  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2141  001770  C18F  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2142  001774  C190  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2143  001778  EC58  F025         	call	___fldiv	;wreg free
  2144  00177C  C02F  F084         	movff	?___fldiv+3,?_log+3
  2145  001780  C02E  F083         	movff	?___fldiv+2,?_log+2
  2146  001784  C02D  F082         	movff	?___fldiv+1,?_log+1
  2147  001788  C02C  F081         	movff	?___fldiv,?_log
  2148  00178C  ECBA  F020         	call	_log	;wreg free
  2149  001790  C084  F17A         	movff	?_log+3,_doWork$2270+3
  2150  001794  C083  F179         	movff	?_log+2,_doWork$2270+2
  2151  001798  C082  F178         	movff	?_log+1,_doWork$2270+1
  2152  00179C  C081  F177         	movff	?_log,_doWork$2270
  2153                           
  2154                           ;main.c: 471: temp = ((double) B) / log(resistance / Rinf);
  2155  0017A0  C18B  F018         	movff	doWork@B,?___lwtofl
  2156  0017A4  C18C  F019         	movff	doWork@B+1,?___lwtofl+1
  2157  0017A8  EC20  F02B         	call	___lwtofl	;wreg free
  2158  0017AC  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2159  0017B0  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2160  0017B4  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2161  0017B8  C018  F02C         	movff	?___lwtofl,?___fldiv
  2162  0017BC  C177  F030         	movff	_doWork$2270,?___fldiv+4
  2163  0017C0  C178  F031         	movff	_doWork$2270+1,?___fldiv+5
  2164  0017C4  C179  F032         	movff	_doWork$2270+2,?___fldiv+6
  2165  0017C8  C17A  F033         	movff	_doWork$2270+3,?___fldiv+7
  2166  0017CC  EC58  F025         	call	___fldiv	;wreg free
  2167  0017D0  C02F  F19B         	movff	?___fldiv+3,doWork@temp+3
  2168  0017D4  C02E  F19A         	movff	?___fldiv+2,doWork@temp+2
  2169  0017D8  C02D  F199         	movff	?___fldiv+1,doWork@temp+1
  2170  0017DC  C02C  F198         	movff	?___fldiv,doWork@temp
  2171                           
  2172                           ;main.c: 473: temp -= 273.15;
  2173  0017E0  0E01               	movlw	high doWork@temp
  2174  0017E2  0100               	movlb	0	; () banked
  2175  0017E4  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2176  0017E6  0E98               	movlw	low doWork@temp
  2177  0017E8  6F7E               	movwf	?___asflsub& (0+255),b
  2178  0017EA  0E33               	movlw	51
  2179  0017EC  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2180  0017EE  0E93               	movlw	147
  2181  0017F0  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2182  0017F2  0E88               	movlw	136
  2183  0017F4  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2184  0017F6  0E43               	movlw	67
  2185  0017F8  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2186  0017FA  ECB6  F028         	call	___asflsub	;wreg free
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 488: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2190  0017FE  0101               	movlb	1	; () banked
  2191  001800  519C               	movf	doWork@i& (0+255),w,b
  2192  001802  0D02               	mullw	2
  2193  001804  0E00               	movlw	low _current_temp
  2194  001806  24F3               	addwf	prodl,w,c
  2195  001808  6ED9               	movwf	fsr2l,c
  2196  00180A  0E01               	movlw	high _current_temp
  2197  00180C  20F4               	addwfc	prodh,w,c
  2198  00180E  6EDA               	movwf	fsr2h,c
  2199  001810  CFDE F0A4          	movff	postinc2,??_doWork
  2200  001814  CFDD F0A5          	movff	postdec2,??_doWork+1
  2201  001818  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2202  00181C  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2203  001820  0E00               	movlw	0
  2204  001822  0100               	movlb	0	; () banked
  2205  001824  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2206  001826  0EFF               	movlw	255
  2207  001828  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2208  00182A  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2209  00182C  0101               	movlb	1	; () banked
  2210  00182E  519C               	movf	doWork@i& (0+255),w,b
  2211  001830  EC98  F029         	call	_getCalibrationValue
  2212  001834  C012  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2213  001838  C013  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2214  00183C  0E00               	movlw	0
  2215  00183E  0100               	movlb	0	; () banked
  2216  001840  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2217  001842  0EFF               	movlw	255
  2218  001844  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2219  001846  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2220  001848  6B64               	clrf	(?___flmul+4)& (0+255),b
  2221  00184A  6B65               	clrf	(?___flmul+5)& (0+255),b
  2222  00184C  0EC8               	movlw	200
  2223  00184E  6F66               	movwf	(?___flmul+6)& (0+255),b
  2224  001850  0E42               	movlw	66
  2225  001852  6F67               	movwf	(?___flmul+7)& (0+255),b
  2226  001854  C198  F060         	movff	doWork@temp,?___flmul
  2227  001858  C199  F061         	movff	doWork@temp+1,?___flmul+1
  2228  00185C  C19A  F062         	movff	doWork@temp+2,?___flmul+2
  2229  001860  C19B  F063         	movff	doWork@temp+3,?___flmul+3
  2230  001864  ECBC  F022         	call	___flmul	;wreg free
  2231  001868  C063  F079         	movff	?___flmul+3,?___fltol+3
  2232  00186C  C062  F078         	movff	?___flmul+2,?___fltol+2
  2233  001870  C061  F077         	movff	?___flmul+1,?___fltol+1
  2234  001874  C060  F076         	movff	?___flmul,?___fltol
  2235  001878  EC4E  F026         	call	___fltol	;wreg free
  2236  00187C  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2237  00187E  2576               	addwf	?___fltol& (0+255),w,b
  2238  001880  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2239  001882  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2240  001884  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2241  001886  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2242  001888  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2243  00188A  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2244  00188C  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2245  00188E  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2246  001890  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2247  001892  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2248  001894  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2249  001896  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2250  001898  6F7C               	movwf	?___aldiv& (0+255),b
  2251  00189A  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2252  00189C  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2253  00189E  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2254  0018A0  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2255  0018A2  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2256  0018A4  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2257  0018A6  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2258  0018A8  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2259  0018AA  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2260  0018AC  0E02               	movlw	2
  2261  0018AE  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2262  0018B0  0E00               	movlw	0
  2263  0018B2  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2264  0018B4  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2265  0018B6  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2266  0018B8  EC49  F024         	call	___aldiv	;wreg free
  2267  0018BC  0101               	movlb	1	; () banked
  2268  0018BE  519C               	movf	doWork@i& (0+255),w,b
  2269  0018C0  0D02               	mullw	2
  2270  0018C2  0E00               	movlw	low _current_temp
  2271  0018C4  24F3               	addwf	prodl,w,c
  2272  0018C6  6ED9               	movwf	fsr2l,c
  2273  0018C8  0E01               	movlw	high _current_temp
  2274  0018CA  20F4               	addwfc	prodh,w,c
  2275  0018CC  6EDA               	movwf	fsr2h,c
  2276  0018CE  C07C  FFDE         	movff	?___aldiv,postinc2
  2277  0018D2  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;main.c: 509: }
  2281                           ;main.c: 511: if (current_temp[ i ] <
  2282                           ;main.c: 512: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2283                           ;main.c: 513: readEEPROM(2 * i + 0x80))) {
  2284                           
  2285                           ;main.c: 490: }
  2286  0018D6  519C               	movf	doWork@i& (0+255),w,b
  2287  0018D8  0D02               	mullw	2
  2288  0018DA  0E7F               	movlw	127
  2289  0018DC  24F3               	addwf	prodl,w,c
  2290  0018DE  6E0E               	movwf	?_readEEPROM,c
  2291  0018E0  0E00               	movlw	0
  2292  0018E2  20F4               	addwfc	prodh,w,c
  2293  0018E4  6E0F               	movwf	?_readEEPROM+1,c
  2294  0018E6  EC9D  F02C         	call	_readEEPROM	;wreg free
  2295  0018EA  0100               	movlb	0	; () banked
  2296  0018EC  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2297  0018EE  6BA4               	clrf	??_doWork& (0+255),b
  2298  0018F0  0101               	movlb	1	; () banked
  2299  0018F2  519C               	movf	doWork@i& (0+255),w,b
  2300  0018F4  0D02               	mullw	2
  2301  0018F6  0E80               	movlw	128
  2302  0018F8  24F3               	addwf	prodl,w,c
  2303  0018FA  6E0E               	movwf	?_readEEPROM,c
  2304  0018FC  0E00               	movlw	0
  2305  0018FE  20F4               	addwfc	prodh,w,c
  2306  001900  6E0F               	movwf	?_readEEPROM+1,c
  2307  001902  EC9D  F02C         	call	_readEEPROM	;wreg free
  2308  001906  0100               	movlb	0	; () banked
  2309  001908  27A4               	addwf	??_doWork& (0+255),f,b
  2310  00190A  0E00               	movlw	0
  2311  00190C  23A5               	addwfc	(??_doWork+1)& (0+255),f,b
  2312  00190E  0101               	movlb	1	; () banked
  2313  001910  519C               	movf	doWork@i& (0+255),w,b
  2314  001912  0D02               	mullw	2
  2315  001914  0E00               	movlw	low _current_temp
  2316  001916  24F3               	addwf	prodl,w,c
  2317  001918  6ED9               	movwf	fsr2l,c
  2318  00191A  0E01               	movlw	high _current_temp
  2319  00191C  20F4               	addwfc	prodh,w,c
  2320  00191E  6EDA               	movwf	fsr2h,c
  2321  001920  CFDE F0A6          	movff	postinc2,??_doWork+2
  2322  001924  CFDD F0A7          	movff	postdec2,??_doWork+3
  2323  001928  0100               	movlb	0	; () banked
  2324  00192A  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2325  00192C  0A80               	xorlw	128
  2326  00192E  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2327  001930  51A4               	movf	??_doWork& (0+255),w,b
  2328  001932  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  2329  001934  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2330  001936  0A80               	xorlw	128
  2331  001938  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  2332  00193A  E23E               	bc	l201
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;main.c: 515: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2336  00193C  90D8               	bcf	status,0,c
  2337  00193E  0101               	movlb	1	; () banked
  2338  001940  359C               	rlcf	doWork@i& (0+255),w,b
  2339  001942  0100               	movlb	0	; () banked
  2340  001944  6FA4               	movwf	??_doWork& (0+255),b
  2341  001946  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2342  001948  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2343  00194A  0E7F               	movlw	127
  2344  00194C  25A4               	addwf	??_doWork& (0+255),w,b
  2345  00194E  6E0E               	movwf	?_writeEEPROM,c
  2346  001950  0E00               	movlw	0
  2347  001952  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2348  001954  6E0F               	movwf	?_writeEEPROM+1,c
  2349  001956  0101               	movlb	1	; () banked
  2350  001958  519C               	movf	doWork@i& (0+255),w,b
  2351  00195A  0D02               	mullw	2
  2352  00195C  0E00               	movlw	low _current_temp
  2353  00195E  24F3               	addwf	prodl,w,c
  2354  001960  6ED9               	movwf	fsr2l,c
  2355  001962  0E01               	movlw	high _current_temp
  2356  001964  20F4               	addwfc	prodh,w,c
  2357  001966  6EDA               	movwf	fsr2h,c
  2358  001968  CFDE F0A6          	movff	postinc2,??_doWork+2
  2359  00196C  CFDD F0A7          	movff	postdec2,??_doWork+3
  2360  001970  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  2361  001974  0100               	movlb	0	; () banked
  2362  001976  6BA7               	clrf	(??_doWork+3)& (0+255),b
  2363  001978  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  2364  00197A  69A7               	setf	(??_doWork+3)& (0+255),b
  2365  00197C  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2366  00197E  6E10               	movwf	?_writeEEPROM+2,c
  2367  001980  EC9A  F02B         	call	_writeEEPROM	;wreg free
  2368                           
  2369                           ;main.c: 516: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2370  001984  90D8               	bcf	status,0,c
  2371  001986  0101               	movlb	1	; () banked
  2372  001988  359C               	rlcf	doWork@i& (0+255),w,b
  2373  00198A  0100               	movlb	0	; () banked
  2374  00198C  6FA4               	movwf	??_doWork& (0+255),b
  2375  00198E  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2376  001990  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2377  001992  0E80               	movlw	128
  2378  001994  25A4               	addwf	??_doWork& (0+255),w,b
  2379  001996  6E0E               	movwf	?_writeEEPROM,c
  2380  001998  0E00               	movlw	0
  2381  00199A  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2382  00199C  6E0F               	movwf	?_writeEEPROM+1,c
  2383  00199E  0101               	movlb	1	; () banked
  2384  0019A0  519C               	movf	doWork@i& (0+255),w,b
  2385  0019A2  0D02               	mullw	2
  2386  0019A4  0E00               	movlw	low _current_temp
  2387  0019A6  24F3               	addwf	prodl,w,c
  2388  0019A8  6ED9               	movwf	fsr2l,c
  2389  0019AA  0E01               	movlw	high _current_temp
  2390  0019AC  20F4               	addwfc	prodh,w,c
  2391  0019AE  6EDA               	movwf	fsr2h,c
  2392  0019B0  50DF               	movf	indf2,w,c
  2393  0019B2  6E10               	movwf	?_writeEEPROM+2,c
  2394  0019B4  EC9A  F02B         	call	_writeEEPROM	;wreg free
  2395  0019B8                     l201:
  2396                           
  2397                           ;main.c: 517: }
  2398                           ;main.c: 520: if (current_temp[ i ] >
  2399                           ;main.c: 521: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2400                           ;main.c: 522: readEEPROM(2 * i + 0x8C))) {
  2401  0019B8  0101               	movlb	1	; () banked
  2402  0019BA  519C               	movf	doWork@i& (0+255),w,b
  2403  0019BC  0D02               	mullw	2
  2404  0019BE  0E00               	movlw	low _current_temp
  2405  0019C0  24F3               	addwf	prodl,w,c
  2406  0019C2  6ED9               	movwf	fsr2l,c
  2407  0019C4  0E01               	movlw	high _current_temp
  2408  0019C6  20F4               	addwfc	prodh,w,c
  2409  0019C8  6EDA               	movwf	fsr2h,c
  2410  0019CA  CFDE F0A4          	movff	postinc2,??_doWork
  2411  0019CE  CFDD F0A5          	movff	postdec2,??_doWork+1
  2412  0019D2  519C               	movf	doWork@i& (0+255),w,b
  2413  0019D4  0D02               	mullw	2
  2414  0019D6  0E8B               	movlw	139
  2415  0019D8  24F3               	addwf	prodl,w,c
  2416  0019DA  6E0E               	movwf	?_readEEPROM,c
  2417  0019DC  0E00               	movlw	0
  2418  0019DE  20F4               	addwfc	prodh,w,c
  2419  0019E0  6E0F               	movwf	?_readEEPROM+1,c
  2420  0019E2  EC9D  F02C         	call	_readEEPROM	;wreg free
  2421  0019E6  0100               	movlb	0	; () banked
  2422  0019E8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2423  0019EA  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2424  0019EC  0101               	movlb	1	; () banked
  2425  0019EE  519C               	movf	doWork@i& (0+255),w,b
  2426  0019F0  0D02               	mullw	2
  2427  0019F2  0E8C               	movlw	140
  2428  0019F4  24F3               	addwf	prodl,w,c
  2429  0019F6  6E0E               	movwf	?_readEEPROM,c
  2430  0019F8  0E00               	movlw	0
  2431  0019FA  20F4               	addwfc	prodh,w,c
  2432  0019FC  6E0F               	movwf	?_readEEPROM+1,c
  2433  0019FE  EC9D  F02C         	call	_readEEPROM	;wreg free
  2434  001A02  0100               	movlb	0	; () banked
  2435  001A04  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2436  001A06  0E00               	movlw	0
  2437  001A08  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2438  001A0A  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2439  001A0C  0A80               	xorlw	128
  2440  001A0E  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2441  001A10  51A4               	movf	??_doWork& (0+255),w,b
  2442  001A12  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  2443  001A14  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2444  001A16  0A80               	xorlw	128
  2445  001A18  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  2446  001A1A  E23E               	bc	l12056
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;main.c: 524: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2450  001A1C  90D8               	bcf	status,0,c
  2451  001A1E  0101               	movlb	1	; () banked
  2452  001A20  359C               	rlcf	doWork@i& (0+255),w,b
  2453  001A22  0100               	movlb	0	; () banked
  2454  001A24  6FA4               	movwf	??_doWork& (0+255),b
  2455  001A26  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2456  001A28  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2457  001A2A  0E8B               	movlw	139
  2458  001A2C  25A4               	addwf	??_doWork& (0+255),w,b
  2459  001A2E  6E0E               	movwf	?_writeEEPROM,c
  2460  001A30  0E00               	movlw	0
  2461  001A32  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2462  001A34  6E0F               	movwf	?_writeEEPROM+1,c
  2463  001A36  0101               	movlb	1	; () banked
  2464  001A38  519C               	movf	doWork@i& (0+255),w,b
  2465  001A3A  0D02               	mullw	2
  2466  001A3C  0E00               	movlw	low _current_temp
  2467  001A3E  24F3               	addwf	prodl,w,c
  2468  001A40  6ED9               	movwf	fsr2l,c
  2469  001A42  0E01               	movlw	high _current_temp
  2470  001A44  20F4               	addwfc	prodh,w,c
  2471  001A46  6EDA               	movwf	fsr2h,c
  2472  001A48  CFDE F0A6          	movff	postinc2,??_doWork+2
  2473  001A4C  CFDD F0A7          	movff	postdec2,??_doWork+3
  2474  001A50  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  2475  001A54  0100               	movlb	0	; () banked
  2476  001A56  6BA7               	clrf	(??_doWork+3)& (0+255),b
  2477  001A58  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  2478  001A5A  69A7               	setf	(??_doWork+3)& (0+255),b
  2479  001A5C  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2480  001A5E  6E10               	movwf	?_writeEEPROM+2,c
  2481  001A60  EC9A  F02B         	call	_writeEEPROM	;wreg free
  2482                           
  2483                           ;main.c: 525: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2484  001A64  90D8               	bcf	status,0,c
  2485  001A66  0101               	movlb	1	; () banked
  2486  001A68  359C               	rlcf	doWork@i& (0+255),w,b
  2487  001A6A  0100               	movlb	0	; () banked
  2488  001A6C  6FA4               	movwf	??_doWork& (0+255),b
  2489  001A6E  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2490  001A70  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2491  001A72  0E8C               	movlw	140
  2492  001A74  25A4               	addwf	??_doWork& (0+255),w,b
  2493  001A76  6E0E               	movwf	?_writeEEPROM,c
  2494  001A78  0E00               	movlw	0
  2495  001A7A  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2496  001A7C  6E0F               	movwf	?_writeEEPROM+1,c
  2497  001A7E  0101               	movlb	1	; () banked
  2498  001A80  519C               	movf	doWork@i& (0+255),w,b
  2499  001A82  0D02               	mullw	2
  2500  001A84  0E00               	movlw	low _current_temp
  2501  001A86  24F3               	addwf	prodl,w,c
  2502  001A88  6ED9               	movwf	fsr2l,c
  2503  001A8A  0E01               	movlw	high _current_temp
  2504  001A8C  20F4               	addwfc	prodh,w,c
  2505  001A8E  6EDA               	movwf	fsr2h,c
  2506  001A90  50DF               	movf	indf2,w,c
  2507  001A92  6E10               	movwf	?_writeEEPROM+2,c
  2508  001A94  EC9A  F02B         	call	_writeEEPROM	;wreg free
  2509  001A98                     l12056:
  2510                           
  2511                           ;main.c: 526: }
  2512                           ;main.c: 529: adc_conversion_flags &= ~(1 << i);
  2513  001A98  C19C  F0A4         	movff	doWork@i,??_doWork
  2514  001A9C  0E01               	movlw	1
  2515  001A9E  0100               	movlb	0	; () banked
  2516  001AA0  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2517  001AA2  2BA4               	incf	??_doWork& (0+255),f,b
  2518  001AA4  D002               	goto	u10464
  2519  001AA6                     u10465:
  2520  001AA6  90D8               	bcf	status,0,c
  2521  001AA8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2522  001AAA                     u10464:
  2523  001AAA  2FA4               	decfsz	??_doWork& (0+255),f,b
  2524  001AAC  D7FC               	goto	u10465
  2525  001AAE  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2526  001AB0  17B3               	andwf	_adc_conversion_flags& (0+255),f,b
  2527  001AB2                     l12058:
  2528                           
  2529                           ; BSR set to: 0
  2530  001AB2  0101               	movlb	1	; () banked
  2531  001AB4  2B9C               	incf	doWork@i& (0+255),f,b
  2532                           
  2533                           ; BSR set to: 1
  2534  001AB6  0E05               	movlw	5
  2535  001AB8  659C               	cpfsgt	doWork@i& (0+255),b
  2536  001ABA  D512               	goto	l11998
  2537                           
  2538                           ; BSR set to: 1
  2539                           ;main.c: 531: }
  2540                           ;main.c: 532: }
  2541                           ;main.c: 535: if (0x03 == vscp_node_state) {
  2542  001ABC  0100               	movlb	0	; () banked
  2543  001ABE  51BA               	movf	_vscp_node_state& (0+255),w,b
  2544  001AC0  0A03               	xorlw	3
  2545  001AC2  E001 D244          	bnz	l224
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;main.c: 538: for (i = 0; i < 6; i++) {
  2549  001AC6  0101               	movlb	1	; () banked
  2550  001AC8  6B9C               	clrf	doWork@i& (0+255),b
  2551  001ACA                     l12070:
  2552                           
  2553                           ; BSR set to: 1
  2554                           ;main.c: 541: if (low_alarm & 1 << i) {
  2555  001ACA  C19C  F0A4         	movff	doWork@i,??_doWork
  2556  001ACE  0E01               	movlw	1
  2557  001AD0  0100               	movlb	0	; () banked
  2558  001AD2  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2559  001AD4  2BA4               	incf	??_doWork& (0+255),f,b
  2560  001AD6  D002               	goto	u10494
  2561  001AD8                     u10495:
  2562  001AD8  90D8               	bcf	status,0,c
  2563  001ADA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2564  001ADC                     u10494:
  2565  001ADC  2FA4               	decfsz	??_doWork& (0+255),f,b
  2566  001ADE  D7FC               	goto	u10495
  2567  001AE0  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2568  001AE2  15B5               	andwf	_low_alarm& (0+255),w,b
  2569  001AE4  E063               	bz	l12078
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 544: setpoint =
  2573                           ;main.c: 545: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2574                           ;main.c: 546: readEEPROM(2 * i + 0x5C) +
  2575                           ;main.c: 547: readEEPROM(i + 0x97)*100);
  2576  001AE6  90D8               	bcf	status,0,c
  2577  001AE8  0101               	movlb	1	; () banked
  2578  001AEA  359C               	rlcf	doWork@i& (0+255),w,b
  2579  001AEC  0100               	movlb	0	; () banked
  2580  001AEE  6FA4               	movwf	??_doWork& (0+255),b
  2581  001AF0  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2582  001AF2  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2583  001AF4  0E5C               	movlw	92
  2584  001AF6  25A4               	addwf	??_doWork& (0+255),w,b
  2585  001AF8  6E0E               	movwf	?_readEEPROM,c
  2586  001AFA  0E00               	movlw	0
  2587  001AFC  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2588  001AFE  6E0F               	movwf	?_readEEPROM+1,c
  2589  001B00  EC9D  F02C         	call	_readEEPROM	;wreg free
  2590  001B04  0100               	movlb	0	; () banked
  2591  001B06  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2592  001B08  90D8               	bcf	status,0,c
  2593  001B0A  0101               	movlb	1	; () banked
  2594  001B0C  359C               	rlcf	doWork@i& (0+255),w,b
  2595  001B0E  0100               	movlb	0	; () banked
  2596  001B10  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2597  001B12  6BA8               	clrf	(??_doWork+4)& (0+255),b
  2598  001B14  37A8               	rlcf	(??_doWork+4)& (0+255),f,b
  2599  001B16  0E5B               	movlw	91
  2600  001B18  25A7               	addwf	(??_doWork+3)& (0+255),w,b
  2601  001B1A  6E0E               	movwf	?_readEEPROM,c
  2602  001B1C  0E00               	movlw	0
  2603  001B1E  21A8               	addwfc	(??_doWork+4)& (0+255),w,b
  2604  001B20  6E0F               	movwf	?_readEEPROM+1,c
  2605  001B22  EC9D  F02C         	call	_readEEPROM	;wreg free
  2606  001B26  0100               	movlb	0	; () banked
  2607  001B28  6FAA               	movwf	(??_doWork+6)& (0+255),b
  2608  001B2A  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2609  001B2C  0E97               	movlw	151
  2610  001B2E  0101               	movlb	1	; () banked
  2611  001B30  259C               	addwf	doWork@i& (0+255),w,b
  2612  001B32  6E0E               	movwf	?_readEEPROM,c
  2613  001B34  6A0F               	clrf	?_readEEPROM+1,c
  2614  001B36  0E00               	movlw	0
  2615  001B38  220F               	addwfc	?_readEEPROM+1,f,c
  2616  001B3A  EC9D  F02C         	call	_readEEPROM	;wreg free
  2617  001B3E  0D64               	mullw	100
  2618  001B40  0100               	movlb	0	; () banked
  2619  001B42  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2620  001B44  24F3               	addwf	prodl,w,c
  2621  001B46  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2622  001B48  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2623  001B4A  20F4               	addwfc	prodh,w,c
  2624  001B4C  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2625  001B4E  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2626  001B50  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2627  001B52  0101               	movlb	1	; () banked
  2628  001B54  6F96               	movwf	doWork@setpoint& (0+255),b
  2629  001B56  0100               	movlb	0	; () banked
  2630  001B58  0E00               	movlw	0
  2631  001B5A  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2632  001B5C  0101               	movlb	1	; () banked
  2633  001B5E  6F97               	movwf	(doWork@setpoint+1)& (0+255),b
  2634                           
  2635                           ; BSR set to: 1
  2636                           ;main.c: 552: if (current_temp[ i ] > setpoint) {
  2637  001B60  519C               	movf	doWork@i& (0+255),w,b
  2638  001B62  0D02               	mullw	2
  2639  001B64  0E00               	movlw	low _current_temp
  2640  001B66  24F3               	addwf	prodl,w,c
  2641  001B68  6ED9               	movwf	fsr2l,c
  2642  001B6A  0E01               	movlw	high _current_temp
  2643  001B6C  20F4               	addwfc	prodh,w,c
  2644  001B6E  6EDA               	movwf	fsr2h,c
  2645  001B70  CFDE F0A4          	movff	postinc2,??_doWork
  2646  001B74  CFDD F0A5          	movff	postdec2,??_doWork+1
  2647  001B78  5197               	movf	(doWork@setpoint+1)& (0+255),w,b
  2648  001B7A  0A80               	xorlw	128
  2649  001B7C  0100               	movlb	0	; () banked
  2650  001B7E  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2651  001B80  51A4               	movf	??_doWork& (0+255),w,b
  2652  001B82  0101               	movlb	1	; () banked
  2653  001B84  5D96               	subwf	doWork@setpoint& (0+255),w,b
  2654  001B86  0100               	movlb	0	; () banked
  2655  001B88  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2656  001B8A  0A80               	xorlw	128
  2657  001B8C  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  2658  001B8E  E301 D0BA          	bc	l208
  2659  001B92                     l12076:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 555: low_alarm &= ~(1 << i);
  2663  001B92  C19C  F0A4         	movff	doWork@i,??_doWork
  2664  001B96  0E01               	movlw	1
  2665  001B98  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2666  001B9A  2BA4               	incf	??_doWork& (0+255),f,b
  2667  001B9C  D002               	goto	u10524
  2668  001B9E                     u10525:
  2669  001B9E  90D8               	bcf	status,0,c
  2670  001BA0  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2671  001BA2                     u10524:
  2672  001BA2  2FA4               	decfsz	??_doWork& (0+255),f,b
  2673  001BA4  D7FC               	goto	u10525
  2674  001BA6  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2675  001BA8  17B5               	andwf	_low_alarm& (0+255),f,b
  2676  001BAA  D0AD               	goto	l208
  2677  001BAC                     l12078:
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 560: else {
  2681                           ;main.c: 564: setpoint =
  2682                           ;main.c: 565: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2683                           ;main.c: 566: readEEPROM(2 * i + 0x5C));
  2684  001BAC  0101               	movlb	1	; () banked
  2685  001BAE  519C               	movf	doWork@i& (0+255),w,b
  2686  001BB0  0D02               	mullw	2
  2687  001BB2  0E5C               	movlw	92
  2688  001BB4  24F3               	addwf	prodl,w,c
  2689  001BB6  6E0E               	movwf	?_readEEPROM,c
  2690  001BB8  0E00               	movlw	0
  2691  001BBA  20F4               	addwfc	prodh,w,c
  2692  001BBC  6E0F               	movwf	?_readEEPROM+1,c
  2693  001BBE  EC9D  F02C         	call	_readEEPROM	;wreg free
  2694  001BC2  0100               	movlb	0	; () banked
  2695  001BC4  6FA4               	movwf	??_doWork& (0+255),b
  2696  001BC6  0101               	movlb	1	; () banked
  2697  001BC8  519C               	movf	doWork@i& (0+255),w,b
  2698  001BCA  0D02               	mullw	2
  2699  001BCC  0E5B               	movlw	91
  2700  001BCE  24F3               	addwf	prodl,w,c
  2701  001BD0  6E0E               	movwf	?_readEEPROM,c
  2702  001BD2  0E00               	movlw	0
  2703  001BD4  20F4               	addwfc	prodh,w,c
  2704  001BD6  6E0F               	movwf	?_readEEPROM+1,c
  2705  001BD8  EC9D  F02C         	call	_readEEPROM	;wreg free
  2706  001BDC  0100               	movlb	0	; () banked
  2707  001BDE  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2708  001BE0  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2709  001BE2  51A4               	movf	??_doWork& (0+255),w,b
  2710  001BE4  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  2711  001BE6  0101               	movlb	1	; () banked
  2712  001BE8  6F96               	movwf	doWork@setpoint& (0+255),b
  2713  001BEA  0100               	movlb	0	; () banked
  2714  001BEC  0E00               	movlw	0
  2715  001BEE  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  2716  001BF0  0101               	movlb	1	; () banked
  2717  001BF2  6F97               	movwf	(doWork@setpoint+1)& (0+255),b
  2718                           
  2719                           ; BSR set to: 1
  2720                           ;main.c: 568: if (current_temp[ i ] < setpoint) {
  2721  001BF4  519C               	movf	doWork@i& (0+255),w,b
  2722  001BF6  0D02               	mullw	2
  2723  001BF8  0E00               	movlw	low _current_temp
  2724  001BFA  24F3               	addwf	prodl,w,c
  2725  001BFC  6ED9               	movwf	fsr2l,c
  2726  001BFE  0E01               	movlw	high _current_temp
  2727  001C00  20F4               	addwfc	prodh,w,c
  2728  001C02  6EDA               	movwf	fsr2h,c
  2729  001C04  CFDE F0A4          	movff	postinc2,??_doWork
  2730  001C08  CFDD F0A5          	movff	postdec2,??_doWork+1
  2731  001C0C  0100               	movlb	0	; () banked
  2732  001C0E  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2733  001C10  0A80               	xorlw	128
  2734  001C12  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2735  001C14  0101               	movlb	1	; () banked
  2736  001C16  5196               	movf	doWork@setpoint& (0+255),w,b
  2737  001C18  0100               	movlb	0	; () banked
  2738  001C1A  5DA4               	subwf	??_doWork& (0+255),w,b
  2739  001C1C  0101               	movlb	1	; () banked
  2740  001C1E  5197               	movf	(doWork@setpoint+1)& (0+255),w,b
  2741  001C20  0A80               	xorlw	128
  2742  001C22  0100               	movlb	0	; () banked
  2743  001C24  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  2744  001C26  E26F               	bc	l208
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;main.c: 571: low_alarm |= (1 << i);
  2748  001C28  C19C  F0A4         	movff	doWork@i,??_doWork
  2749  001C2C  0E01               	movlw	1
  2750  001C2E  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2751  001C30  2BA4               	incf	??_doWork& (0+255),f,b
  2752  001C32  D002               	goto	u10544
  2753  001C34                     u10545:
  2754  001C34  90D8               	bcf	status,0,c
  2755  001C36  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2756  001C38                     u10544:
  2757  001C38  2FA4               	decfsz	??_doWork& (0+255),f,b
  2758  001C3A  D7FC               	goto	u10545
  2759  001C3C  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2760  001C3E  13B5               	iorwf	_low_alarm& (0+255),f,b
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;main.c: 576: vscp_alarmstatus |= 1;
  2764  001C40  804C               	bsf	_vscp_alarmstatus,0,c
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;main.c: 579: if (readEEPROM(i + 0x43) & (1<<3)) {
  2768  001C42  0E43               	movlw	67
  2769  001C44  0101               	movlb	1	; () banked
  2770  001C46  259C               	addwf	doWork@i& (0+255),w,b
  2771  001C48  6E0E               	movwf	?_readEEPROM,c
  2772  001C4A  6A0F               	clrf	?_readEEPROM+1,c
  2773  001C4C  0E00               	movlw	0
  2774  001C4E  220F               	addwfc	?_readEEPROM+1,f,c
  2775  001C50  EC9D  F02C         	call	_readEEPROM	;wreg free
  2776  001C54  0100               	movlb	0	; () banked
  2777  001C56  6FA4               	movwf	??_doWork& (0+255),b
  2778  001C58  A7A4               	btfss	??_doWork& (0+255),3,b
  2779  001C5A  D055               	goto	l208
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 581: vscp_omsg.vscp_class = 1;
  2783  001C5C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2784  001C5E  0E01               	movlw	1
  2785  001C60  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2786                           
  2787                           ;main.c: 582: vscp_omsg.vscp_type = 2;
  2788  001C62  0E02               	movlw	2
  2789  001C64  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;main.c: 583: vscp_omsg.priority = 0x00;
  2793  001C66  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  2794                           
  2795                           ;main.c: 584: vscp_omsg.flags = 0x80 + 3;
  2796  001C68  0E83               	movlw	131
  2797  001C6A  6FCA               	movwf	_vscp_omsg& (0+255),b
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 587: if (readEEPROM(i + 0x43) & (1<<5)) {
  2801  001C6C  0E43               	movlw	67
  2802  001C6E  0101               	movlb	1	; () banked
  2803  001C70  259C               	addwf	doWork@i& (0+255),w,b
  2804  001C72  6E0E               	movwf	?_readEEPROM,c
  2805  001C74  6A0F               	clrf	?_readEEPROM+1,c
  2806  001C76  0E00               	movlw	0
  2807  001C78  220F               	addwfc	?_readEEPROM+1,f,c
  2808  001C7A  EC9D  F02C         	call	_readEEPROM	;wreg free
  2809  001C7E  0100               	movlb	0	; () banked
  2810  001C80  6FA4               	movwf	??_doWork& (0+255),b
  2811  001C82  ABA4               	btfss	??_doWork& (0+255),5,b
  2812  001C84  D017               	goto	l12100
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;main.c: 589: if (readEEPROM(i + 0x43) & (1<<6)) {
  2816  001C86  0E43               	movlw	67
  2817  001C88  0101               	movlb	1	; () banked
  2818  001C8A  259C               	addwf	doWork@i& (0+255),w,b
  2819  001C8C  6E0E               	movwf	?_readEEPROM,c
  2820  001C8E  6A0F               	clrf	?_readEEPROM+1,c
  2821  001C90  0E00               	movlw	0
  2822  001C92  220F               	addwfc	?_readEEPROM+1,f,c
  2823  001C94  EC9D  F02C         	call	_readEEPROM	;wreg free
  2824  001C98  0100               	movlb	0	; () banked
  2825  001C9A  6FA4               	movwf	??_doWork& (0+255),b
  2826  001C9C  ADA4               	btfss	??_doWork& (0+255),6,b
  2827  001C9E  D005               	goto	l12098
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 590: vscp_omsg.vscp_class = 30;
  2831  001CA0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2832  001CA2  0E1E               	movlw	30
  2833  001CA4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2834                           
  2835                           ;main.c: 591: vscp_omsg.vscp_type = 5;
  2836  001CA6  0E05               	movlw	5
  2837  001CA8  D004               	goto	L1
  2838  001CAA                     l12098:
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;main.c: 593: else {
  2842                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  2843  001CAA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2844  001CAC  0E1E               	movlw	30
  2845  001CAE  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2846                           
  2847                           ;main.c: 595: vscp_omsg.vscp_type = 6;
  2848  001CB0  0E06               	movlw	6
  2849  001CB2                     L1:
  2850  001CB2  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2851  001CB4                     l12100:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 596: }
  2855                           ;main.c: 598: }
  2856                           ;main.c: 600: vscp_omsg.data[ 0 ] = i;
  2857  001CB4  C19C  F0CF         	movff	doWork@i,_vscp_omsg+5
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 601: vscp_omsg.data[ 1 ] =
  2861                           ;main.c: 602: readEEPROM(2 * i + 0x73);
  2862  001CB8  90D8               	bcf	status,0,c
  2863  001CBA  0101               	movlb	1	; () banked
  2864  001CBC  359C               	rlcf	doWork@i& (0+255),w,b
  2865  001CBE  0100               	movlb	0	; () banked
  2866  001CC0  6FA4               	movwf	??_doWork& (0+255),b
  2867  001CC2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2868  001CC4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2869  001CC6  0E73               	movlw	115
  2870  001CC8  25A4               	addwf	??_doWork& (0+255),w,b
  2871  001CCA  6E0E               	movwf	?_readEEPROM,c
  2872  001CCC  0E00               	movlw	0
  2873  001CCE  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2874  001CD0  6E0F               	movwf	?_readEEPROM+1,c
  2875  001CD2  EC9D  F02C         	call	_readEEPROM	;wreg free
  2876  001CD6  0100               	movlb	0	; () banked
  2877  001CD8  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 603: vscp_omsg.data[ 2 ] =
  2881                           ;main.c: 604: readEEPROM(2 * i + 0x74);
  2882  001CDA  90D8               	bcf	status,0,c
  2883  001CDC  0101               	movlb	1	; () banked
  2884  001CDE  359C               	rlcf	doWork@i& (0+255),w,b
  2885  001CE0  0100               	movlb	0	; () banked
  2886  001CE2  6FA4               	movwf	??_doWork& (0+255),b
  2887  001CE4  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2888  001CE6  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2889  001CE8  0E74               	movlw	116
  2890  001CEA  25A4               	addwf	??_doWork& (0+255),w,b
  2891  001CEC  6E0E               	movwf	?_readEEPROM,c
  2892  001CEE  0E00               	movlw	0
  2893  001CF0  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2894  001CF2  6E0F               	movwf	?_readEEPROM+1,c
  2895  001CF4  EC9D  F02C         	call	_readEEPROM	;wreg free
  2896  001CF8  0100               	movlb	0	; () banked
  2897  001CFA  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 607: if (!vscp_sendEvent()) {
  2901  001CFC  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  2902  001D00  0900               	iorlw	0
  2903  001D02  E101 D746          	bz	l12076
  2904  001D06                     l208:
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;main.c: 611: }
  2908                           ;main.c: 612: }
  2909                           ;main.c: 613: }
  2910                           ;main.c: 614: }
  2911                           ;main.c: 617: if ( high_alarm & (1 << i ) ) {
  2912  001D06  C19C  F0A4         	movff	doWork@i,??_doWork
  2913  001D0A  0E01               	movlw	1
  2914  001D0C  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2915  001D0E  2BA4               	incf	??_doWork& (0+255),f,b
  2916  001D10  D002               	goto	u10594
  2917  001D12                     u10595:
  2918  001D12  90D8               	bcf	status,0,c
  2919  001D14  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2920  001D16                     u10594:
  2921  001D16  2FA4               	decfsz	??_doWork& (0+255),f,b
  2922  001D18  D7FC               	goto	u10595
  2923  001D1A  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2924  001D1C  15B4               	andwf	_high_alarm& (0+255),w,b
  2925  001D1E  E067               	bz	l12116
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;main.c: 621: setpoint =
  2929                           ;main.c: 622: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2930                           ;main.c: 623: readEEPROM(2 * i + 0x68) -
  2931                           ;main.c: 624: readEEPROM(i + 0x97)*100);
  2932  001D20  90D8               	bcf	status,0,c
  2933  001D22  0101               	movlb	1	; () banked
  2934  001D24  359C               	rlcf	doWork@i& (0+255),w,b
  2935  001D26  0100               	movlb	0	; () banked
  2936  001D28  6FA4               	movwf	??_doWork& (0+255),b
  2937  001D2A  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2938  001D2C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2939  001D2E  0E67               	movlw	103
  2940  001D30  25A4               	addwf	??_doWork& (0+255),w,b
  2941  001D32  6E0E               	movwf	?_readEEPROM,c
  2942  001D34  0E00               	movlw	0
  2943  001D36  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2944  001D38  6E0F               	movwf	?_readEEPROM+1,c
  2945  001D3A  EC9D  F02C         	call	_readEEPROM	;wreg free
  2946  001D3E  0100               	movlb	0	; () banked
  2947  001D40  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2948  001D42  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2949  001D44  90D8               	bcf	status,0,c
  2950  001D46  0101               	movlb	1	; () banked
  2951  001D48  359C               	rlcf	doWork@i& (0+255),w,b
  2952  001D4A  0100               	movlb	0	; () banked
  2953  001D4C  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2954  001D4E  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2955  001D50  37A9               	rlcf	(??_doWork+5)& (0+255),f,b
  2956  001D52  0E68               	movlw	104
  2957  001D54  25A8               	addwf	(??_doWork+4)& (0+255),w,b
  2958  001D56  6E0E               	movwf	?_readEEPROM,c
  2959  001D58  0E00               	movlw	0
  2960  001D5A  21A9               	addwfc	(??_doWork+5)& (0+255),w,b
  2961  001D5C  6E0F               	movwf	?_readEEPROM+1,c
  2962  001D5E  EC9D  F02C         	call	_readEEPROM	;wreg free
  2963  001D62  0100               	movlb	0	; () banked
  2964  001D64  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2965  001D66  0E00               	movlw	0
  2966  001D68  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2967  001D6A  0E97               	movlw	151
  2968  001D6C  0101               	movlb	1	; () banked
  2969  001D6E  259C               	addwf	doWork@i& (0+255),w,b
  2970  001D70  6E0E               	movwf	?_readEEPROM,c
  2971  001D72  6A0F               	clrf	?_readEEPROM+1,c
  2972  001D74  0E00               	movlw	0
  2973  001D76  220F               	addwfc	?_readEEPROM+1,f,c
  2974  001D78  EC9D  F02C         	call	_readEEPROM	;wreg free
  2975  001D7C  6E12               	movwf	?___wmul,c
  2976  001D7E  6A13               	clrf	?___wmul+1,c
  2977  001D80  6815               	setf	?___wmul+3,c
  2978  001D82  0E9C               	movlw	156
  2979  001D84  6E14               	movwf	?___wmul+2,c
  2980  001D86  EC9E  F02A         	call	___wmul	;wreg free
  2981  001D8A  5012               	movf	?___wmul,w,c
  2982  001D8C  0100               	movlb	0	; () banked
  2983  001D8E  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2984  001D90  0101               	movlb	1	; () banked
  2985  001D92  6F96               	movwf	doWork@setpoint& (0+255),b
  2986  001D94  5013               	movf	?___wmul+1,w,c
  2987  001D96  0100               	movlb	0	; () banked
  2988  001D98  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2989  001D9A  0101               	movlb	1	; () banked
  2990  001D9C  6F97               	movwf	(doWork@setpoint+1)& (0+255),b
  2991                           
  2992                           ; BSR set to: 1
  2993                           ;main.c: 627: if (current_temp[ i ] < setpoint) {
  2994  001D9E  519C               	movf	doWork@i& (0+255),w,b
  2995  001DA0  0D02               	mullw	2
  2996  001DA2  0E00               	movlw	low _current_temp
  2997  001DA4  24F3               	addwf	prodl,w,c
  2998  001DA6  6ED9               	movwf	fsr2l,c
  2999  001DA8  0E01               	movlw	high _current_temp
  3000  001DAA  20F4               	addwfc	prodh,w,c
  3001  001DAC  6EDA               	movwf	fsr2h,c
  3002  001DAE  CFDE F0A4          	movff	postinc2,??_doWork
  3003  001DB2  CFDD F0A5          	movff	postdec2,??_doWork+1
  3004  001DB6  0100               	movlb	0	; () banked
  3005  001DB8  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3006  001DBA  0A80               	xorlw	128
  3007  001DBC  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3008  001DBE  0101               	movlb	1	; () banked
  3009  001DC0  5196               	movf	doWork@setpoint& (0+255),w,b
  3010  001DC2  0100               	movlb	0	; () banked
  3011  001DC4  5DA4               	subwf	??_doWork& (0+255),w,b
  3012  001DC6  0101               	movlb	1	; () banked
  3013  001DC8  5197               	movf	(doWork@setpoint+1)& (0+255),w,b
  3014  001DCA  0A80               	xorlw	128
  3015  001DCC  0100               	movlb	0	; () banked
  3016  001DCE  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3017  001DD0  E301 D0B8          	bc	l12148
  3018  001DD4                     l12114:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;main.c: 630: high_alarm &= ~(1 << i);
  3022  001DD4  C19C  F0A4         	movff	doWork@i,??_doWork
  3023  001DD8  0E01               	movlw	1
  3024  001DDA  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3025  001DDC  2BA4               	incf	??_doWork& (0+255),f,b
  3026  001DDE  D002               	goto	u10624
  3027  001DE0                     u10625:
  3028  001DE0  90D8               	bcf	status,0,c
  3029  001DE2  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3030  001DE4                     u10624:
  3031  001DE4  2FA4               	decfsz	??_doWork& (0+255),f,b
  3032  001DE6  D7FC               	goto	u10625
  3033  001DE8  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  3034  001DEA  17B4               	andwf	_high_alarm& (0+255),f,b
  3035  001DEC  D0AB               	goto	l12148
  3036  001DEE                     l12116:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;main.c: 635: else {
  3040                           ;main.c: 640: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  3041                           ;main.c: 641: readEEPROM(2 * i + 0x68));
  3042  001DEE  0101               	movlb	1	; () banked
  3043  001DF0  519C               	movf	doWork@i& (0+255),w,b
  3044  001DF2  0D02               	mullw	2
  3045  001DF4  0E68               	movlw	104
  3046  001DF6  24F3               	addwf	prodl,w,c
  3047  001DF8  6E0E               	movwf	?_readEEPROM,c
  3048  001DFA  0E00               	movlw	0
  3049  001DFC  20F4               	addwfc	prodh,w,c
  3050  001DFE  6E0F               	movwf	?_readEEPROM+1,c
  3051  001E00  EC9D  F02C         	call	_readEEPROM	;wreg free
  3052  001E04  0100               	movlb	0	; () banked
  3053  001E06  6FA4               	movwf	??_doWork& (0+255),b
  3054  001E08  0101               	movlb	1	; () banked
  3055  001E0A  519C               	movf	doWork@i& (0+255),w,b
  3056  001E0C  0D02               	mullw	2
  3057  001E0E  0E67               	movlw	103
  3058  001E10  24F3               	addwf	prodl,w,c
  3059  001E12  6E0E               	movwf	?_readEEPROM,c
  3060  001E14  0E00               	movlw	0
  3061  001E16  20F4               	addwfc	prodh,w,c
  3062  001E18  6E0F               	movwf	?_readEEPROM+1,c
  3063  001E1A  EC9D  F02C         	call	_readEEPROM	;wreg free
  3064  001E1E  0100               	movlb	0	; () banked
  3065  001E20  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3066  001E22  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3067  001E24  51A4               	movf	??_doWork& (0+255),w,b
  3068  001E26  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  3069  001E28  0101               	movlb	1	; () banked
  3070  001E2A  6F96               	movwf	doWork@setpoint& (0+255),b
  3071  001E2C  0100               	movlb	0	; () banked
  3072  001E2E  0E00               	movlw	0
  3073  001E30  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  3074  001E32  0101               	movlb	1	; () banked
  3075  001E34  6F97               	movwf	(doWork@setpoint+1)& (0+255),b
  3076                           
  3077                           ; BSR set to: 1
  3078                           ;main.c: 643: if (current_temp[ i ] > setpoint) {
  3079  001E36  519C               	movf	doWork@i& (0+255),w,b
  3080  001E38  0D02               	mullw	2
  3081  001E3A  0E00               	movlw	low _current_temp
  3082  001E3C  24F3               	addwf	prodl,w,c
  3083  001E3E  6ED9               	movwf	fsr2l,c
  3084  001E40  0E01               	movlw	high _current_temp
  3085  001E42  20F4               	addwfc	prodh,w,c
  3086  001E44  6EDA               	movwf	fsr2h,c
  3087  001E46  CFDE F0A4          	movff	postinc2,??_doWork
  3088  001E4A  CFDD F0A5          	movff	postdec2,??_doWork+1
  3089  001E4E  5197               	movf	(doWork@setpoint+1)& (0+255),w,b
  3090  001E50  0A80               	xorlw	128
  3091  001E52  0100               	movlb	0	; () banked
  3092  001E54  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3093  001E56  51A4               	movf	??_doWork& (0+255),w,b
  3094  001E58  0101               	movlb	1	; () banked
  3095  001E5A  5D96               	subwf	doWork@setpoint& (0+255),w,b
  3096  001E5C  0100               	movlb	0	; () banked
  3097  001E5E  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3098  001E60  0A80               	xorlw	128
  3099  001E62  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3100  001E64  E26F               	bc	l12148
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;main.c: 646: high_alarm |= (1 << i);
  3104  001E66  C19C  F0A4         	movff	doWork@i,??_doWork
  3105  001E6A  0E01               	movlw	1
  3106  001E6C  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3107  001E6E  2BA4               	incf	??_doWork& (0+255),f,b
  3108  001E70  D002               	goto	u10644
  3109  001E72                     u10645:
  3110  001E72  90D8               	bcf	status,0,c
  3111  001E74  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3112  001E76                     u10644:
  3113  001E76  2FA4               	decfsz	??_doWork& (0+255),f,b
  3114  001E78  D7FC               	goto	u10645
  3115  001E7A  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3116  001E7C  13B4               	iorwf	_high_alarm& (0+255),f,b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;main.c: 652: vscp_alarmstatus |= 2;
  3120  001E7E  824C               	bsf	_vscp_alarmstatus,1,c
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;main.c: 655: if (readEEPROM(i + 0x43) & (1<<4)) {
  3124  001E80  0E43               	movlw	67
  3125  001E82  0101               	movlb	1	; () banked
  3126  001E84  259C               	addwf	doWork@i& (0+255),w,b
  3127  001E86  6E0E               	movwf	?_readEEPROM,c
  3128  001E88  6A0F               	clrf	?_readEEPROM+1,c
  3129  001E8A  0E00               	movlw	0
  3130  001E8C  220F               	addwfc	?_readEEPROM+1,f,c
  3131  001E8E  EC9D  F02C         	call	_readEEPROM	;wreg free
  3132  001E92  0100               	movlb	0	; () banked
  3133  001E94  6FA4               	movwf	??_doWork& (0+255),b
  3134  001E96  A9A4               	btfss	??_doWork& (0+255),4,b
  3135  001E98  D055               	goto	l12148
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;main.c: 657: vscp_omsg.vscp_class = 1;
  3139  001E9A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3140  001E9C  0E01               	movlw	1
  3141  001E9E  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3142                           
  3143                           ;main.c: 658: vscp_omsg.vscp_type = 2;
  3144  001EA0  0E02               	movlw	2
  3145  001EA2  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;main.c: 659: vscp_omsg.priority = 0x00;
  3149  001EA4  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  3150                           
  3151                           ;main.c: 660: vscp_omsg.flags = 0x80 + 3;
  3152  001EA6  0E83               	movlw	131
  3153  001EA8  6FCA               	movwf	_vscp_omsg& (0+255),b
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;main.c: 662: if (readEEPROM(i + 0x43) & (1<<5)) {
  3157  001EAA  0E43               	movlw	67
  3158  001EAC  0101               	movlb	1	; () banked
  3159  001EAE  259C               	addwf	doWork@i& (0+255),w,b
  3160  001EB0  6E0E               	movwf	?_readEEPROM,c
  3161  001EB2  6A0F               	clrf	?_readEEPROM+1,c
  3162  001EB4  0E00               	movlw	0
  3163  001EB6  220F               	addwfc	?_readEEPROM+1,f,c
  3164  001EB8  EC9D  F02C         	call	_readEEPROM	;wreg free
  3165  001EBC  0100               	movlb	0	; () banked
  3166  001EBE  6FA4               	movwf	??_doWork& (0+255),b
  3167  001EC0  ABA4               	btfss	??_doWork& (0+255),5,b
  3168  001EC2  D017               	goto	l12138
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;main.c: 663: if (readEEPROM(i + 0x43) & (1<<6)) {
  3172  001EC4  0E43               	movlw	67
  3173  001EC6  0101               	movlb	1	; () banked
  3174  001EC8  259C               	addwf	doWork@i& (0+255),w,b
  3175  001ECA  6E0E               	movwf	?_readEEPROM,c
  3176  001ECC  6A0F               	clrf	?_readEEPROM+1,c
  3177  001ECE  0E00               	movlw	0
  3178  001ED0  220F               	addwfc	?_readEEPROM+1,f,c
  3179  001ED2  EC9D  F02C         	call	_readEEPROM	;wreg free
  3180  001ED6  0100               	movlb	0	; () banked
  3181  001ED8  6FA4               	movwf	??_doWork& (0+255),b
  3182  001EDA  ADA4               	btfss	??_doWork& (0+255),6,b
  3183  001EDC  D005               	goto	l12136
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;main.c: 664: vscp_omsg.vscp_class = 30;
  3187  001EDE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3188  001EE0  0E1E               	movlw	30
  3189  001EE2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3190                           
  3191                           ;main.c: 665: vscp_omsg.vscp_type = 6;
  3192  001EE4  0E06               	movlw	6
  3193  001EE6  D004               	goto	L2
  3194  001EE8                     l12136:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 667: vscp_omsg.vscp_class = 30;
  3198  001EE8  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3199  001EEA  0E1E               	movlw	30
  3200  001EEC  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3201                           
  3202                           ;main.c: 668: vscp_omsg.vscp_type = 5;
  3203  001EEE  0E05               	movlw	5
  3204  001EF0                     L2:
  3205  001EF0  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3206  001EF2                     l12138:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 669: }
  3210                           ;main.c: 670: }
  3211                           ;main.c: 672: vscp_omsg.data[ 0 ] = i;
  3212  001EF2  C19C  F0CF         	movff	doWork@i,_vscp_omsg+5
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;main.c: 673: vscp_omsg.data[ 1 ] =
  3216                           ;main.c: 674: readEEPROM(2 * i +
  3217                           ;main.c: 675: 0x73);
  3218  001EF6  90D8               	bcf	status,0,c
  3219  001EF8  0101               	movlb	1	; () banked
  3220  001EFA  359C               	rlcf	doWork@i& (0+255),w,b
  3221  001EFC  0100               	movlb	0	; () banked
  3222  001EFE  6FA4               	movwf	??_doWork& (0+255),b
  3223  001F00  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3224  001F02  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3225  001F04  0E73               	movlw	115
  3226  001F06  25A4               	addwf	??_doWork& (0+255),w,b
  3227  001F08  6E0E               	movwf	?_readEEPROM,c
  3228  001F0A  0E00               	movlw	0
  3229  001F0C  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3230  001F0E  6E0F               	movwf	?_readEEPROM+1,c
  3231  001F10  EC9D  F02C         	call	_readEEPROM	;wreg free
  3232  001F14  0100               	movlb	0	; () banked
  3233  001F16  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;main.c: 676: vscp_omsg.data[ 2 ] =
  3237                           ;main.c: 677: readEEPROM(2 * i +
  3238                           ;main.c: 678: 0x74);
  3239  001F18  90D8               	bcf	status,0,c
  3240  001F1A  0101               	movlb	1	; () banked
  3241  001F1C  359C               	rlcf	doWork@i& (0+255),w,b
  3242  001F1E  0100               	movlb	0	; () banked
  3243  001F20  6FA4               	movwf	??_doWork& (0+255),b
  3244  001F22  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3245  001F24  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3246  001F26  0E74               	movlw	116
  3247  001F28  25A4               	addwf	??_doWork& (0+255),w,b
  3248  001F2A  6E0E               	movwf	?_readEEPROM,c
  3249  001F2C  0E00               	movlw	0
  3250  001F2E  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3251  001F30  6E0F               	movwf	?_readEEPROM+1,c
  3252  001F32  EC9D  F02C         	call	_readEEPROM	;wreg free
  3253  001F36  0100               	movlb	0	; () banked
  3254  001F38  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 681: if (!vscp_sendEvent()) {
  3258  001F3A  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  3259  001F3E  0900               	iorlw	0
  3260  001F40  E101 D748          	bz	l12114
  3261  001F44                     l12148:
  3262                           
  3263                           ; BSR set to: 0
  3264  001F44  0101               	movlb	1	; () banked
  3265  001F46  2B9C               	incf	doWork@i& (0+255),f,b
  3266  001F48  0E05               	movlw	5
  3267  001F4A  659C               	cpfsgt	doWork@i& (0+255),b
  3268  001F4C  D5BE               	goto	l12070
  3269  001F4E                     l224:
  3270  001F4E  0012               	return	
  3271  001F50                     __end_of_doWork:
  3272                           	opt stack 0
  3273                           tblptru	equ	0xFF8
  3274                           prodh	equ	0xFF4
  3275                           prodl	equ	0xFF3
  3276                           postinc0	equ	0xFEE
  3277                           wreg	equ	0xFE8
  3278                           postdec1	equ	0xFE5
  3279                           fsr1h	equ	0xFE2
  3280                           fsr1l	equ	0xFE1
  3281                           indf2	equ	0xFDF
  3282                           postinc2	equ	0xFDE
  3283                           postdec2	equ	0xFDD
  3284                           fsr2h	equ	0xFDA
  3285                           fsr2l	equ	0xFD9
  3286                           status	equ	0xFD8
  3287                           
  3288 ;; *************** function ___lwtofl *****************
  3289 ;; Defined at:
  3290 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  c               2   23[COMRAM] unsigned int 
  3293 ;; Auto vars:     Size  Location     Type
  3294 ;;		None
  3295 ;; Return value:  Size  Location     Type
  3296 ;;                  4   23[COMRAM] unsigned int 
  3297 ;; Registers used:
  3298 ;;		wreg, status,2, status,0, cstack
  3299 ;; Tracked objects:
  3300 ;;		On entry : 0/0
  3301 ;;		On exit  : 0/0
  3302 ;;		Unchanged: 0/0
  3303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3304 ;;      Params:         4       0       0       0       0       0       0
  3305 ;;      Locals:         0       0       0       0       0       0       0
  3306 ;;      Temps:          0       0       0       0       0       0       0
  3307 ;;      Totals:         4       0       0       0       0       0       0
  3308 ;;Total ram usage:        4 bytes
  3309 ;; Hardware stack levels used:    1
  3310 ;; Hardware stack levels required when called:    3
  3311 ;; This function calls:
  3312 ;;		___flpack
  3313 ;; This function is called by:
  3314 ;;		_doWork
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text2
  3319  005640                     __ptext2:
  3320                           	opt stack 0
  3321  005640                     ___lwtofl:
  3322                           	opt stack 26
  3323                           
  3324                           ;incstack = 0
  3325                           ;incstack = 0
  3326  005640  C018  F00E         	movff	___lwtofl@c,?___flpack
  3327  005644  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3328  005648  6A10               	clrf	?___flpack+2,c
  3329  00564A  6A11               	clrf	?___flpack+3,c
  3330  00564C  0E96               	movlw	150
  3331  00564E  6E12               	movwf	?___flpack+4,c
  3332  005650  0E00               	movlw	0
  3333  005652  6A13               	clrf	?___flpack+5,c
  3334  005654  ECE9  F023         	call	___flpack	;wreg free
  3335  005658  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3336  00565C  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3337  005660  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3338  005664  C00E  F018         	movff	?___flpack,?___lwtofl
  3339  005668  0012               	return	
  3340  00566A                     __end_of___lwtofl:
  3341                           	opt stack 0
  3342                           tblptru	equ	0xFF8
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           fsr1h	equ	0xFE2
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           postinc2	equ	0xFDE
  3352                           postdec2	equ	0xFDD
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function ___asfldiv *****************
  3358 ;; Defined at:
  3359 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  f1p             2    0[BANK0 ] PTR 
  3362 ;;		 -> doWork@avarage(4), 
  3363 ;;  f2              4    2[BANK0 ] PTR 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;		None
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  4    0[BANK0 ] PTR 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : F/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3375 ;;      Params:         0       6       0       0       0       0       0
  3376 ;;      Locals:         0       0       0       0       0       0       0
  3377 ;;      Temps:          0       0       0       0       0       0       0
  3378 ;;      Totals:         0       6       0       0       0       0       0
  3379 ;;Total ram usage:        6 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    4
  3382 ;; This function calls:
  3383 ;;		___fldiv
  3384 ;; This function is called by:
  3385 ;;		_doWork
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           	psect	text3
  3390  005252                     __ptext3:
  3391                           	opt stack 0
  3392  005252                     ___asfldiv:
  3393                           	opt stack 25
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;	Return value of ___asfldiv is never used
  3397                           
  3398                           ;incstack = 0
  3399                           ;incstack = 0
  3400  005252  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3401  005256  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3402  00525A  CFDE F02C          	movff	postinc2,?___fldiv
  3403  00525E  CFDE F02D          	movff	postinc2,?___fldiv+1
  3404  005262  CFDE F02E          	movff	postinc2,?___fldiv+2
  3405  005266  CFDE F02F          	movff	postinc2,?___fldiv+3
  3406  00526A  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  3407  00526E  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  3408  005272  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  3409  005276  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  3410  00527A  EC58  F025         	call	___fldiv	;wreg free
  3411  00527E  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3412  005282  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3413  005286  C02C  FFDE         	movff	?___fldiv,postinc2
  3414  00528A  C02D  FFDE         	movff	?___fldiv+1,postinc2
  3415  00528E  C02E  FFDE         	movff	?___fldiv+2,postinc2
  3416  005292  C02F  FFDD         	movff	?___fldiv+3,postdec2
  3417  005296  06D9               	decf	fsr2l,f,c
  3418  005298  06D9               	decf	fsr2l,f,c
  3419  00529A  0012               	return	
  3420  00529C                     __end_of___asfldiv:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           prodh	equ	0xFF4
  3424                           prodl	equ	0xFF3
  3425                           postinc0	equ	0xFEE
  3426                           wreg	equ	0xFE8
  3427                           postdec1	equ	0xFE5
  3428                           fsr1h	equ	0xFE2
  3429                           fsr1l	equ	0xFE1
  3430                           indf2	equ	0xFDF
  3431                           postinc2	equ	0xFDE
  3432                           postdec2	equ	0xFDD
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function ___asfladd *****************
  3438 ;; Defined at:
  3439 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  f1p             2   43[COMRAM] PTR 
  3442 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3443 ;;  f2              4   45[COMRAM] PTR 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  4   43[COMRAM] PTR 
  3448 ;; Registers used:
  3449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3455 ;;      Params:         6       0       0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0
  3458 ;;      Totals:         6       0       0       0       0       0       0
  3459 ;;Total ram usage:        6 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    4
  3462 ;; This function calls:
  3463 ;;		___fladd
  3464 ;; This function is called by:
  3465 ;;		_doWork
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text4
  3470  00529C                     __ptext4:
  3471                           	opt stack 0
  3472  00529C                     ___asfladd:
  3473                           	opt stack 25
  3474                           
  3475                           ;	Return value of ___asfladd is never used
  3476                           
  3477                           ;incstack = 0
  3478                           ;incstack = 0
  3479  00529C  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3480  0052A0  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3481  0052A4  CFDE F01D          	movff	postinc2,?___fladd
  3482  0052A8  CFDE F01E          	movff	postinc2,?___fladd+1
  3483  0052AC  CFDE F01F          	movff	postinc2,?___fladd+2
  3484  0052B0  CFDE F020          	movff	postinc2,?___fladd+3
  3485  0052B4  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  3486  0052B8  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  3487  0052BC  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  3488  0052C0  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  3489  0052C4  EC62  F01F         	call	___fladd	;wreg free
  3490  0052C8  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3491  0052CC  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3492  0052D0  C01D  FFDE         	movff	?___fladd,postinc2
  3493  0052D4  C01E  FFDE         	movff	?___fladd+1,postinc2
  3494  0052D8  C01F  FFDE         	movff	?___fladd+2,postinc2
  3495  0052DC  C020  FFDD         	movff	?___fladd+3,postdec2
  3496  0052E0  06D9               	decf	fsr2l,f,c
  3497  0052E2  06D9               	decf	fsr2l,f,c
  3498  0052E4  0012               	return	
  3499  0052E6                     __end_of___asfladd:
  3500                           	opt stack 0
  3501                           tblptru	equ	0xFF8
  3502                           prodh	equ	0xFF4
  3503                           prodl	equ	0xFF3
  3504                           postinc0	equ	0xFEE
  3505                           wreg	equ	0xFE8
  3506                           postdec1	equ	0xFE5
  3507                           fsr1h	equ	0xFE2
  3508                           fsr1l	equ	0xFE1
  3509                           indf2	equ	0xFDF
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function ___aldiv *****************
  3517 ;; Defined at:
  3518 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  dividend        4   28[BANK0 ] long 
  3521 ;;  divisor         4   32[BANK0 ] long 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  quotient        4   38[BANK0 ] long 
  3524 ;;  sign            1   37[BANK0 ] unsigned char 
  3525 ;;  counter         1   36[BANK0 ] unsigned char 
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  4   28[BANK0 ] long 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0
  3530 ;; Tracked objects:
  3531 ;;		On entry : F/0
  3532 ;;		On exit  : F/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3535 ;;      Params:         0       8       0       0       0       0       0
  3536 ;;      Locals:         0       6       0       0       0       0       0
  3537 ;;      Temps:          0       0       0       0       0       0       0
  3538 ;;      Totals:         0      14       0       0       0       0       0
  3539 ;;Total ram usage:       14 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; Hardware stack levels required when called:    2
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_doWork
  3546 ;; This function uses a non-reentrant model
  3547 ;;
  3548                           
  3549                           	psect	text5
  3550  004892                     __ptext5:
  3551                           	opt stack 0
  3552  004892                     ___aldiv:
  3553                           	opt stack 27
  3554                           
  3555                           ; BSR set to: 0
  3556                           
  3557                           ;incstack = 0
  3558                           ;incstack = 0
  3559  004892  6B85               	clrf	___aldiv@sign& (0+255),b
  3560  004894  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3561  004896  D00A               	goto	l11422
  3562                           
  3563                           ; BSR set to: 0
  3564  004898  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3565  00489A  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3566  00489C  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3567  00489E  6D80               	negf	___aldiv@divisor& (0+255),b
  3568  0048A0  0E00               	movlw	0
  3569  0048A2  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3570  0048A4  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3571  0048A6  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3572                           
  3573                           ; BSR set to: 0
  3574  0048A8  0E01               	movlw	1
  3575  0048AA  6F85               	movwf	___aldiv@sign& (0+255),b
  3576  0048AC                     l11422:
  3577                           
  3578                           ; BSR set to: 0
  3579  0048AC  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3580  0048AE  D00A               	goto	l11428
  3581                           
  3582                           ; BSR set to: 0
  3583  0048B0  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3584  0048B2  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3585  0048B4  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3586  0048B6  6D7C               	negf	___aldiv@dividend& (0+255),b
  3587  0048B8  0E00               	movlw	0
  3588  0048BA  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3589  0048BC  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3590  0048BE  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3591                           
  3592                           ; BSR set to: 0
  3593  0048C0  0E01               	movlw	1
  3594  0048C2  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  3595  0048C4                     l11428:
  3596                           
  3597                           ; BSR set to: 0
  3598  0048C4  6B86               	clrf	___aldiv@quotient& (0+255),b
  3599  0048C6  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  3600  0048C8  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  3601  0048CA  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604  0048CC  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3605  0048CE  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  3606  0048D0  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3607  0048D2  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3608  0048D4  E029               	bz	l11450
  3609                           
  3610                           ; BSR set to: 0
  3611  0048D6  0E01               	movlw	1
  3612  0048D8  6F84               	movwf	___aldiv@counter& (0+255),b
  3613  0048DA  D006               	goto	l11436
  3614  0048DC                     l11434:
  3615                           
  3616                           ; BSR set to: 0
  3617  0048DC  90D8               	bcf	status,0,c
  3618  0048DE  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  3619  0048E0  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3620  0048E2  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3621  0048E4  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3622  0048E6  2B84               	incf	___aldiv@counter& (0+255),f,b
  3623  0048E8                     l11436:
  3624                           
  3625                           ; BSR set to: 0
  3626  0048E8  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3627  0048EA  D7F8               	goto	l11434
  3628  0048EC                     l11438:
  3629                           
  3630                           ; BSR set to: 0
  3631  0048EC  90D8               	bcf	status,0,c
  3632  0048EE  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  3633  0048F0  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3634  0048F2  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3635  0048F4  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3636                           
  3637                           ; BSR set to: 0
  3638  0048F6  5180               	movf	___aldiv@divisor& (0+255),w,b
  3639  0048F8  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  3640  0048FA  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3641  0048FC  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3642  0048FE  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3643  004900  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3644  004902  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3645  004904  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3646  004906  E309               	bnc	l11446
  3647                           
  3648                           ; BSR set to: 0
  3649  004908  5180               	movf	___aldiv@divisor& (0+255),w,b
  3650  00490A  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  3651  00490C  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3652  00490E  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3653  004910  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3654  004912  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3655  004914  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3656  004916  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3657                           
  3658                           ; BSR set to: 0
  3659  004918  8186               	bsf	___aldiv@quotient& (0+255),0,b
  3660  00491A                     l11446:
  3661                           
  3662                           ; BSR set to: 0
  3663  00491A  90D8               	bcf	status,0,c
  3664  00491C  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3665  00491E  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3666  004920  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3667  004922  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  3668                           
  3669                           ; BSR set to: 0
  3670  004924  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  3671  004926  D7E2               	goto	l11438
  3672  004928                     l11450:
  3673                           
  3674                           ; BSR set to: 0
  3675  004928  5185               	movf	___aldiv@sign& (0+255),w,b
  3676  00492A  E008               	bz	l11454
  3677                           
  3678                           ; BSR set to: 0
  3679  00492C  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3680  00492E  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3681  004930  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3682  004932  6D86               	negf	___aldiv@quotient& (0+255),b
  3683  004934  0E00               	movlw	0
  3684  004936  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3685  004938  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3686  00493A  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3687  00493C                     l11454:
  3688                           
  3689                           ; BSR set to: 0
  3690  00493C  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  3691  004940  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  3692  004944  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  3693  004948  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  3694                           
  3695                           ; BSR set to: 0
  3696  00494C  0012               	return	
  3697  00494E                     __end_of___aldiv:
  3698                           	opt stack 0
  3699                           tblptru	equ	0xFF8
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           postinc0	equ	0xFEE
  3703                           wreg	equ	0xFE8
  3704                           postdec1	equ	0xFE5
  3705                           fsr1h	equ	0xFE2
  3706                           fsr1l	equ	0xFE1
  3707                           indf2	equ	0xFDF
  3708                           postinc2	equ	0xFDE
  3709                           postdec2	equ	0xFDD
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _getCalibrationValue *****************
  3715 ;; Defined at:
  3716 ;;		line 868 in file "../main.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  i               1    wreg     unsigned char 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  i               1   24[COMRAM] unsigned char 
  3721 ;;  cal             2   22[COMRAM] short 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  2   17[COMRAM] short 
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : F/1
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3731 ;;      Params:         2       0       0       0       0       0       0
  3732 ;;      Locals:         3       0       0       0       0       0       0
  3733 ;;      Temps:          3       0       0       0       0       0       0
  3734 ;;      Totals:         8       0       0       0       0       0       0
  3735 ;;Total ram usage:        8 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    3
  3738 ;; This function calls:
  3739 ;;		_readEEPROM
  3740 ;; This function is called by:
  3741 ;;		_doWork
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           	psect	text6
  3746  005330                     __ptext6:
  3747                           	opt stack 0
  3748  005330                     _getCalibrationValue:
  3749                           	opt stack 26
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;incstack = 0
  3753                           ;incstack = 0
  3754                           ;getCalibrationValue@i stored from wreg
  3755  005330  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3756                           
  3757                           ; BSR set to: 1
  3758                           ;main.c: 869: int16_t cal;
  3759                           ;main.c: 871: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3760                           ;main.c: 872: readEEPROM(2 * i + 0x9F);
  3761  005334  5019               	movf	getCalibrationValue@i,w,c
  3762  005336  0D02               	mullw	2
  3763  005338  0E9F               	movlw	159
  3764  00533A  24F3               	addwf	prodl,w,c
  3765  00533C  6E0E               	movwf	?_readEEPROM,c
  3766  00533E  0E00               	movlw	0
  3767  005340  20F4               	addwfc	prodh,w,c
  3768  005342  6E0F               	movwf	?_readEEPROM+1,c
  3769  005344  EC9D  F02C         	call	_readEEPROM	;wreg free
  3770  005348  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3771  00534A  5019               	movf	getCalibrationValue@i,w,c
  3772  00534C  0D02               	mullw	2
  3773  00534E  0E9E               	movlw	158
  3774  005350  24F3               	addwf	prodl,w,c
  3775  005352  6E0E               	movwf	?_readEEPROM,c
  3776  005354  0E00               	movlw	0
  3777  005356  20F4               	addwfc	prodh,w,c
  3778  005358  6E0F               	movwf	?_readEEPROM+1,c
  3779  00535A  EC9D  F02C         	call	_readEEPROM	;wreg free
  3780  00535E  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3781  005360  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3782  005362  5014               	movf	??_getCalibrationValue,w,c
  3783  005364  2415               	addwf	??_getCalibrationValue+1,w,c
  3784  005366  6E17               	movwf	getCalibrationValue@cal,c
  3785  005368  0E00               	movlw	0
  3786  00536A  2016               	addwfc	??_getCalibrationValue+2,w,c
  3787  00536C  6E18               	movwf	getCalibrationValue@cal+1,c
  3788                           
  3789                           ;main.c: 874: return cal;
  3790  00536E  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3791  005372  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3792  005376  0012               	return	
  3793  005378                     __end_of_getCalibrationValue:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           prodh	equ	0xFF4
  3797                           prodl	equ	0xFF3
  3798                           postinc0	equ	0xFEE
  3799                           wreg	equ	0xFE8
  3800                           postdec1	equ	0xFE5
  3801                           fsr1h	equ	0xFE2
  3802                           fsr1l	equ	0xFE1
  3803                           indf2	equ	0xFDF
  3804                           postinc2	equ	0xFDE
  3805                           postdec2	equ	0xFDD
  3806                           fsr2h	equ	0xFDA
  3807                           fsr2l	equ	0xFD9
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _log *****************
  3811 ;; Defined at:
  3812 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  x               4   33[BANK0 ] short 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  exponent        2   66[COMRAM] int 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  4   33[BANK0 ] int 
  3819 ;; Registers used:
  3820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/1
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3826 ;;      Params:         0       4       0       0       0       0       0
  3827 ;;      Locals:         2       0       0       0       0       0       0
  3828 ;;      Temps:          0       0       0       0       0       0       0
  3829 ;;      Totals:         2       4       0       0       0       0       0
  3830 ;;Total ram usage:        6 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    5
  3833 ;; This function calls:
  3834 ;;		___fladd
  3835 ;;		___flmul
  3836 ;;		___awtofl
  3837 ;;		_eval_poly
  3838 ;;		_frexp
  3839 ;; This function is called by:
  3840 ;;		_doWork
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text7
  3845  004174                     __ptext7:
  3846                           	opt stack 0
  3847  004174                     _log:
  3848                           	opt stack 24
  3849                           
  3850                           ;incstack = 0
  3851                           ;incstack = 0
  3852  004174  0100               	movlb	0	; () banked
  3853  004176  BF84               	btfsc	(log@x+3)& (0+255),7,b
  3854  004178  D007               	goto	u8790
  3855                           
  3856                           ; BSR set to: 0
  3857                           
  3858                           ; BSR set to: 0
  3859  00417A  EE20  F081         	lfsr	2,log@x
  3860  00417E  50DE               	movf	postinc2,w,c
  3861  004180  10DE               	iorwf	postinc2,w,c
  3862  004182  10DE               	iorwf	postinc2,w,c
  3863  004184  10DE               	iorwf	postinc2,w,c
  3864  004186  E105               	bnz	l10424
  3865  004188                     u8790:
  3866                           
  3867                           ; BSR set to: 0
  3868  004188  6B81               	clrf	?_log& (0+255),b
  3869  00418A  6B82               	clrf	(?_log+1)& (0+255),b
  3870  00418C  6B83               	clrf	(?_log+2)& (0+255),b
  3871  00418E  6B84               	clrf	(?_log+3)& (0+255),b
  3872  004190  D087               	goto	l1845
  3873  004192                     l10424:
  3874                           
  3875                           ; BSR set to: 0
  3876  004192  6B64               	clrf	(?___flmul+4)& (0+255),b
  3877  004194  6B65               	clrf	(?___flmul+5)& (0+255),b
  3878  004196  6B66               	clrf	(?___flmul+6)& (0+255),b
  3879  004198  0E40               	movlw	64
  3880  00419A  6F67               	movwf	(?___flmul+7)& (0+255),b
  3881  00419C  0E43               	movlw	low log@exponent
  3882  00419E  6E12               	movwf	?_frexp+4,c
  3883  0041A0  0E00               	movlw	high log@exponent
  3884  0041A2  6E13               	movwf	?_frexp+5,c
  3885  0041A4  0E0F               	movlw	15
  3886  0041A6  6E13               	movwf	?_frexp+5,c
  3887  0041A8  0E5F               	movlw	__accesstop+-1
  3888  0041AA  6412               	cpfsgt	?_frexp+4,c
  3889  0041AC  6A13               	clrf	?_frexp+5,c
  3890  0041AE  C081  F00E         	movff	log@x,?_frexp
  3891  0041B2  C082  F00F         	movff	log@x+1,?_frexp+1
  3892  0041B6  C083  F010         	movff	log@x+2,?_frexp+2
  3893  0041BA  C084  F011         	movff	log@x+3,?_frexp+3
  3894  0041BE  ECE8  F026         	call	_frexp	;wreg free
  3895  0041C2  C011  F063         	movff	?_frexp+3,?___flmul+3
  3896  0041C6  C010  F062         	movff	?_frexp+2,?___flmul+2
  3897  0041CA  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3898  0041CE  C00E  F060         	movff	?_frexp,?___flmul
  3899  0041D2  ECBC  F022         	call	___flmul	;wreg free
  3900  0041D6  C063  F020         	movff	?___flmul+3,?___fladd+3
  3901  0041DA  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3902  0041DE  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3903  0041E2  C060  F01D         	movff	?___flmul,?___fladd
  3904  0041E6  6A21               	clrf	?___fladd+4,c
  3905  0041E8  6A22               	clrf	?___fladd+5,c
  3906  0041EA  0E80               	movlw	128
  3907  0041EC  6E23               	movwf	?___fladd+6,c
  3908  0041EE  0EBF               	movlw	191
  3909  0041F0  6E24               	movwf	?___fladd+7,c
  3910  0041F2  EC62  F01F         	call	___fladd	;wreg free
  3911  0041F6  C020  F084         	movff	?___fladd+3,log@x+3
  3912  0041FA  C01F  F083         	movff	?___fladd+2,log@x+2
  3913  0041FE  C01E  F082         	movff	?___fladd+1,log@x+1
  3914  004202  C01D  F081         	movff	?___fladd,log@x
  3915  004206  0643               	decf	log@exponent,f,c
  3916  004208  A0D8               	btfss	status,0,c
  3917  00420A  0644               	decf	log@exponent+1,f,c
  3918  00420C  C081  F076         	movff	log@x,?_eval_poly
  3919  004210  C082  F077         	movff	log@x+1,?_eval_poly+1
  3920  004214  C083  F078         	movff	log@x+2,?_eval_poly+2
  3921  004218  C084  F079         	movff	log@x+3,?_eval_poly+3
  3922  00421C  0E48               	movlw	low log@coeff
  3923  00421E  0100               	movlb	0	; () banked
  3924  004220  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3925  004222  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3926  004224  0E08               	movlw	8
  3927  004226  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3928  004228  EC89  F023         	call	_eval_poly	;wreg free
  3929  00422C  C079  F084         	movff	?_eval_poly+3,log@x+3
  3930  004230  C078  F083         	movff	?_eval_poly+2,log@x+2
  3931  004234  C077  F082         	movff	?_eval_poly+1,log@x+1
  3932  004238  C076  F081         	movff	?_eval_poly,log@x
  3933                           
  3934                           ; BSR set to: 0
  3935  00423C  0E18               	movlw	24
  3936  00423E  6F64               	movwf	(?___flmul+4)& (0+255),b
  3937  004240  0E72               	movlw	114
  3938  004242  6F65               	movwf	(?___flmul+5)& (0+255),b
  3939  004244  0E31               	movlw	49
  3940  004246  6F66               	movwf	(?___flmul+6)& (0+255),b
  3941  004248  0E3F               	movlw	63
  3942  00424A  6F67               	movwf	(?___flmul+7)& (0+255),b
  3943  00424C  C043  F018         	movff	log@exponent,?___awtofl
  3944  004250  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3945  004254  ECBB  F02A         	call	___awtofl	;wreg free
  3946  004258  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3947  00425C  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3948  004260  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3949  004264  C018  F060         	movff	?___awtofl,?___flmul
  3950  004268  ECBC  F022         	call	___flmul	;wreg free
  3951  00426C  C063  F020         	movff	?___flmul+3,?___fladd+3
  3952  004270  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3953  004274  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3954  004278  C060  F01D         	movff	?___flmul,?___fladd
  3955  00427C  C081  F021         	movff	log@x,?___fladd+4
  3956  004280  C082  F022         	movff	log@x+1,?___fladd+5
  3957  004284  C083  F023         	movff	log@x+2,?___fladd+6
  3958  004288  C084  F024         	movff	log@x+3,?___fladd+7
  3959  00428C  EC62  F01F         	call	___fladd	;wreg free
  3960  004290  C020  F084         	movff	?___fladd+3,?_log+3
  3961  004294  C01F  F083         	movff	?___fladd+2,?_log+2
  3962  004298  C01E  F082         	movff	?___fladd+1,?_log+1
  3963  00429C  C01D  F081         	movff	?___fladd,?_log
  3964  0042A0                     l1845:
  3965  0042A0  0012               	return	
  3966  0042A2                     __end_of_log:
  3967                           	opt stack 0
  3968                           tblptru	equ	0xFF8
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           postdec1	equ	0xFE5
  3974                           fsr1h	equ	0xFE2
  3975                           fsr1l	equ	0xFE1
  3976                           indf2	equ	0xFDF
  3977                           postinc2	equ	0xFDE
  3978                           postdec2	equ	0xFDD
  3979                           fsr2h	equ	0xFDA
  3980                           fsr2l	equ	0xFD9
  3981                           status	equ	0xFD8
  3982                           
  3983 ;; *************** function _exp *****************
  3984 ;; Defined at:
  3985 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  x               4   57[BANK0 ] int 
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;  exponent        2   65[BANK0 ] int 
  3990 ;;  sign            1   67[BANK0 ] unsigned char 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  4   57[BANK0 ] unsigned char 
  3993 ;; Registers used:
  3994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/1
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4000 ;;      Params:         0       4       0       0       0       0       0
  4001 ;;      Locals:         0       7       0       0       0       0       0
  4002 ;;      Temps:          0       0       0       0       0       0       0
  4003 ;;      Totals:         0      11       0       0       0       0       0
  4004 ;;Total ram usage:       11 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    6
  4007 ;; This function calls:
  4008 ;;		___fldiv
  4009 ;;		___asflmul
  4010 ;;		___asflsub
  4011 ;;		___awtofl
  4012 ;;		_floor
  4013 ;;		_eval_poly
  4014 ;;		_ldexp
  4015 ;;		___flge
  4016 ;;		___flneg
  4017 ;;		___fltol
  4018 ;; This function is called by:
  4019 ;;		_doWork
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text8
  4024  00384A                     __ptext8:
  4025                           	opt stack 0
  4026  00384A                     _exp:
  4027                           	opt stack 23
  4028                           
  4029                           ;incstack = 0
  4030                           ;incstack = 0
  4031  00384A  0100               	movlb	0	; () banked
  4032  00384C  EE20  F099         	lfsr	2,exp@x
  4033  003850  50DE               	movf	postinc2,w,c
  4034  003852  10DE               	iorwf	postinc2,w,c
  4035  003854  10DE               	iorwf	postinc2,w,c
  4036  003856  10DE               	iorwf	postinc2,w,c
  4037  003858  E107               	bnz	l10386
  4038                           
  4039                           ; BSR set to: 0
  4040  00385A  0E00               	movlw	0
  4041  00385C  6F99               	movwf	?_exp& (0+255),b
  4042  00385E  6F9A               	movwf	(?_exp+1)& (0+255),b
  4043  003860  0E80               	movlw	128
  4044  003862  6F9B               	movwf	(?_exp+2)& (0+255),b
  4045  003864  0E3F               	movlw	63
  4046  003866  D018               	goto	L3
  4047  003868                     l10386:
  4048                           
  4049                           ; BSR set to: 0
  4050  003868  0E18               	movlw	24
  4051  00386A  6E0E               	movwf	?___flge,c
  4052  00386C  0E72               	movlw	114
  4053  00386E  6E0F               	movwf	?___flge+1,c
  4054  003870  0E31               	movlw	49
  4055  003872  6E10               	movwf	?___flge+2,c
  4056  003874  0E44               	movlw	68
  4057  003876  6E11               	movwf	?___flge+3,c
  4058  003878  C099  F012         	movff	exp@x,?___flge+4
  4059  00387C  C09A  F013         	movff	exp@x+1,?___flge+5
  4060  003880  C09B  F014         	movff	exp@x+2,?___flge+6
  4061  003884  C09C  F015         	movff	exp@x+3,?___flge+7
  4062  003888  ECDD  F028         	call	___flge	;wreg free
  4063  00388C  E207               	bc	l10392
  4064  00388E  0100               	movlb	0	; () banked
  4065  003890  6999               	setf	?_exp& (0+255),b
  4066  003892  699A               	setf	(?_exp+1)& (0+255),b
  4067  003894  0E7F               	movlw	127
  4068  003896  6F9B               	movwf	(?_exp+2)& (0+255),b
  4069  003898                     L3:
  4070  003898  6F9C               	movwf	(?_exp+3)& (0+255),b
  4071  00389A  D0C8               	goto	l1553
  4072  00389C                     l10392:
  4073  00389C  C099  F00E         	movff	exp@x,?___flge
  4074  0038A0  C09A  F00F         	movff	exp@x+1,?___flge+1
  4075  0038A4  C09B  F010         	movff	exp@x+2,?___flge+2
  4076  0038A8  C09C  F011         	movff	exp@x+3,?___flge+3
  4077  0038AC  0E87               	movlw	135
  4078  0038AE  6E12               	movwf	?___flge+4,c
  4079  0038B0  0E48               	movlw	72
  4080  0038B2  6E13               	movwf	?___flge+5,c
  4081  0038B4  0E3A               	movlw	58
  4082  0038B6  6E14               	movwf	?___flge+6,c
  4083  0038B8  0EC4               	movlw	196
  4084  0038BA  6E15               	movwf	?___flge+7,c
  4085  0038BC  ECDD  F028         	call	___flge	;wreg free
  4086  0038C0  E202               	bc	l10396
  4087  0038C2  0100               	movlb	0	; () banked
  4088  0038C4  D08D               	goto	u8770
  4089  0038C6                     l10396:
  4090  0038C6  0100               	movlb	0	; () banked
  4091  0038C8  0E01               	movlw	1
  4092  0038CA  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  4093  0038CC  0E00               	movlw	0
  4094  0038CE  6FA3               	movwf	exp@sign& (0+255),b
  4095  0038D0  51A3               	movf	exp@sign& (0+255),w,b
  4096  0038D2  E012               	bz	l1556
  4097                           
  4098                           ; BSR set to: 0
  4099  0038D4  C099  F00E         	movff	exp@x,?___flneg
  4100  0038D8  C09A  F00F         	movff	exp@x+1,?___flneg+1
  4101  0038DC  C09B  F010         	movff	exp@x+2,?___flneg+2
  4102  0038E0  C09C  F011         	movff	exp@x+3,?___flneg+3
  4103  0038E4  ECAD  F02B         	call	___flneg	;wreg free
  4104  0038E8  C011  F09C         	movff	?___flneg+3,exp@x+3
  4105  0038EC  C010  F09B         	movff	?___flneg+2,exp@x+2
  4106  0038F0  C00F  F09A         	movff	?___flneg+1,exp@x+1
  4107  0038F4  C00E  F099         	movff	?___flneg,exp@x
  4108  0038F8                     l1556:
  4109                           
  4110                           ; BSR set to: 0
  4111  0038F8  0E3B               	movlw	59
  4112  0038FA  6F76               	movwf	?___asflmul& (0+255),b
  4113  0038FC  0EAA               	movlw	170
  4114  0038FE  6F77               	movwf	(?___asflmul+1)& (0+255),b
  4115  003900  0EB8               	movlw	184
  4116  003902  6F78               	movwf	(?___asflmul+2)& (0+255),b
  4117  003904  0E3F               	movlw	63
  4118  003906  6F79               	movwf	(?___asflmul+3)& (0+255),b
  4119  003908  0E99               	movlw	exp@x& (0+255)
  4120  00390A  EC03  F029         	call	___asflmul
  4121  00390E  C099  F08F         	movff	exp@x,?_floor
  4122  003912  C09A  F090         	movff	exp@x+1,?_floor+1
  4123  003916  C09B  F091         	movff	exp@x+2,?_floor+2
  4124  00391A  C09C  F092         	movff	exp@x+3,?_floor+3
  4125  00391E  EC51  F021         	call	_floor	;wreg free
  4126  003922  C092  F0A0         	movff	?_floor+3,_exp$2274+3
  4127  003926  C091  F09F         	movff	?_floor+2,_exp$2274+2
  4128  00392A  C090  F09E         	movff	?_floor+1,_exp$2274+1
  4129  00392E  C08F  F09D         	movff	?_floor,_exp$2274
  4130  003932  C09D  F076         	movff	_exp$2274,?___fltol
  4131  003936  C09E  F077         	movff	_exp$2274+1,?___fltol+1
  4132  00393A  C09F  F078         	movff	_exp$2274+2,?___fltol+2
  4133  00393E  C0A0  F079         	movff	_exp$2274+3,?___fltol+3
  4134  003942  EC4E  F026         	call	___fltol	;wreg free
  4135  003946  C076  F0A1         	movff	?___fltol,exp@exponent
  4136  00394A  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  4137                           
  4138                           ; BSR set to: 0
  4139  00394E  0E00               	movlw	high exp@x
  4140  003950  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  4141  003952  0E99               	movlw	low exp@x
  4142  003954  6F7E               	movwf	?___asflsub& (0+255),b
  4143  003956  C0A1  F018         	movff	exp@exponent,?___awtofl
  4144  00395A  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  4145  00395E  ECBB  F02A         	call	___awtofl	;wreg free
  4146  003962  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  4147  003966  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  4148  00396A  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  4149  00396E  C018  F080         	movff	?___awtofl,?___asflsub+2
  4150  003972  ECB6  F028         	call	___asflsub	;wreg free
  4151                           
  4152                           ; BSR set to: 0
  4153  003976  C099  F076         	movff	exp@x,?_eval_poly
  4154  00397A  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  4155  00397E  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  4156  003982  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  4157  003986  0E20               	movlw	low exp@coeff
  4158  003988  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  4159  00398A  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  4160  00398C  0E09               	movlw	9
  4161  00398E  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  4162  003990  EC89  F023         	call	_eval_poly	;wreg free
  4163  003994  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  4164  003998  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  4165  00399C  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  4166  0039A0  C076  F081         	movff	?_eval_poly,?_ldexp
  4167  0039A4  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  4168  0039A8  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  4169  0039AC  ECAC  F025         	call	_ldexp	;wreg free
  4170  0039B0  C084  F09C         	movff	?_ldexp+3,exp@x+3
  4171  0039B4  C083  F09B         	movff	?_ldexp+2,exp@x+2
  4172  0039B8  C082  F09A         	movff	?_ldexp+1,exp@x+1
  4173  0039BC  C081  F099         	movff	?_ldexp,exp@x
  4174                           
  4175                           ; BSR set to: 0
  4176  0039C0  51A3               	movf	exp@sign& (0+255),w,b
  4177  0039C2  E02C               	bz	l1557
  4178                           
  4179                           ; BSR set to: 0
  4180  0039C4  EE20  F099         	lfsr	2,exp@x
  4181  0039C8  0EFF               	movlw	255
  4182  0039CA  18DE               	xorwf	postinc2,w,c
  4183  0039CC  0EFF               	movlw	255
  4184  0039CE  B4D8               	btfsc	status,2,c
  4185  0039D0  18DE               	xorwf	postinc2,w,c
  4186  0039D2  0E7F               	movlw	127
  4187  0039D4  B4D8               	btfsc	status,2,c
  4188  0039D6  18DE               	xorwf	postinc2,w,c
  4189  0039D8  0E7F               	movlw	127
  4190  0039DA  B4D8               	btfsc	status,2,c
  4191  0039DC  18DE               	xorwf	postinc2,w,c
  4192  0039DE  E105               	bnz	l10412
  4193  0039E0                     u8770:
  4194                           
  4195                           ; BSR set to: 0
  4196  0039E0  6B99               	clrf	?_exp& (0+255),b
  4197  0039E2  6B9A               	clrf	(?_exp+1)& (0+255),b
  4198  0039E4  6B9B               	clrf	(?_exp+2)& (0+255),b
  4199  0039E6  6B9C               	clrf	(?_exp+3)& (0+255),b
  4200  0039E8  D021               	goto	l1553
  4201  0039EA                     l10412:
  4202                           
  4203                           ; BSR set to: 0
  4204  0039EA  6A2C               	clrf	?___fldiv,c
  4205  0039EC  6A2D               	clrf	?___fldiv+1,c
  4206  0039EE  0E80               	movlw	128
  4207  0039F0  6E2E               	movwf	?___fldiv+2,c
  4208  0039F2  0E3F               	movlw	63
  4209  0039F4  6E2F               	movwf	?___fldiv+3,c
  4210  0039F6  C099  F030         	movff	exp@x,?___fldiv+4
  4211  0039FA  C09A  F031         	movff	exp@x+1,?___fldiv+5
  4212  0039FE  C09B  F032         	movff	exp@x+2,?___fldiv+6
  4213  003A02  C09C  F033         	movff	exp@x+3,?___fldiv+7
  4214  003A06  EC58  F025         	call	___fldiv	;wreg free
  4215  003A0A  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  4216  003A0E  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  4217  003A12  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  4218  003A16  C02C  F099         	movff	?___fldiv,?_exp
  4219  003A1A  D008               	goto	l1553
  4220  003A1C                     l1557:
  4221                           
  4222                           ; BSR set to: 0
  4223  003A1C  C099  F099         	movff	exp@x,?_exp
  4224  003A20  C09A  F09A         	movff	exp@x+1,?_exp+1
  4225  003A24  C09B  F09B         	movff	exp@x+2,?_exp+2
  4226  003A28  C09C  F09C         	movff	exp@x+3,?_exp+3
  4227  003A2C                     l1553:
  4228  003A2C  0012               	return	
  4229  003A2E                     __end_of_exp:
  4230                           	opt stack 0
  4231                           tblptru	equ	0xFF8
  4232                           prodh	equ	0xFF4
  4233                           prodl	equ	0xFF3
  4234                           postinc0	equ	0xFEE
  4235                           wreg	equ	0xFE8
  4236                           postdec1	equ	0xFE5
  4237                           fsr1h	equ	0xFE2
  4238                           fsr1l	equ	0xFE1
  4239                           indf2	equ	0xFDF
  4240                           postinc2	equ	0xFDE
  4241                           postdec2	equ	0xFDD
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function ___flneg *****************
  4247 ;; Defined at:
  4248 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;  f1              4   13[COMRAM] unsigned char 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  4   13[COMRAM] unsigned char 
  4255 ;; Registers used:
  4256 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4257 ;; Tracked objects:
  4258 ;;		On entry : F/0
  4259 ;;		On exit  : F/0
  4260 ;;		Unchanged: F/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4262 ;;      Params:         4       0       0       0       0       0       0
  4263 ;;      Locals:         0       0       0       0       0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0       0
  4265 ;;      Totals:         4       0       0       0       0       0       0
  4266 ;;Total ram usage:        4 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    2
  4269 ;; This function calls:
  4270 ;;		Nothing
  4271 ;; This function is called by:
  4272 ;;		_exp
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text9
  4277  00575A                     __ptext9:
  4278                           	opt stack 0
  4279  00575A                     ___flneg:
  4280                           	opt stack 26
  4281                           
  4282                           ; BSR set to: 0
  4283                           
  4284                           ;incstack = 0
  4285                           ;incstack = 0
  4286  00575A  EE20  F00E         	lfsr	2,___flneg@f1
  4287  00575E  50DE               	movf	postinc2,w,c
  4288  005760  10DE               	iorwf	postinc2,w,c
  4289  005762  10DE               	iorwf	postinc2,w,c
  4290  005764  10DE               	iorwf	postinc2,w,c
  4291  005766  E002               	bz	l11724
  4292                           
  4293                           ; BSR set to: 0
  4294  005768  0E80               	movlw	128
  4295  00576A  1A11               	xorwf	___flneg@f1+3,f,c
  4296  00576C                     l11724:
  4297                           
  4298                           ; BSR set to: 0
  4299  00576C  C00E  F00E         	movff	___flneg@f1,?___flneg
  4300  005770  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4301  005774  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4302  005778  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4303                           
  4304                           ; BSR set to: 0
  4305  00577C  0012               	return	
  4306  00577E                     __end_of___flneg:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           postdec1	equ	0xFE5
  4314                           fsr1h	equ	0xFE2
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _ldexp *****************
  4324 ;; Defined at:
  4325 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  value           4   33[BANK0 ] unsigned char 
  4328 ;;  newexp          2   37[BANK0 ] int 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  4   33[BANK0 ] int 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4335 ;; Tracked objects:
  4336 ;;		On entry : F/0
  4337 ;;		On exit  : F/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4340 ;;      Params:         0       6       0       0       0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0
  4342 ;;      Temps:          3       0       0       0       0       0       0
  4343 ;;      Totals:         3       6       0       0       0       0       0
  4344 ;;Total ram usage:        9 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    2
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_exp
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           	psect	text10
  4355  004B58                     __ptext10:
  4356                           	opt stack 0
  4357  004B58                     _ldexp:
  4358                           	opt stack 26
  4359                           
  4360                           ; BSR set to: 0
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;incstack = 0
  4364                           ;incstack = 0
  4365  004B58  EE20  F081         	lfsr	2,ldexp@value
  4366  004B5C  50DE               	movf	postinc2,w,c
  4367  004B5E  10DE               	iorwf	postinc2,w,c
  4368  004B60  10DE               	iorwf	postinc2,w,c
  4369  004B62  10DE               	iorwf	postinc2,w,c
  4370  004B64  E014               	bz	u10140
  4371                           
  4372                           ; BSR set to: 0
  4373                           
  4374                           ; BSR set to: 0
  4375  004B66  5184               	movf	(ldexp@value+3)& (0+255),w,b
  4376  004B68  0B7F               	andlw	127
  4377  004B6A  6E43               	movwf	??_ldexp& (0+255),c
  4378  004B6C  90D8               	bcf	status,0,c
  4379  004B6E  3443               	rlcf	??_ldexp,w,c
  4380  004B70  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4381  004B72  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4382  004B74  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4383  004B76  5044               	movf	??_ldexp+1,w,c
  4384  004B78  2785               	addwf	ldexp@newexp& (0+255),f,b
  4385  004B7A  5045               	movf	??_ldexp+2,w,c
  4386  004B7C  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4387  004B7E  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  4388  004B80  36E8               	rlcf	wreg,f,c
  4389  004B82  0B01               	andlw	1
  4390  004B84  2785               	addwf	ldexp@newexp& (0+255),f,b
  4391  004B86  0E00               	movlw	0
  4392  004B88  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4393                           
  4394                           ; BSR set to: 0
  4395  004B8A  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4396  004B8C  D005               	goto	l11686
  4397  004B8E                     u10140:
  4398                           
  4399                           ; BSR set to: 0
  4400  004B8E  6B81               	clrf	?_ldexp& (0+255),b
  4401  004B90  6B82               	clrf	(?_ldexp+1)& (0+255),b
  4402  004B92  6B83               	clrf	(?_ldexp+2)& (0+255),b
  4403  004B94  6B84               	clrf	(?_ldexp+3)& (0+255),b
  4404  004B96  D031               	goto	l1678
  4405  004B98                     l11686:
  4406                           
  4407                           ; BSR set to: 0
  4408  004B98  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  4409  004B9A  0A80               	xorlw	128
  4410  004B9C  0F7F               	addlw	-129
  4411  004B9E  0E00               	movlw	0
  4412  004BA0  B4D8               	btfsc	status,2,c
  4413  004BA2  5D85               	subwf	ldexp@newexp& (0+255),w,b
  4414  004BA4  E30E               	bnc	l11700
  4415                           
  4416                           ; BSR set to: 0
  4417  004BA6  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  4418  004BA8  D006               	goto	l11696
  4419                           
  4420                           ; BSR set to: 0
  4421  004BAA  6981               	setf	?_ldexp& (0+255),b
  4422  004BAC  6982               	setf	(?_ldexp+1)& (0+255),b
  4423  004BAE  0E7F               	movlw	127
  4424  004BB0  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4425  004BB2  0EFF               	movlw	255
  4426  004BB4  D004               	goto	L4
  4427  004BB6                     l11696:
  4428                           
  4429                           ; BSR set to: 0
  4430  004BB6  6981               	setf	?_ldexp& (0+255),b
  4431  004BB8  6982               	setf	(?_ldexp+1)& (0+255),b
  4432  004BBA  0E7F               	movlw	127
  4433  004BBC  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4434  004BBE                     L4:
  4435  004BBE  6F84               	movwf	(?_ldexp+3)& (0+255),b
  4436  004BC0  D01C               	goto	l1678
  4437  004BC2                     l11700:
  4438                           
  4439                           ; BSR set to: 0
  4440  004BC2  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4441  004BC4  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4442  004BC6  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4443  004BC8  3185               	rrcf	ldexp@newexp& (0+255),w,b
  4444  004BCA  6E43               	movwf	??_ldexp& (0+255),c
  4445  004BCC  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  4446  004BCE  0B80               	andlw	-128
  4447  004BD0  1843               	xorwf	??_ldexp,w,c
  4448  004BD2  6F84               	movwf	(ldexp@value+3)& (0+255),b
  4449  004BD4  C085  F043         	movff	ldexp@newexp,??_ldexp
  4450  004BD8  0E01               	movlw	1
  4451  004BDA  1643               	andwf	??_ldexp,f,c
  4452  004BDC  3243               	rrcf	??_ldexp,f,c
  4453  004BDE  3243               	rrcf	??_ldexp,f,c
  4454  004BE0  5183               	movf	(ldexp@value+2)& (0+255),w,b
  4455  004BE2  1843               	xorwf	??_ldexp,w,c
  4456  004BE4  0B7F               	andlw	-129
  4457  004BE6  1843               	xorwf	??_ldexp,w,c
  4458  004BE8  6F83               	movwf	(ldexp@value+2)& (0+255),b
  4459                           
  4460                           ; BSR set to: 0
  4461  004BEA  C081  F081         	movff	ldexp@value,?_ldexp
  4462  004BEE  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  4463  004BF2  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  4464  004BF6  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  4465  004BFA                     l1678:
  4466                           
  4467                           ; BSR set to: 0
  4468  004BFA  0012               	return	
  4469  004BFC                     __end_of_ldexp:
  4470                           	opt stack 0
  4471                           tblptru	equ	0xFF8
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           postinc0	equ	0xFEE
  4475                           wreg	equ	0xFE8
  4476                           postdec1	equ	0xFE5
  4477                           fsr1h	equ	0xFE2
  4478                           fsr1l	equ	0xFE1
  4479                           indf2	equ	0xFDF
  4480                           postinc2	equ	0xFDE
  4481                           postdec2	equ	0xFDD
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _eval_poly *****************
  4487 ;; Defined at:
  4488 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  x               4   22[BANK0 ] int 
  4491 ;;  d               1   26[BANK0 ] PTR const 
  4492 ;;		 -> log@coeff(36), exp@coeff(40), 
  4493 ;;  n               2   27[BANK0 ] int 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  res             4   29[BANK0 ] int 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  4   22[BANK0 ] int 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : F/0
  4502 ;;		On exit  : F/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4505 ;;      Params:         0       7       0       0       0       0       0
  4506 ;;      Locals:         0       4       0       0       0       0       0
  4507 ;;      Temps:          1       0       0       0       0       0       0
  4508 ;;      Totals:         1      11       0       0       0       0       0
  4509 ;;Total ram usage:       12 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    4
  4512 ;; This function calls:
  4513 ;;		___fladd
  4514 ;;		___flmul
  4515 ;; This function is called by:
  4516 ;;		_exp
  4517 ;;		_log
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text11
  4522  004712                     __ptext11:
  4523                           	opt stack 0
  4524  004712                     _eval_poly:
  4525                           	opt stack 24
  4526                           
  4527                           ; BSR set to: 0
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;incstack = 0
  4531                           ;incstack = 0
  4532  004712  517B               	movf	eval_poly@n& (0+255),w,b
  4533  004714  0D04               	mullw	4
  4534  004716  517A               	movf	eval_poly@d& (0+255),w,b
  4535  004718  24F3               	addwf	prodl,w,c
  4536  00471A  6E42               	movwf	??_eval_poly& (0+255),c
  4537  00471C  C042  FFF6         	movff	??_eval_poly,tblptrl
  4538  004720  0E06               	movlw	high __smallconst
  4539  004722  6EF7               	movwf	tblptrh,c
  4540  004724  0009               	tblrd		*+
  4541  004726  CFF5 F07D          	movff	tablat,eval_poly@res
  4542  00472A  0009               	tblrd		*+
  4543  00472C  CFF5 F07E          	movff	tablat,eval_poly@res+1
  4544  004730  0009               	tblrd		*+
  4545  004732  CFF5 F07F          	movff	tablat,eval_poly@res+2
  4546  004736  000A               	tblrd		*-
  4547  004738  CFF5 F080          	movff	tablat,eval_poly@res+3
  4548  00473C  D03D               	goto	l11672
  4549  00473E                     l11670:
  4550                           
  4551                           ; BSR set to: 0
  4552  00473E  C07D  F064         	movff	eval_poly@res,?___flmul+4
  4553  004742  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  4554  004746  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  4555  00474A  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  4556  00474E  C076  F060         	movff	eval_poly@x,?___flmul
  4557  004752  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  4558  004756  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  4559  00475A  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  4560  00475E  ECBC  F022         	call	___flmul	;wreg free
  4561  004762  C063  F020         	movff	?___flmul+3,?___fladd+3
  4562  004766  C062  F01F         	movff	?___flmul+2,?___fladd+2
  4563  00476A  C061  F01E         	movff	?___flmul+1,?___fladd+1
  4564  00476E  C060  F01D         	movff	?___flmul,?___fladd
  4565  004772  0100               	movlb	0	; () banked
  4566  004774  077B               	decf	eval_poly@n& (0+255),f,b
  4567  004776  A0D8               	btfss	status,0,c
  4568  004778  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  4569  00477A  517B               	movf	eval_poly@n& (0+255),w,b
  4570  00477C  0D04               	mullw	4
  4571  00477E  517A               	movf	eval_poly@d& (0+255),w,b
  4572  004780  24F3               	addwf	prodl,w,c
  4573  004782  6E42               	movwf	??_eval_poly& (0+255),c
  4574  004784  C042  FFF6         	movff	??_eval_poly,tblptrl
  4575  004788  0E06               	movlw	high __smallconst
  4576  00478A  6EF7               	movwf	tblptrh,c
  4577  00478C  0009               	tblrd		*+
  4578  00478E  CFF5 F021          	movff	tablat,?___fladd+4
  4579  004792  0009               	tblrd		*+
  4580  004794  CFF5 F022          	movff	tablat,?___fladd+5
  4581  004798  0009               	tblrd		*+
  4582  00479A  CFF5 F023          	movff	tablat,?___fladd+6
  4583  00479E  000A               	tblrd		*-
  4584  0047A0  CFF5 F024          	movff	tablat,?___fladd+7
  4585  0047A4  EC62  F01F         	call	___fladd	;wreg free
  4586  0047A8  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  4587  0047AC  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  4588  0047B0  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  4589  0047B4  C01D  F07D         	movff	?___fladd,eval_poly@res
  4590  0047B8                     l11672:
  4591  0047B8  0100               	movlb	0	; () banked
  4592  0047BA  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  4593  0047BC  117B               	iorwf	eval_poly@n& (0+255),w,b
  4594  0047BE  E1BF               	bnz	l11670
  4595                           
  4596                           ; BSR set to: 0
  4597  0047C0  C07D  F076         	movff	eval_poly@res,?_eval_poly
  4598  0047C4  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  4599  0047C8  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  4600  0047CC  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  4601                           
  4602                           ; BSR set to: 0
  4603  0047D0  0012               	return	
  4604  0047D2                     __end_of_eval_poly:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1h	equ	0xFE2
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function _floor *****************
  4625 ;; Defined at:
  4626 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;  x               4   47[BANK0 ] int 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  i               4   51[BANK0 ] int 
  4631 ;;  expon           2   55[BANK0 ] int 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;                  4   47[BANK0 ] int 
  4634 ;; Registers used:
  4635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4636 ;; Tracked objects:
  4637 ;;		On entry : F/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4641 ;;      Params:         0       4       0       0       0       0       0
  4642 ;;      Locals:         0       6       0       0       0       0       0
  4643 ;;      Temps:          0       0       0       0       0       0       0
  4644 ;;      Totals:         0      10       0       0       0       0       0
  4645 ;;Total ram usage:       10 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    4
  4648 ;; This function calls:
  4649 ;;		___altofl
  4650 ;;		___fladd
  4651 ;;		___flge
  4652 ;;		_frexp
  4653 ;;		___fltol
  4654 ;; This function is called by:
  4655 ;;		_exp
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text12
  4660  0042A2                     __ptext12:
  4661                           	opt stack 0
  4662  0042A2                     _floor:
  4663                           	opt stack 24
  4664                           
  4665                           ; BSR set to: 0
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;incstack = 0
  4669                           ;incstack = 0
  4670  0042A2  C08F  F00E         	movff	floor@x,?_frexp
  4671  0042A6  C090  F00F         	movff	floor@x+1,?_frexp+1
  4672  0042AA  C091  F010         	movff	floor@x+2,?_frexp+2
  4673  0042AE  C092  F011         	movff	floor@x+3,?_frexp+3
  4674  0042B2  0E00               	movlw	high floor@expon
  4675  0042B4  6E13               	movwf	?_frexp+5,c
  4676  0042B6  0E97               	movlw	low floor@expon
  4677  0042B8  6E12               	movwf	?_frexp+4,c
  4678  0042BA  ECE8  F026         	call	_frexp	;wreg free
  4679                           
  4680                           ; BSR set to: 0
  4681  0042BE  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  4682  0042C0  D00F               	goto	l11658
  4683                           
  4684                           ; BSR set to: 0
  4685  0042C2  AF92               	btfss	(floor@x+3)& (0+255),7,b
  4686  0042C4  D008               	goto	l1646
  4687                           
  4688                           ; BSR set to: 0
  4689  0042C6  0E00               	movlw	0
  4690  0042C8  6F8F               	movwf	?_floor& (0+255),b
  4691  0042CA  6F90               	movwf	(?_floor+1)& (0+255),b
  4692  0042CC  0E80               	movlw	128
  4693  0042CE  6F91               	movwf	(?_floor+2)& (0+255),b
  4694  0042D0  0EBF               	movlw	191
  4695  0042D2  6F92               	movwf	(?_floor+3)& (0+255),b
  4696  0042D4  D063               	goto	l1647
  4697  0042D6                     l1646:
  4698                           
  4699                           ; BSR set to: 0
  4700  0042D6  6B8F               	clrf	?_floor& (0+255),b
  4701  0042D8  6B90               	clrf	(?_floor+1)& (0+255),b
  4702  0042DA  6B91               	clrf	(?_floor+2)& (0+255),b
  4703  0042DC  6B92               	clrf	(?_floor+3)& (0+255),b
  4704  0042DE  D05E               	goto	l1647
  4705  0042E0                     l11658:
  4706                           
  4707                           ; BSR set to: 0
  4708  0042E0  0E1D               	movlw	29
  4709  0042E2  5D97               	subwf	floor@expon& (0+255),w,b
  4710  0042E4  0E00               	movlw	0
  4711  0042E6  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  4712  0042E8  E309               	bnc	l11662
  4713                           
  4714                           ; BSR set to: 0
  4715  0042EA  C08F  F08F         	movff	floor@x,?_floor
  4716  0042EE  C090  F090         	movff	floor@x+1,?_floor+1
  4717  0042F2  C091  F091         	movff	floor@x+2,?_floor+2
  4718  0042F6  C092  F092         	movff	floor@x+3,?_floor+3
  4719  0042FA  D050               	goto	l1647
  4720  0042FC                     l11662:
  4721                           
  4722                           ; BSR set to: 0
  4723  0042FC  C08F  F076         	movff	floor@x,?___fltol
  4724  004300  C090  F077         	movff	floor@x+1,?___fltol+1
  4725  004304  C091  F078         	movff	floor@x+2,?___fltol+2
  4726  004308  C092  F079         	movff	floor@x+3,?___fltol+3
  4727  00430C  EC4E  F026         	call	___fltol	;wreg free
  4728  004310  C079  F08D         	movff	?___fltol+3,?___altofl+3
  4729  004314  C078  F08C         	movff	?___fltol+2,?___altofl+2
  4730  004318  C077  F08B         	movff	?___fltol+1,?___altofl+1
  4731  00431C  C076  F08A         	movff	?___fltol,?___altofl
  4732  004320  ECBC  F029         	call	___altofl	;wreg free
  4733  004324  C08D  F096         	movff	?___altofl+3,floor@i+3
  4734  004328  C08C  F095         	movff	?___altofl+2,floor@i+2
  4735  00432C  C08B  F094         	movff	?___altofl+1,floor@i+1
  4736  004330  C08A  F093         	movff	?___altofl,floor@i
  4737  004334  C08F  F00E         	movff	floor@x,?___flge
  4738  004338  C090  F00F         	movff	floor@x+1,?___flge+1
  4739  00433C  C091  F010         	movff	floor@x+2,?___flge+2
  4740  004340  C092  F011         	movff	floor@x+3,?___flge+3
  4741  004344  C093  F012         	movff	floor@i,?___flge+4
  4742  004348  C094  F013         	movff	floor@i+1,?___flge+5
  4743  00434C  C095  F014         	movff	floor@i+2,?___flge+6
  4744  004350  C096  F015         	movff	floor@i+3,?___flge+7
  4745  004354  ECDD  F028         	call	___flge	;wreg free
  4746  004358  E219               	bc	l1649
  4747  00435A  C093  F01D         	movff	floor@i,?___fladd
  4748  00435E  C094  F01E         	movff	floor@i+1,?___fladd+1
  4749  004362  C095  F01F         	movff	floor@i+2,?___fladd+2
  4750  004366  C096  F020         	movff	floor@i+3,?___fladd+3
  4751  00436A  6A21               	clrf	?___fladd+4,c
  4752  00436C  6A22               	clrf	?___fladd+5,c
  4753  00436E  0E80               	movlw	128
  4754  004370  6E23               	movwf	?___fladd+6,c
  4755  004372  0EBF               	movlw	191
  4756  004374  6E24               	movwf	?___fladd+7,c
  4757  004376  EC62  F01F         	call	___fladd	;wreg free
  4758  00437A  C020  F092         	movff	?___fladd+3,?_floor+3
  4759  00437E  C01F  F091         	movff	?___fladd+2,?_floor+2
  4760  004382  C01E  F090         	movff	?___fladd+1,?_floor+1
  4761  004386  C01D  F08F         	movff	?___fladd,?_floor
  4762  00438A  D008               	goto	l1647
  4763  00438C                     l1649:
  4764  00438C  C093  F08F         	movff	floor@i,?_floor
  4765  004390  C094  F090         	movff	floor@i+1,?_floor+1
  4766  004394  C095  F091         	movff	floor@i+2,?_floor+2
  4767  004398  C096  F092         	movff	floor@i+3,?_floor+3
  4768  00439C                     l1647:
  4769  00439C  0012               	return	
  4770  00439E                     __end_of_floor:
  4771                           	opt stack 0
  4772                           tblptru	equ	0xFF8
  4773                           tblptrh	equ	0xFF7
  4774                           tblptrl	equ	0xFF6
  4775                           tablat	equ	0xFF5
  4776                           prodh	equ	0xFF4
  4777                           prodl	equ	0xFF3
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           postdec1	equ	0xFE5
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function ___fltol *****************
  4791 ;; Defined at:
  4792 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  f1              4   22[BANK0 ] int 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  exp1            1   27[BANK0 ] unsigned char 
  4797 ;;  sign1           1   26[BANK0 ] unsigned char 
  4798 ;; Return value:  Size  Location     Type
  4799 ;;                  4   22[BANK0 ] long 
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : F/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4807 ;;      Params:         0       4       0       0       0       0       0
  4808 ;;      Locals:         0       2       0       0       0       0       0
  4809 ;;      Temps:          4       0       0       0       0       0       0
  4810 ;;      Totals:         4       6       0       0       0       0       0
  4811 ;;Total ram usage:       10 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    2
  4814 ;; This function calls:
  4815 ;;		Nothing
  4816 ;; This function is called by:
  4817 ;;		_doWork
  4818 ;;		_setEventData
  4819 ;;		_exp
  4820 ;;		_floor
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           	psect	text13
  4825  004C9C                     __ptext13:
  4826                           	opt stack 0
  4827  004C9C                     ___fltol:
  4828                           	opt stack 27
  4829                           
  4830                           ;incstack = 0
  4831                           ;incstack = 0
  4832  004C9C  0100               	movlb	0	; () banked
  4833  004C9E  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4834  004CA0  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4835  004CA2  6F7B               	movwf	___fltol@exp1& (0+255),b
  4836  004CA4  677B               	tstfsz	___fltol@exp1& (0+255),b
  4837  004CA6  D005               	goto	l11752
  4838  004CA8                     l11750:
  4839                           
  4840                           ; BSR set to: 0
  4841  004CA8  6B76               	clrf	?___fltol& (0+255),b
  4842  004CAA  6B77               	clrf	(?___fltol+1)& (0+255),b
  4843  004CAC  6B78               	clrf	(?___fltol+2)& (0+255),b
  4844  004CAE  6B79               	clrf	(?___fltol+3)& (0+255),b
  4845  004CB0  D043               	goto	l1658
  4846  004CB2                     l11752:
  4847                           
  4848                           ; BSR set to: 0
  4849  004CB2  C076  F042         	movff	___fltol@f1,??___fltol
  4850  004CB6  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4851  004CBA  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4852  004CBE  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4853  004CC2  0E20               	movlw	32
  4854  004CC4  D005               	goto	u10230
  4855  004CC6                     u10235:
  4856  004CC6  90D8               	bcf	status,0,c
  4857  004CC8  3245               	rrcf	??___fltol+3,f,c
  4858  004CCA  3244               	rrcf	??___fltol+2,f,c
  4859  004CCC  3243               	rrcf	??___fltol+1,f,c
  4860  004CCE  3242               	rrcf	??___fltol,f,c
  4861  004CD0                     u10230:
  4862  004CD0  2EE8               	decfsz	wreg,f,c
  4863  004CD2  D7F9               	goto	u10235
  4864  004CD4  5042               	movf	??___fltol,w,c
  4865  004CD6  6F7A               	movwf	___fltol@sign1& (0+255),b
  4866                           
  4867                           ; BSR set to: 0
  4868  004CD8  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4869                           
  4870                           ; BSR set to: 0
  4871  004CDA  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4872                           
  4873                           ; BSR set to: 0
  4874  004CDC  0E96               	movlw	150
  4875  004CDE  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4876                           
  4877                           ; BSR set to: 0
  4878  004CE0  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4879  004CE2  D00C               	goto	l11770
  4880                           
  4881                           ; BSR set to: 0
  4882  004CE4  517B               	movf	___fltol@exp1& (0+255),w,b
  4883  004CE6  0A80               	xorlw	128
  4884  004CE8  0F97               	addlw	151
  4885  004CEA  E3DE               	bnc	l11750
  4886  004CEC                     l11766:
  4887                           
  4888                           ; BSR set to: 0
  4889  004CEC  90D8               	bcf	status,0,c
  4890  004CEE  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4891  004CF0  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4892  004CF2  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4893  004CF4  3376               	rrcf	___fltol@f1& (0+255),f,b
  4894                           
  4895                           ; BSR set to: 0
  4896  004CF6  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4897  004CF8  D7F9               	goto	l11766
  4898  004CFA  D00C               	goto	l11778
  4899  004CFC                     l11770:
  4900                           
  4901                           ; BSR set to: 0
  4902  004CFC  0E1F               	movlw	31
  4903  004CFE  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4904  004D00  D007               	goto	l11776
  4905  004D02  D7D2               	goto	l11750
  4906  004D04                     l11774:
  4907                           
  4908                           ; BSR set to: 0
  4909  004D04  90D8               	bcf	status,0,c
  4910  004D06  3776               	rlcf	___fltol@f1& (0+255),f,b
  4911  004D08  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4912  004D0A  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4913  004D0C  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4914  004D0E  077B               	decf	___fltol@exp1& (0+255),f,b
  4915  004D10                     l11776:
  4916                           
  4917                           ; BSR set to: 0
  4918  004D10  677B               	tstfsz	___fltol@exp1& (0+255),b
  4919  004D12  D7F8               	goto	l11774
  4920  004D14                     l11778:
  4921                           
  4922                           ; BSR set to: 0
  4923  004D14  517A               	movf	___fltol@sign1& (0+255),w,b
  4924  004D16  E008               	bz	l11782
  4925                           
  4926                           ; BSR set to: 0
  4927  004D18  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  4928  004D1A  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  4929  004D1C  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  4930  004D1E  6D76               	negf	___fltol@f1& (0+255),b
  4931  004D20  0E00               	movlw	0
  4932  004D22  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4933  004D24  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4934  004D26  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4935  004D28                     l11782:
  4936                           
  4937                           ; BSR set to: 0
  4938  004D28  C076  F076         	movff	___fltol@f1,?___fltol
  4939  004D2C  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  4940  004D30  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  4941  004D34  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  4942  004D38                     l1658:
  4943                           
  4944                           ; BSR set to: 0
  4945  004D38  0012               	return	
  4946  004D3A                     __end_of___fltol:
  4947                           	opt stack 0
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           postinc0	equ	0xFEE
  4955                           wreg	equ	0xFE8
  4956                           postdec1	equ	0xFE5
  4957                           fsr1h	equ	0xFE2
  4958                           fsr1l	equ	0xFE1
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           postdec2	equ	0xFDD
  4962                           fsr2h	equ	0xFDA
  4963                           fsr2l	equ	0xFD9
  4964                           status	equ	0xFD8
  4965                           
  4966 ;; *************** function _frexp *****************
  4967 ;; Defined at:
  4968 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;  value           4   13[COMRAM] long 
  4971 ;;  eptr            2   17[COMRAM] PTR int 
  4972 ;;		 -> log@exponent(2), floor@expon(2), 
  4973 ;; Auto vars:     Size  Location     Type
  4974 ;;		None
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  4   13[COMRAM] PTR int 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4979 ;; Tracked objects:
  4980 ;;		On entry : F/0
  4981 ;;		On exit  : F/0
  4982 ;;		Unchanged: F/0
  4983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4984 ;;      Params:         6       0       0       0       0       0       0
  4985 ;;      Locals:         0       0       0       0       0       0       0
  4986 ;;      Temps:          3       0       0       0       0       0       0
  4987 ;;      Totals:         9       0       0       0       0       0       0
  4988 ;;Total ram usage:        9 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    2
  4991 ;; This function calls:
  4992 ;;		Nothing
  4993 ;; This function is called by:
  4994 ;;		_floor
  4995 ;;		_log
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text14
  5000  004DD0                     __ptext14:
  5001                           	opt stack 0
  5002  004DD0                     _frexp:
  5003                           	opt stack 26
  5004                           
  5005                           ; BSR set to: 0
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;incstack = 0
  5009                           ;incstack = 0
  5010  004DD0  EE20  F00E         	lfsr	2,frexp@value
  5011  004DD4  50DE               	movf	postinc2,w,c
  5012  004DD6  10DE               	iorwf	postinc2,w,c
  5013  004DD8  10DE               	iorwf	postinc2,w,c
  5014  004DDA  10DE               	iorwf	postinc2,w,c
  5015  004DDC  E10C               	bnz	l11736
  5016                           
  5017                           ; BSR set to: 0
  5018  004DDE  C012  FFD9         	movff	frexp@eptr,fsr2l
  5019  004DE2  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5020  004DE6  0E00               	movlw	0
  5021  004DE8  6ADE               	clrf	postinc2,c
  5022  004DEA  6ADD               	clrf	postdec2,c
  5023                           
  5024                           ; BSR set to: 0
  5025  004DEC  6A0E               	clrf	?_frexp,c
  5026  004DEE  6A0F               	clrf	?_frexp+1,c
  5027  004DF0  6A10               	clrf	?_frexp+2,c
  5028  004DF2  6A11               	clrf	?_frexp+3,c
  5029  004DF4  D02F               	goto	l1674
  5030  004DF6                     l11736:
  5031                           
  5032                           ; BSR set to: 0
  5033  004DF6  5011               	movf	frexp@value+3,w,c
  5034  004DF8  0B7F               	andlw	127
  5035  004DFA  6E14               	movwf	??_frexp& (0+255),c
  5036  004DFC  90D8               	bcf	status,0,c
  5037  004DFE  3414               	rlcf	??_frexp,w,c
  5038  004E00  6E15               	movwf	(??_frexp+1)& (0+255),c
  5039  004E02  6A16               	clrf	(??_frexp+2)& (0+255),c
  5040  004E04  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5041  004E06  C012  FFD9         	movff	frexp@eptr,fsr2l
  5042  004E0A  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5043  004E0E  C015  FFDE         	movff	??_frexp+1,postinc2
  5044  004E12  C016  FFDD         	movff	??_frexp+2,postdec2
  5045  004E16  3410               	rlcf	frexp@value+2,w,c
  5046  004E18  36E8               	rlcf	wreg,f,c
  5047  004E1A  0B01               	andlw	1
  5048  004E1C  C012  FFD9         	movff	frexp@eptr,fsr2l
  5049  004E20  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5050  004E24  12DE               	iorwf	postinc2,f,c
  5051  004E26  0E00               	movlw	0
  5052  004E28  12DD               	iorwf	postdec2,f,c
  5053                           
  5054                           ; BSR set to: 0
  5055  004E2A  C012  FFD9         	movff	frexp@eptr,fsr2l
  5056  004E2E  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5057  004E32  0E82               	movlw	130
  5058  004E34  26DE               	addwf	postinc2,f,c
  5059  004E36  0EFF               	movlw	255
  5060  004E38  22DD               	addwfc	postdec2,f,c
  5061                           
  5062                           ; BSR set to: 0
  5063  004E3A  5011               	movf	frexp@value+3,w,c
  5064  004E3C  0B80               	andlw	-128
  5065  004E3E  093F               	iorlw	63
  5066  004E40  6E11               	movwf	frexp@value+3,c
  5067                           
  5068                           ; BSR set to: 0
  5069  004E42  9E10               	bcf	frexp@value+2,7,c
  5070                           
  5071                           ; BSR set to: 0
  5072  004E44  C00E  F00E         	movff	frexp@value,?_frexp
  5073  004E48  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5074  004E4C  C010  F010         	movff	frexp@value+2,?_frexp+2
  5075  004E50  C011  F011         	movff	frexp@value+3,?_frexp+3
  5076  004E54                     l1674:
  5077                           
  5078                           ; BSR set to: 0
  5079  004E54  0012               	return	
  5080  004E56                     __end_of_frexp:
  5081                           	opt stack 0
  5082                           tblptru	equ	0xFF8
  5083                           tblptrh	equ	0xFF7
  5084                           tblptrl	equ	0xFF6
  5085                           tablat	equ	0xFF5
  5086                           prodh	equ	0xFF4
  5087                           prodl	equ	0xFF3
  5088                           postinc0	equ	0xFEE
  5089                           wreg	equ	0xFE8
  5090                           postdec1	equ	0xFE5
  5091                           fsr1h	equ	0xFE2
  5092                           fsr1l	equ	0xFE1
  5093                           indf2	equ	0xFDF
  5094                           postinc2	equ	0xFDE
  5095                           postdec2	equ	0xFDD
  5096                           fsr2h	equ	0xFDA
  5097                           fsr2l	equ	0xFD9
  5098                           status	equ	0xFD8
  5099                           
  5100 ;; *************** function ___flge *****************
  5101 ;; Defined at:
  5102 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  ff1             4   13[COMRAM] PTR int 
  5105 ;;  ff2             4   17[COMRAM] PTR int 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;		None
  5108 ;; Return value:  Size  Location     Type
  5109 ;;		None               void
  5110 ;; Registers used:
  5111 ;;		wreg, status,2, status,0
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5117 ;;      Params:         8       0       0       0       0       0       0
  5118 ;;      Locals:         0       0       0       0       0       0       0
  5119 ;;      Temps:          0       0       0       0       0       0       0
  5120 ;;      Totals:         8       0       0       0       0       0       0
  5121 ;;Total ram usage:        8 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    2
  5124 ;; This function calls:
  5125 ;;		Nothing
  5126 ;; This function is called by:
  5127 ;;		_exp
  5128 ;;		_floor
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           	psect	text15
  5133  0051BA                     __ptext15:
  5134                           	opt stack 0
  5135  0051BA                     ___flge:
  5136                           	opt stack 26
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;incstack = 0
  5140                           ;incstack = 0
  5141  0051BA  AE11               	btfss	___flge@ff1+3,7,c
  5142  0051BC  D009               	goto	l11710
  5143  0051BE  6C0E               	negf	___flge@ff1,c
  5144  0051C0  1E0F               	comf	___flge@ff1+1,f,c
  5145  0051C2  B0D8               	btfsc	status,0,c
  5146  0051C4  2A0F               	incf	___flge@ff1+1,f,c
  5147  0051C6  1E10               	comf	___flge@ff1+2,f,c
  5148  0051C8  B0D8               	btfsc	status,0,c
  5149  0051CA  2A10               	incf	___flge@ff1+2,f,c
  5150  0051CC  0E80               	movlw	128
  5151  0051CE  5611               	subfwb	___flge@ff1+3,f,c
  5152  0051D0                     l11710:
  5153  0051D0  AE15               	btfss	___flge@ff2+3,7,c
  5154  0051D2  D009               	goto	l1605
  5155  0051D4  6C12               	negf	___flge@ff2,c
  5156  0051D6  1E13               	comf	___flge@ff2+1,f,c
  5157  0051D8  B0D8               	btfsc	status,0,c
  5158  0051DA  2A13               	incf	___flge@ff2+1,f,c
  5159  0051DC  1E14               	comf	___flge@ff2+2,f,c
  5160  0051DE  B0D8               	btfsc	status,0,c
  5161  0051E0  2A14               	incf	___flge@ff2+2,f,c
  5162  0051E2  0E80               	movlw	128
  5163  0051E4  5615               	subfwb	___flge@ff2+3,f,c
  5164  0051E6                     l1605:
  5165  0051E6  0E80               	movlw	128
  5166  0051E8  1A11               	xorwf	___flge@ff1+3,f,c
  5167  0051EA  1A15               	xorwf	___flge@ff2+3,f,c
  5168  0051EC  5012               	movf	___flge@ff2,w,c
  5169  0051EE  5C0E               	subwf	___flge@ff1,w,c
  5170  0051F0  5013               	movf	___flge@ff2+1,w,c
  5171  0051F2  580F               	subwfb	___flge@ff1+1,w,c
  5172  0051F4  5014               	movf	___flge@ff2+2,w,c
  5173  0051F6  5810               	subwfb	___flge@ff1+2,w,c
  5174  0051F8  5015               	movf	___flge@ff2+3,w,c
  5175  0051FA  5811               	subwfb	___flge@ff1+3,w,c
  5176  0051FC  E202               	bc	l11716
  5177  0051FE  90D8               	bcf	status,0,c
  5178  005200  D001               	goto	l1606
  5179  005202                     l11716:
  5180  005202  80D8               	bsf	status,0,c
  5181  005204                     l1606:
  5182  005204  0012               	return	
  5183  005206                     __end_of___flge:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function ___altofl *****************
  5204 ;; Defined at:
  5205 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  c               4   42[BANK0 ] long 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  sign            1   46[BANK0 ] unsigned char 
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  4   42[BANK0 ] unsigned char 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, status,0, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : F/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5219 ;;      Params:         0       4       0       0       0       0       0
  5220 ;;      Locals:         0       1       0       0       0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0
  5222 ;;      Totals:         0       5       0       0       0       0       0
  5223 ;;Total ram usage:        5 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:    3
  5226 ;; This function calls:
  5227 ;;		___flpack
  5228 ;; This function is called by:
  5229 ;;		_doWork
  5230 ;;		_floor
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text16
  5235  005378                     __ptext16:
  5236                           	opt stack 0
  5237  005378                     ___altofl:
  5238                           	opt stack 26
  5239                           
  5240                           ; BSR set to: 0
  5241                           
  5242                           ;incstack = 0
  5243                           ;incstack = 0
  5244  005378  6B8E               	clrf	___altofl@sign& (0+255),b
  5245  00537A  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  5246  00537C  D00A               	goto	l11464
  5247                           
  5248                           ; BSR set to: 0
  5249  00537E  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  5250  005380  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  5251  005382  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  5252  005384  6D8A               	negf	___altofl@c& (0+255),b
  5253  005386  0E00               	movlw	0
  5254  005388  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  5255  00538A  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  5256  00538C  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  5257                           
  5258                           ; BSR set to: 0
  5259  00538E  0E01               	movlw	1
  5260  005390  6F8E               	movwf	___altofl@sign& (0+255),b
  5261  005392                     l11464:
  5262                           
  5263                           ; BSR set to: 0
  5264  005392  C08A  F00E         	movff	___altofl@c,?___flpack
  5265  005396  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  5266  00539A  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  5267  00539E  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  5268  0053A2  0E96               	movlw	150
  5269  0053A4  6E12               	movwf	?___flpack+4,c
  5270  0053A6  C08E  F013         	movff	___altofl@sign,?___flpack+5
  5271  0053AA  ECE9  F023         	call	___flpack	;wreg free
  5272  0053AE  C011  F08D         	movff	?___flpack+3,?___altofl+3
  5273  0053B2  C010  F08C         	movff	?___flpack+2,?___altofl+2
  5274  0053B6  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  5275  0053BA  C00E  F08A         	movff	?___flpack,?___altofl
  5276  0053BE  0012               	return	
  5277  0053C0                     __end_of___altofl:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           fsr2h	equ	0xFDA
  5294                           fsr2l	equ	0xFD9
  5295                           status	equ	0xFD8
  5296                           
  5297 ;; *************** function ___asflsub *****************
  5298 ;; Defined at:
  5299 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  f1p             2   30[BANK0 ] PTR 
  5302 ;;		 -> exp@x(4), doWork@temp(4), 
  5303 ;;  f2              4   32[BANK0 ] PTR 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;		None
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  4   30[BANK0 ] PTR 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : F/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5315 ;;      Params:         0       6       0       0       0       0       0
  5316 ;;      Locals:         0       0       0       0       0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0
  5318 ;;      Totals:         0       6       0       0       0       0       0
  5319 ;;Total ram usage:        6 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    5
  5322 ;; This function calls:
  5323 ;;		___flsub
  5324 ;; This function is called by:
  5325 ;;		_doWork
  5326 ;;		_exp
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text17
  5331  00516C                     __ptext17:
  5332                           	opt stack 0
  5333  00516C                     ___asflsub:
  5334                           	opt stack 24
  5335                           
  5336                           ;	Return value of ___asflsub is never used
  5337                           
  5338                           ;incstack = 0
  5339                           ;incstack = 0
  5340  00516C  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5341  005170  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5342  005174  0100               	movlb	0	; () banked
  5343  005176  CFDE F076          	movff	postinc2,?___flsub
  5344  00517A  CFDE F077          	movff	postinc2,?___flsub+1
  5345  00517E  CFDE F078          	movff	postinc2,?___flsub+2
  5346  005182  CFDE F079          	movff	postinc2,?___flsub+3
  5347  005186  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  5348  00518A  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  5349  00518E  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  5350  005192  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  5351  005196  EC44  F02A         	call	___flsub	;wreg free
  5352  00519A  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5353  00519E  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5354  0051A2  0100               	movlb	0	; () banked
  5355  0051A4  C076  FFDE         	movff	?___flsub,postinc2
  5356  0051A8  C077  FFDE         	movff	?___flsub+1,postinc2
  5357  0051AC  C078  FFDE         	movff	?___flsub+2,postinc2
  5358  0051B0  C079  FFDD         	movff	?___flsub+3,postdec2
  5359  0051B4  06D9               	decf	fsr2l,f,c
  5360  0051B6  06D9               	decf	fsr2l,f,c
  5361                           
  5362                           ; BSR set to: 0
  5363  0051B8  0012               	return	
  5364  0051BA                     __end_of___asflsub:
  5365                           	opt stack 0
  5366                           tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           postdec1	equ	0xFE5
  5375                           fsr1h	equ	0xFE2
  5376                           fsr1l	equ	0xFE1
  5377                           indf2	equ	0xFDF
  5378                           postinc2	equ	0xFDE
  5379                           postdec2	equ	0xFDD
  5380                           fsr2h	equ	0xFDA
  5381                           fsr2l	equ	0xFD9
  5382                           status	equ	0xFD8
  5383                           
  5384 ;; *************** function ___flsub *****************
  5385 ;; Defined at:
  5386 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;  f1              4   22[BANK0 ] PTR 
  5389 ;;  f2              4   26[BANK0 ] PTR 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  4   22[BANK0 ] PTR 
  5394 ;; Registers used:
  5395 ;;		wreg, status,2, status,0, cstack
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5401 ;;      Params:         0       8       0       0       0       0       0
  5402 ;;      Locals:         0       0       0       0       0       0       0
  5403 ;;      Temps:          0       0       0       0       0       0       0
  5404 ;;      Totals:         0       8       0       0       0       0       0
  5405 ;;Total ram usage:        8 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; Hardware stack levels required when called:    4
  5408 ;; This function calls:
  5409 ;;		___fladd
  5410 ;; This function is called by:
  5411 ;;		_doWork
  5412 ;;		___asflsub
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text18
  5417  005488                     __ptext18:
  5418                           	opt stack 0
  5419  005488                     ___flsub:
  5420                           	opt stack 25
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;incstack = 0
  5424                           ;incstack = 0
  5425  005488  0100               	movlb	0	; () banked
  5426  00548A  0E80               	movlw	128
  5427  00548C  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5428                           
  5429                           ; BSR set to: 0
  5430  00548E  C076  F01D         	movff	___flsub@f1,?___fladd
  5431  005492  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  5432  005496  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  5433  00549A  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  5434  00549E  C07A  F021         	movff	___flsub@f2,?___fladd+4
  5435  0054A2  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  5436  0054A6  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  5437  0054AA  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  5438  0054AE  EC62  F01F         	call	___fladd	;wreg free
  5439  0054B2  C020  F079         	movff	?___fladd+3,?___flsub+3
  5440  0054B6  C01F  F078         	movff	?___fladd+2,?___flsub+2
  5441  0054BA  C01E  F077         	movff	?___fladd+1,?___flsub+1
  5442  0054BE  C01D  F076         	movff	?___fladd,?___flsub
  5443  0054C2  0012               	return	
  5444  0054C4                     __end_of___flsub:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           postinc0	equ	0xFEE
  5453                           wreg	equ	0xFE8
  5454                           postdec1	equ	0xFE5
  5455                           fsr1h	equ	0xFE2
  5456                           fsr1l	equ	0xFE1
  5457                           indf2	equ	0xFDF
  5458                           postinc2	equ	0xFDE
  5459                           postdec2	equ	0xFDD
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function ___asflmul *****************
  5465 ;; Defined at:
  5466 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  mp              1    wreg     PTR 
  5469 ;;		 -> exp@x(4), 
  5470 ;;  multiplicand    4   22[BANK0 ] PTR 
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;  mp              1   65[COMRAM] PTR 
  5473 ;;		 -> exp@x(4), 
  5474 ;; Return value:  Size  Location     Type
  5475 ;;                  4   22[BANK0 ] PTR 
  5476 ;; Registers used:
  5477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5478 ;; Tracked objects:
  5479 ;;		On entry : F/0
  5480 ;;		On exit  : F/0
  5481 ;;		Unchanged: 0/0
  5482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5483 ;;      Params:         0       4       0       0       0       0       0
  5484 ;;      Locals:         1       0       0       0       0       0       0
  5485 ;;      Temps:          0       0       0       0       0       0       0
  5486 ;;      Totals:         1       4       0       0       0       0       0
  5487 ;;Total ram usage:        5 bytes
  5488 ;; Hardware stack levels used:    1
  5489 ;; Hardware stack levels required when called:    4
  5490 ;; This function calls:
  5491 ;;		___flmul
  5492 ;; This function is called by:
  5493 ;;		_exp
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           	psect	text19
  5498  005206                     __ptext19:
  5499                           	opt stack 0
  5500  005206                     ___asflmul:
  5501                           	opt stack 24
  5502                           
  5503                           ;incstack = 0
  5504                           ;incstack = 0
  5505                           ;___asflmul@mp stored from wreg
  5506  005206  CFE8 F042          	movff	wreg,___asflmul@mp
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;	Return value of ___asflmul is never used
  5510  00520A  5042               	movf	___asflmul@mp,w,c
  5511  00520C  6ED9               	movwf	fsr2l,c
  5512  00520E  6ADA               	clrf	fsr2h,c
  5513  005210  CFDE F060          	movff	postinc2,?___flmul
  5514  005214  CFDE F061          	movff	postinc2,?___flmul+1
  5515  005218  CFDE F062          	movff	postinc2,?___flmul+2
  5516  00521C  CFDE F063          	movff	postinc2,?___flmul+3
  5517  005220  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  5518  005224  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  5519  005228  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  5520  00522C  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  5521  005230  ECBC  F022         	call	___flmul	;wreg free
  5522  005234  5042               	movf	___asflmul@mp,w,c
  5523  005236  6ED9               	movwf	fsr2l,c
  5524  005238  6ADA               	clrf	fsr2h,c
  5525  00523A  0100               	movlb	0	; () banked
  5526  00523C  C060  FFDE         	movff	?___flmul,postinc2
  5527  005240  C061  FFDE         	movff	?___flmul+1,postinc2
  5528  005244  C062  FFDE         	movff	?___flmul+2,postinc2
  5529  005248  C063  FFDD         	movff	?___flmul+3,postdec2
  5530  00524C  06D9               	decf	fsr2l,f,c
  5531  00524E  06D9               	decf	fsr2l,f,c
  5532                           
  5533                           ; BSR set to: 0
  5534  005250  0012               	return	
  5535  005252                     __end_of___asflmul:
  5536                           	opt stack 0
  5537                           tblptru	equ	0xFF8
  5538                           tblptrh	equ	0xFF7
  5539                           tblptrl	equ	0xFF6
  5540                           tablat	equ	0xFF5
  5541                           prodh	equ	0xFF4
  5542                           prodl	equ	0xFF3
  5543                           postinc0	equ	0xFEE
  5544                           wreg	equ	0xFE8
  5545                           postdec1	equ	0xFE5
  5546                           fsr1h	equ	0xFE2
  5547                           fsr1l	equ	0xFE1
  5548                           indf2	equ	0xFDF
  5549                           postinc2	equ	0xFDE
  5550                           postdec2	equ	0xFDD
  5551                           fsr2h	equ	0xFDA
  5552                           fsr2l	equ	0xFD9
  5553                           status	equ	0xFD8
  5554                           
  5555 ;; *************** function ___fldiv *****************
  5556 ;; Defined at:
  5557 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  f1              4   43[COMRAM] PTR 
  5560 ;;  f2              4   47[COMRAM] PTR 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  f3              4   58[COMRAM] PTR 
  5563 ;;  sign            1   64[COMRAM] unsigned char 
  5564 ;;  exp             1   63[COMRAM] unsigned char 
  5565 ;;  cntr            1   62[COMRAM] unsigned char 
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  4   43[COMRAM] unsigned char 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/1
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5575 ;;      Params:         8       0       0       0       0       0       0
  5576 ;;      Locals:        14       0       0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0
  5578 ;;      Totals:        22       0       0       0       0       0       0
  5579 ;;Total ram usage:       22 bytes
  5580 ;; Hardware stack levels used:    1
  5581 ;; Hardware stack levels required when called:    3
  5582 ;; This function calls:
  5583 ;;		___flpack
  5584 ;; This function is called by:
  5585 ;;		_doWork
  5586 ;;		_Celsius2Fahrenheit
  5587 ;;		___asfldiv
  5588 ;;		_exp
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text20
  5593  004AB0                     __ptext20:
  5594                           	opt stack 0
  5595  004AB0                     ___fldiv:
  5596                           	opt stack 26
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;incstack = 0
  5600                           ;incstack = 0
  5601  004AB0  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  5602  004AB2  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  5603  004AB4  6E40               	movwf	___fldiv@exp,c
  5604  004AB6  6640               	tstfsz	___fldiv@exp& (0+255),c
  5605  004AB8  D001               	goto	l11548
  5606  004ABA  D005               	goto	u10010
  5607  004ABC                     l11548:
  5608  004ABC  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  5609  004ABE  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  5610  004AC0  6E41               	movwf	___fldiv@sign,c
  5611  004AC2  6641               	tstfsz	___fldiv@sign& (0+255),c
  5612  004AC4  D005               	goto	l11552
  5613  004AC6                     u10010:
  5614  004AC6  6A2C               	clrf	?___fldiv,c
  5615  004AC8  6A2D               	clrf	?___fldiv+1,c
  5616  004ACA  6A2E               	clrf	?___fldiv+2,c
  5617  004ACC  6A2F               	clrf	?___fldiv+3,c
  5618  004ACE  D043               	goto	l1597
  5619  004AD0                     l11552:
  5620  004AD0  5041               	movf	___fldiv@sign,w,c
  5621  004AD2  0F89               	addlw	137
  5622  004AD4  5E40               	subwf	___fldiv@exp,f,c
  5623  004AD6  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  5624  004ADA  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  5625  004ADC  1A41               	xorwf	___fldiv@sign,f,c
  5626  004ADE  0E80               	movlw	128
  5627  004AE0  1641               	andwf	___fldiv@sign,f,c
  5628  004AE2  8E2E               	bsf	___fldiv@f1+2,7,c
  5629  004AE4  6A2F               	clrf	___fldiv@f1+3,c
  5630  004AE6  8E32               	bsf	___fldiv@f2+2,7,c
  5631  004AE8  6A33               	clrf	___fldiv@f2+3,c
  5632  004AEA  0E20               	movlw	32
  5633  004AEC  6E3F               	movwf	___fldiv@cntr,c
  5634  004AEE                     l11564:
  5635  004AEE  90D8               	bcf	status,0,c
  5636  004AF0  363B               	rlcf	___fldiv@f3,f,c
  5637  004AF2  363C               	rlcf	___fldiv@f3+1,f,c
  5638  004AF4  363D               	rlcf	___fldiv@f3+2,f,c
  5639  004AF6  363E               	rlcf	___fldiv@f3+3,f,c
  5640  004AF8  5030               	movf	___fldiv@f2,w,c
  5641  004AFA  5C2C               	subwf	___fldiv@f1,w,c
  5642  004AFC  5031               	movf	___fldiv@f2+1,w,c
  5643  004AFE  582D               	subwfb	___fldiv@f1+1,w,c
  5644  004B00  5032               	movf	___fldiv@f2+2,w,c
  5645  004B02  582E               	subwfb	___fldiv@f1+2,w,c
  5646  004B04  5033               	movf	___fldiv@f2+3,w,c
  5647  004B06  582F               	subwfb	___fldiv@f1+3,w,c
  5648  004B08  E309               	bnc	l11572
  5649  004B0A  5030               	movf	___fldiv@f2,w,c
  5650  004B0C  5E2C               	subwf	___fldiv@f1,f,c
  5651  004B0E  5031               	movf	___fldiv@f2+1,w,c
  5652  004B10  5A2D               	subwfb	___fldiv@f1+1,f,c
  5653  004B12  5032               	movf	___fldiv@f2+2,w,c
  5654  004B14  5A2E               	subwfb	___fldiv@f1+2,f,c
  5655  004B16  5033               	movf	___fldiv@f2+3,w,c
  5656  004B18  5A2F               	subwfb	___fldiv@f1+3,f,c
  5657  004B1A  803B               	bsf	___fldiv@f3,0,c
  5658  004B1C                     l11572:
  5659  004B1C  90D8               	bcf	status,0,c
  5660  004B1E  362C               	rlcf	___fldiv@f1,f,c
  5661  004B20  362D               	rlcf	___fldiv@f1+1,f,c
  5662  004B22  362E               	rlcf	___fldiv@f1+2,f,c
  5663  004B24  362F               	rlcf	___fldiv@f1+3,f,c
  5664  004B26  2E3F               	decfsz	___fldiv@cntr,f,c
  5665  004B28  D7E2               	goto	l11564
  5666  004B2A  C03B  F00E         	movff	___fldiv@f3,?___flpack
  5667  004B2E  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5668  004B32  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  5669  004B36  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  5670  004B3A  C040  F012         	movff	___fldiv@exp,?___flpack+4
  5671  004B3E  C041  F013         	movff	___fldiv@sign,?___flpack+5
  5672  004B42  ECE9  F023         	call	___flpack	;wreg free
  5673  004B46  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  5674  004B4A  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  5675  004B4E  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  5676  004B52  C00E  F02C         	movff	?___flpack,?___fldiv
  5677  004B56                     l1597:
  5678  004B56  0012               	return	
  5679  004B58                     __end_of___fldiv:
  5680                           	opt stack 0
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           postinc0	equ	0xFEE
  5688                           wreg	equ	0xFE8
  5689                           postdec1	equ	0xFE5
  5690                           fsr1h	equ	0xFE2
  5691                           fsr1l	equ	0xFE1
  5692                           indf2	equ	0xFDF
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function _vscp_doOneSecondWork *****************
  5700 ;; Defined at:
  5701 ;;		line 513 in file "../../vscp_firmware/common/vscp_firmware.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;		None               void
  5708 ;; Registers used:
  5709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5710 ;; Tracked objects:
  5711 ;;		On entry : F/0
  5712 ;;		On exit  : F/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5715 ;;      Params:         0       0       0       0       0       0       0
  5716 ;;      Locals:         0       0       0       0       0       0       0
  5717 ;;      Temps:          0       1       0       0       0       0       0
  5718 ;;      Totals:         0       1       0       0       0       0       0
  5719 ;;Total ram usage:        1 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    8
  5722 ;; This function calls:
  5723 ;;		_vscp_getZone
  5724 ;;		_vscp_getSubzone
  5725 ;;		_vscp_sendHeartBeat
  5726 ;; This function is called by:
  5727 ;;		_main
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text21
  5732  00511A                     __ptext21:
  5733                           	opt stack 0
  5734  00511A                     _vscp_doOneSecondWork:
  5735                           	opt stack 22
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;vscp_firmware.c: 515: ++vscp_second;
  5739                           
  5740                           ;incstack = 0
  5741                           ;incstack = 0
  5742  00511A  2BBB               	incf	_vscp_second& (0+255),f,b
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;vscp_firmware.c: 517: if (vscp_second > 59) {
  5746  00511C  0E3B               	movlw	59
  5747  00511E  65BB               	cpfsgt	_vscp_second& (0+255),b
  5748  005120  D00C               	goto	l10196
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;vscp_firmware.c: 518: vscp_second = 0;
  5752  005122  6BBB               	clrf	_vscp_second& (0+255),b
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;vscp_firmware.c: 519: vscp_minute++;
  5756  005124  2BB8               	incf	_vscp_minute& (0+255),f,b
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
  5760  005126  51BA               	movf	_vscp_node_state& (0+255),w,b
  5761  005128  0A03               	xorlw	3
  5762  00512A  E107               	bnz	l10196
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
  5766                           ;vscp_firmware.c: 524: vscp_getSubzone());
  5767  00512C  ECC9  F02C         	call	_vscp_getSubzone	;wreg free
  5768  005130  6E44               	movwf	?_vscp_sendHeartBeat,c
  5769  005132  ECCE  F02C         	call	_vscp_getZone	;wreg free
  5770  005136  EC87  F02B         	call	_vscp_sendHeartBeat
  5771  00513A                     l10196:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;vscp_firmware.c: 525: }
  5775                           ;vscp_firmware.c: 526: }
  5776                           ;vscp_firmware.c: 528: if (vscp_minute > 59) {
  5777  00513A  0E3B               	movlw	59
  5778  00513C  65B8               	cpfsgt	_vscp_minute& (0+255),b
  5779  00513E  D003               	goto	l10202
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;vscp_firmware.c: 529: vscp_minute = 0;
  5783  005140  6BB8               	clrf	_vscp_minute& (0+255),b
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;vscp_firmware.c: 530: vscp_hour++;
  5787  005142  0101               	movlb	1	; () banked
  5788  005144  2B1E               	incf	_vscp_hour& (0+255),f,b
  5789  005146                     l10202:
  5790                           
  5791                           ;vscp_firmware.c: 531: }
  5792                           ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
  5793  005146  0E17               	movlw	23
  5794  005148  0101               	movlb	1	; () banked
  5795  00514A  651E               	cpfsgt	_vscp_hour& (0+255),b
  5796  00514C  D001               	goto	l10206
  5797                           
  5798                           ; BSR set to: 1
  5799  00514E  6B1E               	clrf	_vscp_hour& (0+255),b
  5800  005150                     l10206:
  5801                           
  5802                           ; BSR set to: 1
  5803                           ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
  5804  005150  0100               	movlb	0	; () banked
  5805  005152  51BA               	movf	_vscp_node_state& (0+255),w,b
  5806  005154  0A03               	xorlw	3
  5807  005156  E109               	bnz	l1094
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;vscp_firmware.c: 538: vscp_guid_reset++;
  5811  005158  2A4D               	incf	_vscp_guid_reset,f,c
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
  5815  00515A  C04D  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5816  00515E  0E0F               	movlw	15
  5817  005160  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5818  005162  0E02               	movlw	2
  5819  005164  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5820  005166  B0D8               	btfsc	status,0,c
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;vscp_firmware.c: 540: vscp_guid_reset = 0;
  5824  005168  6A4D               	clrf	_vscp_guid_reset,c
  5825  00516A                     l1094:
  5826                           
  5827                           ; BSR set to: 0
  5828  00516A  0012               	return	
  5829  00516C                     __end_of_vscp_doOneSecondWork:
  5830                           	opt stack 0
  5831                           tblptru	equ	0xFF8
  5832                           tblptrh	equ	0xFF7
  5833                           tblptrl	equ	0xFF6
  5834                           tablat	equ	0xFF5
  5835                           prodh	equ	0xFF4
  5836                           prodl	equ	0xFF3
  5837                           postinc0	equ	0xFEE
  5838                           wreg	equ	0xFE8
  5839                           postdec1	equ	0xFE5
  5840                           fsr1h	equ	0xFE2
  5841                           fsr1l	equ	0xFE1
  5842                           indf2	equ	0xFDF
  5843                           postinc2	equ	0xFDE
  5844                           postdec2	equ	0xFDD
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function _vscp_sendHeartBeat *****************
  5850 ;; Defined at:
  5851 ;;		line 367 in file "../../vscp_firmware/common/vscp_firmware.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;  zone            1    wreg     unsigned char 
  5854 ;;  subzone         1   67[COMRAM] unsigned char 
  5855 ;; Auto vars:     Size  Location     Type
  5856 ;;  zone            1   68[COMRAM] unsigned char 
  5857 ;; Return value:  Size  Location     Type
  5858 ;;		None               void
  5859 ;; Registers used:
  5860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5861 ;; Tracked objects:
  5862 ;;		On entry : 0/0
  5863 ;;		On exit  : F/0
  5864 ;;		Unchanged: 0/0
  5865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5866 ;;      Params:         1       0       0       0       0       0       0
  5867 ;;      Locals:         1       0       0       0       0       0       0
  5868 ;;      Temps:          0       0       0       0       0       0       0
  5869 ;;      Totals:         2       0       0       0       0       0       0
  5870 ;;Total ram usage:        2 bytes
  5871 ;; Hardware stack levels used:    1
  5872 ;; Hardware stack levels required when called:    7
  5873 ;; This function calls:
  5874 ;;		_vscp_sendEvent
  5875 ;; This function is called by:
  5876 ;;		_vscp_doOneSecondWork
  5877 ;; This function uses a non-reentrant model
  5878 ;;
  5879                           
  5880                           	psect	text22
  5881  00570E                     __ptext22:
  5882                           	opt stack 0
  5883  00570E                     _vscp_sendHeartBeat:
  5884                           	opt stack 22
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;incstack = 0
  5888                           ;incstack = 0
  5889                           ;vscp_sendHeartBeat@zone stored from wreg
  5890  00570E  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5891                           
  5892                           ;vscp_firmware.c: 368: vscp_omsg.flags = 0x80 + 3;
  5893  005712  0E83               	movlw	131
  5894  005714  0100               	movlb	0	; () banked
  5895  005716  6FCA               	movwf	_vscp_omsg& (0+255),b
  5896                           
  5897                           ;vscp_firmware.c: 369: vscp_omsg.priority = 0x07;
  5898  005718  0E07               	movlw	7
  5899  00571A  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  5900                           
  5901                           ;vscp_firmware.c: 370: vscp_omsg.vscp_class = 20;
  5902  00571C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  5903  00571E  0E14               	movlw	20
  5904  005720  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  5905                           
  5906                           ;vscp_firmware.c: 371: vscp_omsg.vscp_type = 9;
  5907  005722  0E09               	movlw	9
  5908  005724  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;vscp_firmware.c: 372: vscp_omsg.data[ 0 ] = 0;
  5912  005726  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;vscp_firmware.c: 373: vscp_omsg.data[ 1 ] = zone;
  5916  005728  C045  F0D0         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;vscp_firmware.c: 374: vscp_omsg.data[ 2 ] = subzone;
  5920  00572C  C044  F0D1         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;vscp_firmware.c: 377: vscp_sendEvent();
  5924  005730  EF73  F02B         	goto	_vscp_sendEvent	;wreg free
  5925  005734                     __end_of_vscp_sendHeartBeat:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           postinc0	equ	0xFEE
  5934                           wreg	equ	0xFE8
  5935                           postdec1	equ	0xFE5
  5936                           fsr1h	equ	0xFE2
  5937                           fsr1l	equ	0xFE1
  5938                           indf2	equ	0xFDF
  5939                           postinc2	equ	0xFDE
  5940                           postdec2	equ	0xFDD
  5941                           fsr2h	equ	0xFDA
  5942                           fsr2l	equ	0xFD9
  5943                           status	equ	0xFD8
  5944                           
  5945 ;; *************** function _vscp_getSubzone *****************
  5946 ;; Defined at:
  5947 ;;		line 2723 in file "../main.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;		None
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;		None
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  1    wreg      unsigned char 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, cstack
  5956 ;; Tracked objects:
  5957 ;;		On entry : F/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5961 ;;      Params:         0       0       0       0       0       0       0
  5962 ;;      Locals:         0       0       0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0
  5964 ;;      Totals:         0       0       0       0       0       0       0
  5965 ;;Total ram usage:        0 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    3
  5968 ;; This function calls:
  5969 ;;		_readEEPROM
  5970 ;; This function is called by:
  5971 ;;		_vscp_doOneSecondWork
  5972 ;; This function uses a non-reentrant model
  5973 ;;
  5974                           
  5975                           	psect	text23
  5976  005992                     __ptext23:
  5977                           	opt stack 0
  5978  005992                     _vscp_getSubzone:
  5979                           	opt stack 26
  5980                           
  5981                           ; BSR set to: 0
  5982                           ;main.c: 2724: return readEEPROM(0x42);
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;incstack = 0
  5986                           ;incstack = 0
  5987  005992  6A0F               	clrf	?_readEEPROM+1,c
  5988  005994  0E42               	movlw	66
  5989  005996  6E0E               	movwf	?_readEEPROM,c
  5990  005998  EF9D  F02C         	goto	_readEEPROM	;wreg free
  5991  00599C                     __end_of_vscp_getSubzone:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           postinc0	equ	0xFEE
  6000                           wreg	equ	0xFE8
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           
  6011 ;; *************** function _vscp_getZone *****************
  6012 ;; Defined at:
  6013 ;;		line 2714 in file "../main.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      unsigned char 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6027 ;;      Params:         0       0       0       0       0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0
  6030 ;;      Totals:         0       0       0       0       0       0       0
  6031 ;;Total ram usage:        0 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    3
  6034 ;; This function calls:
  6035 ;;		_readEEPROM
  6036 ;; This function is called by:
  6037 ;;		_vscp_doOneSecondWork
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text24
  6042  00599C                     __ptext24:
  6043                           	opt stack 0
  6044  00599C                     _vscp_getZone:
  6045                           	opt stack 26
  6046                           
  6047                           ;main.c: 2715: return readEEPROM(0x41);
  6048                           
  6049                           ;incstack = 0
  6050                           ;incstack = 0
  6051  00599C  6A0F               	clrf	?_readEEPROM+1,c
  6052  00599E  0E41               	movlw	65
  6053  0059A0  6E0E               	movwf	?_readEEPROM,c
  6054  0059A2  EF9D  F02C         	goto	_readEEPROM	;wreg free
  6055  0059A6                     __end_of_vscp_getZone:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           postdec1	equ	0xFE5
  6066                           fsr1h	equ	0xFE2
  6067                           fsr1l	equ	0xFE1
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function _doOneSecondWork *****************
  6076 ;; Defined at:
  6077 ;;		line 698 in file "../main.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  i               1   42[BANK0 ] unsigned char 
  6082 ;;  tmp             1   41[BANK0 ] unsigned char 
  6083 ;; Return value:  Size  Location     Type
  6084 ;;		None               void
  6085 ;; Registers used:
  6086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : F/1
  6089 ;;		On exit  : F/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6092 ;;      Params:         0       0       0       0       0       0       0
  6093 ;;      Locals:         0       2       0       0       0       0       0
  6094 ;;      Temps:          0       2       0       0       0       0       0
  6095 ;;      Totals:         0       4       0       0       0       0       0
  6096 ;;Total ram usage:        4 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    8
  6099 ;; This function calls:
  6100 ;;		_readEEPROM
  6101 ;;		_vscp_sendEvent
  6102 ;;		_sendTempEvent
  6103 ;; This function is called by:
  6104 ;;		_main
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text25
  6109  003642                     __ptext25:
  6110                           	opt stack 0
  6111  003642                     _doOneSecondWork:
  6112                           	opt stack 22
  6113                           
  6114                           ; BSR set to: 1
  6115                           ;main.c: 700: uint8_t tmp;
  6116                           ;main.c: 701: uint8_t i;
  6117                           ;main.c: 704: if ( 0x03 == vscp_node_state ) {
  6118                           
  6119                           ;incstack = 0
  6120                           ;incstack = 0
  6121  003642  0100               	movlb	0	; () banked
  6122  003644  51BA               	movf	_vscp_node_state& (0+255),w,b
  6123  003646  0A03               	xorlw	3
  6124  003648  E001 D0FE          	bnz	l245
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;main.c: 706: for (i = 0; i < 6; i++) {
  6128  00364C  6B8A               	clrf	doOneSecondWork@i& (0+255),b
  6129  00364E                     l10116:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;main.c: 709: tmp = readEEPROM(0x49 + i);
  6133  00364E  0E49               	movlw	73
  6134  003650  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6135  003652  6E0E               	movwf	?_readEEPROM,c
  6136  003654  6A0F               	clrf	?_readEEPROM+1,c
  6137  003656  0E00               	movlw	0
  6138  003658  220F               	addwfc	?_readEEPROM+1,f,c
  6139  00365A  EC9D  F02C         	call	_readEEPROM	;wreg free
  6140  00365E  0100               	movlb	0	; () banked
  6141  003660  6F89               	movwf	doOneSecondWork@tmp& (0+255),b
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;main.c: 710: if (tmp && (seconds_temp[i] > tmp)) {
  6145  003662  5189               	movf	doOneSecondWork@tmp& (0+255),w,b
  6146  003664  E016               	bz	l10126
  6147                           
  6148                           ; BSR set to: 0
  6149  003666  0E0C               	movlw	low _seconds_temp
  6150  003668  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6151  00366A  6ED9               	movwf	fsr2l,c
  6152  00366C  6ADA               	clrf	fsr2h,c
  6153  00366E  0E01               	movlw	high _seconds_temp
  6154  003670  22DA               	addwfc	fsr2h,f,c
  6155  003672  50DF               	movf	indf2,w,c
  6156  003674  6189               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6157  003676  D00D               	goto	l10126
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;main.c: 713: if ( sendTempEvent( i ) ) {
  6161  003678  518A               	movf	doOneSecondWork@i& (0+255),w,b
  6162  00367A  EC2B  F027         	call	_sendTempEvent
  6163  00367E  0900               	iorlw	0
  6164  003680  E008               	bz	l10126
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;main.c: 714: seconds_temp[i] = 0;
  6168  003682  0E0C               	movlw	low _seconds_temp
  6169  003684  0100               	movlb	0	; () banked
  6170  003686  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6171  003688  6ED9               	movwf	fsr2l,c
  6172  00368A  6ADA               	clrf	fsr2h,c
  6173  00368C  0E01               	movlw	high _seconds_temp
  6174  00368E  22DA               	addwfc	fsr2h,f,c
  6175  003690  6ADF               	clrf	indf2,c
  6176  003692                     l10126:
  6177                           
  6178                           ;main.c: 715: }
  6179                           ;main.c: 717: }
  6180                           ;main.c: 720: if (0x80 & readEEPROM(0x43 + i)) {
  6181  003692  0E43               	movlw	67
  6182  003694  0100               	movlb	0	; () banked
  6183  003696  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6184  003698  6E0E               	movwf	?_readEEPROM,c
  6185  00369A  6A0F               	clrf	?_readEEPROM+1,c
  6186  00369C  0E00               	movlw	0
  6187  00369E  220F               	addwfc	?_readEEPROM+1,f,c
  6188  0036A0  EC9D  F02C         	call	_readEEPROM	;wreg free
  6189  0036A4  0100               	movlb	0	; () banked
  6190  0036A6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6191  0036A8  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  6192  0036AA  D0CA               	goto	l10180
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;main.c: 723: if (low_alarm & (1 << i)) {
  6196  0036AC  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6197  0036B0  0E01               	movlw	1
  6198  0036B2  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6199  0036B4  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6200  0036B6  D002               	goto	u8254
  6201  0036B8                     u8255:
  6202  0036B8  90D8               	bcf	status,0,c
  6203  0036BA  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6204  0036BC                     u8254:
  6205  0036BC  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6206  0036BE  D7FC               	goto	u8255
  6207  0036C0  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6208  0036C2  15B5               	andwf	_low_alarm& (0+255),w,b
  6209  0036C4  E058               	bz	l10154
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;main.c: 726: if (readEEPROM(i + 0x43) & (1<<3)) {
  6213  0036C6  0E43               	movlw	67
  6214  0036C8  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6215  0036CA  6E0E               	movwf	?_readEEPROM,c
  6216  0036CC  6A0F               	clrf	?_readEEPROM+1,c
  6217  0036CE  0E00               	movlw	0
  6218  0036D0  220F               	addwfc	?_readEEPROM+1,f,c
  6219  0036D2  EC9D  F02C         	call	_readEEPROM	;wreg free
  6220  0036D6  0100               	movlb	0	; () banked
  6221  0036D8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6222  0036DA  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  6223  0036DC  D04C               	goto	l10154
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;main.c: 729: vscp_omsg.priority = 0x00;
  6227  0036DE  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;main.c: 730: vscp_omsg.flags = 0x80 + 3;
  6231  0036E0  0E83               	movlw	131
  6232  0036E2  6FCA               	movwf	_vscp_omsg& (0+255),b
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;main.c: 732: if (readEEPROM(i + 0x43) & (1<<5)) {
  6236  0036E4  0E43               	movlw	67
  6237  0036E6  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6238  0036E8  6E0E               	movwf	?_readEEPROM,c
  6239  0036EA  6A0F               	clrf	?_readEEPROM+1,c
  6240  0036EC  0E00               	movlw	0
  6241  0036EE  220F               	addwfc	?_readEEPROM+1,f,c
  6242  0036F0  EC9D  F02C         	call	_readEEPROM	;wreg free
  6243  0036F4  0100               	movlb	0	; () banked
  6244  0036F6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6245  0036F8  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6246  0036FA  D016               	goto	l10144
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;main.c: 734: if (readEEPROM(i + 0x43) & (1<<6)) {
  6250  0036FC  0E43               	movlw	67
  6251  0036FE  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6252  003700  6E0E               	movwf	?_readEEPROM,c
  6253  003702  6A0F               	clrf	?_readEEPROM+1,c
  6254  003704  0E00               	movlw	0
  6255  003706  220F               	addwfc	?_readEEPROM+1,f,c
  6256  003708  EC9D  F02C         	call	_readEEPROM	;wreg free
  6257  00370C  0100               	movlb	0	; () banked
  6258  00370E  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6259  003710  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6260  003712  D005               	goto	l10142
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;main.c: 735: vscp_omsg.vscp_class = 30;
  6264  003714  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6265  003716  0E1E               	movlw	30
  6266  003718  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6267                           
  6268                           ;main.c: 736: vscp_omsg.vscp_type = 5;
  6269  00371A  0E05               	movlw	5
  6270  00371C  D009               	goto	L6
  6271  00371E                     l10142:
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;main.c: 738: else {
  6275                           ;main.c: 739: vscp_omsg.vscp_class = 30;
  6276  00371E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6277  003720  0E1E               	movlw	30
  6278  003722  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6279                           
  6280                           ;main.c: 740: vscp_omsg.vscp_type = 6;
  6281  003724  0E06               	movlw	6
  6282  003726  D004               	goto	L6
  6283  003728                     l10144:
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;main.c: 744: else {
  6287                           ;main.c: 746: vscp_omsg.vscp_class = 1;
  6288  003728  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6289  00372A  0E01               	movlw	1
  6290  00372C  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6291                           
  6292                           ;main.c: 747: vscp_omsg.vscp_type = 2;
  6293  00372E  0E02               	movlw	2
  6294  003730                     L6:
  6295  003730  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 748: }
  6299                           ;main.c: 750: vscp_omsg.data[ 0 ] = i;
  6300  003732  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;main.c: 751: vscp_omsg.data[ 1 ] =
  6304                           ;main.c: 752: readEEPROM(2 * i + 0x73);
  6305  003736  90D8               	bcf	status,0,c
  6306  003738  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6307  00373A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6308  00373C  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6309  00373E  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6310  003740  0E73               	movlw	115
  6311  003742  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6312  003744  6E0E               	movwf	?_readEEPROM,c
  6313  003746  0E00               	movlw	0
  6314  003748  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6315  00374A  6E0F               	movwf	?_readEEPROM+1,c
  6316  00374C  EC9D  F02C         	call	_readEEPROM	;wreg free
  6317  003750  0100               	movlb	0	; () banked
  6318  003752  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;main.c: 753: vscp_omsg.data[ 2 ] =
  6322                           ;main.c: 754: readEEPROM(2 * i + 0x74);
  6323  003754  90D8               	bcf	status,0,c
  6324  003756  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6325  003758  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6326  00375A  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6327  00375C  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6328  00375E  0E74               	movlw	116
  6329  003760  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6330  003762  6E0E               	movwf	?_readEEPROM,c
  6331  003764  0E00               	movlw	0
  6332  003766  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6333  003768  6E0F               	movwf	?_readEEPROM+1,c
  6334  00376A  EC9D  F02C         	call	_readEEPROM	;wreg free
  6335  00376E  0100               	movlb	0	; () banked
  6336  003770  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;main.c: 759: vscp_sendEvent();
  6340  003772  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  6341  003776                     l10154:
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;main.c: 761: }
  6345                           ;main.c: 762: }
  6346                           ;main.c: 765: if (high_alarm & (1 << i)) {
  6347  003776  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6348  00377A  0E01               	movlw	1
  6349  00377C  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6350  00377E  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6351  003780  D002               	goto	u8304
  6352  003782                     u8305:
  6353  003782  90D8               	bcf	status,0,c
  6354  003784  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6355  003786                     u8304:
  6356  003786  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6357  003788  D7FC               	goto	u8305
  6358  00378A  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6359  00378C  15B4               	andwf	_high_alarm& (0+255),w,b
  6360  00378E  E058               	bz	l10180
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;main.c: 768: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6364  003790  0E43               	movlw	67
  6365  003792  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6366  003794  6E0E               	movwf	?_readEEPROM,c
  6367  003796  6A0F               	clrf	?_readEEPROM+1,c
  6368  003798  0E00               	movlw	0
  6369  00379A  220F               	addwfc	?_readEEPROM+1,f,c
  6370  00379C  EC9D  F02C         	call	_readEEPROM	;wreg free
  6371  0037A0  0100               	movlb	0	; () banked
  6372  0037A2  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6373  0037A4  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6374  0037A6  D04C               	goto	l10180
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 770: vscp_omsg.priority = 0x00;
  6378  0037A8  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;main.c: 771: vscp_omsg.flags = 0x80 + 3;
  6382  0037AA  0E83               	movlw	131
  6383  0037AC  6FCA               	movwf	_vscp_omsg& (0+255),b
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;main.c: 773: if (readEEPROM(i + 0x43) & (1<<5)) {
  6387  0037AE  0E43               	movlw	67
  6388  0037B0  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6389  0037B2  6E0E               	movwf	?_readEEPROM,c
  6390  0037B4  6A0F               	clrf	?_readEEPROM+1,c
  6391  0037B6  0E00               	movlw	0
  6392  0037B8  220F               	addwfc	?_readEEPROM+1,f,c
  6393  0037BA  EC9D  F02C         	call	_readEEPROM	;wreg free
  6394  0037BE  0100               	movlb	0	; () banked
  6395  0037C0  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6396  0037C2  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6397  0037C4  D016               	goto	l10170
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;main.c: 774: if (readEEPROM(i + 0x43) & (1<<6)) {
  6401  0037C6  0E43               	movlw	67
  6402  0037C8  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6403  0037CA  6E0E               	movwf	?_readEEPROM,c
  6404  0037CC  6A0F               	clrf	?_readEEPROM+1,c
  6405  0037CE  0E00               	movlw	0
  6406  0037D0  220F               	addwfc	?_readEEPROM+1,f,c
  6407  0037D2  EC9D  F02C         	call	_readEEPROM	;wreg free
  6408  0037D6  0100               	movlb	0	; () banked
  6409  0037D8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6410  0037DA  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6411  0037DC  D005               	goto	l10168
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;main.c: 775: vscp_omsg.vscp_class = 30;
  6415  0037DE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6416  0037E0  0E1E               	movlw	30
  6417  0037E2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6418                           
  6419                           ;main.c: 776: vscp_omsg.vscp_type = 6;
  6420  0037E4  0E06               	movlw	6
  6421  0037E6  D009               	goto	L7
  6422  0037E8                     l10168:
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;main.c: 778: else {
  6426                           ;main.c: 779: vscp_omsg.vscp_class = 30;
  6427  0037E8  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6428  0037EA  0E1E               	movlw	30
  6429  0037EC  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6430                           
  6431                           ;main.c: 780: vscp_omsg.vscp_type = 5;
  6432  0037EE  0E05               	movlw	5
  6433  0037F0  D004               	goto	L7
  6434  0037F2                     l10170:
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;main.c: 783: else {
  6438                           ;main.c: 785: vscp_omsg.vscp_class = 1;
  6439  0037F2  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6440  0037F4  0E01               	movlw	1
  6441  0037F6  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6442                           
  6443                           ;main.c: 786: vscp_omsg.vscp_type = 2;
  6444  0037F8  0E02               	movlw	2
  6445  0037FA                     L7:
  6446  0037FA  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;main.c: 787: }
  6450                           ;main.c: 789: vscp_omsg.data[ 0 ] = i;
  6451  0037FC  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;main.c: 790: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6455                           ;main.c: 791: 0x73);
  6456  003800  90D8               	bcf	status,0,c
  6457  003802  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6458  003804  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6459  003806  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6460  003808  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6461  00380A  0E73               	movlw	115
  6462  00380C  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6463  00380E  6E0E               	movwf	?_readEEPROM,c
  6464  003810  0E00               	movlw	0
  6465  003812  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6466  003814  6E0F               	movwf	?_readEEPROM+1,c
  6467  003816  EC9D  F02C         	call	_readEEPROM	;wreg free
  6468  00381A  0100               	movlb	0	; () banked
  6469  00381C  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;main.c: 792: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6473                           ;main.c: 793: 0x74);
  6474  00381E  90D8               	bcf	status,0,c
  6475  003820  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6476  003822  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6477  003824  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6478  003826  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6479  003828  0E74               	movlw	116
  6480  00382A  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6481  00382C  6E0E               	movwf	?_readEEPROM,c
  6482  00382E  0E00               	movlw	0
  6483  003830  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6484  003832  6E0F               	movwf	?_readEEPROM+1,c
  6485  003834  EC9D  F02C         	call	_readEEPROM	;wreg free
  6486  003838  0100               	movlb	0	; () banked
  6487  00383A  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;main.c: 798: vscp_sendEvent();
  6491  00383C  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  6492  003840                     l10180:
  6493                           
  6494                           ; BSR set to: 0
  6495  003840  2B8A               	incf	doOneSecondWork@i& (0+255),f,b
  6496                           
  6497                           ; BSR set to: 0
  6498  003842  0E05               	movlw	5
  6499  003844  658A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6500  003846  D703               	goto	l10116
  6501  003848                     l245:
  6502                           
  6503                           ; BSR set to: 0
  6504  003848  0012               	return	
  6505  00384A                     __end_of_doOneSecondWork:
  6506                           	opt stack 0
  6507                           tblptru	equ	0xFF8
  6508                           tblptrh	equ	0xFF7
  6509                           tblptrl	equ	0xFF6
  6510                           tablat	equ	0xFF5
  6511                           prodh	equ	0xFF4
  6512                           prodl	equ	0xFF3
  6513                           postinc0	equ	0xFEE
  6514                           wreg	equ	0xFE8
  6515                           postdec1	equ	0xFE5
  6516                           fsr1h	equ	0xFE2
  6517                           fsr1l	equ	0xFE1
  6518                           indf2	equ	0xFDF
  6519                           postinc2	equ	0xFDE
  6520                           postdec2	equ	0xFDD
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8
  6524                           
  6525 ;; *************** function _vscp_error *****************
  6526 ;; Defined at:
  6527 ;;		line 188 in file "../../vscp_firmware/common/vscp_firmware.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;		None
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;		None
  6532 ;; Return value:  Size  Location     Type
  6533 ;;		None               void
  6534 ;; Registers used:
  6535 ;;		None
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6541 ;;      Params:         0       0       0       0       0       0       0
  6542 ;;      Locals:         0       0       0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0
  6544 ;;      Totals:         0       0       0       0       0       0       0
  6545 ;;Total ram usage:        0 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    2
  6548 ;; This function calls:
  6549 ;;		Nothing
  6550 ;; This function is called by:
  6551 ;;		_main
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text26
  6556  0059D6                     __ptext26:
  6557                           	opt stack 0
  6558  0059D6                     _vscp_error:
  6559                           	opt stack 28
  6560                           
  6561                           ;vscp_firmware.c: 189: vscp_initledfunc = 0x00;
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;incstack = 0
  6565                           ;incstack = 0
  6566  0059D6  6A4E               	clrf	_vscp_initledfunc,c
  6567  0059D8  0012               	return	
  6568  0059DA                     __end_of_vscp_error:
  6569                           	opt stack 0
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           postinc0	equ	0xFEE
  6577                           wreg	equ	0xFE8
  6578                           postdec1	equ	0xFE5
  6579                           fsr1h	equ	0xFE2
  6580                           fsr1l	equ	0xFE1
  6581                           indf2	equ	0xFDF
  6582                           postinc2	equ	0xFDE
  6583                           postdec2	equ	0xFDD
  6584                           fsr2h	equ	0xFDA
  6585                           fsr2l	equ	0xFD9
  6586                           status	equ	0xFD8
  6587                           
  6588 ;; *************** function _handle_sync *****************
  6589 ;; Defined at:
  6590 ;;		line 1237 in file "../main.c"
  6591 ;; Parameters:    Size  Location     Type
  6592 ;;		None
  6593 ;; Auto vars:     Size  Location     Type
  6594 ;;  i               1   41[BANK0 ] unsigned char 
  6595 ;; Return value:  Size  Location     Type
  6596 ;;		None               void
  6597 ;; Registers used:
  6598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6599 ;; Tracked objects:
  6600 ;;		On entry : F/0
  6601 ;;		On exit  : F/0
  6602 ;;		Unchanged: 0/0
  6603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6604 ;;      Params:         0       0       0       0       0       0       0
  6605 ;;      Locals:         0       1       0       0       0       0       0
  6606 ;;      Temps:          0       2       0       0       0       0       0
  6607 ;;      Totals:         0       3       0       0       0       0       0
  6608 ;;Total ram usage:        3 bytes
  6609 ;; Hardware stack levels used:    1
  6610 ;; Hardware stack levels required when called:    8
  6611 ;; This function calls:
  6612 ;;		_readEEPROM
  6613 ;;		_sendTempEvent
  6614 ;; This function is called by:
  6615 ;;		_main
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text27
  6620  004EDA                     __ptext27:
  6621                           	opt stack 0
  6622  004EDA                     _handle_sync:
  6623                           	opt stack 22
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;main.c: 1238: uint8_t i;
  6627                           ;main.c: 1241: for (i = 0; i < 6; i++) {
  6628                           
  6629                           ;incstack = 0
  6630                           ;incstack = 0
  6631  004EDA  6B89               	clrf	handle_sync@i& (0+255),b
  6632  004EDC                     l10090:
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;main.c: 1243: if ((0xff != vscp_imsg.data[ 1 ] ||
  6636                           ;main.c: 1244: (readEEPROM(2 * i + 0x73) != vscp_imsg.data[ 1 ])) &&
  6637                           ;main.c: 1245: (0xff != vscp_imsg.data[ 2 ] ||
  6638                           ;main.c: 1246: (readEEPROM(2 * i + 0x74) != vscp_imsg.data[ 2 ]))) {
  6639  004EDC  29C3               	incf	(_vscp_imsg+7)& (0+255),w,b
  6640  004EDE  E110               	bnz	l10094
  6641                           
  6642                           ; BSR set to: 0
  6643  004EE0  90D8               	bcf	status,0,c
  6644  004EE2  3589               	rlcf	handle_sync@i& (0+255),w,b
  6645  004EE4  6F87               	movwf	??_handle_sync& (0+255),b
  6646  004EE6  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6647  004EE8  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6648  004EEA  0E73               	movlw	115
  6649  004EEC  2587               	addwf	??_handle_sync& (0+255),w,b
  6650  004EEE  6E0E               	movwf	?_readEEPROM,c
  6651  004EF0  0E00               	movlw	0
  6652  004EF2  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6653  004EF4  6E0F               	movwf	?_readEEPROM+1,c
  6654  004EF6  EC9D  F02C         	call	_readEEPROM	;wreg free
  6655  004EFA  0100               	movlb	0	; () banked
  6656  004EFC  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6657  004EFE  E028               	bz	l10104
  6658  004F00                     l10094:
  6659                           
  6660                           ; BSR set to: 0
  6661  004F00  29C4               	incf	(_vscp_imsg+8)& (0+255),w,b
  6662  004F02  E110               	bnz	l295
  6663                           
  6664                           ; BSR set to: 0
  6665  004F04  90D8               	bcf	status,0,c
  6666  004F06  3589               	rlcf	handle_sync@i& (0+255),w,b
  6667  004F08  6F87               	movwf	??_handle_sync& (0+255),b
  6668  004F0A  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6669  004F0C  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6670  004F0E  0E74               	movlw	116
  6671  004F10  2587               	addwf	??_handle_sync& (0+255),w,b
  6672  004F12  6E0E               	movwf	?_readEEPROM,c
  6673  004F14  0E00               	movlw	0
  6674  004F16  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6675  004F18  6E0F               	movwf	?_readEEPROM+1,c
  6676  004F1A  EC9D  F02C         	call	_readEEPROM	;wreg free
  6677  004F1E  0100               	movlb	0	; () banked
  6678  004F20  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6679  004F22  E016               	bz	l10104
  6680  004F24                     l295:
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;main.c: 1249: timeout_clock = 0;
  6684  004F24  0101               	movlb	1	; () banked
  6685  004F26  6B16               	clrf	_timeout_clock& (0+255),b
  6686  004F28  6B17               	clrf	(_timeout_clock+1)& (0+255),b
  6687  004F2A  6B18               	clrf	(_timeout_clock+2)& (0+255),b
  6688  004F2C  6B19               	clrf	(_timeout_clock+3)& (0+255),b
  6689                           
  6690                           ;main.c: 1250: while (!sendTempEvent(i)) {
  6691  004F2E  D00A               	goto	l10102
  6692  004F30                     l10098:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;main.c: 1251: if (timeout_clock > 1000) break;
  6696  004F30  0EE9               	movlw	233
  6697  004F32  0101               	movlb	1	; () banked
  6698  004F34  5D16               	subwf	_timeout_clock& (0+255),w,b
  6699  004F36  0E03               	movlw	3
  6700  004F38  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b
  6701  004F3A  0E00               	movlw	0
  6702  004F3C  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b
  6703  004F3E  0E00               	movlw	0
  6704  004F40  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b
  6705  004F42  E206               	bc	l10104
  6706  004F44                     l10102:
  6707                           
  6708                           ; BSR set to: 1
  6709  004F44  0100               	movlb	0	; () banked
  6710  004F46  5189               	movf	handle_sync@i& (0+255),w,b
  6711  004F48  EC2B  F027         	call	_sendTempEvent
  6712  004F4C  0900               	iorlw	0
  6713  004F4E  E0F0               	bz	l10098
  6714  004F50                     l10104:
  6715  004F50  0100               	movlb	0	; () banked
  6716  004F52  2B89               	incf	handle_sync@i& (0+255),f,b
  6717                           
  6718                           ; BSR set to: 0
  6719  004F54  0E05               	movlw	5
  6720  004F56  6589               	cpfsgt	handle_sync@i& (0+255),b
  6721  004F58  D7C1               	goto	l10090
  6722                           
  6723                           ; BSR set to: 0
  6724  004F5A  0C05               	retlw	5
  6725  004F5C                     __end_of_handle_sync:
  6726                           	opt stack 0
  6727                           tblptru	equ	0xFF8
  6728                           tblptrh	equ	0xFF7
  6729                           tblptrl	equ	0xFF6
  6730                           tablat	equ	0xFF5
  6731                           prodh	equ	0xFF4
  6732                           prodl	equ	0xFF3
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           postdec1	equ	0xFE5
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _sendTempEvent *****************
  6746 ;; Defined at:
  6747 ;;		line 811 in file "../main.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  i               1    wreg     unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  i               1   38[BANK0 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  1    wreg      unsigned char 
  6754 ;; Registers used:
  6755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : F/0
  6758 ;;		On exit  : F/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6761 ;;      Params:         0       0       0       0       0       0       0
  6762 ;;      Locals:         0       1       0       0       0       0       0
  6763 ;;      Temps:          0       1       0       0       0       0       0
  6764 ;;      Totals:         0       2       0       0       0       0       0
  6765 ;;Total ram usage:        2 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    7
  6768 ;; This function calls:
  6769 ;;		_readEEPROM
  6770 ;;		_vscp_sendEvent
  6771 ;;		_setEventData
  6772 ;; This function is called by:
  6773 ;;		_doOneSecondWork
  6774 ;;		_handle_sync
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           	psect	text28
  6779  004E56                     __ptext28:
  6780                           	opt stack 0
  6781  004E56                     _sendTempEvent:
  6782                           	opt stack 22
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;incstack = 0
  6786                           ;incstack = 0
  6787                           ;sendTempEvent@i stored from wreg
  6788  004E56  CFE8 F086          	movff	wreg,sendTempEvent@i
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;main.c: 812: vscp_omsg.priority = 0x03;
  6792  004E5A  0E03               	movlw	3
  6793  004E5C  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  6794                           
  6795                           ;main.c: 813: vscp_omsg.flags = 0x80 + 4;
  6796  004E5E  0E84               	movlw	132
  6797  004E60  6FCA               	movwf	_vscp_omsg& (0+255),b
  6798                           
  6799                           ;main.c: 814: vscp_omsg.vscp_class = 10;
  6800  004E62  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6801  004E64  0E0A               	movlw	10
  6802  004E66  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6803                           
  6804                           ;main.c: 815: vscp_omsg.vscp_type = 6;
  6805  004E68  0E06               	movlw	6
  6806  004E6A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;main.c: 818: vscp_omsg.data[ 0 ] = 0x80 |
  6810                           ;main.c: 819: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6811                           ;main.c: 820: i;
  6812  004E6C  0E43               	movlw	67
  6813  004E6E  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6814  004E70  6E0E               	movwf	?_readEEPROM,c
  6815  004E72  6A0F               	clrf	?_readEEPROM+1,c
  6816  004E74  0E00               	movlw	0
  6817  004E76  220F               	addwfc	?_readEEPROM+1,f,c
  6818  004E78  EC9D  F02C         	call	_readEEPROM	;wreg free
  6819  004E7C  0100               	movlb	0	; () banked
  6820  004E7E  6F85               	movwf	??_sendTempEvent& (0+255),b
  6821  004E80  0E03               	movlw	3
  6822  004E82  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6823  004E84  90D8               	bcf	status,0,c
  6824  004E86  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6825  004E88  90D8               	bcf	status,0,c
  6826  004E8A  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6827  004E8C  90D8               	bcf	status,0,c
  6828  004E8E  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6829  004E90  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6830  004E92  0980               	iorlw	128
  6831  004E94  6FCF               	movwf	(_vscp_omsg+5)& (0+255),b
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;main.c: 822: vscp_omsg.data[ 1 ] = 0x82;
  6835  004E96  0E82               	movlw	130
  6836  004E98  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;main.c: 824: setEventData( current_temp[i],
  6840                           ;main.c: 825: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6841  004E9A  5186               	movf	sendTempEvent@i& (0+255),w,b
  6842  004E9C  0D02               	mullw	2
  6843  004E9E  0E00               	movlw	low _current_temp
  6844  004EA0  24F3               	addwf	prodl,w,c
  6845  004EA2  6ED9               	movwf	fsr2l,c
  6846  004EA4  0E01               	movlw	high _current_temp
  6847  004EA6  20F4               	addwfc	prodh,w,c
  6848  004EA8  6EDA               	movwf	fsr2h,c
  6849  004EAA  CFDE F07C          	movff	postinc2,?_setEventData
  6850  004EAE  CFDD F07D          	movff	postdec2,?_setEventData+1
  6851  004EB2  0E43               	movlw	67
  6852  004EB4  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6853  004EB6  6E0E               	movwf	?_readEEPROM,c
  6854  004EB8  6A0F               	clrf	?_readEEPROM+1,c
  6855  004EBA  0E00               	movlw	0
  6856  004EBC  220F               	addwfc	?_readEEPROM+1,f,c
  6857  004EBE  EC9D  F02C         	call	_readEEPROM	;wreg free
  6858  004EC2  0B03               	andlw	3
  6859  004EC4  0100               	movlb	0	; () banked
  6860  004EC6  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6861  004EC8  EC00  F025         	call	_setEventData	;wreg free
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;main.c: 828: if (!vscp_sendEvent()) {
  6865  004ECC  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  6866  004ED0  0900               	iorlw	0
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;main.c: 829: return 0;
  6870  004ED2  0E00               	movlw	0
  6871  004ED4  A4D8               	btfss	status,2,c
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;main.c: 830: }
  6875                           ;main.c: 832: return 1;
  6876  004ED6  0E01               	movlw	1
  6877                           
  6878                           ; BSR set to: 0
  6879  004ED8  0012               	return	
  6880  004EDA                     __end_of_sendTempEvent:
  6881                           	opt stack 0
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           postinc0	equ	0xFEE
  6889                           wreg	equ	0xFE8
  6890                           postdec1	equ	0xFE5
  6891                           fsr1h	equ	0xFE2
  6892                           fsr1l	equ	0xFE1
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _setEventData *****************
  6901 ;; Defined at:
  6902 ;;		line 840 in file "../main.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  v               2   28[BANK0 ] int 
  6905 ;;  unit            1   30[BANK0 ] unsigned char 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  newval          4   31[BANK0 ] unsigned char 
  6908 ;;  ival            2   35[BANK0 ] int 
  6909 ;; Return value:  Size  Location     Type
  6910 ;;		None               void
  6911 ;; Registers used:
  6912 ;;		wreg, status,2, status,0, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : F/0
  6915 ;;		On exit  : F/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6918 ;;      Params:         0       3       0       0       0       0       0
  6919 ;;      Locals:         0       6       0       0       0       0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0
  6921 ;;      Totals:         0       9       0       0       0       0       0
  6922 ;;Total ram usage:        9 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    5
  6925 ;; This function calls:
  6926 ;;		_Celsius2Kelvin
  6927 ;;		_Celsius2Fahrenheit
  6928 ;;		___awtofl
  6929 ;;		___fltol
  6930 ;; This function is called by:
  6931 ;;		_sendTempEvent
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           	psect	text29
  6936  004A00                     __ptext29:
  6937                           	opt stack 0
  6938  004A00                     _setEventData:
  6939                           	opt stack 23
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;main.c: 841: double newval;
  6943                           ;main.c: 842: int ival;
  6944                           ;main.c: 844: if (0 == unit) {
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;incstack = 0
  6948                           ;incstack = 0
  6949  004A00  677E               	tstfsz	setEventData@unit& (0+255),b
  6950  004A02  D019               	goto	l10468
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;main.c: 846: newval = Celsius2Kelvin(v);
  6954  004A04  C07C  F018         	movff	setEventData@v,?___awtofl
  6955  004A08  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6956  004A0C  ECBB  F02A         	call	___awtofl	;wreg free
  6957  004A10  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6958  004A14  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6959  004A18  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6960  004A1C  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  6961  004A20  ECD8  F02A         	call	_Celsius2Kelvin	;wreg free
  6962  004A24  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6963  004A28  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6964  004A2C  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6965  004A30  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  6966                           
  6967                           ;main.c: 847: } else if (2 == unit) {
  6968  004A34  D02A               	goto	l253
  6969  004A36                     l10468:
  6970                           
  6971                           ; BSR set to: 0
  6972  004A36  517E               	movf	setEventData@unit& (0+255),w,b
  6973  004A38  0A02               	xorlw	2
  6974  004A3A  E119               	bnz	l10472
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;main.c: 849: newval = Celsius2Fahrenheit(v);
  6978  004A3C  C07C  F018         	movff	setEventData@v,?___awtofl
  6979  004A40  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6980  004A44  ECBB  F02A         	call	___awtofl	;wreg free
  6981  004A48  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6982  004A4C  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6983  004A50  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6984  004A54  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  6985  004A58  EC25  F028         	call	_Celsius2Fahrenheit	;wreg free
  6986  004A5C  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6987  004A60  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6988  004A64  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6989  004A68  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6990                           
  6991                           ;main.c: 850: } else {
  6992  004A6C  D00E               	goto	l253
  6993  004A6E                     l10472:
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;main.c: 852: newval = v;
  6997  004A6E  C07C  F018         	movff	setEventData@v,?___awtofl
  6998  004A72  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6999  004A76  ECBB  F02A         	call	___awtofl	;wreg free
  7000  004A7A  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7001  004A7E  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7002  004A82  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7003  004A86  C018  F07F         	movff	?___awtofl,setEventData@newval
  7004  004A8A                     l253:
  7005                           
  7006                           ;main.c: 853: }
  7007                           ;main.c: 855: ival = (int) newval;
  7008  004A8A  C07F  F076         	movff	setEventData@newval,?___fltol
  7009  004A8E  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7010  004A92  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7011  004A96  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7012  004A9A  EC4E  F026         	call	___fltol	;wreg free
  7013  004A9E  C076  F083         	movff	?___fltol,setEventData@ival
  7014  004AA2  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7015                           
  7016                           ; BSR set to: 0
  7017                           ;main.c: 857: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7018  004AA6  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7019  004AA8  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;main.c: 858: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7023  004AAA  C083  F0D2         	movff	setEventData@ival,_vscp_omsg+8
  7024                           
  7025                           ; BSR set to: 0
  7026  004AAE  0012               	return	
  7027  004AB0                     __end_of_setEventData:
  7028                           	opt stack 0
  7029                           tblptru	equ	0xFF8
  7030                           tblptrh	equ	0xFF7
  7031                           tblptrl	equ	0xFF6
  7032                           tablat	equ	0xFF5
  7033                           prodh	equ	0xFF4
  7034                           prodl	equ	0xFF3
  7035                           postinc0	equ	0xFEE
  7036                           wreg	equ	0xFE8
  7037                           postdec1	equ	0xFE5
  7038                           fsr1h	equ	0xFE2
  7039                           fsr1l	equ	0xFE1
  7040                           indf2	equ	0xFDF
  7041                           postinc2	equ	0xFDE
  7042                           postdec2	equ	0xFDD
  7043                           fsr2h	equ	0xFDA
  7044                           fsr2l	equ	0xFD9
  7045                           status	equ	0xFD8
  7046                           
  7047 ;; *************** function _Celsius2Fahrenheit *****************
  7048 ;; Defined at:
  7049 ;;		line 41 in file "../ntc.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;  tc              4   22[BANK0 ] int 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  4   22[BANK0 ] int 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7063 ;;      Params:         0       4       0       0       0       0       0
  7064 ;;      Locals:         0       0       0       0       0       0       0
  7065 ;;      Temps:          0       0       0       0       0       0       0
  7066 ;;      Totals:         0       4       0       0       0       0       0
  7067 ;;Total ram usage:        4 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    4
  7070 ;; This function calls:
  7071 ;;		___fladd
  7072 ;;		___fldiv
  7073 ;;		___flmul
  7074 ;; This function is called by:
  7075 ;;		_setEventData
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text30
  7080  00504A                     __ptext30:
  7081                           	opt stack 0
  7082  00504A                     _Celsius2Fahrenheit:
  7083                           	opt stack 23
  7084                           
  7085                           ;ntc.c: 42: return ( (9 * tc + 16000) / 5);
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;incstack = 0
  7089                           ;incstack = 0
  7090  00504A  6A21               	clrf	?___fladd+4,c
  7091  00504C  6A22               	clrf	?___fladd+5,c
  7092  00504E  0E7A               	movlw	122
  7093  005050  6E23               	movwf	?___fladd+6,c
  7094  005052  0E46               	movlw	70
  7095  005054  6E24               	movwf	?___fladd+7,c
  7096  005056  0100               	movlb	0	; () banked
  7097  005058  6B64               	clrf	(?___flmul+4)& (0+255),b
  7098  00505A  6B65               	clrf	(?___flmul+5)& (0+255),b
  7099  00505C  0E10               	movlw	16
  7100  00505E  6F66               	movwf	(?___flmul+6)& (0+255),b
  7101  005060  0E41               	movlw	65
  7102  005062  6F67               	movwf	(?___flmul+7)& (0+255),b
  7103  005064  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7104  005068  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7105  00506C  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7106  005070  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7107  005074  ECBC  F022         	call	___flmul	;wreg free
  7108  005078  C063  F020         	movff	?___flmul+3,?___fladd+3
  7109  00507C  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7110  005080  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7111  005084  C060  F01D         	movff	?___flmul,?___fladd
  7112  005088  EC62  F01F         	call	___fladd	;wreg free
  7113  00508C  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7114  005090  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7115  005094  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7116  005098  C01D  F02C         	movff	?___fladd,?___fldiv
  7117  00509C  6A30               	clrf	?___fldiv+4,c
  7118  00509E  6A31               	clrf	?___fldiv+5,c
  7119  0050A0  0EA0               	movlw	160
  7120  0050A2  6E32               	movwf	?___fldiv+6,c
  7121  0050A4  0E40               	movlw	64
  7122  0050A6  6E33               	movwf	?___fldiv+7,c
  7123  0050A8  EC58  F025         	call	___fldiv	;wreg free
  7124  0050AC  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7125  0050B0  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7126  0050B4  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7127  0050B8  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7128  0050BC  0012               	return	
  7129  0050BE                     __end_of_Celsius2Fahrenheit:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           postinc0	equ	0xFEE
  7138                           wreg	equ	0xFE8
  7139                           postdec1	equ	0xFE5
  7140                           fsr1h	equ	0xFE2
  7141                           fsr1l	equ	0xFE1
  7142                           indf2	equ	0xFDF
  7143                           postinc2	equ	0xFDE
  7144                           postdec2	equ	0xFDD
  7145                           fsr2h	equ	0xFDA
  7146                           fsr2l	equ	0xFD9
  7147                           status	equ	0xFD8
  7148                           
  7149 ;; *************** function ___fladd *****************
  7150 ;; Defined at:
  7151 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  f1              4   28[COMRAM] int 
  7154 ;;  f2              4   32[COMRAM] int 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  exp1            1   42[COMRAM] unsigned char 
  7157 ;;  exp2            1   41[COMRAM] unsigned char 
  7158 ;;  sign            1   40[COMRAM] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  4   28[COMRAM] unsigned char 
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7168 ;;      Params:         8       0       0       0       0       0       0
  7169 ;;      Locals:         6       0       0       0       0       0       0
  7170 ;;      Temps:          1       0       0       0       0       0       0
  7171 ;;      Totals:        15       0       0       0       0       0       0
  7172 ;;Total ram usage:       15 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    3
  7175 ;; This function calls:
  7176 ;;		___flpack
  7177 ;; This function is called by:
  7178 ;;		_doWork
  7179 ;;		_Celsius2Fahrenheit
  7180 ;;		_Celsius2Kelvin
  7181 ;;		___asfladd
  7182 ;;		_floor
  7183 ;;		___flsub
  7184 ;;		_log
  7185 ;;		_eval_poly
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text31
  7190  003EC4                     __ptext31:
  7191                           	opt stack 0
  7192  003EC4                     ___fladd:
  7193                           	opt stack 25
  7194                           
  7195                           ;incstack = 0
  7196                           ;incstack = 0
  7197  003EC4  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7198  003EC6  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7199  003EC8  6E2B               	movwf	___fladd@exp1,c
  7200  003ECA  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7201  003ECC  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7202  003ECE  6E2A               	movwf	___fladd@exp2,c
  7203  003ED0  502B               	movf	___fladd@exp1,w,c
  7204  003ED2  E009               	bz	l1565
  7205  003ED4  502A               	movf	___fladd@exp2,w,c
  7206  003ED6  602B               	cpfslt	___fladd@exp1,c
  7207  003ED8  D00F               	goto	l11478
  7208  003EDA  502B               	movf	___fladd@exp1,w,c
  7209  003EDC  5C2A               	subwf	___fladd@exp2,w,c
  7210  003EDE  6E25               	movwf	??___fladd& (0+255),c
  7211  003EE0  0E21               	movlw	33
  7212  003EE2  5C25               	subwf	??___fladd,w,c
  7213  003EE4  E309               	bnc	l11478
  7214  003EE6                     l1565:
  7215  003EE6  C021  F01D         	movff	___fladd@f2,?___fladd
  7216  003EEA  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7217  003EEE  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7218  003EF2  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7219  003EF6  D095               	goto	l1566
  7220  003EF8                     l11478:
  7221  003EF8  502A               	movf	___fladd@exp2,w,c
  7222  003EFA  E009               	bz	l1569
  7223  003EFC  502B               	movf	___fladd@exp1,w,c
  7224  003EFE  602A               	cpfslt	___fladd@exp2,c
  7225  003F00  D00F               	goto	l11484
  7226  003F02  502A               	movf	___fladd@exp2,w,c
  7227  003F04  5C2B               	subwf	___fladd@exp1,w,c
  7228  003F06  6E25               	movwf	??___fladd& (0+255),c
  7229  003F08  0E21               	movlw	33
  7230  003F0A  5C25               	subwf	??___fladd,w,c
  7231  003F0C  E309               	bnc	l11484
  7232  003F0E                     l1569:
  7233  003F0E  C01D  F01D         	movff	___fladd@f1,?___fladd
  7234  003F12  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7235  003F16  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7236  003F1A  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7237  003F1E  D081               	goto	l1566
  7238  003F20                     l11484:
  7239  003F20  0E06               	movlw	6
  7240  003F22  6E29               	movwf	___fladd@sign,c
  7241  003F24  BE20               	btfsc	___fladd@f1+3,7,c
  7242  003F26  8E29               	bsf	___fladd@sign,7,c
  7243  003F28  BE24               	btfsc	___fladd@f2+3,7,c
  7244  003F2A  8C29               	bsf	___fladd@sign,6,c
  7245  003F2C  8E1F               	bsf	___fladd@f1+2,7,c
  7246  003F2E  6A20               	clrf	___fladd@f1+3,c
  7247  003F30  8E23               	bsf	___fladd@f2+2,7,c
  7248  003F32  6A24               	clrf	___fladd@f2+3,c
  7249  003F34  502A               	movf	___fladd@exp2,w,c
  7250  003F36  602B               	cpfslt	___fladd@exp1,c
  7251  003F38  D018               	goto	l11510
  7252  003F3A                     l11500:
  7253  003F3A  90D8               	bcf	status,0,c
  7254  003F3C  3621               	rlcf	___fladd@f2,f,c
  7255  003F3E  3622               	rlcf	___fladd@f2+1,f,c
  7256  003F40  3623               	rlcf	___fladd@f2+2,f,c
  7257  003F42  3624               	rlcf	___fladd@f2+3,f,c
  7258  003F44  062A               	decf	___fladd@exp2,f,c
  7259  003F46  502A               	movf	___fladd@exp2,w,c
  7260  003F48  182B               	xorwf	___fladd@exp1,w,c
  7261  003F4A  E00B               	bz	l11508
  7262  003F4C  0629               	decf	___fladd@sign,f,c
  7263  003F4E  5029               	movf	___fladd@sign& (0+255),w,c
  7264  003F50  0B07               	andlw	7
  7265  003F52  E007               	bz	l11508
  7266  003F54  D7F2               	goto	l11500
  7267  003F56                     l11506:
  7268  003F56  90D8               	bcf	status,0,c
  7269  003F58  3220               	rrcf	___fladd@f1+3,f,c
  7270  003F5A  321F               	rrcf	___fladd@f1+2,f,c
  7271  003F5C  321E               	rrcf	___fladd@f1+1,f,c
  7272  003F5E  321D               	rrcf	___fladd@f1,f,c
  7273  003F60  2A2B               	incf	___fladd@exp1,f,c
  7274  003F62                     l11508:
  7275  003F62  502A               	movf	___fladd@exp2,w,c
  7276  003F64  622B               	cpfseq	___fladd@exp1,c
  7277  003F66  D7F7               	goto	l11506
  7278  003F68  D01A               	goto	l1580
  7279  003F6A                     l11510:
  7280  003F6A  502B               	movf	___fladd@exp1,w,c
  7281  003F6C  602A               	cpfslt	___fladd@exp2,c
  7282  003F6E  D017               	goto	l1580
  7283  003F70                     l11512:
  7284  003F70  90D8               	bcf	status,0,c
  7285  003F72  361D               	rlcf	___fladd@f1,f,c
  7286  003F74  361E               	rlcf	___fladd@f1+1,f,c
  7287  003F76  361F               	rlcf	___fladd@f1+2,f,c
  7288  003F78  3620               	rlcf	___fladd@f1+3,f,c
  7289  003F7A  062B               	decf	___fladd@exp1,f,c
  7290  003F7C  502A               	movf	___fladd@exp2,w,c
  7291  003F7E  182B               	xorwf	___fladd@exp1,w,c
  7292  003F80  E00B               	bz	l11520
  7293  003F82  0629               	decf	___fladd@sign,f,c
  7294  003F84  5029               	movf	___fladd@sign& (0+255),w,c
  7295  003F86  0B07               	andlw	7
  7296  003F88  E007               	bz	l11520
  7297  003F8A  D7F2               	goto	l11512
  7298  003F8C                     l11518:
  7299  003F8C  90D8               	bcf	status,0,c
  7300  003F8E  3224               	rrcf	___fladd@f2+3,f,c
  7301  003F90  3223               	rrcf	___fladd@f2+2,f,c
  7302  003F92  3222               	rrcf	___fladd@f2+1,f,c
  7303  003F94  3221               	rrcf	___fladd@f2,f,c
  7304  003F96  2A2A               	incf	___fladd@exp2,f,c
  7305  003F98                     l11520:
  7306  003F98  502A               	movf	___fladd@exp2,w,c
  7307  003F9A  622B               	cpfseq	___fladd@exp1,c
  7308  003F9C  D7F7               	goto	l11518
  7309  003F9E                     l1580:
  7310  003F9E  AE29               	btfss	___fladd@sign,7,c
  7311  003FA0  D009               	goto	l11524
  7312  003FA2  1E1D               	comf	___fladd@f1,f,c
  7313  003FA4  1E1E               	comf	___fladd@f1+1,f,c
  7314  003FA6  1E1F               	comf	___fladd@f1+2,f,c
  7315  003FA8  1E20               	comf	___fladd@f1+3,f,c
  7316  003FAA  2A1D               	incf	___fladd@f1,f,c
  7317  003FAC  0E00               	movlw	0
  7318  003FAE  221E               	addwfc	___fladd@f1+1,f,c
  7319  003FB0  221F               	addwfc	___fladd@f1+2,f,c
  7320  003FB2  2220               	addwfc	___fladd@f1+3,f,c
  7321  003FB4                     l11524:
  7322  003FB4  AC29               	btfss	___fladd@sign,6,c
  7323  003FB6  D009               	goto	l11528
  7324  003FB8  1E21               	comf	___fladd@f2,f,c
  7325  003FBA  1E22               	comf	___fladd@f2+1,f,c
  7326  003FBC  1E23               	comf	___fladd@f2+2,f,c
  7327  003FBE  1E24               	comf	___fladd@f2+3,f,c
  7328  003FC0  2A21               	incf	___fladd@f2,f,c
  7329  003FC2  0E00               	movlw	0
  7330  003FC4  2222               	addwfc	___fladd@f2+1,f,c
  7331  003FC6  2223               	addwfc	___fladd@f2+2,f,c
  7332  003FC8  2224               	addwfc	___fladd@f2+3,f,c
  7333  003FCA                     l11528:
  7334  003FCA  6A29               	clrf	___fladd@sign,c
  7335  003FCC  501D               	movf	___fladd@f1,w,c
  7336  003FCE  2621               	addwf	___fladd@f2,f,c
  7337  003FD0  501E               	movf	___fladd@f1+1,w,c
  7338  003FD2  2222               	addwfc	___fladd@f2+1,f,c
  7339  003FD4  501F               	movf	___fladd@f1+2,w,c
  7340  003FD6  2223               	addwfc	___fladd@f2+2,f,c
  7341  003FD8  5020               	movf	___fladd@f1+3,w,c
  7342  003FDA  2224               	addwfc	___fladd@f2+3,f,c
  7343  003FDC  AE24               	btfss	___fladd@f2+3,7,c
  7344  003FDE  D00B               	goto	l11536
  7345  003FE0  1E21               	comf	___fladd@f2,f,c
  7346  003FE2  1E22               	comf	___fladd@f2+1,f,c
  7347  003FE4  1E23               	comf	___fladd@f2+2,f,c
  7348  003FE6  1E24               	comf	___fladd@f2+3,f,c
  7349  003FE8  2A21               	incf	___fladd@f2,f,c
  7350  003FEA  0E00               	movlw	0
  7351  003FEC  2222               	addwfc	___fladd@f2+1,f,c
  7352  003FEE  2223               	addwfc	___fladd@f2+2,f,c
  7353  003FF0  2224               	addwfc	___fladd@f2+3,f,c
  7354  003FF2  0E01               	movlw	1
  7355  003FF4  6E29               	movwf	___fladd@sign,c
  7356  003FF6                     l11536:
  7357  003FF6  C021  F00E         	movff	___fladd@f2,?___flpack
  7358  003FFA  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7359  003FFE  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7360  004002  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7361  004006  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7362  00400A  C029  F013         	movff	___fladd@sign,?___flpack+5
  7363  00400E  ECE9  F023         	call	___flpack	;wreg free
  7364  004012  C011  F020         	movff	?___flpack+3,?___fladd+3
  7365  004016  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7366  00401A  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7367  00401E  C00E  F01D         	movff	?___flpack,?___fladd
  7368  004022                     l1566:
  7369  004022  0012               	return	
  7370  004024                     __end_of___fladd:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodh	equ	0xFF4
  7377                           prodl	equ	0xFF3
  7378                           postinc0	equ	0xFEE
  7379                           wreg	equ	0xFE8
  7380                           postdec1	equ	0xFE5
  7381                           fsr1h	equ	0xFE2
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _Celsius2Kelvin *****************
  7391 ;; Defined at:
  7392 ;;		line 60 in file "../ntc.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  tc              4   43[COMRAM] unsigned char 
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  4   43[COMRAM] unsigned char 
  7399 ;; Registers used:
  7400 ;;		wreg, status,2, status,0, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7406 ;;      Params:         4       0       0       0       0       0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0
  7408 ;;      Temps:          0       0       0       0       0       0       0
  7409 ;;      Totals:         4       0       0       0       0       0       0
  7410 ;;Total ram usage:        4 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    4
  7413 ;; This function calls:
  7414 ;;		___fladd
  7415 ;; This function is called by:
  7416 ;;		_setEventData
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           	psect	text32
  7421  0055B0                     __ptext32:
  7422                           	opt stack 0
  7423  0055B0                     _Celsius2Kelvin:
  7424                           	opt stack 23
  7425                           
  7426                           ;ntc.c: 61: return (27316.0 + tc);
  7427                           
  7428                           ;incstack = 0
  7429                           ;incstack = 0
  7430  0055B0  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7431  0055B4  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7432  0055B8  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7433  0055BC  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7434  0055C0  6A21               	clrf	?___fladd+4,c
  7435  0055C2  0E68               	movlw	104
  7436  0055C4  6E22               	movwf	?___fladd+5,c
  7437  0055C6  0ED5               	movlw	213
  7438  0055C8  6E23               	movwf	?___fladd+6,c
  7439  0055CA  0E46               	movlw	70
  7440  0055CC  6E24               	movwf	?___fladd+7,c
  7441  0055CE  EC62  F01F         	call	___fladd	;wreg free
  7442  0055D2  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7443  0055D6  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7444  0055DA  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7445  0055DE  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7446  0055E2  0012               	return	
  7447  0055E4                     __end_of_Celsius2Kelvin:
  7448                           	opt stack 0
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           postinc0	equ	0xFEE
  7456                           wreg	equ	0xFE8
  7457                           postdec1	equ	0xFE5
  7458                           fsr1h	equ	0xFE2
  7459                           fsr1l	equ	0xFE1
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           fsr2h	equ	0xFDA
  7464                           fsr2l	equ	0xFD9
  7465                           status	equ	0xFD8
  7466                           
  7467 ;; *************** function _vscp_handleProtocolEvent *****************
  7468 ;; Defined at:
  7469 ;;		line 782 in file "../../vscp_firmware/common/vscp_firmware.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  bytes           1   44[BANK0 ] unsigned char 
  7474 ;;  page_save       2   40[BANK0 ] unsigned short 
  7475 ;;  i               1   50[BANK0 ] unsigned char 
  7476 ;;  page_save       2   38[BANK0 ] unsigned short 
  7477 ;;  byte            1   54[BANK0 ] unsigned char 
  7478 ;;  bytes           1   52[BANK0 ] unsigned char 
  7479 ;;  cb              1   49[BANK0 ] unsigned char 
  7480 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7481 ;;  j               1   57[BANK0 ] unsigned char 
  7482 ;;  i               1   55[BANK0 ] unsigned char 
  7483 ;;  k               1   51[BANK0 ] unsigned char 
  7484 ;;  i               1   53[BANK0 ] unsigned char 
  7485 ;;  len             1   47[BANK0 ] unsigned char 
  7486 ;;  pos             1   46[BANK0 ] unsigned char 
  7487 ;;  i               1   56[BANK0 ] unsigned char 
  7488 ;;  len             1   45[BANK0 ] unsigned char 
  7489 ;;  pos             1   43[BANK0 ] unsigned char 
  7490 ;;  offset          1   42[BANK0 ] unsigned char 
  7491 ;; Return value:  Size  Location     Type
  7492 ;;		None               void
  7493 ;; Registers used:
  7494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7495 ;; Tracked objects:
  7496 ;;		On entry : F/0
  7497 ;;		On exit  : 0/0
  7498 ;;		Unchanged: 0/0
  7499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7500 ;;      Params:         0       0       0       0       0       0       0
  7501 ;;      Locals:         0      20       0       0       0       0       0
  7502 ;;      Temps:          0       7       0       0       0       0       0
  7503 ;;      Totals:         0      27       0       0       0       0       0
  7504 ;;Total ram usage:       27 bytes
  7505 ;; Hardware stack levels used:    1
  7506 ;; Hardware stack levels required when called:    8
  7507 ;; This function calls:
  7508 ;;		_vscp_init
  7509 ;;		_vscp_sendEvent
  7510 ;;		_vscp_readAppReg
  7511 ;;		_vscp_writeAppReg
  7512 ;;		_vscp_getGUID
  7513 ;;		_vscp_getMDF_URL
  7514 ;;		_vscp_getMatrixInfo
  7515 ;;		_vscp_goBootloaderMode
  7516 ;;		_vscp_handleHeartbeat
  7517 ;;		_vscp_handleSetNickname
  7518 ;;		_vscp_handleDropNickname
  7519 ;;		_vscp_newNodeOnline
  7520 ;;		_vscp_readRegister
  7521 ;;		_vscp_readStdReg
  7522 ;;		_vscp_writeRegister
  7523 ;;		_vscp_writeStdReg
  7524 ;;		___lbmod
  7525 ;; This function is called by:
  7526 ;;		_main
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text33
  7531  002DF2                     __ptext33:
  7532                           	opt stack 0
  7533  002DF2                     _vscp_handleProtocolEvent:
  7534                           	opt stack 22
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;vscp_firmware.c: 784: if (0 == vscp_imsg.vscp_class) {
  7538                           
  7539                           ;incstack = 0
  7540                           ;incstack = 0
  7541  002DF2  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  7542  002DF4  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7543  002DF6  E101 D2EB          	bz	l10076
  7544  002DFA  D31B               	goto	l1262
  7545  002DFC                     l9656:
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;vscp_firmware.c: 791: vscp_handleHeartbeat();
  7549  002DFC  EC25  F02A         	call	_vscp_handleHeartbeat	;wreg free
  7550                           
  7551                           ;vscp_firmware.c: 792: break;
  7552  002E00  D318               	goto	l1262
  7553  002E02                     l9658:
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;vscp_firmware.c: 796: vscp_newNodeOnline();
  7557  002E02  EC35  F02B         	call	_vscp_newNodeOnline	;wreg free
  7558                           
  7559                           ;vscp_firmware.c: 797: break;
  7560  002E06  D315               	goto	l1262
  7561  002E08                     l9660:
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;vscp_firmware.c: 801: vscp_handleSetNickname();
  7565  002E08  ECBF  F02B         	call	_vscp_handleSetNickname	;wreg free
  7566                           
  7567                           ;vscp_firmware.c: 802: break;
  7568  002E0C  D312               	goto	l1262
  7569  002E0E                     l9662:
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;vscp_firmware.c: 806: vscp_handleDropNickname();
  7573  002E0E  ECF2  F02A         	call	_vscp_handleDropNickname	;wreg free
  7574                           
  7575                           ;vscp_firmware.c: 807: break;
  7576  002E12  D30F               	goto	l1262
  7577  002E14                     l9664:
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;vscp_firmware.c: 811: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7581                           ;vscp_firmware.c: 812: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7582  002E14  51BC               	movf	_vscp_imsg& (0+255),w,b
  7583  002E16  0B0F               	andlw	15
  7584  002E18  0A02               	xorlw	2
  7585  002E1A  E001 D30A          	bnz	l1262
  7586                           
  7587                           ; BSR set to: 0
  7588  002E1E  51B9               	movf	_vscp_nickname& (0+255),w,b
  7589  002E20  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7590  002E24  62DF               	cpfseq	indf2,c
  7591  002E26  D305               	goto	l1262
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;vscp_firmware.c: 814: if (vscp_imsg.data[ 1 ] < 0x80) {
  7595  002E28  0E80               	movlw	128
  7596  002E2A  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7597  002E2C  D012               	goto	l9684
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;vscp_firmware.c: 817: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7601  002E2E  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7602  002E30  EC68  F013         	call	_vscp_readAppReg
  7603  002E34                     L8:
  7604  002E34  0100               	movlb	0	; () banked
  7605  002E36  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;vscp_firmware.c: 820: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7609  002E38  C0C3  F0CF         	movff	_vscp_imsg+7,_vscp_omsg+5
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;vscp_firmware.c: 822: vscp_omsg.priority = 0x03;
  7613  002E3C  0E03               	movlw	3
  7614  002E3E  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;vscp_firmware.c: 823: vscp_omsg.flags = 0x80 + 2;
  7618  002E40  0E82               	movlw	130
  7619  002E42  6FCA               	movwf	_vscp_omsg& (0+255),b
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;vscp_firmware.c: 824: vscp_omsg.vscp_class = 0;
  7623  002E44  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  7624  002E46  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;vscp_firmware.c: 825: vscp_omsg.vscp_type = 10;
  7628  002E48  0E0A               	movlw	10
  7629  002E4A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  7630  002E4C                     l9682:
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;vscp_firmware.c: 828: vscp_sendEvent();
  7634  002E4C  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  7635                           
  7636                           ;vscp_firmware.c: 829: } else {
  7637  002E50  D2F0               	goto	l1262
  7638  002E52                     l9684:
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] =
  7642                           ;vscp_firmware.c: 833: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7643  002E52  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7644  002E54  EC4A  F022         	call	_vscp_readStdReg
  7645  002E58  D7ED               	goto	L8
  7646  002E5A                     l9698:
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;vscp_firmware.c: 851: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7650                           ;vscp_firmware.c: 852: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7651  002E5A  51BC               	movf	_vscp_imsg& (0+255),w,b
  7652  002E5C  0B0F               	andlw	15
  7653  002E5E  0A03               	xorlw	3
  7654  002E60  E001 D2E7          	bnz	l1262
  7655                           
  7656                           ; BSR set to: 0
  7657  002E64  51B9               	movf	_vscp_nickname& (0+255),w,b
  7658  002E66  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7659  002E6A  62DF               	cpfseq	indf2,c
  7660  002E6C  D2E2               	goto	l1262
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;vscp_firmware.c: 854: if (vscp_imsg.data[ 1 ] < 0x80) {
  7664  002E6E  0E80               	movlw	128
  7665  002E70  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7666  002E72  D006               	goto	l9718
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;vscp_firmware.c: 857: vscp_omsg.data[ 1 ] =
  7670                           ;vscp_firmware.c: 858: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7671  002E74  C0C4  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7672  002E78  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7673  002E7A  EC37  F003         	call	_vscp_writeAppReg
  7674  002E7E  D7DA               	goto	L8
  7675  002E80                     l9718:
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;vscp_firmware.c: 874: vscp_omsg.data[ 1 ] =
  7679                           ;vscp_firmware.c: 875: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7680  002E80  C0C4  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7681  002E84  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7682  002E86  EC17  F01D         	call	_vscp_writeStdReg
  7683  002E8A  D7D4               	goto	L8
  7684  002E8C                     l9732:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;vscp_firmware.c: 892: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7688                           ;vscp_firmware.c: 893: (9 == vscp_imsg.data[ 1 ]))
  7689  002E8C  51B9               	movf	_vscp_nickname& (0+255),w,b
  7690  002E8E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7691  002E92  62DF               	cpfseq	indf2,c
  7692  002E94  D005               	goto	l9738
  7693                           
  7694                           ; BSR set to: 0
  7695  002E96  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7696  002E98  0A09               	xorlw	9
  7697  002E9A  B4D8               	btfsc	status,2,c
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;vscp_firmware.c: 894: {
  7701                           ;vscp_firmware.c: 895: vscp_goBootloaderMode();
  7702  002E9C  ECC1  F02C         	call	_vscp_goBootloaderMode	;wreg free
  7703  002EA0                     l9738:
  7704                           
  7705                           ;vscp_firmware.c: 896: }
  7706                           ;vscp_firmware.c: 898: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7707                           ;vscp_firmware.c: 899: (1 == vscp_imsg.data[ 1 ]) &&
  7708                           ;vscp_firmware.c: 900: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7709                           ;vscp_firmware.c: 901: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7710                           ;vscp_firmware.c: 902: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7711                           ;vscp_firmware.c: 903: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7712                           ;vscp_firmware.c: 904: ((vscp_page_select >> 8) == vscp_imsg.data[ 6 ]) &&
  7713                           ;vscp_firmware.c: 905: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7714  002EA0  0100               	movlb	0	; () banked
  7715  002EA2  51B9               	movf	_vscp_nickname& (0+255),w,b
  7716  002EA4  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7717  002EA8  62DF               	cpfseq	indf2,c
  7718  002EAA  D2C3               	goto	l1262
  7719                           
  7720                           ; BSR set to: 0
  7721  002EAC  05C3               	decf	(_vscp_imsg+7)& (0+255),w,b
  7722  002EAE  E001 D2C0          	bnz	l1262
  7723                           
  7724                           ; BSR set to: 0
  7725  002EB2  0E00               	movlw	0
  7726  002EB4  EC81  F02C         	call	_vscp_getGUID
  7727  002EB8  0100               	movlb	0	; () banked
  7728  002EBA  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7729  002EBC  E001 D2B9          	bnz	l1262
  7730                           
  7731                           ; BSR set to: 0
  7732  002EC0  0E03               	movlw	3
  7733  002EC2  EC81  F02C         	call	_vscp_getGUID
  7734  002EC6  0100               	movlb	0	; () banked
  7735  002EC8  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7736  002ECA  E001 D2B2          	bnz	l1262
  7737                           
  7738                           ; BSR set to: 0
  7739  002ECE  0E05               	movlw	5
  7740  002ED0  EC81  F02C         	call	_vscp_getGUID
  7741  002ED4  0100               	movlb	0	; () banked
  7742  002ED6  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7743  002ED8  E001 D2AB          	bnz	l1262
  7744                           
  7745                           ; BSR set to: 0
  7746  002EDC  0E07               	movlw	7
  7747  002EDE  EC81  F02C         	call	_vscp_getGUID
  7748  002EE2  0100               	movlb	0	; () banked
  7749  002EE4  19C7               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7750  002EE6  E001 D2A4          	bnz	l1262
  7751                           
  7752                           ; BSR set to: 0
  7753  002EEA  5047               	movf	_vscp_page_select+1,w,c
  7754  002EEC  19C8               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7755  002EEE  E001 D2A0          	bnz	l1262
  7756                           
  7757                           ; BSR set to: 0
  7758  002EF2  5046               	movf	_vscp_page_select,w,c
  7759  002EF4  EE20  F0C9         	lfsr	2,_vscp_imsg+13
  7760  002EF8  62DF               	cpfseq	indf2,c
  7761  002EFA  D29B               	goto	l1262
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;vscp_firmware.c: 907: vscp_goBootloaderMode();
  7765  002EFC  ECC1  F02C         	call	_vscp_goBootloaderMode	;wreg free
  7766  002F00  D298               	goto	l1262
  7767  002F02                     l9756:
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;vscp_firmware.c: 917: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7771                           ;vscp_firmware.c: 918: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7772                           ;vscp_firmware.c: 919: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7773                           ;vscp_firmware.c: 920: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7774  002F02  0E00               	movlw	0
  7775  002F04  EC81  F02C         	call	_vscp_getGUID
  7776  002F08  0100               	movlb	0	; () banked
  7777  002F0A  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7778  002F0C  E173               	bnz	l9800
  7779                           
  7780                           ; BSR set to: 0
  7781  002F0E  0E01               	movlw	1
  7782  002F10  EC81  F02C         	call	_vscp_getGUID
  7783  002F14  0100               	movlb	0	; () banked
  7784  002F16  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7785  002F18  E16D               	bnz	l9800
  7786                           
  7787                           ; BSR set to: 0
  7788  002F1A  0E02               	movlw	2
  7789  002F1C  EC81  F02C         	call	_vscp_getGUID
  7790  002F20  0100               	movlb	0	; () banked
  7791  002F22  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7792  002F24  E167               	bnz	l9800
  7793                           
  7794                           ; BSR set to: 0
  7795  002F26  0E03               	movlw	3
  7796  002F28  EC81  F02C         	call	_vscp_getGUID
  7797  002F2C  0100               	movlb	0	; () banked
  7798  002F2E  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7799  002F30  E161               	bnz	l9800
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;vscp_firmware.c: 921: vscp_guid_reset |= 0x10;
  7803  002F32  884D               	bsf	_vscp_guid_reset,4,c
  7804  002F34  D05F               	goto	l9800
  7805  002F36                     l9766:
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;vscp_firmware.c: 926: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7809                           ;vscp_firmware.c: 927: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7810                           ;vscp_firmware.c: 928: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7811                           ;vscp_firmware.c: 929: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7812  002F36  0E04               	movlw	4
  7813  002F38  EC81  F02C         	call	_vscp_getGUID
  7814  002F3C  0100               	movlb	0	; () banked
  7815  002F3E  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7816  002F40  E159               	bnz	l9800
  7817                           
  7818                           ; BSR set to: 0
  7819  002F42  0E05               	movlw	5
  7820  002F44  EC81  F02C         	call	_vscp_getGUID
  7821  002F48  0100               	movlb	0	; () banked
  7822  002F4A  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7823  002F4C  E153               	bnz	l9800
  7824                           
  7825                           ; BSR set to: 0
  7826  002F4E  0E06               	movlw	6
  7827  002F50  EC81  F02C         	call	_vscp_getGUID
  7828  002F54  0100               	movlb	0	; () banked
  7829  002F56  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7830  002F58  E14D               	bnz	l9800
  7831                           
  7832                           ; BSR set to: 0
  7833  002F5A  0E07               	movlw	7
  7834  002F5C  EC81  F02C         	call	_vscp_getGUID
  7835  002F60  0100               	movlb	0	; () banked
  7836  002F62  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7837  002F64  E147               	bnz	l9800
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;vscp_firmware.c: 930: vscp_guid_reset |= 0x20;
  7841  002F66  8A4D               	bsf	_vscp_guid_reset,5,c
  7842  002F68  D045               	goto	l9800
  7843  002F6A                     l9776:
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;vscp_firmware.c: 935: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7847                           ;vscp_firmware.c: 936: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7848                           ;vscp_firmware.c: 937: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7849                           ;vscp_firmware.c: 938: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7850  002F6A  0E08               	movlw	8
  7851  002F6C  EC81  F02C         	call	_vscp_getGUID
  7852  002F70  0100               	movlb	0	; () banked
  7853  002F72  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7854  002F74  E13F               	bnz	l9800
  7855                           
  7856                           ; BSR set to: 0
  7857  002F76  0E09               	movlw	9
  7858  002F78  EC81  F02C         	call	_vscp_getGUID
  7859  002F7C  0100               	movlb	0	; () banked
  7860  002F7E  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7861  002F80  E139               	bnz	l9800
  7862                           
  7863                           ; BSR set to: 0
  7864  002F82  0E0A               	movlw	10
  7865  002F84  EC81  F02C         	call	_vscp_getGUID
  7866  002F88  0100               	movlb	0	; () banked
  7867  002F8A  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7868  002F8C  E133               	bnz	l9800
  7869                           
  7870                           ; BSR set to: 0
  7871  002F8E  0E0B               	movlw	11
  7872  002F90  EC81  F02C         	call	_vscp_getGUID
  7873  002F94  0100               	movlb	0	; () banked
  7874  002F96  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7875  002F98  E12D               	bnz	l9800
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;vscp_firmware.c: 939: vscp_guid_reset |= 0x40;
  7879  002F9A  8C4D               	bsf	_vscp_guid_reset,6,c
  7880  002F9C  D02B               	goto	l9800
  7881  002F9E                     l9786:
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;vscp_firmware.c: 944: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7885                           ;vscp_firmware.c: 945: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7886                           ;vscp_firmware.c: 946: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7887                           ;vscp_firmware.c: 947: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7888  002F9E  0E0C               	movlw	12
  7889  002FA0  EC81  F02C         	call	_vscp_getGUID
  7890  002FA4  0100               	movlb	0	; () banked
  7891  002FA6  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7892  002FA8  E125               	bnz	l9800
  7893                           
  7894                           ; BSR set to: 0
  7895  002FAA  0E0D               	movlw	13
  7896  002FAC  EC81  F02C         	call	_vscp_getGUID
  7897  002FB0  0100               	movlb	0	; () banked
  7898  002FB2  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7899  002FB4  E11F               	bnz	l9800
  7900                           
  7901                           ; BSR set to: 0
  7902  002FB6  0E0E               	movlw	14
  7903  002FB8  EC81  F02C         	call	_vscp_getGUID
  7904  002FBC  0100               	movlb	0	; () banked
  7905  002FBE  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7906  002FC0  E119               	bnz	l9800
  7907                           
  7908                           ; BSR set to: 0
  7909  002FC2  0E0F               	movlw	15
  7910  002FC4  EC81  F02C         	call	_vscp_getGUID
  7911  002FC8  0100               	movlb	0	; () banked
  7912  002FCA  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7913  002FCC  E113               	bnz	l9800
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;vscp_firmware.c: 948: vscp_guid_reset |= 0x80;
  7917  002FCE  8E4D               	bsf	_vscp_guid_reset,7,c
  7918  002FD0  D011               	goto	l9800
  7919  002FD2                     l1203:
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;vscp_firmware.c: 953: vscp_guid_reset = 0;
  7923  002FD2  6A4D               	clrf	_vscp_guid_reset,c
  7924                           
  7925                           ;vscp_firmware.c: 954: break;
  7926  002FD4  D00F               	goto	l9800
  7927  002FD6                     l9798:
  7928                           
  7929                           ; BSR set to: 0
  7930  002FD6  39C2               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7931  002FD8  0B0F               	andlw	15
  7932  002FDA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7933  002FDC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7934                           
  7935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7936                           ; Switch size 1, requested type "speed"
  7937                           ; Number of cases is 1, Range of values is 0 to 0
  7938                           ; switch strategies available:
  7939                           ; Name         Instructions Cycles
  7940                           ; simple_byte            4     3 (average)
  7941                           ;	Chosen strategy is simple_byte
  7942  002FDE  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7943  002FE0  E1F8               	bnz	l1203
  7944                           
  7945                           ; BSR set to: 0
  7946                           ; Switch size 1, requested type "speed"
  7947                           ; Number of cases is 4, Range of values is 0 to 3
  7948                           ; switch strategies available:
  7949                           ; Name         Instructions Cycles
  7950                           ; simple_byte           13     7 (average)
  7951                           ;	Chosen strategy is simple_byte
  7952  002FE2  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7953  002FE4  E08E               	bz	l9756
  7954  002FE6  0A01               	xorlw	1	; case 1
  7955  002FE8  E0A6               	bz	l9766
  7956  002FEA  0A03               	xorlw	3	; case 2
  7957  002FEC  E0BE               	bz	l9776
  7958  002FEE  0A01               	xorlw	1	; case 3
  7959  002FF0  E0D6               	bz	l9786
  7960  002FF2  D7EF               	goto	l1203
  7961  002FF4                     l9800:
  7962                           
  7963                           ; BSR set to: 0
  7964                           ;vscp_firmware.c: 957: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7965  002FF4  504D               	movf	_vscp_guid_reset,w,c
  7966  002FF6  0BF0               	andlw	240
  7967  002FF8  0AF0               	xorlw	240
  7968  002FFA  E001 D21A          	bnz	l1262
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;vscp_firmware.c: 959: vscp_init();
  7972  002FFE  EC73  F029         	call	_vscp_init	;wreg free
  7973  003002  D217               	goto	l1262
  7974  003004                     l9804:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;vscp_firmware.c: 965: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7978  003004  51B9               	movf	_vscp_nickname& (0+255),w,b
  7979  003006  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7980  00300A  62DF               	cpfseq	indf2,c
  7981  00300C  D212               	goto	l1262
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;vscp_firmware.c: 967: uint8_t i;
  7985                           ;vscp_firmware.c: 968: uint8_t pos = 0;
  7986  00300E  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7987                           
  7988                           ;vscp_firmware.c: 969: uint8_t offset = vscp_imsg.data[ 1 ];
  7989  003010  C0C3  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7990                           
  7991                           ;vscp_firmware.c: 970: uint8_t len = vscp_imsg.data[ 2 ];
  7992  003014  C0C4  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7993                           
  7994                           ;vscp_firmware.c: 972: for (i = 0; i < len; i++) {
  7995  003018  6B98               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7996  00301A  D049               	goto	l9836
  7997  00301C                     l9808:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;vscp_firmware.c: 973: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8001  00301C  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8002  00301E  2598               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8003  003020  EC23  F02C         	call	_vscp_readRegister
  8004  003024  0100               	movlb	0	; () banked
  8005  003026  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8006  003028  0E07               	movlw	7
  8007  00302A  6E0E               	movwf	?___lbmod,c
  8008  00302C  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8009  00302E  EC5F  F02B         	call	___lbmod
  8010  003032  0100               	movlb	0	; () banked
  8011  003034  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8012  003036  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8013  003038  0FD0               	addlw	low (_vscp_omsg+6)
  8014  00303A  6ED9               	movwf	fsr2l,c
  8015  00303C  6ADA               	clrf	fsr2h,c
  8016  00303E  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;vscp_firmware.c: 975: if ((i % 7) == 6 || i == (len - 1)) {
  8020  003042  0E07               	movlw	7
  8021  003044  6E0E               	movwf	?___lbmod,c
  8022  003046  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8023  003048  EC5F  F02B         	call	___lbmod
  8024  00304C  0A06               	xorlw	6
  8025  00304E  E00B               	bz	l9814
  8026  003050  0EFF               	movlw	255
  8027  003052  0100               	movlb	0	; () banked
  8028  003054  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8029  003056  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8030  003058  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8031  00305A  0EFF               	movlw	255
  8032  00305C  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8033  00305E  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8034  003060  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8035  003062  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8036  003064  E123               	bnz	l9834
  8037  003066                     l9814:
  8038                           
  8039                           ;vscp_firmware.c: 976: uint8_t bytes;
  8040                           ;vscp_firmware.c: 978: if ((i % 7) == 6) bytes = 7;
  8041  003066  0E07               	movlw	7
  8042  003068  6E0E               	movwf	?___lbmod,c
  8043  00306A  0100               	movlb	0	; () banked
  8044  00306C  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8045  00306E  EC5F  F02B         	call	___lbmod
  8046  003072  0A06               	xorlw	6
  8047  003074  E103               	bnz	l9818
  8048  003076  0E07               	movlw	7
  8049  003078  0100               	movlb	0	; () banked
  8050  00307A  D009               	goto	L9
  8051  00307C                     l9818:
  8052                           
  8053                           ;vscp_firmware.c: 979: else bytes = (i % 7) + 1;
  8054  00307C  0E07               	movlw	7
  8055  00307E  6E0E               	movwf	?___lbmod,c
  8056  003080  0100               	movlb	0	; () banked
  8057  003082  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8058  003084  EC5F  F02B         	call	___lbmod
  8059  003088  0100               	movlb	0	; () banked
  8060  00308A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8061  00308C  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8062  00308E                     L9:
  8063  00308E  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;vscp_firmware.c: 981: vscp_omsg.flags = 0x80 + bytes + 1;
  8067  003090  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8068  003092  0F81               	addlw	129
  8069  003094  6FCA               	movwf	_vscp_omsg& (0+255),b
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;vscp_firmware.c: 982: vscp_omsg.priority = 0x03;
  8073  003096  0E03               	movlw	3
  8074  003098  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;vscp_firmware.c: 983: vscp_omsg.vscp_class = 0;
  8078  00309A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8079  00309C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;vscp_firmware.c: 984: vscp_omsg.vscp_type = 26;
  8083  00309E  0E1A               	movlw	26
  8084  0030A0  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;vscp_firmware.c: 985: vscp_omsg.data[ 0 ] = pos;
  8088  0030A2  C08B  F0CF         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;vscp_firmware.c: 988: vscp_sendEvent();
  8092  0030A6  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;vscp_firmware.c: 989: pos++;
  8096  0030AA  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8097  0030AC                     l9834:
  8098                           
  8099                           ; BSR set to: 0
  8100  0030AC  2B98               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8101  0030AE                     l9836:
  8102                           
  8103                           ; BSR set to: 0
  8104  0030AE  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8105  0030B0  5D98               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8106  0030B2  E301 D1BE          	bc	l1262
  8107  0030B6  D7B2               	goto	l9808
  8108  0030B8                     l9838:
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;vscp_firmware.c: 997: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8112  0030B8  51B9               	movf	_vscp_nickname& (0+255),w,b
  8113  0030BA  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8114  0030BE  62DF               	cpfseq	indf2,c
  8115  0030C0  D1B8               	goto	l1262
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;vscp_firmware.c: 998: uint8_t i;
  8119                           ;vscp_firmware.c: 999: uint8_t pos = vscp_imsg.data[ 1 ];
  8120  0030C2  C0C3  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1154
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;vscp_firmware.c: 1000: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8124  0030C6  51BC               	movf	_vscp_imsg& (0+255),w,b
  8125  0030C8  0FFE               	addlw	254
  8126  0030CA  0B07               	andlw	7
  8127  0030CC  6F8F               	movwf	vscp_handleProtocolEvent@len_1155& (0+255),b
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;vscp_firmware.c: 1002: for (i = 0; i < len; i++) {
  8131  0030CE  6B95               	clrf	vscp_handleProtocolEvent@i_1153& (0+255),b
  8132  0030D0  D018               	goto	l9852
  8133  0030D2                     l9846:
  8134                           
  8135                           ; BSR set to: 0
  8136                           ;vscp_firmware.c: 1004: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8137  0030D2  5195               	movf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8138  0030D4  0FC4               	addlw	low (_vscp_imsg+8)
  8139  0030D6  6ED9               	movwf	fsr2l,c
  8140  0030D8  6ADA               	clrf	fsr2h,c
  8141  0030DA  50DF               	movf	indf2,w,c
  8142  0030DC  6E34               	movwf	?_vscp_writeRegister,c
  8143  0030DE  518E               	movf	vscp_handleProtocolEvent@pos_1154& (0+255),w,b
  8144  0030E0  2595               	addwf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8145  0030E2  ECE3  F02B         	call	_vscp_writeRegister
  8146                           
  8147                           ;vscp_firmware.c: 1005: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8148  0030E6  0100               	movlb	0	; () banked
  8149  0030E8  518E               	movf	vscp_handleProtocolEvent@pos_1154& (0+255),w,b
  8150  0030EA  2595               	addwf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8151  0030EC  EC23  F02C         	call	_vscp_readRegister
  8152  0030F0  0100               	movlb	0	; () banked
  8153  0030F2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8154  0030F4  5195               	movf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8155  0030F6  0FD0               	addlw	low (_vscp_omsg+6)
  8156  0030F8  6ED9               	movwf	fsr2l,c
  8157  0030FA  6ADA               	clrf	fsr2h,c
  8158  0030FC  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8159                           
  8160                           ; BSR set to: 0
  8161  003100  2B95               	incf	vscp_handleProtocolEvent@i_1153& (0+255),f,b
  8162  003102                     l9852:
  8163                           
  8164                           ; BSR set to: 0
  8165  003102  518F               	movf	vscp_handleProtocolEvent@len_1155& (0+255),w,b
  8166  003104  5D95               	subwf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8167  003106  E3E5               	bnc	l9846
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;vscp_firmware.c: 1006: }
  8171                           ;vscp_firmware.c: 1008: vscp_omsg.priority = 0x03;
  8172  003108  0E03               	movlw	3
  8173  00310A  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;vscp_firmware.c: 1009: vscp_omsg.vscp_class = 0;
  8177  00310C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8178  00310E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8179                           
  8180                           ;vscp_firmware.c: 1010: vscp_omsg.vscp_type = 26;
  8181  003110  0E1A               	movlw	26
  8182  003112  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;vscp_firmware.c: 1011: vscp_omsg.data[ 0 ] = 0;
  8186  003114  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;vscp_firmware.c: 1012: vscp_omsg.flags = 0x80 + len + 1;
  8190  003116  518F               	movf	vscp_handleProtocolEvent@len_1155& (0+255),w,b
  8191  003118  0F81               	addlw	129
  8192  00311A  6FCA               	movwf	_vscp_omsg& (0+255),b
  8193  00311C  D697               	goto	l9682
  8194  00311E                     l9864:
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;vscp_firmware.c: 1022: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8198  00311E  51B9               	movf	_vscp_nickname& (0+255),w,b
  8199  003120  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8200  003124  62DF               	cpfseq	indf2,c
  8201  003126  D185               	goto	l1262
  8202                           
  8203                           ; BSR set to: 0
  8204                           ;vscp_firmware.c: 1024: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8205                           ;vscp_firmware.c: 1025: vscp_imsg.data[ 1 ],
  8206                           ;vscp_firmware.c: 1026: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8207  003128  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8208  00312A  EC68  F013         	call	_vscp_readAppReg
  8209  00312E  0100               	movlb	0	; () banked
  8210  003130  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8211  003132  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8212  003134  6E21               	movwf	?_vscp_writeAppReg,c
  8213  003136  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8214  003138  EC37  F003         	call	_vscp_writeAppReg
  8215  00313C  D67B               	goto	L8
  8216  00313E                     l9880:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;vscp_firmware.c: 1042: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8220  00313E  51B9               	movf	_vscp_nickname& (0+255),w,b
  8221  003140  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8222  003144  62DF               	cpfseq	indf2,c
  8223  003146  D175               	goto	l1262
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;vscp_firmware.c: 1044: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8227                           ;vscp_firmware.c: 1045: vscp_imsg.data[ 1 ],
  8228                           ;vscp_firmware.c: 1046: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8229  003148  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8230  00314A  EC68  F013         	call	_vscp_readAppReg
  8231  00314E  0100               	movlb	0	; () banked
  8232  003150  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8233  003152  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8234  003154  6E21               	movwf	?_vscp_writeAppReg,c
  8235  003156  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8236  003158  EC37  F003         	call	_vscp_writeAppReg
  8237  00315C  D66B               	goto	L8
  8238  00315E                     l9896:
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;vscp_firmware.c: 1062: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8242                           ;vscp_firmware.c: 1063: (0xff == vscp_imsg.data[ 0 ])) {
  8243  00315E  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
  8244  003160  19B9               	xorwf	_vscp_nickname& (0+255),w,b
  8245  003162  E003               	bz	l1227
  8246                           
  8247                           ; BSR set to: 0
  8248  003164  29C2               	incf	(_vscp_imsg+6)& (0+255),w,b
  8249  003166  E001 D164          	bnz	l1262
  8250  00316A                     l1227:
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;vscp_firmware.c: 1065: uint8_t i, j, k = 0;
  8254  00316A  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1069: vscp_omsg.priority = 0x03;
  8258  00316C  0E03               	movlw	3
  8259  00316E  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8260                           
  8261                           ;vscp_firmware.c: 1070: vscp_omsg.flags = 0x80 + 8;
  8262  003170  0E88               	movlw	136
  8263  003172  6FCA               	movwf	_vscp_omsg& (0+255),b
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;vscp_firmware.c: 1071: vscp_omsg.vscp_class = 0;
  8267  003174  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8268  003176  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8269                           
  8270                           ;vscp_firmware.c: 1072: vscp_omsg.vscp_type = 32;
  8271  003178  0E20               	movlw	32
  8272  00317A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;vscp_firmware.c: 1074: for (i = 0; i < 3; i++)
  8276  00317C  6B97               	clrf	vscp_handleProtocolEvent@i_1156& (0+255),b
  8277  00317E                     l1228:
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;vscp_firmware.c: 1075: {
  8281                           ;vscp_firmware.c: 1076: vscp_omsg.data[0] = i;
  8282  00317E  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1156,_vscp_omsg+5
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;vscp_firmware.c: 1078: for (j = 1; j < 8; j++) {
  8286  003182  0E01               	movlw	1
  8287  003184  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8288  003186                     l9916:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 1079: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8292  003186  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8293  003188  0FCF               	addlw	low (_vscp_omsg+5)
  8294  00318A  6ED9               	movwf	fsr2l,c
  8295  00318C  6ADA               	clrf	fsr2h,c
  8296  00318E  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8297  003190  080F               	sublw	15
  8298  003192  EC81  F02C         	call	_vscp_getGUID
  8299  003196  6EDF               	movwf	indf2,c
  8300  003198  0100               	movlb	0	; () banked
  8301  00319A  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;vscp_firmware.c: 1080: if (k > 16)
  8305  00319C  0E10               	movlw	16
  8306  00319E  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8307  0031A0  D001               	goto	l9924
  8308  0031A2  D004               	goto	l9928
  8309  0031A4                     l9924:
  8310                           
  8311                           ; BSR set to: 0
  8312  0031A4  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8313                           
  8314                           ; BSR set to: 0
  8315  0031A6  0E07               	movlw	7
  8316  0031A8  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8317  0031AA  D7ED               	goto	l9916
  8318  0031AC                     l9928:
  8319                           
  8320                           ; BSR set to: 0
  8321                           ;vscp_firmware.c: 1082: }
  8322                           ;vscp_firmware.c: 1084: if (k > 16)
  8323  0031AC  0E10               	movlw	16
  8324  0031AE  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8325  0031B0  D001               	goto	l9932
  8326  0031B2  D006               	goto	l1229
  8327  0031B4                     l9932:
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;vscp_firmware.c: 1087: vscp_sendEvent();
  8331  0031B4  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  8332                           
  8333                           ; BSR set to: 0
  8334  0031B8  2B97               	incf	vscp_handleProtocolEvent@i_1156& (0+255),f,b
  8335                           
  8336                           ; BSR set to: 0
  8337  0031BA  0E02               	movlw	2
  8338  0031BC  6597               	cpfsgt	vscp_handleProtocolEvent@i_1156& (0+255),b
  8339  0031BE  D7DF               	goto	l1228
  8340  0031C0                     l1229:
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;vscp_firmware.c: 1088: }
  8344                           ;vscp_firmware.c: 1090: for (j = 0; j < 5; j++)
  8345  0031C0  6B99               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8346  0031C2                     l9942:
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;vscp_firmware.c: 1091: {
  8350                           ;vscp_firmware.c: 1092: if (vscp_getMDF_URL(j) > 0)
  8351  0031C2  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8352  0031C4  EC55  F02C         	call	_vscp_getMDF_URL
  8353  0031C8  0900               	iorlw	0
  8354  0031CA  E008               	bz	l9946
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8358  0031CC  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8359  0031CE  0FD2               	addlw	low (_vscp_omsg+8)
  8360  0031D0  6ED9               	movwf	fsr2l,c
  8361  0031D2  6ADA               	clrf	fsr2h,c
  8362  0031D4  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8363  0031D6  EC55  F02C         	call	_vscp_getMDF_URL
  8364  0031DA  D005               	goto	L10
  8365  0031DC                     l9946:
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;vscp_firmware.c: 1094: else
  8369                           ;vscp_firmware.c: 1095: vscp_omsg.data[3 + j] = 0;
  8370  0031DC  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8371  0031DE  0FD2               	addlw	low (_vscp_omsg+8)
  8372  0031E0  6ED9               	movwf	fsr2l,c
  8373  0031E2  6ADA               	clrf	fsr2h,c
  8374  0031E4  0E00               	movlw	0
  8375  0031E6                     L10:
  8376  0031E6  6EDF               	movwf	indf2,c
  8377                           
  8378                           ; BSR set to: 0
  8379  0031E8  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8380                           
  8381                           ; BSR set to: 0
  8382  0031EA  0E04               	movlw	4
  8383  0031EC  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8384  0031EE  D7E9               	goto	l9942
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;vscp_firmware.c: 1096: }
  8388                           ;vscp_firmware.c: 1098: vscp_sendEvent();
  8389  0031F0  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;vscp_firmware.c: 1100: k = 5;
  8393  0031F4  0E05               	movlw	5
  8394  0031F6  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 1101: for (i = 3; i < 7; i++)
  8398  0031F8  0E03               	movlw	3
  8399  0031FA  6F97               	movwf	vscp_handleProtocolEvent@i_1156& (0+255),b
  8400  0031FC                     l1238:
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;vscp_firmware.c: 1102: {
  8404                           ;vscp_firmware.c: 1103: vscp_omsg.data[0] = i;
  8405  0031FC  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1156,_vscp_omsg+5
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;vscp_firmware.c: 1105: for (j = 1; j < 8; j++) {
  8409  003200  0E01               	movlw	1
  8410  003202  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8411  003204                     l9968:
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;vscp_firmware.c: 1106: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8415  003204  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8416  003206  0FCF               	addlw	low (_vscp_omsg+5)
  8417  003208  6ED9               	movwf	fsr2l,c
  8418  00320A  6ADA               	clrf	fsr2h,c
  8419  00320C  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8420  00320E  EC55  F02C         	call	_vscp_getMDF_URL
  8421  003212  6EDF               	movwf	indf2,c
  8422                           
  8423                           ; BSR set to: 0
  8424  003214  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 0
  8427  003216  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8428                           
  8429                           ; BSR set to: 0
  8430  003218  0E07               	movlw	7
  8431  00321A  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8432  00321C  D7F3               	goto	l9968
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;vscp_firmware.c: 1107: }
  8436                           ;vscp_firmware.c: 1108: vscp_sendEvent();
  8437  00321E  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  8438                           
  8439                           ; BSR set to: 0
  8440  003222  2B97               	incf	vscp_handleProtocolEvent@i_1156& (0+255),f,b
  8441                           
  8442                           ; BSR set to: 0
  8443  003224  0E06               	movlw	6
  8444  003226  6597               	cpfsgt	vscp_handleProtocolEvent@i_1156& (0+255),b
  8445  003228  D7E9               	goto	l1238
  8446  00322A  D103               	goto	l1262
  8447  00322C                     l9982:
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;vscp_firmware.c: 1117: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8451  00322C  51B9               	movf	_vscp_nickname& (0+255),w,b
  8452  00322E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8453  003232  62DF               	cpfseq	indf2,c
  8454  003234  D0FE               	goto	l1262
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;vscp_firmware.c: 1119: vscp_omsg.priority = 0x03;
  8458  003236  0E03               	movlw	3
  8459  003238  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8460                           
  8461                           ;vscp_firmware.c: 1120: vscp_omsg.flags = 0x80 + 7;
  8462  00323A  0E87               	movlw	135
  8463  00323C  6FCA               	movwf	_vscp_omsg& (0+255),b
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;vscp_firmware.c: 1121: vscp_omsg.vscp_class = 0;
  8467  00323E  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8468  003240  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8469                           
  8470                           ;vscp_firmware.c: 1122: vscp_omsg.vscp_type = 34;
  8471  003242  0E22               	movlw	34
  8472  003244  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;vscp_firmware.c: 1124: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8476  003246  0ECF               	movlw	(_vscp_omsg+5)& (0+255)
  8477  003248  EC30  F02C         	call	_vscp_getMatrixInfo
  8478  00324C  D5FF               	goto	l9682
  8479  00324E                     l9992:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;vscp_firmware.c: 1140: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8483  00324E  51B9               	movf	_vscp_nickname& (0+255),w,b
  8484  003250  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8485  003254  62DF               	cpfseq	indf2,c
  8486  003256  D0ED               	goto	l1262
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;vscp_firmware.c: 1142: uint16_t page_save;
  8490                           ;vscp_firmware.c: 1143: uint8_t byte = 0, bytes = 0;
  8491  003258  6B96               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;vscp_firmware.c: 1144: uint8_t bytes_this_time, cb;
  8495                           ;vscp_firmware.c: 1148: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8496  00325A  C0BC  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8497  00325E  0E0F               	movlw	15
  8498  003260  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8499  003262  0E04               	movlw	4
  8500  003264  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8501  003266  E304               	bnc	l10000
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;vscp_firmware.c: 1151: bytes = vscp_imsg.data[4];
  8505  003268  C0C6  F094         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1161
  8506                           
  8507                           ;vscp_firmware.c: 1153: if ( 0 == bytes ) {
  8508  00326C  6794               	tstfsz	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8509  00326E  D002               	goto	l10004
  8510  003270                     l10000:
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;vscp_firmware.c: 1154: bytes = 1;
  8514  003270  0E01               	movlw	1
  8515  003272  6F94               	movwf	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8516  003274                     l10004:
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;vscp_firmware.c: 1159: }
  8520                           ;vscp_firmware.c: 1162: page_save = vscp_page_select;
  8521  003274  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8522  003278  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;vscp_firmware.c: 1167: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8526  00327C  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8527  00327E  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8528  003282  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8529  003284  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8530  003288  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8531  00328A  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8532  00328C  6E46               	movwf	_vscp_page_select,c
  8533  00328E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8534  003290  6E47               	movwf	_vscp_page_select+1,c
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;vscp_firmware.c: 1170: vscp_omsg.priority = 0x03;
  8538  003292  0E03               	movlw	3
  8539  003294  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;vscp_firmware.c: 1171: vscp_omsg.vscp_class = 0;
  8543  003296  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8544  003298  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;vscp_firmware.c: 1172: vscp_omsg.vscp_type = 39;
  8548  00329A  0E27               	movlw	39
  8549  00329C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;vscp_firmware.c: 1173: vscp_omsg.data[0] = 0;
  8553  00329E  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;vscp_firmware.c: 1174: vscp_omsg.data[1] = vscp_imsg.data[1];
  8557  0032A0  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;vscp_firmware.c: 1175: vscp_omsg.data[2] = vscp_imsg.data[2];
  8561  0032A4  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8562  0032A8                     l10020:
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;vscp_firmware.c: 1179: if ( ( bytes - byte ) >= 4 ) {
  8566  0032A8  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8567  0032AA  C094  F07F         	movff	vscp_handleProtocolEvent@bytes_1161,??_vscp_handleProtocolEvent
  8568  0032AE  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8569  0032B0  5F7F               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8570  0032B2  0E00               	movlw	0
  8571  0032B4  5B80               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8572  0032B6  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8573  0032B8  0A80               	xorlw	128
  8574  0032BA  0F80               	addlw	-128
  8575  0032BC  0E04               	movlw	4
  8576  0032BE  B4D8               	btfsc	status,2,c
  8577  0032C0  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8578  0032C2  E302               	bnc	l10024
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;vscp_firmware.c: 1180: bytes_this_time = 4;
  8582  0032C4  0E04               	movlw	4
  8583  0032C6  D002               	goto	L12
  8584  0032C8                     l10024:
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;vscp_firmware.c: 1182: else {
  8588                           ;vscp_firmware.c: 1183: bytes_this_time = (bytes - byte);
  8589  0032C8  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8590  0032CA  5D94               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8591  0032CC                     L12:
  8592  0032CC  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;vscp_firmware.c: 1184: }
  8596                           ;vscp_firmware.c: 1187: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8597  0032CE  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8598  0032D0  0F84               	addlw	132
  8599  0032D2  6FCA               	movwf	_vscp_omsg& (0+255),b
  8600                           
  8601                           ;vscp_firmware.c: 1188: vscp_omsg.data[3] =
  8602                           ;vscp_firmware.c: 1189: vscp_imsg.data[3] + byte;
  8603  0032D4  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8604  0032D6  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8605  0032D8  6FD2               	movwf	(_vscp_omsg+8)& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;vscp_firmware.c: 1192: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8609  0032DA  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8610  0032DC  D00E               	goto	l10032
  8611  0032DE                     l10028:
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;vscp_firmware.c: 1193: vscp_omsg.data[ (4 + cb) ] =
  8615                           ;vscp_firmware.c: 1194: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8616  0032DE  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8617  0032E0  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8618  0032E2  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8619  0032E4  EC23  F02C         	call	_vscp_readRegister
  8620  0032E8  0100               	movlb	0	; () banked
  8621  0032EA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8622  0032EC  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8623  0032EE  0FD3               	addlw	low (_vscp_omsg+9)
  8624  0032F0  6ED9               	movwf	fsr2l,c
  8625  0032F2  6ADA               	clrf	fsr2h,c
  8626  0032F4  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8627                           
  8628                           ; BSR set to: 0
  8629  0032F8  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8630  0032FA                     l10032:
  8631                           
  8632                           ; BSR set to: 0
  8633  0032FA  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8634  0032FC  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8635  0032FE  E3EF               	bnc	l10028
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;vscp_firmware.c: 1195: }
  8639                           ;vscp_firmware.c: 1198: vscp_sendEvent();
  8640  003300  EC73  F02B         	call	_vscp_sendEvent	;wreg free
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;vscp_firmware.c: 1201: byte += bytes_this_time;
  8644  003304  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8645  003306  2796               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;vscp_firmware.c: 1204: vscp_omsg.data[0] += 1;
  8649  003308  2BCF               	incf	(_vscp_omsg+5)& (0+255),f,b
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;vscp_firmware.c: 1206: } while (byte < bytes);
  8653  00330A  5194               	movf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8654  00330C  5D96               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8655  00330E  E3CC               	bnc	l10020
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;vscp_firmware.c: 1209: vscp_page_select = page_save;
  8659  003310  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8660  003314  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8661  003318  D08C               	goto	l1262
  8662  00331A                     l10042:
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;vscp_firmware.c: 1216: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8666  00331A  51B9               	movf	_vscp_nickname& (0+255),w,b
  8667  00331C  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8668  003320  62DF               	cpfseq	indf2,c
  8669  003322  D087               	goto	l1262
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;vscp_firmware.c: 1218: uint8_t i;
  8673                           ;vscp_firmware.c: 1219: uint16_t page_save;
  8674                           ;vscp_firmware.c: 1222: page_save = vscp_page_select;
  8675  003324  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1165
  8676  003328  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1165+1
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;vscp_firmware.c: 1226: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8680  00332C  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8681  00332E  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8682  003332  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8683  003334  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8684  003338  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8685  00333A  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8686  00333C  6E46               	movwf	_vscp_page_select,c
  8687  00333E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8688  003340  6E47               	movwf	_vscp_page_select+1,c
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;vscp_firmware.c: 1228: for (i = vscp_imsg.data[ 3 ];
  8692  003342  C0C5  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1164
  8693                           
  8694                           ;vscp_firmware.c: 1231: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8695                           ;vscp_firmware.c: 1232: i++) {
  8696  003346  D014               	goto	l10054
  8697  003348                     l10050:
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;vscp_firmware.c: 1233: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8701                           ;vscp_firmware.c: 1234: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8702  003348  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8703  00334A  08C6               	sublw	low (_vscp_imsg+10)
  8704  00334C  2592               	addwf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8705  00334E  6ED9               	movwf	fsr2l,c
  8706  003350  6ADA               	clrf	fsr2h,c
  8707  003352  50DF               	movf	indf2,w,c
  8708  003354  6E34               	movwf	?_vscp_writeRegister,c
  8709  003356  5192               	movf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8710  003358  ECE3  F02B         	call	_vscp_writeRegister
  8711  00335C  0100               	movlb	0	; () banked
  8712  00335E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8713  003360  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8714  003362  08D3               	sublw	low (_vscp_omsg+9)
  8715  003364  2592               	addwf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8716  003366  6ED9               	movwf	fsr2l,c
  8717  003368  6ADA               	clrf	fsr2h,c
  8718  00336A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8719                           
  8720                           ; BSR set to: 0
  8721  00336E  2B92               	incf	vscp_handleProtocolEvent@i_1164& (0+255),f,b
  8722  003370                     l10054:
  8723                           
  8724                           ; BSR set to: 0
  8725  003370  51BC               	movf	_vscp_imsg& (0+255),w,b
  8726  003372  0B0F               	andlw	15
  8727  003374  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8728  003376  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8729  003378  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8730  00337A  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8731  00337C  0E00               	movlw	0
  8732  00337E  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8733  003380  0EFC               	movlw	252
  8734  003382  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8735  003384  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8736  003386  0EFF               	movlw	255
  8737  003388  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8738  00338A  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8739  00338C  5192               	movf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8740  00338E  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8741  003390  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8742  003392  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8743  003394  0A80               	xorlw	128
  8744  003396  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8745  003398  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8746  00339A  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8747  00339C  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8748  00339E  0A80               	xorlw	128
  8749  0033A0  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8750  0033A2  E3D2               	bnc	l10050
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;vscp_firmware.c: 1235: }
  8754                           ;vscp_firmware.c: 1238: vscp_page_select = page_save;
  8755  0033A4  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1165,_vscp_page_select
  8756  0033A8  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1165+1,_vscp_page_select+1
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;vscp_firmware.c: 1240: vscp_omsg.priority = 0x03;
  8760  0033AC  0E03               	movlw	3
  8761  0033AE  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;vscp_firmware.c: 1241: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8765  0033B0  51BC               	movf	_vscp_imsg& (0+255),w,b
  8766  0033B2  0B0F               	andlw	15
  8767  0033B4  0F80               	addlw	128
  8768  0033B6  6FCA               	movwf	_vscp_omsg& (0+255),b
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;vscp_firmware.c: 1242: vscp_omsg.vscp_class = 0;
  8772  0033B8  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8773  0033BA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;vscp_firmware.c: 1243: vscp_omsg.vscp_type = 39;
  8777  0033BC  0E27               	movlw	39
  8778  0033BE  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;vscp_firmware.c: 1244: vscp_omsg.data[0] = 0;
  8782  0033C0  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;vscp_firmware.c: 1245: vscp_omsg.data[1] = vscp_imsg.data[1];
  8786  0033C2  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;vscp_firmware.c: 1246: vscp_omsg.data[2] = vscp_imsg.data[2];
  8790  0033C6  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;vscp_firmware.c: 1247: vscp_omsg.data[3] = vscp_imsg.data[3];
  8794  0033CA  C0C5  F0D2         	movff	_vscp_imsg+9,_vscp_omsg+8
  8795  0033CE  D53E               	goto	l9682
  8796  0033D0                     l10076:
  8797                           
  8798                           ; BSR set to: 0
  8799  0033D0  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  8800                           
  8801                           ; Switch size 1, requested type "speed"
  8802                           ; Number of cases is 16, Range of values is 1 to 38
  8803                           ; switch strategies available:
  8804                           ; Name         Instructions Cycles
  8805                           ; simple_byte           49    25 (average)
  8806                           ;	Chosen strategy is simple_byte
  8807  0033D2  0A01               	xorlw	1	; case 1
  8808  0033D4  E101 D512          	bz	l9656
  8809  0033D8  0A03               	xorlw	3	; case 2
  8810  0033DA  E101 D512          	bz	l9658
  8811  0033DE  0A04               	xorlw	4	; case 6
  8812  0033E0  E101 D512          	bz	l9660
  8813  0033E4  0A0E               	xorlw	14	; case 8
  8814  0033E6  E101 D512          	bz	l9662
  8815  0033EA  0A01               	xorlw	1	; case 9
  8816  0033EC  E101 D512          	bz	l9664
  8817  0033F0  0A02               	xorlw	2	; case 11
  8818  0033F2  E101 D532          	bz	l9698
  8819  0033F6  0A07               	xorlw	7	; case 12
  8820  0033F8  E101 D548          	bz	l9732
  8821  0033FC  0A1B               	xorlw	27	; case 23
  8822  0033FE  E101 D5EA          	bz	l9798
  8823  003402  0A0F               	xorlw	15	; case 24
  8824  003404  E101 D5FE          	bz	l9804
  8825  003408  0A01               	xorlw	1	; case 25
  8826  00340A  E101 D655          	bz	l9838
  8827  00340E  0A04               	xorlw	4	; case 29
  8828  003410  E101 D685          	bz	l9864
  8829  003414  0A03               	xorlw	3	; case 30
  8830  003416  E101 D692          	bz	l9880
  8831  00341A  0A01               	xorlw	1	; case 31
  8832  00341C  E101 D69F          	bz	l9896
  8833  003420  0A3E               	xorlw	62	; case 33
  8834  003422  E101 D703          	bz	l9982
  8835  003426  0A04               	xorlw	4	; case 37
  8836  003428  E101 D711          	bz	l9992
  8837  00342C  0A03               	xorlw	3	; case 38
  8838  00342E  E101 D774          	bz	l10042
  8839  003432                     l1262:
  8840  003432  0012               	return	
  8841  003434                     __end_of_vscp_handleProtocolEvent:
  8842                           	opt stack 0
  8843                           tblptru	equ	0xFF8
  8844                           tblptrh	equ	0xFF7
  8845                           tblptrl	equ	0xFF6
  8846                           tablat	equ	0xFF5
  8847                           prodh	equ	0xFF4
  8848                           prodl	equ	0xFF3
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           postdec1	equ	0xFE5
  8852                           fsr1h	equ	0xFE2
  8853                           fsr1l	equ	0xFE1
  8854                           indf2	equ	0xFDF
  8855                           postinc2	equ	0xFDE
  8856                           postdec2	equ	0xFDD
  8857                           fsr2h	equ	0xFDA
  8858                           fsr2l	equ	0xFD9
  8859                           status	equ	0xFD8
  8860                           
  8861 ;; *************** function ___lbmod *****************
  8862 ;; Defined at:
  8863 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  dividend        1    wreg     unsigned char 
  8866 ;;  divisor         1   13[COMRAM] unsigned char 
  8867 ;; Auto vars:     Size  Location     Type
  8868 ;;  dividend        1   14[COMRAM] unsigned char 
  8869 ;;  rem             1   16[COMRAM] unsigned char 
  8870 ;;  counter         1   15[COMRAM] unsigned char 
  8871 ;; Return value:  Size  Location     Type
  8872 ;;                  1    wreg      unsigned char 
  8873 ;; Registers used:
  8874 ;;		wreg, status,2, status,0
  8875 ;; Tracked objects:
  8876 ;;		On entry : F/0
  8877 ;;		On exit  : 0/0
  8878 ;;		Unchanged: 0/0
  8879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8880 ;;      Params:         1       0       0       0       0       0       0
  8881 ;;      Locals:         3       0       0       0       0       0       0
  8882 ;;      Temps:          0       0       0       0       0       0       0
  8883 ;;      Totals:         4       0       0       0       0       0       0
  8884 ;;Total ram usage:        4 bytes
  8885 ;; Hardware stack levels used:    1
  8886 ;; Hardware stack levels required when called:    2
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;;		_vscp_handleProtocolEvent
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           	psect	text34
  8895  0056BE                     __ptext34:
  8896                           	opt stack 0
  8897  0056BE                     ___lbmod:
  8898                           	opt stack 27
  8899                           
  8900                           ;incstack = 0
  8901                           ;incstack = 0
  8902                           ;___lbmod@dividend stored from wreg
  8903  0056BE  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8904                           
  8905                           ; BSR set to: 0
  8906  0056C2  0E08               	movlw	8
  8907  0056C4  6E10               	movwf	___lbmod@counter,c
  8908                           
  8909                           ; BSR set to: 0
  8910  0056C6  6A11               	clrf	___lbmod@rem,c
  8911  0056C8                     l9092:
  8912  0056C8  90D8               	bcf	status,0,c
  8913  0056CA  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8914  0056CC  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8915  0056CE  6E11               	movwf	___lbmod@rem,c
  8916  0056D0  90D8               	bcf	status,0,c
  8917  0056D2  360F               	rlcf	___lbmod@dividend,f,c
  8918  0056D4  500E               	movf	___lbmod@divisor,w,c
  8919  0056D6  5C11               	subwf	___lbmod@rem,w,c
  8920  0056D8  E302               	bnc	l9100
  8921  0056DA  500E               	movf	___lbmod@divisor,w,c
  8922  0056DC  5E11               	subwf	___lbmod@rem,f,c
  8923  0056DE                     l9100:
  8924  0056DE  2E10               	decfsz	___lbmod@counter,f,c
  8925  0056E0  D7F3               	goto	l9092
  8926  0056E2  5011               	movf	___lbmod@rem,w,c
  8927  0056E4  0012               	return	
  8928  0056E6                     __end_of___lbmod:
  8929                           	opt stack 0
  8930                           tblptru	equ	0xFF8
  8931                           tblptrh	equ	0xFF7
  8932                           tblptrl	equ	0xFF6
  8933                           tablat	equ	0xFF5
  8934                           prodh	equ	0xFF4
  8935                           prodl	equ	0xFF3
  8936                           postinc0	equ	0xFEE
  8937                           wreg	equ	0xFE8
  8938                           postdec1	equ	0xFE5
  8939                           fsr1h	equ	0xFE2
  8940                           fsr1l	equ	0xFE1
  8941                           indf2	equ	0xFDF
  8942                           postinc2	equ	0xFDE
  8943                           postdec2	equ	0xFDD
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _vscp_writeRegister *****************
  8949 ;; Defined at:
  8950 ;;		line 675 in file "../../vscp_firmware/common/vscp_firmware.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  reg             1    wreg     unsigned char 
  8953 ;;  value           1   51[COMRAM] unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  reg             1   52[COMRAM] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      unsigned char 
  8958 ;; Registers used:
  8959 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : F/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8965 ;;      Params:         1       0       0       0       0       0       0
  8966 ;;      Locals:         1       0       0       0       0       0       0
  8967 ;;      Temps:          0       0       0       0       0       0       0
  8968 ;;      Totals:         2       0       0       0       0       0       0
  8969 ;;Total ram usage:        2 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    7
  8972 ;; This function calls:
  8973 ;;		_vscp_writeAppReg
  8974 ;;		_vscp_writeStdReg
  8975 ;; This function is called by:
  8976 ;;		_vscp_handleProtocolEvent
  8977 ;; This function uses a non-reentrant model
  8978 ;;
  8979                           
  8980                           	psect	text35
  8981  0057C6                     __ptext35:
  8982                           	opt stack 0
  8983  0057C6                     _vscp_writeRegister:
  8984                           	opt stack 22
  8985                           
  8986                           ;incstack = 0
  8987                           ;incstack = 0
  8988                           ;vscp_writeRegister@reg stored from wreg
  8989  0057C6  CFE8 F035          	movff	wreg,vscp_writeRegister@reg
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;vscp_firmware.c: 676: if (reg >= 0x80) {
  8993  0057CA  0E7F               	movlw	127
  8994  0057CC  6435               	cpfsgt	vscp_writeRegister@reg,c
  8995  0057CE  D006               	goto	l11298
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;vscp_firmware.c: 677: return vscp_writeStdReg(reg, value);
  8999  0057D0  C034  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9000  0057D4  5035               	movf	vscp_writeRegister@reg,w,c
  9001  0057D6  EC17  F01D         	call	_vscp_writeStdReg
  9002  0057DA  D005               	goto	l1138
  9003  0057DC                     l11298:
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;vscp_firmware.c: 679: return vscp_writeAppReg(reg, value);
  9007  0057DC  C034  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9008  0057E0  5035               	movf	vscp_writeRegister@reg,w,c
  9009  0057E2  EC37  F003         	call	_vscp_writeAppReg
  9010  0057E6                     l1138:
  9011  0057E6  0012               	return	
  9012  0057E8                     __end_of_vscp_writeRegister:
  9013                           	opt stack 0
  9014                           tblptru	equ	0xFF8
  9015                           tblptrh	equ	0xFF7
  9016                           tblptrl	equ	0xFF6
  9017                           tablat	equ	0xFF5
  9018                           prodh	equ	0xFF4
  9019                           prodl	equ	0xFF3
  9020                           postinc0	equ	0xFEE
  9021                           wreg	equ	0xFE8
  9022                           postdec1	equ	0xFE5
  9023                           fsr1h	equ	0xFE2
  9024                           fsr1l	equ	0xFE1
  9025                           indf2	equ	0xFDF
  9026                           postinc2	equ	0xFDE
  9027                           postdec2	equ	0xFDD
  9028                           fsr2h	equ	0xFDA
  9029                           fsr2l	equ	0xFD9
  9030                           status	equ	0xFD8
  9031                           
  9032 ;; *************** function _vscp_writeStdReg *****************
  9033 ;; Defined at:
  9034 ;;		line 688 in file "../../vscp_firmware/common/vscp_firmware.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;  reg             1    wreg     unsigned char 
  9037 ;;  value           1   33[COMRAM] unsigned char 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  reg             1   50[COMRAM] unsigned char 
  9040 ;;  code            4   43[COMRAM] unsigned long 
  9041 ;;  idx             1   48[COMRAM] unsigned char 
  9042 ;;  code            4   39[COMRAM] unsigned long 
  9043 ;;  idx             1   47[COMRAM] unsigned char 
  9044 ;;  rv              1   49[COMRAM] unsigned char 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      unsigned char 
  9047 ;; Registers used:
  9048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : F/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9054 ;;      Params:         1       0       0       0       0       0       0
  9055 ;;      Locals:        12       0       0       0       0       0       0
  9056 ;;      Temps:          5       0       0       0       0       0       0
  9057 ;;      Totals:        18       0       0       0       0       0       0
  9058 ;;Total ram usage:       18 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    6
  9061 ;; This function calls:
  9062 ;;		_vscp_getGUID
  9063 ;;		_vscp_setGUID
  9064 ;;		_vscp_getUserID
  9065 ;;		_vscp_setUserID
  9066 ;;		_vscp_getManufacturerId
  9067 ;;		_vscp_setManufacturerId
  9068 ;;		_vscp_getFamilyCode
  9069 ;;		_vscp_getFamilyType
  9070 ;;		_vscp_restoreDefaults
  9071 ;; This function is called by:
  9072 ;;		_vscp_writeRegister
  9073 ;;		_vscp_handleProtocolEvent
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text36
  9078  003A2E                     __ptext36:
  9079                           	opt stack 0
  9080  003A2E                     _vscp_writeStdReg:
  9081                           	opt stack 23
  9082                           
  9083                           ;incstack = 0
  9084                           ;incstack = 0
  9085                           ;vscp_writeStdReg@reg stored from wreg
  9086  003A2E  CFE8 F033          	movff	wreg,vscp_writeStdReg@reg
  9087                           
  9088                           ; BSR set to: 0
  9089                           ;vscp_firmware.c: 689: uint8_t rv = ~value;
  9090  003A32  1C22               	comf	vscp_writeStdReg@value,w,c
  9091  003A34  6E32               	movwf	vscp_writeStdReg@rv,c
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;vscp_firmware.c: 691: if ((reg > (0x82 + 1)) &&
  9095                           ;vscp_firmware.c: 692: (reg < 0x89)) {
  9096  003A36  0E83               	movlw	131
  9097  003A38  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9098  003A3A  D00E               	goto	l11310
  9099                           
  9100                           ; BSR set to: 0
  9101  003A3C  0E89               	movlw	137
  9102  003A3E  6033               	cpfslt	vscp_writeStdReg@reg,c
  9103  003A40  D00B               	goto	l11310
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;vscp_firmware.c: 695: vscp_setUserID((reg - 0x84), value);
  9107  003A42  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9108  003A46  5033               	movf	vscp_writeStdReg@reg,w,c
  9109  003A48  0F7C               	addlw	124
  9110  003A4A  EC49  F02C         	call	_vscp_setUserID
  9111                           
  9112                           ;vscp_firmware.c: 696: rv = vscp_getUserID((reg - 0x84));
  9113  003A4E  5033               	movf	vscp_writeStdReg@reg,w,c
  9114  003A50  0F7C               	addlw	124
  9115  003A52  EC77  F02C         	call	_vscp_getUserID
  9116  003A56  D083               	goto	L17
  9117  003A58                     l11310:
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;vscp_firmware.c: 699: else if (0x92 == reg) {
  9121  003A58  5033               	movf	vscp_writeStdReg@reg,w,c
  9122  003A5A  0A92               	xorlw	146
  9123  003A5C  E10D               	bnz	l11316
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;vscp_firmware.c: 702: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9127  003A5E  5022               	movf	vscp_writeStdReg@value,w,c
  9128  003A60  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9129  003A62  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9130  003A64  5046               	movf	_vscp_page_select,w,c
  9131  003A66  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9132  003A68  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9133  003A6A  1023               	iorwf	??_vscp_writeStdReg,w,c
  9134  003A6C  6E46               	movwf	_vscp_page_select,c
  9135  003A6E  5024               	movf	??_vscp_writeStdReg+1,w,c
  9136  003A70  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9137  003A72  6E47               	movwf	_vscp_page_select+1,c
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;vscp_firmware.c: 703: rv = (vscp_page_select >> 8) & 0xff;
  9141  003A74  5047               	movf	_vscp_page_select+1,w,c
  9142  003A76  D073               	goto	L17
  9143  003A78                     l11316:
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;vscp_firmware.c: 705: else if (0x93 == reg) {
  9147  003A78  5033               	movf	vscp_writeStdReg@reg,w,c
  9148  003A7A  0A93               	xorlw	147
  9149  003A7C  E10B               	bnz	l11322
  9150                           
  9151                           ; BSR set to: 0
  9152                           ;vscp_firmware.c: 708: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9153  003A7E  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9154  003A80  5047               	movf	_vscp_page_select+1,w,c
  9155  003A82  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9156  003A84  5022               	movf	vscp_writeStdReg@value,w,c
  9157  003A86  1023               	iorwf	??_vscp_writeStdReg,w,c
  9158  003A88  6E46               	movwf	_vscp_page_select,c
  9159  003A8A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9160  003A8C  6E47               	movwf	_vscp_page_select+1,c
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;vscp_firmware.c: 709: rv = (vscp_page_select & 0xff);
  9164  003A8E  C046  F032         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9165                           
  9166                           ;vscp_firmware.c: 710: }
  9167  003A92  D0B1               	goto	l11384
  9168  003A94                     l11322:
  9169                           
  9170                           ; BSR set to: 0
  9171                           ;vscp_firmware.c: 715: else if ((reg > 0x88) && (reg < 0x91)) {
  9172  003A94  0E88               	movlw	136
  9173  003A96  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9174  003A98  D019               	goto	l11334
  9175                           
  9176                           ; BSR set to: 0
  9177  003A9A  0E91               	movlw	145
  9178  003A9C  6033               	cpfslt	vscp_writeStdReg@reg,c
  9179  003A9E  D016               	goto	l11334
  9180                           
  9181                           ; BSR set to: 0
  9182                           ;vscp_firmware.c: 717: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9183                           ;vscp_firmware.c: 718: (0xff != (vscp_page_select & 0xff))) {
  9184  003AA0  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9185  003AA4  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9186  003AA8  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9187  003AAA  2824               	incf	??_vscp_writeStdReg+1,w,c
  9188  003AAC  E102               	bnz	l11330
  9189                           
  9190                           ; BSR set to: 0
  9191  003AAE  2846               	incf	_vscp_page_select,w,c
  9192  003AB0  E002               	bz	l11332
  9193  003AB2                     l11330:
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;vscp_firmware.c: 720: rv = ~value;
  9197  003AB2  1C22               	comf	vscp_writeStdReg@value,w,c
  9198  003AB4  D054               	goto	L17
  9199  003AB6                     l11332:
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;vscp_firmware.c: 723: vscp_setManufacturerId(reg - 0x89, value);
  9203  003AB6  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9204  003ABA  5033               	movf	vscp_writeStdReg@reg,w,c
  9205  003ABC  0F77               	addlw	119
  9206  003ABE  EC3D  F02C         	call	_vscp_setManufacturerId
  9207                           
  9208                           ;vscp_firmware.c: 724: rv = vscp_getManufacturerId(reg - 0x89);
  9209  003AC2  5033               	movf	vscp_writeStdReg@reg,w,c
  9210  003AC4  0F77               	addlw	119
  9211  003AC6  EC6D  F02C         	call	_vscp_getManufacturerId
  9212  003ACA  D049               	goto	L17
  9213  003ACC                     l11334:
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;vscp_firmware.c: 727: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9217  003ACC  0ECF               	movlw	207
  9218  003ACE  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9219  003AD0  D017               	goto	l11346
  9220                           
  9221                           ; BSR set to: 0
  9222  003AD2  0EE0               	movlw	224
  9223  003AD4  6033               	cpfslt	vscp_writeStdReg@reg,c
  9224  003AD6  D014               	goto	l11346
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;vscp_firmware.c: 729: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9228                           ;vscp_firmware.c: 730: (0xff != (vscp_page_select & 0xff))) {
  9229  003AD8  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9230  003ADC  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9231  003AE0  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9232  003AE2  2824               	incf	??_vscp_writeStdReg+1,w,c
  9233  003AE4  E1E6               	bnz	l11330
  9234                           
  9235                           ; BSR set to: 0
  9236  003AE6  2846               	incf	_vscp_page_select,w,c
  9237  003AE8  E1E4               	bnz	l11330
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;vscp_firmware.c: 734: vscp_setGUID(reg - 0xD0, value);
  9241  003AEA  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9242  003AEE  5033               	movf	vscp_writeStdReg@reg,w,c
  9243  003AF0  0F30               	addlw	48
  9244  003AF2  ECF4  F02B         	call	_vscp_setGUID
  9245                           
  9246                           ;vscp_firmware.c: 735: rv = vscp_getGUID(reg - 0xD0);
  9247  003AF6  5033               	movf	vscp_writeStdReg@reg,w,c
  9248  003AF8  0F30               	addlw	48
  9249  003AFA  EC81  F02C         	call	_vscp_getGUID
  9250  003AFE  D02F               	goto	L17
  9251  003B00                     l11346:
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;vscp_firmware.c: 739: else if ( ( reg >= 0x9A ) &&
  9255                           ;vscp_firmware.c: 740: ( reg < 0x9E ) ) {
  9256  003B00  0E99               	movlw	153
  9257  003B02  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9258  003B04  D02E               	goto	l11356
  9259                           
  9260                           ; BSR set to: 0
  9261  003B06  0E9E               	movlw	158
  9262  003B08  6033               	cpfslt	vscp_writeStdReg@reg,c
  9263  003B0A  D02B               	goto	l11356
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;vscp_firmware.c: 742: uint32_t code = vscp_getFamilyCode();
  9267  003B0C  ECD8  F02C         	call	_vscp_getFamilyCode	;wreg free
  9268  003B10  C011  F02B         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  9269  003B14  C010  F02A         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  9270  003B18  C00F  F029         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  9271  003B1C  C00E  F028         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  9272                           
  9273                           ; BSR set to: 0
  9274                           ;vscp_firmware.c: 743: uint8_t idx = reg - 0x9A;
  9275  003B20  5033               	movf	vscp_writeStdReg@reg,w,c
  9276  003B22  0F66               	addlw	102
  9277  003B24  6E30               	movwf	vscp_writeStdReg@idx,c
  9278                           
  9279                           ; BSR set to: 0
  9280                           ;vscp_firmware.c: 744: rv = code >> (((3-idx)*8) & 0xff);
  9281  003B26  5030               	movf	vscp_writeStdReg@idx,w,c
  9282  003B28  0803               	sublw	3
  9283  003B2A  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9284  003B2C  90D8               	bcf	status,0,c
  9285  003B2E  3623               	rlcf	??_vscp_writeStdReg,f,c
  9286  003B30  90D8               	bcf	status,0,c
  9287  003B32  3623               	rlcf	??_vscp_writeStdReg,f,c
  9288  003B34  90D8               	bcf	status,0,c
  9289  003B36  3623               	rlcf	??_vscp_writeStdReg,f,c
  9290  003B38  5023               	movf	??_vscp_writeStdReg,w,c
  9291  003B3A  C028  F024         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  9292  003B3E  C029  F025         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  9293  003B42  C02A  F026         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  9294  003B46  C02B  F027         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  9295  003B4A  2AE8               	incf	wreg,f,c
  9296  003B4C  D005               	goto	u9590
  9297  003B4E                     u9595:
  9298  003B4E  90D8               	bcf	status,0,c
  9299  003B50  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9300  003B52  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9301  003B54  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9302  003B56  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9303  003B58                     u9590:
  9304  003B58  2EE8               	decfsz	wreg,f,c
  9305  003B5A  D7F9               	goto	u9595
  9306  003B5C  D030               	goto	L18
  9307  003B5E                     L17:
  9308  003B5E  6E32               	movwf	vscp_writeStdReg@rv,c
  9309                           
  9310                           ;vscp_firmware.c: 745: }
  9311  003B60  D04A               	goto	l11384
  9312  003B62                     l11356:
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;vscp_firmware.c: 746: else if ( ( reg >= 0x9E ) &&
  9316                           ;vscp_firmware.c: 747: ( reg < 0xA2 ) ) {
  9317  003B62  0E9D               	movlw	157
  9318  003B64  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9319  003B66  D02D               	goto	l11366
  9320                           
  9321                           ; BSR set to: 0
  9322  003B68  0EA2               	movlw	162
  9323  003B6A  6033               	cpfslt	vscp_writeStdReg@reg,c
  9324  003B6C  D02A               	goto	l11366
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;vscp_firmware.c: 749: uint32_t code = vscp_getFamilyType();
  9328  003B6E  ECD3  F02C         	call	_vscp_getFamilyType	;wreg free
  9329  003B72  C011  F02F         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1145+3
  9330  003B76  C010  F02E         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1145+2
  9331  003B7A  C00F  F02D         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1145+1
  9332  003B7E  C00E  F02C         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1145
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;vscp_firmware.c: 750: uint8_t idx = reg - 0x9E;
  9336  003B82  5033               	movf	vscp_writeStdReg@reg,w,c
  9337  003B84  0F62               	addlw	98
  9338  003B86  6E31               	movwf	vscp_writeStdReg@idx_1146,c
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;vscp_firmware.c: 751: rv = code >> (((3-idx)*8) & 0xff);
  9342  003B88  5031               	movf	vscp_writeStdReg@idx_1146,w,c
  9343  003B8A  0803               	sublw	3
  9344  003B8C  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9345  003B8E  90D8               	bcf	status,0,c
  9346  003B90  3623               	rlcf	??_vscp_writeStdReg,f,c
  9347  003B92  90D8               	bcf	status,0,c
  9348  003B94  3623               	rlcf	??_vscp_writeStdReg,f,c
  9349  003B96  90D8               	bcf	status,0,c
  9350  003B98  3623               	rlcf	??_vscp_writeStdReg,f,c
  9351  003B9A  5023               	movf	??_vscp_writeStdReg,w,c
  9352  003B9C  C02C  F024         	movff	vscp_writeStdReg@code_1145,??_vscp_writeStdReg+1
  9353  003BA0  C02D  F025         	movff	vscp_writeStdReg@code_1145+1,??_vscp_writeStdReg+2
  9354  003BA4  C02E  F026         	movff	vscp_writeStdReg@code_1145+2,??_vscp_writeStdReg+3
  9355  003BA8  C02F  F027         	movff	vscp_writeStdReg@code_1145+3,??_vscp_writeStdReg+4
  9356  003BAC  2AE8               	incf	wreg,f,c
  9357  003BAE  D005               	goto	u9620
  9358  003BB0                     u9625:
  9359  003BB0  90D8               	bcf	status,0,c
  9360  003BB2  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9361  003BB4  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9362  003BB6  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9363  003BB8  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9364  003BBA                     u9620:
  9365  003BBA  2EE8               	decfsz	wreg,f,c
  9366  003BBC  D7F9               	goto	u9625
  9367  003BBE                     L18:
  9368  003BBE  5024               	movf	??_vscp_writeStdReg+1,w,c
  9369  003BC0  D7CE               	goto	L17
  9370  003BC2                     l11366:
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;vscp_firmware.c: 753: else if ( 0xA2 == reg ) {
  9374  003BC2  5033               	movf	vscp_writeStdReg@reg,w,c
  9375  003BC4  0AA2               	xorlw	162
  9376  003BC6  E001 D774          	bnz	l11330
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;vscp_firmware.c: 754: if ( 0x55 == value ) {
  9380  003BCA  5022               	movf	vscp_writeStdReg@value,w,c
  9381  003BCC  0A55               	xorlw	85
  9382  003BCE  E105               	bnz	l11374
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;vscp_firmware.c: 755: vscp_configtimer = 0;
  9386  003BD0  0101               	movlb	1	; () banked
  9387  003BD2  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9388  003BD4  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9389                           
  9390                           ; BSR set to: 1
  9391                           ;vscp_firmware.c: 756: rv = 0x55;
  9392  003BD6  0E55               	movlw	85
  9393  003BD8  D7C2               	goto	L17
  9394  003BDA                     l11374:
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;vscp_firmware.c: 758: else if ( 0xaa == value ) {
  9398  003BDA  5022               	movf	vscp_writeStdReg@value,w,c
  9399  003BDC  0AAA               	xorlw	170
  9400  003BDE  E10B               	bnz	l11384
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;vscp_firmware.c: 759: if ( vscp_configtimer < 1000 ) {
  9404  003BE0  0EE8               	movlw	232
  9405  003BE2  0101               	movlb	1	; () banked
  9406  003BE4  5D1A               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9407  003BE6  0E03               	movlw	3
  9408  003BE8  591B               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9409  003BEA  E204               	bc	l1168
  9410                           
  9411                           ; BSR set to: 1
  9412                           ;vscp_firmware.c: 760: vscp_restoreDefaults();
  9413  003BEC  ECE7  F02C         	call	_vscp_restoreDefaults	;wreg free
  9414                           
  9415                           ; BSR set to: 1
  9416                           ;vscp_firmware.c: 761: rv = 0xaa;
  9417  003BF0  0EAA               	movlw	170
  9418  003BF2  D7B5               	goto	L17
  9419  003BF4                     l1168:
  9420                           
  9421                           ; BSR set to: 1
  9422                           ;vscp_firmware.c: 763: else {
  9423                           ;vscp_firmware.c: 764: rv = 0;
  9424  003BF4  6A32               	clrf	vscp_writeStdReg@rv,c
  9425  003BF6                     l11384:
  9426                           
  9427                           ;vscp_firmware.c: 772: }
  9428                           ;vscp_firmware.c: 774: return rv;
  9429  003BF6  5032               	movf	vscp_writeStdReg@rv,w,c
  9430  003BF8  0012               	return	
  9431  003BFA                     __end_of_vscp_writeStdReg:
  9432                           	opt stack 0
  9433                           tblptru	equ	0xFF8
  9434                           tblptrh	equ	0xFF7
  9435                           tblptrl	equ	0xFF6
  9436                           tablat	equ	0xFF5
  9437                           prodh	equ	0xFF4
  9438                           prodl	equ	0xFF3
  9439                           postinc0	equ	0xFEE
  9440                           wreg	equ	0xFE8
  9441                           postdec1	equ	0xFE5
  9442                           fsr1h	equ	0xFE2
  9443                           fsr1l	equ	0xFE1
  9444                           indf2	equ	0xFDF
  9445                           postinc2	equ	0xFDE
  9446                           postdec2	equ	0xFDD
  9447                           fsr2h	equ	0xFDA
  9448                           fsr2l	equ	0xFD9
  9449                           status	equ	0xFD8
  9450                           
  9451 ;; *************** function _vscp_restoreDefaults *****************
  9452 ;; Defined at:
  9453 ;;		line 2821 in file "../main.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;		None
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;		None
  9458 ;; Return value:  Size  Location     Type
  9459 ;;		None               void
  9460 ;; Registers used:
  9461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9462 ;; Tracked objects:
  9463 ;;		On entry : F/1
  9464 ;;		On exit  : F/1
  9465 ;;		Unchanged: 0/0
  9466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9467 ;;      Params:         0       0       0       0       0       0       0
  9468 ;;      Locals:         0       0       0       0       0       0       0
  9469 ;;      Temps:          0       0       0       0       0       0       0
  9470 ;;      Totals:         0       0       0       0       0       0       0
  9471 ;;Total ram usage:        0 bytes
  9472 ;; Hardware stack levels used:    1
  9473 ;; Hardware stack levels required when called:    5
  9474 ;; This function calls:
  9475 ;;		_init_app_eeprom
  9476 ;;		_init_app_ram
  9477 ;; This function is called by:
  9478 ;;		_vscp_writeStdReg
  9479 ;; This function uses a non-reentrant model
  9480 ;;
  9481                           
  9482                           	psect	text37
  9483  0059CE                     __ptext37:
  9484                           	opt stack 0
  9485  0059CE                     _vscp_restoreDefaults:
  9486                           	opt stack 23
  9487                           
  9488                           ; BSR set to: 1
  9489                           ;main.c: 2822: init_app_eeprom();
  9490                           
  9491                           ;incstack = 0
  9492                           ;incstack = 0
  9493  0059CE  ECA8  F00F         	call	_init_app_eeprom	;wreg free
  9494                           
  9495                           ;main.c: 2823: init_app_ram();
  9496  0059D2  EFE0  F029         	goto	_init_app_ram	;wreg free
  9497  0059D6                     __end_of_vscp_restoreDefaults:
  9498                           	opt stack 0
  9499                           tblptru	equ	0xFF8
  9500                           tblptrh	equ	0xFF7
  9501                           tblptrl	equ	0xFF6
  9502                           tablat	equ	0xFF5
  9503                           prodh	equ	0xFF4
  9504                           prodl	equ	0xFF3
  9505                           postinc0	equ	0xFEE
  9506                           wreg	equ	0xFE8
  9507                           postdec1	equ	0xFE5
  9508                           fsr1h	equ	0xFE2
  9509                           fsr1l	equ	0xFE1
  9510                           indf2	equ	0xFDF
  9511                           postinc2	equ	0xFDE
  9512                           postdec2	equ	0xFDD
  9513                           fsr2h	equ	0xFDA
  9514                           fsr2l	equ	0xFD9
  9515                           status	equ	0xFD8
  9516                           
  9517 ;; *************** function _init_app_eeprom *****************
  9518 ;; Defined at:
  9519 ;;		line 1013 in file "../main.c"
  9520 ;; Parameters:    Size  Location     Type
  9521 ;;		None
  9522 ;; Auto vars:     Size  Location     Type
  9523 ;;  i               1   16[COMRAM] unsigned char 
  9524 ;; Return value:  Size  Location     Type
  9525 ;;		None               void
  9526 ;; Registers used:
  9527 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9528 ;; Tracked objects:
  9529 ;;		On entry : 0/1
  9530 ;;		On exit  : 0/0
  9531 ;;		Unchanged: 0/0
  9532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9533 ;;      Params:         0       0       0       0       0       0       0
  9534 ;;      Locals:         1       0       0       0       0       0       0
  9535 ;;      Temps:          0       0       0       0       0       0       0
  9536 ;;      Totals:         1       0       0       0       0       0       0
  9537 ;;Total ram usage:        1 bytes
  9538 ;; Hardware stack levels used:    1
  9539 ;; Hardware stack levels required when called:    3
  9540 ;; This function calls:
  9541 ;;		_writeEEPROM
  9542 ;; This function is called by:
  9543 ;;		_main
  9544 ;;		_vscp_restoreDefaults
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           	psect	text38
  9549  001F50                     __ptext38:
  9550                           	opt stack 0
  9551  001F50                     _init_app_eeprom:
  9552                           	opt stack 24
  9553                           
  9554                           ;main.c: 1014: writeEEPROM(0x43, 0b00000001);
  9555                           
  9556                           ; BSR set to: 1
  9557                           ;incstack = 0
  9558                           ;incstack = 0
  9559  001F50  6A0F               	clrf	?_writeEEPROM+1,c
  9560  001F52  0E43               	movlw	67
  9561  001F54  6E0E               	movwf	?_writeEEPROM,c
  9562  001F56  0E01               	movlw	1
  9563  001F58  6E10               	movwf	?_writeEEPROM+2,c
  9564  001F5A  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9565                           
  9566                           ;main.c: 1015: writeEEPROM(0x44, 0b00000001);
  9567  001F5E  6A0F               	clrf	?_writeEEPROM+1,c
  9568  001F60  0E44               	movlw	68
  9569  001F62  6E0E               	movwf	?_writeEEPROM,c
  9570  001F64  0E01               	movlw	1
  9571  001F66  6E10               	movwf	?_writeEEPROM+2,c
  9572  001F68  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9573                           
  9574                           ;main.c: 1016: writeEEPROM(0x45, 0b00000001);
  9575  001F6C  6A0F               	clrf	?_writeEEPROM+1,c
  9576  001F6E  0E45               	movlw	69
  9577  001F70  6E0E               	movwf	?_writeEEPROM,c
  9578  001F72  0E01               	movlw	1
  9579  001F74  6E10               	movwf	?_writeEEPROM+2,c
  9580  001F76  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9581                           
  9582                           ;main.c: 1017: writeEEPROM(0x46, 0b00000001);
  9583  001F7A  6A0F               	clrf	?_writeEEPROM+1,c
  9584  001F7C  0E46               	movlw	70
  9585  001F7E  6E0E               	movwf	?_writeEEPROM,c
  9586  001F80  0E01               	movlw	1
  9587  001F82  6E10               	movwf	?_writeEEPROM+2,c
  9588  001F84  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9589                           
  9590                           ;main.c: 1018: writeEEPROM(0x47, 0b00000001);
  9591  001F88  6A0F               	clrf	?_writeEEPROM+1,c
  9592  001F8A  0E47               	movlw	71
  9593  001F8C  6E0E               	movwf	?_writeEEPROM,c
  9594  001F8E  0E01               	movlw	1
  9595  001F90  6E10               	movwf	?_writeEEPROM+2,c
  9596  001F92  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9597                           
  9598                           ;main.c: 1019: writeEEPROM(0x48, 0b00000001);
  9599  001F96  6A0F               	clrf	?_writeEEPROM+1,c
  9600  001F98  0E48               	movlw	72
  9601  001F9A  6E0E               	movwf	?_writeEEPROM,c
  9602  001F9C  0E01               	movlw	1
  9603  001F9E  6E10               	movwf	?_writeEEPROM+2,c
  9604  001FA0  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9605                           
  9606                           ;main.c: 1021: writeEEPROM(0x49, 10);
  9607  001FA4  6A0F               	clrf	?_writeEEPROM+1,c
  9608  001FA6  0E49               	movlw	73
  9609  001FA8  6E0E               	movwf	?_writeEEPROM,c
  9610  001FAA  0E0A               	movlw	10
  9611  001FAC  6E10               	movwf	?_writeEEPROM+2,c
  9612  001FAE  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9613                           
  9614                           ;main.c: 1022: writeEEPROM(0x4A, 0);
  9615  001FB2  6A0F               	clrf	?_writeEEPROM+1,c
  9616  001FB4  0E4A               	movlw	74
  9617  001FB6  6E0E               	movwf	?_writeEEPROM,c
  9618  001FB8  0E00               	movlw	0
  9619  001FBA  6A10               	clrf	?_writeEEPROM+2,c
  9620  001FBC  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9621                           
  9622                           ;main.c: 1023: writeEEPROM(0x4B, 0);
  9623  001FC0  6A0F               	clrf	?_writeEEPROM+1,c
  9624  001FC2  0E4B               	movlw	75
  9625  001FC4  6E0E               	movwf	?_writeEEPROM,c
  9626  001FC6  0E00               	movlw	0
  9627  001FC8  6A10               	clrf	?_writeEEPROM+2,c
  9628  001FCA  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9629                           
  9630                           ;main.c: 1024: writeEEPROM(0x4C, 0);
  9631  001FCE  6A0F               	clrf	?_writeEEPROM+1,c
  9632  001FD0  0E4C               	movlw	76
  9633  001FD2  6E0E               	movwf	?_writeEEPROM,c
  9634  001FD4  0E00               	movlw	0
  9635  001FD6  6A10               	clrf	?_writeEEPROM+2,c
  9636  001FD8  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9637                           
  9638                           ;main.c: 1025: writeEEPROM(0x4D, 0);
  9639  001FDC  6A0F               	clrf	?_writeEEPROM+1,c
  9640  001FDE  0E4D               	movlw	77
  9641  001FE0  6E0E               	movwf	?_writeEEPROM,c
  9642  001FE2  0E00               	movlw	0
  9643  001FE4  6A10               	clrf	?_writeEEPROM+2,c
  9644  001FE6  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9645                           
  9646                           ;main.c: 1026: writeEEPROM(0x4E, 0);
  9647  001FEA  6A0F               	clrf	?_writeEEPROM+1,c
  9648  001FEC  0E4E               	movlw	78
  9649  001FEE  6E0E               	movwf	?_writeEEPROM,c
  9650  001FF0  0E00               	movlw	0
  9651  001FF2  6A10               	clrf	?_writeEEPROM+2,c
  9652  001FF4  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9653                           
  9654                           ;main.c: 1030: writeEEPROM(0x4F, 0x0F);
  9655  001FF8  6A0F               	clrf	?_writeEEPROM+1,c
  9656  001FFA  0E4F               	movlw	79
  9657  001FFC  6E0E               	movwf	?_writeEEPROM,c
  9658  001FFE  0E0F               	movlw	15
  9659  002000  6E10               	movwf	?_writeEEPROM+2,c
  9660  002002  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9661                           
  9662                           ;main.c: 1031: writeEEPROM(0x50, 0x68);
  9663  002006  6A0F               	clrf	?_writeEEPROM+1,c
  9664  002008  0E50               	movlw	80
  9665  00200A  6E0E               	movwf	?_writeEEPROM,c
  9666  00200C  0E68               	movlw	104
  9667  00200E  6E10               	movwf	?_writeEEPROM+2,c
  9668  002010  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9669                           
  9670                           ;main.c: 1033: writeEEPROM(0x51, 0x0D);
  9671  002014  6A0F               	clrf	?_writeEEPROM+1,c
  9672  002016  0E51               	movlw	81
  9673  002018  6E0E               	movwf	?_writeEEPROM,c
  9674  00201A  0E0D               	movlw	13
  9675  00201C  6E10               	movwf	?_writeEEPROM+2,c
  9676  00201E  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9677                           
  9678                           ;main.c: 1034: writeEEPROM(0x52, 0x7F);
  9679  002022  6A0F               	clrf	?_writeEEPROM+1,c
  9680  002024  0E52               	movlw	82
  9681  002026  6E0E               	movwf	?_writeEEPROM,c
  9682  002028  0E7F               	movlw	127
  9683  00202A  6E10               	movwf	?_writeEEPROM+2,c
  9684  00202C  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9685                           
  9686                           ;main.c: 1036: writeEEPROM(0x53, 0x0D);
  9687  002030  6A0F               	clrf	?_writeEEPROM+1,c
  9688  002032  0E53               	movlw	83
  9689  002034  6E0E               	movwf	?_writeEEPROM,c
  9690  002036  0E0D               	movlw	13
  9691  002038  6E10               	movwf	?_writeEEPROM+2,c
  9692  00203A  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9693                           
  9694                           ;main.c: 1037: writeEEPROM(0x54, 0x7F);
  9695  00203E  6A0F               	clrf	?_writeEEPROM+1,c
  9696  002040  0E54               	movlw	84
  9697  002042  6E0E               	movwf	?_writeEEPROM,c
  9698  002044  0E7F               	movlw	127
  9699  002046  6E10               	movwf	?_writeEEPROM+2,c
  9700  002048  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9701                           
  9702                           ;main.c: 1039: writeEEPROM(0x55, 0x0D);
  9703  00204C  6A0F               	clrf	?_writeEEPROM+1,c
  9704  00204E  0E55               	movlw	85
  9705  002050  6E0E               	movwf	?_writeEEPROM,c
  9706  002052  0E0D               	movlw	13
  9707  002054  6E10               	movwf	?_writeEEPROM+2,c
  9708  002056  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9709                           
  9710                           ;main.c: 1040: writeEEPROM(0x56, 0x7F);
  9711  00205A  6A0F               	clrf	?_writeEEPROM+1,c
  9712  00205C  0E56               	movlw	86
  9713  00205E  6E0E               	movwf	?_writeEEPROM,c
  9714  002060  0E7F               	movlw	127
  9715  002062  6E10               	movwf	?_writeEEPROM+2,c
  9716  002064  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9717                           
  9718                           ;main.c: 1042: writeEEPROM(0x57, 0x0D);
  9719  002068  6A0F               	clrf	?_writeEEPROM+1,c
  9720  00206A  0E57               	movlw	87
  9721  00206C  6E0E               	movwf	?_writeEEPROM,c
  9722  00206E  0E0D               	movlw	13
  9723  002070  6E10               	movwf	?_writeEEPROM+2,c
  9724  002072  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9725                           
  9726                           ;main.c: 1043: writeEEPROM(0x58, 0x7F);
  9727  002076  6A0F               	clrf	?_writeEEPROM+1,c
  9728  002078  0E58               	movlw	88
  9729  00207A  6E0E               	movwf	?_writeEEPROM,c
  9730  00207C  0E7F               	movlw	127
  9731  00207E  6E10               	movwf	?_writeEEPROM+2,c
  9732  002080  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9733                           
  9734                           ;main.c: 1045: writeEEPROM(0x59, 0x0D);
  9735  002084  6A0F               	clrf	?_writeEEPROM+1,c
  9736  002086  0E59               	movlw	89
  9737  002088  6E0E               	movwf	?_writeEEPROM,c
  9738  00208A  0E0D               	movlw	13
  9739  00208C  6E10               	movwf	?_writeEEPROM+2,c
  9740  00208E  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9741                           
  9742                           ;main.c: 1046: writeEEPROM(0x5A, 0x7F);
  9743  002092  6A0F               	clrf	?_writeEEPROM+1,c
  9744  002094  0E5A               	movlw	90
  9745  002096  6E0E               	movwf	?_writeEEPROM,c
  9746  002098  0E7F               	movlw	127
  9747  00209A  6E10               	movwf	?_writeEEPROM+2,c
  9748  00209C  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9749                           
  9750                           ;main.c: 1050: writeEEPROM(0x5B, 0x80);
  9751  0020A0  6A0F               	clrf	?_writeEEPROM+1,c
  9752  0020A2  0E5B               	movlw	91
  9753  0020A4  6E0E               	movwf	?_writeEEPROM,c
  9754  0020A6  0E80               	movlw	128
  9755  0020A8  6E10               	movwf	?_writeEEPROM+2,c
  9756  0020AA  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9757                           
  9758                           ;main.c: 1051: writeEEPROM(0x5C, 0xff);
  9759  0020AE  6A0F               	clrf	?_writeEEPROM+1,c
  9760  0020B0  0E5C               	movlw	92
  9761  0020B2  6E0E               	movwf	?_writeEEPROM,c
  9762  0020B4  0EFF               	movlw	255
  9763  0020B6  6810               	setf	?_writeEEPROM+2,c
  9764  0020B8  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9765                           
  9766                           ;main.c: 1053: writeEEPROM(0x5D, 0x80);
  9767  0020BC  6A0F               	clrf	?_writeEEPROM+1,c
  9768  0020BE  0E5D               	movlw	93
  9769  0020C0  6E0E               	movwf	?_writeEEPROM,c
  9770  0020C2  0E80               	movlw	128
  9771  0020C4  6E10               	movwf	?_writeEEPROM+2,c
  9772  0020C6  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9773                           
  9774                           ;main.c: 1054: writeEEPROM(0x5E, 0xff);
  9775  0020CA  6A0F               	clrf	?_writeEEPROM+1,c
  9776  0020CC  0E5E               	movlw	94
  9777  0020CE  6E0E               	movwf	?_writeEEPROM,c
  9778  0020D0  0EFF               	movlw	255
  9779  0020D2  6810               	setf	?_writeEEPROM+2,c
  9780  0020D4  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9781                           
  9782                           ;main.c: 1056: writeEEPROM(0x5F, 0x80);
  9783  0020D8  6A0F               	clrf	?_writeEEPROM+1,c
  9784  0020DA  0E5F               	movlw	95
  9785  0020DC  6E0E               	movwf	?_writeEEPROM,c
  9786  0020DE  0E80               	movlw	128
  9787  0020E0  6E10               	movwf	?_writeEEPROM+2,c
  9788  0020E2  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9789                           
  9790                           ;main.c: 1057: writeEEPROM(0x60, 0xff);
  9791  0020E6  6A0F               	clrf	?_writeEEPROM+1,c
  9792  0020E8  0E60               	movlw	96
  9793  0020EA  6E0E               	movwf	?_writeEEPROM,c
  9794  0020EC  0EFF               	movlw	255
  9795  0020EE  6810               	setf	?_writeEEPROM+2,c
  9796  0020F0  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9797                           
  9798                           ;main.c: 1059: writeEEPROM(0x61, 0x80);
  9799  0020F4  6A0F               	clrf	?_writeEEPROM+1,c
  9800  0020F6  0E61               	movlw	97
  9801  0020F8  6E0E               	movwf	?_writeEEPROM,c
  9802  0020FA  0E80               	movlw	128
  9803  0020FC  6E10               	movwf	?_writeEEPROM+2,c
  9804  0020FE  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9805                           
  9806                           ;main.c: 1060: writeEEPROM(0x62, 0xff);
  9807  002102  6A0F               	clrf	?_writeEEPROM+1,c
  9808  002104  0E62               	movlw	98
  9809  002106  6E0E               	movwf	?_writeEEPROM,c
  9810  002108  0EFF               	movlw	255
  9811  00210A  6810               	setf	?_writeEEPROM+2,c
  9812  00210C  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9813                           
  9814                           ;main.c: 1062: writeEEPROM(0x63, 0x80);
  9815  002110  6A0F               	clrf	?_writeEEPROM+1,c
  9816  002112  0E63               	movlw	99
  9817  002114  6E0E               	movwf	?_writeEEPROM,c
  9818  002116  0E80               	movlw	128
  9819  002118  6E10               	movwf	?_writeEEPROM+2,c
  9820  00211A  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9821                           
  9822                           ;main.c: 1063: writeEEPROM(0x64, 0xff);
  9823  00211E  6A0F               	clrf	?_writeEEPROM+1,c
  9824  002120  0E64               	movlw	100
  9825  002122  6E0E               	movwf	?_writeEEPROM,c
  9826  002124  0EFF               	movlw	255
  9827  002126  6810               	setf	?_writeEEPROM+2,c
  9828  002128  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9829                           
  9830                           ;main.c: 1065: writeEEPROM(0x65, 0x80);
  9831  00212C  6A0F               	clrf	?_writeEEPROM+1,c
  9832  00212E  0E65               	movlw	101
  9833  002130  6E0E               	movwf	?_writeEEPROM,c
  9834  002132  0E80               	movlw	128
  9835  002134  6E10               	movwf	?_writeEEPROM+2,c
  9836  002136  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9837                           
  9838                           ;main.c: 1066: writeEEPROM(0x66, 0xff);
  9839  00213A  6A0F               	clrf	?_writeEEPROM+1,c
  9840  00213C  0E66               	movlw	102
  9841  00213E  6E0E               	movwf	?_writeEEPROM,c
  9842  002140  0EFF               	movlw	255
  9843  002142  6810               	setf	?_writeEEPROM+2,c
  9844  002144  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9845                           
  9846                           ;main.c: 1070: writeEEPROM(0x67, 0x7f);
  9847  002148  6A0F               	clrf	?_writeEEPROM+1,c
  9848  00214A  0E67               	movlw	103
  9849  00214C  6E0E               	movwf	?_writeEEPROM,c
  9850  00214E  0E7F               	movlw	127
  9851  002150  6E10               	movwf	?_writeEEPROM+2,c
  9852  002152  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9853                           
  9854                           ;main.c: 1071: writeEEPROM(0x68, 0xff);
  9855  002156  6A0F               	clrf	?_writeEEPROM+1,c
  9856  002158  0E68               	movlw	104
  9857  00215A  6E0E               	movwf	?_writeEEPROM,c
  9858  00215C  0EFF               	movlw	255
  9859  00215E  6810               	setf	?_writeEEPROM+2,c
  9860  002160  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9861                           
  9862                           ;main.c: 1073: writeEEPROM(0x69, 0x7f);
  9863  002164  6A0F               	clrf	?_writeEEPROM+1,c
  9864  002166  0E69               	movlw	105
  9865  002168  6E0E               	movwf	?_writeEEPROM,c
  9866  00216A  0E7F               	movlw	127
  9867  00216C  6E10               	movwf	?_writeEEPROM+2,c
  9868  00216E  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9869                           
  9870                           ;main.c: 1074: writeEEPROM(0x6A, 0xff);
  9871  002172  6A0F               	clrf	?_writeEEPROM+1,c
  9872  002174  0E6A               	movlw	106
  9873  002176  6E0E               	movwf	?_writeEEPROM,c
  9874  002178  0EFF               	movlw	255
  9875  00217A  6810               	setf	?_writeEEPROM+2,c
  9876  00217C  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9877                           
  9878                           ;main.c: 1076: writeEEPROM(0x6B, 0x7f);
  9879  002180  6A0F               	clrf	?_writeEEPROM+1,c
  9880  002182  0E6B               	movlw	107
  9881  002184  6E0E               	movwf	?_writeEEPROM,c
  9882  002186  0E7F               	movlw	127
  9883  002188  6E10               	movwf	?_writeEEPROM+2,c
  9884  00218A  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9885                           
  9886                           ;main.c: 1077: writeEEPROM(0x6C, 0xff);
  9887  00218E  6A0F               	clrf	?_writeEEPROM+1,c
  9888  002190  0E6C               	movlw	108
  9889  002192  6E0E               	movwf	?_writeEEPROM,c
  9890  002194  0EFF               	movlw	255
  9891  002196  6810               	setf	?_writeEEPROM+2,c
  9892  002198  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9893                           
  9894                           ;main.c: 1079: writeEEPROM(0x6D, 0x7f);
  9895  00219C  6A0F               	clrf	?_writeEEPROM+1,c
  9896  00219E  0E6D               	movlw	109
  9897  0021A0  6E0E               	movwf	?_writeEEPROM,c
  9898  0021A2  0E7F               	movlw	127
  9899  0021A4  6E10               	movwf	?_writeEEPROM+2,c
  9900  0021A6  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9901                           
  9902                           ;main.c: 1080: writeEEPROM(0x6E, 0xff);
  9903  0021AA  6A0F               	clrf	?_writeEEPROM+1,c
  9904  0021AC  0E6E               	movlw	110
  9905  0021AE  6E0E               	movwf	?_writeEEPROM,c
  9906  0021B0  0EFF               	movlw	255
  9907  0021B2  6810               	setf	?_writeEEPROM+2,c
  9908  0021B4  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9909                           
  9910                           ;main.c: 1082: writeEEPROM(0x6F, 0x7f);
  9911  0021B8  6A0F               	clrf	?_writeEEPROM+1,c
  9912  0021BA  0E6F               	movlw	111
  9913  0021BC  6E0E               	movwf	?_writeEEPROM,c
  9914  0021BE  0E7F               	movlw	127
  9915  0021C0  6E10               	movwf	?_writeEEPROM+2,c
  9916  0021C2  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9917                           
  9918                           ;main.c: 1083: writeEEPROM(0x70, 0xff);
  9919  0021C6  6A0F               	clrf	?_writeEEPROM+1,c
  9920  0021C8  0E70               	movlw	112
  9921  0021CA  6E0E               	movwf	?_writeEEPROM,c
  9922  0021CC  0EFF               	movlw	255
  9923  0021CE  6810               	setf	?_writeEEPROM+2,c
  9924  0021D0  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9925                           
  9926                           ;main.c: 1085: writeEEPROM(0x71, 0x7f);
  9927  0021D4  6A0F               	clrf	?_writeEEPROM+1,c
  9928  0021D6  0E71               	movlw	113
  9929  0021D8  6E0E               	movwf	?_writeEEPROM,c
  9930  0021DA  0E7F               	movlw	127
  9931  0021DC  6E10               	movwf	?_writeEEPROM+2,c
  9932  0021DE  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9933                           
  9934                           ;main.c: 1086: writeEEPROM(0x72, 0xff);
  9935  0021E2  6A0F               	clrf	?_writeEEPROM+1,c
  9936  0021E4  0E72               	movlw	114
  9937  0021E6  6E0E               	movwf	?_writeEEPROM,c
  9938  0021E8  0EFF               	movlw	255
  9939  0021EA  6810               	setf	?_writeEEPROM+2,c
  9940  0021EC  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9941                           
  9942                           ;main.c: 1090: writeEEPROM(0x73, 0);
  9943  0021F0  6A0F               	clrf	?_writeEEPROM+1,c
  9944  0021F2  0E73               	movlw	115
  9945  0021F4  6E0E               	movwf	?_writeEEPROM,c
  9946  0021F6  0E00               	movlw	0
  9947  0021F8  6A10               	clrf	?_writeEEPROM+2,c
  9948  0021FA  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9949                           
  9950                           ;main.c: 1091: writeEEPROM(0x74, 0);
  9951  0021FE  6A0F               	clrf	?_writeEEPROM+1,c
  9952  002200  0E74               	movlw	116
  9953  002202  6E0E               	movwf	?_writeEEPROM,c
  9954  002204  0E00               	movlw	0
  9955  002206  6A10               	clrf	?_writeEEPROM+2,c
  9956  002208  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9957                           
  9958                           ;main.c: 1093: writeEEPROM(0x75, 0);
  9959  00220C  6A0F               	clrf	?_writeEEPROM+1,c
  9960  00220E  0E75               	movlw	117
  9961  002210  6E0E               	movwf	?_writeEEPROM,c
  9962  002212  0E00               	movlw	0
  9963  002214  6A10               	clrf	?_writeEEPROM+2,c
  9964  002216  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9965                           
  9966                           ;main.c: 1094: writeEEPROM(0x76, 0);
  9967  00221A  6A0F               	clrf	?_writeEEPROM+1,c
  9968  00221C  0E76               	movlw	118
  9969  00221E  6E0E               	movwf	?_writeEEPROM,c
  9970  002220  0E00               	movlw	0
  9971  002222  6A10               	clrf	?_writeEEPROM+2,c
  9972  002224  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9973                           
  9974                           ;main.c: 1096: writeEEPROM(0x77, 0);
  9975  002228  6A0F               	clrf	?_writeEEPROM+1,c
  9976  00222A  0E77               	movlw	119
  9977  00222C  6E0E               	movwf	?_writeEEPROM,c
  9978  00222E  0E00               	movlw	0
  9979  002230  6A10               	clrf	?_writeEEPROM+2,c
  9980  002232  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9981                           
  9982                           ;main.c: 1097: writeEEPROM(0x78, 0);
  9983  002236  6A0F               	clrf	?_writeEEPROM+1,c
  9984  002238  0E78               	movlw	120
  9985  00223A  6E0E               	movwf	?_writeEEPROM,c
  9986  00223C  0E00               	movlw	0
  9987  00223E  6A10               	clrf	?_writeEEPROM+2,c
  9988  002240  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9989                           
  9990                           ;main.c: 1099: writeEEPROM(0x79, 0);
  9991  002244  6A0F               	clrf	?_writeEEPROM+1,c
  9992  002246  0E79               	movlw	121
  9993  002248  6E0E               	movwf	?_writeEEPROM,c
  9994  00224A  0E00               	movlw	0
  9995  00224C  6A10               	clrf	?_writeEEPROM+2,c
  9996  00224E  EC9A  F02B         	call	_writeEEPROM	;wreg free
  9997                           
  9998                           ;main.c: 1100: writeEEPROM(0x7A, 0);
  9999  002252  6A0F               	clrf	?_writeEEPROM+1,c
 10000  002254  0E7A               	movlw	122
 10001  002256  6E0E               	movwf	?_writeEEPROM,c
 10002  002258  0E00               	movlw	0
 10003  00225A  6A10               	clrf	?_writeEEPROM+2,c
 10004  00225C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10005                           
 10006                           ;main.c: 1102: writeEEPROM(0x7B, 0);
 10007  002260  6A0F               	clrf	?_writeEEPROM+1,c
 10008  002262  0E7B               	movlw	123
 10009  002264  6E0E               	movwf	?_writeEEPROM,c
 10010  002266  0E00               	movlw	0
 10011  002268  6A10               	clrf	?_writeEEPROM+2,c
 10012  00226A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10013                           
 10014                           ;main.c: 1103: writeEEPROM(0x7C, 0);
 10015  00226E  6A0F               	clrf	?_writeEEPROM+1,c
 10016  002270  0E7C               	movlw	124
 10017  002272  6E0E               	movwf	?_writeEEPROM,c
 10018  002274  0E00               	movlw	0
 10019  002276  6A10               	clrf	?_writeEEPROM+2,c
 10020  002278  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10021                           
 10022                           ;main.c: 1105: writeEEPROM(0x7D, 0);
 10023  00227C  6A0F               	clrf	?_writeEEPROM+1,c
 10024  00227E  0E7D               	movlw	125
 10025  002280  6E0E               	movwf	?_writeEEPROM,c
 10026  002282  0E00               	movlw	0
 10027  002284  6A10               	clrf	?_writeEEPROM+2,c
 10028  002286  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10029                           
 10030                           ;main.c: 1106: writeEEPROM(0x7E, 0);
 10031  00228A  6A0F               	clrf	?_writeEEPROM+1,c
 10032  00228C  0E7E               	movlw	126
 10033  00228E  6E0E               	movwf	?_writeEEPROM,c
 10034  002290  0E00               	movlw	0
 10035  002292  6A10               	clrf	?_writeEEPROM+2,c
 10036  002294  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10037                           
 10038                           ;main.c: 1110: writeEEPROM(0x7F, 0x7f);
 10039  002298  6A0F               	clrf	?_writeEEPROM+1,c
 10040  00229A  0E7F               	movlw	127
 10041  00229C  6E0E               	movwf	?_writeEEPROM,c
 10042  00229E  6E10               	movwf	?_writeEEPROM+2,c
 10043  0022A0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10044                           
 10045                           ;main.c: 1111: writeEEPROM(0x80, 0xff);
 10046  0022A4  6A0F               	clrf	?_writeEEPROM+1,c
 10047  0022A6  0E80               	movlw	128
 10048  0022A8  6E0E               	movwf	?_writeEEPROM,c
 10049  0022AA  0EFF               	movlw	255
 10050  0022AC  6810               	setf	?_writeEEPROM+2,c
 10051  0022AE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10052                           
 10053                           ;main.c: 1113: writeEEPROM(0x81, 0x7f);
 10054  0022B2  6A0F               	clrf	?_writeEEPROM+1,c
 10055  0022B4  0E81               	movlw	129
 10056  0022B6  6E0E               	movwf	?_writeEEPROM,c
 10057  0022B8  0E7F               	movlw	127
 10058  0022BA  6E10               	movwf	?_writeEEPROM+2,c
 10059  0022BC  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10060                           
 10061                           ;main.c: 1114: writeEEPROM(0x82, 0xff);
 10062  0022C0  6A0F               	clrf	?_writeEEPROM+1,c
 10063  0022C2  0E82               	movlw	130
 10064  0022C4  6E0E               	movwf	?_writeEEPROM,c
 10065  0022C6  0EFF               	movlw	255
 10066  0022C8  6810               	setf	?_writeEEPROM+2,c
 10067  0022CA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10068                           
 10069                           ;main.c: 1116: writeEEPROM(0x83, 0x7f);
 10070  0022CE  6A0F               	clrf	?_writeEEPROM+1,c
 10071  0022D0  0E83               	movlw	131
 10072  0022D2  6E0E               	movwf	?_writeEEPROM,c
 10073  0022D4  0E7F               	movlw	127
 10074  0022D6  6E10               	movwf	?_writeEEPROM+2,c
 10075  0022D8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10076                           
 10077                           ;main.c: 1117: writeEEPROM(0x84, 0xff);
 10078  0022DC  6A0F               	clrf	?_writeEEPROM+1,c
 10079  0022DE  0E84               	movlw	132
 10080  0022E0  6E0E               	movwf	?_writeEEPROM,c
 10081  0022E2  0EFF               	movlw	255
 10082  0022E4  6810               	setf	?_writeEEPROM+2,c
 10083  0022E6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10084                           
 10085                           ;main.c: 1119: writeEEPROM(0x85, 0x7f);
 10086  0022EA  6A0F               	clrf	?_writeEEPROM+1,c
 10087  0022EC  0E85               	movlw	133
 10088  0022EE  6E0E               	movwf	?_writeEEPROM,c
 10089  0022F0  0E7F               	movlw	127
 10090  0022F2  6E10               	movwf	?_writeEEPROM+2,c
 10091  0022F4  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10092                           
 10093                           ;main.c: 1120: writeEEPROM(0x86, 0xff);
 10094  0022F8  6A0F               	clrf	?_writeEEPROM+1,c
 10095  0022FA  0E86               	movlw	134
 10096  0022FC  6E0E               	movwf	?_writeEEPROM,c
 10097  0022FE  0EFF               	movlw	255
 10098  002300  6810               	setf	?_writeEEPROM+2,c
 10099  002302  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10100                           
 10101                           ;main.c: 1122: writeEEPROM(0x87, 0x7f);
 10102  002306  6A0F               	clrf	?_writeEEPROM+1,c
 10103  002308  0E87               	movlw	135
 10104  00230A  6E0E               	movwf	?_writeEEPROM,c
 10105  00230C  0E7F               	movlw	127
 10106  00230E  6E10               	movwf	?_writeEEPROM+2,c
 10107  002310  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10108                           
 10109                           ;main.c: 1123: writeEEPROM(0x88, 0xff);
 10110  002314  6A0F               	clrf	?_writeEEPROM+1,c
 10111  002316  0E88               	movlw	136
 10112  002318  6E0E               	movwf	?_writeEEPROM,c
 10113  00231A  0EFF               	movlw	255
 10114  00231C  6810               	setf	?_writeEEPROM+2,c
 10115  00231E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10116                           
 10117                           ;main.c: 1125: writeEEPROM(0x89, 0x7f);
 10118  002322  6A0F               	clrf	?_writeEEPROM+1,c
 10119  002324  0E89               	movlw	137
 10120  002326  6E0E               	movwf	?_writeEEPROM,c
 10121  002328  0E7F               	movlw	127
 10122  00232A  6E10               	movwf	?_writeEEPROM+2,c
 10123  00232C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10124                           
 10125                           ;main.c: 1126: writeEEPROM(0x8A, 0xff);
 10126  002330  6A0F               	clrf	?_writeEEPROM+1,c
 10127  002332  0E8A               	movlw	138
 10128  002334  6E0E               	movwf	?_writeEEPROM,c
 10129  002336  0EFF               	movlw	255
 10130  002338  6810               	setf	?_writeEEPROM+2,c
 10131  00233A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10132                           
 10133                           ;main.c: 1130: writeEEPROM(0x8B, 0x80);
 10134  00233E  6A0F               	clrf	?_writeEEPROM+1,c
 10135  002340  0E8B               	movlw	139
 10136  002342  6E0E               	movwf	?_writeEEPROM,c
 10137  002344  0E80               	movlw	128
 10138  002346  6E10               	movwf	?_writeEEPROM+2,c
 10139  002348  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10140                           
 10141                           ;main.c: 1131: writeEEPROM(0x8C, 0x00);
 10142  00234C  6A0F               	clrf	?_writeEEPROM+1,c
 10143  00234E  0E8C               	movlw	140
 10144  002350  6E0E               	movwf	?_writeEEPROM,c
 10145  002352  0E00               	movlw	0
 10146  002354  6A10               	clrf	?_writeEEPROM+2,c
 10147  002356  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10148                           
 10149                           ;main.c: 1133: writeEEPROM(0x8D, 0x80);
 10150  00235A  6A0F               	clrf	?_writeEEPROM+1,c
 10151  00235C  0E8D               	movlw	141
 10152  00235E  6E0E               	movwf	?_writeEEPROM,c
 10153  002360  0E80               	movlw	128
 10154  002362  6E10               	movwf	?_writeEEPROM+2,c
 10155  002364  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10156                           
 10157                           ;main.c: 1134: writeEEPROM(0x8E, 0x00);
 10158  002368  6A0F               	clrf	?_writeEEPROM+1,c
 10159  00236A  0E8E               	movlw	142
 10160  00236C  6E0E               	movwf	?_writeEEPROM,c
 10161  00236E  0E00               	movlw	0
 10162  002370  6A10               	clrf	?_writeEEPROM+2,c
 10163  002372  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10164                           
 10165                           ;main.c: 1136: writeEEPROM(0x8F, 0x80);
 10166  002376  6A0F               	clrf	?_writeEEPROM+1,c
 10167  002378  0E8F               	movlw	143
 10168  00237A  6E0E               	movwf	?_writeEEPROM,c
 10169  00237C  0E80               	movlw	128
 10170  00237E  6E10               	movwf	?_writeEEPROM+2,c
 10171  002380  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10172                           
 10173                           ;main.c: 1137: writeEEPROM(0x90, 0x00);
 10174  002384  6A0F               	clrf	?_writeEEPROM+1,c
 10175  002386  0E90               	movlw	144
 10176  002388  6E0E               	movwf	?_writeEEPROM,c
 10177  00238A  0E00               	movlw	0
 10178  00238C  6A10               	clrf	?_writeEEPROM+2,c
 10179  00238E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10180                           
 10181                           ;main.c: 1139: writeEEPROM(0x91, 0x80);
 10182  002392  6A0F               	clrf	?_writeEEPROM+1,c
 10183  002394  0E91               	movlw	145
 10184  002396  6E0E               	movwf	?_writeEEPROM,c
 10185  002398  0E80               	movlw	128
 10186  00239A  6E10               	movwf	?_writeEEPROM+2,c
 10187  00239C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10188                           
 10189                           ;main.c: 1140: writeEEPROM(0x92, 0x00);
 10190  0023A0  6A0F               	clrf	?_writeEEPROM+1,c
 10191  0023A2  0E92               	movlw	146
 10192  0023A4  6E0E               	movwf	?_writeEEPROM,c
 10193  0023A6  0E00               	movlw	0
 10194  0023A8  6A10               	clrf	?_writeEEPROM+2,c
 10195  0023AA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10196                           
 10197                           ;main.c: 1142: writeEEPROM(0x93, 0x80);
 10198  0023AE  6A0F               	clrf	?_writeEEPROM+1,c
 10199  0023B0  0E93               	movlw	147
 10200  0023B2  6E0E               	movwf	?_writeEEPROM,c
 10201  0023B4  0E80               	movlw	128
 10202  0023B6  6E10               	movwf	?_writeEEPROM+2,c
 10203  0023B8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10204                           
 10205                           ;main.c: 1143: writeEEPROM(0x94, 0x00);
 10206  0023BC  6A0F               	clrf	?_writeEEPROM+1,c
 10207  0023BE  0E94               	movlw	148
 10208  0023C0  6E0E               	movwf	?_writeEEPROM,c
 10209  0023C2  0E00               	movlw	0
 10210  0023C4  6A10               	clrf	?_writeEEPROM+2,c
 10211  0023C6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10212                           
 10213                           ;main.c: 1145: writeEEPROM(0x95, 0x80);
 10214  0023CA  6A0F               	clrf	?_writeEEPROM+1,c
 10215  0023CC  0E95               	movlw	149
 10216  0023CE  6E0E               	movwf	?_writeEEPROM,c
 10217  0023D0  0E80               	movlw	128
 10218  0023D2  6E10               	movwf	?_writeEEPROM+2,c
 10219  0023D4  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10220                           
 10221                           ;main.c: 1146: writeEEPROM(0x96, 0x00);
 10222  0023D8  6A0F               	clrf	?_writeEEPROM+1,c
 10223  0023DA  0E96               	movlw	150
 10224  0023DC  6E0E               	movwf	?_writeEEPROM,c
 10225  0023DE  0E00               	movlw	0
 10226  0023E0  6A10               	clrf	?_writeEEPROM+2,c
 10227  0023E2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10228                           
 10229                           ;main.c: 1150: writeEEPROM(0x97, 2);
 10230  0023E6  6A0F               	clrf	?_writeEEPROM+1,c
 10231  0023E8  0E97               	movlw	151
 10232  0023EA  6E0E               	movwf	?_writeEEPROM,c
 10233  0023EC  0E02               	movlw	2
 10234  0023EE  6E10               	movwf	?_writeEEPROM+2,c
 10235  0023F0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10236                           
 10237                           ;main.c: 1151: writeEEPROM(0x98, 2);
 10238  0023F4  6A0F               	clrf	?_writeEEPROM+1,c
 10239  0023F6  0E98               	movlw	152
 10240  0023F8  6E0E               	movwf	?_writeEEPROM,c
 10241  0023FA  0E02               	movlw	2
 10242  0023FC  6E10               	movwf	?_writeEEPROM+2,c
 10243  0023FE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10244                           
 10245                           ;main.c: 1152: writeEEPROM(0x99, 2);
 10246  002402  6A0F               	clrf	?_writeEEPROM+1,c
 10247  002404  0E99               	movlw	153
 10248  002406  6E0E               	movwf	?_writeEEPROM,c
 10249  002408  0E02               	movlw	2
 10250  00240A  6E10               	movwf	?_writeEEPROM+2,c
 10251  00240C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10252                           
 10253                           ;main.c: 1153: writeEEPROM(0x9A, 2);
 10254  002410  6A0F               	clrf	?_writeEEPROM+1,c
 10255  002412  0E9A               	movlw	154
 10256  002414  6E0E               	movwf	?_writeEEPROM,c
 10257  002416  0E02               	movlw	2
 10258  002418  6E10               	movwf	?_writeEEPROM+2,c
 10259  00241A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10260                           
 10261                           ;main.c: 1154: writeEEPROM(0x9B, 2);
 10262  00241E  6A0F               	clrf	?_writeEEPROM+1,c
 10263  002420  0E9B               	movlw	155
 10264  002422  6E0E               	movwf	?_writeEEPROM,c
 10265  002424  0E02               	movlw	2
 10266  002426  6E10               	movwf	?_writeEEPROM+2,c
 10267  002428  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10268                           
 10269                           ;main.c: 1155: writeEEPROM(0x9C, 2);
 10270  00242C  6A0F               	clrf	?_writeEEPROM+1,c
 10271  00242E  0E9C               	movlw	156
 10272  002430  6E0E               	movwf	?_writeEEPROM,c
 10273  002432  0E02               	movlw	2
 10274  002434  6E10               	movwf	?_writeEEPROM+2,c
 10275  002436  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10276                           
 10277                           ;main.c: 1159: writeEEPROM(0x9E, 0);
 10278  00243A  6A0F               	clrf	?_writeEEPROM+1,c
 10279  00243C  0E9E               	movlw	158
 10280  00243E  6E0E               	movwf	?_writeEEPROM,c
 10281  002440  0E00               	movlw	0
 10282  002442  6A10               	clrf	?_writeEEPROM+2,c
 10283  002444  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10284                           
 10285                           ;main.c: 1160: writeEEPROM(0x9F, 0);
 10286  002448  6A0F               	clrf	?_writeEEPROM+1,c
 10287  00244A  0E9F               	movlw	159
 10288  00244C  6E0E               	movwf	?_writeEEPROM,c
 10289  00244E  0E00               	movlw	0
 10290  002450  6A10               	clrf	?_writeEEPROM+2,c
 10291  002452  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10292                           
 10293                           ;main.c: 1161: writeEEPROM(0xA0, 0);
 10294  002456  6A0F               	clrf	?_writeEEPROM+1,c
 10295  002458  0EA0               	movlw	160
 10296  00245A  6E0E               	movwf	?_writeEEPROM,c
 10297  00245C  0E00               	movlw	0
 10298  00245E  6A10               	clrf	?_writeEEPROM+2,c
 10299  002460  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10300                           
 10301                           ;main.c: 1162: writeEEPROM(0xA1, 0);
 10302  002464  6A0F               	clrf	?_writeEEPROM+1,c
 10303  002466  0EA1               	movlw	161
 10304  002468  6E0E               	movwf	?_writeEEPROM,c
 10305  00246A  0E00               	movlw	0
 10306  00246C  6A10               	clrf	?_writeEEPROM+2,c
 10307  00246E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10308                           
 10309                           ;main.c: 1163: writeEEPROM(0xA2, 0);
 10310  002472  6A0F               	clrf	?_writeEEPROM+1,c
 10311  002474  0EA2               	movlw	162
 10312  002476  6E0E               	movwf	?_writeEEPROM,c
 10313  002478  0E00               	movlw	0
 10314  00247A  6A10               	clrf	?_writeEEPROM+2,c
 10315  00247C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10316                           
 10317                           ;main.c: 1164: writeEEPROM(0xA3, 0);
 10318  002480  6A0F               	clrf	?_writeEEPROM+1,c
 10319  002482  0EA3               	movlw	163
 10320  002484  6E0E               	movwf	?_writeEEPROM,c
 10321  002486  0E00               	movlw	0
 10322  002488  6A10               	clrf	?_writeEEPROM+2,c
 10323  00248A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10324                           
 10325                           ;main.c: 1165: writeEEPROM(0xA4, 0);
 10326  00248E  6A0F               	clrf	?_writeEEPROM+1,c
 10327  002490  0EA4               	movlw	164
 10328  002492  6E0E               	movwf	?_writeEEPROM,c
 10329  002494  0E00               	movlw	0
 10330  002496  6A10               	clrf	?_writeEEPROM+2,c
 10331  002498  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10332                           
 10333                           ;main.c: 1166: writeEEPROM(0xA5, 0);
 10334  00249C  6A0F               	clrf	?_writeEEPROM+1,c
 10335  00249E  0EA5               	movlw	165
 10336  0024A0  6E0E               	movwf	?_writeEEPROM,c
 10337  0024A2  0E00               	movlw	0
 10338  0024A4  6A10               	clrf	?_writeEEPROM+2,c
 10339  0024A6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10340                           
 10341                           ;main.c: 1167: writeEEPROM(0xA6, 0);
 10342  0024AA  6A0F               	clrf	?_writeEEPROM+1,c
 10343  0024AC  0EA6               	movlw	166
 10344  0024AE  6E0E               	movwf	?_writeEEPROM,c
 10345  0024B0  0E00               	movlw	0
 10346  0024B2  6A10               	clrf	?_writeEEPROM+2,c
 10347  0024B4  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10348                           
 10349                           ;main.c: 1168: writeEEPROM(0xA7, 0);
 10350  0024B8  6A0F               	clrf	?_writeEEPROM+1,c
 10351  0024BA  0EA7               	movlw	167
 10352  0024BC  6E0E               	movwf	?_writeEEPROM,c
 10353  0024BE  0E00               	movlw	0
 10354  0024C0  6A10               	clrf	?_writeEEPROM+2,c
 10355  0024C2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10356                           
 10357                           ;main.c: 1169: writeEEPROM(0xA8, 0);
 10358  0024C6  6A0F               	clrf	?_writeEEPROM+1,c
 10359  0024C8  0EA8               	movlw	168
 10360  0024CA  6E0E               	movwf	?_writeEEPROM,c
 10361  0024CC  0E00               	movlw	0
 10362  0024CE  6A10               	clrf	?_writeEEPROM+2,c
 10363  0024D0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10364                           
 10365                           ;main.c: 1170: writeEEPROM(0xA9, 0);
 10366  0024D4  6A0F               	clrf	?_writeEEPROM+1,c
 10367  0024D6  0EA9               	movlw	169
 10368  0024D8  6E0E               	movwf	?_writeEEPROM,c
 10369  0024DA  0E00               	movlw	0
 10370  0024DC  6A10               	clrf	?_writeEEPROM+2,c
 10371  0024DE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10372                           
 10373                           ;main.c: 1173: writeEEPROM(0xAA, 0);
 10374  0024E2  6A0F               	clrf	?_writeEEPROM+1,c
 10375  0024E4  0EAA               	movlw	170
 10376  0024E6  6E0E               	movwf	?_writeEEPROM,c
 10377  0024E8  0E00               	movlw	0
 10378  0024EA  6A10               	clrf	?_writeEEPROM+2,c
 10379  0024EC  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10380                           
 10381                           ;main.c: 1174: writeEEPROM(0xAB, 0);
 10382  0024F0  6A0F               	clrf	?_writeEEPROM+1,c
 10383  0024F2  0EAB               	movlw	171
 10384  0024F4  6E0E               	movwf	?_writeEEPROM,c
 10385  0024F6  0E00               	movlw	0
 10386  0024F8  6A10               	clrf	?_writeEEPROM+2,c
 10387  0024FA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10388                           
 10389                           ;main.c: 1175: writeEEPROM(0xAC, 0);
 10390  0024FE  6A0F               	clrf	?_writeEEPROM+1,c
 10391  002500  0EAC               	movlw	172
 10392  002502  6E0E               	movwf	?_writeEEPROM,c
 10393  002504  0E00               	movlw	0
 10394  002506  6A10               	clrf	?_writeEEPROM+2,c
 10395  002508  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10396                           
 10397                           ;main.c: 1176: writeEEPROM(0xAD, 0);
 10398  00250C  6A0F               	clrf	?_writeEEPROM+1,c
 10399  00250E  0EAD               	movlw	173
 10400  002510  6E0E               	movwf	?_writeEEPROM,c
 10401  002512  0E00               	movlw	0
 10402  002514  6A10               	clrf	?_writeEEPROM+2,c
 10403  002516  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10404                           
 10405                           ;main.c: 1177: writeEEPROM(0xAE, 0);
 10406  00251A  6A0F               	clrf	?_writeEEPROM+1,c
 10407  00251C  0EAE               	movlw	174
 10408  00251E  6E0E               	movwf	?_writeEEPROM,c
 10409  002520  0E00               	movlw	0
 10410  002522  6A10               	clrf	?_writeEEPROM+2,c
 10411  002524  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10412                           
 10413                           ;main.c: 1178: writeEEPROM(0xAF, 0);
 10414  002528  6A0F               	clrf	?_writeEEPROM+1,c
 10415  00252A  0EAF               	movlw	175
 10416  00252C  6E0E               	movwf	?_writeEEPROM,c
 10417  00252E  0E00               	movlw	0
 10418  002530  6A10               	clrf	?_writeEEPROM+2,c
 10419  002532  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10420                           
 10421                           ;main.c: 1179: writeEEPROM(0xB0, 0);
 10422  002536  6A0F               	clrf	?_writeEEPROM+1,c
 10423  002538  0EB0               	movlw	176
 10424  00253A  6E0E               	movwf	?_writeEEPROM,c
 10425  00253C  0E00               	movlw	0
 10426  00253E  6A10               	clrf	?_writeEEPROM+2,c
 10427  002540  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10428                           
 10429                           ;main.c: 1180: writeEEPROM(0xB1, 0);
 10430  002544  6A0F               	clrf	?_writeEEPROM+1,c
 10431  002546  0EB1               	movlw	177
 10432  002548  6E0E               	movwf	?_writeEEPROM,c
 10433  00254A  0E00               	movlw	0
 10434  00254C  6A10               	clrf	?_writeEEPROM+2,c
 10435  00254E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10436                           
 10437                           ;main.c: 1181: writeEEPROM(0xB2, 0);
 10438  002552  6A0F               	clrf	?_writeEEPROM+1,c
 10439  002554  0EB2               	movlw	178
 10440  002556  6E0E               	movwf	?_writeEEPROM,c
 10441  002558  0E00               	movlw	0
 10442  00255A  6A10               	clrf	?_writeEEPROM+2,c
 10443  00255C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10444                           
 10445                           ;main.c: 1182: writeEEPROM(0xB3, 0);
 10446  002560  6A0F               	clrf	?_writeEEPROM+1,c
 10447  002562  0EB3               	movlw	179
 10448  002564  6E0E               	movwf	?_writeEEPROM,c
 10449  002566  0E00               	movlw	0
 10450  002568  6A10               	clrf	?_writeEEPROM+2,c
 10451  00256A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10452                           
 10453                           ;main.c: 1183: writeEEPROM(0xB4, 0);
 10454  00256E  6A0F               	clrf	?_writeEEPROM+1,c
 10455  002570  0EB4               	movlw	180
 10456  002572  6E0E               	movwf	?_writeEEPROM,c
 10457  002574  0E00               	movlw	0
 10458  002576  6A10               	clrf	?_writeEEPROM+2,c
 10459  002578  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10460                           
 10461                           ;main.c: 1184: writeEEPROM(0xB5, 0);
 10462  00257C  6A0F               	clrf	?_writeEEPROM+1,c
 10463  00257E  0EB5               	movlw	181
 10464  002580  6E0E               	movwf	?_writeEEPROM,c
 10465  002582  0E00               	movlw	0
 10466  002584  6A10               	clrf	?_writeEEPROM+2,c
 10467  002586  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10468                           
 10469                           ;main.c: 1187: for (uint8_t i = 0; i < 6; i++) {
 10470  00258A  6A11               	clrf	init_app_eeprom@i,c
 10471  00258C                     l9542:
 10472                           
 10473                           ;main.c: 1188: writeEEPROM(0xB6 + i * 12, 0);
 10474  00258C  5011               	movf	init_app_eeprom@i,w,c
 10475  00258E  0D0C               	mullw	12
 10476  002590  0EB6               	movlw	182
 10477  002592  24F3               	addwf	prodl,w,c
 10478  002594  6E0E               	movwf	?_writeEEPROM,c
 10479  002596  0E00               	movlw	0
 10480  002598  20F4               	addwfc	prodh,w,c
 10481  00259A  6E0F               	movwf	?_writeEEPROM+1,c
 10482  00259C  0E00               	movlw	0
 10483  00259E  6A10               	clrf	?_writeEEPROM+2,c
 10484  0025A0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10485                           
 10486                           ;main.c: 1189: writeEEPROM(0xB7 + i * 12, 0);
 10487  0025A4  5011               	movf	init_app_eeprom@i,w,c
 10488  0025A6  0D0C               	mullw	12
 10489  0025A8  0EB7               	movlw	183
 10490  0025AA  24F3               	addwf	prodl,w,c
 10491  0025AC  6E0E               	movwf	?_writeEEPROM,c
 10492  0025AE  0E00               	movlw	0
 10493  0025B0  20F4               	addwfc	prodh,w,c
 10494  0025B2  6E0F               	movwf	?_writeEEPROM+1,c
 10495  0025B4  0E00               	movlw	0
 10496  0025B6  6A10               	clrf	?_writeEEPROM+2,c
 10497  0025B8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10498                           
 10499                           ;main.c: 1190: writeEEPROM(0xB8 + i * 12, 0);
 10500  0025BC  5011               	movf	init_app_eeprom@i,w,c
 10501  0025BE  0D0C               	mullw	12
 10502  0025C0  0EB8               	movlw	184
 10503  0025C2  24F3               	addwf	prodl,w,c
 10504  0025C4  6E0E               	movwf	?_writeEEPROM,c
 10505  0025C6  0E00               	movlw	0
 10506  0025C8  20F4               	addwfc	prodh,w,c
 10507  0025CA  6E0F               	movwf	?_writeEEPROM+1,c
 10508  0025CC  0E00               	movlw	0
 10509  0025CE  6A10               	clrf	?_writeEEPROM+2,c
 10510  0025D0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10511                           
 10512                           ;main.c: 1191: writeEEPROM(0xB9 + i * 12, 0);
 10513  0025D4  5011               	movf	init_app_eeprom@i,w,c
 10514  0025D6  0D0C               	mullw	12
 10515  0025D8  0EB9               	movlw	185
 10516  0025DA  24F3               	addwf	prodl,w,c
 10517  0025DC  6E0E               	movwf	?_writeEEPROM,c
 10518  0025DE  0E00               	movlw	0
 10519  0025E0  20F4               	addwfc	prodh,w,c
 10520  0025E2  6E0F               	movwf	?_writeEEPROM+1,c
 10521  0025E4  0E00               	movlw	0
 10522  0025E6  6A10               	clrf	?_writeEEPROM+2,c
 10523  0025E8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10524                           
 10525                           ;main.c: 1192: writeEEPROM(0xBA + i * 12, 0);
 10526  0025EC  5011               	movf	init_app_eeprom@i,w,c
 10527  0025EE  0D0C               	mullw	12
 10528  0025F0  0EBA               	movlw	186
 10529  0025F2  24F3               	addwf	prodl,w,c
 10530  0025F4  6E0E               	movwf	?_writeEEPROM,c
 10531  0025F6  0E00               	movlw	0
 10532  0025F8  20F4               	addwfc	prodh,w,c
 10533  0025FA  6E0F               	movwf	?_writeEEPROM+1,c
 10534  0025FC  0E00               	movlw	0
 10535  0025FE  6A10               	clrf	?_writeEEPROM+2,c
 10536  002600  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10537                           
 10538                           ;main.c: 1193: writeEEPROM(0xBB + i * 12, 0);
 10539  002604  5011               	movf	init_app_eeprom@i,w,c
 10540  002606  0D0C               	mullw	12
 10541  002608  0EBB               	movlw	187
 10542  00260A  24F3               	addwf	prodl,w,c
 10543  00260C  6E0E               	movwf	?_writeEEPROM,c
 10544  00260E  0E00               	movlw	0
 10545  002610  20F4               	addwfc	prodh,w,c
 10546  002612  6E0F               	movwf	?_writeEEPROM+1,c
 10547  002614  0E00               	movlw	0
 10548  002616  6A10               	clrf	?_writeEEPROM+2,c
 10549  002618  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10550                           
 10551                           ;main.c: 1194: writeEEPROM(0xBC + i * 12, 0);
 10552  00261C  5011               	movf	init_app_eeprom@i,w,c
 10553  00261E  0D0C               	mullw	12
 10554  002620  0EBC               	movlw	188
 10555  002622  24F3               	addwf	prodl,w,c
 10556  002624  6E0E               	movwf	?_writeEEPROM,c
 10557  002626  0E00               	movlw	0
 10558  002628  20F4               	addwfc	prodh,w,c
 10559  00262A  6E0F               	movwf	?_writeEEPROM+1,c
 10560  00262C  0E00               	movlw	0
 10561  00262E  6A10               	clrf	?_writeEEPROM+2,c
 10562  002630  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10563                           
 10564                           ;main.c: 1195: writeEEPROM(0xBD + i * 12, 0);
 10565  002634  5011               	movf	init_app_eeprom@i,w,c
 10566  002636  0D0C               	mullw	12
 10567  002638  0EBD               	movlw	189
 10568  00263A  24F3               	addwf	prodl,w,c
 10569  00263C  6E0E               	movwf	?_writeEEPROM,c
 10570  00263E  0E00               	movlw	0
 10571  002640  20F4               	addwfc	prodh,w,c
 10572  002642  6E0F               	movwf	?_writeEEPROM+1,c
 10573  002644  0E00               	movlw	0
 10574  002646  6A10               	clrf	?_writeEEPROM+2,c
 10575  002648  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10576                           
 10577                           ;main.c: 1196: writeEEPROM(0xBE + i * 12, 0);
 10578  00264C  5011               	movf	init_app_eeprom@i,w,c
 10579  00264E  0D0C               	mullw	12
 10580  002650  0EBE               	movlw	190
 10581  002652  24F3               	addwf	prodl,w,c
 10582  002654  6E0E               	movwf	?_writeEEPROM,c
 10583  002656  0E00               	movlw	0
 10584  002658  20F4               	addwfc	prodh,w,c
 10585  00265A  6E0F               	movwf	?_writeEEPROM+1,c
 10586  00265C  0E00               	movlw	0
 10587  00265E  6A10               	clrf	?_writeEEPROM+2,c
 10588  002660  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10589                           
 10590                           ;main.c: 1197: writeEEPROM(0xBF + i * 12, 0);
 10591  002664  5011               	movf	init_app_eeprom@i,w,c
 10592  002666  0D0C               	mullw	12
 10593  002668  0EBF               	movlw	191
 10594  00266A  24F3               	addwf	prodl,w,c
 10595  00266C  6E0E               	movwf	?_writeEEPROM,c
 10596  00266E  0E00               	movlw	0
 10597  002670  20F4               	addwfc	prodh,w,c
 10598  002672  6E0F               	movwf	?_writeEEPROM+1,c
 10599  002674  0E00               	movlw	0
 10600  002676  6A10               	clrf	?_writeEEPROM+2,c
 10601  002678  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10602                           
 10603                           ;main.c: 1198: writeEEPROM(0xC0 + i * 12, 0);
 10604  00267C  5011               	movf	init_app_eeprom@i,w,c
 10605  00267E  0D0C               	mullw	12
 10606  002680  0EC0               	movlw	192
 10607  002682  24F3               	addwf	prodl,w,c
 10608  002684  6E0E               	movwf	?_writeEEPROM,c
 10609  002686  0E00               	movlw	0
 10610  002688  20F4               	addwfc	prodh,w,c
 10611  00268A  6E0F               	movwf	?_writeEEPROM+1,c
 10612  00268C  0E00               	movlw	0
 10613  00268E  6A10               	clrf	?_writeEEPROM+2,c
 10614  002690  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10615                           
 10616                           ;main.c: 1199: writeEEPROM(0xC1 + i * 12, 0);
 10617  002694  5011               	movf	init_app_eeprom@i,w,c
 10618  002696  0D0C               	mullw	12
 10619  002698  0EC1               	movlw	193
 10620  00269A  24F3               	addwf	prodl,w,c
 10621  00269C  6E0E               	movwf	?_writeEEPROM,c
 10622  00269E  0E00               	movlw	0
 10623  0026A0  20F4               	addwfc	prodh,w,c
 10624  0026A2  6E0F               	movwf	?_writeEEPROM+1,c
 10625  0026A4  0E00               	movlw	0
 10626  0026A6  6A10               	clrf	?_writeEEPROM+2,c
 10627  0026A8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10628  0026AC  2A11               	incf	init_app_eeprom@i,f,c
 10629  0026AE  0E05               	movlw	5
 10630  0026B0  6411               	cpfsgt	init_app_eeprom@i,c
 10631  0026B2  D76C               	goto	l9542
 10632                           
 10633                           ;main.c: 1200: }
 10634                           ;main.c: 1203: writeEEPROM(0xF2, 0xc3);
 10635  0026B4  6A0F               	clrf	?_writeEEPROM+1,c
 10636  0026B6  0EF2               	movlw	242
 10637  0026B8  6E0E               	movwf	?_writeEEPROM,c
 10638  0026BA  0EC3               	movlw	195
 10639  0026BC  6E10               	movwf	?_writeEEPROM+2,c
 10640  0026BE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 10641                           
 10642                           ;main.c: 1204: writeEEPROM(0xF3, 0x50);
 10643  0026C2  6A0F               	clrf	?_writeEEPROM+1,c
 10644  0026C4  0EF3               	movlw	243
 10645  0026C6  6E0E               	movwf	?_writeEEPROM,c
 10646  0026C8  0E50               	movlw	80
 10647  0026CA  6E10               	movwf	?_writeEEPROM+2,c
 10648  0026CC  EF9A  F02B         	goto	_writeEEPROM	;wreg free
 10649  0026D0                     __end_of_init_app_eeprom:
 10650                           	opt stack 0
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           postinc0	equ	0xFEE
 10658                           wreg	equ	0xFE8
 10659                           postdec1	equ	0xFE5
 10660                           fsr1h	equ	0xFE2
 10661                           fsr1l	equ	0xFE1
 10662                           indf2	equ	0xFDF
 10663                           postinc2	equ	0xFDE
 10664                           postdec2	equ	0xFDD
 10665                           fsr2h	equ	0xFDA
 10666                           fsr2l	equ	0xFD9
 10667                           status	equ	0xFD8
 10668                           
 10669 ;; *************** function _vscp_getFamilyType *****************
 10670 ;; Defined at:
 10671 ;;		line 2812 in file "../main.c"
 10672 ;; Parameters:    Size  Location     Type
 10673 ;;		None
 10674 ;; Auto vars:     Size  Location     Type
 10675 ;;		None
 10676 ;; Return value:  Size  Location     Type
 10677 ;;                  4   13[COMRAM] unsigned long 
 10678 ;; Registers used:
 10679 ;;		None
 10680 ;; Tracked objects:
 10681 ;;		On entry : F/0
 10682 ;;		On exit  : F/0
 10683 ;;		Unchanged: F/0
 10684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10685 ;;      Params:         4       0       0       0       0       0       0
 10686 ;;      Locals:         0       0       0       0       0       0       0
 10687 ;;      Temps:          0       0       0       0       0       0       0
 10688 ;;      Totals:         4       0       0       0       0       0       0
 10689 ;;Total ram usage:        4 bytes
 10690 ;; Hardware stack levels used:    1
 10691 ;; Hardware stack levels required when called:    2
 10692 ;; This function calls:
 10693 ;;		Nothing
 10694 ;; This function is called by:
 10695 ;;		_vscp_writeStdReg
 10696 ;; This function uses a non-reentrant model
 10697 ;;
 10698                           
 10699                           	psect	text39
 10700  0059A6                     __ptext39:
 10701                           	opt stack 0
 10702  0059A6                     _vscp_getFamilyType:
 10703                           	opt stack 26
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;main.c: 2813: return 0;
 10707                           
 10708                           ;incstack = 0
 10709                           ;incstack = 0
 10710  0059A6  6A0E               	clrf	?_vscp_getFamilyType,c
 10711  0059A8  6A0F               	clrf	?_vscp_getFamilyType+1,c
 10712  0059AA  6A10               	clrf	?_vscp_getFamilyType+2,c
 10713  0059AC  6A11               	clrf	?_vscp_getFamilyType+3,c
 10714                           
 10715                           ; BSR set to: 0
 10716  0059AE  0012               	return	
 10717  0059B0                     __end_of_vscp_getFamilyType:
 10718                           	opt stack 0
 10719                           tblptru	equ	0xFF8
 10720                           tblptrh	equ	0xFF7
 10721                           tblptrl	equ	0xFF6
 10722                           tablat	equ	0xFF5
 10723                           prodh	equ	0xFF4
 10724                           prodl	equ	0xFF3
 10725                           postinc0	equ	0xFEE
 10726                           wreg	equ	0xFE8
 10727                           postdec1	equ	0xFE5
 10728                           fsr1h	equ	0xFE2
 10729                           fsr1l	equ	0xFE1
 10730                           indf2	equ	0xFDF
 10731                           postinc2	equ	0xFDE
 10732                           postdec2	equ	0xFDD
 10733                           fsr2h	equ	0xFDA
 10734                           fsr2l	equ	0xFD9
 10735                           status	equ	0xFD8
 10736                           
 10737 ;; *************** function _vscp_getFamilyCode *****************
 10738 ;; Defined at:
 10739 ;;		line 2802 in file "../main.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;		None
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;		None
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  4   13[COMRAM] unsigned long 
 10746 ;; Registers used:
 10747 ;;		None
 10748 ;; Tracked objects:
 10749 ;;		On entry : F/0
 10750 ;;		On exit  : F/0
 10751 ;;		Unchanged: F/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10753 ;;      Params:         4       0       0       0       0       0       0
 10754 ;;      Locals:         0       0       0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0
 10756 ;;      Totals:         4       0       0       0       0       0       0
 10757 ;;Total ram usage:        4 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    2
 10760 ;; This function calls:
 10761 ;;		Nothing
 10762 ;; This function is called by:
 10763 ;;		_vscp_writeStdReg
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           	psect	text40
 10768  0059B0                     __ptext40:
 10769                           	opt stack 0
 10770  0059B0                     _vscp_getFamilyCode:
 10771                           	opt stack 26
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;main.c: 2803: return 0L;
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;incstack = 0
 10778                           ;incstack = 0
 10779  0059B0  6A0E               	clrf	?_vscp_getFamilyCode,c
 10780  0059B2  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 10781  0059B4  6A10               	clrf	?_vscp_getFamilyCode+2,c
 10782  0059B6  6A11               	clrf	?_vscp_getFamilyCode+3,c
 10783                           
 10784                           ; BSR set to: 0
 10785  0059B8  0012               	return	
 10786  0059BA                     __end_of_vscp_getFamilyCode:
 10787                           	opt stack 0
 10788                           tblptru	equ	0xFF8
 10789                           tblptrh	equ	0xFF7
 10790                           tblptrl	equ	0xFF6
 10791                           tablat	equ	0xFF5
 10792                           prodh	equ	0xFF4
 10793                           prodl	equ	0xFF3
 10794                           postinc0	equ	0xFEE
 10795                           wreg	equ	0xFE8
 10796                           postdec1	equ	0xFE5
 10797                           fsr1h	equ	0xFE2
 10798                           fsr1l	equ	0xFE1
 10799                           indf2	equ	0xFDF
 10800                           postinc2	equ	0xFDE
 10801                           postdec2	equ	0xFDD
 10802                           fsr2h	equ	0xFDA
 10803                           fsr2l	equ	0xFD9
 10804                           status	equ	0xFD8
 10805                           
 10806 ;; *************** function _vscp_setManufacturerId *****************
 10807 ;; Defined at:
 10808 ;;		line 2640 in file "../main.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;  idx             1    wreg     unsigned char 
 10811 ;;  data            1   16[COMRAM] unsigned char 
 10812 ;; Auto vars:     Size  Location     Type
 10813 ;;  idx             1   17[COMRAM] unsigned char 
 10814 ;; Return value:  Size  Location     Type
 10815 ;;		None               void
 10816 ;; Registers used:
 10817 ;;		wreg, status,2, status,0, cstack
 10818 ;; Tracked objects:
 10819 ;;		On entry : F/0
 10820 ;;		On exit  : 0/0
 10821 ;;		Unchanged: 0/0
 10822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10823 ;;      Params:         1       0       0       0       0       0       0
 10824 ;;      Locals:         1       0       0       0       0       0       0
 10825 ;;      Temps:          0       0       0       0       0       0       0
 10826 ;;      Totals:         2       0       0       0       0       0       0
 10827 ;;Total ram usage:        2 bytes
 10828 ;; Hardware stack levels used:    1
 10829 ;; Hardware stack levels required when called:    3
 10830 ;; This function calls:
 10831 ;;		_writeEEPROM
 10832 ;; This function is called by:
 10833 ;;		_vscp_writeStdReg
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           	psect	text41
 10838  00587A                     __ptext41:
 10839                           	opt stack 0
 10840  00587A                     _vscp_setManufacturerId:
 10841                           	opt stack 25
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;incstack = 0
 10845                           ;incstack = 0
 10846                           ;vscp_setManufacturerId@idx stored from wreg
 10847  00587A  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;main.c: 2641: writeEEPROM(0x09 + idx, data);
 10851  00587E  0E09               	movlw	9
 10852  005880  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10853  005882  6E0E               	movwf	?_writeEEPROM,c
 10854  005884  6A0F               	clrf	?_writeEEPROM+1,c
 10855  005886  0E00               	movlw	0
 10856  005888  220F               	addwfc	?_writeEEPROM+1,f,c
 10857  00588A  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10858  00588E  EF9A  F02B         	goto	_writeEEPROM	;wreg free
 10859  005892                     __end_of_vscp_setManufacturerId:
 10860                           	opt stack 0
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodh	equ	0xFF4
 10866                           prodl	equ	0xFF3
 10867                           postinc0	equ	0xFEE
 10868                           wreg	equ	0xFE8
 10869                           postdec1	equ	0xFE5
 10870                           fsr1h	equ	0xFE2
 10871                           fsr1l	equ	0xFE1
 10872                           indf2	equ	0xFDF
 10873                           postinc2	equ	0xFDE
 10874                           postdec2	equ	0xFDD
 10875                           fsr2h	equ	0xFDA
 10876                           fsr2l	equ	0xFD9
 10877                           status	equ	0xFD8
 10878                           
 10879 ;; *************** function _vscp_setUserID *****************
 10880 ;; Defined at:
 10881 ;;		line 2618 in file "../main.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  idx             1    wreg     unsigned char 
 10884 ;;  data            1   16[COMRAM] unsigned char 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  idx             1   17[COMRAM] unsigned char 
 10887 ;; Return value:  Size  Location     Type
 10888 ;;		None               void
 10889 ;; Registers used:
 10890 ;;		wreg, status,2, status,0, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : F/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10896 ;;      Params:         1       0       0       0       0       0       0
 10897 ;;      Locals:         1       0       0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0
 10899 ;;      Totals:         2       0       0       0       0       0       0
 10900 ;;Total ram usage:        2 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:    3
 10903 ;; This function calls:
 10904 ;;		_writeEEPROM
 10905 ;; This function is called by:
 10906 ;;		_vscp_writeStdReg
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           	psect	text42
 10911  005892                     __ptext42:
 10912                           	opt stack 0
 10913  005892                     _vscp_setUserID:
 10914                           	opt stack 25
 10915                           
 10916                           ;incstack = 0
 10917                           ;incstack = 0
 10918                           ;vscp_setUserID@idx stored from wreg
 10919  005892  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;main.c: 2619: writeEEPROM(idx + 0x04, data);
 10923  005896  0E04               	movlw	4
 10924  005898  2412               	addwf	vscp_setUserID@idx,w,c
 10925  00589A  6E0E               	movwf	?_writeEEPROM,c
 10926  00589C  6A0F               	clrf	?_writeEEPROM+1,c
 10927  00589E  0E00               	movlw	0
 10928  0058A0  220F               	addwfc	?_writeEEPROM+1,f,c
 10929  0058A2  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10930  0058A6  EF9A  F02B         	goto	_writeEEPROM	;wreg free
 10931  0058AA                     __end_of_vscp_setUserID:
 10932                           	opt stack 0
 10933                           tblptru	equ	0xFF8
 10934                           tblptrh	equ	0xFF7
 10935                           tblptrl	equ	0xFF6
 10936                           tablat	equ	0xFF5
 10937                           prodh	equ	0xFF4
 10938                           prodl	equ	0xFF3
 10939                           postinc0	equ	0xFEE
 10940                           wreg	equ	0xFE8
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _vscp_setGUID *****************
 10952 ;; Defined at:
 10953 ;;		line 2587 in file "../main.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;  idx             1    wreg     unsigned char 
 10956 ;;  data            1   16[COMRAM] unsigned char 
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;  idx             1   17[COMRAM] unsigned char 
 10959 ;; Return value:  Size  Location     Type
 10960 ;;		None               void
 10961 ;; Registers used:
 10962 ;;		wreg, status,2, status,0, cstack
 10963 ;; Tracked objects:
 10964 ;;		On entry : F/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10968 ;;      Params:         1       0       0       0       0       0       0
 10969 ;;      Locals:         1       0       0       0       0       0       0
 10970 ;;      Temps:          0       0       0       0       0       0       0
 10971 ;;      Totals:         2       0       0       0       0       0       0
 10972 ;;Total ram usage:        2 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    3
 10975 ;; This function calls:
 10976 ;;		_writeEEPROM
 10977 ;; This function is called by:
 10978 ;;		_vscp_writeStdReg
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           	psect	text43
 10983  0057E8                     __ptext43:
 10984                           	opt stack 0
 10985  0057E8                     _vscp_setGUID:
 10986                           	opt stack 25
 10987                           
 10988                           ;incstack = 0
 10989                           ;incstack = 0
 10990                           ;vscp_setGUID@idx stored from wreg
 10991  0057E8  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;main.c: 2588: if ( idx>15 ) return;
 10995  0057EC  0E0F               	movlw	15
 10996  0057EE  6412               	cpfsgt	vscp_setGUID@idx,c
 10997  0057F0  D001               	goto	l10978
 10998  0057F2  D00A               	goto	l544
 10999  0057F4                     l10978:
 11000                           
 11001                           ; BSR set to: 0
 11002                           ;main.c: 2589: writeEEPROM( 0x11 + idx, data );
 11003  0057F4  0E11               	movlw	17
 11004  0057F6  2412               	addwf	vscp_setGUID@idx,w,c
 11005  0057F8  6E0E               	movwf	?_writeEEPROM,c
 11006  0057FA  6A0F               	clrf	?_writeEEPROM+1,c
 11007  0057FC  0E00               	movlw	0
 11008  0057FE  220F               	addwfc	?_writeEEPROM+1,f,c
 11009  005800  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 11010  005804  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11011  005808                     l544:
 11012  005808  0012               	return	
 11013  00580A                     __end_of_vscp_setGUID:
 11014                           	opt stack 0
 11015                           tblptru	equ	0xFF8
 11016                           tblptrh	equ	0xFF7
 11017                           tblptrl	equ	0xFF6
 11018                           tablat	equ	0xFF5
 11019                           prodh	equ	0xFF4
 11020                           prodl	equ	0xFF3
 11021                           postinc0	equ	0xFEE
 11022                           wreg	equ	0xFE8
 11023                           postdec1	equ	0xFE5
 11024                           fsr1h	equ	0xFE2
 11025                           fsr1l	equ	0xFE1
 11026                           indf2	equ	0xFDF
 11027                           postinc2	equ	0xFDE
 11028                           postdec2	equ	0xFDD
 11029                           fsr2h	equ	0xFDA
 11030                           fsr2l	equ	0xFD9
 11031                           status	equ	0xFD8
 11032                           
 11033 ;; *************** function _vscp_writeAppReg *****************
 11034 ;; Defined at:
 11035 ;;		line 1868 in file "../main.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  reg             1    wreg     unsigned char 
 11038 ;;  val             1   32[COMRAM] unsigned char 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  reg             1   33[COMRAM] unsigned char 
 11041 ;;  rv              1   34[COMRAM] unsigned char 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      unsigned char 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11046 ;; Tracked objects:
 11047 ;;		On entry : F/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11051 ;;      Params:         1       0       0       0       0       0       0
 11052 ;;      Locals:         2       0       0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0
 11054 ;;      Totals:         3       0       0       0       0       0       0
 11055 ;;Total ram usage:        3 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    4
 11058 ;; This function calls:
 11059 ;;		_writeEEPROM
 11060 ;;		_readEEPROM
 11061 ;;		_writeCoeffs2Ram
 11062 ;; This function is called by:
 11063 ;;		_vscp_writeRegister
 11064 ;;		_vscp_handleProtocolEvent
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           	psect	text44
 11069  00066E                     __ptext44:
 11070                           	opt stack 0
 11071  00066E                     _vscp_writeAppReg:
 11072                           	opt stack 24
 11073                           
 11074                           ;incstack = 0
 11075                           ;incstack = 0
 11076                           ;vscp_writeAppReg@reg stored from wreg
 11077  00066E  CFE8 F022          	movff	wreg,vscp_writeAppReg@reg
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;main.c: 1869: uint8_t rv;
 11081                           ;main.c: 1876: rv = ~val;
 11082  000672  1C21               	comf	vscp_writeAppReg@val,w,c
 11083  000674  6E23               	movwf	vscp_writeAppReg@rv,c
 11084                           
 11085                           ;main.c: 1878: if (0 == vscp_page_select) {
 11086  000676  5047               	movf	_vscp_page_select+1,w,c
 11087  000678  1046               	iorwf	_vscp_page_select,w,c
 11088  00067A  E102 EFE9  F008    	bz	l10956
 11089  000680  EF37  F00A         	goto	l10958
 11090  000684                     l10760:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;main.c: 1884: writeEEPROM(0x41, val);
 11094  000684  6A0F               	clrf	?_writeEEPROM+1,c
 11095  000686  0E41               	movlw	65
 11096  000688  6E0E               	movwf	?_writeEEPROM,c
 11097  00068A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11098  00068E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11099                           
 11100                           ;main.c: 1885: rv = readEEPROM(0x41);
 11101  000692  6A0F               	clrf	?_readEEPROM+1,c
 11102  000694  0E41               	movlw	65
 11103  000696  6E0E               	movwf	?_readEEPROM,c
 11104  000698  EC9D  F02C         	call	_readEEPROM	;wreg free
 11105  00069C  EFE7  F008         	goto	L112
 11106  0006A0                     l10762:
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;main.c: 1890: writeEEPROM(0x42, val);
 11110  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 11111  0006A2  0E42               	movlw	66
 11112  0006A4  6E0E               	movwf	?_writeEEPROM,c
 11113  0006A6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11114  0006AA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11115                           
 11116                           ;main.c: 1891: rv = readEEPROM(0x42);
 11117  0006AE  6A0F               	clrf	?_readEEPROM+1,c
 11118  0006B0  0E42               	movlw	66
 11119  0006B2  6E0E               	movwf	?_readEEPROM,c
 11120  0006B4  EC9D  F02C         	call	_readEEPROM	;wreg free
 11121  0006B8  EFE7  F008         	goto	L112
 11122  0006BC                     l10764:
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;main.c: 1900: writeEEPROM(0x43, val);
 11126  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 11127  0006BE  0E43               	movlw	67
 11128  0006C0  6E0E               	movwf	?_writeEEPROM,c
 11129  0006C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11130  0006C6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11131                           
 11132                           ;main.c: 1901: rv = readEEPROM(0x43);
 11133  0006CA  6A0F               	clrf	?_readEEPROM+1,c
 11134  0006CC  0E43               	movlw	67
 11135  0006CE  6E0E               	movwf	?_readEEPROM,c
 11136  0006D0  EC9D  F02C         	call	_readEEPROM	;wreg free
 11137  0006D4  EFE7  F008         	goto	L112
 11138  0006D8                     l10766:
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;main.c: 1906: writeEEPROM(0x44, val);
 11142  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 11143  0006DA  0E44               	movlw	68
 11144  0006DC  6E0E               	movwf	?_writeEEPROM,c
 11145  0006DE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11146  0006E2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11147                           
 11148                           ;main.c: 1907: rv = readEEPROM(0x44);
 11149  0006E6  6A0F               	clrf	?_readEEPROM+1,c
 11150  0006E8  0E44               	movlw	68
 11151  0006EA  6E0E               	movwf	?_readEEPROM,c
 11152  0006EC  EC9D  F02C         	call	_readEEPROM	;wreg free
 11153  0006F0  EFE7  F008         	goto	L112
 11154  0006F4                     l10768:
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;main.c: 1912: writeEEPROM(0x45, val);
 11158  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 11159  0006F6  0E45               	movlw	69
 11160  0006F8  6E0E               	movwf	?_writeEEPROM,c
 11161  0006FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11162  0006FE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11163                           
 11164                           ;main.c: 1913: rv = readEEPROM(0x45);
 11165  000702  6A0F               	clrf	?_readEEPROM+1,c
 11166  000704  0E45               	movlw	69
 11167  000706  6E0E               	movwf	?_readEEPROM,c
 11168  000708  EC9D  F02C         	call	_readEEPROM	;wreg free
 11169  00070C  EFE7  F008         	goto	L112
 11170  000710                     l10770:
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;main.c: 1918: writeEEPROM(0x46, val);
 11174  000710  6A0F               	clrf	?_writeEEPROM+1,c
 11175  000712  0E46               	movlw	70
 11176  000714  6E0E               	movwf	?_writeEEPROM,c
 11177  000716  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11178  00071A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11179                           
 11180                           ;main.c: 1919: rv = readEEPROM(0x46);
 11181  00071E  6A0F               	clrf	?_readEEPROM+1,c
 11182  000720  0E46               	movlw	70
 11183  000722  6E0E               	movwf	?_readEEPROM,c
 11184  000724  EC9D  F02C         	call	_readEEPROM	;wreg free
 11185  000728  EFE7  F008         	goto	L112
 11186  00072C                     l10772:
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;main.c: 1924: writeEEPROM(0x47, val);
 11190  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 11191  00072E  0E47               	movlw	71
 11192  000730  6E0E               	movwf	?_writeEEPROM,c
 11193  000732  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11194  000736  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11195                           
 11196                           ;main.c: 1925: rv = readEEPROM(0x47);
 11197  00073A  6A0F               	clrf	?_readEEPROM+1,c
 11198  00073C  0E47               	movlw	71
 11199  00073E  6E0E               	movwf	?_readEEPROM,c
 11200  000740  EC9D  F02C         	call	_readEEPROM	;wreg free
 11201  000744  EFE7  F008         	goto	L112
 11202  000748                     l10774:
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;main.c: 1930: writeEEPROM(0x48, val);
 11206  000748  6A0F               	clrf	?_writeEEPROM+1,c
 11207  00074A  0E48               	movlw	72
 11208  00074C  6E0E               	movwf	?_writeEEPROM,c
 11209  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11210  000752  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11211                           
 11212                           ;main.c: 1931: rv = readEEPROM(0x48);
 11213  000756  6A0F               	clrf	?_readEEPROM+1,c
 11214  000758  0E48               	movlw	72
 11215  00075A  6E0E               	movwf	?_readEEPROM,c
 11216  00075C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11217  000760  EFE7  F008         	goto	L112
 11218  000764                     l10776:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;main.c: 1940: writeEEPROM(0x49, val);
 11222  000764  6A0F               	clrf	?_writeEEPROM+1,c
 11223  000766  0E49               	movlw	73
 11224  000768  6E0E               	movwf	?_writeEEPROM,c
 11225  00076A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11226  00076E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11227                           
 11228                           ;main.c: 1941: rv = readEEPROM(0x49);
 11229  000772  6A0F               	clrf	?_readEEPROM+1,c
 11230  000774  0E49               	movlw	73
 11231  000776  6E0E               	movwf	?_readEEPROM,c
 11232  000778  EC9D  F02C         	call	_readEEPROM	;wreg free
 11233  00077C  EFE7  F008         	goto	L112
 11234  000780                     l10778:
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;main.c: 1946: writeEEPROM(0x4A, val);
 11238  000780  6A0F               	clrf	?_writeEEPROM+1,c
 11239  000782  0E4A               	movlw	74
 11240  000784  6E0E               	movwf	?_writeEEPROM,c
 11241  000786  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11242  00078A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11243                           
 11244                           ;main.c: 1947: rv = readEEPROM(0x4A);
 11245  00078E  6A0F               	clrf	?_readEEPROM+1,c
 11246  000790  0E4A               	movlw	74
 11247  000792  6E0E               	movwf	?_readEEPROM,c
 11248  000794  EC9D  F02C         	call	_readEEPROM	;wreg free
 11249  000798  EFE7  F008         	goto	L112
 11250  00079C                     l10780:
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;main.c: 1952: writeEEPROM(0x4B, val);
 11254  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 11255  00079E  0E4B               	movlw	75
 11256  0007A0  6E0E               	movwf	?_writeEEPROM,c
 11257  0007A2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11258  0007A6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11259                           
 11260                           ;main.c: 1953: rv = readEEPROM(0x4B);
 11261  0007AA  6A0F               	clrf	?_readEEPROM+1,c
 11262  0007AC  0E4B               	movlw	75
 11263  0007AE  6E0E               	movwf	?_readEEPROM,c
 11264  0007B0  EC9D  F02C         	call	_readEEPROM	;wreg free
 11265  0007B4  EFE7  F008         	goto	L112
 11266  0007B8                     l10782:
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;main.c: 1958: writeEEPROM(0x4C, val);
 11270  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 11271  0007BA  0E4C               	movlw	76
 11272  0007BC  6E0E               	movwf	?_writeEEPROM,c
 11273  0007BE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11274  0007C2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11275                           
 11276                           ;main.c: 1959: rv = readEEPROM(0x4C);
 11277  0007C6  6A0F               	clrf	?_readEEPROM+1,c
 11278  0007C8  0E4C               	movlw	76
 11279  0007CA  6E0E               	movwf	?_readEEPROM,c
 11280  0007CC  EC9D  F02C         	call	_readEEPROM	;wreg free
 11281  0007D0  EFE7  F008         	goto	L112
 11282  0007D4                     l10784:
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;main.c: 1964: writeEEPROM(0x4D, val);
 11286  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 11287  0007D6  0E4D               	movlw	77
 11288  0007D8  6E0E               	movwf	?_writeEEPROM,c
 11289  0007DA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11290  0007DE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11291                           
 11292                           ;main.c: 1965: rv = readEEPROM(0x4D);
 11293  0007E2  6A0F               	clrf	?_readEEPROM+1,c
 11294  0007E4  0E4D               	movlw	77
 11295  0007E6  6E0E               	movwf	?_readEEPROM,c
 11296  0007E8  EC9D  F02C         	call	_readEEPROM	;wreg free
 11297  0007EC  EFE7  F008         	goto	L112
 11298  0007F0                     l10786:
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;main.c: 1970: writeEEPROM(0x4E, val);
 11302  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 11303  0007F2  0E4E               	movlw	78
 11304  0007F4  6E0E               	movwf	?_writeEEPROM,c
 11305  0007F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11306  0007FA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11307                           
 11308                           ;main.c: 1971: rv = readEEPROM(0x4E);
 11309  0007FE  6A0F               	clrf	?_readEEPROM+1,c
 11310  000800  0E4E               	movlw	78
 11311  000802  6E0E               	movwf	?_readEEPROM,c
 11312  000804  EC9D  F02C         	call	_readEEPROM	;wreg free
 11313  000808  EFE7  F008         	goto	L112
 11314  00080C                     l10788:
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;main.c: 1980: writeEEPROM(0x4F, val);
 11318  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 11319  00080E  0E4F               	movlw	79
 11320  000810  6E0E               	movwf	?_writeEEPROM,c
 11321  000812  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11322  000816  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11323                           
 11324                           ;main.c: 1981: rv = readEEPROM(0x4F);
 11325  00081A  6A0F               	clrf	?_readEEPROM+1,c
 11326  00081C  0E4F               	movlw	79
 11327  00081E  6E0E               	movwf	?_readEEPROM,c
 11328  000820  EC9D  F02C         	call	_readEEPROM	;wreg free
 11329  000824  EFE7  F008         	goto	L112
 11330  000828                     l10790:
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;main.c: 1986: writeEEPROM(0x50, val);
 11334  000828  6A0F               	clrf	?_writeEEPROM+1,c
 11335  00082A  0E50               	movlw	80
 11336  00082C  6E0E               	movwf	?_writeEEPROM,c
 11337  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11338  000832  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11339                           
 11340                           ;main.c: 1987: rv = readEEPROM(0x50);
 11341  000836  6A0F               	clrf	?_readEEPROM+1,c
 11342  000838  0E50               	movlw	80
 11343  00083A  6E0E               	movwf	?_readEEPROM,c
 11344  00083C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11345  000840  EFE7  F008         	goto	L112
 11346  000844                     l10792:
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;main.c: 1992: writeEEPROM(0x51, val);
 11350  000844  6A0F               	clrf	?_writeEEPROM+1,c
 11351  000846  0E51               	movlw	81
 11352  000848  6E0E               	movwf	?_writeEEPROM,c
 11353  00084A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11354  00084E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11355                           
 11356                           ;main.c: 1993: rv = readEEPROM(0x51);
 11357  000852  6A0F               	clrf	?_readEEPROM+1,c
 11358  000854  0E51               	movlw	81
 11359  000856  6E0E               	movwf	?_readEEPROM,c
 11360  000858  EC9D  F02C         	call	_readEEPROM	;wreg free
 11361  00085C  EFE7  F008         	goto	L112
 11362  000860                     l10794:
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;main.c: 1998: writeEEPROM(0x52, val);
 11366  000860  6A0F               	clrf	?_writeEEPROM+1,c
 11367  000862  0E52               	movlw	82
 11368  000864  6E0E               	movwf	?_writeEEPROM,c
 11369  000866  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11370  00086A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11371                           
 11372                           ;main.c: 1999: rv = readEEPROM(0x52);
 11373  00086E  6A0F               	clrf	?_readEEPROM+1,c
 11374  000870  0E52               	movlw	82
 11375  000872  6E0E               	movwf	?_readEEPROM,c
 11376  000874  EC9D  F02C         	call	_readEEPROM	;wreg free
 11377  000878  EFE7  F008         	goto	L112
 11378  00087C                     l10796:
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;main.c: 2004: writeEEPROM(0x53, val);
 11382  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11383  00087E  0E53               	movlw	83
 11384  000880  6E0E               	movwf	?_writeEEPROM,c
 11385  000882  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11386  000886  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11387                           
 11388                           ;main.c: 2005: rv = readEEPROM(0x53);
 11389  00088A  6A0F               	clrf	?_readEEPROM+1,c
 11390  00088C  0E53               	movlw	83
 11391  00088E  6E0E               	movwf	?_readEEPROM,c
 11392  000890  EC9D  F02C         	call	_readEEPROM	;wreg free
 11393  000894  EFE7  F008         	goto	L112
 11394  000898                     l10798:
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;main.c: 2010: writeEEPROM(0x54, val);
 11398  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11399  00089A  0E54               	movlw	84
 11400  00089C  6E0E               	movwf	?_writeEEPROM,c
 11401  00089E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11402  0008A2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11403                           
 11404                           ;main.c: 2011: rv = readEEPROM(0x54);
 11405  0008A6  6A0F               	clrf	?_readEEPROM+1,c
 11406  0008A8  0E54               	movlw	84
 11407  0008AA  6E0E               	movwf	?_readEEPROM,c
 11408  0008AC  EC9D  F02C         	call	_readEEPROM	;wreg free
 11409  0008B0  EFE7  F008         	goto	L112
 11410  0008B4                     l10800:
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;main.c: 2016: writeEEPROM(0x55, val);
 11414  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11415  0008B6  0E55               	movlw	85
 11416  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11417  0008BA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11418  0008BE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11419                           
 11420                           ;main.c: 2017: rv = readEEPROM(0x55);
 11421  0008C2  6A0F               	clrf	?_readEEPROM+1,c
 11422  0008C4  0E55               	movlw	85
 11423  0008C6  6E0E               	movwf	?_readEEPROM,c
 11424  0008C8  EC9D  F02C         	call	_readEEPROM	;wreg free
 11425  0008CC  EFE7  F008         	goto	L112
 11426  0008D0                     l10802:
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;main.c: 2022: writeEEPROM(0x56, val);
 11430  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11431  0008D2  0E56               	movlw	86
 11432  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11433  0008D6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11434  0008DA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11435                           
 11436                           ;main.c: 2023: rv = readEEPROM(0x56);
 11437  0008DE  6A0F               	clrf	?_readEEPROM+1,c
 11438  0008E0  0E56               	movlw	86
 11439  0008E2  6E0E               	movwf	?_readEEPROM,c
 11440  0008E4  EC9D  F02C         	call	_readEEPROM	;wreg free
 11441  0008E8  EFE7  F008         	goto	L112
 11442  0008EC                     l10804:
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;main.c: 2028: writeEEPROM(0x57, val);
 11446  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11447  0008EE  0E57               	movlw	87
 11448  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11449  0008F2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11450  0008F6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11451                           
 11452                           ;main.c: 2029: rv = readEEPROM(0x57);
 11453  0008FA  6A0F               	clrf	?_readEEPROM+1,c
 11454  0008FC  0E57               	movlw	87
 11455  0008FE  6E0E               	movwf	?_readEEPROM,c
 11456  000900  EC9D  F02C         	call	_readEEPROM	;wreg free
 11457  000904  EFE7  F008         	goto	L112
 11458  000908                     l10806:
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;main.c: 2034: writeEEPROM(0x58, val);
 11462  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11463  00090A  0E58               	movlw	88
 11464  00090C  6E0E               	movwf	?_writeEEPROM,c
 11465  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11466  000912  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11467                           
 11468                           ;main.c: 2035: rv = readEEPROM(0x58);
 11469  000916  6A0F               	clrf	?_readEEPROM+1,c
 11470  000918  0E58               	movlw	88
 11471  00091A  6E0E               	movwf	?_readEEPROM,c
 11472  00091C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11473  000920  EFE7  F008         	goto	L112
 11474  000924                     l10808:
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;main.c: 2040: writeEEPROM(0x59, val);
 11478  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11479  000926  0E59               	movlw	89
 11480  000928  6E0E               	movwf	?_writeEEPROM,c
 11481  00092A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11482  00092E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11483                           
 11484                           ;main.c: 2041: rv = readEEPROM(0x59);
 11485  000932  6A0F               	clrf	?_readEEPROM+1,c
 11486  000934  0E59               	movlw	89
 11487  000936  6E0E               	movwf	?_readEEPROM,c
 11488  000938  EC9D  F02C         	call	_readEEPROM	;wreg free
 11489  00093C  EFE7  F008         	goto	L112
 11490  000940                     l10810:
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;main.c: 2046: writeEEPROM(0x5A, val);
 11494  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11495  000942  0E5A               	movlw	90
 11496  000944  6E0E               	movwf	?_writeEEPROM,c
 11497  000946  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11498  00094A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11499                           
 11500                           ;main.c: 2047: rv = readEEPROM(0x5A);
 11501  00094E  6A0F               	clrf	?_readEEPROM+1,c
 11502  000950  0E5A               	movlw	90
 11503  000952  6E0E               	movwf	?_readEEPROM,c
 11504  000954  EC9D  F02C         	call	_readEEPROM	;wreg free
 11505  000958  EFE7  F008         	goto	L112
 11506  00095C                     l10812:
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;main.c: 2056: writeEEPROM(0x5B, val);
 11510  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11511  00095E  0E5B               	movlw	91
 11512  000960  6E0E               	movwf	?_writeEEPROM,c
 11513  000962  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11514  000966  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11515                           
 11516                           ;main.c: 2057: rv = readEEPROM(0x5B);
 11517  00096A  6A0F               	clrf	?_readEEPROM+1,c
 11518  00096C  0E5B               	movlw	91
 11519  00096E  6E0E               	movwf	?_readEEPROM,c
 11520  000970  EC9D  F02C         	call	_readEEPROM	;wreg free
 11521  000974  EFE7  F008         	goto	L112
 11522  000978                     l10814:
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;main.c: 2062: writeEEPROM(0x5C, val);
 11526  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11527  00097A  0E5C               	movlw	92
 11528  00097C  6E0E               	movwf	?_writeEEPROM,c
 11529  00097E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11530  000982  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11531                           
 11532                           ;main.c: 2063: rv = readEEPROM(0x5C);
 11533  000986  6A0F               	clrf	?_readEEPROM+1,c
 11534  000988  0E5C               	movlw	92
 11535  00098A  6E0E               	movwf	?_readEEPROM,c
 11536  00098C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11537  000990  EFE7  F008         	goto	L112
 11538  000994                     l10816:
 11539                           
 11540                           ; BSR set to: 0
 11541                           ;main.c: 2068: writeEEPROM(0x5D, val);
 11542  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11543  000996  0E5D               	movlw	93
 11544  000998  6E0E               	movwf	?_writeEEPROM,c
 11545  00099A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11546  00099E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11547                           
 11548                           ;main.c: 2069: rv = readEEPROM(0x5D);
 11549  0009A2  6A0F               	clrf	?_readEEPROM+1,c
 11550  0009A4  0E5D               	movlw	93
 11551  0009A6  6E0E               	movwf	?_readEEPROM,c
 11552  0009A8  EC9D  F02C         	call	_readEEPROM	;wreg free
 11553  0009AC  EFE7  F008         	goto	L112
 11554  0009B0                     l10818:
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;main.c: 2074: writeEEPROM(0x5E, val);
 11558  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11559  0009B2  0E5E               	movlw	94
 11560  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11561  0009B6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11562  0009BA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11563                           
 11564                           ;main.c: 2075: rv = readEEPROM(0x5E);
 11565  0009BE  6A0F               	clrf	?_readEEPROM+1,c
 11566  0009C0  0E5E               	movlw	94
 11567  0009C2  6E0E               	movwf	?_readEEPROM,c
 11568  0009C4  EC9D  F02C         	call	_readEEPROM	;wreg free
 11569  0009C8  EFE7  F008         	goto	L112
 11570  0009CC                     l10820:
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;main.c: 2080: writeEEPROM(0x5F, val);
 11574  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11575  0009CE  0E5F               	movlw	95
 11576  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11577  0009D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11578  0009D6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11579                           
 11580                           ;main.c: 2081: rv = readEEPROM(0x5F);
 11581  0009DA  6A0F               	clrf	?_readEEPROM+1,c
 11582  0009DC  0E5F               	movlw	95
 11583  0009DE  6E0E               	movwf	?_readEEPROM,c
 11584  0009E0  EC9D  F02C         	call	_readEEPROM	;wreg free
 11585  0009E4  D3F4               	goto	L112
 11586  0009E6                     l10822:
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;main.c: 2086: writeEEPROM(0x60, val);
 11590  0009E6  6A0F               	clrf	?_writeEEPROM+1,c
 11591  0009E8  0E60               	movlw	96
 11592  0009EA  6E0E               	movwf	?_writeEEPROM,c
 11593  0009EC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11594  0009F0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11595                           
 11596                           ;main.c: 2087: rv = readEEPROM(0x60);
 11597  0009F4  6A0F               	clrf	?_readEEPROM+1,c
 11598  0009F6  0E60               	movlw	96
 11599  0009F8  6E0E               	movwf	?_readEEPROM,c
 11600  0009FA  EC9D  F02C         	call	_readEEPROM	;wreg free
 11601  0009FE  D3E7               	goto	L112
 11602  000A00                     l10824:
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;main.c: 2092: writeEEPROM(0x61, val);
 11606  000A00  6A0F               	clrf	?_writeEEPROM+1,c
 11607  000A02  0E61               	movlw	97
 11608  000A04  6E0E               	movwf	?_writeEEPROM,c
 11609  000A06  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11610  000A0A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11611                           
 11612                           ;main.c: 2093: rv = readEEPROM(0x61);
 11613  000A0E  6A0F               	clrf	?_readEEPROM+1,c
 11614  000A10  0E61               	movlw	97
 11615  000A12  6E0E               	movwf	?_readEEPROM,c
 11616  000A14  EC9D  F02C         	call	_readEEPROM	;wreg free
 11617  000A18  D3DA               	goto	L112
 11618  000A1A                     l10826:
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;main.c: 2098: writeEEPROM(0x62, val);
 11622  000A1A  6A0F               	clrf	?_writeEEPROM+1,c
 11623  000A1C  0E62               	movlw	98
 11624  000A1E  6E0E               	movwf	?_writeEEPROM,c
 11625  000A20  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11626  000A24  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11627                           
 11628                           ;main.c: 2099: rv = readEEPROM(0x62);
 11629  000A28  6A0F               	clrf	?_readEEPROM+1,c
 11630  000A2A  0E62               	movlw	98
 11631  000A2C  6E0E               	movwf	?_readEEPROM,c
 11632  000A2E  EC9D  F02C         	call	_readEEPROM	;wreg free
 11633  000A32  D3CD               	goto	L112
 11634  000A34                     l10828:
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;main.c: 2104: writeEEPROM(0x63, val);
 11638  000A34  6A0F               	clrf	?_writeEEPROM+1,c
 11639  000A36  0E63               	movlw	99
 11640  000A38  6E0E               	movwf	?_writeEEPROM,c
 11641  000A3A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11642  000A3E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11643                           
 11644                           ;main.c: 2105: rv = readEEPROM(0x63);
 11645  000A42  6A0F               	clrf	?_readEEPROM+1,c
 11646  000A44  0E63               	movlw	99
 11647  000A46  6E0E               	movwf	?_readEEPROM,c
 11648  000A48  EC9D  F02C         	call	_readEEPROM	;wreg free
 11649  000A4C  D3C0               	goto	L112
 11650  000A4E                     l10830:
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;main.c: 2110: writeEEPROM(0x64, val);
 11654  000A4E  6A0F               	clrf	?_writeEEPROM+1,c
 11655  000A50  0E64               	movlw	100
 11656  000A52  6E0E               	movwf	?_writeEEPROM,c
 11657  000A54  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11658  000A58  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11659                           
 11660                           ;main.c: 2111: rv = readEEPROM(0x64);
 11661  000A5C  6A0F               	clrf	?_readEEPROM+1,c
 11662  000A5E  0E64               	movlw	100
 11663  000A60  6E0E               	movwf	?_readEEPROM,c
 11664  000A62  EC9D  F02C         	call	_readEEPROM	;wreg free
 11665  000A66  D3B3               	goto	L112
 11666  000A68                     l10832:
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;main.c: 2116: writeEEPROM(0x65, val);
 11670  000A68  6A0F               	clrf	?_writeEEPROM+1,c
 11671  000A6A  0E65               	movlw	101
 11672  000A6C  6E0E               	movwf	?_writeEEPROM,c
 11673  000A6E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11674  000A72  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11675                           
 11676                           ;main.c: 2117: rv = readEEPROM(0x65);
 11677  000A76  6A0F               	clrf	?_readEEPROM+1,c
 11678  000A78  0E65               	movlw	101
 11679  000A7A  6E0E               	movwf	?_readEEPROM,c
 11680  000A7C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11681  000A80  D3A6               	goto	L112
 11682  000A82                     l10834:
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;main.c: 2122: writeEEPROM(0x66, val);
 11686  000A82  6A0F               	clrf	?_writeEEPROM+1,c
 11687  000A84  0E66               	movlw	102
 11688  000A86  6E0E               	movwf	?_writeEEPROM,c
 11689  000A88  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11690  000A8C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11691                           
 11692                           ;main.c: 2123: rv = readEEPROM(0x66);
 11693  000A90  6A0F               	clrf	?_readEEPROM+1,c
 11694  000A92  0E66               	movlw	102
 11695  000A94  6E0E               	movwf	?_readEEPROM,c
 11696  000A96  EC9D  F02C         	call	_readEEPROM	;wreg free
 11697  000A9A  D399               	goto	L112
 11698  000A9C                     l10836:
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;main.c: 2132: writeEEPROM(0x67, val);
 11702  000A9C  6A0F               	clrf	?_writeEEPROM+1,c
 11703  000A9E  0E67               	movlw	103
 11704  000AA0  6E0E               	movwf	?_writeEEPROM,c
 11705  000AA2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11706  000AA6  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11707                           
 11708                           ;main.c: 2133: rv = readEEPROM(0x67);
 11709  000AAA  6A0F               	clrf	?_readEEPROM+1,c
 11710  000AAC  0E67               	movlw	103
 11711  000AAE  6E0E               	movwf	?_readEEPROM,c
 11712  000AB0  EC9D  F02C         	call	_readEEPROM	;wreg free
 11713  000AB4  D38C               	goto	L112
 11714  000AB6                     l10838:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;main.c: 2138: writeEEPROM(0x68, val);
 11718  000AB6  6A0F               	clrf	?_writeEEPROM+1,c
 11719  000AB8  0E68               	movlw	104
 11720  000ABA  6E0E               	movwf	?_writeEEPROM,c
 11721  000ABC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11722  000AC0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11723                           
 11724                           ;main.c: 2139: rv = readEEPROM(0x68);
 11725  000AC4  6A0F               	clrf	?_readEEPROM+1,c
 11726  000AC6  0E68               	movlw	104
 11727  000AC8  6E0E               	movwf	?_readEEPROM,c
 11728  000ACA  EC9D  F02C         	call	_readEEPROM	;wreg free
 11729  000ACE  D37F               	goto	L112
 11730  000AD0                     l10840:
 11731                           
 11732                           ; BSR set to: 0
 11733                           ;main.c: 2144: writeEEPROM(0x69, val);
 11734  000AD0  6A0F               	clrf	?_writeEEPROM+1,c
 11735  000AD2  0E69               	movlw	105
 11736  000AD4  6E0E               	movwf	?_writeEEPROM,c
 11737  000AD6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11738  000ADA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11739                           
 11740                           ;main.c: 2145: rv = readEEPROM(0x69);
 11741  000ADE  6A0F               	clrf	?_readEEPROM+1,c
 11742  000AE0  0E69               	movlw	105
 11743  000AE2  6E0E               	movwf	?_readEEPROM,c
 11744  000AE4  EC9D  F02C         	call	_readEEPROM	;wreg free
 11745  000AE8  D372               	goto	L112
 11746  000AEA                     l10842:
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;main.c: 2150: writeEEPROM(0x6A, val);
 11750  000AEA  6A0F               	clrf	?_writeEEPROM+1,c
 11751  000AEC  0E6A               	movlw	106
 11752  000AEE  6E0E               	movwf	?_writeEEPROM,c
 11753  000AF0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11754  000AF4  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11755                           
 11756                           ;main.c: 2151: rv = readEEPROM(0x6A);
 11757  000AF8  6A0F               	clrf	?_readEEPROM+1,c
 11758  000AFA  0E6A               	movlw	106
 11759  000AFC  6E0E               	movwf	?_readEEPROM,c
 11760  000AFE  EC9D  F02C         	call	_readEEPROM	;wreg free
 11761  000B02  D365               	goto	L112
 11762  000B04                     l10844:
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;main.c: 2156: writeEEPROM(0x6B, val);
 11766  000B04  6A0F               	clrf	?_writeEEPROM+1,c
 11767  000B06  0E6B               	movlw	107
 11768  000B08  6E0E               	movwf	?_writeEEPROM,c
 11769  000B0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11770  000B0E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11771                           
 11772                           ;main.c: 2157: rv = readEEPROM(0x6B);
 11773  000B12  6A0F               	clrf	?_readEEPROM+1,c
 11774  000B14  0E6B               	movlw	107
 11775  000B16  6E0E               	movwf	?_readEEPROM,c
 11776  000B18  EC9D  F02C         	call	_readEEPROM	;wreg free
 11777  000B1C  D358               	goto	L112
 11778  000B1E                     l10846:
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;main.c: 2162: writeEEPROM(0x6C, val);
 11782  000B1E  6A0F               	clrf	?_writeEEPROM+1,c
 11783  000B20  0E6C               	movlw	108
 11784  000B22  6E0E               	movwf	?_writeEEPROM,c
 11785  000B24  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11786  000B28  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11787                           
 11788                           ;main.c: 2163: rv = readEEPROM(0x6C);
 11789  000B2C  6A0F               	clrf	?_readEEPROM+1,c
 11790  000B2E  0E6C               	movlw	108
 11791  000B30  6E0E               	movwf	?_readEEPROM,c
 11792  000B32  EC9D  F02C         	call	_readEEPROM	;wreg free
 11793  000B36  D34B               	goto	L112
 11794  000B38                     l10848:
 11795                           
 11796                           ; BSR set to: 0
 11797                           ;main.c: 2168: writeEEPROM(0x6D, val);
 11798  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11799  000B3A  0E6D               	movlw	109
 11800  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11801  000B3E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11802  000B42  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11803                           
 11804                           ;main.c: 2169: rv = readEEPROM(0x6D);
 11805  000B46  6A0F               	clrf	?_readEEPROM+1,c
 11806  000B48  0E6D               	movlw	109
 11807  000B4A  6E0E               	movwf	?_readEEPROM,c
 11808  000B4C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11809  000B50  D33E               	goto	L112
 11810  000B52                     l10850:
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;main.c: 2174: writeEEPROM(0x6E, val);
 11814  000B52  6A0F               	clrf	?_writeEEPROM+1,c
 11815  000B54  0E6E               	movlw	110
 11816  000B56  6E0E               	movwf	?_writeEEPROM,c
 11817  000B58  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11818  000B5C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11819                           
 11820                           ;main.c: 2175: rv = readEEPROM(0x6E);
 11821  000B60  6A0F               	clrf	?_readEEPROM+1,c
 11822  000B62  0E6E               	movlw	110
 11823  000B64  6E0E               	movwf	?_readEEPROM,c
 11824  000B66  EC9D  F02C         	call	_readEEPROM	;wreg free
 11825  000B6A  D331               	goto	L112
 11826  000B6C                     l10852:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 2180: writeEEPROM(0x6F, val);
 11830  000B6C  6A0F               	clrf	?_writeEEPROM+1,c
 11831  000B6E  0E6F               	movlw	111
 11832  000B70  6E0E               	movwf	?_writeEEPROM,c
 11833  000B72  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11834  000B76  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11835                           
 11836                           ;main.c: 2181: rv = readEEPROM(0x6F);
 11837  000B7A  6A0F               	clrf	?_readEEPROM+1,c
 11838  000B7C  0E6F               	movlw	111
 11839  000B7E  6E0E               	movwf	?_readEEPROM,c
 11840  000B80  EC9D  F02C         	call	_readEEPROM	;wreg free
 11841  000B84  D324               	goto	L112
 11842  000B86                     l10854:
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;main.c: 2186: writeEEPROM(0x70, val);
 11846  000B86  6A0F               	clrf	?_writeEEPROM+1,c
 11847  000B88  0E70               	movlw	112
 11848  000B8A  6E0E               	movwf	?_writeEEPROM,c
 11849  000B8C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11850  000B90  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11851                           
 11852                           ;main.c: 2187: rv = readEEPROM(0x70);
 11853  000B94  6A0F               	clrf	?_readEEPROM+1,c
 11854  000B96  0E70               	movlw	112
 11855  000B98  6E0E               	movwf	?_readEEPROM,c
 11856  000B9A  EC9D  F02C         	call	_readEEPROM	;wreg free
 11857  000B9E  D317               	goto	L112
 11858  000BA0                     l10856:
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;main.c: 2192: writeEEPROM(0x71, val);
 11862  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
 11863  000BA2  0E71               	movlw	113
 11864  000BA4  6E0E               	movwf	?_writeEEPROM,c
 11865  000BA6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11866  000BAA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11867                           
 11868                           ;main.c: 2193: rv = readEEPROM(0x71);
 11869  000BAE  6A0F               	clrf	?_readEEPROM+1,c
 11870  000BB0  0E71               	movlw	113
 11871  000BB2  6E0E               	movwf	?_readEEPROM,c
 11872  000BB4  EC9D  F02C         	call	_readEEPROM	;wreg free
 11873  000BB8  D30A               	goto	L112
 11874  000BBA                     l10858:
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;main.c: 2198: writeEEPROM(0x72, val);
 11878  000BBA  6A0F               	clrf	?_writeEEPROM+1,c
 11879  000BBC  0E72               	movlw	114
 11880  000BBE  6E0E               	movwf	?_writeEEPROM,c
 11881  000BC0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11882  000BC4  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11883                           
 11884                           ;main.c: 2199: rv = readEEPROM(0x72);
 11885  000BC8  6A0F               	clrf	?_readEEPROM+1,c
 11886  000BCA  0E72               	movlw	114
 11887  000BCC  6E0E               	movwf	?_readEEPROM,c
 11888  000BCE  EC9D  F02C         	call	_readEEPROM	;wreg free
 11889  000BD2  D2FD               	goto	L112
 11890  000BD4                     l10860:
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;main.c: 2208: writeEEPROM(0x73, val);
 11894  000BD4  6A0F               	clrf	?_writeEEPROM+1,c
 11895  000BD6  0E73               	movlw	115
 11896  000BD8  6E0E               	movwf	?_writeEEPROM,c
 11897  000BDA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11898  000BDE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11899                           
 11900                           ;main.c: 2209: rv = readEEPROM(0x73);
 11901  000BE2  6A0F               	clrf	?_readEEPROM+1,c
 11902  000BE4  0E73               	movlw	115
 11903  000BE6  6E0E               	movwf	?_readEEPROM,c
 11904  000BE8  EC9D  F02C         	call	_readEEPROM	;wreg free
 11905  000BEC  D2F0               	goto	L112
 11906  000BEE                     l10862:
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;main.c: 2214: writeEEPROM(0x74, val);
 11910  000BEE  6A0F               	clrf	?_writeEEPROM+1,c
 11911  000BF0  0E74               	movlw	116
 11912  000BF2  6E0E               	movwf	?_writeEEPROM,c
 11913  000BF4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11914  000BF8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11915                           
 11916                           ;main.c: 2215: rv = readEEPROM(0x74);
 11917  000BFC  6A0F               	clrf	?_readEEPROM+1,c
 11918  000BFE  0E74               	movlw	116
 11919  000C00  6E0E               	movwf	?_readEEPROM,c
 11920  000C02  EC9D  F02C         	call	_readEEPROM	;wreg free
 11921  000C06  D2E3               	goto	L112
 11922  000C08                     l10864:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;main.c: 2220: writeEEPROM(0x75, val);
 11926  000C08  6A0F               	clrf	?_writeEEPROM+1,c
 11927  000C0A  0E75               	movlw	117
 11928  000C0C  6E0E               	movwf	?_writeEEPROM,c
 11929  000C0E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11930  000C12  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11931                           
 11932                           ;main.c: 2221: rv = readEEPROM(0x75);
 11933  000C16  6A0F               	clrf	?_readEEPROM+1,c
 11934  000C18  0E75               	movlw	117
 11935  000C1A  6E0E               	movwf	?_readEEPROM,c
 11936  000C1C  EC9D  F02C         	call	_readEEPROM	;wreg free
 11937  000C20  D2D6               	goto	L112
 11938  000C22                     l10866:
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;main.c: 2226: writeEEPROM(0x76, val);
 11942  000C22  6A0F               	clrf	?_writeEEPROM+1,c
 11943  000C24  0E76               	movlw	118
 11944  000C26  6E0E               	movwf	?_writeEEPROM,c
 11945  000C28  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11946  000C2C  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11947                           
 11948                           ;main.c: 2227: rv = readEEPROM(0x76);
 11949  000C30  6A0F               	clrf	?_readEEPROM+1,c
 11950  000C32  0E76               	movlw	118
 11951  000C34  6E0E               	movwf	?_readEEPROM,c
 11952  000C36  EC9D  F02C         	call	_readEEPROM	;wreg free
 11953  000C3A  D2C9               	goto	L112
 11954  000C3C                     l10868:
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;main.c: 2232: writeEEPROM(0x77, val);
 11958  000C3C  6A0F               	clrf	?_writeEEPROM+1,c
 11959  000C3E  0E77               	movlw	119
 11960  000C40  6E0E               	movwf	?_writeEEPROM,c
 11961  000C42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11962  000C46  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11963                           
 11964                           ;main.c: 2233: rv = readEEPROM(0x77);
 11965  000C4A  6A0F               	clrf	?_readEEPROM+1,c
 11966  000C4C  0E77               	movlw	119
 11967  000C4E  6E0E               	movwf	?_readEEPROM,c
 11968  000C50  EC9D  F02C         	call	_readEEPROM	;wreg free
 11969  000C54  D2BC               	goto	L112
 11970  000C56                     l10870:
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;main.c: 2238: writeEEPROM(0x78, val);
 11974  000C56  6A0F               	clrf	?_writeEEPROM+1,c
 11975  000C58  0E78               	movlw	120
 11976  000C5A  6E0E               	movwf	?_writeEEPROM,c
 11977  000C5C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11978  000C60  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11979                           
 11980                           ;main.c: 2239: rv = readEEPROM(0x78);
 11981  000C64  6A0F               	clrf	?_readEEPROM+1,c
 11982  000C66  0E78               	movlw	120
 11983  000C68  6E0E               	movwf	?_readEEPROM,c
 11984  000C6A  EC9D  F02C         	call	_readEEPROM	;wreg free
 11985  000C6E  D2AF               	goto	L112
 11986  000C70                     l10872:
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;main.c: 2244: writeEEPROM(0x79, val);
 11990  000C70  6A0F               	clrf	?_writeEEPROM+1,c
 11991  000C72  0E79               	movlw	121
 11992  000C74  6E0E               	movwf	?_writeEEPROM,c
 11993  000C76  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11994  000C7A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 11995                           
 11996                           ;main.c: 2245: rv = readEEPROM(0x79);
 11997  000C7E  6A0F               	clrf	?_readEEPROM+1,c
 11998  000C80  0E79               	movlw	121
 11999  000C82  6E0E               	movwf	?_readEEPROM,c
 12000  000C84  EC9D  F02C         	call	_readEEPROM	;wreg free
 12001  000C88  D2A2               	goto	L112
 12002  000C8A                     l10874:
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;main.c: 2250: writeEEPROM(0x7A, val);
 12006  000C8A  6A0F               	clrf	?_writeEEPROM+1,c
 12007  000C8C  0E7A               	movlw	122
 12008  000C8E  6E0E               	movwf	?_writeEEPROM,c
 12009  000C90  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12010  000C94  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12011                           
 12012                           ;main.c: 2251: rv = readEEPROM(0x7A);
 12013  000C98  6A0F               	clrf	?_readEEPROM+1,c
 12014  000C9A  0E7A               	movlw	122
 12015  000C9C  6E0E               	movwf	?_readEEPROM,c
 12016  000C9E  EC9D  F02C         	call	_readEEPROM	;wreg free
 12017  000CA2  D295               	goto	L112
 12018  000CA4                     l10876:
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;main.c: 2256: writeEEPROM(0x7B, val);
 12022  000CA4  6A0F               	clrf	?_writeEEPROM+1,c
 12023  000CA6  0E7B               	movlw	123
 12024  000CA8  6E0E               	movwf	?_writeEEPROM,c
 12025  000CAA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12026  000CAE  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12027                           
 12028                           ;main.c: 2257: rv = readEEPROM(0x7B);
 12029  000CB2  6A0F               	clrf	?_readEEPROM+1,c
 12030  000CB4  0E7B               	movlw	123
 12031  000CB6  6E0E               	movwf	?_readEEPROM,c
 12032  000CB8  EC9D  F02C         	call	_readEEPROM	;wreg free
 12033  000CBC  D288               	goto	L112
 12034  000CBE                     l10878:
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;main.c: 2262: writeEEPROM(0x7C, val);
 12038  000CBE  6A0F               	clrf	?_writeEEPROM+1,c
 12039  000CC0  0E7C               	movlw	124
 12040  000CC2  6E0E               	movwf	?_writeEEPROM,c
 12041  000CC4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12042  000CC8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12043                           
 12044                           ;main.c: 2263: rv = readEEPROM(0x7C);
 12045  000CCC  6A0F               	clrf	?_readEEPROM+1,c
 12046  000CCE  0E7C               	movlw	124
 12047  000CD0  6E0E               	movwf	?_readEEPROM,c
 12048  000CD2  EC9D  F02C         	call	_readEEPROM	;wreg free
 12049  000CD6  D27B               	goto	L112
 12050  000CD8                     l10880:
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;main.c: 2268: writeEEPROM(0x7D, val);
 12054  000CD8  6A0F               	clrf	?_writeEEPROM+1,c
 12055  000CDA  0E7D               	movlw	125
 12056  000CDC  6E0E               	movwf	?_writeEEPROM,c
 12057  000CDE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12058  000CE2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12059                           
 12060                           ;main.c: 2269: rv = readEEPROM(0x7D);
 12061  000CE6  6A0F               	clrf	?_readEEPROM+1,c
 12062  000CE8  0E7D               	movlw	125
 12063  000CEA  6E0E               	movwf	?_readEEPROM,c
 12064  000CEC  EC9D  F02C         	call	_readEEPROM	;wreg free
 12065  000CF0  D26E               	goto	L112
 12066  000CF2                     l10882:
 12067                           
 12068                           ; BSR set to: 0
 12069                           ;main.c: 2274: writeEEPROM(0x7E, val);
 12070  000CF2  6A0F               	clrf	?_writeEEPROM+1,c
 12071  000CF4  0E7E               	movlw	126
 12072  000CF6  6E0E               	movwf	?_writeEEPROM,c
 12073  000CF8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12074  000CFC  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12075                           
 12076                           ;main.c: 2275: rv = readEEPROM(0x7E);
 12077  000D00  6A0F               	clrf	?_readEEPROM+1,c
 12078  000D02  0E7E               	movlw	126
 12079  000D04  6E0E               	movwf	?_readEEPROM,c
 12080  000D06  EC9D  F02C         	call	_readEEPROM	;wreg free
 12081  000D0A  D261               	goto	L112
 12082  000D0C                     l10884:
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;main.c: 2284: writeEEPROM(0x7F, 0x7f);
 12086  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
 12087  000D0E  0E7F               	movlw	127
 12088  000D10  6E0E               	movwf	?_writeEEPROM,c
 12089  000D12  6E10               	movwf	?_writeEEPROM+2,c
 12090  000D14  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12091                           
 12092                           ;main.c: 2285: writeEEPROM(0x80, 0xff);
 12093  000D18  6A0F               	clrf	?_writeEEPROM+1,c
 12094  000D1A  0E80               	movlw	128
 12095  000D1C  6E0E               	movwf	?_writeEEPROM,c
 12096  000D1E  0EFF               	movlw	255
 12097  000D20  6810               	setf	?_writeEEPROM+2,c
 12098  000D22  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12099                           
 12100                           ;main.c: 2286: rv = readEEPROM(0x7F);
 12101  000D26  6A0F               	clrf	?_readEEPROM+1,c
 12102  000D28  0E7F               	movlw	127
 12103  000D2A  6E0E               	movwf	?_readEEPROM,c
 12104  000D2C  EC9D  F02C         	call	_readEEPROM	;wreg free
 12105  000D30  D24E               	goto	L112
 12106  000D32                     l10886:
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;main.c: 2291: writeEEPROM(0x7F, 0x7f);
 12110  000D32  6A0F               	clrf	?_writeEEPROM+1,c
 12111  000D34  0E7F               	movlw	127
 12112  000D36  6E0E               	movwf	?_writeEEPROM,c
 12113  000D38  6E10               	movwf	?_writeEEPROM+2,c
 12114  000D3A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12115                           
 12116                           ;main.c: 2292: writeEEPROM(0x80, 0xff);
 12117  000D3E  6A0F               	clrf	?_writeEEPROM+1,c
 12118  000D40  0E80               	movlw	128
 12119  000D42  6E0E               	movwf	?_writeEEPROM,c
 12120  000D44  0EFF               	movlw	255
 12121  000D46  6810               	setf	?_writeEEPROM+2,c
 12122  000D48  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12123                           
 12124                           ;main.c: 2293: rv = readEEPROM(0x80);
 12125  000D4C  6A0F               	clrf	?_readEEPROM+1,c
 12126  000D4E  0E80               	movlw	128
 12127  000D50  6E0E               	movwf	?_readEEPROM,c
 12128  000D52  EC9D  F02C         	call	_readEEPROM	;wreg free
 12129  000D56  D23B               	goto	L112
 12130  000D58                     l10888:
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;main.c: 2298: writeEEPROM(0x81, 0x7f);
 12134  000D58  6A0F               	clrf	?_writeEEPROM+1,c
 12135  000D5A  0E81               	movlw	129
 12136  000D5C  6E0E               	movwf	?_writeEEPROM,c
 12137  000D5E  0E7F               	movlw	127
 12138  000D60  6E10               	movwf	?_writeEEPROM+2,c
 12139  000D62  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12140                           
 12141                           ;main.c: 2299: writeEEPROM(0x82, 0xff);
 12142  000D66  6A0F               	clrf	?_writeEEPROM+1,c
 12143  000D68  0E82               	movlw	130
 12144  000D6A  6E0E               	movwf	?_writeEEPROM,c
 12145  000D6C  0EFF               	movlw	255
 12146  000D6E  6810               	setf	?_writeEEPROM+2,c
 12147  000D70  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12148                           
 12149                           ;main.c: 2300: rv = readEEPROM(0x81);
 12150  000D74  6A0F               	clrf	?_readEEPROM+1,c
 12151  000D76  0E81               	movlw	129
 12152  000D78  6E0E               	movwf	?_readEEPROM,c
 12153  000D7A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12154  000D7E  D227               	goto	L112
 12155  000D80                     l10890:
 12156                           
 12157                           ; BSR set to: 0
 12158                           ;main.c: 2305: writeEEPROM(0x81, 0x7f);
 12159  000D80  6A0F               	clrf	?_writeEEPROM+1,c
 12160  000D82  0E81               	movlw	129
 12161  000D84  6E0E               	movwf	?_writeEEPROM,c
 12162  000D86  0E7F               	movlw	127
 12163  000D88  6E10               	movwf	?_writeEEPROM+2,c
 12164  000D8A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12165                           
 12166                           ;main.c: 2306: writeEEPROM(0x82, 0xff);
 12167  000D8E  6A0F               	clrf	?_writeEEPROM+1,c
 12168  000D90  0E82               	movlw	130
 12169  000D92  6E0E               	movwf	?_writeEEPROM,c
 12170  000D94  0EFF               	movlw	255
 12171  000D96  6810               	setf	?_writeEEPROM+2,c
 12172  000D98  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12173                           
 12174                           ;main.c: 2307: rv = readEEPROM(0x82);
 12175  000D9C  6A0F               	clrf	?_readEEPROM+1,c
 12176  000D9E  0E82               	movlw	130
 12177  000DA0  6E0E               	movwf	?_readEEPROM,c
 12178  000DA2  EC9D  F02C         	call	_readEEPROM	;wreg free
 12179  000DA6  D213               	goto	L112
 12180  000DA8                     l10892:
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;main.c: 2312: writeEEPROM(0x83, 0x7f);
 12184  000DA8  6A0F               	clrf	?_writeEEPROM+1,c
 12185  000DAA  0E83               	movlw	131
 12186  000DAC  6E0E               	movwf	?_writeEEPROM,c
 12187  000DAE  0E7F               	movlw	127
 12188  000DB0  6E10               	movwf	?_writeEEPROM+2,c
 12189  000DB2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12190                           
 12191                           ;main.c: 2313: writeEEPROM(0x84, 0xff);
 12192  000DB6  6A0F               	clrf	?_writeEEPROM+1,c
 12193  000DB8  0E84               	movlw	132
 12194  000DBA  6E0E               	movwf	?_writeEEPROM,c
 12195  000DBC  0EFF               	movlw	255
 12196  000DBE  6810               	setf	?_writeEEPROM+2,c
 12197  000DC0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12198                           
 12199                           ;main.c: 2314: rv = readEEPROM(0x83);
 12200  000DC4  6A0F               	clrf	?_readEEPROM+1,c
 12201  000DC6  0E83               	movlw	131
 12202  000DC8  6E0E               	movwf	?_readEEPROM,c
 12203  000DCA  EC9D  F02C         	call	_readEEPROM	;wreg free
 12204  000DCE  D1FF               	goto	L112
 12205  000DD0                     l10894:
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;main.c: 2319: writeEEPROM(0x83, 0x7f);
 12209  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
 12210  000DD2  0E83               	movlw	131
 12211  000DD4  6E0E               	movwf	?_writeEEPROM,c
 12212  000DD6  0E7F               	movlw	127
 12213  000DD8  6E10               	movwf	?_writeEEPROM+2,c
 12214  000DDA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12215                           
 12216                           ;main.c: 2320: writeEEPROM(0x84, 0xff);
 12217  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 12218  000DE0  0E84               	movlw	132
 12219  000DE2  6E0E               	movwf	?_writeEEPROM,c
 12220  000DE4  0EFF               	movlw	255
 12221  000DE6  6810               	setf	?_writeEEPROM+2,c
 12222  000DE8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12223                           
 12224                           ;main.c: 2321: rv = readEEPROM(0x84);
 12225  000DEC  6A0F               	clrf	?_readEEPROM+1,c
 12226  000DEE  0E84               	movlw	132
 12227  000DF0  6E0E               	movwf	?_readEEPROM,c
 12228  000DF2  EC9D  F02C         	call	_readEEPROM	;wreg free
 12229  000DF6  D1EB               	goto	L112
 12230  000DF8                     l10896:
 12231                           
 12232                           ; BSR set to: 0
 12233                           ;main.c: 2326: writeEEPROM(0x85, 0x7f);
 12234  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 12235  000DFA  0E85               	movlw	133
 12236  000DFC  6E0E               	movwf	?_writeEEPROM,c
 12237  000DFE  0E7F               	movlw	127
 12238  000E00  6E10               	movwf	?_writeEEPROM+2,c
 12239  000E02  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12240                           
 12241                           ;main.c: 2327: writeEEPROM(0x86, 0xff);
 12242  000E06  6A0F               	clrf	?_writeEEPROM+1,c
 12243  000E08  0E86               	movlw	134
 12244  000E0A  6E0E               	movwf	?_writeEEPROM,c
 12245  000E0C  0EFF               	movlw	255
 12246  000E0E  6810               	setf	?_writeEEPROM+2,c
 12247  000E10  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12248                           
 12249                           ;main.c: 2328: rv = readEEPROM(0x85);
 12250  000E14  6A0F               	clrf	?_readEEPROM+1,c
 12251  000E16  0E85               	movlw	133
 12252  000E18  6E0E               	movwf	?_readEEPROM,c
 12253  000E1A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12254  000E1E  D1D7               	goto	L112
 12255  000E20                     l10898:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;main.c: 2333: writeEEPROM(0x85, 0x7f);
 12259  000E20  6A0F               	clrf	?_writeEEPROM+1,c
 12260  000E22  0E85               	movlw	133
 12261  000E24  6E0E               	movwf	?_writeEEPROM,c
 12262  000E26  0E7F               	movlw	127
 12263  000E28  6E10               	movwf	?_writeEEPROM+2,c
 12264  000E2A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12265                           
 12266                           ;main.c: 2334: writeEEPROM(0x86, 0xff);
 12267  000E2E  6A0F               	clrf	?_writeEEPROM+1,c
 12268  000E30  0E86               	movlw	134
 12269  000E32  6E0E               	movwf	?_writeEEPROM,c
 12270  000E34  0EFF               	movlw	255
 12271  000E36  6810               	setf	?_writeEEPROM+2,c
 12272  000E38  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12273                           
 12274                           ;main.c: 2335: rv = readEEPROM(0x86);
 12275  000E3C  6A0F               	clrf	?_readEEPROM+1,c
 12276  000E3E  0E86               	movlw	134
 12277  000E40  6E0E               	movwf	?_readEEPROM,c
 12278  000E42  EC9D  F02C         	call	_readEEPROM	;wreg free
 12279  000E46  D1C3               	goto	L112
 12280  000E48                     l10900:
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;main.c: 2340: writeEEPROM(0x87, 0x7f);
 12284  000E48  6A0F               	clrf	?_writeEEPROM+1,c
 12285  000E4A  0E87               	movlw	135
 12286  000E4C  6E0E               	movwf	?_writeEEPROM,c
 12287  000E4E  0E7F               	movlw	127
 12288  000E50  6E10               	movwf	?_writeEEPROM+2,c
 12289  000E52  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12290                           
 12291                           ;main.c: 2341: writeEEPROM(0x88, 0xff);
 12292  000E56  6A0F               	clrf	?_writeEEPROM+1,c
 12293  000E58  0E88               	movlw	136
 12294  000E5A  6E0E               	movwf	?_writeEEPROM,c
 12295  000E5C  0EFF               	movlw	255
 12296  000E5E  6810               	setf	?_writeEEPROM+2,c
 12297  000E60  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12298                           
 12299                           ;main.c: 2342: rv = readEEPROM(0x87);
 12300  000E64  6A0F               	clrf	?_readEEPROM+1,c
 12301  000E66  0E87               	movlw	135
 12302  000E68  6E0E               	movwf	?_readEEPROM,c
 12303  000E6A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12304  000E6E  D1AF               	goto	L112
 12305  000E70                     l10902:
 12306                           
 12307                           ; BSR set to: 0
 12308                           ;main.c: 2347: writeEEPROM(0x87, 0x7f);
 12309  000E70  6A0F               	clrf	?_writeEEPROM+1,c
 12310  000E72  0E87               	movlw	135
 12311  000E74  6E0E               	movwf	?_writeEEPROM,c
 12312  000E76  0E7F               	movlw	127
 12313  000E78  6E10               	movwf	?_writeEEPROM+2,c
 12314  000E7A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12315                           
 12316                           ;main.c: 2348: writeEEPROM(0x88, 0xff);
 12317  000E7E  6A0F               	clrf	?_writeEEPROM+1,c
 12318  000E80  0E88               	movlw	136
 12319  000E82  6E0E               	movwf	?_writeEEPROM,c
 12320  000E84  0EFF               	movlw	255
 12321  000E86  6810               	setf	?_writeEEPROM+2,c
 12322  000E88  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12323                           
 12324                           ;main.c: 2349: rv = readEEPROM(0x88);
 12325  000E8C  6A0F               	clrf	?_readEEPROM+1,c
 12326  000E8E  0E88               	movlw	136
 12327  000E90  6E0E               	movwf	?_readEEPROM,c
 12328  000E92  EC9D  F02C         	call	_readEEPROM	;wreg free
 12329  000E96  D19B               	goto	L112
 12330  000E98                     l10904:
 12331                           
 12332                           ; BSR set to: 0
 12333                           ;main.c: 2354: writeEEPROM(0x89, 0x7f);
 12334  000E98  6A0F               	clrf	?_writeEEPROM+1,c
 12335  000E9A  0E89               	movlw	137
 12336  000E9C  6E0E               	movwf	?_writeEEPROM,c
 12337  000E9E  0E7F               	movlw	127
 12338  000EA0  6E10               	movwf	?_writeEEPROM+2,c
 12339  000EA2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12340                           
 12341                           ;main.c: 2355: writeEEPROM(0x8A, 0xff);
 12342  000EA6  6A0F               	clrf	?_writeEEPROM+1,c
 12343  000EA8  0E8A               	movlw	138
 12344  000EAA  6E0E               	movwf	?_writeEEPROM,c
 12345  000EAC  0EFF               	movlw	255
 12346  000EAE  6810               	setf	?_writeEEPROM+2,c
 12347  000EB0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12348                           
 12349                           ;main.c: 2356: rv = readEEPROM(0x89);
 12350  000EB4  6A0F               	clrf	?_readEEPROM+1,c
 12351  000EB6  0E89               	movlw	137
 12352  000EB8  6E0E               	movwf	?_readEEPROM,c
 12353  000EBA  EC9D  F02C         	call	_readEEPROM	;wreg free
 12354  000EBE  D187               	goto	L112
 12355  000EC0                     l10906:
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;main.c: 2361: writeEEPROM(0x89, 0x7f);
 12359  000EC0  6A0F               	clrf	?_writeEEPROM+1,c
 12360  000EC2  0E89               	movlw	137
 12361  000EC4  6E0E               	movwf	?_writeEEPROM,c
 12362  000EC6  0E7F               	movlw	127
 12363  000EC8  6E10               	movwf	?_writeEEPROM+2,c
 12364  000ECA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12365                           
 12366                           ;main.c: 2362: writeEEPROM(0x8A, 0xff);
 12367  000ECE  6A0F               	clrf	?_writeEEPROM+1,c
 12368  000ED0  0E8A               	movlw	138
 12369  000ED2  6E0E               	movwf	?_writeEEPROM,c
 12370  000ED4  0EFF               	movlw	255
 12371  000ED6  6810               	setf	?_writeEEPROM+2,c
 12372  000ED8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12373                           
 12374                           ;main.c: 2363: rv = readEEPROM(0x8A);
 12375  000EDC  6A0F               	clrf	?_readEEPROM+1,c
 12376  000EDE  0E8A               	movlw	138
 12377  000EE0  6E0E               	movwf	?_readEEPROM,c
 12378  000EE2  EC9D  F02C         	call	_readEEPROM	;wreg free
 12379  000EE6  D173               	goto	L112
 12380  000EE8                     l10908:
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;main.c: 2372: writeEEPROM(0x8B, 0x80);
 12384  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 12385  000EEA  0E8B               	movlw	139
 12386  000EEC  6E0E               	movwf	?_writeEEPROM,c
 12387  000EEE  0E80               	movlw	128
 12388  000EF0  6E10               	movwf	?_writeEEPROM+2,c
 12389  000EF2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12390                           
 12391                           ;main.c: 2373: writeEEPROM(0x8B, 0x00);
 12392  000EF6  6A0F               	clrf	?_writeEEPROM+1,c
 12393  000EF8  0E8B               	movlw	139
 12394  000EFA  6E0E               	movwf	?_writeEEPROM,c
 12395  000EFC  0E00               	movlw	0
 12396  000EFE  6A10               	clrf	?_writeEEPROM+2,c
 12397  000F00  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12398                           
 12399                           ;main.c: 2374: rv = readEEPROM(0x8B);
 12400  000F04  6A0F               	clrf	?_readEEPROM+1,c
 12401  000F06  0E8B               	movlw	139
 12402  000F08  6E0E               	movwf	?_readEEPROM,c
 12403  000F0A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12404  000F0E  D15F               	goto	L112
 12405  000F10                     l10910:
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;main.c: 2379: writeEEPROM(0x8B, 0x80);
 12409  000F10  6A0F               	clrf	?_writeEEPROM+1,c
 12410  000F12  0E8B               	movlw	139
 12411  000F14  6E0E               	movwf	?_writeEEPROM,c
 12412  000F16  0E80               	movlw	128
 12413  000F18  6E10               	movwf	?_writeEEPROM+2,c
 12414  000F1A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12415                           
 12416                           ;main.c: 2380: writeEEPROM(0x8B, 0x00);
 12417  000F1E  6A0F               	clrf	?_writeEEPROM+1,c
 12418  000F20  0E8B               	movlw	139
 12419  000F22  6E0E               	movwf	?_writeEEPROM,c
 12420  000F24  0E00               	movlw	0
 12421  000F26  6A10               	clrf	?_writeEEPROM+2,c
 12422  000F28  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12423                           
 12424                           ;main.c: 2381: rv = readEEPROM(0x8C);
 12425  000F2C  6A0F               	clrf	?_readEEPROM+1,c
 12426  000F2E  0E8C               	movlw	140
 12427  000F30  6E0E               	movwf	?_readEEPROM,c
 12428  000F32  EC9D  F02C         	call	_readEEPROM	;wreg free
 12429  000F36  D14B               	goto	L112
 12430  000F38                     l10912:
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;main.c: 2386: writeEEPROM(0x8D, 0x80);
 12434  000F38  6A0F               	clrf	?_writeEEPROM+1,c
 12435  000F3A  0E8D               	movlw	141
 12436  000F3C  6E0E               	movwf	?_writeEEPROM,c
 12437  000F3E  0E80               	movlw	128
 12438  000F40  6E10               	movwf	?_writeEEPROM+2,c
 12439  000F42  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12440                           
 12441                           ;main.c: 2387: writeEEPROM(0x8D, 0x00);
 12442  000F46  6A0F               	clrf	?_writeEEPROM+1,c
 12443  000F48  0E8D               	movlw	141
 12444  000F4A  6E0E               	movwf	?_writeEEPROM,c
 12445  000F4C  0E00               	movlw	0
 12446  000F4E  6A10               	clrf	?_writeEEPROM+2,c
 12447  000F50  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12448                           
 12449                           ;main.c: 2388: rv = readEEPROM(0x8D);
 12450  000F54  6A0F               	clrf	?_readEEPROM+1,c
 12451  000F56  0E8D               	movlw	141
 12452  000F58  6E0E               	movwf	?_readEEPROM,c
 12453  000F5A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12454  000F5E  D137               	goto	L112
 12455  000F60                     l10914:
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;main.c: 2393: writeEEPROM(0x8D, 0x80);
 12459  000F60  6A0F               	clrf	?_writeEEPROM+1,c
 12460  000F62  0E8D               	movlw	141
 12461  000F64  6E0E               	movwf	?_writeEEPROM,c
 12462  000F66  0E80               	movlw	128
 12463  000F68  6E10               	movwf	?_writeEEPROM+2,c
 12464  000F6A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12465                           
 12466                           ;main.c: 2394: writeEEPROM(0x8D, 0x00);
 12467  000F6E  6A0F               	clrf	?_writeEEPROM+1,c
 12468  000F70  0E8D               	movlw	141
 12469  000F72  6E0E               	movwf	?_writeEEPROM,c
 12470  000F74  0E00               	movlw	0
 12471  000F76  6A10               	clrf	?_writeEEPROM+2,c
 12472  000F78  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12473                           
 12474                           ;main.c: 2395: rv = readEEPROM(0x8E);
 12475  000F7C  6A0F               	clrf	?_readEEPROM+1,c
 12476  000F7E  0E8E               	movlw	142
 12477  000F80  6E0E               	movwf	?_readEEPROM,c
 12478  000F82  EC9D  F02C         	call	_readEEPROM	;wreg free
 12479  000F86  D123               	goto	L112
 12480  000F88                     l10916:
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;main.c: 2400: writeEEPROM(0x8F, 0x80);
 12484  000F88  6A0F               	clrf	?_writeEEPROM+1,c
 12485  000F8A  0E8F               	movlw	143
 12486  000F8C  6E0E               	movwf	?_writeEEPROM,c
 12487  000F8E  0E80               	movlw	128
 12488  000F90  6E10               	movwf	?_writeEEPROM+2,c
 12489  000F92  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12490                           
 12491                           ;main.c: 2401: writeEEPROM(0x8F, 0x00);
 12492  000F96  6A0F               	clrf	?_writeEEPROM+1,c
 12493  000F98  0E8F               	movlw	143
 12494  000F9A  6E0E               	movwf	?_writeEEPROM,c
 12495  000F9C  0E00               	movlw	0
 12496  000F9E  6A10               	clrf	?_writeEEPROM+2,c
 12497  000FA0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12498                           
 12499                           ;main.c: 2402: rv = readEEPROM(0x8F);
 12500  000FA4  6A0F               	clrf	?_readEEPROM+1,c
 12501  000FA6  0E8F               	movlw	143
 12502  000FA8  6E0E               	movwf	?_readEEPROM,c
 12503  000FAA  EC9D  F02C         	call	_readEEPROM	;wreg free
 12504  000FAE  D10F               	goto	L112
 12505  000FB0                     l10918:
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;main.c: 2407: writeEEPROM(0x8F, 0x80);
 12509  000FB0  6A0F               	clrf	?_writeEEPROM+1,c
 12510  000FB2  0E8F               	movlw	143
 12511  000FB4  6E0E               	movwf	?_writeEEPROM,c
 12512  000FB6  0E80               	movlw	128
 12513  000FB8  6E10               	movwf	?_writeEEPROM+2,c
 12514  000FBA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12515                           
 12516                           ;main.c: 2408: writeEEPROM(0x8F, 0x00);
 12517  000FBE  6A0F               	clrf	?_writeEEPROM+1,c
 12518  000FC0  0E8F               	movlw	143
 12519  000FC2  6E0E               	movwf	?_writeEEPROM,c
 12520  000FC4  0E00               	movlw	0
 12521  000FC6  6A10               	clrf	?_writeEEPROM+2,c
 12522  000FC8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12523                           
 12524                           ;main.c: 2409: rv = readEEPROM(0x90);
 12525  000FCC  6A0F               	clrf	?_readEEPROM+1,c
 12526  000FCE  0E90               	movlw	144
 12527  000FD0  6E0E               	movwf	?_readEEPROM,c
 12528  000FD2  EC9D  F02C         	call	_readEEPROM	;wreg free
 12529  000FD6  D0FB               	goto	L112
 12530  000FD8                     l10920:
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;main.c: 2414: writeEEPROM(0x91, 0x80);
 12534  000FD8  6A0F               	clrf	?_writeEEPROM+1,c
 12535  000FDA  0E91               	movlw	145
 12536  000FDC  6E0E               	movwf	?_writeEEPROM,c
 12537  000FDE  0E80               	movlw	128
 12538  000FE0  6E10               	movwf	?_writeEEPROM+2,c
 12539  000FE2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12540                           
 12541                           ;main.c: 2415: writeEEPROM(0x91, 0x00);
 12542  000FE6  6A0F               	clrf	?_writeEEPROM+1,c
 12543  000FE8  0E91               	movlw	145
 12544  000FEA  6E0E               	movwf	?_writeEEPROM,c
 12545  000FEC  0E00               	movlw	0
 12546  000FEE  6A10               	clrf	?_writeEEPROM+2,c
 12547  000FF0  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12548                           
 12549                           ;main.c: 2416: rv = readEEPROM(0x91);
 12550  000FF4  6A0F               	clrf	?_readEEPROM+1,c
 12551  000FF6  0E91               	movlw	145
 12552  000FF8  6E0E               	movwf	?_readEEPROM,c
 12553  000FFA  EC9D  F02C         	call	_readEEPROM	;wreg free
 12554  000FFE  D0E7               	goto	L112
 12555  001000                     l10922:
 12556                           
 12557                           ; BSR set to: 0
 12558                           ;main.c: 2421: writeEEPROM(0x91, 0x80);
 12559  001000  6A0F               	clrf	?_writeEEPROM+1,c
 12560  001002  0E91               	movlw	145
 12561  001004  6E0E               	movwf	?_writeEEPROM,c
 12562  001006  0E80               	movlw	128
 12563  001008  6E10               	movwf	?_writeEEPROM+2,c
 12564  00100A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12565                           
 12566                           ;main.c: 2422: writeEEPROM(0x91, 0x00);
 12567  00100E  6A0F               	clrf	?_writeEEPROM+1,c
 12568  001010  0E91               	movlw	145
 12569  001012  6E0E               	movwf	?_writeEEPROM,c
 12570  001014  0E00               	movlw	0
 12571  001016  6A10               	clrf	?_writeEEPROM+2,c
 12572  001018  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12573                           
 12574                           ;main.c: 2423: rv = readEEPROM(0x92);
 12575  00101C  6A0F               	clrf	?_readEEPROM+1,c
 12576  00101E  0E92               	movlw	146
 12577  001020  6E0E               	movwf	?_readEEPROM,c
 12578  001022  EC9D  F02C         	call	_readEEPROM	;wreg free
 12579  001026  D0D3               	goto	L112
 12580  001028                     l10924:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;main.c: 2428: writeEEPROM(0x93, 0x80);
 12584  001028  6A0F               	clrf	?_writeEEPROM+1,c
 12585  00102A  0E93               	movlw	147
 12586  00102C  6E0E               	movwf	?_writeEEPROM,c
 12587  00102E  0E80               	movlw	128
 12588  001030  6E10               	movwf	?_writeEEPROM+2,c
 12589  001032  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12590                           
 12591                           ;main.c: 2429: writeEEPROM(0x93, 0x00);
 12592  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12593  001038  0E93               	movlw	147
 12594  00103A  6E0E               	movwf	?_writeEEPROM,c
 12595  00103C  0E00               	movlw	0
 12596  00103E  6A10               	clrf	?_writeEEPROM+2,c
 12597  001040  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12598                           
 12599                           ;main.c: 2430: rv = readEEPROM(0x93);
 12600  001044  6A0F               	clrf	?_readEEPROM+1,c
 12601  001046  0E93               	movlw	147
 12602  001048  6E0E               	movwf	?_readEEPROM,c
 12603  00104A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12604  00104E  D0BF               	goto	L112
 12605  001050                     l10926:
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;main.c: 2435: writeEEPROM(0x93, 0x80);
 12609  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12610  001052  0E93               	movlw	147
 12611  001054  6E0E               	movwf	?_writeEEPROM,c
 12612  001056  0E80               	movlw	128
 12613  001058  6E10               	movwf	?_writeEEPROM+2,c
 12614  00105A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12615                           
 12616                           ;main.c: 2436: writeEEPROM(0x93, 0x00);
 12617  00105E  6A0F               	clrf	?_writeEEPROM+1,c
 12618  001060  0E93               	movlw	147
 12619  001062  6E0E               	movwf	?_writeEEPROM,c
 12620  001064  0E00               	movlw	0
 12621  001066  6A10               	clrf	?_writeEEPROM+2,c
 12622  001068  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12623                           
 12624                           ;main.c: 2437: rv = readEEPROM(0x94);
 12625  00106C  6A0F               	clrf	?_readEEPROM+1,c
 12626  00106E  0E94               	movlw	148
 12627  001070  6E0E               	movwf	?_readEEPROM,c
 12628  001072  EC9D  F02C         	call	_readEEPROM	;wreg free
 12629  001076  D0AB               	goto	L112
 12630  001078                     l10928:
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;main.c: 2442: writeEEPROM(0x8B, 0x80);
 12634  001078  6A0F               	clrf	?_writeEEPROM+1,c
 12635  00107A  0E8B               	movlw	139
 12636  00107C  6E0E               	movwf	?_writeEEPROM,c
 12637  00107E  0E80               	movlw	128
 12638  001080  6E10               	movwf	?_writeEEPROM+2,c
 12639  001082  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12640                           
 12641                           ;main.c: 2443: writeEEPROM(0x8B, 0x00);
 12642  001086  6A0F               	clrf	?_writeEEPROM+1,c
 12643  001088  0E8B               	movlw	139
 12644  00108A  6E0E               	movwf	?_writeEEPROM,c
 12645  00108C  0E00               	movlw	0
 12646  00108E  6A10               	clrf	?_writeEEPROM+2,c
 12647  001090  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12648                           
 12649                           ;main.c: 2444: rv = readEEPROM(0x95);
 12650  001094  6A0F               	clrf	?_readEEPROM+1,c
 12651  001096  0E95               	movlw	149
 12652  001098  6E0E               	movwf	?_readEEPROM,c
 12653  00109A  EC9D  F02C         	call	_readEEPROM	;wreg free
 12654  00109E  D097               	goto	L112
 12655  0010A0                     l10930:
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;main.c: 2449: writeEEPROM(0x8B, 0x80);
 12659  0010A0  6A0F               	clrf	?_writeEEPROM+1,c
 12660  0010A2  0E8B               	movlw	139
 12661  0010A4  6E0E               	movwf	?_writeEEPROM,c
 12662  0010A6  0E80               	movlw	128
 12663  0010A8  6E10               	movwf	?_writeEEPROM+2,c
 12664  0010AA  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12665                           
 12666                           ;main.c: 2450: writeEEPROM(0x8B, 0x00);
 12667  0010AE  6A0F               	clrf	?_writeEEPROM+1,c
 12668  0010B0  0E8B               	movlw	139
 12669  0010B2  6E0E               	movwf	?_writeEEPROM,c
 12670  0010B4  0E00               	movlw	0
 12671  0010B6  6A10               	clrf	?_writeEEPROM+2,c
 12672  0010B8  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12673                           
 12674                           ;main.c: 2451: rv = readEEPROM(0x96);
 12675  0010BC  6A0F               	clrf	?_readEEPROM+1,c
 12676  0010BE  0E96               	movlw	150
 12677  0010C0  6E0E               	movwf	?_readEEPROM,c
 12678  0010C2  EC9D  F02C         	call	_readEEPROM	;wreg free
 12679  0010C6  D083               	goto	L112
 12680  0010C8                     l10932:
 12681                           
 12682                           ; BSR set to: 0
 12683                           ;main.c: 2460: writeEEPROM(0x97, val);
 12684  0010C8  6A0F               	clrf	?_writeEEPROM+1,c
 12685  0010CA  0E97               	movlw	151
 12686  0010CC  6E0E               	movwf	?_writeEEPROM,c
 12687  0010CE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12688  0010D2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12689                           
 12690                           ;main.c: 2461: rv = readEEPROM(0x97);
 12691  0010D6  6A0F               	clrf	?_readEEPROM+1,c
 12692  0010D8  0E97               	movlw	151
 12693  0010DA  6E0E               	movwf	?_readEEPROM,c
 12694  0010DC  EC9D  F02C         	call	_readEEPROM	;wreg free
 12695  0010E0  D076               	goto	L112
 12696  0010E2                     l10934:
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;main.c: 2466: writeEEPROM(0x98, val);
 12700  0010E2  6A0F               	clrf	?_writeEEPROM+1,c
 12701  0010E4  0E98               	movlw	152
 12702  0010E6  6E0E               	movwf	?_writeEEPROM,c
 12703  0010E8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12704  0010EC  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12705                           
 12706                           ;main.c: 2467: rv = readEEPROM(0x98);
 12707  0010F0  6A0F               	clrf	?_readEEPROM+1,c
 12708  0010F2  0E98               	movlw	152
 12709  0010F4  6E0E               	movwf	?_readEEPROM,c
 12710  0010F6  EC9D  F02C         	call	_readEEPROM	;wreg free
 12711  0010FA  D069               	goto	L112
 12712  0010FC                     l10936:
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;main.c: 2472: writeEEPROM(0x99, val);
 12716  0010FC  6A0F               	clrf	?_writeEEPROM+1,c
 12717  0010FE  0E99               	movlw	153
 12718  001100  6E0E               	movwf	?_writeEEPROM,c
 12719  001102  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12720  001106  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12721  00110A  6A0F               	clrf	?_readEEPROM+1,c
 12722  00110C  0E99               	movlw	153
 12723  00110E  6E0E               	movwf	?_readEEPROM,c
 12724  001110  EC9D  F02C         	call	_readEEPROM	;wreg free
 12725  001114                     l516:
 12726                           
 12727                           ;main.c: 2477: writeEEPROM(0x9A, val);
 12728  001114  6A0F               	clrf	?_writeEEPROM+1,c
 12729  001116  0E9A               	movlw	154
 12730  001118  6E0E               	movwf	?_writeEEPROM,c
 12731  00111A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12732  00111E  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12733                           
 12734                           ;main.c: 2478: rv = readEEPROM(0x9A);
 12735  001122  6A0F               	clrf	?_readEEPROM+1,c
 12736  001124  0E9A               	movlw	154
 12737  001126  6E0E               	movwf	?_readEEPROM,c
 12738  001128  EC9D  F02C         	call	_readEEPROM	;wreg free
 12739  00112C  D050               	goto	L112
 12740  00112E                     l10938:
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;main.c: 2483: writeEEPROM(0x9B, val);
 12744  00112E  6A0F               	clrf	?_writeEEPROM+1,c
 12745  001130  0E9B               	movlw	155
 12746  001132  6E0E               	movwf	?_writeEEPROM,c
 12747  001134  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12748  001138  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12749                           
 12750                           ;main.c: 2484: rv = readEEPROM(0x9B);
 12751  00113C  6A0F               	clrf	?_readEEPROM+1,c
 12752  00113E  0E9B               	movlw	155
 12753  001140  6E0E               	movwf	?_readEEPROM,c
 12754  001142  EC9D  F02C         	call	_readEEPROM	;wreg free
 12755  001146  D043               	goto	L112
 12756  001148                     l10940:
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;main.c: 2489: writeEEPROM(0x9C, val);
 12760  001148  6A0F               	clrf	?_writeEEPROM+1,c
 12761  00114A  0E9C               	movlw	156
 12762  00114C  6E0E               	movwf	?_writeEEPROM,c
 12763  00114E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12764  001152  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12765                           
 12766                           ;main.c: 2490: rv = readEEPROM(0x9C);
 12767  001156  6A0F               	clrf	?_readEEPROM+1,c
 12768  001158  0E9C               	movlw	156
 12769  00115A  6E0E               	movwf	?_readEEPROM,c
 12770  00115C  EC9D  F02C         	call	_readEEPROM	;wreg free
 12771  001160  D036               	goto	L112
 12772  001162                     l10942:
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;main.c: 2497: if (val < 12) {
 12776  001162  0E0C               	movlw	12
 12777  001164  6021               	cpfslt	vscp_writeAppReg@val,c
 12778  001166  D19E               	goto	l10966
 12779                           
 12780                           ; BSR set to: 0
 12781                           ;main.c: 2498: rv = calibration_index = val;
 12782  001168  C021  F04A         	movff	vscp_writeAppReg@val,_calibration_index
 12783  00116C  C04A  F023         	movff	_calibration_index,vscp_writeAppReg@rv
 12784  001170  D199               	goto	l10966
 12785  001172                     l10946:
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;main.c: 2504: writeEEPROM(0x9E +
 12789                           ;main.c: 2505: calibration_index, val);
 12790  001172  0E9E               	movlw	158
 12791  001174  244A               	addwf	_calibration_index,w,c
 12792  001176  6E0E               	movwf	?_writeEEPROM,c
 12793  001178  6A0F               	clrf	?_writeEEPROM+1,c
 12794  00117A  0E00               	movlw	0
 12795  00117C  220F               	addwfc	?_writeEEPROM+1,f,c
 12796  00117E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12797  001182  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12798                           
 12799                           ;main.c: 2506: rv = readEEPROM(0x9E +
 12800                           ;main.c: 2507: calibration_index);
 12801  001186  0E9E               	movlw	158
 12802  001188  244A               	addwf	_calibration_index,w,c
 12803  00118A  6E0E               	movwf	?_readEEPROM,c
 12804  00118C  6A0F               	clrf	?_readEEPROM+1,c
 12805  00118E  0E00               	movlw	0
 12806  001190  220F               	addwfc	?_readEEPROM+1,f,c
 12807  001192  EC9D  F02C         	call	_readEEPROM	;wreg free
 12808  001196  D01B               	goto	L112
 12809  001198                     l10948:
 12810                           
 12811                           ; BSR set to: 0
 12812                           ;main.c: 2511: writeEEPROM(0xF2, val);
 12813  001198  6A0F               	clrf	?_writeEEPROM+1,c
 12814  00119A  0EF2               	movlw	242
 12815  00119C  6E0E               	movwf	?_writeEEPROM,c
 12816  00119E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12817  0011A2  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12818                           
 12819                           ;main.c: 2512: rv = readEEPROM(0xF2);
 12820  0011A6  6A0F               	clrf	?_readEEPROM+1,c
 12821  0011A8  0EF2               	movlw	242
 12822  0011AA  6E0E               	movwf	?_readEEPROM,c
 12823  0011AC  EC9D  F02C         	call	_readEEPROM	;wreg free
 12824  0011B0  D00E               	goto	L112
 12825  0011B2                     l10950:
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;main.c: 2516: writeEEPROM(0xF3, val);
 12829  0011B2  6A0F               	clrf	?_writeEEPROM+1,c
 12830  0011B4  0EF3               	movlw	243
 12831  0011B6  6E0E               	movwf	?_writeEEPROM,c
 12832  0011B8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12833  0011BC  EC9A  F02B         	call	_writeEEPROM	;wreg free
 12834                           
 12835                           ;main.c: 2517: rv = readEEPROM(0xF3);
 12836  0011C0  6A0F               	clrf	?_readEEPROM+1,c
 12837  0011C2  0EF3               	movlw	243
 12838  0011C4  6E0E               	movwf	?_readEEPROM,c
 12839  0011C6  EC9D  F02C         	call	_readEEPROM	;wreg free
 12840  0011CA  D001               	goto	L112
 12841  0011CC                     l10952:
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;main.c: 2521: rv = ~val;
 12845  0011CC  1C21               	comf	vscp_writeAppReg@val,w,c
 12846  0011CE                     L112:
 12847  0011CE  6E23               	movwf	vscp_writeAppReg@rv,c
 12848                           
 12849                           ;main.c: 2522: break;
 12850  0011D0  D169               	goto	l10966
 12851  0011D2                     l10956:
 12852                           
 12853                           ; BSR set to: 0
 12854  0011D2  5022               	movf	vscp_writeAppReg@reg,w,c
 12855                           
 12856                           ; Switch size 1, requested type "speed"
 12857                           ; Number of cases is 96, Range of values is 0 to 119
 12858                           ; switch strategies available:
 12859                           ; Name         Instructions Cycles
 12860                           ; simple_byte          289   145 (average)
 12861                           ;	Chosen strategy is simple_byte
 12862  0011D4  E102 EF42  F003    	bz	l10760
 12863  0011DA  0A01               	xorlw	1	; case 1
 12864  0011DC  E102 EF50  F003    	bz	l10762
 12865  0011E2  0A03               	xorlw	3	; case 2
 12866  0011E4  E102 EF5E  F003    	bz	l10764
 12867  0011EA  0A01               	xorlw	1	; case 3
 12868  0011EC  E102 EF6C  F003    	bz	l10766
 12869  0011F2  0A07               	xorlw	7	; case 4
 12870  0011F4  E102 EF7A  F003    	bz	l10768
 12871  0011FA  0A01               	xorlw	1	; case 5
 12872  0011FC  E102 EF88  F003    	bz	l10770
 12873  001202  0A03               	xorlw	3	; case 6
 12874  001204  E102 EF96  F003    	bz	l10772
 12875  00120A  0A01               	xorlw	1	; case 7
 12876  00120C  E102 EFA4  F003    	bz	l10774
 12877  001212  0A13               	xorlw	19	; case 20
 12878  001214  E102 EFB2  F003    	bz	l10776
 12879  00121A  0A01               	xorlw	1	; case 21
 12880  00121C  E102 EFC0  F003    	bz	l10778
 12881  001222  0A03               	xorlw	3	; case 22
 12882  001224  E102 EFCE  F003    	bz	l10780
 12883  00122A  0A01               	xorlw	1	; case 23
 12884  00122C  E102 EFDC  F003    	bz	l10782
 12885  001232  0A0F               	xorlw	15	; case 24
 12886  001234  E102 EFEA  F003    	bz	l10784
 12887  00123A  0A01               	xorlw	1	; case 25
 12888  00123C  E102 EFF8  F003    	bz	l10786
 12889  001242  0A3F               	xorlw	63	; case 38
 12890  001244  E102 EF06  F004    	bz	l10788
 12891  00124A  0A01               	xorlw	1	; case 39
 12892  00124C  E102 EF14  F004    	bz	l10790
 12893  001252  0A0F               	xorlw	15	; case 40
 12894  001254  E102 EF22  F004    	bz	l10792
 12895  00125A  0A01               	xorlw	1	; case 41
 12896  00125C  E102 EF30  F004    	bz	l10794
 12897  001262  0A03               	xorlw	3	; case 42
 12898  001264  E102 EF3E  F004    	bz	l10796
 12899  00126A  0A01               	xorlw	1	; case 43
 12900  00126C  E102 EF4C  F004    	bz	l10798
 12901  001272  0A07               	xorlw	7	; case 44
 12902  001274  E102 EF5A  F004    	bz	l10800
 12903  00127A  0A01               	xorlw	1	; case 45
 12904  00127C  E102 EF68  F004    	bz	l10802
 12905  001282  0A03               	xorlw	3	; case 46
 12906  001284  E102 EF76  F004    	bz	l10804
 12907  00128A  0A01               	xorlw	1	; case 47
 12908  00128C  E102 EF84  F004    	bz	l10806
 12909  001292  0A1F               	xorlw	31	; case 48
 12910  001294  E102 EF92  F004    	bz	l10808
 12911  00129A  0A01               	xorlw	1	; case 49
 12912  00129C  E102 EFA0  F004    	bz	l10810
 12913  0012A2  0A03               	xorlw	3	; case 50
 12914  0012A4  E102 EFAE  F004    	bz	l10812
 12915  0012AA  0A01               	xorlw	1	; case 51
 12916  0012AC  E102 EFBC  F004    	bz	l10814
 12917  0012B2  0A07               	xorlw	7	; case 52
 12918  0012B4  E102 EFCA  F004    	bz	l10816
 12919  0012BA  0A01               	xorlw	1	; case 53
 12920  0012BC  E102 EFD8  F004    	bz	l10818
 12921  0012C2  0A03               	xorlw	3	; case 54
 12922  0012C4  E102 EFE6  F004    	bz	l10820
 12923  0012CA  0A01               	xorlw	1	; case 55
 12924  0012CC  E102 EFF3  F004    	bz	l10822
 12925  0012D2  0A0F               	xorlw	15	; case 56
 12926  0012D4  E102 EF00  F005    	bz	l10824
 12927  0012DA  0A01               	xorlw	1	; case 57
 12928  0012DC  E102 EF0D  F005    	bz	l10826
 12929  0012E2  0A03               	xorlw	3	; case 58
 12930  0012E4  E102 EF1A  F005    	bz	l10828
 12931  0012EA  0A01               	xorlw	1	; case 59
 12932  0012EC  E102 EF27  F005    	bz	l10830
 12933  0012F2  0A07               	xorlw	7	; case 60
 12934  0012F4  E102 EF34  F005    	bz	l10832
 12935  0012FA  0A01               	xorlw	1	; case 61
 12936  0012FC  E102 EF41  F005    	bz	l10834
 12937  001302  0A03               	xorlw	3	; case 62
 12938  001304  E102 EF4E  F005    	bz	l10836
 12939  00130A  0A01               	xorlw	1	; case 63
 12940  00130C  E102 EF5B  F005    	bz	l10838
 12941  001312  0A7F               	xorlw	127	; case 64
 12942  001314  E102 EF68  F005    	bz	l10840
 12943  00131A  0A01               	xorlw	1	; case 65
 12944  00131C  E102 EF75  F005    	bz	l10842
 12945  001322  0A03               	xorlw	3	; case 66
 12946  001324  E102 EF82  F005    	bz	l10844
 12947  00132A  0A01               	xorlw	1	; case 67
 12948  00132C  E102 EF8F  F005    	bz	l10846
 12949  001332  0A07               	xorlw	7	; case 68
 12950  001334  E102 EF9C  F005    	bz	l10848
 12951  00133A  0A01               	xorlw	1	; case 69
 12952  00133C  E101 D409          	bz	l10850
 12953  001340  0A03               	xorlw	3	; case 70
 12954  001342  E101 D413          	bz	l10852
 12955  001346  0A01               	xorlw	1	; case 71
 12956  001348  E101 D41D          	bz	l10854
 12957  00134C  0A0F               	xorlw	15	; case 72
 12958  00134E  E101 D427          	bz	l10856
 12959  001352  0A01               	xorlw	1	; case 73
 12960  001354  E101 D431          	bz	l10858
 12961  001358  0A03               	xorlw	3	; case 74
 12962  00135A  E101 D43B          	bz	l10860
 12963  00135E  0A01               	xorlw	1	; case 75
 12964  001360  E101 D445          	bz	l10862
 12965  001364  0A07               	xorlw	7	; case 76
 12966  001366  E101 D44F          	bz	l10864
 12967  00136A  0A01               	xorlw	1	; case 77
 12968  00136C  E101 D459          	bz	l10866
 12969  001370  0A03               	xorlw	3	; case 78
 12970  001372  E101 D463          	bz	l10868
 12971  001376  0A01               	xorlw	1	; case 79
 12972  001378  E101 D46D          	bz	l10870
 12973  00137C  0A1F               	xorlw	31	; case 80
 12974  00137E  E101 D477          	bz	l10872
 12975  001382  0A01               	xorlw	1	; case 81
 12976  001384  E101 D481          	bz	l10874
 12977  001388  0A03               	xorlw	3	; case 82
 12978  00138A  E101 D48B          	bz	l10876
 12979  00138E  0A01               	xorlw	1	; case 83
 12980  001390  E101 D495          	bz	l10878
 12981  001394  0A07               	xorlw	7	; case 84
 12982  001396  E101 D49F          	bz	l10880
 12983  00139A  0A01               	xorlw	1	; case 85
 12984  00139C  E101 D4A9          	bz	l10882
 12985  0013A0  0A03               	xorlw	3	; case 86
 12986  0013A2  E101 D4B3          	bz	l10884
 12987  0013A6  0A01               	xorlw	1	; case 87
 12988  0013A8  E101 D4C3          	bz	l10886
 12989  0013AC  0A0F               	xorlw	15	; case 88
 12990  0013AE  E101 D4D3          	bz	l10888
 12991  0013B2  0A01               	xorlw	1	; case 89
 12992  0013B4  E101 D4E4          	bz	l10890
 12993  0013B8  0A03               	xorlw	3	; case 90
 12994  0013BA  E101 D4F5          	bz	l10892
 12995  0013BE  0A01               	xorlw	1	; case 91
 12996  0013C0  E101 D506          	bz	l10894
 12997  0013C4  0A07               	xorlw	7	; case 92
 12998  0013C6  E101 D517          	bz	l10896
 12999  0013CA  0A01               	xorlw	1	; case 93
 13000  0013CC  E101 D528          	bz	l10898
 13001  0013D0  0A03               	xorlw	3	; case 94
 13002  0013D2  E101 D539          	bz	l10900
 13003  0013D6  0A01               	xorlw	1	; case 95
 13004  0013D8  E101 D54A          	bz	l10902
 13005  0013DC  0A3F               	xorlw	63	; case 96
 13006  0013DE  E101 D55B          	bz	l10904
 13007  0013E2  0A01               	xorlw	1	; case 97
 13008  0013E4  E101 D56C          	bz	l10906
 13009  0013E8  0A03               	xorlw	3	; case 98
 13010  0013EA  E101 D57D          	bz	l10908
 13011  0013EE  0A01               	xorlw	1	; case 99
 13012  0013F0  E101 D58E          	bz	l10910
 13013  0013F4  0A07               	xorlw	7	; case 100
 13014  0013F6  E101 D59F          	bz	l10912
 13015  0013FA  0A01               	xorlw	1	; case 101
 13016  0013FC  E101 D5B0          	bz	l10914
 13017  001400  0A03               	xorlw	3	; case 102
 13018  001402  E101 D5C1          	bz	l10916
 13019  001406  0A01               	xorlw	1	; case 103
 13020  001408  E101 D5D2          	bz	l10918
 13021  00140C  0A0F               	xorlw	15	; case 104
 13022  00140E  E101 D5E3          	bz	l10920
 13023  001412  0A01               	xorlw	1	; case 105
 13024  001414  E101 D5F4          	bz	l10922
 13025  001418  0A03               	xorlw	3	; case 106
 13026  00141A  E101 D605          	bz	l10924
 13027  00141E  0A01               	xorlw	1	; case 107
 13028  001420  E101 D616          	bz	l10926
 13029  001424  0A07               	xorlw	7	; case 108
 13030  001426  E101 D627          	bz	l10928
 13031  00142A  0A01               	xorlw	1	; case 109
 13032  00142C  E101 D638          	bz	l10930
 13033  001430  0A03               	xorlw	3	; case 110
 13034  001432  E101 D649          	bz	l10932
 13035  001436  0A01               	xorlw	1	; case 111
 13036  001438  E101 D653          	bz	l10934
 13037  00143C  0A1F               	xorlw	31	; case 112
 13038  00143E  E101 D65D          	bz	l10936
 13039  001442  0A01               	xorlw	1	; case 113
 13040  001444  E101 D666          	bz	l516
 13041  001448  0A03               	xorlw	3	; case 114
 13042  00144A  E101 D670          	bz	l10938
 13043  00144E  0A01               	xorlw	1	; case 115
 13044  001450  E101 D67A          	bz	l10940
 13045  001454  0A07               	xorlw	7	; case 116
 13046  001456  E101 D684          	bz	l10942
 13047  00145A  0A01               	xorlw	1	; case 117
 13048  00145C  E101 D689          	bz	l10946
 13049  001460  0A03               	xorlw	3	; case 118
 13050  001462  E101 D699          	bz	l10948
 13051  001466  0A01               	xorlw	1	; case 119
 13052  001468  E101 D6A3          	bz	l10950
 13053  00146C  D6AF               	goto	l10952
 13054  00146E                     l10958:
 13055                           
 13056                           ; BSR set to: 0
 13057  00146E  0446               	decf	_vscp_page_select,w,c
 13058  001470  1047               	iorwf	_vscp_page_select+1,w,c
 13059  001472  E118               	bnz	l10966
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;main.c: 2526: if (reg < 0x48) {
 13063  001474  0E48               	movlw	72
 13064  001476  6022               	cpfslt	vscp_writeAppReg@reg,c
 13065  001478  D015               	goto	l10966
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;main.c: 2527: writeEEPROM(0xAA + reg, val);
 13069  00147A  0EAA               	movlw	170
 13070  00147C  2422               	addwf	vscp_writeAppReg@reg,w,c
 13071  00147E  6E0E               	movwf	?_writeEEPROM,c
 13072  001480  6A0F               	clrf	?_writeEEPROM+1,c
 13073  001482  0E00               	movlw	0
 13074  001484  220F               	addwfc	?_writeEEPROM+1,f,c
 13075  001486  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 13076  00148A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 13077                           
 13078                           ;main.c: 2528: rv = readEEPROM(0xAA + reg );
 13079  00148E  0EAA               	movlw	170
 13080  001490  2422               	addwf	vscp_writeAppReg@reg,w,c
 13081  001492  6E0E               	movwf	?_readEEPROM,c
 13082  001494  6A0F               	clrf	?_readEEPROM+1,c
 13083  001496  0E00               	movlw	0
 13084  001498  220F               	addwfc	?_readEEPROM+1,f,c
 13085  00149A  EC9D  F02C         	call	_readEEPROM	;wreg free
 13086  00149E  6E23               	movwf	vscp_writeAppReg@rv,c
 13087                           
 13088                           ;main.c: 2529: writeCoeffs2Ram();
 13089  0014A0  ECFE  F025         	call	_writeCoeffs2Ram	;wreg free
 13090  0014A4                     l10966:
 13091                           
 13092                           ;main.c: 2530: }
 13093                           ;main.c: 2531: }
 13094                           ;main.c: 2533: return rv;
 13095  0014A4  5023               	movf	vscp_writeAppReg@rv,w,c
 13096  0014A6  0012               	return	
 13097  0014A8                     __end_of_vscp_writeAppReg:
 13098                           	opt stack 0
 13099                           tblptru	equ	0xFF8
 13100                           tblptrh	equ	0xFF7
 13101                           tblptrl	equ	0xFF6
 13102                           tablat	equ	0xFF5
 13103                           prodh	equ	0xFF4
 13104                           prodl	equ	0xFF3
 13105                           postinc0	equ	0xFEE
 13106                           wreg	equ	0xFE8
 13107                           postdec1	equ	0xFE5
 13108                           fsr1h	equ	0xFE2
 13109                           fsr1l	equ	0xFE1
 13110                           indf2	equ	0xFDF
 13111                           postinc2	equ	0xFDE
 13112                           postdec2	equ	0xFDD
 13113                           fsr2h	equ	0xFDA
 13114                           fsr2l	equ	0xFD9
 13115                           status	equ	0xFD8
 13116                           
 13117 ;; *************** function _vscp_readRegister *****************
 13118 ;; Defined at:
 13119 ;;		line 550 in file "../../vscp_firmware/common/vscp_firmware.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;  reg             1    wreg     unsigned char 
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;  reg             1   20[COMRAM] unsigned char 
 13124 ;; Return value:  Size  Location     Type
 13125 ;;                  1    wreg      unsigned char 
 13126 ;; Registers used:
 13127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13128 ;; Tracked objects:
 13129 ;;		On entry : F/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13133 ;;      Params:         0       0       0       0       0       0       0
 13134 ;;      Locals:         1       0       0       0       0       0       0
 13135 ;;      Temps:          0       0       0       0       0       0       0
 13136 ;;      Totals:         1       0       0       0       0       0       0
 13137 ;;Total ram usage:        1 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    5
 13140 ;; This function calls:
 13141 ;;		_vscp_readAppReg
 13142 ;;		_vscp_readStdReg
 13143 ;; This function is called by:
 13144 ;;		_vscp_handleProtocolEvent
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           	psect	text45
 13149  005846                     __ptext45:
 13150                           	opt stack 0
 13151  005846                     _vscp_readRegister:
 13152                           	opt stack 24
 13153                           
 13154                           ;incstack = 0
 13155                           ;incstack = 0
 13156                           ;vscp_readRegister@reg stored from wreg
 13157  005846  CFE8 F015          	movff	wreg,vscp_readRegister@reg
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;vscp_firmware.c: 551: if (reg >= 0x80) {
 13161  00584A  0E7F               	movlw	127
 13162  00584C  6415               	cpfsgt	vscp_readRegister@reg,c
 13163  00584E  D004               	goto	l11210
 13164                           
 13165                           ; BSR set to: 0
 13166                           ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
 13167  005850  5015               	movf	vscp_readRegister@reg,w,c
 13168  005852  EC4A  F022         	call	_vscp_readStdReg
 13169  005856  D003               	goto	l1098
 13170  005858                     l11210:
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;vscp_firmware.c: 554: return vscp_readAppReg(reg);
 13174  005858  5015               	movf	vscp_readRegister@reg,w,c
 13175  00585A  EC68  F013         	call	_vscp_readAppReg
 13176  00585E                     l1098:
 13177  00585E  0012               	return	
 13178  005860                     __end_of_vscp_readRegister:
 13179                           	opt stack 0
 13180                           tblptru	equ	0xFF8
 13181                           tblptrh	equ	0xFF7
 13182                           tblptrl	equ	0xFF6
 13183                           tablat	equ	0xFF5
 13184                           prodh	equ	0xFF4
 13185                           prodl	equ	0xFF3
 13186                           postinc0	equ	0xFEE
 13187                           wreg	equ	0xFE8
 13188                           postdec1	equ	0xFE5
 13189                           fsr1h	equ	0xFE2
 13190                           fsr1l	equ	0xFE1
 13191                           indf2	equ	0xFDF
 13192                           postinc2	equ	0xFDE
 13193                           postdec2	equ	0xFDD
 13194                           fsr2h	equ	0xFDA
 13195                           fsr2l	equ	0xFD9
 13196                           status	equ	0xFD8
 13197                           
 13198 ;; *************** function _vscp_readStdReg *****************
 13199 ;; Defined at:
 13200 ;;		line 563 in file "../../vscp_firmware/common/vscp_firmware.c"
 13201 ;; Parameters:    Size  Location     Type
 13202 ;;  reg             1    wreg     unsigned char 
 13203 ;; Auto vars:     Size  Location     Type
 13204 ;;  reg             1   19[COMRAM] unsigned char 
 13205 ;;  rv              1   18[COMRAM] unsigned char 
 13206 ;; Return value:  Size  Location     Type
 13207 ;;                  1    wreg      unsigned char 
 13208 ;; Registers used:
 13209 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13210 ;; Tracked objects:
 13211 ;;		On entry : F/0
 13212 ;;		On exit  : 0/0
 13213 ;;		Unchanged: 0/0
 13214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13215 ;;      Params:         0       0       0       0       0       0       0
 13216 ;;      Locals:         2       0       0       0       0       0       0
 13217 ;;      Temps:          0       0       0       0       0       0       0
 13218 ;;      Totals:         2       0       0       0       0       0       0
 13219 ;;Total ram usage:        2 bytes
 13220 ;; Hardware stack levels used:    1
 13221 ;; Hardware stack levels required when called:    4
 13222 ;; This function calls:
 13223 ;;		_vscp_getMajorVersion
 13224 ;;		_vscp_getMinorVersion
 13225 ;;		_vscp_getSubMinorVersion
 13226 ;;		_vscp_getGUID
 13227 ;;		_vscp_getMDF_URL
 13228 ;;		_vscp_getUserID
 13229 ;;		_vscp_getManufacturerId
 13230 ;;		_vscp_getBootLoaderAlgorithm
 13231 ;;		_vscp_getBufferSize
 13232 ;;		_vscp_getRegisterPagesUsed
 13233 ;; This function is called by:
 13234 ;;		_vscp_readRegister
 13235 ;;		_vscp_handleProtocolEvent
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           	psect	text46
 13240  004494                     __ptext46:
 13241                           	opt stack 0
 13242  004494                     _vscp_readStdReg:
 13243                           	opt stack 25
 13244                           
 13245                           ;incstack = 0
 13246                           ;incstack = 0
 13247                           ;vscp_readStdReg@reg stored from wreg
 13248  004494  CFE8 F014          	movff	wreg,vscp_readStdReg@reg
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;vscp_firmware.c: 566: if (0x80 == reg) {
 13252                           
 13253                           ; BSR set to: 0
 13254  004498  5014               	movf	vscp_readStdReg@reg,w,c
 13255  00449A  0A80               	xorlw	128
 13256  00449C  E104               	bnz	l11220
 13257                           
 13258                           ; BSR set to: 0
 13259                           ;vscp_firmware.c: 569: rv = vscp_alarmstatus;
 13260  00449E  C04C  F013         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13261                           
 13262                           ;vscp_firmware.c: 570: vscp_alarmstatus = 0x00;
 13263  0044A2  6A4C               	clrf	_vscp_alarmstatus,c
 13264                           
 13265                           ;vscp_firmware.c: 572: }
 13266  0044A4  D067               	goto	l11286
 13267  0044A6                     l11220:
 13268                           
 13269                           ; BSR set to: 0
 13270                           ;vscp_firmware.c: 573: else if (0x81 == reg) {
 13271  0044A6  5014               	movf	vscp_readStdReg@reg,w,c
 13272  0044A8  0A81               	xorlw	129
 13273  0044AA  E102               	bnz	l11224
 13274                           
 13275                           ; BSR set to: 0
 13276                           ;vscp_firmware.c: 576: rv = 1;
 13277  0044AC  0E01               	movlw	1
 13278  0044AE  D061               	goto	L113
 13279  0044B0                     l11224:
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;vscp_firmware.c: 579: else if (0x82 == reg) {
 13283  0044B0  5014               	movf	vscp_readStdReg@reg,w,c
 13284  0044B2  0A82               	xorlw	130
 13285  0044B4  E102               	bnz	l11228
 13286                           
 13287                           ; BSR set to: 0
 13288                           ;vscp_firmware.c: 582: rv = 5;
 13289  0044B6  0E05               	movlw	5
 13290  0044B8  D05C               	goto	L113
 13291  0044BA                     l11228:
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;vscp_firmware.c: 585: else if (0x83 == reg) {
 13295  0044BA  5014               	movf	vscp_readStdReg@reg,w,c
 13296  0044BC  0A83               	xorlw	131
 13297  0044BE  E102               	bnz	l11232
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;vscp_firmware.c: 588: rv = 0;
 13301  0044C0  6A13               	clrf	vscp_readStdReg@rv,c
 13302                           
 13303                           ;vscp_firmware.c: 590: }
 13304  0044C2  D058               	goto	l11286
 13305  0044C4                     l11232:
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;vscp_firmware.c: 591: else if (0x94 == reg) {
 13309  0044C4  5014               	movf	vscp_readStdReg@reg,w,c
 13310  0044C6  0A94               	xorlw	148
 13311  0044C8  E103               	bnz	l11236
 13312                           
 13313                           ; BSR set to: 0
 13314                           ;vscp_firmware.c: 594: rv = vscp_getMajorVersion();
 13315  0044CA  ECF6  F02C         	call	_vscp_getMajorVersion	;wreg free
 13316  0044CE  D051               	goto	L113
 13317  0044D0                     l11236:
 13318                           
 13319                           ; BSR set to: 0
 13320                           ;vscp_firmware.c: 597: else if (0x95 == reg) {
 13321  0044D0  5014               	movf	vscp_readStdReg@reg,w,c
 13322  0044D2  0A95               	xorlw	149
 13323  0044D4  E103               	bnz	l11240
 13324                           
 13325                           ; BSR set to: 0
 13326                           ;vscp_firmware.c: 600: rv = vscp_getMinorVersion();
 13327  0044D6  ECF5  F02C         	call	_vscp_getMinorVersion	;wreg free
 13328  0044DA  D04B               	goto	L113
 13329  0044DC                     l11240:
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;vscp_firmware.c: 603: else if (0x96 == reg) {
 13333  0044DC  5014               	movf	vscp_readStdReg@reg,w,c
 13334  0044DE  0A96               	xorlw	150
 13335  0044E0  E103               	bnz	l11244
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;vscp_firmware.c: 606: rv = vscp_getSubMinorVersion();
 13339  0044E2  ECF4  F02C         	call	_vscp_getSubMinorVersion	;wreg free
 13340  0044E6  D045               	goto	L113
 13341  0044E8                     l11244:
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;vscp_firmware.c: 609: else if (reg < 0x89) {
 13345  0044E8  0E89               	movlw	137
 13346  0044EA  6014               	cpfslt	vscp_readStdReg@reg,c
 13347  0044EC  D005               	goto	l11248
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;vscp_firmware.c: 612: rv = vscp_getUserID(reg - 0x84);
 13351  0044EE  5014               	movf	vscp_readStdReg@reg,w,c
 13352  0044F0  0F7C               	addlw	124
 13353  0044F2  EC77  F02C         	call	_vscp_getUserID
 13354  0044F6  D03D               	goto	L113
 13355  0044F8                     l11248:
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;vscp_firmware.c: 615: else if ((reg > 0x88) &&
 13359                           ;vscp_firmware.c: 616: (reg < 0x91)) {
 13360  0044F8  0E88               	movlw	136
 13361  0044FA  6414               	cpfsgt	vscp_readStdReg@reg,c
 13362  0044FC  D008               	goto	l11254
 13363                           
 13364                           ; BSR set to: 0
 13365  0044FE  0E91               	movlw	145
 13366  004500  6014               	cpfslt	vscp_readStdReg@reg,c
 13367  004502  D005               	goto	l11254
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;vscp_firmware.c: 619: rv = vscp_getManufacturerId(reg - 0x89);
 13371  004504  5014               	movf	vscp_readStdReg@reg,w,c
 13372  004506  0F77               	addlw	119
 13373  004508  EC6D  F02C         	call	_vscp_getManufacturerId
 13374  00450C  D032               	goto	L113
 13375  00450E                     l11254:
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;vscp_firmware.c: 622: else if (0x91 == reg) {
 13379  00450E  5014               	movf	vscp_readStdReg@reg,w,c
 13380  004510  0A91               	xorlw	145
 13381  004512  E103               	bnz	l11258
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;vscp_firmware.c: 625: rv = vscp_nickname;
 13385  004514  C0B9  F013         	movff	_vscp_nickname,vscp_readStdReg@rv
 13386                           
 13387                           ;vscp_firmware.c: 627: }
 13388  004518  D02D               	goto	l11286
 13389  00451A                     l11258:
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;vscp_firmware.c: 628: else if (0x93 == reg) {
 13393  00451A  5014               	movf	vscp_readStdReg@reg,w,c
 13394  00451C  0A93               	xorlw	147
 13395  00451E  E103               	bnz	l11262
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;vscp_firmware.c: 631: rv = (vscp_page_select & 0xff);
 13399  004520  C046  F013         	movff	_vscp_page_select,vscp_readStdReg@rv
 13400                           
 13401                           ;vscp_firmware.c: 633: }
 13402  004524  D027               	goto	l11286
 13403  004526                     l11262:
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;vscp_firmware.c: 635: else if (0x92 == reg) {
 13407  004526  5014               	movf	vscp_readStdReg@reg,w,c
 13408  004528  0A92               	xorlw	146
 13409  00452A  E102               	bnz	l11266
 13410                           
 13411                           ; BSR set to: 0
 13412                           ;vscp_firmware.c: 638: rv = (vscp_page_select >> 8) & 0xff;
 13413  00452C  5047               	movf	_vscp_page_select+1,w,c
 13414  00452E  D021               	goto	L113
 13415  004530                     l11266:
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;vscp_firmware.c: 641: else if (0x97 == reg) {
 13419  004530  5014               	movf	vscp_readStdReg@reg,w,c
 13420  004532  0A97               	xorlw	151
 13421  004534  E103               	bnz	l11270
 13422                           
 13423                           ; BSR set to: 0
 13424                           ;vscp_firmware.c: 643: rv = vscp_getBootLoaderAlgorithm();
 13425  004536  ECF3  F02C         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13426  00453A  D01B               	goto	L113
 13427  00453C                     l11270:
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;vscp_firmware.c: 645: else if (0x98 == reg) {
 13431  00453C  5014               	movf	vscp_readStdReg@reg,w,c
 13432  00453E  0A98               	xorlw	152
 13433  004540  E103               	bnz	l11274
 13434                           
 13435                           ; BSR set to: 0
 13436                           ;vscp_firmware.c: 647: rv = vscp_getBufferSize();
 13437  004542  ECF2  F02C         	call	_vscp_getBufferSize	;wreg free
 13438  004546  D015               	goto	L113
 13439  004548                     l11274:
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;vscp_firmware.c: 649: else if (0x99 == reg) {
 13443  004548  5014               	movf	vscp_readStdReg@reg,w,c
 13444  00454A  0A99               	xorlw	153
 13445  00454C  E103               	bnz	l11278
 13446                           
 13447                           ; BSR set to: 0
 13448                           ;vscp_firmware.c: 651: rv = vscp_getRegisterPagesUsed();
 13449  00454E  ECF1  F02C         	call	_vscp_getRegisterPagesUsed	;wreg free
 13450  004552  D00F               	goto	L113
 13451  004554                     l11278:
 13452                           
 13453                           ; BSR set to: 0
 13454                           ;vscp_firmware.c: 653: else if ((reg > (0xD0 - 1)) &&
 13455                           ;vscp_firmware.c: 654: (reg < 0xE0)) {
 13456  004554  0ECF               	movlw	207
 13457  004556  6414               	cpfsgt	vscp_readStdReg@reg,c
 13458  004558  D008               	goto	l11284
 13459                           
 13460                           ; BSR set to: 0
 13461  00455A  0EE0               	movlw	224
 13462  00455C  6014               	cpfslt	vscp_readStdReg@reg,c
 13463  00455E  D005               	goto	l11284
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;vscp_firmware.c: 657: rv = vscp_getGUID(reg - 0xD0);
 13467  004560  5014               	movf	vscp_readStdReg@reg,w,c
 13468  004562  0F30               	addlw	48
 13469  004564  EC81  F02C         	call	_vscp_getGUID
 13470  004568  D004               	goto	L113
 13471  00456A                     l11284:
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;vscp_firmware.c: 660: else {
 13475                           ;vscp_firmware.c: 663: rv = vscp_getMDF_URL(reg - 0xE0);
 13476  00456A  5014               	movf	vscp_readStdReg@reg,w,c
 13477  00456C  0F20               	addlw	32
 13478  00456E  EC55  F02C         	call	_vscp_getMDF_URL
 13479  004572                     L113:
 13480  004572  6E13               	movwf	vscp_readStdReg@rv,c
 13481  004574                     l11286:
 13482                           
 13483                           ;vscp_firmware.c: 665: }
 13484                           ;vscp_firmware.c: 667: return rv;
 13485  004574  5013               	movf	vscp_readStdReg@rv,w,c
 13486  004576  0012               	return	
 13487  004578                     __end_of_vscp_readStdReg:
 13488                           	opt stack 0
 13489                           tblptru	equ	0xFF8
 13490                           tblptrh	equ	0xFF7
 13491                           tblptrl	equ	0xFF6
 13492                           tablat	equ	0xFF5
 13493                           prodh	equ	0xFF4
 13494                           prodl	equ	0xFF3
 13495                           postinc0	equ	0xFEE
 13496                           wreg	equ	0xFE8
 13497                           postdec1	equ	0xFE5
 13498                           fsr1h	equ	0xFE2
 13499                           fsr1l	equ	0xFE1
 13500                           indf2	equ	0xFDF
 13501                           postinc2	equ	0xFDE
 13502                           postdec2	equ	0xFDD
 13503                           fsr2h	equ	0xFDA
 13504                           fsr2l	equ	0xFD9
 13505                           status	equ	0xFD8
 13506                           
 13507 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13508 ;; Defined at:
 13509 ;;		line 2705 in file "../main.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;		None
 13512 ;; Auto vars:     Size  Location     Type
 13513 ;;		None
 13514 ;; Return value:  Size  Location     Type
 13515 ;;                  1    wreg      unsigned char 
 13516 ;; Registers used:
 13517 ;;		wreg
 13518 ;; Tracked objects:
 13519 ;;		On entry : F/0
 13520 ;;		On exit  : F/0
 13521 ;;		Unchanged: F/0
 13522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13523 ;;      Params:         0       0       0       0       0       0       0
 13524 ;;      Locals:         0       0       0       0       0       0       0
 13525 ;;      Temps:          0       0       0       0       0       0       0
 13526 ;;      Totals:         0       0       0       0       0       0       0
 13527 ;;Total ram usage:        0 bytes
 13528 ;; Hardware stack levels used:    1
 13529 ;; Hardware stack levels required when called:    2
 13530 ;; This function calls:
 13531 ;;		Nothing
 13532 ;; This function is called by:
 13533 ;;		_vscp_readStdReg
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           	psect	text47
 13538  0059E2                     __ptext47:
 13539                           	opt stack 0
 13540  0059E2                     _vscp_getRegisterPagesUsed:
 13541                           	opt stack 26
 13542                           
 13543                           ; BSR set to: 0
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;main.c: 2706: return 1;
 13547                           
 13548                           ;incstack = 0
 13549                           ;incstack = 0
 13550  0059E2  0C01               	retlw	1
 13551  0059E4                     __end_of_vscp_getRegisterPagesUsed:
 13552                           	opt stack 0
 13553                           tblptru	equ	0xFF8
 13554                           tblptrh	equ	0xFF7
 13555                           tblptrl	equ	0xFF6
 13556                           tablat	equ	0xFF5
 13557                           prodh	equ	0xFF4
 13558                           prodl	equ	0xFF3
 13559                           postinc0	equ	0xFEE
 13560                           wreg	equ	0xFE8
 13561                           postdec1	equ	0xFE5
 13562                           fsr1h	equ	0xFE2
 13563                           fsr1l	equ	0xFE1
 13564                           indf2	equ	0xFDF
 13565                           postinc2	equ	0xFDE
 13566                           postdec2	equ	0xFDD
 13567                           fsr2h	equ	0xFDA
 13568                           fsr2l	equ	0xFD9
 13569                           status	equ	0xFD8
 13570                           
 13571 ;; *************** function _vscp_getBufferSize *****************
 13572 ;; Defined at:
 13573 ;;		line 2658 in file "../main.c"
 13574 ;; Parameters:    Size  Location     Type
 13575 ;;		None
 13576 ;; Auto vars:     Size  Location     Type
 13577 ;;		None
 13578 ;; Return value:  Size  Location     Type
 13579 ;;                  1    wreg      unsigned char 
 13580 ;; Registers used:
 13581 ;;		wreg
 13582 ;; Tracked objects:
 13583 ;;		On entry : F/0
 13584 ;;		On exit  : F/0
 13585 ;;		Unchanged: F/0
 13586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13587 ;;      Params:         0       0       0       0       0       0       0
 13588 ;;      Locals:         0       0       0       0       0       0       0
 13589 ;;      Temps:          0       0       0       0       0       0       0
 13590 ;;      Totals:         0       0       0       0       0       0       0
 13591 ;;Total ram usage:        0 bytes
 13592 ;; Hardware stack levels used:    1
 13593 ;; Hardware stack levels required when called:    2
 13594 ;; This function calls:
 13595 ;;		Nothing
 13596 ;; This function is called by:
 13597 ;;		_vscp_readStdReg
 13598 ;; This function uses a non-reentrant model
 13599 ;;
 13600                           
 13601                           	psect	text48
 13602  0059E4                     __ptext48:
 13603                           	opt stack 0
 13604  0059E4                     _vscp_getBufferSize:
 13605                           	opt stack 26
 13606                           
 13607                           ; BSR set to: 0
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;main.c: 2659: return 8;
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;incstack = 0
 13614                           ;incstack = 0
 13615  0059E4  0C08               	retlw	8
 13616  0059E6                     __end_of_vscp_getBufferSize:
 13617                           	opt stack 0
 13618                           tblptru	equ	0xFF8
 13619                           tblptrh	equ	0xFF7
 13620                           tblptrl	equ	0xFF6
 13621                           tablat	equ	0xFF5
 13622                           prodh	equ	0xFF4
 13623                           prodl	equ	0xFF3
 13624                           postinc0	equ	0xFEE
 13625                           wreg	equ	0xFE8
 13626                           postdec1	equ	0xFE5
 13627                           fsr1h	equ	0xFE2
 13628                           fsr1l	equ	0xFE1
 13629                           indf2	equ	0xFDF
 13630                           postinc2	equ	0xFDE
 13631                           postdec2	equ	0xFDD
 13632                           fsr2h	equ	0xFDA
 13633                           fsr2l	equ	0xFD9
 13634                           status	equ	0xFD8
 13635                           
 13636 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13637 ;; Defined at:
 13638 ;;		line 2649 in file "../main.c"
 13639 ;; Parameters:    Size  Location     Type
 13640 ;;		None
 13641 ;; Auto vars:     Size  Location     Type
 13642 ;;		None
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      unsigned char 
 13645 ;; Registers used:
 13646 ;;		wreg
 13647 ;; Tracked objects:
 13648 ;;		On entry : F/0
 13649 ;;		On exit  : F/0
 13650 ;;		Unchanged: F/0
 13651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13652 ;;      Params:         0       0       0       0       0       0       0
 13653 ;;      Locals:         0       0       0       0       0       0       0
 13654 ;;      Temps:          0       0       0       0       0       0       0
 13655 ;;      Totals:         0       0       0       0       0       0       0
 13656 ;;Total ram usage:        0 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:    2
 13659 ;; This function calls:
 13660 ;;		Nothing
 13661 ;; This function is called by:
 13662 ;;		_vscp_readStdReg
 13663 ;; This function uses a non-reentrant model
 13664 ;;
 13665                           
 13666                           	psect	text49
 13667  0059E6                     __ptext49:
 13668                           	opt stack 0
 13669  0059E6                     _vscp_getBootLoaderAlgorithm:
 13670                           	opt stack 26
 13671                           
 13672                           ; BSR set to: 0
 13673                           
 13674                           ; BSR set to: 0
 13675                           ;main.c: 2650: return 0x01;
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;incstack = 0
 13679                           ;incstack = 0
 13680  0059E6  0C01               	retlw	1
 13681  0059E8                     __end_of_vscp_getBootLoaderAlgorithm:
 13682                           	opt stack 0
 13683                           tblptru	equ	0xFF8
 13684                           tblptrh	equ	0xFF7
 13685                           tblptrl	equ	0xFF6
 13686                           tablat	equ	0xFF5
 13687                           prodh	equ	0xFF4
 13688                           prodl	equ	0xFF3
 13689                           postinc0	equ	0xFEE
 13690                           wreg	equ	0xFE8
 13691                           postdec1	equ	0xFE5
 13692                           fsr1h	equ	0xFE2
 13693                           fsr1l	equ	0xFE1
 13694                           indf2	equ	0xFDF
 13695                           postinc2	equ	0xFDE
 13696                           postdec2	equ	0xFDD
 13697                           fsr2h	equ	0xFDA
 13698                           fsr2l	equ	0xFD9
 13699                           status	equ	0xFD8
 13700                           
 13701 ;; *************** function _vscp_getManufacturerId *****************
 13702 ;; Defined at:
 13703 ;;		line 2629 in file "../main.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;  idx             1    wreg     unsigned char 
 13706 ;; Auto vars:     Size  Location     Type
 13707 ;;  idx             1   17[COMRAM] unsigned char 
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  1    wreg      unsigned char 
 13710 ;; Registers used:
 13711 ;;		wreg, status,2, status,0, cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 0/0
 13714 ;;		On exit  : 0/0
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13717 ;;      Params:         0       0       0       0       0       0       0
 13718 ;;      Locals:         1       0       0       0       0       0       0
 13719 ;;      Temps:          0       0       0       0       0       0       0
 13720 ;;      Totals:         1       0       0       0       0       0       0
 13721 ;;Total ram usage:        1 bytes
 13722 ;; Hardware stack levels used:    1
 13723 ;; Hardware stack levels required when called:    3
 13724 ;; This function calls:
 13725 ;;		_readEEPROM
 13726 ;; This function is called by:
 13727 ;;		_vscp_readStdReg
 13728 ;;		_vscp_writeStdReg
 13729 ;; This function uses a non-reentrant model
 13730 ;;
 13731                           
 13732                           	psect	text50
 13733  0058DA                     __ptext50:
 13734                           	opt stack 0
 13735  0058DA                     _vscp_getManufacturerId:
 13736                           	opt stack 25
 13737                           
 13738                           ; BSR set to: 0
 13739                           ;incstack = 0
 13740                           ;incstack = 0
 13741                           ;vscp_getManufacturerId@idx stored from wreg
 13742  0058DA  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13743                           
 13744                           ;main.c: 2630: return readEEPROM(0x09 + idx);
 13745  0058DE  0E09               	movlw	9
 13746  0058E0  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13747  0058E2  6E0E               	movwf	?_readEEPROM,c
 13748  0058E4  6A0F               	clrf	?_readEEPROM+1,c
 13749  0058E6  0E00               	movlw	0
 13750  0058E8  220F               	addwfc	?_readEEPROM+1,f,c
 13751  0058EA  EF9D  F02C         	goto	_readEEPROM	;wreg free
 13752  0058EE                     __end_of_vscp_getManufacturerId:
 13753                           	opt stack 0
 13754                           tblptru	equ	0xFF8
 13755                           tblptrh	equ	0xFF7
 13756                           tblptrl	equ	0xFF6
 13757                           tablat	equ	0xFF5
 13758                           prodh	equ	0xFF4
 13759                           prodl	equ	0xFF3
 13760                           postinc0	equ	0xFEE
 13761                           wreg	equ	0xFE8
 13762                           postdec1	equ	0xFE5
 13763                           fsr1h	equ	0xFE2
 13764                           fsr1l	equ	0xFE1
 13765                           indf2	equ	0xFDF
 13766                           postinc2	equ	0xFDE
 13767                           postdec2	equ	0xFDD
 13768                           fsr2h	equ	0xFDA
 13769                           fsr2l	equ	0xFD9
 13770                           status	equ	0xFD8
 13771                           
 13772 ;; *************** function _vscp_getUserID *****************
 13773 ;; Defined at:
 13774 ;;		line 2609 in file "../main.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  idx             1    wreg     unsigned char 
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;  idx             1   17[COMRAM] unsigned char 
 13779 ;; Return value:  Size  Location     Type
 13780 ;;                  1    wreg      unsigned char 
 13781 ;; Registers used:
 13782 ;;		wreg, status,2, status,0, cstack
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13788 ;;      Params:         0       0       0       0       0       0       0
 13789 ;;      Locals:         1       0       0       0       0       0       0
 13790 ;;      Temps:          0       0       0       0       0       0       0
 13791 ;;      Totals:         1       0       0       0       0       0       0
 13792 ;;Total ram usage:        1 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    3
 13795 ;; This function calls:
 13796 ;;		_readEEPROM
 13797 ;; This function is called by:
 13798 ;;		_vscp_readStdReg
 13799 ;;		_vscp_writeStdReg
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           	psect	text51
 13804  0058EE                     __ptext51:
 13805                           	opt stack 0
 13806  0058EE                     _vscp_getUserID:
 13807                           	opt stack 25
 13808                           
 13809                           ;incstack = 0
 13810                           ;incstack = 0
 13811                           ;vscp_getUserID@idx stored from wreg
 13812  0058EE  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13813                           
 13814                           ;main.c: 2610: return readEEPROM(0x04 + idx);
 13815  0058F2  0E04               	movlw	4
 13816  0058F4  2412               	addwf	vscp_getUserID@idx,w,c
 13817  0058F6  6E0E               	movwf	?_readEEPROM,c
 13818  0058F8  6A0F               	clrf	?_readEEPROM+1,c
 13819  0058FA  0E00               	movlw	0
 13820  0058FC  220F               	addwfc	?_readEEPROM+1,f,c
 13821  0058FE  EF9D  F02C         	goto	_readEEPROM	;wreg free
 13822  005902                     __end_of_vscp_getUserID:
 13823                           	opt stack 0
 13824                           tblptru	equ	0xFF8
 13825                           tblptrh	equ	0xFF7
 13826                           tblptrl	equ	0xFF6
 13827                           tablat	equ	0xFF5
 13828                           prodh	equ	0xFF4
 13829                           prodl	equ	0xFF3
 13830                           postinc0	equ	0xFEE
 13831                           wreg	equ	0xFE8
 13832                           postdec1	equ	0xFE5
 13833                           fsr1h	equ	0xFE2
 13834                           fsr1l	equ	0xFE1
 13835                           indf2	equ	0xFDF
 13836                           postinc2	equ	0xFDE
 13837                           postdec2	equ	0xFDD
 13838                           fsr2h	equ	0xFDA
 13839                           fsr2l	equ	0xFD9
 13840                           status	equ	0xFD8
 13841                           
 13842 ;; *************** function _vscp_getMDF_URL *****************
 13843 ;; Defined at:
 13844 ;;		line 2600 in file "../main.c"
 13845 ;; Parameters:    Size  Location     Type
 13846 ;;  idx             1    wreg     unsigned char 
 13847 ;; Auto vars:     Size  Location     Type
 13848 ;;  idx             1   14[COMRAM] unsigned char 
 13849 ;; Return value:  Size  Location     Type
 13850 ;;                  1    wreg      unsigned char 
 13851 ;; Registers used:
 13852 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13853 ;; Tracked objects:
 13854 ;;		On entry : F/0
 13855 ;;		On exit  : F/0
 13856 ;;		Unchanged: F/0
 13857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13858 ;;      Params:         0       0       0       0       0       0       0
 13859 ;;      Locals:         1       0       0       0       0       0       0
 13860 ;;      Temps:          1       0       0       0       0       0       0
 13861 ;;      Totals:         2       0       0       0       0       0       0
 13862 ;;Total ram usage:        2 bytes
 13863 ;; Hardware stack levels used:    1
 13864 ;; Hardware stack levels required when called:    2
 13865 ;; This function calls:
 13866 ;;		Nothing
 13867 ;; This function is called by:
 13868 ;;		_vscp_readStdReg
 13869 ;;		_vscp_handleProtocolEvent
 13870 ;; This function uses a non-reentrant model
 13871 ;;
 13872                           
 13873                           	psect	text52
 13874  0058AA                     __ptext52:
 13875                           	opt stack 0
 13876  0058AA                     _vscp_getMDF_URL:
 13877                           	opt stack 26
 13878                           
 13879                           ;incstack = 0
 13880                           ;incstack = 0
 13881                           ;vscp_getMDF_URL@idx stored from wreg
 13882  0058AA  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13883                           
 13884                           ; BSR set to: 0
 13885                           ;main.c: 2601: return vscp_deviceURL[ idx ];
 13886  0058AE  500F               	movf	vscp_getMDF_URL@idx,w,c
 13887  0058B0  0F00               	addlw	low _vscp_deviceURL
 13888  0058B2  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13889  0058B4  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13890  0058B8  0E06               	movlw	high __smallconst
 13891  0058BA  6EF7               	movwf	tblptrh,c
 13892  0058BC  0008               	tblrd		*
 13893  0058BE  50F5               	movf	tablat,w,c
 13894                           
 13895                           ; BSR set to: 0
 13896  0058C0  0012               	return	
 13897  0058C2                     __end_of_vscp_getMDF_URL:
 13898                           	opt stack 0
 13899                           tblptru	equ	0xFF8
 13900                           tblptrh	equ	0xFF7
 13901                           tblptrl	equ	0xFF6
 13902                           tablat	equ	0xFF5
 13903                           prodh	equ	0xFF4
 13904                           prodl	equ	0xFF3
 13905                           postinc0	equ	0xFEE
 13906                           wreg	equ	0xFE8
 13907                           postdec1	equ	0xFE5
 13908                           fsr1h	equ	0xFE2
 13909                           fsr1l	equ	0xFE1
 13910                           indf2	equ	0xFDF
 13911                           postinc2	equ	0xFDE
 13912                           postdec2	equ	0xFDD
 13913                           fsr2h	equ	0xFDA
 13914                           fsr2l	equ	0xFD9
 13915                           status	equ	0xFD8
 13916                           
 13917 ;; *************** function _vscp_getGUID *****************
 13918 ;; Defined at:
 13919 ;;		line 2577 in file "../main.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;  idx             1    wreg     unsigned char 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;  idx             1   17[COMRAM] unsigned char 
 13924 ;; Return value:  Size  Location     Type
 13925 ;;                  1    wreg      unsigned char 
 13926 ;; Registers used:
 13927 ;;		wreg, status,2, status,0, cstack
 13928 ;; Tracked objects:
 13929 ;;		On entry : 0/0
 13930 ;;		On exit  : 0/0
 13931 ;;		Unchanged: 0/0
 13932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13933 ;;      Params:         0       0       0       0       0       0       0
 13934 ;;      Locals:         1       0       0       0       0       0       0
 13935 ;;      Temps:          0       0       0       0       0       0       0
 13936 ;;      Totals:         1       0       0       0       0       0       0
 13937 ;;Total ram usage:        1 bytes
 13938 ;; Hardware stack levels used:    1
 13939 ;; Hardware stack levels required when called:    3
 13940 ;; This function calls:
 13941 ;;		_readEEPROM
 13942 ;; This function is called by:
 13943 ;;		_vscp_readStdReg
 13944 ;;		_vscp_writeStdReg
 13945 ;;		_vscp_handleProtocolEvent
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           	psect	text53
 13950  005902                     __ptext53:
 13951                           	opt stack 0
 13952  005902                     _vscp_getGUID:
 13953                           	opt stack 25
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;incstack = 0
 13957                           ;incstack = 0
 13958                           ;vscp_getGUID@idx stored from wreg
 13959  005902  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13960                           
 13961                           ;main.c: 2578: return readEEPROM(0x11 + idx);
 13962  005906  0E11               	movlw	17
 13963  005908  2412               	addwf	vscp_getGUID@idx,w,c
 13964  00590A  6E0E               	movwf	?_readEEPROM,c
 13965  00590C  6A0F               	clrf	?_readEEPROM+1,c
 13966  00590E  0E00               	movlw	0
 13967  005910  220F               	addwfc	?_readEEPROM+1,f,c
 13968  005912  EF9D  F02C         	goto	_readEEPROM	;wreg free
 13969  005916                     __end_of_vscp_getGUID:
 13970                           	opt stack 0
 13971                           tblptru	equ	0xFF8
 13972                           tblptrh	equ	0xFF7
 13973                           tblptrl	equ	0xFF6
 13974                           tablat	equ	0xFF5
 13975                           prodh	equ	0xFF4
 13976                           prodl	equ	0xFF3
 13977                           postinc0	equ	0xFEE
 13978                           wreg	equ	0xFE8
 13979                           postdec1	equ	0xFE5
 13980                           fsr1h	equ	0xFE2
 13981                           fsr1l	equ	0xFE1
 13982                           indf2	equ	0xFDF
 13983                           postinc2	equ	0xFDE
 13984                           postdec2	equ	0xFDD
 13985                           fsr2h	equ	0xFDA
 13986                           fsr2l	equ	0xFD9
 13987                           status	equ	0xFD8
 13988                           
 13989 ;; *************** function _vscp_getSubMinorVersion *****************
 13990 ;; Defined at:
 13991 ;;		line 2566 in file "../main.c"
 13992 ;; Parameters:    Size  Location     Type
 13993 ;;		None
 13994 ;; Auto vars:     Size  Location     Type
 13995 ;;		None
 13996 ;; Return value:  Size  Location     Type
 13997 ;;                  1    wreg      unsigned char 
 13998 ;; Registers used:
 13999 ;;		wreg
 14000 ;; Tracked objects:
 14001 ;;		On entry : F/0
 14002 ;;		On exit  : F/0
 14003 ;;		Unchanged: F/0
 14004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14005 ;;      Params:         0       0       0       0       0       0       0
 14006 ;;      Locals:         0       0       0       0       0       0       0
 14007 ;;      Temps:          0       0       0       0       0       0       0
 14008 ;;      Totals:         0       0       0       0       0       0       0
 14009 ;;Total ram usage:        0 bytes
 14010 ;; Hardware stack levels used:    1
 14011 ;; Hardware stack levels required when called:    2
 14012 ;; This function calls:
 14013 ;;		Nothing
 14014 ;; This function is called by:
 14015 ;;		_vscp_readStdReg
 14016 ;; This function uses a non-reentrant model
 14017 ;;
 14018                           
 14019                           	psect	text54
 14020  0059E8                     __ptext54:
 14021                           	opt stack 0
 14022  0059E8                     _vscp_getSubMinorVersion:
 14023                           	opt stack 26
 14024                           
 14025                           ; BSR set to: 0
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;main.c: 2567: return 1;
 14029                           
 14030                           ;incstack = 0
 14031                           ;incstack = 0
 14032  0059E8  0C01               	retlw	1
 14033  0059EA                     __end_of_vscp_getSubMinorVersion:
 14034                           	opt stack 0
 14035                           tblptru	equ	0xFF8
 14036                           tblptrh	equ	0xFF7
 14037                           tblptrl	equ	0xFF6
 14038                           tablat	equ	0xFF5
 14039                           prodh	equ	0xFF4
 14040                           prodl	equ	0xFF3
 14041                           postinc0	equ	0xFEE
 14042                           wreg	equ	0xFE8
 14043                           postdec1	equ	0xFE5
 14044                           fsr1h	equ	0xFE2
 14045                           fsr1l	equ	0xFE1
 14046                           indf2	equ	0xFDF
 14047                           postinc2	equ	0xFDE
 14048                           postdec2	equ	0xFDD
 14049                           fsr2h	equ	0xFDA
 14050                           fsr2l	equ	0xFD9
 14051                           status	equ	0xFD8
 14052                           
 14053 ;; *************** function _vscp_getMinorVersion *****************
 14054 ;; Defined at:
 14055 ;;		line 2557 in file "../main.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;		None
 14058 ;; Auto vars:     Size  Location     Type
 14059 ;;		None
 14060 ;; Return value:  Size  Location     Type
 14061 ;;                  1    wreg      unsigned char 
 14062 ;; Registers used:
 14063 ;;		wreg
 14064 ;; Tracked objects:
 14065 ;;		On entry : F/0
 14066 ;;		On exit  : F/0
 14067 ;;		Unchanged: F/0
 14068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14069 ;;      Params:         0       0       0       0       0       0       0
 14070 ;;      Locals:         0       0       0       0       0       0       0
 14071 ;;      Temps:          0       0       0       0       0       0       0
 14072 ;;      Totals:         0       0       0       0       0       0       0
 14073 ;;Total ram usage:        0 bytes
 14074 ;; Hardware stack levels used:    1
 14075 ;; Hardware stack levels required when called:    2
 14076 ;; This function calls:
 14077 ;;		Nothing
 14078 ;; This function is called by:
 14079 ;;		_vscp_readStdReg
 14080 ;; This function uses a non-reentrant model
 14081 ;;
 14082                           
 14083                           	psect	text55
 14084  0059EA                     __ptext55:
 14085                           	opt stack 0
 14086  0059EA                     _vscp_getMinorVersion:
 14087                           	opt stack 26
 14088                           
 14089                           ; BSR set to: 0
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;main.c: 2558: return 0;
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;incstack = 0
 14096                           ;incstack = 0
 14097  0059EA  0C00               	retlw	0
 14098  0059EC                     __end_of_vscp_getMinorVersion:
 14099                           	opt stack 0
 14100                           tblptru	equ	0xFF8
 14101                           tblptrh	equ	0xFF7
 14102                           tblptrl	equ	0xFF6
 14103                           tablat	equ	0xFF5
 14104                           prodh	equ	0xFF4
 14105                           prodl	equ	0xFF3
 14106                           postinc0	equ	0xFEE
 14107                           wreg	equ	0xFE8
 14108                           postdec1	equ	0xFE5
 14109                           fsr1h	equ	0xFE2
 14110                           fsr1l	equ	0xFE1
 14111                           indf2	equ	0xFDF
 14112                           postinc2	equ	0xFDE
 14113                           postdec2	equ	0xFDD
 14114                           fsr2h	equ	0xFDA
 14115                           fsr2l	equ	0xFD9
 14116                           status	equ	0xFD8
 14117                           
 14118 ;; *************** function _vscp_getMajorVersion *****************
 14119 ;; Defined at:
 14120 ;;		line 2548 in file "../main.c"
 14121 ;; Parameters:    Size  Location     Type
 14122 ;;		None
 14123 ;; Auto vars:     Size  Location     Type
 14124 ;;		None
 14125 ;; Return value:  Size  Location     Type
 14126 ;;                  1    wreg      unsigned char 
 14127 ;; Registers used:
 14128 ;;		wreg
 14129 ;; Tracked objects:
 14130 ;;		On entry : F/0
 14131 ;;		On exit  : F/0
 14132 ;;		Unchanged: F/0
 14133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14134 ;;      Params:         0       0       0       0       0       0       0
 14135 ;;      Locals:         0       0       0       0       0       0       0
 14136 ;;      Temps:          0       0       0       0       0       0       0
 14137 ;;      Totals:         0       0       0       0       0       0       0
 14138 ;;Total ram usage:        0 bytes
 14139 ;; Hardware stack levels used:    1
 14140 ;; Hardware stack levels required when called:    2
 14141 ;; This function calls:
 14142 ;;		Nothing
 14143 ;; This function is called by:
 14144 ;;		_vscp_readStdReg
 14145 ;; This function uses a non-reentrant model
 14146 ;;
 14147                           
 14148                           	psect	text56
 14149  0059EC                     __ptext56:
 14150                           	opt stack 0
 14151  0059EC                     _vscp_getMajorVersion:
 14152                           	opt stack 26
 14153                           
 14154                           ; BSR set to: 0
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;main.c: 2549: return 1;
 14158                           
 14159                           ; BSR set to: 0
 14160                           ;incstack = 0
 14161                           ;incstack = 0
 14162  0059EC  0C01               	retlw	1
 14163  0059EE                     __end_of_vscp_getMajorVersion:
 14164                           	opt stack 0
 14165                           tblptru	equ	0xFF8
 14166                           tblptrh	equ	0xFF7
 14167                           tblptrl	equ	0xFF6
 14168                           tablat	equ	0xFF5
 14169                           prodh	equ	0xFF4
 14170                           prodl	equ	0xFF3
 14171                           postinc0	equ	0xFEE
 14172                           wreg	equ	0xFE8
 14173                           postdec1	equ	0xFE5
 14174                           fsr1h	equ	0xFE2
 14175                           fsr1l	equ	0xFE1
 14176                           indf2	equ	0xFDF
 14177                           postinc2	equ	0xFDE
 14178                           postdec2	equ	0xFDD
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function _vscp_newNodeOnline *****************
 14184 ;; Defined at:
 14185 ;;		line 491 in file "../../vscp_firmware/common/vscp_firmware.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;		None
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;		None
 14190 ;; Return value:  Size  Location     Type
 14191 ;;		None               void
 14192 ;; Registers used:
 14193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14194 ;; Tracked objects:
 14195 ;;		On entry : F/0
 14196 ;;		On exit  : F/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14199 ;;      Params:         0       0       0       0       0       0       0
 14200 ;;      Locals:         0       0       0       0       0       0       0
 14201 ;;      Temps:          1       0       0       0       0       0       0
 14202 ;;      Totals:         1       0       0       0       0       0       0
 14203 ;;Total ram usage:        1 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:    7
 14206 ;; This function calls:
 14207 ;;		_vscp_sendEvent
 14208 ;; This function is called by:
 14209 ;;		_vscp_handleProtocolEvent
 14210 ;; This function uses a non-reentrant model
 14211 ;;
 14212                           
 14213                           	psect	text57
 14214  00566A                     __ptext57:
 14215                           	opt stack 0
 14216  00566A                     _vscp_newNodeOnline:
 14217                           	opt stack 22
 14218                           
 14219                           ; BSR set to: 0
 14220                           ;vscp_firmware.c: 492: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 14221                           ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;incstack = 0
 14225                           ;incstack = 0
 14226  00566A  C0BC  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14227  00566E  0E0F               	movlw	15
 14228  005670  1644               	andwf	??_vscp_newNodeOnline,f,c
 14229  005672  0444               	decf	??_vscp_newNodeOnline,w,c
 14230  005674  E10E               	bnz	l1085
 14231                           
 14232                           ; BSR set to: 0
 14233  005676  51B9               	movf	_vscp_nickname& (0+255),w,b
 14234  005678  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14235  00567C  62DF               	cpfseq	indf2,c
 14236  00567E  D009               	goto	l1085
 14237                           
 14238                           ; BSR set to: 0
 14239                           ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
 14240  005680  0E80               	movlw	128
 14241  005682  6FCA               	movwf	_vscp_omsg& (0+255),b
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
 14245  005684  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
 14249  005686  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14250  005688  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14251                           
 14252                           ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
 14253  00568A  0E03               	movlw	3
 14254  00568C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14255                           
 14256                           ; BSR set to: 0
 14257                           ;vscp_firmware.c: 503: vscp_sendEvent();
 14258  00568E  EC73  F02B         	call	_vscp_sendEvent	;wreg free
 14259  005692                     l1085:
 14260                           
 14261                           ; BSR set to: 0
 14262  005692  0012               	return	
 14263  005694                     __end_of_vscp_newNodeOnline:
 14264                           	opt stack 0
 14265                           tblptru	equ	0xFF8
 14266                           tblptrh	equ	0xFF7
 14267                           tblptrl	equ	0xFF6
 14268                           tablat	equ	0xFF5
 14269                           prodh	equ	0xFF4
 14270                           prodl	equ	0xFF3
 14271                           postinc0	equ	0xFEE
 14272                           wreg	equ	0xFE8
 14273                           postdec1	equ	0xFE5
 14274                           fsr1h	equ	0xFE2
 14275                           fsr1l	equ	0xFE1
 14276                           indf2	equ	0xFDF
 14277                           postinc2	equ	0xFDE
 14278                           postdec2	equ	0xFDD
 14279                           fsr2h	equ	0xFDA
 14280                           fsr2l	equ	0xFD9
 14281                           status	equ	0xFD8
 14282                           
 14283 ;; *************** function _vscp_handleDropNickname *****************
 14284 ;; Defined at:
 14285 ;;		line 427 in file "../../vscp_firmware/common/vscp_firmware.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;		None
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;  bytes           1   17[COMRAM] unsigned char 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;		None               void
 14292 ;; Registers used:
 14293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14294 ;; Tracked objects:
 14295 ;;		On entry : F/0
 14296 ;;		On exit  : E/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14299 ;;      Params:         0       0       0       0       0       0       0
 14300 ;;      Locals:         1       0       0       0       0       0       0
 14301 ;;      Temps:          0       0       0       0       0       0       0
 14302 ;;      Totals:         1       0       0       0       0       0       0
 14303 ;;Total ram usage:        1 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    5
 14306 ;; This function calls:
 14307 ;;		_vscp_init
 14308 ;;		_vscp_writeNicknamePermanent
 14309 ;; This function is called by:
 14310 ;;		_vscp_handleProtocolEvent
 14311 ;; This function uses a non-reentrant model
 14312 ;;
 14313                           
 14314                           	psect	text58
 14315  0055E4                     __ptext58:
 14316                           	opt stack 0
 14317  0055E4                     _vscp_handleDropNickname:
 14318                           	opt stack 24
 14319                           
 14320                           ; BSR set to: 0
 14321                           ;vscp_firmware.c: 428: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14322                           
 14323                           ; BSR set to: 0
 14324                           ;incstack = 0
 14325                           ;incstack = 0
 14326  0055E4  51BC               	movf	_vscp_imsg& (0+255),w,b
 14327  0055E6  0B0F               	andlw	15
 14328  0055E8  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14329                           
 14330                           ; BSR set to: 0
 14331                           ;vscp_firmware.c: 434: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14332  0055EA  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14333  0055EC  E012               	bz	l1081
 14334                           
 14335                           ; BSR set to: 0
 14336  0055EE  51B9               	movf	_vscp_nickname& (0+255),w,b
 14337  0055F0  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14338  0055F4  62DF               	cpfseq	indf2,c
 14339  0055F6  D00D               	goto	l1081
 14340                           
 14341                           ; BSR set to: 0
 14342                           ;vscp_firmware.c: 466: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14343  0055F8  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14344  0055FA  E005               	bz	l1080
 14345                           
 14346                           ; BSR set to: 0
 14347  0055FC  0E01               	movlw	1
 14348  0055FE  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14349  005600  D008               	goto	l1081
 14350                           
 14351                           ; BSR set to: 0
 14352  005602  67C3               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14353  005604  D006               	goto	l1081
 14354  005606                     l1080:
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;vscp_firmware.c: 468: vscp_nickname = 0xff;
 14358  005606  69B9               	setf	_vscp_nickname& (0+255),b
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;vscp_firmware.c: 469: vscp_writeNicknamePermanent(0xff);
 14362  005608  0EFF               	movlw	255
 14363  00560A  ECA6  F02C         	call	_vscp_writeNicknamePermanent
 14364                           
 14365                           ;vscp_firmware.c: 470: vscp_init();
 14366  00560E  EC73  F029         	call	_vscp_init	;wreg free
 14367  005612                     l1081:
 14368  005612  0012               	return	
 14369  005614                     __end_of_vscp_handleDropNickname:
 14370                           	opt stack 0
 14371                           tblptru	equ	0xFF8
 14372                           tblptrh	equ	0xFF7
 14373                           tblptrl	equ	0xFF6
 14374                           tablat	equ	0xFF5
 14375                           prodh	equ	0xFF4
 14376                           prodl	equ	0xFF3
 14377                           postinc0	equ	0xFEE
 14378                           wreg	equ	0xFE8
 14379                           postdec1	equ	0xFE5
 14380                           fsr1h	equ	0xFE2
 14381                           fsr1l	equ	0xFE1
 14382                           indf2	equ	0xFDF
 14383                           postinc2	equ	0xFDE
 14384                           postdec2	equ	0xFDD
 14385                           fsr2h	equ	0xFDA
 14386                           fsr2l	equ	0xFD9
 14387                           status	equ	0xFD8
 14388                           
 14389 ;; *************** function _vscp_init *****************
 14390 ;; Defined at:
 14391 ;;		line 114 in file "../../vscp_firmware/common/vscp_firmware.c"
 14392 ;; Parameters:    Size  Location     Type
 14393 ;;		None
 14394 ;; Auto vars:     Size  Location     Type
 14395 ;;		None
 14396 ;; Return value:  Size  Location     Type
 14397 ;;		None               void
 14398 ;; Registers used:
 14399 ;;		wreg, status,2, cstack
 14400 ;; Tracked objects:
 14401 ;;		On entry : 0/1
 14402 ;;		On exit  : F/1
 14403 ;;		Unchanged: 0/0
 14404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14405 ;;      Params:         0       0       0       0       0       0       0
 14406 ;;      Locals:         0       0       0       0       0       0       0
 14407 ;;      Temps:          0       0       0       0       0       0       0
 14408 ;;      Totals:         0       0       0       0       0       0       0
 14409 ;;Total ram usage:        0 bytes
 14410 ;; Hardware stack levels used:    1
 14411 ;; Hardware stack levels required when called:    4
 14412 ;; This function calls:
 14413 ;;		_vscp_readNicknamePermanent
 14414 ;; This function is called by:
 14415 ;;		_main
 14416 ;;		_vscp_handleDropNickname
 14417 ;;		_vscp_handleProtocolEvent
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           	psect	text59
 14422  0052E6                     __ptext59:
 14423                           	opt stack 0
 14424  0052E6                     _vscp_init:
 14425                           	opt stack 24
 14426                           
 14427                           ;vscp_firmware.c: 115: vscp_initledfunc = 0x02;
 14428                           
 14429                           ;incstack = 0
 14430                           ;incstack = 0
 14431  0052E6  0E02               	movlw	2
 14432  0052E8  6E4E               	movwf	_vscp_initledfunc,c
 14433                           
 14434                           ;vscp_firmware.c: 118: vscp_nickname = vscp_readNicknamePermanent();
 14435  0052EA  ECDD  F02C         	call	_vscp_readNicknamePermanent	;wreg free
 14436  0052EE  0100               	movlb	0	; () banked
 14437  0052F0  6FB9               	movwf	_vscp_nickname& (0+255),b
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;vscp_firmware.c: 121: if (!vscp_nickname) vscp_nickname = 0xff;
 14441  0052F2  67B9               	tstfsz	_vscp_nickname& (0+255),b
 14442  0052F4  D001               	goto	l1022
 14443                           
 14444                           ; BSR set to: 0
 14445  0052F6  69B9               	setf	_vscp_nickname& (0+255),b
 14446  0052F8                     l1022:
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;vscp_firmware.c: 124: vscp_imsg.flags = 0;
 14450  0052F8  6BBC               	clrf	_vscp_imsg& (0+255),b
 14451                           
 14452                           ;vscp_firmware.c: 125: vscp_imsg.priority = 0;
 14453  0052FA  6BBD               	clrf	(_vscp_imsg+1)& (0+255),b
 14454                           
 14455                           ;vscp_firmware.c: 126: vscp_imsg.vscp_class = 0;
 14456  0052FC  6BBE               	clrf	(_vscp_imsg+2)& (0+255),b
 14457  0052FE  6BBF               	clrf	(_vscp_imsg+3)& (0+255),b
 14458                           
 14459                           ;vscp_firmware.c: 127: vscp_imsg.vscp_type = 0;
 14460  005300  6BC0               	clrf	(_vscp_imsg+4)& (0+255),b
 14461                           
 14462                           ;vscp_firmware.c: 130: vscp_omsg.flags = 0;
 14463  005302  6BCA               	clrf	_vscp_omsg& (0+255),b
 14464                           
 14465                           ;vscp_firmware.c: 131: vscp_omsg.priority = 0;
 14466  005304  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14467                           
 14468                           ;vscp_firmware.c: 132: vscp_omsg.vscp_class = 0;
 14469  005306  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14470  005308  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14471                           
 14472                           ;vscp_firmware.c: 135: vscp_errorcnt = 0;
 14473  00530A  6BCE               	clrf	(_vscp_omsg+4)& (0+255),b
 14474                           
 14475                           ;vscp_firmware.c: 136: vscp_alarmstatus = 0;
 14476  00530C  6A4C               	clrf	_vscp_alarmstatus,c
 14477                           
 14478                           ;vscp_firmware.c: 138: vscp_probe_address = 0;
 14479  00530E  6A50               	clrf	_vscp_probe_address,c
 14480                           
 14481                           ;vscp_firmware.c: 141: vscp_node_state = 0x00;
 14482  005310  6BBA               	clrf	_vscp_node_state& (0+255),b
 14483                           
 14484                           ;vscp_firmware.c: 142: vscp_node_substate = 0x00;
 14485  005312  6A4F               	clrf	_vscp_node_substate,c
 14486                           
 14487                           ;vscp_firmware.c: 144: vscp_probe_cnt = 0;
 14488  005314  6A51               	clrf	_vscp_probe_cnt,c
 14489                           
 14490                           ;vscp_firmware.c: 145: vscp_page_select = 0;
 14491  005316  6A46               	clrf	_vscp_page_select,c
 14492  005318  6A47               	clrf	_vscp_page_select+1,c
 14493                           
 14494                           ;vscp_firmware.c: 148: vscp_timer = 0;
 14495  00531A  0101               	movlb	1	; () banked
 14496  00531C  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14497  00531E  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14498                           
 14499                           ;vscp_firmware.c: 149: vscp_configtimer = 0;
 14500  005320  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14501  005322  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14502                           
 14503                           ;vscp_firmware.c: 150: vscp_second = 0;
 14504  005324  0100               	movlb	0	; () banked
 14505  005326  6BBB               	clrf	_vscp_second& (0+255),b
 14506                           
 14507                           ;vscp_firmware.c: 151: vscp_minute = 0;
 14508  005328  6BB8               	clrf	_vscp_minute& (0+255),b
 14509                           
 14510                           ;vscp_firmware.c: 152: vscp_hour = 0;
 14511  00532A  0101               	movlb	1	; () banked
 14512  00532C  6B1E               	clrf	_vscp_hour& (0+255),b
 14513                           
 14514                           ; BSR set to: 1
 14515  00532E  0012               	return	
 14516  005330                     __end_of_vscp_init:
 14517                           	opt stack 0
 14518                           tblptru	equ	0xFF8
 14519                           tblptrh	equ	0xFF7
 14520                           tblptrl	equ	0xFF6
 14521                           tablat	equ	0xFF5
 14522                           prodh	equ	0xFF4
 14523                           prodl	equ	0xFF3
 14524                           postinc0	equ	0xFEE
 14525                           wreg	equ	0xFE8
 14526                           postdec1	equ	0xFE5
 14527                           fsr1h	equ	0xFE2
 14528                           fsr1l	equ	0xFE1
 14529                           indf2	equ	0xFDF
 14530                           postinc2	equ	0xFDE
 14531                           postdec2	equ	0xFDD
 14532                           fsr2h	equ	0xFDA
 14533                           fsr2l	equ	0xFD9
 14534                           status	equ	0xFD8
 14535                           
 14536 ;; *************** function _vscp_readNicknamePermanent *****************
 14537 ;; Defined at:
 14538 ;;		line 2747 in file "../main.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;		None
 14541 ;; Auto vars:     Size  Location     Type
 14542 ;;		None
 14543 ;; Return value:  Size  Location     Type
 14544 ;;                  1    wreg      unsigned char 
 14545 ;; Registers used:
 14546 ;;		wreg, status,2, cstack
 14547 ;; Tracked objects:
 14548 ;;		On entry : 0/1
 14549 ;;		On exit  : 0/0
 14550 ;;		Unchanged: 0/0
 14551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14552 ;;      Params:         0       0       0       0       0       0       0
 14553 ;;      Locals:         0       0       0       0       0       0       0
 14554 ;;      Temps:          0       0       0       0       0       0       0
 14555 ;;      Totals:         0       0       0       0       0       0       0
 14556 ;;Total ram usage:        0 bytes
 14557 ;; Hardware stack levels used:    1
 14558 ;; Hardware stack levels required when called:    3
 14559 ;; This function calls:
 14560 ;;		_readEEPROM
 14561 ;; This function is called by:
 14562 ;;		_vscp_init
 14563 ;; This function uses a non-reentrant model
 14564 ;;
 14565                           
 14566                           	psect	text60
 14567  0059BA                     __ptext60:
 14568                           	opt stack 0
 14569  0059BA                     _vscp_readNicknamePermanent:
 14570                           	opt stack 24
 14571                           
 14572                           ;main.c: 2748: return readEEPROM( 0x01 );
 14573                           
 14574                           ; BSR set to: 1
 14575                           ;incstack = 0
 14576                           ;incstack = 0
 14577  0059BA  6A0F               	clrf	?_readEEPROM+1,c
 14578  0059BC  0E01               	movlw	1
 14579  0059BE  6E0E               	movwf	?_readEEPROM,c
 14580  0059C0  EF9D  F02C         	goto	_readEEPROM	;wreg free
 14581  0059C4                     __end_of_vscp_readNicknamePermanent:
 14582                           	opt stack 0
 14583                           tblptru	equ	0xFF8
 14584                           tblptrh	equ	0xFF7
 14585                           tblptrl	equ	0xFF6
 14586                           tablat	equ	0xFF5
 14587                           prodh	equ	0xFF4
 14588                           prodl	equ	0xFF3
 14589                           postinc0	equ	0xFEE
 14590                           wreg	equ	0xFE8
 14591                           postdec1	equ	0xFE5
 14592                           fsr1h	equ	0xFE2
 14593                           fsr1l	equ	0xFE1
 14594                           indf2	equ	0xFDF
 14595                           postinc2	equ	0xFDE
 14596                           postdec2	equ	0xFDD
 14597                           fsr2h	equ	0xFDA
 14598                           fsr2l	equ	0xFD9
 14599                           status	equ	0xFD8
 14600                           
 14601 ;; *************** function _vscp_handleSetNickname *****************
 14602 ;; Defined at:
 14603 ;;		line 411 in file "../../vscp_firmware/common/vscp_firmware.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;		None
 14606 ;; Auto vars:     Size  Location     Type
 14607 ;;		None
 14608 ;; Return value:  Size  Location     Type
 14609 ;;		None               void
 14610 ;; Registers used:
 14611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14612 ;; Tracked objects:
 14613 ;;		On entry : F/0
 14614 ;;		On exit  : 0/0
 14615 ;;		Unchanged: 0/0
 14616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14617 ;;      Params:         0       0       0       0       0       0       0
 14618 ;;      Locals:         0       0       0       0       0       0       0
 14619 ;;      Temps:          0       0       0       0       0       0       0
 14620 ;;      Totals:         0       0       0       0       0       0       0
 14621 ;;Total ram usage:        0 bytes
 14622 ;; Hardware stack levels used:    1
 14623 ;; Hardware stack levels required when called:    4
 14624 ;; This function calls:
 14625 ;;		_vscp_writeNicknamePermanent
 14626 ;;		_vscp_setSegmentCRC
 14627 ;; This function is called by:
 14628 ;;		_vscp_handleProtocolEvent
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           	psect	text61
 14633  00577E                     __ptext61:
 14634                           	opt stack 0
 14635  00577E                     _vscp_handleSetNickname:
 14636                           	opt stack 25
 14637                           
 14638                           ; BSR set to: 0
 14639                           ;vscp_firmware.c: 412: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 14640                           ;vscp_firmware.c: 413: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14641                           
 14642                           ;incstack = 0
 14643                           ;incstack = 0
 14644  00577E  51BC               	movf	_vscp_imsg& (0+255),w,b
 14645  005780  0B0F               	andlw	15
 14646  005782  0A02               	xorlw	2
 14647  005784  E10D               	bnz	l1074
 14648                           
 14649                           ; BSR set to: 0
 14650  005786  51B9               	movf	_vscp_nickname& (0+255),w,b
 14651  005788  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14652  00578C  62DF               	cpfseq	indf2,c
 14653  00578E  D008               	goto	l1074
 14654                           
 14655                           ; BSR set to: 0
 14656                           ;vscp_firmware.c: 416: vscp_nickname = vscp_imsg.data[ 1 ];
 14657  005790  C0C3  F0B9         	movff	_vscp_imsg+7,_vscp_nickname
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;vscp_firmware.c: 417: vscp_writeNicknamePermanent(vscp_nickname);
 14661  005794  51B9               	movf	_vscp_nickname& (0+255),w,b
 14662  005796  ECA6  F02C         	call	_vscp_writeNicknamePermanent
 14663                           
 14664                           ;vscp_firmware.c: 418: vscp_setSegmentCRC(0x40);
 14665  00579A  0E40               	movlw	64
 14666  00579C  EC94  F02C         	call	_vscp_setSegmentCRC
 14667  0057A0                     l1074:
 14668  0057A0  0012               	return	
 14669  0057A2                     __end_of_vscp_handleSetNickname:
 14670                           	opt stack 0
 14671                           tblptru	equ	0xFF8
 14672                           tblptrh	equ	0xFF7
 14673                           tblptrl	equ	0xFF6
 14674                           tablat	equ	0xFF5
 14675                           prodh	equ	0xFF4
 14676                           prodl	equ	0xFF3
 14677                           postinc0	equ	0xFEE
 14678                           wreg	equ	0xFE8
 14679                           postdec1	equ	0xFE5
 14680                           fsr1h	equ	0xFE2
 14681                           fsr1l	equ	0xFE1
 14682                           indf2	equ	0xFDF
 14683                           postinc2	equ	0xFDE
 14684                           postdec2	equ	0xFDD
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689 ;; *************** function _vscp_handleHeartbeat *****************
 14690 ;; Defined at:
 14691 ;;		line 385 in file "../../vscp_firmware/common/vscp_firmware.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;		None
 14694 ;; Auto vars:     Size  Location     Type
 14695 ;;		None
 14696 ;; Return value:  Size  Location     Type
 14697 ;;		None               void
 14698 ;; Registers used:
 14699 ;;		wreg, status,2, status,0, cstack
 14700 ;; Tracked objects:
 14701 ;;		On entry : F/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14705 ;;      Params:         0       0       0       0       0       0       0
 14706 ;;      Locals:         0       0       0       0       0       0       0
 14707 ;;      Temps:          0       0       0       0       0       0       0
 14708 ;;      Totals:         0       0       0       0       0       0       0
 14709 ;;Total ram usage:        0 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    4
 14712 ;; This function calls:
 14713 ;;		_vscp_writeNicknamePermanent
 14714 ;;		_vscp_getSegmentCRC
 14715 ;;		_vscp_setSegmentCRC
 14716 ;; This function is called by:
 14717 ;;		_vscp_handleProtocolEvent
 14718 ;; This function uses a non-reentrant model
 14719 ;;
 14720                           
 14721                           	psect	text62
 14722  00544A                     __ptext62:
 14723                           	opt stack 0
 14724  00544A                     _vscp_handleHeartbeat:
 14725                           	opt stack 25
 14726                           
 14727                           ; BSR set to: 0
 14728                           ;vscp_firmware.c: 386: if ( !vscp_getSegmentCRC() ) {
 14729                           
 14730                           ;incstack = 0
 14731                           ;incstack = 0
 14732  00544A  ECE2  F02C         	call	_vscp_getSegmentCRC	;wreg free
 14733  00544E  0900               	iorlw	0
 14734  005450  E116               	bnz	l11166
 14735                           
 14736                           ;vscp_firmware.c: 387: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14737                           ;vscp_firmware.c: 388: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14738  005452  0100               	movlb	0	; () banked
 14739  005454  51BC               	movf	_vscp_imsg& (0+255),w,b
 14740  005456  0B0F               	andlw	15
 14741  005458  0A05               	xorlw	5
 14742  00545A  E115               	bnz	l1070
 14743                           
 14744                           ; BSR set to: 0
 14745  00545C  ECE2  F02C         	call	_vscp_getSegmentCRC	;wreg free
 14746  005460  0100               	movlb	0	; () banked
 14747  005462  19C2               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14748  005464  E010               	bz	l1070
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;vscp_firmware.c: 392: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14752  005466  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14753  005468  EC94  F02C         	call	_vscp_setSegmentCRC
 14754                           
 14755                           ;vscp_firmware.c: 395: vscp_nickname = 0xff;
 14756  00546C  0100               	movlb	0	; () banked
 14757  00546E  69B9               	setf	_vscp_nickname& (0+255),b
 14758                           
 14759                           ;vscp_firmware.c: 396: vscp_writeNicknamePermanent(0xff);
 14760  005470  0EFF               	movlw	255
 14761  005472  ECA6  F02C         	call	_vscp_writeNicknamePermanent
 14762                           
 14763                           ;vscp_firmware.c: 397: vscp_node_state = 0x01;
 14764  005476  0E01               	movlw	1
 14765  005478  0100               	movlb	0	; () banked
 14766  00547A  6FBA               	movwf	_vscp_node_state& (0+255),b
 14767  00547C  D004               	goto	l1070
 14768  00547E                     l11166:
 14769                           
 14770                           ;vscp_firmware.c: 400: else {
 14771                           ;vscp_firmware.c: 402: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14772  00547E  0100               	movlb	0	; () banked
 14773  005480  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14774  005482  EC94  F02C         	call	_vscp_setSegmentCRC
 14775  005486                     l1070:
 14776  005486  0012               	return	
 14777  005488                     __end_of_vscp_handleHeartbeat:
 14778                           	opt stack 0
 14779                           tblptru	equ	0xFF8
 14780                           tblptrh	equ	0xFF7
 14781                           tblptrl	equ	0xFF6
 14782                           tablat	equ	0xFF5
 14783                           prodh	equ	0xFF4
 14784                           prodl	equ	0xFF3
 14785                           postinc0	equ	0xFEE
 14786                           wreg	equ	0xFE8
 14787                           postdec1	equ	0xFE5
 14788                           fsr1h	equ	0xFE2
 14789                           fsr1l	equ	0xFE1
 14790                           indf2	equ	0xFDF
 14791                           postinc2	equ	0xFDE
 14792                           postdec2	equ	0xFDD
 14793                           fsr2h	equ	0xFDA
 14794                           fsr2l	equ	0xFD9
 14795                           status	equ	0xFD8
 14796                           
 14797 ;; *************** function _vscp_goBootloaderMode *****************
 14798 ;; Defined at:
 14799 ;;		line 2732 in file "../main.c"
 14800 ;; Parameters:    Size  Location     Type
 14801 ;;		None
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;		None
 14804 ;; Return value:  Size  Location     Type
 14805 ;;		None               void
 14806 ;; Registers used:
 14807 ;;		wreg, status,2, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : F/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14813 ;;      Params:         0       0       0       0       0       0       0
 14814 ;;      Locals:         0       0       0       0       0       0       0
 14815 ;;      Temps:          0       0       0       0       0       0       0
 14816 ;;      Totals:         0       0       0       0       0       0       0
 14817 ;;Total ram usage:        0 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    3
 14820 ;; This function calls:
 14821 ;;		_writeEEPROM
 14822 ;; This function is called by:
 14823 ;;		_vscp_handleProtocolEvent
 14824 ;; This function uses a non-reentrant model
 14825 ;;
 14826                           
 14827                           	psect	text63
 14828  005982                     __ptext63:
 14829                           	opt stack 0
 14830  005982                     _vscp_goBootloaderMode:
 14831                           	opt stack 26
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;main.c: 2735: writeEEPROM(0x00, 0xff);
 14835                           
 14836                           ;incstack = 0
 14837                           ;incstack = 0
 14838  005982  6A0F               	clrf	?_writeEEPROM+1,c
 14839  005984  6A0E               	clrf	?_writeEEPROM,c
 14840  005986  0EFF               	movlw	255
 14841  005988  6810               	setf	?_writeEEPROM+2,c
 14842  00598A  EC9A  F02B         	call	_writeEEPROM	;wreg free
 14843  00598E  00FF               	reset		;# 
 14844  005990  0012               	return	
 14845  005992                     __end_of_vscp_goBootloaderMode:
 14846                           	opt stack 0
 14847                           tblptru	equ	0xFF8
 14848                           tblptrh	equ	0xFF7
 14849                           tblptrl	equ	0xFF6
 14850                           tablat	equ	0xFF5
 14851                           prodh	equ	0xFF4
 14852                           prodl	equ	0xFF3
 14853                           postinc0	equ	0xFEE
 14854                           wreg	equ	0xFE8
 14855                           postdec1	equ	0xFE5
 14856                           fsr1h	equ	0xFE2
 14857                           fsr1l	equ	0xFE1
 14858                           indf2	equ	0xFDF
 14859                           postinc2	equ	0xFDE
 14860                           postdec2	equ	0xFDD
 14861                           fsr2h	equ	0xFDA
 14862                           fsr2l	equ	0xFD9
 14863                           status	equ	0xFD8
 14864                           
 14865 ;; *************** function _vscp_getMatrixInfo *****************
 14866 ;; Defined at:
 14867 ;;		line 2667 in file "../main.c"
 14868 ;; Parameters:    Size  Location     Type
 14869 ;;  pData           1    wreg     PTR unsigned char 
 14870 ;;		 -> vscp_omsg(13), 
 14871 ;; Auto vars:     Size  Location     Type
 14872 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14873 ;;		 -> vscp_omsg(13), 
 14874 ;;  i               1   14[COMRAM] unsigned char 
 14875 ;; Return value:  Size  Location     Type
 14876 ;;		None               void
 14877 ;; Registers used:
 14878 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14879 ;; Tracked objects:
 14880 ;;		On entry : F/0
 14881 ;;		On exit  : F/0
 14882 ;;		Unchanged: F/0
 14883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14884 ;;      Params:         0       0       0       0       0       0       0
 14885 ;;      Locals:         2       0       0       0       0       0       0
 14886 ;;      Temps:          0       0       0       0       0       0       0
 14887 ;;      Totals:         2       0       0       0       0       0       0
 14888 ;;Total ram usage:        2 bytes
 14889 ;; Hardware stack levels used:    1
 14890 ;; Hardware stack levels required when called:    2
 14891 ;; This function calls:
 14892 ;;		Nothing
 14893 ;; This function is called by:
 14894 ;;		_vscp_handleProtocolEvent
 14895 ;; This function uses a non-reentrant model
 14896 ;;
 14897                           
 14898                           	psect	text64
 14899  005860                     __ptext64:
 14900                           	opt stack 0
 14901  005860                     _vscp_getMatrixInfo:
 14902                           	opt stack 27
 14903                           
 14904                           ;incstack = 0
 14905                           ;incstack = 0
 14906                           ;vscp_getMatrixInfo@pData stored from wreg
 14907  005860  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;main.c: 2668: uint8_t i;
 14911                           ;main.c: 2672: for (i = 0; i < 8; i++) {
 14912  005864  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14913  005866                     l8044:
 14914                           
 14915                           ; BSR set to: 0
 14916                           ;main.c: 2673: pData[ i ] = 0;
 14917  005866  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14918  005868  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14919  00586A  6ED9               	movwf	fsr2l,c
 14920  00586C  6ADA               	clrf	fsr2h,c
 14921  00586E  6ADF               	clrf	indf2,c
 14922                           
 14923                           ; BSR set to: 0
 14924  005870  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14925                           
 14926                           ; BSR set to: 0
 14927  005872  0E07               	movlw	7
 14928  005874  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14929  005876  D7F7               	goto	l8044
 14930                           
 14931                           ; BSR set to: 0
 14932  005878  0C07               	retlw	7
 14933  00587A                     __end_of_vscp_getMatrixInfo:
 14934                           	opt stack 0
 14935                           tblptru	equ	0xFF8
 14936                           tblptrh	equ	0xFF7
 14937                           tblptrl	equ	0xFF6
 14938                           tablat	equ	0xFF5
 14939                           prodh	equ	0xFF4
 14940                           prodl	equ	0xFF3
 14941                           postinc0	equ	0xFEE
 14942                           wreg	equ	0xFE8
 14943                           postdec1	equ	0xFE5
 14944                           fsr1h	equ	0xFE2
 14945                           fsr1l	equ	0xFE1
 14946                           indf2	equ	0xFDF
 14947                           postinc2	equ	0xFDE
 14948                           postdec2	equ	0xFDD
 14949                           fsr2h	equ	0xFDA
 14950                           fsr2l	equ	0xFD9
 14951                           status	equ	0xFD8
 14952                           
 14953 ;; *************** function _vscp_handleProbeState *****************
 14954 ;; Defined at:
 14955 ;;		line 197 in file "../../vscp_firmware/common/vscp_firmware.c"
 14956 ;; Parameters:    Size  Location     Type
 14957 ;;		None
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;		None
 14960 ;; Return value:  Size  Location     Type
 14961 ;;		None               void
 14962 ;; Registers used:
 14963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : F/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14969 ;;      Params:         0       0       0       0       0       0       0
 14970 ;;      Locals:         0       0       0       0       0       0       0
 14971 ;;      Temps:          0       0       0       0       0       0       0
 14972 ;;      Totals:         0       0       0       0       0       0       0
 14973 ;;Total ram usage:        0 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    8
 14976 ;; This function calls:
 14977 ;;		_vscp_goActiveState
 14978 ;;		_vscp_sendEvent
 14979 ;;		_vscp_writeNicknamePermanent
 14980 ;;		_vscp_setSegmentCRC
 14981 ;; This function is called by:
 14982 ;;		_main
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           	psect	text65
 14987  00464E                     __ptext65:
 14988                           	opt stack 0
 14989  00464E                     _vscp_handleProbeState:
 14990                           	opt stack 22
 14991                           
 14992                           ;vscp_firmware.c: 198: switch (vscp_node_substate) {
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;incstack = 0
 14996                           ;incstack = 0
 14997  00464E  D058               	goto	l9650
 14998  004650                     l9580:
 14999                           
 15000                           ;vscp_firmware.c: 202: if (0xff != vscp_probe_address) {
 15001  004650  2850               	incf	_vscp_probe_address,w,c
 15002  004652  E012               	bz	l9596
 15003                           
 15004                           ;vscp_firmware.c: 204: vscp_omsg.flags = 0x80 + 1;
 15005  004654  0E81               	movlw	129
 15006  004656  0100               	movlb	0	; () banked
 15007  004658  6FCA               	movwf	_vscp_omsg& (0+255),b
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;vscp_firmware.c: 205: vscp_omsg.priority = 0x00;
 15011  00465A  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;vscp_firmware.c: 206: vscp_omsg.vscp_class = 0;
 15015  00465C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15016  00465E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15017                           
 15018                           ;vscp_firmware.c: 207: vscp_omsg.vscp_type = 2;
 15019  004660  0E02               	movlw	2
 15020  004662  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15021                           
 15022                           ; BSR set to: 0
 15023                           ;vscp_firmware.c: 208: vscp_omsg.data[ 0 ] = vscp_probe_address;
 15024  004664  C050  F0CF         	movff	_vscp_probe_address,_vscp_omsg+5
 15025                           
 15026                           ; BSR set to: 0
 15027                           ;vscp_firmware.c: 211: vscp_sendEvent();
 15028  004668  EC73  F02B         	call	_vscp_sendEvent	;wreg free
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;vscp_firmware.c: 213: vscp_node_substate = 0x01;
 15032  00466C  0E01               	movlw	1
 15033  00466E  6E4F               	movwf	_vscp_node_substate,c
 15034  004670                     l9594:
 15035                           
 15036                           ; BSR set to: 0
 15037                           ;vscp_firmware.c: 214: vscp_timer = 0;
 15038  004670  0101               	movlb	1	; () banked
 15039  004672  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 15040  004674  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15041                           
 15042                           ;vscp_firmware.c: 216: } else {
 15043  004676  D04A               	goto	l1037
 15044  004678                     l9596:
 15045                           
 15046                           ;vscp_firmware.c: 219: vscp_node_state = 0x04;
 15047  004678  0E04               	movlw	4
 15048  00467A  0100               	movlb	0	; () banked
 15049  00467C  6FBA               	movwf	_vscp_node_state& (0+255),b
 15050                           
 15051                           ;vscp_firmware.c: 222: vscp_omsg.flags = 0x80 + 1;
 15052  00467E  0E81               	movlw	129
 15053  004680  6FCA               	movwf	_vscp_omsg& (0+255),b
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;vscp_firmware.c: 223: vscp_omsg.data[ 0 ] = 0xff;
 15057  004682  69CF               	setf	(_vscp_omsg+5)& (0+255),b
 15058                           
 15059                           ;vscp_firmware.c: 224: vscp_omsg.priority = 0x07;
 15060  004684  0E07               	movlw	7
 15061  004686  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
 15062                           
 15063                           ; BSR set to: 0
 15064                           ;vscp_firmware.c: 225: vscp_omsg.vscp_class = 0;
 15065  004688  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15066  00468A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15067                           
 15068                           ;vscp_firmware.c: 226: vscp_omsg.vscp_type = 3;
 15069  00468C  0E03               	movlw	3
 15070  00468E  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15071                           
 15072                           ; BSR set to: 0
 15073                           ;vscp_firmware.c: 229: vscp_sendEvent();
 15074  004690  EC73  F02B         	call	_vscp_sendEvent	;wreg free
 15075  004694  D03B               	goto	l1037
 15076  004696                     l1038:
 15077                           
 15078                           ;vscp_firmware.c: 236: if (vscp_imsg.flags & 0x80) {
 15079  004696  0100               	movlb	0	; () banked
 15080  004698  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 15081  00469A  D00F               	goto	l9620
 15082                           
 15083                           ; BSR set to: 0
 15084                           ;vscp_firmware.c: 239: if ((0 == vscp_imsg.vscp_class) &&
 15085                           ;vscp_firmware.c: 240: (3 == vscp_imsg.vscp_type)) {
 15086  00469C  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
 15087  00469E  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 15088  0046A0  E135               	bnz	l1037
 15089                           
 15090                           ; BSR set to: 0
 15091  0046A2  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
 15092  0046A4  0A03               	xorlw	3
 15093  0046A6  E132               	bnz	l1037
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;vscp_firmware.c: 243: if (0 == vscp_probe_address) {
 15097  0046A8  6650               	tstfsz	_vscp_probe_address,c
 15098  0046AA  D003               	goto	l9614
 15099                           
 15100                           ; BSR set to: 0
 15101                           ;vscp_firmware.c: 247: vscp_node_state = 0x02;
 15102  0046AC  0E02               	movlw	2
 15103  0046AE  6FBA               	movwf	_vscp_node_state& (0+255),b
 15104  0046B0  D7DF               	goto	l9594
 15105  0046B2                     l9614:
 15106                           
 15107                           ; BSR set to: 0
 15108                           ;vscp_firmware.c: 253: vscp_probe_address++;
 15109  0046B2  2A50               	incf	_vscp_probe_address,f,c
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;vscp_firmware.c: 254: vscp_node_substate = 0x00;
 15113  0046B4  6A4F               	clrf	_vscp_node_substate,c
 15114  0046B6                     l9618:
 15115                           
 15116                           ;vscp_firmware.c: 255: vscp_probe_cnt = 0;
 15117  0046B6  6A51               	clrf	_vscp_probe_cnt,c
 15118  0046B8  D029               	goto	l1037
 15119  0046BA                     l9620:
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;vscp_firmware.c: 261: if (vscp_timer > 1000) {
 15123  0046BA  0EE9               	movlw	233
 15124  0046BC  0101               	movlb	1	; () banked
 15125  0046BE  5D1C               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15126  0046C0  0E03               	movlw	3
 15127  0046C2  591D               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15128  0046C4  E323               	bnc	l1037
 15129                           
 15130                           ; BSR set to: 1
 15131                           ;vscp_firmware.c: 263: vscp_probe_cnt++;
 15132  0046C6  2A51               	incf	_vscp_probe_cnt,f,c
 15133                           
 15134                           ; BSR set to: 1
 15135                           ;vscp_firmware.c: 265: if (vscp_probe_cnt >= 3) {
 15136  0046C8  0E02               	movlw	2
 15137  0046CA  6451               	cpfsgt	_vscp_probe_cnt,c
 15138  0046CC  D017               	goto	l1045
 15139                           
 15140                           ; BSR set to: 1
 15141                           ;vscp_firmware.c: 268: if (0 == vscp_probe_address) {
 15142  0046CE  6650               	tstfsz	_vscp_probe_address,c
 15143  0046D0  D005               	goto	l1046
 15144                           
 15145                           ; BSR set to: 1
 15146                           ;vscp_firmware.c: 271: vscp_probe_address++;
 15147  0046D2  2A50               	incf	_vscp_probe_address,f,c
 15148                           
 15149                           ; BSR set to: 1
 15150                           ;vscp_firmware.c: 272: vscp_node_substate = 0x00;
 15151  0046D4  6A4F               	clrf	_vscp_node_substate,c
 15152                           
 15153                           ; BSR set to: 1
 15154                           ;vscp_firmware.c: 273: vscp_timer = 0;
 15155  0046D6  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 15156  0046D8  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15157  0046DA  D7ED               	goto	l9618
 15158  0046DC                     l1046:
 15159                           
 15160                           ; BSR set to: 1
 15161                           ;vscp_firmware.c: 279: vscp_nickname = vscp_probe_address;
 15162  0046DC  C050  F0B9         	movff	_vscp_probe_address,_vscp_nickname
 15163                           
 15164                           ; BSR set to: 1
 15165                           ;vscp_firmware.c: 280: vscp_node_state = 0x03;
 15166  0046E0  0E03               	movlw	3
 15167  0046E2  0100               	movlb	0	; () banked
 15168  0046E4  6FBA               	movwf	_vscp_node_state& (0+255),b
 15169                           
 15170                           ; BSR set to: 0
 15171                           ;vscp_firmware.c: 281: vscp_node_substate = 0x00;
 15172  0046E6  6A4F               	clrf	_vscp_node_substate,c
 15173                           
 15174                           ; BSR set to: 0
 15175                           ;vscp_firmware.c: 282: vscp_writeNicknamePermanent(vscp_nickname);
 15176  0046E8  51B9               	movf	_vscp_nickname& (0+255),w,b
 15177  0046EA  ECA6  F02C         	call	_vscp_writeNicknamePermanent
 15178                           
 15179                           ;vscp_firmware.c: 283: vscp_setSegmentCRC(0x40);
 15180  0046EE  0E40               	movlw	64
 15181  0046F0  EC94  F02C         	call	_vscp_setSegmentCRC
 15182                           
 15183                           ;vscp_firmware.c: 286: vscp_probe_cnt = 0;
 15184  0046F4  6A51               	clrf	_vscp_probe_cnt,c
 15185                           
 15186                           ;vscp_firmware.c: 287: vscp_goActiveState();
 15187  0046F6  EC05  F02C         	call	_vscp_goActiveState	;wreg free
 15188  0046FA  D008               	goto	l1037
 15189  0046FC                     l1045:
 15190                           
 15191                           ;vscp_firmware.c: 291: vscp_node_substate = 0x00;
 15192  0046FC  6A4F               	clrf	_vscp_node_substate,c
 15193  0046FE  D006               	goto	l1037
 15194  004700                     l9650:
 15195  004700  504F               	movf	_vscp_node_substate,w,c
 15196                           
 15197                           ; Switch size 1, requested type "speed"
 15198                           ; Number of cases is 3, Range of values is 0 to 2
 15199                           ; switch strategies available:
 15200                           ; Name         Instructions Cycles
 15201                           ; simple_byte           10     6 (average)
 15202                           ;	Chosen strategy is simple_byte
 15203  004702  E0A6               	bz	l9580
 15204  004704  0A01               	xorlw	1	; case 1
 15205  004706  E0C7               	bz	l1038
 15206  004708  0A03               	xorlw	3	; case 2
 15207  00470A  E1F8               	bnz	l1045
 15208  00470C                     l1037:
 15209                           
 15210                           ;vscp_firmware.c: 306: vscp_imsg.flags = 0;
 15211  00470C  0100               	movlb	0	; () banked
 15212  00470E  6BBC               	clrf	_vscp_imsg& (0+255),b
 15213                           
 15214                           ; BSR set to: 0
 15215  004710  0012               	return	
 15216  004712                     __end_of_vscp_handleProbeState:
 15217                           	opt stack 0
 15218                           tblptru	equ	0xFF8
 15219                           tblptrh	equ	0xFF7
 15220                           tblptrl	equ	0xFF6
 15221                           tablat	equ	0xFF5
 15222                           prodh	equ	0xFF4
 15223                           prodl	equ	0xFF3
 15224                           postinc0	equ	0xFEE
 15225                           wreg	equ	0xFE8
 15226                           postdec1	equ	0xFE5
 15227                           fsr1h	equ	0xFE2
 15228                           fsr1l	equ	0xFE1
 15229                           indf2	equ	0xFDF
 15230                           postinc2	equ	0xFDE
 15231                           postdec2	equ	0xFDD
 15232                           fsr2h	equ	0xFDA
 15233                           fsr2l	equ	0xFD9
 15234                           status	equ	0xFD8
 15235                           
 15236 ;; *************** function _vscp_goActiveState *****************
 15237 ;; Defined at:
 15238 ;;		line 347 in file "../../vscp_firmware/common/vscp_firmware.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;		None
 15241 ;; Auto vars:     Size  Location     Type
 15242 ;;		None
 15243 ;; Return value:  Size  Location     Type
 15244 ;;		None               void
 15245 ;; Registers used:
 15246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15247 ;; Tracked objects:
 15248 ;;		On entry : 0/0
 15249 ;;		On exit  : F/0
 15250 ;;		Unchanged: 0/0
 15251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15252 ;;      Params:         0       0       0       0       0       0       0
 15253 ;;      Locals:         0       0       0       0       0       0       0
 15254 ;;      Temps:          0       0       0       0       0       0       0
 15255 ;;      Totals:         0       0       0       0       0       0       0
 15256 ;;Total ram usage:        0 bytes
 15257 ;; Hardware stack levels used:    1
 15258 ;; Hardware stack levels required when called:    7
 15259 ;; This function calls:
 15260 ;;		_vscp_sendEvent
 15261 ;; This function is called by:
 15262 ;;		_main
 15263 ;;		_vscp_handleProbeState
 15264 ;; This function uses a non-reentrant model
 15265 ;;
 15266                           
 15267                           	psect	text66
 15268  00580A                     __ptext66:
 15269                           	opt stack 0
 15270  00580A                     _vscp_goActiveState:
 15271                           	opt stack 22
 15272                           
 15273                           ;vscp_firmware.c: 348: vscp_omsg.flags = 0x80 + 1;
 15274                           
 15275                           ; BSR set to: 0
 15276                           ;incstack = 0
 15277                           ;incstack = 0
 15278  00580A  0E81               	movlw	129
 15279  00580C  0100               	movlb	0	; () banked
 15280  00580E  6FCA               	movwf	_vscp_omsg& (0+255),b
 15281                           
 15282                           ; BSR set to: 0
 15283                           ;vscp_firmware.c: 349: vscp_omsg.priority = 0x00;
 15284  005810  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 15285                           
 15286                           ; BSR set to: 0
 15287                           ;vscp_firmware.c: 350: vscp_omsg.vscp_class = 0;
 15288  005812  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15289  005814  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15290                           
 15291                           ;vscp_firmware.c: 351: vscp_omsg.vscp_type = 2;
 15292  005816  0E02               	movlw	2
 15293  005818  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;vscp_firmware.c: 352: vscp_omsg.data[ 0 ] = vscp_nickname;
 15297  00581A  C0B9  F0CF         	movff	_vscp_nickname,_vscp_omsg+5
 15298                           
 15299                           ; BSR set to: 0
 15300                           ;vscp_firmware.c: 355: vscp_sendEvent();
 15301  00581E  EC73  F02B         	call	_vscp_sendEvent	;wreg free
 15302                           
 15303                           ; BSR set to: 0
 15304                           ;vscp_firmware.c: 357: vscp_initledfunc = 0x01;
 15305  005822  0E01               	movlw	1
 15306  005824  6E4E               	movwf	_vscp_initledfunc,c
 15307                           
 15308                           ; BSR set to: 0
 15309  005826  0C01               	retlw	1
 15310  005828                     __end_of_vscp_goActiveState:
 15311                           	opt stack 0
 15312                           tblptru	equ	0xFF8
 15313                           tblptrh	equ	0xFF7
 15314                           tblptrl	equ	0xFF6
 15315                           tablat	equ	0xFF5
 15316                           prodh	equ	0xFF4
 15317                           prodl	equ	0xFF3
 15318                           postinc0	equ	0xFEE
 15319                           wreg	equ	0xFE8
 15320                           postdec1	equ	0xFE5
 15321                           fsr1h	equ	0xFE2
 15322                           fsr1l	equ	0xFE1
 15323                           indf2	equ	0xFDF
 15324                           postinc2	equ	0xFDE
 15325                           postdec2	equ	0xFDD
 15326                           fsr2h	equ	0xFDA
 15327                           fsr2l	equ	0xFD9
 15328                           status	equ	0xFD8
 15329                           
 15330 ;; *************** function _vscp_sendEvent *****************
 15331 ;; Defined at:
 15332 ;;		line 1272 in file "../../vscp_firmware/common/vscp_firmware.c"
 15333 ;; Parameters:    Size  Location     Type
 15334 ;;		None
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  rv              1   66[COMRAM] unsigned char 
 15337 ;; Return value:  Size  Location     Type
 15338 ;;                  1    wreg      unsigned char 
 15339 ;; Registers used:
 15340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15341 ;; Tracked objects:
 15342 ;;		On entry : F/0
 15343 ;;		On exit  : F/0
 15344 ;;		Unchanged: 0/0
 15345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15346 ;;      Params:         0       0       0       0       0       0       0
 15347 ;;      Locals:         1       0       0       0       0       0       0
 15348 ;;      Temps:          0       0       0       0       0       0       0
 15349 ;;      Totals:         1       0       0       0       0       0       0
 15350 ;;Total ram usage:        1 bytes
 15351 ;; Hardware stack levels used:    1
 15352 ;; Hardware stack levels required when called:    6
 15353 ;; This function calls:
 15354 ;;		_sendVSCPFrame
 15355 ;; This function is called by:
 15356 ;;		_doWork
 15357 ;;		_doOneSecondWork
 15358 ;;		_sendTempEvent
 15359 ;;		_vscp_handleProbeState
 15360 ;;		_vscp_goActiveState
 15361 ;;		_vscp_sendHeartBeat
 15362 ;;		_vscp_newNodeOnline
 15363 ;;		_vscp_handleProtocolEvent
 15364 ;; This function uses a non-reentrant model
 15365 ;;
 15366                           
 15367                           	psect	text67
 15368  0056E6                     __ptext67:
 15369                           	opt stack 0
 15370  0056E6                     _vscp_sendEvent:
 15371                           	opt stack 23
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;vscp_firmware.c: 1281: vscp_errorcnt++;
 15375                           
 15376                           ; BSR set to: 0
 15377                           ;incstack = 0
 15378                           ;incstack = 0
 15379  0056E6  C0CC  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15380  0056EA  C0CD  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15381  0056EE  C0CE  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15382  0056F2  C0B9  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15383  0056F6  C0CB  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15384  0056FA  51CA               	movf	_vscp_omsg& (0+255),w,b
 15385  0056FC  0B0F               	andlw	15
 15386  0056FE  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15387  005700  0ECF               	movlw	low (_vscp_omsg+5)
 15388  005702  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15389  005704  ECA7  F024         	call	_sendVSCPFrame	;wreg free
 15390  005708  6E43               	movwf	vscp_sendEvent@rv,c
 15391                           
 15392                           ; BSR set to: 0
 15393                           ;vscp_firmware.c: 1282: }
 15394                           ;vscp_firmware.c: 1284: return rv;
 15395  00570A  5043               	movf	vscp_sendEvent@rv,w,c
 15396                           
 15397                           ; BSR set to: 0
 15398  00570C  0012               	return	
 15399  00570E                     __end_of_vscp_sendEvent:
 15400                           	opt stack 0
 15401                           tblptru	equ	0xFF8
 15402                           tblptrh	equ	0xFF7
 15403                           tblptrl	equ	0xFF6
 15404                           tablat	equ	0xFF5
 15405                           prodh	equ	0xFF4
 15406                           prodl	equ	0xFF3
 15407                           postinc0	equ	0xFEE
 15408                           wreg	equ	0xFE8
 15409                           postdec1	equ	0xFE5
 15410                           fsr1h	equ	0xFE2
 15411                           fsr1l	equ	0xFE1
 15412                           indf2	equ	0xFDF
 15413                           postinc2	equ	0xFDE
 15414                           postdec2	equ	0xFDD
 15415                           fsr2h	equ	0xFDA
 15416                           fsr2l	equ	0xFD9
 15417                           status	equ	0xFD8
 15418                           
 15419 ;; *************** function _sendVSCPFrame *****************
 15420 ;; Defined at:
 15421 ;;		line 2836 in file "../main.c"
 15422 ;; Parameters:    Size  Location     Type
 15423 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15424 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15425 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15426 ;;  priority        1    4[BANK0 ] unsigned char 
 15427 ;;  size            1    5[BANK0 ] unsigned char 
 15428 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15429 ;;		 -> vscp_omsg(13), 
 15430 ;; Auto vars:     Size  Location     Type
 15431 ;;  id              4   27[BANK0 ] unsigned long 
 15432 ;; Return value:  Size  Location     Type
 15433 ;;                  1    wreg      unsigned char 
 15434 ;; Registers used:
 15435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15436 ;; Tracked objects:
 15437 ;;		On entry : F/0
 15438 ;;		On exit  : F/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15441 ;;      Params:         0       7       0       0       0       0       0
 15442 ;;      Locals:         0       4       0       0       0       0       0
 15443 ;;      Temps:          0      20       0       0       0       0       0
 15444 ;;      Totals:         0      31       0       0       0       0       0
 15445 ;;Total ram usage:       31 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; Hardware stack levels required when called:    5
 15448 ;; This function calls:
 15449 ;;		_sendCANFrame
 15450 ;; This function is called by:
 15451 ;;		_vscp_sendEvent
 15452 ;; This function uses a non-reentrant model
 15453 ;;
 15454                           
 15455                           	psect	text68
 15456  00494E                     __ptext68:
 15457                           	opt stack 0
 15458  00494E                     _sendVSCPFrame:
 15459                           	opt stack 23
 15460                           
 15461                           ; BSR set to: 0
 15462                           ;main.c: 2837: uint32_t id = ((uint32_t) priority << 26) |
 15463                           ;main.c: 2838: ((uint32_t) vscpclass << 16) |
 15464                           ;main.c: 2839: ((uint32_t) vscptype << 8) |
 15465                           ;main.c: 2840: nodeid;
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;incstack = 0
 15469                           ;incstack = 0
 15470  00494E  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15471  004952  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15472  004954  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15473  004956  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15474  004958  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15475  00495C  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15476  004960  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15477  004964  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15478  004966  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15479  004968  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15480  00496A  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15481  00496C  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15482  00496E  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15483  004970  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15484  004972  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15485  004976  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15486  00497A  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15487  00497C  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15488  00497E  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15489  004982  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15490  004984  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15491  004986  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15492  004988  0E1A               	movlw	26
 15493  00498A                     u8965:
 15494  00498A  90D8               	bcf	status,0,c
 15495  00498C  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15496  00498E  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15497  004990  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15498  004992  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15499  004994  2EE8               	decfsz	wreg,f,c
 15500  004996  D7F9               	goto	u8965
 15501  004998  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15502  00499A  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15503  00499C  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15504  00499E  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15505  0049A0  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15506  0049A2  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15507  0049A4  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15508  0049A6  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15509  0049A8  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15510  0049AA  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15511  0049AC  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15512  0049AE  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15513  0049B0  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15514  0049B2  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15515  0049B4  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15516  0049B6  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15517  0049B8  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15518  0049BA  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15519  0049BC  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15520  0049BE  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15521  0049C0  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15522  0049C2  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15523  0049C4  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15524  0049C6  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15525  0049C8  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15526  0049CA  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15527  0049CC  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15528  0049CE  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15529  0049D0  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15530  0049D2  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15531  0049D4  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15532  0049D6  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15533  0049D8  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15534                           
 15535                           ; BSR set to: 0
 15536                           ;main.c: 2844: vscp_errorcnt++;
 15537  0049DA  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15538  0049DE  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15539  0049E2  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15540  0049E6  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15541  0049EA  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15542  0049EE  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15543  0049F2  EC62  F02A         	call	_sendCANFrame	;wreg free
 15544  0049F6  0900               	iorlw	0
 15545                           
 15546                           ; BSR set to: 0
 15547                           ;main.c: 2845: return 0;
 15548  0049F8  0E00               	movlw	0
 15549  0049FA  A4D8               	btfss	status,2,c
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;main.c: 2846: }
 15553                           ;main.c: 2848: return 1;
 15554  0049FC  0E01               	movlw	1
 15555                           
 15556                           ; BSR set to: 0
 15557  0049FE  0012               	return	
 15558  004A00                     __end_of_sendVSCPFrame:
 15559                           	opt stack 0
 15560                           tblptru	equ	0xFF8
 15561                           tblptrh	equ	0xFF7
 15562                           tblptrl	equ	0xFF6
 15563                           tablat	equ	0xFF5
 15564                           prodh	equ	0xFF4
 15565                           prodl	equ	0xFF3
 15566                           postinc0	equ	0xFEE
 15567                           wreg	equ	0xFE8
 15568                           postdec1	equ	0xFE5
 15569                           fsr1h	equ	0xFE2
 15570                           fsr1l	equ	0xFE1
 15571                           indf2	equ	0xFDF
 15572                           postinc2	equ	0xFDE
 15573                           postdec2	equ	0xFDD
 15574                           fsr2h	equ	0xFDA
 15575                           fsr2l	equ	0xFD9
 15576                           status	equ	0xFD8
 15577                           
 15578 ;; *************** function _sendCANFrame *****************
 15579 ;; Defined at:
 15580 ;;		line 2883 in file "../main.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;  id              4   59[COMRAM] unsigned long 
 15583 ;;  dlc             1   63[COMRAM] unsigned char 
 15584 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15585 ;;		 -> vscp_omsg(13), 
 15586 ;; Auto vars:     Size  Location     Type
 15587 ;;  rv              1   65[COMRAM] unsigned char 
 15588 ;; Return value:  Size  Location     Type
 15589 ;;                  1    wreg      unsigned char 
 15590 ;; Registers used:
 15591 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15592 ;; Tracked objects:
 15593 ;;		On entry : F/0
 15594 ;;		On exit  : F/0
 15595 ;;		Unchanged: 0/0
 15596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15597 ;;      Params:         6       0       0       0       0       0       0
 15598 ;;      Locals:         1       0       0       0       0       0       0
 15599 ;;      Temps:          0       0       0       0       0       0       0
 15600 ;;      Totals:         7       0       0       0       0       0       0
 15601 ;;Total ram usage:        7 bytes
 15602 ;; Hardware stack levels used:    1
 15603 ;; Hardware stack levels required when called:    4
 15604 ;; This function calls:
 15605 ;;		_ECANSendMessage
 15606 ;; This function is called by:
 15607 ;;		_sendVSCPFrame
 15608 ;; This function uses a non-reentrant model
 15609 ;;
 15610                           
 15611                           	psect	text69
 15612  0054C4                     __ptext69:
 15613                           	opt stack 0
 15614  0054C4                     _sendCANFrame:
 15615                           	opt stack 23
 15616                           
 15617                           ; BSR set to: 0
 15618                           ;main.c: 2884: uint8_t rv = 0;
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;incstack = 0
 15622                           ;incstack = 0
 15623  0054C4  6A42               	clrf	sendCANFrame@rv,c
 15624                           
 15625                           ;main.c: 2885: sendTimer = 0;
 15626  0054C6  6A4B               	clrf	_sendTimer,c
 15627                           
 15628                           ;main.c: 2887: while ( sendTimer < 1 ) {
 15629  0054C8  D015               	goto	l11038
 15630  0054CA                     l11034:
 15631                           
 15632                           ;main.c: 2888: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15633  0054CA  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15634  0054CE  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15635  0054D2  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15636  0054D6  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15637  0054DA  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15638  0054DE  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15639  0054E2  0E20               	movlw	32
 15640  0054E4  6E1E               	movwf	?_ECANSendMessage+6,c
 15641  0054E6  ECFD  F01D         	call	_ECANSendMessage	;wreg free
 15642  0054EA  0900               	iorlw	0
 15643  0054EC  E003               	bz	l11038
 15644                           
 15645                           ;main.c: 2889: rv = 1;
 15646  0054EE  0E01               	movlw	1
 15647  0054F0  6E42               	movwf	sendCANFrame@rv,c
 15648                           
 15649                           ;main.c: 2890: break;
 15650  0054F2  D002               	goto	l626
 15651  0054F4                     l11038:
 15652  0054F4  504B               	movf	_sendTimer,w,c
 15653  0054F6  E0E9               	bz	l11034
 15654  0054F8                     l626:
 15655                           
 15656                           ;main.c: 2891: }
 15657                           ;main.c: 2892: }
 15658                           ;main.c: 2894: vscp_omsg.flags = 0;
 15659  0054F8  0100               	movlb	0	; () banked
 15660  0054FA  6BCA               	clrf	_vscp_omsg& (0+255),b
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;main.c: 2896: return rv;
 15664  0054FC  5042               	movf	sendCANFrame@rv,w,c
 15665                           
 15666                           ; BSR set to: 0
 15667  0054FE  0012               	return	
 15668  005500                     __end_of_sendCANFrame:
 15669                           	opt stack 0
 15670                           tblptru	equ	0xFF8
 15671                           tblptrh	equ	0xFF7
 15672                           tblptrl	equ	0xFF6
 15673                           tablat	equ	0xFF5
 15674                           prodh	equ	0xFF4
 15675                           prodl	equ	0xFF3
 15676                           postinc0	equ	0xFEE
 15677                           wreg	equ	0xFE8
 15678                           postdec1	equ	0xFE5
 15679                           fsr1h	equ	0xFE2
 15680                           fsr1l	equ	0xFE1
 15681                           indf2	equ	0xFDF
 15682                           postinc2	equ	0xFDE
 15683                           postdec2	equ	0xFDD
 15684                           fsr2h	equ	0xFDA
 15685                           fsr2l	equ	0xFD9
 15686                           status	equ	0xFD8
 15687                           
 15688 ;; *************** function _ECANSendMessage *****************
 15689 ;; Defined at:
 15690 ;;		line 617 in file "../ECAN.c"
 15691 ;; Parameters:    Size  Location     Type
 15692 ;;  id              4   23[COMRAM] unsigned long 
 15693 ;;  data            1   27[COMRAM] PTR unsigned char 
 15694 ;;		 -> vscp_omsg(13), 
 15695 ;;  dataLen         1   28[COMRAM] unsigned char 
 15696 ;;  msgFlags        1   29[COMRAM] enum E16306
 15697 ;; Auto vars:     Size  Location     Type
 15698 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15699 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15700 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15701 ;;		 -> B0CON(1), 
 15702 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15703 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15704 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15705 ;;		 -> B0CON(1), 
 15706 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15707 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15708 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15709 ;;		 -> B0CON(1), 
 15710 ;;  i               1   56[COMRAM] unsigned char 
 15711 ;;  temp            1   55[COMRAM] unsigned char 
 15712 ;;  tempBSEL0       1   52[COMRAM] struct .
 15713 ;;  j               1   51[COMRAM] unsigned char 
 15714 ;;  buffers         1   50[COMRAM] unsigned char 
 15715 ;;  mode            1   49[COMRAM] unsigned char 
 15716 ;; Return value:  Size  Location     Type
 15717 ;;                  1    wreg      enum E15660
 15718 ;; Registers used:
 15719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15720 ;; Tracked objects:
 15721 ;;		On entry : 0/0
 15722 ;;		On exit  : 0/0
 15723 ;;		Unchanged: 0/0
 15724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15725 ;;      Params:         7       0       0       0       0       0       0
 15726 ;;      Locals:        28       0       0       0       0       0       0
 15727 ;;      Temps:          1       0       0       0       0       0       0
 15728 ;;      Totals:        36       0       0       0       0       0       0
 15729 ;;Total ram usage:       36 bytes
 15730 ;; Hardware stack levels used:    1
 15731 ;; Hardware stack levels required when called:    3
 15732 ;; This function calls:
 15733 ;;		__CANIDToRegs
 15734 ;; This function is called by:
 15735 ;;		_sendCANFrame
 15736 ;; This function uses a non-reentrant model
 15737 ;;
 15738                           
 15739                           	psect	text70
 15740  003BFA                     __ptext70:
 15741                           	opt stack 0
 15742  003BFA                     _ECANSendMessage:
 15743                           	opt stack 23
 15744                           
 15745                           ;ECAN.c: 619: BYTE mode;
 15746                           ;ECAN.c: 620: BYTE buffers;
 15747                           ;ECAN.c: 628: BYTE i,j;
 15748                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15749                           ;ECAN.c: 630: BYTE* pb[9];
 15750                           ;ECAN.c: 631: BYTE temp;
 15751                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15752                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;incstack = 0
 15756                           ;incstack = 0
 15757  003BFA  0E0F               	movlw	15	;volatile
 15758  003BFC  6E21               	movwf	ECANSendMessage@pb+1,c
 15759  003BFE  0E40               	movlw	64	;volatile
 15760  003C00  6E20               	movwf	ECANSendMessage@pb,c
 15761                           
 15762                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15763  003C02  0E0F               	movlw	15	;volatile
 15764  003C04  6E23               	movwf	ECANSendMessage@pb+3,c
 15765  003C06  0E30               	movlw	48	;volatile
 15766  003C08  6E22               	movwf	ECANSendMessage@pb+2,c
 15767                           
 15768                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15769  003C0A  0E0F               	movlw	15	;volatile
 15770  003C0C  6E25               	movwf	ECANSendMessage@pb+5,c
 15771  003C0E  0E20               	movlw	32	;volatile
 15772  003C10  6E24               	movwf	ECANSendMessage@pb+4,c
 15773                           
 15774                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15775  003C12  0E0E               	movlw	14	;volatile
 15776  003C14  6E27               	movwf	ECANSendMessage@pb+7,c
 15777  003C16  0E20               	movlw	32	;volatile
 15778  003C18  6E26               	movwf	ECANSendMessage@pb+6,c
 15779                           
 15780                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15781  003C1A  0E0E               	movlw	14	;volatile
 15782  003C1C  6E29               	movwf	ECANSendMessage@pb+9,c
 15783  003C1E  0E30               	movlw	48	;volatile
 15784  003C20  6E28               	movwf	ECANSendMessage@pb+8,c
 15785                           
 15786                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15787  003C22  0E0E               	movlw	14	;volatile
 15788  003C24  6E2B               	movwf	ECANSendMessage@pb+11,c
 15789  003C26  0E40               	movlw	64	;volatile
 15790  003C28  6E2A               	movwf	ECANSendMessage@pb+10,c
 15791                           
 15792                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15793  003C2A  0E0E               	movlw	14	;volatile
 15794  003C2C  6E2D               	movwf	ECANSendMessage@pb+13,c
 15795  003C2E  0E50               	movlw	80	;volatile
 15796  003C30  6E2C               	movwf	ECANSendMessage@pb+12,c
 15797                           
 15798                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15799  003C32  0E0E               	movlw	14	;volatile
 15800  003C34  6E2F               	movwf	ECANSendMessage@pb+15,c
 15801  003C36  0E60               	movlw	96	;volatile
 15802  003C38  6E2E               	movwf	ECANSendMessage@pb+14,c
 15803                           
 15804                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15805  003C3A  0E0E               	movlw	14	;volatile
 15806  003C3C  6E31               	movwf	ECANSendMessage@pb+17,c
 15807  003C3E  0E70               	movlw	112	;volatile
 15808  003C40  6E30               	movwf	ECANSendMessage@pb+16,c
 15809                           
 15810                           ; BSR set to: 14
 15811                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15812  003C42  5077               	movf	3959,w,c	;volatile
 15813  003C44  0BC0               	andlw	192
 15814  003C46  6E32               	movwf	ECANSendMessage@mode,c
 15815                           
 15816                           ; BSR set to: 14
 15817                           ;ECAN.c: 660: if ( mode == 0x00 )
 15818  003C48  6632               	tstfsz	ECANSendMessage@mode,c
 15819  003C4A  D002               	goto	l11052
 15820                           
 15821                           ; BSR set to: 14
 15822                           ;ECAN.c: 661: buffers = 2;
 15823  003C4C  0E02               	movlw	2
 15824  003C4E  D001               	goto	L114
 15825  003C50                     l11052:
 15826                           
 15827                           ; BSR set to: 14
 15828                           ;ECAN.c: 662: else
 15829                           ;ECAN.c: 663: buffers = 8;
 15830  003C50  0E08               	movlw	8
 15831  003C52                     L114:
 15832  003C52  6E33               	movwf	ECANSendMessage@buffers,c
 15833                           
 15834                           ; BSR set to: 14
 15835                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15836  003C54  010D               	movlb	13	; () banked
 15837  003C56  90D8               	bcf	status,0,c
 15838  003C58  31F8               	rrcf	248,w,b	;volatile
 15839  003C5A  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15840                           
 15841                           ; BSR set to: 13
 15842                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15843  003C5C  6A39               	clrf	ECANSendMessage@i,c
 15844  003C5E  D07B               	goto	l11112
 15845  003C60                     l11058:
 15846                           
 15847                           ;ECAN.c: 688: {
 15848                           ;ECAN.c: 693: ptr = pb[i];
 15849  003C60  5039               	movf	ECANSendMessage@i,w,c
 15850  003C62  0D02               	mullw	2
 15851  003C64  50F3               	movf	prodl,w,c
 15852  003C66  0F20               	addlw	low ECANSendMessage@pb
 15853  003C68  6ED9               	movwf	fsr2l,c
 15854  003C6A  6ADA               	clrf	fsr2h,c
 15855  003C6C  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15856  003C70  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15857                           
 15858                           ;ECAN.c: 694: tempPtr = ptr;
 15859  003C74  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15860  003C78  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15861                           
 15862                           ;ECAN.c: 702: if ( i > 2 )
 15863  003C7C  0E02               	movlw	2
 15864  003C7E  6439               	cpfsgt	ECANSendMessage@i,c
 15865  003C80  D004               	goto	l11070
 15866                           
 15867                           ;ECAN.c: 703: {
 15868                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15869  003C82  90D8               	bcf	status,0,c
 15870  003C84  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15871                           
 15872                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15873  003C86  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15874  003C88  D065               	goto	l11110
 15875  003C8A                     l11070:
 15876                           
 15877                           ;ECAN.c: 714: }
 15878                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15879  003C8A  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15880  003C8E  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15881  003C92  50DF               	movf	indf2,w,c
 15882  003C94  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15883  003C96  B61F               	btfsc	??_ECANSendMessage,3,c
 15884  003C98  D05D               	goto	l11110
 15885                           
 15886                           ;ECAN.c: 721: {
 15887                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15888  003C9A  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15889  003C9E  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15890  003CA2  0EFC               	movlw	252
 15891  003CA4  16DF               	andwf	indf2,f,c
 15892                           
 15893                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15894  003CA6  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15895  003CAA  0E03               	movlw	3
 15896  003CAC  161F               	andwf	??_ECANSendMessage,f,c
 15897  003CAE  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15898  003CB2  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15899  003CB6  501F               	movf	??_ECANSendMessage,w,c
 15900  003CB8  12DF               	iorwf	indf2,f,c
 15901                           
 15902                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15903  003CBA  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15904  003CBC  D004               	goto	l814
 15905                           
 15906                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15907  003CBE  501D               	movf	ECANSendMessage@dataLen,w,c
 15908  003CC0  0940               	iorlw	64
 15909  003CC2  6E38               	movwf	ECANSendMessage@temp,c
 15910  003CC4  D002               	goto	l11080
 15911  003CC6                     l814:
 15912                           
 15913                           ;ECAN.c: 729: else
 15914                           ;ECAN.c: 730: temp = dataLen;
 15915  003CC6  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15916  003CCA                     l11080:
 15917                           
 15918                           ;ECAN.c: 732: *(ptr+5) = temp;
 15919  003CCA  EE20 F005          	lfsr	2,5
 15920  003CCE  503A               	movf	ECANSendMessage@ptr,w,c
 15921  003CD0  26D9               	addwf	fsr2l,f,c
 15922  003CD2  503B               	movf	ECANSendMessage@ptr+1,w,c
 15923  003CD4  22DA               	addwfc	fsr2h,f,c
 15924  003CD6  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15925                           
 15926                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15927  003CDA  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15928  003CDC  D003               	goto	l816
 15929                           
 15930                           ;ECAN.c: 736: temp = 1;
 15931  003CDE  0E01               	movlw	1
 15932  003CE0  6E38               	movwf	ECANSendMessage@temp,c
 15933  003CE2  D001               	goto	l11086
 15934  003CE4                     l816:
 15935                           
 15936                           ;ECAN.c: 738: else
 15937                           ;ECAN.c: 739: temp = 0;
 15938  003CE4  6A38               	clrf	ECANSendMessage@temp,c
 15939  003CE6                     l11086:
 15940                           
 15941                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15942  003CE6  283A               	incf	ECANSendMessage@ptr,w,c
 15943  003CE8  6E0E               	movwf	?__CANIDToRegs,c
 15944  003CEA  0E00               	movlw	0
 15945  003CEC  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15946  003CEE  6E0F               	movwf	?__CANIDToRegs+1,c
 15947  003CF0  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15948  003CF4  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15949  003CF8  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15950  003CFC  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15951  003D00  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15952  003D04  EC12  F020         	call	__CANIDToRegs	;wreg free
 15953                           
 15954                           ;ECAN.c: 745: ptr += 6;
 15955  003D08  0E06               	movlw	6
 15956  003D0A  263A               	addwf	ECANSendMessage@ptr,f,c
 15957  003D0C  0E00               	movlw	0
 15958  003D0E  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15959                           
 15960                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15961  003D10  6A34               	clrf	ECANSendMessage@j,c
 15962  003D12  D00D               	goto	l11100
 15963  003D14                     l11092:
 15964                           
 15965                           ;ECAN.c: 748: *ptr++ = *data++;
 15966  003D14  501C               	movf	ECANSendMessage@data,w,c
 15967  003D16  6ED9               	movwf	fsr2l,c
 15968  003D18  6ADA               	clrf	fsr2h,c
 15969  003D1A  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15970  003D1E  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15971  003D22  CFDF FFE7          	movff	indf2,indf1
 15972  003D26  2A1C               	incf	ECANSendMessage@data,f,c
 15973  003D28  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15974  003D2A  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15975  003D2C  2A34               	incf	ECANSendMessage@j,f,c
 15976  003D2E                     l11100:
 15977  003D2E  501D               	movf	ECANSendMessage@dataLen,w,c
 15978  003D30  5C34               	subwf	ECANSendMessage@j,w,c
 15979  003D32  E3F0               	bnc	l11092
 15980                           
 15981                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15982  003D34  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15983  003D38  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15984  003D3C  50DF               	movf	indf2,w,c
 15985  003D3E  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15986  003D40  B41F               	btfsc	??_ECANSendMessage,2,c
 15987  003D42  D006               	goto	l11106
 15988                           
 15989                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15990  003D44  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15991  003D48  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15992  003D4C  0E00               	movlw	0
 15993  003D4E  86DB               	bsf	plusw2,3,c
 15994  003D50                     l11106:
 15995                           
 15996                           ;ECAN.c: 755: return TRUE;
 15997  003D50  0E01               	movlw	1
 15998  003D52  D005               	goto	l822
 15999  003D54                     l11110:
 16000  003D54  2A39               	incf	ECANSendMessage@i,f,c
 16001  003D56                     l11112:
 16002  003D56  5033               	movf	ECANSendMessage@buffers,w,c
 16003  003D58  5C39               	subwf	ECANSendMessage@i,w,c
 16004  003D5A  E382               	bnc	l11058
 16005                           
 16006                           ;ECAN.c: 756: }
 16007                           ;ECAN.c: 757: }
 16008                           ;ECAN.c: 760: return FALSE;
 16009  003D5C  0E00               	movlw	0
 16010  003D5E                     l822:
 16011  003D5E  0012               	return	
 16012  003D60                     __end_of_ECANSendMessage:
 16013                           	opt stack 0
 16014                           tblptru	equ	0xFF8
 16015                           tblptrh	equ	0xFF7
 16016                           tblptrl	equ	0xFF6
 16017                           tablat	equ	0xFF5
 16018                           prodh	equ	0xFF4
 16019                           prodl	equ	0xFF3
 16020                           postinc0	equ	0xFEE
 16021                           wreg	equ	0xFE8
 16022                           indf1	equ	0xFE7
 16023                           postdec1	equ	0xFE5
 16024                           fsr1h	equ	0xFE2
 16025                           fsr1l	equ	0xFE1
 16026                           indf2	equ	0xFDF
 16027                           postinc2	equ	0xFDE
 16028                           postdec2	equ	0xFDD
 16029                           plusw2	equ	0xFDB
 16030                           fsr2h	equ	0xFDA
 16031                           fsr2l	equ	0xFD9
 16032                           status	equ	0xFD8
 16033                           
 16034 ;; *************** function __CANIDToRegs *****************
 16035 ;; Defined at:
 16036 ;;		line 1099 in file "../ECAN.c"
 16037 ;; Parameters:    Size  Location     Type
 16038 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16039 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16040 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16041 ;;		 -> B0CON(1), 
 16042 ;;  val             4   15[COMRAM] unsigned long 
 16043 ;;  type            1   19[COMRAM] unsigned char 
 16044 ;; Auto vars:     Size  Location     Type
 16045 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 16046 ;;		 -> _CANIDToRegs@val(4), 
 16047 ;; Return value:  Size  Location     Type
 16048 ;;		None               void
 16049 ;; Registers used:
 16050 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16051 ;; Tracked objects:
 16052 ;;		On entry : 0/D
 16053 ;;		On exit  : 0/0
 16054 ;;		Unchanged: 0/0
 16055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16056 ;;      Params:         7       0       0       0       0       0       0
 16057 ;;      Locals:         1       0       0       0       0       0       0
 16058 ;;      Temps:          2       0       0       0       0       0       0
 16059 ;;      Totals:        10       0       0       0       0       0       0
 16060 ;;Total ram usage:       10 bytes
 16061 ;; Hardware stack levels used:    1
 16062 ;; Hardware stack levels required when called:    2
 16063 ;; This function calls:
 16064 ;;		Nothing
 16065 ;; This function is called by:
 16066 ;;		_ECANSendMessage
 16067 ;; This function uses a non-reentrant model
 16068 ;;
 16069                           
 16070                           	psect	text71
 16071  004024                     __ptext71:
 16072                           	opt stack 0
 16073  004024                     __CANIDToRegs:
 16074                           	opt stack 23
 16075                           
 16076                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16077                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16078                           
 16079                           ;incstack = 0
 16080                           ;incstack = 0
 16081  004024  0E10               	movlw	low __CANIDToRegs@val
 16082  004026  6E17               	movwf	__CANIDToRegs@Value,c
 16083                           
 16084                           ;ECAN.c: 1104: if ( type == 0 )
 16085  004028  6614               	tstfsz	__CANIDToRegs@type,c
 16086  00402A  D037               	goto	l11128
 16087                           
 16088                           ;ECAN.c: 1105: {
 16089                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16090  00402C  5017               	movf	__CANIDToRegs@Value,w,c
 16091  00402E  6ED9               	movwf	fsr2l,c
 16092  004030  6ADA               	clrf	fsr2h,c
 16093  004032  50DF               	movf	indf2,w,c
 16094  004034  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16095  004036  90D8               	bcf	status,0,c
 16096  004038  3215               	rrcf	??__CANIDToRegs,f,c
 16097  00403A  90D8               	bcf	status,0,c
 16098  00403C  3215               	rrcf	??__CANIDToRegs,f,c
 16099  00403E  90D8               	bcf	status,0,c
 16100  004040  3015               	rrcf	??__CANIDToRegs,w,c
 16101  004042  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16102  004046  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16103  00404A  6EDF               	movwf	indf2,c
 16104                           
 16105                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16106  00404C  5017               	movf	__CANIDToRegs@Value,w,c
 16107  00404E  6ED9               	movwf	fsr2l,c
 16108  004050  6ADA               	clrf	fsr2h,c
 16109  004052  2AD9               	incf	fsr2l,f,c
 16110  004054  6ADA               	clrf	fsr2h,c
 16111  004056  50DF               	movf	indf2,w,c
 16112  004058  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16113  00405A  0E05               	movlw	5
 16114  00405C  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16115  00405E                     u9105:
 16116  00405E  90D8               	bcf	status,0,c
 16117  004060  3615               	rlcf	??__CANIDToRegs,f,c
 16118  004062  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16119  004064  D7FC               	goto	u9105
 16120  004066  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16121  00406A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16122  00406E  5015               	movf	??__CANIDToRegs,w,c
 16123  004070  12DF               	iorwf	indf2,f,c
 16124                           
 16125                           ;ECAN.c: 1109: ptr++;
 16126  004072  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16127  004074  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16128                           
 16129                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16130  004076  5017               	movf	__CANIDToRegs@Value,w,c
 16131  004078  6ED9               	movwf	fsr2l,c
 16132  00407A  6ADA               	clrf	fsr2h,c
 16133  00407C  50DF               	movf	indf2,w,c
 16134  00407E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16135  004080  0E05               	movlw	5
 16136  004082  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16137  004084                     u9115:
 16138  004084  90D8               	bcf	status,0,c
 16139  004086  3615               	rlcf	??__CANIDToRegs,f,c
 16140  004088  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16141  00408A  D7FC               	goto	u9115
 16142  00408C  5015               	movf	??__CANIDToRegs,w,c
 16143  00408E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16144  004092  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16145  004096  6EDF               	movwf	indf2,c
 16146                           
 16147                           ;ECAN.c: 1111: }
 16148  004098  D06C               	goto	l876
 16149  00409A                     l11128:
 16150                           
 16151                           ;ECAN.c: 1112: else
 16152                           ;ECAN.c: 1113: {
 16153                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16154  00409A  5017               	movf	__CANIDToRegs@Value,w,c
 16155  00409C  6ED9               	movwf	fsr2l,c
 16156  00409E  6ADA               	clrf	fsr2h,c
 16157  0040A0  0E02               	movlw	2
 16158  0040A2  26D9               	addwf	fsr2l,f,c
 16159  0040A4  6ADA               	clrf	fsr2h,c
 16160  0040A6  50DF               	movf	indf2,w,c
 16161  0040A8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16162  0040AA  0E05               	movlw	5
 16163  0040AC  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16164  0040AE                     u9125:
 16165  0040AE  90D8               	bcf	status,0,c
 16166  0040B0  3215               	rrcf	??__CANIDToRegs,f,c
 16167  0040B2  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16168  0040B4  D7FC               	goto	u9125
 16169  0040B6  5015               	movf	??__CANIDToRegs,w,c
 16170  0040B8  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16171  0040BC  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16172  0040C0  6EDF               	movwf	indf2,c
 16173                           
 16174                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16175  0040C2  5017               	movf	__CANIDToRegs@Value,w,c
 16176  0040C4  6ED9               	movwf	fsr2l,c
 16177  0040C6  6ADA               	clrf	fsr2h,c
 16178  0040C8  0E03               	movlw	3
 16179  0040CA  26D9               	addwf	fsr2l,f,c
 16180  0040CC  6ADA               	clrf	fsr2h,c
 16181  0040CE  50DF               	movf	indf2,w,c
 16182  0040D0  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16183  0040D2  90D8               	bcf	status,0,c
 16184  0040D4  3615               	rlcf	??__CANIDToRegs,f,c
 16185  0040D6  90D8               	bcf	status,0,c
 16186  0040D8  3615               	rlcf	??__CANIDToRegs,f,c
 16187  0040DA  90D8               	bcf	status,0,c
 16188  0040DC  3615               	rlcf	??__CANIDToRegs,f,c
 16189  0040DE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16190  0040E2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16191  0040E6  5015               	movf	??__CANIDToRegs,w,c
 16192  0040E8  12DF               	iorwf	indf2,f,c
 16193                           
 16194                           ;ECAN.c: 1117: ptr++;
 16195  0040EA  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16196  0040EC  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16197                           
 16198                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16199  0040EE  5017               	movf	__CANIDToRegs@Value,w,c
 16200  0040F0  6ED9               	movwf	fsr2l,c
 16201  0040F2  6ADA               	clrf	fsr2h,c
 16202  0040F4  0E02               	movlw	2
 16203  0040F6  26D9               	addwf	fsr2l,f,c
 16204  0040F8  6ADA               	clrf	fsr2h,c
 16205  0040FA  50DF               	movf	indf2,w,c
 16206  0040FC  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16207  0040FE  90D8               	bcf	status,0,c
 16208  004100  3615               	rlcf	??__CANIDToRegs,f,c
 16209  004102  90D8               	bcf	status,0,c
 16210  004104  3615               	rlcf	??__CANIDToRegs,f,c
 16211  004106  90D8               	bcf	status,0,c
 16212  004108  3415               	rlcf	??__CANIDToRegs,w,c
 16213  00410A  0BE0               	andlw	224
 16214  00410C  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16215  004110  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16216  004114  6EDF               	movwf	indf2,c
 16217                           
 16218                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16219  004116  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16220  00411A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16221  00411E  0E00               	movlw	0
 16222  004120  86DB               	bsf	plusw2,3,c
 16223                           
 16224                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16225  004122  5017               	movf	__CANIDToRegs@Value,w,c
 16226  004124  6ED9               	movwf	fsr2l,c
 16227  004126  6ADA               	clrf	fsr2h,c
 16228  004128  0E02               	movlw	2
 16229  00412A  26D9               	addwf	fsr2l,f,c
 16230  00412C  6ADA               	clrf	fsr2h,c
 16231  00412E  50DF               	movf	indf2,w,c
 16232  004130  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16233  004132  0E03               	movlw	3
 16234  004134  1615               	andwf	??__CANIDToRegs,f,c
 16235  004136  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16236  00413A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16237  00413E  5015               	movf	??__CANIDToRegs,w,c
 16238  004140  12DF               	iorwf	indf2,f,c
 16239                           
 16240                           ;ECAN.c: 1122: ptr++;
 16241  004142  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16242  004144  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16243                           
 16244                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16245  004146  5017               	movf	__CANIDToRegs@Value,w,c
 16246  004148  6ED9               	movwf	fsr2l,c
 16247  00414A  6ADA               	clrf	fsr2h,c
 16248  00414C  2AD9               	incf	fsr2l,f,c
 16249  00414E  6ADA               	clrf	fsr2h,c
 16250  004150  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16251  004154  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16252  004158  CFDF FFE7          	movff	indf2,indf1
 16253                           
 16254                           ;ECAN.c: 1124: ptr++;
 16255  00415C  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16256  00415E  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16257                           
 16258                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16259  004160  5017               	movf	__CANIDToRegs@Value,w,c
 16260  004162  6ED9               	movwf	fsr2l,c
 16261  004164  6ADA               	clrf	fsr2h,c
 16262  004166  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16263  00416A  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16264  00416E  CFDF FFE7          	movff	indf2,indf1
 16265  004172                     l876:
 16266  004172  0012               	return	
 16267  004174                     __end_of__CANIDToRegs:
 16268                           	opt stack 0
 16269                           tblptru	equ	0xFF8
 16270                           tblptrh	equ	0xFF7
 16271                           tblptrl	equ	0xFF6
 16272                           tablat	equ	0xFF5
 16273                           prodh	equ	0xFF4
 16274                           prodl	equ	0xFF3
 16275                           postinc0	equ	0xFEE
 16276                           wreg	equ	0xFE8
 16277                           indf1	equ	0xFE7
 16278                           postdec1	equ	0xFE5
 16279                           fsr1h	equ	0xFE2
 16280                           fsr1l	equ	0xFE1
 16281                           indf2	equ	0xFDF
 16282                           postinc2	equ	0xFDE
 16283                           postdec2	equ	0xFDD
 16284                           plusw2	equ	0xFDB
 16285                           fsr2h	equ	0xFDA
 16286                           fsr2l	equ	0xFD9
 16287                           status	equ	0xFD8
 16288                           
 16289 ;; *************** function _vscp_getEvent *****************
 16290 ;; Defined at:
 16291 ;;		line 1292 in file "../../vscp_firmware/common/vscp_firmware.c"
 16292 ;; Parameters:    Size  Location     Type
 16293 ;;		None
 16294 ;; Auto vars:     Size  Location     Type
 16295 ;;  rv              1   49[COMRAM] unsigned char 
 16296 ;; Return value:  Size  Location     Type
 16297 ;;                  1    wreg      unsigned char 
 16298 ;; Registers used:
 16299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16300 ;; Tracked objects:
 16301 ;;		On entry : F/0
 16302 ;;		On exit  : 0/0
 16303 ;;		Unchanged: 0/0
 16304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16305 ;;      Params:         0       0       0       0       0       0       0
 16306 ;;      Locals:         1       0       0       0       0       0       0
 16307 ;;      Temps:          0       0       0       0       0       0       0
 16308 ;;      Totals:         1       0       0       0       0       0       0
 16309 ;;Total ram usage:        1 bytes
 16310 ;; Hardware stack levels used:    1
 16311 ;; Hardware stack levels required when called:    6
 16312 ;; This function calls:
 16313 ;;		_getVSCPFrame
 16314 ;; This function is called by:
 16315 ;;		_main
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           	psect	text72
 16320  005694                     __ptext72:
 16321                           	opt stack 0
 16322  005694                     _vscp_getEvent:
 16323                           	opt stack 24
 16324                           
 16325                           ; BSR set to: 0
 16326                           ;vscp_firmware.c: 1293: int8_t rv;
 16327                           ;vscp_firmware.c: 1299: if (vscp_imsg.flags & 0x80) return !0;
 16328                           
 16329                           ;incstack = 0
 16330                           ;incstack = 0
 16331  005694  BFBC               	btfsc	_vscp_imsg& (0+255),7,b
 16332  005696  D012               	goto	l1270
 16333                           
 16334                           ; BSR set to: 0
 16335                           ;vscp_firmware.c: 1302: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 16336                           ;vscp_firmware.c: 1303: &vscp_imsg.vscp_type,
 16337                           ;vscp_firmware.c: 1304: &vscp_imsg.oaddr,
 16338                           ;vscp_firmware.c: 1305: &vscp_imsg.priority,
 16339                           ;vscp_firmware.c: 1306: &vscp_imsg.flags,
 16340                           ;vscp_firmware.c: 1307: vscp_imsg.data))) {
 16341  005698  0EC0               	movlw	low (_vscp_imsg+4)
 16342  00569A  6E24               	movwf	?_getVSCPFrame,c
 16343  00569C  0EC1               	movlw	low (_vscp_imsg+5)
 16344  00569E  6E25               	movwf	?_getVSCPFrame+1,c
 16345  0056A0  0EBD               	movlw	low (_vscp_imsg+1)
 16346  0056A2  6E26               	movwf	?_getVSCPFrame+2,c
 16347  0056A4  0EBC               	movlw	low _vscp_imsg
 16348  0056A6  6E27               	movwf	?_getVSCPFrame+3,c
 16349  0056A8  0EC2               	movlw	low (_vscp_imsg+6)
 16350  0056AA  6E28               	movwf	?_getVSCPFrame+4,c
 16351  0056AC  0EBE               	movlw	(_vscp_imsg+2)& (0+255)
 16352  0056AE  ECAE  F027         	call	_getVSCPFrame
 16353  0056B2  6E32               	movwf	vscp_getEvent@rv,c
 16354  0056B4  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16355  0056B6  E002               	bz	l1270
 16356                           
 16357                           ;vscp_firmware.c: 1309: vscp_imsg.flags |= 0x80;
 16358  0056B8  0100               	movlb	0	; () banked
 16359  0056BA  8FBC               	bsf	_vscp_imsg& (0+255),7,b
 16360  0056BC                     l1270:
 16361  0056BC  0012               	return	
 16362  0056BE                     __end_of_vscp_getEvent:
 16363                           	opt stack 0
 16364                           tblptru	equ	0xFF8
 16365                           tblptrh	equ	0xFF7
 16366                           tblptrl	equ	0xFF6
 16367                           tablat	equ	0xFF5
 16368                           prodh	equ	0xFF4
 16369                           prodl	equ	0xFF3
 16370                           postinc0	equ	0xFEE
 16371                           wreg	equ	0xFE8
 16372                           indf1	equ	0xFE7
 16373                           postdec1	equ	0xFE5
 16374                           fsr1h	equ	0xFE2
 16375                           fsr1l	equ	0xFE1
 16376                           indf2	equ	0xFDF
 16377                           postinc2	equ	0xFDE
 16378                           postdec2	equ	0xFDD
 16379                           plusw2	equ	0xFDB
 16380                           fsr2h	equ	0xFDA
 16381                           fsr2l	equ	0xFD9
 16382                           status	equ	0xFD8
 16383                           
 16384 ;; *************** function _getVSCPFrame *****************
 16385 ;; Defined at:
 16386 ;;		line 2862 in file "../main.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16389 ;;		 -> vscp_imsg(14), 
 16390 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16391 ;;		 -> vscp_imsg(14), 
 16392 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16393 ;;		 -> vscp_imsg(14), 
 16394 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16395 ;;		 -> vscp_imsg(14), 
 16396 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16397 ;;		 -> vscp_imsg(14), 
 16398 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16399 ;;		 -> vscp_imsg(14), 
 16400 ;; Auto vars:     Size  Location     Type
 16401 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16402 ;;		 -> vscp_imsg(14), 
 16403 ;;  id              4   45[COMRAM] unsigned long 
 16404 ;; Return value:  Size  Location     Type
 16405 ;;                  1    wreg      unsigned char 
 16406 ;; Registers used:
 16407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16408 ;; Tracked objects:
 16409 ;;		On entry : F/0
 16410 ;;		On exit  : 0/0
 16411 ;;		Unchanged: 0/0
 16412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16413 ;;      Params:         5       0       0       0       0       0       0
 16414 ;;      Locals:         5       0       0       0       0       0       0
 16415 ;;      Temps:          4       0       0       0       0       0       0
 16416 ;;      Totals:        14       0       0       0       0       0       0
 16417 ;;Total ram usage:       14 bytes
 16418 ;; Hardware stack levels used:    1
 16419 ;; Hardware stack levels required when called:    5
 16420 ;; This function calls:
 16421 ;;		_getCANFrame
 16422 ;; This function is called by:
 16423 ;;		_vscp_getEvent
 16424 ;; This function uses a non-reentrant model
 16425 ;;
 16426                           
 16427                           	psect	text73
 16428  004F5C                     __ptext73:
 16429                           	opt stack 0
 16430  004F5C                     _getVSCPFrame:
 16431                           	opt stack 24
 16432                           
 16433                           ;incstack = 0
 16434                           ;incstack = 0
 16435                           ;getVSCPFrame@pvscpclass stored from wreg
 16436  004F5C  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16437                           
 16438                           ; BSR set to: 0
 16439                           ;main.c: 2863: uint32_t id;
 16440                           ;main.c: 2865: if (!getCANFrame(&id, pSize, pData)) {
 16441  004F60  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16442  004F64  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16443  004F68  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16444  004F6A  EC0A  F02B         	call	_getCANFrame
 16445  004F6E  0900               	iorlw	0
 16446  004F70  E102               	bnz	l8116
 16447                           
 16448                           ;main.c: 2866: return 0;
 16449  004F72  0E00               	movlw	0
 16450  004F74  D02E               	goto	l620
 16451  004F76                     l8116:
 16452                           
 16453                           ;main.c: 2867: }
 16454                           ;main.c: 2869: *pNodeId = id & 0x0ff;
 16455  004F76  5025               	movf	getVSCPFrame@pNodeId,w,c
 16456  004F78  6ED9               	movwf	fsr2l,c
 16457  004F7A  6ADA               	clrf	fsr2h,c
 16458  004F7C  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16459                           
 16460                           ;main.c: 2870: *pvscptype = (id >> 8) & 0xff;
 16461  004F80  5024               	movf	getVSCPFrame@pvscptype,w,c
 16462  004F82  6ED9               	movwf	fsr2l,c
 16463  004F84  6ADA               	clrf	fsr2h,c
 16464  004F86  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16465                           
 16466                           ;main.c: 2871: *pvscpclass = (id >> 16) & 0x1ff;
 16467  004F8A  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16468  004F8C  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16469  004F8E  0E01               	movlw	1
 16470  004F90  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16471  004F92  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16472  004F94  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16473  004F96  6ED9               	movwf	fsr2l,c
 16474  004F98  6ADA               	clrf	fsr2h,c
 16475  004F9A  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16476  004F9E  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16477                           
 16478                           ;main.c: 2872: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16479  004FA2  5026               	movf	getVSCPFrame@pPriority,w,c
 16480  004FA4  6ED9               	movwf	fsr2l,c
 16481  004FA6  6ADA               	clrf	fsr2h,c
 16482  004FA8  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16483  004FAC  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16484  004FB0  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16485  004FB4  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16486  004FB8  0E1B               	movlw	27
 16487  004FBA  D005               	goto	u5430
 16488  004FBC                     u5435:
 16489  004FBC  90D8               	bcf	status,0,c
 16490  004FBE  322C               	rrcf	??_getVSCPFrame+3,f,c
 16491  004FC0  322B               	rrcf	??_getVSCPFrame+2,f,c
 16492  004FC2  322A               	rrcf	??_getVSCPFrame+1,f,c
 16493  004FC4  3229               	rrcf	??_getVSCPFrame,f,c
 16494  004FC6                     u5430:
 16495  004FC6  2EE8               	decfsz	wreg,f,c
 16496  004FC8  D7F9               	goto	u5435
 16497  004FCA  5029               	movf	??_getVSCPFrame,w,c
 16498  004FCC  0B07               	andlw	7
 16499  004FCE  6EDF               	movwf	indf2,c
 16500                           
 16501                           ;main.c: 2874: return 1;
 16502  004FD0  0E01               	movlw	1
 16503  004FD2                     l620:
 16504  004FD2  0012               	return	
 16505  004FD4                     __end_of_getVSCPFrame:
 16506                           	opt stack 0
 16507                           tblptru	equ	0xFF8
 16508                           tblptrh	equ	0xFF7
 16509                           tblptrl	equ	0xFF6
 16510                           tablat	equ	0xFF5
 16511                           prodh	equ	0xFF4
 16512                           prodl	equ	0xFF3
 16513                           postinc0	equ	0xFEE
 16514                           wreg	equ	0xFE8
 16515                           indf1	equ	0xFE7
 16516                           postdec1	equ	0xFE5
 16517                           fsr1h	equ	0xFE2
 16518                           fsr1l	equ	0xFE1
 16519                           indf2	equ	0xFDF
 16520                           postinc2	equ	0xFDE
 16521                           postdec2	equ	0xFDD
 16522                           plusw2	equ	0xFDB
 16523                           fsr2h	equ	0xFDA
 16524                           fsr2l	equ	0xFD9
 16525                           status	equ	0xFD8
 16526                           
 16527 ;; *************** function _getCANFrame *****************
 16528 ;; Defined at:
 16529 ;;		line 2904 in file "../main.c"
 16530 ;; Parameters:    Size  Location     Type
 16531 ;;  pid             1    wreg     PTR unsigned long 
 16532 ;;		 -> getVSCPFrame@id(4), 
 16533 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16534 ;;		 -> vscp_imsg(14), 
 16535 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16536 ;;		 -> vscp_imsg(14), 
 16537 ;; Auto vars:     Size  Location     Type
 16538 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16539 ;;		 -> getVSCPFrame@id(4), 
 16540 ;;  flags           1   34[COMRAM] enum E16409
 16541 ;; Return value:  Size  Location     Type
 16542 ;;                  1    wreg      unsigned char 
 16543 ;; Registers used:
 16544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16545 ;; Tracked objects:
 16546 ;;		On entry : F/0
 16547 ;;		On exit  : 0/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16550 ;;      Params:         2       0       0       0       0       0       0
 16551 ;;      Locals:         2       0       0       0       0       0       0
 16552 ;;      Temps:          0       0       0       0       0       0       0
 16553 ;;      Totals:         4       0       0       0       0       0       0
 16554 ;;Total ram usage:        4 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; Hardware stack levels required when called:    4
 16557 ;; This function calls:
 16558 ;;		_ECANReceiveMessage
 16559 ;; This function is called by:
 16560 ;;		_getVSCPFrame
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           	psect	text74
 16565  005614                     __ptext74:
 16566                           	opt stack 0
 16567  005614                     _getCANFrame:
 16568                           	opt stack 24
 16569                           
 16570                           ;incstack = 0
 16571                           ;incstack = 0
 16572                           ;getCANFrame@pid stored from wreg
 16573  005614  CFE8 F022          	movff	wreg,getCANFrame@pid
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;main.c: 2905: ECAN_RX_MSG_FLAGS flags;
 16577                           ;main.c: 2909: if (vscp_imsg.flags & 0x80) return 0;
 16578  005618  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 16579  00561A  D002               	goto	l8132
 16580  00561C                     l8128:
 16581  00561C  0E00               	movlw	0
 16582  00561E  D00F               	goto	l631
 16583  005620                     l8132:
 16584                           
 16585                           ; BSR set to: 0
 16586                           ;main.c: 2911: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16587  005620  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16588  005624  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16589  005628  0E23               	movlw	low getCANFrame@flags
 16590  00562A  6E17               	movwf	?_ECANReceiveMessage+2,c
 16591  00562C  5022               	movf	getCANFrame@pid,w,c
 16592  00562E  EC1A  F01A         	call	_ECANReceiveMessage
 16593  005632  0900               	iorlw	0
 16594  005634  E0F3               	bz	l8128
 16595                           
 16596                           ;main.c: 2913: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16597  005636  AC23               	btfss	getCANFrame@flags,6,c
 16598                           
 16599                           ;main.c: 2916: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16600  005638  AA23               	btfss	getCANFrame@flags,5,c
 16601  00563A  D7F0               	goto	l8128
 16602                           
 16603                           ;main.c: 2918: return 1;
 16604  00563C  0E01               	movlw	1
 16605  00563E                     l631:
 16606  00563E  0012               	return	
 16607  005640                     __end_of_getCANFrame:
 16608                           	opt stack 0
 16609                           tblptru	equ	0xFF8
 16610                           tblptrh	equ	0xFF7
 16611                           tblptrl	equ	0xFF6
 16612                           tablat	equ	0xFF5
 16613                           prodh	equ	0xFF4
 16614                           prodl	equ	0xFF3
 16615                           postinc0	equ	0xFEE
 16616                           wreg	equ	0xFE8
 16617                           indf1	equ	0xFE7
 16618                           postdec1	equ	0xFE5
 16619                           fsr1h	equ	0xFE2
 16620                           fsr1l	equ	0xFE1
 16621                           indf2	equ	0xFDF
 16622                           postinc2	equ	0xFDE
 16623                           postdec2	equ	0xFDD
 16624                           plusw2	equ	0xFDB
 16625                           fsr2h	equ	0xFDA
 16626                           fsr2l	equ	0xFD9
 16627                           status	equ	0xFD8
 16628                           
 16629 ;; *************** function _ECANReceiveMessage *****************
 16630 ;; Defined at:
 16631 ;;		line 803 in file "../ECAN.c"
 16632 ;; Parameters:    Size  Location     Type
 16633 ;;  id              1    wreg     PTR unsigned long 
 16634 ;;		 -> getVSCPFrame@id(4), 
 16635 ;;  data            1   20[COMRAM] PTR unsigned char 
 16636 ;;		 -> vscp_imsg(14), 
 16637 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16638 ;;		 -> vscp_imsg(14), 
 16639 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16640 ;;		 -> getCANFrame@flags(1), 
 16641 ;; Auto vars:     Size  Location     Type
 16642 ;;  id              1   25[COMRAM] PTR unsigned long 
 16643 ;;		 -> getVSCPFrame@id(4), 
 16644 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16645 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16646 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16647 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16648 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16649 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16650 ;;  temp            1   28[COMRAM] struct .
 16651 ;;  mode            1   27[COMRAM] unsigned char 
 16652 ;;  i               1   26[COMRAM] unsigned char 
 16653 ;; Return value:  Size  Location     Type
 16654 ;;                  1    wreg      enum E15660
 16655 ;; Registers used:
 16656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16657 ;; Tracked objects:
 16658 ;;		On entry : F/0
 16659 ;;		On exit  : 0/0
 16660 ;;		Unchanged: 0/0
 16661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16662 ;;      Params:         3       0       0       0       0       0       0
 16663 ;;      Locals:         8       0       0       0       0       0       0
 16664 ;;      Temps:          0       0       0       0       0       0       0
 16665 ;;      Totals:        11       0       0       0       0       0       0
 16666 ;;Total ram usage:       11 bytes
 16667 ;; Hardware stack levels used:    1
 16668 ;; Hardware stack levels required when called:    3
 16669 ;; This function calls:
 16670 ;;		__ECANPointBuffer
 16671 ;;		__RegsToCANID
 16672 ;; This function is called by:
 16673 ;;		_getCANFrame
 16674 ;; This function uses a non-reentrant model
 16675 ;;
 16676                           
 16677                           	psect	text75
 16678  003434                     __ptext75:
 16679                           	opt stack 0
 16680  003434                     _ECANReceiveMessage:
 16681                           	opt stack 24
 16682                           
 16683                           ;incstack = 0
 16684                           ;incstack = 0
 16685                           ;ECANReceiveMessage@id stored from wreg
 16686  003434  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;ECAN.c: 805: BYTE mode;
 16690                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16691                           ;ECAN.c: 809: char i;
 16692                           ;ECAN.c: 810: BYTE_VAL temp;
 16693                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16694  003438  6A48               	clrf	__ECANRxFilterHitInfo,c
 16695                           
 16696                           ; BSR set to: 0
 16697                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16698  00343A  5077               	movf	3959,w,c	;volatile
 16699  00343C  0BC0               	andlw	192
 16700  00343E  6E1C               	movwf	ECANReceiveMessage@mode,c
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;ECAN.c: 816: if ( mode == 0x00 )
 16704  003440  661C               	tstfsz	ECANReceiveMessage@mode,c
 16705  003442  D032               	goto	l8264
 16706                           
 16707                           ; BSR set to: 0
 16708                           ;ECAN.c: 822: {
 16709                           ;ECAN.c: 824: if ( RXB0FUL )
 16710  003444  AE60               	btfss	3936,7,c	;volatile
 16711  003446  D012               	goto	l827
 16712                           
 16713                           ; BSR set to: 0
 16714                           ;ECAN.c: 825: {
 16715                           ;ECAN.c: 827: RXB0IF = 0;
 16716  003448  90A4               	bcf	4004,0,c	;volatile
 16717                           
 16718                           ;ECAN.c: 830: if ( RXB0OVFL )
 16719  00344A  AE74               	btfss	3956,7,c	;volatile
 16720  00344C  D006               	goto	l8240
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;ECAN.c: 831: {
 16724                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16725  00344E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16726  003450  6ED9               	movwf	fsr2l,c
 16727  003452  6ADA               	clrf	fsr2h,c
 16728  003454  0E00               	movlw	0
 16729  003456  86DB               	bsf	plusw2,3,c
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;ECAN.c: 833: RXB0OVFL = 0;
 16733  003458  9E74               	bcf	3956,7,c	;volatile
 16734  00345A                     l8240:
 16735                           
 16736                           ; BSR set to: 0
 16737                           ;ECAN.c: 834: }
 16738                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16739  00345A  A060               	btfss	3936,0,c	;volatile
 16740  00345C  D002               	bra	u5605
 16741  00345E  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16742  003460  D001               	bra	u5607
 16743  003462                     u5605:
 16744  003462  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16745  003464                     u5607:
 16746                           
 16747                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16748  003464  0E0F               	movlw	15	;volatile
 16749  003466  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16750  003468  0E60               	movlw	96	;volatile
 16751  00346A  D01A               	goto	L115
 16752  00346C                     l827:
 16753                           
 16754                           ; BSR set to: 0
 16755                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16756  00346C  010F               	movlb	15	; () banked
 16757  00346E  AF50               	btfss	80,7,b	;volatile
 16758  003470  D019               	goto	l8258
 16759                           
 16760                           ; BSR set to: 15
 16761                           ;ECAN.c: 842: {
 16762                           ;ECAN.c: 844: RXB1IF = 0;
 16763  003472  92A4               	bcf	4004,1,c	;volatile
 16764                           
 16765                           ;ECAN.c: 847: if ( RXB1OVFL )
 16766  003474  AC74               	btfss	3956,6,c	;volatile
 16767  003476  D006               	goto	l8250
 16768                           
 16769                           ; BSR set to: 15
 16770                           ;ECAN.c: 848: {
 16771                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16772  003478  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16773  00347A  6ED9               	movwf	fsr2l,c
 16774  00347C  6ADA               	clrf	fsr2h,c
 16775  00347E  0E00               	movlw	0
 16776  003480  86DB               	bsf	plusw2,3,c
 16777                           
 16778                           ; BSR set to: 15
 16779                           ;ECAN.c: 850: RXB1OVFL = 0;
 16780  003482  9C74               	bcf	3956,6,c	;volatile
 16781  003484                     l8250:
 16782                           
 16783                           ; BSR set to: 15
 16784                           ;ECAN.c: 851: }
 16785                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16786  003484  5150               	movf	80,w,b	;volatile
 16787  003486  0B07               	andlw	7
 16788  003488  6E48               	movwf	__ECANRxFilterHitInfo,c
 16789                           
 16790                           ; BSR set to: 15
 16791                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16792  00348A  0E02               	movlw	2
 16793  00348C  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16794  00348E  D005               	goto	l8256
 16795                           
 16796                           ; BSR set to: 15
 16797                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16798  003490  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16799  003492  6ED9               	movwf	fsr2l,c
 16800  003494  6ADA               	clrf	fsr2h,c
 16801  003496  0E00               	movlw	0
 16802  003498  8EDB               	bsf	plusw2,7,c
 16803  00349A                     l8256:
 16804                           
 16805                           ; BSR set to: 15
 16806                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16807  00349A  0E0F               	movlw	15	;volatile
 16808  00349C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16809  00349E  0E50               	movlw	80	;volatile
 16810  0034A0                     L115:
 16811  0034A0  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16812                           
 16813                           ;ECAN.c: 860: }
 16814  0034A2  D065               	goto	l8318
 16815  0034A4                     l8258:
 16816                           
 16817                           ;ECAN.c: 861: else
 16818                           ;ECAN.c: 862: return FALSE;
 16819  0034A4  0E00               	movlw	0
 16820  0034A6  D0CC               	goto	l834
 16821  0034A8                     l8264:
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16825  0034A8  501C               	movf	ECANReceiveMessage@mode,w,c
 16826  0034AA  0A40               	xorlw	64
 16827  0034AC  E146               	bnz	l837
 16828                           
 16829                           ; BSR set to: 0
 16830                           ;ECAN.c: 875: {
 16831                           ;ECAN.c: 876: if ( RXB0FUL )
 16832  0034AE  AE60               	btfss	3936,7,c	;volatile
 16833  0034B0  D004               	goto	l838
 16834                           
 16835                           ; BSR set to: 0
 16836                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16837  0034B2  0E0F               	movlw	15	;volatile
 16838  0034B4  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16839  0034B6  0E60               	movlw	96	;volatile
 16840  0034B8  D03E               	goto	L122
 16841  0034BA                     l838:
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16845  0034BA  010F               	movlb	15	; () banked
 16846  0034BC  AF50               	btfss	80,7,b	;volatile
 16847  0034BE  D004               	goto	l840
 16848                           
 16849                           ; BSR set to: 15
 16850                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16851  0034C0  0E0F               	movlw	15	;volatile
 16852  0034C2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16853  0034C4  0E50               	movlw	80	;volatile
 16854  0034C6  D037               	goto	L122
 16855  0034C8                     l840:
 16856                           
 16857                           ; BSR set to: 15
 16858                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16859  0034C8  010D               	movlb	13
 16860  0034CA  B5F8               	btfsc	248,2,b	;volatile
 16861  0034CC  D007               	goto	l842
 16862  0034CE  010E               	movlb	14
 16863  0034D0  AF20               	btfss	32,7,b	;volatile
 16864  0034D2  D004               	goto	l842
 16865                           
 16866                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16867  0034D4  0E0E               	movlw	14	;volatile
 16868  0034D6  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16869  0034D8  0E20               	movlw	32	;volatile
 16870  0034DA  D02D               	goto	L122
 16871  0034DC                     l842:
 16872                           
 16873                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16874  0034DC  010D               	movlb	13
 16875  0034DE  B7F8               	btfsc	248,3,b	;volatile
 16876  0034E0  D007               	goto	l844
 16877  0034E2  010E               	movlb	14
 16878  0034E4  AF30               	btfss	48,7,b	;volatile
 16879  0034E6  D004               	goto	l844
 16880                           
 16881                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16882  0034E8  0E0E               	movlw	14	;volatile
 16883  0034EA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16884  0034EC  0E30               	movlw	48	;volatile
 16885  0034EE  D023               	goto	L122
 16886  0034F0                     l844:
 16887                           
 16888                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16889  0034F0  010D               	movlb	13
 16890  0034F2  B9F8               	btfsc	248,4,b	;volatile
 16891  0034F4  D007               	goto	l846
 16892  0034F6  010E               	movlb	14
 16893  0034F8  AF40               	btfss	64,7,b	;volatile
 16894  0034FA  D004               	goto	l846
 16895                           
 16896                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16897  0034FC  0E0E               	movlw	14	;volatile
 16898  0034FE  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16899  003500  0E40               	movlw	64	;volatile
 16900  003502  D019               	goto	L122
 16901  003504                     l846:
 16902                           
 16903                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16904  003504  010D               	movlb	13
 16905  003506  BBF8               	btfsc	248,5,b	;volatile
 16906  003508  D005               	goto	l848
 16907  00350A  010E               	movlb	14
 16908  00350C  AF50               	btfss	80,7,b	;volatile
 16909  00350E  D002               	goto	l848
 16910                           
 16911                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16912  003510  0E0E               	movlw	14	;volatile
 16913  003512  D7D7               	goto	L123
 16914  003514                     l848:
 16915                           
 16916                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16917  003514  010D               	movlb	13
 16918  003516  BDF8               	btfsc	248,6,b	;volatile
 16919  003518  D005               	goto	l850
 16920  00351A  010E               	movlb	14
 16921  00351C  AF60               	btfss	96,7,b	;volatile
 16922  00351E  D002               	goto	l850
 16923                           
 16924                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16925  003520  0E0E               	movlw	14	;volatile
 16926  003522  D7C8               	goto	L124
 16927  003524                     l850:
 16928                           
 16929                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16930  003524  010D               	movlb	13
 16931  003526  BFF8               	btfsc	248,7,b	;volatile
 16932  003528  D7BD               	goto	l8258
 16933  00352A  010E               	movlb	14
 16934  00352C  AF70               	btfss	112,7,b	;volatile
 16935  00352E  D7BA               	goto	l8258
 16936                           
 16937                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16938  003530  0E0E               	movlw	14	;volatile
 16939  003532  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16940  003534  0E70               	movlw	112	;volatile
 16941  003536                     L122:
 16942  003536  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16943  003538  D00A               	goto	l8308
 16944  00353A                     l837:
 16945                           
 16946                           ; BSR set to: 0
 16947                           ;ECAN.c: 910: else
 16948                           ;ECAN.c: 915: {
 16949                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16950  00353A  AE74               	btfss	3956,7,c	;volatile
 16951  00353C  D7B3               	goto	l8258
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;ECAN.c: 917: {
 16955                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16956  00353E  506F               	movf	3951,w,c	;volatile
 16957  003540  0B07               	andlw	7
 16958  003542  ECEA  F027         	call	__ECANPointBuffer
 16959  003546  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16960  00354A  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16961  00354E                     l8308:
 16962                           
 16963                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16964  00354E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16965  003552  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16966  003556  50DF               	movf	indf2,w,c
 16967  003558  0B1F               	andlw	31
 16968  00355A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16969                           
 16970                           ;ECAN.c: 932: RXB1IF = 0;
 16971  00355C  92A4               	bcf	4004,1,c	;volatile
 16972                           
 16973                           ;ECAN.c: 934: if ( RXB1OVFL )
 16974  00355E  AC74               	btfss	3956,6,c	;volatile
 16975  003560  D006               	goto	l8318
 16976                           
 16977                           ;ECAN.c: 935: {
 16978                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16979  003562  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16980  003564  6ED9               	movwf	fsr2l,c
 16981  003566  6ADA               	clrf	fsr2h,c
 16982  003568  0E00               	movlw	0
 16983  00356A  86DB               	bsf	plusw2,3,c
 16984                           
 16985                           ;ECAN.c: 937: RXB1OVFL = 0;
 16986  00356C  9C74               	bcf	3956,6,c	;volatile
 16987  00356E                     l8318:
 16988                           
 16989                           ;ECAN.c: 942: savedPtr = ptr;
 16990  00356E  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16991  003572  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16992                           
 16993                           ;ECAN.c: 943: *msgFlags = 0;
 16994  003576  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16995  003578  6ED9               	movwf	fsr2l,c
 16996  00357A  6ADA               	clrf	fsr2h,c
 16997  00357C  6ADF               	clrf	indf2,c
 16998                           
 16999                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 17000  00357E  EE20 F005          	lfsr	2,5
 17001  003582  501E               	movf	ECANReceiveMessage@ptr,w,c
 17002  003584  26D9               	addwf	fsr2l,f,c
 17003  003586  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17004  003588  22DA               	addwfc	fsr2h,f,c
 17005  00358A  50DF               	movf	indf2,w,c
 17006  00358C  6E1D               	movwf	ECANReceiveMessage@temp,c
 17007                           
 17008                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 17009  00358E  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17010  003590  6ED9               	movwf	fsr2l,c
 17011  003592  6ADA               	clrf	fsr2h,c
 17012  003594  501D               	movf	ECANReceiveMessage@temp,w,c
 17013  003596  0B0F               	andlw	15
 17014  003598  6EDF               	movwf	indf2,c
 17015                           
 17016                           ;ECAN.c: 950: if ( temp.bits.b6 )
 17017  00359A  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 17018  00359C  D005               	goto	l858
 17019                           
 17020                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 17021  00359E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17022  0035A0  6ED9               	movwf	fsr2l,c
 17023  0035A2  6ADA               	clrf	fsr2h,c
 17024  0035A4  0E00               	movlw	0
 17025  0035A6  8CDB               	bsf	plusw2,6,c
 17026  0035A8                     l858:
 17027                           
 17028                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 17029  0035A8  EE20 F002          	lfsr	2,2
 17030  0035AC  501E               	movf	ECANReceiveMessage@ptr,w,c
 17031  0035AE  26D9               	addwf	fsr2l,f,c
 17032  0035B0  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 17033  0035B2  22DA               	addwfc	fsr2h,f,c
 17034  0035B4  50DF               	movf	indf2,w,c
 17035  0035B6  6E1D               	movwf	ECANReceiveMessage@temp,c
 17036                           
 17037                           ;ECAN.c: 955: if ( temp.bits.b3 )
 17038  0035B8  A61D               	btfss	ECANReceiveMessage@temp,3,c
 17039  0035BA  D008               	goto	l859
 17040                           
 17041                           ;ECAN.c: 956: {
 17042                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 17043  0035BC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17044  0035BE  6ED9               	movwf	fsr2l,c
 17045  0035C0  6ADA               	clrf	fsr2h,c
 17046  0035C2  0E00               	movlw	0
 17047  0035C4  8ADB               	bsf	plusw2,5,c
 17048                           
 17049                           ;ECAN.c: 958: temp.Val = 1;
 17050  0035C6  0E01               	movlw	1
 17051  0035C8  6E1D               	movwf	ECANReceiveMessage@temp,c
 17052                           
 17053                           ;ECAN.c: 959: }
 17054  0035CA  D001               	goto	l8336
 17055  0035CC                     l859:
 17056                           
 17057                           ;ECAN.c: 960: else
 17058                           ;ECAN.c: 961: temp.Val = 0;
 17059  0035CC  6A1D               	clrf	ECANReceiveMessage@temp,c
 17060  0035CE                     l8336:
 17061                           
 17062                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 17063  0035CE  281E               	incf	ECANReceiveMessage@ptr,w,c
 17064  0035D0  6E0E               	movwf	?__RegsToCANID,c
 17065  0035D2  0E00               	movlw	0
 17066  0035D4  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 17067  0035D6  6E0F               	movwf	?__RegsToCANID+1,c
 17068  0035D8  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 17069  0035DC  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 17070  0035E0  ECB0  F01E         	call	__RegsToCANID	;wreg free
 17071                           
 17072                           ;ECAN.c: 966: ptr += 6;
 17073  0035E4  0E06               	movlw	6
 17074  0035E6  261E               	addwf	ECANReceiveMessage@ptr,f,c
 17075  0035E8  0E00               	movlw	0
 17076  0035EA  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 17077                           
 17078                           ;ECAN.c: 967: temp.Val = *dataLen;
 17079  0035EC  5016               	movf	ECANReceiveMessage@dataLen,w,c
 17080  0035EE  6ED9               	movwf	fsr2l,c
 17081  0035F0  6ADA               	clrf	fsr2h,c
 17082  0035F2  50DF               	movf	indf2,w,c
 17083  0035F4  6E1D               	movwf	ECANReceiveMessage@temp,c
 17084                           
 17085                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 17086  0035F6  6A1B               	clrf	ECANReceiveMessage@i,c
 17087  0035F8  D00D               	goto	l8352
 17088  0035FA                     l8344:
 17089                           
 17090                           ;ECAN.c: 969: *data++ = *ptr++;
 17091  0035FA  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 17092  0035FE  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 17093  003602  5015               	movf	ECANReceiveMessage@data,w,c
 17094  003604  6EE1               	movwf	fsr1l,c
 17095  003606  6AE2               	clrf	fsr1h,c
 17096  003608  CFDF FFE7          	movff	indf2,indf1
 17097  00360C  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 17098  00360E  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 17099  003610  2A15               	incf	ECANReceiveMessage@data,f,c
 17100  003612  2A1B               	incf	ECANReceiveMessage@i,f,c
 17101  003614                     l8352:
 17102  003614  501D               	movf	ECANReceiveMessage@temp,w,c
 17103  003616  5C1B               	subwf	ECANReceiveMessage@i,w,c
 17104  003618  E3F0               	bnc	l8344
 17105                           
 17106                           ;ECAN.c: 972: if ( IRXIF )
 17107  00361A  AEA4               	btfss	4004,7,c	;volatile
 17108  00361C  D006               	goto	l8358
 17109                           
 17110                           ;ECAN.c: 973: {
 17111                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 17112  00361E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 17113  003620  6ED9               	movwf	fsr2l,c
 17114  003622  6ADA               	clrf	fsr2h,c
 17115  003624  0E00               	movlw	0
 17116  003626  88DB               	bsf	plusw2,4,c
 17117                           
 17118                           ;ECAN.c: 975: IRXIF = 0;
 17119  003628  9EA4               	bcf	4004,7,c	;volatile
 17120  00362A                     l8358:
 17121                           
 17122                           ;ECAN.c: 976: }
 17123                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17124  00362A  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17125  00362E  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17126  003632  0E7F               	movlw	127
 17127  003634  16DF               	andwf	indf2,f,c
 17128                           
 17129                           ;ECAN.c: 983: if ( mode == 0x80 )
 17130  003636  501C               	movf	ECANReceiveMessage@mode,w,c
 17131  003638  0A80               	xorlw	128
 17132  00363A  B4D8               	btfsc	status,2,c
 17133                           
 17134                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17135  00363C  9E74               	bcf	3956,7,c	;volatile
 17136                           
 17137                           ;ECAN.c: 990: return TRUE;
 17138  00363E  0E01               	movlw	1
 17139  003640                     l834:
 17140  003640  0012               	return	
 17141  003642                     __end_of_ECANReceiveMessage:
 17142                           	opt stack 0
 17143                           tblptru	equ	0xFF8
 17144                           tblptrh	equ	0xFF7
 17145                           tblptrl	equ	0xFF6
 17146                           tablat	equ	0xFF5
 17147                           prodh	equ	0xFF4
 17148                           prodl	equ	0xFF3
 17149                           postinc0	equ	0xFEE
 17150                           wreg	equ	0xFE8
 17151                           indf1	equ	0xFE7
 17152                           postdec1	equ	0xFE5
 17153                           fsr1h	equ	0xFE2
 17154                           fsr1l	equ	0xFE1
 17155                           indf2	equ	0xFDF
 17156                           postinc2	equ	0xFDE
 17157                           postdec2	equ	0xFDD
 17158                           plusw2	equ	0xFDB
 17159                           fsr2h	equ	0xFDA
 17160                           fsr2l	equ	0xFD9
 17161                           status	equ	0xFD8
 17162                           
 17163 ;; *************** function __RegsToCANID *****************
 17164 ;; Defined at:
 17165 ;;		line 1156 in file "../ECAN.c"
 17166 ;; Parameters:    Size  Location     Type
 17167 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17168 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17169 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17170 ;;  val             1   15[COMRAM] PTR unsigned long 
 17171 ;;		 -> getVSCPFrame@id(4), 
 17172 ;;  type            1   16[COMRAM] unsigned char 
 17173 ;; Auto vars:     Size  Location     Type
 17174 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17175 ;;		 -> getVSCPFrame@id(4), 
 17176 ;; Return value:  Size  Location     Type
 17177 ;;		None               void
 17178 ;; Registers used:
 17179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17180 ;; Tracked objects:
 17181 ;;		On entry : 0/0
 17182 ;;		On exit  : 0/0
 17183 ;;		Unchanged: 0/0
 17184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17185 ;;      Params:         4       0       0       0       0       0       0
 17186 ;;      Locals:         1       0       0       0       0       0       0
 17187 ;;      Temps:          2       0       0       0       0       0       0
 17188 ;;      Totals:         7       0       0       0       0       0       0
 17189 ;;Total ram usage:        7 bytes
 17190 ;; Hardware stack levels used:    1
 17191 ;; Hardware stack levels required when called:    2
 17192 ;; This function calls:
 17193 ;;		Nothing
 17194 ;; This function is called by:
 17195 ;;		_ECANReceiveMessage
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199                           	psect	text76
 17200  003D60                     __ptext76:
 17201                           	opt stack 0
 17202  003D60                     __RegsToCANID:
 17203                           	opt stack 24
 17204                           
 17205                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17206                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17207                           
 17208                           ;incstack = 0
 17209                           ;incstack = 0
 17210  003D60  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17211                           
 17212                           ;ECAN.c: 1161: if ( type == 0 )
 17213  003D64  6611               	tstfsz	__RegsToCANID@type,c
 17214  003D66  D046               	goto	l8432
 17215                           
 17216                           ;ECAN.c: 1162: {
 17217                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17218  003D68  5014               	movf	__RegsToCANID@Value,w,c
 17219  003D6A  6ED9               	movwf	fsr2l,c
 17220  003D6C  6ADA               	clrf	fsr2h,c
 17221  003D6E  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17222  003D72  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17223  003D76  50E7               	movf	indf1,w,c
 17224  003D78  6E12               	movwf	??__RegsToCANID& (0+255),c
 17225  003D7A  90D8               	bcf	status,0,c
 17226  003D7C  3612               	rlcf	??__RegsToCANID,f,c
 17227  003D7E  90D8               	bcf	status,0,c
 17228  003D80  3612               	rlcf	??__RegsToCANID,f,c
 17229  003D82  90D8               	bcf	status,0,c
 17230  003D84  3412               	rlcf	??__RegsToCANID,w,c
 17231  003D86  6EDF               	movwf	indf2,c
 17232                           
 17233                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17234  003D88  5014               	movf	__RegsToCANID@Value,w,c
 17235  003D8A  6ED9               	movwf	fsr2l,c
 17236  003D8C  6ADA               	clrf	fsr2h,c
 17237  003D8E  2AD9               	incf	fsr2l,f,c
 17238  003D90  6ADA               	clrf	fsr2h,c
 17239  003D92  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17240  003D96  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17241  003D9A  50E7               	movf	indf1,w,c
 17242  003D9C  6E12               	movwf	??__RegsToCANID& (0+255),c
 17243  003D9E  0E05               	movlw	5
 17244  003DA0  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17245  003DA2                     u5925:
 17246  003DA2  90D8               	bcf	status,0,c
 17247  003DA4  3212               	rrcf	??__RegsToCANID,f,c
 17248  003DA6  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17249  003DA8  D7FC               	goto	u5925
 17250  003DAA  5012               	movf	??__RegsToCANID,w,c
 17251  003DAC  6EDF               	movwf	indf2,c
 17252                           
 17253                           ;ECAN.c: 1166: ptr++;
 17254  003DAE  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17255  003DB0  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17256                           
 17257                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17258  003DB2  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17259  003DB6  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17260  003DBA  50DF               	movf	indf2,w,c
 17261  003DBC  6E12               	movwf	??__RegsToCANID& (0+255),c
 17262  003DBE  0E05               	movlw	5
 17263  003DC0  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17264  003DC2                     u5935:
 17265  003DC2  90D8               	bcf	status,0,c
 17266  003DC4  3212               	rrcf	??__RegsToCANID,f,c
 17267  003DC6  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17268  003DC8  D7FC               	goto	u5935
 17269  003DCA  5014               	movf	__RegsToCANID@Value,w,c
 17270  003DCC  6ED9               	movwf	fsr2l,c
 17271  003DCE  6ADA               	clrf	fsr2h,c
 17272  003DD0  5012               	movf	??__RegsToCANID,w,c
 17273  003DD2  12DF               	iorwf	indf2,f,c
 17274                           
 17275                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17276  003DD4  5014               	movf	__RegsToCANID@Value,w,c
 17277  003DD6  6ED9               	movwf	fsr2l,c
 17278  003DD8  6ADA               	clrf	fsr2h,c
 17279  003DDA  0E02               	movlw	2
 17280  003DDC  26D9               	addwf	fsr2l,f,c
 17281  003DDE  6ADA               	clrf	fsr2h,c
 17282  003DE0  6ADF               	clrf	indf2,c
 17283                           
 17284                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17285  003DE2  5014               	movf	__RegsToCANID@Value,w,c
 17286  003DE4  6ED9               	movwf	fsr2l,c
 17287  003DE6  6ADA               	clrf	fsr2h,c
 17288  003DE8  0E03               	movlw	3
 17289  003DEA  26D9               	addwf	fsr2l,f,c
 17290  003DEC  6ADA               	clrf	fsr2h,c
 17291  003DEE  0E00               	movlw	0
 17292  003DF0  6EDF               	movwf	indf2,c
 17293                           
 17294                           ;ECAN.c: 1170: }
 17295  003DF2  D067               	goto	l881
 17296  003DF4                     l8432:
 17297                           
 17298                           ;ECAN.c: 1171: else
 17299                           ;ECAN.c: 1172: {
 17300                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17301  003DF4  5014               	movf	__RegsToCANID@Value,w,c
 17302  003DF6  6ED9               	movwf	fsr2l,c
 17303  003DF8  6ADA               	clrf	fsr2h,c
 17304  003DFA  0E02               	movlw	2
 17305  003DFC  26D9               	addwf	fsr2l,f,c
 17306  003DFE  6ADA               	clrf	fsr2h,c
 17307  003E00  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17308  003E04  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17309  003E08  50E7               	movf	indf1,w,c
 17310  003E0A  6E12               	movwf	??__RegsToCANID& (0+255),c
 17311  003E0C  0E05               	movlw	5
 17312  003E0E  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17313  003E10                     u5945:
 17314  003E10  90D8               	bcf	status,0,c
 17315  003E12  3612               	rlcf	??__RegsToCANID,f,c
 17316  003E14  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17317  003E16  D7FC               	goto	u5945
 17318  003E18  5012               	movf	??__RegsToCANID,w,c
 17319  003E1A  6EDF               	movwf	indf2,c
 17320                           
 17321                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17322  003E1C  5014               	movf	__RegsToCANID@Value,w,c
 17323  003E1E  6ED9               	movwf	fsr2l,c
 17324  003E20  6ADA               	clrf	fsr2h,c
 17325  003E22  0E03               	movlw	3
 17326  003E24  26D9               	addwf	fsr2l,f,c
 17327  003E26  6ADA               	clrf	fsr2h,c
 17328  003E28  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17329  003E2C  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17330  003E30  50E7               	movf	indf1,w,c
 17331  003E32  6E12               	movwf	??__RegsToCANID& (0+255),c
 17332  003E34  90D8               	bcf	status,0,c
 17333  003E36  3212               	rrcf	??__RegsToCANID,f,c
 17334  003E38  90D8               	bcf	status,0,c
 17335  003E3A  3212               	rrcf	??__RegsToCANID,f,c
 17336  003E3C  90D8               	bcf	status,0,c
 17337  003E3E  3012               	rrcf	??__RegsToCANID,w,c
 17338  003E40  6EDF               	movwf	indf2,c
 17339                           
 17340                           ;ECAN.c: 1176: ptr++;
 17341  003E42  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17342  003E44  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17343                           
 17344                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17345  003E46  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17346  003E4A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17347  003E4E  50DF               	movf	indf2,w,c
 17348  003E50  6E12               	movwf	??__RegsToCANID& (0+255),c
 17349  003E52  0E03               	movlw	3
 17350  003E54  1612               	andwf	??__RegsToCANID,f,c
 17351  003E56  5014               	movf	__RegsToCANID@Value,w,c
 17352  003E58  6ED9               	movwf	fsr2l,c
 17353  003E5A  6ADA               	clrf	fsr2h,c
 17354  003E5C  0E02               	movlw	2
 17355  003E5E  26D9               	addwf	fsr2l,f,c
 17356  003E60  6ADA               	clrf	fsr2h,c
 17357  003E62  5012               	movf	??__RegsToCANID,w,c
 17358  003E64  12DF               	iorwf	indf2,f,c
 17359                           
 17360                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17361  003E66  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17362  003E6A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17363  003E6E  50DF               	movf	indf2,w,c
 17364  003E70  6E12               	movwf	??__RegsToCANID& (0+255),c
 17365  003E72  90D8               	bcf	status,0,c
 17366  003E74  3212               	rrcf	??__RegsToCANID,f,c
 17367  003E76  90D8               	bcf	status,0,c
 17368  003E78  3212               	rrcf	??__RegsToCANID,f,c
 17369  003E7A  90D8               	bcf	status,0,c
 17370  003E7C  3212               	rrcf	??__RegsToCANID,f,c
 17371  003E7E  0E1C               	movlw	28
 17372  003E80  1612               	andwf	??__RegsToCANID,f,c
 17373  003E82  5014               	movf	__RegsToCANID@Value,w,c
 17374  003E84  6ED9               	movwf	fsr2l,c
 17375  003E86  6ADA               	clrf	fsr2h,c
 17376  003E88  0E02               	movlw	2
 17377  003E8A  26D9               	addwf	fsr2l,f,c
 17378  003E8C  6ADA               	clrf	fsr2h,c
 17379  003E8E  5012               	movf	??__RegsToCANID,w,c
 17380  003E90  12DF               	iorwf	indf2,f,c
 17381                           
 17382                           ;ECAN.c: 1180: ptr++;
 17383  003E92  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17384  003E94  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17385                           
 17386                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17387  003E96  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17388  003E9A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17389  003E9E  5014               	movf	__RegsToCANID@Value,w,c
 17390  003EA0  6EE1               	movwf	fsr1l,c
 17391  003EA2  6AE2               	clrf	fsr1h,c
 17392  003EA4  2AE1               	incf	fsr1l,f,c
 17393  003EA6  6AE2               	clrf	fsr1h,c
 17394  003EA8  CFDF FFE7          	movff	indf2,indf1
 17395                           
 17396                           ;ECAN.c: 1182: ptr++;
 17397  003EAC  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17398  003EAE  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17399                           
 17400                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17401  003EB0  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17402  003EB4  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17403  003EB8  5014               	movf	__RegsToCANID@Value,w,c
 17404  003EBA  6EE1               	movwf	fsr1l,c
 17405  003EBC  6AE2               	clrf	fsr1h,c
 17406  003EBE  CFDF FFE7          	movff	indf2,indf1
 17407  003EC2                     l881:
 17408  003EC2  0012               	return	
 17409  003EC4                     __end_of__RegsToCANID:
 17410                           	opt stack 0
 17411                           tblptru	equ	0xFF8
 17412                           tblptrh	equ	0xFF7
 17413                           tblptrl	equ	0xFF6
 17414                           tablat	equ	0xFF5
 17415                           prodh	equ	0xFF4
 17416                           prodl	equ	0xFF3
 17417                           postinc0	equ	0xFEE
 17418                           wreg	equ	0xFE8
 17419                           indf1	equ	0xFE7
 17420                           postdec1	equ	0xFE5
 17421                           fsr1h	equ	0xFE2
 17422                           fsr1l	equ	0xFE1
 17423                           indf2	equ	0xFDF
 17424                           postinc2	equ	0xFDE
 17425                           postdec2	equ	0xFDD
 17426                           plusw2	equ	0xFDB
 17427                           fsr2h	equ	0xFDA
 17428                           fsr2l	equ	0xFD9
 17429                           status	equ	0xFD8
 17430                           
 17431 ;; *************** function __ECANPointBuffer *****************
 17432 ;; Defined at:
 17433 ;;		line 1207 in file "../ECAN.c"
 17434 ;; Parameters:    Size  Location     Type
 17435 ;;  b               1    wreg     unsigned char 
 17436 ;; Auto vars:     Size  Location     Type
 17437 ;;  b               1   16[COMRAM] unsigned char 
 17438 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17439 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17440 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17441 ;; Return value:  Size  Location     Type
 17442 ;;                  2   13[COMRAM] PTR unsigned char 
 17443 ;; Registers used:
 17444 ;;		wreg, status,2, status,0
 17445 ;; Tracked objects:
 17446 ;;		On entry : F/0
 17447 ;;		On exit  : 0/0
 17448 ;;		Unchanged: 0/0
 17449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17450 ;;      Params:         3       0       0       0       0       0       0
 17451 ;;      Locals:         3       0       0       0       0       0       0
 17452 ;;      Temps:          0       0       0       0       0       0       0
 17453 ;;      Totals:         6       0       0       0       0       0       0
 17454 ;;Total ram usage:        6 bytes
 17455 ;; Hardware stack levels used:    1
 17456 ;; Hardware stack levels required when called:    2
 17457 ;; This function calls:
 17458 ;;		Nothing
 17459 ;; This function is called by:
 17460 ;;		_ECANReceiveMessage
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           	psect	text77
 17465  004FD4                     __ptext77:
 17466                           	opt stack 0
 17467  004FD4                     __ECANPointBuffer:
 17468                           	opt stack 24
 17469                           
 17470                           ;incstack = 0
 17471                           ;incstack = 0
 17472                           ;__ECANPointBuffer@b stored from wreg
 17473  004FD4  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17474                           
 17475                           ; BSR set to: 0
 17476                           ;ECAN.c: 1208: BYTE* pt;
 17477                           ;ECAN.c: 1210: switch(b)
 17478  004FD8  D024               	goto	l8418
 17479  004FDA                     l8400:
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17483  004FDA  0E0F               	movlw	15	;volatile
 17484  004FDC  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17485  004FDE  0E60               	movlw	96	;volatile
 17486  004FE0  D01E               	goto	L131
 17487  004FE2                     l8402:
 17488                           
 17489                           ; BSR set to: 0
 17490                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17491  004FE2  010F               	movlb	15	; () banked
 17492  004FE4  0E0F               	movlw	15	;volatile
 17493  004FE6  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17494  004FE8  0E50               	movlw	80	;volatile
 17495  004FEA  D019               	goto	L131
 17496  004FEC                     l8404:
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17500  004FEC  010E               	movlb	14	; () banked
 17501  004FEE  0E0E               	movlw	14	;volatile
 17502  004FF0  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17503  004FF2  0E20               	movlw	32	;volatile
 17504  004FF4  D014               	goto	L131
 17505  004FF6                     l8406:
 17506                           
 17507                           ; BSR set to: 0
 17508                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17509  004FF6  010E               	movlb	14	; () banked
 17510  004FF8  0E0E               	movlw	14	;volatile
 17511  004FFA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17512  004FFC  0E30               	movlw	48	;volatile
 17513  004FFE  D00F               	goto	L131
 17514  005000                     l8408:
 17515                           
 17516                           ; BSR set to: 0
 17517                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17518  005000  010E               	movlb	14	; () banked
 17519  005002  0E0E               	movlw	14	;volatile
 17520  005004  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17521  005006  0E40               	movlw	64	;volatile
 17522  005008  D00A               	goto	L131
 17523  00500A                     l8410:
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17527  00500A  010E               	movlb	14	; () banked
 17528  00500C  0E0E               	movlw	14	;volatile
 17529  00500E  D7EB               	goto	L132
 17530  005010                     l8412:
 17531                           
 17532                           ; BSR set to: 0
 17533                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17534  005010  010E               	movlb	14	; () banked
 17535  005012  0E0E               	movlw	14	;volatile
 17536  005014  D7E3               	goto	L133
 17537  005016                     l8414:
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17541  005016  010E               	movlb	14	; () banked
 17542  005018  0E0E               	movlw	14	;volatile
 17543  00501A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17544  00501C  0E70               	movlw	112	;volatile
 17545  00501E                     L131:
 17546  00501E  6E12               	movwf	__ECANPointBuffer@pt,c
 17547                           
 17548                           ;ECAN.c: 1235: break;
 17549  005020  D00F               	goto	l886
 17550  005022                     l8418:
 17551                           
 17552                           ; BSR set to: 0
 17553  005022  5011               	movf	__ECANPointBuffer@b,w,c
 17554                           
 17555                           ; Switch size 1, requested type "speed"
 17556                           ; Number of cases is 7, Range of values is 0 to 6
 17557                           ; switch strategies available:
 17558                           ; Name         Instructions Cycles
 17559                           ; simple_byte           22    12 (average)
 17560                           ;	Chosen strategy is simple_byte
 17561  005024  E0DA               	bz	l8400
 17562  005026  0A01               	xorlw	1	; case 1
 17563  005028  E0DC               	bz	l8402
 17564  00502A  0A03               	xorlw	3	; case 2
 17565  00502C  E0DF               	bz	l8404
 17566  00502E  0A01               	xorlw	1	; case 3
 17567  005030  E0E2               	bz	l8406
 17568  005032  0A07               	xorlw	7	; case 4
 17569  005034  E0E5               	bz	l8408
 17570  005036  0A01               	xorlw	1	; case 5
 17571  005038  E0E8               	bz	l8410
 17572  00503A  0A03               	xorlw	3	; case 6
 17573  00503C  E0E9               	bz	l8412
 17574  00503E  D7EB               	goto	l8414
 17575  005040                     l886:
 17576                           
 17577                           ;ECAN.c: 1237: return (pt);
 17578  005040  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17579  005044  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17580  005048  0012               	return	
 17581  00504A                     __end_of__ECANPointBuffer:
 17582                           	opt stack 0
 17583                           tblptru	equ	0xFF8
 17584                           tblptrh	equ	0xFF7
 17585                           tblptrl	equ	0xFF6
 17586                           tablat	equ	0xFF5
 17587                           prodh	equ	0xFF4
 17588                           prodl	equ	0xFF3
 17589                           postinc0	equ	0xFEE
 17590                           wreg	equ	0xFE8
 17591                           indf1	equ	0xFE7
 17592                           postdec1	equ	0xFE5
 17593                           fsr1h	equ	0xFE2
 17594                           fsr1l	equ	0xFE1
 17595                           indf2	equ	0xFDF
 17596                           postinc2	equ	0xFDE
 17597                           postdec2	equ	0xFDD
 17598                           plusw2	equ	0xFDB
 17599                           fsr2h	equ	0xFDA
 17600                           fsr2l	equ	0xFD9
 17601                           status	equ	0xFD8
 17602                           
 17603 ;; *************** function _vscp_check_pstorage *****************
 17604 ;; Defined at:
 17605 ;;		line 163 in file "../../vscp_firmware/common/vscp_firmware.c"
 17606 ;; Parameters:    Size  Location     Type
 17607 ;;		None
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;		None
 17610 ;; Return value:  Size  Location     Type
 17611 ;;                  1    wreg      unsigned char 
 17612 ;; Registers used:
 17613 ;;		wreg, status,2, status,0, cstack
 17614 ;; Tracked objects:
 17615 ;;		On entry : 1/1
 17616 ;;		On exit  : 0/0
 17617 ;;		Unchanged: 0/0
 17618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17619 ;;      Params:         0       0       0       0       0       0       0
 17620 ;;      Locals:         0       0       0       0       0       0       0
 17621 ;;      Temps:          0       0       0       0       0       0       0
 17622 ;;      Totals:         0       0       0       0       0       0       0
 17623 ;;Total ram usage:        0 bytes
 17624 ;; Hardware stack levels used:    1
 17625 ;; Hardware stack levels required when called:    4
 17626 ;; This function calls:
 17627 ;;		_vscp_writeNicknamePermanent
 17628 ;;		_vscp_getSegmentCRC
 17629 ;;		_vscp_setSegmentCRC
 17630 ;;		_vscp_setControlByte
 17631 ;; This function is called by:
 17632 ;;		_main
 17633 ;; This function uses a non-reentrant model
 17634 ;;
 17635                           
 17636                           	psect	text78
 17637  0057A2                     __ptext78:
 17638                           	opt stack 0
 17639  0057A2                     _vscp_check_pstorage:
 17640                           	opt stack 26
 17641                           
 17642                           ;vscp_firmware.c: 166: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17643                           
 17644                           ;incstack = 0
 17645                           ;incstack = 0
 17646  0057A2  ECE2  F02C         	call	_vscp_getSegmentCRC	;wreg free
 17647  0057A6  0BC0               	andlw	192
 17648  0057A8  0A40               	xorlw	64
 17649  0057AA  E102               	bnz	l9528
 17650                           
 17651                           ;vscp_firmware.c: 167: return !0;
 17652  0057AC  0E01               	movlw	1
 17653  0057AE  D00A               	goto	l1027
 17654  0057B0                     l9528:
 17655                           
 17656                           ;vscp_firmware.c: 168: }
 17657                           ;vscp_firmware.c: 171: vscp_writeNicknamePermanent(0xff);
 17658  0057B0  0EFF               	movlw	255
 17659  0057B2  ECA6  F02C         	call	_vscp_writeNicknamePermanent
 17660                           
 17661                           ;vscp_firmware.c: 174: vscp_setSegmentCRC(0x00);
 17662  0057B6  0E00               	movlw	0
 17663  0057B8  EC94  F02C         	call	_vscp_setSegmentCRC
 17664                           
 17665                           ;vscp_firmware.c: 178: vscp_setControlByte(0xA0);
 17666  0057BC  0EA0               	movlw	160
 17667  0057BE  EC8B  F02C         	call	_vscp_setControlByte
 17668                           
 17669                           ;vscp_firmware.c: 180: return 0;
 17670  0057C2  0E00               	movlw	0
 17671  0057C4                     l1027:
 17672  0057C4  0012               	return	
 17673  0057C6                     __end_of_vscp_check_pstorage:
 17674                           	opt stack 0
 17675                           tblptru	equ	0xFF8
 17676                           tblptrh	equ	0xFF7
 17677                           tblptrl	equ	0xFF6
 17678                           tablat	equ	0xFF5
 17679                           prodh	equ	0xFF4
 17680                           prodl	equ	0xFF3
 17681                           postinc0	equ	0xFEE
 17682                           wreg	equ	0xFE8
 17683                           indf1	equ	0xFE7
 17684                           postdec1	equ	0xFE5
 17685                           fsr1h	equ	0xFE2
 17686                           fsr1l	equ	0xFE1
 17687                           indf2	equ	0xFDF
 17688                           postinc2	equ	0xFDE
 17689                           postdec2	equ	0xFDD
 17690                           plusw2	equ	0xFDB
 17691                           fsr2h	equ	0xFDA
 17692                           fsr2l	equ	0xFD9
 17693                           status	equ	0xFD8
 17694                           
 17695 ;; *************** function _vscp_setControlByte *****************
 17696 ;; Defined at:
 17697 ;;		line 2783 in file "../main.c"
 17698 ;; Parameters:    Size  Location     Type
 17699 ;;  ctrl            1    wreg     unsigned char 
 17700 ;; Auto vars:     Size  Location     Type
 17701 ;;  ctrl            1   16[COMRAM] unsigned char 
 17702 ;; Return value:  Size  Location     Type
 17703 ;;		None               void
 17704 ;; Registers used:
 17705 ;;		wreg, status,2, cstack
 17706 ;; Tracked objects:
 17707 ;;		On entry : 0/1
 17708 ;;		On exit  : 0/0
 17709 ;;		Unchanged: 0/0
 17710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17711 ;;      Params:         0       0       0       0       0       0       0
 17712 ;;      Locals:         1       0       0       0       0       0       0
 17713 ;;      Temps:          0       0       0       0       0       0       0
 17714 ;;      Totals:         1       0       0       0       0       0       0
 17715 ;;Total ram usage:        1 bytes
 17716 ;; Hardware stack levels used:    1
 17717 ;; Hardware stack levels required when called:    3
 17718 ;; This function calls:
 17719 ;;		_writeEEPROM
 17720 ;; This function is called by:
 17721 ;;		_vscp_check_pstorage
 17722 ;; This function uses a non-reentrant model
 17723 ;;
 17724                           
 17725                           	psect	text79
 17726  005916                     __ptext79:
 17727                           	opt stack 0
 17728  005916                     _vscp_setControlByte:
 17729                           	opt stack 26
 17730                           
 17731                           ;incstack = 0
 17732                           ;incstack = 0
 17733                           ;vscp_setControlByte@ctrl stored from wreg
 17734  005916  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17735                           
 17736                           ;main.c: 2784: writeEEPROM(0x03, ctrl);
 17737  00591A  6A0F               	clrf	?_writeEEPROM+1,c
 17738  00591C  0E03               	movlw	3
 17739  00591E  6E0E               	movwf	?_writeEEPROM,c
 17740  005920  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17741  005924  EF9A  F02B         	goto	_writeEEPROM	;wreg free
 17742  005928                     __end_of_vscp_setControlByte:
 17743                           	opt stack 0
 17744                           tblptru	equ	0xFF8
 17745                           tblptrh	equ	0xFF7
 17746                           tblptrl	equ	0xFF6
 17747                           tablat	equ	0xFF5
 17748                           prodh	equ	0xFF4
 17749                           prodl	equ	0xFF3
 17750                           postinc0	equ	0xFEE
 17751                           wreg	equ	0xFE8
 17752                           indf1	equ	0xFE7
 17753                           postdec1	equ	0xFE5
 17754                           fsr1h	equ	0xFE2
 17755                           fsr1l	equ	0xFE1
 17756                           indf2	equ	0xFDF
 17757                           postinc2	equ	0xFDE
 17758                           postdec2	equ	0xFDD
 17759                           plusw2	equ	0xFDB
 17760                           fsr2h	equ	0xFDA
 17761                           fsr2l	equ	0xFD9
 17762                           status	equ	0xFD8
 17763                           
 17764 ;; *************** function _vscp_setSegmentCRC *****************
 17765 ;; Defined at:
 17766 ;;		line 2774 in file "../main.c"
 17767 ;; Parameters:    Size  Location     Type
 17768 ;;  crc             1    wreg     unsigned char 
 17769 ;; Auto vars:     Size  Location     Type
 17770 ;;  crc             1   16[COMRAM] unsigned char 
 17771 ;; Return value:  Size  Location     Type
 17772 ;;		None               void
 17773 ;; Registers used:
 17774 ;;		wreg, status,2, cstack
 17775 ;; Tracked objects:
 17776 ;;		On entry : 0/0
 17777 ;;		On exit  : 0/0
 17778 ;;		Unchanged: 0/0
 17779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17780 ;;      Params:         0       0       0       0       0       0       0
 17781 ;;      Locals:         1       0       0       0       0       0       0
 17782 ;;      Temps:          0       0       0       0       0       0       0
 17783 ;;      Totals:         1       0       0       0       0       0       0
 17784 ;;Total ram usage:        1 bytes
 17785 ;; Hardware stack levels used:    1
 17786 ;; Hardware stack levels required when called:    3
 17787 ;; This function calls:
 17788 ;;		_writeEEPROM
 17789 ;; This function is called by:
 17790 ;;		_vscp_check_pstorage
 17791 ;;		_vscp_handleProbeState
 17792 ;;		_vscp_handleHeartbeat
 17793 ;;		_vscp_handleSetNickname
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           	psect	text80
 17798  005928                     __ptext80:
 17799                           	opt stack 0
 17800  005928                     _vscp_setSegmentCRC:
 17801                           	opt stack 25
 17802                           
 17803                           ;incstack = 0
 17804                           ;incstack = 0
 17805                           ;vscp_setSegmentCRC@crc stored from wreg
 17806  005928  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17807                           
 17808                           ;main.c: 2775: writeEEPROM(0x02, crc);
 17809  00592C  6A0F               	clrf	?_writeEEPROM+1,c
 17810  00592E  0E02               	movlw	2
 17811  005930  6E0E               	movwf	?_writeEEPROM,c
 17812  005932  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17813  005936  EF9A  F02B         	goto	_writeEEPROM	;wreg free
 17814  00593A                     __end_of_vscp_setSegmentCRC:
 17815                           	opt stack 0
 17816                           tblptru	equ	0xFF8
 17817                           tblptrh	equ	0xFF7
 17818                           tblptrl	equ	0xFF6
 17819                           tablat	equ	0xFF5
 17820                           prodh	equ	0xFF4
 17821                           prodl	equ	0xFF3
 17822                           postinc0	equ	0xFEE
 17823                           wreg	equ	0xFE8
 17824                           indf1	equ	0xFE7
 17825                           postdec1	equ	0xFE5
 17826                           fsr1h	equ	0xFE2
 17827                           fsr1l	equ	0xFE1
 17828                           indf2	equ	0xFDF
 17829                           postinc2	equ	0xFDE
 17830                           postdec2	equ	0xFDD
 17831                           plusw2	equ	0xFDB
 17832                           fsr2h	equ	0xFDA
 17833                           fsr2l	equ	0xFD9
 17834                           status	equ	0xFD8
 17835                           
 17836 ;; *************** function _vscp_getSegmentCRC *****************
 17837 ;; Defined at:
 17838 ;;		line 2765 in file "../main.c"
 17839 ;; Parameters:    Size  Location     Type
 17840 ;;		None
 17841 ;; Auto vars:     Size  Location     Type
 17842 ;;		None
 17843 ;; Return value:  Size  Location     Type
 17844 ;;                  1    wreg      unsigned char 
 17845 ;; Registers used:
 17846 ;;		wreg, status,2, cstack
 17847 ;; Tracked objects:
 17848 ;;		On entry : 0/0
 17849 ;;		On exit  : 0/0
 17850 ;;		Unchanged: 0/0
 17851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17852 ;;      Params:         0       0       0       0       0       0       0
 17853 ;;      Locals:         0       0       0       0       0       0       0
 17854 ;;      Temps:          0       0       0       0       0       0       0
 17855 ;;      Totals:         0       0       0       0       0       0       0
 17856 ;;Total ram usage:        0 bytes
 17857 ;; Hardware stack levels used:    1
 17858 ;; Hardware stack levels required when called:    3
 17859 ;; This function calls:
 17860 ;;		_readEEPROM
 17861 ;; This function is called by:
 17862 ;;		_vscp_check_pstorage
 17863 ;;		_vscp_handleHeartbeat
 17864 ;; This function uses a non-reentrant model
 17865 ;;
 17866                           
 17867                           	psect	text81
 17868  0059C4                     __ptext81:
 17869                           	opt stack 0
 17870  0059C4                     _vscp_getSegmentCRC:
 17871                           	opt stack 25
 17872                           
 17873                           ;main.c: 2766: return readEEPROM(0x02);
 17874                           
 17875                           ;incstack = 0
 17876                           ;incstack = 0
 17877  0059C4  6A0F               	clrf	?_readEEPROM+1,c
 17878  0059C6  0E02               	movlw	2
 17879  0059C8  6E0E               	movwf	?_readEEPROM,c
 17880  0059CA  EF9D  F02C         	goto	_readEEPROM	;wreg free
 17881  0059CE                     __end_of_vscp_getSegmentCRC:
 17882                           	opt stack 0
 17883                           tblptru	equ	0xFF8
 17884                           tblptrh	equ	0xFF7
 17885                           tblptrl	equ	0xFF6
 17886                           tablat	equ	0xFF5
 17887                           prodh	equ	0xFF4
 17888                           prodl	equ	0xFF3
 17889                           postinc0	equ	0xFEE
 17890                           wreg	equ	0xFE8
 17891                           indf1	equ	0xFE7
 17892                           postdec1	equ	0xFE5
 17893                           fsr1h	equ	0xFE2
 17894                           fsr1l	equ	0xFE1
 17895                           indf2	equ	0xFDF
 17896                           postinc2	equ	0xFDE
 17897                           postdec2	equ	0xFDD
 17898                           plusw2	equ	0xFDB
 17899                           fsr2h	equ	0xFDA
 17900                           fsr2l	equ	0xFD9
 17901                           status	equ	0xFD8
 17902                           
 17903 ;; *************** function _readEEPROM *****************
 17904 ;; Defined at:
 17905 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  address         2   13[COMRAM] unsigned short 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;  data            1   16[COMRAM] unsigned char 
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      unsigned char 
 17912 ;; Registers used:
 17913 ;;		wreg, status,2
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17919 ;;      Params:         2       0       0       0       0       0       0
 17920 ;;      Locals:         2       0       0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0
 17922 ;;      Totals:         4       0       0       0       0       0       0
 17923 ;;Total ram usage:        4 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    2
 17926 ;; This function calls:
 17927 ;;		Nothing
 17928 ;; This function is called by:
 17929 ;;		_doWork
 17930 ;;		_doOneSecondWork
 17931 ;;		_sendTempEvent
 17932 ;;		_getCalibrationValue
 17933 ;;		_writeCoeffs2Ram
 17934 ;;		_handle_sync
 17935 ;;		_vscp_readAppReg
 17936 ;;		_vscp_writeAppReg
 17937 ;;		_vscp_getGUID
 17938 ;;		_vscp_getUserID
 17939 ;;		_vscp_getManufacturerId
 17940 ;;		_vscp_getZone
 17941 ;;		_vscp_getSubzone
 17942 ;;		_vscp_readNicknamePermanent
 17943 ;;		_vscp_getSegmentCRC
 17944 ;; This function uses a non-reentrant model
 17945 ;;
 17946                           
 17947                           	psect	text82
 17948  00593A                     __ptext82:
 17949                           	opt stack 0
 17950  00593A                     _readEEPROM:
 17951                           	opt stack 26
 17952                           
 17953                           ;eeprom.c: 93: uint8_t data;
 17954                           ;eeprom.c: 98: EEADR = address & 0xff;
 17955                           
 17956                           ;incstack = 0
 17957                           ;incstack = 0
 17958  00593A  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17959                           
 17960                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 17961  00593E  9EA6               	bcf	4006,7,c	;volatile
 17962                           
 17963                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 17964  005940  9CA6               	bcf	4006,6,c	;volatile
 17965                           
 17966                           ;eeprom.c: 101: EECON1bits.RD = 1;
 17967  005942  80A6               	bsf	4006,0,c	;volatile
 17968                           
 17969                           ;eeprom.c: 102: data = EEDATA;
 17970  005944  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17971                           
 17972                           ;eeprom.c: 104: return data;
 17973  005948  5011               	movf	readEEPROM@data,w,c
 17974  00594A  0012               	return	
 17975  00594C                     __end_of_readEEPROM:
 17976                           	opt stack 0
 17977                           tblptru	equ	0xFF8
 17978                           tblptrh	equ	0xFF7
 17979                           tblptrl	equ	0xFF6
 17980                           tablat	equ	0xFF5
 17981                           prodh	equ	0xFF4
 17982                           prodl	equ	0xFF3
 17983                           postinc0	equ	0xFEE
 17984                           wreg	equ	0xFE8
 17985                           indf1	equ	0xFE7
 17986                           postdec1	equ	0xFE5
 17987                           fsr1h	equ	0xFE2
 17988                           fsr1l	equ	0xFE1
 17989                           indf2	equ	0xFDF
 17990                           postinc2	equ	0xFDE
 17991                           postdec2	equ	0xFDD
 17992                           plusw2	equ	0xFDB
 17993                           fsr2h	equ	0xFDA
 17994                           fsr2l	equ	0xFD9
 17995                           status	equ	0xFD8
 17996                           
 17997 ;; *************** function _vscp_writeNicknamePermanent *****************
 17998 ;; Defined at:
 17999 ;;		line 2756 in file "../main.c"
 18000 ;; Parameters:    Size  Location     Type
 18001 ;;  nickname        1    wreg     unsigned char 
 18002 ;; Auto vars:     Size  Location     Type
 18003 ;;  nickname        1   16[COMRAM] unsigned char 
 18004 ;; Return value:  Size  Location     Type
 18005 ;;		None               void
 18006 ;; Registers used:
 18007 ;;		wreg, status,2, cstack
 18008 ;; Tracked objects:
 18009 ;;		On entry : 0/0
 18010 ;;		On exit  : 0/0
 18011 ;;		Unchanged: 0/0
 18012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18013 ;;      Params:         0       0       0       0       0       0       0
 18014 ;;      Locals:         1       0       0       0       0       0       0
 18015 ;;      Temps:          0       0       0       0       0       0       0
 18016 ;;      Totals:         1       0       0       0       0       0       0
 18017 ;;Total ram usage:        1 bytes
 18018 ;; Hardware stack levels used:    1
 18019 ;; Hardware stack levels required when called:    3
 18020 ;; This function calls:
 18021 ;;		_writeEEPROM
 18022 ;; This function is called by:
 18023 ;;		_vscp_check_pstorage
 18024 ;;		_vscp_handleProbeState
 18025 ;;		_vscp_handleHeartbeat
 18026 ;;		_vscp_handleSetNickname
 18027 ;;		_vscp_handleDropNickname
 18028 ;; This function uses a non-reentrant model
 18029 ;;
 18030                           
 18031                           	psect	text83
 18032  00594C                     __ptext83:
 18033                           	opt stack 0
 18034  00594C                     _vscp_writeNicknamePermanent:
 18035                           	opt stack 25
 18036                           
 18037                           ;incstack = 0
 18038                           ;incstack = 0
 18039                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 18040  00594C  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 18041                           
 18042                           ;main.c: 2757: writeEEPROM( 0x01, nickname );
 18043  005950  6A0F               	clrf	?_writeEEPROM+1,c
 18044  005952  0E01               	movlw	1
 18045  005954  6E0E               	movwf	?_writeEEPROM,c
 18046  005956  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 18047  00595A  EF9A  F02B         	goto	_writeEEPROM	;wreg free
 18048  00595E                     __end_of_vscp_writeNicknamePermanent:
 18049                           	opt stack 0
 18050                           tblptru	equ	0xFF8
 18051                           tblptrh	equ	0xFF7
 18052                           tblptrl	equ	0xFF6
 18053                           tablat	equ	0xFF5
 18054                           prodh	equ	0xFF4
 18055                           prodl	equ	0xFF3
 18056                           postinc0	equ	0xFEE
 18057                           wreg	equ	0xFE8
 18058                           indf1	equ	0xFE7
 18059                           postdec1	equ	0xFE5
 18060                           fsr1h	equ	0xFE2
 18061                           fsr1l	equ	0xFE1
 18062                           indf2	equ	0xFDF
 18063                           postinc2	equ	0xFDE
 18064                           postdec2	equ	0xFDD
 18065                           plusw2	equ	0xFDB
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070 ;; *************** function _writeEEPROM *****************
 18071 ;; Defined at:
 18072 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 18073 ;; Parameters:    Size  Location     Type
 18074 ;;  address         2   13[COMRAM] unsigned short 
 18075 ;;  data            1   15[COMRAM] unsigned char 
 18076 ;; Auto vars:     Size  Location     Type
 18077 ;;		None
 18078 ;; Return value:  Size  Location     Type
 18079 ;;		None               void
 18080 ;; Registers used:
 18081 ;;		wreg, status,2
 18082 ;; Tracked objects:
 18083 ;;		On entry : 0/0
 18084 ;;		On exit  : 0/0
 18085 ;;		Unchanged: 0/0
 18086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18087 ;;      Params:         3       0       0       0       0       0       0
 18088 ;;      Locals:         0       0       0       0       0       0       0
 18089 ;;      Temps:          0       0       0       0       0       0       0
 18090 ;;      Totals:         3       0       0       0       0       0       0
 18091 ;;Total ram usage:        3 bytes
 18092 ;; Hardware stack levels used:    1
 18093 ;; Hardware stack levels required when called:    2
 18094 ;; This function calls:
 18095 ;;		Nothing
 18096 ;; This function is called by:
 18097 ;;		_main
 18098 ;;		_doWork
 18099 ;;		_init_app_eeprom
 18100 ;;		_vscp_writeAppReg
 18101 ;;		_vscp_setGUID
 18102 ;;		_vscp_setUserID
 18103 ;;		_vscp_setManufacturerId
 18104 ;;		_vscp_goBootloaderMode
 18105 ;;		_vscp_writeNicknamePermanent
 18106 ;;		_vscp_setSegmentCRC
 18107 ;;		_vscp_setControlByte
 18108 ;; This function uses a non-reentrant model
 18109 ;;
 18110                           
 18111                           	psect	text84
 18112  005734                     __ptext84:
 18113                           	opt stack 0
 18114  005734                     _writeEEPROM:
 18115                           	opt stack 27
 18116                           
 18117                           ;eeprom.c: 29: EEADR = address & 0xff;
 18118                           
 18119                           ;incstack = 0
 18120                           ;incstack = 0
 18121  005734  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 18122                           
 18123                           ;eeprom.c: 30: EEDATA = data;
 18124  005738  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18125                           
 18126                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 18127  00573C  9EA6               	bcf	4006,7,c	;volatile
 18128                           
 18129                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 18130  00573E  9CA6               	bcf	4006,6,c	;volatile
 18131                           
 18132                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 18133  005740  84A6               	bsf	4006,2,c	;volatile
 18134                           
 18135                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 18136  005742  9EF2               	bcf	intcon,7,c	;volatile
 18137                           
 18138                           ;eeprom.c: 37: EECON2 = 0x55;
 18139  005744  0E55               	movlw	85
 18140  005746  6EA7               	movwf	4007,c	;volatile
 18141                           
 18142                           ;eeprom.c: 38: EECON2 = 0xaa;
 18143  005748  0EAA               	movlw	170
 18144  00574A  6EA7               	movwf	4007,c	;volatile
 18145                           
 18146                           ;eeprom.c: 39: EECON1bits.WR = 1;
 18147  00574C  82A6               	bsf	4006,1,c	;volatile
 18148                           
 18149                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 18150  00574E  8EF2               	bsf	intcon,7,c	;volatile
 18151  005750                     l909:
 18152  005750  A8A1               	btfss	4001,4,c	;volatile
 18153  005752  D7FE               	goto	l909
 18154                           
 18155                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 18156  005754  98A1               	bcf	4001,4,c	;volatile
 18157                           
 18158                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 18159  005756  94A6               	bcf	4006,2,c	;volatile
 18160  005758  0012               	return	
 18161  00575A                     __end_of_writeEEPROM:
 18162                           	opt stack 0
 18163                           tblptru	equ	0xFF8
 18164                           tblptrh	equ	0xFF7
 18165                           tblptrl	equ	0xFF6
 18166                           tablat	equ	0xFF5
 18167                           prodh	equ	0xFF4
 18168                           prodl	equ	0xFF3
 18169                           intcon	equ	0xFF2
 18170                           postinc0	equ	0xFEE
 18171                           wreg	equ	0xFE8
 18172                           indf1	equ	0xFE7
 18173                           postdec1	equ	0xFE5
 18174                           fsr1h	equ	0xFE2
 18175                           fsr1l	equ	0xFE1
 18176                           indf2	equ	0xFDF
 18177                           postinc2	equ	0xFDE
 18178                           postdec2	equ	0xFDD
 18179                           plusw2	equ	0xFDB
 18180                           fsr2h	equ	0xFDA
 18181                           fsr2l	equ	0xFD9
 18182                           status	equ	0xFD8
 18183                           
 18184 ;; *************** function _init *****************
 18185 ;; Defined at:
 18186 ;;		line 882 in file "../main.c"
 18187 ;; Parameters:    Size  Location     Type
 18188 ;;		None
 18189 ;; Auto vars:     Size  Location     Type
 18190 ;;		None
 18191 ;; Return value:  Size  Location     Type
 18192 ;;		None               void
 18193 ;; Registers used:
 18194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18195 ;; Tracked objects:
 18196 ;;		On entry : 0/0
 18197 ;;		On exit  : 1/1
 18198 ;;		Unchanged: 0/0
 18199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18200 ;;      Params:         0       0       0       0       0       0       0
 18201 ;;      Locals:         0       0       0       0       0       0       0
 18202 ;;      Temps:          0       0       0       0       0       0       0
 18203 ;;      Totals:         0       0       0       0       0       0       0
 18204 ;;Total ram usage:        0 bytes
 18205 ;; Hardware stack levels used:    1
 18206 ;; Hardware stack levels required when called:    5
 18207 ;; This function calls:
 18208 ;;		_WriteTimer0
 18209 ;;		_ConvertADC
 18210 ;;		_init_app_ram
 18211 ;;		_OpenTimer0
 18212 ;;		_OpenADC
 18213 ;;		_ECANInitialize
 18214 ;; This function is called by:
 18215 ;;		_main
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           	psect	text85
 18220  005500                     __ptext85:
 18221                           	opt stack 0
 18222  005500                     _init:
 18223                           	opt stack 25
 18224                           
 18225                           ;main.c: 886: init_app_ram();
 18226                           
 18227                           ;incstack = 0
 18228                           ;incstack = 0
 18229  005500  ECE0  F029         	call	_init_app_ram	;wreg free
 18230                           
 18231                           ; BSR set to: 1
 18232                           ;main.c: 894: TRISA = 0x07;
 18233  005504  0E07               	movlw	7
 18234  005506  6E92               	movwf	3986,c	;volatile
 18235                           
 18236                           ; BSR set to: 1
 18237                           ;main.c: 905: TRISB = 0x1B;
 18238  005508  0E1B               	movlw	27
 18239  00550A  6E93               	movwf	3987,c	;volatile
 18240                           
 18241                           ; BSR set to: 1
 18242                           ;main.c: 915: TRISC = 0x01;
 18243  00550C  0E01               	movlw	1
 18244  00550E  6E94               	movwf	3988,c	;volatile
 18245                           
 18246                           ; BSR set to: 1
 18247                           ;main.c: 916: PORTC = 0x00;
 18248  005510  6A82               	clrf	3970,c	;volatile
 18249                           
 18250                           ; BSR set to: 1
 18251                           ;main.c: 918: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18252  005512  0E92               	movlw	146
 18253  005514  EC14  F02C         	call	_OpenTimer0
 18254                           
 18255                           ; BSR set to: 1
 18256                           ;main.c: 919: WriteTimer0(0xfb1d);
 18257  005518  0EFB               	movlw	251
 18258  00551A  6E0F               	movwf	?_WriteTimer0+1,c
 18259  00551C  0E1D               	movlw	29
 18260  00551E  6E0E               	movwf	?_WriteTimer0,c
 18261  005520  ECAF  F02C         	call	_WriteTimer0	;wreg free
 18262                           
 18263                           ; BSR set to: 1
 18264                           ;main.c: 921: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18265                           ;main.c: 922: 0b10000111 & 0b11111111 & 0b11110100 &
 18266                           ;main.c: 923: 0b11111110 & 0b11111101,
 18267                           ;main.c: 924: 15);
 18268  005524  0E84               	movlw	132
 18269  005526  6E0E               	movwf	?_OpenADC,c
 18270  005528  0E0F               	movlw	15
 18271  00552A  6E0F               	movwf	?_OpenADC+1,c
 18272  00552C  0EEF               	movlw	239
 18273  00552E  EC5F  F028         	call	_OpenADC
 18274                           
 18275                           ; BSR set to: 1
 18276                           ;main.c: 927: ECANInitialize();
 18277  005532  EC9D  F026         	call	_ECANInitialize	;wreg free
 18278                           
 18279                           ;main.c: 948: INTCONbits.GIE = 1;
 18280  005536  8EF2               	bsf	intcon,7,c	;volatile
 18281                           
 18282                           ;main.c: 950: ConvertADC();
 18283  005538  EFED  F02C         	goto	_ConvertADC	;wreg free
 18284  00553C                     __end_of_init:
 18285                           	opt stack 0
 18286                           tblptru	equ	0xFF8
 18287                           tblptrh	equ	0xFF7
 18288                           tblptrl	equ	0xFF6
 18289                           tablat	equ	0xFF5
 18290                           prodh	equ	0xFF4
 18291                           prodl	equ	0xFF3
 18292                           intcon	equ	0xFF2
 18293                           postinc0	equ	0xFEE
 18294                           wreg	equ	0xFE8
 18295                           indf1	equ	0xFE7
 18296                           postdec1	equ	0xFE5
 18297                           fsr1h	equ	0xFE2
 18298                           fsr1l	equ	0xFE1
 18299                           indf2	equ	0xFDF
 18300                           postinc2	equ	0xFDE
 18301                           postdec2	equ	0xFDD
 18302                           plusw2	equ	0xFDB
 18303                           fsr2h	equ	0xFDA
 18304                           fsr2l	equ	0xFD9
 18305                           status	equ	0xFD8
 18306                           
 18307 ;; *************** function _ECANInitialize *****************
 18308 ;; Defined at:
 18309 ;;		line 168 in file "../ECAN.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;		None
 18312 ;; Auto vars:     Size  Location     Type
 18313 ;;		None
 18314 ;; Return value:  Size  Location     Type
 18315 ;;		None               void
 18316 ;; Registers used:
 18317 ;;		wreg, status,2, status,0, cstack
 18318 ;; Tracked objects:
 18319 ;;		On entry : F/1
 18320 ;;		On exit  : 1/1
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18323 ;;      Params:         0       0       0       0       0       0       0
 18324 ;;      Locals:         0       0       0       0       0       0       0
 18325 ;;      Temps:          0       0       0       0       0       0       0
 18326 ;;      Totals:         0       0       0       0       0       0       0
 18327 ;;Total ram usage:        0 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    3
 18330 ;; This function calls:
 18331 ;;		_ECANSetOperationMode
 18332 ;; This function is called by:
 18333 ;;		_init
 18334 ;; This function uses a non-reentrant model
 18335 ;;
 18336                           
 18337                           	psect	text86
 18338  004D3A                     __ptext86:
 18339                           	opt stack 0
 18340  004D3A                     _ECANInitialize:
 18341                           	opt stack 26
 18342                           
 18343                           ; BSR set to: 1
 18344                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18345                           
 18346                           ;incstack = 0
 18347                           ;incstack = 0
 18348  004D3A  0E80               	movlw	128
 18349  004D3C  EC61  F02C         	call	_ECANSetOperationMode
 18350                           
 18351                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18352  004D40  0E09               	movlw	9
 18353  004D42  6E70               	movwf	3952,c	;volatile
 18354                           
 18355                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18356  004D44  0EFC               	movlw	252
 18357  004D46  6E71               	movwf	3953,c	;volatile
 18358                           
 18359                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18360                           ;ECAN.c: 181: (0 << 6) |
 18361                           ;ECAN.c: 182: (2-1);
 18362  004D48  0E01               	movlw	1
 18363  004D4A  6E72               	movwf	3954,c	;volatile
 18364                           
 18365                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18366  004D4C  0E20               	movlw	32
 18367  004D4E  6E73               	movwf	3955,c	;volatile
 18368                           
 18369                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18370  004D50  8E77               	bsf	3959,7,c	;volatile
 18371                           
 18372                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18373  004D52  9C77               	bcf	3959,6,c	;volatile
 18374                           
 18375                           ;ECAN.c: 205: RXB0CON = 0;
 18376  004D54  6A60               	clrf	3936,c	;volatile
 18377                           
 18378                           ;ECAN.c: 211: RXB1CON = 0;
 18379  004D56  010F               	movlb	15	; () banked
 18380  004D58  6B50               	clrf	80,b	;volatile
 18381                           
 18382                           ; BSR set to: 15
 18383                           ;ECAN.c: 221: B0CON = 0;
 18384  004D5A  010E               	movlb	14	; () banked
 18385  004D5C  6B20               	clrf	32,b	;volatile
 18386                           
 18387                           ; BSR set to: 14
 18388                           ;ECAN.c: 231: B1CON = 0;
 18389  004D5E  6B30               	clrf	48,b	;volatile
 18390                           
 18391                           ; BSR set to: 14
 18392                           ;ECAN.c: 241: B2CON = 0;
 18393  004D60  6B40               	clrf	64,b	;volatile
 18394                           
 18395                           ; BSR set to: 14
 18396                           ;ECAN.c: 254: B3CON = 0 << 2;
 18397  004D62  6B50               	clrf	80,b	;volatile
 18398                           
 18399                           ; BSR set to: 14
 18400                           ;ECAN.c: 264: B4CON = 0 << 2;
 18401  004D64  6B60               	clrf	96,b	;volatile
 18402                           
 18403                           ; BSR set to: 14
 18404                           ;ECAN.c: 274: B5CON = 0 << 2;
 18405  004D66  6B70               	clrf	112,b	;volatile
 18406                           
 18407                           ; BSR set to: 14
 18408                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18409  004D68  0EE0               	movlw	224
 18410  004D6A  010D               	movlb	13	; () banked
 18411  004D6C  6FF8               	movwf	248,b	;volatile
 18412                           
 18413                           ; BSR set to: 13
 18414                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18415  004D6E  010F               	movlb	15	; () banked
 18416  004D70  6B00               	clrf	0,b	;volatile
 18417                           
 18418                           ; BSR set to: 15
 18419  004D72  0E08               	movlw	8
 18420  004D74  6F01               	movwf	1,b	;volatile
 18421                           
 18422                           ; BSR set to: 15
 18423  004D76  6B02               	clrf	2,b	;volatile
 18424                           
 18425                           ; BSR set to: 15
 18426  004D78  6B03               	clrf	3,b	;volatile
 18427                           
 18428                           ; BSR set to: 15
 18429                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18430  004D7A  6B04               	clrf	4,b	;volatile
 18431                           
 18432                           ; BSR set to: 15
 18433  004D7C  0EE8               	movlw	232
 18434  004D7E  6F05               	movwf	5,b	;volatile
 18435                           
 18436                           ; BSR set to: 15
 18437  004D80  0E1A               	movlw	26
 18438  004D82  6F06               	movwf	6,b	;volatile
 18439                           
 18440                           ; BSR set to: 15
 18441  004D84  6B07               	clrf	7,b	;volatile
 18442                           
 18443                           ; BSR set to: 15
 18444                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18445  004D86  0E03               	movlw	3
 18446  004D88  010D               	movlb	13	; () banked
 18447  004D8A  6FD4               	movwf	212,b	;volatile
 18448                           
 18449                           ; BSR set to: 13
 18450                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18451  004D8C  6BD5               	clrf	213,b	;volatile
 18452                           
 18453                           ; BSR set to: 13
 18454                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18455  004D8E  6BE0               	clrf	224,b	;volatile
 18456                           
 18457                           ; BSR set to: 13
 18458                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18459  004D90  0E11               	movlw	17
 18460  004D92  6FE1               	movwf	225,b	;volatile
 18461                           
 18462                           ; BSR set to: 13
 18463                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18464  004D94  6FE2               	movwf	226,b	;volatile
 18465                           
 18466                           ; BSR set to: 13
 18467                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18468  004D96  6BE3               	clrf	227,b	;volatile
 18469                           
 18470                           ; BSR set to: 13
 18471                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18472  004D98  6BE4               	clrf	228,b	;volatile
 18473                           
 18474                           ; BSR set to: 13
 18475                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18476  004D9A  6BE5               	clrf	229,b	;volatile
 18477                           
 18478                           ; BSR set to: 13
 18479                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18480  004D9C  6BE6               	clrf	230,b	;volatile
 18481                           
 18482                           ; BSR set to: 13
 18483                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18484  004D9E  6BE7               	clrf	231,b	;volatile
 18485                           
 18486                           ; BSR set to: 13
 18487                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18488  004DA0  0E54               	movlw	84
 18489  004DA2  6FF0               	movwf	240,b	;volatile
 18490                           
 18491                           ; BSR set to: 13
 18492                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18493  004DA4  0E05               	movlw	5
 18494  004DA6  6FF1               	movwf	241,b	;volatile
 18495                           
 18496                           ; BSR set to: 13
 18497                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18498  004DA8  6BF2               	clrf	242,b	;volatile
 18499                           
 18500                           ; BSR set to: 13
 18501                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18502  004DAA  6BF2               	clrf	242,b	;volatile
 18503                           
 18504                           ; BSR set to: 13
 18505                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18506  004DAC  0E0F               	movlw	15
 18507  004DAE  010F               	movlb	15	; () banked
 18508  004DB0  6F18               	movwf	24,b	;volatile
 18509                           
 18510                           ; BSR set to: 15
 18511  004DB2  0EE0               	movlw	224
 18512  004DB4  6F19               	movwf	25,b	;volatile
 18513                           
 18514                           ; BSR set to: 15
 18515  004DB6  6B1A               	clrf	26,b	;volatile
 18516                           
 18517                           ; BSR set to: 15
 18518  004DB8  6B1B               	clrf	27,b	;volatile
 18519                           
 18520                           ; BSR set to: 15
 18521                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18522  004DBA  8719               	bsf	25,3,b	;volatile
 18523                           
 18524                           ; BSR set to: 15
 18525                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18526  004DBC  0E0F               	movlw	15
 18527  004DBE  6F1C               	movwf	28,b	;volatile
 18528                           
 18529                           ; BSR set to: 15
 18530  004DC0  0EE0               	movlw	224
 18531  004DC2  6F1D               	movwf	29,b	;volatile
 18532                           
 18533                           ; BSR set to: 15
 18534  004DC4  691E               	setf	30,b	;volatile
 18535                           
 18536                           ; BSR set to: 15
 18537  004DC6  6B1F               	clrf	31,b	;volatile
 18538                           
 18539                           ; BSR set to: 15
 18540                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18541  004DC8  871D               	bsf	29,3,b	;volatile
 18542                           
 18543                           ; BSR set to: 15
 18544                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18545  004DCA  0E00               	movlw	0
 18546  004DCC  EF61  F02C         	goto	_ECANSetOperationMode
 18547  004DD0                     __end_of_ECANInitialize:
 18548                           	opt stack 0
 18549                           tblptru	equ	0xFF8
 18550                           tblptrh	equ	0xFF7
 18551                           tblptrl	equ	0xFF6
 18552                           tablat	equ	0xFF5
 18553                           prodh	equ	0xFF4
 18554                           prodl	equ	0xFF3
 18555                           intcon	equ	0xFF2
 18556                           postinc0	equ	0xFEE
 18557                           wreg	equ	0xFE8
 18558                           indf1	equ	0xFE7
 18559                           postdec1	equ	0xFE5
 18560                           fsr1h	equ	0xFE2
 18561                           fsr1l	equ	0xFE1
 18562                           indf2	equ	0xFDF
 18563                           postinc2	equ	0xFDE
 18564                           postdec2	equ	0xFDD
 18565                           plusw2	equ	0xFDB
 18566                           fsr2h	equ	0xFDA
 18567                           fsr2l	equ	0xFD9
 18568                           status	equ	0xFD8
 18569                           
 18570 ;; *************** function _ECANSetOperationMode *****************
 18571 ;; Defined at:
 18572 ;;		line 1012 in file "../ECAN.c"
 18573 ;; Parameters:    Size  Location     Type
 18574 ;;  mode            1    wreg     enum E16337
 18575 ;; Auto vars:     Size  Location     Type
 18576 ;;  mode            1   13[COMRAM] enum E16337
 18577 ;; Return value:  Size  Location     Type
 18578 ;;		None               void
 18579 ;; Registers used:
 18580 ;;		wreg, status,2, status,0
 18581 ;; Tracked objects:
 18582 ;;		On entry : 1/1
 18583 ;;		On exit  : 1/1
 18584 ;;		Unchanged: 1/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18586 ;;      Params:         0       0       0       0       0       0       0
 18587 ;;      Locals:         1       0       0       0       0       0       0
 18588 ;;      Temps:          0       0       0       0       0       0       0
 18589 ;;      Totals:         1       0       0       0       0       0       0
 18590 ;;Total ram usage:        1 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; Hardware stack levels required when called:    2
 18593 ;; This function calls:
 18594 ;;		Nothing
 18595 ;; This function is called by:
 18596 ;;		_ECANInitialize
 18597 ;; This function uses a non-reentrant model
 18598 ;;
 18599                           
 18600                           	psect	text87
 18601  0058C2                     __ptext87:
 18602                           	opt stack 0
 18603  0058C2                     _ECANSetOperationMode:
 18604                           	opt stack 26
 18605                           
 18606                           ;incstack = 0
 18607                           ;incstack = 0
 18608                           ;ECANSetOperationMode@mode stored from wreg
 18609  0058C2  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18610                           
 18611                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18612  0058C6  0E1F               	movlw	31
 18613  0058C8  166F               	andwf	3951,f,c	;volatile
 18614                           
 18615                           ;ECAN.c: 1014: CANCON |= mode;
 18616  0058CA  500E               	movf	ECANSetOperationMode@mode,w,c
 18617  0058CC  126F               	iorwf	3951,f,c	;volatile
 18618  0058CE                     l8370:
 18619  0058CE  506F               	movf	3951,w,c	;volatile
 18620  0058D0  0BE0               	andlw	224
 18621  0058D2  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18622  0058D4  B4D8               	btfsc	status,2,c
 18623  0058D6  0012               	return	
 18624  0058D8  D7FA               	goto	l8370
 18625  0058DA                     __end_of_ECANSetOperationMode:
 18626                           	opt stack 0
 18627                           tblptru	equ	0xFF8
 18628                           tblptrh	equ	0xFF7
 18629                           tblptrl	equ	0xFF6
 18630                           tablat	equ	0xFF5
 18631                           prodh	equ	0xFF4
 18632                           prodl	equ	0xFF3
 18633                           intcon	equ	0xFF2
 18634                           postinc0	equ	0xFEE
 18635                           wreg	equ	0xFE8
 18636                           indf1	equ	0xFE7
 18637                           postdec1	equ	0xFE5
 18638                           fsr1h	equ	0xFE2
 18639                           fsr1l	equ	0xFE1
 18640                           indf2	equ	0xFDF
 18641                           postinc2	equ	0xFDE
 18642                           postdec2	equ	0xFDD
 18643                           plusw2	equ	0xFDB
 18644                           fsr2h	equ	0xFDA
 18645                           fsr2l	equ	0xFD9
 18646                           status	equ	0xFD8
 18647                           
 18648 ;; *************** function _OpenADC *****************
 18649 ;; Defined at:
 18650 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18651 ;; Parameters:    Size  Location     Type
 18652 ;;  config          1    wreg     unsigned char 
 18653 ;;  config2         1   13[COMRAM] unsigned char 
 18654 ;;  portconfig      1   14[COMRAM] unsigned char 
 18655 ;; Auto vars:     Size  Location     Type
 18656 ;;  config          1   17[COMRAM] unsigned char 
 18657 ;; Return value:  Size  Location     Type
 18658 ;;		None               void
 18659 ;; Registers used:
 18660 ;;		wreg, status,2, status,0
 18661 ;; Tracked objects:
 18662 ;;		On entry : F/1
 18663 ;;		On exit  : F/1
 18664 ;;		Unchanged: F/0
 18665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18666 ;;      Params:         2       0       0       0       0       0       0
 18667 ;;      Locals:         1       0       0       0       0       0       0
 18668 ;;      Temps:          2       0       0       0       0       0       0
 18669 ;;      Totals:         5       0       0       0       0       0       0
 18670 ;;Total ram usage:        5 bytes
 18671 ;; Hardware stack levels used:    1
 18672 ;; Hardware stack levels required when called:    2
 18673 ;; This function calls:
 18674 ;;		Nothing
 18675 ;; This function is called by:
 18676 ;;		_init
 18677 ;; This function uses a non-reentrant model
 18678 ;;
 18679                           
 18680                           	psect	text88
 18681  0050BE                     __ptext88:
 18682                           	opt stack 0
 18683  0050BE                     _OpenADC:
 18684                           	opt stack 27
 18685                           
 18686                           ;incstack = 0
 18687                           ;incstack = 0
 18688                           ;OpenADC@config stored from wreg
 18689  0050BE  CFE8 F012          	movff	wreg,OpenADC@config
 18690                           
 18691                           ; BSR set to: 1
 18692  0050C2  6AC2               	clrf	4034,c	;volatile
 18693  0050C4  6AC0               	clrf	4032,c	;volatile
 18694                           
 18695                           ; BSR set to: 1
 18696  0050C6  90D8               	bcf	status,0,c
 18697  0050C8  300E               	rrcf	OpenADC@config2,w,c
 18698  0050CA  0B3C               	andlw	60
 18699  0050CC  6EC2               	movwf	4034,c	;volatile
 18700  0050CE  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18701  0050D2  3A10               	swapf	??_OpenADC,f,c
 18702  0050D4  0EF0               	movlw	240
 18703  0050D6  1610               	andwf	??_OpenADC,f,c
 18704  0050D8  0E30               	movlw	48
 18705  0050DA  1610               	andwf	??_OpenADC,f,c
 18706  0050DC  500F               	movf	OpenADC@portconfig,w,c
 18707  0050DE  0B0F               	andlw	15
 18708  0050E0  1010               	iorwf	??_OpenADC,w,c
 18709  0050E2  6EC1               	movwf	4033,c	;volatile
 18710  0050E4  C012  F010         	movff	OpenADC@config,??_OpenADC
 18711  0050E8  90D8               	bcf	status,0,c
 18712  0050EA  3610               	rlcf	??_OpenADC,f,c
 18713  0050EC  90D8               	bcf	status,0,c
 18714  0050EE  3610               	rlcf	??_OpenADC,f,c
 18715  0050F0  0E38               	movlw	56
 18716  0050F2  1610               	andwf	??_OpenADC,f,c
 18717  0050F4  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18718  0050F8  3A11               	swapf	??_OpenADC+1,f,c
 18719  0050FA  0E0F               	movlw	15
 18720  0050FC  1611               	andwf	??_OpenADC+1,f,c
 18721  0050FE  0E07               	movlw	7
 18722  005100  1611               	andwf	??_OpenADC+1,f,c
 18723  005102  5012               	movf	OpenADC@config,w,c
 18724  005104  0B80               	andlw	128
 18725  005106  1011               	iorwf	??_OpenADC+1,w,c
 18726  005108  1010               	iorwf	??_OpenADC,w,c
 18727  00510A  6EC0               	movwf	4032,c	;volatile
 18728                           
 18729                           ; BSR set to: 1
 18730  00510C  AE0E               	btfss	OpenADC@config2,7,c
 18731  00510E  D003               	goto	l1293
 18732                           
 18733                           ; BSR set to: 1
 18734  005110  9C9E               	bcf	3998,6,c	;volatile
 18735  005112  8C9D               	bsf	3997,6,c	;volatile
 18736  005114  8CF2               	bsf	intcon,6,c	;volatile
 18737  005116                     l1293:
 18738                           
 18739                           ; BSR set to: 1
 18740  005116  80C2               	bsf	4034,0,c	;volatile
 18741                           
 18742                           ; BSR set to: 1
 18743  005118  0012               	return	
 18744  00511A                     __end_of_OpenADC:
 18745                           	opt stack 0
 18746                           tblptru	equ	0xFF8
 18747                           tblptrh	equ	0xFF7
 18748                           tblptrl	equ	0xFF6
 18749                           tablat	equ	0xFF5
 18750                           prodh	equ	0xFF4
 18751                           prodl	equ	0xFF3
 18752                           intcon	equ	0xFF2
 18753                           postinc0	equ	0xFEE
 18754                           wreg	equ	0xFE8
 18755                           indf1	equ	0xFE7
 18756                           postdec1	equ	0xFE5
 18757                           fsr1h	equ	0xFE2
 18758                           fsr1l	equ	0xFE1
 18759                           indf2	equ	0xFDF
 18760                           postinc2	equ	0xFDE
 18761                           postdec2	equ	0xFDD
 18762                           plusw2	equ	0xFDB
 18763                           fsr2h	equ	0xFDA
 18764                           fsr2l	equ	0xFD9
 18765                           status	equ	0xFD8
 18766                           
 18767 ;; *************** function _OpenTimer0 *****************
 18768 ;; Defined at:
 18769 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18770 ;; Parameters:    Size  Location     Type
 18771 ;;  config          1    wreg     unsigned char 
 18772 ;; Auto vars:     Size  Location     Type
 18773 ;;  config          1   13[COMRAM] unsigned char 
 18774 ;; Return value:  Size  Location     Type
 18775 ;;		None               void
 18776 ;; Registers used:
 18777 ;;		wreg, status,2, status,0
 18778 ;; Tracked objects:
 18779 ;;		On entry : F/1
 18780 ;;		On exit  : F/1
 18781 ;;		Unchanged: F/0
 18782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18783 ;;      Params:         0       0       0       0       0       0       0
 18784 ;;      Locals:         1       0       0       0       0       0       0
 18785 ;;      Temps:          0       0       0       0       0       0       0
 18786 ;;      Totals:         1       0       0       0       0       0       0
 18787 ;;Total ram usage:        1 bytes
 18788 ;; Hardware stack levels used:    1
 18789 ;; Hardware stack levels required when called:    2
 18790 ;; This function calls:
 18791 ;;		Nothing
 18792 ;; This function is called by:
 18793 ;;		_init
 18794 ;; This function uses a non-reentrant model
 18795 ;;
 18796                           
 18797                           	psect	text89
 18798  005828                     __ptext89:
 18799                           	opt stack 0
 18800  005828                     _OpenTimer0:
 18801                           	opt stack 27
 18802                           
 18803                           ; BSR set to: 1
 18804                           ;incstack = 0
 18805                           ;incstack = 0
 18806                           ;OpenTimer0@config stored from wreg
 18807  005828  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18808                           
 18809                           ; BSR set to: 1
 18810  00582C  500E               	movf	OpenTimer0@config,w,c
 18811  00582E  0B7F               	andlw	127
 18812  005830  6ED5               	movwf	4053,c	;volatile
 18813                           
 18814                           ; BSR set to: 1
 18815  005832  6AD7               	clrf	4055,c	;volatile
 18816                           
 18817                           ; BSR set to: 1
 18818  005834  6AD6               	clrf	4054,c	;volatile
 18819                           
 18820                           ; BSR set to: 1
 18821  005836  94F2               	bcf	intcon,2,c	;volatile
 18822                           
 18823                           ; BSR set to: 1
 18824  005838  AE0E               	btfss	OpenTimer0@config,7,c
 18825  00583A  D002               	goto	l1307
 18826                           
 18827                           ; BSR set to: 1
 18828  00583C  8AF2               	bsf	intcon,5,c	;volatile
 18829  00583E  D001               	goto	l1308
 18830  005840                     l1307:
 18831                           
 18832                           ; BSR set to: 1
 18833  005840  9AF2               	bcf	intcon,5,c	;volatile
 18834  005842                     l1308:
 18835                           
 18836                           ; BSR set to: 1
 18837  005842  8ED5               	bsf	4053,7,c	;volatile
 18838                           
 18839                           ; BSR set to: 1
 18840  005844  0012               	return	
 18841  005846                     __end_of_OpenTimer0:
 18842                           	opt stack 0
 18843                           tblptru	equ	0xFF8
 18844                           tblptrh	equ	0xFF7
 18845                           tblptrl	equ	0xFF6
 18846                           tablat	equ	0xFF5
 18847                           prodh	equ	0xFF4
 18848                           prodl	equ	0xFF3
 18849                           intcon	equ	0xFF2
 18850                           postinc0	equ	0xFEE
 18851                           wreg	equ	0xFE8
 18852                           indf1	equ	0xFE7
 18853                           postdec1	equ	0xFE5
 18854                           fsr1h	equ	0xFE2
 18855                           fsr1l	equ	0xFE1
 18856                           indf2	equ	0xFDF
 18857                           postinc2	equ	0xFDE
 18858                           postdec2	equ	0xFDD
 18859                           plusw2	equ	0xFDB
 18860                           fsr2h	equ	0xFDA
 18861                           fsr2l	equ	0xFD9
 18862                           status	equ	0xFD8
 18863                           
 18864 ;; *************** function _init_app_ram *****************
 18865 ;; Defined at:
 18866 ;;		line 978 in file "../main.c"
 18867 ;; Parameters:    Size  Location     Type
 18868 ;;		None
 18869 ;; Auto vars:     Size  Location     Type
 18870 ;;  i               1   32[COMRAM] unsigned char 
 18871 ;; Return value:  Size  Location     Type
 18872 ;;		None               void
 18873 ;; Registers used:
 18874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18875 ;; Tracked objects:
 18876 ;;		On entry : 0/1
 18877 ;;		On exit  : F/1
 18878 ;;		Unchanged: 0/0
 18879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18880 ;;      Params:         0       0       0       0       0       0       0
 18881 ;;      Locals:         1       0       0       0       0       0       0
 18882 ;;      Temps:          0       0       0       0       0       0       0
 18883 ;;      Totals:         1       0       0       0       0       0       0
 18884 ;;Total ram usage:        1 bytes
 18885 ;; Hardware stack levels used:    1
 18886 ;; Hardware stack levels required when called:    4
 18887 ;; This function calls:
 18888 ;;		_writeCoeffs2Ram
 18889 ;; This function is called by:
 18890 ;;		_init
 18891 ;;		_vscp_restoreDefaults
 18892 ;; This function uses a non-reentrant model
 18893 ;;
 18894                           
 18895                           	psect	text90
 18896  0053C0                     __ptext90:
 18897                           	opt stack 0
 18898  0053C0                     _init_app_ram:
 18899                           	opt stack 23
 18900                           
 18901                           ;main.c: 979: char i;
 18902                           ;main.c: 981: measurement_clock = 0;
 18903                           
 18904                           ; BSR set to: 1
 18905                           ;incstack = 0
 18906                           ;incstack = 0
 18907  0053C0  0101               	movlb	1	; () banked
 18908  0053C2  6B12               	clrf	_measurement_clock& (0+255),b
 18909  0053C4  6B13               	clrf	(_measurement_clock+1)& (0+255),b
 18910  0053C6  6B14               	clrf	(_measurement_clock+2)& (0+255),b
 18911  0053C8  6B15               	clrf	(_measurement_clock+3)& (0+255),b
 18912                           
 18913                           ;main.c: 982: seconds = 0;
 18914  0053CA  0100               	movlb	0	; () banked
 18915  0053CC  6BB6               	clrf	_seconds& (0+255),b
 18916                           
 18917                           ;main.c: 985: for (i = 0; i < 6; i++) {
 18918  0053CE  6A21               	clrf	init_app_ram@i,c
 18919  0053D0                     l10492:
 18920                           
 18921                           ;main.c: 986: seconds_temp[i] = 0;
 18922  0053D0  0E0C               	movlw	low _seconds_temp
 18923  0053D2  2421               	addwf	init_app_ram@i,w,c
 18924  0053D4  6ED9               	movwf	fsr2l,c
 18925  0053D6  6ADA               	clrf	fsr2h,c
 18926  0053D8  0E01               	movlw	high _seconds_temp
 18927  0053DA  22DA               	addwfc	fsr2h,f,c
 18928  0053DC  6ADF               	clrf	indf2,c
 18929                           
 18930                           ; BSR set to: 1
 18931                           ;main.c: 987: current_temp[i] = 0;
 18932  0053DE  5021               	movf	init_app_ram@i,w,c
 18933  0053E0  0D02               	mullw	2
 18934  0053E2  0E00               	movlw	low _current_temp
 18935  0053E4  24F3               	addwf	prodl,w,c
 18936  0053E6  6ED9               	movwf	fsr2l,c
 18937  0053E8  0E01               	movlw	high _current_temp
 18938  0053EA  20F4               	addwfc	prodh,w,c
 18939  0053EC  6EDA               	movwf	fsr2h,c
 18940  0053EE  6ADE               	clrf	postinc2,c
 18941  0053F0  6ADD               	clrf	postdec2,c
 18942                           
 18943                           ; BSR set to: 1
 18944  0053F2  2A21               	incf	init_app_ram@i,f,c
 18945                           
 18946                           ; BSR set to: 1
 18947  0053F4  0E05               	movlw	5
 18948  0053F6  6421               	cpfsgt	init_app_ram@i,c
 18949  0053F8  D7EB               	goto	l10492
 18950                           
 18951                           ; BSR set to: 1
 18952                           ;main.c: 988: }
 18953                           ;main.c: 991: adc_conversion_flags = 0;
 18954  0053FA  0100               	movlb	0	; () banked
 18955  0053FC  6BB3               	clrf	_adc_conversion_flags& (0+255),b
 18956                           
 18957                           ;main.c: 994: adc_series_counter = 0;
 18958  0053FE  6A49               	clrf	_adc_series_counter,c
 18959                           
 18960                           ;main.c: 997: low_alarm = 0;
 18961  005400  6BB5               	clrf	_low_alarm& (0+255),b
 18962                           
 18963                           ;main.c: 1000: high_alarm = 0;
 18964  005402  6BB4               	clrf	_high_alarm& (0+255),b
 18965                           
 18966                           ; BSR set to: 0
 18967                           ;main.c: 1003: writeCoeffs2Ram();
 18968  005404  EFFE  F025         	goto	_writeCoeffs2Ram	;wreg free
 18969  005408                     __end_of_init_app_ram:
 18970                           	opt stack 0
 18971                           tblptru	equ	0xFF8
 18972                           tblptrh	equ	0xFF7
 18973                           tblptrl	equ	0xFF6
 18974                           tablat	equ	0xFF5
 18975                           prodh	equ	0xFF4
 18976                           prodl	equ	0xFF3
 18977                           intcon	equ	0xFF2
 18978                           postinc0	equ	0xFEE
 18979                           wreg	equ	0xFE8
 18980                           indf1	equ	0xFE7
 18981                           postdec1	equ	0xFE5
 18982                           fsr1h	equ	0xFE2
 18983                           fsr1l	equ	0xFE1
 18984                           indf2	equ	0xFDF
 18985                           postinc2	equ	0xFDE
 18986                           postdec2	equ	0xFDD
 18987                           plusw2	equ	0xFDB
 18988                           fsr2h	equ	0xFDA
 18989                           fsr2l	equ	0xFD9
 18990                           status	equ	0xFD8
 18991                           
 18992 ;; *************** function _writeCoeffs2Ram *****************
 18993 ;; Defined at:
 18994 ;;		line 960 in file "../main.c"
 18995 ;; Parameters:    Size  Location     Type
 18996 ;;		None
 18997 ;; Auto vars:     Size  Location     Type
 18998 ;;  c               3   25[COMRAM] unsigned char [3]
 18999 ;;  j               2   30[COMRAM] int 
 19000 ;;  i               2   28[COMRAM] int 
 19001 ;; Return value:  Size  Location     Type
 19002 ;;		None               void
 19003 ;; Registers used:
 19004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19005 ;; Tracked objects:
 19006 ;;		On entry : 0/0
 19007 ;;		On exit  : F/1
 19008 ;;		Unchanged: 0/0
 19009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19010 ;;      Params:         0       0       0       0       0       0       0
 19011 ;;      Locals:         7       0       0       0       0       0       0
 19012 ;;      Temps:          2       0       0       0       0       0       0
 19013 ;;      Totals:         9       0       0       0       0       0       0
 19014 ;;Total ram usage:        9 bytes
 19015 ;; Hardware stack levels used:    1
 19016 ;; Hardware stack levels required when called:    3
 19017 ;; This function calls:
 19018 ;;		_readEEPROM
 19019 ;;		___wmul
 19020 ;; This function is called by:
 19021 ;;		_init_app_ram
 19022 ;;		_vscp_writeAppReg
 19023 ;; This function uses a non-reentrant model
 19024 ;;
 19025                           
 19026                           	psect	text91
 19027  004BFC                     __ptext91:
 19028                           	opt stack 0
 19029  004BFC                     _writeCoeffs2Ram:
 19030                           	opt stack 23
 19031                           
 19032                           ;main.c: 961: int i, j;
 19033                           ;main.c: 962: uint8_t c[3];
 19034                           ;main.c: 964: for (i = 0; i < 6; i++) {
 19035                           
 19036                           ; BSR set to: 1
 19037                           ;incstack = 0
 19038                           ;incstack = 0
 19039  004BFC  6A1D               	clrf	writeCoeffs2Ram@i,c
 19040  004BFE  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 19041  004C00                     l10508:
 19042                           
 19043                           ;main.c: 965: for (j = 2; j > 0; j--) {
 19044  004C00  6A20               	clrf	writeCoeffs2Ram@j+1,c
 19045  004C02  0E02               	movlw	2
 19046  004C04  6E1F               	movwf	writeCoeffs2Ram@j,c
 19047  004C06                     l10514:
 19048                           
 19049                           ;main.c: 967: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 19050  004C06  501F               	movf	writeCoeffs2Ram@j,w,c
 19051  004C08  0802               	sublw	2
 19052  004C0A  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 19053  004C0C  5018               	movf	??_writeCoeffs2Ram,w,c
 19054  004C0E  0F1A               	addlw	low writeCoeffs2Ram@c
 19055  004C10  6ED9               	movwf	fsr2l,c
 19056  004C12  6ADA               	clrf	fsr2h,c
 19057  004C14  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 19058  004C18  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 19059  004C1C  6A15               	clrf	?___wmul+3,c
 19060  004C1E  0E03               	movlw	3
 19061  004C20  6E14               	movwf	?___wmul+2,c
 19062  004C22  EC9E  F02A         	call	___wmul	;wreg free
 19063  004C26  501F               	movf	writeCoeffs2Ram@j,w,c
 19064  004C28  2612               	addwf	?___wmul,f,c
 19065  004C2A  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19066  004C2C  2213               	addwfc	?___wmul+1,f,c
 19067  004C2E  0EAA               	movlw	170
 19068  004C30  2412               	addwf	?___wmul,w,c
 19069  004C32  6E0E               	movwf	?_readEEPROM,c
 19070  004C34  0E00               	movlw	0
 19071  004C36  2013               	addwfc	?___wmul+1,w,c
 19072  004C38  6E0F               	movwf	?_readEEPROM+1,c
 19073  004C3A  EC9D  F02C         	call	_readEEPROM	;wreg free
 19074  004C3E  6EDF               	movwf	indf2,c
 19075  004C40  061F               	decf	writeCoeffs2Ram@j,f,c
 19076  004C42  A0D8               	btfss	status,0,c
 19077  004C44  0620               	decf	writeCoeffs2Ram@j+1,f,c
 19078  004C46  5020               	movf	writeCoeffs2Ram@j+1,w,c
 19079  004C48  0A80               	xorlw	128
 19080  004C4A  0F80               	addlw	-128
 19081  004C4C  0E01               	movlw	1
 19082  004C4E  B4D8               	btfsc	status,2,c
 19083  004C50  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 19084  004C52  E2D9               	bc	l10514
 19085                           
 19086                           ;main.c: 968: }
 19087                           ;main.c: 969: sh_coefficients[i] = *((double*) c);
 19088  004C54  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 19089  004C58  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 19090  004C5C  90D8               	bcf	status,0,c
 19091  004C5E  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19092  004C60  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19093  004C62  90D8               	bcf	status,0,c
 19094  004C64  3618               	rlcf	??_writeCoeffs2Ram,f,c
 19095  004C66  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 19096  004C68  0101               	movlb	1	; () banked
 19097  004C6A  0E1F               	movlw	low _sh_coefficients
 19098  004C6C  2418               	addwf	??_writeCoeffs2Ram,w,c
 19099  004C6E  6ED9               	movwf	fsr2l,c
 19100  004C70  0E01               	movlw	high _sh_coefficients
 19101  004C72  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 19102  004C74  6EDA               	movwf	fsr2h,c
 19103  004C76  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 19104  004C7A  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 19105  004C7E  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 19106  004C82  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 19107                           
 19108                           ; BSR set to: 1
 19109  004C86  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 19110  004C88  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 19111                           
 19112                           ; BSR set to: 1
 19113  004C8A  501E               	movf	writeCoeffs2Ram@i+1,w,c
 19114  004C8C  0A80               	xorlw	128
 19115  004C8E  0F80               	addlw	-128
 19116  004C90  0E06               	movlw	6
 19117  004C92  B4D8               	btfsc	status,2,c
 19118  004C94  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 19119  004C96  B0D8               	btfsc	status,0,c
 19120                           
 19121                           ; BSR set to: 1
 19122  004C98  0012               	return	
 19123  004C9A  D7B2               	goto	l10508
 19124  004C9C                     __end_of_writeCoeffs2Ram:
 19125                           	opt stack 0
 19126                           tblptru	equ	0xFF8
 19127                           tblptrh	equ	0xFF7
 19128                           tblptrl	equ	0xFF6
 19129                           tablat	equ	0xFF5
 19130                           prodh	equ	0xFF4
 19131                           prodl	equ	0xFF3
 19132                           intcon	equ	0xFF2
 19133                           postinc0	equ	0xFEE
 19134                           wreg	equ	0xFE8
 19135                           indf1	equ	0xFE7
 19136                           postdec1	equ	0xFE5
 19137                           fsr1h	equ	0xFE2
 19138                           fsr1l	equ	0xFE1
 19139                           indf2	equ	0xFDF
 19140                           postinc2	equ	0xFDE
 19141                           postdec2	equ	0xFDD
 19142                           plusw2	equ	0xFDB
 19143                           fsr2h	equ	0xFDA
 19144                           fsr2l	equ	0xFD9
 19145                           status	equ	0xFD8
 19146                           
 19147 ;; *************** function ___wmul *****************
 19148 ;; Defined at:
 19149 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 19150 ;; Parameters:    Size  Location     Type
 19151 ;;  multiplier      2   17[COMRAM] unsigned int 
 19152 ;;  multiplicand    2   19[COMRAM] unsigned int 
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;  product         2   21[COMRAM] unsigned int 
 19155 ;; Return value:  Size  Location     Type
 19156 ;;                  2   17[COMRAM] unsigned int 
 19157 ;; Registers used:
 19158 ;;		wreg, status,2, status,0, prodl, prodh
 19159 ;; Tracked objects:
 19160 ;;		On entry : 0/1
 19161 ;;		On exit  : 0/0
 19162 ;;		Unchanged: 0/0
 19163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19164 ;;      Params:         4       0       0       0       0       0       0
 19165 ;;      Locals:         2       0       0       0       0       0       0
 19166 ;;      Temps:          0       0       0       0       0       0       0
 19167 ;;      Totals:         6       0       0       0       0       0       0
 19168 ;;Total ram usage:        6 bytes
 19169 ;; Hardware stack levels used:    1
 19170 ;; Hardware stack levels required when called:    2
 19171 ;; This function calls:
 19172 ;;		Nothing
 19173 ;; This function is called by:
 19174 ;;		_doWork
 19175 ;;		_writeCoeffs2Ram
 19176 ;; This function uses a non-reentrant model
 19177 ;;
 19178                           
 19179                           	psect	text92
 19180  00553C                     __ptext92:
 19181                           	opt stack 0
 19182  00553C                     ___wmul:
 19183                           	opt stack 27
 19184                           
 19185                           ; BSR set to: 1
 19186                           ;incstack = 0
 19187                           ;incstack = 0
 19188  00553C  5012               	movf	___wmul@multiplier,w,c
 19189  00553E  0214               	mulwf	___wmul@multiplicand,c
 19190  005540  CFF3 F016          	movff	prodl,___wmul@product
 19191  005544  CFF4 F017          	movff	prodh,___wmul@product+1
 19192  005548  5012               	movf	___wmul@multiplier,w,c
 19193  00554A  0215               	mulwf	___wmul@multiplicand+1,c
 19194  00554C  CFF3 FFF4          	movff	prodl,prodh
 19195  005550  6AF3               	clrf	prodl,c
 19196  005552  50F3               	movf	prodl,w,c
 19197  005554  2616               	addwf	___wmul@product,f,c
 19198  005556  50F4               	movf	prodh,w,c
 19199  005558  2217               	addwfc	___wmul@product+1,f,c
 19200  00555A  5013               	movf	___wmul@multiplier+1,w,c
 19201  00555C  0214               	mulwf	___wmul@multiplicand,c
 19202  00555E  CFF3 FFF4          	movff	prodl,prodh
 19203  005562  6AF3               	clrf	prodl,c
 19204  005564  50F3               	movf	prodl,w,c
 19205  005566  2616               	addwf	___wmul@product,f,c
 19206  005568  50F4               	movf	prodh,w,c
 19207  00556A  2217               	addwfc	___wmul@product+1,f,c
 19208  00556C  C016  F012         	movff	___wmul@product,?___wmul
 19209  005570  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19210  005574  0012               	return	
 19211  005576                     __end_of___wmul:
 19212                           	opt stack 0
 19213                           tblptru	equ	0xFF8
 19214                           tblptrh	equ	0xFF7
 19215                           tblptrl	equ	0xFF6
 19216                           tablat	equ	0xFF5
 19217                           prodh	equ	0xFF4
 19218                           prodl	equ	0xFF3
 19219                           intcon	equ	0xFF2
 19220                           postinc0	equ	0xFEE
 19221                           wreg	equ	0xFE8
 19222                           indf1	equ	0xFE7
 19223                           postdec1	equ	0xFE5
 19224                           fsr1h	equ	0xFE2
 19225                           fsr1l	equ	0xFE1
 19226                           indf2	equ	0xFDF
 19227                           postinc2	equ	0xFDE
 19228                           postdec2	equ	0xFDD
 19229                           plusw2	equ	0xFDB
 19230                           fsr2h	equ	0xFDA
 19231                           fsr2l	equ	0xFD9
 19232                           status	equ	0xFD8
 19233                           
 19234 ;; *************** function _ConvertADC *****************
 19235 ;; Defined at:
 19236 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19237 ;; Parameters:    Size  Location     Type
 19238 ;;		None
 19239 ;; Auto vars:     Size  Location     Type
 19240 ;;		None
 19241 ;; Return value:  Size  Location     Type
 19242 ;;		None               void
 19243 ;; Registers used:
 19244 ;;		None
 19245 ;; Tracked objects:
 19246 ;;		On entry : 1/1
 19247 ;;		On exit  : 1/1
 19248 ;;		Unchanged: 1/0
 19249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19250 ;;      Params:         0       0       0       0       0       0       0
 19251 ;;      Locals:         0       0       0       0       0       0       0
 19252 ;;      Temps:          0       0       0       0       0       0       0
 19253 ;;      Totals:         0       0       0       0       0       0       0
 19254 ;;Total ram usage:        0 bytes
 19255 ;; Hardware stack levels used:    1
 19256 ;; Hardware stack levels required when called:    2
 19257 ;; This function calls:
 19258 ;;		Nothing
 19259 ;; This function is called by:
 19260 ;;		_init
 19261 ;; This function uses a non-reentrant model
 19262 ;;
 19263                           
 19264                           	psect	text93
 19265  0059DA                     __ptext93:
 19266                           	opt stack 0
 19267  0059DA                     _ConvertADC:
 19268                           	opt stack 27
 19269                           
 19270                           ;incstack = 0
 19271                           ;incstack = 0
 19272  0059DA  82C2               	bsf	4034,1,c	;volatile
 19273  0059DC  0012               	return	
 19274  0059DE                     __end_of_ConvertADC:
 19275                           	opt stack 0
 19276                           tblptru	equ	0xFF8
 19277                           tblptrh	equ	0xFF7
 19278                           tblptrl	equ	0xFF6
 19279                           tablat	equ	0xFF5
 19280                           prodh	equ	0xFF4
 19281                           prodl	equ	0xFF3
 19282                           intcon	equ	0xFF2
 19283                           postinc0	equ	0xFEE
 19284                           wreg	equ	0xFE8
 19285                           indf1	equ	0xFE7
 19286                           postdec1	equ	0xFE5
 19287                           fsr1h	equ	0xFE2
 19288                           fsr1l	equ	0xFE1
 19289                           indf2	equ	0xFDF
 19290                           postinc2	equ	0xFDE
 19291                           postdec2	equ	0xFDD
 19292                           plusw2	equ	0xFDB
 19293                           fsr2h	equ	0xFDA
 19294                           fsr2l	equ	0xFD9
 19295                           status	equ	0xFD8
 19296                           
 19297 ;; *************** function _WriteTimer0 *****************
 19298 ;; Defined at:
 19299 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19300 ;; Parameters:    Size  Location     Type
 19301 ;;  timer0          2   13[COMRAM] unsigned int 
 19302 ;; Auto vars:     Size  Location     Type
 19303 ;;  timer           2   15[COMRAM] struct Timers
 19304 ;; Return value:  Size  Location     Type
 19305 ;;		None               void
 19306 ;; Registers used:
 19307 ;;		None
 19308 ;; Tracked objects:
 19309 ;;		On entry : F/1
 19310 ;;		On exit  : F/1
 19311 ;;		Unchanged: F/0
 19312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19313 ;;      Params:         2       0       0       0       0       0       0
 19314 ;;      Locals:         2       0       0       0       0       0       0
 19315 ;;      Temps:          0       0       0       0       0       0       0
 19316 ;;      Totals:         4       0       0       0       0       0       0
 19317 ;;Total ram usage:        4 bytes
 19318 ;; Hardware stack levels used:    1
 19319 ;; Hardware stack levels required when called:    2
 19320 ;; This function calls:
 19321 ;;		Nothing
 19322 ;; This function is called by:
 19323 ;;		_init
 19324 ;; This function uses a non-reentrant model
 19325 ;;
 19326                           
 19327                           	psect	text94
 19328  00595E                     __ptext94:
 19329                           	opt stack 0
 19330  00595E                     _WriteTimer0:
 19331                           	opt stack 27
 19332                           
 19333                           ; BSR set to: 1
 19334                           
 19335                           ;incstack = 0
 19336                           ;incstack = 0
 19337  00595E  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19338  005962  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19339  005966  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19340  00596A  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19341                           
 19342                           ; BSR set to: 1
 19343  00596E  0012               	return	
 19344  005970                     __end_of_WriteTimer0:
 19345                           	opt stack 0
 19346                           tblptru	equ	0xFF8
 19347                           tblptrh	equ	0xFF7
 19348                           tblptrl	equ	0xFF6
 19349                           tablat	equ	0xFF5
 19350                           prodh	equ	0xFF4
 19351                           prodl	equ	0xFF3
 19352                           intcon	equ	0xFF2
 19353                           postinc0	equ	0xFEE
 19354                           wreg	equ	0xFE8
 19355                           indf1	equ	0xFE7
 19356                           postdec1	equ	0xFE5
 19357                           fsr1h	equ	0xFE2
 19358                           fsr1l	equ	0xFE1
 19359                           indf2	equ	0xFDF
 19360                           postinc2	equ	0xFDE
 19361                           postdec2	equ	0xFDD
 19362                           plusw2	equ	0xFDB
 19363                           fsr2h	equ	0xFDA
 19364                           fsr2l	equ	0xFD9
 19365                           status	equ	0xFD8
 19366                           
 19367 ;; *************** function ___awtofl *****************
 19368 ;; Defined at:
 19369 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19370 ;; Parameters:    Size  Location     Type
 19371 ;;  c               2   23[COMRAM] int 
 19372 ;; Auto vars:     Size  Location     Type
 19373 ;;  f1              4    0        int 
 19374 ;;  sign            1   29[COMRAM] unsigned char 
 19375 ;; Return value:  Size  Location     Type
 19376 ;;                  4   23[COMRAM] unsigned char 
 19377 ;; Registers used:
 19378 ;;		wreg, status,2, status,0, cstack
 19379 ;; Tracked objects:
 19380 ;;		On entry : F/0
 19381 ;;		On exit  : 0/0
 19382 ;;		Unchanged: 0/0
 19383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19384 ;;      Params:         4       0       0       0       0       0       0
 19385 ;;      Locals:         3       0       0       0       0       0       0
 19386 ;;      Temps:          0       0       0       0       0       0       0
 19387 ;;      Totals:         7       0       0       0       0       0       0
 19388 ;;Total ram usage:        7 bytes
 19389 ;; Hardware stack levels used:    1
 19390 ;; Hardware stack levels required when called:    3
 19391 ;; This function calls:
 19392 ;;		___flpack
 19393 ;; This function is called by:
 19394 ;;		_setEventData
 19395 ;;		_exp
 19396 ;;		_log
 19397 ;; This function uses a non-reentrant model
 19398 ;;
 19399                           
 19400                           	psect	text95
 19401  005576                     __ptext95:
 19402                           	opt stack 0
 19403  005576                     ___awtofl:
 19404                           	opt stack 25
 19405                           
 19406                           ; BSR set to: 0
 19407                           
 19408                           ; BSR set to: 1
 19409                           ;incstack = 0
 19410                           ;incstack = 0
 19411  005576  6A1E               	clrf	___awtofl@sign,c
 19412  005578  AE19               	btfss	___awtofl@c+1,7,c
 19413  00557A  D005               	goto	l11644
 19414                           
 19415                           ; BSR set to: 0
 19416  00557C  6C18               	negf	___awtofl@c,c
 19417  00557E  1E19               	comf	___awtofl@c+1,f,c
 19418  005580  B0D8               	btfsc	status,0,c
 19419  005582  2A19               	incf	___awtofl@c+1,f,c
 19420  005584  2A1E               	incf	___awtofl@sign,f,c
 19421  005586                     l11644:
 19422                           
 19423                           ; BSR set to: 0
 19424  005586  C018  F00E         	movff	___awtofl@c,?___flpack
 19425  00558A  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19426  00558E  6A10               	clrf	?___flpack+2,c
 19427  005590  6A11               	clrf	?___flpack+3,c
 19428  005592  0E96               	movlw	150
 19429  005594  6E12               	movwf	?___flpack+4,c
 19430  005596  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19431  00559A  ECE9  F023         	call	___flpack	;wreg free
 19432  00559E  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19433  0055A2  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19434  0055A6  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19435  0055AA  C00E  F018         	movff	?___flpack,?___awtofl
 19436  0055AE  0012               	return	
 19437  0055B0                     __end_of___awtofl:
 19438                           	opt stack 0
 19439                           tblptru	equ	0xFF8
 19440                           tblptrh	equ	0xFF7
 19441                           tblptrl	equ	0xFF6
 19442                           tablat	equ	0xFF5
 19443                           prodh	equ	0xFF4
 19444                           prodl	equ	0xFF3
 19445                           intcon	equ	0xFF2
 19446                           postinc0	equ	0xFEE
 19447                           wreg	equ	0xFE8
 19448                           indf1	equ	0xFE7
 19449                           postdec1	equ	0xFE5
 19450                           fsr1h	equ	0xFE2
 19451                           fsr1l	equ	0xFE1
 19452                           indf2	equ	0xFDF
 19453                           postinc2	equ	0xFDE
 19454                           postdec2	equ	0xFDD
 19455                           plusw2	equ	0xFDB
 19456                           fsr2h	equ	0xFDA
 19457                           fsr2l	equ	0xFD9
 19458                           status	equ	0xFD8
 19459                           
 19460 ;; *************** function ___flmul *****************
 19461 ;; Defined at:
 19462 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19463 ;; Parameters:    Size  Location     Type
 19464 ;;  f1              4    0[BANK0 ] unsigned char 
 19465 ;;  f2              4    4[BANK0 ] unsigned char 
 19466 ;; Auto vars:     Size  Location     Type
 19467 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19468 ;;  sign            1   21[BANK0 ] unsigned char 
 19469 ;;  cntr            1   20[BANK0 ] unsigned char 
 19470 ;;  exp             1   15[BANK0 ] unsigned char 
 19471 ;; Return value:  Size  Location     Type
 19472 ;;                  4    0[BANK0 ] unsigned char 
 19473 ;; Registers used:
 19474 ;;		wreg, status,2, status,0, cstack
 19475 ;; Tracked objects:
 19476 ;;		On entry : 0/0
 19477 ;;		On exit  : 0/0
 19478 ;;		Unchanged: 0/0
 19479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19480 ;;      Params:         0       8       0       0       0       0       0
 19481 ;;      Locals:         0      14       0       0       0       0       0
 19482 ;;      Temps:          0       0       0       0       0       0       0
 19483 ;;      Totals:         0      22       0       0       0       0       0
 19484 ;;Total ram usage:       22 bytes
 19485 ;; Hardware stack levels used:    1
 19486 ;; Hardware stack levels required when called:    3
 19487 ;; This function calls:
 19488 ;;		___flpack
 19489 ;; This function is called by:
 19490 ;;		_doWork
 19491 ;;		_Celsius2Fahrenheit
 19492 ;;		___asflmul
 19493 ;;		_log
 19494 ;;		_eval_poly
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           	psect	text96
 19499  004578                     __ptext96:
 19500                           	opt stack 0
 19501  004578                     ___flmul:
 19502                           	opt stack 26
 19503                           
 19504                           ;incstack = 0
 19505                           ;incstack = 0
 19506  004578  0100               	movlb	0	; () banked
 19507  00457A  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19508  00457C  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19509  00457E  6F6F               	movwf	___flmul@exp& (0+255),b
 19510  004580  676F               	tstfsz	___flmul@exp& (0+255),b
 19511  004582  D001               	goto	l11588
 19512  004584  D006               	goto	u10040
 19513  004586                     l11588:
 19514                           
 19515                           ; BSR set to: 0
 19516  004586  0100               	movlb	0	; () banked
 19517  004588  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19518  00458A  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19519  00458C  6F75               	movwf	___flmul@sign& (0+255),b
 19520  00458E  6775               	tstfsz	___flmul@sign& (0+255),b
 19521  004590  D005               	goto	l11592
 19522  004592                     u10040:
 19523                           
 19524                           ; BSR set to: 0
 19525  004592  6B60               	clrf	?___flmul& (0+255),b
 19526  004594  6B61               	clrf	(?___flmul+1)& (0+255),b
 19527  004596  6B62               	clrf	(?___flmul+2)& (0+255),b
 19528  004598  6B63               	clrf	(?___flmul+3)& (0+255),b
 19529  00459A  D058               	goto	l1612
 19530  00459C                     l11592:
 19531                           
 19532                           ; BSR set to: 0
 19533  00459C  5175               	movf	___flmul@sign& (0+255),w,b
 19534  00459E  0F7B               	addlw	123
 19535  0045A0  276F               	addwf	___flmul@exp& (0+255),f,b
 19536                           
 19537                           ; BSR set to: 0
 19538  0045A2  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19539  0045A6  0100               	movlb	0	; () banked
 19540  0045A8  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19541  0045AA  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19542  0045AC  0E80               	movlw	128
 19543  0045AE  1775               	andwf	___flmul@sign& (0+255),f,b
 19544                           
 19545                           ; BSR set to: 0
 19546  0045B0  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19547                           
 19548                           ; BSR set to: 0
 19549  0045B2  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19550  0045B4  0E00               	movlw	0
 19551  0045B6  1767               	andwf	(___flmul@f2+3)& (0+255),f,b
 19552                           
 19553                           ; BSR set to: 0
 19554  0045B8  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19555  0045BA  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19556  0045BC  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19557  0045BE  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19558                           
 19559                           ; BSR set to: 0
 19560  0045C0  0E07               	movlw	7
 19561  0045C2  6F74               	movwf	___flmul@cntr& (0+255),b
 19562  0045C4                     l11604:
 19563                           
 19564                           ; BSR set to: 0
 19565  0045C4  A160               	btfss	___flmul@f1& (0+255),0,b
 19566  0045C6  D008               	goto	l11608
 19567                           
 19568                           ; BSR set to: 0
 19569  0045C8  5164               	movf	___flmul@f2& (0+255),w,b
 19570  0045CA  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19571  0045CC  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19572  0045CE  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19573  0045D0  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19574  0045D2  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19575  0045D4  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19576  0045D6  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19577  0045D8                     l11608:
 19578                           
 19579                           ; BSR set to: 0
 19580  0045D8  90D8               	bcf	status,0,c
 19581  0045DA  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19582  0045DC  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19583  0045DE  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19584  0045E0  3360               	rrcf	___flmul@f1& (0+255),f,b
 19585                           
 19586                           ; BSR set to: 0
 19587  0045E2  90D8               	bcf	status,0,c
 19588  0045E4  3764               	rlcf	___flmul@f2& (0+255),f,b
 19589  0045E6  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19590  0045E8  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19591  0045EA  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19592                           
 19593                           ; BSR set to: 0
 19594  0045EC  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19595  0045EE  D7EA               	goto	l11604
 19596                           
 19597                           ; BSR set to: 0
 19598  0045F0  0E11               	movlw	17
 19599  0045F2  6F74               	movwf	___flmul@cntr& (0+255),b
 19600  0045F4                     l11616:
 19601                           
 19602                           ; BSR set to: 0
 19603  0045F4  A160               	btfss	___flmul@f1& (0+255),0,b
 19604  0045F6  D008               	goto	l11620
 19605                           
 19606                           ; BSR set to: 0
 19607  0045F8  5164               	movf	___flmul@f2& (0+255),w,b
 19608  0045FA  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19609  0045FC  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19610  0045FE  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19611  004600  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19612  004602  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19613  004604  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19614  004606  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19615  004608                     l11620:
 19616                           
 19617                           ; BSR set to: 0
 19618  004608  90D8               	bcf	status,0,c
 19619  00460A  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19620  00460C  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19621  00460E  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19622  004610  3360               	rrcf	___flmul@f1& (0+255),f,b
 19623                           
 19624                           ; BSR set to: 0
 19625  004612  90D8               	bcf	status,0,c
 19626  004614  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19627  004616  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19628  004618  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19629  00461A  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19630                           
 19631                           ; BSR set to: 0
 19632  00461C  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19633  00461E  D7EA               	goto	l11616
 19634                           
 19635                           ; BSR set to: 0
 19636  004620  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19637  004624  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19638  004628  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19639  00462C  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19640  004630  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19641  004634  C075  F013         	movff	___flmul@sign,?___flpack+5
 19642  004638  ECE9  F023         	call	___flpack	;wreg free
 19643  00463C  C011  F063         	movff	?___flpack+3,?___flmul+3
 19644  004640  C010  F062         	movff	?___flpack+2,?___flmul+2
 19645  004644  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19646  004648  C00E  F060         	movff	?___flpack,?___flmul
 19647  00464C                     l1612:
 19648  00464C  0012               	return	
 19649  00464E                     __end_of___flmul:
 19650                           	opt stack 0
 19651                           tblptru	equ	0xFF8
 19652                           tblptrh	equ	0xFF7
 19653                           tblptrl	equ	0xFF6
 19654                           tablat	equ	0xFF5
 19655                           prodh	equ	0xFF4
 19656                           prodl	equ	0xFF3
 19657                           intcon	equ	0xFF2
 19658                           postinc0	equ	0xFEE
 19659                           wreg	equ	0xFE8
 19660                           indf1	equ	0xFE7
 19661                           postdec1	equ	0xFE5
 19662                           fsr1h	equ	0xFE2
 19663                           fsr1l	equ	0xFE1
 19664                           indf2	equ	0xFDF
 19665                           postinc2	equ	0xFDE
 19666                           postdec2	equ	0xFDD
 19667                           plusw2	equ	0xFDB
 19668                           fsr2h	equ	0xFDA
 19669                           fsr2l	equ	0xFD9
 19670                           status	equ	0xFD8
 19671                           
 19672 ;; *************** function ___flpack *****************
 19673 ;; Defined at:
 19674 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19675 ;; Parameters:    Size  Location     Type
 19676 ;;  arg             4   13[COMRAM] unsigned long 
 19677 ;;  exp             1   17[COMRAM] unsigned char 
 19678 ;;  sign            1   18[COMRAM] unsigned char 
 19679 ;; Auto vars:     Size  Location     Type
 19680 ;;		None
 19681 ;; Return value:  Size  Location     Type
 19682 ;;                  4   13[COMRAM] unsigned char 
 19683 ;; Registers used:
 19684 ;;		wreg, status,2, status,0
 19685 ;; Tracked objects:
 19686 ;;		On entry : 0/0
 19687 ;;		On exit  : 0/0
 19688 ;;		Unchanged: 0/0
 19689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19690 ;;      Params:         6       0       0       0       0       0       0
 19691 ;;      Locals:         0       0       0       0       0       0       0
 19692 ;;      Temps:          4       0       0       0       0       0       0
 19693 ;;      Totals:        10       0       0       0       0       0       0
 19694 ;;Total ram usage:       10 bytes
 19695 ;; Hardware stack levels used:    1
 19696 ;; Hardware stack levels required when called:    2
 19697 ;; This function calls:
 19698 ;;		Nothing
 19699 ;; This function is called by:
 19700 ;;		___altofl
 19701 ;;		___awtofl
 19702 ;;		___fladd
 19703 ;;		___fldiv
 19704 ;;		___flmul
 19705 ;;		___lwtofl
 19706 ;; This function uses a non-reentrant model
 19707 ;;
 19708                           
 19709                           	psect	text97
 19710  0047D2                     __ptext97:
 19711                           	opt stack 0
 19712  0047D2                     ___flpack:
 19713                           	opt stack 26
 19714                           
 19715                           ;incstack = 0
 19716                           ;incstack = 0
 19717  0047D2  5012               	movf	___flpack@exp,w,c
 19718  0047D4  E005               	bz	l1527
 19719  0047D6  5011               	movf	___flpack@arg+3,w,c
 19720  0047D8  100E               	iorwf	___flpack@arg,w,c
 19721  0047DA  100F               	iorwf	___flpack@arg+1,w,c
 19722  0047DC  1010               	iorwf	___flpack@arg+2,w,c
 19723  0047DE  E10B               	bnz	l11394
 19724  0047E0                     l1527:
 19725  0047E0  6A0E               	clrf	?___flpack,c
 19726  0047E2  6A0F               	clrf	?___flpack+1,c
 19727  0047E4  6A10               	clrf	?___flpack+2,c
 19728  0047E6  6A11               	clrf	?___flpack+3,c
 19729  0047E8  D053               	goto	l1528
 19730  0047EA                     l11392:
 19731  0047EA  2A12               	incf	___flpack@exp,f,c
 19732  0047EC  90D8               	bcf	status,0,c
 19733  0047EE  3211               	rrcf	___flpack@arg+3,f,c
 19734  0047F0  3210               	rrcf	___flpack@arg+2,f,c
 19735  0047F2  320F               	rrcf	___flpack@arg+1,f,c
 19736  0047F4  320E               	rrcf	___flpack@arg,f,c
 19737  0047F6                     l11394:
 19738  0047F6  6A14               	clrf	??___flpack& (0+255),c
 19739  0047F8  6A15               	clrf	(??___flpack+1)& (0+255),c
 19740  0047FA  6A16               	clrf	(??___flpack+2)& (0+255),c
 19741  0047FC  0EFE               	movlw	254
 19742  0047FE  1411               	andwf	___flpack@arg+3,w,c
 19743  004800  6E17               	movwf	(??___flpack+3)& (0+255),c
 19744  004802  5017               	movf	??___flpack+3,w,c
 19745  004804  1014               	iorwf	??___flpack,w,c
 19746  004806  1015               	iorwf	??___flpack+1,w,c
 19747  004808  1016               	iorwf	??___flpack+2,w,c
 19748  00480A  E00C               	bz	l1532
 19749  00480C  D7EE               	goto	l11392
 19750  00480E                     l11396:
 19751  00480E  2A12               	incf	___flpack@exp,f,c
 19752  004810  2A0E               	incf	___flpack@arg,f,c
 19753  004812  0E00               	movlw	0
 19754  004814  220F               	addwfc	___flpack@arg+1,f,c
 19755  004816  2210               	addwfc	___flpack@arg+2,f,c
 19756  004818  2211               	addwfc	___flpack@arg+3,f,c
 19757  00481A  90D8               	bcf	status,0,c
 19758  00481C  3211               	rrcf	___flpack@arg+3,f,c
 19759  00481E  3210               	rrcf	___flpack@arg+2,f,c
 19760  004820  320F               	rrcf	___flpack@arg+1,f,c
 19761  004822  320E               	rrcf	___flpack@arg,f,c
 19762  004824                     l1532:
 19763  004824  6A14               	clrf	??___flpack& (0+255),c
 19764  004826  6A15               	clrf	(??___flpack+1)& (0+255),c
 19765  004828  6A16               	clrf	(??___flpack+2)& (0+255),c
 19766  00482A  5011               	movf	___flpack@arg+3,w,c
 19767  00482C  6E17               	movwf	(??___flpack+3)& (0+255),c
 19768  00482E  5017               	movf	??___flpack+3,w,c
 19769  004830  1014               	iorwf	??___flpack,w,c
 19770  004832  1015               	iorwf	??___flpack+1,w,c
 19771  004834  1016               	iorwf	??___flpack+2,w,c
 19772  004836  E007               	bz	l11404
 19773  004838  D7EA               	goto	l11396
 19774  00483A                     l11402:
 19775  00483A  0612               	decf	___flpack@exp,f,c
 19776  00483C  90D8               	bcf	status,0,c
 19777  00483E  360E               	rlcf	___flpack@arg,f,c
 19778  004840  360F               	rlcf	___flpack@arg+1,f,c
 19779  004842  3610               	rlcf	___flpack@arg+2,f,c
 19780  004844  3611               	rlcf	___flpack@arg+3,f,c
 19781  004846                     l11404:
 19782  004846  AE10               	btfss	___flpack@arg+2,7,c
 19783  004848  D7F8               	goto	l11402
 19784  00484A  B012               	btfsc	___flpack@exp,0,c
 19785  00484C  D002               	goto	l1538
 19786  00484E  0E7F               	movlw	127
 19787  004850  1610               	andwf	___flpack@arg+2,f,c
 19788  004852                     l1538:
 19789  004852  90D8               	bcf	status,0,c
 19790  004854  3212               	rrcf	___flpack@exp,f,c
 19791  004856  C012  F014         	movff	___flpack@exp,??___flpack
 19792  00485A  6A15               	clrf	(??___flpack+1)& (0+255),c
 19793  00485C  6A16               	clrf	(??___flpack+2)& (0+255),c
 19794  00485E  6A17               	clrf	(??___flpack+3)& (0+255),c
 19795  004860  C014  F017         	movff	??___flpack,??___flpack+3
 19796  004864  6A16               	clrf	??___flpack+2,c
 19797  004866  6A15               	clrf	??___flpack+1,c
 19798  004868  6A14               	clrf	??___flpack,c
 19799  00486A  5014               	movf	??___flpack,w,c
 19800  00486C  120E               	iorwf	___flpack@arg,f,c
 19801  00486E  5015               	movf	??___flpack+1,w,c
 19802  004870  120F               	iorwf	___flpack@arg+1,f,c
 19803  004872  5016               	movf	??___flpack+2,w,c
 19804  004874  1210               	iorwf	___flpack@arg+2,f,c
 19805  004876  5017               	movf	??___flpack+3,w,c
 19806  004878  1211               	iorwf	___flpack@arg+3,f,c
 19807  00487A  5013               	movf	___flpack@sign,w,c
 19808  00487C  A4D8               	btfss	status,2,c
 19809  00487E  8E11               	bsf	___flpack@arg+3,7,c
 19810  004880  C00E  F00E         	movff	___flpack@arg,?___flpack
 19811  004884  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19812  004888  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19813  00488C  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19814  004890                     l1528:
 19815  004890  0012               	return	
 19816  004892                     __end_of___flpack:
 19817                           	opt stack 0
 19818                           tblptru	equ	0xFF8
 19819                           tblptrh	equ	0xFF7
 19820                           tblptrl	equ	0xFF6
 19821                           tablat	equ	0xFF5
 19822                           prodh	equ	0xFF4
 19823                           prodl	equ	0xFF3
 19824                           intcon	equ	0xFF2
 19825                           postinc0	equ	0xFEE
 19826                           wreg	equ	0xFE8
 19827                           indf1	equ	0xFE7
 19828                           postdec1	equ	0xFE5
 19829                           fsr1h	equ	0xFE2
 19830                           fsr1l	equ	0xFE1
 19831                           indf2	equ	0xFDF
 19832                           postinc2	equ	0xFDE
 19833                           postdec2	equ	0xFDD
 19834                           plusw2	equ	0xFDB
 19835                           fsr2h	equ	0xFDA
 19836                           fsr2l	equ	0xFD9
 19837                           status	equ	0xFD8
 19838                           
 19839 ;; *************** function _vscp_readAppReg *****************
 19840 ;; Defined at:
 19841 ;;		line 1262 in file "../main.c"
 19842 ;; Parameters:    Size  Location     Type
 19843 ;;  reg             1    wreg     unsigned char 
 19844 ;; Auto vars:     Size  Location     Type
 19845 ;;  reg             1   18[COMRAM] unsigned char 
 19846 ;;  pos             1   17[COMRAM] unsigned char 
 19847 ;;  rv              1   19[COMRAM] unsigned char 
 19848 ;; Return value:  Size  Location     Type
 19849 ;;                  1    wreg      unsigned char 
 19850 ;; Registers used:
 19851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19852 ;; Tracked objects:
 19853 ;;		On entry : F/0
 19854 ;;		On exit  : 0/0
 19855 ;;		Unchanged: 0/0
 19856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19857 ;;      Params:         0       0       0       0       0       0       0
 19858 ;;      Locals:         3       0       0       0       0       0       0
 19859 ;;      Temps:          0       0       0       0       0       0       0
 19860 ;;      Totals:         3       0       0       0       0       0       0
 19861 ;;Total ram usage:        3 bytes
 19862 ;; Hardware stack levels used:    1
 19863 ;; Hardware stack levels required when called:    3
 19864 ;; This function calls:
 19865 ;;		_readEEPROM
 19866 ;; This function is called by:
 19867 ;;		_vscp_readRegister
 19868 ;;		_vscp_handleProtocolEvent
 19869 ;; This function uses a non-reentrant model
 19870 ;;
 19871                           
 19872                           	psect	text98
 19873  0026D0                     __ptext98:
 19874                           	opt stack 0
 19875  0026D0                     _vscp_readAppReg:
 19876                           	opt stack 25
 19877                           
 19878                           ;incstack = 0
 19879                           ;incstack = 0
 19880                           ;vscp_readAppReg@reg stored from wreg
 19881  0026D0  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19882                           
 19883                           ; BSR set to: 0
 19884                           ;main.c: 1263: uint8_t rv;
 19885                           ;main.c: 1268: if (0 == vscp_page_select) {
 19886  0026D4  5047               	movf	_vscp_page_select+1,w,c
 19887  0026D6  1046               	iorwf	_vscp_page_select,w,c
 19888  0026D8  E101 D225          	bz	l10734
 19889  0026DC  D369               	goto	l10736
 19890  0026DE                     l10530:
 19891                           
 19892                           ; BSR set to: 0
 19893                           ;main.c: 1274: rv = readEEPROM(0x41);
 19894  0026DE  6A0F               	clrf	?_readEEPROM+1,c
 19895  0026E0  0E41               	movlw	65
 19896  0026E2  6E0E               	movwf	?_readEEPROM,c
 19897  0026E4  EC9D  F02C         	call	_readEEPROM	;wreg free
 19898  0026E8  D381               	goto	L134
 19899  0026EA                     l10532:
 19900                           
 19901                           ; BSR set to: 0
 19902                           ;main.c: 1279: rv = readEEPROM(0x42);
 19903  0026EA  6A0F               	clrf	?_readEEPROM+1,c
 19904  0026EC  0E42               	movlw	66
 19905  0026EE  6E0E               	movwf	?_readEEPROM,c
 19906  0026F0  EC9D  F02C         	call	_readEEPROM	;wreg free
 19907  0026F4  D37B               	goto	L134
 19908  0026F6                     l10534:
 19909                           
 19910                           ; BSR set to: 0
 19911                           ;main.c: 1284: rv = readEEPROM(0x43);
 19912  0026F6  6A0F               	clrf	?_readEEPROM+1,c
 19913  0026F8  0E43               	movlw	67
 19914  0026FA  6E0E               	movwf	?_readEEPROM,c
 19915  0026FC  EC9D  F02C         	call	_readEEPROM	;wreg free
 19916  002700  D375               	goto	L134
 19917  002702                     l10536:
 19918                           
 19919                           ; BSR set to: 0
 19920                           ;main.c: 1289: rv = readEEPROM(0x44);
 19921  002702  6A0F               	clrf	?_readEEPROM+1,c
 19922  002704  0E44               	movlw	68
 19923  002706  6E0E               	movwf	?_readEEPROM,c
 19924  002708  EC9D  F02C         	call	_readEEPROM	;wreg free
 19925  00270C  D36F               	goto	L134
 19926  00270E                     l10538:
 19927                           
 19928                           ; BSR set to: 0
 19929                           ;main.c: 1294: rv = readEEPROM(0x45);
 19930  00270E  6A0F               	clrf	?_readEEPROM+1,c
 19931  002710  0E45               	movlw	69
 19932  002712  6E0E               	movwf	?_readEEPROM,c
 19933  002714  EC9D  F02C         	call	_readEEPROM	;wreg free
 19934  002718  D369               	goto	L134
 19935  00271A                     l10540:
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;main.c: 1299: rv = readEEPROM(0x46);
 19939  00271A  6A0F               	clrf	?_readEEPROM+1,c
 19940  00271C  0E46               	movlw	70
 19941  00271E  6E0E               	movwf	?_readEEPROM,c
 19942  002720  EC9D  F02C         	call	_readEEPROM	;wreg free
 19943  002724  D363               	goto	L134
 19944  002726                     l10542:
 19945                           
 19946                           ; BSR set to: 0
 19947                           ;main.c: 1304: rv = readEEPROM(0x47);
 19948  002726  6A0F               	clrf	?_readEEPROM+1,c
 19949  002728  0E47               	movlw	71
 19950  00272A  6E0E               	movwf	?_readEEPROM,c
 19951  00272C  EC9D  F02C         	call	_readEEPROM	;wreg free
 19952  002730  D35D               	goto	L134
 19953  002732                     l10544:
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;main.c: 1309: rv = readEEPROM(0x48);
 19957  002732  6A0F               	clrf	?_readEEPROM+1,c
 19958  002734  0E48               	movlw	72
 19959  002736  6E0E               	movwf	?_readEEPROM,c
 19960  002738  EC9D  F02C         	call	_readEEPROM	;wreg free
 19961  00273C  D357               	goto	L134
 19962  00273E                     l10546:
 19963                           
 19964                           ; BSR set to: 0
 19965                           ;main.c: 1314: rv = ((current_temp[0] & 0xff00) >> 8);
 19966  00273E  0101               	movlb	1	; () banked
 19967  002740  5101               	movf	(_current_temp+1)& (0+255),w,b
 19968  002742  D354               	goto	L134
 19969  002744                     l315:
 19970                           
 19971                           ; BSR set to: 0
 19972                           ;main.c: 1319: rv = (current_temp[0] & 0x00ff);
 19973  002744  C100  F014         	movff	_current_temp,vscp_readAppReg@rv
 19974                           
 19975                           ;main.c: 1320: break;
 19976  002748  D352               	goto	l10752
 19977  00274A                     l10548:
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;main.c: 1324: rv = ((current_temp[1] & 0xff00) >> 8);
 19981  00274A  0101               	movlb	1	; () banked
 19982  00274C  5103               	movf	(_current_temp+3)& (0+255),w,b
 19983  00274E  D34E               	goto	L134
 19984  002750                     l317:
 19985                           
 19986                           ; BSR set to: 0
 19987                           ;main.c: 1329: rv = (current_temp[1] & 0x00ff);
 19988  002750  C102  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19989                           
 19990                           ;main.c: 1330: break;
 19991  002754  D34C               	goto	l10752
 19992  002756                     l10550:
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;main.c: 1334: rv = ((current_temp[2] & 0xff00) >> 8);
 19996  002756  0101               	movlb	1	; () banked
 19997  002758  5105               	movf	(_current_temp+5)& (0+255),w,b
 19998  00275A  D348               	goto	L134
 19999  00275C                     l319:
 20000                           
 20001                           ; BSR set to: 0
 20002                           ;main.c: 1339: rv = (current_temp[2] & 0x00ff);
 20003  00275C  C104  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 20004                           
 20005                           ;main.c: 1340: break;
 20006  002760  D346               	goto	l10752
 20007  002762                     l10552:
 20008                           
 20009                           ; BSR set to: 0
 20010                           ;main.c: 1344: rv = ((current_temp[3] & 0xff00) >> 8);
 20011  002762  0101               	movlb	1	; () banked
 20012  002764  5107               	movf	(_current_temp+7)& (0+255),w,b
 20013  002766  D342               	goto	L134
 20014  002768                     l321:
 20015                           
 20016                           ; BSR set to: 0
 20017                           ;main.c: 1349: rv = (current_temp[3] & 0x00ff);
 20018  002768  C106  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 20019                           
 20020                           ;main.c: 1350: break;
 20021  00276C  D340               	goto	l10752
 20022  00276E                     l10554:
 20023                           
 20024                           ; BSR set to: 0
 20025                           ;main.c: 1354: rv = ((current_temp[4] & 0xff00) >> 8);
 20026  00276E  0101               	movlb	1	; () banked
 20027  002770  5109               	movf	(_current_temp+9)& (0+255),w,b
 20028  002772  D33C               	goto	L134
 20029  002774                     l323:
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;main.c: 1359: rv = (current_temp[4] & 0x00ff);
 20033  002774  C108  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 20034                           
 20035                           ;main.c: 1360: break;
 20036  002778  D33A               	goto	l10752
 20037  00277A                     l10558:
 20038                           
 20039                           ; BSR set to: 0
 20040                           ;main.c: 1374: rv = readEEPROM(0x49);
 20041  00277A  6A0F               	clrf	?_readEEPROM+1,c
 20042  00277C  0E49               	movlw	73
 20043  00277E  6E0E               	movwf	?_readEEPROM,c
 20044  002780  EC9D  F02C         	call	_readEEPROM	;wreg free
 20045  002784  D333               	goto	L134
 20046  002786                     l10560:
 20047                           
 20048                           ; BSR set to: 0
 20049                           ;main.c: 1379: rv = readEEPROM(0x4A);
 20050  002786  6A0F               	clrf	?_readEEPROM+1,c
 20051  002788  0E4A               	movlw	74
 20052  00278A  6E0E               	movwf	?_readEEPROM,c
 20053  00278C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20054  002790  D32D               	goto	L134
 20055  002792                     l10562:
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;main.c: 1384: rv = readEEPROM(0x4B);
 20059  002792  6A0F               	clrf	?_readEEPROM+1,c
 20060  002794  0E4B               	movlw	75
 20061  002796  6E0E               	movwf	?_readEEPROM,c
 20062  002798  EC9D  F02C         	call	_readEEPROM	;wreg free
 20063  00279C  D327               	goto	L134
 20064  00279E                     l10564:
 20065                           
 20066                           ; BSR set to: 0
 20067                           ;main.c: 1389: rv = readEEPROM(0x4C);
 20068  00279E  6A0F               	clrf	?_readEEPROM+1,c
 20069  0027A0  0E4C               	movlw	76
 20070  0027A2  6E0E               	movwf	?_readEEPROM,c
 20071  0027A4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20072  0027A8  D321               	goto	L134
 20073  0027AA                     l10566:
 20074                           
 20075                           ; BSR set to: 0
 20076                           ;main.c: 1394: rv = readEEPROM(0x4D);
 20077  0027AA  6A0F               	clrf	?_readEEPROM+1,c
 20078  0027AC  0E4D               	movlw	77
 20079  0027AE  6E0E               	movwf	?_readEEPROM,c
 20080  0027B0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20081  0027B4  D31B               	goto	L134
 20082  0027B6                     l10568:
 20083                           
 20084                           ; BSR set to: 0
 20085                           ;main.c: 1399: rv = readEEPROM(0x4E);
 20086  0027B6  6A0F               	clrf	?_readEEPROM+1,c
 20087  0027B8  0E4E               	movlw	78
 20088  0027BA  6E0E               	movwf	?_readEEPROM,c
 20089  0027BC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20090  0027C0  D315               	goto	L134
 20091  0027C2                     l10570:
 20092                           
 20093                           ; BSR set to: 0
 20094                           ;main.c: 1406: rv = readEEPROM(0x4F);
 20095  0027C2  6A0F               	clrf	?_readEEPROM+1,c
 20096  0027C4  0E4F               	movlw	79
 20097  0027C6  6E0E               	movwf	?_readEEPROM,c
 20098  0027C8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20099  0027CC  D30F               	goto	L134
 20100  0027CE                     l10572:
 20101                           
 20102                           ; BSR set to: 0
 20103                           ;main.c: 1411: rv = readEEPROM(0x50);
 20104  0027CE  6A0F               	clrf	?_readEEPROM+1,c
 20105  0027D0  0E50               	movlw	80
 20106  0027D2  6E0E               	movwf	?_readEEPROM,c
 20107  0027D4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20108  0027D8  D309               	goto	L134
 20109  0027DA                     l10574:
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;main.c: 1416: rv = readEEPROM(0x51);
 20113  0027DA  6A0F               	clrf	?_readEEPROM+1,c
 20114  0027DC  0E51               	movlw	81
 20115  0027DE  6E0E               	movwf	?_readEEPROM,c
 20116  0027E0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20117  0027E4  D303               	goto	L134
 20118  0027E6                     l10576:
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;main.c: 1421: rv = readEEPROM(0x52);
 20122  0027E6  6A0F               	clrf	?_readEEPROM+1,c
 20123  0027E8  0E52               	movlw	82
 20124  0027EA  6E0E               	movwf	?_readEEPROM,c
 20125  0027EC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20126  0027F0  D2FD               	goto	L134
 20127  0027F2                     l10578:
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;main.c: 1426: rv = readEEPROM(0x53);
 20131  0027F2  6A0F               	clrf	?_readEEPROM+1,c
 20132  0027F4  0E53               	movlw	83
 20133  0027F6  6E0E               	movwf	?_readEEPROM,c
 20134  0027F8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20135  0027FC  D2F7               	goto	L134
 20136  0027FE                     l10580:
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;main.c: 1431: rv = readEEPROM(0x54);
 20140  0027FE  6A0F               	clrf	?_readEEPROM+1,c
 20141  002800  0E54               	movlw	84
 20142  002802  6E0E               	movwf	?_readEEPROM,c
 20143  002804  EC9D  F02C         	call	_readEEPROM	;wreg free
 20144  002808  D2F1               	goto	L134
 20145  00280A                     l10582:
 20146                           
 20147                           ; BSR set to: 0
 20148                           ;main.c: 1436: rv = readEEPROM(0x55);
 20149  00280A  6A0F               	clrf	?_readEEPROM+1,c
 20150  00280C  0E55               	movlw	85
 20151  00280E  6E0E               	movwf	?_readEEPROM,c
 20152  002810  EC9D  F02C         	call	_readEEPROM	;wreg free
 20153  002814  D2EB               	goto	L134
 20154  002816                     l10584:
 20155                           
 20156                           ; BSR set to: 0
 20157                           ;main.c: 1441: rv = readEEPROM(0x56);
 20158  002816  6A0F               	clrf	?_readEEPROM+1,c
 20159  002818  0E56               	movlw	86
 20160  00281A  6E0E               	movwf	?_readEEPROM,c
 20161  00281C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20162  002820  D2E5               	goto	L134
 20163  002822                     l10586:
 20164                           
 20165                           ; BSR set to: 0
 20166                           ;main.c: 1446: rv = readEEPROM(0x57);
 20167  002822  6A0F               	clrf	?_readEEPROM+1,c
 20168  002824  0E57               	movlw	87
 20169  002826  6E0E               	movwf	?_readEEPROM,c
 20170  002828  EC9D  F02C         	call	_readEEPROM	;wreg free
 20171  00282C  D2DF               	goto	L134
 20172  00282E                     l10588:
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;main.c: 1451: rv = readEEPROM(0x58);
 20176  00282E  6A0F               	clrf	?_readEEPROM+1,c
 20177  002830  0E58               	movlw	88
 20178  002832  6E0E               	movwf	?_readEEPROM,c
 20179  002834  EC9D  F02C         	call	_readEEPROM	;wreg free
 20180  002838  D2D9               	goto	L134
 20181  00283A                     l10590:
 20182                           
 20183                           ; BSR set to: 0
 20184                           ;main.c: 1456: rv = readEEPROM(0x59);
 20185  00283A  6A0F               	clrf	?_readEEPROM+1,c
 20186  00283C  0E59               	movlw	89
 20187  00283E  6E0E               	movwf	?_readEEPROM,c
 20188  002840  EC9D  F02C         	call	_readEEPROM	;wreg free
 20189  002844  D2D3               	goto	L134
 20190  002846                     l10592:
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;main.c: 1461: rv = readEEPROM(0x5A);
 20194  002846  6A0F               	clrf	?_readEEPROM+1,c
 20195  002848  0E5A               	movlw	90
 20196  00284A  6E0E               	movwf	?_readEEPROM,c
 20197  00284C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20198  002850  D2CD               	goto	L134
 20199  002852                     l10594:
 20200                           
 20201                           ; BSR set to: 0
 20202                           ;main.c: 1470: rv = readEEPROM(0x5B);
 20203  002852  6A0F               	clrf	?_readEEPROM+1,c
 20204  002854  0E5B               	movlw	91
 20205  002856  6E0E               	movwf	?_readEEPROM,c
 20206  002858  EC9D  F02C         	call	_readEEPROM	;wreg free
 20207  00285C  D2C7               	goto	L134
 20208  00285E                     l10596:
 20209                           
 20210                           ; BSR set to: 0
 20211                           ;main.c: 1475: rv = readEEPROM(0x5C);
 20212  00285E  6A0F               	clrf	?_readEEPROM+1,c
 20213  002860  0E5C               	movlw	92
 20214  002862  6E0E               	movwf	?_readEEPROM,c
 20215  002864  EC9D  F02C         	call	_readEEPROM	;wreg free
 20216  002868  D2C1               	goto	L134
 20217  00286A                     l10598:
 20218                           
 20219                           ; BSR set to: 0
 20220                           ;main.c: 1480: rv = readEEPROM(0x5D);
 20221  00286A  6A0F               	clrf	?_readEEPROM+1,c
 20222  00286C  0E5D               	movlw	93
 20223  00286E  6E0E               	movwf	?_readEEPROM,c
 20224  002870  EC9D  F02C         	call	_readEEPROM	;wreg free
 20225  002874  D2BB               	goto	L134
 20226  002876                     l10600:
 20227                           
 20228                           ; BSR set to: 0
 20229                           ;main.c: 1485: rv = readEEPROM(0x5E);
 20230  002876  6A0F               	clrf	?_readEEPROM+1,c
 20231  002878  0E5E               	movlw	94
 20232  00287A  6E0E               	movwf	?_readEEPROM,c
 20233  00287C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20234  002880  D2B5               	goto	L134
 20235  002882                     l10602:
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;main.c: 1490: rv = readEEPROM(0x5F);
 20239  002882  6A0F               	clrf	?_readEEPROM+1,c
 20240  002884  0E5F               	movlw	95
 20241  002886  6E0E               	movwf	?_readEEPROM,c
 20242  002888  EC9D  F02C         	call	_readEEPROM	;wreg free
 20243  00288C  D2AF               	goto	L134
 20244  00288E                     l10604:
 20245                           
 20246                           ; BSR set to: 0
 20247                           ;main.c: 1495: rv = readEEPROM(0x60);
 20248  00288E  6A0F               	clrf	?_readEEPROM+1,c
 20249  002890  0E60               	movlw	96
 20250  002892  6E0E               	movwf	?_readEEPROM,c
 20251  002894  EC9D  F02C         	call	_readEEPROM	;wreg free
 20252  002898  D2A9               	goto	L134
 20253  00289A                     l10606:
 20254                           
 20255                           ; BSR set to: 0
 20256                           ;main.c: 1500: rv = readEEPROM(0x61);
 20257  00289A  6A0F               	clrf	?_readEEPROM+1,c
 20258  00289C  0E61               	movlw	97
 20259  00289E  6E0E               	movwf	?_readEEPROM,c
 20260  0028A0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20261  0028A4  D2A3               	goto	L134
 20262  0028A6                     l10608:
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;main.c: 1505: rv = readEEPROM(0x62);
 20266  0028A6  6A0F               	clrf	?_readEEPROM+1,c
 20267  0028A8  0E62               	movlw	98
 20268  0028AA  6E0E               	movwf	?_readEEPROM,c
 20269  0028AC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20270  0028B0  D29D               	goto	L134
 20271  0028B2                     l10610:
 20272                           
 20273                           ; BSR set to: 0
 20274                           ;main.c: 1510: rv = readEEPROM(0x63);
 20275  0028B2  6A0F               	clrf	?_readEEPROM+1,c
 20276  0028B4  0E63               	movlw	99
 20277  0028B6  6E0E               	movwf	?_readEEPROM,c
 20278  0028B8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20279  0028BC  D297               	goto	L134
 20280  0028BE                     l10612:
 20281                           
 20282                           ; BSR set to: 0
 20283                           ;main.c: 1515: rv = readEEPROM(0x64);
 20284  0028BE  6A0F               	clrf	?_readEEPROM+1,c
 20285  0028C0  0E64               	movlw	100
 20286  0028C2  6E0E               	movwf	?_readEEPROM,c
 20287  0028C4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20288  0028C8  D291               	goto	L134
 20289  0028CA                     l10614:
 20290                           
 20291                           ; BSR set to: 0
 20292                           ;main.c: 1520: rv = readEEPROM(0x65);
 20293  0028CA  6A0F               	clrf	?_readEEPROM+1,c
 20294  0028CC  0E65               	movlw	101
 20295  0028CE  6E0E               	movwf	?_readEEPROM,c
 20296  0028D0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20297  0028D4  D28B               	goto	L134
 20298  0028D6                     l10616:
 20299                           
 20300                           ; BSR set to: 0
 20301                           ;main.c: 1525: rv = readEEPROM(0x66);
 20302  0028D6  6A0F               	clrf	?_readEEPROM+1,c
 20303  0028D8  0E66               	movlw	102
 20304  0028DA  6E0E               	movwf	?_readEEPROM,c
 20305  0028DC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20306  0028E0  D285               	goto	L134
 20307  0028E2                     l10618:
 20308                           
 20309                           ; BSR set to: 0
 20310                           ;main.c: 1535: rv = readEEPROM(0x67);
 20311  0028E2  6A0F               	clrf	?_readEEPROM+1,c
 20312  0028E4  0E67               	movlw	103
 20313  0028E6  6E0E               	movwf	?_readEEPROM,c
 20314  0028E8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20315  0028EC  D27F               	goto	L134
 20316  0028EE                     l10620:
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;main.c: 1540: rv = readEEPROM(0x68);
 20320  0028EE  6A0F               	clrf	?_readEEPROM+1,c
 20321  0028F0  0E68               	movlw	104
 20322  0028F2  6E0E               	movwf	?_readEEPROM,c
 20323  0028F4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20324  0028F8  D279               	goto	L134
 20325  0028FA                     l10622:
 20326                           
 20327                           ; BSR set to: 0
 20328                           ;main.c: 1545: rv = readEEPROM(0x69);
 20329  0028FA  6A0F               	clrf	?_readEEPROM+1,c
 20330  0028FC  0E69               	movlw	105
 20331  0028FE  6E0E               	movwf	?_readEEPROM,c
 20332  002900  EC9D  F02C         	call	_readEEPROM	;wreg free
 20333  002904  D273               	goto	L134
 20334  002906                     l10624:
 20335                           
 20336                           ; BSR set to: 0
 20337                           ;main.c: 1550: rv = readEEPROM(0x6A);
 20338  002906  6A0F               	clrf	?_readEEPROM+1,c
 20339  002908  0E6A               	movlw	106
 20340  00290A  6E0E               	movwf	?_readEEPROM,c
 20341  00290C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20342  002910  D26D               	goto	L134
 20343  002912                     l10626:
 20344                           
 20345                           ; BSR set to: 0
 20346                           ;main.c: 1555: rv = readEEPROM(0x6B);
 20347  002912  6A0F               	clrf	?_readEEPROM+1,c
 20348  002914  0E6B               	movlw	107
 20349  002916  6E0E               	movwf	?_readEEPROM,c
 20350  002918  EC9D  F02C         	call	_readEEPROM	;wreg free
 20351  00291C  D267               	goto	L134
 20352  00291E                     l10628:
 20353                           
 20354                           ; BSR set to: 0
 20355                           ;main.c: 1560: rv = readEEPROM(0x6C);
 20356  00291E  6A0F               	clrf	?_readEEPROM+1,c
 20357  002920  0E6C               	movlw	108
 20358  002922  6E0E               	movwf	?_readEEPROM,c
 20359  002924  EC9D  F02C         	call	_readEEPROM	;wreg free
 20360  002928  D261               	goto	L134
 20361  00292A                     l10630:
 20362                           
 20363                           ; BSR set to: 0
 20364                           ;main.c: 1565: rv = readEEPROM(0x6D);
 20365  00292A  6A0F               	clrf	?_readEEPROM+1,c
 20366  00292C  0E6D               	movlw	109
 20367  00292E  6E0E               	movwf	?_readEEPROM,c
 20368  002930  EC9D  F02C         	call	_readEEPROM	;wreg free
 20369  002934  D25B               	goto	L134
 20370  002936                     l10632:
 20371                           
 20372                           ; BSR set to: 0
 20373                           ;main.c: 1570: rv = readEEPROM(0x6E);
 20374  002936  6A0F               	clrf	?_readEEPROM+1,c
 20375  002938  0E6E               	movlw	110
 20376  00293A  6E0E               	movwf	?_readEEPROM,c
 20377  00293C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20378  002940  D255               	goto	L134
 20379  002942                     l10634:
 20380                           
 20381                           ; BSR set to: 0
 20382                           ;main.c: 1575: rv = readEEPROM(0x6F);
 20383  002942  6A0F               	clrf	?_readEEPROM+1,c
 20384  002944  0E6F               	movlw	111
 20385  002946  6E0E               	movwf	?_readEEPROM,c
 20386  002948  EC9D  F02C         	call	_readEEPROM	;wreg free
 20387  00294C  D24F               	goto	L134
 20388  00294E                     l10636:
 20389                           
 20390                           ; BSR set to: 0
 20391                           ;main.c: 1580: rv = readEEPROM(0x70);
 20392  00294E  6A0F               	clrf	?_readEEPROM+1,c
 20393  002950  0E70               	movlw	112
 20394  002952  6E0E               	movwf	?_readEEPROM,c
 20395  002954  EC9D  F02C         	call	_readEEPROM	;wreg free
 20396  002958  D249               	goto	L134
 20397  00295A                     l10638:
 20398                           
 20399                           ; BSR set to: 0
 20400                           ;main.c: 1585: rv = readEEPROM(0x71);
 20401  00295A  6A0F               	clrf	?_readEEPROM+1,c
 20402  00295C  0E71               	movlw	113
 20403  00295E  6E0E               	movwf	?_readEEPROM,c
 20404  002960  EC9D  F02C         	call	_readEEPROM	;wreg free
 20405  002964  D243               	goto	L134
 20406  002966                     l10640:
 20407                           
 20408                           ; BSR set to: 0
 20409                           ;main.c: 1590: rv = readEEPROM(0x72);
 20410  002966  6A0F               	clrf	?_readEEPROM+1,c
 20411  002968  0E72               	movlw	114
 20412  00296A  6E0E               	movwf	?_readEEPROM,c
 20413  00296C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20414  002970  D23D               	goto	L134
 20415  002972                     l10642:
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;main.c: 1599: rv = readEEPROM(0x73);
 20419  002972  6A0F               	clrf	?_readEEPROM+1,c
 20420  002974  0E73               	movlw	115
 20421  002976  6E0E               	movwf	?_readEEPROM,c
 20422  002978  EC9D  F02C         	call	_readEEPROM	;wreg free
 20423  00297C  D237               	goto	L134
 20424  00297E                     l10644:
 20425                           
 20426                           ; BSR set to: 0
 20427                           ;main.c: 1604: rv = readEEPROM(0x74);
 20428  00297E  6A0F               	clrf	?_readEEPROM+1,c
 20429  002980  0E74               	movlw	116
 20430  002982  6E0E               	movwf	?_readEEPROM,c
 20431  002984  EC9D  F02C         	call	_readEEPROM	;wreg free
 20432  002988  D231               	goto	L134
 20433  00298A                     l10666:
 20434                           
 20435                           ; BSR set to: 0
 20436                           ;main.c: 1663: rv = readEEPROM(0x7F);
 20437  00298A  6A0F               	clrf	?_readEEPROM+1,c
 20438  00298C  0E7F               	movlw	127
 20439  00298E  6E0E               	movwf	?_readEEPROM,c
 20440  002990  EC9D  F02C         	call	_readEEPROM	;wreg free
 20441  002994  D22B               	goto	L134
 20442  002996                     l10668:
 20443                           
 20444                           ; BSR set to: 0
 20445                           ;main.c: 1668: rv = readEEPROM(0x80);
 20446  002996  6A0F               	clrf	?_readEEPROM+1,c
 20447  002998  0E80               	movlw	128
 20448  00299A  6E0E               	movwf	?_readEEPROM,c
 20449  00299C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20450  0029A0  D225               	goto	L134
 20451  0029A2                     l10670:
 20452                           
 20453                           ; BSR set to: 0
 20454                           ;main.c: 1673: rv = readEEPROM(0x81);
 20455  0029A2  6A0F               	clrf	?_readEEPROM+1,c
 20456  0029A4  0E81               	movlw	129
 20457  0029A6  6E0E               	movwf	?_readEEPROM,c
 20458  0029A8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20459  0029AC  D21F               	goto	L134
 20460  0029AE                     l10672:
 20461                           
 20462                           ; BSR set to: 0
 20463                           ;main.c: 1678: rv = readEEPROM(0x82);
 20464  0029AE  6A0F               	clrf	?_readEEPROM+1,c
 20465  0029B0  0E82               	movlw	130
 20466  0029B2  6E0E               	movwf	?_readEEPROM,c
 20467  0029B4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20468  0029B8  D219               	goto	L134
 20469  0029BA                     l10674:
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;main.c: 1683: rv = readEEPROM(0x83);
 20473  0029BA  6A0F               	clrf	?_readEEPROM+1,c
 20474  0029BC  0E83               	movlw	131
 20475  0029BE  6E0E               	movwf	?_readEEPROM,c
 20476  0029C0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20477  0029C4  D213               	goto	L134
 20478  0029C6                     l10676:
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;main.c: 1688: rv = readEEPROM(0x84);
 20482  0029C6  6A0F               	clrf	?_readEEPROM+1,c
 20483  0029C8  0E84               	movlw	132
 20484  0029CA  6E0E               	movwf	?_readEEPROM,c
 20485  0029CC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20486  0029D0  D20D               	goto	L134
 20487  0029D2                     l10678:
 20488                           
 20489                           ; BSR set to: 0
 20490                           ;main.c: 1693: rv = readEEPROM(0x85);
 20491  0029D2  6A0F               	clrf	?_readEEPROM+1,c
 20492  0029D4  0E85               	movlw	133
 20493  0029D6  6E0E               	movwf	?_readEEPROM,c
 20494  0029D8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20495  0029DC  D207               	goto	L134
 20496  0029DE                     l10680:
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;main.c: 1698: rv = readEEPROM(0x86);
 20500  0029DE  6A0F               	clrf	?_readEEPROM+1,c
 20501  0029E0  0E86               	movlw	134
 20502  0029E2  6E0E               	movwf	?_readEEPROM,c
 20503  0029E4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20504  0029E8  D201               	goto	L134
 20505  0029EA                     l10682:
 20506                           
 20507                           ; BSR set to: 0
 20508                           ;main.c: 1703: rv = readEEPROM(0x87);
 20509  0029EA  6A0F               	clrf	?_readEEPROM+1,c
 20510  0029EC  0E87               	movlw	135
 20511  0029EE  6E0E               	movwf	?_readEEPROM,c
 20512  0029F0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20513  0029F4  D1FB               	goto	L134
 20514  0029F6                     l10684:
 20515                           
 20516                           ; BSR set to: 0
 20517                           ;main.c: 1708: rv = readEEPROM(0x88);
 20518  0029F6  6A0F               	clrf	?_readEEPROM+1,c
 20519  0029F8  0E88               	movlw	136
 20520  0029FA  6E0E               	movwf	?_readEEPROM,c
 20521  0029FC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20522  002A00  D1F5               	goto	L134
 20523  002A02                     l10686:
 20524                           
 20525                           ; BSR set to: 0
 20526                           ;main.c: 1713: rv = readEEPROM(0x89);
 20527  002A02  6A0F               	clrf	?_readEEPROM+1,c
 20528  002A04  0E89               	movlw	137
 20529  002A06  6E0E               	movwf	?_readEEPROM,c
 20530  002A08  EC9D  F02C         	call	_readEEPROM	;wreg free
 20531  002A0C  D1EF               	goto	L134
 20532  002A0E                     l10688:
 20533                           
 20534                           ; BSR set to: 0
 20535                           ;main.c: 1718: rv = readEEPROM(0x8A);
 20536  002A0E  6A0F               	clrf	?_readEEPROM+1,c
 20537  002A10  0E8A               	movlw	138
 20538  002A12  6E0E               	movwf	?_readEEPROM,c
 20539  002A14  EC9D  F02C         	call	_readEEPROM	;wreg free
 20540  002A18  D1E9               	goto	L134
 20541  002A1A                     l10690:
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;main.c: 1727: rv = readEEPROM(0x8B);
 20545  002A1A  6A0F               	clrf	?_readEEPROM+1,c
 20546  002A1C  0E8B               	movlw	139
 20547  002A1E  6E0E               	movwf	?_readEEPROM,c
 20548  002A20  EC9D  F02C         	call	_readEEPROM	;wreg free
 20549  002A24  D1E3               	goto	L134
 20550  002A26                     l10692:
 20551                           
 20552                           ; BSR set to: 0
 20553                           ;main.c: 1732: rv = readEEPROM(0x8C);
 20554  002A26  6A0F               	clrf	?_readEEPROM+1,c
 20555  002A28  0E8C               	movlw	140
 20556  002A2A  6E0E               	movwf	?_readEEPROM,c
 20557  002A2C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20558  002A30  D1DD               	goto	L134
 20559  002A32                     l10694:
 20560                           
 20561                           ; BSR set to: 0
 20562                           ;main.c: 1737: rv = readEEPROM(0x8D);
 20563  002A32  6A0F               	clrf	?_readEEPROM+1,c
 20564  002A34  0E8D               	movlw	141
 20565  002A36  6E0E               	movwf	?_readEEPROM,c
 20566  002A38  EC9D  F02C         	call	_readEEPROM	;wreg free
 20567  002A3C  D1D7               	goto	L134
 20568  002A3E                     l10696:
 20569                           
 20570                           ; BSR set to: 0
 20571                           ;main.c: 1742: rv = readEEPROM(0x8E);
 20572  002A3E  6A0F               	clrf	?_readEEPROM+1,c
 20573  002A40  0E8E               	movlw	142
 20574  002A42  6E0E               	movwf	?_readEEPROM,c
 20575  002A44  EC9D  F02C         	call	_readEEPROM	;wreg free
 20576  002A48  D1D1               	goto	L134
 20577  002A4A                     l10698:
 20578                           
 20579                           ; BSR set to: 0
 20580                           ;main.c: 1747: rv = readEEPROM(0x8F);
 20581  002A4A  6A0F               	clrf	?_readEEPROM+1,c
 20582  002A4C  0E8F               	movlw	143
 20583  002A4E  6E0E               	movwf	?_readEEPROM,c
 20584  002A50  EC9D  F02C         	call	_readEEPROM	;wreg free
 20585  002A54  D1CB               	goto	L134
 20586  002A56                     l10700:
 20587                           
 20588                           ; BSR set to: 0
 20589                           ;main.c: 1752: rv = readEEPROM(0x90);
 20590  002A56  6A0F               	clrf	?_readEEPROM+1,c
 20591  002A58  0E90               	movlw	144
 20592  002A5A  6E0E               	movwf	?_readEEPROM,c
 20593  002A5C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20594  002A60  D1C5               	goto	L134
 20595  002A62                     l10702:
 20596                           
 20597                           ; BSR set to: 0
 20598                           ;main.c: 1757: rv = readEEPROM(0x91);
 20599  002A62  6A0F               	clrf	?_readEEPROM+1,c
 20600  002A64  0E91               	movlw	145
 20601  002A66  6E0E               	movwf	?_readEEPROM,c
 20602  002A68  EC9D  F02C         	call	_readEEPROM	;wreg free
 20603  002A6C  D1BF               	goto	L134
 20604  002A6E                     l10704:
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;main.c: 1762: rv = readEEPROM(0x92);
 20608  002A6E  6A0F               	clrf	?_readEEPROM+1,c
 20609  002A70  0E92               	movlw	146
 20610  002A72  6E0E               	movwf	?_readEEPROM,c
 20611  002A74  EC9D  F02C         	call	_readEEPROM	;wreg free
 20612  002A78  D1B9               	goto	L134
 20613  002A7A                     l10706:
 20614                           
 20615                           ; BSR set to: 0
 20616                           ;main.c: 1767: rv = readEEPROM(0x93);
 20617  002A7A  6A0F               	clrf	?_readEEPROM+1,c
 20618  002A7C  0E93               	movlw	147
 20619  002A7E  6E0E               	movwf	?_readEEPROM,c
 20620  002A80  EC9D  F02C         	call	_readEEPROM	;wreg free
 20621  002A84  D1B3               	goto	L134
 20622  002A86                     l10708:
 20623                           
 20624                           ; BSR set to: 0
 20625                           ;main.c: 1772: rv = readEEPROM(0x94);
 20626  002A86  6A0F               	clrf	?_readEEPROM+1,c
 20627  002A88  0E94               	movlw	148
 20628  002A8A  6E0E               	movwf	?_readEEPROM,c
 20629  002A8C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20630  002A90  D1AD               	goto	L134
 20631  002A92                     l10710:
 20632                           
 20633                           ; BSR set to: 0
 20634                           ;main.c: 1777: rv = readEEPROM(0x95);
 20635  002A92  6A0F               	clrf	?_readEEPROM+1,c
 20636  002A94  0E95               	movlw	149
 20637  002A96  6E0E               	movwf	?_readEEPROM,c
 20638  002A98  EC9D  F02C         	call	_readEEPROM	;wreg free
 20639  002A9C  D1A7               	goto	L134
 20640  002A9E                     l10712:
 20641                           
 20642                           ; BSR set to: 0
 20643                           ;main.c: 1782: rv = readEEPROM(0x96);
 20644  002A9E  6A0F               	clrf	?_readEEPROM+1,c
 20645  002AA0  0E96               	movlw	150
 20646  002AA2  6E0E               	movwf	?_readEEPROM,c
 20647  002AA4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20648  002AA8  D1A1               	goto	L134
 20649  002AAA                     l10714:
 20650                           
 20651                           ; BSR set to: 0
 20652                           ;main.c: 1792: rv = readEEPROM(0x97);
 20653  002AAA  6A0F               	clrf	?_readEEPROM+1,c
 20654  002AAC  0E97               	movlw	151
 20655  002AAE  6E0E               	movwf	?_readEEPROM,c
 20656  002AB0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20657  002AB4  D19B               	goto	L134
 20658  002AB6                     l10716:
 20659                           
 20660                           ; BSR set to: 0
 20661                           ;main.c: 1797: rv = readEEPROM(0x98);
 20662  002AB6  6A0F               	clrf	?_readEEPROM+1,c
 20663  002AB8  0E98               	movlw	152
 20664  002ABA  6E0E               	movwf	?_readEEPROM,c
 20665  002ABC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20666  002AC0  D195               	goto	L134
 20667  002AC2                     l10718:
 20668                           
 20669                           ; BSR set to: 0
 20670                           ;main.c: 1802: rv = readEEPROM(0x99);
 20671  002AC2  6A0F               	clrf	?_readEEPROM+1,c
 20672  002AC4  0E99               	movlw	153
 20673  002AC6  6E0E               	movwf	?_readEEPROM,c
 20674  002AC8  EC9D  F02C         	call	_readEEPROM	;wreg free
 20675  002ACC  D18F               	goto	L134
 20676  002ACE                     l10720:
 20677                           
 20678                           ; BSR set to: 0
 20679                           ;main.c: 1807: rv = readEEPROM(0x9A);
 20680  002ACE  6A0F               	clrf	?_readEEPROM+1,c
 20681  002AD0  0E9A               	movlw	154
 20682  002AD2  6E0E               	movwf	?_readEEPROM,c
 20683  002AD4  EC9D  F02C         	call	_readEEPROM	;wreg free
 20684  002AD8  D189               	goto	L134
 20685  002ADA                     l10722:
 20686                           
 20687                           ; BSR set to: 0
 20688                           ;main.c: 1812: rv = readEEPROM(0x9B);
 20689  002ADA  6A0F               	clrf	?_readEEPROM+1,c
 20690  002ADC  0E9B               	movlw	155
 20691  002ADE  6E0E               	movwf	?_readEEPROM,c
 20692  002AE0  EC9D  F02C         	call	_readEEPROM	;wreg free
 20693  002AE4  D183               	goto	L134
 20694  002AE6                     l10724:
 20695                           
 20696                           ; BSR set to: 0
 20697                           ;main.c: 1817: rv = readEEPROM(0x9C);
 20698  002AE6  6A0F               	clrf	?_readEEPROM+1,c
 20699  002AE8  0E9C               	movlw	156
 20700  002AEA  6E0E               	movwf	?_readEEPROM,c
 20701  002AEC  EC9D  F02C         	call	_readEEPROM	;wreg free
 20702  002AF0  D17D               	goto	L134
 20703  002AF2                     l410:
 20704                           
 20705                           ; BSR set to: 0
 20706                           ;main.c: 1824: rv = calibration_index;
 20707  002AF2  C04A  F014         	movff	_calibration_index,vscp_readAppReg@rv
 20708                           
 20709                           ;main.c: 1825: break;
 20710  002AF6  D17B               	goto	l10752
 20711  002AF8                     l10726:
 20712                           
 20713                           ; BSR set to: 0
 20714                           ;main.c: 1829: rv = readEEPROM(0x9E +
 20715                           ;main.c: 1830: calibration_index);
 20716  002AF8  0E9E               	movlw	158
 20717  002AFA  244A               	addwf	_calibration_index,w,c
 20718  002AFC  6E0E               	movwf	?_readEEPROM,c
 20719  002AFE  6A0F               	clrf	?_readEEPROM+1,c
 20720  002B00  0E00               	movlw	0
 20721  002B02  220F               	addwfc	?_readEEPROM+1,f,c
 20722  002B04  EC9D  F02C         	call	_readEEPROM	;wreg free
 20723  002B08  D171               	goto	L134
 20724  002B0A                     l10728:
 20725                           
 20726                           ; BSR set to: 0
 20727                           ;main.c: 1834: rv = readEEPROM(0xF2);
 20728  002B0A  6A0F               	clrf	?_readEEPROM+1,c
 20729  002B0C  0EF2               	movlw	242
 20730  002B0E  6E0E               	movwf	?_readEEPROM,c
 20731  002B10  EC9D  F02C         	call	_readEEPROM	;wreg free
 20732  002B14  D16B               	goto	L134
 20733  002B16                     l10730:
 20734                           
 20735                           ; BSR set to: 0
 20736                           ;main.c: 1838: rv = readEEPROM(0xF3);
 20737  002B16  6A0F               	clrf	?_readEEPROM+1,c
 20738  002B18  0EF3               	movlw	243
 20739  002B1A  6E0E               	movwf	?_readEEPROM,c
 20740  002B1C  EC9D  F02C         	call	_readEEPROM	;wreg free
 20741  002B20  D165               	goto	L134
 20742  002B22                     l414:
 20743                           
 20744                           ; BSR set to: 0
 20745                           ;main.c: 1842: rv = 0;
 20746  002B22  6A14               	clrf	vscp_readAppReg@rv,c
 20747                           
 20748                           ;main.c: 1843: break;
 20749  002B24  D164               	goto	l10752
 20750  002B26                     l10734:
 20751                           
 20752                           ; BSR set to: 0
 20753  002B26  5013               	movf	vscp_readAppReg@reg,w,c
 20754                           
 20755                           ; Switch size 1, requested type "speed"
 20756                           ; Number of cases is 108, Range of values is 0 to 119
 20757                           ; switch strategies available:
 20758                           ; Name         Instructions Cycles
 20759                           ; simple_byte          325   163 (average)
 20760                           ;	Chosen strategy is simple_byte
 20761  002B28  E101 D5D9          	bz	l10530
 20762  002B2C  0A01               	xorlw	1	; case 1
 20763  002B2E  E101 D5DC          	bz	l10532
 20764  002B32  0A03               	xorlw	3	; case 2
 20765  002B34  E101 D5DF          	bz	l10534
 20766  002B38  0A01               	xorlw	1	; case 3
 20767  002B3A  E101 D5E2          	bz	l10536
 20768  002B3E  0A07               	xorlw	7	; case 4
 20769  002B40  E101 D5E5          	bz	l10538
 20770  002B44  0A01               	xorlw	1	; case 5
 20771  002B46  E101 D5E8          	bz	l10540
 20772  002B4A  0A03               	xorlw	3	; case 6
 20773  002B4C  E101 D5EB          	bz	l10542
 20774  002B50  0A01               	xorlw	1	; case 7
 20775  002B52  E101 D5EE          	bz	l10544
 20776  002B56  0A0F               	xorlw	15	; case 8
 20777  002B58  E101 D5F1          	bz	l10546
 20778  002B5C  0A01               	xorlw	1	; case 9
 20779  002B5E  E101 D5F1          	bz	l315
 20780  002B62  0A03               	xorlw	3	; case 10
 20781  002B64  E101 D5F1          	bz	l10548
 20782  002B68  0A01               	xorlw	1	; case 11
 20783  002B6A  E101 D5F1          	bz	l317
 20784  002B6E  0A07               	xorlw	7	; case 12
 20785  002B70  E101 D5F1          	bz	l10550
 20786  002B74  0A01               	xorlw	1	; case 13
 20787  002B76  E101 D5F1          	bz	l319
 20788  002B7A  0A03               	xorlw	3	; case 14
 20789  002B7C  E101 D5F1          	bz	l10552
 20790  002B80  0A01               	xorlw	1	; case 15
 20791  002B82  E101 D5F1          	bz	l321
 20792  002B86  0A1F               	xorlw	31	; case 16
 20793  002B88  E101 D5F1          	bz	l10554
 20794  002B8C  0A01               	xorlw	1	; case 17
 20795  002B8E  E101 D5F1          	bz	l323
 20796  002B92  0A03               	xorlw	3	; case 18
 20797  002B94  E101 D5EB          	bz	l10554
 20798  002B98  0A01               	xorlw	1	; case 19
 20799  002B9A  E101 D5EB          	bz	l323
 20800  002B9E  0A07               	xorlw	7	; case 20
 20801  002BA0  E101 D5EB          	bz	l10558
 20802  002BA4  0A01               	xorlw	1	; case 21
 20803  002BA6  E101 D5EE          	bz	l10560
 20804  002BAA  0A03               	xorlw	3	; case 22
 20805  002BAC  E101 D5F1          	bz	l10562
 20806  002BB0  0A01               	xorlw	1	; case 23
 20807  002BB2  E101 D5F4          	bz	l10564
 20808  002BB6  0A0F               	xorlw	15	; case 24
 20809  002BB8  E101 D5F7          	bz	l10566
 20810  002BBC  0A01               	xorlw	1	; case 25
 20811  002BBE  E101 D5FA          	bz	l10568
 20812  002BC2  0A3F               	xorlw	63	; case 38
 20813  002BC4  E101 D5FD          	bz	l10570
 20814  002BC8  0A01               	xorlw	1	; case 39
 20815  002BCA  E101 D600          	bz	l10572
 20816  002BCE  0A0F               	xorlw	15	; case 40
 20817  002BD0  E101 D603          	bz	l10574
 20818  002BD4  0A01               	xorlw	1	; case 41
 20819  002BD6  E101 D606          	bz	l10576
 20820  002BDA  0A03               	xorlw	3	; case 42
 20821  002BDC  E101 D609          	bz	l10578
 20822  002BE0  0A01               	xorlw	1	; case 43
 20823  002BE2  E101 D60C          	bz	l10580
 20824  002BE6  0A07               	xorlw	7	; case 44
 20825  002BE8  E101 D60F          	bz	l10582
 20826  002BEC  0A01               	xorlw	1	; case 45
 20827  002BEE  E101 D612          	bz	l10584
 20828  002BF2  0A03               	xorlw	3	; case 46
 20829  002BF4  E101 D615          	bz	l10586
 20830  002BF8  0A01               	xorlw	1	; case 47
 20831  002BFA  E101 D618          	bz	l10588
 20832  002BFE  0A1F               	xorlw	31	; case 48
 20833  002C00  E101 D61B          	bz	l10590
 20834  002C04  0A01               	xorlw	1	; case 49
 20835  002C06  E101 D61E          	bz	l10592
 20836  002C0A  0A03               	xorlw	3	; case 50
 20837  002C0C  E101 D621          	bz	l10594
 20838  002C10  0A01               	xorlw	1	; case 51
 20839  002C12  E101 D624          	bz	l10596
 20840  002C16  0A07               	xorlw	7	; case 52
 20841  002C18  E101 D627          	bz	l10598
 20842  002C1C  0A01               	xorlw	1	; case 53
 20843  002C1E  E101 D62A          	bz	l10600
 20844  002C22  0A03               	xorlw	3	; case 54
 20845  002C24  E101 D62D          	bz	l10602
 20846  002C28  0A01               	xorlw	1	; case 55
 20847  002C2A  E101 D630          	bz	l10604
 20848  002C2E  0A0F               	xorlw	15	; case 56
 20849  002C30  E101 D633          	bz	l10606
 20850  002C34  0A01               	xorlw	1	; case 57
 20851  002C36  E101 D636          	bz	l10608
 20852  002C3A  0A03               	xorlw	3	; case 58
 20853  002C3C  E101 D639          	bz	l10610
 20854  002C40  0A01               	xorlw	1	; case 59
 20855  002C42  E101 D63C          	bz	l10612
 20856  002C46  0A07               	xorlw	7	; case 60
 20857  002C48  E101 D63F          	bz	l10614
 20858  002C4C  0A01               	xorlw	1	; case 61
 20859  002C4E  E101 D642          	bz	l10616
 20860  002C52  0A03               	xorlw	3	; case 62
 20861  002C54  E101 D645          	bz	l10618
 20862  002C58  0A01               	xorlw	1	; case 63
 20863  002C5A  E101 D648          	bz	l10620
 20864  002C5E  0A7F               	xorlw	127	; case 64
 20865  002C60  E101 D64B          	bz	l10622
 20866  002C64  0A01               	xorlw	1	; case 65
 20867  002C66  E101 D64E          	bz	l10624
 20868  002C6A  0A03               	xorlw	3	; case 66
 20869  002C6C  E101 D651          	bz	l10626
 20870  002C70  0A01               	xorlw	1	; case 67
 20871  002C72  E101 D654          	bz	l10628
 20872  002C76  0A07               	xorlw	7	; case 68
 20873  002C78  E101 D657          	bz	l10630
 20874  002C7C  0A01               	xorlw	1	; case 69
 20875  002C7E  E101 D65A          	bz	l10632
 20876  002C82  0A03               	xorlw	3	; case 70
 20877  002C84  E101 D65D          	bz	l10634
 20878  002C88  0A01               	xorlw	1	; case 71
 20879  002C8A  E101 D660          	bz	l10636
 20880  002C8E  0A0F               	xorlw	15	; case 72
 20881  002C90  E101 D663          	bz	l10638
 20882  002C94  0A01               	xorlw	1	; case 73
 20883  002C96  E101 D666          	bz	l10640
 20884  002C9A  0A03               	xorlw	3	; case 74
 20885  002C9C  E101 D669          	bz	l10642
 20886  002CA0  0A01               	xorlw	1	; case 75
 20887  002CA2  E101 D66C          	bz	l10644
 20888  002CA6  0A07               	xorlw	7	; case 76
 20889  002CA8  E101 D663          	bz	l10642
 20890  002CAC  0A01               	xorlw	1	; case 77
 20891  002CAE  E101 D666          	bz	l10644
 20892  002CB2  0A03               	xorlw	3	; case 78
 20893  002CB4  E101 D65D          	bz	l10642
 20894  002CB8  0A01               	xorlw	1	; case 79
 20895  002CBA  E101 D660          	bz	l10644
 20896  002CBE  0A1F               	xorlw	31	; case 80
 20897  002CC0  E101 D657          	bz	l10642
 20898  002CC4  0A01               	xorlw	1	; case 81
 20899  002CC6  E101 D65A          	bz	l10644
 20900  002CCA  0A03               	xorlw	3	; case 82
 20901  002CCC  E101 D651          	bz	l10642
 20902  002CD0  0A01               	xorlw	1	; case 83
 20903  002CD2  E101 D654          	bz	l10644
 20904  002CD6  0A07               	xorlw	7	; case 84
 20905  002CD8  E101 D64B          	bz	l10642
 20906  002CDC  0A01               	xorlw	1	; case 85
 20907  002CDE  E101 D64E          	bz	l10644
 20908  002CE2  0A03               	xorlw	3	; case 86
 20909  002CE4  E101 D651          	bz	l10666
 20910  002CE8  0A01               	xorlw	1	; case 87
 20911  002CEA  E101 D654          	bz	l10668
 20912  002CEE  0A0F               	xorlw	15	; case 88
 20913  002CF0  E101 D657          	bz	l10670
 20914  002CF4  0A01               	xorlw	1	; case 89
 20915  002CF6  E101 D65A          	bz	l10672
 20916  002CFA  0A03               	xorlw	3	; case 90
 20917  002CFC  E101 D65D          	bz	l10674
 20918  002D00  0A01               	xorlw	1	; case 91
 20919  002D02  E101 D660          	bz	l10676
 20920  002D06  0A07               	xorlw	7	; case 92
 20921  002D08  E101 D663          	bz	l10678
 20922  002D0C  0A01               	xorlw	1	; case 93
 20923  002D0E  E101 D666          	bz	l10680
 20924  002D12  0A03               	xorlw	3	; case 94
 20925  002D14  E101 D669          	bz	l10682
 20926  002D18  0A01               	xorlw	1	; case 95
 20927  002D1A  E101 D66C          	bz	l10684
 20928  002D1E  0A3F               	xorlw	63	; case 96
 20929  002D20  E101 D66F          	bz	l10686
 20930  002D24  0A01               	xorlw	1	; case 97
 20931  002D26  E101 D672          	bz	l10688
 20932  002D2A  0A03               	xorlw	3	; case 98
 20933  002D2C  E101 D675          	bz	l10690
 20934  002D30  0A01               	xorlw	1	; case 99
 20935  002D32  E101 D678          	bz	l10692
 20936  002D36  0A07               	xorlw	7	; case 100
 20937  002D38  E101 D67B          	bz	l10694
 20938  002D3C  0A01               	xorlw	1	; case 101
 20939  002D3E  E101 D67E          	bz	l10696
 20940  002D42  0A03               	xorlw	3	; case 102
 20941  002D44  E101 D681          	bz	l10698
 20942  002D48  0A01               	xorlw	1	; case 103
 20943  002D4A  E101 D684          	bz	l10700
 20944  002D4E  0A0F               	xorlw	15	; case 104
 20945  002D50  E101 D687          	bz	l10702
 20946  002D54  0A01               	xorlw	1	; case 105
 20947  002D56  E101 D68A          	bz	l10704
 20948  002D5A  0A03               	xorlw	3	; case 106
 20949  002D5C  E101 D68D          	bz	l10706
 20950  002D60  0A01               	xorlw	1	; case 107
 20951  002D62  E101 D690          	bz	l10708
 20952  002D66  0A07               	xorlw	7	; case 108
 20953  002D68  E101 D693          	bz	l10710
 20954  002D6C  0A01               	xorlw	1	; case 109
 20955  002D6E  E101 D696          	bz	l10712
 20956  002D72  0A03               	xorlw	3	; case 110
 20957  002D74  E101 D699          	bz	l10714
 20958  002D78  0A01               	xorlw	1	; case 111
 20959  002D7A  E101 D69C          	bz	l10716
 20960  002D7E  0A1F               	xorlw	31	; case 112
 20961  002D80  E101 D69F          	bz	l10718
 20962  002D84  0A01               	xorlw	1	; case 113
 20963  002D86  E101 D6A2          	bz	l10720
 20964  002D8A  0A03               	xorlw	3	; case 114
 20965  002D8C  E101 D6A5          	bz	l10722
 20966  002D90  0A01               	xorlw	1	; case 115
 20967  002D92  E101 D6A8          	bz	l10724
 20968  002D96  0A07               	xorlw	7	; case 116
 20969  002D98  E101 D6AB          	bz	l410
 20970  002D9C  0A01               	xorlw	1	; case 117
 20971  002D9E  E101 D6AB          	bz	l10726
 20972  002DA2  0A03               	xorlw	3	; case 118
 20973  002DA4  E101 D6B1          	bz	l10728
 20974  002DA8  0A01               	xorlw	1	; case 119
 20975  002DAA  E101 D6B4          	bz	l10730
 20976  002DAE  D6B9               	goto	l414
 20977  002DB0                     l10736:
 20978                           
 20979                           ; BSR set to: 0
 20980                           ;main.c: 1846: else if (1 == vscp_page_select) {
 20981  002DB0  0446               	decf	_vscp_page_select,w,c
 20982  002DB2  1047               	iorwf	_vscp_page_select+1,w,c
 20983  002DB4  E11C               	bnz	l10752
 20984                           
 20985                           ; BSR set to: 0
 20986                           ;main.c: 1848: if (reg < 0x48) {
 20987  002DB6  0E48               	movlw	72
 20988  002DB8  6013               	cpfslt	vscp_readAppReg@reg,c
 20989  002DBA  D009               	goto	l10742
 20990                           
 20991                           ; BSR set to: 0
 20992                           ;main.c: 1849: rv = readEEPROM(0xAA + reg ) ;
 20993  002DBC  0EAA               	movlw	170
 20994  002DBE  2413               	addwf	vscp_readAppReg@reg,w,c
 20995  002DC0  6E0E               	movwf	?_readEEPROM,c
 20996  002DC2  6A0F               	clrf	?_readEEPROM+1,c
 20997  002DC4  0E00               	movlw	0
 20998  002DC6  220F               	addwfc	?_readEEPROM+1,f,c
 20999  002DC8  EC9D  F02C         	call	_readEEPROM	;wreg free
 21000  002DCC  D00F               	goto	L134
 21001  002DCE                     l10742:
 21002                           
 21003                           ; BSR set to: 0
 21004                           ;main.c: 1851: else if (reg < 0x54) {
 21005  002DCE  0E54               	movlw	84
 21006  002DD0  6013               	cpfslt	vscp_readAppReg@reg,c
 21007  002DD2  D00D               	goto	l10752
 21008                           
 21009                           ; BSR set to: 0
 21010                           ;main.c: 1853: uint8_t pos = reg - 0x48;
 21011  002DD4  5013               	movf	vscp_readAppReg@reg,w,c
 21012  002DD6  0FB8               	addlw	184
 21013  002DD8  6E12               	movwf	vscp_readAppReg@pos,c
 21014                           
 21015                           ; BSR set to: 0
 21016                           ;main.c: 1854: if (0 == pos) pos = 11;
 21017  002DDA  6612               	tstfsz	vscp_readAppReg@pos,c
 21018  002DDC  D000               	goto	l10750
 21019  002DDE                     l10750:
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;main.c: 1855: rv = adc[reg - 0x48];
 21023  002DDE  0E55               	movlw	low (_adc+65464)
 21024  002DE0  2413               	addwf	vscp_readAppReg@reg,w,c
 21025  002DE2  6ED9               	movwf	fsr2l,c
 21026  002DE4  6ADA               	clrf	fsr2h,c
 21027  002DE6  0E01               	movlw	high (_adc+65464)
 21028  002DE8  22DA               	addwfc	fsr2h,f,c
 21029  002DEA  50DF               	movf	indf2,w,c
 21030  002DEC                     L134:
 21031  002DEC  6E14               	movwf	vscp_readAppReg@rv,c
 21032  002DEE                     l10752:
 21033                           
 21034                           ;main.c: 1856: }
 21035                           ;main.c: 1857: }
 21036                           ;main.c: 1859: return rv;
 21037  002DEE  5014               	movf	vscp_readAppReg@rv,w,c
 21038  002DF0  0012               	return	
 21039  002DF2                     __end_of_vscp_readAppReg:
 21040                           	opt stack 0
 21041                           tblptru	equ	0xFF8
 21042                           tblptrh	equ	0xFF7
 21043                           tblptrl	equ	0xFF6
 21044                           tablat	equ	0xFF5
 21045                           prodh	equ	0xFF4
 21046                           prodl	equ	0xFF3
 21047                           intcon	equ	0xFF2
 21048                           postinc0	equ	0xFEE
 21049                           wreg	equ	0xFE8
 21050                           indf1	equ	0xFE7
 21051                           postdec1	equ	0xFE5
 21052                           fsr1h	equ	0xFE2
 21053                           fsr1l	equ	0xFE1
 21054                           indf2	equ	0xFDF
 21055                           postinc2	equ	0xFDE
 21056                           postdec2	equ	0xFDD
 21057                           plusw2	equ	0xFDB
 21058                           fsr2h	equ	0xFDA
 21059                           fsr2l	equ	0xFD9
 21060                           status	equ	0xFD8
 21061                           
 21062 ;; *************** function _interrupt_at_low_vector *****************
 21063 ;; Defined at:
 21064 ;;		line 134 in file "../main.c"
 21065 ;; Parameters:    Size  Location     Type
 21066 ;;		None
 21067 ;; Auto vars:     Size  Location     Type
 21068 ;;		None
 21069 ;; Return value:  Size  Location     Type
 21070 ;;		None               void
 21071 ;; Registers used:
 21072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21073 ;; Tracked objects:
 21074 ;;		On entry : 0/0
 21075 ;;		On exit  : 0/0
 21076 ;;		Unchanged: 0/0
 21077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21078 ;;      Params:         0       0       0       0       0       0       0
 21079 ;;      Locals:         0       0       0       0       0       0       0
 21080 ;;      Temps:          9       0       0       0       0       0       0
 21081 ;;      Totals:         9       0       0       0       0       0       0
 21082 ;;Total ram usage:        9 bytes
 21083 ;; Hardware stack levels used:    1
 21084 ;; Hardware stack levels required when called:    1
 21085 ;; This function calls:
 21086 ;;		i1_ConvertADC
 21087 ;;		i1_WriteTimer0
 21088 ;; This function is called by:
 21089 ;;		Interrupt level 1
 21090 ;; This function uses a non-reentrant model
 21091 ;;
 21092                           
 21093                           	psect	intcodelo
 21094  000218                     __pintcodelo:
 21095                           	opt stack 0
 21096  000218                     _interrupt_at_low_vector:
 21097                           	opt stack 22
 21098                           
 21099                           ;incstack = 0
 21100  000218  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21101  00021C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21102  000220  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21103  000224  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21104  000228  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21105  00022C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21106  000230  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21107  000234                     
 21108                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 21109  000234  A4F2               	btfss	intcon,2,c	;volatile
 21110  000236  D001               	goto	i1u712_21
 21111  000238  D001               	goto	i1u712_20
 21112  00023A                     i1u712_21:
 21113  00023A  D043               	goto	i1l9160
 21114  00023C                     i1u712_20:
 21115  00023C                     
 21116                           ;main.c: 139: WriteTimer0(0xfb1d);
 21117  00023C  0EFB               	movlw	251
 21118  00023E  6E02               	movwf	?i1_WriteTimer0+1,c
 21119  000240  0E1D               	movlw	29
 21120  000242  6E01               	movwf	?i1_WriteTimer0,c
 21121  000244  ECB8  F02C         	call	i1_WriteTimer0	;wreg free
 21122  000248                     
 21123                           ;main.c: 141: vscp_timer++;
 21124  000248  0101               	movlb	1	; () banked
 21125  00024A  4B1C               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21126  00024C  2B1D               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21127  00024E                     
 21128                           ; BSR set to: 1
 21129                           ;main.c: 142: measurement_clock++;
 21130  00024E  0E01               	movlw	1
 21131  000250  2712               	addwf	_measurement_clock& (0+255),f,b
 21132  000252  0E00               	movlw	0
 21133  000254  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b
 21134  000256  0E00               	movlw	0
 21135  000258  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b
 21136  00025A  0E00               	movlw	0
 21137  00025C  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b
 21138  00025E                     
 21139                           ; BSR set to: 1
 21140                           ;main.c: 143: timeout_clock++;
 21141  00025E  0E01               	movlw	1
 21142  000260  2716               	addwf	_timeout_clock& (0+255),f,b
 21143  000262  0E00               	movlw	0
 21144  000264  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b
 21145  000266  0E00               	movlw	0
 21146  000268  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b
 21147  00026A  0E00               	movlw	0
 21148  00026C  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b
 21149  00026E                     
 21150                           ; BSR set to: 1
 21151                           ;main.c: 146: if (!(PORTC & 0x01)) {
 21152  00026E  B082               	btfsc	3970,0,c	;volatile
 21153  000270  D001               	goto	i1u713_21
 21154  000272  D001               	goto	i1u713_20
 21155  000274                     i1u713_21:
 21156  000274  D003               	goto	i1l138
 21157  000276                     i1u713_20:
 21158  000276                     
 21159                           ; BSR set to: 1
 21160                           ;main.c: 148: vscp_initbtncnt++;
 21161  000276  0100               	movlb	0	; () banked
 21162  000278  2BB7               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21163                           
 21164                           ;main.c: 149: }
 21165  00027A  D002               	goto	i1l9134
 21166  00027C                     i1l138:
 21167                           
 21168                           ; BSR set to: 1
 21169                           ;main.c: 150: else {
 21170                           ;main.c: 151: vscp_initbtncnt = 0;
 21171  00027C  0100               	movlb	0	; () banked
 21172  00027E  6BB7               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21173  000280                     i1l9134:
 21174                           
 21175                           ; BSR set to: 0
 21176                           ;main.c: 152: }
 21177                           ;main.c: 155: vscp_statuscnt++;
 21178  000280  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21179  000282                     
 21180                           ; BSR set to: 0
 21181                           ;main.c: 156: if ((0x02 == vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21182  000282  504E               	movf	_vscp_initledfunc,w,c
 21183  000284  0A02               	xorlw	2
 21184  000286  A4D8               	btfss	status,2,c
 21185  000288  D001               	goto	i1u714_21
 21186  00028A  D001               	goto	i1u714_20
 21187  00028C                     i1u714_21:
 21188  00028C  D00E               	goto	i1l9148
 21189  00028E                     i1u714_20:
 21190  00028E                     
 21191                           ; BSR set to: 0
 21192  00028E  0E64               	movlw	100
 21193  000290  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21194  000292  D001               	goto	i1u715_21
 21195  000294  D001               	goto	i1u715_20
 21196  000296                     i1u715_21:
 21197  000296  D009               	goto	i1l9148
 21198  000298                     i1u715_20:
 21199  000298                     
 21200                           ; BSR set to: 0
 21201                           ;main.c: 157: if (PORTC & 0x02) {
 21202  000298  A282               	btfss	3970,1,c	;volatile
 21203  00029A  D001               	goto	i1u716_21
 21204  00029C  D001               	goto	i1u716_20
 21205  00029E                     i1u716_21:
 21206  00029E  D002               	goto	i1l9144
 21207  0002A0                     i1u716_20:
 21208  0002A0                     i1l9142:
 21209                           
 21210                           ; BSR set to: 0
 21211                           ;main.c: 158: PORTC &= ~0x02;
 21212  0002A0  9282               	bcf	3970,1,c	;volatile
 21213                           
 21214                           ;main.c: 159: }
 21215  0002A2  D001               	goto	i1l9146
 21216  0002A4                     i1l9144:
 21217                           
 21218                           ; BSR set to: 0
 21219                           ;main.c: 160: else {
 21220                           ;main.c: 161: PORTC |= 0x02;
 21221  0002A4  8282               	bsf	3970,1,c	;volatile
 21222  0002A6                     i1l9146:
 21223                           
 21224                           ; BSR set to: 0
 21225                           ;main.c: 162: }
 21226                           ;main.c: 163: vscp_statuscnt = 0;
 21227  0002A6  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21228                           
 21229                           ;main.c: 164: }
 21230  0002A8  D00B               	goto	i1l9158
 21231  0002AA                     i1l9148:
 21232                           
 21233                           ; BSR set to: 0
 21234                           ;main.c: 165: else if (0x01 == vscp_initledfunc) {
 21235  0002AA  044E               	decf	_vscp_initledfunc,w,c
 21236  0002AC  A4D8               	btfss	status,2,c
 21237  0002AE  D001               	goto	i1u717_21
 21238  0002B0  D001               	goto	i1u717_20
 21239  0002B2                     i1u717_21:
 21240  0002B2  D001               	goto	i1l144
 21241  0002B4                     i1u717_20:
 21242  0002B4  D7F7               	goto	i1l9144
 21243  0002B6                     i1l144:
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;main.c: 169: else if (0x00 == vscp_initledfunc) {
 21247  0002B6  664E               	tstfsz	_vscp_initledfunc,c
 21248  0002B8  D001               	goto	i1u718_21
 21249  0002BA  D001               	goto	i1u718_20
 21250  0002BC                     i1u718_21:
 21251  0002BC  D001               	goto	i1l9158
 21252  0002BE                     i1u718_20:
 21253  0002BE  D7F0               	goto	i1l9142
 21254  0002C0                     i1l9158:
 21255                           
 21256                           ; BSR set to: 0
 21257                           ;main.c: 172: }
 21258                           ;main.c: 174: INTCONbits.TMR0IF = 0;
 21259  0002C0  94F2               	bcf	intcon,2,c	;volatile
 21260  0002C2                     i1l9160:
 21261                           
 21262                           ;main.c: 176: }
 21263                           ;main.c: 179: if (PIR1bits.ADIF) {
 21264  0002C2  AC9E               	btfss	3998,6,c	;volatile
 21265  0002C4  D001               	goto	i1u719_21
 21266  0002C6  D001               	goto	i1u719_20
 21267  0002C8                     i1u719_21:
 21268  0002C8  D0E5               	goto	i1l164
 21269  0002CA                     i1u719_20:
 21270  0002CA  D0C4               	goto	i1l9222
 21271  0002CC                     i1l9164:
 21272                           
 21273                           ;main.c: 185: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21274  0002CC  5049               	movf	_adc_series_counter,w,c
 21275  0002CE  0D0C               	mullw	12
 21276  0002D0  0E9D               	movlw	low _adc
 21277  0002D2  24F3               	addwf	prodl,w,c
 21278  0002D4  6ED9               	movwf	fsr2l,c
 21279  0002D6  0E01               	movlw	high _adc
 21280  0002D8  20F4               	addwfc	prodh,w,c
 21281  0002DA  6EDA               	movwf	fsr2h,c
 21282  0002DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21283                           
 21284                           ;main.c: 186: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21285  0002E0  5049               	movf	_adc_series_counter,w,c
 21286  0002E2  0D0C               	mullw	12
 21287  0002E4  0E9E               	movlw	low (_adc+1)
 21288  0002E6  24F3               	addwf	prodl,w,c
 21289  0002E8  6ED9               	movwf	fsr2l,c
 21290  0002EA  0E01               	movlw	high (_adc+1)
 21291  0002EC  20F4               	addwfc	prodh,w,c
 21292  0002EE  6EDA               	movwf	fsr2h,c
 21293  0002F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21294  0002F4                     
 21295                           ;main.c: 188: ADCON0 = (2<<2) + 1;
 21296  0002F4  0E09               	movlw	9
 21297  0002F6  6EC2               	movwf	4034,c	;volatile
 21298  0002F8                     
 21299                           ;main.c: 192: if ((80 - 1) == adc_series_counter) {
 21300  0002F8  5049               	movf	_adc_series_counter,w,c
 21301  0002FA  0A4F               	xorlw	79
 21302  0002FC  A4D8               	btfss	status,2,c
 21303  0002FE  D001               	goto	i1u720_21
 21304  000300  D001               	goto	i1u720_20
 21305  000302                     i1u720_21:
 21306  000302  D0C5               	goto	i1l9224
 21307  000304                     i1u720_20:
 21308  000304                     
 21309                           ;main.c: 193: adc_conversion_flags |= 1;
 21310  000304  0100               	movlb	0	; () banked
 21311  000306  81B3               	bsf	_adc_conversion_flags& (0+255),0,b
 21312  000308  D0C2               	goto	i1l9224
 21313  00030A                     i1l9172:
 21314                           
 21315                           ;main.c: 199: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21316  00030A  5049               	movf	_adc_series_counter,w,c
 21317  00030C  0D0C               	mullw	12
 21318  00030E  0E9F               	movlw	low (_adc+2)
 21319  000310  24F3               	addwf	prodl,w,c
 21320  000312  6ED9               	movwf	fsr2l,c
 21321  000314  0E01               	movlw	high (_adc+2)
 21322  000316  20F4               	addwfc	prodh,w,c
 21323  000318  6EDA               	movwf	fsr2h,c
 21324  00031A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21325                           
 21326                           ;main.c: 200: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21327  00031E  5049               	movf	_adc_series_counter,w,c
 21328  000320  0D0C               	mullw	12
 21329  000322  0EA0               	movlw	low (_adc+3)
 21330  000324  24F3               	addwf	prodl,w,c
 21331  000326  6ED9               	movwf	fsr2l,c
 21332  000328  0E01               	movlw	high (_adc+3)
 21333  00032A  20F4               	addwfc	prodh,w,c
 21334  00032C  6EDA               	movwf	fsr2h,c
 21335  00032E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21336  000332                     
 21337                           ;main.c: 203: ADCON0 = (1<<2) + 1;
 21338  000332  0E05               	movlw	5
 21339  000334  6EC2               	movwf	4034,c	;volatile
 21340  000336                     
 21341                           ;main.c: 207: if ((80 - 1) == adc_series_counter) {
 21342  000336  5049               	movf	_adc_series_counter,w,c
 21343  000338  0A4F               	xorlw	79
 21344  00033A  A4D8               	btfss	status,2,c
 21345  00033C  D001               	goto	i1u721_21
 21346  00033E  D001               	goto	i1u721_20
 21347  000340                     i1u721_21:
 21348  000340  D0A6               	goto	i1l9224
 21349  000342                     i1u721_20:
 21350  000342                     
 21351                           ;main.c: 208: adc_conversion_flags |= 1 << 1;
 21352  000342  0100               	movlb	0	; () banked
 21353  000344  83B3               	bsf	_adc_conversion_flags& (0+255),1,b
 21354  000346  D0A3               	goto	i1l9224
 21355  000348                     i1l9180:
 21356                           
 21357                           ;main.c: 214: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21358  000348  5049               	movf	_adc_series_counter,w,c
 21359  00034A  0D0C               	mullw	12
 21360  00034C  0EA1               	movlw	low (_adc+4)
 21361  00034E  24F3               	addwf	prodl,w,c
 21362  000350  6ED9               	movwf	fsr2l,c
 21363  000352  0E01               	movlw	high (_adc+4)
 21364  000354  20F4               	addwfc	prodh,w,c
 21365  000356  6EDA               	movwf	fsr2h,c
 21366  000358  CFC4 FFDF          	movff	4036,indf2	;volatile
 21367                           
 21368                           ;main.c: 215: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21369  00035C  5049               	movf	_adc_series_counter,w,c
 21370  00035E  0D0C               	mullw	12
 21371  000360  0EA2               	movlw	low (_adc+5)
 21372  000362  24F3               	addwf	prodl,w,c
 21373  000364  6ED9               	movwf	fsr2l,c
 21374  000366  0E01               	movlw	high (_adc+5)
 21375  000368  20F4               	addwfc	prodh,w,c
 21376  00036A  6EDA               	movwf	fsr2h,c
 21377  00036C  CFC3 FFDF          	movff	4035,indf2	;volatile
 21378  000370                     
 21379                           ;main.c: 217: ADCON0 = (0<<2) + 1;
 21380  000370  0E01               	movlw	1
 21381  000372  6EC2               	movwf	4034,c	;volatile
 21382  000374                     
 21383                           ;main.c: 221: if ((80 - 1) == adc_series_counter) {
 21384  000374  5049               	movf	_adc_series_counter,w,c
 21385  000376  0A4F               	xorlw	79
 21386  000378  A4D8               	btfss	status,2,c
 21387  00037A  D001               	goto	i1u722_21
 21388  00037C  D001               	goto	i1u722_20
 21389  00037E                     i1u722_21:
 21390  00037E  D087               	goto	i1l9224
 21391  000380                     i1u722_20:
 21392  000380                     
 21393                           ;main.c: 222: adc_conversion_flags |= 1 << 2;
 21394  000380  0100               	movlb	0	; () banked
 21395  000382  85B3               	bsf	_adc_conversion_flags& (0+255),2,b
 21396  000384  D084               	goto	i1l9224
 21397  000386                     i1l9188:
 21398                           
 21399                           ;main.c: 228: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21400  000386  5049               	movf	_adc_series_counter,w,c
 21401  000388  0D0C               	mullw	12
 21402  00038A  0EA3               	movlw	low (_adc+6)
 21403  00038C  24F3               	addwf	prodl,w,c
 21404  00038E  6ED9               	movwf	fsr2l,c
 21405  000390  0E01               	movlw	high (_adc+6)
 21406  000392  20F4               	addwfc	prodh,w,c
 21407  000394  6EDA               	movwf	fsr2h,c
 21408  000396  CFC4 FFDF          	movff	4036,indf2	;volatile
 21409                           
 21410                           ;main.c: 229: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21411  00039A  5049               	movf	_adc_series_counter,w,c
 21412  00039C  0D0C               	mullw	12
 21413  00039E  0EA4               	movlw	low (_adc+7)
 21414  0003A0  24F3               	addwf	prodl,w,c
 21415  0003A2  6ED9               	movwf	fsr2l,c
 21416  0003A4  0E01               	movlw	high (_adc+7)
 21417  0003A6  20F4               	addwfc	prodh,w,c
 21418  0003A8  6EDA               	movwf	fsr2h,c
 21419  0003AA  CFC3 FFDF          	movff	4035,indf2	;volatile
 21420  0003AE                     
 21421                           ;main.c: 231: ADCON0 = (9<<2) + 1;
 21422  0003AE  0E25               	movlw	37
 21423  0003B0  6EC2               	movwf	4034,c	;volatile
 21424  0003B2                     
 21425                           ;main.c: 235: if ((80 - 1) == adc_series_counter) {
 21426  0003B2  5049               	movf	_adc_series_counter,w,c
 21427  0003B4  0A4F               	xorlw	79
 21428  0003B6  A4D8               	btfss	status,2,c
 21429  0003B8  D001               	goto	i1u723_21
 21430  0003BA  D001               	goto	i1u723_20
 21431  0003BC                     i1u723_21:
 21432  0003BC  D068               	goto	i1l9224
 21433  0003BE                     i1u723_20:
 21434  0003BE                     
 21435                           ;main.c: 236: adc_conversion_flags |= 1 << 3;
 21436  0003BE  0100               	movlb	0	; () banked
 21437  0003C0  87B3               	bsf	_adc_conversion_flags& (0+255),3,b
 21438  0003C2  D065               	goto	i1l9224
 21439  0003C4                     i1l9196:
 21440                           
 21441                           ;main.c: 242: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21442  0003C4  5049               	movf	_adc_series_counter,w,c
 21443  0003C6  0D0C               	mullw	12
 21444  0003C8  0EA5               	movlw	low (_adc+8)
 21445  0003CA  24F3               	addwf	prodl,w,c
 21446  0003CC  6ED9               	movwf	fsr2l,c
 21447  0003CE  0E01               	movlw	high (_adc+8)
 21448  0003D0  20F4               	addwfc	prodh,w,c
 21449  0003D2  6EDA               	movwf	fsr2h,c
 21450  0003D4  CFC4 FFDF          	movff	4036,indf2	;volatile
 21451                           
 21452                           ;main.c: 243: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21453  0003D8  5049               	movf	_adc_series_counter,w,c
 21454  0003DA  0D0C               	mullw	12
 21455  0003DC  0EA6               	movlw	low (_adc+9)
 21456  0003DE  24F3               	addwf	prodl,w,c
 21457  0003E0  6ED9               	movwf	fsr2l,c
 21458  0003E2  0E01               	movlw	high (_adc+9)
 21459  0003E4  20F4               	addwfc	prodh,w,c
 21460  0003E6  6EDA               	movwf	fsr2h,c
 21461  0003E8  CFC3 FFDF          	movff	4035,indf2	;volatile
 21462  0003EC                     
 21463                           ;main.c: 245: ADCON0 = (8<<2) + 1;
 21464  0003EC  0E21               	movlw	33
 21465  0003EE  6EC2               	movwf	4034,c	;volatile
 21466  0003F0                     
 21467                           ;main.c: 249: if ((80 - 1) == adc_series_counter) {
 21468  0003F0  5049               	movf	_adc_series_counter,w,c
 21469  0003F2  0A4F               	xorlw	79
 21470  0003F4  A4D8               	btfss	status,2,c
 21471  0003F6  D001               	goto	i1u724_21
 21472  0003F8  D001               	goto	i1u724_20
 21473  0003FA                     i1u724_21:
 21474  0003FA  D049               	goto	i1l9224
 21475  0003FC                     i1u724_20:
 21476  0003FC                     
 21477                           ;main.c: 250: adc_conversion_flags |= 1 << 4;
 21478  0003FC  0100               	movlb	0	; () banked
 21479  0003FE  89B3               	bsf	_adc_conversion_flags& (0+255),4,b
 21480  000400  D046               	goto	i1l9224
 21481  000402                     i1l9204:
 21482                           
 21483                           ;main.c: 256: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21484  000402  5049               	movf	_adc_series_counter,w,c
 21485  000404  0D0C               	mullw	12
 21486  000406  0EA7               	movlw	low (_adc+10)
 21487  000408  24F3               	addwf	prodl,w,c
 21488  00040A  6ED9               	movwf	fsr2l,c
 21489  00040C  0E01               	movlw	high (_adc+10)
 21490  00040E  20F4               	addwfc	prodh,w,c
 21491  000410  6EDA               	movwf	fsr2h,c
 21492  000412  CFC4 FFDF          	movff	4036,indf2	;volatile
 21493                           
 21494                           ;main.c: 257: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21495  000416  5049               	movf	_adc_series_counter,w,c
 21496  000418  0D0C               	mullw	12
 21497  00041A  0EA8               	movlw	low (_adc+11)
 21498  00041C  24F3               	addwf	prodl,w,c
 21499  00041E  6ED9               	movwf	fsr2l,c
 21500  000420  0E01               	movlw	high (_adc+11)
 21501  000422  20F4               	addwfc	prodh,w,c
 21502  000424  6EDA               	movwf	fsr2h,c
 21503  000426  CFC3 FFDF          	movff	4035,indf2	;volatile
 21504  00042A                     
 21505                           ;main.c: 259: ADCON0 = (10<<2) + 1;
 21506  00042A  0E29               	movlw	41
 21507  00042C  6EC2               	movwf	4034,c	;volatile
 21508  00042E                     
 21509                           ;main.c: 263: if ((80 - 1) == adc_series_counter) {
 21510  00042E  5049               	movf	_adc_series_counter,w,c
 21511  000430  0A4F               	xorlw	79
 21512  000432  A4D8               	btfss	status,2,c
 21513  000434  D001               	goto	i1u725_21
 21514  000436  D001               	goto	i1u725_20
 21515  000438                     i1u725_21:
 21516  000438  D002               	goto	i1l161
 21517  00043A                     i1u725_20:
 21518  00043A                     
 21519                           ;main.c: 264: adc_conversion_flags |= 1 << 5;
 21520  00043A  0100               	movlb	0	; () banked
 21521  00043C  8BB3               	bsf	_adc_conversion_flags& (0+255),5,b
 21522  00043E                     i1l161:
 21523                           
 21524                           ;main.c: 265: }
 21525                           ;main.c: 268: adc_series_counter++;
 21526  00043E  2A49               	incf	_adc_series_counter,f,c
 21527  000440                     
 21528                           ;main.c: 269: if (adc_series_counter >= 80) {
 21529  000440  0E4F               	movlw	79
 21530  000442  6449               	cpfsgt	_adc_series_counter,c
 21531  000444  D001               	goto	i1u726_21
 21532  000446  D001               	goto	i1u726_20
 21533  000448                     i1u726_21:
 21534  000448  D022               	goto	i1l9224
 21535  00044A                     i1u726_20:
 21536  00044A                     i1l9214:
 21537                           
 21538                           ;main.c: 270: adc_series_counter = 0;
 21539  00044A  6A49               	clrf	_adc_series_counter,c
 21540  00044C  D020               	goto	i1l9224
 21541  00044E                     i1l9216:
 21542                           
 21543                           ;main.c: 276: ADCON0 = (10<<2) + 1;
 21544  00044E  0E29               	movlw	41
 21545  000450  6EC2               	movwf	4034,c	;volatile
 21546  000452  D7FB               	goto	i1l9214
 21547  000454                     i1l9222:
 21548  000454  50C2               	movf	4034,w,c	;volatile
 21549  000456  0B3C               	andlw	60
 21550  000458  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21551  00045A  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21552                           
 21553                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21554                           ; Switch size 1, requested type "speed"
 21555                           ; Number of cases is 1, Range of values is 0 to 0
 21556                           ; switch strategies available:
 21557                           ; Name         Instructions Cycles
 21558                           ; simple_byte            4     3 (average)
 21559                           ;	Chosen strategy is simple_byte
 21560  00045C  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21561  00045E  0A00               	xorlw	0	; case 0
 21562  000460  B4D8               	btfsc	status,2,c
 21563  000462  D001               	goto	i1l12206
 21564  000464  D7F4               	goto	i1l9216
 21565  000466                     i1l12206:
 21566                           
 21567                           ; Switch size 1, requested type "speed"
 21568                           ; Number of cases is 6, Range of values is 0 to 40
 21569                           ; switch strategies available:
 21570                           ; Name         Instructions Cycles
 21571                           ; simple_byte           19    10 (average)
 21572                           ;	Chosen strategy is simple_byte
 21573  000466  5005               	movf	??_interrupt_at_low_vector,w,c
 21574  000468  0A00               	xorlw	0	; case 0
 21575  00046A  B4D8               	btfsc	status,2,c
 21576  00046C  D78C               	goto	i1l9188
 21577  00046E  0A04               	xorlw	4	; case 4
 21578  000470  B4D8               	btfsc	status,2,c
 21579  000472  D76A               	goto	i1l9180
 21580  000474  0A0C               	xorlw	12	; case 8
 21581  000476  B4D8               	btfsc	status,2,c
 21582  000478  D748               	goto	i1l9172
 21583  00047A  0A28               	xorlw	40	; case 32
 21584  00047C  B4D8               	btfsc	status,2,c
 21585  00047E  D7C1               	goto	i1l9204
 21586  000480  0A04               	xorlw	4	; case 36
 21587  000482  B4D8               	btfsc	status,2,c
 21588  000484  D79F               	goto	i1l9196
 21589  000486  0A0C               	xorlw	12	; case 40
 21590  000488  B4D8               	btfsc	status,2,c
 21591  00048A  D720               	goto	i1l9164
 21592  00048C  D7E0               	goto	i1l9216
 21593  00048E                     i1l9224:
 21594                           
 21595                           ;main.c: 282: ConvertADC();
 21596  00048E  ECEF  F02C         	call	i1_ConvertADC	;wreg free
 21597  000492                     
 21598                           ;main.c: 284: PIR1bits.ADIF = 0;
 21599  000492  9C9E               	bcf	3998,6,c	;volatile
 21600  000494                     i1l164:
 21601  000494  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21602  000498  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21603  00049C  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21604  0004A0  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21605  0004A4  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21606  0004A8  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21607  0004AC  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21608  0004B0  0010               	retfie	
 21609  0004B2                     __end_of_interrupt_at_low_vector:
 21610                           	opt stack 0
 21611                           tblptru	equ	0xFF8
 21612                           tblptrh	equ	0xFF7
 21613                           tblptrl	equ	0xFF6
 21614                           tablat	equ	0xFF5
 21615                           prodh	equ	0xFF4
 21616                           prodl	equ	0xFF3
 21617                           intcon	equ	0xFF2
 21618                           postinc0	equ	0xFEE
 21619                           wreg	equ	0xFE8
 21620                           indf1	equ	0xFE7
 21621                           postdec1	equ	0xFE5
 21622                           fsr1h	equ	0xFE2
 21623                           fsr1l	equ	0xFE1
 21624                           bsr	equ	0xFE0
 21625                           indf2	equ	0xFDF
 21626                           postinc2	equ	0xFDE
 21627                           postdec2	equ	0xFDD
 21628                           plusw2	equ	0xFDB
 21629                           fsr2h	equ	0xFDA
 21630                           fsr2l	equ	0xFD9
 21631                           status	equ	0xFD8
 21632                           
 21633 ;; *************** function i1_WriteTimer0 *****************
 21634 ;; Defined at:
 21635 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21636 ;; Parameters:    Size  Location     Type
 21637 ;;  timer0          2    0[COMRAM] unsigned int 
 21638 ;; Auto vars:     Size  Location     Type
 21639 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21640 ;; Return value:  Size  Location     Type
 21641 ;;		None               void
 21642 ;; Registers used:
 21643 ;;		None
 21644 ;; Tracked objects:
 21645 ;;		On entry : 0/0
 21646 ;;		On exit  : 0/0
 21647 ;;		Unchanged: 0/0
 21648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21649 ;;      Params:         2       0       0       0       0       0       0
 21650 ;;      Locals:         2       0       0       0       0       0       0
 21651 ;;      Temps:          0       0       0       0       0       0       0
 21652 ;;      Totals:         4       0       0       0       0       0       0
 21653 ;;Total ram usage:        4 bytes
 21654 ;; Hardware stack levels used:    1
 21655 ;; This function calls:
 21656 ;;		Nothing
 21657 ;; This function is called by:
 21658 ;;		_interrupt_at_low_vector
 21659 ;; This function uses a non-reentrant model
 21660 ;;
 21661                           
 21662                           	psect	text100
 21663  005970                     __ptext100:
 21664                           	opt stack 0
 21665  005970                     i1_WriteTimer0:
 21666                           	opt stack 22
 21667                           
 21668                           ;incstack = 0
 21669                           ;incstack = 0
 21670  005970  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21671  005974  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21672  005978  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21673  00597C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21674  005980  0012               	return	
 21675  005982                     __end_ofi1_WriteTimer0:
 21676                           	opt stack 0
 21677                           tblptru	equ	0xFF8
 21678                           tblptrh	equ	0xFF7
 21679                           tblptrl	equ	0xFF6
 21680                           tablat	equ	0xFF5
 21681                           prodh	equ	0xFF4
 21682                           prodl	equ	0xFF3
 21683                           intcon	equ	0xFF2
 21684                           postinc0	equ	0xFEE
 21685                           wreg	equ	0xFE8
 21686                           indf1	equ	0xFE7
 21687                           postdec1	equ	0xFE5
 21688                           fsr1h	equ	0xFE2
 21689                           fsr1l	equ	0xFE1
 21690                           bsr	equ	0xFE0
 21691                           indf2	equ	0xFDF
 21692                           postinc2	equ	0xFDE
 21693                           postdec2	equ	0xFDD
 21694                           plusw2	equ	0xFDB
 21695                           fsr2h	equ	0xFDA
 21696                           fsr2l	equ	0xFD9
 21697                           status	equ	0xFD8
 21698                           
 21699 ;; *************** function i1_ConvertADC *****************
 21700 ;; Defined at:
 21701 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21702 ;; Parameters:    Size  Location     Type
 21703 ;;		None
 21704 ;; Auto vars:     Size  Location     Type
 21705 ;;		None
 21706 ;; Return value:  Size  Location     Type
 21707 ;;		None               void
 21708 ;; Registers used:
 21709 ;;		None
 21710 ;; Tracked objects:
 21711 ;;		On entry : 0/0
 21712 ;;		On exit  : 0/0
 21713 ;;		Unchanged: 0/0
 21714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21715 ;;      Params:         0       0       0       0       0       0       0
 21716 ;;      Locals:         0       0       0       0       0       0       0
 21717 ;;      Temps:          0       0       0       0       0       0       0
 21718 ;;      Totals:         0       0       0       0       0       0       0
 21719 ;;Total ram usage:        0 bytes
 21720 ;; Hardware stack levels used:    1
 21721 ;; This function calls:
 21722 ;;		Nothing
 21723 ;; This function is called by:
 21724 ;;		_interrupt_at_low_vector
 21725 ;; This function uses a non-reentrant model
 21726 ;;
 21727                           
 21728                           	psect	text101
 21729  0059DE                     __ptext101:
 21730                           	opt stack 0
 21731  0059DE                     i1_ConvertADC:
 21732                           	opt stack 22
 21733                           
 21734                           ;incstack = 0
 21735                           ;incstack = 0
 21736  0059DE  82C2               	bsf	4034,1,c	;volatile
 21737  0059E0  0012               	return	
 21738  0059E2                     __end_ofi1_ConvertADC:
 21739                           	opt stack 0
 21740                           tblptru	equ	0xFF8
 21741                           tblptrh	equ	0xFF7
 21742                           tblptrl	equ	0xFF6
 21743                           tablat	equ	0xFF5
 21744                           prodh	equ	0xFF4
 21745                           prodl	equ	0xFF3
 21746                           intcon	equ	0xFF2
 21747                           postinc0	equ	0xFEE
 21748                           wreg	equ	0xFE8
 21749                           indf1	equ	0xFE7
 21750                           postdec1	equ	0xFE5
 21751                           fsr1h	equ	0xFE2
 21752                           fsr1l	equ	0xFE1
 21753                           bsr	equ	0xFE0
 21754                           indf2	equ	0xFDF
 21755                           postinc2	equ	0xFDE
 21756                           postdec2	equ	0xFDD
 21757                           plusw2	equ	0xFDB
 21758                           fsr2h	equ	0xFDA
 21759                           fsr2l	equ	0xFD9
 21760                           status	equ	0xFD8
 21761                           tblptru	equ	0xFF8
 21762                           tblptrh	equ	0xFF7
 21763                           tblptrl	equ	0xFF6
 21764                           tablat	equ	0xFF5
 21765                           prodh	equ	0xFF4
 21766                           prodl	equ	0xFF3
 21767                           intcon	equ	0xFF2
 21768                           postinc0	equ	0xFEE
 21769                           wreg	equ	0xFE8
 21770                           indf1	equ	0xFE7
 21771                           postdec1	equ	0xFE5
 21772                           fsr1h	equ	0xFE2
 21773                           fsr1l	equ	0xFE1
 21774                           bsr	equ	0xFE0
 21775                           indf2	equ	0xFDF
 21776                           postinc2	equ	0xFDE
 21777                           postdec2	equ	0xFDD
 21778                           plusw2	equ	0xFDB
 21779                           fsr2h	equ	0xFDA
 21780                           fsr2l	equ	0xFD9
 21781                           status	equ	0xFD8
 21782                           
 21783                           	psect	text102
 21784  000000                     __ptext102:
 21785                           	opt stack 0
 21786                           tblptru	equ	0xFF8
 21787                           tblptrh	equ	0xFF7
 21788                           tblptrl	equ	0xFF6
 21789                           tablat	equ	0xFF5
 21790                           prodh	equ	0xFF4
 21791                           prodl	equ	0xFF3
 21792                           intcon	equ	0xFF2
 21793                           postinc0	equ	0xFEE
 21794                           wreg	equ	0xFE8
 21795                           indf1	equ	0xFE7
 21796                           postdec1	equ	0xFE5
 21797                           fsr1h	equ	0xFE2
 21798                           fsr1l	equ	0xFE1
 21799                           bsr	equ	0xFE0
 21800                           indf2	equ	0xFDF
 21801                           postinc2	equ	0xFDE
 21802                           postdec2	equ	0xFDD
 21803                           plusw2	equ	0xFDB
 21804                           fsr2h	equ	0xFDA
 21805                           fsr2l	equ	0xFD9
 21806                           status	equ	0xFD8
 21807                           
 21808                           	psect	rparam
 21809  0000                     tblptru	equ	0xFF8
 21810                           tblptrh	equ	0xFF7
 21811                           tblptrl	equ	0xFF6
 21812                           tablat	equ	0xFF5
 21813                           prodh	equ	0xFF4
 21814                           prodl	equ	0xFF3
 21815                           intcon	equ	0xFF2
 21816                           postinc0	equ	0xFEE
 21817                           wreg	equ	0xFE8
 21818                           indf1	equ	0xFE7
 21819                           postdec1	equ	0xFE5
 21820                           fsr1h	equ	0xFE2
 21821                           fsr1l	equ	0xFE1
 21822                           bsr	equ	0xFE0
 21823                           indf2	equ	0xFDF
 21824                           postinc2	equ	0xFDE
 21825                           postdec2	equ	0xFDD
 21826                           plusw2	equ	0xFDB
 21827                           fsr2h	equ	0xFDA
 21828                           fsr2l	equ	0xFD9
 21829                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1112
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     83     119
    BANK1           256     54     157
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readAppReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   91272
                                             82 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   34702
                                             68 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   10599
                                             39 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             39 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             37 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   24965
                                             31 BANK0     27    27      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6870
                                             51 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    3152
                                             33 COMRAM    18    17      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    3563
                                             32 COMRAM     3     2      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1822
                                             20 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             18 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                0     0      0      62
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     652
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      9D       7       61.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     53      77       5       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     166       3        0.0%
DATA                 0      0     531      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Feb 14 18:20:23 2015

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 2DF2  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 4A00  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0014  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 4578  
                          ___asflsub@f1p 007E                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 55B0                              __CFG_WDT$ON 000000  
                                    l201 19B8                                      l208 1D06  
                                    l224 1F4E                                      l321 2768  
                                    l410 2AF2                                      l323 2774  
                                    l315 2744                                      l317 2750  
                                    l253 4A8A                                      l245 3848  
                                    l414 2B22                                      l319 275C  
                                    l183 4422                                      l168 43B2  
                                    l177 43F8                                      l620 4FD2  
                                    l516 1114                                      l631 563E  
                                    l295 4F24                                      l544 5808  
                                    l626 54F8                                      l822 3D5E  
                                    l814 3CC6                                      l840 34C8  
                                    l816 3CE4                                      l850 3524  
                                    l842 34DC                                      l834 3640  
                                    l827 346C                                      l844 34F0  
                                    l909 5750                                      l837 353A  
                                    l846 3504                                      l838 34BA  
                     vscp_readStdReg@reg 0014                                      l848 3514  
                                    l881 3EC2                                      l858 35A8  
                                    l859 35CC                                      l876 4172  
                                    l886 5040           __size_of_vscp_handleProbeState 00C4  
                       setEventData@ival 0083                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 4712                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 007E  
                                    _adc 019D                                      _exp 384A  
                                    _log 4174                                      fsr2 000FD9  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0074                             ___flmul@sign 0075  
                          ___flpack@sign 0013                             ___fltol@exp1 007B  
                                   l1022 52F8                                     l1027 57C4  
                                   l1203 2FD2                                     l1045 46FC  
                                   l1037 470C                                     l1046 46DC  
                                   l1038 4696                                     l1070 5486  
                                   l1080 5606                                     l1081 5612  
                                   l1074 57A0                                     l1138 57E6  
                                   l1307 5840                                     l1227 316A  
                                   l1308 5842                                     l1228 317E  
                                   l1085 5692                                     l1229 31C0  
                                   l1270 56BC                                     l1238 31FC  
                                   l1262 3432                                     l1094 516A  
                                   l1168 3BF4                                     l1098 585E  
                                   l1532 4824                                     l1612 464C  
                                   l1293 5116                                     l1605 51E6  
                                   l1606 5204                                     l1527 47E0  
                                   l1528 4890                                     l1553 3A2C  
                                   l1538 4852                                     l1580 3F9E  
                                   l1556 38F8                                     l1565 3EE6  
                                   l1557 3A1C                                     l1566 4022  
                                   l1646 42D6                                     l1647 439C  
                                   l1569 3F0E                                     l1649 438C  
                                   l1674 4E54                                     l1658 4D38  
                                   l1597 4B56                                     l1845 42A0  
                                   l1678 4BFA                  __end_of_doOneSecondWork 384A  
              vscp_getManufacturerId@idx 0012                                     l8132 5620  
                                   l8116 4F76                                     l8044 5866  
                                   l9100 56DE                                     ?_exp 0099  
                                   ?_log 0081                                     l8400 4FDA  
                                   l8240 345A                                     l8128 561C  
                                   l8410 500A                                     l8402 4FE2  
                                   l8250 3484                                     l8412 5010  
                                   l8404 4FEC                                     l8308 354E  
                                   l8414 5016                                     l8406 4FF6  
                                   l8318 356E                                     l8408 5000  
                                   l8432 3DF4                                     l8344 35FA  
                                   l8352 3614                                     l8336 35CE  
                                   l8256 349A                                     l8264 34A8  
                                   l8370 58CE                                     l8418 5022  
                                   l8258 34A4                                     l9092 56C8  
                                   l8358 362A                                     l9620 46BA  
                                   l9614 46B2                                     l9542 258C  
                                   l9528 57B0                                     l9800 2FF4  
                                   l9618 46B6                                     l9650 4700  
                                   l9580 4650                                     l9804 3004  
                                   l9732 2E8C                                     l9660 2E08  
                                   l9814 3066                                     l9718 2E80  
                                   l9662 2E0E                                     l9808 301C  
                                   l9664 2E14                                     l9656 2DFC  
                                   l9594 4670                                     l9818 307C  
                                   l9834 30AC                                     l9738 2EA0  
                                   l9682 2E4C                                     l9658 2E02  
                                   l9596 4678                                     l9932 31B4  
                                   l9924 31A4                                     l9916 3186  
                                   l9852 3102                                     l9836 30AE  
                                   l9756 2F02                                     l9684 2E52  
                                   l9942 31C2                                     l9846 30D2  
                                   l9838 30B8                                     l9766 2F36  
                                   l9928 31AC                                     l9880 313E  
                                   l9864 311E                                     l9776 2F6A  
                                   l9946 31DC                                     l9786 2F9E  
                                   l9698 2E5A                                     l9982 322C  
                                   l9798 2FD6                                     l9992 324E  
                                   l9968 3204                                     l9896 315E  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5430 4FC6                                     u5435 4FBC  
                                   u5605 3462                                     u5607 3464  
                                   u8304 3786                                     u9105 405E  
                                   u8305 3782                                     u9115 4084  
                                   u5925 3DA2                                     u9125 40AE  
                                   u8254 36BC                                     u5935 3DC2  
                                   u8255 36B8                                     u5945 3E10  
                         sendCANFrame@rv 0042                                     u9620 3BBA  
                                   u9625 3BB0                                     u8770 39E0  
                                   u9590 3B58                                     u8790 4188  
                                   u9595 3B4E                                     u8965 498A  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 439E                                     _init 5500  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0099                                     log@x 0081  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 066E                              _vscp_minute 00B8  
                            _vscp_second 00BB                                     prodh 000FF4  
                                   prodl 000FF3                                     start 04B2  
          __size_of_vscp_doOneSecondWork 0052                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 3A2E  
                            _writeEEPROM 5734                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 511A  
                        _sh_coefficients 011F                     __end_of_getVSCPFrame 4FD4  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 55E4  
                   __size_of_getCANFrame 002C                                    l10000 3270  
                                  l10020 32A8                                    l10004 3274  
                                  l10102 4F44                                    l10032 32FA  
                                  l10024 32C8                                    l10104 4F50  
                                  l10050 3348                                    l10042 331A  
                                  l10202 5146                                    l11100 3D2E  
                                  l10028 32DE                                    l10116 364E  
                                  l11110 3D54                                    l10054 3370  
                                  l10142 371E                                    l10126 3692  
                                  l10206 5150                                    l11112 3D56  
                                  l10144 3728                                    l11106 3D50  
                                  l11034 54CA                                    l11210 5858  
                                  l10090 4EDC                                    l10170 37F2  
                                  l10154 3776                                    l11052 3C50  
                                  l11220 44A6                                    l10076 33D0  
                                  l10180 3840                                    l10412 39EA  
                                  l12100 1CB4                                    l11070 3C8A  
                                  l11038 54F4                                    l11310 3A58  
                                  l10094 4F00                                    l12006 150A  
                                  l10600 2876                                    l11128 409A  
                                  l11080 3CCA                                    l11240 44DC  
                                  l11232 44C4                                    l11224 44B0  
                                  l10168 37E8                                    l10424 4192  
                                  _B0CON 000E20                                    l10610 28B2  
                                  l10602 2882                                    l10530 26DE  
                                  l11402 483A                                    l10514 4C06  
                                  l11058 3C60                                    l11330 3AB2  
                                  l11322 3A94                                    l10098 4F30  
                                  l12114 1DD4                                    l10700 2A56  
                                  l10620 28EE                                    l10612 28BE  
                                  l10604 288E                                    l10540 271A  
                                  l10532 26EA                                    l11404 4846  
                                  l10508 4C00                                    l11092 3D14  
                                  l11244 44E8                                    l11236 44D0  
                                  l11228 44BA                                    l11332 3AB6  
                                  l11316 3A78                                    l11500 3F3A  
                                  l10196 513A                                    l12116 1DEE  
                                  l10710 2A92                                    l10702 2A62  
                                  l10630 292A                                    l10622 28FA  
                                  l10614 28CA                                    l10606 289A  
                                  l10550 2756                                    l10542 2726  
                                  l10534 26F6                                    l11086 3CE6  
                                  l11166 547E                                    l11270 453C  
                                  l11262 4526                                    l11254 450E  
                                  l11334 3ACC                                    l11510 3F6A  
                                  l11422 48AC                                    l12070 1ACA  
                                  l10720 2ACE                                    l10712 2A9E  
                                  l10704 2A6E                                    l10640 2966  
                                  l10632 2936                                    l10624 2906  
                                  l10616 28D6                                    l10608 28A6  
                                  l10560 2786                                    l10552 2762  
                                  l10544 2732                                    l10536 2702  
                                  l11248 44F8                                    l10800 08B4  
                                  l11520 3F98                                    l11512 3F70  
                                  l10472 4A6E                                    l10392 389C  
                                  l12136 1EE8                                    l12056 1A98  
                                  _B1CON 000E30                                    l10730 2B16  
                                  l10722 2ADA                                    l10714 2AAA  
                                  l10706 2A7A                                    l10642 2972  
                                  l10634 2942                                    l10626 2912  
                                  l10618 28E2                                    l10570 27C2  
                                  l10562 2792                                    l10554 276E  
                                  l10546 273E                                    l10538 270E  
                                  l11274 4548                                    l11266 4530  
                                  l11258 451A                                    l10810 0940  
                                  l10802 08D0                                    l11346 3B00  
                                  l11506 3F56                                    l10386 3868  
                                  l11434 48DC                                    l11450 4928  
                                  l12138 1EF2                                    l12058 1AB2  
                                  l10724 2AE6                                    l10716 2AB6  
                                  l10708 2A86                                    l10644 297E  
                                  l10636 294E                                    l10628 291E  
                                  l10580 27FE                                    l10572 27CE  
                                  l10564 279E                                    l10548 274A  
                                  l11620 4608                                    l11604 45C4  
                                  l10492 53D0                                    l11284 456A  
                                  l10900 0E48                                    l10820 09CC  
                                  l10812 095C                                    l10804 08EC  
                                  l11356 3B62                                    l11524 3FB4  
                                  l11508 3F62                                    l10468 4A36  
                                  l11700 4BC2                                    l10396 38C6  
                                  l11436 48E8                                    l11428 48C4  
                                  l12148 1F44                                    l12076 1B92  
                                  l10750 2DDE                                    l10742 2DCE  
                                  l10726 2AF8                                    l10718 2AC2  
                                  l10670 29A2                                    l10638 295A  
                                  l10590 283A                                    l10582 280A  
                                  l10574 27DA                                    l10566 27AA  
                                  l10558 277A                                    l10734 2B26  
                                  l11278 4554                                    l11286 4574  
                                  l10910 0F10                                    l10902 0E70  
                                  l10830 0A4E                                    l10822 09E6  
                                  l10814 0978                                    l10806 0908  
                                  l11374 3BDA                                    l11366 3BC2  
                                  l11518 3F8C                                    l11710 51D0  
                                  l11454 493C                                    l11446 491A  
                                  l11438 48EC                                    l12078 1BAC  
                                  l10728 2B0A                                    l10680 29DE  
                                  l10672 29AE                                    l10592 2846  
                                  l10584 2816                                    l10576 27E6  
                                  l10568 27B6                                    l10752 2DEE  
                                  l10736 2DB0                                    l11392 47EA  
                                  l11616 45F4                                    l11608 45D8  
                                  l10920 0FD8                                    l10912 0F38  
                                  l10904 0E98                                    l10840 0AD0  
                                  l10832 0A68                                    l10824 0A00  
                                  l10816 0994                                    l10808 0924  
                                  l10760 0684                                    l11384 3BF6  
                                  l11536 3FF6                                    l11528 3FCA  
                                  l11552 4AD0                                    l11464 5392  
                                  _B2CON 000E40                                    l10690 2A1A  
                                  l10682 29EA                                    l10674 29BA  
                                  l10666 298A                                    l10594 2852  
                                  l10586 2822                                    l10578 27F2  
                                  l11394 47F6                                    l10930 10A0  
                                  l10922 1000                                    l10914 0F60  
                                  l10906 0EC0                                    l10850 0B52  
                                  l10842 0AEA                                    l10834 0A82  
                                  l10826 0A1A                                    l10818 09B0  
                                  l10770 0710                                    l10762 06A0  
                                  l11298 57DC                                    l12098 1CAA  
                                  l10692 2A26                                    l10684 29F6  
                                  l10676 29C6                                    l10668 2996  
                                  l10596 285E                                    l10588 282E  
                                  l11396 480E                                    l11644 5586  
                                  l10940 1148                                    l10932 10C8  
                                  l10924 1028                                    l10916 0F88  
                                  l10908 0EE8                                    l10860 0BD4  
                                  l10852 0B6C                                    l10844 0B04  
                                  l10836 0A9C                                    l10828 0A34  
                                  l10780 079C                                    l10772 072C  
                                  l10764 06BC                                    l11484 3F20  
                                  l11572 4B1C                                    l11564 4AEE  
                                  l11548 4ABC                                    l11716 5202  
                                  l11724 576C                                    l10694 2A32  
                                  l10686 2A02                                    l10678 29D2  
                                  l10598 286A                                    l10950 11B2  
                                  l10942 1162                                    l10934 10E2  
                                  l10926 1050                                    l10918 0FB0  
                                  l10870 0C56                                    l10862 0BEE  
                                  l10854 0B86                                    l10846 0B1E  
                                  l10838 0AB6                                    l10790 0828  
                                  l10782 07B8                                    l10774 0748  
                                  l10766 06D8                                    l11478 3EF8  
                                  l11750 4CA8                                    l11662 42FC  
                                  l11670 473E                                    l10696 2A3E  
                                  l10688 2A0E                                    l11592 459C  
                                  l10952 11CC                                    l10936 10FC  
                                  l10928 1078                                    l10880 0CD8  
                                  l10872 0C70                                    l10864 0C08  
                                  l10856 0BA0                                    l10848 0B38  
                                  l10792 0844                                    l10784 07D4  
                                  l10776 0764                                    l10768 06F4  
                                  l11736 4DF6                                    l11752 4CB2  
                                  l11672 47B8                                    _B3CON 000E50  
                                  l10698 2A4A                                    l10946 1172  
                                  l10938 112E                                    l10890 0D80  
                                  l10882 0CF2                                    l10874 0C8A  
                                  l10866 0C22                                    l10858 0BBA  
                                  l10794 0860                                    l10786 07F0  
                                  l10778 0780                                    l11770 4CFC  
                                  l11658 42E0                                    l11588 4586  
                                  l10948 1198                                    l10892 0DA8  
                                  l10884 0D0C                                    l10876 0CA4  
                                  l10868 0C3C                                    l10796 087C  
                                  l10788 080C                                    l10956 11D2  
                                  l11940 43F2                                    l11932 43DE  
                                  l10894 0DD0                                    l10886 0D32  
                                  l10878 0CBE                                    l10798 0898  
                                  l10966 14A4                                    l10958 146E  
                                  l11782 4D28                                    l11774 4D04  
                                  l11766 4CEC                                    l11686 4B98  
                                  l10896 0DF8                                    l10888 0D58  
                                  l11776 4D10                                    l11696 4BB6  
                                  l11960 443E                                    l11936 43E8  
                                  l11928 43D4                                    _B4CON 000E60  
                                  l10898 0E20                                    l10978 57F4  
                                  l11778 4D14                                    l11954 441C  
                                  l11938 43EC            __size_of_vscp_getMajorVersion 0002  
                                  l11948 4408                                    l11958 4426  
                                  l11984 4482                                    _B5CON 000E70  
                                  l11978 446A                                    l11988 448A  
                                  l11998 14E0               __end_of_vscp_goActiveState 5828  
                          ___fltol@sign1 007A                          __end_of___aldiv 494E  
          ??_vscp_writeNicknamePermanent 0011                       writeEEPROM@address 000E  
                        __end_of___fladd 4024                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 4B58                            i1_WriteTimer0 5970  
                        __end_of___flneg 577E                                    _EEADR 000FA9  
                        __end_of___lbmod 56E6                          __end_of___flmul 464E  
                        __end_of___flsub 54C4                          __end_of___fltol 4D3A  
                _vscp_handleDropNickname 55E4                                    _BSEL0 000DF8  
                                  u10010 4AC6                                    u10040 4592  
                                  u10140 4B8E                                    u10230 4CD0  
                                  u10235 4CC6                                    u10414 14F2  
                                  u10415 14EE                                    _T0CON 000FD5  
                                  u10524 1BA2                                    u10525 1B9E  
                                  u10624 1DE4                                    u10544 1C38  
                                  u10464 1AAA                                    u10625 1DE0  
                                  u10545 1C34                                    u10465 1AA6  
                                  u10644 1E76                                    u10645 1E72  
                                  u10494 1ADC                                    u10495 1AD8  
                                  u10594 1D16                                    u10595 1D12  
                                  i1l144 02B6                                    i1l161 043E  
                                  i1l138 027C                                    i1l164 0494  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 0018  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 59C4               _vscp_readNicknamePermanent 59BA  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 007F                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001E  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 4EDA  
                           _vscp_getGUID 5902                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 42A2  
                                  _ldexp 4B58                             _vscp_getZone 599C  
                                  _frexp 4DD0                       vscp_writeAppReg@rv 0023  
              _vscp_getRegisterPagesUsed 59E2                   __size_of_vscp_getEvent 002A  
                                  main@i 00B2                               _ConvertADC 59DA  
                           _vscp_setGUID 57E8                                    tablat 000FF5  
                _vscp_getSubMinorVersion 59E8                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5734  
                      _calibration_index 004A                              exp@exponent 00A1  
                            ldexp@newexp 0085                     _ECANSetOperationMode 58C2  
                        __initialization 5408                              log@exponent 0043  
                           __end_of_main 4494                             __end_of_init 553C  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0218  
                        ?_Celsius2Kelvin 002C                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 2DF2                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 016B                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 008F  
                                 ?_ldexp 0081                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 53C0  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 4892  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 55B0                          __CFG_BBSIZ$2048 000000  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0032  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 5828  
                                 i1l9200 03F0                                   i1l9120 0234  
                                 i1l9210 043A                                   i1l9202 03FC  
                                 i1l9130 026E                                   i1l9122 023C  
                                 i1l9212 0440                                   i1l9204 0402  
                                 i1l9140 0298                                   i1l9132 0276  
                                 i1l9124 0248                                   i1l9214 044A  
                                 i1l9206 042A                                   i1l9222 0454  
                                 i1l9142 02A0                                   i1l9134 0280  
                                 i1l9126 024E                                   i1l9216 044E  
                                 i1l9208 042E                                   i1l9224 048E  
                                 i1l9144 02A4                                   i1l9136 0282  
                                 i1l9128 025E                                   i1l9160 02C2  
                                 i1l9226 0492                                   i1l9170 0304  
                                 i1l9146 02A6                                   i1l9138 028E  
                                 i1l9180 0348                                   i1l9172 030A  
                                 i1l9164 02CC                                   i1l9148 02AA  
                                 i1l9190 03AE                                   i1l9182 0370  
                                 i1l9174 0332                                   i1l9166 02F4  
                                 i1l9158 02C0                                   i1l9192 03B2  
                                 i1l9184 0374                                   i1l9176 0336  
                                 i1l9168 02F8                                   i1l9194 03BE  
                                 i1l9186 0380                                   i1l9178 0342  
                                 i1l9196 03C4                                   i1l9188 0386  
                                 i1l9198 03EC                          _init_app_eeprom 1F50  
                       __end_of___lwtofl 566A                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                           __CFG_WDTPS$128 000000  
                 ECANReceiveMessage@data 0015                   ECANReceiveMessage@mode 001C  
                 ECANReceiveMessage@temp 001D                        getVSCPFrame@pData 0028  
                      getVSCPFrame@pSize 0027                                ??_OpenADC 0010  
                     _vscp_newNodeOnline 566A                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0017   vscp_handleProtocolEvent@page_save_1165 0088  
                                 ___flge 51BA                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0025  
                                 ___wmul 553C                                ??___fldiv 0034  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0042  
                              ??___flsub 0042                                ??___fltol 0042  
                          _vscp_getEvent 5694                                   _doWork 14A8  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 0012                      vscp_writeAppReg@reg 0022  
             __end_of_vscp_setSegmentCRC 593A                      vscp_writeAppReg@val 0021  
                                 clear_0 5410                                   clear_1 5422  
                                 clear_2 542E                                   clear_3 543A  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0096  
                                 floor@i 0093                                   floor@x 008F  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00B9  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0021  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004A  
                     __size_of___asflmul 004C                               ___fladd@f1 001D  
                             ___fladd@f2 0021                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0648                         __end_oflog@coeff 066C  
                        ___lbmod@divisor 000E                               ___altofl@c 008A  
                             ___fldiv@f1 002C                               ___fldiv@f2 0030  
                             ___fldiv@f3 003B                               __accesstop 0060  
                __end_of__initialization 5440                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 504A                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 0060  
                             ___flmul@f2 0064                             eval_poly@res 007D  
                             ___flsub@f1 0076                               ___flsub@f2 007A  
                             ___fltol@f1 0076                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 57C6  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 0076  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0076              __end_of_vscp_check_pstorage 57C6  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 439E                            __end_of_ldexp 4BFC  
                          __end_of_frexp 4E56                      ?_vscp_writeRegister 0034  
                         ??_sendCANFrame 0042                               ___lwtofl@c 0018  
             __end_of_vscp_getFamilyCode 59BA                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 020E             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 59B0  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0034  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 14A8  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 26D0  
                   ??_Celsius2Fahrenheit 0042              __end_of_vscp_setControlByte 5928  
               __end_of_vscp_writeStdReg 3BFA                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 007C  
                   ??_vscp_writeRegister 0035          __end_of_vscp_handleDropNickname 5614  
                           _getVSCPFrame 4F5C                               __pbssBANK0 00B3  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00C0               __end_of_vscp_getBufferSize 59E6  
                       Celsius2Kelvin@tc 002C                    vscp_writeRegister@reg 0035  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 4BFC  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 59EA  
               ECANSetOperationMode@mode 000E                                  ?___wmul 0012  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                           doWork@setpoint 0196  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 52E6                        __end_of___asfldiv 529C  
                       WriteTimer0@timer 0010                                ?___altofl 008A  
                      __end_of___asflmul 5252                                  _ECANCON 000F77  
                      __end_of___asflsub 51BA                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 018D  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 0064  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 0018  
                    vscp_writeStdReg@idx 0030                      vscp_writeStdReg@reg 0033  
           __end_of_vscp_doOneSecondWork 516C                                  i1l12206 0466  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B4  
        __end_of_interrupt_at_low_vector 04B2                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 464E                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 4FD4               __end_of_vscp_getMatrixInfo 587A  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 0046  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 007C                       _vscp_goActiveState 580A  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 59EE  
                     __size_of_vscp_init 004A                vscp_writeStdReg@code_1145 002C  
                             _readEEPROM 593A                   _vscp_getManufacturerId 58DA  
                 _vscp_setManufacturerId 587A                          _ECANSendMessage 3BFA  
                    ?_vscp_goActiveState 0001                                  _OpenADC 50BE  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 0030                                  __Lparam 0000  
                     _vscp_node_substate 004F               __end_of_vscp_getSegmentCRC 59CE  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
               vscp_writeStdReg@idx_1146 0031        __end_of_vscp_getRegisterPagesUsed 59E4  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 4892  
                        __size_of___flge 004C                                  ___fladd 3EC4  
                                ___fldiv 4AB0                                  ___flneg 575A  
                                ___lbmod 56BE                                  ___flmul 4578  
                                ___flsub 5488                                  ___fltol 4C9C  
                        __size_of___wmul 003A                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0AA8                             __psmallconst 0600  
                             ??___altofl 0046                     __end_of_init_app_ram 5408  
                             ??___flpack 0014                       _vscp_sendHeartBeat 570E  
                                __pcinit 5408                               ??___awtofl 001C  
                         _vscp_deviceURL 0600                        __end_of_eval_poly 47D2  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 439E                                  __ptext1 14A8  
                                __ptext2 5640                                  __ptext3 5252  
                                __ptext4 529C                                  __ptext5 4892  
                                __ptext6 5330                                  __ptext7 4174  
                                __ptext8 384A                                  __ptext9 575A  
                             ??___lwtofl 001C                           _vscp_getUserID 58EE  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E4                             __size_of_log 012E  
                  vscp_writeStdReg@value 0022                         ___aldiv@dividend 007C  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 00B6                                  doWork@B 018B  
                                doWork@i 019C                                  doWork@j 0191  
                                doWork@v 0187                      __end_of_WriteTimer0 5970  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 0014  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 008C                     end_of_initialization 5440  
                                exp@sign 00A3             __end_of_vscp_handleHeartbeat 5488  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 4C9C                     __end_of_sendCANFrame 5500  
                             doWork@Rinf 0167                       doOneSecondWork@tmp 0089  
                             doWork@temp 0198                vscp_handleProtocolEvent@i 0098  
              vscp_handleProtocolEvent@j 0099                vscp_handleProtocolEvent@k 0093  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 56E6  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 0086                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 0084                           _vscp_setUserID 5892  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0620  
    __end_of_vscp_writeNicknamePermanent 595E              _vscp_writeNicknamePermanent 594C  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 494E  
                 __end_of_vscp_getUserID 5902             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 5330  
                         _vscp_probe_cnt 0051                      __end_of_getCANFrame 5640  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 0087                 __size_of_vscp_readAppReg 0722  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 0040                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 00E4                       _vscp_setSegmentCRC 5928  
                      readEEPROM@address 000E                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 0091                  __end_of_ECANSendMessage 3D60  
                      vscp_readStdReg@rv 0013                              ___lbmod@rem 0011  
                            ___flmul@exp 006F                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 3EC4                      _getCalibrationValue 5330  
                            ?_readEEPROM 000E                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 570E                               _vscp_error 59D6  
                   _vscp_doOneSecondWork 511A                       i1WriteTimer0@timer 0003  
                             _vscp_timer 011C                   __end_of_vscp_setUserID 58AA  
               __size_of_doOneSecondWork 0208                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 4AB0                           ?_sendVSCPFrame 0060  
                         __end_of___flge 5206                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 5576                          ?_vscp_getUserID 0001  
                         __end_of_doWork 1F50             __end_of_vscp_getMinorVersion 59EC  
                            _WriteTimer0 595E                     _vscp_getMajorVersion 59EC  
                     __end_of_ConvertADC 59DE                     ?_getCalibrationValue 0012  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 0097  
                      ?_vscp_writeAppReg 0021                      start_initialization 5408  
                             eval_poly@d 007A                               eval_poly@n 007B  
                             eval_poly@x 0076                               ldexp@value 0081  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 3A2E  
                            __end_of_log 42A2                       ??_vscp_writeAppReg 0022  
                          _sendTempEvent 4E56                        ?_vscp_writeStdReg 0022  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 0023  
                     _vscp_getFamilyCode 59B0                      __end_of_handle_sync 4F5C  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 59A6  
                             frexp@value 000E                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 5846  
                   Celsius2Fahrenheit@tc 0076                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 3434  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0048                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0017                        ??_vscp_getSubzone 0012  
                               ??___flge 0016                 __end_of__ECANPointBuffer 504A  
                      __CANIDToRegs@type 0014                              _getCANFrame 5614  
                               ??___wmul 0016                                 ??_doWork 00A4  
                     _vscp_getBufferSize 59E4              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 3642  
                    ??_vscp_readRegister 0015           __size_of_vscp_goBootloaderMode 0010  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 0014  
                  __end_ofi1_WriteTimer0 5982            __end_of_vscp_goBootloaderMode 5992  
                   _vscp_handleHeartbeat 544A                       __end_of_OpenTimer0 5846  
                      __size_of___altofl 0048                        __size_of___flpack 00C0  
                              ___asfladd 529C                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0012  
                              ___asfldiv 5252                              __pbssBIGRAM 019D  
                              ___asflmul 5206                                ___asflsub 516C  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 0167                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004C              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 003C  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 59E2                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0012                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5860                             _init_app_ram 53C0  
                   getCalibrationValue@i 0019                              _doWork$2270 0177  
                            _doWork$2268 016F                              _doWork$2269 0173  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0192  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0013  
                   ??_vscp_getBufferSize 000E                             _current_temp 0100  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5860  
                 _vscp_handleSetNickname 577E            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4D3A  
                               ?___aldiv 007C                                 ?___fladd 001D  
                               ?___fldiv 002C                                __ptext100 5970  
                              __ptext101 59DE                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 0060                                 ?___flsub 0076  
                               ?___fltol 0076                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 0012                              __pintcodelo 0218  
                      ??_doOneSecondWork 0087                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1155 008F               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 54C4                              __smallconst 0600  
                             ?___asfladd 002C                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0060                               ?___asflmul 0076  
                             ?___asflsub 007E                       _vscp_getSegmentCRC 59C4  
                         ??_vscp_getGUID 0012                                _eval_poly 4712  
                            _handle_sync 4EDA                           ??_vscp_getZone 0012  
         __end_of_vscp_getManufacturerId 58EE           __end_of_vscp_setManufacturerId 5892  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1154 008E  
                         __size_of_floor 00FC                           __size_of_ldexp 00A4  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 011A                     vscp_writeStdReg@code 0028  
                        ___aldiv@divisor 0080                          ___aldiv@counter 0084  
                         ___wmul@product 0016                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 59EA                                _sendTimer 004B  
                               _PIE1bits 000F9D                                _low_alarm 00B5  
                  __size_of_setEventData 00B0                   __end_of_ECANInitialize 4DD0  
                               i1u720_20 0304                                 i1u712_20 023C  
                               i1u720_21 0302                                 i1u712_21 023A  
                               i1u721_20 0342                                 i1u713_20 0276  
                               i1u721_21 0340                                 i1u713_21 0274  
                               i1u722_20 0380                                 i1u714_20 028E  
                               i1u722_21 037E                                 i1u714_21 028C  
                               i1u723_20 03BE                                 i1u715_20 0298  
                               i1u723_21 03BC                                 i1u715_21 0296  
                               i1u724_20 03FC                                 i1u716_20 02A0  
                               i1u724_21 03FA                                 i1u716_21 029E  
                               i1u725_20 043A                                 i1u717_20 02B4  
                               i1u725_21 0438                                 i1u717_21 02B2  
                               i1u726_20 044A                                 i1u718_20 02BE  
                               i1u726_21 0448                                 i1u718_21 02BC  
                               i1u719_20 02CA                                 i1u719_21 02C8  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 56BE                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 0012                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 4174  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0012  
                           __RegsToCANID 3D60                       _vscp_probe_address 0050  
                        ??_sendTempEvent 0085              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0076                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 52E6                                _vscp_imsg 00BC  
                              _vscp_hour 011E                                _vscp_omsg 00CA  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 0642  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4A00               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0112                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0010                 __size_of_init_app_eeprom 0780  
           __end_of_vscp_restoreDefaults 59D6                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 010C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 0012  
                        _vscp_getMDF_URL 58AA                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0160  
                       __size_of___fldiv 00A8                         __size_of___flneg 0024  
                       _vscp_initledfunc 004E                         __size_of___lbmod 0028  
                       __size_of___flmul 00D6                   ??_vscp_handleHeartbeat 0012  
                       __size_of___flsub 003C                         __size_of___fltol 009E  
                               ___altofl 5378                                 ___flpack 47D2  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 5576                         getCANFrame@pdata 0021  
                               ___lwtofl 5640                           sendTempEvent@i 0086  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0032  
                            ??___asfldiv 0042                              ??___asflmul 0042  
                               _exp$2274 009D                              ??___asflsub 0042  
                     __end_of_readEEPROM 594C                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4B58  
                               __ptext11 4712                                 __ptext20 4AB0  
                               __ptext12 42A2                                 __ptext21 511A  
                               __ptext13 4C9C                                 __ptext30 504A  
                               __ptext22 570E                                 __ptext14 4DD0  
                               __ptext31 3EC4                                 __ptext23 5992  
                               __ptext15 51BA                                 __ptext40 59B0  
                               __ptext32 55B0                                 __ptext24 599C  
                               __ptext16 5378                                 __ptext41 587A  
                               __ptext33 2DF2                                 __ptext25 3642  
                               __ptext17 516C                                 __ptext50 58DA  
                               __ptext42 5892                                 __ptext34 56BE  
                               __ptext26 59D6                                 __ptext18 5488  
                               __ptext51 58EE                                 __ptext43 57E8  
                               __ptext35 57C6                                 __ptext27 4EDA  
                               __ptext19 5206                                 __ptext60 59BA  
                               __ptext52 58AA                                 __ptext44 066E  
                               __ptext36 3A2E                                 __ptext28 4E56  
                               __ptext61 577E                                 __ptext53 5902  
                               __ptext45 5846                                 __ptext37 59CE  
                               __ptext29 4A00                                 __ptext70 3BFA  
                               __ptext62 544A                                 __ptext54 59E8  
                               __ptext46 4494                                 __ptext38 1F50  
                               __ptext71 4024                                 __ptext63 5982  
                               __ptext55 59EA                                 __ptext47 59E2  
                               __ptext39 59A6                                 __ptext80 5928  
                               __ptext72 5694                                 __ptext64 5860  
                               __ptext56 59EC                                 __ptext48 59E4  
                               __ptext81 59C4                                 __ptext73 4F5C  
                               __ptext65 464E                                 __ptext57 566A  
                               __ptext49 59E6                                 __ptext90 53C0  
                               __ptext82 593A                                 __ptext74 5614  
                               __ptext66 580A                                 __ptext58 55E4  
                               __ptext91 4BFC                                 __ptext83 594C  
                               __ptext75 3434                                 __ptext67 56E6  
                               __ptext59 52E6                                 __ptext92 553C  
                               __ptext84 5734                                 __ptext76 3D60  
                               __ptext68 494E                                 __ptext93 59DA  
                               __ptext85 5500                                 __ptext77 4FD4  
                               __ptext69 54C4                                 __ptext94 595E  
                               __ptext86 4D3A                                 __ptext78 57A2  
                               __ptext95 5576                                 __ptext87 58C2  
                               __ptext79 5916                                 __ptext96 4578  
                               __ptext88 50BE                                 __ptext97 47D2  
                               __ptext89 5828                                 __ptext98 26D0  
              vscp_sendHeartBeat@subzone 0044                            ?_getVSCPFrame 0024  
                       ??_vscp_sendEvent 0043                          _vscp_getSubzone 5992  
                       ??_vscp_setUserID 0012                            __size_of_main 00F6  
                          __size_of_init 003C                __size_of_vscp_writeAppReg 0E3A  
                    _vscp_check_pstorage 57A2                            init_app_ram@i 0021  
         vscp_handleProtocolEvent@i_1153 0095           vscp_handleProtocolEvent@i_1156 0097  
         vscp_handleProtocolEvent@i_1164 0092                         doOneSecondWork@i 008A  
                   __end_of_vscp_getGUID 5916                            ??_writeEEPROM 0011  
              __size_of_vscp_writeStdReg 01CC                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 59A6  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0012                     __end_of_vscp_setGUID 580A  
                     vscp_readAppReg@reg 0013                       vscp_readAppReg@pos 0012  
                           i1_ConvertADC 59DE                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0012  
                       init_app_eeprom@i 0011                      _vscp_setControlByte 5916  
                               exp@coeff 0620                    ___flmul@f3_as_product 0070  
                               log@coeff 0648              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 26D0                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2                              ??_eval_poly 0042  
           ??_vscp_readNicknamePermanent 0012                      ECANReceiveMessage@i 001B  
                        _vscp_guid_reset 004D                          _vscp_readStdReg 4494  
           vscp_handleDropNickname@bytes 0012               __end_of_vscp_newNodeOnline 5694  
                     _ECANReceiveMessage 3434                           ??_getVSCPFrame 0029  
                        _vscp_initbtncnt 00B7                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 58C2  
                   ?_vscp_setControlByte 0001                            _timeout_clock 0116  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00BA  
                           handle_sync@i 0089                          _doOneSecondWork 3642  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0011  
            __end_of_getCalibrationValue 5378                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0011                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 0011                 __size_of_writeCoeffs2Ram 00A0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 59E8  
            _vscp_getBootLoaderAlgorithm 59E6         __size_of_interrupt_at_low_vector 029A  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 575A  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 0018  
                  ??_vscp_check_pstorage 0012                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 5982               __end_of_Celsius2Fahrenheit 50BE  
           __end_of_ECANSetOperationMode 58DA                     _vscp_restoreDefaults 59CE  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 0012  
                __end_of_vscp_getSubzone 599C                             ?_handle_sync 0001  
            __size_of_vscp_getFamilyType 000A                             ___aldiv@sign 0085  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 57E8  
                     __end_of_vscp_error 59DA                   ECANSendMessage@tempPtr 0036  
                   _adc_conversion_flags 00B3           __end_of_vscp_handleSetNickname 57A2  
     vscp_handleProtocolEvent@bytes_1161 0094                    ??_vscp_setControlByte 0011  
                   vscp_readRegister@reg 0015                             ___fladd@exp1 002B  
                           ___fladd@exp2 002A                             ___fladd@sign 0029  
                           __CANIDToRegs 4024                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 002C  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 002E  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 0062  

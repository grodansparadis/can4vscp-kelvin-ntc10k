

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Feb 18 22:33:19 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000600                     __psmallconst:
   122                           	opt stack 0
   123  000600                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000600  77                 	db	119
   126  000601  77                 	db	119
   127  000602  77                 	db	119
   128  000603  2E                 	db	46
   129  000604  65                 	db	101
   130  000605  75                 	db	117
   131  000606  72                 	db	114
   132  000607  6F                 	db	111
   133  000608  73                 	db	115
   134  000609  6F                 	db	111
   135  00060A  75                 	db	117
   136  00060B  72                 	db	114
   137  00060C  63                 	db	99
   138  00060D  65                 	db	101
   139  00060E  2E                 	db	46
   140  00060F  73                 	db	115
   141  000610  65                 	db	101
   142  000611  2F                 	db	47
   143  000612  6E                 	db	110
   144  000613  74                 	db	116
   145  000614  63                 	db	99
   146  000615  31                 	db	49
   147  000616  30                 	db	48
   148  000617  4B                 	db	75
   149  000618  41                 	db	65
   150  000619  5F                 	db	95
   151  00061A  33                 	db	51
   152  00061B  2E                 	db	46
   153  00061C  78                 	db	120
   154  00061D  6D                 	db	109
   155  00061E  6C                 	db	108
   156  00061F  00                 	db	0
   157  000620                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000620                     exp@coeff:
   160                           	opt stack 0
   161  000620  0000               	dw	0
   162  000622  3F80               	dw	16256
   163  000624  7218               	dw	29208
   164  000626  3F31               	dw	16177
   165  000628  FDF0               	dw	65008
   166  00062A  3E75               	dw	15989
   167  00062C  5847               	dw	22599
   168  00062E  3D63               	dw	15715
   169  000630  9558               	dw	38232
   170  000632  3C1D               	dw	15389
   171  000634  C482               	dw	50306
   172  000636  3AAE               	dw	15022
   173  000638  78A8               	dw	30888
   174  00063A  3921               	dw	14625
   175  00063C  93EF               	dw	37871
   176  00063E  3780               	dw	14208
   177  000640  92A0               	dw	37536
   178  000642  35A7               	dw	13735
   179  000644  5646               	dw	22086
   180  000646  3415               	dw	13333
   181  000648                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000648                     log@coeff:
   184                           	opt stack 0
   185  000648  0000               	dw	0
   186  00064A  0000               	dw	0
   187  00064C  FFC4               	dw	65476
   188  00064E  3F7F               	dw	16255
   189  000650  EF80               	dw	61312
   190  000652  BEFF               	dw	48895
   191  000654  E190               	dw	57744
   192  000656  3EA9               	dw	16041
   193  000658  82EC               	dw	33516
   194  00065A  BE76               	dw	48758
   195  00065C  AD82               	dw	44418
   196  00065E  3E2B               	dw	15915
   197  000660  3C0E               	dw	15374
   198  000662  BDC3               	dw	48579
   199  000664  D187               	dw	53639
   200  000666  3D13               	dw	15635
   201  000668  7841               	dw	30785
   202  00066A  BBD3               	dw	48083
   203  00066C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  00066C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  0052CE                     __pcinit:
   305                           	opt stack 0
   306  0052CE                     start_initialization:
   307                           	opt stack 0
   308  0052CE                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  0052CE  EE01  F09C         	lfsr	0,__pbssBIGRAM
   313  0052D2  EE13 F0C0          	lfsr	1,960
   314  0052D6                     clear_0:
   315  0052D6  6AEE               	clrf	postinc0,c
   316  0052D8  50E5               	movf	postdec1,w,c
   317  0052DA  50E1               	movf	fsr1l,w,c
   318  0052DC  E1FC               	bnz	clear_0
   319  0052DE  50E2               	movf	fsr1h,w,c
   320  0052E0  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (102 bytes)
   323  0052E2  EE01  F000         	lfsr	0,__pbssBANK1
   324  0052E6  0E66               	movlw	102
   325  0052E8                     clear_1:
   326  0052E8  6AEE               	clrf	postinc0,c
   327  0052EA  06E8               	decf	wreg,f,c
   328  0052EC  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (36 bytes)
   331  0052EE  EE00  F0B3         	lfsr	0,__pbssBANK0
   332  0052F2  0E24               	movlw	36
   333  0052F4                     clear_2:
   334  0052F4  6AEE               	clrf	postinc0,c
   335  0052F6  06E8               	decf	wreg,f,c
   336  0052F8  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  0052FA  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  0052FE  0E0D               	movlw	13
   341  005300                     clear_3:
   342  005300  6AEE               	clrf	postinc0,c
   343  005302  06E8               	decf	wreg,f,c
   344  005304  E1FD               	bnz	clear_3
   345  005306                     end_of_initialization:
   346                           	opt stack 0
   347  005306                     __end_of__initialization:
   348                           	opt stack 0
   349  005306  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  005308  6EF8               	movwf	tblptru,c
   351  00530A  0100               	movlb	0
   352  00530C  EF37  F021         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _sendTimer:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_alarmstatus:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_guid_reset:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_initledfunc:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000B3                     __pbssBANK0:
   408                           	opt stack 0
   409  0000B3                     _adc_conversion_flags:
   410                           	opt stack 0
   411  0000B3                     	ds	1
   412  0000B4                     _high_alarm:
   413                           	opt stack 0
   414  0000B4                     	ds	1
   415  0000B5                     _low_alarm:
   416                           	opt stack 0
   417  0000B5                     	ds	1
   418  0000B6                     _seconds:
   419                           	opt stack 0
   420  0000B6                     	ds	1
   421  0000B7                     _vscp_hour:
   422                           	opt stack 0
   423  0000B7                     	ds	1
   424  0000B8                     _vscp_initbtncnt:
   425                           	opt stack 0
   426  0000B8                     	ds	1
   427  0000B9                     _vscp_minute:
   428                           	opt stack 0
   429  0000B9                     	ds	1
   430  0000BA                     _vscp_nickname:
   431                           	opt stack 0
   432  0000BA                     	ds	1
   433  0000BB                     _vscp_node_state:
   434                           	opt stack 0
   435  0000BB                     	ds	1
   436  0000BC                     _vscp_imsg:
   437                           	opt stack 0
   438  0000BC                     	ds	14
   439  0000CA                     _vscp_omsg:
   440                           	opt stack 0
   441  0000CA                     	ds	13
   442                           tblptru	equ	0xFF8
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1h	equ	0xFE2
   447                           fsr1l	equ	0xFE1
   448                           
   449                           	psect	bssBANK1
   450  000100                     __pbssBANK1:
   451                           	opt stack 0
   452  000100                     _current_temp:
   453                           	opt stack 0
   454  000100                     	ds	12
   455  00010C                     _seconds_temp:
   456                           	opt stack 0
   457  00010C                     	ds	6
   458  000112                     _measurement_clock:
   459                           	opt stack 0
   460  000112                     	ds	4
   461  000116                     _timeout_clock:
   462                           	opt stack 0
   463  000116                     	ds	4
   464  00011A                     _vscp_configtimer:
   465                           	opt stack 0
   466  00011A                     	ds	2
   467  00011C                     _vscp_timer:
   468                           	opt stack 0
   469  00011C                     	ds	2
   470  00011E                     _sh_coefficients:
   471                           	opt stack 0
   472  00011E                     	ds	72
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  00019C                     __pbssBIGRAM:
   482                           	opt stack 0
   483  00019C                     _adc:
   484                           	opt stack 0
   485  00019C                     	ds	960
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK1
   494  000166                     __pcstackBANK1:
   495                           	opt stack 0
   496  000166                     doWork@Rinf:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x0
   500  000166                     	ds	4
   501  00016A                     doWork@calVoltage:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  00016A                     	ds	4
   506  00016E                     _doWork$2268:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x8
   510  00016E                     	ds	4
   511  000172                     _doWork$2269:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xC
   515  000172                     	ds	4
   516  000176                     _doWork$2270:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x10
   520  000176                     	ds	16
   521  000186                     doWork@v:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x20
   525  000186                     	ds	4
   526  00018A                     doWork@B:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x24
   530  00018A                     	ds	2
   531  00018C                     doWork@resistance:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x26
   535  00018C                     	ds	4
   536  000190                     doWork@j:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x2A
   540  000190                     	ds	1
   541  000191                     doWork@avarage:
   542                           	opt stack 0
   543                           
   544                           ; 4 bytes @ 0x2B
   545  000191                     	ds	4
   546  000195                     doWork@setpoint:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x2F
   550  000195                     	ds	2
   551  000197                     doWork@temp:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x31
   555  000197                     	ds	4
   556  00019B                     doWork@i:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x35
   560  00019B                     	ds	1
   561                           tblptru	equ	0xFF8
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1h	equ	0xFE2
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	cstackBANK0
   569  000060                     __pcstackBANK0:
   570                           	opt stack 0
   571  000060                     ?_sendVSCPFrame:
   572                           	opt stack 0
   573  000060                     ?___flmul:
   574                           	opt stack 0
   575  000060                     ?___asfldiv:
   576                           	opt stack 0
   577  000060                     sendVSCPFrame@vscpclass:
   578                           	opt stack 0
   579  000060                     ___asfldiv@f1p:
   580                           	opt stack 0
   581  000060                     ___flmul@f1:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x0
   585  000060                     	ds	2
   586  000062                     sendVSCPFrame@vscptype:
   587                           	opt stack 0
   588  000062                     ___asfldiv@f2:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0x2
   592  000062                     	ds	1
   593  000063                     sendVSCPFrame@nodeid:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x3
   597  000063                     	ds	1
   598  000064                     sendVSCPFrame@priority:
   599                           	opt stack 0
   600  000064                     ___flmul@f2:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x4
   604  000064                     	ds	1
   605  000065                     sendVSCPFrame@size:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x5
   609  000065                     	ds	1
   610  000066                     sendVSCPFrame@pData:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x6
   614  000066                     	ds	1
   615  000067                     ??_sendVSCPFrame:
   616                           
   617                           ; 0 bytes @ 0x7
   618  000067                     	ds	8
   619  00006F                     ___flmul@exp:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0xF
   623  00006F                     	ds	1
   624  000070                     ___flmul@f3_as_product:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x10
   628  000070                     	ds	4
   629  000074                     ___flmul@cntr:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x14
   633  000074                     	ds	1
   634  000075                     ___flmul@sign:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x15
   638  000075                     	ds	1
   639  000076                     ?_Celsius2Fahrenheit:
   640                           	opt stack 0
   641  000076                     ?___flsub:
   642                           	opt stack 0
   643  000076                     ?_eval_poly:
   644                           	opt stack 0
   645  000076                     ?___asflmul:
   646                           	opt stack 0
   647  000076                     ?___fltol:
   648                           	opt stack 0
   649  000076                     Celsius2Fahrenheit@tc:
   650                           	opt stack 0
   651  000076                     ___asflmul@multiplicand:
   652                           	opt stack 0
   653  000076                     ___flsub@f1:
   654                           	opt stack 0
   655  000076                     ___fltol@f1:
   656                           	opt stack 0
   657  000076                     eval_poly@x:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x16
   661  000076                     	ds	4
   662  00007A                     ___fltol@sign1:
   663                           	opt stack 0
   664  00007A                     eval_poly@d:
   665                           	opt stack 0
   666  00007A                     ___flsub@f2:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x1A
   670  00007A                     	ds	1
   671  00007B                     ___fltol@exp1:
   672                           	opt stack 0
   673  00007B                     eval_poly@n:
   674                           	opt stack 0
   675  00007B                     sendVSCPFrame@id:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x1B
   679  00007B                     	ds	1
   680  00007C                     ?_setEventData:
   681                           	opt stack 0
   682  00007C                     ?___aldiv:
   683                           	opt stack 0
   684  00007C                     setEventData@v:
   685                           	opt stack 0
   686  00007C                     ___aldiv@dividend:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0x1C
   690  00007C                     	ds	1
   691  00007D                     eval_poly@res:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x1D
   695  00007D                     	ds	1
   696  00007E                     ?___asflsub:
   697                           	opt stack 0
   698  00007E                     setEventData@unit:
   699                           	opt stack 0
   700  00007E                     ___asflsub@f1p:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x1E
   704  00007E                     	ds	1
   705  00007F                     ??_vscp_handleProtocolEvent:
   706  00007F                     ??_vscp_doOneSecondWork:
   707  00007F                     setEventData@newval:
   708                           	opt stack 0
   709                           
   710                           ; 4 bytes @ 0x1F
   711  00007F                     	ds	1
   712  000080                     ___aldiv@divisor:
   713                           	opt stack 0
   714  000080                     ___asflsub@f2:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x20
   718  000080                     	ds	1
   719  000081                     ?_log:
   720                           	opt stack 0
   721  000081                     ?_ldexp:
   722                           	opt stack 0
   723  000081                     ldexp@value:
   724                           	opt stack 0
   725  000081                     log@x:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x21
   729  000081                     	ds	2
   730  000083                     setEventData@ival:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x23
   734  000083                     	ds	1
   735  000084                     ___aldiv@counter:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x24
   739  000084                     	ds	1
   740  000085                     ??_sendTempEvent:
   741  000085                     ___aldiv@sign:
   742                           	opt stack 0
   743  000085                     ldexp@newexp:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x25
   747  000085                     	ds	1
   748  000086                     sendTempEvent@i:
   749                           	opt stack 0
   750  000086                     vscp_handleProtocolEvent@page_save:
   751                           	opt stack 0
   752  000086                     ___aldiv@quotient:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x26
   756  000086                     	ds	1
   757  000087                     ??_handle_sync:
   758  000087                     ??_doOneSecondWork:
   759                           
   760                           ; 0 bytes @ 0x27
   761  000087                     	ds	1
   762  000088                     vscp_handleProtocolEvent@page_save_1165:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x28
   766  000088                     	ds	1
   767  000089                     doOneSecondWork@tmp:
   768                           	opt stack 0
   769  000089                     handle_sync@i:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x29
   773  000089                     	ds	1
   774  00008A                     ?___altofl:
   775                           	opt stack 0
   776  00008A                     doOneSecondWork@i:
   777                           	opt stack 0
   778  00008A                     vscp_handleProtocolEvent@offset:
   779                           	opt stack 0
   780  00008A                     ___altofl@c:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x2A
   784  00008A                     	ds	1
   785  00008B                     vscp_handleProtocolEvent@pos:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x2B
   789  00008B                     	ds	1
   790  00008C                     vscp_handleProtocolEvent@bytes:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x2C
   794  00008C                     	ds	1
   795  00008D                     vscp_handleProtocolEvent@len:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x2D
   799  00008D                     	ds	1
   800  00008E                     vscp_handleProtocolEvent@pos_1154:
   801                           	opt stack 0
   802  00008E                     ___altofl@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x2E
   806  00008E                     	ds	1
   807  00008F                     ?_floor:
   808                           	opt stack 0
   809  00008F                     vscp_handleProtocolEvent@len_1155:
   810                           	opt stack 0
   811  00008F                     floor@x:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x2F
   815  00008F                     	ds	1
   816  000090                     vscp_handleProtocolEvent@bytes_this_time:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x30
   820  000090                     	ds	1
   821  000091                     vscp_handleProtocolEvent@cb:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x31
   825  000091                     	ds	1
   826  000092                     vscp_handleProtocolEvent@i_1164:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x32
   830  000092                     	ds	1
   831  000093                     vscp_handleProtocolEvent@k:
   832                           	opt stack 0
   833  000093                     floor@i:
   834                           	opt stack 0
   835                           
   836                           ; 4 bytes @ 0x33
   837  000093                     	ds	1
   838  000094                     vscp_handleProtocolEvent@bytes_1161:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x34
   842  000094                     	ds	1
   843  000095                     vscp_handleProtocolEvent@i_1153:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x35
   847  000095                     	ds	1
   848  000096                     vscp_handleProtocolEvent@byte:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x36
   852  000096                     	ds	1
   853  000097                     vscp_handleProtocolEvent@i_1156:
   854                           	opt stack 0
   855  000097                     floor@expon:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x37
   859  000097                     	ds	1
   860  000098                     vscp_handleProtocolEvent@i:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x38
   864  000098                     	ds	1
   865  000099                     ?_exp:
   866                           	opt stack 0
   867  000099                     vscp_handleProtocolEvent@j:
   868                           	opt stack 0
   869  000099                     exp@x:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x39
   873  000099                     	ds	4
   874  00009D                     _exp$2274:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x3D
   878  00009D                     	ds	4
   879  0000A1                     exp@exponent:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x41
   883  0000A1                     	ds	2
   884  0000A3                     exp@sign:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x43
   888  0000A3                     	ds	1
   889  0000A4                     ??_doWork:
   890                           
   891                           ; 0 bytes @ 0x44
   892  0000A4                     	ds	14
   893  0000B2                     main@i:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x52
   897  0000B2                     	ds	1
   898                           tblptru	equ	0xFF8
   899                           postinc0	equ	0xFEE
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           fsr1h	equ	0xFE2
   903                           fsr1l	equ	0xFE1
   904                           
   905                           	psect	cstackCOMRAM
   906  000001                     __pcstackCOMRAM:
   907                           	opt stack 0
   908  000001                     ?i1_WriteTimer0:
   909                           	opt stack 0
   910  000001                     i1WriteTimer0@timer0:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x0
   914  000001                     	ds	2
   915  000003                     i1WriteTimer0@timer:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x2
   919  000003                     	ds	2
   920  000005                     ??_interrupt_at_low_vector:
   921                           
   922                           ; 0 bytes @ 0x4
   923  000005                     	ds	9
   924  00000E                     ?_WriteTimer0:
   925                           	opt stack 0
   926  00000E                     ?_writeEEPROM:
   927                           	opt stack 0
   928  00000E                     ?_OpenADC:
   929                           	opt stack 0
   930  00000E                     ?__CANIDToRegs:
   931                           	opt stack 0
   932  00000E                     ?__RegsToCANID:
   933                           	opt stack 0
   934  00000E                     ??_vscp_getMDF_URL:
   935  00000E                     ?___flge:
   936                           	opt stack 0
   937  00000E                     ?_readEEPROM:
   938                           	opt stack 0
   939  00000E                     ?___lbmod:
   940                           	opt stack 0
   941  00000E                     ?__ECANPointBuffer:
   942                           	opt stack 0
   943  00000E                     ?___flpack:
   944                           	opt stack 0
   945  00000E                     ?_frexp:
   946                           	opt stack 0
   947  00000E                     ?_vscp_getFamilyCode:
   948                           	opt stack 0
   949  00000E                     ?_vscp_getFamilyType:
   950                           	opt stack 0
   951  00000E                     ?___flneg:
   952                           	opt stack 0
   953  00000E                     vscp_getMatrixInfo@pData:
   954                           	opt stack 0
   955  00000E                     ECANSetOperationMode@mode:
   956                           	opt stack 0
   957  00000E                     OpenADC@config2:
   958                           	opt stack 0
   959  00000E                     OpenTimer0@config:
   960                           	opt stack 0
   961  00000E                     ___lbmod@divisor:
   962                           	opt stack 0
   963  00000E                     __CANIDToRegs@ptr:
   964                           	opt stack 0
   965  00000E                     __RegsToCANID@ptr:
   966                           	opt stack 0
   967  00000E                     writeEEPROM@address:
   968                           	opt stack 0
   969  00000E                     readEEPROM@address:
   970                           	opt stack 0
   971  00000E                     WriteTimer0@timer0:
   972                           	opt stack 0
   973  00000E                     ___flpack@arg:
   974                           	opt stack 0
   975  00000E                     ___flge@ff1:
   976                           	opt stack 0
   977  00000E                     ___flneg@f1:
   978                           	opt stack 0
   979  00000E                     frexp@value:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0xD
   983  00000E                     	ds	1
   984  00000F                     vscp_getMDF_URL@idx:
   985                           	opt stack 0
   986  00000F                     vscp_getMatrixInfo@i:
   987                           	opt stack 0
   988  00000F                     OpenADC@portconfig:
   989                           	opt stack 0
   990  00000F                     ___lbmod@dividend:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0xE
   994  00000F                     	ds	1
   995  000010                     ??_OpenADC:
   996  000010                     __RegsToCANID@val:
   997                           	opt stack 0
   998  000010                     writeEEPROM@data:
   999                           	opt stack 0
  1000  000010                     ___lbmod@counter:
  1001                           	opt stack 0
  1002  000010                     WriteTimer0@timer:
  1003                           	opt stack 0
  1004  000010                     __CANIDToRegs@val:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0xF
  1008  000010                     	ds	1
  1009  000011                     ?_vscp_setGUID:
  1010                           	opt stack 0
  1011  000011                     ?_vscp_setUserID:
  1012                           	opt stack 0
  1013  000011                     ?_vscp_setManufacturerId:
  1014                           	opt stack 0
  1015  000011                     init_app_eeprom@i:
  1016                           	opt stack 0
  1017  000011                     vscp_setGUID@data:
  1018                           	opt stack 0
  1019  000011                     vscp_setUserID@data:
  1020                           	opt stack 0
  1021  000011                     vscp_setManufacturerId@data:
  1022                           	opt stack 0
  1023  000011                     vscp_writeNicknamePermanent@nickname:
  1024                           	opt stack 0
  1025  000011                     vscp_setSegmentCRC@crc:
  1026                           	opt stack 0
  1027  000011                     vscp_setControlByte@ctrl:
  1028                           	opt stack 0
  1029  000011                     __RegsToCANID@type:
  1030                           	opt stack 0
  1031  000011                     __ECANPointBuffer@b:
  1032                           	opt stack 0
  1033  000011                     readEEPROM@data:
  1034                           	opt stack 0
  1035  000011                     ___lbmod@rem:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x10
  1039  000011                     	ds	1
  1040  000012                     ??__RegsToCANID:
  1041  000012                     ?_getCalibrationValue:
  1042                           	opt stack 0
  1043  000012                     ?___wmul:
  1044                           	opt stack 0
  1045  000012                     vscp_readAppReg@pos:
  1046                           	opt stack 0
  1047  000012                     vscp_getGUID@idx:
  1048                           	opt stack 0
  1049  000012                     vscp_setGUID@idx:
  1050                           	opt stack 0
  1051  000012                     vscp_getUserID@idx:
  1052                           	opt stack 0
  1053  000012                     vscp_setUserID@idx:
  1054                           	opt stack 0
  1055  000012                     vscp_getManufacturerId@idx:
  1056                           	opt stack 0
  1057  000012                     vscp_setManufacturerId@idx:
  1058                           	opt stack 0
  1059  000012                     vscp_handleDropNickname@bytes:
  1060                           	opt stack 0
  1061  000012                     OpenADC@config:
  1062                           	opt stack 0
  1063  000012                     ___flpack@exp:
  1064                           	opt stack 0
  1065  000012                     __ECANPointBuffer@pt:
  1066                           	opt stack 0
  1067  000012                     frexp@eptr:
  1068                           	opt stack 0
  1069  000012                     ___wmul@multiplier:
  1070                           	opt stack 0
  1071  000012                     ___flge@ff2:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x11
  1075  000012                     	ds	1
  1076  000013                     vscp_readAppReg@reg:
  1077                           	opt stack 0
  1078  000013                     vscp_readStdReg@rv:
  1079                           	opt stack 0
  1080  000013                     ___flpack@sign:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x12
  1084  000013                     	ds	1
  1085  000014                     ??_getCalibrationValue:
  1086  000014                     ??___flpack:
  1087  000014                     ??_frexp:
  1088  000014                     vscp_readAppReg@rv:
  1089                           	opt stack 0
  1090  000014                     __CANIDToRegs@type:
  1091                           	opt stack 0
  1092  000014                     __RegsToCANID@Value:
  1093                           	opt stack 0
  1094  000014                     vscp_readStdReg@reg:
  1095                           	opt stack 0
  1096  000014                     ___wmul@multiplicand:
  1097                           	opt stack 0
  1098                           
  1099                           ; 2 bytes @ 0x13
  1100  000014                     	ds	1
  1101  000015                     ??__CANIDToRegs:
  1102  000015                     ?_ECANReceiveMessage:
  1103                           	opt stack 0
  1104  000015                     ECANReceiveMessage@data:
  1105                           	opt stack 0
  1106  000015                     vscp_readRegister@reg:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x14
  1110  000015                     	ds	1
  1111  000016                     ECANReceiveMessage@dataLen:
  1112                           	opt stack 0
  1113  000016                     ___wmul@product:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x15
  1117  000016                     	ds	1
  1118  000017                     ECANReceiveMessage@msgFlags:
  1119                           	opt stack 0
  1120  000017                     __CANIDToRegs@Value:
  1121                           	opt stack 0
  1122  000017                     getCalibrationValue@cal:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x16
  1126  000017                     	ds	1
  1127  000018                     ??_writeCoeffs2Ram:
  1128  000018                     ?_ECANSendMessage:
  1129                           	opt stack 0
  1130  000018                     ?___awtofl:
  1131                           	opt stack 0
  1132  000018                     ?___lwtofl:
  1133                           	opt stack 0
  1134  000018                     ECANReceiveMessage@savedPtr:
  1135                           	opt stack 0
  1136  000018                     ___awtofl@c:
  1137                           	opt stack 0
  1138  000018                     ___lwtofl@c:
  1139                           	opt stack 0
  1140  000018                     ECANSendMessage@id:
  1141                           	opt stack 0
  1142                           
  1143                           ; 4 bytes @ 0x17
  1144  000018                     	ds	1
  1145  000019                     getCalibrationValue@i:
  1146                           	opt stack 0
  1147                           
  1148                           ; 1 bytes @ 0x18
  1149  000019                     	ds	1
  1150  00001A                     ECANReceiveMessage@id:
  1151                           	opt stack 0
  1152  00001A                     writeCoeffs2Ram@c:
  1153                           	opt stack 0
  1154                           
  1155                           ; 3 bytes @ 0x19
  1156  00001A                     	ds	1
  1157  00001B                     ECANReceiveMessage@i:
  1158                           	opt stack 0
  1159                           
  1160                           ; 1 bytes @ 0x1A
  1161  00001B                     	ds	1
  1162  00001C                     ECANSendMessage@data:
  1163                           	opt stack 0
  1164  00001C                     ECANReceiveMessage@mode:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x1B
  1168  00001C                     	ds	1
  1169  00001D                     ?___fladd:
  1170                           	opt stack 0
  1171  00001D                     ECANSendMessage@dataLen:
  1172                           	opt stack 0
  1173  00001D                     ECANReceiveMessage@temp:
  1174                           	opt stack 0
  1175  00001D                     writeCoeffs2Ram@i:
  1176                           	opt stack 0
  1177  00001D                     ___fladd@f1:
  1178                           	opt stack 0
  1179                           
  1180                           ; 4 bytes @ 0x1C
  1181  00001D                     	ds	1
  1182  00001E                     ECANSendMessage@msgFlags:
  1183                           	opt stack 0
  1184  00001E                     ___awtofl@sign:
  1185                           	opt stack 0
  1186  00001E                     ECANReceiveMessage@ptr:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1D
  1190  00001E                     	ds	1
  1191  00001F                     ??_ECANSendMessage:
  1192  00001F                     writeCoeffs2Ram@j:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x1E
  1196  00001F                     	ds	1
  1197  000020                     ?_getCANFrame:
  1198                           	opt stack 0
  1199  000020                     getCANFrame@pdlc:
  1200                           	opt stack 0
  1201  000020                     ECANSendMessage@pb:
  1202                           	opt stack 0
  1203                           
  1204                           ; 18 bytes @ 0x1F
  1205  000020                     	ds	1
  1206  000021                     ?_vscp_writeAppReg:
  1207                           	opt stack 0
  1208  000021                     init_app_ram@i:
  1209                           	opt stack 0
  1210  000021                     vscp_writeAppReg@val:
  1211                           	opt stack 0
  1212  000021                     getCANFrame@pdata:
  1213                           	opt stack 0
  1214  000021                     ___fladd@f2:
  1215                           	opt stack 0
  1216                           
  1217                           ; 4 bytes @ 0x20
  1218  000021                     	ds	1
  1219  000022                     ?_vscp_writeStdReg:
  1220                           	opt stack 0
  1221  000022                     vscp_writeAppReg@pos:
  1222                           	opt stack 0
  1223  000022                     getCANFrame@pid:
  1224                           	opt stack 0
  1225  000022                     vscp_writeStdReg@value:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x21
  1229  000022                     	ds	1
  1230  000023                     ??_vscp_writeStdReg:
  1231  000023                     vscp_writeAppReg@reg:
  1232                           	opt stack 0
  1233  000023                     getCANFrame@flags:
  1234                           	opt stack 0
  1235                           
  1236                           ; 1 bytes @ 0x22
  1237  000023                     	ds	1
  1238  000024                     ?_getVSCPFrame:
  1239                           	opt stack 0
  1240  000024                     vscp_writeAppReg@rv:
  1241                           	opt stack 0
  1242  000024                     getVSCPFrame@pvscptype:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x23
  1246  000024                     	ds	1
  1247  000025                     ??___fladd:
  1248  000025                     getVSCPFrame@pNodeId:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x24
  1252  000025                     	ds	1
  1253  000026                     getVSCPFrame@pPriority:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x25
  1257  000026                     	ds	1
  1258  000027                     getVSCPFrame@pSize:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0x26
  1262  000027                     	ds	1
  1263  000028                     getVSCPFrame@pData:
  1264                           	opt stack 0
  1265  000028                     vscp_writeStdReg@code:
  1266                           	opt stack 0
  1267                           
  1268                           ; 4 bytes @ 0x27
  1269  000028                     	ds	1
  1270  000029                     ??_getVSCPFrame:
  1271  000029                     ___fladd@sign:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x28
  1275  000029                     	ds	1
  1276  00002A                     ___fladd@exp2:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0x29
  1280  00002A                     	ds	1
  1281  00002B                     ___fladd@exp1:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x2A
  1285  00002B                     	ds	1
  1286  00002C                     ?_Celsius2Kelvin:
  1287                           	opt stack 0
  1288  00002C                     ?___fldiv:
  1289                           	opt stack 0
  1290  00002C                     ?___asfladd:
  1291                           	opt stack 0
  1292  00002C                     ___asfladd@f1p:
  1293                           	opt stack 0
  1294  00002C                     Celsius2Kelvin@tc:
  1295                           	opt stack 0
  1296  00002C                     vscp_writeStdReg@code_1145:
  1297                           	opt stack 0
  1298  00002C                     ___fldiv@f1:
  1299                           	opt stack 0
  1300                           
  1301                           ; 4 bytes @ 0x2B
  1302  00002C                     	ds	1
  1303  00002D                     getVSCPFrame@pvscpclass:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x2C
  1307  00002D                     	ds	1
  1308  00002E                     getVSCPFrame@id:
  1309                           	opt stack 0
  1310  00002E                     ___asfladd@f2:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x2D
  1314  00002E                     	ds	2
  1315  000030                     vscp_writeStdReg@idx:
  1316                           	opt stack 0
  1317  000030                     ___fldiv@f2:
  1318                           	opt stack 0
  1319                           
  1320                           ; 4 bytes @ 0x2F
  1321  000030                     	ds	1
  1322  000031                     vscp_writeStdReg@idx_1146:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x30
  1326  000031                     	ds	1
  1327  000032                     ECANSendMessage@mode:
  1328                           	opt stack 0
  1329  000032                     vscp_writeStdReg@rv:
  1330                           	opt stack 0
  1331  000032                     vscp_getEvent@rv:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x31
  1335  000032                     	ds	1
  1336  000033                     ECANSendMessage@buffers:
  1337                           	opt stack 0
  1338  000033                     vscp_writeStdReg@reg:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x32
  1342  000033                     	ds	1
  1343  000034                     ?_vscp_writeRegister:
  1344                           	opt stack 0
  1345  000034                     ECANSendMessage@j:
  1346                           	opt stack 0
  1347  000034                     vscp_writeRegister@value:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x33
  1351  000034                     	ds	1
  1352  000035                     ECANSendMessage@tempBSEL0:
  1353                           	opt stack 0
  1354  000035                     vscp_writeRegister@reg:
  1355                           	opt stack 0
  1356                           
  1357                           ; 1 bytes @ 0x34
  1358  000035                     	ds	1
  1359  000036                     ECANSendMessage@tempPtr:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x35
  1363  000036                     	ds	2
  1364  000038                     ECANSendMessage@temp:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x37
  1368  000038                     	ds	1
  1369  000039                     ECANSendMessage@i:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x38
  1373  000039                     	ds	1
  1374  00003A                     ECANSendMessage@ptr:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x39
  1378  00003A                     	ds	1
  1379  00003B                     ___fldiv@f3:
  1380                           	opt stack 0
  1381                           
  1382                           ; 4 bytes @ 0x3A
  1383  00003B                     	ds	1
  1384  00003C                     ?_sendCANFrame:
  1385                           	opt stack 0
  1386  00003C                     sendCANFrame@id:
  1387                           	opt stack 0
  1388                           
  1389                           ; 4 bytes @ 0x3B
  1390  00003C                     	ds	3
  1391  00003F                     ___fldiv@cntr:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0x3E
  1395  00003F                     	ds	1
  1396  000040                     sendCANFrame@dlc:
  1397                           	opt stack 0
  1398  000040                     ___fldiv@exp:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x3F
  1402  000040                     	ds	1
  1403  000041                     sendCANFrame@pdata:
  1404                           	opt stack 0
  1405  000041                     ___fldiv@sign:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x40
  1409  000041                     	ds	1
  1410  000042                     ??_eval_poly:
  1411  000042                     ??___fltol:
  1412  000042                     sendCANFrame@rv:
  1413                           	opt stack 0
  1414  000042                     ___asflmul@mp:
  1415                           	opt stack 0
  1416                           
  1417                           ; 1 bytes @ 0x41
  1418  000042                     	ds	1
  1419  000043                     ??_ldexp:
  1420  000043                     vscp_sendEvent@rv:
  1421                           	opt stack 0
  1422  000043                     log@exponent:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x42
  1426  000043                     	ds	1
  1427  000044                     ?_vscp_sendHeartBeat:
  1428                           	opt stack 0
  1429  000044                     ??_vscp_newNodeOnline:
  1430  000044                     vscp_sendHeartBeat@subzone:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x43
  1434  000044                     	ds	1
  1435  000045                     vscp_sendHeartBeat@zone:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x44
  1439  000045                     	ds	1
  1440  000046                     tblptru	equ	0xFF8
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1h	equ	0xFE2
  1445                           fsr1l	equ	0xFE1
  1446                           
  1447                           ; 0 bytes @ 0x45
  1448 ;;
  1449 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1450 ;;
  1451 ;; *************** function _main *****************
  1452 ;; Defined at:
  1453 ;;		line 296 in file "../main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  i               1   82[BANK0 ] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : E/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1467 ;;      Params:         0       0       0       0       0       0       0
  1468 ;;      Locals:         0       1       0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0       0       0
  1470 ;;      Totals:         0       1       0       0       0       0       0
  1471 ;;Total ram usage:        1 bytes
  1472 ;; Hardware stack levels required when called:    9
  1473 ;; This function calls:
  1474 ;;		_init
  1475 ;;		_vscp_check_pstorage
  1476 ;;		_init_app_eeprom
  1477 ;;		_vscp_init
  1478 ;;		_writeEEPROM
  1479 ;;		_vscp_getEvent
  1480 ;;		_vscp_goActiveState
  1481 ;;		_vscp_handleProbeState
  1482 ;;		_vscp_handleProtocolEvent
  1483 ;;		_handle_sync
  1484 ;;		_vscp_error
  1485 ;;		_doOneSecondWork
  1486 ;;		_vscp_doOneSecondWork
  1487 ;;		_doWork
  1488 ;; This function is called by:
  1489 ;;		Startup code after reset
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text0
  1494  00426E                     __ptext0:
  1495                           	opt stack 0
  1496  00426E                     _main:
  1497                           	opt stack 22
  1498                           
  1499                           ;main.c: 297: unsigned char i;
  1500                           ;main.c: 299: init();
  1501                           
  1502                           ;incstack = 0
  1503                           ;incstack = 0
  1504  00426E  ECE3  F029         	call	_init	;wreg free
  1505                           
  1506                           ;main.c: 303: if (!vscp_check_pstorage()) {
  1507  004272  EC34  F02B         	call	_vscp_check_pstorage	;wreg free
  1508  004276  0900               	iorlw	0
  1509  004278  B4D8               	btfsc	status,2,c
  1510                           
  1511                           ;main.c: 306: init_app_eeprom();
  1512  00427A  EC0C  F00F         	call	_init_app_eeprom	;wreg free
  1513                           
  1514                           ;main.c: 308: }
  1515                           ;main.c: 310: vscp_init();
  1516  00427E  EC1F  F029         	call	_vscp_init	;wreg free
  1517  004282                     l166:
  1518  004282  0004               	clrwdt		;# 
  1519                           
  1520                           ;main.c: 316: if ((vscp_initbtncnt > 250) &&
  1521                           ;main.c: 317: (0x01 != vscp_node_state)) {
  1522  004284  0EFA               	movlw	250
  1523  004286  0100               	movlb	0	; () banked
  1524  004288  65B8               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1525  00428A  D00C               	goto	l11970
  1526                           
  1527                           ; BSR set to: 0
  1528  00428C  05BB               	decf	_vscp_node_state& (0+255),w,b
  1529  00428E  E00A               	bz	l11970
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 320: vscp_nickname = 0xff;
  1533  004290  69BA               	setf	_vscp_nickname& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 321: writeEEPROM(0x01, 0xff);
  1537  004292  6A0F               	clrf	?_writeEEPROM+1,c
  1538  004294  0E01               	movlw	1
  1539  004296  6E0E               	movwf	?_writeEEPROM,c
  1540  004298  0EFF               	movlw	255
  1541  00429A  6810               	setf	?_writeEEPROM+2,c
  1542  00429C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  1543                           
  1544                           ;main.c: 322: vscp_init();
  1545  0042A0  EC1F  F029         	call	_vscp_init	;wreg free
  1546  0042A4                     l11970:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 324: }
  1550                           ;main.c: 328: vscp_imsg.flags = 0;
  1551  0042A4  6BBC               	clrf	_vscp_imsg& (0+255),b
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 329: vscp_getEvent();
  1555  0042A6  ECAD  F02A         	call	_vscp_getEvent	;wreg free
  1556                           
  1557                           ;main.c: 332: switch (vscp_node_state) {
  1558  0042AA  D024               	goto	l12000
  1559  0042AC                     l11974:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 337: if (0xff == vscp_nickname) {
  1563  0042AC  29BA               	incf	_vscp_nickname& (0+255),w,b
  1564  0042AE  E103               	bnz	l11978
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;main.c: 339: vscp_node_state = 0x01;
  1568  0042B0  0E01               	movlw	1
  1569  0042B2  6FBB               	movwf	_vscp_node_state& (0+255),b
  1570                           
  1571                           ;main.c: 340: }
  1572  0042B4  D02B               	goto	l12002
  1573  0042B6                     l11978:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 341: else {
  1577                           ;main.c: 343: vscp_node_state = 0x03;
  1578  0042B6  0E03               	movlw	3
  1579  0042B8  6FBB               	movwf	_vscp_node_state& (0+255),b
  1580  0042BA                     l11980:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 344: vscp_goActiveState();
  1584  0042BA  EC68  F02B         	call	_vscp_goActiveState	;wreg free
  1585  0042BE  D026               	goto	l12002
  1586  0042C0                     l11982:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 349: vscp_handleProbeState();
  1590  0042C0  EC8E  F022         	call	_vscp_handleProbeState	;wreg free
  1591                           
  1592                           ;main.c: 350: break;
  1593  0042C4  D023               	goto	l12002
  1594  0042C6                     l175:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;main.c: 359: if (vscp_imsg.flags & 0x80) {
  1598  0042C6  AFBC               	btfss	_vscp_imsg& (0+255),7,b
  1599  0042C8  D021               	goto	l12002
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 361: if (0 == vscp_imsg.vscp_class) {
  1603  0042CA  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  1604  0042CC  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1605  0042CE  E103               	bnz	l11990
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 364: vscp_handleProtocolEvent();
  1609  0042D0  EC61  F016         	call	_vscp_handleProtocolEvent	;wreg free
  1610                           
  1611                           ;main.c: 366: }
  1612  0042D4  D01B               	goto	l12002
  1613  0042D6                     l11990:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;main.c: 367: else if ((30 == vscp_imsg.vscp_class) &&
  1617                           ;main.c: 368: (26 == vscp_imsg.vscp_type)) {
  1618  0042D6  51BE               	movf	(_vscp_imsg+2)& (0+255),w,b
  1619  0042D8  0A1E               	xorlw	30
  1620  0042DA  11BF               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1621  0042DC  E117               	bnz	l12002
  1622                           
  1623                           ; BSR set to: 0
  1624  0042DE  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  1625  0042E0  0A1A               	xorlw	26
  1626  0042E2  E114               	bnz	l12002
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;main.c: 369: handle_sync();
  1630  0042E4  ECD4  F026         	call	_handle_sync	;wreg free
  1631  0042E8  D011               	goto	l12002
  1632  0042EA                     l11996:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 376: vscp_error();
  1636  0042EA  EC4E  F02C         	call	_vscp_error	;wreg free
  1637                           
  1638                           ;main.c: 377: break;
  1639  0042EE  D00E               	goto	l12002
  1640  0042F0                     l181:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 380: vscp_node_state = 0x00;
  1644  0042F0  6BBB               	clrf	_vscp_node_state& (0+255),b
  1645                           
  1646                           ;main.c: 381: break;
  1647  0042F2  D00C               	goto	l12002
  1648  0042F4                     l12000:
  1649  0042F4  0100               	movlb	0	; () banked
  1650  0042F6  51BB               	movf	_vscp_node_state& (0+255),w,b
  1651                           
  1652                           ; Switch size 1, requested type "speed"
  1653                           ; Number of cases is 5, Range of values is 0 to 4
  1654                           ; switch strategies available:
  1655                           ; Name         Instructions Cycles
  1656                           ; simple_byte           16     9 (average)
  1657                           ;	Chosen strategy is simple_byte
  1658  0042F8  E0D9               	bz	l11974
  1659  0042FA  0A01               	xorlw	1	; case 1
  1660  0042FC  E0E1               	bz	l11982
  1661  0042FE  0A03               	xorlw	3	; case 2
  1662  004300  E0DC               	bz	l11980
  1663  004302  0A01               	xorlw	1	; case 3
  1664  004304  E0E0               	bz	l175
  1665  004306  0A07               	xorlw	7	; case 4
  1666  004308  E0F0               	bz	l11996
  1667  00430A  D7F2               	goto	l181
  1668  00430C                     l12002:
  1669                           
  1670                           ;main.c: 387: if ( measurement_clock > 1000 ) {
  1671  00430C  0EE9               	movlw	233
  1672  00430E  0101               	movlb	1	; () banked
  1673  004310  5D12               	subwf	_measurement_clock& (0+255),w,b
  1674  004312  0E03               	movlw	3
  1675  004314  5913               	subwfb	(_measurement_clock+1)& (0+255),w,b
  1676  004316  0E00               	movlw	0
  1677  004318  5914               	subwfb	(_measurement_clock+2)& (0+255),w,b
  1678  00431A  0E00               	movlw	0
  1679  00431C  5915               	subwfb	(_measurement_clock+3)& (0+255),w,b
  1680  00431E  E3B1               	bnc	l166
  1681                           
  1682                           ; BSR set to: 1
  1683                           ;main.c: 389: measurement_clock = 0;
  1684  004320  6B12               	clrf	_measurement_clock& (0+255),b
  1685  004322  6B13               	clrf	(_measurement_clock+1)& (0+255),b
  1686  004324  6B14               	clrf	(_measurement_clock+2)& (0+255),b
  1687  004326  6B15               	clrf	(_measurement_clock+3)& (0+255),b
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 390: doOneSecondWork();
  1691  004328  EC89  F01A         	call	_doOneSecondWork	;wreg free
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 391: seconds++;
  1695  00432C  2BB6               	incf	_seconds& (0+255),f,b
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 392: sendTimer++;
  1699  00432E  2A4A               	incf	_sendTimer,f,c
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 396: if (0x03 == vscp_node_state) {
  1703  004330  51BB               	movf	_vscp_node_state& (0+255),w,b
  1704  004332  0A03               	xorlw	3
  1705  004334  E10D               	bnz	l12026
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 397: for (i = 0; i < 6; i++) {
  1709  004336  6BB2               	clrf	main@i& (0+255),b
  1710  004338                     l12020:
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 398: seconds_temp[i]++;
  1714  004338  0E0C               	movlw	low _seconds_temp
  1715  00433A  0100               	movlb	0	; () banked
  1716  00433C  25B2               	addwf	main@i& (0+255),w,b
  1717  00433E  6ED9               	movwf	fsr2l,c
  1718  004340  6ADA               	clrf	fsr2h,c
  1719  004342  0E01               	movlw	high _seconds_temp
  1720  004344  22DA               	addwfc	fsr2h,f,c
  1721  004346  2ADF               	incf	indf2,f,c
  1722                           
  1723                           ; BSR set to: 1
  1724  004348  2BB2               	incf	main@i& (0+255),f,b
  1725                           
  1726                           ; BSR set to: 0
  1727  00434A  0E05               	movlw	5
  1728  00434C  65B2               	cpfsgt	main@i& (0+255),b
  1729  00434E  D7F4               	goto	l12020
  1730  004350                     l12026:
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;main.c: 399: }
  1734                           ;main.c: 400: }
  1735                           ;main.c: 402: if (seconds > 60) {
  1736  004350  0E3C               	movlw	60
  1737  004352  65B6               	cpfsgt	_seconds& (0+255),b
  1738  004354  D001               	goto	l12030
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 403: seconds = 0;
  1742  004356  6BB6               	clrf	_seconds& (0+255),b
  1743  004358                     l12030:
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 404: }
  1747                           ;main.c: 407: vscp_doOneSecondWork();
  1748  004358  EC67  F028         	call	_vscp_doOneSecondWork	;wreg free
  1749                           
  1750                           ;main.c: 410: doWork();
  1751  00435C  ECB8  F009         	call	_doWork	;wreg free
  1752  004360  D790               	goto	l166
  1753  004362                     __end_of_main:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           postinc0	equ	0xFEE
  1757                           wreg	equ	0xFE8
  1758                           postdec1	equ	0xFE5
  1759                           fsr1h	equ	0xFE2
  1760                           fsr1l	equ	0xFE1
  1761                           indf2	equ	0xFDF
  1762                           fsr2h	equ	0xFDA
  1763                           fsr2l	equ	0xFD9
  1764                           status	equ	0xFD8
  1765                           
  1766 ;; *************** function _doWork *****************
  1767 ;; Defined at:
  1768 ;;		line 425 in file "../main.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;  temp            4   49[BANK1 ] unsigned char 
  1773 ;;  avarage         4   43[BANK1 ] unsigned char 
  1774 ;;  resistance      4   38[BANK1 ] unsigned char 
  1775 ;;  v               4   32[BANK1 ] unsigned char 
  1776 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1777 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1778 ;;  setpoint        2   47[BANK1 ] int 
  1779 ;;  B               2   36[BANK1 ] unsigned short 
  1780 ;;  i               1   53[BANK1 ] unsigned char 
  1781 ;;  j               1   42[BANK1 ] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;		None               void
  1784 ;; Registers used:
  1785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : F/0
  1788 ;;		On exit  : E/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1791 ;;      Params:         0       0       0       0       0       0       0
  1792 ;;      Locals:         0       0      54       0       0       0       0
  1793 ;;      Temps:          0      14       0       0       0       0       0
  1794 ;;      Totals:         0      14      54       0       0       0       0
  1795 ;;Total ram usage:       68 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    7
  1798 ;; This function calls:
  1799 ;;		_writeEEPROM
  1800 ;;		_readEEPROM
  1801 ;;		_exp
  1802 ;;		_log
  1803 ;;		_getCalibrationValue
  1804 ;;		_vscp_sendEvent
  1805 ;;		___aldiv
  1806 ;;		___altofl
  1807 ;;		___asfladd
  1808 ;;		___fladd
  1809 ;;		___asfldiv
  1810 ;;		___fldiv
  1811 ;;		___flmul
  1812 ;;		___asflsub
  1813 ;;		___flsub
  1814 ;;		___fltol
  1815 ;;		___lwtofl
  1816 ;;		___wmul
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text1
  1823  001370                     __ptext1:
  1824                           	opt stack 0
  1825  001370                     _doWork:
  1826                           	opt stack 23
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 426: uint8_t i, j;
  1830                           ;main.c: 427: uint16_t B;
  1831                           ;main.c: 428: double avarage;
  1832                           ;main.c: 429: double resistance;
  1833                           ;main.c: 430: double Rinf;
  1834                           ;main.c: 431: double temp;
  1835                           ;main.c: 432: double v;
  1836                           ;main.c: 433: double calVoltage;
  1837                           ;main.c: 434: int setpoint;
  1838                           ;main.c: 436: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1839                           ;main.c: 437: readEEPROM(0xF3));
  1840                           
  1841                           ;incstack = 0
  1842                           ;incstack = 0
  1843  001370  6A0F               	clrf	?_readEEPROM+1,c
  1844  001372  0EF3               	movlw	243
  1845  001374  6E0E               	movwf	?_readEEPROM,c
  1846  001376  EC00  F02C         	call	_readEEPROM	;wreg free
  1847  00137A  0100               	movlb	0	; () banked
  1848  00137C  6FA4               	movwf	??_doWork& (0+255),b
  1849  00137E  6A0F               	clrf	?_readEEPROM+1,c
  1850  001380  0EF2               	movlw	242
  1851  001382  6E0E               	movwf	?_readEEPROM,c
  1852  001384  EC00  F02C         	call	_readEEPROM	;wreg free
  1853  001388  6E19               	movwf	?___lwtofl+1,c
  1854  00138A  0100               	movlb	0	; () banked
  1855  00138C  51A4               	movf	??_doWork& (0+255),w,b
  1856  00138E  6E18               	movwf	?___lwtofl,c
  1857  001390  EC83  F02A         	call	___lwtofl	;wreg free
  1858  001394  C01B  F16D         	movff	?___lwtofl+3,doWork@calVoltage+3
  1859  001398  C01A  F16C         	movff	?___lwtofl+2,doWork@calVoltage+2
  1860  00139C  C019  F16B         	movff	?___lwtofl+1,doWork@calVoltage+1
  1861  0013A0  C018  F16A         	movff	?___lwtofl,doWork@calVoltage
  1862                           
  1863                           ;main.c: 442: for (i = 0; i < 6; i++) {
  1864  0013A4  0101               	movlb	1	; () banked
  1865  0013A6  6B9B               	clrf	doWork@i& (0+255),b
  1866  0013A8                     l12040:
  1867                           
  1868                           ; BSR set to: 1
  1869                           ;main.c: 444: if (adc_conversion_flags & 1 << i) {
  1870  0013A8  C19B  F0A4         	movff	doWork@i,??_doWork
  1871  0013AC  0E01               	movlw	1
  1872  0013AE  0100               	movlb	0	; () banked
  1873  0013B0  6FA5               	movwf	(??_doWork+1)& (0+255),b
  1874  0013B2  2BA4               	incf	??_doWork& (0+255),f,b
  1875  0013B4  D002               	goto	u10504
  1876  0013B6                     u10505:
  1877  0013B6  90D8               	bcf	status,0,c
  1878  0013B8  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1879  0013BA                     u10504:
  1880  0013BA  2FA4               	decfsz	??_doWork& (0+255),f,b
  1881  0013BC  D7FC               	goto	u10505
  1882  0013BE  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1883  0013C0  15B3               	andwf	_adc_conversion_flags& (0+255),w,b
  1884  0013C2  E101 D2DA          	bz	l12100
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 447: avarage = 0;
  1888  0013C6  0101               	movlb	1	; () banked
  1889  0013C8  6B91               	clrf	doWork@avarage& (0+255),b
  1890  0013CA  6B92               	clrf	(doWork@avarage+1)& (0+255),b
  1891  0013CC  6B93               	clrf	(doWork@avarage+2)& (0+255),b
  1892  0013CE  6B94               	clrf	(doWork@avarage+3)& (0+255),b
  1893                           
  1894                           ;main.c: 448: for (j = 0; j < 80; j++) {
  1895  0013D0  6B90               	clrf	doWork@j& (0+255),b
  1896  0013D2                     l12048:
  1897                           
  1898                           ; BSR set to: 1
  1899                           ;main.c: 449: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1900  0013D2  0E01               	movlw	high doWork@avarage
  1901  0013D4  6E2D               	movwf	?___asfladd+1,c
  1902  0013D6  0E91               	movlw	low doWork@avarage
  1903  0013D8  6E2C               	movwf	?___asfladd,c
  1904  0013DA  90D8               	bcf	status,0,c
  1905  0013DC  359B               	rlcf	doWork@i& (0+255),w,b
  1906  0013DE  0100               	movlb	0	; () banked
  1907  0013E0  6FA4               	movwf	??_doWork& (0+255),b
  1908  0013E2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  1909  0013E4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  1910  0013E6  0101               	movlb	1	; () banked
  1911  0013E8  5190               	movf	doWork@j& (0+255),w,b
  1912  0013EA  0D0C               	mullw	12
  1913  0013EC  0E9D               	movlw	low (_adc+1)
  1914  0013EE  24F3               	addwf	prodl,w,c
  1915  0013F0  0100               	movlb	0	; () banked
  1916  0013F2  6FA6               	movwf	(??_doWork+2)& (0+255),b
  1917  0013F4  0E01               	movlw	high (_adc+1)
  1918  0013F6  20F4               	addwfc	prodh,w,c
  1919  0013F8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  1920  0013FA  51A4               	movf	??_doWork& (0+255),w,b
  1921  0013FC  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  1922  0013FE  6ED9               	movwf	fsr2l,c
  1923  001400  51A5               	movf	(??_doWork+1)& (0+255),w,b
  1924  001402  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  1925  001404  6EDA               	movwf	fsr2h,c
  1926  001406  50DF               	movf	indf2,w,c
  1927  001408  6FA8               	movwf	(??_doWork+4)& (0+255),b
  1928  00140A  90D8               	bcf	status,0,c
  1929  00140C  0101               	movlb	1	; () banked
  1930  00140E  359B               	rlcf	doWork@i& (0+255),w,b
  1931  001410  0100               	movlb	0	; () banked
  1932  001412  6FA9               	movwf	(??_doWork+5)& (0+255),b
  1933  001414  6BAA               	clrf	(??_doWork+6)& (0+255),b
  1934  001416  37AA               	rlcf	(??_doWork+6)& (0+255),f,b
  1935  001418  0101               	movlb	1	; () banked
  1936  00141A  5190               	movf	doWork@j& (0+255),w,b
  1937  00141C  0D0C               	mullw	12
  1938  00141E  0E9C               	movlw	low _adc
  1939  001420  24F3               	addwf	prodl,w,c
  1940  001422  0100               	movlb	0	; () banked
  1941  001424  6FAB               	movwf	(??_doWork+7)& (0+255),b
  1942  001426  0E01               	movlw	high _adc
  1943  001428  20F4               	addwfc	prodh,w,c
  1944  00142A  6FAC               	movwf	(??_doWork+8)& (0+255),b
  1945  00142C  51A9               	movf	(??_doWork+5)& (0+255),w,b
  1946  00142E  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  1947  001430  6ED9               	movwf	fsr2l,c
  1948  001432  51AA               	movf	(??_doWork+6)& (0+255),w,b
  1949  001434  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  1950  001436  6EDA               	movwf	fsr2h,c
  1951  001438  50DF               	movf	indf2,w,c
  1952  00143A  6E19               	movwf	?___lwtofl+1,c
  1953  00143C  51A8               	movf	(??_doWork+4)& (0+255),w,b
  1954  00143E  6E18               	movwf	?___lwtofl,c
  1955  001440  EC83  F02A         	call	___lwtofl	;wreg free
  1956  001444  C01B  F031         	movff	?___lwtofl+3,?___asfladd+5
  1957  001448  C01A  F030         	movff	?___lwtofl+2,?___asfladd+4
  1958  00144C  C019  F02F         	movff	?___lwtofl+1,?___asfladd+3
  1959  001450  C018  F02E         	movff	?___lwtofl,?___asfladd+2
  1960  001454  ECB2  F028         	call	___asfladd	;wreg free
  1961  001458  0101               	movlb	1	; () banked
  1962  00145A  2B90               	incf	doWork@j& (0+255),f,b
  1963                           
  1964                           ; BSR set to: 1
  1965  00145C  0E4F               	movlw	79
  1966  00145E  6590               	cpfsgt	doWork@j& (0+255),b
  1967  001460  D7B8               	goto	l12048
  1968                           
  1969                           ; BSR set to: 1
  1970                           ;main.c: 453: if (1) {
  1971  001462  0E01               	movlw	high doWork@avarage
  1972  001464  0100               	movlb	0	; () banked
  1973  001466  6F61               	movwf	(?___asfldiv+1)& (0+255),b
  1974  001468  0E91               	movlw	low doWork@avarage
  1975  00146A  6F60               	movwf	?___asfldiv& (0+255),b
  1976  00146C  6B62               	clrf	(?___asfldiv+2)& (0+255),b
  1977  00146E  6B63               	clrf	(?___asfldiv+3)& (0+255),b
  1978  001470  0EA0               	movlw	160
  1979  001472  6F64               	movwf	(?___asfldiv+4)& (0+255),b
  1980  001474  0E42               	movlw	66
  1981  001476  6F65               	movwf	(?___asfldiv+5)& (0+255),b
  1982  001478  EC8D  F028         	call	___asfldiv	;wreg free
  1983                           
  1984                           ;main.c: 461: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  1985                           ;main.c: 462: readEEPROM(2 * i + 0x50);
  1986  00147C  0101               	movlb	1	; () banked
  1987  00147E  519B               	movf	doWork@i& (0+255),w,b
  1988  001480  0D02               	mullw	2
  1989  001482  0E50               	movlw	80
  1990  001484  24F3               	addwf	prodl,w,c
  1991  001486  6E0E               	movwf	?_readEEPROM,c
  1992  001488  0E00               	movlw	0
  1993  00148A  20F4               	addwfc	prodh,w,c
  1994  00148C  6E0F               	movwf	?_readEEPROM+1,c
  1995  00148E  EC00  F02C         	call	_readEEPROM	;wreg free
  1996  001492  0100               	movlb	0	; () banked
  1997  001494  6FA4               	movwf	??_doWork& (0+255),b
  1998  001496  0101               	movlb	1	; () banked
  1999  001498  519B               	movf	doWork@i& (0+255),w,b
  2000  00149A  0D02               	mullw	2
  2001  00149C  0E4F               	movlw	79
  2002  00149E  24F3               	addwf	prodl,w,c
  2003  0014A0  6E0E               	movwf	?_readEEPROM,c
  2004  0014A2  0E00               	movlw	0
  2005  0014A4  20F4               	addwfc	prodh,w,c
  2006  0014A6  6E0F               	movwf	?_readEEPROM+1,c
  2007  0014A8  EC00  F02C         	call	_readEEPROM	;wreg free
  2008  0014AC  0101               	movlb	1	; () banked
  2009  0014AE  6F8B               	movwf	(doWork@B+1)& (0+255),b
  2010  0014B0  0100               	movlb	0	; () banked
  2011  0014B2  51A4               	movf	??_doWork& (0+255),w,b
  2012  0014B4  0101               	movlb	1	; () banked
  2013  0014B6  6F8A               	movwf	doWork@B& (0+255),b
  2014                           
  2015                           ; BSR set to: 1
  2016                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2017  0014B8  0E33               	movlw	51
  2018  0014BA  6E30               	movwf	?___fldiv+4,c
  2019  0014BC  0E13               	movlw	19
  2020  0014BE  6E31               	movwf	?___fldiv+5,c
  2021  0014C0  0E95               	movlw	149
  2022  0014C2  6E32               	movwf	?___fldiv+6,c
  2023  0014C4  0EC3               	movlw	195
  2024  0014C6  6E33               	movwf	?___fldiv+7,c
  2025  0014C8  C18A  F018         	movff	doWork@B,?___lwtofl
  2026  0014CC  C18B  F019         	movff	doWork@B+1,?___lwtofl+1
  2027  0014D0  EC83  F02A         	call	___lwtofl	;wreg free
  2028  0014D4  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2029  0014D8  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2030  0014DC  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2031  0014E0  C018  F02C         	movff	?___lwtofl,?___fldiv
  2032  0014E4  ECBF  F024         	call	___fldiv	;wreg free
  2033  0014E8  C02F  F171         	movff	?___fldiv+3,_doWork$2268+3
  2034  0014EC  C02E  F170         	movff	?___fldiv+2,_doWork$2268+2
  2035  0014F0  C02D  F16F         	movff	?___fldiv+1,_doWork$2268+1
  2036  0014F4  C02C  F16E         	movff	?___fldiv,_doWork$2268
  2037                           
  2038                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2039  0014F8  C16E  F099         	movff	_doWork$2268,?_exp
  2040  0014FC  C16F  F09A         	movff	_doWork$2268+1,?_exp+1
  2041  001500  C170  F09B         	movff	_doWork$2268+2,?_exp+2
  2042  001504  C171  F09C         	movff	_doWork$2268+3,?_exp+3
  2043  001508  EC8D  F01B         	call	_exp	;wreg free
  2044  00150C  C09C  F175         	movff	?_exp+3,_doWork$2269+3
  2045  001510  C09B  F174         	movff	?_exp+2,_doWork$2269+2
  2046  001514  C09A  F173         	movff	?_exp+1,_doWork$2269+1
  2047  001518  C099  F172         	movff	?_exp,_doWork$2269
  2048                           
  2049                           ;main.c: 465: Rinf = 10000.0 * exp(B / -298.15);
  2050  00151C  C172  F060         	movff	_doWork$2269,?___flmul
  2051  001520  C173  F061         	movff	_doWork$2269+1,?___flmul+1
  2052  001524  C174  F062         	movff	_doWork$2269+2,?___flmul+2
  2053  001528  C175  F063         	movff	_doWork$2269+3,?___flmul+3
  2054  00152C  0100               	movlb	0	; () banked
  2055  00152E  6B64               	clrf	(?___flmul+4)& (0+255),b
  2056  001530  0E40               	movlw	64
  2057  001532  6F65               	movwf	(?___flmul+5)& (0+255),b
  2058  001534  0E1C               	movlw	28
  2059  001536  6F66               	movwf	(?___flmul+6)& (0+255),b
  2060  001538  0E46               	movlw	70
  2061  00153A  6F67               	movwf	(?___flmul+7)& (0+255),b
  2062  00153C  EC23  F022         	call	___flmul	;wreg free
  2063  001540  C063  F169         	movff	?___flmul+3,doWork@Rinf+3
  2064  001544  C062  F168         	movff	?___flmul+2,doWork@Rinf+2
  2065  001548  C061  F167         	movff	?___flmul+1,doWork@Rinf+1
  2066  00154C  C060  F166         	movff	?___flmul,doWork@Rinf
  2067                           
  2068                           ;main.c: 467: v = 5.0 * (double) avarage / 1025;
  2069  001550  0100               	movlb	0	; () banked
  2070  001552  6B64               	clrf	(?___flmul+4)& (0+255),b
  2071  001554  6B65               	clrf	(?___flmul+5)& (0+255),b
  2072  001556  0EA0               	movlw	160
  2073  001558  6F66               	movwf	(?___flmul+6)& (0+255),b
  2074  00155A  0E40               	movlw	64
  2075  00155C  6F67               	movwf	(?___flmul+7)& (0+255),b
  2076  00155E  C191  F060         	movff	doWork@avarage,?___flmul
  2077  001562  C192  F061         	movff	doWork@avarage+1,?___flmul+1
  2078  001566  C193  F062         	movff	doWork@avarage+2,?___flmul+2
  2079  00156A  C194  F063         	movff	doWork@avarage+3,?___flmul+3
  2080  00156E  EC23  F022         	call	___flmul	;wreg free
  2081  001572  C063  F02F         	movff	?___flmul+3,?___fldiv+3
  2082  001576  C062  F02E         	movff	?___flmul+2,?___fldiv+2
  2083  00157A  C061  F02D         	movff	?___flmul+1,?___fldiv+1
  2084  00157E  C060  F02C         	movff	?___flmul,?___fldiv
  2085  001582  6A30               	clrf	?___fldiv+4,c
  2086  001584  0E20               	movlw	32
  2087  001586  6E31               	movwf	?___fldiv+5,c
  2088  001588  0E80               	movlw	128
  2089  00158A  6E32               	movwf	?___fldiv+6,c
  2090  00158C  0E44               	movlw	68
  2091  00158E  6E33               	movwf	?___fldiv+7,c
  2092  001590  ECBF  F024         	call	___fldiv	;wreg free
  2093  001594  C02F  F189         	movff	?___fldiv+3,doWork@v+3
  2094  001598  C02E  F188         	movff	?___fldiv+2,doWork@v+2
  2095  00159C  C02D  F187         	movff	?___fldiv+1,doWork@v+1
  2096  0015A0  C02C  F186         	movff	?___fldiv,doWork@v
  2097                           
  2098                           ;main.c: 469: resistance = (calVoltage - 10000.0 * v) / v;
  2099  0015A4  0100               	movlb	0	; () banked
  2100  0015A6  6B64               	clrf	(?___flmul+4)& (0+255),b
  2101  0015A8  0E40               	movlw	64
  2102  0015AA  6F65               	movwf	(?___flmul+5)& (0+255),b
  2103  0015AC  0E1C               	movlw	28
  2104  0015AE  6F66               	movwf	(?___flmul+6)& (0+255),b
  2105  0015B0  0E46               	movlw	70
  2106  0015B2  6F67               	movwf	(?___flmul+7)& (0+255),b
  2107  0015B4  C186  F060         	movff	doWork@v,?___flmul
  2108  0015B8  C187  F061         	movff	doWork@v+1,?___flmul+1
  2109  0015BC  C188  F062         	movff	doWork@v+2,?___flmul+2
  2110  0015C0  C189  F063         	movff	doWork@v+3,?___flmul+3
  2111  0015C4  EC23  F022         	call	___flmul	;wreg free
  2112  0015C8  C063  F07D         	movff	?___flmul+3,?___flsub+7
  2113  0015CC  C062  F07C         	movff	?___flmul+2,?___flsub+6
  2114  0015D0  C061  F07B         	movff	?___flmul+1,?___flsub+5
  2115  0015D4  C060  F07A         	movff	?___flmul,?___flsub+4
  2116  0015D8  C16A  F076         	movff	doWork@calVoltage,?___flsub
  2117  0015DC  C16B  F077         	movff	doWork@calVoltage+1,?___flsub+1
  2118  0015E0  C16C  F078         	movff	doWork@calVoltage+2,?___flsub+2
  2119  0015E4  C16D  F079         	movff	doWork@calVoltage+3,?___flsub+3
  2120  0015E8  ECA7  F029         	call	___flsub	;wreg free
  2121  0015EC  C079  F02F         	movff	?___flsub+3,?___fldiv+3
  2122  0015F0  C078  F02E         	movff	?___flsub+2,?___fldiv+2
  2123  0015F4  C077  F02D         	movff	?___flsub+1,?___fldiv+1
  2124  0015F8  C076  F02C         	movff	?___flsub,?___fldiv
  2125  0015FC  C186  F030         	movff	doWork@v,?___fldiv+4
  2126  001600  C187  F031         	movff	doWork@v+1,?___fldiv+5
  2127  001604  C188  F032         	movff	doWork@v+2,?___fldiv+6
  2128  001608  C189  F033         	movff	doWork@v+3,?___fldiv+7
  2129  00160C  ECBF  F024         	call	___fldiv	;wreg free
  2130  001610  C02F  F18F         	movff	?___fldiv+3,doWork@resistance+3
  2131  001614  C02E  F18E         	movff	?___fldiv+2,doWork@resistance+2
  2132  001618  C02D  F18D         	movff	?___fldiv+1,doWork@resistance+1
  2133  00161C  C02C  F18C         	movff	?___fldiv,doWork@resistance
  2134                           
  2135                           ;main.c: 471: temp = ((double) B) / log(resistance / Rinf);
  2136  001620  C166  F030         	movff	doWork@Rinf,?___fldiv+4
  2137  001624  C167  F031         	movff	doWork@Rinf+1,?___fldiv+5
  2138  001628  C168  F032         	movff	doWork@Rinf+2,?___fldiv+6
  2139  00162C  C169  F033         	movff	doWork@Rinf+3,?___fldiv+7
  2140  001630  C18C  F02C         	movff	doWork@resistance,?___fldiv
  2141  001634  C18D  F02D         	movff	doWork@resistance+1,?___fldiv+1
  2142  001638  C18E  F02E         	movff	doWork@resistance+2,?___fldiv+2
  2143  00163C  C18F  F02F         	movff	doWork@resistance+3,?___fldiv+3
  2144  001640  ECBF  F024         	call	___fldiv	;wreg free
  2145  001644  C02F  F084         	movff	?___fldiv+3,?_log+3
  2146  001648  C02E  F083         	movff	?___fldiv+2,?_log+2
  2147  00164C  C02D  F082         	movff	?___fldiv+1,?_log+1
  2148  001650  C02C  F081         	movff	?___fldiv,?_log
  2149  001654  EC22  F020         	call	_log	;wreg free
  2150  001658  C084  F179         	movff	?_log+3,_doWork$2270+3
  2151  00165C  C083  F178         	movff	?_log+2,_doWork$2270+2
  2152  001660  C082  F177         	movff	?_log+1,_doWork$2270+1
  2153  001664  C081  F176         	movff	?_log,_doWork$2270
  2154                           
  2155                           ;main.c: 471: temp = ((double) B) / log(resistance / Rinf);
  2156  001668  C18A  F018         	movff	doWork@B,?___lwtofl
  2157  00166C  C18B  F019         	movff	doWork@B+1,?___lwtofl+1
  2158  001670  EC83  F02A         	call	___lwtofl	;wreg free
  2159  001674  C01B  F02F         	movff	?___lwtofl+3,?___fldiv+3
  2160  001678  C01A  F02E         	movff	?___lwtofl+2,?___fldiv+2
  2161  00167C  C019  F02D         	movff	?___lwtofl+1,?___fldiv+1
  2162  001680  C018  F02C         	movff	?___lwtofl,?___fldiv
  2163  001684  C176  F030         	movff	_doWork$2270,?___fldiv+4
  2164  001688  C177  F031         	movff	_doWork$2270+1,?___fldiv+5
  2165  00168C  C178  F032         	movff	_doWork$2270+2,?___fldiv+6
  2166  001690  C179  F033         	movff	_doWork$2270+3,?___fldiv+7
  2167  001694  ECBF  F024         	call	___fldiv	;wreg free
  2168  001698  C02F  F19A         	movff	?___fldiv+3,doWork@temp+3
  2169  00169C  C02E  F199         	movff	?___fldiv+2,doWork@temp+2
  2170  0016A0  C02D  F198         	movff	?___fldiv+1,doWork@temp+1
  2171  0016A4  C02C  F197         	movff	?___fldiv,doWork@temp
  2172                           
  2173                           ;main.c: 473: temp -= 273.15;
  2174  0016A8  0E01               	movlw	high doWork@temp
  2175  0016AA  0100               	movlb	0	; () banked
  2176  0016AC  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  2177  0016AE  0E97               	movlw	low doWork@temp
  2178  0016B0  6F7E               	movwf	?___asflsub& (0+255),b
  2179  0016B2  0E33               	movlw	51
  2180  0016B4  6F80               	movwf	(?___asflsub+2)& (0+255),b
  2181  0016B6  0E93               	movlw	147
  2182  0016B8  6F81               	movwf	(?___asflsub+3)& (0+255),b
  2183  0016BA  0E88               	movlw	136
  2184  0016BC  6F82               	movwf	(?___asflsub+4)& (0+255),b
  2185  0016BE  0E43               	movlw	67
  2186  0016C0  6F83               	movwf	(?___asflsub+5)& (0+255),b
  2187  0016C2  ECF4  F027         	call	___asflsub	;wreg free
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;main.c: 488: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2191  0016C6  0101               	movlb	1	; () banked
  2192  0016C8  519B               	movf	doWork@i& (0+255),w,b
  2193  0016CA  0D02               	mullw	2
  2194  0016CC  0E00               	movlw	low _current_temp
  2195  0016CE  24F3               	addwf	prodl,w,c
  2196  0016D0  6ED9               	movwf	fsr2l,c
  2197  0016D2  0E01               	movlw	high _current_temp
  2198  0016D4  20F4               	addwfc	prodh,w,c
  2199  0016D6  6EDA               	movwf	fsr2h,c
  2200  0016D8  CFDE F0A4          	movff	postinc2,??_doWork
  2201  0016DC  CFDD F0A5          	movff	postdec2,??_doWork+1
  2202  0016E0  C0A4  F0A6         	movff	??_doWork,??_doWork+2
  2203  0016E4  C0A5  F0A7         	movff	??_doWork+1,??_doWork+3
  2204  0016E8  0E00               	movlw	0
  2205  0016EA  0100               	movlb	0	; () banked
  2206  0016EC  BFA7               	btfsc	(??_doWork+3)& (0+255),7,b
  2207  0016EE  0EFF               	movlw	255
  2208  0016F0  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2209  0016F2  6FA9               	movwf	(??_doWork+5)& (0+255),b
  2210  0016F4  0101               	movlb	1	; () banked
  2211  0016F6  519B               	movf	doWork@i& (0+255),w,b
  2212  0016F8  ECD7  F028         	call	_getCalibrationValue
  2213  0016FC  C012  F0AA         	movff	?_getCalibrationValue,??_doWork+6
  2214  001700  C013  F0AB         	movff	?_getCalibrationValue+1,??_doWork+7
  2215  001704  0E00               	movlw	0
  2216  001706  0100               	movlb	0	; () banked
  2217  001708  BFAB               	btfsc	(??_doWork+7)& (0+255),7,b
  2218  00170A  0EFF               	movlw	255
  2219  00170C  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2220  00170E  6FAD               	movwf	(??_doWork+9)& (0+255),b
  2221  001710  6B64               	clrf	(?___flmul+4)& (0+255),b
  2222  001712  6B65               	clrf	(?___flmul+5)& (0+255),b
  2223  001714  0EC8               	movlw	200
  2224  001716  6F66               	movwf	(?___flmul+6)& (0+255),b
  2225  001718  0E42               	movlw	66
  2226  00171A  6F67               	movwf	(?___flmul+7)& (0+255),b
  2227  00171C  C197  F060         	movff	doWork@temp,?___flmul
  2228  001720  C198  F061         	movff	doWork@temp+1,?___flmul+1
  2229  001724  C199  F062         	movff	doWork@temp+2,?___flmul+2
  2230  001728  C19A  F063         	movff	doWork@temp+3,?___flmul+3
  2231  00172C  EC23  F022         	call	___flmul	;wreg free
  2232  001730  C063  F079         	movff	?___flmul+3,?___fltol+3
  2233  001734  C062  F078         	movff	?___flmul+2,?___fltol+2
  2234  001738  C061  F077         	movff	?___flmul+1,?___fltol+1
  2235  00173C  C060  F076         	movff	?___flmul,?___fltol
  2236  001740  ECB5  F025         	call	___fltol	;wreg free
  2237  001744  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2238  001746  2576               	addwf	?___fltol& (0+255),w,b
  2239  001748  6FAE               	movwf	(??_doWork+10)& (0+255),b
  2240  00174A  51AB               	movf	(??_doWork+7)& (0+255),w,b
  2241  00174C  2177               	addwfc	(?___fltol+1)& (0+255),w,b
  2242  00174E  6FAF               	movwf	(??_doWork+11)& (0+255),b
  2243  001750  51AC               	movf	(??_doWork+8)& (0+255),w,b
  2244  001752  2178               	addwfc	(?___fltol+2)& (0+255),w,b
  2245  001754  6FB0               	movwf	(??_doWork+12)& (0+255),b
  2246  001756  51AD               	movf	(??_doWork+9)& (0+255),w,b
  2247  001758  2179               	addwfc	(?___fltol+3)& (0+255),w,b
  2248  00175A  6FB1               	movwf	(??_doWork+13)& (0+255),b
  2249  00175C  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2250  00175E  25AE               	addwf	(??_doWork+10)& (0+255),w,b
  2251  001760  6F7C               	movwf	?___aldiv& (0+255),b
  2252  001762  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2253  001764  21AF               	addwfc	(??_doWork+11)& (0+255),w,b
  2254  001766  6F7D               	movwf	(?___aldiv+1)& (0+255),b
  2255  001768  51A8               	movf	(??_doWork+4)& (0+255),w,b
  2256  00176A  21B0               	addwfc	(??_doWork+12)& (0+255),w,b
  2257  00176C  6F7E               	movwf	(?___aldiv+2)& (0+255),b
  2258  00176E  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2259  001770  21B1               	addwfc	(??_doWork+13)& (0+255),w,b
  2260  001772  6F7F               	movwf	(?___aldiv+3)& (0+255),b
  2261  001774  0E02               	movlw	2
  2262  001776  6F80               	movwf	(?___aldiv+4)& (0+255),b
  2263  001778  0E00               	movlw	0
  2264  00177A  6B81               	clrf	(?___aldiv+5)& (0+255),b
  2265  00177C  6B82               	clrf	(?___aldiv+6)& (0+255),b
  2266  00177E  6B83               	clrf	(?___aldiv+7)& (0+255),b
  2267  001780  ECB0  F023         	call	___aldiv	;wreg free
  2268  001784  0101               	movlb	1	; () banked
  2269  001786  519B               	movf	doWork@i& (0+255),w,b
  2270  001788  0D02               	mullw	2
  2271  00178A  0E00               	movlw	low _current_temp
  2272  00178C  24F3               	addwf	prodl,w,c
  2273  00178E  6ED9               	movwf	fsr2l,c
  2274  001790  0E01               	movlw	high _current_temp
  2275  001792  20F4               	addwfc	prodh,w,c
  2276  001794  6EDA               	movwf	fsr2h,c
  2277  001796  C07C  FFDE         	movff	?___aldiv,postinc2
  2278  00179A  C07D  FFDD         	movff	?___aldiv+1,postdec2
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 509: }
  2282                           ;main.c: 511: if (current_temp[ i ] <
  2283                           ;main.c: 512: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2284                           ;main.c: 513: readEEPROM(2 * i + 0x80))) {
  2285                           
  2286                           ;main.c: 490: }
  2287  00179E  519B               	movf	doWork@i& (0+255),w,b
  2288  0017A0  0D02               	mullw	2
  2289  0017A2  0E7F               	movlw	127
  2290  0017A4  24F3               	addwf	prodl,w,c
  2291  0017A6  6E0E               	movwf	?_readEEPROM,c
  2292  0017A8  0E00               	movlw	0
  2293  0017AA  20F4               	addwfc	prodh,w,c
  2294  0017AC  6E0F               	movwf	?_readEEPROM+1,c
  2295  0017AE  EC00  F02C         	call	_readEEPROM	;wreg free
  2296  0017B2  0100               	movlb	0	; () banked
  2297  0017B4  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2298  0017B6  6BA4               	clrf	??_doWork& (0+255),b
  2299  0017B8  0101               	movlb	1	; () banked
  2300  0017BA  519B               	movf	doWork@i& (0+255),w,b
  2301  0017BC  0D02               	mullw	2
  2302  0017BE  0E80               	movlw	128
  2303  0017C0  24F3               	addwf	prodl,w,c
  2304  0017C2  6E0E               	movwf	?_readEEPROM,c
  2305  0017C4  0E00               	movlw	0
  2306  0017C6  20F4               	addwfc	prodh,w,c
  2307  0017C8  6E0F               	movwf	?_readEEPROM+1,c
  2308  0017CA  EC00  F02C         	call	_readEEPROM	;wreg free
  2309  0017CE  0100               	movlb	0	; () banked
  2310  0017D0  27A4               	addwf	??_doWork& (0+255),f,b
  2311  0017D2  0E00               	movlw	0
  2312  0017D4  23A5               	addwfc	(??_doWork+1)& (0+255),f,b
  2313  0017D6  0101               	movlb	1	; () banked
  2314  0017D8  519B               	movf	doWork@i& (0+255),w,b
  2315  0017DA  0D02               	mullw	2
  2316  0017DC  0E00               	movlw	low _current_temp
  2317  0017DE  24F3               	addwf	prodl,w,c
  2318  0017E0  6ED9               	movwf	fsr2l,c
  2319  0017E2  0E01               	movlw	high _current_temp
  2320  0017E4  20F4               	addwfc	prodh,w,c
  2321  0017E6  6EDA               	movwf	fsr2h,c
  2322  0017E8  CFDE F0A6          	movff	postinc2,??_doWork+2
  2323  0017EC  CFDD F0A7          	movff	postdec2,??_doWork+3
  2324  0017F0  0100               	movlb	0	; () banked
  2325  0017F2  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2326  0017F4  0A80               	xorlw	128
  2327  0017F6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2328  0017F8  51A4               	movf	??_doWork& (0+255),w,b
  2329  0017FA  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  2330  0017FC  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2331  0017FE  0A80               	xorlw	128
  2332  001800  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  2333  001802  E23E               	bc	l199
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;main.c: 515: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2337  001804  90D8               	bcf	status,0,c
  2338  001806  0101               	movlb	1	; () banked
  2339  001808  359B               	rlcf	doWork@i& (0+255),w,b
  2340  00180A  0100               	movlb	0	; () banked
  2341  00180C  6FA4               	movwf	??_doWork& (0+255),b
  2342  00180E  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2343  001810  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2344  001812  0E7F               	movlw	127
  2345  001814  25A4               	addwf	??_doWork& (0+255),w,b
  2346  001816  6E0E               	movwf	?_writeEEPROM,c
  2347  001818  0E00               	movlw	0
  2348  00181A  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2349  00181C  6E0F               	movwf	?_writeEEPROM+1,c
  2350  00181E  0101               	movlb	1	; () banked
  2351  001820  519B               	movf	doWork@i& (0+255),w,b
  2352  001822  0D02               	mullw	2
  2353  001824  0E00               	movlw	low _current_temp
  2354  001826  24F3               	addwf	prodl,w,c
  2355  001828  6ED9               	movwf	fsr2l,c
  2356  00182A  0E01               	movlw	high _current_temp
  2357  00182C  20F4               	addwfc	prodh,w,c
  2358  00182E  6EDA               	movwf	fsr2h,c
  2359  001830  CFDE F0A6          	movff	postinc2,??_doWork+2
  2360  001834  CFDD F0A7          	movff	postdec2,??_doWork+3
  2361  001838  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  2362  00183C  0100               	movlb	0	; () banked
  2363  00183E  6BA7               	clrf	(??_doWork+3)& (0+255),b
  2364  001840  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  2365  001842  69A7               	setf	(??_doWork+3)& (0+255),b
  2366  001844  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2367  001846  6E10               	movwf	?_writeEEPROM+2,c
  2368  001848  ECFD  F02A         	call	_writeEEPROM	;wreg free
  2369                           
  2370                           ;main.c: 516: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2371  00184C  90D8               	bcf	status,0,c
  2372  00184E  0101               	movlb	1	; () banked
  2373  001850  359B               	rlcf	doWork@i& (0+255),w,b
  2374  001852  0100               	movlb	0	; () banked
  2375  001854  6FA4               	movwf	??_doWork& (0+255),b
  2376  001856  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2377  001858  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2378  00185A  0E80               	movlw	128
  2379  00185C  25A4               	addwf	??_doWork& (0+255),w,b
  2380  00185E  6E0E               	movwf	?_writeEEPROM,c
  2381  001860  0E00               	movlw	0
  2382  001862  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2383  001864  6E0F               	movwf	?_writeEEPROM+1,c
  2384  001866  0101               	movlb	1	; () banked
  2385  001868  519B               	movf	doWork@i& (0+255),w,b
  2386  00186A  0D02               	mullw	2
  2387  00186C  0E00               	movlw	low _current_temp
  2388  00186E  24F3               	addwf	prodl,w,c
  2389  001870  6ED9               	movwf	fsr2l,c
  2390  001872  0E01               	movlw	high _current_temp
  2391  001874  20F4               	addwfc	prodh,w,c
  2392  001876  6EDA               	movwf	fsr2h,c
  2393  001878  50DF               	movf	indf2,w,c
  2394  00187A  6E10               	movwf	?_writeEEPROM+2,c
  2395  00187C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  2396  001880                     l199:
  2397                           
  2398                           ;main.c: 517: }
  2399                           ;main.c: 520: if (current_temp[ i ] >
  2400                           ;main.c: 521: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2401                           ;main.c: 522: readEEPROM(2 * i + 0x8C))) {
  2402  001880  0101               	movlb	1	; () banked
  2403  001882  519B               	movf	doWork@i& (0+255),w,b
  2404  001884  0D02               	mullw	2
  2405  001886  0E00               	movlw	low _current_temp
  2406  001888  24F3               	addwf	prodl,w,c
  2407  00188A  6ED9               	movwf	fsr2l,c
  2408  00188C  0E01               	movlw	high _current_temp
  2409  00188E  20F4               	addwfc	prodh,w,c
  2410  001890  6EDA               	movwf	fsr2h,c
  2411  001892  CFDE F0A4          	movff	postinc2,??_doWork
  2412  001896  CFDD F0A5          	movff	postdec2,??_doWork+1
  2413  00189A  519B               	movf	doWork@i& (0+255),w,b
  2414  00189C  0D02               	mullw	2
  2415  00189E  0E8B               	movlw	139
  2416  0018A0  24F3               	addwf	prodl,w,c
  2417  0018A2  6E0E               	movwf	?_readEEPROM,c
  2418  0018A4  0E00               	movlw	0
  2419  0018A6  20F4               	addwfc	prodh,w,c
  2420  0018A8  6E0F               	movwf	?_readEEPROM+1,c
  2421  0018AA  EC00  F02C         	call	_readEEPROM	;wreg free
  2422  0018AE  0100               	movlb	0	; () banked
  2423  0018B0  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2424  0018B2  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2425  0018B4  0101               	movlb	1	; () banked
  2426  0018B6  519B               	movf	doWork@i& (0+255),w,b
  2427  0018B8  0D02               	mullw	2
  2428  0018BA  0E8C               	movlw	140
  2429  0018BC  24F3               	addwf	prodl,w,c
  2430  0018BE  6E0E               	movwf	?_readEEPROM,c
  2431  0018C0  0E00               	movlw	0
  2432  0018C2  20F4               	addwfc	prodh,w,c
  2433  0018C4  6E0F               	movwf	?_readEEPROM+1,c
  2434  0018C6  EC00  F02C         	call	_readEEPROM	;wreg free
  2435  0018CA  0100               	movlb	0	; () banked
  2436  0018CC  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2437  0018CE  0E00               	movlw	0
  2438  0018D0  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2439  0018D2  51A7               	movf	(??_doWork+3)& (0+255),w,b
  2440  0018D4  0A80               	xorlw	128
  2441  0018D6  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2442  0018D8  51A4               	movf	??_doWork& (0+255),w,b
  2443  0018DA  5DA6               	subwf	(??_doWork+2)& (0+255),w,b
  2444  0018DC  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2445  0018DE  0A80               	xorlw	128
  2446  0018E0  59A8               	subwfb	(??_doWork+4)& (0+255),w,b
  2447  0018E2  E23E               	bc	l12098
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;main.c: 524: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2451  0018E4  90D8               	bcf	status,0,c
  2452  0018E6  0101               	movlb	1	; () banked
  2453  0018E8  359B               	rlcf	doWork@i& (0+255),w,b
  2454  0018EA  0100               	movlb	0	; () banked
  2455  0018EC  6FA4               	movwf	??_doWork& (0+255),b
  2456  0018EE  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2457  0018F0  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2458  0018F2  0E8B               	movlw	139
  2459  0018F4  25A4               	addwf	??_doWork& (0+255),w,b
  2460  0018F6  6E0E               	movwf	?_writeEEPROM,c
  2461  0018F8  0E00               	movlw	0
  2462  0018FA  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2463  0018FC  6E0F               	movwf	?_writeEEPROM+1,c
  2464  0018FE  0101               	movlb	1	; () banked
  2465  001900  519B               	movf	doWork@i& (0+255),w,b
  2466  001902  0D02               	mullw	2
  2467  001904  0E00               	movlw	low _current_temp
  2468  001906  24F3               	addwf	prodl,w,c
  2469  001908  6ED9               	movwf	fsr2l,c
  2470  00190A  0E01               	movlw	high _current_temp
  2471  00190C  20F4               	addwfc	prodh,w,c
  2472  00190E  6EDA               	movwf	fsr2h,c
  2473  001910  CFDE F0A6          	movff	postinc2,??_doWork+2
  2474  001914  CFDD F0A7          	movff	postdec2,??_doWork+3
  2475  001918  C0A7  F0A6         	movff	??_doWork+3,??_doWork+2
  2476  00191C  0100               	movlb	0	; () banked
  2477  00191E  6BA7               	clrf	(??_doWork+3)& (0+255),b
  2478  001920  BFA6               	btfsc	(??_doWork+2)& (0+255),7,b
  2479  001922  69A7               	setf	(??_doWork+3)& (0+255),b
  2480  001924  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2481  001926  6E10               	movwf	?_writeEEPROM+2,c
  2482  001928  ECFD  F02A         	call	_writeEEPROM	;wreg free
  2483                           
  2484                           ;main.c: 525: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2485  00192C  90D8               	bcf	status,0,c
  2486  00192E  0101               	movlb	1	; () banked
  2487  001930  359B               	rlcf	doWork@i& (0+255),w,b
  2488  001932  0100               	movlb	0	; () banked
  2489  001934  6FA4               	movwf	??_doWork& (0+255),b
  2490  001936  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2491  001938  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2492  00193A  0E8C               	movlw	140
  2493  00193C  25A4               	addwf	??_doWork& (0+255),w,b
  2494  00193E  6E0E               	movwf	?_writeEEPROM,c
  2495  001940  0E00               	movlw	0
  2496  001942  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2497  001944  6E0F               	movwf	?_writeEEPROM+1,c
  2498  001946  0101               	movlb	1	; () banked
  2499  001948  519B               	movf	doWork@i& (0+255),w,b
  2500  00194A  0D02               	mullw	2
  2501  00194C  0E00               	movlw	low _current_temp
  2502  00194E  24F3               	addwf	prodl,w,c
  2503  001950  6ED9               	movwf	fsr2l,c
  2504  001952  0E01               	movlw	high _current_temp
  2505  001954  20F4               	addwfc	prodh,w,c
  2506  001956  6EDA               	movwf	fsr2h,c
  2507  001958  50DF               	movf	indf2,w,c
  2508  00195A  6E10               	movwf	?_writeEEPROM+2,c
  2509  00195C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  2510  001960                     l12098:
  2511                           
  2512                           ;main.c: 526: }
  2513                           ;main.c: 529: adc_conversion_flags &= ~(1 << i);
  2514  001960  C19B  F0A4         	movff	doWork@i,??_doWork
  2515  001964  0E01               	movlw	1
  2516  001966  0100               	movlb	0	; () banked
  2517  001968  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2518  00196A  2BA4               	incf	??_doWork& (0+255),f,b
  2519  00196C  D002               	goto	u10554
  2520  00196E                     u10555:
  2521  00196E  90D8               	bcf	status,0,c
  2522  001970  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2523  001972                     u10554:
  2524  001972  2FA4               	decfsz	??_doWork& (0+255),f,b
  2525  001974  D7FC               	goto	u10555
  2526  001976  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2527  001978  17B3               	andwf	_adc_conversion_flags& (0+255),f,b
  2528  00197A                     l12100:
  2529                           
  2530                           ; BSR set to: 0
  2531  00197A  0101               	movlb	1	; () banked
  2532  00197C  2B9B               	incf	doWork@i& (0+255),f,b
  2533                           
  2534                           ; BSR set to: 1
  2535  00197E  0E05               	movlw	5
  2536  001980  659B               	cpfsgt	doWork@i& (0+255),b
  2537  001982  D512               	goto	l12040
  2538                           
  2539                           ; BSR set to: 1
  2540                           ;main.c: 531: }
  2541                           ;main.c: 532: }
  2542                           ;main.c: 535: if (0x03 == vscp_node_state) {
  2543  001984  0100               	movlb	0	; () banked
  2544  001986  51BB               	movf	_vscp_node_state& (0+255),w,b
  2545  001988  0A03               	xorlw	3
  2546  00198A  E001 D244          	bnz	l222
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 538: for (i = 0; i < 6; i++) {
  2550  00198E  0101               	movlb	1	; () banked
  2551  001990  6B9B               	clrf	doWork@i& (0+255),b
  2552  001992                     l12112:
  2553                           
  2554                           ; BSR set to: 1
  2555                           ;main.c: 541: if (low_alarm & 1 << i) {
  2556  001992  C19B  F0A4         	movff	doWork@i,??_doWork
  2557  001996  0E01               	movlw	1
  2558  001998  0100               	movlb	0	; () banked
  2559  00199A  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2560  00199C  2BA4               	incf	??_doWork& (0+255),f,b
  2561  00199E  D002               	goto	u10584
  2562  0019A0                     u10585:
  2563  0019A0  90D8               	bcf	status,0,c
  2564  0019A2  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2565  0019A4                     u10584:
  2566  0019A4  2FA4               	decfsz	??_doWork& (0+255),f,b
  2567  0019A6  D7FC               	goto	u10585
  2568  0019A8  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2569  0019AA  15B5               	andwf	_low_alarm& (0+255),w,b
  2570  0019AC  E063               	bz	l12120
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 544: setpoint =
  2574                           ;main.c: 545: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2575                           ;main.c: 546: readEEPROM(2 * i + 0x5C) +
  2576                           ;main.c: 547: readEEPROM(i + 0x97)*100);
  2577  0019AE  90D8               	bcf	status,0,c
  2578  0019B0  0101               	movlb	1	; () banked
  2579  0019B2  359B               	rlcf	doWork@i& (0+255),w,b
  2580  0019B4  0100               	movlb	0	; () banked
  2581  0019B6  6FA4               	movwf	??_doWork& (0+255),b
  2582  0019B8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2583  0019BA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2584  0019BC  0E5C               	movlw	92
  2585  0019BE  25A4               	addwf	??_doWork& (0+255),w,b
  2586  0019C0  6E0E               	movwf	?_readEEPROM,c
  2587  0019C2  0E00               	movlw	0
  2588  0019C4  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2589  0019C6  6E0F               	movwf	?_readEEPROM+1,c
  2590  0019C8  EC00  F02C         	call	_readEEPROM	;wreg free
  2591  0019CC  0100               	movlb	0	; () banked
  2592  0019CE  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2593  0019D0  90D8               	bcf	status,0,c
  2594  0019D2  0101               	movlb	1	; () banked
  2595  0019D4  359B               	rlcf	doWork@i& (0+255),w,b
  2596  0019D6  0100               	movlb	0	; () banked
  2597  0019D8  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2598  0019DA  6BA8               	clrf	(??_doWork+4)& (0+255),b
  2599  0019DC  37A8               	rlcf	(??_doWork+4)& (0+255),f,b
  2600  0019DE  0E5B               	movlw	91
  2601  0019E0  25A7               	addwf	(??_doWork+3)& (0+255),w,b
  2602  0019E2  6E0E               	movwf	?_readEEPROM,c
  2603  0019E4  0E00               	movlw	0
  2604  0019E6  21A8               	addwfc	(??_doWork+4)& (0+255),w,b
  2605  0019E8  6E0F               	movwf	?_readEEPROM+1,c
  2606  0019EA  EC00  F02C         	call	_readEEPROM	;wreg free
  2607  0019EE  0100               	movlb	0	; () banked
  2608  0019F0  6FAA               	movwf	(??_doWork+6)& (0+255),b
  2609  0019F2  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2610  0019F4  0E97               	movlw	151
  2611  0019F6  0101               	movlb	1	; () banked
  2612  0019F8  259B               	addwf	doWork@i& (0+255),w,b
  2613  0019FA  6E0E               	movwf	?_readEEPROM,c
  2614  0019FC  6A0F               	clrf	?_readEEPROM+1,c
  2615  0019FE  0E00               	movlw	0
  2616  001A00  220F               	addwfc	?_readEEPROM+1,f,c
  2617  001A02  EC00  F02C         	call	_readEEPROM	;wreg free
  2618  001A06  0D64               	mullw	100
  2619  001A08  0100               	movlb	0	; () banked
  2620  001A0A  51A9               	movf	(??_doWork+5)& (0+255),w,b
  2621  001A0C  24F3               	addwf	prodl,w,c
  2622  001A0E  6FAB               	movwf	(??_doWork+7)& (0+255),b
  2623  001A10  51AA               	movf	(??_doWork+6)& (0+255),w,b
  2624  001A12  20F4               	addwfc	prodh,w,c
  2625  001A14  6FAC               	movwf	(??_doWork+8)& (0+255),b
  2626  001A16  51A6               	movf	(??_doWork+2)& (0+255),w,b
  2627  001A18  25AB               	addwf	(??_doWork+7)& (0+255),w,b
  2628  001A1A  0101               	movlb	1	; () banked
  2629  001A1C  6F95               	movwf	doWork@setpoint& (0+255),b
  2630  001A1E  0100               	movlb	0	; () banked
  2631  001A20  0E00               	movlw	0
  2632  001A22  21AC               	addwfc	(??_doWork+8)& (0+255),w,b
  2633  001A24  0101               	movlb	1	; () banked
  2634  001A26  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2635                           
  2636                           ; BSR set to: 1
  2637                           ;main.c: 552: if (current_temp[ i ] > setpoint) {
  2638  001A28  519B               	movf	doWork@i& (0+255),w,b
  2639  001A2A  0D02               	mullw	2
  2640  001A2C  0E00               	movlw	low _current_temp
  2641  001A2E  24F3               	addwf	prodl,w,c
  2642  001A30  6ED9               	movwf	fsr2l,c
  2643  001A32  0E01               	movlw	high _current_temp
  2644  001A34  20F4               	addwfc	prodh,w,c
  2645  001A36  6EDA               	movwf	fsr2h,c
  2646  001A38  CFDE F0A4          	movff	postinc2,??_doWork
  2647  001A3C  CFDD F0A5          	movff	postdec2,??_doWork+1
  2648  001A40  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  2649  001A42  0A80               	xorlw	128
  2650  001A44  0100               	movlb	0	; () banked
  2651  001A46  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2652  001A48  51A4               	movf	??_doWork& (0+255),w,b
  2653  001A4A  0101               	movlb	1	; () banked
  2654  001A4C  5D95               	subwf	doWork@setpoint& (0+255),w,b
  2655  001A4E  0100               	movlb	0	; () banked
  2656  001A50  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2657  001A52  0A80               	xorlw	128
  2658  001A54  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  2659  001A56  E301 D0BA          	bc	l206
  2660  001A5A                     l12118:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 555: low_alarm &= ~(1 << i);
  2664  001A5A  C19B  F0A4         	movff	doWork@i,??_doWork
  2665  001A5E  0E01               	movlw	1
  2666  001A60  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2667  001A62  2BA4               	incf	??_doWork& (0+255),f,b
  2668  001A64  D002               	goto	u10614
  2669  001A66                     u10615:
  2670  001A66  90D8               	bcf	status,0,c
  2671  001A68  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2672  001A6A                     u10614:
  2673  001A6A  2FA4               	decfsz	??_doWork& (0+255),f,b
  2674  001A6C  D7FC               	goto	u10615
  2675  001A6E  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  2676  001A70  17B5               	andwf	_low_alarm& (0+255),f,b
  2677  001A72  D0AD               	goto	l206
  2678  001A74                     l12120:
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;main.c: 560: else {
  2682                           ;main.c: 564: setpoint =
  2683                           ;main.c: 565: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2684                           ;main.c: 566: readEEPROM(2 * i + 0x5C));
  2685  001A74  0101               	movlb	1	; () banked
  2686  001A76  519B               	movf	doWork@i& (0+255),w,b
  2687  001A78  0D02               	mullw	2
  2688  001A7A  0E5C               	movlw	92
  2689  001A7C  24F3               	addwf	prodl,w,c
  2690  001A7E  6E0E               	movwf	?_readEEPROM,c
  2691  001A80  0E00               	movlw	0
  2692  001A82  20F4               	addwfc	prodh,w,c
  2693  001A84  6E0F               	movwf	?_readEEPROM+1,c
  2694  001A86  EC00  F02C         	call	_readEEPROM	;wreg free
  2695  001A8A  0100               	movlb	0	; () banked
  2696  001A8C  6FA4               	movwf	??_doWork& (0+255),b
  2697  001A8E  0101               	movlb	1	; () banked
  2698  001A90  519B               	movf	doWork@i& (0+255),w,b
  2699  001A92  0D02               	mullw	2
  2700  001A94  0E5B               	movlw	91
  2701  001A96  24F3               	addwf	prodl,w,c
  2702  001A98  6E0E               	movwf	?_readEEPROM,c
  2703  001A9A  0E00               	movlw	0
  2704  001A9C  20F4               	addwfc	prodh,w,c
  2705  001A9E  6E0F               	movwf	?_readEEPROM+1,c
  2706  001AA0  EC00  F02C         	call	_readEEPROM	;wreg free
  2707  001AA4  0100               	movlb	0	; () banked
  2708  001AA6  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2709  001AA8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2710  001AAA  51A4               	movf	??_doWork& (0+255),w,b
  2711  001AAC  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  2712  001AAE  0101               	movlb	1	; () banked
  2713  001AB0  6F95               	movwf	doWork@setpoint& (0+255),b
  2714  001AB2  0100               	movlb	0	; () banked
  2715  001AB4  0E00               	movlw	0
  2716  001AB6  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  2717  001AB8  0101               	movlb	1	; () banked
  2718  001ABA  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2719                           
  2720                           ; BSR set to: 1
  2721                           ;main.c: 568: if (current_temp[ i ] < setpoint) {
  2722  001ABC  519B               	movf	doWork@i& (0+255),w,b
  2723  001ABE  0D02               	mullw	2
  2724  001AC0  0E00               	movlw	low _current_temp
  2725  001AC2  24F3               	addwf	prodl,w,c
  2726  001AC4  6ED9               	movwf	fsr2l,c
  2727  001AC6  0E01               	movlw	high _current_temp
  2728  001AC8  20F4               	addwfc	prodh,w,c
  2729  001ACA  6EDA               	movwf	fsr2h,c
  2730  001ACC  CFDE F0A4          	movff	postinc2,??_doWork
  2731  001AD0  CFDD F0A5          	movff	postdec2,??_doWork+1
  2732  001AD4  0100               	movlb	0	; () banked
  2733  001AD6  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2734  001AD8  0A80               	xorlw	128
  2735  001ADA  6FA6               	movwf	(??_doWork+2)& (0+255),b
  2736  001ADC  0101               	movlb	1	; () banked
  2737  001ADE  5195               	movf	doWork@setpoint& (0+255),w,b
  2738  001AE0  0100               	movlb	0	; () banked
  2739  001AE2  5DA4               	subwf	??_doWork& (0+255),w,b
  2740  001AE4  0101               	movlb	1	; () banked
  2741  001AE6  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  2742  001AE8  0A80               	xorlw	128
  2743  001AEA  0100               	movlb	0	; () banked
  2744  001AEC  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  2745  001AEE  E26F               	bc	l206
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 571: low_alarm |= (1 << i);
  2749  001AF0  C19B  F0A4         	movff	doWork@i,??_doWork
  2750  001AF4  0E01               	movlw	1
  2751  001AF6  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2752  001AF8  2BA4               	incf	??_doWork& (0+255),f,b
  2753  001AFA  D002               	goto	u10634
  2754  001AFC                     u10635:
  2755  001AFC  90D8               	bcf	status,0,c
  2756  001AFE  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2757  001B00                     u10634:
  2758  001B00  2FA4               	decfsz	??_doWork& (0+255),f,b
  2759  001B02  D7FC               	goto	u10635
  2760  001B04  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2761  001B06  13B5               	iorwf	_low_alarm& (0+255),f,b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;main.c: 576: vscp_alarmstatus |= 1;
  2765  001B08  804B               	bsf	_vscp_alarmstatus,0,c
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 579: if (readEEPROM(i + 0x43) & (1<<3)) {
  2769  001B0A  0E43               	movlw	67
  2770  001B0C  0101               	movlb	1	; () banked
  2771  001B0E  259B               	addwf	doWork@i& (0+255),w,b
  2772  001B10  6E0E               	movwf	?_readEEPROM,c
  2773  001B12  6A0F               	clrf	?_readEEPROM+1,c
  2774  001B14  0E00               	movlw	0
  2775  001B16  220F               	addwfc	?_readEEPROM+1,f,c
  2776  001B18  EC00  F02C         	call	_readEEPROM	;wreg free
  2777  001B1C  0100               	movlb	0	; () banked
  2778  001B1E  6FA4               	movwf	??_doWork& (0+255),b
  2779  001B20  A7A4               	btfss	??_doWork& (0+255),3,b
  2780  001B22  D055               	goto	l206
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 581: vscp_omsg.vscp_class = 1;
  2784  001B24  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2785  001B26  0E01               	movlw	1
  2786  001B28  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2787                           
  2788                           ;main.c: 582: vscp_omsg.vscp_type = 2;
  2789  001B2A  0E02               	movlw	2
  2790  001B2C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;main.c: 583: vscp_omsg.priority = 0x00;
  2794  001B2E  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  2795                           
  2796                           ;main.c: 584: vscp_omsg.flags = 0x80 + 3;
  2797  001B30  0E83               	movlw	131
  2798  001B32  6FCA               	movwf	_vscp_omsg& (0+255),b
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 587: if (readEEPROM(i + 0x43) & (1<<5)) {
  2802  001B34  0E43               	movlw	67
  2803  001B36  0101               	movlb	1	; () banked
  2804  001B38  259B               	addwf	doWork@i& (0+255),w,b
  2805  001B3A  6E0E               	movwf	?_readEEPROM,c
  2806  001B3C  6A0F               	clrf	?_readEEPROM+1,c
  2807  001B3E  0E00               	movlw	0
  2808  001B40  220F               	addwfc	?_readEEPROM+1,f,c
  2809  001B42  EC00  F02C         	call	_readEEPROM	;wreg free
  2810  001B46  0100               	movlb	0	; () banked
  2811  001B48  6FA4               	movwf	??_doWork& (0+255),b
  2812  001B4A  ABA4               	btfss	??_doWork& (0+255),5,b
  2813  001B4C  D017               	goto	l12142
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 589: if (readEEPROM(i + 0x43) & (1<<6)) {
  2817  001B4E  0E43               	movlw	67
  2818  001B50  0101               	movlb	1	; () banked
  2819  001B52  259B               	addwf	doWork@i& (0+255),w,b
  2820  001B54  6E0E               	movwf	?_readEEPROM,c
  2821  001B56  6A0F               	clrf	?_readEEPROM+1,c
  2822  001B58  0E00               	movlw	0
  2823  001B5A  220F               	addwfc	?_readEEPROM+1,f,c
  2824  001B5C  EC00  F02C         	call	_readEEPROM	;wreg free
  2825  001B60  0100               	movlb	0	; () banked
  2826  001B62  6FA4               	movwf	??_doWork& (0+255),b
  2827  001B64  ADA4               	btfss	??_doWork& (0+255),6,b
  2828  001B66  D005               	goto	l12140
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;main.c: 590: vscp_omsg.vscp_class = 30;
  2832  001B68  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2833  001B6A  0E1E               	movlw	30
  2834  001B6C  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2835                           
  2836                           ;main.c: 591: vscp_omsg.vscp_type = 5;
  2837  001B6E  0E05               	movlw	5
  2838  001B70  D004               	goto	L1
  2839  001B72                     l12140:
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;main.c: 593: else {
  2843                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  2844  001B72  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  2845  001B74  0E1E               	movlw	30
  2846  001B76  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  2847                           
  2848                           ;main.c: 595: vscp_omsg.vscp_type = 6;
  2849  001B78  0E06               	movlw	6
  2850  001B7A                     L1:
  2851  001B7A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  2852  001B7C                     l12142:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 596: }
  2856                           ;main.c: 598: }
  2857                           ;main.c: 600: vscp_omsg.data[ 0 ] = i;
  2858  001B7C  C19B  F0CF         	movff	doWork@i,_vscp_omsg+5
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;main.c: 601: vscp_omsg.data[ 1 ] =
  2862                           ;main.c: 602: readEEPROM(2 * i + 0x73);
  2863  001B80  90D8               	bcf	status,0,c
  2864  001B82  0101               	movlb	1	; () banked
  2865  001B84  359B               	rlcf	doWork@i& (0+255),w,b
  2866  001B86  0100               	movlb	0	; () banked
  2867  001B88  6FA4               	movwf	??_doWork& (0+255),b
  2868  001B8A  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2869  001B8C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2870  001B8E  0E73               	movlw	115
  2871  001B90  25A4               	addwf	??_doWork& (0+255),w,b
  2872  001B92  6E0E               	movwf	?_readEEPROM,c
  2873  001B94  0E00               	movlw	0
  2874  001B96  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2875  001B98  6E0F               	movwf	?_readEEPROM+1,c
  2876  001B9A  EC00  F02C         	call	_readEEPROM	;wreg free
  2877  001B9E  0100               	movlb	0	; () banked
  2878  001BA0  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;main.c: 603: vscp_omsg.data[ 2 ] =
  2882                           ;main.c: 604: readEEPROM(2 * i + 0x74);
  2883  001BA2  90D8               	bcf	status,0,c
  2884  001BA4  0101               	movlb	1	; () banked
  2885  001BA6  359B               	rlcf	doWork@i& (0+255),w,b
  2886  001BA8  0100               	movlb	0	; () banked
  2887  001BAA  6FA4               	movwf	??_doWork& (0+255),b
  2888  001BAC  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2889  001BAE  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2890  001BB0  0E74               	movlw	116
  2891  001BB2  25A4               	addwf	??_doWork& (0+255),w,b
  2892  001BB4  6E0E               	movwf	?_readEEPROM,c
  2893  001BB6  0E00               	movlw	0
  2894  001BB8  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2895  001BBA  6E0F               	movwf	?_readEEPROM+1,c
  2896  001BBC  EC00  F02C         	call	_readEEPROM	;wreg free
  2897  001BC0  0100               	movlb	0	; () banked
  2898  001BC2  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;main.c: 607: if (!vscp_sendEvent()) {
  2902  001BC4  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  2903  001BC8  0900               	iorlw	0
  2904  001BCA  E101 D746          	bz	l12118
  2905  001BCE                     l206:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 611: }
  2909                           ;main.c: 612: }
  2910                           ;main.c: 613: }
  2911                           ;main.c: 614: }
  2912                           ;main.c: 617: if ( high_alarm & (1 << i ) ) {
  2913  001BCE  C19B  F0A4         	movff	doWork@i,??_doWork
  2914  001BD2  0E01               	movlw	1
  2915  001BD4  6FA5               	movwf	(??_doWork+1)& (0+255),b
  2916  001BD6  2BA4               	incf	??_doWork& (0+255),f,b
  2917  001BD8  D002               	goto	u10684
  2918  001BDA                     u10685:
  2919  001BDA  90D8               	bcf	status,0,c
  2920  001BDC  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2921  001BDE                     u10684:
  2922  001BDE  2FA4               	decfsz	??_doWork& (0+255),f,b
  2923  001BE0  D7FC               	goto	u10685
  2924  001BE2  51A5               	movf	(??_doWork+1)& (0+255),w,b
  2925  001BE4  15B4               	andwf	_high_alarm& (0+255),w,b
  2926  001BE6  E067               	bz	l12158
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;main.c: 621: setpoint =
  2930                           ;main.c: 622: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2931                           ;main.c: 623: readEEPROM(2 * i + 0x68) -
  2932                           ;main.c: 624: readEEPROM(i + 0x97)*100);
  2933  001BE8  90D8               	bcf	status,0,c
  2934  001BEA  0101               	movlb	1	; () banked
  2935  001BEC  359B               	rlcf	doWork@i& (0+255),w,b
  2936  001BEE  0100               	movlb	0	; () banked
  2937  001BF0  6FA4               	movwf	??_doWork& (0+255),b
  2938  001BF2  6BA5               	clrf	(??_doWork+1)& (0+255),b
  2939  001BF4  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  2940  001BF6  0E67               	movlw	103
  2941  001BF8  25A4               	addwf	??_doWork& (0+255),w,b
  2942  001BFA  6E0E               	movwf	?_readEEPROM,c
  2943  001BFC  0E00               	movlw	0
  2944  001BFE  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  2945  001C00  6E0F               	movwf	?_readEEPROM+1,c
  2946  001C02  EC00  F02C         	call	_readEEPROM	;wreg free
  2947  001C06  0100               	movlb	0	; () banked
  2948  001C08  6FA7               	movwf	(??_doWork+3)& (0+255),b
  2949  001C0A  6BA6               	clrf	(??_doWork+2)& (0+255),b
  2950  001C0C  90D8               	bcf	status,0,c
  2951  001C0E  0101               	movlb	1	; () banked
  2952  001C10  359B               	rlcf	doWork@i& (0+255),w,b
  2953  001C12  0100               	movlb	0	; () banked
  2954  001C14  6FA8               	movwf	(??_doWork+4)& (0+255),b
  2955  001C16  6BA9               	clrf	(??_doWork+5)& (0+255),b
  2956  001C18  37A9               	rlcf	(??_doWork+5)& (0+255),f,b
  2957  001C1A  0E68               	movlw	104
  2958  001C1C  25A8               	addwf	(??_doWork+4)& (0+255),w,b
  2959  001C1E  6E0E               	movwf	?_readEEPROM,c
  2960  001C20  0E00               	movlw	0
  2961  001C22  21A9               	addwfc	(??_doWork+5)& (0+255),w,b
  2962  001C24  6E0F               	movwf	?_readEEPROM+1,c
  2963  001C26  EC00  F02C         	call	_readEEPROM	;wreg free
  2964  001C2A  0100               	movlb	0	; () banked
  2965  001C2C  27A6               	addwf	(??_doWork+2)& (0+255),f,b
  2966  001C2E  0E00               	movlw	0
  2967  001C30  23A7               	addwfc	(??_doWork+3)& (0+255),f,b
  2968  001C32  0E97               	movlw	151
  2969  001C34  0101               	movlb	1	; () banked
  2970  001C36  259B               	addwf	doWork@i& (0+255),w,b
  2971  001C38  6E0E               	movwf	?_readEEPROM,c
  2972  001C3A  6A0F               	clrf	?_readEEPROM+1,c
  2973  001C3C  0E00               	movlw	0
  2974  001C3E  220F               	addwfc	?_readEEPROM+1,f,c
  2975  001C40  EC00  F02C         	call	_readEEPROM	;wreg free
  2976  001C44  6E12               	movwf	?___wmul,c
  2977  001C46  6A13               	clrf	?___wmul+1,c
  2978  001C48  6815               	setf	?___wmul+3,c
  2979  001C4A  0E9C               	movlw	156
  2980  001C4C  6E14               	movwf	?___wmul+2,c
  2981  001C4E  EC01  F02A         	call	___wmul	;wreg free
  2982  001C52  5012               	movf	?___wmul,w,c
  2983  001C54  0100               	movlb	0	; () banked
  2984  001C56  25A6               	addwf	(??_doWork+2)& (0+255),w,b
  2985  001C58  0101               	movlb	1	; () banked
  2986  001C5A  6F95               	movwf	doWork@setpoint& (0+255),b
  2987  001C5C  5013               	movf	?___wmul+1,w,c
  2988  001C5E  0100               	movlb	0	; () banked
  2989  001C60  21A7               	addwfc	(??_doWork+3)& (0+255),w,b
  2990  001C62  0101               	movlb	1	; () banked
  2991  001C64  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  2992                           
  2993                           ; BSR set to: 1
  2994                           ;main.c: 627: if (current_temp[ i ] < setpoint) {
  2995  001C66  519B               	movf	doWork@i& (0+255),w,b
  2996  001C68  0D02               	mullw	2
  2997  001C6A  0E00               	movlw	low _current_temp
  2998  001C6C  24F3               	addwf	prodl,w,c
  2999  001C6E  6ED9               	movwf	fsr2l,c
  3000  001C70  0E01               	movlw	high _current_temp
  3001  001C72  20F4               	addwfc	prodh,w,c
  3002  001C74  6EDA               	movwf	fsr2h,c
  3003  001C76  CFDE F0A4          	movff	postinc2,??_doWork
  3004  001C7A  CFDD F0A5          	movff	postdec2,??_doWork+1
  3005  001C7E  0100               	movlb	0	; () banked
  3006  001C80  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3007  001C82  0A80               	xorlw	128
  3008  001C84  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3009  001C86  0101               	movlb	1	; () banked
  3010  001C88  5195               	movf	doWork@setpoint& (0+255),w,b
  3011  001C8A  0100               	movlb	0	; () banked
  3012  001C8C  5DA4               	subwf	??_doWork& (0+255),w,b
  3013  001C8E  0101               	movlb	1	; () banked
  3014  001C90  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  3015  001C92  0A80               	xorlw	128
  3016  001C94  0100               	movlb	0	; () banked
  3017  001C96  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3018  001C98  E301 D0B8          	bc	l12190
  3019  001C9C                     l12156:
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;main.c: 630: high_alarm &= ~(1 << i);
  3023  001C9C  C19B  F0A4         	movff	doWork@i,??_doWork
  3024  001CA0  0E01               	movlw	1
  3025  001CA2  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3026  001CA4  2BA4               	incf	??_doWork& (0+255),f,b
  3027  001CA6  D002               	goto	u10714
  3028  001CA8                     u10715:
  3029  001CA8  90D8               	bcf	status,0,c
  3030  001CAA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3031  001CAC                     u10714:
  3032  001CAC  2FA4               	decfsz	??_doWork& (0+255),f,b
  3033  001CAE  D7FC               	goto	u10715
  3034  001CB0  1DA5               	comf	(??_doWork+1)& (0+255),w,b
  3035  001CB2  17B4               	andwf	_high_alarm& (0+255),f,b
  3036  001CB4  D0AB               	goto	l12190
  3037  001CB6                     l12158:
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;main.c: 635: else {
  3041                           ;main.c: 640: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  3042                           ;main.c: 641: readEEPROM(2 * i + 0x68));
  3043  001CB6  0101               	movlb	1	; () banked
  3044  001CB8  519B               	movf	doWork@i& (0+255),w,b
  3045  001CBA  0D02               	mullw	2
  3046  001CBC  0E68               	movlw	104
  3047  001CBE  24F3               	addwf	prodl,w,c
  3048  001CC0  6E0E               	movwf	?_readEEPROM,c
  3049  001CC2  0E00               	movlw	0
  3050  001CC4  20F4               	addwfc	prodh,w,c
  3051  001CC6  6E0F               	movwf	?_readEEPROM+1,c
  3052  001CC8  EC00  F02C         	call	_readEEPROM	;wreg free
  3053  001CCC  0100               	movlb	0	; () banked
  3054  001CCE  6FA4               	movwf	??_doWork& (0+255),b
  3055  001CD0  0101               	movlb	1	; () banked
  3056  001CD2  519B               	movf	doWork@i& (0+255),w,b
  3057  001CD4  0D02               	mullw	2
  3058  001CD6  0E67               	movlw	103
  3059  001CD8  24F3               	addwf	prodl,w,c
  3060  001CDA  6E0E               	movwf	?_readEEPROM,c
  3061  001CDC  0E00               	movlw	0
  3062  001CDE  20F4               	addwfc	prodh,w,c
  3063  001CE0  6E0F               	movwf	?_readEEPROM+1,c
  3064  001CE2  EC00  F02C         	call	_readEEPROM	;wreg free
  3065  001CE6  0100               	movlb	0	; () banked
  3066  001CE8  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3067  001CEA  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3068  001CEC  51A4               	movf	??_doWork& (0+255),w,b
  3069  001CEE  25A5               	addwf	(??_doWork+1)& (0+255),w,b
  3070  001CF0  0101               	movlb	1	; () banked
  3071  001CF2  6F95               	movwf	doWork@setpoint& (0+255),b
  3072  001CF4  0100               	movlb	0	; () banked
  3073  001CF6  0E00               	movlw	0
  3074  001CF8  21A6               	addwfc	(??_doWork+2)& (0+255),w,b
  3075  001CFA  0101               	movlb	1	; () banked
  3076  001CFC  6F96               	movwf	(doWork@setpoint+1)& (0+255),b
  3077                           
  3078                           ; BSR set to: 1
  3079                           ;main.c: 643: if (current_temp[ i ] > setpoint) {
  3080  001CFE  519B               	movf	doWork@i& (0+255),w,b
  3081  001D00  0D02               	mullw	2
  3082  001D02  0E00               	movlw	low _current_temp
  3083  001D04  24F3               	addwf	prodl,w,c
  3084  001D06  6ED9               	movwf	fsr2l,c
  3085  001D08  0E01               	movlw	high _current_temp
  3086  001D0A  20F4               	addwfc	prodh,w,c
  3087  001D0C  6EDA               	movwf	fsr2h,c
  3088  001D0E  CFDE F0A4          	movff	postinc2,??_doWork
  3089  001D12  CFDD F0A5          	movff	postdec2,??_doWork+1
  3090  001D16  5196               	movf	(doWork@setpoint+1)& (0+255),w,b
  3091  001D18  0A80               	xorlw	128
  3092  001D1A  0100               	movlb	0	; () banked
  3093  001D1C  6FA6               	movwf	(??_doWork+2)& (0+255),b
  3094  001D1E  51A4               	movf	??_doWork& (0+255),w,b
  3095  001D20  0101               	movlb	1	; () banked
  3096  001D22  5D95               	subwf	doWork@setpoint& (0+255),w,b
  3097  001D24  0100               	movlb	0	; () banked
  3098  001D26  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3099  001D28  0A80               	xorlw	128
  3100  001D2A  59A6               	subwfb	(??_doWork+2)& (0+255),w,b
  3101  001D2C  E26F               	bc	l12190
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;main.c: 646: high_alarm |= (1 << i);
  3105  001D2E  C19B  F0A4         	movff	doWork@i,??_doWork
  3106  001D32  0E01               	movlw	1
  3107  001D34  6FA5               	movwf	(??_doWork+1)& (0+255),b
  3108  001D36  2BA4               	incf	??_doWork& (0+255),f,b
  3109  001D38  D002               	goto	u10734
  3110  001D3A                     u10735:
  3111  001D3A  90D8               	bcf	status,0,c
  3112  001D3C  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3113  001D3E                     u10734:
  3114  001D3E  2FA4               	decfsz	??_doWork& (0+255),f,b
  3115  001D40  D7FC               	goto	u10735
  3116  001D42  51A5               	movf	(??_doWork+1)& (0+255),w,b
  3117  001D44  13B4               	iorwf	_high_alarm& (0+255),f,b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 652: vscp_alarmstatus |= 2;
  3121  001D46  824B               	bsf	_vscp_alarmstatus,1,c
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 655: if (readEEPROM(i + 0x43) & (1<<4)) {
  3125  001D48  0E43               	movlw	67
  3126  001D4A  0101               	movlb	1	; () banked
  3127  001D4C  259B               	addwf	doWork@i& (0+255),w,b
  3128  001D4E  6E0E               	movwf	?_readEEPROM,c
  3129  001D50  6A0F               	clrf	?_readEEPROM+1,c
  3130  001D52  0E00               	movlw	0
  3131  001D54  220F               	addwfc	?_readEEPROM+1,f,c
  3132  001D56  EC00  F02C         	call	_readEEPROM	;wreg free
  3133  001D5A  0100               	movlb	0	; () banked
  3134  001D5C  6FA4               	movwf	??_doWork& (0+255),b
  3135  001D5E  A9A4               	btfss	??_doWork& (0+255),4,b
  3136  001D60  D055               	goto	l12190
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;main.c: 657: vscp_omsg.vscp_class = 1;
  3140  001D62  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3141  001D64  0E01               	movlw	1
  3142  001D66  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3143                           
  3144                           ;main.c: 658: vscp_omsg.vscp_type = 2;
  3145  001D68  0E02               	movlw	2
  3146  001D6A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 659: vscp_omsg.priority = 0x00;
  3150  001D6C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  3151                           
  3152                           ;main.c: 660: vscp_omsg.flags = 0x80 + 3;
  3153  001D6E  0E83               	movlw	131
  3154  001D70  6FCA               	movwf	_vscp_omsg& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;main.c: 662: if (readEEPROM(i + 0x43) & (1<<5)) {
  3158  001D72  0E43               	movlw	67
  3159  001D74  0101               	movlb	1	; () banked
  3160  001D76  259B               	addwf	doWork@i& (0+255),w,b
  3161  001D78  6E0E               	movwf	?_readEEPROM,c
  3162  001D7A  6A0F               	clrf	?_readEEPROM+1,c
  3163  001D7C  0E00               	movlw	0
  3164  001D7E  220F               	addwfc	?_readEEPROM+1,f,c
  3165  001D80  EC00  F02C         	call	_readEEPROM	;wreg free
  3166  001D84  0100               	movlb	0	; () banked
  3167  001D86  6FA4               	movwf	??_doWork& (0+255),b
  3168  001D88  ABA4               	btfss	??_doWork& (0+255),5,b
  3169  001D8A  D017               	goto	l12180
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 663: if (readEEPROM(i + 0x43) & (1<<6)) {
  3173  001D8C  0E43               	movlw	67
  3174  001D8E  0101               	movlb	1	; () banked
  3175  001D90  259B               	addwf	doWork@i& (0+255),w,b
  3176  001D92  6E0E               	movwf	?_readEEPROM,c
  3177  001D94  6A0F               	clrf	?_readEEPROM+1,c
  3178  001D96  0E00               	movlw	0
  3179  001D98  220F               	addwfc	?_readEEPROM+1,f,c
  3180  001D9A  EC00  F02C         	call	_readEEPROM	;wreg free
  3181  001D9E  0100               	movlb	0	; () banked
  3182  001DA0  6FA4               	movwf	??_doWork& (0+255),b
  3183  001DA2  ADA4               	btfss	??_doWork& (0+255),6,b
  3184  001DA4  D005               	goto	l12178
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 664: vscp_omsg.vscp_class = 30;
  3188  001DA6  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3189  001DA8  0E1E               	movlw	30
  3190  001DAA  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3191                           
  3192                           ;main.c: 665: vscp_omsg.vscp_type = 6;
  3193  001DAC  0E06               	movlw	6
  3194  001DAE  D004               	goto	L2
  3195  001DB0                     l12178:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 667: vscp_omsg.vscp_class = 30;
  3199  001DB0  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  3200  001DB2  0E1E               	movlw	30
  3201  001DB4  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  3202                           
  3203                           ;main.c: 668: vscp_omsg.vscp_type = 5;
  3204  001DB6  0E05               	movlw	5
  3205  001DB8                     L2:
  3206  001DB8  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  3207  001DBA                     l12180:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 669: }
  3211                           ;main.c: 670: }
  3212                           ;main.c: 672: vscp_omsg.data[ 0 ] = i;
  3213  001DBA  C19B  F0CF         	movff	doWork@i,_vscp_omsg+5
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 673: vscp_omsg.data[ 1 ] =
  3217                           ;main.c: 674: readEEPROM(2 * i +
  3218                           ;main.c: 675: 0x73);
  3219  001DBE  90D8               	bcf	status,0,c
  3220  001DC0  0101               	movlb	1	; () banked
  3221  001DC2  359B               	rlcf	doWork@i& (0+255),w,b
  3222  001DC4  0100               	movlb	0	; () banked
  3223  001DC6  6FA4               	movwf	??_doWork& (0+255),b
  3224  001DC8  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3225  001DCA  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3226  001DCC  0E73               	movlw	115
  3227  001DCE  25A4               	addwf	??_doWork& (0+255),w,b
  3228  001DD0  6E0E               	movwf	?_readEEPROM,c
  3229  001DD2  0E00               	movlw	0
  3230  001DD4  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3231  001DD6  6E0F               	movwf	?_readEEPROM+1,c
  3232  001DD8  EC00  F02C         	call	_readEEPROM	;wreg free
  3233  001DDC  0100               	movlb	0	; () banked
  3234  001DDE  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 676: vscp_omsg.data[ 2 ] =
  3238                           ;main.c: 677: readEEPROM(2 * i +
  3239                           ;main.c: 678: 0x74);
  3240  001DE0  90D8               	bcf	status,0,c
  3241  001DE2  0101               	movlb	1	; () banked
  3242  001DE4  359B               	rlcf	doWork@i& (0+255),w,b
  3243  001DE6  0100               	movlb	0	; () banked
  3244  001DE8  6FA4               	movwf	??_doWork& (0+255),b
  3245  001DEA  6BA5               	clrf	(??_doWork+1)& (0+255),b
  3246  001DEC  37A5               	rlcf	(??_doWork+1)& (0+255),f,b
  3247  001DEE  0E74               	movlw	116
  3248  001DF0  25A4               	addwf	??_doWork& (0+255),w,b
  3249  001DF2  6E0E               	movwf	?_readEEPROM,c
  3250  001DF4  0E00               	movlw	0
  3251  001DF6  21A5               	addwfc	(??_doWork+1)& (0+255),w,b
  3252  001DF8  6E0F               	movwf	?_readEEPROM+1,c
  3253  001DFA  EC00  F02C         	call	_readEEPROM	;wreg free
  3254  001DFE  0100               	movlb	0	; () banked
  3255  001E00  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;main.c: 681: if (!vscp_sendEvent()) {
  3259  001E02  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  3260  001E06  0900               	iorlw	0
  3261  001E08  E101 D748          	bz	l12156
  3262  001E0C                     l12190:
  3263                           
  3264                           ; BSR set to: 0
  3265  001E0C  0101               	movlb	1	; () banked
  3266  001E0E  2B9B               	incf	doWork@i& (0+255),f,b
  3267  001E10  0E05               	movlw	5
  3268  001E12  659B               	cpfsgt	doWork@i& (0+255),b
  3269  001E14  D5BE               	goto	l12112
  3270  001E16                     l222:
  3271  001E16  0012               	return	
  3272  001E18                     __end_of_doWork:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           prodh	equ	0xFF4
  3276                           prodl	equ	0xFF3
  3277                           postinc0	equ	0xFEE
  3278                           wreg	equ	0xFE8
  3279                           postdec1	equ	0xFE5
  3280                           fsr1h	equ	0xFE2
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           fsr2h	equ	0xFDA
  3286                           fsr2l	equ	0xFD9
  3287                           status	equ	0xFD8
  3288                           
  3289 ;; *************** function ___lwtofl *****************
  3290 ;; Defined at:
  3291 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;  c               2   23[COMRAM] unsigned int 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  4   23[COMRAM] unsigned int 
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, status,0, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3305 ;;      Params:         4       0       0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0       0       0
  3308 ;;      Totals:         4       0       0       0       0       0       0
  3309 ;;Total ram usage:        4 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    3
  3312 ;; This function calls:
  3313 ;;		___flpack
  3314 ;; This function is called by:
  3315 ;;		_doWork
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           	psect	text2
  3320  005506                     __ptext2:
  3321                           	opt stack 0
  3322  005506                     ___lwtofl:
  3323                           	opt stack 26
  3324                           
  3325                           ;incstack = 0
  3326                           ;incstack = 0
  3327  005506  C018  F00E         	movff	___lwtofl@c,?___flpack
  3328  00550A  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3329  00550E  6A10               	clrf	?___flpack+2,c
  3330  005510  6A11               	clrf	?___flpack+3,c
  3331  005512  0E96               	movlw	150
  3332  005514  6E12               	movwf	?___flpack+4,c
  3333  005516  0E00               	movlw	0
  3334  005518  6A13               	clrf	?___flpack+5,c
  3335  00551A  EC50  F023         	call	___flpack	;wreg free
  3336  00551E  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3337  005522  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3338  005526  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3339  00552A  C00E  F018         	movff	?___flpack,?___lwtofl
  3340  00552E  0012               	return	
  3341  005530                     __end_of___lwtofl:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postdec1	equ	0xFE5
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function ___asfldiv *****************
  3359 ;; Defined at:
  3360 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  f1p             2    0[BANK0 ] PTR 
  3363 ;;		 -> doWork@avarage(4), 
  3364 ;;  f2              4    2[BANK0 ] PTR 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;		None
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  4    0[BANK0 ] PTR 
  3369 ;; Registers used:
  3370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : F/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3376 ;;      Params:         0       6       0       0       0       0       0
  3377 ;;      Locals:         0       0       0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0
  3379 ;;      Totals:         0       6       0       0       0       0       0
  3380 ;;Total ram usage:        6 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    4
  3383 ;; This function calls:
  3384 ;;		___fldiv
  3385 ;; This function is called by:
  3386 ;;		_doWork
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text3
  3391  00511A                     __ptext3:
  3392                           	opt stack 0
  3393  00511A                     ___asfldiv:
  3394                           	opt stack 25
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;	Return value of ___asfldiv is never used
  3398                           
  3399                           ;incstack = 0
  3400                           ;incstack = 0
  3401  00511A  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3402  00511E  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3403  005122  CFDE F02C          	movff	postinc2,?___fldiv
  3404  005126  CFDE F02D          	movff	postinc2,?___fldiv+1
  3405  00512A  CFDE F02E          	movff	postinc2,?___fldiv+2
  3406  00512E  CFDE F02F          	movff	postinc2,?___fldiv+3
  3407  005132  C062  F030         	movff	___asfldiv@f2,?___fldiv+4
  3408  005136  C063  F031         	movff	___asfldiv@f2+1,?___fldiv+5
  3409  00513A  C064  F032         	movff	___asfldiv@f2+2,?___fldiv+6
  3410  00513E  C065  F033         	movff	___asfldiv@f2+3,?___fldiv+7
  3411  005142  ECBF  F024         	call	___fldiv	;wreg free
  3412  005146  C060  FFD9         	movff	___asfldiv@f1p,fsr2l
  3413  00514A  C061  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3414  00514E  C02C  FFDE         	movff	?___fldiv,postinc2
  3415  005152  C02D  FFDE         	movff	?___fldiv+1,postinc2
  3416  005156  C02E  FFDE         	movff	?___fldiv+2,postinc2
  3417  00515A  C02F  FFDD         	movff	?___fldiv+3,postdec2
  3418  00515E  06D9               	decf	fsr2l,f,c
  3419  005160  06D9               	decf	fsr2l,f,c
  3420  005162  0012               	return	
  3421  005164                     __end_of___asfldiv:
  3422                           	opt stack 0
  3423                           tblptru	equ	0xFF8
  3424                           prodh	equ	0xFF4
  3425                           prodl	equ	0xFF3
  3426                           postinc0	equ	0xFEE
  3427                           wreg	equ	0xFE8
  3428                           postdec1	equ	0xFE5
  3429                           fsr1h	equ	0xFE2
  3430                           fsr1l	equ	0xFE1
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           fsr2h	equ	0xFDA
  3435                           fsr2l	equ	0xFD9
  3436                           status	equ	0xFD8
  3437                           
  3438 ;; *************** function ___asfladd *****************
  3439 ;; Defined at:
  3440 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  f1p             2   43[COMRAM] PTR 
  3443 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3444 ;;  f2              4   45[COMRAM] PTR 
  3445 ;; Auto vars:     Size  Location     Type
  3446 ;;		None
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  4   43[COMRAM] PTR 
  3449 ;; Registers used:
  3450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3456 ;;      Params:         6       0       0       0       0       0       0
  3457 ;;      Locals:         0       0       0       0       0       0       0
  3458 ;;      Temps:          0       0       0       0       0       0       0
  3459 ;;      Totals:         6       0       0       0       0       0       0
  3460 ;;Total ram usage:        6 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    4
  3463 ;; This function calls:
  3464 ;;		___fladd
  3465 ;; This function is called by:
  3466 ;;		_doWork
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text4
  3471  005164                     __ptext4:
  3472                           	opt stack 0
  3473  005164                     ___asfladd:
  3474                           	opt stack 25
  3475                           
  3476                           ;	Return value of ___asfladd is never used
  3477                           
  3478                           ;incstack = 0
  3479                           ;incstack = 0
  3480  005164  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3481  005168  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3482  00516C  CFDE F01D          	movff	postinc2,?___fladd
  3483  005170  CFDE F01E          	movff	postinc2,?___fladd+1
  3484  005174  CFDE F01F          	movff	postinc2,?___fladd+2
  3485  005178  CFDE F020          	movff	postinc2,?___fladd+3
  3486  00517C  C02E  F021         	movff	___asfladd@f2,?___fladd+4
  3487  005180  C02F  F022         	movff	___asfladd@f2+1,?___fladd+5
  3488  005184  C030  F023         	movff	___asfladd@f2+2,?___fladd+6
  3489  005188  C031  F024         	movff	___asfladd@f2+3,?___fladd+7
  3490  00518C  ECCA  F01E         	call	___fladd	;wreg free
  3491  005190  C02C  FFD9         	movff	___asfladd@f1p,fsr2l
  3492  005194  C02D  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3493  005198  C01D  FFDE         	movff	?___fladd,postinc2
  3494  00519C  C01E  FFDE         	movff	?___fladd+1,postinc2
  3495  0051A0  C01F  FFDE         	movff	?___fladd+2,postinc2
  3496  0051A4  C020  FFDD         	movff	?___fladd+3,postdec2
  3497  0051A8  06D9               	decf	fsr2l,f,c
  3498  0051AA  06D9               	decf	fsr2l,f,c
  3499  0051AC  0012               	return	
  3500  0051AE                     __end_of___asfladd:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           postinc0	equ	0xFEE
  3506                           wreg	equ	0xFE8
  3507                           postdec1	equ	0xFE5
  3508                           fsr1h	equ	0xFE2
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function ___aldiv *****************
  3518 ;; Defined at:
  3519 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;  dividend        4   28[BANK0 ] long 
  3522 ;;  divisor         4   32[BANK0 ] long 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  quotient        4   38[BANK0 ] long 
  3525 ;;  sign            1   37[BANK0 ] unsigned char 
  3526 ;;  counter         1   36[BANK0 ] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  4   28[BANK0 ] long 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0
  3531 ;; Tracked objects:
  3532 ;;		On entry : F/0
  3533 ;;		On exit  : F/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3536 ;;      Params:         0       8       0       0       0       0       0
  3537 ;;      Locals:         0       6       0       0       0       0       0
  3538 ;;      Temps:          0       0       0       0       0       0       0
  3539 ;;      Totals:         0      14       0       0       0       0       0
  3540 ;;Total ram usage:       14 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; Hardware stack levels required when called:    2
  3543 ;; This function calls:
  3544 ;;		Nothing
  3545 ;; This function is called by:
  3546 ;;		_doWork
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           	psect	text5
  3551  004760                     __ptext5:
  3552                           	opt stack 0
  3553  004760                     ___aldiv:
  3554                           	opt stack 27
  3555                           
  3556                           ; BSR set to: 0
  3557                           
  3558                           ;incstack = 0
  3559                           ;incstack = 0
  3560  004760  6B85               	clrf	___aldiv@sign& (0+255),b
  3561  004762  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3562  004764  D00A               	goto	l11464
  3563                           
  3564                           ; BSR set to: 0
  3565  004766  1F83               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3566  004768  1F82               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3567  00476A  1F81               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3568  00476C  6D80               	negf	___aldiv@divisor& (0+255),b
  3569  00476E  0E00               	movlw	0
  3570  004770  2381               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3571  004772  2382               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3572  004774  2383               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3573                           
  3574                           ; BSR set to: 0
  3575  004776  0E01               	movlw	1
  3576  004778  6F85               	movwf	___aldiv@sign& (0+255),b
  3577  00477A                     l11464:
  3578                           
  3579                           ; BSR set to: 0
  3580  00477A  AF7F               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3581  00477C  D00A               	goto	l11470
  3582                           
  3583                           ; BSR set to: 0
  3584  00477E  1F7F               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3585  004780  1F7E               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3586  004782  1F7D               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3587  004784  6D7C               	negf	___aldiv@dividend& (0+255),b
  3588  004786  0E00               	movlw	0
  3589  004788  237D               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3590  00478A  237E               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3591  00478C  237F               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594  00478E  0E01               	movlw	1
  3595  004790  1B85               	xorwf	___aldiv@sign& (0+255),f,b
  3596  004792                     l11470:
  3597                           
  3598                           ; BSR set to: 0
  3599  004792  6B86               	clrf	___aldiv@quotient& (0+255),b
  3600  004794  6B87               	clrf	(___aldiv@quotient+1)& (0+255),b
  3601  004796  6B88               	clrf	(___aldiv@quotient+2)& (0+255),b
  3602  004798  6B89               	clrf	(___aldiv@quotient+3)& (0+255),b
  3603                           
  3604                           ; BSR set to: 0
  3605  00479A  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3606  00479C  1180               	iorwf	___aldiv@divisor& (0+255),w,b
  3607  00479E  1181               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3608  0047A0  1182               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3609  0047A2  E029               	bz	l11492
  3610                           
  3611                           ; BSR set to: 0
  3612  0047A4  0E01               	movlw	1
  3613  0047A6  6F84               	movwf	___aldiv@counter& (0+255),b
  3614  0047A8  D006               	goto	l11478
  3615  0047AA                     l11476:
  3616                           
  3617                           ; BSR set to: 0
  3618  0047AA  90D8               	bcf	status,0,c
  3619  0047AC  3780               	rlcf	___aldiv@divisor& (0+255),f,b
  3620  0047AE  3781               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3621  0047B0  3782               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3622  0047B2  3783               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3623  0047B4  2B84               	incf	___aldiv@counter& (0+255),f,b
  3624  0047B6                     l11478:
  3625                           
  3626                           ; BSR set to: 0
  3627  0047B6  AF83               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3628  0047B8  D7F8               	goto	l11476
  3629  0047BA                     l11480:
  3630                           
  3631                           ; BSR set to: 0
  3632  0047BA  90D8               	bcf	status,0,c
  3633  0047BC  3786               	rlcf	___aldiv@quotient& (0+255),f,b
  3634  0047BE  3787               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3635  0047C0  3788               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3636  0047C2  3789               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3637                           
  3638                           ; BSR set to: 0
  3639  0047C4  5180               	movf	___aldiv@divisor& (0+255),w,b
  3640  0047C6  5D7C               	subwf	___aldiv@dividend& (0+255),w,b
  3641  0047C8  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3642  0047CA  597D               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3643  0047CC  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3644  0047CE  597E               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3645  0047D0  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3646  0047D2  597F               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3647  0047D4  E309               	bnc	l11488
  3648                           
  3649                           ; BSR set to: 0
  3650  0047D6  5180               	movf	___aldiv@divisor& (0+255),w,b
  3651  0047D8  5F7C               	subwf	___aldiv@dividend& (0+255),f,b
  3652  0047DA  5181               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3653  0047DC  5B7D               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3654  0047DE  5182               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3655  0047E0  5B7E               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3656  0047E2  5183               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3657  0047E4  5B7F               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3658                           
  3659                           ; BSR set to: 0
  3660  0047E6  8186               	bsf	___aldiv@quotient& (0+255),0,b
  3661  0047E8                     l11488:
  3662                           
  3663                           ; BSR set to: 0
  3664  0047E8  90D8               	bcf	status,0,c
  3665  0047EA  3383               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3666  0047EC  3382               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3667  0047EE  3381               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3668  0047F0  3380               	rrcf	___aldiv@divisor& (0+255),f,b
  3669                           
  3670                           ; BSR set to: 0
  3671  0047F2  2F84               	decfsz	___aldiv@counter& (0+255),f,b
  3672  0047F4  D7E2               	goto	l11480
  3673  0047F6                     l11492:
  3674                           
  3675                           ; BSR set to: 0
  3676  0047F6  5185               	movf	___aldiv@sign& (0+255),w,b
  3677  0047F8  E008               	bz	l11496
  3678                           
  3679                           ; BSR set to: 0
  3680  0047FA  1F89               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3681  0047FC  1F88               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3682  0047FE  1F87               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3683  004800  6D86               	negf	___aldiv@quotient& (0+255),b
  3684  004802  0E00               	movlw	0
  3685  004804  2387               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3686  004806  2388               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3687  004808  2389               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3688  00480A                     l11496:
  3689                           
  3690                           ; BSR set to: 0
  3691  00480A  C086  F07C         	movff	___aldiv@quotient,?___aldiv
  3692  00480E  C087  F07D         	movff	___aldiv@quotient+1,?___aldiv+1
  3693  004812  C088  F07E         	movff	___aldiv@quotient+2,?___aldiv+2
  3694  004816  C089  F07F         	movff	___aldiv@quotient+3,?___aldiv+3
  3695                           
  3696                           ; BSR set to: 0
  3697  00481A  0012               	return	
  3698  00481C                     __end_of___aldiv:
  3699                           	opt stack 0
  3700                           tblptru	equ	0xFF8
  3701                           prodh	equ	0xFF4
  3702                           prodl	equ	0xFF3
  3703                           postinc0	equ	0xFEE
  3704                           wreg	equ	0xFE8
  3705                           postdec1	equ	0xFE5
  3706                           fsr1h	equ	0xFE2
  3707                           fsr1l	equ	0xFE1
  3708                           indf2	equ	0xFDF
  3709                           postinc2	equ	0xFDE
  3710                           postdec2	equ	0xFDD
  3711                           fsr2h	equ	0xFDA
  3712                           fsr2l	equ	0xFD9
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function _getCalibrationValue *****************
  3716 ;; Defined at:
  3717 ;;		line 868 in file "../main.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  i               1    wreg     unsigned char 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  i               1   24[COMRAM] unsigned char 
  3722 ;;  cal             2   22[COMRAM] short 
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  2   17[COMRAM] short 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3727 ;; Tracked objects:
  3728 ;;		On entry : F/1
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3732 ;;      Params:         2       0       0       0       0       0       0
  3733 ;;      Locals:         3       0       0       0       0       0       0
  3734 ;;      Temps:          3       0       0       0       0       0       0
  3735 ;;      Totals:         8       0       0       0       0       0       0
  3736 ;;Total ram usage:        8 bytes
  3737 ;; Hardware stack levels used:    1
  3738 ;; Hardware stack levels required when called:    3
  3739 ;; This function calls:
  3740 ;;		_readEEPROM
  3741 ;; This function is called by:
  3742 ;;		_doWork
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text6
  3747  0051AE                     __ptext6:
  3748                           	opt stack 0
  3749  0051AE                     _getCalibrationValue:
  3750                           	opt stack 26
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;incstack = 0
  3754                           ;incstack = 0
  3755                           ;getCalibrationValue@i stored from wreg
  3756  0051AE  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3757                           
  3758                           ; BSR set to: 1
  3759                           ;main.c: 869: int16_t cal;
  3760                           ;main.c: 871: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3761                           ;main.c: 872: readEEPROM(2 * i + 0x9F);
  3762  0051B2  5019               	movf	getCalibrationValue@i,w,c
  3763  0051B4  0D02               	mullw	2
  3764  0051B6  0E9F               	movlw	159
  3765  0051B8  24F3               	addwf	prodl,w,c
  3766  0051BA  6E0E               	movwf	?_readEEPROM,c
  3767  0051BC  0E00               	movlw	0
  3768  0051BE  20F4               	addwfc	prodh,w,c
  3769  0051C0  6E0F               	movwf	?_readEEPROM+1,c
  3770  0051C2  EC00  F02C         	call	_readEEPROM	;wreg free
  3771  0051C6  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3772  0051C8  5019               	movf	getCalibrationValue@i,w,c
  3773  0051CA  0D02               	mullw	2
  3774  0051CC  0E9E               	movlw	158
  3775  0051CE  24F3               	addwf	prodl,w,c
  3776  0051D0  6E0E               	movwf	?_readEEPROM,c
  3777  0051D2  0E00               	movlw	0
  3778  0051D4  20F4               	addwfc	prodh,w,c
  3779  0051D6  6E0F               	movwf	?_readEEPROM+1,c
  3780  0051D8  EC00  F02C         	call	_readEEPROM	;wreg free
  3781  0051DC  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3782  0051DE  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3783  0051E0  5014               	movf	??_getCalibrationValue,w,c
  3784  0051E2  2415               	addwf	??_getCalibrationValue+1,w,c
  3785  0051E4  6E17               	movwf	getCalibrationValue@cal,c
  3786  0051E6  0E00               	movlw	0
  3787  0051E8  2016               	addwfc	??_getCalibrationValue+2,w,c
  3788  0051EA  6E18               	movwf	getCalibrationValue@cal+1,c
  3789                           
  3790                           ;main.c: 874: return cal;
  3791  0051EC  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3792  0051F0  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3793  0051F4  0012               	return	
  3794  0051F6                     __end_of_getCalibrationValue:
  3795                           	opt stack 0
  3796                           tblptru	equ	0xFF8
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           postinc0	equ	0xFEE
  3800                           wreg	equ	0xFE8
  3801                           postdec1	equ	0xFE5
  3802                           fsr1h	equ	0xFE2
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           postinc2	equ	0xFDE
  3806                           postdec2	equ	0xFDD
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _log *****************
  3812 ;; Defined at:
  3813 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  x               4   33[BANK0 ] short 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  exponent        2   66[COMRAM] int 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  4   33[BANK0 ] int 
  3820 ;; Registers used:
  3821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/1
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3827 ;;      Params:         0       4       0       0       0       0       0
  3828 ;;      Locals:         2       0       0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0
  3830 ;;      Totals:         2       4       0       0       0       0       0
  3831 ;;Total ram usage:        6 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    5
  3834 ;; This function calls:
  3835 ;;		___fladd
  3836 ;;		___flmul
  3837 ;;		___awtofl
  3838 ;;		_eval_poly
  3839 ;;		_frexp
  3840 ;; This function is called by:
  3841 ;;		_doWork
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text7
  3846  004044                     __ptext7:
  3847                           	opt stack 0
  3848  004044                     _log:
  3849                           	opt stack 24
  3850                           
  3851                           ;incstack = 0
  3852                           ;incstack = 0
  3853  004044  0100               	movlb	0	; () banked
  3854  004046  BF84               	btfsc	(log@x+3)& (0+255),7,b
  3855  004048  D007               	goto	u8850
  3856                           
  3857                           ; BSR set to: 0
  3858                           
  3859                           ; BSR set to: 0
  3860  00404A  EE20  F081         	lfsr	2,log@x
  3861  00404E  50DE               	movf	postinc2,w,c
  3862  004050  10DE               	iorwf	postinc2,w,c
  3863  004052  10DE               	iorwf	postinc2,w,c
  3864  004054  10DE               	iorwf	postinc2,w,c
  3865  004056  E105               	bnz	l10452
  3866  004058                     u8850:
  3867                           
  3868                           ; BSR set to: 0
  3869  004058  6B81               	clrf	?_log& (0+255),b
  3870  00405A  6B82               	clrf	(?_log+1)& (0+255),b
  3871  00405C  6B83               	clrf	(?_log+2)& (0+255),b
  3872  00405E  6B84               	clrf	(?_log+3)& (0+255),b
  3873  004060  D087               	goto	l1851
  3874  004062                     l10452:
  3875                           
  3876                           ; BSR set to: 0
  3877  004062  6B64               	clrf	(?___flmul+4)& (0+255),b
  3878  004064  6B65               	clrf	(?___flmul+5)& (0+255),b
  3879  004066  6B66               	clrf	(?___flmul+6)& (0+255),b
  3880  004068  0E40               	movlw	64
  3881  00406A  6F67               	movwf	(?___flmul+7)& (0+255),b
  3882  00406C  0E43               	movlw	low log@exponent
  3883  00406E  6E12               	movwf	?_frexp+4,c
  3884  004070  0E00               	movlw	high log@exponent
  3885  004072  6E13               	movwf	?_frexp+5,c
  3886  004074  0E0F               	movlw	15
  3887  004076  6E13               	movwf	?_frexp+5,c
  3888  004078  0E5F               	movlw	__accesstop+-1
  3889  00407A  6412               	cpfsgt	?_frexp+4,c
  3890  00407C  6A13               	clrf	?_frexp+5,c
  3891  00407E  C081  F00E         	movff	log@x,?_frexp
  3892  004082  C082  F00F         	movff	log@x+1,?_frexp+1
  3893  004086  C083  F010         	movff	log@x+2,?_frexp+2
  3894  00408A  C084  F011         	movff	log@x+3,?_frexp+3
  3895  00408E  EC4F  F026         	call	_frexp	;wreg free
  3896  004092  C011  F063         	movff	?_frexp+3,?___flmul+3
  3897  004096  C010  F062         	movff	?_frexp+2,?___flmul+2
  3898  00409A  C00F  F061         	movff	?_frexp+1,?___flmul+1
  3899  00409E  C00E  F060         	movff	?_frexp,?___flmul
  3900  0040A2  EC23  F022         	call	___flmul	;wreg free
  3901  0040A6  C063  F020         	movff	?___flmul+3,?___fladd+3
  3902  0040AA  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3903  0040AE  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3904  0040B2  C060  F01D         	movff	?___flmul,?___fladd
  3905  0040B6  6A21               	clrf	?___fladd+4,c
  3906  0040B8  6A22               	clrf	?___fladd+5,c
  3907  0040BA  0E80               	movlw	128
  3908  0040BC  6E23               	movwf	?___fladd+6,c
  3909  0040BE  0EBF               	movlw	191
  3910  0040C0  6E24               	movwf	?___fladd+7,c
  3911  0040C2  ECCA  F01E         	call	___fladd	;wreg free
  3912  0040C6  C020  F084         	movff	?___fladd+3,log@x+3
  3913  0040CA  C01F  F083         	movff	?___fladd+2,log@x+2
  3914  0040CE  C01E  F082         	movff	?___fladd+1,log@x+1
  3915  0040D2  C01D  F081         	movff	?___fladd,log@x
  3916  0040D6  0643               	decf	log@exponent,f,c
  3917  0040D8  A0D8               	btfss	status,0,c
  3918  0040DA  0644               	decf	log@exponent+1,f,c
  3919  0040DC  C081  F076         	movff	log@x,?_eval_poly
  3920  0040E0  C082  F077         	movff	log@x+1,?_eval_poly+1
  3921  0040E4  C083  F078         	movff	log@x+2,?_eval_poly+2
  3922  0040E8  C084  F079         	movff	log@x+3,?_eval_poly+3
  3923  0040EC  0E48               	movlw	low log@coeff
  3924  0040EE  0100               	movlb	0	; () banked
  3925  0040F0  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  3926  0040F2  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  3927  0040F4  0E08               	movlw	8
  3928  0040F6  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  3929  0040F8  ECF0  F022         	call	_eval_poly	;wreg free
  3930  0040FC  C079  F084         	movff	?_eval_poly+3,log@x+3
  3931  004100  C078  F083         	movff	?_eval_poly+2,log@x+2
  3932  004104  C077  F082         	movff	?_eval_poly+1,log@x+1
  3933  004108  C076  F081         	movff	?_eval_poly,log@x
  3934                           
  3935                           ; BSR set to: 0
  3936  00410C  0E18               	movlw	24
  3937  00410E  6F64               	movwf	(?___flmul+4)& (0+255),b
  3938  004110  0E72               	movlw	114
  3939  004112  6F65               	movwf	(?___flmul+5)& (0+255),b
  3940  004114  0E31               	movlw	49
  3941  004116  6F66               	movwf	(?___flmul+6)& (0+255),b
  3942  004118  0E3F               	movlw	63
  3943  00411A  6F67               	movwf	(?___flmul+7)& (0+255),b
  3944  00411C  C043  F018         	movff	log@exponent,?___awtofl
  3945  004120  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3946  004124  EC1E  F02A         	call	___awtofl	;wreg free
  3947  004128  C01B  F063         	movff	?___awtofl+3,?___flmul+3
  3948  00412C  C01A  F062         	movff	?___awtofl+2,?___flmul+2
  3949  004130  C019  F061         	movff	?___awtofl+1,?___flmul+1
  3950  004134  C018  F060         	movff	?___awtofl,?___flmul
  3951  004138  EC23  F022         	call	___flmul	;wreg free
  3952  00413C  C063  F020         	movff	?___flmul+3,?___fladd+3
  3953  004140  C062  F01F         	movff	?___flmul+2,?___fladd+2
  3954  004144  C061  F01E         	movff	?___flmul+1,?___fladd+1
  3955  004148  C060  F01D         	movff	?___flmul,?___fladd
  3956  00414C  C081  F021         	movff	log@x,?___fladd+4
  3957  004150  C082  F022         	movff	log@x+1,?___fladd+5
  3958  004154  C083  F023         	movff	log@x+2,?___fladd+6
  3959  004158  C084  F024         	movff	log@x+3,?___fladd+7
  3960  00415C  ECCA  F01E         	call	___fladd	;wreg free
  3961  004160  C020  F084         	movff	?___fladd+3,?_log+3
  3962  004164  C01F  F083         	movff	?___fladd+2,?_log+2
  3963  004168  C01E  F082         	movff	?___fladd+1,?_log+1
  3964  00416C  C01D  F081         	movff	?___fladd,?_log
  3965  004170                     l1851:
  3966  004170  0012               	return	
  3967  004172                     __end_of_log:
  3968                           	opt stack 0
  3969                           tblptru	equ	0xFF8
  3970                           prodh	equ	0xFF4
  3971                           prodl	equ	0xFF3
  3972                           postinc0	equ	0xFEE
  3973                           wreg	equ	0xFE8
  3974                           postdec1	equ	0xFE5
  3975                           fsr1h	equ	0xFE2
  3976                           fsr1l	equ	0xFE1
  3977                           indf2	equ	0xFDF
  3978                           postinc2	equ	0xFDE
  3979                           postdec2	equ	0xFDD
  3980                           fsr2h	equ	0xFDA
  3981                           fsr2l	equ	0xFD9
  3982                           status	equ	0xFD8
  3983                           
  3984 ;; *************** function _exp *****************
  3985 ;; Defined at:
  3986 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  x               4   57[BANK0 ] int 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  exponent        2   65[BANK0 ] int 
  3991 ;;  sign            1   67[BANK0 ] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  4   57[BANK0 ] unsigned char 
  3994 ;; Registers used:
  3995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/1
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4001 ;;      Params:         0       4       0       0       0       0       0
  4002 ;;      Locals:         0       7       0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0
  4004 ;;      Totals:         0      11       0       0       0       0       0
  4005 ;;Total ram usage:       11 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    6
  4008 ;; This function calls:
  4009 ;;		___fldiv
  4010 ;;		___asflmul
  4011 ;;		___asflsub
  4012 ;;		___awtofl
  4013 ;;		_floor
  4014 ;;		_eval_poly
  4015 ;;		_ldexp
  4016 ;;		___flge
  4017 ;;		___flneg
  4018 ;;		___fltol
  4019 ;; This function is called by:
  4020 ;;		_doWork
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024                           	psect	text8
  4025  00371A                     __ptext8:
  4026                           	opt stack 0
  4027  00371A                     _exp:
  4028                           	opt stack 23
  4029                           
  4030                           ;incstack = 0
  4031                           ;incstack = 0
  4032  00371A  0100               	movlb	0	; () banked
  4033  00371C  EE20  F099         	lfsr	2,exp@x
  4034  003720  50DE               	movf	postinc2,w,c
  4035  003722  10DE               	iorwf	postinc2,w,c
  4036  003724  10DE               	iorwf	postinc2,w,c
  4037  003726  10DE               	iorwf	postinc2,w,c
  4038  003728  E107               	bnz	l10414
  4039                           
  4040                           ; BSR set to: 0
  4041  00372A  0E00               	movlw	0
  4042  00372C  6F99               	movwf	?_exp& (0+255),b
  4043  00372E  6F9A               	movwf	(?_exp+1)& (0+255),b
  4044  003730  0E80               	movlw	128
  4045  003732  6F9B               	movwf	(?_exp+2)& (0+255),b
  4046  003734  0E3F               	movlw	63
  4047  003736  D018               	goto	L3
  4048  003738                     l10414:
  4049                           
  4050                           ; BSR set to: 0
  4051  003738  0E18               	movlw	24
  4052  00373A  6E0E               	movwf	?___flge,c
  4053  00373C  0E72               	movlw	114
  4054  00373E  6E0F               	movwf	?___flge+1,c
  4055  003740  0E31               	movlw	49
  4056  003742  6E10               	movwf	?___flge+2,c
  4057  003744  0E44               	movlw	68
  4058  003746  6E11               	movwf	?___flge+3,c
  4059  003748  C099  F012         	movff	exp@x,?___flge+4
  4060  00374C  C09A  F013         	movff	exp@x+1,?___flge+5
  4061  003750  C09B  F014         	movff	exp@x+2,?___flge+6
  4062  003754  C09C  F015         	movff	exp@x+3,?___flge+7
  4063  003758  EC1B  F028         	call	___flge	;wreg free
  4064  00375C  E207               	bc	l10420
  4065  00375E  0100               	movlb	0	; () banked
  4066  003760  6999               	setf	?_exp& (0+255),b
  4067  003762  699A               	setf	(?_exp+1)& (0+255),b
  4068  003764  0E7F               	movlw	127
  4069  003766  6F9B               	movwf	(?_exp+2)& (0+255),b
  4070  003768                     L3:
  4071  003768  6F9C               	movwf	(?_exp+3)& (0+255),b
  4072  00376A  D0C8               	goto	l1559
  4073  00376C                     l10420:
  4074  00376C  C099  F00E         	movff	exp@x,?___flge
  4075  003770  C09A  F00F         	movff	exp@x+1,?___flge+1
  4076  003774  C09B  F010         	movff	exp@x+2,?___flge+2
  4077  003778  C09C  F011         	movff	exp@x+3,?___flge+3
  4078  00377C  0E87               	movlw	135
  4079  00377E  6E12               	movwf	?___flge+4,c
  4080  003780  0E48               	movlw	72
  4081  003782  6E13               	movwf	?___flge+5,c
  4082  003784  0E3A               	movlw	58
  4083  003786  6E14               	movwf	?___flge+6,c
  4084  003788  0EC4               	movlw	196
  4085  00378A  6E15               	movwf	?___flge+7,c
  4086  00378C  EC1B  F028         	call	___flge	;wreg free
  4087  003790  E202               	bc	l10424
  4088  003792  0100               	movlb	0	; () banked
  4089  003794  D08D               	goto	u8830
  4090  003796                     l10424:
  4091  003796  0100               	movlb	0	; () banked
  4092  003798  0E01               	movlw	1
  4093  00379A  AF9C               	btfss	(exp@x+3)& (0+255),7,b
  4094  00379C  0E00               	movlw	0
  4095  00379E  6FA3               	movwf	exp@sign& (0+255),b
  4096  0037A0  51A3               	movf	exp@sign& (0+255),w,b
  4097  0037A2  E012               	bz	l1562
  4098                           
  4099                           ; BSR set to: 0
  4100  0037A4  C099  F00E         	movff	exp@x,?___flneg
  4101  0037A8  C09A  F00F         	movff	exp@x+1,?___flneg+1
  4102  0037AC  C09B  F010         	movff	exp@x+2,?___flneg+2
  4103  0037B0  C09C  F011         	movff	exp@x+3,?___flneg+3
  4104  0037B4  EC10  F02B         	call	___flneg	;wreg free
  4105  0037B8  C011  F09C         	movff	?___flneg+3,exp@x+3
  4106  0037BC  C010  F09B         	movff	?___flneg+2,exp@x+2
  4107  0037C0  C00F  F09A         	movff	?___flneg+1,exp@x+1
  4108  0037C4  C00E  F099         	movff	?___flneg,exp@x
  4109  0037C8                     l1562:
  4110                           
  4111                           ; BSR set to: 0
  4112  0037C8  0E3B               	movlw	59
  4113  0037CA  6F76               	movwf	?___asflmul& (0+255),b
  4114  0037CC  0EAA               	movlw	170
  4115  0037CE  6F77               	movwf	(?___asflmul+1)& (0+255),b
  4116  0037D0  0EB8               	movlw	184
  4117  0037D2  6F78               	movwf	(?___asflmul+2)& (0+255),b
  4118  0037D4  0E3F               	movlw	63
  4119  0037D6  6F79               	movwf	(?___asflmul+3)& (0+255),b
  4120  0037D8  0E99               	movlw	exp@x& (0+255)
  4121  0037DA  EC41  F028         	call	___asflmul
  4122  0037DE  C099  F08F         	movff	exp@x,?_floor
  4123  0037E2  C09A  F090         	movff	exp@x+1,?_floor+1
  4124  0037E6  C09B  F091         	movff	exp@x+2,?_floor+2
  4125  0037EA  C09C  F092         	movff	exp@x+3,?_floor+3
  4126  0037EE  ECB9  F020         	call	_floor	;wreg free
  4127  0037F2  C092  F0A0         	movff	?_floor+3,_exp$2274+3
  4128  0037F6  C091  F09F         	movff	?_floor+2,_exp$2274+2
  4129  0037FA  C090  F09E         	movff	?_floor+1,_exp$2274+1
  4130  0037FE  C08F  F09D         	movff	?_floor,_exp$2274
  4131  003802  C09D  F076         	movff	_exp$2274,?___fltol
  4132  003806  C09E  F077         	movff	_exp$2274+1,?___fltol+1
  4133  00380A  C09F  F078         	movff	_exp$2274+2,?___fltol+2
  4134  00380E  C0A0  F079         	movff	_exp$2274+3,?___fltol+3
  4135  003812  ECB5  F025         	call	___fltol	;wreg free
  4136  003816  C076  F0A1         	movff	?___fltol,exp@exponent
  4137  00381A  C077  F0A2         	movff	?___fltol+1,exp@exponent+1
  4138                           
  4139                           ; BSR set to: 0
  4140  00381E  0E00               	movlw	high exp@x
  4141  003820  6F7F               	movwf	(?___asflsub+1)& (0+255),b
  4142  003822  0E99               	movlw	low exp@x
  4143  003824  6F7E               	movwf	?___asflsub& (0+255),b
  4144  003826  C0A1  F018         	movff	exp@exponent,?___awtofl
  4145  00382A  C0A2  F019         	movff	exp@exponent+1,?___awtofl+1
  4146  00382E  EC1E  F02A         	call	___awtofl	;wreg free
  4147  003832  C01B  F083         	movff	?___awtofl+3,?___asflsub+5
  4148  003836  C01A  F082         	movff	?___awtofl+2,?___asflsub+4
  4149  00383A  C019  F081         	movff	?___awtofl+1,?___asflsub+3
  4150  00383E  C018  F080         	movff	?___awtofl,?___asflsub+2
  4151  003842  ECF4  F027         	call	___asflsub	;wreg free
  4152                           
  4153                           ; BSR set to: 0
  4154  003846  C099  F076         	movff	exp@x,?_eval_poly
  4155  00384A  C09A  F077         	movff	exp@x+1,?_eval_poly+1
  4156  00384E  C09B  F078         	movff	exp@x+2,?_eval_poly+2
  4157  003852  C09C  F079         	movff	exp@x+3,?_eval_poly+3
  4158  003856  0E20               	movlw	low exp@coeff
  4159  003858  6F7A               	movwf	(?_eval_poly+4)& (0+255),b
  4160  00385A  6B7C               	clrf	(?_eval_poly+6)& (0+255),b
  4161  00385C  0E09               	movlw	9
  4162  00385E  6F7B               	movwf	(?_eval_poly+5)& (0+255),b
  4163  003860  ECF0  F022         	call	_eval_poly	;wreg free
  4164  003864  C079  F084         	movff	?_eval_poly+3,?_ldexp+3
  4165  003868  C078  F083         	movff	?_eval_poly+2,?_ldexp+2
  4166  00386C  C077  F082         	movff	?_eval_poly+1,?_ldexp+1
  4167  003870  C076  F081         	movff	?_eval_poly,?_ldexp
  4168  003874  C0A1  F085         	movff	exp@exponent,?_ldexp+4
  4169  003878  C0A2  F086         	movff	exp@exponent+1,?_ldexp+5
  4170  00387C  EC13  F025         	call	_ldexp	;wreg free
  4171  003880  C084  F09C         	movff	?_ldexp+3,exp@x+3
  4172  003884  C083  F09B         	movff	?_ldexp+2,exp@x+2
  4173  003888  C082  F09A         	movff	?_ldexp+1,exp@x+1
  4174  00388C  C081  F099         	movff	?_ldexp,exp@x
  4175                           
  4176                           ; BSR set to: 0
  4177  003890  51A3               	movf	exp@sign& (0+255),w,b
  4178  003892  E02C               	bz	l1563
  4179                           
  4180                           ; BSR set to: 0
  4181  003894  EE20  F099         	lfsr	2,exp@x
  4182  003898  0EFF               	movlw	255
  4183  00389A  18DE               	xorwf	postinc2,w,c
  4184  00389C  0EFF               	movlw	255
  4185  00389E  B4D8               	btfsc	status,2,c
  4186  0038A0  18DE               	xorwf	postinc2,w,c
  4187  0038A2  0E7F               	movlw	127
  4188  0038A4  B4D8               	btfsc	status,2,c
  4189  0038A6  18DE               	xorwf	postinc2,w,c
  4190  0038A8  0E7F               	movlw	127
  4191  0038AA  B4D8               	btfsc	status,2,c
  4192  0038AC  18DE               	xorwf	postinc2,w,c
  4193  0038AE  E105               	bnz	l10440
  4194  0038B0                     u8830:
  4195                           
  4196                           ; BSR set to: 0
  4197  0038B0  6B99               	clrf	?_exp& (0+255),b
  4198  0038B2  6B9A               	clrf	(?_exp+1)& (0+255),b
  4199  0038B4  6B9B               	clrf	(?_exp+2)& (0+255),b
  4200  0038B6  6B9C               	clrf	(?_exp+3)& (0+255),b
  4201  0038B8  D021               	goto	l1559
  4202  0038BA                     l10440:
  4203                           
  4204                           ; BSR set to: 0
  4205  0038BA  6A2C               	clrf	?___fldiv,c
  4206  0038BC  6A2D               	clrf	?___fldiv+1,c
  4207  0038BE  0E80               	movlw	128
  4208  0038C0  6E2E               	movwf	?___fldiv+2,c
  4209  0038C2  0E3F               	movlw	63
  4210  0038C4  6E2F               	movwf	?___fldiv+3,c
  4211  0038C6  C099  F030         	movff	exp@x,?___fldiv+4
  4212  0038CA  C09A  F031         	movff	exp@x+1,?___fldiv+5
  4213  0038CE  C09B  F032         	movff	exp@x+2,?___fldiv+6
  4214  0038D2  C09C  F033         	movff	exp@x+3,?___fldiv+7
  4215  0038D6  ECBF  F024         	call	___fldiv	;wreg free
  4216  0038DA  C02F  F09C         	movff	?___fldiv+3,?_exp+3
  4217  0038DE  C02E  F09B         	movff	?___fldiv+2,?_exp+2
  4218  0038E2  C02D  F09A         	movff	?___fldiv+1,?_exp+1
  4219  0038E6  C02C  F099         	movff	?___fldiv,?_exp
  4220  0038EA  D008               	goto	l1559
  4221  0038EC                     l1563:
  4222                           
  4223                           ; BSR set to: 0
  4224  0038EC  C099  F099         	movff	exp@x,?_exp
  4225  0038F0  C09A  F09A         	movff	exp@x+1,?_exp+1
  4226  0038F4  C09B  F09B         	movff	exp@x+2,?_exp+2
  4227  0038F8  C09C  F09C         	movff	exp@x+3,?_exp+3
  4228  0038FC                     l1559:
  4229  0038FC  0012               	return	
  4230  0038FE                     __end_of_exp:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           postdec1	equ	0xFE5
  4238                           fsr1h	equ	0xFE2
  4239                           fsr1l	equ	0xFE1
  4240                           indf2	equ	0xFDF
  4241                           postinc2	equ	0xFDE
  4242                           postdec2	equ	0xFDD
  4243                           fsr2h	equ	0xFDA
  4244                           fsr2l	equ	0xFD9
  4245                           status	equ	0xFD8
  4246                           
  4247 ;; *************** function ___flneg *****************
  4248 ;; Defined at:
  4249 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  f1              4   13[COMRAM] unsigned char 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;		None
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  4   13[COMRAM] unsigned char 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4258 ;; Tracked objects:
  4259 ;;		On entry : F/0
  4260 ;;		On exit  : F/0
  4261 ;;		Unchanged: F/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4263 ;;      Params:         4       0       0       0       0       0       0
  4264 ;;      Locals:         0       0       0       0       0       0       0
  4265 ;;      Temps:          0       0       0       0       0       0       0
  4266 ;;      Totals:         4       0       0       0       0       0       0
  4267 ;;Total ram usage:        4 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:    2
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_exp
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text9
  4278  005620                     __ptext9:
  4279                           	opt stack 0
  4280  005620                     ___flneg:
  4281                           	opt stack 26
  4282                           
  4283                           ; BSR set to: 0
  4284                           
  4285                           ;incstack = 0
  4286                           ;incstack = 0
  4287  005620  EE20  F00E         	lfsr	2,___flneg@f1
  4288  005624  50DE               	movf	postinc2,w,c
  4289  005626  10DE               	iorwf	postinc2,w,c
  4290  005628  10DE               	iorwf	postinc2,w,c
  4291  00562A  10DE               	iorwf	postinc2,w,c
  4292  00562C  E002               	bz	l11766
  4293                           
  4294                           ; BSR set to: 0
  4295  00562E  0E80               	movlw	128
  4296  005630  1A11               	xorwf	___flneg@f1+3,f,c
  4297  005632                     l11766:
  4298                           
  4299                           ; BSR set to: 0
  4300  005632  C00E  F00E         	movff	___flneg@f1,?___flneg
  4301  005636  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4302  00563A  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4303  00563E  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4304                           
  4305                           ; BSR set to: 0
  4306  005642  0012               	return	
  4307  005644                     __end_of___flneg:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           prodh	equ	0xFF4
  4311                           prodl	equ	0xFF3
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           fsr1h	equ	0xFE2
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           fsr2h	equ	0xFDA
  4321                           fsr2l	equ	0xFD9
  4322                           status	equ	0xFD8
  4323                           
  4324 ;; *************** function _ldexp *****************
  4325 ;; Defined at:
  4326 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  value           4   33[BANK0 ] unsigned char 
  4329 ;;  newexp          2   37[BANK0 ] int 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  4   33[BANK0 ] int 
  4334 ;; Registers used:
  4335 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4336 ;; Tracked objects:
  4337 ;;		On entry : F/0
  4338 ;;		On exit  : F/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4341 ;;      Params:         0       6       0       0       0       0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0
  4343 ;;      Temps:          3       0       0       0       0       0       0
  4344 ;;      Totals:         3       6       0       0       0       0       0
  4345 ;;Total ram usage:        9 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    2
  4348 ;; This function calls:
  4349 ;;		Nothing
  4350 ;; This function is called by:
  4351 ;;		_exp
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text10
  4356  004A26                     __ptext10:
  4357                           	opt stack 0
  4358  004A26                     _ldexp:
  4359                           	opt stack 26
  4360                           
  4361                           ; BSR set to: 0
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;incstack = 0
  4365                           ;incstack = 0
  4366  004A26  EE20  F081         	lfsr	2,ldexp@value
  4367  004A2A  50DE               	movf	postinc2,w,c
  4368  004A2C  10DE               	iorwf	postinc2,w,c
  4369  004A2E  10DE               	iorwf	postinc2,w,c
  4370  004A30  10DE               	iorwf	postinc2,w,c
  4371  004A32  E014               	bz	u10230
  4372                           
  4373                           ; BSR set to: 0
  4374                           
  4375                           ; BSR set to: 0
  4376  004A34  5184               	movf	(ldexp@value+3)& (0+255),w,b
  4377  004A36  0B7F               	andlw	127
  4378  004A38  6E43               	movwf	??_ldexp& (0+255),c
  4379  004A3A  90D8               	bcf	status,0,c
  4380  004A3C  3443               	rlcf	??_ldexp,w,c
  4381  004A3E  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4382  004A40  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4383  004A42  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4384  004A44  5044               	movf	??_ldexp+1,w,c
  4385  004A46  2785               	addwf	ldexp@newexp& (0+255),f,b
  4386  004A48  5045               	movf	??_ldexp+2,w,c
  4387  004A4A  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4388  004A4C  3583               	rlcf	(ldexp@value+2)& (0+255),w,b
  4389  004A4E  36E8               	rlcf	wreg,f,c
  4390  004A50  0B01               	andlw	1
  4391  004A52  2785               	addwf	ldexp@newexp& (0+255),f,b
  4392  004A54  0E00               	movlw	0
  4393  004A56  2386               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4394                           
  4395                           ; BSR set to: 0
  4396  004A58  AF86               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4397  004A5A  D005               	goto	l11728
  4398  004A5C                     u10230:
  4399                           
  4400                           ; BSR set to: 0
  4401  004A5C  6B81               	clrf	?_ldexp& (0+255),b
  4402  004A5E  6B82               	clrf	(?_ldexp+1)& (0+255),b
  4403  004A60  6B83               	clrf	(?_ldexp+2)& (0+255),b
  4404  004A62  6B84               	clrf	(?_ldexp+3)& (0+255),b
  4405  004A64  D031               	goto	l1684
  4406  004A66                     l11728:
  4407                           
  4408                           ; BSR set to: 0
  4409  004A66  5186               	movf	(ldexp@newexp+1)& (0+255),w,b
  4410  004A68  0A80               	xorlw	128
  4411  004A6A  0F7F               	addlw	-129
  4412  004A6C  0E00               	movlw	0
  4413  004A6E  B4D8               	btfsc	status,2,c
  4414  004A70  5D85               	subwf	ldexp@newexp& (0+255),w,b
  4415  004A72  E30E               	bnc	l11742
  4416                           
  4417                           ; BSR set to: 0
  4418  004A74  AF84               	btfss	(ldexp@value+3)& (0+255),7,b
  4419  004A76  D006               	goto	l11738
  4420                           
  4421                           ; BSR set to: 0
  4422  004A78  6981               	setf	?_ldexp& (0+255),b
  4423  004A7A  6982               	setf	(?_ldexp+1)& (0+255),b
  4424  004A7C  0E7F               	movlw	127
  4425  004A7E  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4426  004A80  0EFF               	movlw	255
  4427  004A82  D004               	goto	L4
  4428  004A84                     l11738:
  4429                           
  4430                           ; BSR set to: 0
  4431  004A84  6981               	setf	?_ldexp& (0+255),b
  4432  004A86  6982               	setf	(?_ldexp+1)& (0+255),b
  4433  004A88  0E7F               	movlw	127
  4434  004A8A  6F83               	movwf	(?_ldexp+2)& (0+255),b
  4435  004A8C                     L4:
  4436  004A8C  6F84               	movwf	(?_ldexp+3)& (0+255),b
  4437  004A8E  D01C               	goto	l1684
  4438  004A90                     l11742:
  4439                           
  4440                           ; BSR set to: 0
  4441  004A90  3586               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4442  004A92  3186               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4443  004A94  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4444  004A96  3185               	rrcf	ldexp@newexp& (0+255),w,b
  4445  004A98  6E43               	movwf	??_ldexp& (0+255),c
  4446  004A9A  1984               	xorwf	(ldexp@value+3)& (0+255),w,b
  4447  004A9C  0B80               	andlw	-128
  4448  004A9E  1843               	xorwf	??_ldexp,w,c
  4449  004AA0  6F84               	movwf	(ldexp@value+3)& (0+255),b
  4450  004AA2  C085  F043         	movff	ldexp@newexp,??_ldexp
  4451  004AA6  0E01               	movlw	1
  4452  004AA8  1643               	andwf	??_ldexp,f,c
  4453  004AAA  3243               	rrcf	??_ldexp,f,c
  4454  004AAC  3243               	rrcf	??_ldexp,f,c
  4455  004AAE  5183               	movf	(ldexp@value+2)& (0+255),w,b
  4456  004AB0  1843               	xorwf	??_ldexp,w,c
  4457  004AB2  0B7F               	andlw	-129
  4458  004AB4  1843               	xorwf	??_ldexp,w,c
  4459  004AB6  6F83               	movwf	(ldexp@value+2)& (0+255),b
  4460                           
  4461                           ; BSR set to: 0
  4462  004AB8  C081  F081         	movff	ldexp@value,?_ldexp
  4463  004ABC  C082  F082         	movff	ldexp@value+1,?_ldexp+1
  4464  004AC0  C083  F083         	movff	ldexp@value+2,?_ldexp+2
  4465  004AC4  C084  F084         	movff	ldexp@value+3,?_ldexp+3
  4466  004AC8                     l1684:
  4467                           
  4468                           ; BSR set to: 0
  4469  004AC8  0012               	return	
  4470  004ACA                     __end_of_ldexp:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           prodh	equ	0xFF4
  4474                           prodl	equ	0xFF3
  4475                           postinc0	equ	0xFEE
  4476                           wreg	equ	0xFE8
  4477                           postdec1	equ	0xFE5
  4478                           fsr1h	equ	0xFE2
  4479                           fsr1l	equ	0xFE1
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           postdec2	equ	0xFDD
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _eval_poly *****************
  4488 ;; Defined at:
  4489 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  x               4   22[BANK0 ] int 
  4492 ;;  d               1   26[BANK0 ] PTR const 
  4493 ;;		 -> log@coeff(36), exp@coeff(40), 
  4494 ;;  n               2   27[BANK0 ] int 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  res             4   29[BANK0 ] int 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  4   22[BANK0 ] int 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : F/0
  4503 ;;		On exit  : F/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4506 ;;      Params:         0       7       0       0       0       0       0
  4507 ;;      Locals:         0       4       0       0       0       0       0
  4508 ;;      Temps:          1       0       0       0       0       0       0
  4509 ;;      Totals:         1      11       0       0       0       0       0
  4510 ;;Total ram usage:       12 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    4
  4513 ;; This function calls:
  4514 ;;		___fladd
  4515 ;;		___flmul
  4516 ;; This function is called by:
  4517 ;;		_exp
  4518 ;;		_log
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text11
  4523  0045E0                     __ptext11:
  4524                           	opt stack 0
  4525  0045E0                     _eval_poly:
  4526                           	opt stack 24
  4527                           
  4528                           ; BSR set to: 0
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;incstack = 0
  4532                           ;incstack = 0
  4533  0045E0  517B               	movf	eval_poly@n& (0+255),w,b
  4534  0045E2  0D04               	mullw	4
  4535  0045E4  517A               	movf	eval_poly@d& (0+255),w,b
  4536  0045E6  24F3               	addwf	prodl,w,c
  4537  0045E8  6E42               	movwf	??_eval_poly& (0+255),c
  4538  0045EA  C042  FFF6         	movff	??_eval_poly,tblptrl
  4539  0045EE  0E06               	movlw	high __smallconst
  4540  0045F0  6EF7               	movwf	tblptrh,c
  4541  0045F2  0009               	tblrd		*+
  4542  0045F4  CFF5 F07D          	movff	tablat,eval_poly@res
  4543  0045F8  0009               	tblrd		*+
  4544  0045FA  CFF5 F07E          	movff	tablat,eval_poly@res+1
  4545  0045FE  0009               	tblrd		*+
  4546  004600  CFF5 F07F          	movff	tablat,eval_poly@res+2
  4547  004604  000A               	tblrd		*-
  4548  004606  CFF5 F080          	movff	tablat,eval_poly@res+3
  4549  00460A  D03D               	goto	l11714
  4550  00460C                     l11712:
  4551                           
  4552                           ; BSR set to: 0
  4553  00460C  C07D  F064         	movff	eval_poly@res,?___flmul+4
  4554  004610  C07E  F065         	movff	eval_poly@res+1,?___flmul+5
  4555  004614  C07F  F066         	movff	eval_poly@res+2,?___flmul+6
  4556  004618  C080  F067         	movff	eval_poly@res+3,?___flmul+7
  4557  00461C  C076  F060         	movff	eval_poly@x,?___flmul
  4558  004620  C077  F061         	movff	eval_poly@x+1,?___flmul+1
  4559  004624  C078  F062         	movff	eval_poly@x+2,?___flmul+2
  4560  004628  C079  F063         	movff	eval_poly@x+3,?___flmul+3
  4561  00462C  EC23  F022         	call	___flmul	;wreg free
  4562  004630  C063  F020         	movff	?___flmul+3,?___fladd+3
  4563  004634  C062  F01F         	movff	?___flmul+2,?___fladd+2
  4564  004638  C061  F01E         	movff	?___flmul+1,?___fladd+1
  4565  00463C  C060  F01D         	movff	?___flmul,?___fladd
  4566  004640  0100               	movlb	0	; () banked
  4567  004642  077B               	decf	eval_poly@n& (0+255),f,b
  4568  004644  A0D8               	btfss	status,0,c
  4569  004646  077C               	decf	(eval_poly@n+1)& (0+255),f,b
  4570  004648  517B               	movf	eval_poly@n& (0+255),w,b
  4571  00464A  0D04               	mullw	4
  4572  00464C  517A               	movf	eval_poly@d& (0+255),w,b
  4573  00464E  24F3               	addwf	prodl,w,c
  4574  004650  6E42               	movwf	??_eval_poly& (0+255),c
  4575  004652  C042  FFF6         	movff	??_eval_poly,tblptrl
  4576  004656  0E06               	movlw	high __smallconst
  4577  004658  6EF7               	movwf	tblptrh,c
  4578  00465A  0009               	tblrd		*+
  4579  00465C  CFF5 F021          	movff	tablat,?___fladd+4
  4580  004660  0009               	tblrd		*+
  4581  004662  CFF5 F022          	movff	tablat,?___fladd+5
  4582  004666  0009               	tblrd		*+
  4583  004668  CFF5 F023          	movff	tablat,?___fladd+6
  4584  00466C  000A               	tblrd		*-
  4585  00466E  CFF5 F024          	movff	tablat,?___fladd+7
  4586  004672  ECCA  F01E         	call	___fladd	;wreg free
  4587  004676  C020  F080         	movff	?___fladd+3,eval_poly@res+3
  4588  00467A  C01F  F07F         	movff	?___fladd+2,eval_poly@res+2
  4589  00467E  C01E  F07E         	movff	?___fladd+1,eval_poly@res+1
  4590  004682  C01D  F07D         	movff	?___fladd,eval_poly@res
  4591  004686                     l11714:
  4592  004686  0100               	movlb	0	; () banked
  4593  004688  517C               	movf	(eval_poly@n+1)& (0+255),w,b
  4594  00468A  117B               	iorwf	eval_poly@n& (0+255),w,b
  4595  00468C  E1BF               	bnz	l11712
  4596                           
  4597                           ; BSR set to: 0
  4598  00468E  C07D  F076         	movff	eval_poly@res,?_eval_poly
  4599  004692  C07E  F077         	movff	eval_poly@res+1,?_eval_poly+1
  4600  004696  C07F  F078         	movff	eval_poly@res+2,?_eval_poly+2
  4601  00469A  C080  F079         	movff	eval_poly@res+3,?_eval_poly+3
  4602                           
  4603                           ; BSR set to: 0
  4604  00469E  0012               	return	
  4605  0046A0                     __end_of_eval_poly:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           postinc0	equ	0xFEE
  4614                           wreg	equ	0xFE8
  4615                           postdec1	equ	0xFE5
  4616                           fsr1h	equ	0xFE2
  4617                           fsr1l	equ	0xFE1
  4618                           indf2	equ	0xFDF
  4619                           postinc2	equ	0xFDE
  4620                           postdec2	equ	0xFDD
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _floor *****************
  4626 ;; Defined at:
  4627 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  x               4   47[BANK0 ] int 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  i               4   51[BANK0 ] int 
  4632 ;;  expon           2   55[BANK0 ] int 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  4   47[BANK0 ] int 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : F/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4642 ;;      Params:         0       4       0       0       0       0       0
  4643 ;;      Locals:         0       6       0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0
  4645 ;;      Totals:         0      10       0       0       0       0       0
  4646 ;;Total ram usage:       10 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    4
  4649 ;; This function calls:
  4650 ;;		___altofl
  4651 ;;		___fladd
  4652 ;;		___flge
  4653 ;;		_frexp
  4654 ;;		___fltol
  4655 ;; This function is called by:
  4656 ;;		_exp
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text12
  4661  004172                     __ptext12:
  4662                           	opt stack 0
  4663  004172                     _floor:
  4664                           	opt stack 24
  4665                           
  4666                           ; BSR set to: 0
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;incstack = 0
  4670                           ;incstack = 0
  4671  004172  C08F  F00E         	movff	floor@x,?_frexp
  4672  004176  C090  F00F         	movff	floor@x+1,?_frexp+1
  4673  00417A  C091  F010         	movff	floor@x+2,?_frexp+2
  4674  00417E  C092  F011         	movff	floor@x+3,?_frexp+3
  4675  004182  0E00               	movlw	high floor@expon
  4676  004184  6E13               	movwf	?_frexp+5,c
  4677  004186  0E97               	movlw	low floor@expon
  4678  004188  6E12               	movwf	?_frexp+4,c
  4679  00418A  EC4F  F026         	call	_frexp	;wreg free
  4680                           
  4681                           ; BSR set to: 0
  4682  00418E  AF98               	btfss	(floor@expon+1)& (0+255),7,b
  4683  004190  D00F               	goto	l11700
  4684                           
  4685                           ; BSR set to: 0
  4686  004192  AF92               	btfss	(floor@x+3)& (0+255),7,b
  4687  004194  D008               	goto	l1652
  4688                           
  4689                           ; BSR set to: 0
  4690  004196  0E00               	movlw	0
  4691  004198  6F8F               	movwf	?_floor& (0+255),b
  4692  00419A  6F90               	movwf	(?_floor+1)& (0+255),b
  4693  00419C  0E80               	movlw	128
  4694  00419E  6F91               	movwf	(?_floor+2)& (0+255),b
  4695  0041A0  0EBF               	movlw	191
  4696  0041A2  6F92               	movwf	(?_floor+3)& (0+255),b
  4697  0041A4  D063               	goto	l1653
  4698  0041A6                     l1652:
  4699                           
  4700                           ; BSR set to: 0
  4701  0041A6  6B8F               	clrf	?_floor& (0+255),b
  4702  0041A8  6B90               	clrf	(?_floor+1)& (0+255),b
  4703  0041AA  6B91               	clrf	(?_floor+2)& (0+255),b
  4704  0041AC  6B92               	clrf	(?_floor+3)& (0+255),b
  4705  0041AE  D05E               	goto	l1653
  4706  0041B0                     l11700:
  4707                           
  4708                           ; BSR set to: 0
  4709  0041B0  0E1D               	movlw	29
  4710  0041B2  5D97               	subwf	floor@expon& (0+255),w,b
  4711  0041B4  0E00               	movlw	0
  4712  0041B6  5998               	subwfb	(floor@expon+1)& (0+255),w,b
  4713  0041B8  E309               	bnc	l11704
  4714                           
  4715                           ; BSR set to: 0
  4716  0041BA  C08F  F08F         	movff	floor@x,?_floor
  4717  0041BE  C090  F090         	movff	floor@x+1,?_floor+1
  4718  0041C2  C091  F091         	movff	floor@x+2,?_floor+2
  4719  0041C6  C092  F092         	movff	floor@x+3,?_floor+3
  4720  0041CA  D050               	goto	l1653
  4721  0041CC                     l11704:
  4722                           
  4723                           ; BSR set to: 0
  4724  0041CC  C08F  F076         	movff	floor@x,?___fltol
  4725  0041D0  C090  F077         	movff	floor@x+1,?___fltol+1
  4726  0041D4  C091  F078         	movff	floor@x+2,?___fltol+2
  4727  0041D8  C092  F079         	movff	floor@x+3,?___fltol+3
  4728  0041DC  ECB5  F025         	call	___fltol	;wreg free
  4729  0041E0  C079  F08D         	movff	?___fltol+3,?___altofl+3
  4730  0041E4  C078  F08C         	movff	?___fltol+2,?___altofl+2
  4731  0041E8  C077  F08B         	movff	?___fltol+1,?___altofl+1
  4732  0041EC  C076  F08A         	movff	?___fltol,?___altofl
  4733  0041F0  ECFB  F028         	call	___altofl	;wreg free
  4734  0041F4  C08D  F096         	movff	?___altofl+3,floor@i+3
  4735  0041F8  C08C  F095         	movff	?___altofl+2,floor@i+2
  4736  0041FC  C08B  F094         	movff	?___altofl+1,floor@i+1
  4737  004200  C08A  F093         	movff	?___altofl,floor@i
  4738  004204  C08F  F00E         	movff	floor@x,?___flge
  4739  004208  C090  F00F         	movff	floor@x+1,?___flge+1
  4740  00420C  C091  F010         	movff	floor@x+2,?___flge+2
  4741  004210  C092  F011         	movff	floor@x+3,?___flge+3
  4742  004214  C093  F012         	movff	floor@i,?___flge+4
  4743  004218  C094  F013         	movff	floor@i+1,?___flge+5
  4744  00421C  C095  F014         	movff	floor@i+2,?___flge+6
  4745  004220  C096  F015         	movff	floor@i+3,?___flge+7
  4746  004224  EC1B  F028         	call	___flge	;wreg free
  4747  004228  E219               	bc	l1655
  4748  00422A  C093  F01D         	movff	floor@i,?___fladd
  4749  00422E  C094  F01E         	movff	floor@i+1,?___fladd+1
  4750  004232  C095  F01F         	movff	floor@i+2,?___fladd+2
  4751  004236  C096  F020         	movff	floor@i+3,?___fladd+3
  4752  00423A  6A21               	clrf	?___fladd+4,c
  4753  00423C  6A22               	clrf	?___fladd+5,c
  4754  00423E  0E80               	movlw	128
  4755  004240  6E23               	movwf	?___fladd+6,c
  4756  004242  0EBF               	movlw	191
  4757  004244  6E24               	movwf	?___fladd+7,c
  4758  004246  ECCA  F01E         	call	___fladd	;wreg free
  4759  00424A  C020  F092         	movff	?___fladd+3,?_floor+3
  4760  00424E  C01F  F091         	movff	?___fladd+2,?_floor+2
  4761  004252  C01E  F090         	movff	?___fladd+1,?_floor+1
  4762  004256  C01D  F08F         	movff	?___fladd,?_floor
  4763  00425A  D008               	goto	l1653
  4764  00425C                     l1655:
  4765  00425C  C093  F08F         	movff	floor@i,?_floor
  4766  004260  C094  F090         	movff	floor@i+1,?_floor+1
  4767  004264  C095  F091         	movff	floor@i+2,?_floor+2
  4768  004268  C096  F092         	movff	floor@i+3,?_floor+3
  4769  00426C                     l1653:
  4770  00426C  0012               	return	
  4771  00426E                     __end_of_floor:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           postinc0	equ	0xFEE
  4780                           wreg	equ	0xFE8
  4781                           postdec1	equ	0xFE5
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           indf2	equ	0xFDF
  4785                           postinc2	equ	0xFDE
  4786                           postdec2	equ	0xFDD
  4787                           fsr2h	equ	0xFDA
  4788                           fsr2l	equ	0xFD9
  4789                           status	equ	0xFD8
  4790                           
  4791 ;; *************** function ___fltol *****************
  4792 ;; Defined at:
  4793 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  f1              4   22[BANK0 ] int 
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;  exp1            1   27[BANK0 ] unsigned char 
  4798 ;;  sign1           1   26[BANK0 ] unsigned char 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  4   22[BANK0 ] long 
  4801 ;; Registers used:
  4802 ;;		wreg, status,2, status,0
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : F/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4808 ;;      Params:         0       4       0       0       0       0       0
  4809 ;;      Locals:         0       2       0       0       0       0       0
  4810 ;;      Temps:          4       0       0       0       0       0       0
  4811 ;;      Totals:         4       6       0       0       0       0       0
  4812 ;;Total ram usage:       10 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    2
  4815 ;; This function calls:
  4816 ;;		Nothing
  4817 ;; This function is called by:
  4818 ;;		_doWork
  4819 ;;		_setEventData
  4820 ;;		_exp
  4821 ;;		_floor
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text13
  4826  004B6A                     __ptext13:
  4827                           	opt stack 0
  4828  004B6A                     ___fltol:
  4829                           	opt stack 27
  4830                           
  4831                           ;incstack = 0
  4832                           ;incstack = 0
  4833  004B6A  0100               	movlb	0	; () banked
  4834  004B6C  3578               	rlcf	(___fltol@f1+2)& (0+255),w,b
  4835  004B6E  3579               	rlcf	(___fltol@f1+3)& (0+255),w,b
  4836  004B70  6F7B               	movwf	___fltol@exp1& (0+255),b
  4837  004B72  677B               	tstfsz	___fltol@exp1& (0+255),b
  4838  004B74  D005               	goto	l11794
  4839  004B76                     l11792:
  4840                           
  4841                           ; BSR set to: 0
  4842  004B76  6B76               	clrf	?___fltol& (0+255),b
  4843  004B78  6B77               	clrf	(?___fltol+1)& (0+255),b
  4844  004B7A  6B78               	clrf	(?___fltol+2)& (0+255),b
  4845  004B7C  6B79               	clrf	(?___fltol+3)& (0+255),b
  4846  004B7E  D043               	goto	l1664
  4847  004B80                     l11794:
  4848                           
  4849                           ; BSR set to: 0
  4850  004B80  C076  F042         	movff	___fltol@f1,??___fltol
  4851  004B84  C077  F043         	movff	___fltol@f1+1,??___fltol+1
  4852  004B88  C078  F044         	movff	___fltol@f1+2,??___fltol+2
  4853  004B8C  C079  F045         	movff	___fltol@f1+3,??___fltol+3
  4854  004B90  0E20               	movlw	32
  4855  004B92  D005               	goto	u10320
  4856  004B94                     u10325:
  4857  004B94  90D8               	bcf	status,0,c
  4858  004B96  3245               	rrcf	??___fltol+3,f,c
  4859  004B98  3244               	rrcf	??___fltol+2,f,c
  4860  004B9A  3243               	rrcf	??___fltol+1,f,c
  4861  004B9C  3242               	rrcf	??___fltol,f,c
  4862  004B9E                     u10320:
  4863  004B9E  2EE8               	decfsz	wreg,f,c
  4864  004BA0  D7F9               	goto	u10325
  4865  004BA2  5042               	movf	??___fltol,w,c
  4866  004BA4  6F7A               	movwf	___fltol@sign1& (0+255),b
  4867                           
  4868                           ; BSR set to: 0
  4869  004BA6  8F78               	bsf	(___fltol@f1+2)& (0+255),7,b
  4870                           
  4871                           ; BSR set to: 0
  4872  004BA8  6B79               	clrf	(___fltol@f1+3)& (0+255),b
  4873                           
  4874                           ; BSR set to: 0
  4875  004BAA  0E96               	movlw	150
  4876  004BAC  5F7B               	subwf	___fltol@exp1& (0+255),f,b
  4877                           
  4878                           ; BSR set to: 0
  4879  004BAE  AF7B               	btfss	___fltol@exp1& (0+255),7,b
  4880  004BB0  D00C               	goto	l11812
  4881                           
  4882                           ; BSR set to: 0
  4883  004BB2  517B               	movf	___fltol@exp1& (0+255),w,b
  4884  004BB4  0A80               	xorlw	128
  4885  004BB6  0F97               	addlw	151
  4886  004BB8  E3DE               	bnc	l11792
  4887  004BBA                     l11808:
  4888                           
  4889                           ; BSR set to: 0
  4890  004BBA  90D8               	bcf	status,0,c
  4891  004BBC  3379               	rrcf	(___fltol@f1+3)& (0+255),f,b
  4892  004BBE  3378               	rrcf	(___fltol@f1+2)& (0+255),f,b
  4893  004BC0  3377               	rrcf	(___fltol@f1+1)& (0+255),f,b
  4894  004BC2  3376               	rrcf	___fltol@f1& (0+255),f,b
  4895                           
  4896                           ; BSR set to: 0
  4897  004BC4  3F7B               	incfsz	___fltol@exp1& (0+255),f,b
  4898  004BC6  D7F9               	goto	l11808
  4899  004BC8  D00C               	goto	l11820
  4900  004BCA                     l11812:
  4901                           
  4902                           ; BSR set to: 0
  4903  004BCA  0E1F               	movlw	31
  4904  004BCC  657B               	cpfsgt	___fltol@exp1& (0+255),b
  4905  004BCE  D007               	goto	l11818
  4906  004BD0  D7D2               	goto	l11792
  4907  004BD2                     l11816:
  4908                           
  4909                           ; BSR set to: 0
  4910  004BD2  90D8               	bcf	status,0,c
  4911  004BD4  3776               	rlcf	___fltol@f1& (0+255),f,b
  4912  004BD6  3777               	rlcf	(___fltol@f1+1)& (0+255),f,b
  4913  004BD8  3778               	rlcf	(___fltol@f1+2)& (0+255),f,b
  4914  004BDA  3779               	rlcf	(___fltol@f1+3)& (0+255),f,b
  4915  004BDC  077B               	decf	___fltol@exp1& (0+255),f,b
  4916  004BDE                     l11818:
  4917                           
  4918                           ; BSR set to: 0
  4919  004BDE  677B               	tstfsz	___fltol@exp1& (0+255),b
  4920  004BE0  D7F8               	goto	l11816
  4921  004BE2                     l11820:
  4922                           
  4923                           ; BSR set to: 0
  4924  004BE2  517A               	movf	___fltol@sign1& (0+255),w,b
  4925  004BE4  E008               	bz	l11824
  4926                           
  4927                           ; BSR set to: 0
  4928  004BE6  1F79               	comf	(___fltol@f1+3)& (0+255),f,b
  4929  004BE8  1F78               	comf	(___fltol@f1+2)& (0+255),f,b
  4930  004BEA  1F77               	comf	(___fltol@f1+1)& (0+255),f,b
  4931  004BEC  6D76               	negf	___fltol@f1& (0+255),b
  4932  004BEE  0E00               	movlw	0
  4933  004BF0  2377               	addwfc	(___fltol@f1+1)& (0+255),f,b
  4934  004BF2  2378               	addwfc	(___fltol@f1+2)& (0+255),f,b
  4935  004BF4  2379               	addwfc	(___fltol@f1+3)& (0+255),f,b
  4936  004BF6                     l11824:
  4937                           
  4938                           ; BSR set to: 0
  4939  004BF6  C076  F076         	movff	___fltol@f1,?___fltol
  4940  004BFA  C077  F077         	movff	___fltol@f1+1,?___fltol+1
  4941  004BFE  C078  F078         	movff	___fltol@f1+2,?___fltol+2
  4942  004C02  C079  F079         	movff	___fltol@f1+3,?___fltol+3
  4943  004C06                     l1664:
  4944                           
  4945                           ; BSR set to: 0
  4946  004C06  0012               	return	
  4947  004C08                     __end_of___fltol:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           postinc0	equ	0xFEE
  4956                           wreg	equ	0xFE8
  4957                           postdec1	equ	0xFE5
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967 ;; *************** function _frexp *****************
  4968 ;; Defined at:
  4969 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;  value           4   13[COMRAM] long 
  4972 ;;  eptr            2   17[COMRAM] PTR int 
  4973 ;;		 -> log@exponent(2), floor@expon(2), 
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;		None
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  4   13[COMRAM] PTR int 
  4978 ;; Registers used:
  4979 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4980 ;; Tracked objects:
  4981 ;;		On entry : F/0
  4982 ;;		On exit  : F/0
  4983 ;;		Unchanged: F/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4985 ;;      Params:         6       0       0       0       0       0       0
  4986 ;;      Locals:         0       0       0       0       0       0       0
  4987 ;;      Temps:          3       0       0       0       0       0       0
  4988 ;;      Totals:         9       0       0       0       0       0       0
  4989 ;;Total ram usage:        9 bytes
  4990 ;; Hardware stack levels used:    1
  4991 ;; Hardware stack levels required when called:    2
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_floor
  4996 ;;		_log
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text14
  5001  004C9E                     __ptext14:
  5002                           	opt stack 0
  5003  004C9E                     _frexp:
  5004                           	opt stack 26
  5005                           
  5006                           ; BSR set to: 0
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;incstack = 0
  5010                           ;incstack = 0
  5011  004C9E  EE20  F00E         	lfsr	2,frexp@value
  5012  004CA2  50DE               	movf	postinc2,w,c
  5013  004CA4  10DE               	iorwf	postinc2,w,c
  5014  004CA6  10DE               	iorwf	postinc2,w,c
  5015  004CA8  10DE               	iorwf	postinc2,w,c
  5016  004CAA  E10C               	bnz	l11778
  5017                           
  5018                           ; BSR set to: 0
  5019  004CAC  C012  FFD9         	movff	frexp@eptr,fsr2l
  5020  004CB0  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5021  004CB4  0E00               	movlw	0
  5022  004CB6  6ADE               	clrf	postinc2,c
  5023  004CB8  6ADD               	clrf	postdec2,c
  5024                           
  5025                           ; BSR set to: 0
  5026  004CBA  6A0E               	clrf	?_frexp,c
  5027  004CBC  6A0F               	clrf	?_frexp+1,c
  5028  004CBE  6A10               	clrf	?_frexp+2,c
  5029  004CC0  6A11               	clrf	?_frexp+3,c
  5030  004CC2  D02F               	goto	l1680
  5031  004CC4                     l11778:
  5032                           
  5033                           ; BSR set to: 0
  5034  004CC4  5011               	movf	frexp@value+3,w,c
  5035  004CC6  0B7F               	andlw	127
  5036  004CC8  6E14               	movwf	??_frexp& (0+255),c
  5037  004CCA  90D8               	bcf	status,0,c
  5038  004CCC  3414               	rlcf	??_frexp,w,c
  5039  004CCE  6E15               	movwf	(??_frexp+1)& (0+255),c
  5040  004CD0  6A16               	clrf	(??_frexp+2)& (0+255),c
  5041  004CD2  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  5042  004CD4  C012  FFD9         	movff	frexp@eptr,fsr2l
  5043  004CD8  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5044  004CDC  C015  FFDE         	movff	??_frexp+1,postinc2
  5045  004CE0  C016  FFDD         	movff	??_frexp+2,postdec2
  5046  004CE4  3410               	rlcf	frexp@value+2,w,c
  5047  004CE6  36E8               	rlcf	wreg,f,c
  5048  004CE8  0B01               	andlw	1
  5049  004CEA  C012  FFD9         	movff	frexp@eptr,fsr2l
  5050  004CEE  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5051  004CF2  12DE               	iorwf	postinc2,f,c
  5052  004CF4  0E00               	movlw	0
  5053  004CF6  12DD               	iorwf	postdec2,f,c
  5054                           
  5055                           ; BSR set to: 0
  5056  004CF8  C012  FFD9         	movff	frexp@eptr,fsr2l
  5057  004CFC  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  5058  004D00  0E82               	movlw	130
  5059  004D02  26DE               	addwf	postinc2,f,c
  5060  004D04  0EFF               	movlw	255
  5061  004D06  22DD               	addwfc	postdec2,f,c
  5062                           
  5063                           ; BSR set to: 0
  5064  004D08  5011               	movf	frexp@value+3,w,c
  5065  004D0A  0B80               	andlw	-128
  5066  004D0C  093F               	iorlw	63
  5067  004D0E  6E11               	movwf	frexp@value+3,c
  5068                           
  5069                           ; BSR set to: 0
  5070  004D10  9E10               	bcf	frexp@value+2,7,c
  5071                           
  5072                           ; BSR set to: 0
  5073  004D12  C00E  F00E         	movff	frexp@value,?_frexp
  5074  004D16  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  5075  004D1A  C010  F010         	movff	frexp@value+2,?_frexp+2
  5076  004D1E  C011  F011         	movff	frexp@value+3,?_frexp+3
  5077  004D22                     l1680:
  5078                           
  5079                           ; BSR set to: 0
  5080  004D22  0012               	return	
  5081  004D24                     __end_of_frexp:
  5082                           	opt stack 0
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           postinc0	equ	0xFEE
  5090                           wreg	equ	0xFE8
  5091                           postdec1	equ	0xFE5
  5092                           fsr1h	equ	0xFE2
  5093                           fsr1l	equ	0xFE1
  5094                           indf2	equ	0xFDF
  5095                           postinc2	equ	0xFDE
  5096                           postdec2	equ	0xFDD
  5097                           fsr2h	equ	0xFDA
  5098                           fsr2l	equ	0xFD9
  5099                           status	equ	0xFD8
  5100                           
  5101 ;; *************** function ___flge *****************
  5102 ;; Defined at:
  5103 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  ff1             4   13[COMRAM] PTR int 
  5106 ;;  ff2             4   17[COMRAM] PTR int 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;		None               void
  5111 ;; Registers used:
  5112 ;;		wreg, status,2, status,0
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5118 ;;      Params:         8       0       0       0       0       0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0
  5121 ;;      Totals:         8       0       0       0       0       0       0
  5122 ;;Total ram usage:        8 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    2
  5125 ;; This function calls:
  5126 ;;		Nothing
  5127 ;; This function is called by:
  5128 ;;		_exp
  5129 ;;		_floor
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text15
  5134  005036                     __ptext15:
  5135                           	opt stack 0
  5136  005036                     ___flge:
  5137                           	opt stack 26
  5138                           
  5139                           ; BSR set to: 0
  5140                           ;incstack = 0
  5141                           ;incstack = 0
  5142  005036  AE11               	btfss	___flge@ff1+3,7,c
  5143  005038  D009               	goto	l11752
  5144  00503A  6C0E               	negf	___flge@ff1,c
  5145  00503C  1E0F               	comf	___flge@ff1+1,f,c
  5146  00503E  B0D8               	btfsc	status,0,c
  5147  005040  2A0F               	incf	___flge@ff1+1,f,c
  5148  005042  1E10               	comf	___flge@ff1+2,f,c
  5149  005044  B0D8               	btfsc	status,0,c
  5150  005046  2A10               	incf	___flge@ff1+2,f,c
  5151  005048  0E80               	movlw	128
  5152  00504A  5611               	subfwb	___flge@ff1+3,f,c
  5153  00504C                     l11752:
  5154  00504C  AE15               	btfss	___flge@ff2+3,7,c
  5155  00504E  D009               	goto	l1611
  5156  005050  6C12               	negf	___flge@ff2,c
  5157  005052  1E13               	comf	___flge@ff2+1,f,c
  5158  005054  B0D8               	btfsc	status,0,c
  5159  005056  2A13               	incf	___flge@ff2+1,f,c
  5160  005058  1E14               	comf	___flge@ff2+2,f,c
  5161  00505A  B0D8               	btfsc	status,0,c
  5162  00505C  2A14               	incf	___flge@ff2+2,f,c
  5163  00505E  0E80               	movlw	128
  5164  005060  5615               	subfwb	___flge@ff2+3,f,c
  5165  005062                     l1611:
  5166  005062  0E80               	movlw	128
  5167  005064  1A11               	xorwf	___flge@ff1+3,f,c
  5168  005066  1A15               	xorwf	___flge@ff2+3,f,c
  5169  005068  5012               	movf	___flge@ff2,w,c
  5170  00506A  5C0E               	subwf	___flge@ff1,w,c
  5171  00506C  5013               	movf	___flge@ff2+1,w,c
  5172  00506E  580F               	subwfb	___flge@ff1+1,w,c
  5173  005070  5014               	movf	___flge@ff2+2,w,c
  5174  005072  5810               	subwfb	___flge@ff1+2,w,c
  5175  005074  5015               	movf	___flge@ff2+3,w,c
  5176  005076  5811               	subwfb	___flge@ff1+3,w,c
  5177  005078  E202               	bc	l11758
  5178  00507A  90D8               	bcf	status,0,c
  5179  00507C  D001               	goto	l1612
  5180  00507E                     l11758:
  5181  00507E  80D8               	bsf	status,0,c
  5182  005080                     l1612:
  5183  005080  0012               	return	
  5184  005082                     __end_of___flge:
  5185                           	opt stack 0
  5186                           tblptru	equ	0xFF8
  5187                           tblptrh	equ	0xFF7
  5188                           tblptrl	equ	0xFF6
  5189                           tablat	equ	0xFF5
  5190                           prodh	equ	0xFF4
  5191                           prodl	equ	0xFF3
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           postdec1	equ	0xFE5
  5195                           fsr1h	equ	0xFE2
  5196                           fsr1l	equ	0xFE1
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function ___altofl *****************
  5205 ;; Defined at:
  5206 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  c               4   42[BANK0 ] long 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  sign            1   46[BANK0 ] unsigned char 
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  4   42[BANK0 ] unsigned char 
  5213 ;; Registers used:
  5214 ;;		wreg, status,2, status,0, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : F/0
  5217 ;;		On exit  : 0/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5220 ;;      Params:         0       4       0       0       0       0       0
  5221 ;;      Locals:         0       1       0       0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0
  5223 ;;      Totals:         0       5       0       0       0       0       0
  5224 ;;Total ram usage:        5 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    3
  5227 ;; This function calls:
  5228 ;;		___flpack
  5229 ;; This function is called by:
  5230 ;;		_doWork
  5231 ;;		_floor
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text16
  5236  0051F6                     __ptext16:
  5237                           	opt stack 0
  5238  0051F6                     ___altofl:
  5239                           	opt stack 26
  5240                           
  5241                           ; BSR set to: 0
  5242                           
  5243                           ;incstack = 0
  5244                           ;incstack = 0
  5245  0051F6  6B8E               	clrf	___altofl@sign& (0+255),b
  5246  0051F8  AF8D               	btfss	(___altofl@c+3)& (0+255),7,b
  5247  0051FA  D00A               	goto	l11506
  5248                           
  5249                           ; BSR set to: 0
  5250  0051FC  1F8D               	comf	(___altofl@c+3)& (0+255),f,b
  5251  0051FE  1F8C               	comf	(___altofl@c+2)& (0+255),f,b
  5252  005200  1F8B               	comf	(___altofl@c+1)& (0+255),f,b
  5253  005202  6D8A               	negf	___altofl@c& (0+255),b
  5254  005204  0E00               	movlw	0
  5255  005206  238B               	addwfc	(___altofl@c+1)& (0+255),f,b
  5256  005208  238C               	addwfc	(___altofl@c+2)& (0+255),f,b
  5257  00520A  238D               	addwfc	(___altofl@c+3)& (0+255),f,b
  5258                           
  5259                           ; BSR set to: 0
  5260  00520C  0E01               	movlw	1
  5261  00520E  6F8E               	movwf	___altofl@sign& (0+255),b
  5262  005210                     l11506:
  5263                           
  5264                           ; BSR set to: 0
  5265  005210  C08A  F00E         	movff	___altofl@c,?___flpack
  5266  005214  C08B  F00F         	movff	___altofl@c+1,?___flpack+1
  5267  005218  C08C  F010         	movff	___altofl@c+2,?___flpack+2
  5268  00521C  C08D  F011         	movff	___altofl@c+3,?___flpack+3
  5269  005220  0E96               	movlw	150
  5270  005222  6E12               	movwf	?___flpack+4,c
  5271  005224  C08E  F013         	movff	___altofl@sign,?___flpack+5
  5272  005228  EC50  F023         	call	___flpack	;wreg free
  5273  00522C  C011  F08D         	movff	?___flpack+3,?___altofl+3
  5274  005230  C010  F08C         	movff	?___flpack+2,?___altofl+2
  5275  005234  C00F  F08B         	movff	?___flpack+1,?___altofl+1
  5276  005238  C00E  F08A         	movff	?___flpack,?___altofl
  5277  00523C  0012               	return	
  5278  00523E                     __end_of___altofl:
  5279                           	opt stack 0
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           postinc0	equ	0xFEE
  5287                           wreg	equ	0xFE8
  5288                           postdec1	equ	0xFE5
  5289                           fsr1h	equ	0xFE2
  5290                           fsr1l	equ	0xFE1
  5291                           indf2	equ	0xFDF
  5292                           postinc2	equ	0xFDE
  5293                           postdec2	equ	0xFDD
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function ___asflsub *****************
  5299 ;; Defined at:
  5300 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  f1p             2   30[BANK0 ] PTR 
  5303 ;;		 -> exp@x(4), doWork@temp(4), 
  5304 ;;  f2              4   32[BANK0 ] PTR 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;		None
  5307 ;; Return value:  Size  Location     Type
  5308 ;;                  4   30[BANK0 ] PTR 
  5309 ;; Registers used:
  5310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : 0/0
  5313 ;;		On exit  : F/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5316 ;;      Params:         0       6       0       0       0       0       0
  5317 ;;      Locals:         0       0       0       0       0       0       0
  5318 ;;      Temps:          0       0       0       0       0       0       0
  5319 ;;      Totals:         0       6       0       0       0       0       0
  5320 ;;Total ram usage:        6 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:    5
  5323 ;; This function calls:
  5324 ;;		___flsub
  5325 ;; This function is called by:
  5326 ;;		_doWork
  5327 ;;		_exp
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text17
  5332  004FE8                     __ptext17:
  5333                           	opt stack 0
  5334  004FE8                     ___asflsub:
  5335                           	opt stack 24
  5336                           
  5337                           ;	Return value of ___asflsub is never used
  5338                           
  5339                           ;incstack = 0
  5340                           ;incstack = 0
  5341  004FE8  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5342  004FEC  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5343  004FF0  0100               	movlb	0	; () banked
  5344  004FF2  CFDE F076          	movff	postinc2,?___flsub
  5345  004FF6  CFDE F077          	movff	postinc2,?___flsub+1
  5346  004FFA  CFDE F078          	movff	postinc2,?___flsub+2
  5347  004FFE  CFDE F079          	movff	postinc2,?___flsub+3
  5348  005002  C080  F07A         	movff	___asflsub@f2,?___flsub+4
  5349  005006  C081  F07B         	movff	___asflsub@f2+1,?___flsub+5
  5350  00500A  C082  F07C         	movff	___asflsub@f2+2,?___flsub+6
  5351  00500E  C083  F07D         	movff	___asflsub@f2+3,?___flsub+7
  5352  005012  ECA7  F029         	call	___flsub	;wreg free
  5353  005016  C07E  FFD9         	movff	___asflsub@f1p,fsr2l
  5354  00501A  C07F  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5355  00501E  0100               	movlb	0	; () banked
  5356  005020  C076  FFDE         	movff	?___flsub,postinc2
  5357  005024  C077  FFDE         	movff	?___flsub+1,postinc2
  5358  005028  C078  FFDE         	movff	?___flsub+2,postinc2
  5359  00502C  C079  FFDD         	movff	?___flsub+3,postdec2
  5360  005030  06D9               	decf	fsr2l,f,c
  5361  005032  06D9               	decf	fsr2l,f,c
  5362                           
  5363                           ; BSR set to: 0
  5364  005034  0012               	return	
  5365  005036                     __end_of___asflsub:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           postinc0	equ	0xFEE
  5374                           wreg	equ	0xFE8
  5375                           postdec1	equ	0xFE5
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           fsr2h	equ	0xFDA
  5382                           fsr2l	equ	0xFD9
  5383                           status	equ	0xFD8
  5384                           
  5385 ;; *************** function ___flsub *****************
  5386 ;; Defined at:
  5387 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5388 ;; Parameters:    Size  Location     Type
  5389 ;;  f1              4   22[BANK0 ] PTR 
  5390 ;;  f2              4   26[BANK0 ] PTR 
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  4   22[BANK0 ] PTR 
  5395 ;; Registers used:
  5396 ;;		wreg, status,2, status,0, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5402 ;;      Params:         0       8       0       0       0       0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0
  5405 ;;      Totals:         0       8       0       0       0       0       0
  5406 ;;Total ram usage:        8 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    4
  5409 ;; This function calls:
  5410 ;;		___fladd
  5411 ;; This function is called by:
  5412 ;;		_doWork
  5413 ;;		___asflsub
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           	psect	text18
  5418  00534E                     __ptext18:
  5419                           	opt stack 0
  5420  00534E                     ___flsub:
  5421                           	opt stack 25
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;incstack = 0
  5425                           ;incstack = 0
  5426  00534E  0100               	movlb	0	; () banked
  5427  005350  0E80               	movlw	128
  5428  005352  1B7D               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5429                           
  5430                           ; BSR set to: 0
  5431  005354  C076  F01D         	movff	___flsub@f1,?___fladd
  5432  005358  C077  F01E         	movff	___flsub@f1+1,?___fladd+1
  5433  00535C  C078  F01F         	movff	___flsub@f1+2,?___fladd+2
  5434  005360  C079  F020         	movff	___flsub@f1+3,?___fladd+3
  5435  005364  C07A  F021         	movff	___flsub@f2,?___fladd+4
  5436  005368  C07B  F022         	movff	___flsub@f2+1,?___fladd+5
  5437  00536C  C07C  F023         	movff	___flsub@f2+2,?___fladd+6
  5438  005370  C07D  F024         	movff	___flsub@f2+3,?___fladd+7
  5439  005374  ECCA  F01E         	call	___fladd	;wreg free
  5440  005378  C020  F079         	movff	?___fladd+3,?___flsub+3
  5441  00537C  C01F  F078         	movff	?___fladd+2,?___flsub+2
  5442  005380  C01E  F077         	movff	?___fladd+1,?___flsub+1
  5443  005384  C01D  F076         	movff	?___fladd,?___flsub
  5444  005388  0012               	return	
  5445  00538A                     __end_of___flsub:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           postdec1	equ	0xFE5
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function ___asflmul *****************
  5466 ;; Defined at:
  5467 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  mp              1    wreg     PTR 
  5470 ;;		 -> exp@x(4), 
  5471 ;;  multiplicand    4   22[BANK0 ] PTR 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  mp              1   65[COMRAM] PTR 
  5474 ;;		 -> exp@x(4), 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  4   22[BANK0 ] PTR 
  5477 ;; Registers used:
  5478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : F/0
  5481 ;;		On exit  : F/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5484 ;;      Params:         0       4       0       0       0       0       0
  5485 ;;      Locals:         1       0       0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0
  5487 ;;      Totals:         1       4       0       0       0       0       0
  5488 ;;Total ram usage:        5 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    4
  5491 ;; This function calls:
  5492 ;;		___flmul
  5493 ;; This function is called by:
  5494 ;;		_exp
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text19
  5499  005082                     __ptext19:
  5500                           	opt stack 0
  5501  005082                     ___asflmul:
  5502                           	opt stack 24
  5503                           
  5504                           ;incstack = 0
  5505                           ;incstack = 0
  5506                           ;___asflmul@mp stored from wreg
  5507  005082  CFE8 F042          	movff	wreg,___asflmul@mp
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;	Return value of ___asflmul is never used
  5511  005086  5042               	movf	___asflmul@mp,w,c
  5512  005088  6ED9               	movwf	fsr2l,c
  5513  00508A  6ADA               	clrf	fsr2h,c
  5514  00508C  CFDE F060          	movff	postinc2,?___flmul
  5515  005090  CFDE F061          	movff	postinc2,?___flmul+1
  5516  005094  CFDE F062          	movff	postinc2,?___flmul+2
  5517  005098  CFDE F063          	movff	postinc2,?___flmul+3
  5518  00509C  C076  F064         	movff	___asflmul@multiplicand,?___flmul+4
  5519  0050A0  C077  F065         	movff	___asflmul@multiplicand+1,?___flmul+5
  5520  0050A4  C078  F066         	movff	___asflmul@multiplicand+2,?___flmul+6
  5521  0050A8  C079  F067         	movff	___asflmul@multiplicand+3,?___flmul+7
  5522  0050AC  EC23  F022         	call	___flmul	;wreg free
  5523  0050B0  5042               	movf	___asflmul@mp,w,c
  5524  0050B2  6ED9               	movwf	fsr2l,c
  5525  0050B4  6ADA               	clrf	fsr2h,c
  5526  0050B6  0100               	movlb	0	; () banked
  5527  0050B8  C060  FFDE         	movff	?___flmul,postinc2
  5528  0050BC  C061  FFDE         	movff	?___flmul+1,postinc2
  5529  0050C0  C062  FFDE         	movff	?___flmul+2,postinc2
  5530  0050C4  C063  FFDD         	movff	?___flmul+3,postdec2
  5531  0050C8  06D9               	decf	fsr2l,f,c
  5532  0050CA  06D9               	decf	fsr2l,f,c
  5533                           
  5534                           ; BSR set to: 0
  5535  0050CC  0012               	return	
  5536  0050CE                     __end_of___asflmul:
  5537                           	opt stack 0
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           postinc0	equ	0xFEE
  5545                           wreg	equ	0xFE8
  5546                           postdec1	equ	0xFE5
  5547                           fsr1h	equ	0xFE2
  5548                           fsr1l	equ	0xFE1
  5549                           indf2	equ	0xFDF
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           fsr2h	equ	0xFDA
  5553                           fsr2l	equ	0xFD9
  5554                           status	equ	0xFD8
  5555                           
  5556 ;; *************** function ___fldiv *****************
  5557 ;; Defined at:
  5558 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  f1              4   43[COMRAM] PTR 
  5561 ;;  f2              4   47[COMRAM] PTR 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  f3              4   58[COMRAM] PTR 
  5564 ;;  sign            1   64[COMRAM] unsigned char 
  5565 ;;  exp             1   63[COMRAM] unsigned char 
  5566 ;;  cntr            1   62[COMRAM] unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;                  4   43[COMRAM] unsigned char 
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0, cstack
  5571 ;; Tracked objects:
  5572 ;;		On entry : 0/1
  5573 ;;		On exit  : 0/0
  5574 ;;		Unchanged: 0/0
  5575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5576 ;;      Params:         8       0       0       0       0       0       0
  5577 ;;      Locals:        14       0       0       0       0       0       0
  5578 ;;      Temps:          0       0       0       0       0       0       0
  5579 ;;      Totals:        22       0       0       0       0       0       0
  5580 ;;Total ram usage:       22 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    3
  5583 ;; This function calls:
  5584 ;;		___flpack
  5585 ;; This function is called by:
  5586 ;;		_doWork
  5587 ;;		_Celsius2Fahrenheit
  5588 ;;		___asfldiv
  5589 ;;		_exp
  5590 ;; This function uses a non-reentrant model
  5591 ;;
  5592                           
  5593                           	psect	text20
  5594  00497E                     __ptext20:
  5595                           	opt stack 0
  5596  00497E                     ___fldiv:
  5597                           	opt stack 26
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;incstack = 0
  5601                           ;incstack = 0
  5602  00497E  342E               	rlcf	(___fldiv@f1+2)& (0+255),w,c
  5603  004980  342F               	rlcf	(___fldiv@f1+3)& (0+255),w,c
  5604  004982  6E40               	movwf	___fldiv@exp,c
  5605  004984  6640               	tstfsz	___fldiv@exp& (0+255),c
  5606  004986  D001               	goto	l11590
  5607  004988  D005               	goto	u10100
  5608  00498A                     l11590:
  5609  00498A  3432               	rlcf	(___fldiv@f2+2)& (0+255),w,c
  5610  00498C  3433               	rlcf	(___fldiv@f2+3)& (0+255),w,c
  5611  00498E  6E41               	movwf	___fldiv@sign,c
  5612  004990  6641               	tstfsz	___fldiv@sign& (0+255),c
  5613  004992  D005               	goto	l11594
  5614  004994                     u10100:
  5615  004994  6A2C               	clrf	?___fldiv,c
  5616  004996  6A2D               	clrf	?___fldiv+1,c
  5617  004998  6A2E               	clrf	?___fldiv+2,c
  5618  00499A  6A2F               	clrf	?___fldiv+3,c
  5619  00499C  D043               	goto	l1603
  5620  00499E                     l11594:
  5621  00499E  5041               	movf	___fldiv@sign,w,c
  5622  0049A0  0F89               	addlw	137
  5623  0049A2  5E40               	subwf	___fldiv@exp,f,c
  5624  0049A4  C02F  F041         	movff	___fldiv@f1+3,___fldiv@sign
  5625  0049A8  5033               	movf	(___fldiv@f2+3)& (0+255),w,c
  5626  0049AA  1A41               	xorwf	___fldiv@sign,f,c
  5627  0049AC  0E80               	movlw	128
  5628  0049AE  1641               	andwf	___fldiv@sign,f,c
  5629  0049B0  8E2E               	bsf	___fldiv@f1+2,7,c
  5630  0049B2  6A2F               	clrf	___fldiv@f1+3,c
  5631  0049B4  8E32               	bsf	___fldiv@f2+2,7,c
  5632  0049B6  6A33               	clrf	___fldiv@f2+3,c
  5633  0049B8  0E20               	movlw	32
  5634  0049BA  6E3F               	movwf	___fldiv@cntr,c
  5635  0049BC                     l11606:
  5636  0049BC  90D8               	bcf	status,0,c
  5637  0049BE  363B               	rlcf	___fldiv@f3,f,c
  5638  0049C0  363C               	rlcf	___fldiv@f3+1,f,c
  5639  0049C2  363D               	rlcf	___fldiv@f3+2,f,c
  5640  0049C4  363E               	rlcf	___fldiv@f3+3,f,c
  5641  0049C6  5030               	movf	___fldiv@f2,w,c
  5642  0049C8  5C2C               	subwf	___fldiv@f1,w,c
  5643  0049CA  5031               	movf	___fldiv@f2+1,w,c
  5644  0049CC  582D               	subwfb	___fldiv@f1+1,w,c
  5645  0049CE  5032               	movf	___fldiv@f2+2,w,c
  5646  0049D0  582E               	subwfb	___fldiv@f1+2,w,c
  5647  0049D2  5033               	movf	___fldiv@f2+3,w,c
  5648  0049D4  582F               	subwfb	___fldiv@f1+3,w,c
  5649  0049D6  E309               	bnc	l11614
  5650  0049D8  5030               	movf	___fldiv@f2,w,c
  5651  0049DA  5E2C               	subwf	___fldiv@f1,f,c
  5652  0049DC  5031               	movf	___fldiv@f2+1,w,c
  5653  0049DE  5A2D               	subwfb	___fldiv@f1+1,f,c
  5654  0049E0  5032               	movf	___fldiv@f2+2,w,c
  5655  0049E2  5A2E               	subwfb	___fldiv@f1+2,f,c
  5656  0049E4  5033               	movf	___fldiv@f2+3,w,c
  5657  0049E6  5A2F               	subwfb	___fldiv@f1+3,f,c
  5658  0049E8  803B               	bsf	___fldiv@f3,0,c
  5659  0049EA                     l11614:
  5660  0049EA  90D8               	bcf	status,0,c
  5661  0049EC  362C               	rlcf	___fldiv@f1,f,c
  5662  0049EE  362D               	rlcf	___fldiv@f1+1,f,c
  5663  0049F0  362E               	rlcf	___fldiv@f1+2,f,c
  5664  0049F2  362F               	rlcf	___fldiv@f1+3,f,c
  5665  0049F4  2E3F               	decfsz	___fldiv@cntr,f,c
  5666  0049F6  D7E2               	goto	l11606
  5667  0049F8  C03B  F00E         	movff	___fldiv@f3,?___flpack
  5668  0049FC  C03C  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5669  004A00  C03D  F010         	movff	___fldiv@f3+2,?___flpack+2
  5670  004A04  C03E  F011         	movff	___fldiv@f3+3,?___flpack+3
  5671  004A08  C040  F012         	movff	___fldiv@exp,?___flpack+4
  5672  004A0C  C041  F013         	movff	___fldiv@sign,?___flpack+5
  5673  004A10  EC50  F023         	call	___flpack	;wreg free
  5674  004A14  C011  F02F         	movff	?___flpack+3,?___fldiv+3
  5675  004A18  C010  F02E         	movff	?___flpack+2,?___fldiv+2
  5676  004A1C  C00F  F02D         	movff	?___flpack+1,?___fldiv+1
  5677  004A20  C00E  F02C         	movff	?___flpack,?___fldiv
  5678  004A24                     l1603:
  5679  004A24  0012               	return	
  5680  004A26                     __end_of___fldiv:
  5681                           	opt stack 0
  5682                           tblptru	equ	0xFF8
  5683                           tblptrh	equ	0xFF7
  5684                           tblptrl	equ	0xFF6
  5685                           tablat	equ	0xFF5
  5686                           prodh	equ	0xFF4
  5687                           prodl	equ	0xFF3
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           postdec1	equ	0xFE5
  5691                           fsr1h	equ	0xFE2
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           fsr2h	equ	0xFDA
  5697                           fsr2l	equ	0xFD9
  5698                           status	equ	0xFD8
  5699                           
  5700 ;; *************** function _vscp_doOneSecondWork *****************
  5701 ;; Defined at:
  5702 ;;		line 513 in file "../../vscp_firmware/common/vscp_firmware.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;		None
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;		None
  5707 ;; Return value:  Size  Location     Type
  5708 ;;		None               void
  5709 ;; Registers used:
  5710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : F/0
  5713 ;;		On exit  : F/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5716 ;;      Params:         0       0       0       0       0       0       0
  5717 ;;      Locals:         0       0       0       0       0       0       0
  5718 ;;      Temps:          0       1       0       0       0       0       0
  5719 ;;      Totals:         0       1       0       0       0       0       0
  5720 ;;Total ram usage:        1 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    8
  5723 ;; This function calls:
  5724 ;;		_vscp_getZone
  5725 ;;		_vscp_getSubzone
  5726 ;;		_vscp_sendHeartBeat
  5727 ;; This function is called by:
  5728 ;;		_main
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           	psect	text21
  5733  0050CE                     __ptext21:
  5734                           	opt stack 0
  5735  0050CE                     _vscp_doOneSecondWork:
  5736                           	opt stack 22
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;vscp_firmware.c: 515: ++vscp_second;
  5740                           
  5741                           ;incstack = 0
  5742                           ;incstack = 0
  5743  0050CE  2A51               	incf	_vscp_second,f,c
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;vscp_firmware.c: 517: if (vscp_second > 59) {
  5747  0050D0  0E3B               	movlw	59
  5748  0050D2  6451               	cpfsgt	_vscp_second,c
  5749  0050D4  D00C               	goto	l10224
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;vscp_firmware.c: 518: vscp_second = 0;
  5753  0050D6  6A51               	clrf	_vscp_second,c
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;vscp_firmware.c: 519: vscp_minute++;
  5757  0050D8  2BB9               	incf	_vscp_minute& (0+255),f,b
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;vscp_firmware.c: 522: if (0x03 == vscp_node_state) {
  5761  0050DA  51BB               	movf	_vscp_node_state& (0+255),w,b
  5762  0050DC  0A03               	xorlw	3
  5763  0050DE  E107               	bnz	l10224
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;vscp_firmware.c: 523: vscp_sendHeartBeat(vscp_getZone(),
  5767                           ;vscp_firmware.c: 524: vscp_getSubzone());
  5768  0050E0  EC2C  F02C         	call	_vscp_getSubzone	;wreg free
  5769  0050E4  6E44               	movwf	?_vscp_sendHeartBeat,c
  5770  0050E6  EC31  F02C         	call	_vscp_getZone	;wreg free
  5771  0050EA  ECEA  F02A         	call	_vscp_sendHeartBeat
  5772  0050EE                     l10224:
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;vscp_firmware.c: 525: }
  5776                           ;vscp_firmware.c: 526: }
  5777                           ;vscp_firmware.c: 528: if (vscp_minute > 59) {
  5778  0050EE  0E3B               	movlw	59
  5779  0050F0  65B9               	cpfsgt	_vscp_minute& (0+255),b
  5780  0050F2  D002               	goto	l10230
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;vscp_firmware.c: 529: vscp_minute = 0;
  5784  0050F4  6BB9               	clrf	_vscp_minute& (0+255),b
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;vscp_firmware.c: 530: vscp_hour++;
  5788  0050F6  2BB7               	incf	_vscp_hour& (0+255),f,b
  5789  0050F8                     l10230:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;vscp_firmware.c: 531: }
  5793                           ;vscp_firmware.c: 533: if (vscp_hour > 23) vscp_hour = 0;
  5794  0050F8  0E17               	movlw	23
  5795  0050FA  65B7               	cpfsgt	_vscp_hour& (0+255),b
  5796  0050FC  D001               	goto	l10234
  5797                           
  5798                           ; BSR set to: 0
  5799  0050FE  6BB7               	clrf	_vscp_hour& (0+255),b
  5800  005100                     l10234:
  5801                           
  5802                           ; BSR set to: 0
  5803                           ;vscp_firmware.c: 537: if (0x03 == vscp_node_state) {
  5804  005100  51BB               	movf	_vscp_node_state& (0+255),w,b
  5805  005102  0A03               	xorlw	3
  5806  005104  E109               	bnz	l1100
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;vscp_firmware.c: 538: vscp_guid_reset++;
  5810  005106  2A4C               	incf	_vscp_guid_reset,f,c
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;vscp_firmware.c: 539: if ((vscp_guid_reset & 0x0f) >= 2) {
  5814  005108  C04C  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5815  00510C  0E0F               	movlw	15
  5816  00510E  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5817  005110  0E02               	movlw	2
  5818  005112  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5819  005114  B0D8               	btfsc	status,0,c
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;vscp_firmware.c: 540: vscp_guid_reset = 0;
  5823  005116  6A4C               	clrf	_vscp_guid_reset,c
  5824  005118                     l1100:
  5825                           
  5826                           ; BSR set to: 0
  5827  005118  0012               	return	
  5828  00511A                     __end_of_vscp_doOneSecondWork:
  5829                           	opt stack 0
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           postinc0	equ	0xFEE
  5837                           wreg	equ	0xFE8
  5838                           postdec1	equ	0xFE5
  5839                           fsr1h	equ	0xFE2
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _vscp_sendHeartBeat *****************
  5849 ;; Defined at:
  5850 ;;		line 367 in file "../../vscp_firmware/common/vscp_firmware.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  zone            1    wreg     unsigned char 
  5853 ;;  subzone         1   67[COMRAM] unsigned char 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;  zone            1   68[COMRAM] unsigned char 
  5856 ;; Return value:  Size  Location     Type
  5857 ;;		None               void
  5858 ;; Registers used:
  5859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : F/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5865 ;;      Params:         1       0       0       0       0       0       0
  5866 ;;      Locals:         1       0       0       0       0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0
  5868 ;;      Totals:         2       0       0       0       0       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    7
  5872 ;; This function calls:
  5873 ;;		_vscp_sendEvent
  5874 ;; This function is called by:
  5875 ;;		_vscp_doOneSecondWork
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text22
  5880  0055D4                     __ptext22:
  5881                           	opt stack 0
  5882  0055D4                     _vscp_sendHeartBeat:
  5883                           	opt stack 22
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;incstack = 0
  5887                           ;incstack = 0
  5888                           ;vscp_sendHeartBeat@zone stored from wreg
  5889  0055D4  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5890                           
  5891                           ;vscp_firmware.c: 368: vscp_omsg.flags = 0x80 + 3;
  5892  0055D8  0E83               	movlw	131
  5893  0055DA  0100               	movlb	0	; () banked
  5894  0055DC  6FCA               	movwf	_vscp_omsg& (0+255),b
  5895                           
  5896                           ;vscp_firmware.c: 369: vscp_omsg.priority = 0x07;
  5897  0055DE  0E07               	movlw	7
  5898  0055E0  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  5899                           
  5900                           ;vscp_firmware.c: 370: vscp_omsg.vscp_class = 20;
  5901  0055E2  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  5902  0055E4  0E14               	movlw	20
  5903  0055E6  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  5904                           
  5905                           ;vscp_firmware.c: 371: vscp_omsg.vscp_type = 9;
  5906  0055E8  0E09               	movlw	9
  5907  0055EA  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;vscp_firmware.c: 372: vscp_omsg.data[ 0 ] = 0;
  5911  0055EC  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;vscp_firmware.c: 373: vscp_omsg.data[ 1 ] = zone;
  5915  0055EE  C045  F0D0         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;vscp_firmware.c: 374: vscp_omsg.data[ 2 ] = subzone;
  5919  0055F2  C044  F0D1         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;vscp_firmware.c: 377: vscp_sendEvent();
  5923  0055F6  EFD6  F02A         	goto	_vscp_sendEvent	;wreg free
  5924  0055FA                     __end_of_vscp_sendHeartBeat:
  5925                           	opt stack 0
  5926                           tblptru	equ	0xFF8
  5927                           tblptrh	equ	0xFF7
  5928                           tblptrl	equ	0xFF6
  5929                           tablat	equ	0xFF5
  5930                           prodh	equ	0xFF4
  5931                           prodl	equ	0xFF3
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           fsr1h	equ	0xFE2
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _vscp_getSubzone *****************
  5945 ;; Defined at:
  5946 ;;		line 2726 in file "../main.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      unsigned char 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : F/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5960 ;;      Params:         0       0       0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    3
  5967 ;; This function calls:
  5968 ;;		_readEEPROM
  5969 ;; This function is called by:
  5970 ;;		_vscp_doOneSecondWork
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text23
  5975  005858                     __ptext23:
  5976                           	opt stack 0
  5977  005858                     _vscp_getSubzone:
  5978                           	opt stack 26
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;main.c: 2727: return readEEPROM(0x42);
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;incstack = 0
  5985                           ;incstack = 0
  5986  005858  6A0F               	clrf	?_readEEPROM+1,c
  5987  00585A  0E42               	movlw	66
  5988  00585C  6E0E               	movwf	?_readEEPROM,c
  5989  00585E  EF00  F02C         	goto	_readEEPROM	;wreg free
  5990  005862                     __end_of_vscp_getSubzone:
  5991                           	opt stack 0
  5992                           tblptru	equ	0xFF8
  5993                           tblptrh	equ	0xFF7
  5994                           tblptrl	equ	0xFF6
  5995                           tablat	equ	0xFF5
  5996                           prodh	equ	0xFF4
  5997                           prodl	equ	0xFF3
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           fsr1h	equ	0xFE2
  6002                           fsr1l	equ	0xFE1
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function _vscp_getZone *****************
  6011 ;; Defined at:
  6012 ;;		line 2717 in file "../main.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  1    wreg      unsigned char 
  6019 ;; Registers used:
  6020 ;;		wreg, status,2, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6026 ;;      Params:         0       0       0       0       0       0       0
  6027 ;;      Locals:         0       0       0       0       0       0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0
  6029 ;;      Totals:         0       0       0       0       0       0       0
  6030 ;;Total ram usage:        0 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    3
  6033 ;; This function calls:
  6034 ;;		_readEEPROM
  6035 ;; This function is called by:
  6036 ;;		_vscp_doOneSecondWork
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text24
  6041  005862                     __ptext24:
  6042                           	opt stack 0
  6043  005862                     _vscp_getZone:
  6044                           	opt stack 26
  6045                           
  6046                           ;main.c: 2718: return readEEPROM(0x41);
  6047                           
  6048                           ;incstack = 0
  6049                           ;incstack = 0
  6050  005862  6A0F               	clrf	?_readEEPROM+1,c
  6051  005864  0E41               	movlw	65
  6052  005866  6E0E               	movwf	?_readEEPROM,c
  6053  005868  EF00  F02C         	goto	_readEEPROM	;wreg free
  6054  00586C                     __end_of_vscp_getZone:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1h	equ	0xFE2
  6066                           fsr1l	equ	0xFE1
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function _doOneSecondWork *****************
  6075 ;; Defined at:
  6076 ;;		line 698 in file "../main.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  i               1   42[BANK0 ] unsigned char 
  6081 ;;  tmp             1   41[BANK0 ] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;		None               void
  6084 ;; Registers used:
  6085 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : F/1
  6088 ;;		On exit  : F/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6091 ;;      Params:         0       0       0       0       0       0       0
  6092 ;;      Locals:         0       2       0       0       0       0       0
  6093 ;;      Temps:          0       2       0       0       0       0       0
  6094 ;;      Totals:         0       4       0       0       0       0       0
  6095 ;;Total ram usage:        4 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    8
  6098 ;; This function calls:
  6099 ;;		_readEEPROM
  6100 ;;		_vscp_sendEvent
  6101 ;;		_sendTempEvent
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text25
  6108  003512                     __ptext25:
  6109                           	opt stack 0
  6110  003512                     _doOneSecondWork:
  6111                           	opt stack 22
  6112                           
  6113                           ; BSR set to: 1
  6114                           ;main.c: 700: uint8_t tmp;
  6115                           ;main.c: 701: uint8_t i;
  6116                           ;main.c: 704: if ( 0x03 == vscp_node_state ) {
  6117                           
  6118                           ;incstack = 0
  6119                           ;incstack = 0
  6120  003512  0100               	movlb	0	; () banked
  6121  003514  51BB               	movf	_vscp_node_state& (0+255),w,b
  6122  003516  0A03               	xorlw	3
  6123  003518  E001 D0FE          	bnz	l243
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;main.c: 706: for (i = 0; i < 6; i++) {
  6127  00351C  6B8A               	clrf	doOneSecondWork@i& (0+255),b
  6128  00351E                     l10144:
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;main.c: 709: tmp = readEEPROM(0x49 + i);
  6132  00351E  0E49               	movlw	73
  6133  003520  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6134  003522  6E0E               	movwf	?_readEEPROM,c
  6135  003524  6A0F               	clrf	?_readEEPROM+1,c
  6136  003526  0E00               	movlw	0
  6137  003528  220F               	addwfc	?_readEEPROM+1,f,c
  6138  00352A  EC00  F02C         	call	_readEEPROM	;wreg free
  6139  00352E  0100               	movlb	0	; () banked
  6140  003530  6F89               	movwf	doOneSecondWork@tmp& (0+255),b
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;main.c: 710: if (tmp && (seconds_temp[i] > tmp)) {
  6144  003532  5189               	movf	doOneSecondWork@tmp& (0+255),w,b
  6145  003534  E016               	bz	l10154
  6146                           
  6147                           ; BSR set to: 0
  6148  003536  0E0C               	movlw	low _seconds_temp
  6149  003538  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6150  00353A  6ED9               	movwf	fsr2l,c
  6151  00353C  6ADA               	clrf	fsr2h,c
  6152  00353E  0E01               	movlw	high _seconds_temp
  6153  003540  22DA               	addwfc	fsr2h,f,c
  6154  003542  50DF               	movf	indf2,w,c
  6155  003544  6189               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6156  003546  D00D               	goto	l10154
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;main.c: 713: if ( sendTempEvent( i ) ) {
  6160  003548  518A               	movf	doOneSecondWork@i& (0+255),w,b
  6161  00354A  EC92  F026         	call	_sendTempEvent
  6162  00354E  0900               	iorlw	0
  6163  003550  E008               	bz	l10154
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;main.c: 714: seconds_temp[i] = 0;
  6167  003552  0E0C               	movlw	low _seconds_temp
  6168  003554  0100               	movlb	0	; () banked
  6169  003556  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6170  003558  6ED9               	movwf	fsr2l,c
  6171  00355A  6ADA               	clrf	fsr2h,c
  6172  00355C  0E01               	movlw	high _seconds_temp
  6173  00355E  22DA               	addwfc	fsr2h,f,c
  6174  003560  6ADF               	clrf	indf2,c
  6175  003562                     l10154:
  6176                           
  6177                           ;main.c: 715: }
  6178                           ;main.c: 717: }
  6179                           ;main.c: 720: if (0x80 & readEEPROM(0x43 + i)) {
  6180  003562  0E43               	movlw	67
  6181  003564  0100               	movlb	0	; () banked
  6182  003566  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6183  003568  6E0E               	movwf	?_readEEPROM,c
  6184  00356A  6A0F               	clrf	?_readEEPROM+1,c
  6185  00356C  0E00               	movlw	0
  6186  00356E  220F               	addwfc	?_readEEPROM+1,f,c
  6187  003570  EC00  F02C         	call	_readEEPROM	;wreg free
  6188  003574  0100               	movlb	0	; () banked
  6189  003576  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6190  003578  AF87               	btfss	??_doOneSecondWork& (0+255),7,b
  6191  00357A  D0CA               	goto	l10208
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;main.c: 723: if (low_alarm & (1 << i)) {
  6195  00357C  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6196  003580  0E01               	movlw	1
  6197  003582  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6198  003584  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6199  003586  D002               	goto	u8314
  6200  003588                     u8315:
  6201  003588  90D8               	bcf	status,0,c
  6202  00358A  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6203  00358C                     u8314:
  6204  00358C  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6205  00358E  D7FC               	goto	u8315
  6206  003590  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6207  003592  15B5               	andwf	_low_alarm& (0+255),w,b
  6208  003594  E058               	bz	l10182
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;main.c: 726: if (readEEPROM(i + 0x43) & (1<<3)) {
  6212  003596  0E43               	movlw	67
  6213  003598  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6214  00359A  6E0E               	movwf	?_readEEPROM,c
  6215  00359C  6A0F               	clrf	?_readEEPROM+1,c
  6216  00359E  0E00               	movlw	0
  6217  0035A0  220F               	addwfc	?_readEEPROM+1,f,c
  6218  0035A2  EC00  F02C         	call	_readEEPROM	;wreg free
  6219  0035A6  0100               	movlb	0	; () banked
  6220  0035A8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6221  0035AA  A787               	btfss	??_doOneSecondWork& (0+255),3,b
  6222  0035AC  D04C               	goto	l10182
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;main.c: 729: vscp_omsg.priority = 0x00;
  6226  0035AE  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;main.c: 730: vscp_omsg.flags = 0x80 + 3;
  6230  0035B0  0E83               	movlw	131
  6231  0035B2  6FCA               	movwf	_vscp_omsg& (0+255),b
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;main.c: 732: if (readEEPROM(i + 0x43) & (1<<5)) {
  6235  0035B4  0E43               	movlw	67
  6236  0035B6  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6237  0035B8  6E0E               	movwf	?_readEEPROM,c
  6238  0035BA  6A0F               	clrf	?_readEEPROM+1,c
  6239  0035BC  0E00               	movlw	0
  6240  0035BE  220F               	addwfc	?_readEEPROM+1,f,c
  6241  0035C0  EC00  F02C         	call	_readEEPROM	;wreg free
  6242  0035C4  0100               	movlb	0	; () banked
  6243  0035C6  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6244  0035C8  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6245  0035CA  D016               	goto	l10172
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;main.c: 734: if (readEEPROM(i + 0x43) & (1<<6)) {
  6249  0035CC  0E43               	movlw	67
  6250  0035CE  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6251  0035D0  6E0E               	movwf	?_readEEPROM,c
  6252  0035D2  6A0F               	clrf	?_readEEPROM+1,c
  6253  0035D4  0E00               	movlw	0
  6254  0035D6  220F               	addwfc	?_readEEPROM+1,f,c
  6255  0035D8  EC00  F02C         	call	_readEEPROM	;wreg free
  6256  0035DC  0100               	movlb	0	; () banked
  6257  0035DE  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6258  0035E0  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6259  0035E2  D005               	goto	l10170
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;main.c: 735: vscp_omsg.vscp_class = 30;
  6263  0035E4  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6264  0035E6  0E1E               	movlw	30
  6265  0035E8  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6266                           
  6267                           ;main.c: 736: vscp_omsg.vscp_type = 5;
  6268  0035EA  0E05               	movlw	5
  6269  0035EC  D009               	goto	L6
  6270  0035EE                     l10170:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;main.c: 738: else {
  6274                           ;main.c: 739: vscp_omsg.vscp_class = 30;
  6275  0035EE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6276  0035F0  0E1E               	movlw	30
  6277  0035F2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6278                           
  6279                           ;main.c: 740: vscp_omsg.vscp_type = 6;
  6280  0035F4  0E06               	movlw	6
  6281  0035F6  D004               	goto	L6
  6282  0035F8                     l10172:
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;main.c: 744: else {
  6286                           ;main.c: 746: vscp_omsg.vscp_class = 1;
  6287  0035F8  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6288  0035FA  0E01               	movlw	1
  6289  0035FC  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6290                           
  6291                           ;main.c: 747: vscp_omsg.vscp_type = 2;
  6292  0035FE  0E02               	movlw	2
  6293  003600                     L6:
  6294  003600  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;main.c: 748: }
  6298                           ;main.c: 750: vscp_omsg.data[ 0 ] = i;
  6299  003602  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;main.c: 751: vscp_omsg.data[ 1 ] =
  6303                           ;main.c: 752: readEEPROM(2 * i + 0x73);
  6304  003606  90D8               	bcf	status,0,c
  6305  003608  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6306  00360A  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6307  00360C  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6308  00360E  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6309  003610  0E73               	movlw	115
  6310  003612  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6311  003614  6E0E               	movwf	?_readEEPROM,c
  6312  003616  0E00               	movlw	0
  6313  003618  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6314  00361A  6E0F               	movwf	?_readEEPROM+1,c
  6315  00361C  EC00  F02C         	call	_readEEPROM	;wreg free
  6316  003620  0100               	movlb	0	; () banked
  6317  003622  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;main.c: 753: vscp_omsg.data[ 2 ] =
  6321                           ;main.c: 754: readEEPROM(2 * i + 0x74);
  6322  003624  90D8               	bcf	status,0,c
  6323  003626  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6324  003628  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6325  00362A  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6326  00362C  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6327  00362E  0E74               	movlw	116
  6328  003630  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6329  003632  6E0E               	movwf	?_readEEPROM,c
  6330  003634  0E00               	movlw	0
  6331  003636  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6332  003638  6E0F               	movwf	?_readEEPROM+1,c
  6333  00363A  EC00  F02C         	call	_readEEPROM	;wreg free
  6334  00363E  0100               	movlb	0	; () banked
  6335  003640  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;main.c: 759: vscp_sendEvent();
  6339  003642  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  6340  003646                     l10182:
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;main.c: 761: }
  6344                           ;main.c: 762: }
  6345                           ;main.c: 765: if (high_alarm & (1 << i)) {
  6346  003646  C08A  F087         	movff	doOneSecondWork@i,??_doOneSecondWork
  6347  00364A  0E01               	movlw	1
  6348  00364C  6F88               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6349  00364E  2B87               	incf	??_doOneSecondWork& (0+255),f,b
  6350  003650  D002               	goto	u8364
  6351  003652                     u8365:
  6352  003652  90D8               	bcf	status,0,c
  6353  003654  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6354  003656                     u8364:
  6355  003656  2F87               	decfsz	??_doOneSecondWork& (0+255),f,b
  6356  003658  D7FC               	goto	u8365
  6357  00365A  5188               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6358  00365C  15B4               	andwf	_high_alarm& (0+255),w,b
  6359  00365E  E058               	bz	l10208
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;main.c: 768: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6363  003660  0E43               	movlw	67
  6364  003662  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6365  003664  6E0E               	movwf	?_readEEPROM,c
  6366  003666  6A0F               	clrf	?_readEEPROM+1,c
  6367  003668  0E00               	movlw	0
  6368  00366A  220F               	addwfc	?_readEEPROM+1,f,c
  6369  00366C  EC00  F02C         	call	_readEEPROM	;wreg free
  6370  003670  0100               	movlb	0	; () banked
  6371  003672  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6372  003674  A987               	btfss	??_doOneSecondWork& (0+255),4,b
  6373  003676  D04C               	goto	l10208
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;main.c: 770: vscp_omsg.priority = 0x00;
  6377  003678  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
  6378                           
  6379                           ; BSR set to: 0
  6380                           ;main.c: 771: vscp_omsg.flags = 0x80 + 3;
  6381  00367A  0E83               	movlw	131
  6382  00367C  6FCA               	movwf	_vscp_omsg& (0+255),b
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;main.c: 773: if (readEEPROM(i + 0x43) & (1<<5)) {
  6386  00367E  0E43               	movlw	67
  6387  003680  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6388  003682  6E0E               	movwf	?_readEEPROM,c
  6389  003684  6A0F               	clrf	?_readEEPROM+1,c
  6390  003686  0E00               	movlw	0
  6391  003688  220F               	addwfc	?_readEEPROM+1,f,c
  6392  00368A  EC00  F02C         	call	_readEEPROM	;wreg free
  6393  00368E  0100               	movlb	0	; () banked
  6394  003690  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6395  003692  AB87               	btfss	??_doOneSecondWork& (0+255),5,b
  6396  003694  D016               	goto	l10198
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;main.c: 774: if (readEEPROM(i + 0x43) & (1<<6)) {
  6400  003696  0E43               	movlw	67
  6401  003698  258A               	addwf	doOneSecondWork@i& (0+255),w,b
  6402  00369A  6E0E               	movwf	?_readEEPROM,c
  6403  00369C  6A0F               	clrf	?_readEEPROM+1,c
  6404  00369E  0E00               	movlw	0
  6405  0036A0  220F               	addwfc	?_readEEPROM+1,f,c
  6406  0036A2  EC00  F02C         	call	_readEEPROM	;wreg free
  6407  0036A6  0100               	movlb	0	; () banked
  6408  0036A8  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6409  0036AA  AD87               	btfss	??_doOneSecondWork& (0+255),6,b
  6410  0036AC  D005               	goto	l10196
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;main.c: 775: vscp_omsg.vscp_class = 30;
  6414  0036AE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6415  0036B0  0E1E               	movlw	30
  6416  0036B2  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6417                           
  6418                           ;main.c: 776: vscp_omsg.vscp_type = 6;
  6419  0036B4  0E06               	movlw	6
  6420  0036B6  D009               	goto	L7
  6421  0036B8                     l10196:
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;main.c: 778: else {
  6425                           ;main.c: 779: vscp_omsg.vscp_class = 30;
  6426  0036B8  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6427  0036BA  0E1E               	movlw	30
  6428  0036BC  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6429                           
  6430                           ;main.c: 780: vscp_omsg.vscp_type = 5;
  6431  0036BE  0E05               	movlw	5
  6432  0036C0  D004               	goto	L7
  6433  0036C2                     l10198:
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;main.c: 783: else {
  6437                           ;main.c: 785: vscp_omsg.vscp_class = 1;
  6438  0036C2  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6439  0036C4  0E01               	movlw	1
  6440  0036C6  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6441                           
  6442                           ;main.c: 786: vscp_omsg.vscp_type = 2;
  6443  0036C8  0E02               	movlw	2
  6444  0036CA                     L7:
  6445  0036CA  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;main.c: 787: }
  6449                           ;main.c: 789: vscp_omsg.data[ 0 ] = i;
  6450  0036CC  C08A  F0CF         	movff	doOneSecondWork@i,_vscp_omsg+5
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;main.c: 790: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6454                           ;main.c: 791: 0x73);
  6455  0036D0  90D8               	bcf	status,0,c
  6456  0036D2  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6457  0036D4  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6458  0036D6  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6459  0036D8  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6460  0036DA  0E73               	movlw	115
  6461  0036DC  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6462  0036DE  6E0E               	movwf	?_readEEPROM,c
  6463  0036E0  0E00               	movlw	0
  6464  0036E2  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6465  0036E4  6E0F               	movwf	?_readEEPROM+1,c
  6466  0036E6  EC00  F02C         	call	_readEEPROM	;wreg free
  6467  0036EA  0100               	movlb	0	; () banked
  6468  0036EC  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;main.c: 792: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6472                           ;main.c: 793: 0x74);
  6473  0036EE  90D8               	bcf	status,0,c
  6474  0036F0  358A               	rlcf	doOneSecondWork@i& (0+255),w,b
  6475  0036F2  6F87               	movwf	??_doOneSecondWork& (0+255),b
  6476  0036F4  6B88               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6477  0036F6  3788               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6478  0036F8  0E74               	movlw	116
  6479  0036FA  2587               	addwf	??_doOneSecondWork& (0+255),w,b
  6480  0036FC  6E0E               	movwf	?_readEEPROM,c
  6481  0036FE  0E00               	movlw	0
  6482  003700  2188               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6483  003702  6E0F               	movwf	?_readEEPROM+1,c
  6484  003704  EC00  F02C         	call	_readEEPROM	;wreg free
  6485  003708  0100               	movlb	0	; () banked
  6486  00370A  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;main.c: 798: vscp_sendEvent();
  6490  00370C  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  6491  003710                     l10208:
  6492                           
  6493                           ; BSR set to: 0
  6494  003710  2B8A               	incf	doOneSecondWork@i& (0+255),f,b
  6495                           
  6496                           ; BSR set to: 0
  6497  003712  0E05               	movlw	5
  6498  003714  658A               	cpfsgt	doOneSecondWork@i& (0+255),b
  6499  003716  D703               	goto	l10144
  6500  003718                     l243:
  6501                           
  6502                           ; BSR set to: 0
  6503  003718  0012               	return	
  6504  00371A                     __end_of_doOneSecondWork:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _vscp_error *****************
  6525 ;; Defined at:
  6526 ;;		line 188 in file "../../vscp_firmware/common/vscp_firmware.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;		None               void
  6533 ;; Registers used:
  6534 ;;		None
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6540 ;;      Params:         0       0       0       0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    2
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_main
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text26
  6555  00589C                     __ptext26:
  6556                           	opt stack 0
  6557  00589C                     _vscp_error:
  6558                           	opt stack 28
  6559                           
  6560                           ;vscp_firmware.c: 189: vscp_initledfunc = 0x00;
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;incstack = 0
  6564                           ;incstack = 0
  6565  00589C  6A4D               	clrf	_vscp_initledfunc,c
  6566  00589E  0012               	return	
  6567  0058A0                     __end_of_vscp_error:
  6568                           	opt stack 0
  6569                           tblptru	equ	0xFF8
  6570                           tblptrh	equ	0xFF7
  6571                           tblptrl	equ	0xFF6
  6572                           tablat	equ	0xFF5
  6573                           prodh	equ	0xFF4
  6574                           prodl	equ	0xFF3
  6575                           postinc0	equ	0xFEE
  6576                           wreg	equ	0xFE8
  6577                           postdec1	equ	0xFE5
  6578                           fsr1h	equ	0xFE2
  6579                           fsr1l	equ	0xFE1
  6580                           indf2	equ	0xFDF
  6581                           postinc2	equ	0xFDE
  6582                           postdec2	equ	0xFDD
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8
  6586                           
  6587 ;; *************** function _handle_sync *****************
  6588 ;; Defined at:
  6589 ;;		line 1245 in file "../main.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;		None
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  i               1   41[BANK0 ] unsigned char 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : F/0
  6600 ;;		On exit  : F/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6603 ;;      Params:         0       0       0       0       0       0       0
  6604 ;;      Locals:         0       1       0       0       0       0       0
  6605 ;;      Temps:          0       2       0       0       0       0       0
  6606 ;;      Totals:         0       3       0       0       0       0       0
  6607 ;;Total ram usage:        3 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    8
  6610 ;; This function calls:
  6611 ;;		_readEEPROM
  6612 ;;		_sendTempEvent
  6613 ;; This function is called by:
  6614 ;;		_main
  6615 ;; This function uses a non-reentrant model
  6616 ;;
  6617                           
  6618                           	psect	text27
  6619  004DA8                     __ptext27:
  6620                           	opt stack 0
  6621  004DA8                     _handle_sync:
  6622                           	opt stack 22
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;main.c: 1246: uint8_t i;
  6626                           ;main.c: 1249: for (i = 0; i < 6; i++) {
  6627                           
  6628                           ;incstack = 0
  6629                           ;incstack = 0
  6630  004DA8  6B89               	clrf	handle_sync@i& (0+255),b
  6631  004DAA                     l10118:
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;main.c: 1251: if ((0xff != vscp_imsg.data[ 1 ] ||
  6635                           ;main.c: 1252: (readEEPROM(2 * i + 0x73) != vscp_imsg.data[ 1 ])) &&
  6636                           ;main.c: 1253: (0xff != vscp_imsg.data[ 2 ] ||
  6637                           ;main.c: 1254: (readEEPROM(2 * i + 0x74) != vscp_imsg.data[ 2 ]))) {
  6638  004DAA  29C3               	incf	(_vscp_imsg+7)& (0+255),w,b
  6639  004DAC  E110               	bnz	l10122
  6640                           
  6641                           ; BSR set to: 0
  6642  004DAE  90D8               	bcf	status,0,c
  6643  004DB0  3589               	rlcf	handle_sync@i& (0+255),w,b
  6644  004DB2  6F87               	movwf	??_handle_sync& (0+255),b
  6645  004DB4  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6646  004DB6  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6647  004DB8  0E73               	movlw	115
  6648  004DBA  2587               	addwf	??_handle_sync& (0+255),w,b
  6649  004DBC  6E0E               	movwf	?_readEEPROM,c
  6650  004DBE  0E00               	movlw	0
  6651  004DC0  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6652  004DC2  6E0F               	movwf	?_readEEPROM+1,c
  6653  004DC4  EC00  F02C         	call	_readEEPROM	;wreg free
  6654  004DC8  0100               	movlb	0	; () banked
  6655  004DCA  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6656  004DCC  E028               	bz	l10132
  6657  004DCE                     l10122:
  6658                           
  6659                           ; BSR set to: 0
  6660  004DCE  29C4               	incf	(_vscp_imsg+8)& (0+255),w,b
  6661  004DD0  E110               	bnz	l293
  6662                           
  6663                           ; BSR set to: 0
  6664  004DD2  90D8               	bcf	status,0,c
  6665  004DD4  3589               	rlcf	handle_sync@i& (0+255),w,b
  6666  004DD6  6F87               	movwf	??_handle_sync& (0+255),b
  6667  004DD8  6B88               	clrf	(??_handle_sync+1)& (0+255),b
  6668  004DDA  3788               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6669  004DDC  0E74               	movlw	116
  6670  004DDE  2587               	addwf	??_handle_sync& (0+255),w,b
  6671  004DE0  6E0E               	movwf	?_readEEPROM,c
  6672  004DE2  0E00               	movlw	0
  6673  004DE4  2188               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6674  004DE6  6E0F               	movwf	?_readEEPROM+1,c
  6675  004DE8  EC00  F02C         	call	_readEEPROM	;wreg free
  6676  004DEC  0100               	movlb	0	; () banked
  6677  004DEE  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6678  004DF0  E016               	bz	l10132
  6679  004DF2                     l293:
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;main.c: 1257: timeout_clock = 0;
  6683  004DF2  0101               	movlb	1	; () banked
  6684  004DF4  6B16               	clrf	_timeout_clock& (0+255),b
  6685  004DF6  6B17               	clrf	(_timeout_clock+1)& (0+255),b
  6686  004DF8  6B18               	clrf	(_timeout_clock+2)& (0+255),b
  6687  004DFA  6B19               	clrf	(_timeout_clock+3)& (0+255),b
  6688                           
  6689                           ;main.c: 1258: while (!sendTempEvent(i)) {
  6690  004DFC  D00A               	goto	l10130
  6691  004DFE                     l10126:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;main.c: 1259: if (timeout_clock > 1000) break;
  6695  004DFE  0EE9               	movlw	233
  6696  004E00  0101               	movlb	1	; () banked
  6697  004E02  5D16               	subwf	_timeout_clock& (0+255),w,b
  6698  004E04  0E03               	movlw	3
  6699  004E06  5917               	subwfb	(_timeout_clock+1)& (0+255),w,b
  6700  004E08  0E00               	movlw	0
  6701  004E0A  5918               	subwfb	(_timeout_clock+2)& (0+255),w,b
  6702  004E0C  0E00               	movlw	0
  6703  004E0E  5919               	subwfb	(_timeout_clock+3)& (0+255),w,b
  6704  004E10  E206               	bc	l10132
  6705  004E12                     l10130:
  6706                           
  6707                           ; BSR set to: 1
  6708  004E12  0100               	movlb	0	; () banked
  6709  004E14  5189               	movf	handle_sync@i& (0+255),w,b
  6710  004E16  EC92  F026         	call	_sendTempEvent
  6711  004E1A  0900               	iorlw	0
  6712  004E1C  E0F0               	bz	l10126
  6713  004E1E                     l10132:
  6714  004E1E  0100               	movlb	0	; () banked
  6715  004E20  2B89               	incf	handle_sync@i& (0+255),f,b
  6716                           
  6717                           ; BSR set to: 0
  6718  004E22  0E05               	movlw	5
  6719  004E24  6589               	cpfsgt	handle_sync@i& (0+255),b
  6720  004E26  D7C1               	goto	l10118
  6721                           
  6722                           ; BSR set to: 0
  6723  004E28  0C05               	retlw	5
  6724  004E2A                     __end_of_handle_sync:
  6725                           	opt stack 0
  6726                           tblptru	equ	0xFF8
  6727                           tblptrh	equ	0xFF7
  6728                           tblptrl	equ	0xFF6
  6729                           tablat	equ	0xFF5
  6730                           prodh	equ	0xFF4
  6731                           prodl	equ	0xFF3
  6732                           postinc0	equ	0xFEE
  6733                           wreg	equ	0xFE8
  6734                           postdec1	equ	0xFE5
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _sendTempEvent *****************
  6745 ;; Defined at:
  6746 ;;		line 811 in file "../main.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  i               1    wreg     unsigned char 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  i               1   38[BANK0 ] unsigned char 
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  1    wreg      unsigned char 
  6753 ;; Registers used:
  6754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6755 ;; Tracked objects:
  6756 ;;		On entry : F/0
  6757 ;;		On exit  : F/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6760 ;;      Params:         0       0       0       0       0       0       0
  6761 ;;      Locals:         0       1       0       0       0       0       0
  6762 ;;      Temps:          0       1       0       0       0       0       0
  6763 ;;      Totals:         0       2       0       0       0       0       0
  6764 ;;Total ram usage:        2 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    7
  6767 ;; This function calls:
  6768 ;;		_readEEPROM
  6769 ;;		_vscp_sendEvent
  6770 ;;		_setEventData
  6771 ;; This function is called by:
  6772 ;;		_doOneSecondWork
  6773 ;;		_handle_sync
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text28
  6778  004D24                     __ptext28:
  6779                           	opt stack 0
  6780  004D24                     _sendTempEvent:
  6781                           	opt stack 22
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;incstack = 0
  6785                           ;incstack = 0
  6786                           ;sendTempEvent@i stored from wreg
  6787  004D24  CFE8 F086          	movff	wreg,sendTempEvent@i
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;main.c: 812: vscp_omsg.priority = 0x03;
  6791  004D28  0E03               	movlw	3
  6792  004D2A  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  6793                           
  6794                           ;main.c: 813: vscp_omsg.flags = 0x80 + 4;
  6795  004D2C  0E84               	movlw	132
  6796  004D2E  6FCA               	movwf	_vscp_omsg& (0+255),b
  6797                           
  6798                           ;main.c: 814: vscp_omsg.vscp_class = 10;
  6799  004D30  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  6800  004D32  0E0A               	movlw	10
  6801  004D34  6FCC               	movwf	(_vscp_omsg+2)& (0+255),b
  6802                           
  6803                           ;main.c: 815: vscp_omsg.vscp_type = 6;
  6804  004D36  0E06               	movlw	6
  6805  004D38  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;main.c: 818: vscp_omsg.data[ 0 ] = 0x80 |
  6809                           ;main.c: 819: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6810                           ;main.c: 820: i;
  6811  004D3A  0E43               	movlw	67
  6812  004D3C  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6813  004D3E  6E0E               	movwf	?_readEEPROM,c
  6814  004D40  6A0F               	clrf	?_readEEPROM+1,c
  6815  004D42  0E00               	movlw	0
  6816  004D44  220F               	addwfc	?_readEEPROM+1,f,c
  6817  004D46  EC00  F02C         	call	_readEEPROM	;wreg free
  6818  004D4A  0100               	movlb	0	; () banked
  6819  004D4C  6F85               	movwf	??_sendTempEvent& (0+255),b
  6820  004D4E  0E03               	movlw	3
  6821  004D50  1785               	andwf	??_sendTempEvent& (0+255),f,b
  6822  004D52  90D8               	bcf	status,0,c
  6823  004D54  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6824  004D56  90D8               	bcf	status,0,c
  6825  004D58  3785               	rlcf	??_sendTempEvent& (0+255),f,b
  6826  004D5A  90D8               	bcf	status,0,c
  6827  004D5C  3585               	rlcf	??_sendTempEvent& (0+255),w,b
  6828  004D5E  1186               	iorwf	sendTempEvent@i& (0+255),w,b
  6829  004D60  0980               	iorlw	128
  6830  004D62  6FCF               	movwf	(_vscp_omsg+5)& (0+255),b
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;main.c: 822: vscp_omsg.data[ 1 ] = 0x82;
  6834  004D64  0E82               	movlw	130
  6835  004D66  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;main.c: 824: setEventData( current_temp[i],
  6839                           ;main.c: 825: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6840  004D68  5186               	movf	sendTempEvent@i& (0+255),w,b
  6841  004D6A  0D02               	mullw	2
  6842  004D6C  0E00               	movlw	low _current_temp
  6843  004D6E  24F3               	addwf	prodl,w,c
  6844  004D70  6ED9               	movwf	fsr2l,c
  6845  004D72  0E01               	movlw	high _current_temp
  6846  004D74  20F4               	addwfc	prodh,w,c
  6847  004D76  6EDA               	movwf	fsr2h,c
  6848  004D78  CFDE F07C          	movff	postinc2,?_setEventData
  6849  004D7C  CFDD F07D          	movff	postdec2,?_setEventData+1
  6850  004D80  0E43               	movlw	67
  6851  004D82  2586               	addwf	sendTempEvent@i& (0+255),w,b
  6852  004D84  6E0E               	movwf	?_readEEPROM,c
  6853  004D86  6A0F               	clrf	?_readEEPROM+1,c
  6854  004D88  0E00               	movlw	0
  6855  004D8A  220F               	addwfc	?_readEEPROM+1,f,c
  6856  004D8C  EC00  F02C         	call	_readEEPROM	;wreg free
  6857  004D90  0B03               	andlw	3
  6858  004D92  0100               	movlb	0	; () banked
  6859  004D94  6F7E               	movwf	(?_setEventData+2)& (0+255),b
  6860  004D96  EC67  F024         	call	_setEventData	;wreg free
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;main.c: 828: if (!vscp_sendEvent()) {
  6864  004D9A  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  6865  004D9E  0900               	iorlw	0
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;main.c: 829: return 0;
  6869  004DA0  0E00               	movlw	0
  6870  004DA2  A4D8               	btfss	status,2,c
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;main.c: 830: }
  6874                           ;main.c: 832: return 1;
  6875  004DA4  0E01               	movlw	1
  6876                           
  6877                           ; BSR set to: 0
  6878  004DA6  0012               	return	
  6879  004DA8                     __end_of_sendTempEvent:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           postinc0	equ	0xFEE
  6888                           wreg	equ	0xFE8
  6889                           postdec1	equ	0xFE5
  6890                           fsr1h	equ	0xFE2
  6891                           fsr1l	equ	0xFE1
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           postdec2	equ	0xFDD
  6895                           fsr2h	equ	0xFDA
  6896                           fsr2l	equ	0xFD9
  6897                           status	equ	0xFD8
  6898                           
  6899 ;; *************** function _setEventData *****************
  6900 ;; Defined at:
  6901 ;;		line 840 in file "../main.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;  v               2   28[BANK0 ] int 
  6904 ;;  unit            1   30[BANK0 ] unsigned char 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  newval          4   31[BANK0 ] unsigned char 
  6907 ;;  ival            2   35[BANK0 ] int 
  6908 ;; Return value:  Size  Location     Type
  6909 ;;		None               void
  6910 ;; Registers used:
  6911 ;;		wreg, status,2, status,0, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : F/0
  6914 ;;		On exit  : F/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6917 ;;      Params:         0       3       0       0       0       0       0
  6918 ;;      Locals:         0       6       0       0       0       0       0
  6919 ;;      Temps:          0       0       0       0       0       0       0
  6920 ;;      Totals:         0       9       0       0       0       0       0
  6921 ;;Total ram usage:        9 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:    5
  6924 ;; This function calls:
  6925 ;;		_Celsius2Kelvin
  6926 ;;		_Celsius2Fahrenheit
  6927 ;;		___awtofl
  6928 ;;		___fltol
  6929 ;; This function is called by:
  6930 ;;		_sendTempEvent
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text29
  6935  0048CE                     __ptext29:
  6936                           	opt stack 0
  6937  0048CE                     _setEventData:
  6938                           	opt stack 23
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;main.c: 841: double newval;
  6942                           ;main.c: 842: int ival;
  6943                           ;main.c: 844: if (0 == unit) {
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;incstack = 0
  6947                           ;incstack = 0
  6948  0048CE  677E               	tstfsz	setEventData@unit& (0+255),b
  6949  0048D0  D019               	goto	l10496
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;main.c: 846: newval = Celsius2Kelvin(v);
  6953  0048D2  C07C  F018         	movff	setEventData@v,?___awtofl
  6954  0048D6  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6955  0048DA  EC1E  F02A         	call	___awtofl	;wreg free
  6956  0048DE  C01B  F02F         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6957  0048E2  C01A  F02E         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6958  0048E6  C019  F02D         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6959  0048EA  C018  F02C         	movff	?___awtofl,?_Celsius2Kelvin
  6960  0048EE  EC3B  F02A         	call	_Celsius2Kelvin	;wreg free
  6961  0048F2  C02F  F082         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6962  0048F6  C02E  F081         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6963  0048FA  C02D  F080         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6964  0048FE  C02C  F07F         	movff	?_Celsius2Kelvin,setEventData@newval
  6965                           
  6966                           ;main.c: 847: } else if (2 == unit) {
  6967  004902  D02A               	goto	l251
  6968  004904                     l10496:
  6969                           
  6970                           ; BSR set to: 0
  6971  004904  517E               	movf	setEventData@unit& (0+255),w,b
  6972  004906  0A02               	xorlw	2
  6973  004908  E119               	bnz	l10500
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;main.c: 849: newval = Celsius2Fahrenheit(v);
  6977  00490A  C07C  F018         	movff	setEventData@v,?___awtofl
  6978  00490E  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6979  004912  EC1E  F02A         	call	___awtofl	;wreg free
  6980  004916  C01B  F079         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6981  00491A  C01A  F078         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6982  00491E  C019  F077         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6983  004922  C018  F076         	movff	?___awtofl,?_Celsius2Fahrenheit
  6984  004926  EC8C  F027         	call	_Celsius2Fahrenheit	;wreg free
  6985  00492A  C079  F082         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6986  00492E  C078  F081         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6987  004932  C077  F080         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6988  004936  C076  F07F         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6989                           
  6990                           ;main.c: 850: } else {
  6991  00493A  D00E               	goto	l251
  6992  00493C                     l10500:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 852: newval = v;
  6996  00493C  C07C  F018         	movff	setEventData@v,?___awtofl
  6997  004940  C07D  F019         	movff	setEventData@v+1,?___awtofl+1
  6998  004944  EC1E  F02A         	call	___awtofl	;wreg free
  6999  004948  C01B  F082         	movff	?___awtofl+3,setEventData@newval+3
  7000  00494C  C01A  F081         	movff	?___awtofl+2,setEventData@newval+2
  7001  004950  C019  F080         	movff	?___awtofl+1,setEventData@newval+1
  7002  004954  C018  F07F         	movff	?___awtofl,setEventData@newval
  7003  004958                     l251:
  7004                           
  7005                           ;main.c: 853: }
  7006                           ;main.c: 855: ival = (int) newval;
  7007  004958  C07F  F076         	movff	setEventData@newval,?___fltol
  7008  00495C  C080  F077         	movff	setEventData@newval+1,?___fltol+1
  7009  004960  C081  F078         	movff	setEventData@newval+2,?___fltol+2
  7010  004964  C082  F079         	movff	setEventData@newval+3,?___fltol+3
  7011  004968  ECB5  F025         	call	___fltol	;wreg free
  7012  00496C  C076  F083         	movff	?___fltol,setEventData@ival
  7013  004970  C077  F084         	movff	?___fltol+1,setEventData@ival+1
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;main.c: 857: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  7017  004974  5184               	movf	(setEventData@ival+1)& (0+255),w,b
  7018  004976  6FD1               	movwf	(_vscp_omsg+7)& (0+255),b
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;main.c: 858: vscp_omsg.data[ 3 ] = (ival & 0xff);
  7022  004978  C083  F0D2         	movff	setEventData@ival,_vscp_omsg+8
  7023                           
  7024                           ; BSR set to: 0
  7025  00497C  0012               	return	
  7026  00497E                     __end_of_setEventData:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           postinc0	equ	0xFEE
  7035                           wreg	equ	0xFE8
  7036                           postdec1	equ	0xFE5
  7037                           fsr1h	equ	0xFE2
  7038                           fsr1l	equ	0xFE1
  7039                           indf2	equ	0xFDF
  7040                           postinc2	equ	0xFDE
  7041                           postdec2	equ	0xFDD
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _Celsius2Fahrenheit *****************
  7047 ;; Defined at:
  7048 ;;		line 41 in file "../ntc.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  tc              4   22[BANK0 ] int 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  4   22[BANK0 ] int 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7062 ;;      Params:         0       4       0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0
  7065 ;;      Totals:         0       4       0       0       0       0       0
  7066 ;;Total ram usage:        4 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    4
  7069 ;; This function calls:
  7070 ;;		___fladd
  7071 ;;		___fldiv
  7072 ;;		___flmul
  7073 ;; This function is called by:
  7074 ;;		_setEventData
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text30
  7079  004F18                     __ptext30:
  7080                           	opt stack 0
  7081  004F18                     _Celsius2Fahrenheit:
  7082                           	opt stack 23
  7083                           
  7084                           ;ntc.c: 42: return ( (9 * tc + 16000) / 5);
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;incstack = 0
  7088                           ;incstack = 0
  7089  004F18  6A21               	clrf	?___fladd+4,c
  7090  004F1A  6A22               	clrf	?___fladd+5,c
  7091  004F1C  0E7A               	movlw	122
  7092  004F1E  6E23               	movwf	?___fladd+6,c
  7093  004F20  0E46               	movlw	70
  7094  004F22  6E24               	movwf	?___fladd+7,c
  7095  004F24  0100               	movlb	0	; () banked
  7096  004F26  6B64               	clrf	(?___flmul+4)& (0+255),b
  7097  004F28  6B65               	clrf	(?___flmul+5)& (0+255),b
  7098  004F2A  0E10               	movlw	16
  7099  004F2C  6F66               	movwf	(?___flmul+6)& (0+255),b
  7100  004F2E  0E41               	movlw	65
  7101  004F30  6F67               	movwf	(?___flmul+7)& (0+255),b
  7102  004F32  C076  F060         	movff	Celsius2Fahrenheit@tc,?___flmul
  7103  004F36  C077  F061         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7104  004F3A  C078  F062         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7105  004F3E  C079  F063         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7106  004F42  EC23  F022         	call	___flmul	;wreg free
  7107  004F46  C063  F020         	movff	?___flmul+3,?___fladd+3
  7108  004F4A  C062  F01F         	movff	?___flmul+2,?___fladd+2
  7109  004F4E  C061  F01E         	movff	?___flmul+1,?___fladd+1
  7110  004F52  C060  F01D         	movff	?___flmul,?___fladd
  7111  004F56  ECCA  F01E         	call	___fladd	;wreg free
  7112  004F5A  C020  F02F         	movff	?___fladd+3,?___fldiv+3
  7113  004F5E  C01F  F02E         	movff	?___fladd+2,?___fldiv+2
  7114  004F62  C01E  F02D         	movff	?___fladd+1,?___fldiv+1
  7115  004F66  C01D  F02C         	movff	?___fladd,?___fldiv
  7116  004F6A  6A30               	clrf	?___fldiv+4,c
  7117  004F6C  6A31               	clrf	?___fldiv+5,c
  7118  004F6E  0EA0               	movlw	160
  7119  004F70  6E32               	movwf	?___fldiv+6,c
  7120  004F72  0E40               	movlw	64
  7121  004F74  6E33               	movwf	?___fldiv+7,c
  7122  004F76  ECBF  F024         	call	___fldiv	;wreg free
  7123  004F7A  C02F  F079         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7124  004F7E  C02E  F078         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7125  004F82  C02D  F077         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7126  004F86  C02C  F076         	movff	?___fldiv,?_Celsius2Fahrenheit
  7127  004F8A  0012               	return	
  7128  004F8C                     __end_of_Celsius2Fahrenheit:
  7129                           	opt stack 0
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           postinc0	equ	0xFEE
  7137                           wreg	equ	0xFE8
  7138                           postdec1	equ	0xFE5
  7139                           fsr1h	equ	0xFE2
  7140                           fsr1l	equ	0xFE1
  7141                           indf2	equ	0xFDF
  7142                           postinc2	equ	0xFDE
  7143                           postdec2	equ	0xFDD
  7144                           fsr2h	equ	0xFDA
  7145                           fsr2l	equ	0xFD9
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function ___fladd *****************
  7149 ;; Defined at:
  7150 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  f1              4   28[COMRAM] int 
  7153 ;;  f2              4   32[COMRAM] int 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;  exp1            1   42[COMRAM] unsigned char 
  7156 ;;  exp2            1   41[COMRAM] unsigned char 
  7157 ;;  sign            1   40[COMRAM] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  4   28[COMRAM] unsigned char 
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7167 ;;      Params:         8       0       0       0       0       0       0
  7168 ;;      Locals:         6       0       0       0       0       0       0
  7169 ;;      Temps:          1       0       0       0       0       0       0
  7170 ;;      Totals:        15       0       0       0       0       0       0
  7171 ;;Total ram usage:       15 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    3
  7174 ;; This function calls:
  7175 ;;		___flpack
  7176 ;; This function is called by:
  7177 ;;		_doWork
  7178 ;;		_Celsius2Fahrenheit
  7179 ;;		_Celsius2Kelvin
  7180 ;;		___asfladd
  7181 ;;		_floor
  7182 ;;		___flsub
  7183 ;;		_log
  7184 ;;		_eval_poly
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text31
  7189  003D94                     __ptext31:
  7190                           	opt stack 0
  7191  003D94                     ___fladd:
  7192                           	opt stack 25
  7193                           
  7194                           ;incstack = 0
  7195                           ;incstack = 0
  7196  003D94  341F               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7197  003D96  3420               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7198  003D98  6E2B               	movwf	___fladd@exp1,c
  7199  003D9A  3423               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7200  003D9C  3424               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7201  003D9E  6E2A               	movwf	___fladd@exp2,c
  7202  003DA0  502B               	movf	___fladd@exp1,w,c
  7203  003DA2  E009               	bz	l1571
  7204  003DA4  502A               	movf	___fladd@exp2,w,c
  7205  003DA6  602B               	cpfslt	___fladd@exp1,c
  7206  003DA8  D00F               	goto	l11520
  7207  003DAA  502B               	movf	___fladd@exp1,w,c
  7208  003DAC  5C2A               	subwf	___fladd@exp2,w,c
  7209  003DAE  6E25               	movwf	??___fladd& (0+255),c
  7210  003DB0  0E21               	movlw	33
  7211  003DB2  5C25               	subwf	??___fladd,w,c
  7212  003DB4  E309               	bnc	l11520
  7213  003DB6                     l1571:
  7214  003DB6  C021  F01D         	movff	___fladd@f2,?___fladd
  7215  003DBA  C022  F01E         	movff	___fladd@f2+1,?___fladd+1
  7216  003DBE  C023  F01F         	movff	___fladd@f2+2,?___fladd+2
  7217  003DC2  C024  F020         	movff	___fladd@f2+3,?___fladd+3
  7218  003DC6  D095               	goto	l1572
  7219  003DC8                     l11520:
  7220  003DC8  502A               	movf	___fladd@exp2,w,c
  7221  003DCA  E009               	bz	l1575
  7222  003DCC  502B               	movf	___fladd@exp1,w,c
  7223  003DCE  602A               	cpfslt	___fladd@exp2,c
  7224  003DD0  D00F               	goto	l11526
  7225  003DD2  502A               	movf	___fladd@exp2,w,c
  7226  003DD4  5C2B               	subwf	___fladd@exp1,w,c
  7227  003DD6  6E25               	movwf	??___fladd& (0+255),c
  7228  003DD8  0E21               	movlw	33
  7229  003DDA  5C25               	subwf	??___fladd,w,c
  7230  003DDC  E309               	bnc	l11526
  7231  003DDE                     l1575:
  7232  003DDE  C01D  F01D         	movff	___fladd@f1,?___fladd
  7233  003DE2  C01E  F01E         	movff	___fladd@f1+1,?___fladd+1
  7234  003DE6  C01F  F01F         	movff	___fladd@f1+2,?___fladd+2
  7235  003DEA  C020  F020         	movff	___fladd@f1+3,?___fladd+3
  7236  003DEE  D081               	goto	l1572
  7237  003DF0                     l11526:
  7238  003DF0  0E06               	movlw	6
  7239  003DF2  6E29               	movwf	___fladd@sign,c
  7240  003DF4  BE20               	btfsc	___fladd@f1+3,7,c
  7241  003DF6  8E29               	bsf	___fladd@sign,7,c
  7242  003DF8  BE24               	btfsc	___fladd@f2+3,7,c
  7243  003DFA  8C29               	bsf	___fladd@sign,6,c
  7244  003DFC  8E1F               	bsf	___fladd@f1+2,7,c
  7245  003DFE  6A20               	clrf	___fladd@f1+3,c
  7246  003E00  8E23               	bsf	___fladd@f2+2,7,c
  7247  003E02  6A24               	clrf	___fladd@f2+3,c
  7248  003E04  502A               	movf	___fladd@exp2,w,c
  7249  003E06  602B               	cpfslt	___fladd@exp1,c
  7250  003E08  D018               	goto	l11552
  7251  003E0A                     l11542:
  7252  003E0A  90D8               	bcf	status,0,c
  7253  003E0C  3621               	rlcf	___fladd@f2,f,c
  7254  003E0E  3622               	rlcf	___fladd@f2+1,f,c
  7255  003E10  3623               	rlcf	___fladd@f2+2,f,c
  7256  003E12  3624               	rlcf	___fladd@f2+3,f,c
  7257  003E14  062A               	decf	___fladd@exp2,f,c
  7258  003E16  502A               	movf	___fladd@exp2,w,c
  7259  003E18  182B               	xorwf	___fladd@exp1,w,c
  7260  003E1A  E00B               	bz	l11550
  7261  003E1C  0629               	decf	___fladd@sign,f,c
  7262  003E1E  5029               	movf	___fladd@sign& (0+255),w,c
  7263  003E20  0B07               	andlw	7
  7264  003E22  E007               	bz	l11550
  7265  003E24  D7F2               	goto	l11542
  7266  003E26                     l11548:
  7267  003E26  90D8               	bcf	status,0,c
  7268  003E28  3220               	rrcf	___fladd@f1+3,f,c
  7269  003E2A  321F               	rrcf	___fladd@f1+2,f,c
  7270  003E2C  321E               	rrcf	___fladd@f1+1,f,c
  7271  003E2E  321D               	rrcf	___fladd@f1,f,c
  7272  003E30  2A2B               	incf	___fladd@exp1,f,c
  7273  003E32                     l11550:
  7274  003E32  502A               	movf	___fladd@exp2,w,c
  7275  003E34  622B               	cpfseq	___fladd@exp1,c
  7276  003E36  D7F7               	goto	l11548
  7277  003E38  D01A               	goto	l1586
  7278  003E3A                     l11552:
  7279  003E3A  502B               	movf	___fladd@exp1,w,c
  7280  003E3C  602A               	cpfslt	___fladd@exp2,c
  7281  003E3E  D017               	goto	l1586
  7282  003E40                     l11554:
  7283  003E40  90D8               	bcf	status,0,c
  7284  003E42  361D               	rlcf	___fladd@f1,f,c
  7285  003E44  361E               	rlcf	___fladd@f1+1,f,c
  7286  003E46  361F               	rlcf	___fladd@f1+2,f,c
  7287  003E48  3620               	rlcf	___fladd@f1+3,f,c
  7288  003E4A  062B               	decf	___fladd@exp1,f,c
  7289  003E4C  502A               	movf	___fladd@exp2,w,c
  7290  003E4E  182B               	xorwf	___fladd@exp1,w,c
  7291  003E50  E00B               	bz	l11562
  7292  003E52  0629               	decf	___fladd@sign,f,c
  7293  003E54  5029               	movf	___fladd@sign& (0+255),w,c
  7294  003E56  0B07               	andlw	7
  7295  003E58  E007               	bz	l11562
  7296  003E5A  D7F2               	goto	l11554
  7297  003E5C                     l11560:
  7298  003E5C  90D8               	bcf	status,0,c
  7299  003E5E  3224               	rrcf	___fladd@f2+3,f,c
  7300  003E60  3223               	rrcf	___fladd@f2+2,f,c
  7301  003E62  3222               	rrcf	___fladd@f2+1,f,c
  7302  003E64  3221               	rrcf	___fladd@f2,f,c
  7303  003E66  2A2A               	incf	___fladd@exp2,f,c
  7304  003E68                     l11562:
  7305  003E68  502A               	movf	___fladd@exp2,w,c
  7306  003E6A  622B               	cpfseq	___fladd@exp1,c
  7307  003E6C  D7F7               	goto	l11560
  7308  003E6E                     l1586:
  7309  003E6E  AE29               	btfss	___fladd@sign,7,c
  7310  003E70  D009               	goto	l11566
  7311  003E72  1E1D               	comf	___fladd@f1,f,c
  7312  003E74  1E1E               	comf	___fladd@f1+1,f,c
  7313  003E76  1E1F               	comf	___fladd@f1+2,f,c
  7314  003E78  1E20               	comf	___fladd@f1+3,f,c
  7315  003E7A  2A1D               	incf	___fladd@f1,f,c
  7316  003E7C  0E00               	movlw	0
  7317  003E7E  221E               	addwfc	___fladd@f1+1,f,c
  7318  003E80  221F               	addwfc	___fladd@f1+2,f,c
  7319  003E82  2220               	addwfc	___fladd@f1+3,f,c
  7320  003E84                     l11566:
  7321  003E84  AC29               	btfss	___fladd@sign,6,c
  7322  003E86  D009               	goto	l11570
  7323  003E88  1E21               	comf	___fladd@f2,f,c
  7324  003E8A  1E22               	comf	___fladd@f2+1,f,c
  7325  003E8C  1E23               	comf	___fladd@f2+2,f,c
  7326  003E8E  1E24               	comf	___fladd@f2+3,f,c
  7327  003E90  2A21               	incf	___fladd@f2,f,c
  7328  003E92  0E00               	movlw	0
  7329  003E94  2222               	addwfc	___fladd@f2+1,f,c
  7330  003E96  2223               	addwfc	___fladd@f2+2,f,c
  7331  003E98  2224               	addwfc	___fladd@f2+3,f,c
  7332  003E9A                     l11570:
  7333  003E9A  6A29               	clrf	___fladd@sign,c
  7334  003E9C  501D               	movf	___fladd@f1,w,c
  7335  003E9E  2621               	addwf	___fladd@f2,f,c
  7336  003EA0  501E               	movf	___fladd@f1+1,w,c
  7337  003EA2  2222               	addwfc	___fladd@f2+1,f,c
  7338  003EA4  501F               	movf	___fladd@f1+2,w,c
  7339  003EA6  2223               	addwfc	___fladd@f2+2,f,c
  7340  003EA8  5020               	movf	___fladd@f1+3,w,c
  7341  003EAA  2224               	addwfc	___fladd@f2+3,f,c
  7342  003EAC  AE24               	btfss	___fladd@f2+3,7,c
  7343  003EAE  D00B               	goto	l11578
  7344  003EB0  1E21               	comf	___fladd@f2,f,c
  7345  003EB2  1E22               	comf	___fladd@f2+1,f,c
  7346  003EB4  1E23               	comf	___fladd@f2+2,f,c
  7347  003EB6  1E24               	comf	___fladd@f2+3,f,c
  7348  003EB8  2A21               	incf	___fladd@f2,f,c
  7349  003EBA  0E00               	movlw	0
  7350  003EBC  2222               	addwfc	___fladd@f2+1,f,c
  7351  003EBE  2223               	addwfc	___fladd@f2+2,f,c
  7352  003EC0  2224               	addwfc	___fladd@f2+3,f,c
  7353  003EC2  0E01               	movlw	1
  7354  003EC4  6E29               	movwf	___fladd@sign,c
  7355  003EC6                     l11578:
  7356  003EC6  C021  F00E         	movff	___fladd@f2,?___flpack
  7357  003ECA  C022  F00F         	movff	___fladd@f2+1,?___flpack+1
  7358  003ECE  C023  F010         	movff	___fladd@f2+2,?___flpack+2
  7359  003ED2  C024  F011         	movff	___fladd@f2+3,?___flpack+3
  7360  003ED6  C02B  F012         	movff	___fladd@exp1,?___flpack+4
  7361  003EDA  C029  F013         	movff	___fladd@sign,?___flpack+5
  7362  003EDE  EC50  F023         	call	___flpack	;wreg free
  7363  003EE2  C011  F020         	movff	?___flpack+3,?___fladd+3
  7364  003EE6  C010  F01F         	movff	?___flpack+2,?___fladd+2
  7365  003EEA  C00F  F01E         	movff	?___flpack+1,?___fladd+1
  7366  003EEE  C00E  F01D         	movff	?___flpack,?___fladd
  7367  003EF2                     l1572:
  7368  003EF2  0012               	return	
  7369  003EF4                     __end_of___fladd:
  7370                           	opt stack 0
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           postinc0	equ	0xFEE
  7378                           wreg	equ	0xFE8
  7379                           postdec1	equ	0xFE5
  7380                           fsr1h	equ	0xFE2
  7381                           fsr1l	equ	0xFE1
  7382                           indf2	equ	0xFDF
  7383                           postinc2	equ	0xFDE
  7384                           postdec2	equ	0xFDD
  7385                           fsr2h	equ	0xFDA
  7386                           fsr2l	equ	0xFD9
  7387                           status	equ	0xFD8
  7388                           
  7389 ;; *************** function _Celsius2Kelvin *****************
  7390 ;; Defined at:
  7391 ;;		line 60 in file "../ntc.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  tc              4   43[COMRAM] unsigned char 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;		None
  7396 ;; Return value:  Size  Location     Type
  7397 ;;                  4   43[COMRAM] unsigned char 
  7398 ;; Registers used:
  7399 ;;		wreg, status,2, status,0, cstack
  7400 ;; Tracked objects:
  7401 ;;		On entry : 0/0
  7402 ;;		On exit  : 0/0
  7403 ;;		Unchanged: 0/0
  7404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7405 ;;      Params:         4       0       0       0       0       0       0
  7406 ;;      Locals:         0       0       0       0       0       0       0
  7407 ;;      Temps:          0       0       0       0       0       0       0
  7408 ;;      Totals:         4       0       0       0       0       0       0
  7409 ;;Total ram usage:        4 bytes
  7410 ;; Hardware stack levels used:    1
  7411 ;; Hardware stack levels required when called:    4
  7412 ;; This function calls:
  7413 ;;		___fladd
  7414 ;; This function is called by:
  7415 ;;		_setEventData
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text32
  7420  005476                     __ptext32:
  7421                           	opt stack 0
  7422  005476                     _Celsius2Kelvin:
  7423                           	opt stack 23
  7424                           
  7425                           ;ntc.c: 61: return (27316.0 + tc);
  7426                           
  7427                           ;incstack = 0
  7428                           ;incstack = 0
  7429  005476  C02C  F01D         	movff	Celsius2Kelvin@tc,?___fladd
  7430  00547A  C02D  F01E         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7431  00547E  C02E  F01F         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7432  005482  C02F  F020         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7433  005486  6A21               	clrf	?___fladd+4,c
  7434  005488  0E68               	movlw	104
  7435  00548A  6E22               	movwf	?___fladd+5,c
  7436  00548C  0ED5               	movlw	213
  7437  00548E  6E23               	movwf	?___fladd+6,c
  7438  005490  0E46               	movlw	70
  7439  005492  6E24               	movwf	?___fladd+7,c
  7440  005494  ECCA  F01E         	call	___fladd	;wreg free
  7441  005498  C020  F02F         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7442  00549C  C01F  F02E         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7443  0054A0  C01E  F02D         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7444  0054A4  C01D  F02C         	movff	?___fladd,?_Celsius2Kelvin
  7445  0054A8  0012               	return	
  7446  0054AA                     __end_of_Celsius2Kelvin:
  7447                           	opt stack 0
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodh	equ	0xFF4
  7453                           prodl	equ	0xFF3
  7454                           postinc0	equ	0xFEE
  7455                           wreg	equ	0xFE8
  7456                           postdec1	equ	0xFE5
  7457                           fsr1h	equ	0xFE2
  7458                           fsr1l	equ	0xFE1
  7459                           indf2	equ	0xFDF
  7460                           postinc2	equ	0xFDE
  7461                           postdec2	equ	0xFDD
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function _vscp_handleProtocolEvent *****************
  7467 ;; Defined at:
  7468 ;;		line 782 in file "../../vscp_firmware/common/vscp_firmware.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;		None
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  bytes           1   44[BANK0 ] unsigned char 
  7473 ;;  page_save       2   40[BANK0 ] unsigned short 
  7474 ;;  i               1   50[BANK0 ] unsigned char 
  7475 ;;  page_save       2   38[BANK0 ] unsigned short 
  7476 ;;  byte            1   54[BANK0 ] unsigned char 
  7477 ;;  bytes           1   52[BANK0 ] unsigned char 
  7478 ;;  cb              1   49[BANK0 ] unsigned char 
  7479 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7480 ;;  j               1   57[BANK0 ] unsigned char 
  7481 ;;  i               1   55[BANK0 ] unsigned char 
  7482 ;;  k               1   51[BANK0 ] unsigned char 
  7483 ;;  i               1   53[BANK0 ] unsigned char 
  7484 ;;  len             1   47[BANK0 ] unsigned char 
  7485 ;;  pos             1   46[BANK0 ] unsigned char 
  7486 ;;  i               1   56[BANK0 ] unsigned char 
  7487 ;;  len             1   45[BANK0 ] unsigned char 
  7488 ;;  pos             1   43[BANK0 ] unsigned char 
  7489 ;;  offset          1   42[BANK0 ] unsigned char 
  7490 ;; Return value:  Size  Location     Type
  7491 ;;		None               void
  7492 ;; Registers used:
  7493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : F/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7499 ;;      Params:         0       0       0       0       0       0       0
  7500 ;;      Locals:         0      20       0       0       0       0       0
  7501 ;;      Temps:          0       7       0       0       0       0       0
  7502 ;;      Totals:         0      27       0       0       0       0       0
  7503 ;;Total ram usage:       27 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    8
  7506 ;; This function calls:
  7507 ;;		_vscp_init
  7508 ;;		_vscp_sendEvent
  7509 ;;		_vscp_readAppReg
  7510 ;;		_vscp_writeAppReg
  7511 ;;		_vscp_getGUID
  7512 ;;		_vscp_getMDF_URL
  7513 ;;		_vscp_getMatrixInfo
  7514 ;;		_vscp_goBootloaderMode
  7515 ;;		_vscp_handleHeartbeat
  7516 ;;		_vscp_handleSetNickname
  7517 ;;		_vscp_handleDropNickname
  7518 ;;		_vscp_newNodeOnline
  7519 ;;		_vscp_readRegister
  7520 ;;		_vscp_readStdReg
  7521 ;;		_vscp_writeRegister
  7522 ;;		_vscp_writeStdReg
  7523 ;;		___lbmod
  7524 ;; This function is called by:
  7525 ;;		_main
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text33
  7530  002CC2                     __ptext33:
  7531                           	opt stack 0
  7532  002CC2                     _vscp_handleProtocolEvent:
  7533                           	opt stack 22
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;vscp_firmware.c: 784: if (0 == vscp_imsg.vscp_class) {
  7537                           
  7538                           ;incstack = 0
  7539                           ;incstack = 0
  7540  002CC2  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
  7541  002CC4  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7542  002CC6  E101 D2EB          	bz	l10104
  7543  002CCA  D31B               	goto	l1268
  7544  002CCC                     l9684:
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;vscp_firmware.c: 791: vscp_handleHeartbeat();
  7548  002CCC  EC88  F029         	call	_vscp_handleHeartbeat	;wreg free
  7549                           
  7550                           ;vscp_firmware.c: 792: break;
  7551  002CD0  D318               	goto	l1268
  7552  002CD2                     l9686:
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;vscp_firmware.c: 796: vscp_newNodeOnline();
  7556  002CD2  EC98  F02A         	call	_vscp_newNodeOnline	;wreg free
  7557                           
  7558                           ;vscp_firmware.c: 797: break;
  7559  002CD6  D315               	goto	l1268
  7560  002CD8                     l9688:
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;vscp_firmware.c: 801: vscp_handleSetNickname();
  7564  002CD8  EC22  F02B         	call	_vscp_handleSetNickname	;wreg free
  7565                           
  7566                           ;vscp_firmware.c: 802: break;
  7567  002CDC  D312               	goto	l1268
  7568  002CDE                     l9690:
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;vscp_firmware.c: 806: vscp_handleDropNickname();
  7572  002CDE  EC55  F02A         	call	_vscp_handleDropNickname	;wreg free
  7573                           
  7574                           ;vscp_firmware.c: 807: break;
  7575  002CE2  D30F               	goto	l1268
  7576  002CE4                     l9692:
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;vscp_firmware.c: 811: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7580                           ;vscp_firmware.c: 812: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7581  002CE4  51BC               	movf	_vscp_imsg& (0+255),w,b
  7582  002CE6  0B0F               	andlw	15
  7583  002CE8  0A02               	xorlw	2
  7584  002CEA  E001 D30A          	bnz	l1268
  7585                           
  7586                           ; BSR set to: 0
  7587  002CEE  51BA               	movf	_vscp_nickname& (0+255),w,b
  7588  002CF0  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7589  002CF4  62DF               	cpfseq	indf2,c
  7590  002CF6  D305               	goto	l1268
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;vscp_firmware.c: 814: if (vscp_imsg.data[ 1 ] < 0x80) {
  7594  002CF8  0E80               	movlw	128
  7595  002CFA  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7596  002CFC  D012               	goto	l9712
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;vscp_firmware.c: 817: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7600  002CFE  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7601  002D00  ECCD  F012         	call	_vscp_readAppReg
  7602  002D04                     L8:
  7603  002D04  0100               	movlb	0	; () banked
  7604  002D06  6FD0               	movwf	(_vscp_omsg+6)& (0+255),b
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;vscp_firmware.c: 820: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7608  002D08  C0C3  F0CF         	movff	_vscp_imsg+7,_vscp_omsg+5
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;vscp_firmware.c: 822: vscp_omsg.priority = 0x03;
  7612  002D0C  0E03               	movlw	3
  7613  002D0E  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;vscp_firmware.c: 823: vscp_omsg.flags = 0x80 + 2;
  7617  002D10  0E82               	movlw	130
  7618  002D12  6FCA               	movwf	_vscp_omsg& (0+255),b
  7619                           
  7620                           ; BSR set to: 0
  7621                           ;vscp_firmware.c: 824: vscp_omsg.vscp_class = 0;
  7622  002D14  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  7623  002D16  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;vscp_firmware.c: 825: vscp_omsg.vscp_type = 10;
  7627  002D18  0E0A               	movlw	10
  7628  002D1A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  7629  002D1C                     l9710:
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;vscp_firmware.c: 828: vscp_sendEvent();
  7633  002D1C  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  7634                           
  7635                           ;vscp_firmware.c: 829: } else {
  7636  002D20  D2F0               	goto	l1268
  7637  002D22                     l9712:
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] =
  7641                           ;vscp_firmware.c: 833: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7642  002D22  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7643  002D24  ECB1  F021         	call	_vscp_readStdReg
  7644  002D28  D7ED               	goto	L8
  7645  002D2A                     l9726:
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;vscp_firmware.c: 851: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7649                           ;vscp_firmware.c: 852: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7650  002D2A  51BC               	movf	_vscp_imsg& (0+255),w,b
  7651  002D2C  0B0F               	andlw	15
  7652  002D2E  0A03               	xorlw	3
  7653  002D30  E001 D2E7          	bnz	l1268
  7654                           
  7655                           ; BSR set to: 0
  7656  002D34  51BA               	movf	_vscp_nickname& (0+255),w,b
  7657  002D36  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7658  002D3A  62DF               	cpfseq	indf2,c
  7659  002D3C  D2E2               	goto	l1268
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;vscp_firmware.c: 854: if (vscp_imsg.data[ 1 ] < 0x80) {
  7663  002D3E  0E80               	movlw	128
  7664  002D40  61C3               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7665  002D42  D006               	goto	l9746
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;vscp_firmware.c: 857: vscp_omsg.data[ 1 ] =
  7669                           ;vscp_firmware.c: 858: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7670  002D44  C0C4  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7671  002D48  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7672  002D4A  EC37  F003         	call	_vscp_writeAppReg
  7673  002D4E  D7DA               	goto	L8
  7674  002D50                     l9746:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;vscp_firmware.c: 874: vscp_omsg.data[ 1 ] =
  7678                           ;vscp_firmware.c: 875: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7679  002D50  C0C4  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7680  002D54  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7681  002D56  EC7F  F01C         	call	_vscp_writeStdReg
  7682  002D5A  D7D4               	goto	L8
  7683  002D5C                     l9760:
  7684                           
  7685                           ; BSR set to: 0
  7686                           ;vscp_firmware.c: 892: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7687                           ;vscp_firmware.c: 893: (9 == vscp_imsg.data[ 1 ]))
  7688  002D5C  51BA               	movf	_vscp_nickname& (0+255),w,b
  7689  002D5E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7690  002D62  62DF               	cpfseq	indf2,c
  7691  002D64  D005               	goto	l9766
  7692                           
  7693                           ; BSR set to: 0
  7694  002D66  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  7695  002D68  0A09               	xorlw	9
  7696  002D6A  B4D8               	btfsc	status,2,c
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;vscp_firmware.c: 894: {
  7700                           ;vscp_firmware.c: 895: vscp_goBootloaderMode();
  7701  002D6C  EC24  F02C         	call	_vscp_goBootloaderMode	;wreg free
  7702  002D70                     l9766:
  7703                           
  7704                           ;vscp_firmware.c: 896: }
  7705                           ;vscp_firmware.c: 898: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7706                           ;vscp_firmware.c: 899: (1 == vscp_imsg.data[ 1 ]) &&
  7707                           ;vscp_firmware.c: 900: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7708                           ;vscp_firmware.c: 901: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7709                           ;vscp_firmware.c: 902: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7710                           ;vscp_firmware.c: 903: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7711                           ;vscp_firmware.c: 904: ((vscp_page_select >> 8) == vscp_imsg.data[ 6 ]) &&
  7712                           ;vscp_firmware.c: 905: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7713  002D70  0100               	movlb	0	; () banked
  7714  002D72  51BA               	movf	_vscp_nickname& (0+255),w,b
  7715  002D74  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7716  002D78  62DF               	cpfseq	indf2,c
  7717  002D7A  D2C3               	goto	l1268
  7718                           
  7719                           ; BSR set to: 0
  7720  002D7C  05C3               	decf	(_vscp_imsg+7)& (0+255),w,b
  7721  002D7E  E001 D2C0          	bnz	l1268
  7722                           
  7723                           ; BSR set to: 0
  7724  002D82  0E00               	movlw	0
  7725  002D84  ECE4  F02B         	call	_vscp_getGUID
  7726  002D88  0100               	movlb	0	; () banked
  7727  002D8A  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7728  002D8C  E001 D2B9          	bnz	l1268
  7729                           
  7730                           ; BSR set to: 0
  7731  002D90  0E03               	movlw	3
  7732  002D92  ECE4  F02B         	call	_vscp_getGUID
  7733  002D96  0100               	movlb	0	; () banked
  7734  002D98  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7735  002D9A  E001 D2B2          	bnz	l1268
  7736                           
  7737                           ; BSR set to: 0
  7738  002D9E  0E05               	movlw	5
  7739  002DA0  ECE4  F02B         	call	_vscp_getGUID
  7740  002DA4  0100               	movlb	0	; () banked
  7741  002DA6  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7742  002DA8  E001 D2AB          	bnz	l1268
  7743                           
  7744                           ; BSR set to: 0
  7745  002DAC  0E07               	movlw	7
  7746  002DAE  ECE4  F02B         	call	_vscp_getGUID
  7747  002DB2  0100               	movlb	0	; () banked
  7748  002DB4  19C7               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7749  002DB6  E001 D2A4          	bnz	l1268
  7750                           
  7751                           ; BSR set to: 0
  7752  002DBA  5047               	movf	_vscp_page_select+1,w,c
  7753  002DBC  19C8               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7754  002DBE  E001 D2A0          	bnz	l1268
  7755                           
  7756                           ; BSR set to: 0
  7757  002DC2  5046               	movf	_vscp_page_select,w,c
  7758  002DC4  EE20  F0C9         	lfsr	2,_vscp_imsg+13
  7759  002DC8  62DF               	cpfseq	indf2,c
  7760  002DCA  D29B               	goto	l1268
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;vscp_firmware.c: 907: vscp_goBootloaderMode();
  7764  002DCC  EC24  F02C         	call	_vscp_goBootloaderMode	;wreg free
  7765  002DD0  D298               	goto	l1268
  7766  002DD2                     l9784:
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;vscp_firmware.c: 917: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7770                           ;vscp_firmware.c: 918: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7771                           ;vscp_firmware.c: 919: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7772                           ;vscp_firmware.c: 920: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7773  002DD2  0E00               	movlw	0
  7774  002DD4  ECE4  F02B         	call	_vscp_getGUID
  7775  002DD8  0100               	movlb	0	; () banked
  7776  002DDA  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7777  002DDC  E173               	bnz	l9828
  7778                           
  7779                           ; BSR set to: 0
  7780  002DDE  0E01               	movlw	1
  7781  002DE0  ECE4  F02B         	call	_vscp_getGUID
  7782  002DE4  0100               	movlb	0	; () banked
  7783  002DE6  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7784  002DE8  E16D               	bnz	l9828
  7785                           
  7786                           ; BSR set to: 0
  7787  002DEA  0E02               	movlw	2
  7788  002DEC  ECE4  F02B         	call	_vscp_getGUID
  7789  002DF0  0100               	movlb	0	; () banked
  7790  002DF2  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7791  002DF4  E167               	bnz	l9828
  7792                           
  7793                           ; BSR set to: 0
  7794  002DF6  0E03               	movlw	3
  7795  002DF8  ECE4  F02B         	call	_vscp_getGUID
  7796  002DFC  0100               	movlb	0	; () banked
  7797  002DFE  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7798  002E00  E161               	bnz	l9828
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;vscp_firmware.c: 921: vscp_guid_reset |= 0x10;
  7802  002E02  884C               	bsf	_vscp_guid_reset,4,c
  7803  002E04  D05F               	goto	l9828
  7804  002E06                     l9794:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;vscp_firmware.c: 926: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7808                           ;vscp_firmware.c: 927: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7809                           ;vscp_firmware.c: 928: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7810                           ;vscp_firmware.c: 929: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7811  002E06  0E04               	movlw	4
  7812  002E08  ECE4  F02B         	call	_vscp_getGUID
  7813  002E0C  0100               	movlb	0	; () banked
  7814  002E0E  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7815  002E10  E159               	bnz	l9828
  7816                           
  7817                           ; BSR set to: 0
  7818  002E12  0E05               	movlw	5
  7819  002E14  ECE4  F02B         	call	_vscp_getGUID
  7820  002E18  0100               	movlb	0	; () banked
  7821  002E1A  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7822  002E1C  E153               	bnz	l9828
  7823                           
  7824                           ; BSR set to: 0
  7825  002E1E  0E06               	movlw	6
  7826  002E20  ECE4  F02B         	call	_vscp_getGUID
  7827  002E24  0100               	movlb	0	; () banked
  7828  002E26  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7829  002E28  E14D               	bnz	l9828
  7830                           
  7831                           ; BSR set to: 0
  7832  002E2A  0E07               	movlw	7
  7833  002E2C  ECE4  F02B         	call	_vscp_getGUID
  7834  002E30  0100               	movlb	0	; () banked
  7835  002E32  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7836  002E34  E147               	bnz	l9828
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;vscp_firmware.c: 930: vscp_guid_reset |= 0x20;
  7840  002E36  8A4C               	bsf	_vscp_guid_reset,5,c
  7841  002E38  D045               	goto	l9828
  7842  002E3A                     l9804:
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;vscp_firmware.c: 935: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7846                           ;vscp_firmware.c: 936: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7847                           ;vscp_firmware.c: 937: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7848                           ;vscp_firmware.c: 938: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7849  002E3A  0E08               	movlw	8
  7850  002E3C  ECE4  F02B         	call	_vscp_getGUID
  7851  002E40  0100               	movlb	0	; () banked
  7852  002E42  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7853  002E44  E13F               	bnz	l9828
  7854                           
  7855                           ; BSR set to: 0
  7856  002E46  0E09               	movlw	9
  7857  002E48  ECE4  F02B         	call	_vscp_getGUID
  7858  002E4C  0100               	movlb	0	; () banked
  7859  002E4E  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7860  002E50  E139               	bnz	l9828
  7861                           
  7862                           ; BSR set to: 0
  7863  002E52  0E0A               	movlw	10
  7864  002E54  ECE4  F02B         	call	_vscp_getGUID
  7865  002E58  0100               	movlb	0	; () banked
  7866  002E5A  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7867  002E5C  E133               	bnz	l9828
  7868                           
  7869                           ; BSR set to: 0
  7870  002E5E  0E0B               	movlw	11
  7871  002E60  ECE4  F02B         	call	_vscp_getGUID
  7872  002E64  0100               	movlb	0	; () banked
  7873  002E66  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7874  002E68  E12D               	bnz	l9828
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;vscp_firmware.c: 939: vscp_guid_reset |= 0x40;
  7878  002E6A  8C4C               	bsf	_vscp_guid_reset,6,c
  7879  002E6C  D02B               	goto	l9828
  7880  002E6E                     l9814:
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;vscp_firmware.c: 944: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7884                           ;vscp_firmware.c: 945: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7885                           ;vscp_firmware.c: 946: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7886                           ;vscp_firmware.c: 947: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7887  002E6E  0E0C               	movlw	12
  7888  002E70  ECE4  F02B         	call	_vscp_getGUID
  7889  002E74  0100               	movlb	0	; () banked
  7890  002E76  19C3               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7891  002E78  E125               	bnz	l9828
  7892                           
  7893                           ; BSR set to: 0
  7894  002E7A  0E0D               	movlw	13
  7895  002E7C  ECE4  F02B         	call	_vscp_getGUID
  7896  002E80  0100               	movlb	0	; () banked
  7897  002E82  19C4               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7898  002E84  E11F               	bnz	l9828
  7899                           
  7900                           ; BSR set to: 0
  7901  002E86  0E0E               	movlw	14
  7902  002E88  ECE4  F02B         	call	_vscp_getGUID
  7903  002E8C  0100               	movlb	0	; () banked
  7904  002E8E  19C5               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7905  002E90  E119               	bnz	l9828
  7906                           
  7907                           ; BSR set to: 0
  7908  002E92  0E0F               	movlw	15
  7909  002E94  ECE4  F02B         	call	_vscp_getGUID
  7910  002E98  0100               	movlb	0	; () banked
  7911  002E9A  19C6               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7912  002E9C  E113               	bnz	l9828
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;vscp_firmware.c: 948: vscp_guid_reset |= 0x80;
  7916  002E9E  8E4C               	bsf	_vscp_guid_reset,7,c
  7917  002EA0  D011               	goto	l9828
  7918  002EA2                     l1209:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;vscp_firmware.c: 953: vscp_guid_reset = 0;
  7922  002EA2  6A4C               	clrf	_vscp_guid_reset,c
  7923                           
  7924                           ;vscp_firmware.c: 954: break;
  7925  002EA4  D00F               	goto	l9828
  7926  002EA6                     l9826:
  7927                           
  7928                           ; BSR set to: 0
  7929  002EA6  39C2               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7930  002EA8  0B0F               	andlw	15
  7931  002EAA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7932  002EAC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7933                           
  7934                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7935                           ; Switch size 1, requested type "speed"
  7936                           ; Number of cases is 1, Range of values is 0 to 0
  7937                           ; switch strategies available:
  7938                           ; Name         Instructions Cycles
  7939                           ; simple_byte            4     3 (average)
  7940                           ;	Chosen strategy is simple_byte
  7941  002EAE  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7942  002EB0  E1F8               	bnz	l1209
  7943                           
  7944                           ; BSR set to: 0
  7945                           ; Switch size 1, requested type "speed"
  7946                           ; Number of cases is 4, Range of values is 0 to 3
  7947                           ; switch strategies available:
  7948                           ; Name         Instructions Cycles
  7949                           ; simple_byte           13     7 (average)
  7950                           ;	Chosen strategy is simple_byte
  7951  002EB2  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7952  002EB4  E08E               	bz	l9784
  7953  002EB6  0A01               	xorlw	1	; case 1
  7954  002EB8  E0A6               	bz	l9794
  7955  002EBA  0A03               	xorlw	3	; case 2
  7956  002EBC  E0BE               	bz	l9804
  7957  002EBE  0A01               	xorlw	1	; case 3
  7958  002EC0  E0D6               	bz	l9814
  7959  002EC2  D7EF               	goto	l1209
  7960  002EC4                     l9828:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;vscp_firmware.c: 957: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7964  002EC4  504C               	movf	_vscp_guid_reset,w,c
  7965  002EC6  0BF0               	andlw	240
  7966  002EC8  0AF0               	xorlw	240
  7967  002ECA  E001 D21A          	bnz	l1268
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;vscp_firmware.c: 959: vscp_init();
  7971  002ECE  EC1F  F029         	call	_vscp_init	;wreg free
  7972  002ED2  D217               	goto	l1268
  7973  002ED4                     l9832:
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;vscp_firmware.c: 965: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7977  002ED4  51BA               	movf	_vscp_nickname& (0+255),w,b
  7978  002ED6  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  7979  002EDA  62DF               	cpfseq	indf2,c
  7980  002EDC  D212               	goto	l1268
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;vscp_firmware.c: 967: uint8_t i;
  7984                           ;vscp_firmware.c: 968: uint8_t pos = 0;
  7985  002EDE  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7986                           
  7987                           ;vscp_firmware.c: 969: uint8_t offset = vscp_imsg.data[ 1 ];
  7988  002EE0  C0C3  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7989                           
  7990                           ;vscp_firmware.c: 970: uint8_t len = vscp_imsg.data[ 2 ];
  7991  002EE4  C0C4  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7992                           
  7993                           ;vscp_firmware.c: 972: for (i = 0; i < len; i++) {
  7994  002EE8  6B98               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7995  002EEA  D049               	goto	l9864
  7996  002EEC                     l9836:
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;vscp_firmware.c: 973: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  8000  002EEC  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  8001  002EEE  2598               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8002  002EF0  EC86  F02B         	call	_vscp_readRegister
  8003  002EF4  0100               	movlb	0	; () banked
  8004  002EF6  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8005  002EF8  0E07               	movlw	7
  8006  002EFA  6E0E               	movwf	?___lbmod,c
  8007  002EFC  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8008  002EFE  ECC2  F02A         	call	___lbmod
  8009  002F02  0100               	movlb	0	; () banked
  8010  002F04  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8011  002F06  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8012  002F08  0FD0               	addlw	low (_vscp_omsg+6)
  8013  002F0A  6ED9               	movwf	fsr2l,c
  8014  002F0C  6ADA               	clrf	fsr2h,c
  8015  002F0E  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;vscp_firmware.c: 975: if ((i % 7) == 6 || i == (len - 1)) {
  8019  002F12  0E07               	movlw	7
  8020  002F14  6E0E               	movwf	?___lbmod,c
  8021  002F16  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8022  002F18  ECC2  F02A         	call	___lbmod
  8023  002F1C  0A06               	xorlw	6
  8024  002F1E  E00B               	bz	l9842
  8025  002F20  0EFF               	movlw	255
  8026  002F22  0100               	movlb	0	; () banked
  8027  002F24  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  8028  002F26  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8029  002F28  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8030  002F2A  0EFF               	movlw	255
  8031  002F2C  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8032  002F2E  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8033  002F30  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8034  002F32  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8035  002F34  E123               	bnz	l9862
  8036  002F36                     l9842:
  8037                           
  8038                           ;vscp_firmware.c: 976: uint8_t bytes;
  8039                           ;vscp_firmware.c: 978: if ((i % 7) == 6) bytes = 7;
  8040  002F36  0E07               	movlw	7
  8041  002F38  6E0E               	movwf	?___lbmod,c
  8042  002F3A  0100               	movlb	0	; () banked
  8043  002F3C  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8044  002F3E  ECC2  F02A         	call	___lbmod
  8045  002F42  0A06               	xorlw	6
  8046  002F44  E103               	bnz	l9846
  8047  002F46  0E07               	movlw	7
  8048  002F48  0100               	movlb	0	; () banked
  8049  002F4A  D009               	goto	L9
  8050  002F4C                     l9846:
  8051                           
  8052                           ;vscp_firmware.c: 979: else bytes = (i % 7) + 1;
  8053  002F4C  0E07               	movlw	7
  8054  002F4E  6E0E               	movwf	?___lbmod,c
  8055  002F50  0100               	movlb	0	; () banked
  8056  002F52  5198               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8057  002F54  ECC2  F02A         	call	___lbmod
  8058  002F58  0100               	movlb	0	; () banked
  8059  002F5A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8060  002F5C  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8061  002F5E                     L9:
  8062  002F5E  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;vscp_firmware.c: 981: vscp_omsg.flags = 0x80 + bytes + 1;
  8066  002F60  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8067  002F62  0F81               	addlw	129
  8068  002F64  6FCA               	movwf	_vscp_omsg& (0+255),b
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;vscp_firmware.c: 982: vscp_omsg.priority = 0x03;
  8072  002F66  0E03               	movlw	3
  8073  002F68  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;vscp_firmware.c: 983: vscp_omsg.vscp_class = 0;
  8077  002F6A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8078  002F6C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;vscp_firmware.c: 984: vscp_omsg.vscp_type = 26;
  8082  002F6E  0E1A               	movlw	26
  8083  002F70  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;vscp_firmware.c: 985: vscp_omsg.data[ 0 ] = pos;
  8087  002F72  C08B  F0CF         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;vscp_firmware.c: 988: vscp_sendEvent();
  8091  002F76  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;vscp_firmware.c: 989: pos++;
  8095  002F7A  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8096  002F7C                     l9862:
  8097                           
  8098                           ; BSR set to: 0
  8099  002F7C  2B98               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8100  002F7E                     l9864:
  8101                           
  8102                           ; BSR set to: 0
  8103  002F7E  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8104  002F80  5D98               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8105  002F82  E301 D1BE          	bc	l1268
  8106  002F86  D7B2               	goto	l9836
  8107  002F88                     l9866:
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;vscp_firmware.c: 997: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8111  002F88  51BA               	movf	_vscp_nickname& (0+255),w,b
  8112  002F8A  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8113  002F8E  62DF               	cpfseq	indf2,c
  8114  002F90  D1B8               	goto	l1268
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;vscp_firmware.c: 998: uint8_t i;
  8118                           ;vscp_firmware.c: 999: uint8_t pos = vscp_imsg.data[ 1 ];
  8119  002F92  C0C3  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1154
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;vscp_firmware.c: 1000: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8123  002F96  51BC               	movf	_vscp_imsg& (0+255),w,b
  8124  002F98  0FFE               	addlw	254
  8125  002F9A  0B07               	andlw	7
  8126  002F9C  6F8F               	movwf	vscp_handleProtocolEvent@len_1155& (0+255),b
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;vscp_firmware.c: 1002: for (i = 0; i < len; i++) {
  8130  002F9E  6B95               	clrf	vscp_handleProtocolEvent@i_1153& (0+255),b
  8131  002FA0  D018               	goto	l9880
  8132  002FA2                     l9874:
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;vscp_firmware.c: 1004: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8136  002FA2  5195               	movf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8137  002FA4  0FC4               	addlw	low (_vscp_imsg+8)
  8138  002FA6  6ED9               	movwf	fsr2l,c
  8139  002FA8  6ADA               	clrf	fsr2h,c
  8140  002FAA  50DF               	movf	indf2,w,c
  8141  002FAC  6E34               	movwf	?_vscp_writeRegister,c
  8142  002FAE  518E               	movf	vscp_handleProtocolEvent@pos_1154& (0+255),w,b
  8143  002FB0  2595               	addwf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8144  002FB2  EC46  F02B         	call	_vscp_writeRegister
  8145                           
  8146                           ;vscp_firmware.c: 1005: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8147  002FB6  0100               	movlb	0	; () banked
  8148  002FB8  518E               	movf	vscp_handleProtocolEvent@pos_1154& (0+255),w,b
  8149  002FBA  2595               	addwf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8150  002FBC  EC86  F02B         	call	_vscp_readRegister
  8151  002FC0  0100               	movlb	0	; () banked
  8152  002FC2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8153  002FC4  5195               	movf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8154  002FC6  0FD0               	addlw	low (_vscp_omsg+6)
  8155  002FC8  6ED9               	movwf	fsr2l,c
  8156  002FCA  6ADA               	clrf	fsr2h,c
  8157  002FCC  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8158                           
  8159                           ; BSR set to: 0
  8160  002FD0  2B95               	incf	vscp_handleProtocolEvent@i_1153& (0+255),f,b
  8161  002FD2                     l9880:
  8162                           
  8163                           ; BSR set to: 0
  8164  002FD2  518F               	movf	vscp_handleProtocolEvent@len_1155& (0+255),w,b
  8165  002FD4  5D95               	subwf	vscp_handleProtocolEvent@i_1153& (0+255),w,b
  8166  002FD6  E3E5               	bnc	l9874
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;vscp_firmware.c: 1006: }
  8170                           ;vscp_firmware.c: 1008: vscp_omsg.priority = 0x03;
  8171  002FD8  0E03               	movlw	3
  8172  002FDA  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;vscp_firmware.c: 1009: vscp_omsg.vscp_class = 0;
  8176  002FDC  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8177  002FDE  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8178                           
  8179                           ;vscp_firmware.c: 1010: vscp_omsg.vscp_type = 26;
  8180  002FE0  0E1A               	movlw	26
  8181  002FE2  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;vscp_firmware.c: 1011: vscp_omsg.data[ 0 ] = 0;
  8185  002FE4  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;vscp_firmware.c: 1012: vscp_omsg.flags = 0x80 + len + 1;
  8189  002FE6  518F               	movf	vscp_handleProtocolEvent@len_1155& (0+255),w,b
  8190  002FE8  0F81               	addlw	129
  8191  002FEA  6FCA               	movwf	_vscp_omsg& (0+255),b
  8192  002FEC  D697               	goto	l9710
  8193  002FEE                     l9892:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;vscp_firmware.c: 1022: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8197  002FEE  51BA               	movf	_vscp_nickname& (0+255),w,b
  8198  002FF0  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8199  002FF4  62DF               	cpfseq	indf2,c
  8200  002FF6  D185               	goto	l1268
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;vscp_firmware.c: 1024: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8204                           ;vscp_firmware.c: 1025: vscp_imsg.data[ 1 ],
  8205                           ;vscp_firmware.c: 1026: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8206  002FF8  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8207  002FFA  ECCD  F012         	call	_vscp_readAppReg
  8208  002FFE  0100               	movlb	0	; () banked
  8209  003000  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8210  003002  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8211  003004  6E21               	movwf	?_vscp_writeAppReg,c
  8212  003006  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8213  003008  EC37  F003         	call	_vscp_writeAppReg
  8214  00300C  D67B               	goto	L8
  8215  00300E                     l9908:
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;vscp_firmware.c: 1042: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8219  00300E  51BA               	movf	_vscp_nickname& (0+255),w,b
  8220  003010  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8221  003014  62DF               	cpfseq	indf2,c
  8222  003016  D175               	goto	l1268
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;vscp_firmware.c: 1044: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8226                           ;vscp_firmware.c: 1045: vscp_imsg.data[ 1 ],
  8227                           ;vscp_firmware.c: 1046: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8228  003018  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8229  00301A  ECCD  F012         	call	_vscp_readAppReg
  8230  00301E  0100               	movlb	0	; () banked
  8231  003020  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8232  003022  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8233  003024  6E21               	movwf	?_vscp_writeAppReg,c
  8234  003026  51C3               	movf	(_vscp_imsg+7)& (0+255),w,b
  8235  003028  EC37  F003         	call	_vscp_writeAppReg
  8236  00302C  D66B               	goto	L8
  8237  00302E                     l9924:
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;vscp_firmware.c: 1062: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8241                           ;vscp_firmware.c: 1063: (0xff == vscp_imsg.data[ 0 ])) {
  8242  00302E  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
  8243  003030  19BA               	xorwf	_vscp_nickname& (0+255),w,b
  8244  003032  E003               	bz	l1233
  8245                           
  8246                           ; BSR set to: 0
  8247  003034  29C2               	incf	(_vscp_imsg+6)& (0+255),w,b
  8248  003036  E001 D164          	bnz	l1268
  8249  00303A                     l1233:
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;vscp_firmware.c: 1065: uint8_t i, j, k = 0;
  8253  00303A  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;vscp_firmware.c: 1069: vscp_omsg.priority = 0x03;
  8257  00303C  0E03               	movlw	3
  8258  00303E  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8259                           
  8260                           ;vscp_firmware.c: 1070: vscp_omsg.flags = 0x80 + 8;
  8261  003040  0E88               	movlw	136
  8262  003042  6FCA               	movwf	_vscp_omsg& (0+255),b
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;vscp_firmware.c: 1071: vscp_omsg.vscp_class = 0;
  8266  003044  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8267  003046  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8268                           
  8269                           ;vscp_firmware.c: 1072: vscp_omsg.vscp_type = 32;
  8270  003048  0E20               	movlw	32
  8271  00304A  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;vscp_firmware.c: 1074: for (i = 0; i < 3; i++)
  8275  00304C  6B97               	clrf	vscp_handleProtocolEvent@i_1156& (0+255),b
  8276  00304E                     l1234:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;vscp_firmware.c: 1075: {
  8280                           ;vscp_firmware.c: 1076: vscp_omsg.data[0] = i;
  8281  00304E  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1156,_vscp_omsg+5
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;vscp_firmware.c: 1078: for (j = 1; j < 8; j++) {
  8285  003052  0E01               	movlw	1
  8286  003054  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8287  003056                     l9944:
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;vscp_firmware.c: 1079: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8291  003056  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8292  003058  0FCF               	addlw	low (_vscp_omsg+5)
  8293  00305A  6ED9               	movwf	fsr2l,c
  8294  00305C  6ADA               	clrf	fsr2h,c
  8295  00305E  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8296  003060  080F               	sublw	15
  8297  003062  ECE4  F02B         	call	_vscp_getGUID
  8298  003066  6EDF               	movwf	indf2,c
  8299  003068  0100               	movlb	0	; () banked
  8300  00306A  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;vscp_firmware.c: 1080: if (k > 16)
  8304  00306C  0E10               	movlw	16
  8305  00306E  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8306  003070  D001               	goto	l9952
  8307  003072  D004               	goto	l9956
  8308  003074                     l9952:
  8309                           
  8310                           ; BSR set to: 0
  8311  003074  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8312                           
  8313                           ; BSR set to: 0
  8314  003076  0E07               	movlw	7
  8315  003078  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8316  00307A  D7ED               	goto	l9944
  8317  00307C                     l9956:
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;vscp_firmware.c: 1082: }
  8321                           ;vscp_firmware.c: 1084: if (k > 16)
  8322  00307C  0E10               	movlw	16
  8323  00307E  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8324  003080  D001               	goto	l9960
  8325  003082  D006               	goto	l1235
  8326  003084                     l9960:
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;vscp_firmware.c: 1087: vscp_sendEvent();
  8330  003084  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  8331                           
  8332                           ; BSR set to: 0
  8333  003088  2B97               	incf	vscp_handleProtocolEvent@i_1156& (0+255),f,b
  8334                           
  8335                           ; BSR set to: 0
  8336  00308A  0E02               	movlw	2
  8337  00308C  6597               	cpfsgt	vscp_handleProtocolEvent@i_1156& (0+255),b
  8338  00308E  D7DF               	goto	l1234
  8339  003090                     l1235:
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;vscp_firmware.c: 1088: }
  8343                           ;vscp_firmware.c: 1090: for (j = 0; j < 5; j++)
  8344  003090  6B99               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8345  003092                     l9970:
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;vscp_firmware.c: 1091: {
  8349                           ;vscp_firmware.c: 1092: if (vscp_getMDF_URL(j) > 0)
  8350  003092  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8351  003094  ECB8  F02B         	call	_vscp_getMDF_URL
  8352  003098  0900               	iorlw	0
  8353  00309A  E008               	bz	l9974
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;vscp_firmware.c: 1093: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8357  00309C  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8358  00309E  0FD2               	addlw	low (_vscp_omsg+8)
  8359  0030A0  6ED9               	movwf	fsr2l,c
  8360  0030A2  6ADA               	clrf	fsr2h,c
  8361  0030A4  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8362  0030A6  ECB8  F02B         	call	_vscp_getMDF_URL
  8363  0030AA  D005               	goto	L10
  8364  0030AC                     l9974:
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;vscp_firmware.c: 1094: else
  8368                           ;vscp_firmware.c: 1095: vscp_omsg.data[3 + j] = 0;
  8369  0030AC  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8370  0030AE  0FD2               	addlw	low (_vscp_omsg+8)
  8371  0030B0  6ED9               	movwf	fsr2l,c
  8372  0030B2  6ADA               	clrf	fsr2h,c
  8373  0030B4  0E00               	movlw	0
  8374  0030B6                     L10:
  8375  0030B6  6EDF               	movwf	indf2,c
  8376                           
  8377                           ; BSR set to: 0
  8378  0030B8  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8379                           
  8380                           ; BSR set to: 0
  8381  0030BA  0E04               	movlw	4
  8382  0030BC  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8383  0030BE  D7E9               	goto	l9970
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;vscp_firmware.c: 1096: }
  8387                           ;vscp_firmware.c: 1098: vscp_sendEvent();
  8388  0030C0  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  8389                           
  8390                           ; BSR set to: 0
  8391                           ;vscp_firmware.c: 1100: k = 5;
  8392  0030C4  0E05               	movlw	5
  8393  0030C6  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;vscp_firmware.c: 1101: for (i = 3; i < 7; i++)
  8397  0030C8  0E03               	movlw	3
  8398  0030CA  6F97               	movwf	vscp_handleProtocolEvent@i_1156& (0+255),b
  8399  0030CC                     l1244:
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;vscp_firmware.c: 1102: {
  8403                           ;vscp_firmware.c: 1103: vscp_omsg.data[0] = i;
  8404  0030CC  C097  F0CF         	movff	vscp_handleProtocolEvent@i_1156,_vscp_omsg+5
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;vscp_firmware.c: 1105: for (j = 1; j < 8; j++) {
  8408  0030D0  0E01               	movlw	1
  8409  0030D2  6F99               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8410  0030D4                     l9996:
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;vscp_firmware.c: 1106: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8414  0030D4  5199               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8415  0030D6  0FCF               	addlw	low (_vscp_omsg+5)
  8416  0030D8  6ED9               	movwf	fsr2l,c
  8417  0030DA  6ADA               	clrf	fsr2h,c
  8418  0030DC  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8419  0030DE  ECB8  F02B         	call	_vscp_getMDF_URL
  8420  0030E2  6EDF               	movwf	indf2,c
  8421                           
  8422                           ; BSR set to: 0
  8423  0030E4  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8424                           
  8425                           ; BSR set to: 0
  8426  0030E6  2B99               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8427                           
  8428                           ; BSR set to: 0
  8429  0030E8  0E07               	movlw	7
  8430  0030EA  6599               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8431  0030EC  D7F3               	goto	l9996
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;vscp_firmware.c: 1107: }
  8435                           ;vscp_firmware.c: 1108: vscp_sendEvent();
  8436  0030EE  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  8437                           
  8438                           ; BSR set to: 0
  8439  0030F2  2B97               	incf	vscp_handleProtocolEvent@i_1156& (0+255),f,b
  8440                           
  8441                           ; BSR set to: 0
  8442  0030F4  0E06               	movlw	6
  8443  0030F6  6597               	cpfsgt	vscp_handleProtocolEvent@i_1156& (0+255),b
  8444  0030F8  D7E9               	goto	l1244
  8445  0030FA  D103               	goto	l1268
  8446  0030FC                     l10010:
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;vscp_firmware.c: 1117: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8450  0030FC  51BA               	movf	_vscp_nickname& (0+255),w,b
  8451  0030FE  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8452  003102  62DF               	cpfseq	indf2,c
  8453  003104  D0FE               	goto	l1268
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;vscp_firmware.c: 1119: vscp_omsg.priority = 0x03;
  8457  003106  0E03               	movlw	3
  8458  003108  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8459                           
  8460                           ;vscp_firmware.c: 1120: vscp_omsg.flags = 0x80 + 7;
  8461  00310A  0E87               	movlw	135
  8462  00310C  6FCA               	movwf	_vscp_omsg& (0+255),b
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;vscp_firmware.c: 1121: vscp_omsg.vscp_class = 0;
  8466  00310E  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8467  003110  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8468                           
  8469                           ;vscp_firmware.c: 1122: vscp_omsg.vscp_type = 34;
  8470  003112  0E22               	movlw	34
  8471  003114  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;vscp_firmware.c: 1124: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8475  003116  0ECF               	movlw	(_vscp_omsg+5)& (0+255)
  8476  003118  EC93  F02B         	call	_vscp_getMatrixInfo
  8477  00311C  D5FF               	goto	l9710
  8478  00311E                     l10020:
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;vscp_firmware.c: 1140: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8482  00311E  51BA               	movf	_vscp_nickname& (0+255),w,b
  8483  003120  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8484  003124  62DF               	cpfseq	indf2,c
  8485  003126  D0ED               	goto	l1268
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;vscp_firmware.c: 1142: uint16_t page_save;
  8489                           ;vscp_firmware.c: 1143: uint8_t byte = 0, bytes = 0;
  8490  003128  6B96               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;vscp_firmware.c: 1144: uint8_t bytes_this_time, cb;
  8494                           ;vscp_firmware.c: 1148: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8495  00312A  C0BC  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8496  00312E  0E0F               	movlw	15
  8497  003130  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8498  003132  0E04               	movlw	4
  8499  003134  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8500  003136  E304               	bnc	l10028
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;vscp_firmware.c: 1151: bytes = vscp_imsg.data[4];
  8504  003138  C0C6  F094         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1161
  8505                           
  8506                           ;vscp_firmware.c: 1153: if ( 0 == bytes ) {
  8507  00313C  6794               	tstfsz	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8508  00313E  D002               	goto	l10032
  8509  003140                     l10028:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;vscp_firmware.c: 1154: bytes = 1;
  8513  003140  0E01               	movlw	1
  8514  003142  6F94               	movwf	vscp_handleProtocolEvent@bytes_1161& (0+255),b
  8515  003144                     l10032:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;vscp_firmware.c: 1159: }
  8519                           ;vscp_firmware.c: 1162: page_save = vscp_page_select;
  8520  003144  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8521  003148  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;vscp_firmware.c: 1167: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8525  00314C  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8526  00314E  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8527  003152  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8528  003154  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8529  003158  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8530  00315A  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8531  00315C  6E46               	movwf	_vscp_page_select,c
  8532  00315E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8533  003160  6E47               	movwf	_vscp_page_select+1,c
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;vscp_firmware.c: 1170: vscp_omsg.priority = 0x03;
  8537  003162  0E03               	movlw	3
  8538  003164  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;vscp_firmware.c: 1171: vscp_omsg.vscp_class = 0;
  8542  003166  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8543  003168  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;vscp_firmware.c: 1172: vscp_omsg.vscp_type = 39;
  8547  00316A  0E27               	movlw	39
  8548  00316C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;vscp_firmware.c: 1173: vscp_omsg.data[0] = 0;
  8552  00316E  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;vscp_firmware.c: 1174: vscp_omsg.data[1] = vscp_imsg.data[1];
  8556  003170  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;vscp_firmware.c: 1175: vscp_omsg.data[2] = vscp_imsg.data[2];
  8560  003174  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8561  003178                     l10048:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;vscp_firmware.c: 1179: if ( ( bytes - byte ) >= 4 ) {
  8565  003178  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8566  00317A  C094  F07F         	movff	vscp_handleProtocolEvent@bytes_1161,??_vscp_handleProtocolEvent
  8567  00317E  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8568  003180  5F7F               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8569  003182  0E00               	movlw	0
  8570  003184  5B80               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8571  003186  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8572  003188  0A80               	xorlw	128
  8573  00318A  0F80               	addlw	-128
  8574  00318C  0E04               	movlw	4
  8575  00318E  B4D8               	btfsc	status,2,c
  8576  003190  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8577  003192  E302               	bnc	l10052
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;vscp_firmware.c: 1180: bytes_this_time = 4;
  8581  003194  0E04               	movlw	4
  8582  003196  D002               	goto	L12
  8583  003198                     l10052:
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;vscp_firmware.c: 1182: else {
  8587                           ;vscp_firmware.c: 1183: bytes_this_time = (bytes - byte);
  8588  003198  5196               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8589  00319A  5D94               	subwf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8590  00319C                     L12:
  8591  00319C  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;vscp_firmware.c: 1184: }
  8595                           ;vscp_firmware.c: 1187: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8596  00319E  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8597  0031A0  0F84               	addlw	132
  8598  0031A2  6FCA               	movwf	_vscp_omsg& (0+255),b
  8599                           
  8600                           ;vscp_firmware.c: 1188: vscp_omsg.data[3] =
  8601                           ;vscp_firmware.c: 1189: vscp_imsg.data[3] + byte;
  8602  0031A4  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8603  0031A6  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8604  0031A8  6FD2               	movwf	(_vscp_omsg+8)& (0+255),b
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;vscp_firmware.c: 1192: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8608  0031AA  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8609  0031AC  D00E               	goto	l10060
  8610  0031AE                     l10056:
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;vscp_firmware.c: 1193: vscp_omsg.data[ (4 + cb) ] =
  8614                           ;vscp_firmware.c: 1194: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8615  0031AE  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8616  0031B0  2596               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8617  0031B2  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8618  0031B4  EC86  F02B         	call	_vscp_readRegister
  8619  0031B8  0100               	movlb	0	; () banked
  8620  0031BA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8621  0031BC  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8622  0031BE  0FD3               	addlw	low (_vscp_omsg+9)
  8623  0031C0  6ED9               	movwf	fsr2l,c
  8624  0031C2  6ADA               	clrf	fsr2h,c
  8625  0031C4  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8626                           
  8627                           ; BSR set to: 0
  8628  0031C8  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8629  0031CA                     l10060:
  8630                           
  8631                           ; BSR set to: 0
  8632  0031CA  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8633  0031CC  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8634  0031CE  E3EF               	bnc	l10056
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;vscp_firmware.c: 1195: }
  8638                           ;vscp_firmware.c: 1198: vscp_sendEvent();
  8639  0031D0  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;vscp_firmware.c: 1201: byte += bytes_this_time;
  8643  0031D4  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8644  0031D6  2796               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;vscp_firmware.c: 1204: vscp_omsg.data[0] += 1;
  8648  0031D8  2BCF               	incf	(_vscp_omsg+5)& (0+255),f,b
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;vscp_firmware.c: 1206: } while (byte < bytes);
  8652  0031DA  5194               	movf	vscp_handleProtocolEvent@bytes_1161& (0+255),w,b
  8653  0031DC  5D96               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8654  0031DE  E3CC               	bnc	l10048
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;vscp_firmware.c: 1209: vscp_page_select = page_save;
  8658  0031E0  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8659  0031E4  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8660  0031E8  D08C               	goto	l1268
  8661  0031EA                     l10070:
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;vscp_firmware.c: 1216: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8665  0031EA  51BA               	movf	_vscp_nickname& (0+255),w,b
  8666  0031EC  EE20  F0C2         	lfsr	2,_vscp_imsg+6
  8667  0031F0  62DF               	cpfseq	indf2,c
  8668  0031F2  D087               	goto	l1268
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;vscp_firmware.c: 1218: uint8_t i;
  8672                           ;vscp_firmware.c: 1219: uint16_t page_save;
  8673                           ;vscp_firmware.c: 1222: page_save = vscp_page_select;
  8674  0031F4  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1165
  8675  0031F8  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1165+1
  8676                           
  8677                           ; BSR set to: 0
  8678                           ;vscp_firmware.c: 1226: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8679  0031FC  51C4               	movf	(_vscp_imsg+8)& (0+255),w,b
  8680  0031FE  C0C3  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8681  003202  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8682  003204  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8683  003208  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8684  00320A  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8685  00320C  6E46               	movwf	_vscp_page_select,c
  8686  00320E  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8687  003210  6E47               	movwf	_vscp_page_select+1,c
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;vscp_firmware.c: 1228: for (i = vscp_imsg.data[ 3 ];
  8691  003212  C0C5  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1164
  8692                           
  8693                           ;vscp_firmware.c: 1231: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8694                           ;vscp_firmware.c: 1232: i++) {
  8695  003216  D014               	goto	l10082
  8696  003218                     l10078:
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;vscp_firmware.c: 1233: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8700                           ;vscp_firmware.c: 1234: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8701  003218  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8702  00321A  08C6               	sublw	low (_vscp_imsg+10)
  8703  00321C  2592               	addwf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8704  00321E  6ED9               	movwf	fsr2l,c
  8705  003220  6ADA               	clrf	fsr2h,c
  8706  003222  50DF               	movf	indf2,w,c
  8707  003224  6E34               	movwf	?_vscp_writeRegister,c
  8708  003226  5192               	movf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8709  003228  EC46  F02B         	call	_vscp_writeRegister
  8710  00322C  0100               	movlb	0	; () banked
  8711  00322E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8712  003230  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8713  003232  08D3               	sublw	low (_vscp_omsg+9)
  8714  003234  2592               	addwf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8715  003236  6ED9               	movwf	fsr2l,c
  8716  003238  6ADA               	clrf	fsr2h,c
  8717  00323A  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8718                           
  8719                           ; BSR set to: 0
  8720  00323E  2B92               	incf	vscp_handleProtocolEvent@i_1164& (0+255),f,b
  8721  003240                     l10082:
  8722                           
  8723                           ; BSR set to: 0
  8724  003240  51BC               	movf	_vscp_imsg& (0+255),w,b
  8725  003242  0B0F               	andlw	15
  8726  003244  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8727  003246  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8728  003248  51C5               	movf	(_vscp_imsg+9)& (0+255),w,b
  8729  00324A  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8730  00324C  0E00               	movlw	0
  8731  00324E  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8732  003250  0EFC               	movlw	252
  8733  003252  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8734  003254  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8735  003256  0EFF               	movlw	255
  8736  003258  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8737  00325A  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8738  00325C  5192               	movf	vscp_handleProtocolEvent@i_1164& (0+255),w,b
  8739  00325E  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8740  003260  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8741  003262  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8742  003264  0A80               	xorlw	128
  8743  003266  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8744  003268  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8745  00326A  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8746  00326C  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8747  00326E  0A80               	xorlw	128
  8748  003270  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8749  003272  E3D2               	bnc	l10078
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;vscp_firmware.c: 1235: }
  8753                           ;vscp_firmware.c: 1238: vscp_page_select = page_save;
  8754  003274  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1165,_vscp_page_select
  8755  003278  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1165+1,_vscp_page_select+1
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;vscp_firmware.c: 1240: vscp_omsg.priority = 0x03;
  8759  00327C  0E03               	movlw	3
  8760  00327E  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;vscp_firmware.c: 1241: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8764  003280  51BC               	movf	_vscp_imsg& (0+255),w,b
  8765  003282  0B0F               	andlw	15
  8766  003284  0F80               	addlw	128
  8767  003286  6FCA               	movwf	_vscp_omsg& (0+255),b
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;vscp_firmware.c: 1242: vscp_omsg.vscp_class = 0;
  8771  003288  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
  8772  00328A  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;vscp_firmware.c: 1243: vscp_omsg.vscp_type = 39;
  8776  00328C  0E27               	movlw	39
  8777  00328E  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;vscp_firmware.c: 1244: vscp_omsg.data[0] = 0;
  8781  003290  6BCF               	clrf	(_vscp_omsg+5)& (0+255),b
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;vscp_firmware.c: 1245: vscp_omsg.data[1] = vscp_imsg.data[1];
  8785  003292  C0C3  F0D0         	movff	_vscp_imsg+7,_vscp_omsg+6
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;vscp_firmware.c: 1246: vscp_omsg.data[2] = vscp_imsg.data[2];
  8789  003296  C0C4  F0D1         	movff	_vscp_imsg+8,_vscp_omsg+7
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;vscp_firmware.c: 1247: vscp_omsg.data[3] = vscp_imsg.data[3];
  8793  00329A  C0C5  F0D2         	movff	_vscp_imsg+9,_vscp_omsg+8
  8794  00329E  D53E               	goto	l9710
  8795  0032A0                     l10104:
  8796                           
  8797                           ; BSR set to: 0
  8798  0032A0  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
  8799                           
  8800                           ; Switch size 1, requested type "speed"
  8801                           ; Number of cases is 16, Range of values is 1 to 38
  8802                           ; switch strategies available:
  8803                           ; Name         Instructions Cycles
  8804                           ; simple_byte           49    25 (average)
  8805                           ;	Chosen strategy is simple_byte
  8806  0032A2  0A01               	xorlw	1	; case 1
  8807  0032A4  E101 D512          	bz	l9684
  8808  0032A8  0A03               	xorlw	3	; case 2
  8809  0032AA  E101 D512          	bz	l9686
  8810  0032AE  0A04               	xorlw	4	; case 6
  8811  0032B0  E101 D512          	bz	l9688
  8812  0032B4  0A0E               	xorlw	14	; case 8
  8813  0032B6  E101 D512          	bz	l9690
  8814  0032BA  0A01               	xorlw	1	; case 9
  8815  0032BC  E101 D512          	bz	l9692
  8816  0032C0  0A02               	xorlw	2	; case 11
  8817  0032C2  E101 D532          	bz	l9726
  8818  0032C6  0A07               	xorlw	7	; case 12
  8819  0032C8  E101 D548          	bz	l9760
  8820  0032CC  0A1B               	xorlw	27	; case 23
  8821  0032CE  E101 D5EA          	bz	l9826
  8822  0032D2  0A0F               	xorlw	15	; case 24
  8823  0032D4  E101 D5FE          	bz	l9832
  8824  0032D8  0A01               	xorlw	1	; case 25
  8825  0032DA  E101 D655          	bz	l9866
  8826  0032DE  0A04               	xorlw	4	; case 29
  8827  0032E0  E101 D685          	bz	l9892
  8828  0032E4  0A03               	xorlw	3	; case 30
  8829  0032E6  E101 D692          	bz	l9908
  8830  0032EA  0A01               	xorlw	1	; case 31
  8831  0032EC  E101 D69F          	bz	l9924
  8832  0032F0  0A3E               	xorlw	62	; case 33
  8833  0032F2  E101 D703          	bz	l10010
  8834  0032F6  0A04               	xorlw	4	; case 37
  8835  0032F8  E101 D711          	bz	l10020
  8836  0032FC  0A03               	xorlw	3	; case 38
  8837  0032FE  E101 D774          	bz	l10070
  8838  003302                     l1268:
  8839  003302  0012               	return	
  8840  003304                     __end_of_vscp_handleProtocolEvent:
  8841                           	opt stack 0
  8842                           tblptru	equ	0xFF8
  8843                           tblptrh	equ	0xFF7
  8844                           tblptrl	equ	0xFF6
  8845                           tablat	equ	0xFF5
  8846                           prodh	equ	0xFF4
  8847                           prodl	equ	0xFF3
  8848                           postinc0	equ	0xFEE
  8849                           wreg	equ	0xFE8
  8850                           postdec1	equ	0xFE5
  8851                           fsr1h	equ	0xFE2
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           fsr2h	equ	0xFDA
  8857                           fsr2l	equ	0xFD9
  8858                           status	equ	0xFD8
  8859                           
  8860 ;; *************** function ___lbmod *****************
  8861 ;; Defined at:
  8862 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8863 ;; Parameters:    Size  Location     Type
  8864 ;;  dividend        1    wreg     unsigned char 
  8865 ;;  divisor         1   13[COMRAM] unsigned char 
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  dividend        1   14[COMRAM] unsigned char 
  8868 ;;  rem             1   16[COMRAM] unsigned char 
  8869 ;;  counter         1   15[COMRAM] unsigned char 
  8870 ;; Return value:  Size  Location     Type
  8871 ;;                  1    wreg      unsigned char 
  8872 ;; Registers used:
  8873 ;;		wreg, status,2, status,0
  8874 ;; Tracked objects:
  8875 ;;		On entry : F/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8879 ;;      Params:         1       0       0       0       0       0       0
  8880 ;;      Locals:         3       0       0       0       0       0       0
  8881 ;;      Temps:          0       0       0       0       0       0       0
  8882 ;;      Totals:         4       0       0       0       0       0       0
  8883 ;;Total ram usage:        4 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    2
  8886 ;; This function calls:
  8887 ;;		Nothing
  8888 ;; This function is called by:
  8889 ;;		_vscp_handleProtocolEvent
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           	psect	text34
  8894  005584                     __ptext34:
  8895                           	opt stack 0
  8896  005584                     ___lbmod:
  8897                           	opt stack 27
  8898                           
  8899                           ;incstack = 0
  8900                           ;incstack = 0
  8901                           ;___lbmod@dividend stored from wreg
  8902  005584  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8903                           
  8904                           ; BSR set to: 0
  8905  005588  0E08               	movlw	8
  8906  00558A  6E10               	movwf	___lbmod@counter,c
  8907                           
  8908                           ; BSR set to: 0
  8909  00558C  6A11               	clrf	___lbmod@rem,c
  8910  00558E                     l9122:
  8911  00558E  90D8               	bcf	status,0,c
  8912  005590  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8913  005592  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8914  005594  6E11               	movwf	___lbmod@rem,c
  8915  005596  90D8               	bcf	status,0,c
  8916  005598  360F               	rlcf	___lbmod@dividend,f,c
  8917  00559A  500E               	movf	___lbmod@divisor,w,c
  8918  00559C  5C11               	subwf	___lbmod@rem,w,c
  8919  00559E  E302               	bnc	l9130
  8920  0055A0  500E               	movf	___lbmod@divisor,w,c
  8921  0055A2  5E11               	subwf	___lbmod@rem,f,c
  8922  0055A4                     l9130:
  8923  0055A4  2E10               	decfsz	___lbmod@counter,f,c
  8924  0055A6  D7F3               	goto	l9122
  8925  0055A8  5011               	movf	___lbmod@rem,w,c
  8926  0055AA  0012               	return	
  8927  0055AC                     __end_of___lbmod:
  8928                           	opt stack 0
  8929                           tblptru	equ	0xFF8
  8930                           tblptrh	equ	0xFF7
  8931                           tblptrl	equ	0xFF6
  8932                           tablat	equ	0xFF5
  8933                           prodh	equ	0xFF4
  8934                           prodl	equ	0xFF3
  8935                           postinc0	equ	0xFEE
  8936                           wreg	equ	0xFE8
  8937                           postdec1	equ	0xFE5
  8938                           fsr1h	equ	0xFE2
  8939                           fsr1l	equ	0xFE1
  8940                           indf2	equ	0xFDF
  8941                           postinc2	equ	0xFDE
  8942                           postdec2	equ	0xFDD
  8943                           fsr2h	equ	0xFDA
  8944                           fsr2l	equ	0xFD9
  8945                           status	equ	0xFD8
  8946                           
  8947 ;; *************** function _vscp_writeRegister *****************
  8948 ;; Defined at:
  8949 ;;		line 675 in file "../../vscp_firmware/common/vscp_firmware.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;  reg             1    wreg     unsigned char 
  8952 ;;  value           1   51[COMRAM] unsigned char 
  8953 ;; Auto vars:     Size  Location     Type
  8954 ;;  reg             1   52[COMRAM] unsigned char 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;                  1    wreg      unsigned char 
  8957 ;; Registers used:
  8958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8959 ;; Tracked objects:
  8960 ;;		On entry : F/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8964 ;;      Params:         1       0       0       0       0       0       0
  8965 ;;      Locals:         1       0       0       0       0       0       0
  8966 ;;      Temps:          0       0       0       0       0       0       0
  8967 ;;      Totals:         2       0       0       0       0       0       0
  8968 ;;Total ram usage:        2 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    7
  8971 ;; This function calls:
  8972 ;;		_vscp_writeAppReg
  8973 ;;		_vscp_writeStdReg
  8974 ;; This function is called by:
  8975 ;;		_vscp_handleProtocolEvent
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           	psect	text35
  8980  00568C                     __ptext35:
  8981                           	opt stack 0
  8982  00568C                     _vscp_writeRegister:
  8983                           	opt stack 22
  8984                           
  8985                           ;incstack = 0
  8986                           ;incstack = 0
  8987                           ;vscp_writeRegister@reg stored from wreg
  8988  00568C  CFE8 F035          	movff	wreg,vscp_writeRegister@reg
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;vscp_firmware.c: 676: if (reg >= 0x80) {
  8992  005690  0E7F               	movlw	127
  8993  005692  6435               	cpfsgt	vscp_writeRegister@reg,c
  8994  005694  D006               	goto	l11340
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;vscp_firmware.c: 677: return vscp_writeStdReg(reg, value);
  8998  005696  C034  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8999  00569A  5035               	movf	vscp_writeRegister@reg,w,c
  9000  00569C  EC7F  F01C         	call	_vscp_writeStdReg
  9001  0056A0  D005               	goto	l1144
  9002  0056A2                     l11340:
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;vscp_firmware.c: 679: return vscp_writeAppReg(reg, value);
  9006  0056A2  C034  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9007  0056A6  5035               	movf	vscp_writeRegister@reg,w,c
  9008  0056A8  EC37  F003         	call	_vscp_writeAppReg
  9009  0056AC                     l1144:
  9010  0056AC  0012               	return	
  9011  0056AE                     __end_of_vscp_writeRegister:
  9012                           	opt stack 0
  9013                           tblptru	equ	0xFF8
  9014                           tblptrh	equ	0xFF7
  9015                           tblptrl	equ	0xFF6
  9016                           tablat	equ	0xFF5
  9017                           prodh	equ	0xFF4
  9018                           prodl	equ	0xFF3
  9019                           postinc0	equ	0xFEE
  9020                           wreg	equ	0xFE8
  9021                           postdec1	equ	0xFE5
  9022                           fsr1h	equ	0xFE2
  9023                           fsr1l	equ	0xFE1
  9024                           indf2	equ	0xFDF
  9025                           postinc2	equ	0xFDE
  9026                           postdec2	equ	0xFDD
  9027                           fsr2h	equ	0xFDA
  9028                           fsr2l	equ	0xFD9
  9029                           status	equ	0xFD8
  9030                           
  9031 ;; *************** function _vscp_writeStdReg *****************
  9032 ;; Defined at:
  9033 ;;		line 688 in file "../../vscp_firmware/common/vscp_firmware.c"
  9034 ;; Parameters:    Size  Location     Type
  9035 ;;  reg             1    wreg     unsigned char 
  9036 ;;  value           1   33[COMRAM] unsigned char 
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;  reg             1   50[COMRAM] unsigned char 
  9039 ;;  code            4   43[COMRAM] unsigned long 
  9040 ;;  idx             1   48[COMRAM] unsigned char 
  9041 ;;  code            4   39[COMRAM] unsigned long 
  9042 ;;  idx             1   47[COMRAM] unsigned char 
  9043 ;;  rv              1   49[COMRAM] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      unsigned char 
  9046 ;; Registers used:
  9047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : F/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9053 ;;      Params:         1       0       0       0       0       0       0
  9054 ;;      Locals:        12       0       0       0       0       0       0
  9055 ;;      Temps:          5       0       0       0       0       0       0
  9056 ;;      Totals:        18       0       0       0       0       0       0
  9057 ;;Total ram usage:       18 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    6
  9060 ;; This function calls:
  9061 ;;		_vscp_getGUID
  9062 ;;		_vscp_setGUID
  9063 ;;		_vscp_getUserID
  9064 ;;		_vscp_setUserID
  9065 ;;		_vscp_getManufacturerId
  9066 ;;		_vscp_setManufacturerId
  9067 ;;		_vscp_getFamilyCode
  9068 ;;		_vscp_getFamilyType
  9069 ;;		_vscp_restoreDefaults
  9070 ;; This function is called by:
  9071 ;;		_vscp_writeRegister
  9072 ;;		_vscp_handleProtocolEvent
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text36
  9077  0038FE                     __ptext36:
  9078                           	opt stack 0
  9079  0038FE                     _vscp_writeStdReg:
  9080                           	opt stack 23
  9081                           
  9082                           ;incstack = 0
  9083                           ;incstack = 0
  9084                           ;vscp_writeStdReg@reg stored from wreg
  9085  0038FE  CFE8 F033          	movff	wreg,vscp_writeStdReg@reg
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;vscp_firmware.c: 689: uint8_t rv = ~value;
  9089  003902  1C22               	comf	vscp_writeStdReg@value,w,c
  9090  003904  6E32               	movwf	vscp_writeStdReg@rv,c
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;vscp_firmware.c: 691: if ((reg > (0x82 + 1)) &&
  9094                           ;vscp_firmware.c: 692: (reg < 0x89)) {
  9095  003906  0E83               	movlw	131
  9096  003908  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9097  00390A  D00E               	goto	l11352
  9098                           
  9099                           ; BSR set to: 0
  9100  00390C  0E89               	movlw	137
  9101  00390E  6033               	cpfslt	vscp_writeStdReg@reg,c
  9102  003910  D00B               	goto	l11352
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;vscp_firmware.c: 695: vscp_setUserID((reg - 0x84), value);
  9106  003912  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9107  003916  5033               	movf	vscp_writeStdReg@reg,w,c
  9108  003918  0F7C               	addlw	124
  9109  00391A  ECAC  F02B         	call	_vscp_setUserID
  9110                           
  9111                           ;vscp_firmware.c: 696: rv = vscp_getUserID((reg - 0x84));
  9112  00391E  5033               	movf	vscp_writeStdReg@reg,w,c
  9113  003920  0F7C               	addlw	124
  9114  003922  ECDA  F02B         	call	_vscp_getUserID
  9115  003926  D083               	goto	L17
  9116  003928                     l11352:
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;vscp_firmware.c: 699: else if (0x92 == reg) {
  9120  003928  5033               	movf	vscp_writeStdReg@reg,w,c
  9121  00392A  0A92               	xorlw	146
  9122  00392C  E10D               	bnz	l11358
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;vscp_firmware.c: 702: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9126  00392E  5022               	movf	vscp_writeStdReg@value,w,c
  9127  003930  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9128  003932  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9129  003934  5046               	movf	_vscp_page_select,w,c
  9130  003936  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9131  003938  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9132  00393A  1023               	iorwf	??_vscp_writeStdReg,w,c
  9133  00393C  6E46               	movwf	_vscp_page_select,c
  9134  00393E  5024               	movf	??_vscp_writeStdReg+1,w,c
  9135  003940  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9136  003942  6E47               	movwf	_vscp_page_select+1,c
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;vscp_firmware.c: 703: rv = (vscp_page_select >> 8) & 0xff;
  9140  003944  5047               	movf	_vscp_page_select+1,w,c
  9141  003946  D073               	goto	L17
  9142  003948                     l11358:
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;vscp_firmware.c: 705: else if (0x93 == reg) {
  9146  003948  5033               	movf	vscp_writeStdReg@reg,w,c
  9147  00394A  0A93               	xorlw	147
  9148  00394C  E10B               	bnz	l11364
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;vscp_firmware.c: 708: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9152  00394E  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9153  003950  5047               	movf	_vscp_page_select+1,w,c
  9154  003952  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9155  003954  5022               	movf	vscp_writeStdReg@value,w,c
  9156  003956  1023               	iorwf	??_vscp_writeStdReg,w,c
  9157  003958  6E46               	movwf	_vscp_page_select,c
  9158  00395A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9159  00395C  6E47               	movwf	_vscp_page_select+1,c
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;vscp_firmware.c: 709: rv = (vscp_page_select & 0xff);
  9163  00395E  C046  F032         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9164                           
  9165                           ;vscp_firmware.c: 710: }
  9166  003962  D0B1               	goto	l11426
  9167  003964                     l11364:
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;vscp_firmware.c: 715: else if ((reg > 0x88) && (reg < 0x91)) {
  9171  003964  0E88               	movlw	136
  9172  003966  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9173  003968  D019               	goto	l11376
  9174                           
  9175                           ; BSR set to: 0
  9176  00396A  0E91               	movlw	145
  9177  00396C  6033               	cpfslt	vscp_writeStdReg@reg,c
  9178  00396E  D016               	goto	l11376
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;vscp_firmware.c: 717: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9182                           ;vscp_firmware.c: 718: (0xff != (vscp_page_select & 0xff))) {
  9183  003970  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9184  003974  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9185  003978  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9186  00397A  2824               	incf	??_vscp_writeStdReg+1,w,c
  9187  00397C  E102               	bnz	l11372
  9188                           
  9189                           ; BSR set to: 0
  9190  00397E  2846               	incf	_vscp_page_select,w,c
  9191  003980  E002               	bz	l11374
  9192  003982                     l11372:
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;vscp_firmware.c: 720: rv = ~value;
  9196  003982  1C22               	comf	vscp_writeStdReg@value,w,c
  9197  003984  D054               	goto	L17
  9198  003986                     l11374:
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;vscp_firmware.c: 723: vscp_setManufacturerId(reg - 0x89, value);
  9202  003986  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9203  00398A  5033               	movf	vscp_writeStdReg@reg,w,c
  9204  00398C  0F77               	addlw	119
  9205  00398E  ECA0  F02B         	call	_vscp_setManufacturerId
  9206                           
  9207                           ;vscp_firmware.c: 724: rv = vscp_getManufacturerId(reg - 0x89);
  9208  003992  5033               	movf	vscp_writeStdReg@reg,w,c
  9209  003994  0F77               	addlw	119
  9210  003996  ECD0  F02B         	call	_vscp_getManufacturerId
  9211  00399A  D049               	goto	L17
  9212  00399C                     l11376:
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;vscp_firmware.c: 727: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9216  00399C  0ECF               	movlw	207
  9217  00399E  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9218  0039A0  D017               	goto	l11388
  9219                           
  9220                           ; BSR set to: 0
  9221  0039A2  0EE0               	movlw	224
  9222  0039A4  6033               	cpfslt	vscp_writeStdReg@reg,c
  9223  0039A6  D014               	goto	l11388
  9224                           
  9225                           ; BSR set to: 0
  9226                           ;vscp_firmware.c: 729: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9227                           ;vscp_firmware.c: 730: (0xff != (vscp_page_select & 0xff))) {
  9228  0039A8  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9229  0039AC  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9230  0039B0  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9231  0039B2  2824               	incf	??_vscp_writeStdReg+1,w,c
  9232  0039B4  E1E6               	bnz	l11372
  9233                           
  9234                           ; BSR set to: 0
  9235  0039B6  2846               	incf	_vscp_page_select,w,c
  9236  0039B8  E1E4               	bnz	l11372
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;vscp_firmware.c: 734: vscp_setGUID(reg - 0xD0, value);
  9240  0039BA  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9241  0039BE  5033               	movf	vscp_writeStdReg@reg,w,c
  9242  0039C0  0F30               	addlw	48
  9243  0039C2  EC57  F02B         	call	_vscp_setGUID
  9244                           
  9245                           ;vscp_firmware.c: 735: rv = vscp_getGUID(reg - 0xD0);
  9246  0039C6  5033               	movf	vscp_writeStdReg@reg,w,c
  9247  0039C8  0F30               	addlw	48
  9248  0039CA  ECE4  F02B         	call	_vscp_getGUID
  9249  0039CE  D02F               	goto	L17
  9250  0039D0                     l11388:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;vscp_firmware.c: 739: else if ( ( reg >= 0x9A ) &&
  9254                           ;vscp_firmware.c: 740: ( reg < 0x9E ) ) {
  9255  0039D0  0E99               	movlw	153
  9256  0039D2  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9257  0039D4  D02E               	goto	l11398
  9258                           
  9259                           ; BSR set to: 0
  9260  0039D6  0E9E               	movlw	158
  9261  0039D8  6033               	cpfslt	vscp_writeStdReg@reg,c
  9262  0039DA  D02B               	goto	l11398
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;vscp_firmware.c: 742: uint32_t code = vscp_getFamilyCode();
  9266  0039DC  EC3B  F02C         	call	_vscp_getFamilyCode	;wreg free
  9267  0039E0  C011  F02B         	movff	?_vscp_getFamilyCode+3,vscp_writeStdReg@code+3
  9268  0039E4  C010  F02A         	movff	?_vscp_getFamilyCode+2,vscp_writeStdReg@code+2
  9269  0039E8  C00F  F029         	movff	?_vscp_getFamilyCode+1,vscp_writeStdReg@code+1
  9270  0039EC  C00E  F028         	movff	?_vscp_getFamilyCode,vscp_writeStdReg@code
  9271                           
  9272                           ; BSR set to: 0
  9273                           ;vscp_firmware.c: 743: uint8_t idx = reg - 0x9A;
  9274  0039F0  5033               	movf	vscp_writeStdReg@reg,w,c
  9275  0039F2  0F66               	addlw	102
  9276  0039F4  6E30               	movwf	vscp_writeStdReg@idx,c
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;vscp_firmware.c: 744: rv = code >> (((3-idx)*8) & 0xff);
  9280  0039F6  5030               	movf	vscp_writeStdReg@idx,w,c
  9281  0039F8  0803               	sublw	3
  9282  0039FA  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9283  0039FC  90D8               	bcf	status,0,c
  9284  0039FE  3623               	rlcf	??_vscp_writeStdReg,f,c
  9285  003A00  90D8               	bcf	status,0,c
  9286  003A02  3623               	rlcf	??_vscp_writeStdReg,f,c
  9287  003A04  90D8               	bcf	status,0,c
  9288  003A06  3623               	rlcf	??_vscp_writeStdReg,f,c
  9289  003A08  5023               	movf	??_vscp_writeStdReg,w,c
  9290  003A0A  C028  F024         	movff	vscp_writeStdReg@code,??_vscp_writeStdReg+1
  9291  003A0E  C029  F025         	movff	vscp_writeStdReg@code+1,??_vscp_writeStdReg+2
  9292  003A12  C02A  F026         	movff	vscp_writeStdReg@code+2,??_vscp_writeStdReg+3
  9293  003A16  C02B  F027         	movff	vscp_writeStdReg@code+3,??_vscp_writeStdReg+4
  9294  003A1A  2AE8               	incf	wreg,f,c
  9295  003A1C  D005               	goto	u9680
  9296  003A1E                     u9685:
  9297  003A1E  90D8               	bcf	status,0,c
  9298  003A20  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9299  003A22  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9300  003A24  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9301  003A26  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9302  003A28                     u9680:
  9303  003A28  2EE8               	decfsz	wreg,f,c
  9304  003A2A  D7F9               	goto	u9685
  9305  003A2C  D030               	goto	L18
  9306  003A2E                     L17:
  9307  003A2E  6E32               	movwf	vscp_writeStdReg@rv,c
  9308                           
  9309                           ;vscp_firmware.c: 745: }
  9310  003A30  D04A               	goto	l11426
  9311  003A32                     l11398:
  9312                           
  9313                           ; BSR set to: 0
  9314                           ;vscp_firmware.c: 746: else if ( ( reg >= 0x9E ) &&
  9315                           ;vscp_firmware.c: 747: ( reg < 0xA2 ) ) {
  9316  003A32  0E9D               	movlw	157
  9317  003A34  6433               	cpfsgt	vscp_writeStdReg@reg,c
  9318  003A36  D02D               	goto	l11408
  9319                           
  9320                           ; BSR set to: 0
  9321  003A38  0EA2               	movlw	162
  9322  003A3A  6033               	cpfslt	vscp_writeStdReg@reg,c
  9323  003A3C  D02A               	goto	l11408
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;vscp_firmware.c: 749: uint32_t code = vscp_getFamilyType();
  9327  003A3E  EC36  F02C         	call	_vscp_getFamilyType	;wreg free
  9328  003A42  C011  F02F         	movff	?_vscp_getFamilyType+3,vscp_writeStdReg@code_1145+3
  9329  003A46  C010  F02E         	movff	?_vscp_getFamilyType+2,vscp_writeStdReg@code_1145+2
  9330  003A4A  C00F  F02D         	movff	?_vscp_getFamilyType+1,vscp_writeStdReg@code_1145+1
  9331  003A4E  C00E  F02C         	movff	?_vscp_getFamilyType,vscp_writeStdReg@code_1145
  9332                           
  9333                           ; BSR set to: 0
  9334                           ;vscp_firmware.c: 750: uint8_t idx = reg - 0x9E;
  9335  003A52  5033               	movf	vscp_writeStdReg@reg,w,c
  9336  003A54  0F62               	addlw	98
  9337  003A56  6E31               	movwf	vscp_writeStdReg@idx_1146,c
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;vscp_firmware.c: 751: rv = code >> (((3-idx)*8) & 0xff);
  9341  003A58  5031               	movf	vscp_writeStdReg@idx_1146,w,c
  9342  003A5A  0803               	sublw	3
  9343  003A5C  6E23               	movwf	??_vscp_writeStdReg& (0+255),c
  9344  003A5E  90D8               	bcf	status,0,c
  9345  003A60  3623               	rlcf	??_vscp_writeStdReg,f,c
  9346  003A62  90D8               	bcf	status,0,c
  9347  003A64  3623               	rlcf	??_vscp_writeStdReg,f,c
  9348  003A66  90D8               	bcf	status,0,c
  9349  003A68  3623               	rlcf	??_vscp_writeStdReg,f,c
  9350  003A6A  5023               	movf	??_vscp_writeStdReg,w,c
  9351  003A6C  C02C  F024         	movff	vscp_writeStdReg@code_1145,??_vscp_writeStdReg+1
  9352  003A70  C02D  F025         	movff	vscp_writeStdReg@code_1145+1,??_vscp_writeStdReg+2
  9353  003A74  C02E  F026         	movff	vscp_writeStdReg@code_1145+2,??_vscp_writeStdReg+3
  9354  003A78  C02F  F027         	movff	vscp_writeStdReg@code_1145+3,??_vscp_writeStdReg+4
  9355  003A7C  2AE8               	incf	wreg,f,c
  9356  003A7E  D005               	goto	u9710
  9357  003A80                     u9715:
  9358  003A80  90D8               	bcf	status,0,c
  9359  003A82  3227               	rrcf	??_vscp_writeStdReg+4,f,c
  9360  003A84  3226               	rrcf	??_vscp_writeStdReg+3,f,c
  9361  003A86  3225               	rrcf	??_vscp_writeStdReg+2,f,c
  9362  003A88  3224               	rrcf	??_vscp_writeStdReg+1,f,c
  9363  003A8A                     u9710:
  9364  003A8A  2EE8               	decfsz	wreg,f,c
  9365  003A8C  D7F9               	goto	u9715
  9366  003A8E                     L18:
  9367  003A8E  5024               	movf	??_vscp_writeStdReg+1,w,c
  9368  003A90  D7CE               	goto	L17
  9369  003A92                     l11408:
  9370                           
  9371                           ; BSR set to: 0
  9372                           ;vscp_firmware.c: 753: else if ( 0xA2 == reg ) {
  9373  003A92  5033               	movf	vscp_writeStdReg@reg,w,c
  9374  003A94  0AA2               	xorlw	162
  9375  003A96  E001 D774          	bnz	l11372
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;vscp_firmware.c: 754: if ( 0x55 == value ) {
  9379  003A9A  5022               	movf	vscp_writeStdReg@value,w,c
  9380  003A9C  0A55               	xorlw	85
  9381  003A9E  E105               	bnz	l11416
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;vscp_firmware.c: 755: vscp_configtimer = 0;
  9385  003AA0  0101               	movlb	1	; () banked
  9386  003AA2  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9387  003AA4  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9388                           
  9389                           ; BSR set to: 1
  9390                           ;vscp_firmware.c: 756: rv = 0x55;
  9391  003AA6  0E55               	movlw	85
  9392  003AA8  D7C2               	goto	L17
  9393  003AAA                     l11416:
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;vscp_firmware.c: 758: else if ( 0xaa == value ) {
  9397  003AAA  5022               	movf	vscp_writeStdReg@value,w,c
  9398  003AAC  0AAA               	xorlw	170
  9399  003AAE  E10B               	bnz	l11426
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;vscp_firmware.c: 759: if ( vscp_configtimer < 1000 ) {
  9403  003AB0  0EE8               	movlw	232
  9404  003AB2  0101               	movlb	1	; () banked
  9405  003AB4  5D1A               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9406  003AB6  0E03               	movlw	3
  9407  003AB8  591B               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9408  003ABA  E204               	bc	l1174
  9409                           
  9410                           ; BSR set to: 1
  9411                           ;vscp_firmware.c: 760: vscp_restoreDefaults();
  9412  003ABC  EC4A  F02C         	call	_vscp_restoreDefaults	;wreg free
  9413                           
  9414                           ; BSR set to: 1
  9415                           ;vscp_firmware.c: 761: rv = 0xaa;
  9416  003AC0  0EAA               	movlw	170
  9417  003AC2  D7B5               	goto	L17
  9418  003AC4                     l1174:
  9419                           
  9420                           ; BSR set to: 1
  9421                           ;vscp_firmware.c: 763: else {
  9422                           ;vscp_firmware.c: 764: rv = 0;
  9423  003AC4  6A32               	clrf	vscp_writeStdReg@rv,c
  9424  003AC6                     l11426:
  9425                           
  9426                           ;vscp_firmware.c: 772: }
  9427                           ;vscp_firmware.c: 774: return rv;
  9428  003AC6  5032               	movf	vscp_writeStdReg@rv,w,c
  9429  003AC8  0012               	return	
  9430  003ACA                     __end_of_vscp_writeStdReg:
  9431                           	opt stack 0
  9432                           tblptru	equ	0xFF8
  9433                           tblptrh	equ	0xFF7
  9434                           tblptrl	equ	0xFF6
  9435                           tablat	equ	0xFF5
  9436                           prodh	equ	0xFF4
  9437                           prodl	equ	0xFF3
  9438                           postinc0	equ	0xFEE
  9439                           wreg	equ	0xFE8
  9440                           postdec1	equ	0xFE5
  9441                           fsr1h	equ	0xFE2
  9442                           fsr1l	equ	0xFE1
  9443                           indf2	equ	0xFDF
  9444                           postinc2	equ	0xFDE
  9445                           postdec2	equ	0xFDD
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _vscp_restoreDefaults *****************
  9451 ;; Defined at:
  9452 ;;		line 2824 in file "../main.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;		None
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;		None
  9457 ;; Return value:  Size  Location     Type
  9458 ;;		None               void
  9459 ;; Registers used:
  9460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : F/1
  9463 ;;		On exit  : F/1
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9466 ;;      Params:         0       0       0       0       0       0       0
  9467 ;;      Locals:         0       0       0       0       0       0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0
  9469 ;;      Totals:         0       0       0       0       0       0       0
  9470 ;;Total ram usage:        0 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    5
  9473 ;; This function calls:
  9474 ;;		_init_app_eeprom
  9475 ;;		_init_app_ram
  9476 ;; This function is called by:
  9477 ;;		_vscp_writeStdReg
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481                           	psect	text37
  9482  005894                     __ptext37:
  9483                           	opt stack 0
  9484  005894                     _vscp_restoreDefaults:
  9485                           	opt stack 23
  9486                           
  9487                           ; BSR set to: 1
  9488                           ;main.c: 2825: init_app_eeprom();
  9489                           
  9490                           ;incstack = 0
  9491                           ;incstack = 0
  9492  005894  EC0C  F00F         	call	_init_app_eeprom	;wreg free
  9493                           
  9494                           ;main.c: 2826: init_app_ram();
  9495  005898  EF43  F029         	goto	_init_app_ram	;wreg free
  9496  00589C                     __end_of_vscp_restoreDefaults:
  9497                           	opt stack 0
  9498                           tblptru	equ	0xFF8
  9499                           tblptrh	equ	0xFF7
  9500                           tblptrl	equ	0xFF6
  9501                           tablat	equ	0xFF5
  9502                           prodh	equ	0xFF4
  9503                           prodl	equ	0xFF3
  9504                           postinc0	equ	0xFEE
  9505                           wreg	equ	0xFE8
  9506                           postdec1	equ	0xFE5
  9507                           fsr1h	equ	0xFE2
  9508                           fsr1l	equ	0xFE1
  9509                           indf2	equ	0xFDF
  9510                           postinc2	equ	0xFDE
  9511                           postdec2	equ	0xFDD
  9512                           fsr2h	equ	0xFDA
  9513                           fsr2l	equ	0xFD9
  9514                           status	equ	0xFD8
  9515                           
  9516 ;; *************** function _init_app_eeprom *****************
  9517 ;; Defined at:
  9518 ;;		line 1016 in file "../main.c"
  9519 ;; Parameters:    Size  Location     Type
  9520 ;;		None
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;  i               1   16[COMRAM] unsigned char 
  9523 ;; Return value:  Size  Location     Type
  9524 ;;		None               void
  9525 ;; Registers used:
  9526 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9527 ;; Tracked objects:
  9528 ;;		On entry : 0/1
  9529 ;;		On exit  : 0/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9532 ;;      Params:         0       0       0       0       0       0       0
  9533 ;;      Locals:         1       0       0       0       0       0       0
  9534 ;;      Temps:          0       0       0       0       0       0       0
  9535 ;;      Totals:         1       0       0       0       0       0       0
  9536 ;;Total ram usage:        1 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    3
  9539 ;; This function calls:
  9540 ;;		_writeEEPROM
  9541 ;; This function is called by:
  9542 ;;		_main
  9543 ;;		_vscp_restoreDefaults
  9544 ;; This function uses a non-reentrant model
  9545 ;;
  9546                           
  9547                           	psect	text38
  9548  001E18                     __ptext38:
  9549                           	opt stack 0
  9550  001E18                     _init_app_eeprom:
  9551                           	opt stack 24
  9552                           
  9553                           ;main.c: 1017: writeEEPROM(0x43, 0b00000001);
  9554                           
  9555                           ; BSR set to: 1
  9556                           ;incstack = 0
  9557                           ;incstack = 0
  9558  001E18  6A0F               	clrf	?_writeEEPROM+1,c
  9559  001E1A  0E43               	movlw	67
  9560  001E1C  6E0E               	movwf	?_writeEEPROM,c
  9561  001E1E  0E01               	movlw	1
  9562  001E20  6E10               	movwf	?_writeEEPROM+2,c
  9563  001E22  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9564                           
  9565                           ;main.c: 1018: writeEEPROM(0x44, 0b00000001);
  9566  001E26  6A0F               	clrf	?_writeEEPROM+1,c
  9567  001E28  0E44               	movlw	68
  9568  001E2A  6E0E               	movwf	?_writeEEPROM,c
  9569  001E2C  0E01               	movlw	1
  9570  001E2E  6E10               	movwf	?_writeEEPROM+2,c
  9571  001E30  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9572                           
  9573                           ;main.c: 1019: writeEEPROM(0x45, 0b00000001);
  9574  001E34  6A0F               	clrf	?_writeEEPROM+1,c
  9575  001E36  0E45               	movlw	69
  9576  001E38  6E0E               	movwf	?_writeEEPROM,c
  9577  001E3A  0E01               	movlw	1
  9578  001E3C  6E10               	movwf	?_writeEEPROM+2,c
  9579  001E3E  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9580                           
  9581                           ;main.c: 1020: writeEEPROM(0x46, 0b00000001);
  9582  001E42  6A0F               	clrf	?_writeEEPROM+1,c
  9583  001E44  0E46               	movlw	70
  9584  001E46  6E0E               	movwf	?_writeEEPROM,c
  9585  001E48  0E01               	movlw	1
  9586  001E4A  6E10               	movwf	?_writeEEPROM+2,c
  9587  001E4C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9588                           
  9589                           ;main.c: 1021: writeEEPROM(0x47, 0b00000001);
  9590  001E50  6A0F               	clrf	?_writeEEPROM+1,c
  9591  001E52  0E47               	movlw	71
  9592  001E54  6E0E               	movwf	?_writeEEPROM,c
  9593  001E56  0E01               	movlw	1
  9594  001E58  6E10               	movwf	?_writeEEPROM+2,c
  9595  001E5A  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9596                           
  9597                           ;main.c: 1022: writeEEPROM(0x48, 0b00000001);
  9598  001E5E  6A0F               	clrf	?_writeEEPROM+1,c
  9599  001E60  0E48               	movlw	72
  9600  001E62  6E0E               	movwf	?_writeEEPROM,c
  9601  001E64  0E01               	movlw	1
  9602  001E66  6E10               	movwf	?_writeEEPROM+2,c
  9603  001E68  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9604                           
  9605                           ;main.c: 1024: writeEEPROM(0x49, 30);
  9606  001E6C  6A0F               	clrf	?_writeEEPROM+1,c
  9607  001E6E  0E49               	movlw	73
  9608  001E70  6E0E               	movwf	?_writeEEPROM,c
  9609  001E72  0E1E               	movlw	30
  9610  001E74  6E10               	movwf	?_writeEEPROM+2,c
  9611  001E76  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9612                           
  9613                           ;main.c: 1025: writeEEPROM(0x4A, 0);
  9614  001E7A  6A0F               	clrf	?_writeEEPROM+1,c
  9615  001E7C  0E4A               	movlw	74
  9616  001E7E  6E0E               	movwf	?_writeEEPROM,c
  9617  001E80  0E00               	movlw	0
  9618  001E82  6A10               	clrf	?_writeEEPROM+2,c
  9619  001E84  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9620                           
  9621                           ;main.c: 1026: writeEEPROM(0x4B, 0);
  9622  001E88  6A0F               	clrf	?_writeEEPROM+1,c
  9623  001E8A  0E4B               	movlw	75
  9624  001E8C  6E0E               	movwf	?_writeEEPROM,c
  9625  001E8E  0E00               	movlw	0
  9626  001E90  6A10               	clrf	?_writeEEPROM+2,c
  9627  001E92  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9628                           
  9629                           ;main.c: 1027: writeEEPROM(0x4C, 0);
  9630  001E96  6A0F               	clrf	?_writeEEPROM+1,c
  9631  001E98  0E4C               	movlw	76
  9632  001E9A  6E0E               	movwf	?_writeEEPROM,c
  9633  001E9C  0E00               	movlw	0
  9634  001E9E  6A10               	clrf	?_writeEEPROM+2,c
  9635  001EA0  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9636                           
  9637                           ;main.c: 1028: writeEEPROM(0x4D, 0);
  9638  001EA4  6A0F               	clrf	?_writeEEPROM+1,c
  9639  001EA6  0E4D               	movlw	77
  9640  001EA8  6E0E               	movwf	?_writeEEPROM,c
  9641  001EAA  0E00               	movlw	0
  9642  001EAC  6A10               	clrf	?_writeEEPROM+2,c
  9643  001EAE  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9644                           
  9645                           ;main.c: 1029: writeEEPROM(0x4E, 0);
  9646  001EB2  6A0F               	clrf	?_writeEEPROM+1,c
  9647  001EB4  0E4E               	movlw	78
  9648  001EB6  6E0E               	movwf	?_writeEEPROM,c
  9649  001EB8  0E00               	movlw	0
  9650  001EBA  6A10               	clrf	?_writeEEPROM+2,c
  9651  001EBC  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9652                           
  9653                           ;main.c: 1033: writeEEPROM(0x4F, 0x0F);
  9654  001EC0  6A0F               	clrf	?_writeEEPROM+1,c
  9655  001EC2  0E4F               	movlw	79
  9656  001EC4  6E0E               	movwf	?_writeEEPROM,c
  9657  001EC6  0E0F               	movlw	15
  9658  001EC8  6E10               	movwf	?_writeEEPROM+2,c
  9659  001ECA  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9660                           
  9661                           ;main.c: 1034: writeEEPROM(0x50, 0x68);
  9662  001ECE  6A0F               	clrf	?_writeEEPROM+1,c
  9663  001ED0  0E50               	movlw	80
  9664  001ED2  6E0E               	movwf	?_writeEEPROM,c
  9665  001ED4  0E68               	movlw	104
  9666  001ED6  6E10               	movwf	?_writeEEPROM+2,c
  9667  001ED8  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9668                           
  9669                           ;main.c: 1036: writeEEPROM(0x51, 0x0D);
  9670  001EDC  6A0F               	clrf	?_writeEEPROM+1,c
  9671  001EDE  0E51               	movlw	81
  9672  001EE0  6E0E               	movwf	?_writeEEPROM,c
  9673  001EE2  0E0D               	movlw	13
  9674  001EE4  6E10               	movwf	?_writeEEPROM+2,c
  9675  001EE6  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9676                           
  9677                           ;main.c: 1037: writeEEPROM(0x52, 0x7F);
  9678  001EEA  6A0F               	clrf	?_writeEEPROM+1,c
  9679  001EEC  0E52               	movlw	82
  9680  001EEE  6E0E               	movwf	?_writeEEPROM,c
  9681  001EF0  0E7F               	movlw	127
  9682  001EF2  6E10               	movwf	?_writeEEPROM+2,c
  9683  001EF4  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9684                           
  9685                           ;main.c: 1039: writeEEPROM(0x53, 0x0D);
  9686  001EF8  6A0F               	clrf	?_writeEEPROM+1,c
  9687  001EFA  0E53               	movlw	83
  9688  001EFC  6E0E               	movwf	?_writeEEPROM,c
  9689  001EFE  0E0D               	movlw	13
  9690  001F00  6E10               	movwf	?_writeEEPROM+2,c
  9691  001F02  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9692                           
  9693                           ;main.c: 1040: writeEEPROM(0x54, 0x7F);
  9694  001F06  6A0F               	clrf	?_writeEEPROM+1,c
  9695  001F08  0E54               	movlw	84
  9696  001F0A  6E0E               	movwf	?_writeEEPROM,c
  9697  001F0C  0E7F               	movlw	127
  9698  001F0E  6E10               	movwf	?_writeEEPROM+2,c
  9699  001F10  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9700                           
  9701                           ;main.c: 1042: writeEEPROM(0x55, 0x0D);
  9702  001F14  6A0F               	clrf	?_writeEEPROM+1,c
  9703  001F16  0E55               	movlw	85
  9704  001F18  6E0E               	movwf	?_writeEEPROM,c
  9705  001F1A  0E0D               	movlw	13
  9706  001F1C  6E10               	movwf	?_writeEEPROM+2,c
  9707  001F1E  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9708                           
  9709                           ;main.c: 1043: writeEEPROM(0x56, 0x7F);
  9710  001F22  6A0F               	clrf	?_writeEEPROM+1,c
  9711  001F24  0E56               	movlw	86
  9712  001F26  6E0E               	movwf	?_writeEEPROM,c
  9713  001F28  0E7F               	movlw	127
  9714  001F2A  6E10               	movwf	?_writeEEPROM+2,c
  9715  001F2C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9716                           
  9717                           ;main.c: 1045: writeEEPROM(0x57, 0x0D);
  9718  001F30  6A0F               	clrf	?_writeEEPROM+1,c
  9719  001F32  0E57               	movlw	87
  9720  001F34  6E0E               	movwf	?_writeEEPROM,c
  9721  001F36  0E0D               	movlw	13
  9722  001F38  6E10               	movwf	?_writeEEPROM+2,c
  9723  001F3A  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9724                           
  9725                           ;main.c: 1046: writeEEPROM(0x58, 0x7F);
  9726  001F3E  6A0F               	clrf	?_writeEEPROM+1,c
  9727  001F40  0E58               	movlw	88
  9728  001F42  6E0E               	movwf	?_writeEEPROM,c
  9729  001F44  0E7F               	movlw	127
  9730  001F46  6E10               	movwf	?_writeEEPROM+2,c
  9731  001F48  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9732                           
  9733                           ;main.c: 1048: writeEEPROM(0x59, 0x0D);
  9734  001F4C  6A0F               	clrf	?_writeEEPROM+1,c
  9735  001F4E  0E59               	movlw	89
  9736  001F50  6E0E               	movwf	?_writeEEPROM,c
  9737  001F52  0E0D               	movlw	13
  9738  001F54  6E10               	movwf	?_writeEEPROM+2,c
  9739  001F56  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9740                           
  9741                           ;main.c: 1049: writeEEPROM(0x5A, 0x7F);
  9742  001F5A  6A0F               	clrf	?_writeEEPROM+1,c
  9743  001F5C  0E5A               	movlw	90
  9744  001F5E  6E0E               	movwf	?_writeEEPROM,c
  9745  001F60  0E7F               	movlw	127
  9746  001F62  6E10               	movwf	?_writeEEPROM+2,c
  9747  001F64  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9748                           
  9749                           ;main.c: 1053: writeEEPROM(0x5B, 0x80);
  9750  001F68  6A0F               	clrf	?_writeEEPROM+1,c
  9751  001F6A  0E5B               	movlw	91
  9752  001F6C  6E0E               	movwf	?_writeEEPROM,c
  9753  001F6E  0E80               	movlw	128
  9754  001F70  6E10               	movwf	?_writeEEPROM+2,c
  9755  001F72  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9756                           
  9757                           ;main.c: 1054: writeEEPROM(0x5C, 0xff);
  9758  001F76  6A0F               	clrf	?_writeEEPROM+1,c
  9759  001F78  0E5C               	movlw	92
  9760  001F7A  6E0E               	movwf	?_writeEEPROM,c
  9761  001F7C  0EFF               	movlw	255
  9762  001F7E  6810               	setf	?_writeEEPROM+2,c
  9763  001F80  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9764                           
  9765                           ;main.c: 1056: writeEEPROM(0x5D, 0x80);
  9766  001F84  6A0F               	clrf	?_writeEEPROM+1,c
  9767  001F86  0E5D               	movlw	93
  9768  001F88  6E0E               	movwf	?_writeEEPROM,c
  9769  001F8A  0E80               	movlw	128
  9770  001F8C  6E10               	movwf	?_writeEEPROM+2,c
  9771  001F8E  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9772                           
  9773                           ;main.c: 1057: writeEEPROM(0x5E, 0xff);
  9774  001F92  6A0F               	clrf	?_writeEEPROM+1,c
  9775  001F94  0E5E               	movlw	94
  9776  001F96  6E0E               	movwf	?_writeEEPROM,c
  9777  001F98  0EFF               	movlw	255
  9778  001F9A  6810               	setf	?_writeEEPROM+2,c
  9779  001F9C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9780                           
  9781                           ;main.c: 1059: writeEEPROM(0x5F, 0x80);
  9782  001FA0  6A0F               	clrf	?_writeEEPROM+1,c
  9783  001FA2  0E5F               	movlw	95
  9784  001FA4  6E0E               	movwf	?_writeEEPROM,c
  9785  001FA6  0E80               	movlw	128
  9786  001FA8  6E10               	movwf	?_writeEEPROM+2,c
  9787  001FAA  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9788                           
  9789                           ;main.c: 1060: writeEEPROM(0x60, 0xff);
  9790  001FAE  6A0F               	clrf	?_writeEEPROM+1,c
  9791  001FB0  0E60               	movlw	96
  9792  001FB2  6E0E               	movwf	?_writeEEPROM,c
  9793  001FB4  0EFF               	movlw	255
  9794  001FB6  6810               	setf	?_writeEEPROM+2,c
  9795  001FB8  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9796                           
  9797                           ;main.c: 1062: writeEEPROM(0x61, 0x80);
  9798  001FBC  6A0F               	clrf	?_writeEEPROM+1,c
  9799  001FBE  0E61               	movlw	97
  9800  001FC0  6E0E               	movwf	?_writeEEPROM,c
  9801  001FC2  0E80               	movlw	128
  9802  001FC4  6E10               	movwf	?_writeEEPROM+2,c
  9803  001FC6  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9804                           
  9805                           ;main.c: 1063: writeEEPROM(0x62, 0xff);
  9806  001FCA  6A0F               	clrf	?_writeEEPROM+1,c
  9807  001FCC  0E62               	movlw	98
  9808  001FCE  6E0E               	movwf	?_writeEEPROM,c
  9809  001FD0  0EFF               	movlw	255
  9810  001FD2  6810               	setf	?_writeEEPROM+2,c
  9811  001FD4  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9812                           
  9813                           ;main.c: 1065: writeEEPROM(0x63, 0x80);
  9814  001FD8  6A0F               	clrf	?_writeEEPROM+1,c
  9815  001FDA  0E63               	movlw	99
  9816  001FDC  6E0E               	movwf	?_writeEEPROM,c
  9817  001FDE  0E80               	movlw	128
  9818  001FE0  6E10               	movwf	?_writeEEPROM+2,c
  9819  001FE2  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9820                           
  9821                           ;main.c: 1066: writeEEPROM(0x64, 0xff);
  9822  001FE6  6A0F               	clrf	?_writeEEPROM+1,c
  9823  001FE8  0E64               	movlw	100
  9824  001FEA  6E0E               	movwf	?_writeEEPROM,c
  9825  001FEC  0EFF               	movlw	255
  9826  001FEE  6810               	setf	?_writeEEPROM+2,c
  9827  001FF0  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9828                           
  9829                           ;main.c: 1068: writeEEPROM(0x65, 0x80);
  9830  001FF4  6A0F               	clrf	?_writeEEPROM+1,c
  9831  001FF6  0E65               	movlw	101
  9832  001FF8  6E0E               	movwf	?_writeEEPROM,c
  9833  001FFA  0E80               	movlw	128
  9834  001FFC  6E10               	movwf	?_writeEEPROM+2,c
  9835  001FFE  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9836                           
  9837                           ;main.c: 1069: writeEEPROM(0x66, 0xff);
  9838  002002  6A0F               	clrf	?_writeEEPROM+1,c
  9839  002004  0E66               	movlw	102
  9840  002006  6E0E               	movwf	?_writeEEPROM,c
  9841  002008  0EFF               	movlw	255
  9842  00200A  6810               	setf	?_writeEEPROM+2,c
  9843  00200C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9844                           
  9845                           ;main.c: 1073: writeEEPROM(0x67, 0x7f);
  9846  002010  6A0F               	clrf	?_writeEEPROM+1,c
  9847  002012  0E67               	movlw	103
  9848  002014  6E0E               	movwf	?_writeEEPROM,c
  9849  002016  0E7F               	movlw	127
  9850  002018  6E10               	movwf	?_writeEEPROM+2,c
  9851  00201A  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9852                           
  9853                           ;main.c: 1074: writeEEPROM(0x68, 0xff);
  9854  00201E  6A0F               	clrf	?_writeEEPROM+1,c
  9855  002020  0E68               	movlw	104
  9856  002022  6E0E               	movwf	?_writeEEPROM,c
  9857  002024  0EFF               	movlw	255
  9858  002026  6810               	setf	?_writeEEPROM+2,c
  9859  002028  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9860                           
  9861                           ;main.c: 1076: writeEEPROM(0x69, 0x7f);
  9862  00202C  6A0F               	clrf	?_writeEEPROM+1,c
  9863  00202E  0E69               	movlw	105
  9864  002030  6E0E               	movwf	?_writeEEPROM,c
  9865  002032  0E7F               	movlw	127
  9866  002034  6E10               	movwf	?_writeEEPROM+2,c
  9867  002036  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9868                           
  9869                           ;main.c: 1077: writeEEPROM(0x6A, 0xff);
  9870  00203A  6A0F               	clrf	?_writeEEPROM+1,c
  9871  00203C  0E6A               	movlw	106
  9872  00203E  6E0E               	movwf	?_writeEEPROM,c
  9873  002040  0EFF               	movlw	255
  9874  002042  6810               	setf	?_writeEEPROM+2,c
  9875  002044  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9876                           
  9877                           ;main.c: 1079: writeEEPROM(0x6B, 0x7f);
  9878  002048  6A0F               	clrf	?_writeEEPROM+1,c
  9879  00204A  0E6B               	movlw	107
  9880  00204C  6E0E               	movwf	?_writeEEPROM,c
  9881  00204E  0E7F               	movlw	127
  9882  002050  6E10               	movwf	?_writeEEPROM+2,c
  9883  002052  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9884                           
  9885                           ;main.c: 1080: writeEEPROM(0x6C, 0xff);
  9886  002056  6A0F               	clrf	?_writeEEPROM+1,c
  9887  002058  0E6C               	movlw	108
  9888  00205A  6E0E               	movwf	?_writeEEPROM,c
  9889  00205C  0EFF               	movlw	255
  9890  00205E  6810               	setf	?_writeEEPROM+2,c
  9891  002060  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9892                           
  9893                           ;main.c: 1082: writeEEPROM(0x6D, 0x7f);
  9894  002064  6A0F               	clrf	?_writeEEPROM+1,c
  9895  002066  0E6D               	movlw	109
  9896  002068  6E0E               	movwf	?_writeEEPROM,c
  9897  00206A  0E7F               	movlw	127
  9898  00206C  6E10               	movwf	?_writeEEPROM+2,c
  9899  00206E  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9900                           
  9901                           ;main.c: 1083: writeEEPROM(0x6E, 0xff);
  9902  002072  6A0F               	clrf	?_writeEEPROM+1,c
  9903  002074  0E6E               	movlw	110
  9904  002076  6E0E               	movwf	?_writeEEPROM,c
  9905  002078  0EFF               	movlw	255
  9906  00207A  6810               	setf	?_writeEEPROM+2,c
  9907  00207C  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9908                           
  9909                           ;main.c: 1085: writeEEPROM(0x6F, 0x7f);
  9910  002080  6A0F               	clrf	?_writeEEPROM+1,c
  9911  002082  0E6F               	movlw	111
  9912  002084  6E0E               	movwf	?_writeEEPROM,c
  9913  002086  0E7F               	movlw	127
  9914  002088  6E10               	movwf	?_writeEEPROM+2,c
  9915  00208A  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9916                           
  9917                           ;main.c: 1086: writeEEPROM(0x70, 0xff);
  9918  00208E  6A0F               	clrf	?_writeEEPROM+1,c
  9919  002090  0E70               	movlw	112
  9920  002092  6E0E               	movwf	?_writeEEPROM,c
  9921  002094  0EFF               	movlw	255
  9922  002096  6810               	setf	?_writeEEPROM+2,c
  9923  002098  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9924                           
  9925                           ;main.c: 1088: writeEEPROM(0x71, 0x7f);
  9926  00209C  6A0F               	clrf	?_writeEEPROM+1,c
  9927  00209E  0E71               	movlw	113
  9928  0020A0  6E0E               	movwf	?_writeEEPROM,c
  9929  0020A2  0E7F               	movlw	127
  9930  0020A4  6E10               	movwf	?_writeEEPROM+2,c
  9931  0020A6  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9932                           
  9933                           ;main.c: 1089: writeEEPROM(0x72, 0xff);
  9934  0020AA  6A0F               	clrf	?_writeEEPROM+1,c
  9935  0020AC  0E72               	movlw	114
  9936  0020AE  6E0E               	movwf	?_writeEEPROM,c
  9937  0020B0  0EFF               	movlw	255
  9938  0020B2  6810               	setf	?_writeEEPROM+2,c
  9939  0020B4  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9940                           
  9941                           ;main.c: 1093: writeEEPROM(0x73, 0);
  9942  0020B8  6A0F               	clrf	?_writeEEPROM+1,c
  9943  0020BA  0E73               	movlw	115
  9944  0020BC  6E0E               	movwf	?_writeEEPROM,c
  9945  0020BE  0E00               	movlw	0
  9946  0020C0  6A10               	clrf	?_writeEEPROM+2,c
  9947  0020C2  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9948                           
  9949                           ;main.c: 1094: writeEEPROM(0x74, 0);
  9950  0020C6  6A0F               	clrf	?_writeEEPROM+1,c
  9951  0020C8  0E74               	movlw	116
  9952  0020CA  6E0E               	movwf	?_writeEEPROM,c
  9953  0020CC  0E00               	movlw	0
  9954  0020CE  6A10               	clrf	?_writeEEPROM+2,c
  9955  0020D0  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9956                           
  9957                           ;main.c: 1096: writeEEPROM(0x75, 0);
  9958  0020D4  6A0F               	clrf	?_writeEEPROM+1,c
  9959  0020D6  0E75               	movlw	117
  9960  0020D8  6E0E               	movwf	?_writeEEPROM,c
  9961  0020DA  0E00               	movlw	0
  9962  0020DC  6A10               	clrf	?_writeEEPROM+2,c
  9963  0020DE  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9964                           
  9965                           ;main.c: 1097: writeEEPROM(0x76, 0);
  9966  0020E2  6A0F               	clrf	?_writeEEPROM+1,c
  9967  0020E4  0E76               	movlw	118
  9968  0020E6  6E0E               	movwf	?_writeEEPROM,c
  9969  0020E8  0E00               	movlw	0
  9970  0020EA  6A10               	clrf	?_writeEEPROM+2,c
  9971  0020EC  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9972                           
  9973                           ;main.c: 1099: writeEEPROM(0x77, 0);
  9974  0020F0  6A0F               	clrf	?_writeEEPROM+1,c
  9975  0020F2  0E77               	movlw	119
  9976  0020F4  6E0E               	movwf	?_writeEEPROM,c
  9977  0020F6  0E00               	movlw	0
  9978  0020F8  6A10               	clrf	?_writeEEPROM+2,c
  9979  0020FA  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9980                           
  9981                           ;main.c: 1100: writeEEPROM(0x78, 0);
  9982  0020FE  6A0F               	clrf	?_writeEEPROM+1,c
  9983  002100  0E78               	movlw	120
  9984  002102  6E0E               	movwf	?_writeEEPROM,c
  9985  002104  0E00               	movlw	0
  9986  002106  6A10               	clrf	?_writeEEPROM+2,c
  9987  002108  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9988                           
  9989                           ;main.c: 1102: writeEEPROM(0x79, 0);
  9990  00210C  6A0F               	clrf	?_writeEEPROM+1,c
  9991  00210E  0E79               	movlw	121
  9992  002110  6E0E               	movwf	?_writeEEPROM,c
  9993  002112  0E00               	movlw	0
  9994  002114  6A10               	clrf	?_writeEEPROM+2,c
  9995  002116  ECFD  F02A         	call	_writeEEPROM	;wreg free
  9996                           
  9997                           ;main.c: 1103: writeEEPROM(0x7A, 0);
  9998  00211A  6A0F               	clrf	?_writeEEPROM+1,c
  9999  00211C  0E7A               	movlw	122
 10000  00211E  6E0E               	movwf	?_writeEEPROM,c
 10001  002120  0E00               	movlw	0
 10002  002122  6A10               	clrf	?_writeEEPROM+2,c
 10003  002124  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10004                           
 10005                           ;main.c: 1105: writeEEPROM(0x7B, 0);
 10006  002128  6A0F               	clrf	?_writeEEPROM+1,c
 10007  00212A  0E7B               	movlw	123
 10008  00212C  6E0E               	movwf	?_writeEEPROM,c
 10009  00212E  0E00               	movlw	0
 10010  002130  6A10               	clrf	?_writeEEPROM+2,c
 10011  002132  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10012                           
 10013                           ;main.c: 1106: writeEEPROM(0x7C, 0);
 10014  002136  6A0F               	clrf	?_writeEEPROM+1,c
 10015  002138  0E7C               	movlw	124
 10016  00213A  6E0E               	movwf	?_writeEEPROM,c
 10017  00213C  0E00               	movlw	0
 10018  00213E  6A10               	clrf	?_writeEEPROM+2,c
 10019  002140  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10020                           
 10021                           ;main.c: 1108: writeEEPROM(0x7D, 0);
 10022  002144  6A0F               	clrf	?_writeEEPROM+1,c
 10023  002146  0E7D               	movlw	125
 10024  002148  6E0E               	movwf	?_writeEEPROM,c
 10025  00214A  0E00               	movlw	0
 10026  00214C  6A10               	clrf	?_writeEEPROM+2,c
 10027  00214E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10028                           
 10029                           ;main.c: 1109: writeEEPROM(0x7E, 0);
 10030  002152  6A0F               	clrf	?_writeEEPROM+1,c
 10031  002154  0E7E               	movlw	126
 10032  002156  6E0E               	movwf	?_writeEEPROM,c
 10033  002158  0E00               	movlw	0
 10034  00215A  6A10               	clrf	?_writeEEPROM+2,c
 10035  00215C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10036                           
 10037                           ;main.c: 1113: writeEEPROM(0x7F, 0x7f);
 10038  002160  6A0F               	clrf	?_writeEEPROM+1,c
 10039  002162  0E7F               	movlw	127
 10040  002164  6E0E               	movwf	?_writeEEPROM,c
 10041  002166  6E10               	movwf	?_writeEEPROM+2,c
 10042  002168  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10043                           
 10044                           ;main.c: 1114: writeEEPROM(0x80, 0xff);
 10045  00216C  6A0F               	clrf	?_writeEEPROM+1,c
 10046  00216E  0E80               	movlw	128
 10047  002170  6E0E               	movwf	?_writeEEPROM,c
 10048  002172  0EFF               	movlw	255
 10049  002174  6810               	setf	?_writeEEPROM+2,c
 10050  002176  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10051                           
 10052                           ;main.c: 1116: writeEEPROM(0x81, 0x7f);
 10053  00217A  6A0F               	clrf	?_writeEEPROM+1,c
 10054  00217C  0E81               	movlw	129
 10055  00217E  6E0E               	movwf	?_writeEEPROM,c
 10056  002180  0E7F               	movlw	127
 10057  002182  6E10               	movwf	?_writeEEPROM+2,c
 10058  002184  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10059                           
 10060                           ;main.c: 1117: writeEEPROM(0x82, 0xff);
 10061  002188  6A0F               	clrf	?_writeEEPROM+1,c
 10062  00218A  0E82               	movlw	130
 10063  00218C  6E0E               	movwf	?_writeEEPROM,c
 10064  00218E  0EFF               	movlw	255
 10065  002190  6810               	setf	?_writeEEPROM+2,c
 10066  002192  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10067                           
 10068                           ;main.c: 1119: writeEEPROM(0x83, 0x7f);
 10069  002196  6A0F               	clrf	?_writeEEPROM+1,c
 10070  002198  0E83               	movlw	131
 10071  00219A  6E0E               	movwf	?_writeEEPROM,c
 10072  00219C  0E7F               	movlw	127
 10073  00219E  6E10               	movwf	?_writeEEPROM+2,c
 10074  0021A0  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10075                           
 10076                           ;main.c: 1120: writeEEPROM(0x84, 0xff);
 10077  0021A4  6A0F               	clrf	?_writeEEPROM+1,c
 10078  0021A6  0E84               	movlw	132
 10079  0021A8  6E0E               	movwf	?_writeEEPROM,c
 10080  0021AA  0EFF               	movlw	255
 10081  0021AC  6810               	setf	?_writeEEPROM+2,c
 10082  0021AE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10083                           
 10084                           ;main.c: 1122: writeEEPROM(0x85, 0x7f);
 10085  0021B2  6A0F               	clrf	?_writeEEPROM+1,c
 10086  0021B4  0E85               	movlw	133
 10087  0021B6  6E0E               	movwf	?_writeEEPROM,c
 10088  0021B8  0E7F               	movlw	127
 10089  0021BA  6E10               	movwf	?_writeEEPROM+2,c
 10090  0021BC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10091                           
 10092                           ;main.c: 1123: writeEEPROM(0x86, 0xff);
 10093  0021C0  6A0F               	clrf	?_writeEEPROM+1,c
 10094  0021C2  0E86               	movlw	134
 10095  0021C4  6E0E               	movwf	?_writeEEPROM,c
 10096  0021C6  0EFF               	movlw	255
 10097  0021C8  6810               	setf	?_writeEEPROM+2,c
 10098  0021CA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10099                           
 10100                           ;main.c: 1125: writeEEPROM(0x87, 0x7f);
 10101  0021CE  6A0F               	clrf	?_writeEEPROM+1,c
 10102  0021D0  0E87               	movlw	135
 10103  0021D2  6E0E               	movwf	?_writeEEPROM,c
 10104  0021D4  0E7F               	movlw	127
 10105  0021D6  6E10               	movwf	?_writeEEPROM+2,c
 10106  0021D8  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10107                           
 10108                           ;main.c: 1126: writeEEPROM(0x88, 0xff);
 10109  0021DC  6A0F               	clrf	?_writeEEPROM+1,c
 10110  0021DE  0E88               	movlw	136
 10111  0021E0  6E0E               	movwf	?_writeEEPROM,c
 10112  0021E2  0EFF               	movlw	255
 10113  0021E4  6810               	setf	?_writeEEPROM+2,c
 10114  0021E6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10115                           
 10116                           ;main.c: 1128: writeEEPROM(0x89, 0x7f);
 10117  0021EA  6A0F               	clrf	?_writeEEPROM+1,c
 10118  0021EC  0E89               	movlw	137
 10119  0021EE  6E0E               	movwf	?_writeEEPROM,c
 10120  0021F0  0E7F               	movlw	127
 10121  0021F2  6E10               	movwf	?_writeEEPROM+2,c
 10122  0021F4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10123                           
 10124                           ;main.c: 1129: writeEEPROM(0x8A, 0xff);
 10125  0021F8  6A0F               	clrf	?_writeEEPROM+1,c
 10126  0021FA  0E8A               	movlw	138
 10127  0021FC  6E0E               	movwf	?_writeEEPROM,c
 10128  0021FE  0EFF               	movlw	255
 10129  002200  6810               	setf	?_writeEEPROM+2,c
 10130  002202  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10131                           
 10132                           ;main.c: 1133: writeEEPROM(0x8B, 0x80);
 10133  002206  6A0F               	clrf	?_writeEEPROM+1,c
 10134  002208  0E8B               	movlw	139
 10135  00220A  6E0E               	movwf	?_writeEEPROM,c
 10136  00220C  0E80               	movlw	128
 10137  00220E  6E10               	movwf	?_writeEEPROM+2,c
 10138  002210  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10139                           
 10140                           ;main.c: 1134: writeEEPROM(0x8C, 0x00);
 10141  002214  6A0F               	clrf	?_writeEEPROM+1,c
 10142  002216  0E8C               	movlw	140
 10143  002218  6E0E               	movwf	?_writeEEPROM,c
 10144  00221A  0E00               	movlw	0
 10145  00221C  6A10               	clrf	?_writeEEPROM+2,c
 10146  00221E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10147                           
 10148                           ;main.c: 1136: writeEEPROM(0x8D, 0x80);
 10149  002222  6A0F               	clrf	?_writeEEPROM+1,c
 10150  002224  0E8D               	movlw	141
 10151  002226  6E0E               	movwf	?_writeEEPROM,c
 10152  002228  0E80               	movlw	128
 10153  00222A  6E10               	movwf	?_writeEEPROM+2,c
 10154  00222C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10155                           
 10156                           ;main.c: 1137: writeEEPROM(0x8E, 0x00);
 10157  002230  6A0F               	clrf	?_writeEEPROM+1,c
 10158  002232  0E8E               	movlw	142
 10159  002234  6E0E               	movwf	?_writeEEPROM,c
 10160  002236  0E00               	movlw	0
 10161  002238  6A10               	clrf	?_writeEEPROM+2,c
 10162  00223A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10163                           
 10164                           ;main.c: 1139: writeEEPROM(0x8F, 0x80);
 10165  00223E  6A0F               	clrf	?_writeEEPROM+1,c
 10166  002240  0E8F               	movlw	143
 10167  002242  6E0E               	movwf	?_writeEEPROM,c
 10168  002244  0E80               	movlw	128
 10169  002246  6E10               	movwf	?_writeEEPROM+2,c
 10170  002248  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10171                           
 10172                           ;main.c: 1140: writeEEPROM(0x90, 0x00);
 10173  00224C  6A0F               	clrf	?_writeEEPROM+1,c
 10174  00224E  0E90               	movlw	144
 10175  002250  6E0E               	movwf	?_writeEEPROM,c
 10176  002252  0E00               	movlw	0
 10177  002254  6A10               	clrf	?_writeEEPROM+2,c
 10178  002256  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10179                           
 10180                           ;main.c: 1142: writeEEPROM(0x91, 0x80);
 10181  00225A  6A0F               	clrf	?_writeEEPROM+1,c
 10182  00225C  0E91               	movlw	145
 10183  00225E  6E0E               	movwf	?_writeEEPROM,c
 10184  002260  0E80               	movlw	128
 10185  002262  6E10               	movwf	?_writeEEPROM+2,c
 10186  002264  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10187                           
 10188                           ;main.c: 1143: writeEEPROM(0x92, 0x00);
 10189  002268  6A0F               	clrf	?_writeEEPROM+1,c
 10190  00226A  0E92               	movlw	146
 10191  00226C  6E0E               	movwf	?_writeEEPROM,c
 10192  00226E  0E00               	movlw	0
 10193  002270  6A10               	clrf	?_writeEEPROM+2,c
 10194  002272  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10195                           
 10196                           ;main.c: 1145: writeEEPROM(0x93, 0x80);
 10197  002276  6A0F               	clrf	?_writeEEPROM+1,c
 10198  002278  0E93               	movlw	147
 10199  00227A  6E0E               	movwf	?_writeEEPROM,c
 10200  00227C  0E80               	movlw	128
 10201  00227E  6E10               	movwf	?_writeEEPROM+2,c
 10202  002280  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10203                           
 10204                           ;main.c: 1146: writeEEPROM(0x94, 0x00);
 10205  002284  6A0F               	clrf	?_writeEEPROM+1,c
 10206  002286  0E94               	movlw	148
 10207  002288  6E0E               	movwf	?_writeEEPROM,c
 10208  00228A  0E00               	movlw	0
 10209  00228C  6A10               	clrf	?_writeEEPROM+2,c
 10210  00228E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10211                           
 10212                           ;main.c: 1148: writeEEPROM(0x95, 0x80);
 10213  002292  6A0F               	clrf	?_writeEEPROM+1,c
 10214  002294  0E95               	movlw	149
 10215  002296  6E0E               	movwf	?_writeEEPROM,c
 10216  002298  0E80               	movlw	128
 10217  00229A  6E10               	movwf	?_writeEEPROM+2,c
 10218  00229C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10219                           
 10220                           ;main.c: 1149: writeEEPROM(0x96, 0x00);
 10221  0022A0  6A0F               	clrf	?_writeEEPROM+1,c
 10222  0022A2  0E96               	movlw	150
 10223  0022A4  6E0E               	movwf	?_writeEEPROM,c
 10224  0022A6  0E00               	movlw	0
 10225  0022A8  6A10               	clrf	?_writeEEPROM+2,c
 10226  0022AA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10227                           
 10228                           ;main.c: 1153: writeEEPROM(0x97, 2);
 10229  0022AE  6A0F               	clrf	?_writeEEPROM+1,c
 10230  0022B0  0E97               	movlw	151
 10231  0022B2  6E0E               	movwf	?_writeEEPROM,c
 10232  0022B4  0E02               	movlw	2
 10233  0022B6  6E10               	movwf	?_writeEEPROM+2,c
 10234  0022B8  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10235                           
 10236                           ;main.c: 1154: writeEEPROM(0x98, 2);
 10237  0022BC  6A0F               	clrf	?_writeEEPROM+1,c
 10238  0022BE  0E98               	movlw	152
 10239  0022C0  6E0E               	movwf	?_writeEEPROM,c
 10240  0022C2  0E02               	movlw	2
 10241  0022C4  6E10               	movwf	?_writeEEPROM+2,c
 10242  0022C6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10243                           
 10244                           ;main.c: 1155: writeEEPROM(0x99, 2);
 10245  0022CA  6A0F               	clrf	?_writeEEPROM+1,c
 10246  0022CC  0E99               	movlw	153
 10247  0022CE  6E0E               	movwf	?_writeEEPROM,c
 10248  0022D0  0E02               	movlw	2
 10249  0022D2  6E10               	movwf	?_writeEEPROM+2,c
 10250  0022D4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10251                           
 10252                           ;main.c: 1156: writeEEPROM(0x9A, 2);
 10253  0022D8  6A0F               	clrf	?_writeEEPROM+1,c
 10254  0022DA  0E9A               	movlw	154
 10255  0022DC  6E0E               	movwf	?_writeEEPROM,c
 10256  0022DE  0E02               	movlw	2
 10257  0022E0  6E10               	movwf	?_writeEEPROM+2,c
 10258  0022E2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10259                           
 10260                           ;main.c: 1157: writeEEPROM(0x9B, 2);
 10261  0022E6  6A0F               	clrf	?_writeEEPROM+1,c
 10262  0022E8  0E9B               	movlw	155
 10263  0022EA  6E0E               	movwf	?_writeEEPROM,c
 10264  0022EC  0E02               	movlw	2
 10265  0022EE  6E10               	movwf	?_writeEEPROM+2,c
 10266  0022F0  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10267                           
 10268                           ;main.c: 1158: writeEEPROM(0x9C, 2);
 10269  0022F4  6A0F               	clrf	?_writeEEPROM+1,c
 10270  0022F6  0E9C               	movlw	156
 10271  0022F8  6E0E               	movwf	?_writeEEPROM,c
 10272  0022FA  0E02               	movlw	2
 10273  0022FC  6E10               	movwf	?_writeEEPROM+2,c
 10274  0022FE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10275                           
 10276                           ;main.c: 1162: writeEEPROM(0xF2, 0xc3);
 10277  002302  6A0F               	clrf	?_writeEEPROM+1,c
 10278  002304  0EF2               	movlw	242
 10279  002306  6E0E               	movwf	?_writeEEPROM,c
 10280  002308  0EC3               	movlw	195
 10281  00230A  6E10               	movwf	?_writeEEPROM+2,c
 10282  00230C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10283                           
 10284                           ;main.c: 1163: writeEEPROM(0xF3, 0x50);
 10285  002310  6A0F               	clrf	?_writeEEPROM+1,c
 10286  002312  0EF3               	movlw	243
 10287  002314  6E0E               	movwf	?_writeEEPROM,c
 10288  002316  0E50               	movlw	80
 10289  002318  6E10               	movwf	?_writeEEPROM+2,c
 10290  00231A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10291                           
 10292                           ;main.c: 1167: writeEEPROM(0x9E, 0);
 10293  00231E  6A0F               	clrf	?_writeEEPROM+1,c
 10294  002320  0E9E               	movlw	158
 10295  002322  6E0E               	movwf	?_writeEEPROM,c
 10296  002324  0E00               	movlw	0
 10297  002326  6A10               	clrf	?_writeEEPROM+2,c
 10298  002328  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10299                           
 10300                           ;main.c: 1168: writeEEPROM(0x9F, 0);
 10301  00232C  6A0F               	clrf	?_writeEEPROM+1,c
 10302  00232E  0E9F               	movlw	159
 10303  002330  6E0E               	movwf	?_writeEEPROM,c
 10304  002332  0E00               	movlw	0
 10305  002334  6A10               	clrf	?_writeEEPROM+2,c
 10306  002336  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10307                           
 10308                           ;main.c: 1169: writeEEPROM(0xA0, 0);
 10309  00233A  6A0F               	clrf	?_writeEEPROM+1,c
 10310  00233C  0EA0               	movlw	160
 10311  00233E  6E0E               	movwf	?_writeEEPROM,c
 10312  002340  0E00               	movlw	0
 10313  002342  6A10               	clrf	?_writeEEPROM+2,c
 10314  002344  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10315                           
 10316                           ;main.c: 1170: writeEEPROM(0xA1, 0);
 10317  002348  6A0F               	clrf	?_writeEEPROM+1,c
 10318  00234A  0EA1               	movlw	161
 10319  00234C  6E0E               	movwf	?_writeEEPROM,c
 10320  00234E  0E00               	movlw	0
 10321  002350  6A10               	clrf	?_writeEEPROM+2,c
 10322  002352  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10323                           
 10324                           ;main.c: 1171: writeEEPROM(0xA2, 0);
 10325  002356  6A0F               	clrf	?_writeEEPROM+1,c
 10326  002358  0EA2               	movlw	162
 10327  00235A  6E0E               	movwf	?_writeEEPROM,c
 10328  00235C  0E00               	movlw	0
 10329  00235E  6A10               	clrf	?_writeEEPROM+2,c
 10330  002360  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10331                           
 10332                           ;main.c: 1172: writeEEPROM(0xA3, 0);
 10333  002364  6A0F               	clrf	?_writeEEPROM+1,c
 10334  002366  0EA3               	movlw	163
 10335  002368  6E0E               	movwf	?_writeEEPROM,c
 10336  00236A  0E00               	movlw	0
 10337  00236C  6A10               	clrf	?_writeEEPROM+2,c
 10338  00236E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10339                           
 10340                           ;main.c: 1173: writeEEPROM(0xA4, 0);
 10341  002372  6A0F               	clrf	?_writeEEPROM+1,c
 10342  002374  0EA4               	movlw	164
 10343  002376  6E0E               	movwf	?_writeEEPROM,c
 10344  002378  0E00               	movlw	0
 10345  00237A  6A10               	clrf	?_writeEEPROM+2,c
 10346  00237C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10347                           
 10348                           ;main.c: 1174: writeEEPROM(0xA5, 0);
 10349  002380  6A0F               	clrf	?_writeEEPROM+1,c
 10350  002382  0EA5               	movlw	165
 10351  002384  6E0E               	movwf	?_writeEEPROM,c
 10352  002386  0E00               	movlw	0
 10353  002388  6A10               	clrf	?_writeEEPROM+2,c
 10354  00238A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10355                           
 10356                           ;main.c: 1175: writeEEPROM(0xA6, 0);
 10357  00238E  6A0F               	clrf	?_writeEEPROM+1,c
 10358  002390  0EA6               	movlw	166
 10359  002392  6E0E               	movwf	?_writeEEPROM,c
 10360  002394  0E00               	movlw	0
 10361  002396  6A10               	clrf	?_writeEEPROM+2,c
 10362  002398  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10363                           
 10364                           ;main.c: 1176: writeEEPROM(0xA7, 0);
 10365  00239C  6A0F               	clrf	?_writeEEPROM+1,c
 10366  00239E  0EA7               	movlw	167
 10367  0023A0  6E0E               	movwf	?_writeEEPROM,c
 10368  0023A2  0E00               	movlw	0
 10369  0023A4  6A10               	clrf	?_writeEEPROM+2,c
 10370  0023A6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10371                           
 10372                           ;main.c: 1177: writeEEPROM(0xA8, 0);
 10373  0023AA  6A0F               	clrf	?_writeEEPROM+1,c
 10374  0023AC  0EA8               	movlw	168
 10375  0023AE  6E0E               	movwf	?_writeEEPROM,c
 10376  0023B0  0E00               	movlw	0
 10377  0023B2  6A10               	clrf	?_writeEEPROM+2,c
 10378  0023B4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10379                           
 10380                           ;main.c: 1178: writeEEPROM(0xA9, 0);
 10381  0023B8  6A0F               	clrf	?_writeEEPROM+1,c
 10382  0023BA  0EA9               	movlw	169
 10383  0023BC  6E0E               	movwf	?_writeEEPROM,c
 10384  0023BE  0E00               	movlw	0
 10385  0023C0  6A10               	clrf	?_writeEEPROM+2,c
 10386  0023C2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10387                           
 10388                           ;main.c: 1182: writeEEPROM(0xAA, 0);
 10389  0023C6  6A0F               	clrf	?_writeEEPROM+1,c
 10390  0023C8  0EAA               	movlw	170
 10391  0023CA  6E0E               	movwf	?_writeEEPROM,c
 10392  0023CC  0E00               	movlw	0
 10393  0023CE  6A10               	clrf	?_writeEEPROM+2,c
 10394  0023D0  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10395                           
 10396                           ;main.c: 1183: writeEEPROM(0xAB, 0);
 10397  0023D4  6A0F               	clrf	?_writeEEPROM+1,c
 10398  0023D6  0EAB               	movlw	171
 10399  0023D8  6E0E               	movwf	?_writeEEPROM,c
 10400  0023DA  0E00               	movlw	0
 10401  0023DC  6A10               	clrf	?_writeEEPROM+2,c
 10402  0023DE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10403                           
 10404                           ;main.c: 1184: writeEEPROM(0xAC, 0);
 10405  0023E2  6A0F               	clrf	?_writeEEPROM+1,c
 10406  0023E4  0EAC               	movlw	172
 10407  0023E6  6E0E               	movwf	?_writeEEPROM,c
 10408  0023E8  0E00               	movlw	0
 10409  0023EA  6A10               	clrf	?_writeEEPROM+2,c
 10410  0023EC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10411                           
 10412                           ;main.c: 1185: writeEEPROM(0xAD, 0);
 10413  0023F0  6A0F               	clrf	?_writeEEPROM+1,c
 10414  0023F2  0EAD               	movlw	173
 10415  0023F4  6E0E               	movwf	?_writeEEPROM,c
 10416  0023F6  0E00               	movlw	0
 10417  0023F8  6A10               	clrf	?_writeEEPROM+2,c
 10418  0023FA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10419                           
 10420                           ;main.c: 1186: writeEEPROM(0xAE, 0);
 10421  0023FE  6A0F               	clrf	?_writeEEPROM+1,c
 10422  002400  0EAE               	movlw	174
 10423  002402  6E0E               	movwf	?_writeEEPROM,c
 10424  002404  0E00               	movlw	0
 10425  002406  6A10               	clrf	?_writeEEPROM+2,c
 10426  002408  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10427                           
 10428                           ;main.c: 1187: writeEEPROM(0xAF, 0);
 10429  00240C  6A0F               	clrf	?_writeEEPROM+1,c
 10430  00240E  0EAF               	movlw	175
 10431  002410  6E0E               	movwf	?_writeEEPROM,c
 10432  002412  0E00               	movlw	0
 10433  002414  6A10               	clrf	?_writeEEPROM+2,c
 10434  002416  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10435                           
 10436                           ;main.c: 1188: writeEEPROM(0xB0, 0);
 10437  00241A  6A0F               	clrf	?_writeEEPROM+1,c
 10438  00241C  0EB0               	movlw	176
 10439  00241E  6E0E               	movwf	?_writeEEPROM,c
 10440  002420  0E00               	movlw	0
 10441  002422  6A10               	clrf	?_writeEEPROM+2,c
 10442  002424  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10443                           
 10444                           ;main.c: 1189: writeEEPROM(0xB1, 0);
 10445  002428  6A0F               	clrf	?_writeEEPROM+1,c
 10446  00242A  0EB1               	movlw	177
 10447  00242C  6E0E               	movwf	?_writeEEPROM,c
 10448  00242E  0E00               	movlw	0
 10449  002430  6A10               	clrf	?_writeEEPROM+2,c
 10450  002432  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10451                           
 10452                           ;main.c: 1190: writeEEPROM(0xB2, 0);
 10453  002436  6A0F               	clrf	?_writeEEPROM+1,c
 10454  002438  0EB2               	movlw	178
 10455  00243A  6E0E               	movwf	?_writeEEPROM,c
 10456  00243C  0E00               	movlw	0
 10457  00243E  6A10               	clrf	?_writeEEPROM+2,c
 10458  002440  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10459                           
 10460                           ;main.c: 1191: writeEEPROM(0xB3, 0);
 10461  002444  6A0F               	clrf	?_writeEEPROM+1,c
 10462  002446  0EB3               	movlw	179
 10463  002448  6E0E               	movwf	?_writeEEPROM,c
 10464  00244A  0E00               	movlw	0
 10465  00244C  6A10               	clrf	?_writeEEPROM+2,c
 10466  00244E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10467                           
 10468                           ;main.c: 1192: writeEEPROM(0xB4, 0);
 10469  002452  6A0F               	clrf	?_writeEEPROM+1,c
 10470  002454  0EB4               	movlw	180
 10471  002456  6E0E               	movwf	?_writeEEPROM,c
 10472  002458  0E00               	movlw	0
 10473  00245A  6A10               	clrf	?_writeEEPROM+2,c
 10474  00245C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10475                           
 10476                           ;main.c: 1193: writeEEPROM(0xB5, 0);
 10477  002460  6A0F               	clrf	?_writeEEPROM+1,c
 10478  002462  0EB5               	movlw	181
 10479  002464  6E0E               	movwf	?_writeEEPROM,c
 10480  002466  0E00               	movlw	0
 10481  002468  6A10               	clrf	?_writeEEPROM+2,c
 10482  00246A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10483                           
 10484                           ;main.c: 1197: for (uint8_t i = 0; i < 6; i++) {
 10485  00246E  6A11               	clrf	init_app_eeprom@i,c
 10486  002470                     l9572:
 10487                           
 10488                           ;main.c: 1198: writeEEPROM(0xB6 + i * 12, 0);
 10489  002470  5011               	movf	init_app_eeprom@i,w,c
 10490  002472  0D0C               	mullw	12
 10491  002474  0EB6               	movlw	182
 10492  002476  24F3               	addwf	prodl,w,c
 10493  002478  6E0E               	movwf	?_writeEEPROM,c
 10494  00247A  0E00               	movlw	0
 10495  00247C  20F4               	addwfc	prodh,w,c
 10496  00247E  6E0F               	movwf	?_writeEEPROM+1,c
 10497  002480  0E00               	movlw	0
 10498  002482  6A10               	clrf	?_writeEEPROM+2,c
 10499  002484  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10500                           
 10501                           ;main.c: 1199: writeEEPROM(0xB7 + i * 12, 0);
 10502  002488  5011               	movf	init_app_eeprom@i,w,c
 10503  00248A  0D0C               	mullw	12
 10504  00248C  0EB7               	movlw	183
 10505  00248E  24F3               	addwf	prodl,w,c
 10506  002490  6E0E               	movwf	?_writeEEPROM,c
 10507  002492  0E00               	movlw	0
 10508  002494  20F4               	addwfc	prodh,w,c
 10509  002496  6E0F               	movwf	?_writeEEPROM+1,c
 10510  002498  0E00               	movlw	0
 10511  00249A  6A10               	clrf	?_writeEEPROM+2,c
 10512  00249C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10513                           
 10514                           ;main.c: 1200: writeEEPROM(0xB8 + i * 12, 0);
 10515  0024A0  5011               	movf	init_app_eeprom@i,w,c
 10516  0024A2  0D0C               	mullw	12
 10517  0024A4  0EB8               	movlw	184
 10518  0024A6  24F3               	addwf	prodl,w,c
 10519  0024A8  6E0E               	movwf	?_writeEEPROM,c
 10520  0024AA  0E00               	movlw	0
 10521  0024AC  20F4               	addwfc	prodh,w,c
 10522  0024AE  6E0F               	movwf	?_writeEEPROM+1,c
 10523  0024B0  0E00               	movlw	0
 10524  0024B2  6A10               	clrf	?_writeEEPROM+2,c
 10525  0024B4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10526                           
 10527                           ;main.c: 1201: writeEEPROM(0xB9 + i * 12, 0);
 10528  0024B8  5011               	movf	init_app_eeprom@i,w,c
 10529  0024BA  0D0C               	mullw	12
 10530  0024BC  0EB9               	movlw	185
 10531  0024BE  24F3               	addwf	prodl,w,c
 10532  0024C0  6E0E               	movwf	?_writeEEPROM,c
 10533  0024C2  0E00               	movlw	0
 10534  0024C4  20F4               	addwfc	prodh,w,c
 10535  0024C6  6E0F               	movwf	?_writeEEPROM+1,c
 10536  0024C8  0E00               	movlw	0
 10537  0024CA  6A10               	clrf	?_writeEEPROM+2,c
 10538  0024CC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10539                           
 10540                           ;main.c: 1202: writeEEPROM(0xBA + i * 12, 0);
 10541  0024D0  5011               	movf	init_app_eeprom@i,w,c
 10542  0024D2  0D0C               	mullw	12
 10543  0024D4  0EBA               	movlw	186
 10544  0024D6  24F3               	addwf	prodl,w,c
 10545  0024D8  6E0E               	movwf	?_writeEEPROM,c
 10546  0024DA  0E00               	movlw	0
 10547  0024DC  20F4               	addwfc	prodh,w,c
 10548  0024DE  6E0F               	movwf	?_writeEEPROM+1,c
 10549  0024E0  0E00               	movlw	0
 10550  0024E2  6A10               	clrf	?_writeEEPROM+2,c
 10551  0024E4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10552                           
 10553                           ;main.c: 1203: writeEEPROM(0xBB + i * 12, 0);
 10554  0024E8  5011               	movf	init_app_eeprom@i,w,c
 10555  0024EA  0D0C               	mullw	12
 10556  0024EC  0EBB               	movlw	187
 10557  0024EE  24F3               	addwf	prodl,w,c
 10558  0024F0  6E0E               	movwf	?_writeEEPROM,c
 10559  0024F2  0E00               	movlw	0
 10560  0024F4  20F4               	addwfc	prodh,w,c
 10561  0024F6  6E0F               	movwf	?_writeEEPROM+1,c
 10562  0024F8  0E00               	movlw	0
 10563  0024FA  6A10               	clrf	?_writeEEPROM+2,c
 10564  0024FC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10565                           
 10566                           ;main.c: 1204: writeEEPROM(0xBC + i * 12, 0);
 10567  002500  5011               	movf	init_app_eeprom@i,w,c
 10568  002502  0D0C               	mullw	12
 10569  002504  0EBC               	movlw	188
 10570  002506  24F3               	addwf	prodl,w,c
 10571  002508  6E0E               	movwf	?_writeEEPROM,c
 10572  00250A  0E00               	movlw	0
 10573  00250C  20F4               	addwfc	prodh,w,c
 10574  00250E  6E0F               	movwf	?_writeEEPROM+1,c
 10575  002510  0E00               	movlw	0
 10576  002512  6A10               	clrf	?_writeEEPROM+2,c
 10577  002514  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10578                           
 10579                           ;main.c: 1205: writeEEPROM(0xBD + i * 12, 0);
 10580  002518  5011               	movf	init_app_eeprom@i,w,c
 10581  00251A  0D0C               	mullw	12
 10582  00251C  0EBD               	movlw	189
 10583  00251E  24F3               	addwf	prodl,w,c
 10584  002520  6E0E               	movwf	?_writeEEPROM,c
 10585  002522  0E00               	movlw	0
 10586  002524  20F4               	addwfc	prodh,w,c
 10587  002526  6E0F               	movwf	?_writeEEPROM+1,c
 10588  002528  0E00               	movlw	0
 10589  00252A  6A10               	clrf	?_writeEEPROM+2,c
 10590  00252C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10591                           
 10592                           ;main.c: 1206: writeEEPROM(0xBE + i * 12, 0);
 10593  002530  5011               	movf	init_app_eeprom@i,w,c
 10594  002532  0D0C               	mullw	12
 10595  002534  0EBE               	movlw	190
 10596  002536  24F3               	addwf	prodl,w,c
 10597  002538  6E0E               	movwf	?_writeEEPROM,c
 10598  00253A  0E00               	movlw	0
 10599  00253C  20F4               	addwfc	prodh,w,c
 10600  00253E  6E0F               	movwf	?_writeEEPROM+1,c
 10601  002540  0E00               	movlw	0
 10602  002542  6A10               	clrf	?_writeEEPROM+2,c
 10603  002544  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10604                           
 10605                           ;main.c: 1207: writeEEPROM(0xBF + i * 12, 0);
 10606  002548  5011               	movf	init_app_eeprom@i,w,c
 10607  00254A  0D0C               	mullw	12
 10608  00254C  0EBF               	movlw	191
 10609  00254E  24F3               	addwf	prodl,w,c
 10610  002550  6E0E               	movwf	?_writeEEPROM,c
 10611  002552  0E00               	movlw	0
 10612  002554  20F4               	addwfc	prodh,w,c
 10613  002556  6E0F               	movwf	?_writeEEPROM+1,c
 10614  002558  0E00               	movlw	0
 10615  00255A  6A10               	clrf	?_writeEEPROM+2,c
 10616  00255C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10617                           
 10618                           ;main.c: 1208: writeEEPROM(0xC0 + i * 12, 0);
 10619  002560  5011               	movf	init_app_eeprom@i,w,c
 10620  002562  0D0C               	mullw	12
 10621  002564  0EC0               	movlw	192
 10622  002566  24F3               	addwf	prodl,w,c
 10623  002568  6E0E               	movwf	?_writeEEPROM,c
 10624  00256A  0E00               	movlw	0
 10625  00256C  20F4               	addwfc	prodh,w,c
 10626  00256E  6E0F               	movwf	?_writeEEPROM+1,c
 10627  002570  0E00               	movlw	0
 10628  002572  6A10               	clrf	?_writeEEPROM+2,c
 10629  002574  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10630                           
 10631                           ;main.c: 1209: writeEEPROM(0xC1 + i * 12, 0);
 10632  002578  5011               	movf	init_app_eeprom@i,w,c
 10633  00257A  0D0C               	mullw	12
 10634  00257C  0EC1               	movlw	193
 10635  00257E  24F3               	addwf	prodl,w,c
 10636  002580  6E0E               	movwf	?_writeEEPROM,c
 10637  002582  0E00               	movlw	0
 10638  002584  20F4               	addwfc	prodh,w,c
 10639  002586  6E0F               	movwf	?_writeEEPROM+1,c
 10640  002588  0E00               	movlw	0
 10641  00258A  6A10               	clrf	?_writeEEPROM+2,c
 10642  00258C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 10643  002590  2A11               	incf	init_app_eeprom@i,f,c
 10644  002592  0E05               	movlw	5
 10645  002594  6411               	cpfsgt	init_app_eeprom@i,c
 10646  002596  D76C               	goto	l9572
 10647  002598  0C05               	retlw	5
 10648  00259A                     __end_of_init_app_eeprom:
 10649                           	opt stack 0
 10650                           tblptru	equ	0xFF8
 10651                           tblptrh	equ	0xFF7
 10652                           tblptrl	equ	0xFF6
 10653                           tablat	equ	0xFF5
 10654                           prodh	equ	0xFF4
 10655                           prodl	equ	0xFF3
 10656                           postinc0	equ	0xFEE
 10657                           wreg	equ	0xFE8
 10658                           postdec1	equ	0xFE5
 10659                           fsr1h	equ	0xFE2
 10660                           fsr1l	equ	0xFE1
 10661                           indf2	equ	0xFDF
 10662                           postinc2	equ	0xFDE
 10663                           postdec2	equ	0xFDD
 10664                           fsr2h	equ	0xFDA
 10665                           fsr2l	equ	0xFD9
 10666                           status	equ	0xFD8
 10667                           
 10668 ;; *************** function _vscp_getFamilyType *****************
 10669 ;; Defined at:
 10670 ;;		line 2815 in file "../main.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;		None
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;		None
 10675 ;; Return value:  Size  Location     Type
 10676 ;;                  4   13[COMRAM] unsigned long 
 10677 ;; Registers used:
 10678 ;;		None
 10679 ;; Tracked objects:
 10680 ;;		On entry : F/0
 10681 ;;		On exit  : F/0
 10682 ;;		Unchanged: F/0
 10683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10684 ;;      Params:         4       0       0       0       0       0       0
 10685 ;;      Locals:         0       0       0       0       0       0       0
 10686 ;;      Temps:          0       0       0       0       0       0       0
 10687 ;;      Totals:         4       0       0       0       0       0       0
 10688 ;;Total ram usage:        4 bytes
 10689 ;; Hardware stack levels used:    1
 10690 ;; Hardware stack levels required when called:    2
 10691 ;; This function calls:
 10692 ;;		Nothing
 10693 ;; This function is called by:
 10694 ;;		_vscp_writeStdReg
 10695 ;; This function uses a non-reentrant model
 10696 ;;
 10697                           
 10698                           	psect	text39
 10699  00586C                     __ptext39:
 10700                           	opt stack 0
 10701  00586C                     _vscp_getFamilyType:
 10702                           	opt stack 26
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;main.c: 2816: return 0;
 10706                           
 10707                           ;incstack = 0
 10708                           ;incstack = 0
 10709  00586C  6A0E               	clrf	?_vscp_getFamilyType,c
 10710  00586E  6A0F               	clrf	?_vscp_getFamilyType+1,c
 10711  005870  6A10               	clrf	?_vscp_getFamilyType+2,c
 10712  005872  6A11               	clrf	?_vscp_getFamilyType+3,c
 10713                           
 10714                           ; BSR set to: 0
 10715  005874  0012               	return	
 10716  005876                     __end_of_vscp_getFamilyType:
 10717                           	opt stack 0
 10718                           tblptru	equ	0xFF8
 10719                           tblptrh	equ	0xFF7
 10720                           tblptrl	equ	0xFF6
 10721                           tablat	equ	0xFF5
 10722                           prodh	equ	0xFF4
 10723                           prodl	equ	0xFF3
 10724                           postinc0	equ	0xFEE
 10725                           wreg	equ	0xFE8
 10726                           postdec1	equ	0xFE5
 10727                           fsr1h	equ	0xFE2
 10728                           fsr1l	equ	0xFE1
 10729                           indf2	equ	0xFDF
 10730                           postinc2	equ	0xFDE
 10731                           postdec2	equ	0xFDD
 10732                           fsr2h	equ	0xFDA
 10733                           fsr2l	equ	0xFD9
 10734                           status	equ	0xFD8
 10735                           
 10736 ;; *************** function _vscp_getFamilyCode *****************
 10737 ;; Defined at:
 10738 ;;		line 2805 in file "../main.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;		None
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;		None
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  4   13[COMRAM] unsigned long 
 10745 ;; Registers used:
 10746 ;;		None
 10747 ;; Tracked objects:
 10748 ;;		On entry : F/0
 10749 ;;		On exit  : F/0
 10750 ;;		Unchanged: F/0
 10751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10752 ;;      Params:         4       0       0       0       0       0       0
 10753 ;;      Locals:         0       0       0       0       0       0       0
 10754 ;;      Temps:          0       0       0       0       0       0       0
 10755 ;;      Totals:         4       0       0       0       0       0       0
 10756 ;;Total ram usage:        4 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; Hardware stack levels required when called:    2
 10759 ;; This function calls:
 10760 ;;		Nothing
 10761 ;; This function is called by:
 10762 ;;		_vscp_writeStdReg
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           	psect	text40
 10767  005876                     __ptext40:
 10768                           	opt stack 0
 10769  005876                     _vscp_getFamilyCode:
 10770                           	opt stack 26
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;main.c: 2806: return 0L;
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;incstack = 0
 10777                           ;incstack = 0
 10778  005876  6A0E               	clrf	?_vscp_getFamilyCode,c
 10779  005878  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 10780  00587A  6A10               	clrf	?_vscp_getFamilyCode+2,c
 10781  00587C  6A11               	clrf	?_vscp_getFamilyCode+3,c
 10782                           
 10783                           ; BSR set to: 0
 10784  00587E  0012               	return	
 10785  005880                     __end_of_vscp_getFamilyCode:
 10786                           	opt stack 0
 10787                           tblptru	equ	0xFF8
 10788                           tblptrh	equ	0xFF7
 10789                           tblptrl	equ	0xFF6
 10790                           tablat	equ	0xFF5
 10791                           prodh	equ	0xFF4
 10792                           prodl	equ	0xFF3
 10793                           postinc0	equ	0xFEE
 10794                           wreg	equ	0xFE8
 10795                           postdec1	equ	0xFE5
 10796                           fsr1h	equ	0xFE2
 10797                           fsr1l	equ	0xFE1
 10798                           indf2	equ	0xFDF
 10799                           postinc2	equ	0xFDE
 10800                           postdec2	equ	0xFDD
 10801                           fsr2h	equ	0xFDA
 10802                           fsr2l	equ	0xFD9
 10803                           status	equ	0xFD8
 10804                           
 10805 ;; *************** function _vscp_setManufacturerId *****************
 10806 ;; Defined at:
 10807 ;;		line 2643 in file "../main.c"
 10808 ;; Parameters:    Size  Location     Type
 10809 ;;  idx             1    wreg     unsigned char 
 10810 ;;  data            1   16[COMRAM] unsigned char 
 10811 ;; Auto vars:     Size  Location     Type
 10812 ;;  idx             1   17[COMRAM] unsigned char 
 10813 ;; Return value:  Size  Location     Type
 10814 ;;		None               void
 10815 ;; Registers used:
 10816 ;;		wreg, status,2, status,0, cstack
 10817 ;; Tracked objects:
 10818 ;;		On entry : F/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10822 ;;      Params:         1       0       0       0       0       0       0
 10823 ;;      Locals:         1       0       0       0       0       0       0
 10824 ;;      Temps:          0       0       0       0       0       0       0
 10825 ;;      Totals:         2       0       0       0       0       0       0
 10826 ;;Total ram usage:        2 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    3
 10829 ;; This function calls:
 10830 ;;		_writeEEPROM
 10831 ;; This function is called by:
 10832 ;;		_vscp_writeStdReg
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           	psect	text41
 10837  005740                     __ptext41:
 10838                           	opt stack 0
 10839  005740                     _vscp_setManufacturerId:
 10840                           	opt stack 25
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;incstack = 0
 10844                           ;incstack = 0
 10845                           ;vscp_setManufacturerId@idx stored from wreg
 10846  005740  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;main.c: 2644: writeEEPROM(0x09 + idx, data);
 10850  005744  0E09               	movlw	9
 10851  005746  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10852  005748  6E0E               	movwf	?_writeEEPROM,c
 10853  00574A  6A0F               	clrf	?_writeEEPROM+1,c
 10854  00574C  0E00               	movlw	0
 10855  00574E  220F               	addwfc	?_writeEEPROM+1,f,c
 10856  005750  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10857  005754  EFFD  F02A         	goto	_writeEEPROM	;wreg free
 10858  005758                     __end_of_vscp_setManufacturerId:
 10859                           	opt stack 0
 10860                           tblptru	equ	0xFF8
 10861                           tblptrh	equ	0xFF7
 10862                           tblptrl	equ	0xFF6
 10863                           tablat	equ	0xFF5
 10864                           prodh	equ	0xFF4
 10865                           prodl	equ	0xFF3
 10866                           postinc0	equ	0xFEE
 10867                           wreg	equ	0xFE8
 10868                           postdec1	equ	0xFE5
 10869                           fsr1h	equ	0xFE2
 10870                           fsr1l	equ	0xFE1
 10871                           indf2	equ	0xFDF
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function _vscp_setUserID *****************
 10879 ;; Defined at:
 10880 ;;		line 2621 in file "../main.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  idx             1    wreg     unsigned char 
 10883 ;;  data            1   16[COMRAM] unsigned char 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  idx             1   17[COMRAM] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;		None               void
 10888 ;; Registers used:
 10889 ;;		wreg, status,2, status,0, cstack
 10890 ;; Tracked objects:
 10891 ;;		On entry : F/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10895 ;;      Params:         1       0       0       0       0       0       0
 10896 ;;      Locals:         1       0       0       0       0       0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0
 10898 ;;      Totals:         2       0       0       0       0       0       0
 10899 ;;Total ram usage:        2 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:    3
 10902 ;; This function calls:
 10903 ;;		_writeEEPROM
 10904 ;; This function is called by:
 10905 ;;		_vscp_writeStdReg
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           	psect	text42
 10910  005758                     __ptext42:
 10911                           	opt stack 0
 10912  005758                     _vscp_setUserID:
 10913                           	opt stack 25
 10914                           
 10915                           ;incstack = 0
 10916                           ;incstack = 0
 10917                           ;vscp_setUserID@idx stored from wreg
 10918  005758  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;main.c: 2622: writeEEPROM(idx + 0x04, data);
 10922  00575C  0E04               	movlw	4
 10923  00575E  2412               	addwf	vscp_setUserID@idx,w,c
 10924  005760  6E0E               	movwf	?_writeEEPROM,c
 10925  005762  6A0F               	clrf	?_writeEEPROM+1,c
 10926  005764  0E00               	movlw	0
 10927  005766  220F               	addwfc	?_writeEEPROM+1,f,c
 10928  005768  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10929  00576C  EFFD  F02A         	goto	_writeEEPROM	;wreg free
 10930  005770                     __end_of_vscp_setUserID:
 10931                           	opt stack 0
 10932                           tblptru	equ	0xFF8
 10933                           tblptrh	equ	0xFF7
 10934                           tblptrl	equ	0xFF6
 10935                           tablat	equ	0xFF5
 10936                           prodh	equ	0xFF4
 10937                           prodl	equ	0xFF3
 10938                           postinc0	equ	0xFEE
 10939                           wreg	equ	0xFE8
 10940                           postdec1	equ	0xFE5
 10941                           fsr1h	equ	0xFE2
 10942                           fsr1l	equ	0xFE1
 10943                           indf2	equ	0xFDF
 10944                           postinc2	equ	0xFDE
 10945                           postdec2	equ	0xFDD
 10946                           fsr2h	equ	0xFDA
 10947                           fsr2l	equ	0xFD9
 10948                           status	equ	0xFD8
 10949                           
 10950 ;; *************** function _vscp_setGUID *****************
 10951 ;; Defined at:
 10952 ;;		line 2590 in file "../main.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;  idx             1    wreg     unsigned char 
 10955 ;;  data            1   16[COMRAM] unsigned char 
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;  idx             1   17[COMRAM] unsigned char 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;		None               void
 10960 ;; Registers used:
 10961 ;;		wreg, status,2, status,0, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : F/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10967 ;;      Params:         1       0       0       0       0       0       0
 10968 ;;      Locals:         1       0       0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0
 10970 ;;      Totals:         2       0       0       0       0       0       0
 10971 ;;Total ram usage:        2 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    3
 10974 ;; This function calls:
 10975 ;;		_writeEEPROM
 10976 ;; This function is called by:
 10977 ;;		_vscp_writeStdReg
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981                           	psect	text43
 10982  0056AE                     __ptext43:
 10983                           	opt stack 0
 10984  0056AE                     _vscp_setGUID:
 10985                           	opt stack 25
 10986                           
 10987                           ;incstack = 0
 10988                           ;incstack = 0
 10989                           ;vscp_setGUID@idx stored from wreg
 10990  0056AE  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;main.c: 2591: if ( idx>15 ) return;
 10994  0056B2  0E0F               	movlw	15
 10995  0056B4  6412               	cpfsgt	vscp_setGUID@idx,c
 10996  0056B6  D001               	goto	l11020
 10997  0056B8  D00A               	goto	l550
 10998  0056BA                     l11020:
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;main.c: 2592: writeEEPROM( 0x11 + idx, data );
 11002  0056BA  0E11               	movlw	17
 11003  0056BC  2412               	addwf	vscp_setGUID@idx,w,c
 11004  0056BE  6E0E               	movwf	?_writeEEPROM,c
 11005  0056C0  6A0F               	clrf	?_writeEEPROM+1,c
 11006  0056C2  0E00               	movlw	0
 11007  0056C4  220F               	addwfc	?_writeEEPROM+1,f,c
 11008  0056C6  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 11009  0056CA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11010  0056CE                     l550:
 11011  0056CE  0012               	return	
 11012  0056D0                     __end_of_vscp_setGUID:
 11013                           	opt stack 0
 11014                           tblptru	equ	0xFF8
 11015                           tblptrh	equ	0xFF7
 11016                           tblptrl	equ	0xFF6
 11017                           tablat	equ	0xFF5
 11018                           prodh	equ	0xFF4
 11019                           prodl	equ	0xFF3
 11020                           postinc0	equ	0xFEE
 11021                           wreg	equ	0xFE8
 11022                           postdec1	equ	0xFE5
 11023                           fsr1h	equ	0xFE2
 11024                           fsr1l	equ	0xFE1
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function _vscp_writeAppReg *****************
 11033 ;; Defined at:
 11034 ;;		line 1883 in file "../main.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;  reg             1    wreg     unsigned char 
 11037 ;;  val             1   32[COMRAM] unsigned char 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  reg             1   34[COMRAM] unsigned char 
 11040 ;;  pos             1   33[COMRAM] unsigned char 
 11041 ;;  rv              1   35[COMRAM] unsigned char 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      unsigned char 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11046 ;; Tracked objects:
 11047 ;;		On entry : F/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11051 ;;      Params:         1       0       0       0       0       0       0
 11052 ;;      Locals:         3       0       0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0
 11054 ;;      Totals:         4       0       0       0       0       0       0
 11055 ;;Total ram usage:        4 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    4
 11058 ;; This function calls:
 11059 ;;		_writeEEPROM
 11060 ;;		_readEEPROM
 11061 ;;		_writeCoeffs2Ram
 11062 ;; This function is called by:
 11063 ;;		_vscp_writeRegister
 11064 ;;		_vscp_handleProtocolEvent
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           	psect	text44
 11069  00066E                     __ptext44:
 11070                           	opt stack 0
 11071  00066E                     _vscp_writeAppReg:
 11072                           	opt stack 24
 11073                           
 11074                           ;incstack = 0
 11075                           ;incstack = 0
 11076                           ;vscp_writeAppReg@reg stored from wreg
 11077  00066E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;main.c: 1884: uint8_t rv;
 11081                           ;main.c: 1891: rv = ~val;
 11082  000672  1C21               	comf	vscp_writeAppReg@val,w,c
 11083  000674  6E24               	movwf	vscp_writeAppReg@rv,c
 11084                           
 11085                           ;main.c: 1893: if (0 == vscp_page_select) {
 11086  000676  5047               	movf	_vscp_page_select+1,w,c
 11087  000678  1046               	iorwf	_vscp_page_select,w,c
 11088  00067A  E102 EF37  F008    	bz	l10982
 11089  000680  EF71  F009         	goto	l10984
 11090  000684                     l10792:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;main.c: 1899: writeEEPROM(0x41, val);
 11094  000684  6A0F               	clrf	?_writeEEPROM+1,c
 11095  000686  0E41               	movlw	65
 11096  000688  6E0E               	movwf	?_writeEEPROM,c
 11097  00068A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11098  00068E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11099                           
 11100                           ;main.c: 1900: rv = readEEPROM(0x41);
 11101  000692  6A0F               	clrf	?_readEEPROM+1,c
 11102  000694  0E41               	movlw	65
 11103  000696  6E0E               	movwf	?_readEEPROM,c
 11104  000698  EC00  F02C         	call	_readEEPROM	;wreg free
 11105  00069C  EFB5  F009         	goto	L19
 11106  0006A0                     l10794:
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;main.c: 1905: writeEEPROM(0x42, val);
 11110  0006A0  6A0F               	clrf	?_writeEEPROM+1,c
 11111  0006A2  0E42               	movlw	66
 11112  0006A4  6E0E               	movwf	?_writeEEPROM,c
 11113  0006A6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11114  0006AA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11115                           
 11116                           ;main.c: 1906: rv = readEEPROM(0x42);
 11117  0006AE  6A0F               	clrf	?_readEEPROM+1,c
 11118  0006B0  0E42               	movlw	66
 11119  0006B2  6E0E               	movwf	?_readEEPROM,c
 11120  0006B4  EC00  F02C         	call	_readEEPROM	;wreg free
 11121  0006B8  EFB5  F009         	goto	L19
 11122  0006BC                     l10796:
 11123                           
 11124                           ; BSR set to: 0
 11125                           ;main.c: 1915: writeEEPROM(0x43, val);
 11126  0006BC  6A0F               	clrf	?_writeEEPROM+1,c
 11127  0006BE  0E43               	movlw	67
 11128  0006C0  6E0E               	movwf	?_writeEEPROM,c
 11129  0006C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11130  0006C6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11131                           
 11132                           ;main.c: 1916: rv = readEEPROM(0x43);
 11133  0006CA  6A0F               	clrf	?_readEEPROM+1,c
 11134  0006CC  0E43               	movlw	67
 11135  0006CE  6E0E               	movwf	?_readEEPROM,c
 11136  0006D0  EC00  F02C         	call	_readEEPROM	;wreg free
 11137  0006D4  EFB5  F009         	goto	L19
 11138  0006D8                     l10798:
 11139                           
 11140                           ; BSR set to: 0
 11141                           ;main.c: 1921: writeEEPROM(0x44, val);
 11142  0006D8  6A0F               	clrf	?_writeEEPROM+1,c
 11143  0006DA  0E44               	movlw	68
 11144  0006DC  6E0E               	movwf	?_writeEEPROM,c
 11145  0006DE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11146  0006E2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11147                           
 11148                           ;main.c: 1922: rv = readEEPROM(0x44);
 11149  0006E6  6A0F               	clrf	?_readEEPROM+1,c
 11150  0006E8  0E44               	movlw	68
 11151  0006EA  6E0E               	movwf	?_readEEPROM,c
 11152  0006EC  EC00  F02C         	call	_readEEPROM	;wreg free
 11153  0006F0  EFB5  F009         	goto	L19
 11154  0006F4                     l10800:
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;main.c: 1927: writeEEPROM(0x45, val);
 11158  0006F4  6A0F               	clrf	?_writeEEPROM+1,c
 11159  0006F6  0E45               	movlw	69
 11160  0006F8  6E0E               	movwf	?_writeEEPROM,c
 11161  0006FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11162  0006FE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11163                           
 11164                           ;main.c: 1928: rv = readEEPROM(0x45);
 11165  000702  6A0F               	clrf	?_readEEPROM+1,c
 11166  000704  0E45               	movlw	69
 11167  000706  6E0E               	movwf	?_readEEPROM,c
 11168  000708  EC00  F02C         	call	_readEEPROM	;wreg free
 11169  00070C  EFB5  F009         	goto	L19
 11170  000710                     l10802:
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;main.c: 1933: writeEEPROM(0x46, val);
 11174  000710  6A0F               	clrf	?_writeEEPROM+1,c
 11175  000712  0E46               	movlw	70
 11176  000714  6E0E               	movwf	?_writeEEPROM,c
 11177  000716  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11178  00071A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11179                           
 11180                           ;main.c: 1934: rv = readEEPROM(0x46);
 11181  00071E  6A0F               	clrf	?_readEEPROM+1,c
 11182  000720  0E46               	movlw	70
 11183  000722  6E0E               	movwf	?_readEEPROM,c
 11184  000724  EC00  F02C         	call	_readEEPROM	;wreg free
 11185  000728  EFB5  F009         	goto	L19
 11186  00072C                     l10804:
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;main.c: 1939: writeEEPROM(0x47, val);
 11190  00072C  6A0F               	clrf	?_writeEEPROM+1,c
 11191  00072E  0E47               	movlw	71
 11192  000730  6E0E               	movwf	?_writeEEPROM,c
 11193  000732  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11194  000736  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11195                           
 11196                           ;main.c: 1940: rv = readEEPROM(0x47);
 11197  00073A  6A0F               	clrf	?_readEEPROM+1,c
 11198  00073C  0E47               	movlw	71
 11199  00073E  6E0E               	movwf	?_readEEPROM,c
 11200  000740  EC00  F02C         	call	_readEEPROM	;wreg free
 11201  000744  EFB5  F009         	goto	L19
 11202  000748                     l10806:
 11203                           
 11204                           ; BSR set to: 0
 11205                           ;main.c: 1945: writeEEPROM(0x48, val);
 11206  000748  6A0F               	clrf	?_writeEEPROM+1,c
 11207  00074A  0E48               	movlw	72
 11208  00074C  6E0E               	movwf	?_writeEEPROM,c
 11209  00074E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11210  000752  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11211                           
 11212                           ;main.c: 1946: rv = readEEPROM(0x48);
 11213  000756  6A0F               	clrf	?_readEEPROM+1,c
 11214  000758  0E48               	movlw	72
 11215  00075A  6E0E               	movwf	?_readEEPROM,c
 11216  00075C  EC00  F02C         	call	_readEEPROM	;wreg free
 11217  000760  EFB5  F009         	goto	L19
 11218  000764                     l10808:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;main.c: 1955: writeEEPROM(0x49, val);
 11222  000764  6A0F               	clrf	?_writeEEPROM+1,c
 11223  000766  0E49               	movlw	73
 11224  000768  6E0E               	movwf	?_writeEEPROM,c
 11225  00076A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11226  00076E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11227                           
 11228                           ;main.c: 1956: rv = readEEPROM(0x49);
 11229  000772  6A0F               	clrf	?_readEEPROM+1,c
 11230  000774  0E49               	movlw	73
 11231  000776  6E0E               	movwf	?_readEEPROM,c
 11232  000778  EC00  F02C         	call	_readEEPROM	;wreg free
 11233  00077C  EFB5  F009         	goto	L19
 11234  000780                     l10810:
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;main.c: 1961: writeEEPROM(0x4A, val);
 11238  000780  6A0F               	clrf	?_writeEEPROM+1,c
 11239  000782  0E4A               	movlw	74
 11240  000784  6E0E               	movwf	?_writeEEPROM,c
 11241  000786  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11242  00078A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11243                           
 11244                           ;main.c: 1962: rv = readEEPROM(0x4A);
 11245  00078E  6A0F               	clrf	?_readEEPROM+1,c
 11246  000790  0E4A               	movlw	74
 11247  000792  6E0E               	movwf	?_readEEPROM,c
 11248  000794  EC00  F02C         	call	_readEEPROM	;wreg free
 11249  000798  EFB5  F009         	goto	L19
 11250  00079C                     l10812:
 11251                           
 11252                           ; BSR set to: 0
 11253                           ;main.c: 1967: writeEEPROM(0x4B, val);
 11254  00079C  6A0F               	clrf	?_writeEEPROM+1,c
 11255  00079E  0E4B               	movlw	75
 11256  0007A0  6E0E               	movwf	?_writeEEPROM,c
 11257  0007A2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11258  0007A6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11259                           
 11260                           ;main.c: 1968: rv = readEEPROM(0x4B);
 11261  0007AA  6A0F               	clrf	?_readEEPROM+1,c
 11262  0007AC  0E4B               	movlw	75
 11263  0007AE  6E0E               	movwf	?_readEEPROM,c
 11264  0007B0  EC00  F02C         	call	_readEEPROM	;wreg free
 11265  0007B4  EFB5  F009         	goto	L19
 11266  0007B8                     l10814:
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;main.c: 1973: writeEEPROM(0x4C, val);
 11270  0007B8  6A0F               	clrf	?_writeEEPROM+1,c
 11271  0007BA  0E4C               	movlw	76
 11272  0007BC  6E0E               	movwf	?_writeEEPROM,c
 11273  0007BE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11274  0007C2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11275                           
 11276                           ;main.c: 1974: rv = readEEPROM(0x4C);
 11277  0007C6  6A0F               	clrf	?_readEEPROM+1,c
 11278  0007C8  0E4C               	movlw	76
 11279  0007CA  6E0E               	movwf	?_readEEPROM,c
 11280  0007CC  EC00  F02C         	call	_readEEPROM	;wreg free
 11281  0007D0  EFB5  F009         	goto	L19
 11282  0007D4                     l10816:
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;main.c: 1979: writeEEPROM(0x4D, val);
 11286  0007D4  6A0F               	clrf	?_writeEEPROM+1,c
 11287  0007D6  0E4D               	movlw	77
 11288  0007D8  6E0E               	movwf	?_writeEEPROM,c
 11289  0007DA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11290  0007DE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11291                           
 11292                           ;main.c: 1980: rv = readEEPROM(0x4D);
 11293  0007E2  6A0F               	clrf	?_readEEPROM+1,c
 11294  0007E4  0E4D               	movlw	77
 11295  0007E6  6E0E               	movwf	?_readEEPROM,c
 11296  0007E8  EC00  F02C         	call	_readEEPROM	;wreg free
 11297  0007EC  EFB5  F009         	goto	L19
 11298  0007F0                     l10818:
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;main.c: 1985: writeEEPROM(0x4E, val);
 11302  0007F0  6A0F               	clrf	?_writeEEPROM+1,c
 11303  0007F2  0E4E               	movlw	78
 11304  0007F4  6E0E               	movwf	?_writeEEPROM,c
 11305  0007F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11306  0007FA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11307                           
 11308                           ;main.c: 1986: rv = readEEPROM(0x4E);
 11309  0007FE  6A0F               	clrf	?_readEEPROM+1,c
 11310  000800  0E4E               	movlw	78
 11311  000802  6E0E               	movwf	?_readEEPROM,c
 11312  000804  EC00  F02C         	call	_readEEPROM	;wreg free
 11313  000808  EFB5  F009         	goto	L19
 11314  00080C                     l10820:
 11315                           
 11316                           ; BSR set to: 0
 11317                           ;main.c: 1995: writeEEPROM(0x4F, val);
 11318  00080C  6A0F               	clrf	?_writeEEPROM+1,c
 11319  00080E  0E4F               	movlw	79
 11320  000810  6E0E               	movwf	?_writeEEPROM,c
 11321  000812  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11322  000816  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11323                           
 11324                           ;main.c: 1996: rv = readEEPROM(0x4F);
 11325  00081A  6A0F               	clrf	?_readEEPROM+1,c
 11326  00081C  0E4F               	movlw	79
 11327  00081E  6E0E               	movwf	?_readEEPROM,c
 11328  000820  EC00  F02C         	call	_readEEPROM	;wreg free
 11329  000824  EFB5  F009         	goto	L19
 11330  000828                     l10822:
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;main.c: 2001: writeEEPROM(0x50, val);
 11334  000828  6A0F               	clrf	?_writeEEPROM+1,c
 11335  00082A  0E50               	movlw	80
 11336  00082C  6E0E               	movwf	?_writeEEPROM,c
 11337  00082E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11338  000832  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11339                           
 11340                           ;main.c: 2002: rv = readEEPROM(0x50);
 11341  000836  6A0F               	clrf	?_readEEPROM+1,c
 11342  000838  0E50               	movlw	80
 11343  00083A  6E0E               	movwf	?_readEEPROM,c
 11344  00083C  EC00  F02C         	call	_readEEPROM	;wreg free
 11345  000840  EFB5  F009         	goto	L19
 11346  000844                     l10824:
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;main.c: 2007: writeEEPROM(0x51, val);
 11350  000844  6A0F               	clrf	?_writeEEPROM+1,c
 11351  000846  0E51               	movlw	81
 11352  000848  6E0E               	movwf	?_writeEEPROM,c
 11353  00084A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11354  00084E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11355                           
 11356                           ;main.c: 2008: rv = readEEPROM(0x51);
 11357  000852  6A0F               	clrf	?_readEEPROM+1,c
 11358  000854  0E51               	movlw	81
 11359  000856  6E0E               	movwf	?_readEEPROM,c
 11360  000858  EC00  F02C         	call	_readEEPROM	;wreg free
 11361  00085C  EFB5  F009         	goto	L19
 11362  000860                     l10826:
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;main.c: 2013: writeEEPROM(0x52, val);
 11366  000860  6A0F               	clrf	?_writeEEPROM+1,c
 11367  000862  0E52               	movlw	82
 11368  000864  6E0E               	movwf	?_writeEEPROM,c
 11369  000866  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11370  00086A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11371                           
 11372                           ;main.c: 2014: rv = readEEPROM(0x52);
 11373  00086E  6A0F               	clrf	?_readEEPROM+1,c
 11374  000870  0E52               	movlw	82
 11375  000872  6E0E               	movwf	?_readEEPROM,c
 11376  000874  EC00  F02C         	call	_readEEPROM	;wreg free
 11377  000878  EFB5  F009         	goto	L19
 11378  00087C                     l10828:
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;main.c: 2019: writeEEPROM(0x53, val);
 11382  00087C  6A0F               	clrf	?_writeEEPROM+1,c
 11383  00087E  0E53               	movlw	83
 11384  000880  6E0E               	movwf	?_writeEEPROM,c
 11385  000882  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11386  000886  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11387                           
 11388                           ;main.c: 2020: rv = readEEPROM(0x53);
 11389  00088A  6A0F               	clrf	?_readEEPROM+1,c
 11390  00088C  0E53               	movlw	83
 11391  00088E  6E0E               	movwf	?_readEEPROM,c
 11392  000890  EC00  F02C         	call	_readEEPROM	;wreg free
 11393  000894  EFB5  F009         	goto	L19
 11394  000898                     l10830:
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;main.c: 2025: writeEEPROM(0x54, val);
 11398  000898  6A0F               	clrf	?_writeEEPROM+1,c
 11399  00089A  0E54               	movlw	84
 11400  00089C  6E0E               	movwf	?_writeEEPROM,c
 11401  00089E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11402  0008A2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11403                           
 11404                           ;main.c: 2026: rv = readEEPROM(0x54);
 11405  0008A6  6A0F               	clrf	?_readEEPROM+1,c
 11406  0008A8  0E54               	movlw	84
 11407  0008AA  6E0E               	movwf	?_readEEPROM,c
 11408  0008AC  EC00  F02C         	call	_readEEPROM	;wreg free
 11409  0008B0  EFB5  F009         	goto	L19
 11410  0008B4                     l10832:
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;main.c: 2031: writeEEPROM(0x55, val);
 11414  0008B4  6A0F               	clrf	?_writeEEPROM+1,c
 11415  0008B6  0E55               	movlw	85
 11416  0008B8  6E0E               	movwf	?_writeEEPROM,c
 11417  0008BA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11418  0008BE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11419                           
 11420                           ;main.c: 2032: rv = readEEPROM(0x55);
 11421  0008C2  6A0F               	clrf	?_readEEPROM+1,c
 11422  0008C4  0E55               	movlw	85
 11423  0008C6  6E0E               	movwf	?_readEEPROM,c
 11424  0008C8  EC00  F02C         	call	_readEEPROM	;wreg free
 11425  0008CC  EFB5  F009         	goto	L19
 11426  0008D0                     l10834:
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;main.c: 2037: writeEEPROM(0x56, val);
 11430  0008D0  6A0F               	clrf	?_writeEEPROM+1,c
 11431  0008D2  0E56               	movlw	86
 11432  0008D4  6E0E               	movwf	?_writeEEPROM,c
 11433  0008D6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11434  0008DA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11435                           
 11436                           ;main.c: 2038: rv = readEEPROM(0x56);
 11437  0008DE  6A0F               	clrf	?_readEEPROM+1,c
 11438  0008E0  0E56               	movlw	86
 11439  0008E2  6E0E               	movwf	?_readEEPROM,c
 11440  0008E4  EC00  F02C         	call	_readEEPROM	;wreg free
 11441  0008E8  EFB5  F009         	goto	L19
 11442  0008EC                     l10836:
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;main.c: 2043: writeEEPROM(0x57, val);
 11446  0008EC  6A0F               	clrf	?_writeEEPROM+1,c
 11447  0008EE  0E57               	movlw	87
 11448  0008F0  6E0E               	movwf	?_writeEEPROM,c
 11449  0008F2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11450  0008F6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11451                           
 11452                           ;main.c: 2044: rv = readEEPROM(0x57);
 11453  0008FA  6A0F               	clrf	?_readEEPROM+1,c
 11454  0008FC  0E57               	movlw	87
 11455  0008FE  6E0E               	movwf	?_readEEPROM,c
 11456  000900  EC00  F02C         	call	_readEEPROM	;wreg free
 11457  000904  EFB5  F009         	goto	L19
 11458  000908                     l10838:
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;main.c: 2049: writeEEPROM(0x58, val);
 11462  000908  6A0F               	clrf	?_writeEEPROM+1,c
 11463  00090A  0E58               	movlw	88
 11464  00090C  6E0E               	movwf	?_writeEEPROM,c
 11465  00090E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11466  000912  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11467                           
 11468                           ;main.c: 2050: rv = readEEPROM(0x58);
 11469  000916  6A0F               	clrf	?_readEEPROM+1,c
 11470  000918  0E58               	movlw	88
 11471  00091A  6E0E               	movwf	?_readEEPROM,c
 11472  00091C  EC00  F02C         	call	_readEEPROM	;wreg free
 11473  000920  EFB5  F009         	goto	L19
 11474  000924                     l10840:
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;main.c: 2055: writeEEPROM(0x59, val);
 11478  000924  6A0F               	clrf	?_writeEEPROM+1,c
 11479  000926  0E59               	movlw	89
 11480  000928  6E0E               	movwf	?_writeEEPROM,c
 11481  00092A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11482  00092E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11483                           
 11484                           ;main.c: 2056: rv = readEEPROM(0x59);
 11485  000932  6A0F               	clrf	?_readEEPROM+1,c
 11486  000934  0E59               	movlw	89
 11487  000936  6E0E               	movwf	?_readEEPROM,c
 11488  000938  EC00  F02C         	call	_readEEPROM	;wreg free
 11489  00093C  EFB5  F009         	goto	L19
 11490  000940                     l10842:
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;main.c: 2061: writeEEPROM(0x5A, val);
 11494  000940  6A0F               	clrf	?_writeEEPROM+1,c
 11495  000942  0E5A               	movlw	90
 11496  000944  6E0E               	movwf	?_writeEEPROM,c
 11497  000946  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11498  00094A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11499                           
 11500                           ;main.c: 2062: rv = readEEPROM(0x5A);
 11501  00094E  6A0F               	clrf	?_readEEPROM+1,c
 11502  000950  0E5A               	movlw	90
 11503  000952  6E0E               	movwf	?_readEEPROM,c
 11504  000954  EC00  F02C         	call	_readEEPROM	;wreg free
 11505  000958  EFB5  F009         	goto	L19
 11506  00095C                     l10844:
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;main.c: 2071: writeEEPROM(0x5B, val);
 11510  00095C  6A0F               	clrf	?_writeEEPROM+1,c
 11511  00095E  0E5B               	movlw	91
 11512  000960  6E0E               	movwf	?_writeEEPROM,c
 11513  000962  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11514  000966  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11515                           
 11516                           ;main.c: 2072: rv = readEEPROM(0x5B);
 11517  00096A  6A0F               	clrf	?_readEEPROM+1,c
 11518  00096C  0E5B               	movlw	91
 11519  00096E  6E0E               	movwf	?_readEEPROM,c
 11520  000970  EC00  F02C         	call	_readEEPROM	;wreg free
 11521  000974  EFB5  F009         	goto	L19
 11522  000978                     l10846:
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;main.c: 2077: writeEEPROM(0x5C, val);
 11526  000978  6A0F               	clrf	?_writeEEPROM+1,c
 11527  00097A  0E5C               	movlw	92
 11528  00097C  6E0E               	movwf	?_writeEEPROM,c
 11529  00097E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11530  000982  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11531                           
 11532                           ;main.c: 2078: rv = readEEPROM(0x5C);
 11533  000986  6A0F               	clrf	?_readEEPROM+1,c
 11534  000988  0E5C               	movlw	92
 11535  00098A  6E0E               	movwf	?_readEEPROM,c
 11536  00098C  EC00  F02C         	call	_readEEPROM	;wreg free
 11537  000990  EFB5  F009         	goto	L19
 11538  000994                     l10848:
 11539                           
 11540                           ; BSR set to: 0
 11541                           ;main.c: 2083: writeEEPROM(0x5D, val);
 11542  000994  6A0F               	clrf	?_writeEEPROM+1,c
 11543  000996  0E5D               	movlw	93
 11544  000998  6E0E               	movwf	?_writeEEPROM,c
 11545  00099A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11546  00099E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11547                           
 11548                           ;main.c: 2084: rv = readEEPROM(0x5D);
 11549  0009A2  6A0F               	clrf	?_readEEPROM+1,c
 11550  0009A4  0E5D               	movlw	93
 11551  0009A6  6E0E               	movwf	?_readEEPROM,c
 11552  0009A8  EC00  F02C         	call	_readEEPROM	;wreg free
 11553  0009AC  EFB5  F009         	goto	L19
 11554  0009B0                     l10850:
 11555                           
 11556                           ; BSR set to: 0
 11557                           ;main.c: 2089: writeEEPROM(0x5E, val);
 11558  0009B0  6A0F               	clrf	?_writeEEPROM+1,c
 11559  0009B2  0E5E               	movlw	94
 11560  0009B4  6E0E               	movwf	?_writeEEPROM,c
 11561  0009B6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11562  0009BA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11563                           
 11564                           ;main.c: 2090: rv = readEEPROM(0x5E);
 11565  0009BE  6A0F               	clrf	?_readEEPROM+1,c
 11566  0009C0  0E5E               	movlw	94
 11567  0009C2  6E0E               	movwf	?_readEEPROM,c
 11568  0009C4  EC00  F02C         	call	_readEEPROM	;wreg free
 11569  0009C8  EFB5  F009         	goto	L19
 11570  0009CC                     l10852:
 11571                           
 11572                           ; BSR set to: 0
 11573                           ;main.c: 2095: writeEEPROM(0x5F, val);
 11574  0009CC  6A0F               	clrf	?_writeEEPROM+1,c
 11575  0009CE  0E5F               	movlw	95
 11576  0009D0  6E0E               	movwf	?_writeEEPROM,c
 11577  0009D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11578  0009D6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11579                           
 11580                           ;main.c: 2096: rv = readEEPROM(0x5F);
 11581  0009DA  6A0F               	clrf	?_readEEPROM+1,c
 11582  0009DC  0E5F               	movlw	95
 11583  0009DE  6E0E               	movwf	?_readEEPROM,c
 11584  0009E0  EC00  F02C         	call	_readEEPROM	;wreg free
 11585  0009E4  EFB5  F009         	goto	L19
 11586  0009E8                     l10854:
 11587                           
 11588                           ; BSR set to: 0
 11589                           ;main.c: 2101: writeEEPROM(0x60, val);
 11590  0009E8  6A0F               	clrf	?_writeEEPROM+1,c
 11591  0009EA  0E60               	movlw	96
 11592  0009EC  6E0E               	movwf	?_writeEEPROM,c
 11593  0009EE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11594  0009F2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11595                           
 11596                           ;main.c: 2102: rv = readEEPROM(0x60);
 11597  0009F6  6A0F               	clrf	?_readEEPROM+1,c
 11598  0009F8  0E60               	movlw	96
 11599  0009FA  6E0E               	movwf	?_readEEPROM,c
 11600  0009FC  EC00  F02C         	call	_readEEPROM	;wreg free
 11601  000A00  EFB5  F009         	goto	L19
 11602  000A04                     l10856:
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;main.c: 2107: writeEEPROM(0x61, val);
 11606  000A04  6A0F               	clrf	?_writeEEPROM+1,c
 11607  000A06  0E61               	movlw	97
 11608  000A08  6E0E               	movwf	?_writeEEPROM,c
 11609  000A0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11610  000A0E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11611                           
 11612                           ;main.c: 2108: rv = readEEPROM(0x61);
 11613  000A12  6A0F               	clrf	?_readEEPROM+1,c
 11614  000A14  0E61               	movlw	97
 11615  000A16  6E0E               	movwf	?_readEEPROM,c
 11616  000A18  EC00  F02C         	call	_readEEPROM	;wreg free
 11617  000A1C  EFB5  F009         	goto	L19
 11618  000A20                     l10858:
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;main.c: 2113: writeEEPROM(0x62, val);
 11622  000A20  6A0F               	clrf	?_writeEEPROM+1,c
 11623  000A22  0E62               	movlw	98
 11624  000A24  6E0E               	movwf	?_writeEEPROM,c
 11625  000A26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11626  000A2A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11627                           
 11628                           ;main.c: 2114: rv = readEEPROM(0x62);
 11629  000A2E  6A0F               	clrf	?_readEEPROM+1,c
 11630  000A30  0E62               	movlw	98
 11631  000A32  6E0E               	movwf	?_readEEPROM,c
 11632  000A34  EC00  F02C         	call	_readEEPROM	;wreg free
 11633  000A38  EFB5  F009         	goto	L19
 11634  000A3C                     l10860:
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;main.c: 2119: writeEEPROM(0x63, val);
 11638  000A3C  6A0F               	clrf	?_writeEEPROM+1,c
 11639  000A3E  0E63               	movlw	99
 11640  000A40  6E0E               	movwf	?_writeEEPROM,c
 11641  000A42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11642  000A46  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11643                           
 11644                           ;main.c: 2120: rv = readEEPROM(0x63);
 11645  000A4A  6A0F               	clrf	?_readEEPROM+1,c
 11646  000A4C  0E63               	movlw	99
 11647  000A4E  6E0E               	movwf	?_readEEPROM,c
 11648  000A50  EC00  F02C         	call	_readEEPROM	;wreg free
 11649  000A54  EFB5  F009         	goto	L19
 11650  000A58                     l10862:
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;main.c: 2125: writeEEPROM(0x64, val);
 11654  000A58  6A0F               	clrf	?_writeEEPROM+1,c
 11655  000A5A  0E64               	movlw	100
 11656  000A5C  6E0E               	movwf	?_writeEEPROM,c
 11657  000A5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11658  000A62  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11659                           
 11660                           ;main.c: 2126: rv = readEEPROM(0x64);
 11661  000A66  6A0F               	clrf	?_readEEPROM+1,c
 11662  000A68  0E64               	movlw	100
 11663  000A6A  6E0E               	movwf	?_readEEPROM,c
 11664  000A6C  EC00  F02C         	call	_readEEPROM	;wreg free
 11665  000A70  EFB5  F009         	goto	L19
 11666  000A74                     l10864:
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;main.c: 2131: writeEEPROM(0x65, val);
 11670  000A74  6A0F               	clrf	?_writeEEPROM+1,c
 11671  000A76  0E65               	movlw	101
 11672  000A78  6E0E               	movwf	?_writeEEPROM,c
 11673  000A7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11674  000A7E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11675                           
 11676                           ;main.c: 2132: rv = readEEPROM(0x65);
 11677  000A82  6A0F               	clrf	?_readEEPROM+1,c
 11678  000A84  0E65               	movlw	101
 11679  000A86  6E0E               	movwf	?_readEEPROM,c
 11680  000A88  EC00  F02C         	call	_readEEPROM	;wreg free
 11681  000A8C  EFB5  F009         	goto	L19
 11682  000A90                     l10866:
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;main.c: 2137: writeEEPROM(0x66, val);
 11686  000A90  6A0F               	clrf	?_writeEEPROM+1,c
 11687  000A92  0E66               	movlw	102
 11688  000A94  6E0E               	movwf	?_writeEEPROM,c
 11689  000A96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11690  000A9A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11691                           
 11692                           ;main.c: 2138: rv = readEEPROM(0x66);
 11693  000A9E  6A0F               	clrf	?_readEEPROM+1,c
 11694  000AA0  0E66               	movlw	102
 11695  000AA2  6E0E               	movwf	?_readEEPROM,c
 11696  000AA4  EC00  F02C         	call	_readEEPROM	;wreg free
 11697  000AA8  EFB5  F009         	goto	L19
 11698  000AAC                     l10868:
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;main.c: 2147: writeEEPROM(0x67, val);
 11702  000AAC  6A0F               	clrf	?_writeEEPROM+1,c
 11703  000AAE  0E67               	movlw	103
 11704  000AB0  6E0E               	movwf	?_writeEEPROM,c
 11705  000AB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11706  000AB6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11707                           
 11708                           ;main.c: 2148: rv = readEEPROM(0x67);
 11709  000ABA  6A0F               	clrf	?_readEEPROM+1,c
 11710  000ABC  0E67               	movlw	103
 11711  000ABE  6E0E               	movwf	?_readEEPROM,c
 11712  000AC0  EC00  F02C         	call	_readEEPROM	;wreg free
 11713  000AC4  EFB5  F009         	goto	L19
 11714  000AC8                     l10870:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;main.c: 2153: writeEEPROM(0x68, val);
 11718  000AC8  6A0F               	clrf	?_writeEEPROM+1,c
 11719  000ACA  0E68               	movlw	104
 11720  000ACC  6E0E               	movwf	?_writeEEPROM,c
 11721  000ACE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11722  000AD2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11723                           
 11724                           ;main.c: 2154: rv = readEEPROM(0x68);
 11725  000AD6  6A0F               	clrf	?_readEEPROM+1,c
 11726  000AD8  0E68               	movlw	104
 11727  000ADA  6E0E               	movwf	?_readEEPROM,c
 11728  000ADC  EC00  F02C         	call	_readEEPROM	;wreg free
 11729  000AE0  EFB5  F009         	goto	L19
 11730  000AE4                     l10872:
 11731                           
 11732                           ; BSR set to: 0
 11733                           ;main.c: 2159: writeEEPROM(0x69, val);
 11734  000AE4  6A0F               	clrf	?_writeEEPROM+1,c
 11735  000AE6  0E69               	movlw	105
 11736  000AE8  6E0E               	movwf	?_writeEEPROM,c
 11737  000AEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11738  000AEE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11739                           
 11740                           ;main.c: 2160: rv = readEEPROM(0x69);
 11741  000AF2  6A0F               	clrf	?_readEEPROM+1,c
 11742  000AF4  0E69               	movlw	105
 11743  000AF6  6E0E               	movwf	?_readEEPROM,c
 11744  000AF8  EC00  F02C         	call	_readEEPROM	;wreg free
 11745  000AFC  EFB5  F009         	goto	L19
 11746  000B00                     l10874:
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;main.c: 2165: writeEEPROM(0x6A, val);
 11750  000B00  6A0F               	clrf	?_writeEEPROM+1,c
 11751  000B02  0E6A               	movlw	106
 11752  000B04  6E0E               	movwf	?_writeEEPROM,c
 11753  000B06  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11754  000B0A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11755                           
 11756                           ;main.c: 2166: rv = readEEPROM(0x6A);
 11757  000B0E  6A0F               	clrf	?_readEEPROM+1,c
 11758  000B10  0E6A               	movlw	106
 11759  000B12  6E0E               	movwf	?_readEEPROM,c
 11760  000B14  EC00  F02C         	call	_readEEPROM	;wreg free
 11761  000B18  EFB5  F009         	goto	L19
 11762  000B1C                     l10876:
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;main.c: 2171: writeEEPROM(0x6B, val);
 11766  000B1C  6A0F               	clrf	?_writeEEPROM+1,c
 11767  000B1E  0E6B               	movlw	107
 11768  000B20  6E0E               	movwf	?_writeEEPROM,c
 11769  000B22  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11770  000B26  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11771                           
 11772                           ;main.c: 2172: rv = readEEPROM(0x6B);
 11773  000B2A  6A0F               	clrf	?_readEEPROM+1,c
 11774  000B2C  0E6B               	movlw	107
 11775  000B2E  6E0E               	movwf	?_readEEPROM,c
 11776  000B30  EC00  F02C         	call	_readEEPROM	;wreg free
 11777  000B34  EFB5  F009         	goto	L19
 11778  000B38                     l10878:
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;main.c: 2177: writeEEPROM(0x6C, val);
 11782  000B38  6A0F               	clrf	?_writeEEPROM+1,c
 11783  000B3A  0E6C               	movlw	108
 11784  000B3C  6E0E               	movwf	?_writeEEPROM,c
 11785  000B3E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11786  000B42  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11787                           
 11788                           ;main.c: 2178: rv = readEEPROM(0x6C);
 11789  000B46  6A0F               	clrf	?_readEEPROM+1,c
 11790  000B48  0E6C               	movlw	108
 11791  000B4A  6E0E               	movwf	?_readEEPROM,c
 11792  000B4C  EC00  F02C         	call	_readEEPROM	;wreg free
 11793  000B50  EFB5  F009         	goto	L19
 11794  000B54                     l10880:
 11795                           
 11796                           ; BSR set to: 0
 11797                           ;main.c: 2183: writeEEPROM(0x6D, val);
 11798  000B54  6A0F               	clrf	?_writeEEPROM+1,c
 11799  000B56  0E6D               	movlw	109
 11800  000B58  6E0E               	movwf	?_writeEEPROM,c
 11801  000B5A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11802  000B5E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11803                           
 11804                           ;main.c: 2184: rv = readEEPROM(0x6D);
 11805  000B62  6A0F               	clrf	?_readEEPROM+1,c
 11806  000B64  0E6D               	movlw	109
 11807  000B66  6E0E               	movwf	?_readEEPROM,c
 11808  000B68  EC00  F02C         	call	_readEEPROM	;wreg free
 11809  000B6C  D3FE               	goto	L19
 11810  000B6E                     l10882:
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;main.c: 2189: writeEEPROM(0x6E, val);
 11814  000B6E  6A0F               	clrf	?_writeEEPROM+1,c
 11815  000B70  0E6E               	movlw	110
 11816  000B72  6E0E               	movwf	?_writeEEPROM,c
 11817  000B74  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11818  000B78  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11819                           
 11820                           ;main.c: 2190: rv = readEEPROM(0x6E);
 11821  000B7C  6A0F               	clrf	?_readEEPROM+1,c
 11822  000B7E  0E6E               	movlw	110
 11823  000B80  6E0E               	movwf	?_readEEPROM,c
 11824  000B82  EC00  F02C         	call	_readEEPROM	;wreg free
 11825  000B86  D3F1               	goto	L19
 11826  000B88                     l10884:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 2195: writeEEPROM(0x6F, val);
 11830  000B88  6A0F               	clrf	?_writeEEPROM+1,c
 11831  000B8A  0E6F               	movlw	111
 11832  000B8C  6E0E               	movwf	?_writeEEPROM,c
 11833  000B8E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11834  000B92  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11835                           
 11836                           ;main.c: 2196: rv = readEEPROM(0x6F);
 11837  000B96  6A0F               	clrf	?_readEEPROM+1,c
 11838  000B98  0E6F               	movlw	111
 11839  000B9A  6E0E               	movwf	?_readEEPROM,c
 11840  000B9C  EC00  F02C         	call	_readEEPROM	;wreg free
 11841  000BA0  D3E4               	goto	L19
 11842  000BA2                     l10886:
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;main.c: 2201: writeEEPROM(0x70, val);
 11846  000BA2  6A0F               	clrf	?_writeEEPROM+1,c
 11847  000BA4  0E70               	movlw	112
 11848  000BA6  6E0E               	movwf	?_writeEEPROM,c
 11849  000BA8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11850  000BAC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11851                           
 11852                           ;main.c: 2202: rv = readEEPROM(0x70);
 11853  000BB0  6A0F               	clrf	?_readEEPROM+1,c
 11854  000BB2  0E70               	movlw	112
 11855  000BB4  6E0E               	movwf	?_readEEPROM,c
 11856  000BB6  EC00  F02C         	call	_readEEPROM	;wreg free
 11857  000BBA  D3D7               	goto	L19
 11858  000BBC                     l10888:
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;main.c: 2207: writeEEPROM(0x71, val);
 11862  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 11863  000BBE  0E71               	movlw	113
 11864  000BC0  6E0E               	movwf	?_writeEEPROM,c
 11865  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11866  000BC6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11867                           
 11868                           ;main.c: 2208: rv = readEEPROM(0x71);
 11869  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 11870  000BCC  0E71               	movlw	113
 11871  000BCE  6E0E               	movwf	?_readEEPROM,c
 11872  000BD0  EC00  F02C         	call	_readEEPROM	;wreg free
 11873  000BD4  D3CA               	goto	L19
 11874  000BD6                     l10890:
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;main.c: 2213: writeEEPROM(0x72, val);
 11878  000BD6  6A0F               	clrf	?_writeEEPROM+1,c
 11879  000BD8  0E72               	movlw	114
 11880  000BDA  6E0E               	movwf	?_writeEEPROM,c
 11881  000BDC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11882  000BE0  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11883                           
 11884                           ;main.c: 2214: rv = readEEPROM(0x72);
 11885  000BE4  6A0F               	clrf	?_readEEPROM+1,c
 11886  000BE6  0E72               	movlw	114
 11887  000BE8  6E0E               	movwf	?_readEEPROM,c
 11888  000BEA  EC00  F02C         	call	_readEEPROM	;wreg free
 11889  000BEE  D3BD               	goto	L19
 11890  000BF0                     l10892:
 11891                           
 11892                           ; BSR set to: 0
 11893                           ;main.c: 2223: writeEEPROM(0x73, val);
 11894  000BF0  6A0F               	clrf	?_writeEEPROM+1,c
 11895  000BF2  0E73               	movlw	115
 11896  000BF4  6E0E               	movwf	?_writeEEPROM,c
 11897  000BF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11898  000BFA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11899                           
 11900                           ;main.c: 2224: rv = readEEPROM(0x73);
 11901  000BFE  6A0F               	clrf	?_readEEPROM+1,c
 11902  000C00  0E73               	movlw	115
 11903  000C02  6E0E               	movwf	?_readEEPROM,c
 11904  000C04  EC00  F02C         	call	_readEEPROM	;wreg free
 11905  000C08  D3B0               	goto	L19
 11906  000C0A                     l10894:
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;main.c: 2229: writeEEPROM(0x74, val);
 11910  000C0A  6A0F               	clrf	?_writeEEPROM+1,c
 11911  000C0C  0E74               	movlw	116
 11912  000C0E  6E0E               	movwf	?_writeEEPROM,c
 11913  000C10  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11914  000C14  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11915                           
 11916                           ;main.c: 2230: rv = readEEPROM(0x74);
 11917  000C18  6A0F               	clrf	?_readEEPROM+1,c
 11918  000C1A  0E74               	movlw	116
 11919  000C1C  6E0E               	movwf	?_readEEPROM,c
 11920  000C1E  EC00  F02C         	call	_readEEPROM	;wreg free
 11921  000C22  D3A3               	goto	L19
 11922  000C24                     l10896:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;main.c: 2235: writeEEPROM(0x75, val);
 11926  000C24  6A0F               	clrf	?_writeEEPROM+1,c
 11927  000C26  0E75               	movlw	117
 11928  000C28  6E0E               	movwf	?_writeEEPROM,c
 11929  000C2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11930  000C2E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11931                           
 11932                           ;main.c: 2236: rv = readEEPROM(0x75);
 11933  000C32  6A0F               	clrf	?_readEEPROM+1,c
 11934  000C34  0E75               	movlw	117
 11935  000C36  6E0E               	movwf	?_readEEPROM,c
 11936  000C38  EC00  F02C         	call	_readEEPROM	;wreg free
 11937  000C3C  D396               	goto	L19
 11938  000C3E                     l10898:
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;main.c: 2241: writeEEPROM(0x76, val);
 11942  000C3E  6A0F               	clrf	?_writeEEPROM+1,c
 11943  000C40  0E76               	movlw	118
 11944  000C42  6E0E               	movwf	?_writeEEPROM,c
 11945  000C44  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11946  000C48  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11947                           
 11948                           ;main.c: 2242: rv = readEEPROM(0x76);
 11949  000C4C  6A0F               	clrf	?_readEEPROM+1,c
 11950  000C4E  0E76               	movlw	118
 11951  000C50  6E0E               	movwf	?_readEEPROM,c
 11952  000C52  EC00  F02C         	call	_readEEPROM	;wreg free
 11953  000C56  D389               	goto	L19
 11954  000C58                     l10900:
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;main.c: 2247: writeEEPROM(0x77, val);
 11958  000C58  6A0F               	clrf	?_writeEEPROM+1,c
 11959  000C5A  0E77               	movlw	119
 11960  000C5C  6E0E               	movwf	?_writeEEPROM,c
 11961  000C5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11962  000C62  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11963                           
 11964                           ;main.c: 2248: rv = readEEPROM(0x77);
 11965  000C66  6A0F               	clrf	?_readEEPROM+1,c
 11966  000C68  0E77               	movlw	119
 11967  000C6A  6E0E               	movwf	?_readEEPROM,c
 11968  000C6C  EC00  F02C         	call	_readEEPROM	;wreg free
 11969  000C70  D37C               	goto	L19
 11970  000C72                     l10902:
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;main.c: 2253: writeEEPROM(0x78, val);
 11974  000C72  6A0F               	clrf	?_writeEEPROM+1,c
 11975  000C74  0E78               	movlw	120
 11976  000C76  6E0E               	movwf	?_writeEEPROM,c
 11977  000C78  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11978  000C7C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11979                           
 11980                           ;main.c: 2254: rv = readEEPROM(0x78);
 11981  000C80  6A0F               	clrf	?_readEEPROM+1,c
 11982  000C82  0E78               	movlw	120
 11983  000C84  6E0E               	movwf	?_readEEPROM,c
 11984  000C86  EC00  F02C         	call	_readEEPROM	;wreg free
 11985  000C8A  D36F               	goto	L19
 11986  000C8C                     l10904:
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;main.c: 2259: writeEEPROM(0x79, val);
 11990  000C8C  6A0F               	clrf	?_writeEEPROM+1,c
 11991  000C8E  0E79               	movlw	121
 11992  000C90  6E0E               	movwf	?_writeEEPROM,c
 11993  000C92  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11994  000C96  ECFD  F02A         	call	_writeEEPROM	;wreg free
 11995                           
 11996                           ;main.c: 2260: rv = readEEPROM(0x79);
 11997  000C9A  6A0F               	clrf	?_readEEPROM+1,c
 11998  000C9C  0E79               	movlw	121
 11999  000C9E  6E0E               	movwf	?_readEEPROM,c
 12000  000CA0  EC00  F02C         	call	_readEEPROM	;wreg free
 12001  000CA4  D362               	goto	L19
 12002  000CA6                     l10906:
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;main.c: 2265: writeEEPROM(0x7A, val);
 12006  000CA6  6A0F               	clrf	?_writeEEPROM+1,c
 12007  000CA8  0E7A               	movlw	122
 12008  000CAA  6E0E               	movwf	?_writeEEPROM,c
 12009  000CAC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12010  000CB0  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12011                           
 12012                           ;main.c: 2266: rv = readEEPROM(0x7A);
 12013  000CB4  6A0F               	clrf	?_readEEPROM+1,c
 12014  000CB6  0E7A               	movlw	122
 12015  000CB8  6E0E               	movwf	?_readEEPROM,c
 12016  000CBA  EC00  F02C         	call	_readEEPROM	;wreg free
 12017  000CBE  D355               	goto	L19
 12018  000CC0                     l10908:
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;main.c: 2271: writeEEPROM(0x7B, val);
 12022  000CC0  6A0F               	clrf	?_writeEEPROM+1,c
 12023  000CC2  0E7B               	movlw	123
 12024  000CC4  6E0E               	movwf	?_writeEEPROM,c
 12025  000CC6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12026  000CCA  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12027                           
 12028                           ;main.c: 2272: rv = readEEPROM(0x7B);
 12029  000CCE  6A0F               	clrf	?_readEEPROM+1,c
 12030  000CD0  0E7B               	movlw	123
 12031  000CD2  6E0E               	movwf	?_readEEPROM,c
 12032  000CD4  EC00  F02C         	call	_readEEPROM	;wreg free
 12033  000CD8  D348               	goto	L19
 12034  000CDA                     l10910:
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;main.c: 2277: writeEEPROM(0x7C, val);
 12038  000CDA  6A0F               	clrf	?_writeEEPROM+1,c
 12039  000CDC  0E7C               	movlw	124
 12040  000CDE  6E0E               	movwf	?_writeEEPROM,c
 12041  000CE0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12042  000CE4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12043                           
 12044                           ;main.c: 2278: rv = readEEPROM(0x7C);
 12045  000CE8  6A0F               	clrf	?_readEEPROM+1,c
 12046  000CEA  0E7C               	movlw	124
 12047  000CEC  6E0E               	movwf	?_readEEPROM,c
 12048  000CEE  EC00  F02C         	call	_readEEPROM	;wreg free
 12049  000CF2  D33B               	goto	L19
 12050  000CF4                     l10912:
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;main.c: 2283: writeEEPROM(0x7D, val);
 12054  000CF4  6A0F               	clrf	?_writeEEPROM+1,c
 12055  000CF6  0E7D               	movlw	125
 12056  000CF8  6E0E               	movwf	?_writeEEPROM,c
 12057  000CFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12058  000CFE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12059                           
 12060                           ;main.c: 2284: rv = readEEPROM(0x7D);
 12061  000D02  6A0F               	clrf	?_readEEPROM+1,c
 12062  000D04  0E7D               	movlw	125
 12063  000D06  6E0E               	movwf	?_readEEPROM,c
 12064  000D08  EC00  F02C         	call	_readEEPROM	;wreg free
 12065  000D0C  D32E               	goto	L19
 12066  000D0E                     l10914:
 12067                           
 12068                           ; BSR set to: 0
 12069                           ;main.c: 2289: writeEEPROM(0x7E, val);
 12070  000D0E  6A0F               	clrf	?_writeEEPROM+1,c
 12071  000D10  0E7E               	movlw	126
 12072  000D12  6E0E               	movwf	?_writeEEPROM,c
 12073  000D14  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12074  000D18  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12075                           
 12076                           ;main.c: 2290: rv = readEEPROM(0x7E);
 12077  000D1C  6A0F               	clrf	?_readEEPROM+1,c
 12078  000D1E  0E7E               	movlw	126
 12079  000D20  6E0E               	movwf	?_readEEPROM,c
 12080  000D22  EC00  F02C         	call	_readEEPROM	;wreg free
 12081  000D26  D321               	goto	L19
 12082  000D28                     l10916:
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;main.c: 2299: writeEEPROM(0x7F, val );
 12086  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 12087  000D2A  0E7F               	movlw	127
 12088  000D2C  6E0E               	movwf	?_writeEEPROM,c
 12089  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12090  000D32  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12091                           
 12092                           ;main.c: 2300: rv = readEEPROM(0x7F);
 12093  000D36  6A0F               	clrf	?_readEEPROM+1,c
 12094  000D38  0E7F               	movlw	127
 12095  000D3A  6E0E               	movwf	?_readEEPROM,c
 12096  000D3C  EC00  F02C         	call	_readEEPROM	;wreg free
 12097  000D40  D314               	goto	L19
 12098  000D42                     l10918:
 12099                           
 12100                           ; BSR set to: 0
 12101                           ;main.c: 2305: writeEEPROM(0x80, val );
 12102  000D42  6A0F               	clrf	?_writeEEPROM+1,c
 12103  000D44  0E80               	movlw	128
 12104  000D46  6E0E               	movwf	?_writeEEPROM,c
 12105  000D48  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12106  000D4C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12107                           
 12108                           ;main.c: 2306: rv = readEEPROM(0x80);
 12109  000D50  6A0F               	clrf	?_readEEPROM+1,c
 12110  000D52  0E80               	movlw	128
 12111  000D54  6E0E               	movwf	?_readEEPROM,c
 12112  000D56  EC00  F02C         	call	_readEEPROM	;wreg free
 12113  000D5A  D307               	goto	L19
 12114  000D5C                     l10920:
 12115                           
 12116                           ; BSR set to: 0
 12117                           ;main.c: 2311: writeEEPROM(0x81, val );
 12118  000D5C  6A0F               	clrf	?_writeEEPROM+1,c
 12119  000D5E  0E81               	movlw	129
 12120  000D60  6E0E               	movwf	?_writeEEPROM,c
 12121  000D62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12122  000D66  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12123                           
 12124                           ;main.c: 2312: rv = readEEPROM(0x81);
 12125  000D6A  6A0F               	clrf	?_readEEPROM+1,c
 12126  000D6C  0E81               	movlw	129
 12127  000D6E  6E0E               	movwf	?_readEEPROM,c
 12128  000D70  EC00  F02C         	call	_readEEPROM	;wreg free
 12129  000D74  D2FA               	goto	L19
 12130  000D76                     l10922:
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;main.c: 2317: writeEEPROM(0x82, val );
 12134  000D76  6A0F               	clrf	?_writeEEPROM+1,c
 12135  000D78  0E82               	movlw	130
 12136  000D7A  6E0E               	movwf	?_writeEEPROM,c
 12137  000D7C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12138  000D80  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12139                           
 12140                           ;main.c: 2318: rv = readEEPROM(0x82);
 12141  000D84  6A0F               	clrf	?_readEEPROM+1,c
 12142  000D86  0E82               	movlw	130
 12143  000D88  6E0E               	movwf	?_readEEPROM,c
 12144  000D8A  EC00  F02C         	call	_readEEPROM	;wreg free
 12145  000D8E  D2ED               	goto	L19
 12146  000D90                     l10924:
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;main.c: 2323: writeEEPROM(0x83, val );
 12150  000D90  6A0F               	clrf	?_writeEEPROM+1,c
 12151  000D92  0E83               	movlw	131
 12152  000D94  6E0E               	movwf	?_writeEEPROM,c
 12153  000D96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12154  000D9A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12155                           
 12156                           ;main.c: 2324: rv = readEEPROM(0x83);
 12157  000D9E  6A0F               	clrf	?_readEEPROM+1,c
 12158  000DA0  0E83               	movlw	131
 12159  000DA2  6E0E               	movwf	?_readEEPROM,c
 12160  000DA4  EC00  F02C         	call	_readEEPROM	;wreg free
 12161  000DA8  D2E0               	goto	L19
 12162  000DAA                     l10926:
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;main.c: 2329: writeEEPROM(0x84, val );
 12166  000DAA  6A0F               	clrf	?_writeEEPROM+1,c
 12167  000DAC  0E84               	movlw	132
 12168  000DAE  6E0E               	movwf	?_writeEEPROM,c
 12169  000DB0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12170  000DB4  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12171                           
 12172                           ;main.c: 2330: rv = readEEPROM(0x84);
 12173  000DB8  6A0F               	clrf	?_readEEPROM+1,c
 12174  000DBA  0E84               	movlw	132
 12175  000DBC  6E0E               	movwf	?_readEEPROM,c
 12176  000DBE  EC00  F02C         	call	_readEEPROM	;wreg free
 12177  000DC2  D2D3               	goto	L19
 12178  000DC4                     l10928:
 12179                           
 12180                           ; BSR set to: 0
 12181                           ;main.c: 2335: writeEEPROM(0x85, val );
 12182  000DC4  6A0F               	clrf	?_writeEEPROM+1,c
 12183  000DC6  0E85               	movlw	133
 12184  000DC8  6E0E               	movwf	?_writeEEPROM,c
 12185  000DCA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12186  000DCE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12187                           
 12188                           ;main.c: 2336: rv = readEEPROM(0x85);
 12189  000DD2  6A0F               	clrf	?_readEEPROM+1,c
 12190  000DD4  0E85               	movlw	133
 12191  000DD6  6E0E               	movwf	?_readEEPROM,c
 12192  000DD8  EC00  F02C         	call	_readEEPROM	;wreg free
 12193  000DDC  D2C6               	goto	L19
 12194  000DDE                     l10930:
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;main.c: 2341: writeEEPROM(0x86, val );
 12198  000DDE  6A0F               	clrf	?_writeEEPROM+1,c
 12199  000DE0  0E86               	movlw	134
 12200  000DE2  6E0E               	movwf	?_writeEEPROM,c
 12201  000DE4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12202  000DE8  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12203                           
 12204                           ;main.c: 2342: rv = readEEPROM(0x86);
 12205  000DEC  6A0F               	clrf	?_readEEPROM+1,c
 12206  000DEE  0E86               	movlw	134
 12207  000DF0  6E0E               	movwf	?_readEEPROM,c
 12208  000DF2  EC00  F02C         	call	_readEEPROM	;wreg free
 12209  000DF6  D2B9               	goto	L19
 12210  000DF8                     l10932:
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;main.c: 2347: writeEEPROM(0x87, val );
 12214  000DF8  6A0F               	clrf	?_writeEEPROM+1,c
 12215  000DFA  0E87               	movlw	135
 12216  000DFC  6E0E               	movwf	?_writeEEPROM,c
 12217  000DFE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12218  000E02  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12219                           
 12220                           ;main.c: 2348: rv = readEEPROM(0x87);
 12221  000E06  6A0F               	clrf	?_readEEPROM+1,c
 12222  000E08  0E87               	movlw	135
 12223  000E0A  6E0E               	movwf	?_readEEPROM,c
 12224  000E0C  EC00  F02C         	call	_readEEPROM	;wreg free
 12225  000E10  D2AC               	goto	L19
 12226  000E12                     l10934:
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;main.c: 2353: writeEEPROM(0x88, val );
 12230  000E12  6A0F               	clrf	?_writeEEPROM+1,c
 12231  000E14  0E88               	movlw	136
 12232  000E16  6E0E               	movwf	?_writeEEPROM,c
 12233  000E18  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12234  000E1C  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12235                           
 12236                           ;main.c: 2354: rv = readEEPROM(0x88);
 12237  000E20  6A0F               	clrf	?_readEEPROM+1,c
 12238  000E22  0E88               	movlw	136
 12239  000E24  6E0E               	movwf	?_readEEPROM,c
 12240  000E26  EC00  F02C         	call	_readEEPROM	;wreg free
 12241  000E2A  D29F               	goto	L19
 12242  000E2C                     l10936:
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;main.c: 2359: writeEEPROM(0x89, val );
 12246  000E2C  6A0F               	clrf	?_writeEEPROM+1,c
 12247  000E2E  0E89               	movlw	137
 12248  000E30  6E0E               	movwf	?_writeEEPROM,c
 12249  000E32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12250  000E36  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12251                           
 12252                           ;main.c: 2360: rv = readEEPROM(0x89);
 12253  000E3A  6A0F               	clrf	?_readEEPROM+1,c
 12254  000E3C  0E89               	movlw	137
 12255  000E3E  6E0E               	movwf	?_readEEPROM,c
 12256  000E40  EC00  F02C         	call	_readEEPROM	;wreg free
 12257  000E44  D292               	goto	L19
 12258  000E46                     l10938:
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;main.c: 2365: writeEEPROM(0x8A, val );
 12262  000E46  6A0F               	clrf	?_writeEEPROM+1,c
 12263  000E48  0E8A               	movlw	138
 12264  000E4A  6E0E               	movwf	?_writeEEPROM,c
 12265  000E4C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12266  000E50  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12267                           
 12268                           ;main.c: 2366: rv = readEEPROM(0x8A);
 12269  000E54  6A0F               	clrf	?_readEEPROM+1,c
 12270  000E56  0E8A               	movlw	138
 12271  000E58  6E0E               	movwf	?_readEEPROM,c
 12272  000E5A  EC00  F02C         	call	_readEEPROM	;wreg free
 12273  000E5E  D285               	goto	L19
 12274  000E60                     l10940:
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;main.c: 2375: writeEEPROM(0x8B, val );
 12278  000E60  6A0F               	clrf	?_writeEEPROM+1,c
 12279  000E62  0E8B               	movlw	139
 12280  000E64  6E0E               	movwf	?_writeEEPROM,c
 12281  000E66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12282  000E6A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12283                           
 12284                           ;main.c: 2376: rv = readEEPROM(0x8B);
 12285  000E6E  6A0F               	clrf	?_readEEPROM+1,c
 12286  000E70  0E8B               	movlw	139
 12287  000E72  6E0E               	movwf	?_readEEPROM,c
 12288  000E74  EC00  F02C         	call	_readEEPROM	;wreg free
 12289  000E78  D278               	goto	L19
 12290  000E7A                     l10942:
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;main.c: 2381: writeEEPROM(0x8C, val );
 12294  000E7A  6A0F               	clrf	?_writeEEPROM+1,c
 12295  000E7C  0E8C               	movlw	140
 12296  000E7E  6E0E               	movwf	?_writeEEPROM,c
 12297  000E80  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12298  000E84  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12299                           
 12300                           ;main.c: 2382: rv = readEEPROM(0x8C);
 12301  000E88  6A0F               	clrf	?_readEEPROM+1,c
 12302  000E8A  0E8C               	movlw	140
 12303  000E8C  6E0E               	movwf	?_readEEPROM,c
 12304  000E8E  EC00  F02C         	call	_readEEPROM	;wreg free
 12305  000E92  D26B               	goto	L19
 12306  000E94                     l10944:
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;main.c: 2387: writeEEPROM(0x8D, val );
 12310  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 12311  000E96  0E8D               	movlw	141
 12312  000E98  6E0E               	movwf	?_writeEEPROM,c
 12313  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12314  000E9E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12315                           
 12316                           ;main.c: 2388: rv = readEEPROM(0x8D);
 12317  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 12318  000EA4  0E8D               	movlw	141
 12319  000EA6  6E0E               	movwf	?_readEEPROM,c
 12320  000EA8  EC00  F02C         	call	_readEEPROM	;wreg free
 12321  000EAC  D25E               	goto	L19
 12322  000EAE                     l10946:
 12323                           
 12324                           ; BSR set to: 0
 12325                           ;main.c: 2393: writeEEPROM(0x8E, val );
 12326  000EAE  6A0F               	clrf	?_writeEEPROM+1,c
 12327  000EB0  0E8E               	movlw	142
 12328  000EB2  6E0E               	movwf	?_writeEEPROM,c
 12329  000EB4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12330  000EB8  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12331                           
 12332                           ;main.c: 2394: rv = readEEPROM(0x8E);
 12333  000EBC  6A0F               	clrf	?_readEEPROM+1,c
 12334  000EBE  0E8E               	movlw	142
 12335  000EC0  6E0E               	movwf	?_readEEPROM,c
 12336  000EC2  EC00  F02C         	call	_readEEPROM	;wreg free
 12337  000EC6  D251               	goto	L19
 12338  000EC8                     l10948:
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;main.c: 2399: writeEEPROM(0x8F, val );
 12342  000EC8  6A0F               	clrf	?_writeEEPROM+1,c
 12343  000ECA  0E8F               	movlw	143
 12344  000ECC  6E0E               	movwf	?_writeEEPROM,c
 12345  000ECE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12346  000ED2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12347                           
 12348                           ;main.c: 2400: rv = readEEPROM(0x8F);
 12349  000ED6  6A0F               	clrf	?_readEEPROM+1,c
 12350  000ED8  0E8F               	movlw	143
 12351  000EDA  6E0E               	movwf	?_readEEPROM,c
 12352  000EDC  EC00  F02C         	call	_readEEPROM	;wreg free
 12353  000EE0  D244               	goto	L19
 12354  000EE2                     l10950:
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;main.c: 2405: writeEEPROM(0x90, val );
 12358  000EE2  6A0F               	clrf	?_writeEEPROM+1,c
 12359  000EE4  0E90               	movlw	144
 12360  000EE6  6E0E               	movwf	?_writeEEPROM,c
 12361  000EE8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12362  000EEC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12363                           
 12364                           ;main.c: 2406: rv = readEEPROM(0x90);
 12365  000EF0  6A0F               	clrf	?_readEEPROM+1,c
 12366  000EF2  0E90               	movlw	144
 12367  000EF4  6E0E               	movwf	?_readEEPROM,c
 12368  000EF6  EC00  F02C         	call	_readEEPROM	;wreg free
 12369  000EFA  D237               	goto	L19
 12370  000EFC                     l10952:
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;main.c: 2411: writeEEPROM(0x91, val );
 12374  000EFC  6A0F               	clrf	?_writeEEPROM+1,c
 12375  000EFE  0E91               	movlw	145
 12376  000F00  6E0E               	movwf	?_writeEEPROM,c
 12377  000F02  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12378  000F06  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12379                           
 12380                           ;main.c: 2412: rv = readEEPROM(0x91);
 12381  000F0A  6A0F               	clrf	?_readEEPROM+1,c
 12382  000F0C  0E91               	movlw	145
 12383  000F0E  6E0E               	movwf	?_readEEPROM,c
 12384  000F10  EC00  F02C         	call	_readEEPROM	;wreg free
 12385  000F14  D22A               	goto	L19
 12386  000F16                     l10954:
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;main.c: 2417: writeEEPROM(0x92, val );
 12390  000F16  6A0F               	clrf	?_writeEEPROM+1,c
 12391  000F18  0E92               	movlw	146
 12392  000F1A  6E0E               	movwf	?_writeEEPROM,c
 12393  000F1C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12394  000F20  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12395                           
 12396                           ;main.c: 2418: rv = readEEPROM(0x92);
 12397  000F24  6A0F               	clrf	?_readEEPROM+1,c
 12398  000F26  0E92               	movlw	146
 12399  000F28  6E0E               	movwf	?_readEEPROM,c
 12400  000F2A  EC00  F02C         	call	_readEEPROM	;wreg free
 12401  000F2E  D21D               	goto	L19
 12402  000F30                     l10956:
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;main.c: 2423: writeEEPROM(0x93, val );
 12406  000F30  6A0F               	clrf	?_writeEEPROM+1,c
 12407  000F32  0E93               	movlw	147
 12408  000F34  6E0E               	movwf	?_writeEEPROM,c
 12409  000F36  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12410  000F3A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12411                           
 12412                           ;main.c: 2424: rv = readEEPROM(0x93);
 12413  000F3E  6A0F               	clrf	?_readEEPROM+1,c
 12414  000F40  0E93               	movlw	147
 12415  000F42  6E0E               	movwf	?_readEEPROM,c
 12416  000F44  EC00  F02C         	call	_readEEPROM	;wreg free
 12417  000F48  D210               	goto	L19
 12418  000F4A                     l10958:
 12419                           
 12420                           ; BSR set to: 0
 12421                           ;main.c: 2429: writeEEPROM(0x94, val );
 12422  000F4A  6A0F               	clrf	?_writeEEPROM+1,c
 12423  000F4C  0E94               	movlw	148
 12424  000F4E  6E0E               	movwf	?_writeEEPROM,c
 12425  000F50  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12426  000F54  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12427                           
 12428                           ;main.c: 2430: rv = readEEPROM(0x94);
 12429  000F58  6A0F               	clrf	?_readEEPROM+1,c
 12430  000F5A  0E94               	movlw	148
 12431  000F5C  6E0E               	movwf	?_readEEPROM,c
 12432  000F5E  EC00  F02C         	call	_readEEPROM	;wreg free
 12433  000F62  D203               	goto	L19
 12434  000F64                     l10960:
 12435                           
 12436                           ; BSR set to: 0
 12437                           ;main.c: 2435: writeEEPROM(0x95, val );
 12438  000F64  6A0F               	clrf	?_writeEEPROM+1,c
 12439  000F66  0E95               	movlw	149
 12440  000F68  6E0E               	movwf	?_writeEEPROM,c
 12441  000F6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12442  000F6E  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12443                           
 12444                           ;main.c: 2436: rv = readEEPROM(0x95);
 12445  000F72  6A0F               	clrf	?_readEEPROM+1,c
 12446  000F74  0E95               	movlw	149
 12447  000F76  6E0E               	movwf	?_readEEPROM,c
 12448  000F78  EC00  F02C         	call	_readEEPROM	;wreg free
 12449  000F7C  D1F6               	goto	L19
 12450  000F7E                     l10962:
 12451                           
 12452                           ; BSR set to: 0
 12453                           ;main.c: 2441: writeEEPROM(0x96, val );
 12454  000F7E  6A0F               	clrf	?_writeEEPROM+1,c
 12455  000F80  0E96               	movlw	150
 12456  000F82  6E0E               	movwf	?_writeEEPROM,c
 12457  000F84  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12458  000F88  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12459                           
 12460                           ;main.c: 2442: rv = readEEPROM(0x96);
 12461  000F8C  6A0F               	clrf	?_readEEPROM+1,c
 12462  000F8E  0E96               	movlw	150
 12463  000F90  6E0E               	movwf	?_readEEPROM,c
 12464  000F92  EC00  F02C         	call	_readEEPROM	;wreg free
 12465  000F96  D1E9               	goto	L19
 12466  000F98                     l10964:
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;main.c: 2451: writeEEPROM(0x97, val);
 12470  000F98  6A0F               	clrf	?_writeEEPROM+1,c
 12471  000F9A  0E97               	movlw	151
 12472  000F9C  6E0E               	movwf	?_writeEEPROM,c
 12473  000F9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12474  000FA2  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12475                           
 12476                           ;main.c: 2452: rv = readEEPROM(0x97);
 12477  000FA6  6A0F               	clrf	?_readEEPROM+1,c
 12478  000FA8  0E97               	movlw	151
 12479  000FAA  6E0E               	movwf	?_readEEPROM,c
 12480  000FAC  EC00  F02C         	call	_readEEPROM	;wreg free
 12481  000FB0  D1DC               	goto	L19
 12482  000FB2                     l10966:
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;main.c: 2457: writeEEPROM(0x98, val);
 12486  000FB2  6A0F               	clrf	?_writeEEPROM+1,c
 12487  000FB4  0E98               	movlw	152
 12488  000FB6  6E0E               	movwf	?_writeEEPROM,c
 12489  000FB8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12490  000FBC  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12491                           
 12492                           ;main.c: 2458: rv = readEEPROM(0x98);
 12493  000FC0  6A0F               	clrf	?_readEEPROM+1,c
 12494  000FC2  0E98               	movlw	152
 12495  000FC4  6E0E               	movwf	?_readEEPROM,c
 12496  000FC6  EC00  F02C         	call	_readEEPROM	;wreg free
 12497  000FCA  D1CF               	goto	L19
 12498  000FCC                     l10968:
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;main.c: 2463: writeEEPROM(0x99, val);
 12502  000FCC  6A0F               	clrf	?_writeEEPROM+1,c
 12503  000FCE  0E99               	movlw	153
 12504  000FD0  6E0E               	movwf	?_writeEEPROM,c
 12505  000FD2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12506  000FD6  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12507  000FDA  6A0F               	clrf	?_readEEPROM+1,c
 12508  000FDC  0E99               	movlw	153
 12509  000FDE  6E0E               	movwf	?_readEEPROM,c
 12510  000FE0  EC00  F02C         	call	_readEEPROM	;wreg free
 12511  000FE4                     l517:
 12512                           
 12513                           ;main.c: 2468: writeEEPROM(0x9A, val);
 12514  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 12515  000FE6  0E9A               	movlw	154
 12516  000FE8  6E0E               	movwf	?_writeEEPROM,c
 12517  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12518  000FEE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12519                           
 12520                           ;main.c: 2469: rv = readEEPROM(0x9A);
 12521  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 12522  000FF4  0E9A               	movlw	154
 12523  000FF6  6E0E               	movwf	?_readEEPROM,c
 12524  000FF8  EC00  F02C         	call	_readEEPROM	;wreg free
 12525  000FFC  D1B6               	goto	L19
 12526  000FFE                     l10970:
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;main.c: 2474: writeEEPROM(0x9B, val);
 12530  000FFE  6A0F               	clrf	?_writeEEPROM+1,c
 12531  001000  0E9B               	movlw	155
 12532  001002  6E0E               	movwf	?_writeEEPROM,c
 12533  001004  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12534  001008  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12535                           
 12536                           ;main.c: 2475: rv = readEEPROM(0x9B);
 12537  00100C  6A0F               	clrf	?_readEEPROM+1,c
 12538  00100E  0E9B               	movlw	155
 12539  001010  6E0E               	movwf	?_readEEPROM,c
 12540  001012  EC00  F02C         	call	_readEEPROM	;wreg free
 12541  001016  D1A9               	goto	L19
 12542  001018                     l10972:
 12543                           
 12544                           ; BSR set to: 0
 12545                           ;main.c: 2480: writeEEPROM(0x9C, val);
 12546  001018  6A0F               	clrf	?_writeEEPROM+1,c
 12547  00101A  0E9C               	movlw	156
 12548  00101C  6E0E               	movwf	?_writeEEPROM,c
 12549  00101E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12550  001022  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12551                           
 12552                           ;main.c: 2481: rv = readEEPROM(0x9C);
 12553  001026  6A0F               	clrf	?_readEEPROM+1,c
 12554  001028  0E9C               	movlw	156
 12555  00102A  6E0E               	movwf	?_readEEPROM,c
 12556  00102C  EC00  F02C         	call	_readEEPROM	;wreg free
 12557  001030  D19C               	goto	L19
 12558  001032                     l520:
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;main.c: 2486: rv = 0;
 12562  001032  6A24               	clrf	vscp_writeAppReg@rv,c
 12563                           
 12564                           ;main.c: 2487: break;
 12565  001034  D19B               	goto	l11008
 12566  001036                     l10974:
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;main.c: 2495: writeEEPROM(0xF2, val);
 12570  001036  6A0F               	clrf	?_writeEEPROM+1,c
 12571  001038  0EF2               	movlw	242
 12572  00103A  6E0E               	movwf	?_writeEEPROM,c
 12573  00103C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12574  001040  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12575                           
 12576                           ;main.c: 2496: rv = readEEPROM(0xF2);
 12577  001044  6A0F               	clrf	?_readEEPROM+1,c
 12578  001046  0EF2               	movlw	242
 12579  001048  6E0E               	movwf	?_readEEPROM,c
 12580  00104A  EC00  F02C         	call	_readEEPROM	;wreg free
 12581  00104E  D18D               	goto	L19
 12582  001050                     l10976:
 12583                           
 12584                           ; BSR set to: 0
 12585                           ;main.c: 2500: writeEEPROM(0xF3, val);
 12586  001050  6A0F               	clrf	?_writeEEPROM+1,c
 12587  001052  0EF3               	movlw	243
 12588  001054  6E0E               	movwf	?_writeEEPROM,c
 12589  001056  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12590  00105A  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12591                           
 12592                           ;main.c: 2501: rv = readEEPROM(0xF3);
 12593  00105E  6A0F               	clrf	?_readEEPROM+1,c
 12594  001060  0EF3               	movlw	243
 12595  001062  6E0E               	movwf	?_readEEPROM,c
 12596  001064  EC00  F02C         	call	_readEEPROM	;wreg free
 12597  001068  D180               	goto	L19
 12598  00106A                     l10978:
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;main.c: 2505: rv = ~val;
 12602  00106A  1C21               	comf	vscp_writeAppReg@val,w,c
 12603  00106C  D17E               	goto	L19
 12604  00106E                     l10982:
 12605                           
 12606                           ; BSR set to: 0
 12607  00106E  5023               	movf	vscp_writeAppReg@reg,w,c
 12608                           
 12609                           ; Switch size 1, requested type "speed"
 12610                           ; Number of cases is 96, Range of values is 0 to 119
 12611                           ; switch strategies available:
 12612                           ; Name         Instructions Cycles
 12613                           ; simple_byte          289   145 (average)
 12614                           ;	Chosen strategy is simple_byte
 12615  001070  E102 EF42  F003    	bz	l10792
 12616  001076  0A01               	xorlw	1	; case 1
 12617  001078  E102 EF50  F003    	bz	l10794
 12618  00107E  0A03               	xorlw	3	; case 2
 12619  001080  E102 EF5E  F003    	bz	l10796
 12620  001086  0A01               	xorlw	1	; case 3
 12621  001088  E102 EF6C  F003    	bz	l10798
 12622  00108E  0A07               	xorlw	7	; case 4
 12623  001090  E102 EF7A  F003    	bz	l10800
 12624  001096  0A01               	xorlw	1	; case 5
 12625  001098  E102 EF88  F003    	bz	l10802
 12626  00109E  0A03               	xorlw	3	; case 6
 12627  0010A0  E102 EF96  F003    	bz	l10804
 12628  0010A6  0A01               	xorlw	1	; case 7
 12629  0010A8  E102 EFA4  F003    	bz	l10806
 12630  0010AE  0A13               	xorlw	19	; case 20
 12631  0010B0  E102 EFB2  F003    	bz	l10808
 12632  0010B6  0A01               	xorlw	1	; case 21
 12633  0010B8  E102 EFC0  F003    	bz	l10810
 12634  0010BE  0A03               	xorlw	3	; case 22
 12635  0010C0  E102 EFCE  F003    	bz	l10812
 12636  0010C6  0A01               	xorlw	1	; case 23
 12637  0010C8  E102 EFDC  F003    	bz	l10814
 12638  0010CE  0A0F               	xorlw	15	; case 24
 12639  0010D0  E102 EFEA  F003    	bz	l10816
 12640  0010D6  0A01               	xorlw	1	; case 25
 12641  0010D8  E102 EFF8  F003    	bz	l10818
 12642  0010DE  0A3F               	xorlw	63	; case 38
 12643  0010E0  E102 EF06  F004    	bz	l10820
 12644  0010E6  0A01               	xorlw	1	; case 39
 12645  0010E8  E102 EF14  F004    	bz	l10822
 12646  0010EE  0A0F               	xorlw	15	; case 40
 12647  0010F0  E102 EF22  F004    	bz	l10824
 12648  0010F6  0A01               	xorlw	1	; case 41
 12649  0010F8  E102 EF30  F004    	bz	l10826
 12650  0010FE  0A03               	xorlw	3	; case 42
 12651  001100  E102 EF3E  F004    	bz	l10828
 12652  001106  0A01               	xorlw	1	; case 43
 12653  001108  E102 EF4C  F004    	bz	l10830
 12654  00110E  0A07               	xorlw	7	; case 44
 12655  001110  E102 EF5A  F004    	bz	l10832
 12656  001116  0A01               	xorlw	1	; case 45
 12657  001118  E102 EF68  F004    	bz	l10834
 12658  00111E  0A03               	xorlw	3	; case 46
 12659  001120  E102 EF76  F004    	bz	l10836
 12660  001126  0A01               	xorlw	1	; case 47
 12661  001128  E102 EF84  F004    	bz	l10838
 12662  00112E  0A1F               	xorlw	31	; case 48
 12663  001130  E102 EF92  F004    	bz	l10840
 12664  001136  0A01               	xorlw	1	; case 49
 12665  001138  E101 D402          	bz	l10842
 12666  00113C  0A03               	xorlw	3	; case 50
 12667  00113E  E101 D40D          	bz	l10844
 12668  001142  0A01               	xorlw	1	; case 51
 12669  001144  E101 D418          	bz	l10846
 12670  001148  0A07               	xorlw	7	; case 52
 12671  00114A  E101 D423          	bz	l10848
 12672  00114E  0A01               	xorlw	1	; case 53
 12673  001150  E101 D42E          	bz	l10850
 12674  001154  0A03               	xorlw	3	; case 54
 12675  001156  E101 D439          	bz	l10852
 12676  00115A  0A01               	xorlw	1	; case 55
 12677  00115C  E101 D444          	bz	l10854
 12678  001160  0A0F               	xorlw	15	; case 56
 12679  001162  E101 D44F          	bz	l10856
 12680  001166  0A01               	xorlw	1	; case 57
 12681  001168  E101 D45A          	bz	l10858
 12682  00116C  0A03               	xorlw	3	; case 58
 12683  00116E  E101 D465          	bz	l10860
 12684  001172  0A01               	xorlw	1	; case 59
 12685  001174  E101 D470          	bz	l10862
 12686  001178  0A07               	xorlw	7	; case 60
 12687  00117A  E101 D47B          	bz	l10864
 12688  00117E  0A01               	xorlw	1	; case 61
 12689  001180  E101 D486          	bz	l10866
 12690  001184  0A03               	xorlw	3	; case 62
 12691  001186  E101 D491          	bz	l10868
 12692  00118A  0A01               	xorlw	1	; case 63
 12693  00118C  E101 D49C          	bz	l10870
 12694  001190  0A7F               	xorlw	127	; case 64
 12695  001192  E101 D4A7          	bz	l10872
 12696  001196  0A01               	xorlw	1	; case 65
 12697  001198  E101 D4B2          	bz	l10874
 12698  00119C  0A03               	xorlw	3	; case 66
 12699  00119E  E101 D4BD          	bz	l10876
 12700  0011A2  0A01               	xorlw	1	; case 67
 12701  0011A4  E101 D4C8          	bz	l10878
 12702  0011A8  0A07               	xorlw	7	; case 68
 12703  0011AA  E101 D4D3          	bz	l10880
 12704  0011AE  0A01               	xorlw	1	; case 69
 12705  0011B0  E101 D4DD          	bz	l10882
 12706  0011B4  0A03               	xorlw	3	; case 70
 12707  0011B6  E101 D4E7          	bz	l10884
 12708  0011BA  0A01               	xorlw	1	; case 71
 12709  0011BC  E101 D4F1          	bz	l10886
 12710  0011C0  0A0F               	xorlw	15	; case 72
 12711  0011C2  E101 D4FB          	bz	l10888
 12712  0011C6  0A01               	xorlw	1	; case 73
 12713  0011C8  E101 D505          	bz	l10890
 12714  0011CC  0A03               	xorlw	3	; case 74
 12715  0011CE  E101 D50F          	bz	l10892
 12716  0011D2  0A01               	xorlw	1	; case 75
 12717  0011D4  E101 D519          	bz	l10894
 12718  0011D8  0A07               	xorlw	7	; case 76
 12719  0011DA  E101 D523          	bz	l10896
 12720  0011DE  0A01               	xorlw	1	; case 77
 12721  0011E0  E101 D52D          	bz	l10898
 12722  0011E4  0A03               	xorlw	3	; case 78
 12723  0011E6  E101 D537          	bz	l10900
 12724  0011EA  0A01               	xorlw	1	; case 79
 12725  0011EC  E101 D541          	bz	l10902
 12726  0011F0  0A1F               	xorlw	31	; case 80
 12727  0011F2  E101 D54B          	bz	l10904
 12728  0011F6  0A01               	xorlw	1	; case 81
 12729  0011F8  E101 D555          	bz	l10906
 12730  0011FC  0A03               	xorlw	3	; case 82
 12731  0011FE  E101 D55F          	bz	l10908
 12732  001202  0A01               	xorlw	1	; case 83
 12733  001204  E101 D569          	bz	l10910
 12734  001208  0A07               	xorlw	7	; case 84
 12735  00120A  E101 D573          	bz	l10912
 12736  00120E  0A01               	xorlw	1	; case 85
 12737  001210  E101 D57D          	bz	l10914
 12738  001214  0A03               	xorlw	3	; case 86
 12739  001216  E101 D587          	bz	l10916
 12740  00121A  0A01               	xorlw	1	; case 87
 12741  00121C  E101 D591          	bz	l10918
 12742  001220  0A0F               	xorlw	15	; case 88
 12743  001222  E101 D59B          	bz	l10920
 12744  001226  0A01               	xorlw	1	; case 89
 12745  001228  E101 D5A5          	bz	l10922
 12746  00122C  0A03               	xorlw	3	; case 90
 12747  00122E  E101 D5AF          	bz	l10924
 12748  001232  0A01               	xorlw	1	; case 91
 12749  001234  E101 D5B9          	bz	l10926
 12750  001238  0A07               	xorlw	7	; case 92
 12751  00123A  E101 D5C3          	bz	l10928
 12752  00123E  0A01               	xorlw	1	; case 93
 12753  001240  E101 D5CD          	bz	l10930
 12754  001244  0A03               	xorlw	3	; case 94
 12755  001246  E101 D5D7          	bz	l10932
 12756  00124A  0A01               	xorlw	1	; case 95
 12757  00124C  E101 D5E1          	bz	l10934
 12758  001250  0A3F               	xorlw	63	; case 96
 12759  001252  E101 D5EB          	bz	l10936
 12760  001256  0A01               	xorlw	1	; case 97
 12761  001258  E101 D5F5          	bz	l10938
 12762  00125C  0A03               	xorlw	3	; case 98
 12763  00125E  E101 D5FF          	bz	l10940
 12764  001262  0A01               	xorlw	1	; case 99
 12765  001264  E101 D609          	bz	l10942
 12766  001268  0A07               	xorlw	7	; case 100
 12767  00126A  E101 D613          	bz	l10944
 12768  00126E  0A01               	xorlw	1	; case 101
 12769  001270  E101 D61D          	bz	l10946
 12770  001274  0A03               	xorlw	3	; case 102
 12771  001276  E101 D627          	bz	l10948
 12772  00127A  0A01               	xorlw	1	; case 103
 12773  00127C  E101 D631          	bz	l10950
 12774  001280  0A0F               	xorlw	15	; case 104
 12775  001282  E101 D63B          	bz	l10952
 12776  001286  0A01               	xorlw	1	; case 105
 12777  001288  E101 D645          	bz	l10954
 12778  00128C  0A03               	xorlw	3	; case 106
 12779  00128E  E101 D64F          	bz	l10956
 12780  001292  0A01               	xorlw	1	; case 107
 12781  001294  E101 D659          	bz	l10958
 12782  001298  0A07               	xorlw	7	; case 108
 12783  00129A  E101 D663          	bz	l10960
 12784  00129E  0A01               	xorlw	1	; case 109
 12785  0012A0  E101 D66D          	bz	l10962
 12786  0012A4  0A03               	xorlw	3	; case 110
 12787  0012A6  E101 D677          	bz	l10964
 12788  0012AA  0A01               	xorlw	1	; case 111
 12789  0012AC  E101 D681          	bz	l10966
 12790  0012B0  0A1F               	xorlw	31	; case 112
 12791  0012B2  E101 D68B          	bz	l10968
 12792  0012B6  0A01               	xorlw	1	; case 113
 12793  0012B8  E101 D694          	bz	l517
 12794  0012BC  0A03               	xorlw	3	; case 114
 12795  0012BE  E101 D69E          	bz	l10970
 12796  0012C2  0A01               	xorlw	1	; case 115
 12797  0012C4  E101 D6A8          	bz	l10972
 12798  0012C8  0A07               	xorlw	7	; case 116
 12799  0012CA  E101 D6B2          	bz	l520
 12800  0012CE  0A01               	xorlw	1	; case 117
 12801  0012D0  E101 D6AF          	bz	l520
 12802  0012D4  0A03               	xorlw	3	; case 118
 12803  0012D6  E101 D6AE          	bz	l10974
 12804  0012DA  0A01               	xorlw	1	; case 119
 12805  0012DC  E101 D6B8          	bz	l10976
 12806  0012E0  D6C4               	goto	l10978
 12807  0012E2                     l10984:
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;main.c: 2509: else if (1 == vscp_page_select) {
 12811  0012E2  0446               	decf	_vscp_page_select,w,c
 12812  0012E4  1047               	iorwf	_vscp_page_select+1,w,c
 12813  0012E6  E142               	bnz	l11008
 12814                           
 12815                           ; BSR set to: 0
 12816                           ;main.c: 2512: if (reg < 72) {
 12817  0012E8  0E48               	movlw	72
 12818  0012EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12819  0012EC  D016               	goto	l10992
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;main.c: 2513: writeEEPROM(0xAA + reg, val);
 12823  0012EE  0EAA               	movlw	170
 12824  0012F0  2423               	addwf	vscp_writeAppReg@reg,w,c
 12825  0012F2  6E0E               	movwf	?_writeEEPROM,c
 12826  0012F4  6A0F               	clrf	?_writeEEPROM+1,c
 12827  0012F6  0E00               	movlw	0
 12828  0012F8  220F               	addwfc	?_writeEEPROM+1,f,c
 12829  0012FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12830  0012FE  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12831                           
 12832                           ;main.c: 2514: rv = readEEPROM(0xAA + reg );
 12833  001302  0EAA               	movlw	170
 12834  001304  2423               	addwf	vscp_writeAppReg@reg,w,c
 12835  001306  6E0E               	movwf	?_readEEPROM,c
 12836  001308  6A0F               	clrf	?_readEEPROM+1,c
 12837  00130A  0E00               	movlw	0
 12838  00130C  220F               	addwfc	?_readEEPROM+1,f,c
 12839  00130E  EC00  F02C         	call	_readEEPROM	;wreg free
 12840  001312  6E24               	movwf	vscp_writeAppReg@rv,c
 12841                           
 12842                           ;main.c: 2515: writeCoeffs2Ram();
 12843  001314  EC65  F025         	call	_writeCoeffs2Ram	;wreg free
 12844                           
 12845                           ;main.c: 2516: }
 12846  001318  D029               	goto	l11008
 12847  00131A                     l10992:
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;main.c: 2518: else if (reg < 84) {
 12851  00131A  0E54               	movlw	84
 12852  00131C  6023               	cpfslt	vscp_writeAppReg@reg,c
 12853  00131E  D010               	goto	l11004
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;main.c: 2520: uint8_t pos = reg - 72;
 12857  001320  5023               	movf	vscp_writeAppReg@reg,w,c
 12858  001322  0FB8               	addlw	184
 12859  001324  6E22               	movwf	vscp_writeAppReg@pos,c
 12860                           
 12861                           ; BSR set to: 0
 12862                           ;main.c: 2521: if ( pos % 2 ) {
 12863  001326  A022               	btfss	vscp_writeAppReg@pos,0,c
 12864  001328  D002               	goto	l11000
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;main.c: 2522: pos--;
 12868  00132A  0622               	decf	vscp_writeAppReg@pos,f,c
 12869                           
 12870                           ;main.c: 2523: }
 12871  00132C  D001               	goto	l11002
 12872  00132E                     l11000:
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;main.c: 2524: else {
 12876                           ;main.c: 2525: pos++;
 12877  00132E  2A22               	incf	vscp_writeAppReg@pos,f,c
 12878  001330                     l11002:
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;main.c: 2526: }
 12882                           ;main.c: 2527: rv = adc[ pos ];
 12883  001330  0E9C               	movlw	low _adc
 12884  001332  2422               	addwf	vscp_writeAppReg@pos,w,c
 12885  001334  6ED9               	movwf	fsr2l,c
 12886  001336  6ADA               	clrf	fsr2h,c
 12887  001338  0E01               	movlw	high _adc
 12888  00133A  22DA               	addwfc	fsr2h,f,c
 12889  00133C  50DF               	movf	indf2,w,c
 12890  00133E  D015               	goto	L19
 12891  001340                     l11004:
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;main.c: 2530: else if (reg < 98) {
 12895  001340  0E62               	movlw	98
 12896  001342  6023               	cpfslt	vscp_writeAppReg@reg,c
 12897  001344  D013               	goto	l11008
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;main.c: 2531: writeEEPROM( 0x9E + reg - 84, val );
 12901  001346  0E4A               	movlw	74
 12902  001348  2423               	addwf	vscp_writeAppReg@reg,w,c
 12903  00134A  6E0E               	movwf	?_writeEEPROM,c
 12904  00134C  6A0F               	clrf	?_writeEEPROM+1,c
 12905  00134E  0E00               	movlw	0
 12906  001350  220F               	addwfc	?_writeEEPROM+1,f,c
 12907  001352  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12908  001356  ECFD  F02A         	call	_writeEEPROM	;wreg free
 12909                           
 12910                           ;main.c: 2532: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12911  00135A  0E4A               	movlw	74
 12912  00135C  2423               	addwf	vscp_writeAppReg@reg,w,c
 12913  00135E  6E0E               	movwf	?_readEEPROM,c
 12914  001360  6A0F               	clrf	?_readEEPROM+1,c
 12915  001362  0E00               	movlw	0
 12916  001364  220F               	addwfc	?_readEEPROM+1,f,c
 12917  001366  EC00  F02C         	call	_readEEPROM	;wreg free
 12918  00136A                     L19:
 12919  00136A  6E24               	movwf	vscp_writeAppReg@rv,c
 12920  00136C                     l11008:
 12921                           
 12922                           ;main.c: 2533: }
 12923                           ;main.c: 2534: }
 12924                           ;main.c: 2536: return rv;
 12925  00136C  5024               	movf	vscp_writeAppReg@rv,w,c
 12926  00136E  0012               	return	
 12927  001370                     __end_of_vscp_writeAppReg:
 12928                           	opt stack 0
 12929                           tblptru	equ	0xFF8
 12930                           tblptrh	equ	0xFF7
 12931                           tblptrl	equ	0xFF6
 12932                           tablat	equ	0xFF5
 12933                           prodh	equ	0xFF4
 12934                           prodl	equ	0xFF3
 12935                           postinc0	equ	0xFEE
 12936                           wreg	equ	0xFE8
 12937                           postdec1	equ	0xFE5
 12938                           fsr1h	equ	0xFE2
 12939                           fsr1l	equ	0xFE1
 12940                           indf2	equ	0xFDF
 12941                           postinc2	equ	0xFDE
 12942                           postdec2	equ	0xFDD
 12943                           fsr2h	equ	0xFDA
 12944                           fsr2l	equ	0xFD9
 12945                           status	equ	0xFD8
 12946                           
 12947 ;; *************** function _vscp_readRegister *****************
 12948 ;; Defined at:
 12949 ;;		line 550 in file "../../vscp_firmware/common/vscp_firmware.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;  reg             1    wreg     unsigned char 
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;  reg             1   20[COMRAM] unsigned char 
 12954 ;; Return value:  Size  Location     Type
 12955 ;;                  1    wreg      unsigned char 
 12956 ;; Registers used:
 12957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12958 ;; Tracked objects:
 12959 ;;		On entry : F/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12963 ;;      Params:         0       0       0       0       0       0       0
 12964 ;;      Locals:         1       0       0       0       0       0       0
 12965 ;;      Temps:          0       0       0       0       0       0       0
 12966 ;;      Totals:         1       0       0       0       0       0       0
 12967 ;;Total ram usage:        1 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:    5
 12970 ;; This function calls:
 12971 ;;		_vscp_readAppReg
 12972 ;;		_vscp_readStdReg
 12973 ;; This function is called by:
 12974 ;;		_vscp_handleProtocolEvent
 12975 ;; This function uses a non-reentrant model
 12976 ;;
 12977                           
 12978                           	psect	text45
 12979  00570C                     __ptext45:
 12980                           	opt stack 0
 12981  00570C                     _vscp_readRegister:
 12982                           	opt stack 24
 12983                           
 12984                           ;incstack = 0
 12985                           ;incstack = 0
 12986                           ;vscp_readRegister@reg stored from wreg
 12987  00570C  CFE8 F015          	movff	wreg,vscp_readRegister@reg
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;vscp_firmware.c: 551: if (reg >= 0x80) {
 12991  005710  0E7F               	movlw	127
 12992  005712  6415               	cpfsgt	vscp_readRegister@reg,c
 12993  005714  D004               	goto	l11252
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;vscp_firmware.c: 552: return vscp_readStdReg(reg);
 12997  005716  5015               	movf	vscp_readRegister@reg,w,c
 12998  005718  ECB1  F021         	call	_vscp_readStdReg
 12999  00571C  D003               	goto	l1104
 13000  00571E                     l11252:
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;vscp_firmware.c: 554: return vscp_readAppReg(reg);
 13004  00571E  5015               	movf	vscp_readRegister@reg,w,c
 13005  005720  ECCD  F012         	call	_vscp_readAppReg
 13006  005724                     l1104:
 13007  005724  0012               	return	
 13008  005726                     __end_of_vscp_readRegister:
 13009                           	opt stack 0
 13010                           tblptru	equ	0xFF8
 13011                           tblptrh	equ	0xFF7
 13012                           tblptrl	equ	0xFF6
 13013                           tablat	equ	0xFF5
 13014                           prodh	equ	0xFF4
 13015                           prodl	equ	0xFF3
 13016                           postinc0	equ	0xFEE
 13017                           wreg	equ	0xFE8
 13018                           postdec1	equ	0xFE5
 13019                           fsr1h	equ	0xFE2
 13020                           fsr1l	equ	0xFE1
 13021                           indf2	equ	0xFDF
 13022                           postinc2	equ	0xFDE
 13023                           postdec2	equ	0xFDD
 13024                           fsr2h	equ	0xFDA
 13025                           fsr2l	equ	0xFD9
 13026                           status	equ	0xFD8
 13027                           
 13028 ;; *************** function _vscp_readStdReg *****************
 13029 ;; Defined at:
 13030 ;;		line 563 in file "../../vscp_firmware/common/vscp_firmware.c"
 13031 ;; Parameters:    Size  Location     Type
 13032 ;;  reg             1    wreg     unsigned char 
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;  reg             1   19[COMRAM] unsigned char 
 13035 ;;  rv              1   18[COMRAM] unsigned char 
 13036 ;; Return value:  Size  Location     Type
 13037 ;;                  1    wreg      unsigned char 
 13038 ;; Registers used:
 13039 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13040 ;; Tracked objects:
 13041 ;;		On entry : F/0
 13042 ;;		On exit  : 0/0
 13043 ;;		Unchanged: 0/0
 13044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13045 ;;      Params:         0       0       0       0       0       0       0
 13046 ;;      Locals:         2       0       0       0       0       0       0
 13047 ;;      Temps:          0       0       0       0       0       0       0
 13048 ;;      Totals:         2       0       0       0       0       0       0
 13049 ;;Total ram usage:        2 bytes
 13050 ;; Hardware stack levels used:    1
 13051 ;; Hardware stack levels required when called:    4
 13052 ;; This function calls:
 13053 ;;		_vscp_getMajorVersion
 13054 ;;		_vscp_getMinorVersion
 13055 ;;		_vscp_getSubMinorVersion
 13056 ;;		_vscp_getGUID
 13057 ;;		_vscp_getMDF_URL
 13058 ;;		_vscp_getUserID
 13059 ;;		_vscp_getManufacturerId
 13060 ;;		_vscp_getBootLoaderAlgorithm
 13061 ;;		_vscp_getBufferSize
 13062 ;;		_vscp_getRegisterPagesUsed
 13063 ;; This function is called by:
 13064 ;;		_vscp_readRegister
 13065 ;;		_vscp_handleProtocolEvent
 13066 ;; This function uses a non-reentrant model
 13067 ;;
 13068                           
 13069                           	psect	text46
 13070  004362                     __ptext46:
 13071                           	opt stack 0
 13072  004362                     _vscp_readStdReg:
 13073                           	opt stack 25
 13074                           
 13075                           ;incstack = 0
 13076                           ;incstack = 0
 13077                           ;vscp_readStdReg@reg stored from wreg
 13078  004362  CFE8 F014          	movff	wreg,vscp_readStdReg@reg
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;vscp_firmware.c: 566: if (0x80 == reg) {
 13082                           
 13083                           ; BSR set to: 0
 13084  004366  5014               	movf	vscp_readStdReg@reg,w,c
 13085  004368  0A80               	xorlw	128
 13086  00436A  E104               	bnz	l11262
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;vscp_firmware.c: 569: rv = vscp_alarmstatus;
 13090  00436C  C04B  F013         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 13091                           
 13092                           ;vscp_firmware.c: 570: vscp_alarmstatus = 0x00;
 13093  004370  6A4B               	clrf	_vscp_alarmstatus,c
 13094                           
 13095                           ;vscp_firmware.c: 572: }
 13096  004372  D067               	goto	l11328
 13097  004374                     l11262:
 13098                           
 13099                           ; BSR set to: 0
 13100                           ;vscp_firmware.c: 573: else if (0x81 == reg) {
 13101  004374  5014               	movf	vscp_readStdReg@reg,w,c
 13102  004376  0A81               	xorlw	129
 13103  004378  E102               	bnz	l11266
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;vscp_firmware.c: 576: rv = 1;
 13107  00437A  0E01               	movlw	1
 13108  00437C  D061               	goto	L20
 13109  00437E                     l11266:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;vscp_firmware.c: 579: else if (0x82 == reg) {
 13113  00437E  5014               	movf	vscp_readStdReg@reg,w,c
 13114  004380  0A82               	xorlw	130
 13115  004382  E102               	bnz	l11270
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;vscp_firmware.c: 582: rv = 5;
 13119  004384  0E05               	movlw	5
 13120  004386  D05C               	goto	L20
 13121  004388                     l11270:
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;vscp_firmware.c: 585: else if (0x83 == reg) {
 13125  004388  5014               	movf	vscp_readStdReg@reg,w,c
 13126  00438A  0A83               	xorlw	131
 13127  00438C  E102               	bnz	l11274
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;vscp_firmware.c: 588: rv = 0;
 13131  00438E  6A13               	clrf	vscp_readStdReg@rv,c
 13132                           
 13133                           ;vscp_firmware.c: 590: }
 13134  004390  D058               	goto	l11328
 13135  004392                     l11274:
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;vscp_firmware.c: 591: else if (0x94 == reg) {
 13139  004392  5014               	movf	vscp_readStdReg@reg,w,c
 13140  004394  0A94               	xorlw	148
 13141  004396  E103               	bnz	l11278
 13142                           
 13143                           ; BSR set to: 0
 13144                           ;vscp_firmware.c: 594: rv = vscp_getMajorVersion();
 13145  004398  EC59  F02C         	call	_vscp_getMajorVersion	;wreg free
 13146  00439C  D051               	goto	L20
 13147  00439E                     l11278:
 13148                           
 13149                           ; BSR set to: 0
 13150                           ;vscp_firmware.c: 597: else if (0x95 == reg) {
 13151  00439E  5014               	movf	vscp_readStdReg@reg,w,c
 13152  0043A0  0A95               	xorlw	149
 13153  0043A2  E103               	bnz	l11282
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;vscp_firmware.c: 600: rv = vscp_getMinorVersion();
 13157  0043A4  EC58  F02C         	call	_vscp_getMinorVersion	;wreg free
 13158  0043A8  D04B               	goto	L20
 13159  0043AA                     l11282:
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;vscp_firmware.c: 603: else if (0x96 == reg) {
 13163  0043AA  5014               	movf	vscp_readStdReg@reg,w,c
 13164  0043AC  0A96               	xorlw	150
 13165  0043AE  E103               	bnz	l11286
 13166                           
 13167                           ; BSR set to: 0
 13168                           ;vscp_firmware.c: 606: rv = vscp_getSubMinorVersion();
 13169  0043B0  EC57  F02C         	call	_vscp_getSubMinorVersion	;wreg free
 13170  0043B4  D045               	goto	L20
 13171  0043B6                     l11286:
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;vscp_firmware.c: 609: else if (reg < 0x89) {
 13175  0043B6  0E89               	movlw	137
 13176  0043B8  6014               	cpfslt	vscp_readStdReg@reg,c
 13177  0043BA  D005               	goto	l11290
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;vscp_firmware.c: 612: rv = vscp_getUserID(reg - 0x84);
 13181  0043BC  5014               	movf	vscp_readStdReg@reg,w,c
 13182  0043BE  0F7C               	addlw	124
 13183  0043C0  ECDA  F02B         	call	_vscp_getUserID
 13184  0043C4  D03D               	goto	L20
 13185  0043C6                     l11290:
 13186                           
 13187                           ; BSR set to: 0
 13188                           ;vscp_firmware.c: 615: else if ((reg > 0x88) &&
 13189                           ;vscp_firmware.c: 616: (reg < 0x91)) {
 13190  0043C6  0E88               	movlw	136
 13191  0043C8  6414               	cpfsgt	vscp_readStdReg@reg,c
 13192  0043CA  D008               	goto	l11296
 13193                           
 13194                           ; BSR set to: 0
 13195  0043CC  0E91               	movlw	145
 13196  0043CE  6014               	cpfslt	vscp_readStdReg@reg,c
 13197  0043D0  D005               	goto	l11296
 13198                           
 13199                           ; BSR set to: 0
 13200                           ;vscp_firmware.c: 619: rv = vscp_getManufacturerId(reg - 0x89);
 13201  0043D2  5014               	movf	vscp_readStdReg@reg,w,c
 13202  0043D4  0F77               	addlw	119
 13203  0043D6  ECD0  F02B         	call	_vscp_getManufacturerId
 13204  0043DA  D032               	goto	L20
 13205  0043DC                     l11296:
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;vscp_firmware.c: 622: else if (0x91 == reg) {
 13209  0043DC  5014               	movf	vscp_readStdReg@reg,w,c
 13210  0043DE  0A91               	xorlw	145
 13211  0043E0  E103               	bnz	l11300
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;vscp_firmware.c: 625: rv = vscp_nickname;
 13215  0043E2  C0BA  F013         	movff	_vscp_nickname,vscp_readStdReg@rv
 13216                           
 13217                           ;vscp_firmware.c: 627: }
 13218  0043E6  D02D               	goto	l11328
 13219  0043E8                     l11300:
 13220                           
 13221                           ; BSR set to: 0
 13222                           ;vscp_firmware.c: 628: else if (0x93 == reg) {
 13223  0043E8  5014               	movf	vscp_readStdReg@reg,w,c
 13224  0043EA  0A93               	xorlw	147
 13225  0043EC  E103               	bnz	l11304
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;vscp_firmware.c: 631: rv = (vscp_page_select & 0xff);
 13229  0043EE  C046  F013         	movff	_vscp_page_select,vscp_readStdReg@rv
 13230                           
 13231                           ;vscp_firmware.c: 633: }
 13232  0043F2  D027               	goto	l11328
 13233  0043F4                     l11304:
 13234                           
 13235                           ; BSR set to: 0
 13236                           ;vscp_firmware.c: 635: else if (0x92 == reg) {
 13237  0043F4  5014               	movf	vscp_readStdReg@reg,w,c
 13238  0043F6  0A92               	xorlw	146
 13239  0043F8  E102               	bnz	l11308
 13240                           
 13241                           ; BSR set to: 0
 13242                           ;vscp_firmware.c: 638: rv = (vscp_page_select >> 8) & 0xff;
 13243  0043FA  5047               	movf	_vscp_page_select+1,w,c
 13244  0043FC  D021               	goto	L20
 13245  0043FE                     l11308:
 13246                           
 13247                           ; BSR set to: 0
 13248                           ;vscp_firmware.c: 641: else if (0x97 == reg) {
 13249  0043FE  5014               	movf	vscp_readStdReg@reg,w,c
 13250  004400  0A97               	xorlw	151
 13251  004402  E103               	bnz	l11312
 13252                           
 13253                           ; BSR set to: 0
 13254                           ;vscp_firmware.c: 643: rv = vscp_getBootLoaderAlgorithm();
 13255  004404  EC56  F02C         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13256  004408  D01B               	goto	L20
 13257  00440A                     l11312:
 13258                           
 13259                           ; BSR set to: 0
 13260                           ;vscp_firmware.c: 645: else if (0x98 == reg) {
 13261  00440A  5014               	movf	vscp_readStdReg@reg,w,c
 13262  00440C  0A98               	xorlw	152
 13263  00440E  E103               	bnz	l11316
 13264                           
 13265                           ; BSR set to: 0
 13266                           ;vscp_firmware.c: 647: rv = vscp_getBufferSize();
 13267  004410  EC55  F02C         	call	_vscp_getBufferSize	;wreg free
 13268  004414  D015               	goto	L20
 13269  004416                     l11316:
 13270                           
 13271                           ; BSR set to: 0
 13272                           ;vscp_firmware.c: 649: else if (0x99 == reg) {
 13273  004416  5014               	movf	vscp_readStdReg@reg,w,c
 13274  004418  0A99               	xorlw	153
 13275  00441A  E103               	bnz	l11320
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;vscp_firmware.c: 651: rv = vscp_getRegisterPagesUsed();
 13279  00441C  EC54  F02C         	call	_vscp_getRegisterPagesUsed	;wreg free
 13280  004420  D00F               	goto	L20
 13281  004422                     l11320:
 13282                           
 13283                           ; BSR set to: 0
 13284                           ;vscp_firmware.c: 653: else if ((reg > (0xD0 - 1)) &&
 13285                           ;vscp_firmware.c: 654: (reg < 0xE0)) {
 13286  004422  0ECF               	movlw	207
 13287  004424  6414               	cpfsgt	vscp_readStdReg@reg,c
 13288  004426  D008               	goto	l11326
 13289                           
 13290                           ; BSR set to: 0
 13291  004428  0EE0               	movlw	224
 13292  00442A  6014               	cpfslt	vscp_readStdReg@reg,c
 13293  00442C  D005               	goto	l11326
 13294                           
 13295                           ; BSR set to: 0
 13296                           ;vscp_firmware.c: 657: rv = vscp_getGUID(reg - 0xD0);
 13297  00442E  5014               	movf	vscp_readStdReg@reg,w,c
 13298  004430  0F30               	addlw	48
 13299  004432  ECE4  F02B         	call	_vscp_getGUID
 13300  004436  D004               	goto	L20
 13301  004438                     l11326:
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;vscp_firmware.c: 660: else {
 13305                           ;vscp_firmware.c: 663: rv = vscp_getMDF_URL(reg - 0xE0);
 13306  004438  5014               	movf	vscp_readStdReg@reg,w,c
 13307  00443A  0F20               	addlw	32
 13308  00443C  ECB8  F02B         	call	_vscp_getMDF_URL
 13309  004440                     L20:
 13310  004440  6E13               	movwf	vscp_readStdReg@rv,c
 13311  004442                     l11328:
 13312                           
 13313                           ;vscp_firmware.c: 665: }
 13314                           ;vscp_firmware.c: 667: return rv;
 13315  004442  5013               	movf	vscp_readStdReg@rv,w,c
 13316  004444  0012               	return	
 13317  004446                     __end_of_vscp_readStdReg:
 13318                           	opt stack 0
 13319                           tblptru	equ	0xFF8
 13320                           tblptrh	equ	0xFF7
 13321                           tblptrl	equ	0xFF6
 13322                           tablat	equ	0xFF5
 13323                           prodh	equ	0xFF4
 13324                           prodl	equ	0xFF3
 13325                           postinc0	equ	0xFEE
 13326                           wreg	equ	0xFE8
 13327                           postdec1	equ	0xFE5
 13328                           fsr1h	equ	0xFE2
 13329                           fsr1l	equ	0xFE1
 13330                           indf2	equ	0xFDF
 13331                           postinc2	equ	0xFDE
 13332                           postdec2	equ	0xFDD
 13333                           fsr2h	equ	0xFDA
 13334                           fsr2l	equ	0xFD9
 13335                           status	equ	0xFD8
 13336                           
 13337 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13338 ;; Defined at:
 13339 ;;		line 2708 in file "../main.c"
 13340 ;; Parameters:    Size  Location     Type
 13341 ;;		None
 13342 ;; Auto vars:     Size  Location     Type
 13343 ;;		None
 13344 ;; Return value:  Size  Location     Type
 13345 ;;                  1    wreg      unsigned char 
 13346 ;; Registers used:
 13347 ;;		wreg
 13348 ;; Tracked objects:
 13349 ;;		On entry : F/0
 13350 ;;		On exit  : F/0
 13351 ;;		Unchanged: F/0
 13352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13353 ;;      Params:         0       0       0       0       0       0       0
 13354 ;;      Locals:         0       0       0       0       0       0       0
 13355 ;;      Temps:          0       0       0       0       0       0       0
 13356 ;;      Totals:         0       0       0       0       0       0       0
 13357 ;;Total ram usage:        0 bytes
 13358 ;; Hardware stack levels used:    1
 13359 ;; Hardware stack levels required when called:    2
 13360 ;; This function calls:
 13361 ;;		Nothing
 13362 ;; This function is called by:
 13363 ;;		_vscp_readStdReg
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           	psect	text47
 13368  0058A8                     __ptext47:
 13369                           	opt stack 0
 13370  0058A8                     _vscp_getRegisterPagesUsed:
 13371                           	opt stack 26
 13372                           
 13373                           ; BSR set to: 0
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;main.c: 2709: return 1;
 13377                           
 13378                           ;incstack = 0
 13379                           ;incstack = 0
 13380  0058A8  0C01               	retlw	1
 13381  0058AA                     __end_of_vscp_getRegisterPagesUsed:
 13382                           	opt stack 0
 13383                           tblptru	equ	0xFF8
 13384                           tblptrh	equ	0xFF7
 13385                           tblptrl	equ	0xFF6
 13386                           tablat	equ	0xFF5
 13387                           prodh	equ	0xFF4
 13388                           prodl	equ	0xFF3
 13389                           postinc0	equ	0xFEE
 13390                           wreg	equ	0xFE8
 13391                           postdec1	equ	0xFE5
 13392                           fsr1h	equ	0xFE2
 13393                           fsr1l	equ	0xFE1
 13394                           indf2	equ	0xFDF
 13395                           postinc2	equ	0xFDE
 13396                           postdec2	equ	0xFDD
 13397                           fsr2h	equ	0xFDA
 13398                           fsr2l	equ	0xFD9
 13399                           status	equ	0xFD8
 13400                           
 13401 ;; *************** function _vscp_getBufferSize *****************
 13402 ;; Defined at:
 13403 ;;		line 2661 in file "../main.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;		None
 13406 ;; Auto vars:     Size  Location     Type
 13407 ;;		None
 13408 ;; Return value:  Size  Location     Type
 13409 ;;                  1    wreg      unsigned char 
 13410 ;; Registers used:
 13411 ;;		wreg
 13412 ;; Tracked objects:
 13413 ;;		On entry : F/0
 13414 ;;		On exit  : F/0
 13415 ;;		Unchanged: F/0
 13416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13417 ;;      Params:         0       0       0       0       0       0       0
 13418 ;;      Locals:         0       0       0       0       0       0       0
 13419 ;;      Temps:          0       0       0       0       0       0       0
 13420 ;;      Totals:         0       0       0       0       0       0       0
 13421 ;;Total ram usage:        0 bytes
 13422 ;; Hardware stack levels used:    1
 13423 ;; Hardware stack levels required when called:    2
 13424 ;; This function calls:
 13425 ;;		Nothing
 13426 ;; This function is called by:
 13427 ;;		_vscp_readStdReg
 13428 ;; This function uses a non-reentrant model
 13429 ;;
 13430                           
 13431                           	psect	text48
 13432  0058AA                     __ptext48:
 13433                           	opt stack 0
 13434  0058AA                     _vscp_getBufferSize:
 13435                           	opt stack 26
 13436                           
 13437                           ; BSR set to: 0
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;main.c: 2662: return 8;
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;incstack = 0
 13444                           ;incstack = 0
 13445  0058AA  0C08               	retlw	8
 13446  0058AC                     __end_of_vscp_getBufferSize:
 13447                           	opt stack 0
 13448                           tblptru	equ	0xFF8
 13449                           tblptrh	equ	0xFF7
 13450                           tblptrl	equ	0xFF6
 13451                           tablat	equ	0xFF5
 13452                           prodh	equ	0xFF4
 13453                           prodl	equ	0xFF3
 13454                           postinc0	equ	0xFEE
 13455                           wreg	equ	0xFE8
 13456                           postdec1	equ	0xFE5
 13457                           fsr1h	equ	0xFE2
 13458                           fsr1l	equ	0xFE1
 13459                           indf2	equ	0xFDF
 13460                           postinc2	equ	0xFDE
 13461                           postdec2	equ	0xFDD
 13462                           fsr2h	equ	0xFDA
 13463                           fsr2l	equ	0xFD9
 13464                           status	equ	0xFD8
 13465                           
 13466 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13467 ;; Defined at:
 13468 ;;		line 2652 in file "../main.c"
 13469 ;; Parameters:    Size  Location     Type
 13470 ;;		None
 13471 ;; Auto vars:     Size  Location     Type
 13472 ;;		None
 13473 ;; Return value:  Size  Location     Type
 13474 ;;                  1    wreg      unsigned char 
 13475 ;; Registers used:
 13476 ;;		wreg
 13477 ;; Tracked objects:
 13478 ;;		On entry : F/0
 13479 ;;		On exit  : F/0
 13480 ;;		Unchanged: F/0
 13481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13482 ;;      Params:         0       0       0       0       0       0       0
 13483 ;;      Locals:         0       0       0       0       0       0       0
 13484 ;;      Temps:          0       0       0       0       0       0       0
 13485 ;;      Totals:         0       0       0       0       0       0       0
 13486 ;;Total ram usage:        0 bytes
 13487 ;; Hardware stack levels used:    1
 13488 ;; Hardware stack levels required when called:    2
 13489 ;; This function calls:
 13490 ;;		Nothing
 13491 ;; This function is called by:
 13492 ;;		_vscp_readStdReg
 13493 ;; This function uses a non-reentrant model
 13494 ;;
 13495                           
 13496                           	psect	text49
 13497  0058AC                     __ptext49:
 13498                           	opt stack 0
 13499  0058AC                     _vscp_getBootLoaderAlgorithm:
 13500                           	opt stack 26
 13501                           
 13502                           ; BSR set to: 0
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;main.c: 2653: return 0x01;
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;incstack = 0
 13509                           ;incstack = 0
 13510  0058AC  0C01               	retlw	1
 13511  0058AE                     __end_of_vscp_getBootLoaderAlgorithm:
 13512                           	opt stack 0
 13513                           tblptru	equ	0xFF8
 13514                           tblptrh	equ	0xFF7
 13515                           tblptrl	equ	0xFF6
 13516                           tablat	equ	0xFF5
 13517                           prodh	equ	0xFF4
 13518                           prodl	equ	0xFF3
 13519                           postinc0	equ	0xFEE
 13520                           wreg	equ	0xFE8
 13521                           postdec1	equ	0xFE5
 13522                           fsr1h	equ	0xFE2
 13523                           fsr1l	equ	0xFE1
 13524                           indf2	equ	0xFDF
 13525                           postinc2	equ	0xFDE
 13526                           postdec2	equ	0xFDD
 13527                           fsr2h	equ	0xFDA
 13528                           fsr2l	equ	0xFD9
 13529                           status	equ	0xFD8
 13530                           
 13531 ;; *************** function _vscp_getManufacturerId *****************
 13532 ;; Defined at:
 13533 ;;		line 2632 in file "../main.c"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;  idx             1    wreg     unsigned char 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  idx             1   17[COMRAM] unsigned char 
 13538 ;; Return value:  Size  Location     Type
 13539 ;;                  1    wreg      unsigned char 
 13540 ;; Registers used:
 13541 ;;		wreg, status,2, status,0, cstack
 13542 ;; Tracked objects:
 13543 ;;		On entry : 0/0
 13544 ;;		On exit  : 0/0
 13545 ;;		Unchanged: 0/0
 13546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13547 ;;      Params:         0       0       0       0       0       0       0
 13548 ;;      Locals:         1       0       0       0       0       0       0
 13549 ;;      Temps:          0       0       0       0       0       0       0
 13550 ;;      Totals:         1       0       0       0       0       0       0
 13551 ;;Total ram usage:        1 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    3
 13554 ;; This function calls:
 13555 ;;		_readEEPROM
 13556 ;; This function is called by:
 13557 ;;		_vscp_readStdReg
 13558 ;;		_vscp_writeStdReg
 13559 ;; This function uses a non-reentrant model
 13560 ;;
 13561                           
 13562                           	psect	text50
 13563  0057A0                     __ptext50:
 13564                           	opt stack 0
 13565  0057A0                     _vscp_getManufacturerId:
 13566                           	opt stack 25
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;incstack = 0
 13570                           ;incstack = 0
 13571                           ;vscp_getManufacturerId@idx stored from wreg
 13572  0057A0  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13573                           
 13574                           ;main.c: 2633: return readEEPROM(0x09 + idx);
 13575  0057A4  0E09               	movlw	9
 13576  0057A6  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13577  0057A8  6E0E               	movwf	?_readEEPROM,c
 13578  0057AA  6A0F               	clrf	?_readEEPROM+1,c
 13579  0057AC  0E00               	movlw	0
 13580  0057AE  220F               	addwfc	?_readEEPROM+1,f,c
 13581  0057B0  EF00  F02C         	goto	_readEEPROM	;wreg free
 13582  0057B4                     __end_of_vscp_getManufacturerId:
 13583                           	opt stack 0
 13584                           tblptru	equ	0xFF8
 13585                           tblptrh	equ	0xFF7
 13586                           tblptrl	equ	0xFF6
 13587                           tablat	equ	0xFF5
 13588                           prodh	equ	0xFF4
 13589                           prodl	equ	0xFF3
 13590                           postinc0	equ	0xFEE
 13591                           wreg	equ	0xFE8
 13592                           postdec1	equ	0xFE5
 13593                           fsr1h	equ	0xFE2
 13594                           fsr1l	equ	0xFE1
 13595                           indf2	equ	0xFDF
 13596                           postinc2	equ	0xFDE
 13597                           postdec2	equ	0xFDD
 13598                           fsr2h	equ	0xFDA
 13599                           fsr2l	equ	0xFD9
 13600                           status	equ	0xFD8
 13601                           
 13602 ;; *************** function _vscp_getUserID *****************
 13603 ;; Defined at:
 13604 ;;		line 2612 in file "../main.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;  idx             1    wreg     unsigned char 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;  idx             1   17[COMRAM] unsigned char 
 13609 ;; Return value:  Size  Location     Type
 13610 ;;                  1    wreg      unsigned char 
 13611 ;; Registers used:
 13612 ;;		wreg, status,2, status,0, cstack
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13618 ;;      Params:         0       0       0       0       0       0       0
 13619 ;;      Locals:         1       0       0       0       0       0       0
 13620 ;;      Temps:          0       0       0       0       0       0       0
 13621 ;;      Totals:         1       0       0       0       0       0       0
 13622 ;;Total ram usage:        1 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    3
 13625 ;; This function calls:
 13626 ;;		_readEEPROM
 13627 ;; This function is called by:
 13628 ;;		_vscp_readStdReg
 13629 ;;		_vscp_writeStdReg
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           	psect	text51
 13634  0057B4                     __ptext51:
 13635                           	opt stack 0
 13636  0057B4                     _vscp_getUserID:
 13637                           	opt stack 25
 13638                           
 13639                           ;incstack = 0
 13640                           ;incstack = 0
 13641                           ;vscp_getUserID@idx stored from wreg
 13642  0057B4  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13643                           
 13644                           ;main.c: 2613: return readEEPROM(0x04 + idx);
 13645  0057B8  0E04               	movlw	4
 13646  0057BA  2412               	addwf	vscp_getUserID@idx,w,c
 13647  0057BC  6E0E               	movwf	?_readEEPROM,c
 13648  0057BE  6A0F               	clrf	?_readEEPROM+1,c
 13649  0057C0  0E00               	movlw	0
 13650  0057C2  220F               	addwfc	?_readEEPROM+1,f,c
 13651  0057C4  EF00  F02C         	goto	_readEEPROM	;wreg free
 13652  0057C8                     __end_of_vscp_getUserID:
 13653                           	opt stack 0
 13654                           tblptru	equ	0xFF8
 13655                           tblptrh	equ	0xFF7
 13656                           tblptrl	equ	0xFF6
 13657                           tablat	equ	0xFF5
 13658                           prodh	equ	0xFF4
 13659                           prodl	equ	0xFF3
 13660                           postinc0	equ	0xFEE
 13661                           wreg	equ	0xFE8
 13662                           postdec1	equ	0xFE5
 13663                           fsr1h	equ	0xFE2
 13664                           fsr1l	equ	0xFE1
 13665                           indf2	equ	0xFDF
 13666                           postinc2	equ	0xFDE
 13667                           postdec2	equ	0xFDD
 13668                           fsr2h	equ	0xFDA
 13669                           fsr2l	equ	0xFD9
 13670                           status	equ	0xFD8
 13671                           
 13672 ;; *************** function _vscp_getMDF_URL *****************
 13673 ;; Defined at:
 13674 ;;		line 2603 in file "../main.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;  idx             1    wreg     unsigned char 
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;  idx             1   14[COMRAM] unsigned char 
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      unsigned char 
 13681 ;; Registers used:
 13682 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13683 ;; Tracked objects:
 13684 ;;		On entry : F/0
 13685 ;;		On exit  : F/0
 13686 ;;		Unchanged: F/0
 13687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13688 ;;      Params:         0       0       0       0       0       0       0
 13689 ;;      Locals:         1       0       0       0       0       0       0
 13690 ;;      Temps:          1       0       0       0       0       0       0
 13691 ;;      Totals:         2       0       0       0       0       0       0
 13692 ;;Total ram usage:        2 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; Hardware stack levels required when called:    2
 13695 ;; This function calls:
 13696 ;;		Nothing
 13697 ;; This function is called by:
 13698 ;;		_vscp_readStdReg
 13699 ;;		_vscp_handleProtocolEvent
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text52
 13704  005770                     __ptext52:
 13705                           	opt stack 0
 13706  005770                     _vscp_getMDF_URL:
 13707                           	opt stack 26
 13708                           
 13709                           ;incstack = 0
 13710                           ;incstack = 0
 13711                           ;vscp_getMDF_URL@idx stored from wreg
 13712  005770  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;main.c: 2604: return vscp_deviceURL[ idx ];
 13716  005774  500F               	movf	vscp_getMDF_URL@idx,w,c
 13717  005776  0F00               	addlw	low _vscp_deviceURL
 13718  005778  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13719  00577A  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13720  00577E  0E06               	movlw	high __smallconst
 13721  005780  6EF7               	movwf	tblptrh,c
 13722  005782  0008               	tblrd		*
 13723  005784  50F5               	movf	tablat,w,c
 13724                           
 13725                           ; BSR set to: 0
 13726  005786  0012               	return	
 13727  005788                     __end_of_vscp_getMDF_URL:
 13728                           	opt stack 0
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           postinc0	equ	0xFEE
 13736                           wreg	equ	0xFE8
 13737                           postdec1	equ	0xFE5
 13738                           fsr1h	equ	0xFE2
 13739                           fsr1l	equ	0xFE1
 13740                           indf2	equ	0xFDF
 13741                           postinc2	equ	0xFDE
 13742                           postdec2	equ	0xFDD
 13743                           fsr2h	equ	0xFDA
 13744                           fsr2l	equ	0xFD9
 13745                           status	equ	0xFD8
 13746                           
 13747 ;; *************** function _vscp_getGUID *****************
 13748 ;; Defined at:
 13749 ;;		line 2580 in file "../main.c"
 13750 ;; Parameters:    Size  Location     Type
 13751 ;;  idx             1    wreg     unsigned char 
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;  idx             1   17[COMRAM] unsigned char 
 13754 ;; Return value:  Size  Location     Type
 13755 ;;                  1    wreg      unsigned char 
 13756 ;; Registers used:
 13757 ;;		wreg, status,2, status,0, cstack
 13758 ;; Tracked objects:
 13759 ;;		On entry : 0/0
 13760 ;;		On exit  : 0/0
 13761 ;;		Unchanged: 0/0
 13762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13763 ;;      Params:         0       0       0       0       0       0       0
 13764 ;;      Locals:         1       0       0       0       0       0       0
 13765 ;;      Temps:          0       0       0       0       0       0       0
 13766 ;;      Totals:         1       0       0       0       0       0       0
 13767 ;;Total ram usage:        1 bytes
 13768 ;; Hardware stack levels used:    1
 13769 ;; Hardware stack levels required when called:    3
 13770 ;; This function calls:
 13771 ;;		_readEEPROM
 13772 ;; This function is called by:
 13773 ;;		_vscp_readStdReg
 13774 ;;		_vscp_writeStdReg
 13775 ;;		_vscp_handleProtocolEvent
 13776 ;; This function uses a non-reentrant model
 13777 ;;
 13778                           
 13779                           	psect	text53
 13780  0057C8                     __ptext53:
 13781                           	opt stack 0
 13782  0057C8                     _vscp_getGUID:
 13783                           	opt stack 25
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;incstack = 0
 13787                           ;incstack = 0
 13788                           ;vscp_getGUID@idx stored from wreg
 13789  0057C8  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13790                           
 13791                           ;main.c: 2581: return readEEPROM(0x11 + idx);
 13792  0057CC  0E11               	movlw	17
 13793  0057CE  2412               	addwf	vscp_getGUID@idx,w,c
 13794  0057D0  6E0E               	movwf	?_readEEPROM,c
 13795  0057D2  6A0F               	clrf	?_readEEPROM+1,c
 13796  0057D4  0E00               	movlw	0
 13797  0057D6  220F               	addwfc	?_readEEPROM+1,f,c
 13798  0057D8  EF00  F02C         	goto	_readEEPROM	;wreg free
 13799  0057DC                     __end_of_vscp_getGUID:
 13800                           	opt stack 0
 13801                           tblptru	equ	0xFF8
 13802                           tblptrh	equ	0xFF7
 13803                           tblptrl	equ	0xFF6
 13804                           tablat	equ	0xFF5
 13805                           prodh	equ	0xFF4
 13806                           prodl	equ	0xFF3
 13807                           postinc0	equ	0xFEE
 13808                           wreg	equ	0xFE8
 13809                           postdec1	equ	0xFE5
 13810                           fsr1h	equ	0xFE2
 13811                           fsr1l	equ	0xFE1
 13812                           indf2	equ	0xFDF
 13813                           postinc2	equ	0xFDE
 13814                           postdec2	equ	0xFDD
 13815                           fsr2h	equ	0xFDA
 13816                           fsr2l	equ	0xFD9
 13817                           status	equ	0xFD8
 13818                           
 13819 ;; *************** function _vscp_getSubMinorVersion *****************
 13820 ;; Defined at:
 13821 ;;		line 2569 in file "../main.c"
 13822 ;; Parameters:    Size  Location     Type
 13823 ;;		None
 13824 ;; Auto vars:     Size  Location     Type
 13825 ;;		None
 13826 ;; Return value:  Size  Location     Type
 13827 ;;                  1    wreg      unsigned char 
 13828 ;; Registers used:
 13829 ;;		wreg
 13830 ;; Tracked objects:
 13831 ;;		On entry : F/0
 13832 ;;		On exit  : F/0
 13833 ;;		Unchanged: F/0
 13834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13835 ;;      Params:         0       0       0       0       0       0       0
 13836 ;;      Locals:         0       0       0       0       0       0       0
 13837 ;;      Temps:          0       0       0       0       0       0       0
 13838 ;;      Totals:         0       0       0       0       0       0       0
 13839 ;;Total ram usage:        0 bytes
 13840 ;; Hardware stack levels used:    1
 13841 ;; Hardware stack levels required when called:    2
 13842 ;; This function calls:
 13843 ;;		Nothing
 13844 ;; This function is called by:
 13845 ;;		_vscp_readStdReg
 13846 ;; This function uses a non-reentrant model
 13847 ;;
 13848                           
 13849                           	psect	text54
 13850  0058AE                     __ptext54:
 13851                           	opt stack 0
 13852  0058AE                     _vscp_getSubMinorVersion:
 13853                           	opt stack 26
 13854                           
 13855                           ; BSR set to: 0
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;main.c: 2570: return 0;
 13859                           
 13860                           ;incstack = 0
 13861                           ;incstack = 0
 13862  0058AE  0C00               	retlw	0
 13863  0058B0                     __end_of_vscp_getSubMinorVersion:
 13864                           	opt stack 0
 13865                           tblptru	equ	0xFF8
 13866                           tblptrh	equ	0xFF7
 13867                           tblptrl	equ	0xFF6
 13868                           tablat	equ	0xFF5
 13869                           prodh	equ	0xFF4
 13870                           prodl	equ	0xFF3
 13871                           postinc0	equ	0xFEE
 13872                           wreg	equ	0xFE8
 13873                           postdec1	equ	0xFE5
 13874                           fsr1h	equ	0xFE2
 13875                           fsr1l	equ	0xFE1
 13876                           indf2	equ	0xFDF
 13877                           postinc2	equ	0xFDE
 13878                           postdec2	equ	0xFDD
 13879                           fsr2h	equ	0xFDA
 13880                           fsr2l	equ	0xFD9
 13881                           status	equ	0xFD8
 13882                           
 13883 ;; *************** function _vscp_getMinorVersion *****************
 13884 ;; Defined at:
 13885 ;;		line 2560 in file "../main.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;		None
 13888 ;; Auto vars:     Size  Location     Type
 13889 ;;		None
 13890 ;; Return value:  Size  Location     Type
 13891 ;;                  1    wreg      unsigned char 
 13892 ;; Registers used:
 13893 ;;		wreg
 13894 ;; Tracked objects:
 13895 ;;		On entry : F/0
 13896 ;;		On exit  : F/0
 13897 ;;		Unchanged: F/0
 13898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13899 ;;      Params:         0       0       0       0       0       0       0
 13900 ;;      Locals:         0       0       0       0       0       0       0
 13901 ;;      Temps:          0       0       0       0       0       0       0
 13902 ;;      Totals:         0       0       0       0       0       0       0
 13903 ;;Total ram usage:        0 bytes
 13904 ;; Hardware stack levels used:    1
 13905 ;; Hardware stack levels required when called:    2
 13906 ;; This function calls:
 13907 ;;		Nothing
 13908 ;; This function is called by:
 13909 ;;		_vscp_readStdReg
 13910 ;; This function uses a non-reentrant model
 13911 ;;
 13912                           
 13913                           	psect	text55
 13914  0058B0                     __ptext55:
 13915                           	opt stack 0
 13916  0058B0                     _vscp_getMinorVersion:
 13917                           	opt stack 26
 13918                           
 13919                           ; BSR set to: 0
 13920                           
 13921                           ; BSR set to: 0
 13922                           ;main.c: 2561: return 2;
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;incstack = 0
 13926                           ;incstack = 0
 13927  0058B0  0C02               	retlw	2
 13928  0058B2                     __end_of_vscp_getMinorVersion:
 13929                           	opt stack 0
 13930                           tblptru	equ	0xFF8
 13931                           tblptrh	equ	0xFF7
 13932                           tblptrl	equ	0xFF6
 13933                           tablat	equ	0xFF5
 13934                           prodh	equ	0xFF4
 13935                           prodl	equ	0xFF3
 13936                           postinc0	equ	0xFEE
 13937                           wreg	equ	0xFE8
 13938                           postdec1	equ	0xFE5
 13939                           fsr1h	equ	0xFE2
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           postdec2	equ	0xFDD
 13944                           fsr2h	equ	0xFDA
 13945                           fsr2l	equ	0xFD9
 13946                           status	equ	0xFD8
 13947                           
 13948 ;; *************** function _vscp_getMajorVersion *****************
 13949 ;; Defined at:
 13950 ;;		line 2551 in file "../main.c"
 13951 ;; Parameters:    Size  Location     Type
 13952 ;;		None
 13953 ;; Auto vars:     Size  Location     Type
 13954 ;;		None
 13955 ;; Return value:  Size  Location     Type
 13956 ;;                  1    wreg      unsigned char 
 13957 ;; Registers used:
 13958 ;;		wreg
 13959 ;; Tracked objects:
 13960 ;;		On entry : F/0
 13961 ;;		On exit  : F/0
 13962 ;;		Unchanged: F/0
 13963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13964 ;;      Params:         0       0       0       0       0       0       0
 13965 ;;      Locals:         0       0       0       0       0       0       0
 13966 ;;      Temps:          0       0       0       0       0       0       0
 13967 ;;      Totals:         0       0       0       0       0       0       0
 13968 ;;Total ram usage:        0 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; Hardware stack levels required when called:    2
 13971 ;; This function calls:
 13972 ;;		Nothing
 13973 ;; This function is called by:
 13974 ;;		_vscp_readStdReg
 13975 ;; This function uses a non-reentrant model
 13976 ;;
 13977                           
 13978                           	psect	text56
 13979  0058B2                     __ptext56:
 13980                           	opt stack 0
 13981  0058B2                     _vscp_getMajorVersion:
 13982                           	opt stack 26
 13983                           
 13984                           ; BSR set to: 0
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;main.c: 2552: return 1;
 13988                           
 13989                           ; BSR set to: 0
 13990                           ;incstack = 0
 13991                           ;incstack = 0
 13992  0058B2  0C01               	retlw	1
 13993  0058B4                     __end_of_vscp_getMajorVersion:
 13994                           	opt stack 0
 13995                           tblptru	equ	0xFF8
 13996                           tblptrh	equ	0xFF7
 13997                           tblptrl	equ	0xFF6
 13998                           tablat	equ	0xFF5
 13999                           prodh	equ	0xFF4
 14000                           prodl	equ	0xFF3
 14001                           postinc0	equ	0xFEE
 14002                           wreg	equ	0xFE8
 14003                           postdec1	equ	0xFE5
 14004                           fsr1h	equ	0xFE2
 14005                           fsr1l	equ	0xFE1
 14006                           indf2	equ	0xFDF
 14007                           postinc2	equ	0xFDE
 14008                           postdec2	equ	0xFDD
 14009                           fsr2h	equ	0xFDA
 14010                           fsr2l	equ	0xFD9
 14011                           status	equ	0xFD8
 14012                           
 14013 ;; *************** function _vscp_newNodeOnline *****************
 14014 ;; Defined at:
 14015 ;;		line 491 in file "../../vscp_firmware/common/vscp_firmware.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;		None
 14018 ;; Auto vars:     Size  Location     Type
 14019 ;;		None
 14020 ;; Return value:  Size  Location     Type
 14021 ;;		None               void
 14022 ;; Registers used:
 14023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14024 ;; Tracked objects:
 14025 ;;		On entry : F/0
 14026 ;;		On exit  : F/0
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14029 ;;      Params:         0       0       0       0       0       0       0
 14030 ;;      Locals:         0       0       0       0       0       0       0
 14031 ;;      Temps:          1       0       0       0       0       0       0
 14032 ;;      Totals:         1       0       0       0       0       0       0
 14033 ;;Total ram usage:        1 bytes
 14034 ;; Hardware stack levels used:    1
 14035 ;; Hardware stack levels required when called:    7
 14036 ;; This function calls:
 14037 ;;		_vscp_sendEvent
 14038 ;; This function is called by:
 14039 ;;		_vscp_handleProtocolEvent
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text57
 14044  005530                     __ptext57:
 14045                           	opt stack 0
 14046  005530                     _vscp_newNodeOnline:
 14047                           	opt stack 22
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;vscp_firmware.c: 492: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 14051                           ;vscp_firmware.c: 493: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14052                           
 14053                           ; BSR set to: 0
 14054                           ;incstack = 0
 14055                           ;incstack = 0
 14056  005530  C0BC  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14057  005534  0E0F               	movlw	15
 14058  005536  1644               	andwf	??_vscp_newNodeOnline,f,c
 14059  005538  0444               	decf	??_vscp_newNodeOnline,w,c
 14060  00553A  E10E               	bnz	l1091
 14061                           
 14062                           ; BSR set to: 0
 14063  00553C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14064  00553E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14065  005542  62DF               	cpfseq	indf2,c
 14066  005544  D009               	goto	l1091
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;vscp_firmware.c: 499: vscp_omsg.flags = 0x80;
 14070  005546  0E80               	movlw	128
 14071  005548  6FCA               	movwf	_vscp_omsg& (0+255),b
 14072                           
 14073                           ; BSR set to: 0
 14074                           ;vscp_firmware.c: 500: vscp_omsg.priority = 0x00;
 14075  00554A  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;vscp_firmware.c: 501: vscp_omsg.vscp_class = 0;
 14079  00554C  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14080  00554E  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14081                           
 14082                           ;vscp_firmware.c: 502: vscp_omsg.vscp_type = 3;
 14083  005550  0E03               	movlw	3
 14084  005552  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;vscp_firmware.c: 503: vscp_sendEvent();
 14088  005554  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
 14089  005558                     l1091:
 14090                           
 14091                           ; BSR set to: 0
 14092  005558  0012               	return	
 14093  00555A                     __end_of_vscp_newNodeOnline:
 14094                           	opt stack 0
 14095                           tblptru	equ	0xFF8
 14096                           tblptrh	equ	0xFF7
 14097                           tblptrl	equ	0xFF6
 14098                           tablat	equ	0xFF5
 14099                           prodh	equ	0xFF4
 14100                           prodl	equ	0xFF3
 14101                           postinc0	equ	0xFEE
 14102                           wreg	equ	0xFE8
 14103                           postdec1	equ	0xFE5
 14104                           fsr1h	equ	0xFE2
 14105                           fsr1l	equ	0xFE1
 14106                           indf2	equ	0xFDF
 14107                           postinc2	equ	0xFDE
 14108                           postdec2	equ	0xFDD
 14109                           fsr2h	equ	0xFDA
 14110                           fsr2l	equ	0xFD9
 14111                           status	equ	0xFD8
 14112                           
 14113 ;; *************** function _vscp_handleDropNickname *****************
 14114 ;; Defined at:
 14115 ;;		line 427 in file "../../vscp_firmware/common/vscp_firmware.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;		None
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;  bytes           1   17[COMRAM] unsigned char 
 14120 ;; Return value:  Size  Location     Type
 14121 ;;		None               void
 14122 ;; Registers used:
 14123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14124 ;; Tracked objects:
 14125 ;;		On entry : F/0
 14126 ;;		On exit  : F/0
 14127 ;;		Unchanged: 0/0
 14128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14129 ;;      Params:         0       0       0       0       0       0       0
 14130 ;;      Locals:         1       0       0       0       0       0       0
 14131 ;;      Temps:          0       0       0       0       0       0       0
 14132 ;;      Totals:         1       0       0       0       0       0       0
 14133 ;;Total ram usage:        1 bytes
 14134 ;; Hardware stack levels used:    1
 14135 ;; Hardware stack levels required when called:    5
 14136 ;; This function calls:
 14137 ;;		_vscp_init
 14138 ;;		_vscp_writeNicknamePermanent
 14139 ;; This function is called by:
 14140 ;;		_vscp_handleProtocolEvent
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           	psect	text58
 14145  0054AA                     __ptext58:
 14146                           	opt stack 0
 14147  0054AA                     _vscp_handleDropNickname:
 14148                           	opt stack 24
 14149                           
 14150                           ; BSR set to: 0
 14151                           ;vscp_firmware.c: 428: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;incstack = 0
 14155                           ;incstack = 0
 14156  0054AA  51BC               	movf	_vscp_imsg& (0+255),w,b
 14157  0054AC  0B0F               	andlw	15
 14158  0054AE  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14159                           
 14160                           ; BSR set to: 0
 14161                           ;vscp_firmware.c: 434: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14162  0054B0  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14163  0054B2  E012               	bz	l1087
 14164                           
 14165                           ; BSR set to: 0
 14166  0054B4  51BA               	movf	_vscp_nickname& (0+255),w,b
 14167  0054B6  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14168  0054BA  62DF               	cpfseq	indf2,c
 14169  0054BC  D00D               	goto	l1087
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;vscp_firmware.c: 466: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14173  0054BE  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14174  0054C0  E005               	bz	l1086
 14175                           
 14176                           ; BSR set to: 0
 14177  0054C2  0E01               	movlw	1
 14178  0054C4  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14179  0054C6  D008               	goto	l1087
 14180                           
 14181                           ; BSR set to: 0
 14182  0054C8  67C3               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14183  0054CA  D006               	goto	l1087
 14184  0054CC                     l1086:
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;vscp_firmware.c: 468: vscp_nickname = 0xff;
 14188  0054CC  69BA               	setf	_vscp_nickname& (0+255),b
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;vscp_firmware.c: 469: vscp_writeNicknamePermanent(0xff);
 14192  0054CE  0EFF               	movlw	255
 14193  0054D0  EC09  F02C         	call	_vscp_writeNicknamePermanent
 14194                           
 14195                           ;vscp_firmware.c: 470: vscp_init();
 14196  0054D4  EC1F  F029         	call	_vscp_init	;wreg free
 14197  0054D8                     l1087:
 14198                           
 14199                           ; BSR set to: 0
 14200  0054D8  0012               	return	
 14201  0054DA                     __end_of_vscp_handleDropNickname:
 14202                           	opt stack 0
 14203                           tblptru	equ	0xFF8
 14204                           tblptrh	equ	0xFF7
 14205                           tblptrl	equ	0xFF6
 14206                           tablat	equ	0xFF5
 14207                           prodh	equ	0xFF4
 14208                           prodl	equ	0xFF3
 14209                           postinc0	equ	0xFEE
 14210                           wreg	equ	0xFE8
 14211                           postdec1	equ	0xFE5
 14212                           fsr1h	equ	0xFE2
 14213                           fsr1l	equ	0xFE1
 14214                           indf2	equ	0xFDF
 14215                           postinc2	equ	0xFDE
 14216                           postdec2	equ	0xFDD
 14217                           fsr2h	equ	0xFDA
 14218                           fsr2l	equ	0xFD9
 14219                           status	equ	0xFD8
 14220                           
 14221 ;; *************** function _vscp_init *****************
 14222 ;; Defined at:
 14223 ;;		line 114 in file "../../vscp_firmware/common/vscp_firmware.c"
 14224 ;; Parameters:    Size  Location     Type
 14225 ;;		None
 14226 ;; Auto vars:     Size  Location     Type
 14227 ;;		None
 14228 ;; Return value:  Size  Location     Type
 14229 ;;		None               void
 14230 ;; Registers used:
 14231 ;;		wreg, status,2, cstack
 14232 ;; Tracked objects:
 14233 ;;		On entry : 0/1
 14234 ;;		On exit  : F/0
 14235 ;;		Unchanged: 0/0
 14236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14237 ;;      Params:         0       0       0       0       0       0       0
 14238 ;;      Locals:         0       0       0       0       0       0       0
 14239 ;;      Temps:          0       0       0       0       0       0       0
 14240 ;;      Totals:         0       0       0       0       0       0       0
 14241 ;;Total ram usage:        0 bytes
 14242 ;; Hardware stack levels used:    1
 14243 ;; Hardware stack levels required when called:    4
 14244 ;; This function calls:
 14245 ;;		_vscp_readNicknamePermanent
 14246 ;; This function is called by:
 14247 ;;		_main
 14248 ;;		_vscp_handleDropNickname
 14249 ;;		_vscp_handleProtocolEvent
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           	psect	text59
 14254  00523E                     __ptext59:
 14255                           	opt stack 0
 14256  00523E                     _vscp_init:
 14257                           	opt stack 24
 14258                           
 14259                           ;vscp_firmware.c: 115: vscp_initledfunc = 0x02;
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;incstack = 0
 14263                           ;incstack = 0
 14264  00523E  0E02               	movlw	2
 14265  005240  6E4D               	movwf	_vscp_initledfunc,c
 14266                           
 14267                           ;vscp_firmware.c: 118: vscp_nickname = vscp_readNicknamePermanent();
 14268  005242  EC40  F02C         	call	_vscp_readNicknamePermanent	;wreg free
 14269  005246  0100               	movlb	0	; () banked
 14270  005248  6FBA               	movwf	_vscp_nickname& (0+255),b
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;vscp_firmware.c: 121: if (!vscp_nickname) vscp_nickname = 0xff;
 14274  00524A  67BA               	tstfsz	_vscp_nickname& (0+255),b
 14275  00524C  D001               	goto	l1028
 14276                           
 14277                           ; BSR set to: 0
 14278  00524E  69BA               	setf	_vscp_nickname& (0+255),b
 14279  005250                     l1028:
 14280                           
 14281                           ; BSR set to: 0
 14282                           ;vscp_firmware.c: 124: vscp_imsg.flags = 0;
 14283  005250  6BBC               	clrf	_vscp_imsg& (0+255),b
 14284                           
 14285                           ;vscp_firmware.c: 125: vscp_imsg.priority = 0;
 14286  005252  6BBD               	clrf	(_vscp_imsg+1)& (0+255),b
 14287                           
 14288                           ;vscp_firmware.c: 126: vscp_imsg.vscp_class = 0;
 14289  005254  6BBE               	clrf	(_vscp_imsg+2)& (0+255),b
 14290  005256  6BBF               	clrf	(_vscp_imsg+3)& (0+255),b
 14291                           
 14292                           ;vscp_firmware.c: 127: vscp_imsg.vscp_type = 0;
 14293  005258  6BC0               	clrf	(_vscp_imsg+4)& (0+255),b
 14294                           
 14295                           ;vscp_firmware.c: 130: vscp_omsg.flags = 0;
 14296  00525A  6BCA               	clrf	_vscp_omsg& (0+255),b
 14297                           
 14298                           ;vscp_firmware.c: 131: vscp_omsg.priority = 0;
 14299  00525C  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14300                           
 14301                           ;vscp_firmware.c: 132: vscp_omsg.vscp_class = 0;
 14302  00525E  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14303  005260  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14304                           
 14305                           ;vscp_firmware.c: 135: vscp_errorcnt = 0;
 14306  005262  6BCE               	clrf	(_vscp_omsg+4)& (0+255),b
 14307                           
 14308                           ;vscp_firmware.c: 136: vscp_alarmstatus = 0;
 14309  005264  6A4B               	clrf	_vscp_alarmstatus,c
 14310                           
 14311                           ;vscp_firmware.c: 138: vscp_probe_address = 0;
 14312  005266  6A4F               	clrf	_vscp_probe_address,c
 14313                           
 14314                           ;vscp_firmware.c: 141: vscp_node_state = 0x00;
 14315  005268  6BBB               	clrf	_vscp_node_state& (0+255),b
 14316                           
 14317                           ;vscp_firmware.c: 142: vscp_node_substate = 0x00;
 14318  00526A  6A4E               	clrf	_vscp_node_substate,c
 14319                           
 14320                           ;vscp_firmware.c: 144: vscp_probe_cnt = 0;
 14321  00526C  6A50               	clrf	_vscp_probe_cnt,c
 14322                           
 14323                           ;vscp_firmware.c: 145: vscp_page_select = 0;
 14324  00526E  6A46               	clrf	_vscp_page_select,c
 14325  005270  6A47               	clrf	_vscp_page_select+1,c
 14326                           
 14327                           ;vscp_firmware.c: 148: vscp_timer = 0;
 14328  005272  0101               	movlb	1	; () banked
 14329  005274  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14330  005276  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14331                           
 14332                           ;vscp_firmware.c: 149: vscp_configtimer = 0;
 14333  005278  6B1A               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14334  00527A  6B1B               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14335                           
 14336                           ;vscp_firmware.c: 150: vscp_second = 0;
 14337  00527C  6A51               	clrf	_vscp_second,c
 14338                           
 14339                           ;vscp_firmware.c: 151: vscp_minute = 0;
 14340  00527E  0100               	movlb	0	; () banked
 14341  005280  6BB9               	clrf	_vscp_minute& (0+255),b
 14342                           
 14343                           ;vscp_firmware.c: 152: vscp_hour = 0;
 14344  005282  6BB7               	clrf	_vscp_hour& (0+255),b
 14345                           
 14346                           ; BSR set to: 0
 14347  005284  0012               	return	
 14348  005286                     __end_of_vscp_init:
 14349                           	opt stack 0
 14350                           tblptru	equ	0xFF8
 14351                           tblptrh	equ	0xFF7
 14352                           tblptrl	equ	0xFF6
 14353                           tablat	equ	0xFF5
 14354                           prodh	equ	0xFF4
 14355                           prodl	equ	0xFF3
 14356                           postinc0	equ	0xFEE
 14357                           wreg	equ	0xFE8
 14358                           postdec1	equ	0xFE5
 14359                           fsr1h	equ	0xFE2
 14360                           fsr1l	equ	0xFE1
 14361                           indf2	equ	0xFDF
 14362                           postinc2	equ	0xFDE
 14363                           postdec2	equ	0xFDD
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           
 14368 ;; *************** function _vscp_readNicknamePermanent *****************
 14369 ;; Defined at:
 14370 ;;		line 2750 in file "../main.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;		None
 14373 ;; Auto vars:     Size  Location     Type
 14374 ;;		None
 14375 ;; Return value:  Size  Location     Type
 14376 ;;                  1    wreg      unsigned char 
 14377 ;; Registers used:
 14378 ;;		wreg, status,2, cstack
 14379 ;; Tracked objects:
 14380 ;;		On entry : 0/1
 14381 ;;		On exit  : 0/0
 14382 ;;		Unchanged: 0/0
 14383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14384 ;;      Params:         0       0       0       0       0       0       0
 14385 ;;      Locals:         0       0       0       0       0       0       0
 14386 ;;      Temps:          0       0       0       0       0       0       0
 14387 ;;      Totals:         0       0       0       0       0       0       0
 14388 ;;Total ram usage:        0 bytes
 14389 ;; Hardware stack levels used:    1
 14390 ;; Hardware stack levels required when called:    3
 14391 ;; This function calls:
 14392 ;;		_readEEPROM
 14393 ;; This function is called by:
 14394 ;;		_vscp_init
 14395 ;; This function uses a non-reentrant model
 14396 ;;
 14397                           
 14398                           	psect	text60
 14399  005880                     __ptext60:
 14400                           	opt stack 0
 14401  005880                     _vscp_readNicknamePermanent:
 14402                           	opt stack 24
 14403                           
 14404                           ;main.c: 2751: return readEEPROM( 0x01 );
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;incstack = 0
 14408                           ;incstack = 0
 14409  005880  6A0F               	clrf	?_readEEPROM+1,c
 14410  005882  0E01               	movlw	1
 14411  005884  6E0E               	movwf	?_readEEPROM,c
 14412  005886  EF00  F02C         	goto	_readEEPROM	;wreg free
 14413  00588A                     __end_of_vscp_readNicknamePermanent:
 14414                           	opt stack 0
 14415                           tblptru	equ	0xFF8
 14416                           tblptrh	equ	0xFF7
 14417                           tblptrl	equ	0xFF6
 14418                           tablat	equ	0xFF5
 14419                           prodh	equ	0xFF4
 14420                           prodl	equ	0xFF3
 14421                           postinc0	equ	0xFEE
 14422                           wreg	equ	0xFE8
 14423                           postdec1	equ	0xFE5
 14424                           fsr1h	equ	0xFE2
 14425                           fsr1l	equ	0xFE1
 14426                           indf2	equ	0xFDF
 14427                           postinc2	equ	0xFDE
 14428                           postdec2	equ	0xFDD
 14429                           fsr2h	equ	0xFDA
 14430                           fsr2l	equ	0xFD9
 14431                           status	equ	0xFD8
 14432                           
 14433 ;; *************** function _vscp_handleSetNickname *****************
 14434 ;; Defined at:
 14435 ;;		line 411 in file "../../vscp_firmware/common/vscp_firmware.c"
 14436 ;; Parameters:    Size  Location     Type
 14437 ;;		None
 14438 ;; Auto vars:     Size  Location     Type
 14439 ;;		None
 14440 ;; Return value:  Size  Location     Type
 14441 ;;		None               void
 14442 ;; Registers used:
 14443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14444 ;; Tracked objects:
 14445 ;;		On entry : F/0
 14446 ;;		On exit  : 0/0
 14447 ;;		Unchanged: 0/0
 14448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14449 ;;      Params:         0       0       0       0       0       0       0
 14450 ;;      Locals:         0       0       0       0       0       0       0
 14451 ;;      Temps:          0       0       0       0       0       0       0
 14452 ;;      Totals:         0       0       0       0       0       0       0
 14453 ;;Total ram usage:        0 bytes
 14454 ;; Hardware stack levels used:    1
 14455 ;; Hardware stack levels required when called:    4
 14456 ;; This function calls:
 14457 ;;		_vscp_writeNicknamePermanent
 14458 ;;		_vscp_setSegmentCRC
 14459 ;; This function is called by:
 14460 ;;		_vscp_handleProtocolEvent
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           	psect	text61
 14465  005644                     __ptext61:
 14466                           	opt stack 0
 14467  005644                     _vscp_handleSetNickname:
 14468                           	opt stack 25
 14469                           
 14470                           ; BSR set to: 0
 14471                           ;vscp_firmware.c: 412: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 14472                           ;vscp_firmware.c: 413: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14473                           
 14474                           ;incstack = 0
 14475                           ;incstack = 0
 14476  005644  51BC               	movf	_vscp_imsg& (0+255),w,b
 14477  005646  0B0F               	andlw	15
 14478  005648  0A02               	xorlw	2
 14479  00564A  E10D               	bnz	l1080
 14480                           
 14481                           ; BSR set to: 0
 14482  00564C  51BA               	movf	_vscp_nickname& (0+255),w,b
 14483  00564E  EE20  F0C2         	lfsr	2,_vscp_imsg+6
 14484  005652  62DF               	cpfseq	indf2,c
 14485  005654  D008               	goto	l1080
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;vscp_firmware.c: 416: vscp_nickname = vscp_imsg.data[ 1 ];
 14489  005656  C0C3  F0BA         	movff	_vscp_imsg+7,_vscp_nickname
 14490                           
 14491                           ; BSR set to: 0
 14492                           ;vscp_firmware.c: 417: vscp_writeNicknamePermanent(vscp_nickname);
 14493  00565A  51BA               	movf	_vscp_nickname& (0+255),w,b
 14494  00565C  EC09  F02C         	call	_vscp_writeNicknamePermanent
 14495                           
 14496                           ;vscp_firmware.c: 418: vscp_setSegmentCRC(0x40);
 14497  005660  0E40               	movlw	64
 14498  005662  ECF7  F02B         	call	_vscp_setSegmentCRC
 14499  005666                     l1080:
 14500  005666  0012               	return	
 14501  005668                     __end_of_vscp_handleSetNickname:
 14502                           	opt stack 0
 14503                           tblptru	equ	0xFF8
 14504                           tblptrh	equ	0xFF7
 14505                           tblptrl	equ	0xFF6
 14506                           tablat	equ	0xFF5
 14507                           prodh	equ	0xFF4
 14508                           prodl	equ	0xFF3
 14509                           postinc0	equ	0xFEE
 14510                           wreg	equ	0xFE8
 14511                           postdec1	equ	0xFE5
 14512                           fsr1h	equ	0xFE2
 14513                           fsr1l	equ	0xFE1
 14514                           indf2	equ	0xFDF
 14515                           postinc2	equ	0xFDE
 14516                           postdec2	equ	0xFDD
 14517                           fsr2h	equ	0xFDA
 14518                           fsr2l	equ	0xFD9
 14519                           status	equ	0xFD8
 14520                           
 14521 ;; *************** function _vscp_handleHeartbeat *****************
 14522 ;; Defined at:
 14523 ;;		line 385 in file "../../vscp_firmware/common/vscp_firmware.c"
 14524 ;; Parameters:    Size  Location     Type
 14525 ;;		None
 14526 ;; Auto vars:     Size  Location     Type
 14527 ;;		None
 14528 ;; Return value:  Size  Location     Type
 14529 ;;		None               void
 14530 ;; Registers used:
 14531 ;;		wreg, status,2, status,0, cstack
 14532 ;; Tracked objects:
 14533 ;;		On entry : F/0
 14534 ;;		On exit  : 0/0
 14535 ;;		Unchanged: 0/0
 14536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14537 ;;      Params:         0       0       0       0       0       0       0
 14538 ;;      Locals:         0       0       0       0       0       0       0
 14539 ;;      Temps:          0       0       0       0       0       0       0
 14540 ;;      Totals:         0       0       0       0       0       0       0
 14541 ;;Total ram usage:        0 bytes
 14542 ;; Hardware stack levels used:    1
 14543 ;; Hardware stack levels required when called:    4
 14544 ;; This function calls:
 14545 ;;		_vscp_writeNicknamePermanent
 14546 ;;		_vscp_getSegmentCRC
 14547 ;;		_vscp_setSegmentCRC
 14548 ;; This function is called by:
 14549 ;;		_vscp_handleProtocolEvent
 14550 ;; This function uses a non-reentrant model
 14551 ;;
 14552                           
 14553                           	psect	text62
 14554  005310                     __ptext62:
 14555                           	opt stack 0
 14556  005310                     _vscp_handleHeartbeat:
 14557                           	opt stack 25
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;vscp_firmware.c: 386: if ( !vscp_getSegmentCRC() ) {
 14561                           
 14562                           ;incstack = 0
 14563                           ;incstack = 0
 14564  005310  EC45  F02C         	call	_vscp_getSegmentCRC	;wreg free
 14565  005314  0900               	iorlw	0
 14566  005316  E116               	bnz	l11208
 14567                           
 14568                           ;vscp_firmware.c: 387: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14569                           ;vscp_firmware.c: 388: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14570  005318  0100               	movlb	0	; () banked
 14571  00531A  51BC               	movf	_vscp_imsg& (0+255),w,b
 14572  00531C  0B0F               	andlw	15
 14573  00531E  0A05               	xorlw	5
 14574  005320  E115               	bnz	l1076
 14575                           
 14576                           ; BSR set to: 0
 14577  005322  EC45  F02C         	call	_vscp_getSegmentCRC	;wreg free
 14578  005326  0100               	movlb	0	; () banked
 14579  005328  19C2               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14580  00532A  E010               	bz	l1076
 14581                           
 14582                           ; BSR set to: 0
 14583                           ;vscp_firmware.c: 392: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14584  00532C  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14585  00532E  ECF7  F02B         	call	_vscp_setSegmentCRC
 14586                           
 14587                           ;vscp_firmware.c: 395: vscp_nickname = 0xff;
 14588  005332  0100               	movlb	0	; () banked
 14589  005334  69BA               	setf	_vscp_nickname& (0+255),b
 14590                           
 14591                           ;vscp_firmware.c: 396: vscp_writeNicknamePermanent(0xff);
 14592  005336  0EFF               	movlw	255
 14593  005338  EC09  F02C         	call	_vscp_writeNicknamePermanent
 14594                           
 14595                           ;vscp_firmware.c: 397: vscp_node_state = 0x01;
 14596  00533C  0E01               	movlw	1
 14597  00533E  0100               	movlb	0	; () banked
 14598  005340  6FBB               	movwf	_vscp_node_state& (0+255),b
 14599  005342  D004               	goto	l1076
 14600  005344                     l11208:
 14601                           
 14602                           ;vscp_firmware.c: 400: else {
 14603                           ;vscp_firmware.c: 402: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14604  005344  0100               	movlb	0	; () banked
 14605  005346  51C2               	movf	(_vscp_imsg+6)& (0+255),w,b
 14606  005348  ECF7  F02B         	call	_vscp_setSegmentCRC
 14607  00534C                     l1076:
 14608  00534C  0012               	return	
 14609  00534E                     __end_of_vscp_handleHeartbeat:
 14610                           	opt stack 0
 14611                           tblptru	equ	0xFF8
 14612                           tblptrh	equ	0xFF7
 14613                           tblptrl	equ	0xFF6
 14614                           tablat	equ	0xFF5
 14615                           prodh	equ	0xFF4
 14616                           prodl	equ	0xFF3
 14617                           postinc0	equ	0xFEE
 14618                           wreg	equ	0xFE8
 14619                           postdec1	equ	0xFE5
 14620                           fsr1h	equ	0xFE2
 14621                           fsr1l	equ	0xFE1
 14622                           indf2	equ	0xFDF
 14623                           postinc2	equ	0xFDE
 14624                           postdec2	equ	0xFDD
 14625                           fsr2h	equ	0xFDA
 14626                           fsr2l	equ	0xFD9
 14627                           status	equ	0xFD8
 14628                           
 14629 ;; *************** function _vscp_goBootloaderMode *****************
 14630 ;; Defined at:
 14631 ;;		line 2735 in file "../main.c"
 14632 ;; Parameters:    Size  Location     Type
 14633 ;;		None
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;		None
 14636 ;; Return value:  Size  Location     Type
 14637 ;;		None               void
 14638 ;; Registers used:
 14639 ;;		wreg, status,2, cstack
 14640 ;; Tracked objects:
 14641 ;;		On entry : F/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14645 ;;      Params:         0       0       0       0       0       0       0
 14646 ;;      Locals:         0       0       0       0       0       0       0
 14647 ;;      Temps:          0       0       0       0       0       0       0
 14648 ;;      Totals:         0       0       0       0       0       0       0
 14649 ;;Total ram usage:        0 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; Hardware stack levels required when called:    3
 14652 ;; This function calls:
 14653 ;;		_writeEEPROM
 14654 ;; This function is called by:
 14655 ;;		_vscp_handleProtocolEvent
 14656 ;; This function uses a non-reentrant model
 14657 ;;
 14658                           
 14659                           	psect	text63
 14660  005848                     __ptext63:
 14661                           	opt stack 0
 14662  005848                     _vscp_goBootloaderMode:
 14663                           	opt stack 26
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;main.c: 2738: writeEEPROM(0x00, 0xff);
 14667                           
 14668                           ;incstack = 0
 14669                           ;incstack = 0
 14670  005848  6A0F               	clrf	?_writeEEPROM+1,c
 14671  00584A  6A0E               	clrf	?_writeEEPROM,c
 14672  00584C  0EFF               	movlw	255
 14673  00584E  6810               	setf	?_writeEEPROM+2,c
 14674  005850  ECFD  F02A         	call	_writeEEPROM	;wreg free
 14675  005854  00FF               	reset		;# 
 14676  005856  0012               	return	
 14677  005858                     __end_of_vscp_goBootloaderMode:
 14678                           	opt stack 0
 14679                           tblptru	equ	0xFF8
 14680                           tblptrh	equ	0xFF7
 14681                           tblptrl	equ	0xFF6
 14682                           tablat	equ	0xFF5
 14683                           prodh	equ	0xFF4
 14684                           prodl	equ	0xFF3
 14685                           postinc0	equ	0xFEE
 14686                           wreg	equ	0xFE8
 14687                           postdec1	equ	0xFE5
 14688                           fsr1h	equ	0xFE2
 14689                           fsr1l	equ	0xFE1
 14690                           indf2	equ	0xFDF
 14691                           postinc2	equ	0xFDE
 14692                           postdec2	equ	0xFDD
 14693                           fsr2h	equ	0xFDA
 14694                           fsr2l	equ	0xFD9
 14695                           status	equ	0xFD8
 14696                           
 14697 ;; *************** function _vscp_getMatrixInfo *****************
 14698 ;; Defined at:
 14699 ;;		line 2670 in file "../main.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;  pData           1    wreg     PTR unsigned char 
 14702 ;;		 -> vscp_omsg(13), 
 14703 ;; Auto vars:     Size  Location     Type
 14704 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14705 ;;		 -> vscp_omsg(13), 
 14706 ;;  i               1   14[COMRAM] unsigned char 
 14707 ;; Return value:  Size  Location     Type
 14708 ;;		None               void
 14709 ;; Registers used:
 14710 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14711 ;; Tracked objects:
 14712 ;;		On entry : F/0
 14713 ;;		On exit  : F/0
 14714 ;;		Unchanged: F/0
 14715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14716 ;;      Params:         0       0       0       0       0       0       0
 14717 ;;      Locals:         2       0       0       0       0       0       0
 14718 ;;      Temps:          0       0       0       0       0       0       0
 14719 ;;      Totals:         2       0       0       0       0       0       0
 14720 ;;Total ram usage:        2 bytes
 14721 ;; Hardware stack levels used:    1
 14722 ;; Hardware stack levels required when called:    2
 14723 ;; This function calls:
 14724 ;;		Nothing
 14725 ;; This function is called by:
 14726 ;;		_vscp_handleProtocolEvent
 14727 ;; This function uses a non-reentrant model
 14728 ;;
 14729                           
 14730                           	psect	text64
 14731  005726                     __ptext64:
 14732                           	opt stack 0
 14733  005726                     _vscp_getMatrixInfo:
 14734                           	opt stack 27
 14735                           
 14736                           ;incstack = 0
 14737                           ;incstack = 0
 14738                           ;vscp_getMatrixInfo@pData stored from wreg
 14739  005726  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14740                           
 14741                           ; BSR set to: 0
 14742                           ;main.c: 2671: uint8_t i;
 14743                           ;main.c: 2675: for (i = 0; i < 8; i++) {
 14744  00572A  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14745  00572C                     l8074:
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;main.c: 2676: pData[ i ] = 0;
 14749  00572C  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14750  00572E  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14751  005730  6ED9               	movwf	fsr2l,c
 14752  005732  6ADA               	clrf	fsr2h,c
 14753  005734  6ADF               	clrf	indf2,c
 14754                           
 14755                           ; BSR set to: 0
 14756  005736  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14757                           
 14758                           ; BSR set to: 0
 14759  005738  0E07               	movlw	7
 14760  00573A  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14761  00573C  D7F7               	goto	l8074
 14762                           
 14763                           ; BSR set to: 0
 14764  00573E  0C07               	retlw	7
 14765  005740                     __end_of_vscp_getMatrixInfo:
 14766                           	opt stack 0
 14767                           tblptru	equ	0xFF8
 14768                           tblptrh	equ	0xFF7
 14769                           tblptrl	equ	0xFF6
 14770                           tablat	equ	0xFF5
 14771                           prodh	equ	0xFF4
 14772                           prodl	equ	0xFF3
 14773                           postinc0	equ	0xFEE
 14774                           wreg	equ	0xFE8
 14775                           postdec1	equ	0xFE5
 14776                           fsr1h	equ	0xFE2
 14777                           fsr1l	equ	0xFE1
 14778                           indf2	equ	0xFDF
 14779                           postinc2	equ	0xFDE
 14780                           postdec2	equ	0xFDD
 14781                           fsr2h	equ	0xFDA
 14782                           fsr2l	equ	0xFD9
 14783                           status	equ	0xFD8
 14784                           
 14785 ;; *************** function _vscp_handleProbeState *****************
 14786 ;; Defined at:
 14787 ;;		line 197 in file "../../vscp_firmware/common/vscp_firmware.c"
 14788 ;; Parameters:    Size  Location     Type
 14789 ;;		None
 14790 ;; Auto vars:     Size  Location     Type
 14791 ;;		None
 14792 ;; Return value:  Size  Location     Type
 14793 ;;		None               void
 14794 ;; Registers used:
 14795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14796 ;; Tracked objects:
 14797 ;;		On entry : 0/0
 14798 ;;		On exit  : F/0
 14799 ;;		Unchanged: 0/0
 14800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14801 ;;      Params:         0       0       0       0       0       0       0
 14802 ;;      Locals:         0       0       0       0       0       0       0
 14803 ;;      Temps:          0       0       0       0       0       0       0
 14804 ;;      Totals:         0       0       0       0       0       0       0
 14805 ;;Total ram usage:        0 bytes
 14806 ;; Hardware stack levels used:    1
 14807 ;; Hardware stack levels required when called:    8
 14808 ;; This function calls:
 14809 ;;		_vscp_goActiveState
 14810 ;;		_vscp_sendEvent
 14811 ;;		_vscp_writeNicknamePermanent
 14812 ;;		_vscp_setSegmentCRC
 14813 ;; This function is called by:
 14814 ;;		_main
 14815 ;; This function uses a non-reentrant model
 14816 ;;
 14817                           
 14818                           	psect	text65
 14819  00451C                     __ptext65:
 14820                           	opt stack 0
 14821  00451C                     _vscp_handleProbeState:
 14822                           	opt stack 22
 14823                           
 14824                           ;vscp_firmware.c: 198: switch (vscp_node_substate) {
 14825                           
 14826                           ; BSR set to: 0
 14827                           ;incstack = 0
 14828                           ;incstack = 0
 14829  00451C  D058               	goto	l9678
 14830  00451E                     l9608:
 14831                           
 14832                           ;vscp_firmware.c: 202: if (0xff != vscp_probe_address) {
 14833  00451E  284F               	incf	_vscp_probe_address,w,c
 14834  004520  E012               	bz	l9624
 14835                           
 14836                           ;vscp_firmware.c: 204: vscp_omsg.flags = 0x80 + 1;
 14837  004522  0E81               	movlw	129
 14838  004524  0100               	movlb	0	; () banked
 14839  004526  6FCA               	movwf	_vscp_omsg& (0+255),b
 14840                           
 14841                           ; BSR set to: 0
 14842                           ;vscp_firmware.c: 205: vscp_omsg.priority = 0x00;
 14843  004528  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;vscp_firmware.c: 206: vscp_omsg.vscp_class = 0;
 14847  00452A  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14848  00452C  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14849                           
 14850                           ;vscp_firmware.c: 207: vscp_omsg.vscp_type = 2;
 14851  00452E  0E02               	movlw	2
 14852  004530  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;vscp_firmware.c: 208: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14856  004532  C04F  F0CF         	movff	_vscp_probe_address,_vscp_omsg+5
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;vscp_firmware.c: 211: vscp_sendEvent();
 14860  004536  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;vscp_firmware.c: 213: vscp_node_substate = 0x01;
 14864  00453A  0E01               	movlw	1
 14865  00453C  6E4E               	movwf	_vscp_node_substate,c
 14866  00453E                     l9622:
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;vscp_firmware.c: 214: vscp_timer = 0;
 14870  00453E  0101               	movlb	1	; () banked
 14871  004540  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14872  004542  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14873                           
 14874                           ;vscp_firmware.c: 216: } else {
 14875  004544  D04A               	goto	l1043
 14876  004546                     l9624:
 14877                           
 14878                           ;vscp_firmware.c: 219: vscp_node_state = 0x04;
 14879  004546  0E04               	movlw	4
 14880  004548  0100               	movlb	0	; () banked
 14881  00454A  6FBB               	movwf	_vscp_node_state& (0+255),b
 14882                           
 14883                           ;vscp_firmware.c: 222: vscp_omsg.flags = 0x80 + 1;
 14884  00454C  0E81               	movlw	129
 14885  00454E  6FCA               	movwf	_vscp_omsg& (0+255),b
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;vscp_firmware.c: 223: vscp_omsg.data[ 0 ] = 0xff;
 14889  004550  69CF               	setf	(_vscp_omsg+5)& (0+255),b
 14890                           
 14891                           ;vscp_firmware.c: 224: vscp_omsg.priority = 0x07;
 14892  004552  0E07               	movlw	7
 14893  004554  6FCB               	movwf	(_vscp_omsg+1)& (0+255),b
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;vscp_firmware.c: 225: vscp_omsg.vscp_class = 0;
 14897  004556  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 14898  004558  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 14899                           
 14900                           ;vscp_firmware.c: 226: vscp_omsg.vscp_type = 3;
 14901  00455A  0E03               	movlw	3
 14902  00455C  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 14903                           
 14904                           ; BSR set to: 0
 14905                           ;vscp_firmware.c: 229: vscp_sendEvent();
 14906  00455E  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
 14907  004562  D03B               	goto	l1043
 14908  004564                     l1044:
 14909                           
 14910                           ;vscp_firmware.c: 236: if (vscp_imsg.flags & 0x80) {
 14911  004564  0100               	movlb	0	; () banked
 14912  004566  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 14913  004568  D00F               	goto	l9648
 14914                           
 14915                           ; BSR set to: 0
 14916                           ;vscp_firmware.c: 239: if ((0 == vscp_imsg.vscp_class) &&
 14917                           ;vscp_firmware.c: 240: (3 == vscp_imsg.vscp_type)) {
 14918  00456A  51BF               	movf	(_vscp_imsg+3)& (0+255),w,b
 14919  00456C  11BE               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14920  00456E  E135               	bnz	l1043
 14921                           
 14922                           ; BSR set to: 0
 14923  004570  51C0               	movf	(_vscp_imsg+4)& (0+255),w,b
 14924  004572  0A03               	xorlw	3
 14925  004574  E132               	bnz	l1043
 14926                           
 14927                           ; BSR set to: 0
 14928                           ;vscp_firmware.c: 243: if (0 == vscp_probe_address) {
 14929  004576  664F               	tstfsz	_vscp_probe_address,c
 14930  004578  D003               	goto	l9642
 14931                           
 14932                           ; BSR set to: 0
 14933                           ;vscp_firmware.c: 247: vscp_node_state = 0x02;
 14934  00457A  0E02               	movlw	2
 14935  00457C  6FBB               	movwf	_vscp_node_state& (0+255),b
 14936  00457E  D7DF               	goto	l9622
 14937  004580                     l9642:
 14938                           
 14939                           ; BSR set to: 0
 14940                           ;vscp_firmware.c: 253: vscp_probe_address++;
 14941  004580  2A4F               	incf	_vscp_probe_address,f,c
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;vscp_firmware.c: 254: vscp_node_substate = 0x00;
 14945  004582  6A4E               	clrf	_vscp_node_substate,c
 14946  004584                     l9646:
 14947                           
 14948                           ;vscp_firmware.c: 255: vscp_probe_cnt = 0;
 14949  004584  6A50               	clrf	_vscp_probe_cnt,c
 14950  004586  D029               	goto	l1043
 14951  004588                     l9648:
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;vscp_firmware.c: 261: if (vscp_timer > 1000) {
 14955  004588  0EE9               	movlw	233
 14956  00458A  0101               	movlb	1	; () banked
 14957  00458C  5D1C               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14958  00458E  0E03               	movlw	3
 14959  004590  591D               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14960  004592  E323               	bnc	l1043
 14961                           
 14962                           ; BSR set to: 1
 14963                           ;vscp_firmware.c: 263: vscp_probe_cnt++;
 14964  004594  2A50               	incf	_vscp_probe_cnt,f,c
 14965                           
 14966                           ; BSR set to: 1
 14967                           ;vscp_firmware.c: 265: if (vscp_probe_cnt >= 3) {
 14968  004596  0E02               	movlw	2
 14969  004598  6450               	cpfsgt	_vscp_probe_cnt,c
 14970  00459A  D017               	goto	l1051
 14971                           
 14972                           ; BSR set to: 1
 14973                           ;vscp_firmware.c: 268: if (0 == vscp_probe_address) {
 14974  00459C  664F               	tstfsz	_vscp_probe_address,c
 14975  00459E  D005               	goto	l1052
 14976                           
 14977                           ; BSR set to: 1
 14978                           ;vscp_firmware.c: 271: vscp_probe_address++;
 14979  0045A0  2A4F               	incf	_vscp_probe_address,f,c
 14980                           
 14981                           ; BSR set to: 1
 14982                           ;vscp_firmware.c: 272: vscp_node_substate = 0x00;
 14983  0045A2  6A4E               	clrf	_vscp_node_substate,c
 14984                           
 14985                           ; BSR set to: 1
 14986                           ;vscp_firmware.c: 273: vscp_timer = 0;
 14987  0045A4  6B1C               	clrf	_vscp_timer& (0+255),b	;volatile
 14988  0045A6  6B1D               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14989  0045A8  D7ED               	goto	l9646
 14990  0045AA                     l1052:
 14991                           
 14992                           ; BSR set to: 1
 14993                           ;vscp_firmware.c: 279: vscp_nickname = vscp_probe_address;
 14994  0045AA  C04F  F0BA         	movff	_vscp_probe_address,_vscp_nickname
 14995                           
 14996                           ; BSR set to: 1
 14997                           ;vscp_firmware.c: 280: vscp_node_state = 0x03;
 14998  0045AE  0E03               	movlw	3
 14999  0045B0  0100               	movlb	0	; () banked
 15000  0045B2  6FBB               	movwf	_vscp_node_state& (0+255),b
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;vscp_firmware.c: 281: vscp_node_substate = 0x00;
 15004  0045B4  6A4E               	clrf	_vscp_node_substate,c
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;vscp_firmware.c: 282: vscp_writeNicknamePermanent(vscp_nickname);
 15008  0045B6  51BA               	movf	_vscp_nickname& (0+255),w,b
 15009  0045B8  EC09  F02C         	call	_vscp_writeNicknamePermanent
 15010                           
 15011                           ;vscp_firmware.c: 283: vscp_setSegmentCRC(0x40);
 15012  0045BC  0E40               	movlw	64
 15013  0045BE  ECF7  F02B         	call	_vscp_setSegmentCRC
 15014                           
 15015                           ;vscp_firmware.c: 286: vscp_probe_cnt = 0;
 15016  0045C2  6A50               	clrf	_vscp_probe_cnt,c
 15017                           
 15018                           ;vscp_firmware.c: 287: vscp_goActiveState();
 15019  0045C4  EC68  F02B         	call	_vscp_goActiveState	;wreg free
 15020  0045C8  D008               	goto	l1043
 15021  0045CA                     l1051:
 15022                           
 15023                           ;vscp_firmware.c: 291: vscp_node_substate = 0x00;
 15024  0045CA  6A4E               	clrf	_vscp_node_substate,c
 15025  0045CC  D006               	goto	l1043
 15026  0045CE                     l9678:
 15027  0045CE  504E               	movf	_vscp_node_substate,w,c
 15028                           
 15029                           ; Switch size 1, requested type "speed"
 15030                           ; Number of cases is 3, Range of values is 0 to 2
 15031                           ; switch strategies available:
 15032                           ; Name         Instructions Cycles
 15033                           ; simple_byte           10     6 (average)
 15034                           ;	Chosen strategy is simple_byte
 15035  0045D0  E0A6               	bz	l9608
 15036  0045D2  0A01               	xorlw	1	; case 1
 15037  0045D4  E0C7               	bz	l1044
 15038  0045D6  0A03               	xorlw	3	; case 2
 15039  0045D8  E1F8               	bnz	l1051
 15040  0045DA                     l1043:
 15041                           
 15042                           ;vscp_firmware.c: 306: vscp_imsg.flags = 0;
 15043  0045DA  0100               	movlb	0	; () banked
 15044  0045DC  6BBC               	clrf	_vscp_imsg& (0+255),b
 15045                           
 15046                           ; BSR set to: 0
 15047  0045DE  0012               	return	
 15048  0045E0                     __end_of_vscp_handleProbeState:
 15049                           	opt stack 0
 15050                           tblptru	equ	0xFF8
 15051                           tblptrh	equ	0xFF7
 15052                           tblptrl	equ	0xFF6
 15053                           tablat	equ	0xFF5
 15054                           prodh	equ	0xFF4
 15055                           prodl	equ	0xFF3
 15056                           postinc0	equ	0xFEE
 15057                           wreg	equ	0xFE8
 15058                           postdec1	equ	0xFE5
 15059                           fsr1h	equ	0xFE2
 15060                           fsr1l	equ	0xFE1
 15061                           indf2	equ	0xFDF
 15062                           postinc2	equ	0xFDE
 15063                           postdec2	equ	0xFDD
 15064                           fsr2h	equ	0xFDA
 15065                           fsr2l	equ	0xFD9
 15066                           status	equ	0xFD8
 15067                           
 15068 ;; *************** function _vscp_goActiveState *****************
 15069 ;; Defined at:
 15070 ;;		line 347 in file "../../vscp_firmware/common/vscp_firmware.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;		None
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;		None
 15075 ;; Return value:  Size  Location     Type
 15076 ;;		None               void
 15077 ;; Registers used:
 15078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : F/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15084 ;;      Params:         0       0       0       0       0       0       0
 15085 ;;      Locals:         0       0       0       0       0       0       0
 15086 ;;      Temps:          0       0       0       0       0       0       0
 15087 ;;      Totals:         0       0       0       0       0       0       0
 15088 ;;Total ram usage:        0 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    7
 15091 ;; This function calls:
 15092 ;;		_vscp_sendEvent
 15093 ;; This function is called by:
 15094 ;;		_main
 15095 ;;		_vscp_handleProbeState
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           	psect	text66
 15100  0056D0                     __ptext66:
 15101                           	opt stack 0
 15102  0056D0                     _vscp_goActiveState:
 15103                           	opt stack 22
 15104                           
 15105                           ;vscp_firmware.c: 348: vscp_omsg.flags = 0x80 + 1;
 15106                           
 15107                           ; BSR set to: 0
 15108                           ;incstack = 0
 15109                           ;incstack = 0
 15110  0056D0  0E81               	movlw	129
 15111  0056D2  0100               	movlb	0	; () banked
 15112  0056D4  6FCA               	movwf	_vscp_omsg& (0+255),b
 15113                           
 15114                           ; BSR set to: 0
 15115                           ;vscp_firmware.c: 349: vscp_omsg.priority = 0x00;
 15116  0056D6  6BCB               	clrf	(_vscp_omsg+1)& (0+255),b
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;vscp_firmware.c: 350: vscp_omsg.vscp_class = 0;
 15120  0056D8  6BCC               	clrf	(_vscp_omsg+2)& (0+255),b
 15121  0056DA  6BCD               	clrf	(_vscp_omsg+3)& (0+255),b
 15122                           
 15123                           ;vscp_firmware.c: 351: vscp_omsg.vscp_type = 2;
 15124  0056DC  0E02               	movlw	2
 15125  0056DE  6FCE               	movwf	(_vscp_omsg+4)& (0+255),b
 15126                           
 15127                           ; BSR set to: 0
 15128                           ;vscp_firmware.c: 352: vscp_omsg.data[ 0 ] = vscp_nickname;
 15129  0056E0  C0BA  F0CF         	movff	_vscp_nickname,_vscp_omsg+5
 15130                           
 15131                           ; BSR set to: 0
 15132                           ;vscp_firmware.c: 355: vscp_sendEvent();
 15133  0056E4  ECD6  F02A         	call	_vscp_sendEvent	;wreg free
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;vscp_firmware.c: 357: vscp_initledfunc = 0x01;
 15137  0056E8  0E01               	movlw	1
 15138  0056EA  6E4D               	movwf	_vscp_initledfunc,c
 15139                           
 15140                           ; BSR set to: 0
 15141  0056EC  0C01               	retlw	1
 15142  0056EE                     __end_of_vscp_goActiveState:
 15143                           	opt stack 0
 15144                           tblptru	equ	0xFF8
 15145                           tblptrh	equ	0xFF7
 15146                           tblptrl	equ	0xFF6
 15147                           tablat	equ	0xFF5
 15148                           prodh	equ	0xFF4
 15149                           prodl	equ	0xFF3
 15150                           postinc0	equ	0xFEE
 15151                           wreg	equ	0xFE8
 15152                           postdec1	equ	0xFE5
 15153                           fsr1h	equ	0xFE2
 15154                           fsr1l	equ	0xFE1
 15155                           indf2	equ	0xFDF
 15156                           postinc2	equ	0xFDE
 15157                           postdec2	equ	0xFDD
 15158                           fsr2h	equ	0xFDA
 15159                           fsr2l	equ	0xFD9
 15160                           status	equ	0xFD8
 15161                           
 15162 ;; *************** function _vscp_sendEvent *****************
 15163 ;; Defined at:
 15164 ;;		line 1272 in file "../../vscp_firmware/common/vscp_firmware.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;		None
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;  rv              1   66[COMRAM] unsigned char 
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  1    wreg      unsigned char 
 15171 ;; Registers used:
 15172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15173 ;; Tracked objects:
 15174 ;;		On entry : F/0
 15175 ;;		On exit  : F/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15178 ;;      Params:         0       0       0       0       0       0       0
 15179 ;;      Locals:         1       0       0       0       0       0       0
 15180 ;;      Temps:          0       0       0       0       0       0       0
 15181 ;;      Totals:         1       0       0       0       0       0       0
 15182 ;;Total ram usage:        1 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; Hardware stack levels required when called:    6
 15185 ;; This function calls:
 15186 ;;		_sendVSCPFrame
 15187 ;; This function is called by:
 15188 ;;		_doWork
 15189 ;;		_doOneSecondWork
 15190 ;;		_sendTempEvent
 15191 ;;		_vscp_handleProbeState
 15192 ;;		_vscp_goActiveState
 15193 ;;		_vscp_sendHeartBeat
 15194 ;;		_vscp_newNodeOnline
 15195 ;;		_vscp_handleProtocolEvent
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           	psect	text67
 15200  0055AC                     __ptext67:
 15201                           	opt stack 0
 15202  0055AC                     _vscp_sendEvent:
 15203                           	opt stack 23
 15204                           
 15205                           ; BSR set to: 0
 15206                           ;vscp_firmware.c: 1281: vscp_errorcnt++;
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;incstack = 0
 15210                           ;incstack = 0
 15211  0055AC  C0CC  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15212  0055B0  C0CD  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15213  0055B4  C0CE  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15214  0055B8  C0BA  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15215  0055BC  C0CB  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15216  0055C0  51CA               	movf	_vscp_omsg& (0+255),w,b
 15217  0055C2  0B0F               	andlw	15
 15218  0055C4  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15219  0055C6  0ECF               	movlw	low (_vscp_omsg+5)
 15220  0055C8  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15221  0055CA  EC0E  F024         	call	_sendVSCPFrame	;wreg free
 15222  0055CE  6E43               	movwf	vscp_sendEvent@rv,c
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;vscp_firmware.c: 1282: }
 15226                           ;vscp_firmware.c: 1284: return rv;
 15227  0055D0  5043               	movf	vscp_sendEvent@rv,w,c
 15228                           
 15229                           ; BSR set to: 0
 15230  0055D2  0012               	return	
 15231  0055D4                     __end_of_vscp_sendEvent:
 15232                           	opt stack 0
 15233                           tblptru	equ	0xFF8
 15234                           tblptrh	equ	0xFF7
 15235                           tblptrl	equ	0xFF6
 15236                           tablat	equ	0xFF5
 15237                           prodh	equ	0xFF4
 15238                           prodl	equ	0xFF3
 15239                           postinc0	equ	0xFEE
 15240                           wreg	equ	0xFE8
 15241                           postdec1	equ	0xFE5
 15242                           fsr1h	equ	0xFE2
 15243                           fsr1l	equ	0xFE1
 15244                           indf2	equ	0xFDF
 15245                           postinc2	equ	0xFDE
 15246                           postdec2	equ	0xFDD
 15247                           fsr2h	equ	0xFDA
 15248                           fsr2l	equ	0xFD9
 15249                           status	equ	0xFD8
 15250                           
 15251 ;; *************** function _sendVSCPFrame *****************
 15252 ;; Defined at:
 15253 ;;		line 2839 in file "../main.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15256 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15257 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15258 ;;  priority        1    4[BANK0 ] unsigned char 
 15259 ;;  size            1    5[BANK0 ] unsigned char 
 15260 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15261 ;;		 -> vscp_omsg(13), 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;  id              4   27[BANK0 ] unsigned long 
 15264 ;; Return value:  Size  Location     Type
 15265 ;;                  1    wreg      unsigned char 
 15266 ;; Registers used:
 15267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15268 ;; Tracked objects:
 15269 ;;		On entry : F/0
 15270 ;;		On exit  : F/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15273 ;;      Params:         0       7       0       0       0       0       0
 15274 ;;      Locals:         0       4       0       0       0       0       0
 15275 ;;      Temps:          0      20       0       0       0       0       0
 15276 ;;      Totals:         0      31       0       0       0       0       0
 15277 ;;Total ram usage:       31 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; Hardware stack levels required when called:    5
 15280 ;; This function calls:
 15281 ;;		_sendCANFrame
 15282 ;; This function is called by:
 15283 ;;		_vscp_sendEvent
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           	psect	text68
 15288  00481C                     __ptext68:
 15289                           	opt stack 0
 15290  00481C                     _sendVSCPFrame:
 15291                           	opt stack 23
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;main.c: 2840: uint32_t id = ((uint32_t) priority << 26) |
 15295                           ;main.c: 2841: ((uint32_t) vscpclass << 16) |
 15296                           ;main.c: 2842: ((uint32_t) vscptype << 8) |
 15297                           ;main.c: 2843: nodeid;
 15298                           
 15299                           ; BSR set to: 0
 15300                           ;incstack = 0
 15301                           ;incstack = 0
 15302  00481C  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15303  004820  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15304  004822  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15305  004824  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15306  004826  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15307  00482A  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15308  00482E  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15309  004832  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15310  004834  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15311  004836  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15312  004838  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15313  00483A  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15314  00483C  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15315  00483E  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15316  004840  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15317  004844  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15318  004848  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15319  00484A  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15320  00484C  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15321  004850  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15322  004852  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15323  004854  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15324  004856  0E1A               	movlw	26
 15325  004858                     u9055:
 15326  004858  90D8               	bcf	status,0,c
 15327  00485A  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15328  00485C  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15329  00485E  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15330  004860  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15331  004862  2EE8               	decfsz	wreg,f,c
 15332  004864  D7F9               	goto	u9055
 15333  004866  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15334  004868  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15335  00486A  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15336  00486C  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15337  00486E  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15338  004870  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15339  004872  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15340  004874  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15341  004876  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15342  004878  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15343  00487A  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15344  00487C  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15345  00487E  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15346  004880  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15347  004882  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15348  004884  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15349  004886  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15350  004888  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15351  00488A  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15352  00488C  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15353  00488E  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15354  004890  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15355  004892  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15356  004894  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15357  004896  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15358  004898  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15359  00489A  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15360  00489C  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15361  00489E  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15362  0048A0  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15363  0048A2  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15364  0048A4  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15365  0048A6  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;main.c: 2847: vscp_errorcnt++;
 15369  0048A8  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15370  0048AC  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15371  0048B0  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15372  0048B4  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15373  0048B8  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15374  0048BC  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15375  0048C0  ECC5  F029         	call	_sendCANFrame	;wreg free
 15376  0048C4  0900               	iorlw	0
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;main.c: 2848: return 0;
 15380  0048C6  0E00               	movlw	0
 15381  0048C8  A4D8               	btfss	status,2,c
 15382                           
 15383                           ; BSR set to: 0
 15384                           ;main.c: 2849: }
 15385                           ;main.c: 2851: return 1;
 15386  0048CA  0E01               	movlw	1
 15387                           
 15388                           ; BSR set to: 0
 15389  0048CC  0012               	return	
 15390  0048CE                     __end_of_sendVSCPFrame:
 15391                           	opt stack 0
 15392                           tblptru	equ	0xFF8
 15393                           tblptrh	equ	0xFF7
 15394                           tblptrl	equ	0xFF6
 15395                           tablat	equ	0xFF5
 15396                           prodh	equ	0xFF4
 15397                           prodl	equ	0xFF3
 15398                           postinc0	equ	0xFEE
 15399                           wreg	equ	0xFE8
 15400                           postdec1	equ	0xFE5
 15401                           fsr1h	equ	0xFE2
 15402                           fsr1l	equ	0xFE1
 15403                           indf2	equ	0xFDF
 15404                           postinc2	equ	0xFDE
 15405                           postdec2	equ	0xFDD
 15406                           fsr2h	equ	0xFDA
 15407                           fsr2l	equ	0xFD9
 15408                           status	equ	0xFD8
 15409                           
 15410 ;; *************** function _sendCANFrame *****************
 15411 ;; Defined at:
 15412 ;;		line 2886 in file "../main.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;  id              4   59[COMRAM] unsigned long 
 15415 ;;  dlc             1   63[COMRAM] unsigned char 
 15416 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15417 ;;		 -> vscp_omsg(13), 
 15418 ;; Auto vars:     Size  Location     Type
 15419 ;;  rv              1   65[COMRAM] unsigned char 
 15420 ;; Return value:  Size  Location     Type
 15421 ;;                  1    wreg      unsigned char 
 15422 ;; Registers used:
 15423 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15424 ;; Tracked objects:
 15425 ;;		On entry : F/0
 15426 ;;		On exit  : F/0
 15427 ;;		Unchanged: 0/0
 15428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15429 ;;      Params:         6       0       0       0       0       0       0
 15430 ;;      Locals:         1       0       0       0       0       0       0
 15431 ;;      Temps:          0       0       0       0       0       0       0
 15432 ;;      Totals:         7       0       0       0       0       0       0
 15433 ;;Total ram usage:        7 bytes
 15434 ;; Hardware stack levels used:    1
 15435 ;; Hardware stack levels required when called:    4
 15436 ;; This function calls:
 15437 ;;		_ECANSendMessage
 15438 ;; This function is called by:
 15439 ;;		_sendVSCPFrame
 15440 ;; This function uses a non-reentrant model
 15441 ;;
 15442                           
 15443                           	psect	text69
 15444  00538A                     __ptext69:
 15445                           	opt stack 0
 15446  00538A                     _sendCANFrame:
 15447                           	opt stack 23
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;main.c: 2887: uint8_t rv = 0;
 15451                           
 15452                           ; BSR set to: 0
 15453                           ;incstack = 0
 15454                           ;incstack = 0
 15455  00538A  6A42               	clrf	sendCANFrame@rv,c
 15456                           
 15457                           ;main.c: 2888: sendTimer = 0;
 15458  00538C  6A4A               	clrf	_sendTimer,c
 15459                           
 15460                           ;main.c: 2890: while ( sendTimer < 1 ) {
 15461  00538E  D015               	goto	l11080
 15462  005390                     l11076:
 15463                           
 15464                           ;main.c: 2891: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15465  005390  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15466  005394  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15467  005398  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15468  00539C  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15469  0053A0  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15470  0053A4  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15471  0053A8  0E20               	movlw	32
 15472  0053AA  6E1E               	movwf	?_ECANSendMessage+6,c
 15473  0053AC  EC65  F01D         	call	_ECANSendMessage	;wreg free
 15474  0053B0  0900               	iorlw	0
 15475  0053B2  E003               	bz	l11080
 15476                           
 15477                           ;main.c: 2892: rv = 1;
 15478  0053B4  0E01               	movlw	1
 15479  0053B6  6E42               	movwf	sendCANFrame@rv,c
 15480                           
 15481                           ;main.c: 2893: break;
 15482  0053B8  D002               	goto	l632
 15483  0053BA                     l11080:
 15484  0053BA  504A               	movf	_sendTimer,w,c
 15485  0053BC  E0E9               	bz	l11076
 15486  0053BE                     l632:
 15487                           
 15488                           ;main.c: 2894: }
 15489                           ;main.c: 2895: }
 15490                           ;main.c: 2897: vscp_omsg.flags = 0;
 15491  0053BE  0100               	movlb	0	; () banked
 15492  0053C0  6BCA               	clrf	_vscp_omsg& (0+255),b
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;main.c: 2899: return rv;
 15496  0053C2  5042               	movf	sendCANFrame@rv,w,c
 15497                           
 15498                           ; BSR set to: 0
 15499  0053C4  0012               	return	
 15500  0053C6                     __end_of_sendCANFrame:
 15501                           	opt stack 0
 15502                           tblptru	equ	0xFF8
 15503                           tblptrh	equ	0xFF7
 15504                           tblptrl	equ	0xFF6
 15505                           tablat	equ	0xFF5
 15506                           prodh	equ	0xFF4
 15507                           prodl	equ	0xFF3
 15508                           postinc0	equ	0xFEE
 15509                           wreg	equ	0xFE8
 15510                           postdec1	equ	0xFE5
 15511                           fsr1h	equ	0xFE2
 15512                           fsr1l	equ	0xFE1
 15513                           indf2	equ	0xFDF
 15514                           postinc2	equ	0xFDE
 15515                           postdec2	equ	0xFDD
 15516                           fsr2h	equ	0xFDA
 15517                           fsr2l	equ	0xFD9
 15518                           status	equ	0xFD8
 15519                           
 15520 ;; *************** function _ECANSendMessage *****************
 15521 ;; Defined at:
 15522 ;;		line 617 in file "../ECAN.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  id              4   23[COMRAM] unsigned long 
 15525 ;;  data            1   27[COMRAM] PTR unsigned char 
 15526 ;;		 -> vscp_omsg(13), 
 15527 ;;  dataLen         1   28[COMRAM] unsigned char 
 15528 ;;  msgFlags        1   29[COMRAM] enum E16306
 15529 ;; Auto vars:     Size  Location     Type
 15530 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15531 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15532 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15533 ;;		 -> B0CON(1), 
 15534 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15535 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15536 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15537 ;;		 -> B0CON(1), 
 15538 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15539 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15540 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15541 ;;		 -> B0CON(1), 
 15542 ;;  i               1   56[COMRAM] unsigned char 
 15543 ;;  temp            1   55[COMRAM] unsigned char 
 15544 ;;  tempBSEL0       1   52[COMRAM] struct .
 15545 ;;  j               1   51[COMRAM] unsigned char 
 15546 ;;  buffers         1   50[COMRAM] unsigned char 
 15547 ;;  mode            1   49[COMRAM] unsigned char 
 15548 ;; Return value:  Size  Location     Type
 15549 ;;                  1    wreg      enum E15660
 15550 ;; Registers used:
 15551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15557 ;;      Params:         7       0       0       0       0       0       0
 15558 ;;      Locals:        28       0       0       0       0       0       0
 15559 ;;      Temps:          1       0       0       0       0       0       0
 15560 ;;      Totals:        36       0       0       0       0       0       0
 15561 ;;Total ram usage:       36 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    3
 15564 ;; This function calls:
 15565 ;;		__CANIDToRegs
 15566 ;; This function is called by:
 15567 ;;		_sendCANFrame
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text70
 15572  003ACA                     __ptext70:
 15573                           	opt stack 0
 15574  003ACA                     _ECANSendMessage:
 15575                           	opt stack 23
 15576                           
 15577                           ;ECAN.c: 619: BYTE mode;
 15578                           ;ECAN.c: 620: BYTE buffers;
 15579                           ;ECAN.c: 628: BYTE i,j;
 15580                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15581                           ;ECAN.c: 630: BYTE* pb[9];
 15582                           ;ECAN.c: 631: BYTE temp;
 15583                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15584                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;incstack = 0
 15588                           ;incstack = 0
 15589  003ACA  0E0F               	movlw	15	;volatile
 15590  003ACC  6E21               	movwf	ECANSendMessage@pb+1,c
 15591  003ACE  0E40               	movlw	64	;volatile
 15592  003AD0  6E20               	movwf	ECANSendMessage@pb,c
 15593                           
 15594                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15595  003AD2  0E0F               	movlw	15	;volatile
 15596  003AD4  6E23               	movwf	ECANSendMessage@pb+3,c
 15597  003AD6  0E30               	movlw	48	;volatile
 15598  003AD8  6E22               	movwf	ECANSendMessage@pb+2,c
 15599                           
 15600                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15601  003ADA  0E0F               	movlw	15	;volatile
 15602  003ADC  6E25               	movwf	ECANSendMessage@pb+5,c
 15603  003ADE  0E20               	movlw	32	;volatile
 15604  003AE0  6E24               	movwf	ECANSendMessage@pb+4,c
 15605                           
 15606                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15607  003AE2  0E0E               	movlw	14	;volatile
 15608  003AE4  6E27               	movwf	ECANSendMessage@pb+7,c
 15609  003AE6  0E20               	movlw	32	;volatile
 15610  003AE8  6E26               	movwf	ECANSendMessage@pb+6,c
 15611                           
 15612                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15613  003AEA  0E0E               	movlw	14	;volatile
 15614  003AEC  6E29               	movwf	ECANSendMessage@pb+9,c
 15615  003AEE  0E30               	movlw	48	;volatile
 15616  003AF0  6E28               	movwf	ECANSendMessage@pb+8,c
 15617                           
 15618                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15619  003AF2  0E0E               	movlw	14	;volatile
 15620  003AF4  6E2B               	movwf	ECANSendMessage@pb+11,c
 15621  003AF6  0E40               	movlw	64	;volatile
 15622  003AF8  6E2A               	movwf	ECANSendMessage@pb+10,c
 15623                           
 15624                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15625  003AFA  0E0E               	movlw	14	;volatile
 15626  003AFC  6E2D               	movwf	ECANSendMessage@pb+13,c
 15627  003AFE  0E50               	movlw	80	;volatile
 15628  003B00  6E2C               	movwf	ECANSendMessage@pb+12,c
 15629                           
 15630                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15631  003B02  0E0E               	movlw	14	;volatile
 15632  003B04  6E2F               	movwf	ECANSendMessage@pb+15,c
 15633  003B06  0E60               	movlw	96	;volatile
 15634  003B08  6E2E               	movwf	ECANSendMessage@pb+14,c
 15635                           
 15636                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15637  003B0A  0E0E               	movlw	14	;volatile
 15638  003B0C  6E31               	movwf	ECANSendMessage@pb+17,c
 15639  003B0E  0E70               	movlw	112	;volatile
 15640  003B10  6E30               	movwf	ECANSendMessage@pb+16,c
 15641                           
 15642                           ; BSR set to: 14
 15643                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15644  003B12  5077               	movf	3959,w,c	;volatile
 15645  003B14  0BC0               	andlw	192
 15646  003B16  6E32               	movwf	ECANSendMessage@mode,c
 15647                           
 15648                           ; BSR set to: 14
 15649                           ;ECAN.c: 660: if ( mode == 0x00 )
 15650  003B18  6632               	tstfsz	ECANSendMessage@mode,c
 15651  003B1A  D002               	goto	l11094
 15652                           
 15653                           ; BSR set to: 14
 15654                           ;ECAN.c: 661: buffers = 2;
 15655  003B1C  0E02               	movlw	2
 15656  003B1E  D001               	goto	L21
 15657  003B20                     l11094:
 15658                           
 15659                           ; BSR set to: 14
 15660                           ;ECAN.c: 662: else
 15661                           ;ECAN.c: 663: buffers = 8;
 15662  003B20  0E08               	movlw	8
 15663  003B22                     L21:
 15664  003B22  6E33               	movwf	ECANSendMessage@buffers,c
 15665                           
 15666                           ; BSR set to: 14
 15667                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15668  003B24  010D               	movlb	13	; () banked
 15669  003B26  90D8               	bcf	status,0,c
 15670  003B28  31F8               	rrcf	248,w,b	;volatile
 15671  003B2A  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15672                           
 15673                           ; BSR set to: 13
 15674                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15675  003B2C  6A39               	clrf	ECANSendMessage@i,c
 15676  003B2E  D07B               	goto	l11154
 15677  003B30                     l11100:
 15678                           
 15679                           ;ECAN.c: 688: {
 15680                           ;ECAN.c: 693: ptr = pb[i];
 15681  003B30  5039               	movf	ECANSendMessage@i,w,c
 15682  003B32  0D02               	mullw	2
 15683  003B34  50F3               	movf	prodl,w,c
 15684  003B36  0F20               	addlw	low ECANSendMessage@pb
 15685  003B38  6ED9               	movwf	fsr2l,c
 15686  003B3A  6ADA               	clrf	fsr2h,c
 15687  003B3C  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15688  003B40  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15689                           
 15690                           ;ECAN.c: 694: tempPtr = ptr;
 15691  003B44  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15692  003B48  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15693                           
 15694                           ;ECAN.c: 702: if ( i > 2 )
 15695  003B4C  0E02               	movlw	2
 15696  003B4E  6439               	cpfsgt	ECANSendMessage@i,c
 15697  003B50  D004               	goto	l11112
 15698                           
 15699                           ;ECAN.c: 703: {
 15700                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15701  003B52  90D8               	bcf	status,0,c
 15702  003B54  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15703                           
 15704                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15705  003B56  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15706  003B58  D065               	goto	l11152
 15707  003B5A                     l11112:
 15708                           
 15709                           ;ECAN.c: 714: }
 15710                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15711  003B5A  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15712  003B5E  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15713  003B62  50DF               	movf	indf2,w,c
 15714  003B64  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15715  003B66  B61F               	btfsc	??_ECANSendMessage,3,c
 15716  003B68  D05D               	goto	l11152
 15717                           
 15718                           ;ECAN.c: 721: {
 15719                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15720  003B6A  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15721  003B6E  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15722  003B72  0EFC               	movlw	252
 15723  003B74  16DF               	andwf	indf2,f,c
 15724                           
 15725                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15726  003B76  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15727  003B7A  0E03               	movlw	3
 15728  003B7C  161F               	andwf	??_ECANSendMessage,f,c
 15729  003B7E  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15730  003B82  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15731  003B86  501F               	movf	??_ECANSendMessage,w,c
 15732  003B88  12DF               	iorwf	indf2,f,c
 15733                           
 15734                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15735  003B8A  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15736  003B8C  D004               	goto	l820
 15737                           
 15738                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15739  003B8E  501D               	movf	ECANSendMessage@dataLen,w,c
 15740  003B90  0940               	iorlw	64
 15741  003B92  6E38               	movwf	ECANSendMessage@temp,c
 15742  003B94  D002               	goto	l11122
 15743  003B96                     l820:
 15744                           
 15745                           ;ECAN.c: 729: else
 15746                           ;ECAN.c: 730: temp = dataLen;
 15747  003B96  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15748  003B9A                     l11122:
 15749                           
 15750                           ;ECAN.c: 732: *(ptr+5) = temp;
 15751  003B9A  EE20 F005          	lfsr	2,5
 15752  003B9E  503A               	movf	ECANSendMessage@ptr,w,c
 15753  003BA0  26D9               	addwf	fsr2l,f,c
 15754  003BA2  503B               	movf	ECANSendMessage@ptr+1,w,c
 15755  003BA4  22DA               	addwfc	fsr2h,f,c
 15756  003BA6  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15757                           
 15758                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15759  003BAA  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15760  003BAC  D003               	goto	l822
 15761                           
 15762                           ;ECAN.c: 736: temp = 1;
 15763  003BAE  0E01               	movlw	1
 15764  003BB0  6E38               	movwf	ECANSendMessage@temp,c
 15765  003BB2  D001               	goto	l11128
 15766  003BB4                     l822:
 15767                           
 15768                           ;ECAN.c: 738: else
 15769                           ;ECAN.c: 739: temp = 0;
 15770  003BB4  6A38               	clrf	ECANSendMessage@temp,c
 15771  003BB6                     l11128:
 15772                           
 15773                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15774  003BB6  283A               	incf	ECANSendMessage@ptr,w,c
 15775  003BB8  6E0E               	movwf	?__CANIDToRegs,c
 15776  003BBA  0E00               	movlw	0
 15777  003BBC  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15778  003BBE  6E0F               	movwf	?__CANIDToRegs+1,c
 15779  003BC0  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15780  003BC4  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15781  003BC8  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15782  003BCC  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15783  003BD0  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15784  003BD4  EC7A  F01F         	call	__CANIDToRegs	;wreg free
 15785                           
 15786                           ;ECAN.c: 745: ptr += 6;
 15787  003BD8  0E06               	movlw	6
 15788  003BDA  263A               	addwf	ECANSendMessage@ptr,f,c
 15789  003BDC  0E00               	movlw	0
 15790  003BDE  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15791                           
 15792                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15793  003BE0  6A34               	clrf	ECANSendMessage@j,c
 15794  003BE2  D00D               	goto	l11142
 15795  003BE4                     l11134:
 15796                           
 15797                           ;ECAN.c: 748: *ptr++ = *data++;
 15798  003BE4  501C               	movf	ECANSendMessage@data,w,c
 15799  003BE6  6ED9               	movwf	fsr2l,c
 15800  003BE8  6ADA               	clrf	fsr2h,c
 15801  003BEA  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15802  003BEE  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15803  003BF2  CFDF FFE7          	movff	indf2,indf1
 15804  003BF6  2A1C               	incf	ECANSendMessage@data,f,c
 15805  003BF8  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15806  003BFA  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15807  003BFC  2A34               	incf	ECANSendMessage@j,f,c
 15808  003BFE                     l11142:
 15809  003BFE  501D               	movf	ECANSendMessage@dataLen,w,c
 15810  003C00  5C34               	subwf	ECANSendMessage@j,w,c
 15811  003C02  E3F0               	bnc	l11134
 15812                           
 15813                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15814  003C04  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15815  003C08  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15816  003C0C  50DF               	movf	indf2,w,c
 15817  003C0E  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15818  003C10  B41F               	btfsc	??_ECANSendMessage,2,c
 15819  003C12  D006               	goto	l11148
 15820                           
 15821                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15822  003C14  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15823  003C18  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15824  003C1C  0E00               	movlw	0
 15825  003C1E  86DB               	bsf	plusw2,3,c
 15826  003C20                     l11148:
 15827                           
 15828                           ;ECAN.c: 755: return TRUE;
 15829  003C20  0E01               	movlw	1
 15830  003C22  D005               	goto	l828
 15831  003C24                     l11152:
 15832  003C24  2A39               	incf	ECANSendMessage@i,f,c
 15833  003C26                     l11154:
 15834  003C26  5033               	movf	ECANSendMessage@buffers,w,c
 15835  003C28  5C39               	subwf	ECANSendMessage@i,w,c
 15836  003C2A  E382               	bnc	l11100
 15837                           
 15838                           ;ECAN.c: 756: }
 15839                           ;ECAN.c: 757: }
 15840                           ;ECAN.c: 760: return FALSE;
 15841  003C2C  0E00               	movlw	0
 15842  003C2E                     l828:
 15843  003C2E  0012               	return	
 15844  003C30                     __end_of_ECANSendMessage:
 15845                           	opt stack 0
 15846                           tblptru	equ	0xFF8
 15847                           tblptrh	equ	0xFF7
 15848                           tblptrl	equ	0xFF6
 15849                           tablat	equ	0xFF5
 15850                           prodh	equ	0xFF4
 15851                           prodl	equ	0xFF3
 15852                           postinc0	equ	0xFEE
 15853                           wreg	equ	0xFE8
 15854                           indf1	equ	0xFE7
 15855                           postdec1	equ	0xFE5
 15856                           fsr1h	equ	0xFE2
 15857                           fsr1l	equ	0xFE1
 15858                           indf2	equ	0xFDF
 15859                           postinc2	equ	0xFDE
 15860                           postdec2	equ	0xFDD
 15861                           plusw2	equ	0xFDB
 15862                           fsr2h	equ	0xFDA
 15863                           fsr2l	equ	0xFD9
 15864                           status	equ	0xFD8
 15865                           
 15866 ;; *************** function __CANIDToRegs *****************
 15867 ;; Defined at:
 15868 ;;		line 1099 in file "../ECAN.c"
 15869 ;; Parameters:    Size  Location     Type
 15870 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15871 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15872 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15873 ;;		 -> B0CON(1), 
 15874 ;;  val             4   15[COMRAM] unsigned long 
 15875 ;;  type            1   19[COMRAM] unsigned char 
 15876 ;; Auto vars:     Size  Location     Type
 15877 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15878 ;;		 -> _CANIDToRegs@val(4), 
 15879 ;; Return value:  Size  Location     Type
 15880 ;;		None               void
 15881 ;; Registers used:
 15882 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15883 ;; Tracked objects:
 15884 ;;		On entry : 0/D
 15885 ;;		On exit  : 0/0
 15886 ;;		Unchanged: 0/0
 15887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15888 ;;      Params:         7       0       0       0       0       0       0
 15889 ;;      Locals:         1       0       0       0       0       0       0
 15890 ;;      Temps:          2       0       0       0       0       0       0
 15891 ;;      Totals:        10       0       0       0       0       0       0
 15892 ;;Total ram usage:       10 bytes
 15893 ;; Hardware stack levels used:    1
 15894 ;; Hardware stack levels required when called:    2
 15895 ;; This function calls:
 15896 ;;		Nothing
 15897 ;; This function is called by:
 15898 ;;		_ECANSendMessage
 15899 ;; This function uses a non-reentrant model
 15900 ;;
 15901                           
 15902                           	psect	text71
 15903  003EF4                     __ptext71:
 15904                           	opt stack 0
 15905  003EF4                     __CANIDToRegs:
 15906                           	opt stack 23
 15907                           
 15908                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15909                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15910                           
 15911                           ;incstack = 0
 15912                           ;incstack = 0
 15913  003EF4  0E10               	movlw	low __CANIDToRegs@val
 15914  003EF6  6E17               	movwf	__CANIDToRegs@Value,c
 15915                           
 15916                           ;ECAN.c: 1104: if ( type == 0 )
 15917  003EF8  6614               	tstfsz	__CANIDToRegs@type,c
 15918  003EFA  D037               	goto	l11170
 15919                           
 15920                           ;ECAN.c: 1105: {
 15921                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15922  003EFC  5017               	movf	__CANIDToRegs@Value,w,c
 15923  003EFE  6ED9               	movwf	fsr2l,c
 15924  003F00  6ADA               	clrf	fsr2h,c
 15925  003F02  50DF               	movf	indf2,w,c
 15926  003F04  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15927  003F06  90D8               	bcf	status,0,c
 15928  003F08  3215               	rrcf	??__CANIDToRegs,f,c
 15929  003F0A  90D8               	bcf	status,0,c
 15930  003F0C  3215               	rrcf	??__CANIDToRegs,f,c
 15931  003F0E  90D8               	bcf	status,0,c
 15932  003F10  3015               	rrcf	??__CANIDToRegs,w,c
 15933  003F12  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15934  003F16  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15935  003F1A  6EDF               	movwf	indf2,c
 15936                           
 15937                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15938  003F1C  5017               	movf	__CANIDToRegs@Value,w,c
 15939  003F1E  6ED9               	movwf	fsr2l,c
 15940  003F20  6ADA               	clrf	fsr2h,c
 15941  003F22  2AD9               	incf	fsr2l,f,c
 15942  003F24  6ADA               	clrf	fsr2h,c
 15943  003F26  50DF               	movf	indf2,w,c
 15944  003F28  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15945  003F2A  0E05               	movlw	5
 15946  003F2C  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15947  003F2E                     u9195:
 15948  003F2E  90D8               	bcf	status,0,c
 15949  003F30  3615               	rlcf	??__CANIDToRegs,f,c
 15950  003F32  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15951  003F34  D7FC               	goto	u9195
 15952  003F36  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15953  003F3A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15954  003F3E  5015               	movf	??__CANIDToRegs,w,c
 15955  003F40  12DF               	iorwf	indf2,f,c
 15956                           
 15957                           ;ECAN.c: 1109: ptr++;
 15958  003F42  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15959  003F44  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15960                           
 15961                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15962  003F46  5017               	movf	__CANIDToRegs@Value,w,c
 15963  003F48  6ED9               	movwf	fsr2l,c
 15964  003F4A  6ADA               	clrf	fsr2h,c
 15965  003F4C  50DF               	movf	indf2,w,c
 15966  003F4E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15967  003F50  0E05               	movlw	5
 15968  003F52  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15969  003F54                     u9205:
 15970  003F54  90D8               	bcf	status,0,c
 15971  003F56  3615               	rlcf	??__CANIDToRegs,f,c
 15972  003F58  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15973  003F5A  D7FC               	goto	u9205
 15974  003F5C  5015               	movf	??__CANIDToRegs,w,c
 15975  003F5E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15976  003F62  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15977  003F66  6EDF               	movwf	indf2,c
 15978                           
 15979                           ;ECAN.c: 1111: }
 15980  003F68  D06C               	goto	l882
 15981  003F6A                     l11170:
 15982                           
 15983                           ;ECAN.c: 1112: else
 15984                           ;ECAN.c: 1113: {
 15985                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15986  003F6A  5017               	movf	__CANIDToRegs@Value,w,c
 15987  003F6C  6ED9               	movwf	fsr2l,c
 15988  003F6E  6ADA               	clrf	fsr2h,c
 15989  003F70  0E02               	movlw	2
 15990  003F72  26D9               	addwf	fsr2l,f,c
 15991  003F74  6ADA               	clrf	fsr2h,c
 15992  003F76  50DF               	movf	indf2,w,c
 15993  003F78  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15994  003F7A  0E05               	movlw	5
 15995  003F7C  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15996  003F7E                     u9215:
 15997  003F7E  90D8               	bcf	status,0,c
 15998  003F80  3215               	rrcf	??__CANIDToRegs,f,c
 15999  003F82  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16000  003F84  D7FC               	goto	u9215
 16001  003F86  5015               	movf	??__CANIDToRegs,w,c
 16002  003F88  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16003  003F8C  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16004  003F90  6EDF               	movwf	indf2,c
 16005                           
 16006                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16007  003F92  5017               	movf	__CANIDToRegs@Value,w,c
 16008  003F94  6ED9               	movwf	fsr2l,c
 16009  003F96  6ADA               	clrf	fsr2h,c
 16010  003F98  0E03               	movlw	3
 16011  003F9A  26D9               	addwf	fsr2l,f,c
 16012  003F9C  6ADA               	clrf	fsr2h,c
 16013  003F9E  50DF               	movf	indf2,w,c
 16014  003FA0  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16015  003FA2  90D8               	bcf	status,0,c
 16016  003FA4  3615               	rlcf	??__CANIDToRegs,f,c
 16017  003FA6  90D8               	bcf	status,0,c
 16018  003FA8  3615               	rlcf	??__CANIDToRegs,f,c
 16019  003FAA  90D8               	bcf	status,0,c
 16020  003FAC  3615               	rlcf	??__CANIDToRegs,f,c
 16021  003FAE  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16022  003FB2  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16023  003FB6  5015               	movf	??__CANIDToRegs,w,c
 16024  003FB8  12DF               	iorwf	indf2,f,c
 16025                           
 16026                           ;ECAN.c: 1117: ptr++;
 16027  003FBA  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16028  003FBC  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16029                           
 16030                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16031  003FBE  5017               	movf	__CANIDToRegs@Value,w,c
 16032  003FC0  6ED9               	movwf	fsr2l,c
 16033  003FC2  6ADA               	clrf	fsr2h,c
 16034  003FC4  0E02               	movlw	2
 16035  003FC6  26D9               	addwf	fsr2l,f,c
 16036  003FC8  6ADA               	clrf	fsr2h,c
 16037  003FCA  50DF               	movf	indf2,w,c
 16038  003FCC  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16039  003FCE  90D8               	bcf	status,0,c
 16040  003FD0  3615               	rlcf	??__CANIDToRegs,f,c
 16041  003FD2  90D8               	bcf	status,0,c
 16042  003FD4  3615               	rlcf	??__CANIDToRegs,f,c
 16043  003FD6  90D8               	bcf	status,0,c
 16044  003FD8  3415               	rlcf	??__CANIDToRegs,w,c
 16045  003FDA  0BE0               	andlw	224
 16046  003FDC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16047  003FE0  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16048  003FE4  6EDF               	movwf	indf2,c
 16049                           
 16050                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16051  003FE6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16052  003FEA  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16053  003FEE  0E00               	movlw	0
 16054  003FF0  86DB               	bsf	plusw2,3,c
 16055                           
 16056                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16057  003FF2  5017               	movf	__CANIDToRegs@Value,w,c
 16058  003FF4  6ED9               	movwf	fsr2l,c
 16059  003FF6  6ADA               	clrf	fsr2h,c
 16060  003FF8  0E02               	movlw	2
 16061  003FFA  26D9               	addwf	fsr2l,f,c
 16062  003FFC  6ADA               	clrf	fsr2h,c
 16063  003FFE  50DF               	movf	indf2,w,c
 16064  004000  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16065  004002  0E03               	movlw	3
 16066  004004  1615               	andwf	??__CANIDToRegs,f,c
 16067  004006  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16068  00400A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16069  00400E  5015               	movf	??__CANIDToRegs,w,c
 16070  004010  12DF               	iorwf	indf2,f,c
 16071                           
 16072                           ;ECAN.c: 1122: ptr++;
 16073  004012  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16074  004014  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16075                           
 16076                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16077  004016  5017               	movf	__CANIDToRegs@Value,w,c
 16078  004018  6ED9               	movwf	fsr2l,c
 16079  00401A  6ADA               	clrf	fsr2h,c
 16080  00401C  2AD9               	incf	fsr2l,f,c
 16081  00401E  6ADA               	clrf	fsr2h,c
 16082  004020  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16083  004024  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16084  004028  CFDF FFE7          	movff	indf2,indf1
 16085                           
 16086                           ;ECAN.c: 1124: ptr++;
 16087  00402C  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16088  00402E  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16089                           
 16090                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16091  004030  5017               	movf	__CANIDToRegs@Value,w,c
 16092  004032  6ED9               	movwf	fsr2l,c
 16093  004034  6ADA               	clrf	fsr2h,c
 16094  004036  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16095  00403A  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16096  00403E  CFDF FFE7          	movff	indf2,indf1
 16097  004042                     l882:
 16098  004042  0012               	return	
 16099  004044                     __end_of__CANIDToRegs:
 16100                           	opt stack 0
 16101                           tblptru	equ	0xFF8
 16102                           tblptrh	equ	0xFF7
 16103                           tblptrl	equ	0xFF6
 16104                           tablat	equ	0xFF5
 16105                           prodh	equ	0xFF4
 16106                           prodl	equ	0xFF3
 16107                           postinc0	equ	0xFEE
 16108                           wreg	equ	0xFE8
 16109                           indf1	equ	0xFE7
 16110                           postdec1	equ	0xFE5
 16111                           fsr1h	equ	0xFE2
 16112                           fsr1l	equ	0xFE1
 16113                           indf2	equ	0xFDF
 16114                           postinc2	equ	0xFDE
 16115                           postdec2	equ	0xFDD
 16116                           plusw2	equ	0xFDB
 16117                           fsr2h	equ	0xFDA
 16118                           fsr2l	equ	0xFD9
 16119                           status	equ	0xFD8
 16120                           
 16121 ;; *************** function _vscp_getEvent *****************
 16122 ;; Defined at:
 16123 ;;		line 1292 in file "../../vscp_firmware/common/vscp_firmware.c"
 16124 ;; Parameters:    Size  Location     Type
 16125 ;;		None
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;  rv              1   49[COMRAM] unsigned char 
 16128 ;; Return value:  Size  Location     Type
 16129 ;;                  1    wreg      unsigned char 
 16130 ;; Registers used:
 16131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16132 ;; Tracked objects:
 16133 ;;		On entry : F/0
 16134 ;;		On exit  : 0/0
 16135 ;;		Unchanged: 0/0
 16136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16137 ;;      Params:         0       0       0       0       0       0       0
 16138 ;;      Locals:         1       0       0       0       0       0       0
 16139 ;;      Temps:          0       0       0       0       0       0       0
 16140 ;;      Totals:         1       0       0       0       0       0       0
 16141 ;;Total ram usage:        1 bytes
 16142 ;; Hardware stack levels used:    1
 16143 ;; Hardware stack levels required when called:    6
 16144 ;; This function calls:
 16145 ;;		_getVSCPFrame
 16146 ;; This function is called by:
 16147 ;;		_main
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           	psect	text72
 16152  00555A                     __ptext72:
 16153                           	opt stack 0
 16154  00555A                     _vscp_getEvent:
 16155                           	opt stack 24
 16156                           
 16157                           ; BSR set to: 0
 16158                           ;vscp_firmware.c: 1293: int8_t rv;
 16159                           ;vscp_firmware.c: 1299: if (vscp_imsg.flags & 0x80) return !0;
 16160                           
 16161                           ;incstack = 0
 16162                           ;incstack = 0
 16163  00555A  BFBC               	btfsc	_vscp_imsg& (0+255),7,b
 16164  00555C  D012               	goto	l1276
 16165                           
 16166                           ; BSR set to: 0
 16167                           ;vscp_firmware.c: 1302: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 16168                           ;vscp_firmware.c: 1303: &vscp_imsg.vscp_type,
 16169                           ;vscp_firmware.c: 1304: &vscp_imsg.oaddr,
 16170                           ;vscp_firmware.c: 1305: &vscp_imsg.priority,
 16171                           ;vscp_firmware.c: 1306: &vscp_imsg.flags,
 16172                           ;vscp_firmware.c: 1307: vscp_imsg.data))) {
 16173  00555E  0EC0               	movlw	low (_vscp_imsg+4)
 16174  005560  6E24               	movwf	?_getVSCPFrame,c
 16175  005562  0EC1               	movlw	low (_vscp_imsg+5)
 16176  005564  6E25               	movwf	?_getVSCPFrame+1,c
 16177  005566  0EBD               	movlw	low (_vscp_imsg+1)
 16178  005568  6E26               	movwf	?_getVSCPFrame+2,c
 16179  00556A  0EBC               	movlw	low _vscp_imsg
 16180  00556C  6E27               	movwf	?_getVSCPFrame+3,c
 16181  00556E  0EC2               	movlw	low (_vscp_imsg+6)
 16182  005570  6E28               	movwf	?_getVSCPFrame+4,c
 16183  005572  0EBE               	movlw	(_vscp_imsg+2)& (0+255)
 16184  005574  EC15  F027         	call	_getVSCPFrame
 16185  005578  6E32               	movwf	vscp_getEvent@rv,c
 16186  00557A  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16187  00557C  E002               	bz	l1276
 16188                           
 16189                           ;vscp_firmware.c: 1309: vscp_imsg.flags |= 0x80;
 16190  00557E  0100               	movlb	0	; () banked
 16191  005580  8FBC               	bsf	_vscp_imsg& (0+255),7,b
 16192  005582                     l1276:
 16193  005582  0012               	return	
 16194  005584                     __end_of_vscp_getEvent:
 16195                           	opt stack 0
 16196                           tblptru	equ	0xFF8
 16197                           tblptrh	equ	0xFF7
 16198                           tblptrl	equ	0xFF6
 16199                           tablat	equ	0xFF5
 16200                           prodh	equ	0xFF4
 16201                           prodl	equ	0xFF3
 16202                           postinc0	equ	0xFEE
 16203                           wreg	equ	0xFE8
 16204                           indf1	equ	0xFE7
 16205                           postdec1	equ	0xFE5
 16206                           fsr1h	equ	0xFE2
 16207                           fsr1l	equ	0xFE1
 16208                           indf2	equ	0xFDF
 16209                           postinc2	equ	0xFDE
 16210                           postdec2	equ	0xFDD
 16211                           plusw2	equ	0xFDB
 16212                           fsr2h	equ	0xFDA
 16213                           fsr2l	equ	0xFD9
 16214                           status	equ	0xFD8
 16215                           
 16216 ;; *************** function _getVSCPFrame *****************
 16217 ;; Defined at:
 16218 ;;		line 2865 in file "../main.c"
 16219 ;; Parameters:    Size  Location     Type
 16220 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16221 ;;		 -> vscp_imsg(14), 
 16222 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16223 ;;		 -> vscp_imsg(14), 
 16224 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16225 ;;		 -> vscp_imsg(14), 
 16226 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16227 ;;		 -> vscp_imsg(14), 
 16228 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16229 ;;		 -> vscp_imsg(14), 
 16230 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16231 ;;		 -> vscp_imsg(14), 
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16234 ;;		 -> vscp_imsg(14), 
 16235 ;;  id              4   45[COMRAM] unsigned long 
 16236 ;; Return value:  Size  Location     Type
 16237 ;;                  1    wreg      unsigned char 
 16238 ;; Registers used:
 16239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16240 ;; Tracked objects:
 16241 ;;		On entry : F/0
 16242 ;;		On exit  : 0/0
 16243 ;;		Unchanged: 0/0
 16244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16245 ;;      Params:         5       0       0       0       0       0       0
 16246 ;;      Locals:         5       0       0       0       0       0       0
 16247 ;;      Temps:          4       0       0       0       0       0       0
 16248 ;;      Totals:        14       0       0       0       0       0       0
 16249 ;;Total ram usage:       14 bytes
 16250 ;; Hardware stack levels used:    1
 16251 ;; Hardware stack levels required when called:    5
 16252 ;; This function calls:
 16253 ;;		_getCANFrame
 16254 ;; This function is called by:
 16255 ;;		_vscp_getEvent
 16256 ;; This function uses a non-reentrant model
 16257 ;;
 16258                           
 16259                           	psect	text73
 16260  004E2A                     __ptext73:
 16261                           	opt stack 0
 16262  004E2A                     _getVSCPFrame:
 16263                           	opt stack 24
 16264                           
 16265                           ;incstack = 0
 16266                           ;incstack = 0
 16267                           ;getVSCPFrame@pvscpclass stored from wreg
 16268  004E2A  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;main.c: 2866: uint32_t id;
 16272                           ;main.c: 2868: if (!getCANFrame(&id, pSize, pData)) {
 16273  004E2E  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16274  004E32  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16275  004E36  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16276  004E38  EC6D  F02A         	call	_getCANFrame
 16277  004E3C  0900               	iorlw	0
 16278  004E3E  E102               	bnz	l8146
 16279                           
 16280                           ;main.c: 2869: return 0;
 16281  004E40  0E00               	movlw	0
 16282  004E42  D02E               	goto	l626
 16283  004E44                     l8146:
 16284                           
 16285                           ;main.c: 2870: }
 16286                           ;main.c: 2872: *pNodeId = id & 0x0ff;
 16287  004E44  5025               	movf	getVSCPFrame@pNodeId,w,c
 16288  004E46  6ED9               	movwf	fsr2l,c
 16289  004E48  6ADA               	clrf	fsr2h,c
 16290  004E4A  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16291                           
 16292                           ;main.c: 2873: *pvscptype = (id >> 8) & 0xff;
 16293  004E4E  5024               	movf	getVSCPFrame@pvscptype,w,c
 16294  004E50  6ED9               	movwf	fsr2l,c
 16295  004E52  6ADA               	clrf	fsr2h,c
 16296  004E54  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16297                           
 16298                           ;main.c: 2874: *pvscpclass = (id >> 16) & 0x1ff;
 16299  004E58  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16300  004E5A  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16301  004E5C  0E01               	movlw	1
 16302  004E5E  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16303  004E60  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16304  004E62  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16305  004E64  6ED9               	movwf	fsr2l,c
 16306  004E66  6ADA               	clrf	fsr2h,c
 16307  004E68  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16308  004E6C  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16309                           
 16310                           ;main.c: 2875: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16311  004E70  5026               	movf	getVSCPFrame@pPriority,w,c
 16312  004E72  6ED9               	movwf	fsr2l,c
 16313  004E74  6ADA               	clrf	fsr2h,c
 16314  004E76  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16315  004E7A  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16316  004E7E  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16317  004E82  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16318  004E86  0E1B               	movlw	27
 16319  004E88  D005               	goto	u5490
 16320  004E8A                     u5495:
 16321  004E8A  90D8               	bcf	status,0,c
 16322  004E8C  322C               	rrcf	??_getVSCPFrame+3,f,c
 16323  004E8E  322B               	rrcf	??_getVSCPFrame+2,f,c
 16324  004E90  322A               	rrcf	??_getVSCPFrame+1,f,c
 16325  004E92  3229               	rrcf	??_getVSCPFrame,f,c
 16326  004E94                     u5490:
 16327  004E94  2EE8               	decfsz	wreg,f,c
 16328  004E96  D7F9               	goto	u5495
 16329  004E98  5029               	movf	??_getVSCPFrame,w,c
 16330  004E9A  0B07               	andlw	7
 16331  004E9C  6EDF               	movwf	indf2,c
 16332                           
 16333                           ;main.c: 2877: return 1;
 16334  004E9E  0E01               	movlw	1
 16335  004EA0                     l626:
 16336  004EA0  0012               	return	
 16337  004EA2                     __end_of_getVSCPFrame:
 16338                           	opt stack 0
 16339                           tblptru	equ	0xFF8
 16340                           tblptrh	equ	0xFF7
 16341                           tblptrl	equ	0xFF6
 16342                           tablat	equ	0xFF5
 16343                           prodh	equ	0xFF4
 16344                           prodl	equ	0xFF3
 16345                           postinc0	equ	0xFEE
 16346                           wreg	equ	0xFE8
 16347                           indf1	equ	0xFE7
 16348                           postdec1	equ	0xFE5
 16349                           fsr1h	equ	0xFE2
 16350                           fsr1l	equ	0xFE1
 16351                           indf2	equ	0xFDF
 16352                           postinc2	equ	0xFDE
 16353                           postdec2	equ	0xFDD
 16354                           plusw2	equ	0xFDB
 16355                           fsr2h	equ	0xFDA
 16356                           fsr2l	equ	0xFD9
 16357                           status	equ	0xFD8
 16358                           
 16359 ;; *************** function _getCANFrame *****************
 16360 ;; Defined at:
 16361 ;;		line 2907 in file "../main.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  pid             1    wreg     PTR unsigned long 
 16364 ;;		 -> getVSCPFrame@id(4), 
 16365 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16366 ;;		 -> vscp_imsg(14), 
 16367 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16368 ;;		 -> vscp_imsg(14), 
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16371 ;;		 -> getVSCPFrame@id(4), 
 16372 ;;  flags           1   34[COMRAM] enum E16409
 16373 ;; Return value:  Size  Location     Type
 16374 ;;                  1    wreg      unsigned char 
 16375 ;; Registers used:
 16376 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16377 ;; Tracked objects:
 16378 ;;		On entry : F/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16382 ;;      Params:         2       0       0       0       0       0       0
 16383 ;;      Locals:         2       0       0       0       0       0       0
 16384 ;;      Temps:          0       0       0       0       0       0       0
 16385 ;;      Totals:         4       0       0       0       0       0       0
 16386 ;;Total ram usage:        4 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    4
 16389 ;; This function calls:
 16390 ;;		_ECANReceiveMessage
 16391 ;; This function is called by:
 16392 ;;		_getVSCPFrame
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           	psect	text74
 16397  0054DA                     __ptext74:
 16398                           	opt stack 0
 16399  0054DA                     _getCANFrame:
 16400                           	opt stack 24
 16401                           
 16402                           ;incstack = 0
 16403                           ;incstack = 0
 16404                           ;getCANFrame@pid stored from wreg
 16405  0054DA  CFE8 F022          	movff	wreg,getCANFrame@pid
 16406                           
 16407                           ; BSR set to: 0
 16408                           ;main.c: 2908: ECAN_RX_MSG_FLAGS flags;
 16409                           ;main.c: 2912: if (vscp_imsg.flags & 0x80) return 0;
 16410  0054DE  AFBC               	btfss	_vscp_imsg& (0+255),7,b
 16411  0054E0  D002               	goto	l8162
 16412  0054E2                     l8158:
 16413  0054E2  0E00               	movlw	0
 16414  0054E4  D00F               	goto	l637
 16415  0054E6                     l8162:
 16416                           
 16417                           ; BSR set to: 0
 16418                           ;main.c: 2914: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16419  0054E6  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16420  0054EA  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16421  0054EE  0E23               	movlw	low getCANFrame@flags
 16422  0054F0  6E17               	movwf	?_ECANReceiveMessage+2,c
 16423  0054F2  5022               	movf	getCANFrame@pid,w,c
 16424  0054F4  EC82  F019         	call	_ECANReceiveMessage
 16425  0054F8  0900               	iorlw	0
 16426  0054FA  E0F3               	bz	l8158
 16427                           
 16428                           ;main.c: 2916: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16429  0054FC  AC23               	btfss	getCANFrame@flags,6,c
 16430                           
 16431                           ;main.c: 2919: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16432  0054FE  AA23               	btfss	getCANFrame@flags,5,c
 16433  005500  D7F0               	goto	l8158
 16434                           
 16435                           ;main.c: 2921: return 1;
 16436  005502  0E01               	movlw	1
 16437  005504                     l637:
 16438  005504  0012               	return	
 16439  005506                     __end_of_getCANFrame:
 16440                           	opt stack 0
 16441                           tblptru	equ	0xFF8
 16442                           tblptrh	equ	0xFF7
 16443                           tblptrl	equ	0xFF6
 16444                           tablat	equ	0xFF5
 16445                           prodh	equ	0xFF4
 16446                           prodl	equ	0xFF3
 16447                           postinc0	equ	0xFEE
 16448                           wreg	equ	0xFE8
 16449                           indf1	equ	0xFE7
 16450                           postdec1	equ	0xFE5
 16451                           fsr1h	equ	0xFE2
 16452                           fsr1l	equ	0xFE1
 16453                           indf2	equ	0xFDF
 16454                           postinc2	equ	0xFDE
 16455                           postdec2	equ	0xFDD
 16456                           plusw2	equ	0xFDB
 16457                           fsr2h	equ	0xFDA
 16458                           fsr2l	equ	0xFD9
 16459                           status	equ	0xFD8
 16460                           
 16461 ;; *************** function _ECANReceiveMessage *****************
 16462 ;; Defined at:
 16463 ;;		line 803 in file "../ECAN.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;  id              1    wreg     PTR unsigned long 
 16466 ;;		 -> getVSCPFrame@id(4), 
 16467 ;;  data            1   20[COMRAM] PTR unsigned char 
 16468 ;;		 -> vscp_imsg(14), 
 16469 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16470 ;;		 -> vscp_imsg(14), 
 16471 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16472 ;;		 -> getCANFrame@flags(1), 
 16473 ;; Auto vars:     Size  Location     Type
 16474 ;;  id              1   25[COMRAM] PTR unsigned long 
 16475 ;;		 -> getVSCPFrame@id(4), 
 16476 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16477 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16478 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16479 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16480 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16481 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16482 ;;  temp            1   28[COMRAM] struct .
 16483 ;;  mode            1   27[COMRAM] unsigned char 
 16484 ;;  i               1   26[COMRAM] unsigned char 
 16485 ;; Return value:  Size  Location     Type
 16486 ;;                  1    wreg      enum E15660
 16487 ;; Registers used:
 16488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16489 ;; Tracked objects:
 16490 ;;		On entry : F/0
 16491 ;;		On exit  : 0/0
 16492 ;;		Unchanged: 0/0
 16493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16494 ;;      Params:         3       0       0       0       0       0       0
 16495 ;;      Locals:         8       0       0       0       0       0       0
 16496 ;;      Temps:          0       0       0       0       0       0       0
 16497 ;;      Totals:        11       0       0       0       0       0       0
 16498 ;;Total ram usage:       11 bytes
 16499 ;; Hardware stack levels used:    1
 16500 ;; Hardware stack levels required when called:    3
 16501 ;; This function calls:
 16502 ;;		__ECANPointBuffer
 16503 ;;		__RegsToCANID
 16504 ;; This function is called by:
 16505 ;;		_getCANFrame
 16506 ;; This function uses a non-reentrant model
 16507 ;;
 16508                           
 16509                           	psect	text75
 16510  003304                     __ptext75:
 16511                           	opt stack 0
 16512  003304                     _ECANReceiveMessage:
 16513                           	opt stack 24
 16514                           
 16515                           ;incstack = 0
 16516                           ;incstack = 0
 16517                           ;ECANReceiveMessage@id stored from wreg
 16518  003304  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16519                           
 16520                           ; BSR set to: 0
 16521                           ;ECAN.c: 805: BYTE mode;
 16522                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16523                           ;ECAN.c: 809: char i;
 16524                           ;ECAN.c: 810: BYTE_VAL temp;
 16525                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16526  003308  6A48               	clrf	__ECANRxFilterHitInfo,c
 16527                           
 16528                           ; BSR set to: 0
 16529                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16530  00330A  5077               	movf	3959,w,c	;volatile
 16531  00330C  0BC0               	andlw	192
 16532  00330E  6E1C               	movwf	ECANReceiveMessage@mode,c
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;ECAN.c: 816: if ( mode == 0x00 )
 16536  003310  661C               	tstfsz	ECANReceiveMessage@mode,c
 16537  003312  D032               	goto	l8294
 16538                           
 16539                           ; BSR set to: 0
 16540                           ;ECAN.c: 822: {
 16541                           ;ECAN.c: 824: if ( RXB0FUL )
 16542  003314  AE60               	btfss	3936,7,c	;volatile
 16543  003316  D012               	goto	l833
 16544                           
 16545                           ; BSR set to: 0
 16546                           ;ECAN.c: 825: {
 16547                           ;ECAN.c: 827: RXB0IF = 0;
 16548  003318  90A4               	bcf	4004,0,c	;volatile
 16549                           
 16550                           ;ECAN.c: 830: if ( RXB0OVFL )
 16551  00331A  AE74               	btfss	3956,7,c	;volatile
 16552  00331C  D006               	goto	l8270
 16553                           
 16554                           ; BSR set to: 0
 16555                           ;ECAN.c: 831: {
 16556                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16557  00331E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16558  003320  6ED9               	movwf	fsr2l,c
 16559  003322  6ADA               	clrf	fsr2h,c
 16560  003324  0E00               	movlw	0
 16561  003326  86DB               	bsf	plusw2,3,c
 16562                           
 16563                           ; BSR set to: 0
 16564                           ;ECAN.c: 833: RXB0OVFL = 0;
 16565  003328  9E74               	bcf	3956,7,c	;volatile
 16566  00332A                     l8270:
 16567                           
 16568                           ; BSR set to: 0
 16569                           ;ECAN.c: 834: }
 16570                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16571  00332A  A060               	btfss	3936,0,c	;volatile
 16572  00332C  D002               	bra	u5665
 16573  00332E  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16574  003330  D001               	bra	u5667
 16575  003332                     u5665:
 16576  003332  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16577  003334                     u5667:
 16578                           
 16579                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16580  003334  0E0F               	movlw	15	;volatile
 16581  003336  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16582  003338  0E60               	movlw	96	;volatile
 16583  00333A  D01A               	goto	L22
 16584  00333C                     l833:
 16585                           
 16586                           ; BSR set to: 0
 16587                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16588  00333C  010F               	movlb	15	; () banked
 16589  00333E  AF50               	btfss	80,7,b	;volatile
 16590  003340  D019               	goto	l8288
 16591                           
 16592                           ; BSR set to: 15
 16593                           ;ECAN.c: 842: {
 16594                           ;ECAN.c: 844: RXB1IF = 0;
 16595  003342  92A4               	bcf	4004,1,c	;volatile
 16596                           
 16597                           ;ECAN.c: 847: if ( RXB1OVFL )
 16598  003344  AC74               	btfss	3956,6,c	;volatile
 16599  003346  D006               	goto	l8280
 16600                           
 16601                           ; BSR set to: 15
 16602                           ;ECAN.c: 848: {
 16603                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16604  003348  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16605  00334A  6ED9               	movwf	fsr2l,c
 16606  00334C  6ADA               	clrf	fsr2h,c
 16607  00334E  0E00               	movlw	0
 16608  003350  86DB               	bsf	plusw2,3,c
 16609                           
 16610                           ; BSR set to: 15
 16611                           ;ECAN.c: 850: RXB1OVFL = 0;
 16612  003352  9C74               	bcf	3956,6,c	;volatile
 16613  003354                     l8280:
 16614                           
 16615                           ; BSR set to: 15
 16616                           ;ECAN.c: 851: }
 16617                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16618  003354  5150               	movf	80,w,b	;volatile
 16619  003356  0B07               	andlw	7
 16620  003358  6E48               	movwf	__ECANRxFilterHitInfo,c
 16621                           
 16622                           ; BSR set to: 15
 16623                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16624  00335A  0E02               	movlw	2
 16625  00335C  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16626  00335E  D005               	goto	l8286
 16627                           
 16628                           ; BSR set to: 15
 16629                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16630  003360  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16631  003362  6ED9               	movwf	fsr2l,c
 16632  003364  6ADA               	clrf	fsr2h,c
 16633  003366  0E00               	movlw	0
 16634  003368  8EDB               	bsf	plusw2,7,c
 16635  00336A                     l8286:
 16636                           
 16637                           ; BSR set to: 15
 16638                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16639  00336A  0E0F               	movlw	15	;volatile
 16640  00336C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16641  00336E  0E50               	movlw	80	;volatile
 16642  003370                     L22:
 16643  003370  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16644                           
 16645                           ;ECAN.c: 860: }
 16646  003372  D065               	goto	l8348
 16647  003374                     l8288:
 16648                           
 16649                           ;ECAN.c: 861: else
 16650                           ;ECAN.c: 862: return FALSE;
 16651  003374  0E00               	movlw	0
 16652  003376  D0CC               	goto	l840
 16653  003378                     l8294:
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16657  003378  501C               	movf	ECANReceiveMessage@mode,w,c
 16658  00337A  0A40               	xorlw	64
 16659  00337C  E146               	bnz	l843
 16660                           
 16661                           ; BSR set to: 0
 16662                           ;ECAN.c: 875: {
 16663                           ;ECAN.c: 876: if ( RXB0FUL )
 16664  00337E  AE60               	btfss	3936,7,c	;volatile
 16665  003380  D004               	goto	l844
 16666                           
 16667                           ; BSR set to: 0
 16668                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16669  003382  0E0F               	movlw	15	;volatile
 16670  003384  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16671  003386  0E60               	movlw	96	;volatile
 16672  003388  D03E               	goto	L29
 16673  00338A                     l844:
 16674                           
 16675                           ; BSR set to: 0
 16676                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16677  00338A  010F               	movlb	15	; () banked
 16678  00338C  AF50               	btfss	80,7,b	;volatile
 16679  00338E  D004               	goto	l846
 16680                           
 16681                           ; BSR set to: 15
 16682                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16683  003390  0E0F               	movlw	15	;volatile
 16684  003392  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16685  003394  0E50               	movlw	80	;volatile
 16686  003396  D037               	goto	L29
 16687  003398                     l846:
 16688                           
 16689                           ; BSR set to: 15
 16690                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16691  003398  010D               	movlb	13
 16692  00339A  B5F8               	btfsc	248,2,b	;volatile
 16693  00339C  D007               	goto	l848
 16694  00339E  010E               	movlb	14
 16695  0033A0  AF20               	btfss	32,7,b	;volatile
 16696  0033A2  D004               	goto	l848
 16697                           
 16698                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16699  0033A4  0E0E               	movlw	14	;volatile
 16700  0033A6  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16701  0033A8  0E20               	movlw	32	;volatile
 16702  0033AA  D02D               	goto	L29
 16703  0033AC                     l848:
 16704                           
 16705                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16706  0033AC  010D               	movlb	13
 16707  0033AE  B7F8               	btfsc	248,3,b	;volatile
 16708  0033B0  D007               	goto	l850
 16709  0033B2  010E               	movlb	14
 16710  0033B4  AF30               	btfss	48,7,b	;volatile
 16711  0033B6  D004               	goto	l850
 16712                           
 16713                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16714  0033B8  0E0E               	movlw	14	;volatile
 16715  0033BA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16716  0033BC  0E30               	movlw	48	;volatile
 16717  0033BE  D023               	goto	L29
 16718  0033C0                     l850:
 16719                           
 16720                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16721  0033C0  010D               	movlb	13
 16722  0033C2  B9F8               	btfsc	248,4,b	;volatile
 16723  0033C4  D007               	goto	l852
 16724  0033C6  010E               	movlb	14
 16725  0033C8  AF40               	btfss	64,7,b	;volatile
 16726  0033CA  D004               	goto	l852
 16727                           
 16728                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16729  0033CC  0E0E               	movlw	14	;volatile
 16730  0033CE  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16731  0033D0  0E40               	movlw	64	;volatile
 16732  0033D2  D019               	goto	L29
 16733  0033D4                     l852:
 16734                           
 16735                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16736  0033D4  010D               	movlb	13
 16737  0033D6  BBF8               	btfsc	248,5,b	;volatile
 16738  0033D8  D005               	goto	l854
 16739  0033DA  010E               	movlb	14
 16740  0033DC  AF50               	btfss	80,7,b	;volatile
 16741  0033DE  D002               	goto	l854
 16742                           
 16743                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16744  0033E0  0E0E               	movlw	14	;volatile
 16745  0033E2  D7D7               	goto	L30
 16746  0033E4                     l854:
 16747                           
 16748                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16749  0033E4  010D               	movlb	13
 16750  0033E6  BDF8               	btfsc	248,6,b	;volatile
 16751  0033E8  D005               	goto	l856
 16752  0033EA  010E               	movlb	14
 16753  0033EC  AF60               	btfss	96,7,b	;volatile
 16754  0033EE  D002               	goto	l856
 16755                           
 16756                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16757  0033F0  0E0E               	movlw	14	;volatile
 16758  0033F2  D7C8               	goto	L31
 16759  0033F4                     l856:
 16760                           
 16761                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16762  0033F4  010D               	movlb	13
 16763  0033F6  BFF8               	btfsc	248,7,b	;volatile
 16764  0033F8  D7BD               	goto	l8288
 16765  0033FA  010E               	movlb	14
 16766  0033FC  AF70               	btfss	112,7,b	;volatile
 16767  0033FE  D7BA               	goto	l8288
 16768                           
 16769                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16770  003400  0E0E               	movlw	14	;volatile
 16771  003402  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16772  003404  0E70               	movlw	112	;volatile
 16773  003406                     L29:
 16774  003406  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16775  003408  D00A               	goto	l8338
 16776  00340A                     l843:
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;ECAN.c: 910: else
 16780                           ;ECAN.c: 915: {
 16781                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16782  00340A  AE74               	btfss	3956,7,c	;volatile
 16783  00340C  D7B3               	goto	l8288
 16784                           
 16785                           ; BSR set to: 0
 16786                           ;ECAN.c: 917: {
 16787                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16788  00340E  506F               	movf	3951,w,c	;volatile
 16789  003410  0B07               	andlw	7
 16790  003412  EC51  F027         	call	__ECANPointBuffer
 16791  003416  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16792  00341A  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16793  00341E                     l8338:
 16794                           
 16795                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16796  00341E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16797  003422  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16798  003426  50DF               	movf	indf2,w,c
 16799  003428  0B1F               	andlw	31
 16800  00342A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16801                           
 16802                           ;ECAN.c: 932: RXB1IF = 0;
 16803  00342C  92A4               	bcf	4004,1,c	;volatile
 16804                           
 16805                           ;ECAN.c: 934: if ( RXB1OVFL )
 16806  00342E  AC74               	btfss	3956,6,c	;volatile
 16807  003430  D006               	goto	l8348
 16808                           
 16809                           ;ECAN.c: 935: {
 16810                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16811  003432  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16812  003434  6ED9               	movwf	fsr2l,c
 16813  003436  6ADA               	clrf	fsr2h,c
 16814  003438  0E00               	movlw	0
 16815  00343A  86DB               	bsf	plusw2,3,c
 16816                           
 16817                           ;ECAN.c: 937: RXB1OVFL = 0;
 16818  00343C  9C74               	bcf	3956,6,c	;volatile
 16819  00343E                     l8348:
 16820                           
 16821                           ;ECAN.c: 942: savedPtr = ptr;
 16822  00343E  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16823  003442  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16824                           
 16825                           ;ECAN.c: 943: *msgFlags = 0;
 16826  003446  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16827  003448  6ED9               	movwf	fsr2l,c
 16828  00344A  6ADA               	clrf	fsr2h,c
 16829  00344C  6ADF               	clrf	indf2,c
 16830                           
 16831                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16832  00344E  EE20 F005          	lfsr	2,5
 16833  003452  501E               	movf	ECANReceiveMessage@ptr,w,c
 16834  003454  26D9               	addwf	fsr2l,f,c
 16835  003456  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16836  003458  22DA               	addwfc	fsr2h,f,c
 16837  00345A  50DF               	movf	indf2,w,c
 16838  00345C  6E1D               	movwf	ECANReceiveMessage@temp,c
 16839                           
 16840                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16841  00345E  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16842  003460  6ED9               	movwf	fsr2l,c
 16843  003462  6ADA               	clrf	fsr2h,c
 16844  003464  501D               	movf	ECANReceiveMessage@temp,w,c
 16845  003466  0B0F               	andlw	15
 16846  003468  6EDF               	movwf	indf2,c
 16847                           
 16848                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16849  00346A  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16850  00346C  D005               	goto	l864
 16851                           
 16852                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16853  00346E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16854  003470  6ED9               	movwf	fsr2l,c
 16855  003472  6ADA               	clrf	fsr2h,c
 16856  003474  0E00               	movlw	0
 16857  003476  8CDB               	bsf	plusw2,6,c
 16858  003478                     l864:
 16859                           
 16860                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16861  003478  EE20 F002          	lfsr	2,2
 16862  00347C  501E               	movf	ECANReceiveMessage@ptr,w,c
 16863  00347E  26D9               	addwf	fsr2l,f,c
 16864  003480  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16865  003482  22DA               	addwfc	fsr2h,f,c
 16866  003484  50DF               	movf	indf2,w,c
 16867  003486  6E1D               	movwf	ECANReceiveMessage@temp,c
 16868                           
 16869                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16870  003488  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16871  00348A  D008               	goto	l865
 16872                           
 16873                           ;ECAN.c: 956: {
 16874                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16875  00348C  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16876  00348E  6ED9               	movwf	fsr2l,c
 16877  003490  6ADA               	clrf	fsr2h,c
 16878  003492  0E00               	movlw	0
 16879  003494  8ADB               	bsf	plusw2,5,c
 16880                           
 16881                           ;ECAN.c: 958: temp.Val = 1;
 16882  003496  0E01               	movlw	1
 16883  003498  6E1D               	movwf	ECANReceiveMessage@temp,c
 16884                           
 16885                           ;ECAN.c: 959: }
 16886  00349A  D001               	goto	l8366
 16887  00349C                     l865:
 16888                           
 16889                           ;ECAN.c: 960: else
 16890                           ;ECAN.c: 961: temp.Val = 0;
 16891  00349C  6A1D               	clrf	ECANReceiveMessage@temp,c
 16892  00349E                     l8366:
 16893                           
 16894                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16895  00349E  281E               	incf	ECANReceiveMessage@ptr,w,c
 16896  0034A0  6E0E               	movwf	?__RegsToCANID,c
 16897  0034A2  0E00               	movlw	0
 16898  0034A4  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16899  0034A6  6E0F               	movwf	?__RegsToCANID+1,c
 16900  0034A8  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16901  0034AC  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16902  0034B0  EC18  F01E         	call	__RegsToCANID	;wreg free
 16903                           
 16904                           ;ECAN.c: 966: ptr += 6;
 16905  0034B4  0E06               	movlw	6
 16906  0034B6  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16907  0034B8  0E00               	movlw	0
 16908  0034BA  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16909                           
 16910                           ;ECAN.c: 967: temp.Val = *dataLen;
 16911  0034BC  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16912  0034BE  6ED9               	movwf	fsr2l,c
 16913  0034C0  6ADA               	clrf	fsr2h,c
 16914  0034C2  50DF               	movf	indf2,w,c
 16915  0034C4  6E1D               	movwf	ECANReceiveMessage@temp,c
 16916                           
 16917                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16918  0034C6  6A1B               	clrf	ECANReceiveMessage@i,c
 16919  0034C8  D00D               	goto	l8382
 16920  0034CA                     l8374:
 16921                           
 16922                           ;ECAN.c: 969: *data++ = *ptr++;
 16923  0034CA  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16924  0034CE  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16925  0034D2  5015               	movf	ECANReceiveMessage@data,w,c
 16926  0034D4  6EE1               	movwf	fsr1l,c
 16927  0034D6  6AE2               	clrf	fsr1h,c
 16928  0034D8  CFDF FFE7          	movff	indf2,indf1
 16929  0034DC  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16930  0034DE  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16931  0034E0  2A15               	incf	ECANReceiveMessage@data,f,c
 16932  0034E2  2A1B               	incf	ECANReceiveMessage@i,f,c
 16933  0034E4                     l8382:
 16934  0034E4  501D               	movf	ECANReceiveMessage@temp,w,c
 16935  0034E6  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16936  0034E8  E3F0               	bnc	l8374
 16937                           
 16938                           ;ECAN.c: 972: if ( IRXIF )
 16939  0034EA  AEA4               	btfss	4004,7,c	;volatile
 16940  0034EC  D006               	goto	l8388
 16941                           
 16942                           ;ECAN.c: 973: {
 16943                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16944  0034EE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16945  0034F0  6ED9               	movwf	fsr2l,c
 16946  0034F2  6ADA               	clrf	fsr2h,c
 16947  0034F4  0E00               	movlw	0
 16948  0034F6  88DB               	bsf	plusw2,4,c
 16949                           
 16950                           ;ECAN.c: 975: IRXIF = 0;
 16951  0034F8  9EA4               	bcf	4004,7,c	;volatile
 16952  0034FA                     l8388:
 16953                           
 16954                           ;ECAN.c: 976: }
 16955                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16956  0034FA  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16957  0034FE  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16958  003502  0E7F               	movlw	127
 16959  003504  16DF               	andwf	indf2,f,c
 16960                           
 16961                           ;ECAN.c: 983: if ( mode == 0x80 )
 16962  003506  501C               	movf	ECANReceiveMessage@mode,w,c
 16963  003508  0A80               	xorlw	128
 16964  00350A  B4D8               	btfsc	status,2,c
 16965                           
 16966                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16967  00350C  9E74               	bcf	3956,7,c	;volatile
 16968                           
 16969                           ;ECAN.c: 990: return TRUE;
 16970  00350E  0E01               	movlw	1
 16971  003510                     l840:
 16972  003510  0012               	return	
 16973  003512                     __end_of_ECANReceiveMessage:
 16974                           	opt stack 0
 16975                           tblptru	equ	0xFF8
 16976                           tblptrh	equ	0xFF7
 16977                           tblptrl	equ	0xFF6
 16978                           tablat	equ	0xFF5
 16979                           prodh	equ	0xFF4
 16980                           prodl	equ	0xFF3
 16981                           postinc0	equ	0xFEE
 16982                           wreg	equ	0xFE8
 16983                           indf1	equ	0xFE7
 16984                           postdec1	equ	0xFE5
 16985                           fsr1h	equ	0xFE2
 16986                           fsr1l	equ	0xFE1
 16987                           indf2	equ	0xFDF
 16988                           postinc2	equ	0xFDE
 16989                           postdec2	equ	0xFDD
 16990                           plusw2	equ	0xFDB
 16991                           fsr2h	equ	0xFDA
 16992                           fsr2l	equ	0xFD9
 16993                           status	equ	0xFD8
 16994                           
 16995 ;; *************** function __RegsToCANID *****************
 16996 ;; Defined at:
 16997 ;;		line 1156 in file "../ECAN.c"
 16998 ;; Parameters:    Size  Location     Type
 16999 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17000 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17001 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17002 ;;  val             1   15[COMRAM] PTR unsigned long 
 17003 ;;		 -> getVSCPFrame@id(4), 
 17004 ;;  type            1   16[COMRAM] unsigned char 
 17005 ;; Auto vars:     Size  Location     Type
 17006 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17007 ;;		 -> getVSCPFrame@id(4), 
 17008 ;; Return value:  Size  Location     Type
 17009 ;;		None               void
 17010 ;; Registers used:
 17011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17012 ;; Tracked objects:
 17013 ;;		On entry : 0/0
 17014 ;;		On exit  : 0/0
 17015 ;;		Unchanged: 0/0
 17016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17017 ;;      Params:         4       0       0       0       0       0       0
 17018 ;;      Locals:         1       0       0       0       0       0       0
 17019 ;;      Temps:          2       0       0       0       0       0       0
 17020 ;;      Totals:         7       0       0       0       0       0       0
 17021 ;;Total ram usage:        7 bytes
 17022 ;; Hardware stack levels used:    1
 17023 ;; Hardware stack levels required when called:    2
 17024 ;; This function calls:
 17025 ;;		Nothing
 17026 ;; This function is called by:
 17027 ;;		_ECANReceiveMessage
 17028 ;; This function uses a non-reentrant model
 17029 ;;
 17030                           
 17031                           	psect	text76
 17032  003C30                     __ptext76:
 17033                           	opt stack 0
 17034  003C30                     __RegsToCANID:
 17035                           	opt stack 24
 17036                           
 17037                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17038                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17039                           
 17040                           ;incstack = 0
 17041                           ;incstack = 0
 17042  003C30  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17043                           
 17044                           ;ECAN.c: 1161: if ( type == 0 )
 17045  003C34  6611               	tstfsz	__RegsToCANID@type,c
 17046  003C36  D046               	goto	l8462
 17047                           
 17048                           ;ECAN.c: 1162: {
 17049                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17050  003C38  5014               	movf	__RegsToCANID@Value,w,c
 17051  003C3A  6ED9               	movwf	fsr2l,c
 17052  003C3C  6ADA               	clrf	fsr2h,c
 17053  003C3E  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17054  003C42  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17055  003C46  50E7               	movf	indf1,w,c
 17056  003C48  6E12               	movwf	??__RegsToCANID& (0+255),c
 17057  003C4A  90D8               	bcf	status,0,c
 17058  003C4C  3612               	rlcf	??__RegsToCANID,f,c
 17059  003C4E  90D8               	bcf	status,0,c
 17060  003C50  3612               	rlcf	??__RegsToCANID,f,c
 17061  003C52  90D8               	bcf	status,0,c
 17062  003C54  3412               	rlcf	??__RegsToCANID,w,c
 17063  003C56  6EDF               	movwf	indf2,c
 17064                           
 17065                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17066  003C58  5014               	movf	__RegsToCANID@Value,w,c
 17067  003C5A  6ED9               	movwf	fsr2l,c
 17068  003C5C  6ADA               	clrf	fsr2h,c
 17069  003C5E  2AD9               	incf	fsr2l,f,c
 17070  003C60  6ADA               	clrf	fsr2h,c
 17071  003C62  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17072  003C66  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17073  003C6A  50E7               	movf	indf1,w,c
 17074  003C6C  6E12               	movwf	??__RegsToCANID& (0+255),c
 17075  003C6E  0E05               	movlw	5
 17076  003C70  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17077  003C72                     u5985:
 17078  003C72  90D8               	bcf	status,0,c
 17079  003C74  3212               	rrcf	??__RegsToCANID,f,c
 17080  003C76  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17081  003C78  D7FC               	goto	u5985
 17082  003C7A  5012               	movf	??__RegsToCANID,w,c
 17083  003C7C  6EDF               	movwf	indf2,c
 17084                           
 17085                           ;ECAN.c: 1166: ptr++;
 17086  003C7E  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17087  003C80  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17088                           
 17089                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17090  003C82  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17091  003C86  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17092  003C8A  50DF               	movf	indf2,w,c
 17093  003C8C  6E12               	movwf	??__RegsToCANID& (0+255),c
 17094  003C8E  0E05               	movlw	5
 17095  003C90  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17096  003C92                     u5995:
 17097  003C92  90D8               	bcf	status,0,c
 17098  003C94  3212               	rrcf	??__RegsToCANID,f,c
 17099  003C96  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17100  003C98  D7FC               	goto	u5995
 17101  003C9A  5014               	movf	__RegsToCANID@Value,w,c
 17102  003C9C  6ED9               	movwf	fsr2l,c
 17103  003C9E  6ADA               	clrf	fsr2h,c
 17104  003CA0  5012               	movf	??__RegsToCANID,w,c
 17105  003CA2  12DF               	iorwf	indf2,f,c
 17106                           
 17107                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17108  003CA4  5014               	movf	__RegsToCANID@Value,w,c
 17109  003CA6  6ED9               	movwf	fsr2l,c
 17110  003CA8  6ADA               	clrf	fsr2h,c
 17111  003CAA  0E02               	movlw	2
 17112  003CAC  26D9               	addwf	fsr2l,f,c
 17113  003CAE  6ADA               	clrf	fsr2h,c
 17114  003CB0  6ADF               	clrf	indf2,c
 17115                           
 17116                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17117  003CB2  5014               	movf	__RegsToCANID@Value,w,c
 17118  003CB4  6ED9               	movwf	fsr2l,c
 17119  003CB6  6ADA               	clrf	fsr2h,c
 17120  003CB8  0E03               	movlw	3
 17121  003CBA  26D9               	addwf	fsr2l,f,c
 17122  003CBC  6ADA               	clrf	fsr2h,c
 17123  003CBE  0E00               	movlw	0
 17124  003CC0  6EDF               	movwf	indf2,c
 17125                           
 17126                           ;ECAN.c: 1170: }
 17127  003CC2  D067               	goto	l887
 17128  003CC4                     l8462:
 17129                           
 17130                           ;ECAN.c: 1171: else
 17131                           ;ECAN.c: 1172: {
 17132                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17133  003CC4  5014               	movf	__RegsToCANID@Value,w,c
 17134  003CC6  6ED9               	movwf	fsr2l,c
 17135  003CC8  6ADA               	clrf	fsr2h,c
 17136  003CCA  0E02               	movlw	2
 17137  003CCC  26D9               	addwf	fsr2l,f,c
 17138  003CCE  6ADA               	clrf	fsr2h,c
 17139  003CD0  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17140  003CD4  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17141  003CD8  50E7               	movf	indf1,w,c
 17142  003CDA  6E12               	movwf	??__RegsToCANID& (0+255),c
 17143  003CDC  0E05               	movlw	5
 17144  003CDE  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17145  003CE0                     u6005:
 17146  003CE0  90D8               	bcf	status,0,c
 17147  003CE2  3612               	rlcf	??__RegsToCANID,f,c
 17148  003CE4  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17149  003CE6  D7FC               	goto	u6005
 17150  003CE8  5012               	movf	??__RegsToCANID,w,c
 17151  003CEA  6EDF               	movwf	indf2,c
 17152                           
 17153                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17154  003CEC  5014               	movf	__RegsToCANID@Value,w,c
 17155  003CEE  6ED9               	movwf	fsr2l,c
 17156  003CF0  6ADA               	clrf	fsr2h,c
 17157  003CF2  0E03               	movlw	3
 17158  003CF4  26D9               	addwf	fsr2l,f,c
 17159  003CF6  6ADA               	clrf	fsr2h,c
 17160  003CF8  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17161  003CFC  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17162  003D00  50E7               	movf	indf1,w,c
 17163  003D02  6E12               	movwf	??__RegsToCANID& (0+255),c
 17164  003D04  90D8               	bcf	status,0,c
 17165  003D06  3212               	rrcf	??__RegsToCANID,f,c
 17166  003D08  90D8               	bcf	status,0,c
 17167  003D0A  3212               	rrcf	??__RegsToCANID,f,c
 17168  003D0C  90D8               	bcf	status,0,c
 17169  003D0E  3012               	rrcf	??__RegsToCANID,w,c
 17170  003D10  6EDF               	movwf	indf2,c
 17171                           
 17172                           ;ECAN.c: 1176: ptr++;
 17173  003D12  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17174  003D14  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17175                           
 17176                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17177  003D16  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17178  003D1A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17179  003D1E  50DF               	movf	indf2,w,c
 17180  003D20  6E12               	movwf	??__RegsToCANID& (0+255),c
 17181  003D22  0E03               	movlw	3
 17182  003D24  1612               	andwf	??__RegsToCANID,f,c
 17183  003D26  5014               	movf	__RegsToCANID@Value,w,c
 17184  003D28  6ED9               	movwf	fsr2l,c
 17185  003D2A  6ADA               	clrf	fsr2h,c
 17186  003D2C  0E02               	movlw	2
 17187  003D2E  26D9               	addwf	fsr2l,f,c
 17188  003D30  6ADA               	clrf	fsr2h,c
 17189  003D32  5012               	movf	??__RegsToCANID,w,c
 17190  003D34  12DF               	iorwf	indf2,f,c
 17191                           
 17192                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17193  003D36  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17194  003D3A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17195  003D3E  50DF               	movf	indf2,w,c
 17196  003D40  6E12               	movwf	??__RegsToCANID& (0+255),c
 17197  003D42  90D8               	bcf	status,0,c
 17198  003D44  3212               	rrcf	??__RegsToCANID,f,c
 17199  003D46  90D8               	bcf	status,0,c
 17200  003D48  3212               	rrcf	??__RegsToCANID,f,c
 17201  003D4A  90D8               	bcf	status,0,c
 17202  003D4C  3212               	rrcf	??__RegsToCANID,f,c
 17203  003D4E  0E1C               	movlw	28
 17204  003D50  1612               	andwf	??__RegsToCANID,f,c
 17205  003D52  5014               	movf	__RegsToCANID@Value,w,c
 17206  003D54  6ED9               	movwf	fsr2l,c
 17207  003D56  6ADA               	clrf	fsr2h,c
 17208  003D58  0E02               	movlw	2
 17209  003D5A  26D9               	addwf	fsr2l,f,c
 17210  003D5C  6ADA               	clrf	fsr2h,c
 17211  003D5E  5012               	movf	??__RegsToCANID,w,c
 17212  003D60  12DF               	iorwf	indf2,f,c
 17213                           
 17214                           ;ECAN.c: 1180: ptr++;
 17215  003D62  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17216  003D64  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17217                           
 17218                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17219  003D66  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17220  003D6A  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17221  003D6E  5014               	movf	__RegsToCANID@Value,w,c
 17222  003D70  6EE1               	movwf	fsr1l,c
 17223  003D72  6AE2               	clrf	fsr1h,c
 17224  003D74  2AE1               	incf	fsr1l,f,c
 17225  003D76  6AE2               	clrf	fsr1h,c
 17226  003D78  CFDF FFE7          	movff	indf2,indf1
 17227                           
 17228                           ;ECAN.c: 1182: ptr++;
 17229  003D7C  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17230  003D7E  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17231                           
 17232                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17233  003D80  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17234  003D84  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17235  003D88  5014               	movf	__RegsToCANID@Value,w,c
 17236  003D8A  6EE1               	movwf	fsr1l,c
 17237  003D8C  6AE2               	clrf	fsr1h,c
 17238  003D8E  CFDF FFE7          	movff	indf2,indf1
 17239  003D92                     l887:
 17240  003D92  0012               	return	
 17241  003D94                     __end_of__RegsToCANID:
 17242                           	opt stack 0
 17243                           tblptru	equ	0xFF8
 17244                           tblptrh	equ	0xFF7
 17245                           tblptrl	equ	0xFF6
 17246                           tablat	equ	0xFF5
 17247                           prodh	equ	0xFF4
 17248                           prodl	equ	0xFF3
 17249                           postinc0	equ	0xFEE
 17250                           wreg	equ	0xFE8
 17251                           indf1	equ	0xFE7
 17252                           postdec1	equ	0xFE5
 17253                           fsr1h	equ	0xFE2
 17254                           fsr1l	equ	0xFE1
 17255                           indf2	equ	0xFDF
 17256                           postinc2	equ	0xFDE
 17257                           postdec2	equ	0xFDD
 17258                           plusw2	equ	0xFDB
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263 ;; *************** function __ECANPointBuffer *****************
 17264 ;; Defined at:
 17265 ;;		line 1207 in file "../ECAN.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  b               1    wreg     unsigned char 
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  b               1   16[COMRAM] unsigned char 
 17270 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17271 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17272 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17273 ;; Return value:  Size  Location     Type
 17274 ;;                  2   13[COMRAM] PTR unsigned char 
 17275 ;; Registers used:
 17276 ;;		wreg, status,2, status,0
 17277 ;; Tracked objects:
 17278 ;;		On entry : F/0
 17279 ;;		On exit  : 0/0
 17280 ;;		Unchanged: 0/0
 17281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17282 ;;      Params:         3       0       0       0       0       0       0
 17283 ;;      Locals:         3       0       0       0       0       0       0
 17284 ;;      Temps:          0       0       0       0       0       0       0
 17285 ;;      Totals:         6       0       0       0       0       0       0
 17286 ;;Total ram usage:        6 bytes
 17287 ;; Hardware stack levels used:    1
 17288 ;; Hardware stack levels required when called:    2
 17289 ;; This function calls:
 17290 ;;		Nothing
 17291 ;; This function is called by:
 17292 ;;		_ECANReceiveMessage
 17293 ;; This function uses a non-reentrant model
 17294 ;;
 17295                           
 17296                           	psect	text77
 17297  004EA2                     __ptext77:
 17298                           	opt stack 0
 17299  004EA2                     __ECANPointBuffer:
 17300                           	opt stack 24
 17301                           
 17302                           ;incstack = 0
 17303                           ;incstack = 0
 17304                           ;__ECANPointBuffer@b stored from wreg
 17305  004EA2  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;ECAN.c: 1208: BYTE* pt;
 17309                           ;ECAN.c: 1210: switch(b)
 17310  004EA6  D024               	goto	l8448
 17311  004EA8                     l8430:
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17315  004EA8  0E0F               	movlw	15	;volatile
 17316  004EAA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17317  004EAC  0E60               	movlw	96	;volatile
 17318  004EAE  D01E               	goto	L38
 17319  004EB0                     l8432:
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17323  004EB0  010F               	movlb	15	; () banked
 17324  004EB2  0E0F               	movlw	15	;volatile
 17325  004EB4  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17326  004EB6  0E50               	movlw	80	;volatile
 17327  004EB8  D019               	goto	L38
 17328  004EBA                     l8434:
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17332  004EBA  010E               	movlb	14	; () banked
 17333  004EBC  0E0E               	movlw	14	;volatile
 17334  004EBE  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17335  004EC0  0E20               	movlw	32	;volatile
 17336  004EC2  D014               	goto	L38
 17337  004EC4                     l8436:
 17338                           
 17339                           ; BSR set to: 0
 17340                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17341  004EC4  010E               	movlb	14	; () banked
 17342  004EC6  0E0E               	movlw	14	;volatile
 17343  004EC8  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17344  004ECA  0E30               	movlw	48	;volatile
 17345  004ECC  D00F               	goto	L38
 17346  004ECE                     l8438:
 17347                           
 17348                           ; BSR set to: 0
 17349                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17350  004ECE  010E               	movlb	14	; () banked
 17351  004ED0  0E0E               	movlw	14	;volatile
 17352  004ED2  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17353  004ED4  0E40               	movlw	64	;volatile
 17354  004ED6  D00A               	goto	L38
 17355  004ED8                     l8440:
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17359  004ED8  010E               	movlb	14	; () banked
 17360  004EDA  0E0E               	movlw	14	;volatile
 17361  004EDC  D7EB               	goto	L39
 17362  004EDE                     l8442:
 17363                           
 17364                           ; BSR set to: 0
 17365                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17366  004EDE  010E               	movlb	14	; () banked
 17367  004EE0  0E0E               	movlw	14	;volatile
 17368  004EE2  D7E3               	goto	L40
 17369  004EE4                     l8444:
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17373  004EE4  010E               	movlb	14	; () banked
 17374  004EE6  0E0E               	movlw	14	;volatile
 17375  004EE8  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17376  004EEA  0E70               	movlw	112	;volatile
 17377  004EEC                     L38:
 17378  004EEC  6E12               	movwf	__ECANPointBuffer@pt,c
 17379                           
 17380                           ;ECAN.c: 1235: break;
 17381  004EEE  D00F               	goto	l892
 17382  004EF0                     l8448:
 17383                           
 17384                           ; BSR set to: 0
 17385  004EF0  5011               	movf	__ECANPointBuffer@b,w,c
 17386                           
 17387                           ; Switch size 1, requested type "speed"
 17388                           ; Number of cases is 7, Range of values is 0 to 6
 17389                           ; switch strategies available:
 17390                           ; Name         Instructions Cycles
 17391                           ; simple_byte           22    12 (average)
 17392                           ;	Chosen strategy is simple_byte
 17393  004EF2  E0DA               	bz	l8430
 17394  004EF4  0A01               	xorlw	1	; case 1
 17395  004EF6  E0DC               	bz	l8432
 17396  004EF8  0A03               	xorlw	3	; case 2
 17397  004EFA  E0DF               	bz	l8434
 17398  004EFC  0A01               	xorlw	1	; case 3
 17399  004EFE  E0E2               	bz	l8436
 17400  004F00  0A07               	xorlw	7	; case 4
 17401  004F02  E0E5               	bz	l8438
 17402  004F04  0A01               	xorlw	1	; case 5
 17403  004F06  E0E8               	bz	l8440
 17404  004F08  0A03               	xorlw	3	; case 6
 17405  004F0A  E0E9               	bz	l8442
 17406  004F0C  D7EB               	goto	l8444
 17407  004F0E                     l892:
 17408                           
 17409                           ;ECAN.c: 1237: return (pt);
 17410  004F0E  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17411  004F12  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17412  004F16  0012               	return	
 17413  004F18                     __end_of__ECANPointBuffer:
 17414                           	opt stack 0
 17415                           tblptru	equ	0xFF8
 17416                           tblptrh	equ	0xFF7
 17417                           tblptrl	equ	0xFF6
 17418                           tablat	equ	0xFF5
 17419                           prodh	equ	0xFF4
 17420                           prodl	equ	0xFF3
 17421                           postinc0	equ	0xFEE
 17422                           wreg	equ	0xFE8
 17423                           indf1	equ	0xFE7
 17424                           postdec1	equ	0xFE5
 17425                           fsr1h	equ	0xFE2
 17426                           fsr1l	equ	0xFE1
 17427                           indf2	equ	0xFDF
 17428                           postinc2	equ	0xFDE
 17429                           postdec2	equ	0xFDD
 17430                           plusw2	equ	0xFDB
 17431                           fsr2h	equ	0xFDA
 17432                           fsr2l	equ	0xFD9
 17433                           status	equ	0xFD8
 17434                           
 17435 ;; *************** function _vscp_check_pstorage *****************
 17436 ;; Defined at:
 17437 ;;		line 163 in file "../../vscp_firmware/common/vscp_firmware.c"
 17438 ;; Parameters:    Size  Location     Type
 17439 ;;		None
 17440 ;; Auto vars:     Size  Location     Type
 17441 ;;		None
 17442 ;; Return value:  Size  Location     Type
 17443 ;;                  1    wreg      unsigned char 
 17444 ;; Registers used:
 17445 ;;		wreg, status,2, status,0, cstack
 17446 ;; Tracked objects:
 17447 ;;		On entry : 1/1
 17448 ;;		On exit  : 0/0
 17449 ;;		Unchanged: 0/0
 17450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17451 ;;      Params:         0       0       0       0       0       0       0
 17452 ;;      Locals:         0       0       0       0       0       0       0
 17453 ;;      Temps:          0       0       0       0       0       0       0
 17454 ;;      Totals:         0       0       0       0       0       0       0
 17455 ;;Total ram usage:        0 bytes
 17456 ;; Hardware stack levels used:    1
 17457 ;; Hardware stack levels required when called:    4
 17458 ;; This function calls:
 17459 ;;		_vscp_writeNicknamePermanent
 17460 ;;		_vscp_getSegmentCRC
 17461 ;;		_vscp_setSegmentCRC
 17462 ;;		_vscp_setControlByte
 17463 ;; This function is called by:
 17464 ;;		_main
 17465 ;; This function uses a non-reentrant model
 17466 ;;
 17467                           
 17468                           	psect	text78
 17469  005668                     __ptext78:
 17470                           	opt stack 0
 17471  005668                     _vscp_check_pstorage:
 17472                           	opt stack 26
 17473                           
 17474                           ;vscp_firmware.c: 166: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17475                           
 17476                           ;incstack = 0
 17477                           ;incstack = 0
 17478  005668  EC45  F02C         	call	_vscp_getSegmentCRC	;wreg free
 17479  00566C  0BC0               	andlw	192
 17480  00566E  0A40               	xorlw	64
 17481  005670  E102               	bnz	l9558
 17482                           
 17483                           ;vscp_firmware.c: 167: return !0;
 17484  005672  0E01               	movlw	1
 17485  005674  D00A               	goto	l1033
 17486  005676                     l9558:
 17487                           
 17488                           ;vscp_firmware.c: 168: }
 17489                           ;vscp_firmware.c: 171: vscp_writeNicknamePermanent(0xff);
 17490  005676  0EFF               	movlw	255
 17491  005678  EC09  F02C         	call	_vscp_writeNicknamePermanent
 17492                           
 17493                           ;vscp_firmware.c: 174: vscp_setSegmentCRC(0x00);
 17494  00567C  0E00               	movlw	0
 17495  00567E  ECF7  F02B         	call	_vscp_setSegmentCRC
 17496                           
 17497                           ;vscp_firmware.c: 178: vscp_setControlByte(0xA0);
 17498  005682  0EA0               	movlw	160
 17499  005684  ECEE  F02B         	call	_vscp_setControlByte
 17500                           
 17501                           ;vscp_firmware.c: 180: return 0;
 17502  005688  0E00               	movlw	0
 17503  00568A                     l1033:
 17504  00568A  0012               	return	
 17505  00568C                     __end_of_vscp_check_pstorage:
 17506                           	opt stack 0
 17507                           tblptru	equ	0xFF8
 17508                           tblptrh	equ	0xFF7
 17509                           tblptrl	equ	0xFF6
 17510                           tablat	equ	0xFF5
 17511                           prodh	equ	0xFF4
 17512                           prodl	equ	0xFF3
 17513                           postinc0	equ	0xFEE
 17514                           wreg	equ	0xFE8
 17515                           indf1	equ	0xFE7
 17516                           postdec1	equ	0xFE5
 17517                           fsr1h	equ	0xFE2
 17518                           fsr1l	equ	0xFE1
 17519                           indf2	equ	0xFDF
 17520                           postinc2	equ	0xFDE
 17521                           postdec2	equ	0xFDD
 17522                           plusw2	equ	0xFDB
 17523                           fsr2h	equ	0xFDA
 17524                           fsr2l	equ	0xFD9
 17525                           status	equ	0xFD8
 17526                           
 17527 ;; *************** function _vscp_setControlByte *****************
 17528 ;; Defined at:
 17529 ;;		line 2786 in file "../main.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;  ctrl            1    wreg     unsigned char 
 17532 ;; Auto vars:     Size  Location     Type
 17533 ;;  ctrl            1   16[COMRAM] unsigned char 
 17534 ;; Return value:  Size  Location     Type
 17535 ;;		None               void
 17536 ;; Registers used:
 17537 ;;		wreg, status,2, cstack
 17538 ;; Tracked objects:
 17539 ;;		On entry : 0/1
 17540 ;;		On exit  : 0/0
 17541 ;;		Unchanged: 0/0
 17542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17543 ;;      Params:         0       0       0       0       0       0       0
 17544 ;;      Locals:         1       0       0       0       0       0       0
 17545 ;;      Temps:          0       0       0       0       0       0       0
 17546 ;;      Totals:         1       0       0       0       0       0       0
 17547 ;;Total ram usage:        1 bytes
 17548 ;; Hardware stack levels used:    1
 17549 ;; Hardware stack levels required when called:    3
 17550 ;; This function calls:
 17551 ;;		_writeEEPROM
 17552 ;; This function is called by:
 17553 ;;		_vscp_check_pstorage
 17554 ;; This function uses a non-reentrant model
 17555 ;;
 17556                           
 17557                           	psect	text79
 17558  0057DC                     __ptext79:
 17559                           	opt stack 0
 17560  0057DC                     _vscp_setControlByte:
 17561                           	opt stack 26
 17562                           
 17563                           ;incstack = 0
 17564                           ;incstack = 0
 17565                           ;vscp_setControlByte@ctrl stored from wreg
 17566  0057DC  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17567                           
 17568                           ;main.c: 2787: writeEEPROM(0x03, ctrl);
 17569  0057E0  6A0F               	clrf	?_writeEEPROM+1,c
 17570  0057E2  0E03               	movlw	3
 17571  0057E4  6E0E               	movwf	?_writeEEPROM,c
 17572  0057E6  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17573  0057EA  EFFD  F02A         	goto	_writeEEPROM	;wreg free
 17574  0057EE                     __end_of_vscp_setControlByte:
 17575                           	opt stack 0
 17576                           tblptru	equ	0xFF8
 17577                           tblptrh	equ	0xFF7
 17578                           tblptrl	equ	0xFF6
 17579                           tablat	equ	0xFF5
 17580                           prodh	equ	0xFF4
 17581                           prodl	equ	0xFF3
 17582                           postinc0	equ	0xFEE
 17583                           wreg	equ	0xFE8
 17584                           indf1	equ	0xFE7
 17585                           postdec1	equ	0xFE5
 17586                           fsr1h	equ	0xFE2
 17587                           fsr1l	equ	0xFE1
 17588                           indf2	equ	0xFDF
 17589                           postinc2	equ	0xFDE
 17590                           postdec2	equ	0xFDD
 17591                           plusw2	equ	0xFDB
 17592                           fsr2h	equ	0xFDA
 17593                           fsr2l	equ	0xFD9
 17594                           status	equ	0xFD8
 17595                           
 17596 ;; *************** function _vscp_setSegmentCRC *****************
 17597 ;; Defined at:
 17598 ;;		line 2777 in file "../main.c"
 17599 ;; Parameters:    Size  Location     Type
 17600 ;;  crc             1    wreg     unsigned char 
 17601 ;; Auto vars:     Size  Location     Type
 17602 ;;  crc             1   16[COMRAM] unsigned char 
 17603 ;; Return value:  Size  Location     Type
 17604 ;;		None               void
 17605 ;; Registers used:
 17606 ;;		wreg, status,2, cstack
 17607 ;; Tracked objects:
 17608 ;;		On entry : 0/0
 17609 ;;		On exit  : 0/0
 17610 ;;		Unchanged: 0/0
 17611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17612 ;;      Params:         0       0       0       0       0       0       0
 17613 ;;      Locals:         1       0       0       0       0       0       0
 17614 ;;      Temps:          0       0       0       0       0       0       0
 17615 ;;      Totals:         1       0       0       0       0       0       0
 17616 ;;Total ram usage:        1 bytes
 17617 ;; Hardware stack levels used:    1
 17618 ;; Hardware stack levels required when called:    3
 17619 ;; This function calls:
 17620 ;;		_writeEEPROM
 17621 ;; This function is called by:
 17622 ;;		_vscp_check_pstorage
 17623 ;;		_vscp_handleProbeState
 17624 ;;		_vscp_handleHeartbeat
 17625 ;;		_vscp_handleSetNickname
 17626 ;; This function uses a non-reentrant model
 17627 ;;
 17628                           
 17629                           	psect	text80
 17630  0057EE                     __ptext80:
 17631                           	opt stack 0
 17632  0057EE                     _vscp_setSegmentCRC:
 17633                           	opt stack 25
 17634                           
 17635                           ;incstack = 0
 17636                           ;incstack = 0
 17637                           ;vscp_setSegmentCRC@crc stored from wreg
 17638  0057EE  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17639                           
 17640                           ;main.c: 2778: writeEEPROM(0x02, crc);
 17641  0057F2  6A0F               	clrf	?_writeEEPROM+1,c
 17642  0057F4  0E02               	movlw	2
 17643  0057F6  6E0E               	movwf	?_writeEEPROM,c
 17644  0057F8  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17645  0057FC  EFFD  F02A         	goto	_writeEEPROM	;wreg free
 17646  005800                     __end_of_vscp_setSegmentCRC:
 17647                           	opt stack 0
 17648                           tblptru	equ	0xFF8
 17649                           tblptrh	equ	0xFF7
 17650                           tblptrl	equ	0xFF6
 17651                           tablat	equ	0xFF5
 17652                           prodh	equ	0xFF4
 17653                           prodl	equ	0xFF3
 17654                           postinc0	equ	0xFEE
 17655                           wreg	equ	0xFE8
 17656                           indf1	equ	0xFE7
 17657                           postdec1	equ	0xFE5
 17658                           fsr1h	equ	0xFE2
 17659                           fsr1l	equ	0xFE1
 17660                           indf2	equ	0xFDF
 17661                           postinc2	equ	0xFDE
 17662                           postdec2	equ	0xFDD
 17663                           plusw2	equ	0xFDB
 17664                           fsr2h	equ	0xFDA
 17665                           fsr2l	equ	0xFD9
 17666                           status	equ	0xFD8
 17667                           
 17668 ;; *************** function _vscp_getSegmentCRC *****************
 17669 ;; Defined at:
 17670 ;;		line 2768 in file "../main.c"
 17671 ;; Parameters:    Size  Location     Type
 17672 ;;		None
 17673 ;; Auto vars:     Size  Location     Type
 17674 ;;		None
 17675 ;; Return value:  Size  Location     Type
 17676 ;;                  1    wreg      unsigned char 
 17677 ;; Registers used:
 17678 ;;		wreg, status,2, cstack
 17679 ;; Tracked objects:
 17680 ;;		On entry : 0/0
 17681 ;;		On exit  : 0/0
 17682 ;;		Unchanged: 0/0
 17683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17684 ;;      Params:         0       0       0       0       0       0       0
 17685 ;;      Locals:         0       0       0       0       0       0       0
 17686 ;;      Temps:          0       0       0       0       0       0       0
 17687 ;;      Totals:         0       0       0       0       0       0       0
 17688 ;;Total ram usage:        0 bytes
 17689 ;; Hardware stack levels used:    1
 17690 ;; Hardware stack levels required when called:    3
 17691 ;; This function calls:
 17692 ;;		_readEEPROM
 17693 ;; This function is called by:
 17694 ;;		_vscp_check_pstorage
 17695 ;;		_vscp_handleHeartbeat
 17696 ;; This function uses a non-reentrant model
 17697 ;;
 17698                           
 17699                           	psect	text81
 17700  00588A                     __ptext81:
 17701                           	opt stack 0
 17702  00588A                     _vscp_getSegmentCRC:
 17703                           	opt stack 25
 17704                           
 17705                           ;main.c: 2769: return readEEPROM(0x02);
 17706                           
 17707                           ;incstack = 0
 17708                           ;incstack = 0
 17709  00588A  6A0F               	clrf	?_readEEPROM+1,c
 17710  00588C  0E02               	movlw	2
 17711  00588E  6E0E               	movwf	?_readEEPROM,c
 17712  005890  EF00  F02C         	goto	_readEEPROM	;wreg free
 17713  005894                     __end_of_vscp_getSegmentCRC:
 17714                           	opt stack 0
 17715                           tblptru	equ	0xFF8
 17716                           tblptrh	equ	0xFF7
 17717                           tblptrl	equ	0xFF6
 17718                           tablat	equ	0xFF5
 17719                           prodh	equ	0xFF4
 17720                           prodl	equ	0xFF3
 17721                           postinc0	equ	0xFEE
 17722                           wreg	equ	0xFE8
 17723                           indf1	equ	0xFE7
 17724                           postdec1	equ	0xFE5
 17725                           fsr1h	equ	0xFE2
 17726                           fsr1l	equ	0xFE1
 17727                           indf2	equ	0xFDF
 17728                           postinc2	equ	0xFDE
 17729                           postdec2	equ	0xFDD
 17730                           plusw2	equ	0xFDB
 17731                           fsr2h	equ	0xFDA
 17732                           fsr2l	equ	0xFD9
 17733                           status	equ	0xFD8
 17734                           
 17735 ;; *************** function _readEEPROM *****************
 17736 ;; Defined at:
 17737 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 17738 ;; Parameters:    Size  Location     Type
 17739 ;;  address         2   13[COMRAM] unsigned short 
 17740 ;; Auto vars:     Size  Location     Type
 17741 ;;  data            1   16[COMRAM] unsigned char 
 17742 ;; Return value:  Size  Location     Type
 17743 ;;                  1    wreg      unsigned char 
 17744 ;; Registers used:
 17745 ;;		wreg, status,2
 17746 ;; Tracked objects:
 17747 ;;		On entry : 0/0
 17748 ;;		On exit  : 0/0
 17749 ;;		Unchanged: 0/0
 17750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17751 ;;      Params:         2       0       0       0       0       0       0
 17752 ;;      Locals:         2       0       0       0       0       0       0
 17753 ;;      Temps:          0       0       0       0       0       0       0
 17754 ;;      Totals:         4       0       0       0       0       0       0
 17755 ;;Total ram usage:        4 bytes
 17756 ;; Hardware stack levels used:    1
 17757 ;; Hardware stack levels required when called:    2
 17758 ;; This function calls:
 17759 ;;		Nothing
 17760 ;; This function is called by:
 17761 ;;		_doWork
 17762 ;;		_doOneSecondWork
 17763 ;;		_sendTempEvent
 17764 ;;		_getCalibrationValue
 17765 ;;		_writeCoeffs2Ram
 17766 ;;		_handle_sync
 17767 ;;		_vscp_readAppReg
 17768 ;;		_vscp_writeAppReg
 17769 ;;		_vscp_getGUID
 17770 ;;		_vscp_getUserID
 17771 ;;		_vscp_getManufacturerId
 17772 ;;		_vscp_getZone
 17773 ;;		_vscp_getSubzone
 17774 ;;		_vscp_readNicknamePermanent
 17775 ;;		_vscp_getSegmentCRC
 17776 ;; This function uses a non-reentrant model
 17777 ;;
 17778                           
 17779                           	psect	text82
 17780  005800                     __ptext82:
 17781                           	opt stack 0
 17782  005800                     _readEEPROM:
 17783                           	opt stack 26
 17784                           
 17785                           ;eeprom.c: 93: uint8_t data;
 17786                           ;eeprom.c: 98: EEADR = address & 0xff;
 17787                           
 17788                           ;incstack = 0
 17789                           ;incstack = 0
 17790  005800  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17791                           
 17792                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 17793  005804  9EA6               	bcf	4006,7,c	;volatile
 17794                           
 17795                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 17796  005806  9CA6               	bcf	4006,6,c	;volatile
 17797                           
 17798                           ;eeprom.c: 101: EECON1bits.RD = 1;
 17799  005808  80A6               	bsf	4006,0,c	;volatile
 17800                           
 17801                           ;eeprom.c: 102: data = EEDATA;
 17802  00580A  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17803                           
 17804                           ;eeprom.c: 104: return data;
 17805  00580E  5011               	movf	readEEPROM@data,w,c
 17806  005810  0012               	return	
 17807  005812                     __end_of_readEEPROM:
 17808                           	opt stack 0
 17809                           tblptru	equ	0xFF8
 17810                           tblptrh	equ	0xFF7
 17811                           tblptrl	equ	0xFF6
 17812                           tablat	equ	0xFF5
 17813                           prodh	equ	0xFF4
 17814                           prodl	equ	0xFF3
 17815                           postinc0	equ	0xFEE
 17816                           wreg	equ	0xFE8
 17817                           indf1	equ	0xFE7
 17818                           postdec1	equ	0xFE5
 17819                           fsr1h	equ	0xFE2
 17820                           fsr1l	equ	0xFE1
 17821                           indf2	equ	0xFDF
 17822                           postinc2	equ	0xFDE
 17823                           postdec2	equ	0xFDD
 17824                           plusw2	equ	0xFDB
 17825                           fsr2h	equ	0xFDA
 17826                           fsr2l	equ	0xFD9
 17827                           status	equ	0xFD8
 17828                           
 17829 ;; *************** function _vscp_writeNicknamePermanent *****************
 17830 ;; Defined at:
 17831 ;;		line 2759 in file "../main.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;  nickname        1    wreg     unsigned char 
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;  nickname        1   16[COMRAM] unsigned char 
 17836 ;; Return value:  Size  Location     Type
 17837 ;;		None               void
 17838 ;; Registers used:
 17839 ;;		wreg, status,2, cstack
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17845 ;;      Params:         0       0       0       0       0       0       0
 17846 ;;      Locals:         1       0       0       0       0       0       0
 17847 ;;      Temps:          0       0       0       0       0       0       0
 17848 ;;      Totals:         1       0       0       0       0       0       0
 17849 ;;Total ram usage:        1 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    3
 17852 ;; This function calls:
 17853 ;;		_writeEEPROM
 17854 ;; This function is called by:
 17855 ;;		_vscp_check_pstorage
 17856 ;;		_vscp_handleProbeState
 17857 ;;		_vscp_handleHeartbeat
 17858 ;;		_vscp_handleSetNickname
 17859 ;;		_vscp_handleDropNickname
 17860 ;; This function uses a non-reentrant model
 17861 ;;
 17862                           
 17863                           	psect	text83
 17864  005812                     __ptext83:
 17865                           	opt stack 0
 17866  005812                     _vscp_writeNicknamePermanent:
 17867                           	opt stack 25
 17868                           
 17869                           ;incstack = 0
 17870                           ;incstack = 0
 17871                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17872  005812  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17873                           
 17874                           ;main.c: 2760: writeEEPROM( 0x01, nickname );
 17875  005816  6A0F               	clrf	?_writeEEPROM+1,c
 17876  005818  0E01               	movlw	1
 17877  00581A  6E0E               	movwf	?_writeEEPROM,c
 17878  00581C  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17879  005820  EFFD  F02A         	goto	_writeEEPROM	;wreg free
 17880  005824                     __end_of_vscp_writeNicknamePermanent:
 17881                           	opt stack 0
 17882                           tblptru	equ	0xFF8
 17883                           tblptrh	equ	0xFF7
 17884                           tblptrl	equ	0xFF6
 17885                           tablat	equ	0xFF5
 17886                           prodh	equ	0xFF4
 17887                           prodl	equ	0xFF3
 17888                           postinc0	equ	0xFEE
 17889                           wreg	equ	0xFE8
 17890                           indf1	equ	0xFE7
 17891                           postdec1	equ	0xFE5
 17892                           fsr1h	equ	0xFE2
 17893                           fsr1l	equ	0xFE1
 17894                           indf2	equ	0xFDF
 17895                           postinc2	equ	0xFDE
 17896                           postdec2	equ	0xFDD
 17897                           plusw2	equ	0xFDB
 17898                           fsr2h	equ	0xFDA
 17899                           fsr2l	equ	0xFD9
 17900                           status	equ	0xFD8
 17901                           
 17902 ;; *************** function _writeEEPROM *****************
 17903 ;; Defined at:
 17904 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 17905 ;; Parameters:    Size  Location     Type
 17906 ;;  address         2   13[COMRAM] unsigned short 
 17907 ;;  data            1   15[COMRAM] unsigned char 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;		None
 17910 ;; Return value:  Size  Location     Type
 17911 ;;		None               void
 17912 ;; Registers used:
 17913 ;;		wreg, status,2
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17919 ;;      Params:         3       0       0       0       0       0       0
 17920 ;;      Locals:         0       0       0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0
 17922 ;;      Totals:         3       0       0       0       0       0       0
 17923 ;;Total ram usage:        3 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    2
 17926 ;; This function calls:
 17927 ;;		Nothing
 17928 ;; This function is called by:
 17929 ;;		_main
 17930 ;;		_doWork
 17931 ;;		_init_app_eeprom
 17932 ;;		_vscp_writeAppReg
 17933 ;;		_vscp_setGUID
 17934 ;;		_vscp_setUserID
 17935 ;;		_vscp_setManufacturerId
 17936 ;;		_vscp_goBootloaderMode
 17937 ;;		_vscp_writeNicknamePermanent
 17938 ;;		_vscp_setSegmentCRC
 17939 ;;		_vscp_setControlByte
 17940 ;; This function uses a non-reentrant model
 17941 ;;
 17942                           
 17943                           	psect	text84
 17944  0055FA                     __ptext84:
 17945                           	opt stack 0
 17946  0055FA                     _writeEEPROM:
 17947                           	opt stack 27
 17948                           
 17949                           ;eeprom.c: 29: EEADR = address & 0xff;
 17950                           
 17951                           ;incstack = 0
 17952                           ;incstack = 0
 17953  0055FA  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17954                           
 17955                           ;eeprom.c: 30: EEDATA = data;
 17956  0055FE  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17957                           
 17958                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 17959  005602  9EA6               	bcf	4006,7,c	;volatile
 17960                           
 17961                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 17962  005604  9CA6               	bcf	4006,6,c	;volatile
 17963                           
 17964                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 17965  005606  84A6               	bsf	4006,2,c	;volatile
 17966                           
 17967                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 17968  005608  9EF2               	bcf	intcon,7,c	;volatile
 17969                           
 17970                           ;eeprom.c: 37: EECON2 = 0x55;
 17971  00560A  0E55               	movlw	85
 17972  00560C  6EA7               	movwf	4007,c	;volatile
 17973                           
 17974                           ;eeprom.c: 38: EECON2 = 0xaa;
 17975  00560E  0EAA               	movlw	170
 17976  005610  6EA7               	movwf	4007,c	;volatile
 17977                           
 17978                           ;eeprom.c: 39: EECON1bits.WR = 1;
 17979  005612  82A6               	bsf	4006,1,c	;volatile
 17980                           
 17981                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 17982  005614  8EF2               	bsf	intcon,7,c	;volatile
 17983  005616                     l915:
 17984  005616  A8A1               	btfss	4001,4,c	;volatile
 17985  005618  D7FE               	goto	l915
 17986                           
 17987                           ;eeprom.c: 47: PIR2bits.EEIF = 0;
 17988  00561A  98A1               	bcf	4001,4,c	;volatile
 17989                           
 17990                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 17991  00561C  94A6               	bcf	4006,2,c	;volatile
 17992  00561E  0012               	return	
 17993  005620                     __end_of_writeEEPROM:
 17994                           	opt stack 0
 17995                           tblptru	equ	0xFF8
 17996                           tblptrh	equ	0xFF7
 17997                           tblptrl	equ	0xFF6
 17998                           tablat	equ	0xFF5
 17999                           prodh	equ	0xFF4
 18000                           prodl	equ	0xFF3
 18001                           intcon	equ	0xFF2
 18002                           postinc0	equ	0xFEE
 18003                           wreg	equ	0xFE8
 18004                           indf1	equ	0xFE7
 18005                           postdec1	equ	0xFE5
 18006                           fsr1h	equ	0xFE2
 18007                           fsr1l	equ	0xFE1
 18008                           indf2	equ	0xFDF
 18009                           postinc2	equ	0xFDE
 18010                           postdec2	equ	0xFDD
 18011                           plusw2	equ	0xFDB
 18012                           fsr2h	equ	0xFDA
 18013                           fsr2l	equ	0xFD9
 18014                           status	equ	0xFD8
 18015                           
 18016 ;; *************** function _init *****************
 18017 ;; Defined at:
 18018 ;;		line 882 in file "../main.c"
 18019 ;; Parameters:    Size  Location     Type
 18020 ;;		None
 18021 ;; Auto vars:     Size  Location     Type
 18022 ;;		None
 18023 ;; Return value:  Size  Location     Type
 18024 ;;		None               void
 18025 ;; Registers used:
 18026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18027 ;; Tracked objects:
 18028 ;;		On entry : 0/0
 18029 ;;		On exit  : 1/1
 18030 ;;		Unchanged: 0/0
 18031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18032 ;;      Params:         0       0       0       0       0       0       0
 18033 ;;      Locals:         0       0       0       0       0       0       0
 18034 ;;      Temps:          0       0       0       0       0       0       0
 18035 ;;      Totals:         0       0       0       0       0       0       0
 18036 ;;Total ram usage:        0 bytes
 18037 ;; Hardware stack levels used:    1
 18038 ;; Hardware stack levels required when called:    5
 18039 ;; This function calls:
 18040 ;;		_WriteTimer0
 18041 ;;		_ConvertADC
 18042 ;;		_init_app_ram
 18043 ;;		_OpenTimer0
 18044 ;;		_OpenADC
 18045 ;;		_ECANInitialize
 18046 ;; This function is called by:
 18047 ;;		_main
 18048 ;; This function uses a non-reentrant model
 18049 ;;
 18050                           
 18051                           	psect	text85
 18052  0053C6                     __ptext85:
 18053                           	opt stack 0
 18054  0053C6                     _init:
 18055                           	opt stack 25
 18056                           
 18057                           ;main.c: 886: init_app_ram();
 18058                           
 18059                           ;incstack = 0
 18060                           ;incstack = 0
 18061  0053C6  EC43  F029         	call	_init_app_ram	;wreg free
 18062                           
 18063                           ; BSR set to: 1
 18064                           ;main.c: 894: TRISA = 0x07;
 18065  0053CA  0E07               	movlw	7
 18066  0053CC  6E92               	movwf	3986,c	;volatile
 18067                           
 18068                           ; BSR set to: 1
 18069                           ;main.c: 905: TRISB = 0x1B;
 18070  0053CE  0E1B               	movlw	27
 18071  0053D0  6E93               	movwf	3987,c	;volatile
 18072                           
 18073                           ; BSR set to: 1
 18074                           ;main.c: 915: TRISC = 0x01;
 18075  0053D2  0E01               	movlw	1
 18076  0053D4  6E94               	movwf	3988,c	;volatile
 18077                           
 18078                           ; BSR set to: 1
 18079                           ;main.c: 916: PORTC = 0x00;
 18080  0053D6  6A82               	clrf	3970,c	;volatile
 18081                           
 18082                           ; BSR set to: 1
 18083                           ;main.c: 918: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18084  0053D8  0E92               	movlw	146
 18085  0053DA  EC77  F02B         	call	_OpenTimer0
 18086                           
 18087                           ; BSR set to: 1
 18088                           ;main.c: 919: WriteTimer0(0xfb1d);
 18089  0053DE  0EFB               	movlw	251
 18090  0053E0  6E0F               	movwf	?_WriteTimer0+1,c
 18091  0053E2  0E1D               	movlw	29
 18092  0053E4  6E0E               	movwf	?_WriteTimer0,c
 18093  0053E6  EC12  F02C         	call	_WriteTimer0	;wreg free
 18094                           
 18095                           ; BSR set to: 1
 18096                           ;main.c: 921: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18097                           ;main.c: 922: 0b10000111 & 0b11111111 & 0b11110100 &
 18098                           ;main.c: 923: 0b11111110 & 0b11111101,
 18099                           ;main.c: 924: 15);
 18100  0053EA  0E84               	movlw	132
 18101  0053EC  6E0E               	movwf	?_OpenADC,c
 18102  0053EE  0E0F               	movlw	15
 18103  0053F0  6E0F               	movwf	?_OpenADC+1,c
 18104  0053F2  0EEF               	movlw	239
 18105  0053F4  ECC6  F027         	call	_OpenADC
 18106                           
 18107                           ; BSR set to: 1
 18108                           ;main.c: 927: ECANInitialize();
 18109  0053F8  EC04  F026         	call	_ECANInitialize	;wreg free
 18110                           
 18111                           ;main.c: 951: INTCONbits.GIE = 1;
 18112  0053FC  8EF2               	bsf	intcon,7,c	;volatile
 18113                           
 18114                           ;main.c: 953: ConvertADC();
 18115  0053FE  EF50  F02C         	goto	_ConvertADC	;wreg free
 18116  005402                     __end_of_init:
 18117                           	opt stack 0
 18118                           tblptru	equ	0xFF8
 18119                           tblptrh	equ	0xFF7
 18120                           tblptrl	equ	0xFF6
 18121                           tablat	equ	0xFF5
 18122                           prodh	equ	0xFF4
 18123                           prodl	equ	0xFF3
 18124                           intcon	equ	0xFF2
 18125                           postinc0	equ	0xFEE
 18126                           wreg	equ	0xFE8
 18127                           indf1	equ	0xFE7
 18128                           postdec1	equ	0xFE5
 18129                           fsr1h	equ	0xFE2
 18130                           fsr1l	equ	0xFE1
 18131                           indf2	equ	0xFDF
 18132                           postinc2	equ	0xFDE
 18133                           postdec2	equ	0xFDD
 18134                           plusw2	equ	0xFDB
 18135                           fsr2h	equ	0xFDA
 18136                           fsr2l	equ	0xFD9
 18137                           status	equ	0xFD8
 18138                           
 18139 ;; *************** function _ECANInitialize *****************
 18140 ;; Defined at:
 18141 ;;		line 168 in file "../ECAN.c"
 18142 ;; Parameters:    Size  Location     Type
 18143 ;;		None
 18144 ;; Auto vars:     Size  Location     Type
 18145 ;;		None
 18146 ;; Return value:  Size  Location     Type
 18147 ;;		None               void
 18148 ;; Registers used:
 18149 ;;		wreg, status,2, status,0, cstack
 18150 ;; Tracked objects:
 18151 ;;		On entry : F/1
 18152 ;;		On exit  : 1/1
 18153 ;;		Unchanged: 0/0
 18154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18155 ;;      Params:         0       0       0       0       0       0       0
 18156 ;;      Locals:         0       0       0       0       0       0       0
 18157 ;;      Temps:          0       0       0       0       0       0       0
 18158 ;;      Totals:         0       0       0       0       0       0       0
 18159 ;;Total ram usage:        0 bytes
 18160 ;; Hardware stack levels used:    1
 18161 ;; Hardware stack levels required when called:    3
 18162 ;; This function calls:
 18163 ;;		_ECANSetOperationMode
 18164 ;; This function is called by:
 18165 ;;		_init
 18166 ;; This function uses a non-reentrant model
 18167 ;;
 18168                           
 18169                           	psect	text86
 18170  004C08                     __ptext86:
 18171                           	opt stack 0
 18172  004C08                     _ECANInitialize:
 18173                           	opt stack 26
 18174                           
 18175                           ; BSR set to: 1
 18176                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18177                           
 18178                           ;incstack = 0
 18179                           ;incstack = 0
 18180  004C08  0E80               	movlw	128
 18181  004C0A  ECC4  F02B         	call	_ECANSetOperationMode
 18182                           
 18183                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18184  004C0E  0E09               	movlw	9
 18185  004C10  6E70               	movwf	3952,c	;volatile
 18186                           
 18187                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18188  004C12  0EFC               	movlw	252
 18189  004C14  6E71               	movwf	3953,c	;volatile
 18190                           
 18191                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18192                           ;ECAN.c: 181: (0 << 6) |
 18193                           ;ECAN.c: 182: (2-1);
 18194  004C16  0E01               	movlw	1
 18195  004C18  6E72               	movwf	3954,c	;volatile
 18196                           
 18197                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18198  004C1A  0E20               	movlw	32
 18199  004C1C  6E73               	movwf	3955,c	;volatile
 18200                           
 18201                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18202  004C1E  8E77               	bsf	3959,7,c	;volatile
 18203                           
 18204                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18205  004C20  9C77               	bcf	3959,6,c	;volatile
 18206                           
 18207                           ;ECAN.c: 205: RXB0CON = 0;
 18208  004C22  6A60               	clrf	3936,c	;volatile
 18209                           
 18210                           ;ECAN.c: 211: RXB1CON = 0;
 18211  004C24  010F               	movlb	15	; () banked
 18212  004C26  6B50               	clrf	80,b	;volatile
 18213                           
 18214                           ; BSR set to: 15
 18215                           ;ECAN.c: 221: B0CON = 0;
 18216  004C28  010E               	movlb	14	; () banked
 18217  004C2A  6B20               	clrf	32,b	;volatile
 18218                           
 18219                           ; BSR set to: 14
 18220                           ;ECAN.c: 231: B1CON = 0;
 18221  004C2C  6B30               	clrf	48,b	;volatile
 18222                           
 18223                           ; BSR set to: 14
 18224                           ;ECAN.c: 241: B2CON = 0;
 18225  004C2E  6B40               	clrf	64,b	;volatile
 18226                           
 18227                           ; BSR set to: 14
 18228                           ;ECAN.c: 254: B3CON = 0 << 2;
 18229  004C30  6B50               	clrf	80,b	;volatile
 18230                           
 18231                           ; BSR set to: 14
 18232                           ;ECAN.c: 264: B4CON = 0 << 2;
 18233  004C32  6B60               	clrf	96,b	;volatile
 18234                           
 18235                           ; BSR set to: 14
 18236                           ;ECAN.c: 274: B5CON = 0 << 2;
 18237  004C34  6B70               	clrf	112,b	;volatile
 18238                           
 18239                           ; BSR set to: 14
 18240                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18241  004C36  0EE0               	movlw	224
 18242  004C38  010D               	movlb	13	; () banked
 18243  004C3A  6FF8               	movwf	248,b	;volatile
 18244                           
 18245                           ; BSR set to: 13
 18246                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18247  004C3C  010F               	movlb	15	; () banked
 18248  004C3E  6B00               	clrf	0,b	;volatile
 18249                           
 18250                           ; BSR set to: 15
 18251  004C40  0E08               	movlw	8
 18252  004C42  6F01               	movwf	1,b	;volatile
 18253                           
 18254                           ; BSR set to: 15
 18255  004C44  6B02               	clrf	2,b	;volatile
 18256                           
 18257                           ; BSR set to: 15
 18258  004C46  6B03               	clrf	3,b	;volatile
 18259                           
 18260                           ; BSR set to: 15
 18261                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18262  004C48  6B04               	clrf	4,b	;volatile
 18263                           
 18264                           ; BSR set to: 15
 18265  004C4A  0EE8               	movlw	232
 18266  004C4C  6F05               	movwf	5,b	;volatile
 18267                           
 18268                           ; BSR set to: 15
 18269  004C4E  0E1A               	movlw	26
 18270  004C50  6F06               	movwf	6,b	;volatile
 18271                           
 18272                           ; BSR set to: 15
 18273  004C52  6B07               	clrf	7,b	;volatile
 18274                           
 18275                           ; BSR set to: 15
 18276                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18277  004C54  0E03               	movlw	3
 18278  004C56  010D               	movlb	13	; () banked
 18279  004C58  6FD4               	movwf	212,b	;volatile
 18280                           
 18281                           ; BSR set to: 13
 18282                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18283  004C5A  6BD5               	clrf	213,b	;volatile
 18284                           
 18285                           ; BSR set to: 13
 18286                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18287  004C5C  6BE0               	clrf	224,b	;volatile
 18288                           
 18289                           ; BSR set to: 13
 18290                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18291  004C5E  0E11               	movlw	17
 18292  004C60  6FE1               	movwf	225,b	;volatile
 18293                           
 18294                           ; BSR set to: 13
 18295                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18296  004C62  6FE2               	movwf	226,b	;volatile
 18297                           
 18298                           ; BSR set to: 13
 18299                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18300  004C64  6BE3               	clrf	227,b	;volatile
 18301                           
 18302                           ; BSR set to: 13
 18303                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18304  004C66  6BE4               	clrf	228,b	;volatile
 18305                           
 18306                           ; BSR set to: 13
 18307                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18308  004C68  6BE5               	clrf	229,b	;volatile
 18309                           
 18310                           ; BSR set to: 13
 18311                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18312  004C6A  6BE6               	clrf	230,b	;volatile
 18313                           
 18314                           ; BSR set to: 13
 18315                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18316  004C6C  6BE7               	clrf	231,b	;volatile
 18317                           
 18318                           ; BSR set to: 13
 18319                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18320  004C6E  0E54               	movlw	84
 18321  004C70  6FF0               	movwf	240,b	;volatile
 18322                           
 18323                           ; BSR set to: 13
 18324                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18325  004C72  0E05               	movlw	5
 18326  004C74  6FF1               	movwf	241,b	;volatile
 18327                           
 18328                           ; BSR set to: 13
 18329                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18330  004C76  6BF2               	clrf	242,b	;volatile
 18331                           
 18332                           ; BSR set to: 13
 18333                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18334  004C78  6BF2               	clrf	242,b	;volatile
 18335                           
 18336                           ; BSR set to: 13
 18337                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18338  004C7A  0E0F               	movlw	15
 18339  004C7C  010F               	movlb	15	; () banked
 18340  004C7E  6F18               	movwf	24,b	;volatile
 18341                           
 18342                           ; BSR set to: 15
 18343  004C80  0EE0               	movlw	224
 18344  004C82  6F19               	movwf	25,b	;volatile
 18345                           
 18346                           ; BSR set to: 15
 18347  004C84  6B1A               	clrf	26,b	;volatile
 18348                           
 18349                           ; BSR set to: 15
 18350  004C86  6B1B               	clrf	27,b	;volatile
 18351                           
 18352                           ; BSR set to: 15
 18353                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18354  004C88  8719               	bsf	25,3,b	;volatile
 18355                           
 18356                           ; BSR set to: 15
 18357                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18358  004C8A  0E0F               	movlw	15
 18359  004C8C  6F1C               	movwf	28,b	;volatile
 18360                           
 18361                           ; BSR set to: 15
 18362  004C8E  0EE0               	movlw	224
 18363  004C90  6F1D               	movwf	29,b	;volatile
 18364                           
 18365                           ; BSR set to: 15
 18366  004C92  691E               	setf	30,b	;volatile
 18367                           
 18368                           ; BSR set to: 15
 18369  004C94  6B1F               	clrf	31,b	;volatile
 18370                           
 18371                           ; BSR set to: 15
 18372                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18373  004C96  871D               	bsf	29,3,b	;volatile
 18374                           
 18375                           ; BSR set to: 15
 18376                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18377  004C98  0E00               	movlw	0
 18378  004C9A  EFC4  F02B         	goto	_ECANSetOperationMode
 18379  004C9E                     __end_of_ECANInitialize:
 18380                           	opt stack 0
 18381                           tblptru	equ	0xFF8
 18382                           tblptrh	equ	0xFF7
 18383                           tblptrl	equ	0xFF6
 18384                           tablat	equ	0xFF5
 18385                           prodh	equ	0xFF4
 18386                           prodl	equ	0xFF3
 18387                           intcon	equ	0xFF2
 18388                           postinc0	equ	0xFEE
 18389                           wreg	equ	0xFE8
 18390                           indf1	equ	0xFE7
 18391                           postdec1	equ	0xFE5
 18392                           fsr1h	equ	0xFE2
 18393                           fsr1l	equ	0xFE1
 18394                           indf2	equ	0xFDF
 18395                           postinc2	equ	0xFDE
 18396                           postdec2	equ	0xFDD
 18397                           plusw2	equ	0xFDB
 18398                           fsr2h	equ	0xFDA
 18399                           fsr2l	equ	0xFD9
 18400                           status	equ	0xFD8
 18401                           
 18402 ;; *************** function _ECANSetOperationMode *****************
 18403 ;; Defined at:
 18404 ;;		line 1012 in file "../ECAN.c"
 18405 ;; Parameters:    Size  Location     Type
 18406 ;;  mode            1    wreg     enum E16337
 18407 ;; Auto vars:     Size  Location     Type
 18408 ;;  mode            1   13[COMRAM] enum E16337
 18409 ;; Return value:  Size  Location     Type
 18410 ;;		None               void
 18411 ;; Registers used:
 18412 ;;		wreg, status,2, status,0
 18413 ;; Tracked objects:
 18414 ;;		On entry : 1/1
 18415 ;;		On exit  : 1/1
 18416 ;;		Unchanged: 1/0
 18417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18418 ;;      Params:         0       0       0       0       0       0       0
 18419 ;;      Locals:         1       0       0       0       0       0       0
 18420 ;;      Temps:          0       0       0       0       0       0       0
 18421 ;;      Totals:         1       0       0       0       0       0       0
 18422 ;;Total ram usage:        1 bytes
 18423 ;; Hardware stack levels used:    1
 18424 ;; Hardware stack levels required when called:    2
 18425 ;; This function calls:
 18426 ;;		Nothing
 18427 ;; This function is called by:
 18428 ;;		_ECANInitialize
 18429 ;; This function uses a non-reentrant model
 18430 ;;
 18431                           
 18432                           	psect	text87
 18433  005788                     __ptext87:
 18434                           	opt stack 0
 18435  005788                     _ECANSetOperationMode:
 18436                           	opt stack 26
 18437                           
 18438                           ;incstack = 0
 18439                           ;incstack = 0
 18440                           ;ECANSetOperationMode@mode stored from wreg
 18441  005788  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18442                           
 18443                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18444  00578C  0E1F               	movlw	31
 18445  00578E  166F               	andwf	3951,f,c	;volatile
 18446                           
 18447                           ;ECAN.c: 1014: CANCON |= mode;
 18448  005790  500E               	movf	ECANSetOperationMode@mode,w,c
 18449  005792  126F               	iorwf	3951,f,c	;volatile
 18450  005794                     l8400:
 18451  005794  506F               	movf	3951,w,c	;volatile
 18452  005796  0BE0               	andlw	224
 18453  005798  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18454  00579A  B4D8               	btfsc	status,2,c
 18455  00579C  0012               	return	
 18456  00579E  D7FA               	goto	l8400
 18457  0057A0                     __end_of_ECANSetOperationMode:
 18458                           	opt stack 0
 18459                           tblptru	equ	0xFF8
 18460                           tblptrh	equ	0xFF7
 18461                           tblptrl	equ	0xFF6
 18462                           tablat	equ	0xFF5
 18463                           prodh	equ	0xFF4
 18464                           prodl	equ	0xFF3
 18465                           intcon	equ	0xFF2
 18466                           postinc0	equ	0xFEE
 18467                           wreg	equ	0xFE8
 18468                           indf1	equ	0xFE7
 18469                           postdec1	equ	0xFE5
 18470                           fsr1h	equ	0xFE2
 18471                           fsr1l	equ	0xFE1
 18472                           indf2	equ	0xFDF
 18473                           postinc2	equ	0xFDE
 18474                           postdec2	equ	0xFDD
 18475                           plusw2	equ	0xFDB
 18476                           fsr2h	equ	0xFDA
 18477                           fsr2l	equ	0xFD9
 18478                           status	equ	0xFD8
 18479                           
 18480 ;; *************** function _OpenADC *****************
 18481 ;; Defined at:
 18482 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18483 ;; Parameters:    Size  Location     Type
 18484 ;;  config          1    wreg     unsigned char 
 18485 ;;  config2         1   13[COMRAM] unsigned char 
 18486 ;;  portconfig      1   14[COMRAM] unsigned char 
 18487 ;; Auto vars:     Size  Location     Type
 18488 ;;  config          1   17[COMRAM] unsigned char 
 18489 ;; Return value:  Size  Location     Type
 18490 ;;		None               void
 18491 ;; Registers used:
 18492 ;;		wreg, status,2, status,0
 18493 ;; Tracked objects:
 18494 ;;		On entry : F/1
 18495 ;;		On exit  : F/1
 18496 ;;		Unchanged: F/0
 18497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18498 ;;      Params:         2       0       0       0       0       0       0
 18499 ;;      Locals:         1       0       0       0       0       0       0
 18500 ;;      Temps:          2       0       0       0       0       0       0
 18501 ;;      Totals:         5       0       0       0       0       0       0
 18502 ;;Total ram usage:        5 bytes
 18503 ;; Hardware stack levels used:    1
 18504 ;; Hardware stack levels required when called:    2
 18505 ;; This function calls:
 18506 ;;		Nothing
 18507 ;; This function is called by:
 18508 ;;		_init
 18509 ;; This function uses a non-reentrant model
 18510 ;;
 18511                           
 18512                           	psect	text88
 18513  004F8C                     __ptext88:
 18514                           	opt stack 0
 18515  004F8C                     _OpenADC:
 18516                           	opt stack 27
 18517                           
 18518                           ;incstack = 0
 18519                           ;incstack = 0
 18520                           ;OpenADC@config stored from wreg
 18521  004F8C  CFE8 F012          	movff	wreg,OpenADC@config
 18522                           
 18523                           ; BSR set to: 1
 18524  004F90  6AC2               	clrf	4034,c	;volatile
 18525  004F92  6AC0               	clrf	4032,c	;volatile
 18526                           
 18527                           ; BSR set to: 1
 18528  004F94  90D8               	bcf	status,0,c
 18529  004F96  300E               	rrcf	OpenADC@config2,w,c
 18530  004F98  0B3C               	andlw	60
 18531  004F9A  6EC2               	movwf	4034,c	;volatile
 18532  004F9C  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18533  004FA0  3A10               	swapf	??_OpenADC,f,c
 18534  004FA2  0EF0               	movlw	240
 18535  004FA4  1610               	andwf	??_OpenADC,f,c
 18536  004FA6  0E30               	movlw	48
 18537  004FA8  1610               	andwf	??_OpenADC,f,c
 18538  004FAA  500F               	movf	OpenADC@portconfig,w,c
 18539  004FAC  0B0F               	andlw	15
 18540  004FAE  1010               	iorwf	??_OpenADC,w,c
 18541  004FB0  6EC1               	movwf	4033,c	;volatile
 18542  004FB2  C012  F010         	movff	OpenADC@config,??_OpenADC
 18543  004FB6  90D8               	bcf	status,0,c
 18544  004FB8  3610               	rlcf	??_OpenADC,f,c
 18545  004FBA  90D8               	bcf	status,0,c
 18546  004FBC  3610               	rlcf	??_OpenADC,f,c
 18547  004FBE  0E38               	movlw	56
 18548  004FC0  1610               	andwf	??_OpenADC,f,c
 18549  004FC2  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18550  004FC6  3A11               	swapf	??_OpenADC+1,f,c
 18551  004FC8  0E0F               	movlw	15
 18552  004FCA  1611               	andwf	??_OpenADC+1,f,c
 18553  004FCC  0E07               	movlw	7
 18554  004FCE  1611               	andwf	??_OpenADC+1,f,c
 18555  004FD0  5012               	movf	OpenADC@config,w,c
 18556  004FD2  0B80               	andlw	128
 18557  004FD4  1011               	iorwf	??_OpenADC+1,w,c
 18558  004FD6  1010               	iorwf	??_OpenADC,w,c
 18559  004FD8  6EC0               	movwf	4032,c	;volatile
 18560                           
 18561                           ; BSR set to: 1
 18562  004FDA  AE0E               	btfss	OpenADC@config2,7,c
 18563  004FDC  D003               	goto	l1299
 18564                           
 18565                           ; BSR set to: 1
 18566  004FDE  9C9E               	bcf	3998,6,c	;volatile
 18567  004FE0  8C9D               	bsf	3997,6,c	;volatile
 18568  004FE2  8CF2               	bsf	intcon,6,c	;volatile
 18569  004FE4                     l1299:
 18570                           
 18571                           ; BSR set to: 1
 18572  004FE4  80C2               	bsf	4034,0,c	;volatile
 18573                           
 18574                           ; BSR set to: 1
 18575  004FE6  0012               	return	
 18576  004FE8                     __end_of_OpenADC:
 18577                           	opt stack 0
 18578                           tblptru	equ	0xFF8
 18579                           tblptrh	equ	0xFF7
 18580                           tblptrl	equ	0xFF6
 18581                           tablat	equ	0xFF5
 18582                           prodh	equ	0xFF4
 18583                           prodl	equ	0xFF3
 18584                           intcon	equ	0xFF2
 18585                           postinc0	equ	0xFEE
 18586                           wreg	equ	0xFE8
 18587                           indf1	equ	0xFE7
 18588                           postdec1	equ	0xFE5
 18589                           fsr1h	equ	0xFE2
 18590                           fsr1l	equ	0xFE1
 18591                           indf2	equ	0xFDF
 18592                           postinc2	equ	0xFDE
 18593                           postdec2	equ	0xFDD
 18594                           plusw2	equ	0xFDB
 18595                           fsr2h	equ	0xFDA
 18596                           fsr2l	equ	0xFD9
 18597                           status	equ	0xFD8
 18598                           
 18599 ;; *************** function _OpenTimer0 *****************
 18600 ;; Defined at:
 18601 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18602 ;; Parameters:    Size  Location     Type
 18603 ;;  config          1    wreg     unsigned char 
 18604 ;; Auto vars:     Size  Location     Type
 18605 ;;  config          1   13[COMRAM] unsigned char 
 18606 ;; Return value:  Size  Location     Type
 18607 ;;		None               void
 18608 ;; Registers used:
 18609 ;;		wreg, status,2, status,0
 18610 ;; Tracked objects:
 18611 ;;		On entry : F/1
 18612 ;;		On exit  : F/1
 18613 ;;		Unchanged: F/0
 18614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18615 ;;      Params:         0       0       0       0       0       0       0
 18616 ;;      Locals:         1       0       0       0       0       0       0
 18617 ;;      Temps:          0       0       0       0       0       0       0
 18618 ;;      Totals:         1       0       0       0       0       0       0
 18619 ;;Total ram usage:        1 bytes
 18620 ;; Hardware stack levels used:    1
 18621 ;; Hardware stack levels required when called:    2
 18622 ;; This function calls:
 18623 ;;		Nothing
 18624 ;; This function is called by:
 18625 ;;		_init
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629                           	psect	text89
 18630  0056EE                     __ptext89:
 18631                           	opt stack 0
 18632  0056EE                     _OpenTimer0:
 18633                           	opt stack 27
 18634                           
 18635                           ; BSR set to: 1
 18636                           ;incstack = 0
 18637                           ;incstack = 0
 18638                           ;OpenTimer0@config stored from wreg
 18639  0056EE  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18640                           
 18641                           ; BSR set to: 1
 18642  0056F2  500E               	movf	OpenTimer0@config,w,c
 18643  0056F4  0B7F               	andlw	127
 18644  0056F6  6ED5               	movwf	4053,c	;volatile
 18645                           
 18646                           ; BSR set to: 1
 18647  0056F8  6AD7               	clrf	4055,c	;volatile
 18648                           
 18649                           ; BSR set to: 1
 18650  0056FA  6AD6               	clrf	4054,c	;volatile
 18651                           
 18652                           ; BSR set to: 1
 18653  0056FC  94F2               	bcf	intcon,2,c	;volatile
 18654                           
 18655                           ; BSR set to: 1
 18656  0056FE  AE0E               	btfss	OpenTimer0@config,7,c
 18657  005700  D002               	goto	l1313
 18658                           
 18659                           ; BSR set to: 1
 18660  005702  8AF2               	bsf	intcon,5,c	;volatile
 18661  005704  D001               	goto	l1314
 18662  005706                     l1313:
 18663                           
 18664                           ; BSR set to: 1
 18665  005706  9AF2               	bcf	intcon,5,c	;volatile
 18666  005708                     l1314:
 18667                           
 18668                           ; BSR set to: 1
 18669  005708  8ED5               	bsf	4053,7,c	;volatile
 18670                           
 18671                           ; BSR set to: 1
 18672  00570A  0012               	return	
 18673  00570C                     __end_of_OpenTimer0:
 18674                           	opt stack 0
 18675                           tblptru	equ	0xFF8
 18676                           tblptrh	equ	0xFF7
 18677                           tblptrl	equ	0xFF6
 18678                           tablat	equ	0xFF5
 18679                           prodh	equ	0xFF4
 18680                           prodl	equ	0xFF3
 18681                           intcon	equ	0xFF2
 18682                           postinc0	equ	0xFEE
 18683                           wreg	equ	0xFE8
 18684                           indf1	equ	0xFE7
 18685                           postdec1	equ	0xFE5
 18686                           fsr1h	equ	0xFE2
 18687                           fsr1l	equ	0xFE1
 18688                           indf2	equ	0xFDF
 18689                           postinc2	equ	0xFDE
 18690                           postdec2	equ	0xFDD
 18691                           plusw2	equ	0xFDB
 18692                           fsr2h	equ	0xFDA
 18693                           fsr2l	equ	0xFD9
 18694                           status	equ	0xFD8
 18695                           
 18696 ;; *************** function _init_app_ram *****************
 18697 ;; Defined at:
 18698 ;;		line 981 in file "../main.c"
 18699 ;; Parameters:    Size  Location     Type
 18700 ;;		None
 18701 ;; Auto vars:     Size  Location     Type
 18702 ;;  i               1   32[COMRAM] unsigned char 
 18703 ;; Return value:  Size  Location     Type
 18704 ;;		None               void
 18705 ;; Registers used:
 18706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18707 ;; Tracked objects:
 18708 ;;		On entry : 0/1
 18709 ;;		On exit  : F/1
 18710 ;;		Unchanged: 0/0
 18711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18712 ;;      Params:         0       0       0       0       0       0       0
 18713 ;;      Locals:         1       0       0       0       0       0       0
 18714 ;;      Temps:          0       0       0       0       0       0       0
 18715 ;;      Totals:         1       0       0       0       0       0       0
 18716 ;;Total ram usage:        1 bytes
 18717 ;; Hardware stack levels used:    1
 18718 ;; Hardware stack levels required when called:    4
 18719 ;; This function calls:
 18720 ;;		_writeCoeffs2Ram
 18721 ;; This function is called by:
 18722 ;;		_init
 18723 ;;		_vscp_restoreDefaults
 18724 ;; This function uses a non-reentrant model
 18725 ;;
 18726                           
 18727                           	psect	text90
 18728  005286                     __ptext90:
 18729                           	opt stack 0
 18730  005286                     _init_app_ram:
 18731                           	opt stack 23
 18732                           
 18733                           ;main.c: 982: char i;
 18734                           ;main.c: 984: measurement_clock = 0;
 18735                           
 18736                           ; BSR set to: 1
 18737                           ;incstack = 0
 18738                           ;incstack = 0
 18739  005286  0101               	movlb	1	; () banked
 18740  005288  6B12               	clrf	_measurement_clock& (0+255),b
 18741  00528A  6B13               	clrf	(_measurement_clock+1)& (0+255),b
 18742  00528C  6B14               	clrf	(_measurement_clock+2)& (0+255),b
 18743  00528E  6B15               	clrf	(_measurement_clock+3)& (0+255),b
 18744                           
 18745                           ;main.c: 985: seconds = 0;
 18746  005290  0100               	movlb	0	; () banked
 18747  005292  6BB6               	clrf	_seconds& (0+255),b
 18748                           
 18749                           ;main.c: 988: for (i = 0; i < 6; i++) {
 18750  005294  6A21               	clrf	init_app_ram@i,c
 18751  005296                     l10520:
 18752                           
 18753                           ;main.c: 989: seconds_temp[i] = 0;
 18754  005296  0E0C               	movlw	low _seconds_temp
 18755  005298  2421               	addwf	init_app_ram@i,w,c
 18756  00529A  6ED9               	movwf	fsr2l,c
 18757  00529C  6ADA               	clrf	fsr2h,c
 18758  00529E  0E01               	movlw	high _seconds_temp
 18759  0052A0  22DA               	addwfc	fsr2h,f,c
 18760  0052A2  6ADF               	clrf	indf2,c
 18761                           
 18762                           ; BSR set to: 1
 18763                           ;main.c: 990: current_temp[i] = 0;
 18764  0052A4  5021               	movf	init_app_ram@i,w,c
 18765  0052A6  0D02               	mullw	2
 18766  0052A8  0E00               	movlw	low _current_temp
 18767  0052AA  24F3               	addwf	prodl,w,c
 18768  0052AC  6ED9               	movwf	fsr2l,c
 18769  0052AE  0E01               	movlw	high _current_temp
 18770  0052B0  20F4               	addwfc	prodh,w,c
 18771  0052B2  6EDA               	movwf	fsr2h,c
 18772  0052B4  6ADE               	clrf	postinc2,c
 18773  0052B6  6ADD               	clrf	postdec2,c
 18774                           
 18775                           ; BSR set to: 1
 18776  0052B8  2A21               	incf	init_app_ram@i,f,c
 18777                           
 18778                           ; BSR set to: 1
 18779  0052BA  0E05               	movlw	5
 18780  0052BC  6421               	cpfsgt	init_app_ram@i,c
 18781  0052BE  D7EB               	goto	l10520
 18782                           
 18783                           ; BSR set to: 1
 18784                           ;main.c: 991: }
 18785                           ;main.c: 994: adc_conversion_flags = 0;
 18786  0052C0  0100               	movlb	0	; () banked
 18787  0052C2  6BB3               	clrf	_adc_conversion_flags& (0+255),b
 18788                           
 18789                           ;main.c: 997: adc_series_counter = 0;
 18790  0052C4  6A49               	clrf	_adc_series_counter,c
 18791                           
 18792                           ;main.c: 1000: low_alarm = 0;
 18793  0052C6  6BB5               	clrf	_low_alarm& (0+255),b
 18794                           
 18795                           ;main.c: 1003: high_alarm = 0;
 18796  0052C8  6BB4               	clrf	_high_alarm& (0+255),b
 18797                           
 18798                           ; BSR set to: 0
 18799                           ;main.c: 1006: writeCoeffs2Ram();
 18800  0052CA  EF65  F025         	goto	_writeCoeffs2Ram	;wreg free
 18801  0052CE                     __end_of_init_app_ram:
 18802                           	opt stack 0
 18803                           tblptru	equ	0xFF8
 18804                           tblptrh	equ	0xFF7
 18805                           tblptrl	equ	0xFF6
 18806                           tablat	equ	0xFF5
 18807                           prodh	equ	0xFF4
 18808                           prodl	equ	0xFF3
 18809                           intcon	equ	0xFF2
 18810                           postinc0	equ	0xFEE
 18811                           wreg	equ	0xFE8
 18812                           indf1	equ	0xFE7
 18813                           postdec1	equ	0xFE5
 18814                           fsr1h	equ	0xFE2
 18815                           fsr1l	equ	0xFE1
 18816                           indf2	equ	0xFDF
 18817                           postinc2	equ	0xFDE
 18818                           postdec2	equ	0xFDD
 18819                           plusw2	equ	0xFDB
 18820                           fsr2h	equ	0xFDA
 18821                           fsr2l	equ	0xFD9
 18822                           status	equ	0xFD8
 18823                           
 18824 ;; *************** function _writeCoeffs2Ram *****************
 18825 ;; Defined at:
 18826 ;;		line 963 in file "../main.c"
 18827 ;; Parameters:    Size  Location     Type
 18828 ;;		None
 18829 ;; Auto vars:     Size  Location     Type
 18830 ;;  c               3   25[COMRAM] unsigned char [3]
 18831 ;;  j               2   30[COMRAM] int 
 18832 ;;  i               2   28[COMRAM] int 
 18833 ;; Return value:  Size  Location     Type
 18834 ;;		None               void
 18835 ;; Registers used:
 18836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : F/1
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18842 ;;      Params:         0       0       0       0       0       0       0
 18843 ;;      Locals:         7       0       0       0       0       0       0
 18844 ;;      Temps:          2       0       0       0       0       0       0
 18845 ;;      Totals:         9       0       0       0       0       0       0
 18846 ;;Total ram usage:        9 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; Hardware stack levels required when called:    3
 18849 ;; This function calls:
 18850 ;;		_readEEPROM
 18851 ;;		___wmul
 18852 ;; This function is called by:
 18853 ;;		_init_app_ram
 18854 ;;		_vscp_writeAppReg
 18855 ;; This function uses a non-reentrant model
 18856 ;;
 18857                           
 18858                           	psect	text91
 18859  004ACA                     __ptext91:
 18860                           	opt stack 0
 18861  004ACA                     _writeCoeffs2Ram:
 18862                           	opt stack 23
 18863                           
 18864                           ;main.c: 964: int i, j;
 18865                           ;main.c: 965: uint8_t c[3];
 18866                           ;main.c: 967: for (i = 0; i < 6; i++) {
 18867                           
 18868                           ; BSR set to: 1
 18869                           ;incstack = 0
 18870                           ;incstack = 0
 18871  004ACA  6A1D               	clrf	writeCoeffs2Ram@i,c
 18872  004ACC  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 18873  004ACE                     l10536:
 18874                           
 18875                           ;main.c: 968: for (j = 2; j > 0; j--) {
 18876  004ACE  6A20               	clrf	writeCoeffs2Ram@j+1,c
 18877  004AD0  0E02               	movlw	2
 18878  004AD2  6E1F               	movwf	writeCoeffs2Ram@j,c
 18879  004AD4                     l10542:
 18880                           
 18881                           ;main.c: 970: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 18882  004AD4  501F               	movf	writeCoeffs2Ram@j,w,c
 18883  004AD6  0802               	sublw	2
 18884  004AD8  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 18885  004ADA  5018               	movf	??_writeCoeffs2Ram,w,c
 18886  004ADC  0F1A               	addlw	low writeCoeffs2Ram@c
 18887  004ADE  6ED9               	movwf	fsr2l,c
 18888  004AE0  6ADA               	clrf	fsr2h,c
 18889  004AE2  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 18890  004AE6  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 18891  004AEA  6A15               	clrf	?___wmul+3,c
 18892  004AEC  0E03               	movlw	3
 18893  004AEE  6E14               	movwf	?___wmul+2,c
 18894  004AF0  EC01  F02A         	call	___wmul	;wreg free
 18895  004AF4  501F               	movf	writeCoeffs2Ram@j,w,c
 18896  004AF6  2612               	addwf	?___wmul,f,c
 18897  004AF8  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18898  004AFA  2213               	addwfc	?___wmul+1,f,c
 18899  004AFC  0EAA               	movlw	170
 18900  004AFE  2412               	addwf	?___wmul,w,c
 18901  004B00  6E0E               	movwf	?_readEEPROM,c
 18902  004B02  0E00               	movlw	0
 18903  004B04  2013               	addwfc	?___wmul+1,w,c
 18904  004B06  6E0F               	movwf	?_readEEPROM+1,c
 18905  004B08  EC00  F02C         	call	_readEEPROM	;wreg free
 18906  004B0C  6EDF               	movwf	indf2,c
 18907  004B0E  061F               	decf	writeCoeffs2Ram@j,f,c
 18908  004B10  A0D8               	btfss	status,0,c
 18909  004B12  0620               	decf	writeCoeffs2Ram@j+1,f,c
 18910  004B14  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18911  004B16  0A80               	xorlw	128
 18912  004B18  0F80               	addlw	-128
 18913  004B1A  0E01               	movlw	1
 18914  004B1C  B4D8               	btfsc	status,2,c
 18915  004B1E  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 18916  004B20  E2D9               	bc	l10542
 18917                           
 18918                           ;main.c: 971: }
 18919                           ;main.c: 972: sh_coefficients[i] = *((double*) c);
 18920  004B22  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 18921  004B26  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 18922  004B2A  90D8               	bcf	status,0,c
 18923  004B2C  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18924  004B2E  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18925  004B30  90D8               	bcf	status,0,c
 18926  004B32  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18927  004B34  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18928  004B36  0101               	movlb	1	; () banked
 18929  004B38  0E1E               	movlw	low _sh_coefficients
 18930  004B3A  2418               	addwf	??_writeCoeffs2Ram,w,c
 18931  004B3C  6ED9               	movwf	fsr2l,c
 18932  004B3E  0E01               	movlw	high _sh_coefficients
 18933  004B40  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 18934  004B42  6EDA               	movwf	fsr2h,c
 18935  004B44  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 18936  004B48  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 18937  004B4C  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 18938  004B50  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 18939                           
 18940                           ; BSR set to: 1
 18941  004B54  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 18942  004B56  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 18943                           
 18944                           ; BSR set to: 1
 18945  004B58  501E               	movf	writeCoeffs2Ram@i+1,w,c
 18946  004B5A  0A80               	xorlw	128
 18947  004B5C  0F80               	addlw	-128
 18948  004B5E  0E06               	movlw	6
 18949  004B60  B4D8               	btfsc	status,2,c
 18950  004B62  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 18951  004B64  B0D8               	btfsc	status,0,c
 18952                           
 18953                           ; BSR set to: 1
 18954  004B66  0012               	return	
 18955  004B68  D7B2               	goto	l10536
 18956  004B6A                     __end_of_writeCoeffs2Ram:
 18957                           	opt stack 0
 18958                           tblptru	equ	0xFF8
 18959                           tblptrh	equ	0xFF7
 18960                           tblptrl	equ	0xFF6
 18961                           tablat	equ	0xFF5
 18962                           prodh	equ	0xFF4
 18963                           prodl	equ	0xFF3
 18964                           intcon	equ	0xFF2
 18965                           postinc0	equ	0xFEE
 18966                           wreg	equ	0xFE8
 18967                           indf1	equ	0xFE7
 18968                           postdec1	equ	0xFE5
 18969                           fsr1h	equ	0xFE2
 18970                           fsr1l	equ	0xFE1
 18971                           indf2	equ	0xFDF
 18972                           postinc2	equ	0xFDE
 18973                           postdec2	equ	0xFDD
 18974                           plusw2	equ	0xFDB
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8
 18978                           
 18979 ;; *************** function ___wmul *****************
 18980 ;; Defined at:
 18981 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 18982 ;; Parameters:    Size  Location     Type
 18983 ;;  multiplier      2   17[COMRAM] unsigned int 
 18984 ;;  multiplicand    2   19[COMRAM] unsigned int 
 18985 ;; Auto vars:     Size  Location     Type
 18986 ;;  product         2   21[COMRAM] unsigned int 
 18987 ;; Return value:  Size  Location     Type
 18988 ;;                  2   17[COMRAM] unsigned int 
 18989 ;; Registers used:
 18990 ;;		wreg, status,2, status,0, prodl, prodh
 18991 ;; Tracked objects:
 18992 ;;		On entry : 0/1
 18993 ;;		On exit  : 0/0
 18994 ;;		Unchanged: 0/0
 18995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18996 ;;      Params:         4       0       0       0       0       0       0
 18997 ;;      Locals:         2       0       0       0       0       0       0
 18998 ;;      Temps:          0       0       0       0       0       0       0
 18999 ;;      Totals:         6       0       0       0       0       0       0
 19000 ;;Total ram usage:        6 bytes
 19001 ;; Hardware stack levels used:    1
 19002 ;; Hardware stack levels required when called:    2
 19003 ;; This function calls:
 19004 ;;		Nothing
 19005 ;; This function is called by:
 19006 ;;		_doWork
 19007 ;;		_writeCoeffs2Ram
 19008 ;; This function uses a non-reentrant model
 19009 ;;
 19010                           
 19011                           	psect	text92
 19012  005402                     __ptext92:
 19013                           	opt stack 0
 19014  005402                     ___wmul:
 19015                           	opt stack 27
 19016                           
 19017                           ; BSR set to: 1
 19018                           ;incstack = 0
 19019                           ;incstack = 0
 19020  005402  5012               	movf	___wmul@multiplier,w,c
 19021  005404  0214               	mulwf	___wmul@multiplicand,c
 19022  005406  CFF3 F016          	movff	prodl,___wmul@product
 19023  00540A  CFF4 F017          	movff	prodh,___wmul@product+1
 19024  00540E  5012               	movf	___wmul@multiplier,w,c
 19025  005410  0215               	mulwf	___wmul@multiplicand+1,c
 19026  005412  CFF3 FFF4          	movff	prodl,prodh
 19027  005416  6AF3               	clrf	prodl,c
 19028  005418  50F3               	movf	prodl,w,c
 19029  00541A  2616               	addwf	___wmul@product,f,c
 19030  00541C  50F4               	movf	prodh,w,c
 19031  00541E  2217               	addwfc	___wmul@product+1,f,c
 19032  005420  5013               	movf	___wmul@multiplier+1,w,c
 19033  005422  0214               	mulwf	___wmul@multiplicand,c
 19034  005424  CFF3 FFF4          	movff	prodl,prodh
 19035  005428  6AF3               	clrf	prodl,c
 19036  00542A  50F3               	movf	prodl,w,c
 19037  00542C  2616               	addwf	___wmul@product,f,c
 19038  00542E  50F4               	movf	prodh,w,c
 19039  005430  2217               	addwfc	___wmul@product+1,f,c
 19040  005432  C016  F012         	movff	___wmul@product,?___wmul
 19041  005436  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19042  00543A  0012               	return	
 19043  00543C                     __end_of___wmul:
 19044                           	opt stack 0
 19045                           tblptru	equ	0xFF8
 19046                           tblptrh	equ	0xFF7
 19047                           tblptrl	equ	0xFF6
 19048                           tablat	equ	0xFF5
 19049                           prodh	equ	0xFF4
 19050                           prodl	equ	0xFF3
 19051                           intcon	equ	0xFF2
 19052                           postinc0	equ	0xFEE
 19053                           wreg	equ	0xFE8
 19054                           indf1	equ	0xFE7
 19055                           postdec1	equ	0xFE5
 19056                           fsr1h	equ	0xFE2
 19057                           fsr1l	equ	0xFE1
 19058                           indf2	equ	0xFDF
 19059                           postinc2	equ	0xFDE
 19060                           postdec2	equ	0xFDD
 19061                           plusw2	equ	0xFDB
 19062                           fsr2h	equ	0xFDA
 19063                           fsr2l	equ	0xFD9
 19064                           status	equ	0xFD8
 19065                           
 19066 ;; *************** function _ConvertADC *****************
 19067 ;; Defined at:
 19068 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19069 ;; Parameters:    Size  Location     Type
 19070 ;;		None
 19071 ;; Auto vars:     Size  Location     Type
 19072 ;;		None
 19073 ;; Return value:  Size  Location     Type
 19074 ;;		None               void
 19075 ;; Registers used:
 19076 ;;		None
 19077 ;; Tracked objects:
 19078 ;;		On entry : 1/1
 19079 ;;		On exit  : 1/1
 19080 ;;		Unchanged: 1/0
 19081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19082 ;;      Params:         0       0       0       0       0       0       0
 19083 ;;      Locals:         0       0       0       0       0       0       0
 19084 ;;      Temps:          0       0       0       0       0       0       0
 19085 ;;      Totals:         0       0       0       0       0       0       0
 19086 ;;Total ram usage:        0 bytes
 19087 ;; Hardware stack levels used:    1
 19088 ;; Hardware stack levels required when called:    2
 19089 ;; This function calls:
 19090 ;;		Nothing
 19091 ;; This function is called by:
 19092 ;;		_init
 19093 ;; This function uses a non-reentrant model
 19094 ;;
 19095                           
 19096                           	psect	text93
 19097  0058A0                     __ptext93:
 19098                           	opt stack 0
 19099  0058A0                     _ConvertADC:
 19100                           	opt stack 27
 19101                           
 19102                           ;incstack = 0
 19103                           ;incstack = 0
 19104  0058A0  82C2               	bsf	4034,1,c	;volatile
 19105  0058A2  0012               	return	
 19106  0058A4                     __end_of_ConvertADC:
 19107                           	opt stack 0
 19108                           tblptru	equ	0xFF8
 19109                           tblptrh	equ	0xFF7
 19110                           tblptrl	equ	0xFF6
 19111                           tablat	equ	0xFF5
 19112                           prodh	equ	0xFF4
 19113                           prodl	equ	0xFF3
 19114                           intcon	equ	0xFF2
 19115                           postinc0	equ	0xFEE
 19116                           wreg	equ	0xFE8
 19117                           indf1	equ	0xFE7
 19118                           postdec1	equ	0xFE5
 19119                           fsr1h	equ	0xFE2
 19120                           fsr1l	equ	0xFE1
 19121                           indf2	equ	0xFDF
 19122                           postinc2	equ	0xFDE
 19123                           postdec2	equ	0xFDD
 19124                           plusw2	equ	0xFDB
 19125                           fsr2h	equ	0xFDA
 19126                           fsr2l	equ	0xFD9
 19127                           status	equ	0xFD8
 19128                           
 19129 ;; *************** function _WriteTimer0 *****************
 19130 ;; Defined at:
 19131 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19132 ;; Parameters:    Size  Location     Type
 19133 ;;  timer0          2   13[COMRAM] unsigned int 
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;  timer           2   15[COMRAM] struct Timers
 19136 ;; Return value:  Size  Location     Type
 19137 ;;		None               void
 19138 ;; Registers used:
 19139 ;;		None
 19140 ;; Tracked objects:
 19141 ;;		On entry : F/1
 19142 ;;		On exit  : F/1
 19143 ;;		Unchanged: F/0
 19144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19145 ;;      Params:         2       0       0       0       0       0       0
 19146 ;;      Locals:         2       0       0       0       0       0       0
 19147 ;;      Temps:          0       0       0       0       0       0       0
 19148 ;;      Totals:         4       0       0       0       0       0       0
 19149 ;;Total ram usage:        4 bytes
 19150 ;; Hardware stack levels used:    1
 19151 ;; Hardware stack levels required when called:    2
 19152 ;; This function calls:
 19153 ;;		Nothing
 19154 ;; This function is called by:
 19155 ;;		_init
 19156 ;; This function uses a non-reentrant model
 19157 ;;
 19158                           
 19159                           	psect	text94
 19160  005824                     __ptext94:
 19161                           	opt stack 0
 19162  005824                     _WriteTimer0:
 19163                           	opt stack 27
 19164                           
 19165                           ; BSR set to: 1
 19166                           
 19167                           ;incstack = 0
 19168                           ;incstack = 0
 19169  005824  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19170  005828  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19171  00582C  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19172  005830  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19173                           
 19174                           ; BSR set to: 1
 19175  005834  0012               	return	
 19176  005836                     __end_of_WriteTimer0:
 19177                           	opt stack 0
 19178                           tblptru	equ	0xFF8
 19179                           tblptrh	equ	0xFF7
 19180                           tblptrl	equ	0xFF6
 19181                           tablat	equ	0xFF5
 19182                           prodh	equ	0xFF4
 19183                           prodl	equ	0xFF3
 19184                           intcon	equ	0xFF2
 19185                           postinc0	equ	0xFEE
 19186                           wreg	equ	0xFE8
 19187                           indf1	equ	0xFE7
 19188                           postdec1	equ	0xFE5
 19189                           fsr1h	equ	0xFE2
 19190                           fsr1l	equ	0xFE1
 19191                           indf2	equ	0xFDF
 19192                           postinc2	equ	0xFDE
 19193                           postdec2	equ	0xFDD
 19194                           plusw2	equ	0xFDB
 19195                           fsr2h	equ	0xFDA
 19196                           fsr2l	equ	0xFD9
 19197                           status	equ	0xFD8
 19198                           
 19199 ;; *************** function ___awtofl *****************
 19200 ;; Defined at:
 19201 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19202 ;; Parameters:    Size  Location     Type
 19203 ;;  c               2   23[COMRAM] int 
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;  f1              4    0        int 
 19206 ;;  sign            1   29[COMRAM] unsigned char 
 19207 ;; Return value:  Size  Location     Type
 19208 ;;                  4   23[COMRAM] unsigned char 
 19209 ;; Registers used:
 19210 ;;		wreg, status,2, status,0, cstack
 19211 ;; Tracked objects:
 19212 ;;		On entry : F/0
 19213 ;;		On exit  : 0/0
 19214 ;;		Unchanged: 0/0
 19215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19216 ;;      Params:         4       0       0       0       0       0       0
 19217 ;;      Locals:         3       0       0       0       0       0       0
 19218 ;;      Temps:          0       0       0       0       0       0       0
 19219 ;;      Totals:         7       0       0       0       0       0       0
 19220 ;;Total ram usage:        7 bytes
 19221 ;; Hardware stack levels used:    1
 19222 ;; Hardware stack levels required when called:    3
 19223 ;; This function calls:
 19224 ;;		___flpack
 19225 ;; This function is called by:
 19226 ;;		_setEventData
 19227 ;;		_exp
 19228 ;;		_log
 19229 ;; This function uses a non-reentrant model
 19230 ;;
 19231                           
 19232                           	psect	text95
 19233  00543C                     __ptext95:
 19234                           	opt stack 0
 19235  00543C                     ___awtofl:
 19236                           	opt stack 25
 19237                           
 19238                           ; BSR set to: 0
 19239                           
 19240                           ; BSR set to: 1
 19241                           ;incstack = 0
 19242                           ;incstack = 0
 19243  00543C  6A1E               	clrf	___awtofl@sign,c
 19244  00543E  AE19               	btfss	___awtofl@c+1,7,c
 19245  005440  D005               	goto	l11686
 19246                           
 19247                           ; BSR set to: 0
 19248  005442  6C18               	negf	___awtofl@c,c
 19249  005444  1E19               	comf	___awtofl@c+1,f,c
 19250  005446  B0D8               	btfsc	status,0,c
 19251  005448  2A19               	incf	___awtofl@c+1,f,c
 19252  00544A  2A1E               	incf	___awtofl@sign,f,c
 19253  00544C                     l11686:
 19254                           
 19255                           ; BSR set to: 0
 19256  00544C  C018  F00E         	movff	___awtofl@c,?___flpack
 19257  005450  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19258  005454  6A10               	clrf	?___flpack+2,c
 19259  005456  6A11               	clrf	?___flpack+3,c
 19260  005458  0E96               	movlw	150
 19261  00545A  6E12               	movwf	?___flpack+4,c
 19262  00545C  C01E  F013         	movff	___awtofl@sign,?___flpack+5
 19263  005460  EC50  F023         	call	___flpack	;wreg free
 19264  005464  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19265  005468  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19266  00546C  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19267  005470  C00E  F018         	movff	?___flpack,?___awtofl
 19268  005474  0012               	return	
 19269  005476                     __end_of___awtofl:
 19270                           	opt stack 0
 19271                           tblptru	equ	0xFF8
 19272                           tblptrh	equ	0xFF7
 19273                           tblptrl	equ	0xFF6
 19274                           tablat	equ	0xFF5
 19275                           prodh	equ	0xFF4
 19276                           prodl	equ	0xFF3
 19277                           intcon	equ	0xFF2
 19278                           postinc0	equ	0xFEE
 19279                           wreg	equ	0xFE8
 19280                           indf1	equ	0xFE7
 19281                           postdec1	equ	0xFE5
 19282                           fsr1h	equ	0xFE2
 19283                           fsr1l	equ	0xFE1
 19284                           indf2	equ	0xFDF
 19285                           postinc2	equ	0xFDE
 19286                           postdec2	equ	0xFDD
 19287                           plusw2	equ	0xFDB
 19288                           fsr2h	equ	0xFDA
 19289                           fsr2l	equ	0xFD9
 19290                           status	equ	0xFD8
 19291                           
 19292 ;; *************** function ___flmul *****************
 19293 ;; Defined at:
 19294 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19295 ;; Parameters:    Size  Location     Type
 19296 ;;  f1              4    0[BANK0 ] unsigned char 
 19297 ;;  f2              4    4[BANK0 ] unsigned char 
 19298 ;; Auto vars:     Size  Location     Type
 19299 ;;  f3_as_produc    4   16[BANK0 ] unsigned long 
 19300 ;;  sign            1   21[BANK0 ] unsigned char 
 19301 ;;  cntr            1   20[BANK0 ] unsigned char 
 19302 ;;  exp             1   15[BANK0 ] unsigned char 
 19303 ;; Return value:  Size  Location     Type
 19304 ;;                  4    0[BANK0 ] unsigned char 
 19305 ;; Registers used:
 19306 ;;		wreg, status,2, status,0, cstack
 19307 ;; Tracked objects:
 19308 ;;		On entry : 0/0
 19309 ;;		On exit  : 0/0
 19310 ;;		Unchanged: 0/0
 19311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19312 ;;      Params:         0       8       0       0       0       0       0
 19313 ;;      Locals:         0      14       0       0       0       0       0
 19314 ;;      Temps:          0       0       0       0       0       0       0
 19315 ;;      Totals:         0      22       0       0       0       0       0
 19316 ;;Total ram usage:       22 bytes
 19317 ;; Hardware stack levels used:    1
 19318 ;; Hardware stack levels required when called:    3
 19319 ;; This function calls:
 19320 ;;		___flpack
 19321 ;; This function is called by:
 19322 ;;		_doWork
 19323 ;;		_Celsius2Fahrenheit
 19324 ;;		___asflmul
 19325 ;;		_log
 19326 ;;		_eval_poly
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           	psect	text96
 19331  004446                     __ptext96:
 19332                           	opt stack 0
 19333  004446                     ___flmul:
 19334                           	opt stack 26
 19335                           
 19336                           ;incstack = 0
 19337                           ;incstack = 0
 19338  004446  0100               	movlb	0	; () banked
 19339  004448  3562               	rlcf	(___flmul@f1+2)& (0+255),w,b
 19340  00444A  3563               	rlcf	(___flmul@f1+3)& (0+255),w,b
 19341  00444C  6F6F               	movwf	___flmul@exp& (0+255),b
 19342  00444E  676F               	tstfsz	___flmul@exp& (0+255),b
 19343  004450  D001               	goto	l11630
 19344  004452  D006               	goto	u10130
 19345  004454                     l11630:
 19346                           
 19347                           ; BSR set to: 0
 19348  004454  0100               	movlb	0	; () banked
 19349  004456  3566               	rlcf	(___flmul@f2+2)& (0+255),w,b
 19350  004458  3567               	rlcf	(___flmul@f2+3)& (0+255),w,b
 19351  00445A  6F75               	movwf	___flmul@sign& (0+255),b
 19352  00445C  6775               	tstfsz	___flmul@sign& (0+255),b
 19353  00445E  D005               	goto	l11634
 19354  004460                     u10130:
 19355                           
 19356                           ; BSR set to: 0
 19357  004460  6B60               	clrf	?___flmul& (0+255),b
 19358  004462  6B61               	clrf	(?___flmul+1)& (0+255),b
 19359  004464  6B62               	clrf	(?___flmul+2)& (0+255),b
 19360  004466  6B63               	clrf	(?___flmul+3)& (0+255),b
 19361  004468  D058               	goto	l1618
 19362  00446A                     l11634:
 19363                           
 19364                           ; BSR set to: 0
 19365  00446A  5175               	movf	___flmul@sign& (0+255),w,b
 19366  00446C  0F7B               	addlw	123
 19367  00446E  276F               	addwf	___flmul@exp& (0+255),f,b
 19368                           
 19369                           ; BSR set to: 0
 19370  004470  C063  F075         	movff	___flmul@f1+3,___flmul@sign
 19371  004474  0100               	movlb	0	; () banked
 19372  004476  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19373  004478  1B75               	xorwf	___flmul@sign& (0+255),f,b
 19374  00447A  0E80               	movlw	128
 19375  00447C  1775               	andwf	___flmul@sign& (0+255),f,b
 19376                           
 19377                           ; BSR set to: 0
 19378  00447E  8F62               	bsf	(___flmul@f1+2)& (0+255),7,b
 19379                           
 19380                           ; BSR set to: 0
 19381  004480  8F66               	bsf	(___flmul@f2+2)& (0+255),7,b
 19382  004482  0E00               	movlw	0
 19383  004484  1767               	andwf	(___flmul@f2+3)& (0+255),f,b
 19384                           
 19385                           ; BSR set to: 0
 19386  004486  6B70               	clrf	___flmul@f3_as_product& (0+255),b
 19387  004488  6B71               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 19388  00448A  6B72               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 19389  00448C  6B73               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 19390                           
 19391                           ; BSR set to: 0
 19392  00448E  0E07               	movlw	7
 19393  004490  6F74               	movwf	___flmul@cntr& (0+255),b
 19394  004492                     l11646:
 19395                           
 19396                           ; BSR set to: 0
 19397  004492  A160               	btfss	___flmul@f1& (0+255),0,b
 19398  004494  D008               	goto	l11650
 19399                           
 19400                           ; BSR set to: 0
 19401  004496  5164               	movf	___flmul@f2& (0+255),w,b
 19402  004498  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19403  00449A  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19404  00449C  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19405  00449E  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19406  0044A0  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19407  0044A2  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19408  0044A4  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19409  0044A6                     l11650:
 19410                           
 19411                           ; BSR set to: 0
 19412  0044A6  90D8               	bcf	status,0,c
 19413  0044A8  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19414  0044AA  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19415  0044AC  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19416  0044AE  3360               	rrcf	___flmul@f1& (0+255),f,b
 19417                           
 19418                           ; BSR set to: 0
 19419  0044B0  90D8               	bcf	status,0,c
 19420  0044B2  3764               	rlcf	___flmul@f2& (0+255),f,b
 19421  0044B4  3765               	rlcf	(___flmul@f2+1)& (0+255),f,b
 19422  0044B6  3766               	rlcf	(___flmul@f2+2)& (0+255),f,b
 19423  0044B8  3767               	rlcf	(___flmul@f2+3)& (0+255),f,b
 19424                           
 19425                           ; BSR set to: 0
 19426  0044BA  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19427  0044BC  D7EA               	goto	l11646
 19428                           
 19429                           ; BSR set to: 0
 19430  0044BE  0E11               	movlw	17
 19431  0044C0  6F74               	movwf	___flmul@cntr& (0+255),b
 19432  0044C2                     l11658:
 19433                           
 19434                           ; BSR set to: 0
 19435  0044C2  A160               	btfss	___flmul@f1& (0+255),0,b
 19436  0044C4  D008               	goto	l11662
 19437                           
 19438                           ; BSR set to: 0
 19439  0044C6  5164               	movf	___flmul@f2& (0+255),w,b
 19440  0044C8  2770               	addwf	___flmul@f3_as_product& (0+255),f,b
 19441  0044CA  5165               	movf	(___flmul@f2+1)& (0+255),w,b
 19442  0044CC  2371               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 19443  0044CE  5166               	movf	(___flmul@f2+2)& (0+255),w,b
 19444  0044D0  2372               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 19445  0044D2  5167               	movf	(___flmul@f2+3)& (0+255),w,b
 19446  0044D4  2373               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 19447  0044D6                     l11662:
 19448                           
 19449                           ; BSR set to: 0
 19450  0044D6  90D8               	bcf	status,0,c
 19451  0044D8  3363               	rrcf	(___flmul@f1+3)& (0+255),f,b
 19452  0044DA  3362               	rrcf	(___flmul@f1+2)& (0+255),f,b
 19453  0044DC  3361               	rrcf	(___flmul@f1+1)& (0+255),f,b
 19454  0044DE  3360               	rrcf	___flmul@f1& (0+255),f,b
 19455                           
 19456                           ; BSR set to: 0
 19457  0044E0  90D8               	bcf	status,0,c
 19458  0044E2  3373               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 19459  0044E4  3372               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 19460  0044E6  3371               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 19461  0044E8  3370               	rrcf	___flmul@f3_as_product& (0+255),f,b
 19462                           
 19463                           ; BSR set to: 0
 19464  0044EA  2F74               	decfsz	___flmul@cntr& (0+255),f,b
 19465  0044EC  D7EA               	goto	l11658
 19466                           
 19467                           ; BSR set to: 0
 19468  0044EE  C070  F00E         	movff	___flmul@f3_as_product,?___flpack
 19469  0044F2  C071  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19470  0044F6  C072  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19471  0044FA  C073  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19472  0044FE  C06F  F012         	movff	___flmul@exp,?___flpack+4
 19473  004502  C075  F013         	movff	___flmul@sign,?___flpack+5
 19474  004506  EC50  F023         	call	___flpack	;wreg free
 19475  00450A  C011  F063         	movff	?___flpack+3,?___flmul+3
 19476  00450E  C010  F062         	movff	?___flpack+2,?___flmul+2
 19477  004512  C00F  F061         	movff	?___flpack+1,?___flmul+1
 19478  004516  C00E  F060         	movff	?___flpack,?___flmul
 19479  00451A                     l1618:
 19480  00451A  0012               	return	
 19481  00451C                     __end_of___flmul:
 19482                           	opt stack 0
 19483                           tblptru	equ	0xFF8
 19484                           tblptrh	equ	0xFF7
 19485                           tblptrl	equ	0xFF6
 19486                           tablat	equ	0xFF5
 19487                           prodh	equ	0xFF4
 19488                           prodl	equ	0xFF3
 19489                           intcon	equ	0xFF2
 19490                           postinc0	equ	0xFEE
 19491                           wreg	equ	0xFE8
 19492                           indf1	equ	0xFE7
 19493                           postdec1	equ	0xFE5
 19494                           fsr1h	equ	0xFE2
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           plusw2	equ	0xFDB
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function ___flpack *****************
 19505 ;; Defined at:
 19506 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;  arg             4   13[COMRAM] unsigned long 
 19509 ;;  exp             1   17[COMRAM] unsigned char 
 19510 ;;  sign            1   18[COMRAM] unsigned char 
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;		None
 19513 ;; Return value:  Size  Location     Type
 19514 ;;                  4   13[COMRAM] unsigned char 
 19515 ;; Registers used:
 19516 ;;		wreg, status,2, status,0
 19517 ;; Tracked objects:
 19518 ;;		On entry : 0/0
 19519 ;;		On exit  : 0/0
 19520 ;;		Unchanged: 0/0
 19521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19522 ;;      Params:         6       0       0       0       0       0       0
 19523 ;;      Locals:         0       0       0       0       0       0       0
 19524 ;;      Temps:          4       0       0       0       0       0       0
 19525 ;;      Totals:        10       0       0       0       0       0       0
 19526 ;;Total ram usage:       10 bytes
 19527 ;; Hardware stack levels used:    1
 19528 ;; Hardware stack levels required when called:    2
 19529 ;; This function calls:
 19530 ;;		Nothing
 19531 ;; This function is called by:
 19532 ;;		___altofl
 19533 ;;		___awtofl
 19534 ;;		___fladd
 19535 ;;		___fldiv
 19536 ;;		___flmul
 19537 ;;		___lwtofl
 19538 ;; This function uses a non-reentrant model
 19539 ;;
 19540                           
 19541                           	psect	text97
 19542  0046A0                     __ptext97:
 19543                           	opt stack 0
 19544  0046A0                     ___flpack:
 19545                           	opt stack 26
 19546                           
 19547                           ;incstack = 0
 19548                           ;incstack = 0
 19549  0046A0  5012               	movf	___flpack@exp,w,c
 19550  0046A2  E005               	bz	l1533
 19551  0046A4  5011               	movf	___flpack@arg+3,w,c
 19552  0046A6  100E               	iorwf	___flpack@arg,w,c
 19553  0046A8  100F               	iorwf	___flpack@arg+1,w,c
 19554  0046AA  1010               	iorwf	___flpack@arg+2,w,c
 19555  0046AC  E10B               	bnz	l11436
 19556  0046AE                     l1533:
 19557  0046AE  6A0E               	clrf	?___flpack,c
 19558  0046B0  6A0F               	clrf	?___flpack+1,c
 19559  0046B2  6A10               	clrf	?___flpack+2,c
 19560  0046B4  6A11               	clrf	?___flpack+3,c
 19561  0046B6  D053               	goto	l1534
 19562  0046B8                     l11434:
 19563  0046B8  2A12               	incf	___flpack@exp,f,c
 19564  0046BA  90D8               	bcf	status,0,c
 19565  0046BC  3211               	rrcf	___flpack@arg+3,f,c
 19566  0046BE  3210               	rrcf	___flpack@arg+2,f,c
 19567  0046C0  320F               	rrcf	___flpack@arg+1,f,c
 19568  0046C2  320E               	rrcf	___flpack@arg,f,c
 19569  0046C4                     l11436:
 19570  0046C4  6A14               	clrf	??___flpack& (0+255),c
 19571  0046C6  6A15               	clrf	(??___flpack+1)& (0+255),c
 19572  0046C8  6A16               	clrf	(??___flpack+2)& (0+255),c
 19573  0046CA  0EFE               	movlw	254
 19574  0046CC  1411               	andwf	___flpack@arg+3,w,c
 19575  0046CE  6E17               	movwf	(??___flpack+3)& (0+255),c
 19576  0046D0  5017               	movf	??___flpack+3,w,c
 19577  0046D2  1014               	iorwf	??___flpack,w,c
 19578  0046D4  1015               	iorwf	??___flpack+1,w,c
 19579  0046D6  1016               	iorwf	??___flpack+2,w,c
 19580  0046D8  E00C               	bz	l1538
 19581  0046DA  D7EE               	goto	l11434
 19582  0046DC                     l11438:
 19583  0046DC  2A12               	incf	___flpack@exp,f,c
 19584  0046DE  2A0E               	incf	___flpack@arg,f,c
 19585  0046E0  0E00               	movlw	0
 19586  0046E2  220F               	addwfc	___flpack@arg+1,f,c
 19587  0046E4  2210               	addwfc	___flpack@arg+2,f,c
 19588  0046E6  2211               	addwfc	___flpack@arg+3,f,c
 19589  0046E8  90D8               	bcf	status,0,c
 19590  0046EA  3211               	rrcf	___flpack@arg+3,f,c
 19591  0046EC  3210               	rrcf	___flpack@arg+2,f,c
 19592  0046EE  320F               	rrcf	___flpack@arg+1,f,c
 19593  0046F0  320E               	rrcf	___flpack@arg,f,c
 19594  0046F2                     l1538:
 19595  0046F2  6A14               	clrf	??___flpack& (0+255),c
 19596  0046F4  6A15               	clrf	(??___flpack+1)& (0+255),c
 19597  0046F6  6A16               	clrf	(??___flpack+2)& (0+255),c
 19598  0046F8  5011               	movf	___flpack@arg+3,w,c
 19599  0046FA  6E17               	movwf	(??___flpack+3)& (0+255),c
 19600  0046FC  5017               	movf	??___flpack+3,w,c
 19601  0046FE  1014               	iorwf	??___flpack,w,c
 19602  004700  1015               	iorwf	??___flpack+1,w,c
 19603  004702  1016               	iorwf	??___flpack+2,w,c
 19604  004704  E007               	bz	l11446
 19605  004706  D7EA               	goto	l11438
 19606  004708                     l11444:
 19607  004708  0612               	decf	___flpack@exp,f,c
 19608  00470A  90D8               	bcf	status,0,c
 19609  00470C  360E               	rlcf	___flpack@arg,f,c
 19610  00470E  360F               	rlcf	___flpack@arg+1,f,c
 19611  004710  3610               	rlcf	___flpack@arg+2,f,c
 19612  004712  3611               	rlcf	___flpack@arg+3,f,c
 19613  004714                     l11446:
 19614  004714  AE10               	btfss	___flpack@arg+2,7,c
 19615  004716  D7F8               	goto	l11444
 19616  004718  B012               	btfsc	___flpack@exp,0,c
 19617  00471A  D002               	goto	l1544
 19618  00471C  0E7F               	movlw	127
 19619  00471E  1610               	andwf	___flpack@arg+2,f,c
 19620  004720                     l1544:
 19621  004720  90D8               	bcf	status,0,c
 19622  004722  3212               	rrcf	___flpack@exp,f,c
 19623  004724  C012  F014         	movff	___flpack@exp,??___flpack
 19624  004728  6A15               	clrf	(??___flpack+1)& (0+255),c
 19625  00472A  6A16               	clrf	(??___flpack+2)& (0+255),c
 19626  00472C  6A17               	clrf	(??___flpack+3)& (0+255),c
 19627  00472E  C014  F017         	movff	??___flpack,??___flpack+3
 19628  004732  6A16               	clrf	??___flpack+2,c
 19629  004734  6A15               	clrf	??___flpack+1,c
 19630  004736  6A14               	clrf	??___flpack,c
 19631  004738  5014               	movf	??___flpack,w,c
 19632  00473A  120E               	iorwf	___flpack@arg,f,c
 19633  00473C  5015               	movf	??___flpack+1,w,c
 19634  00473E  120F               	iorwf	___flpack@arg+1,f,c
 19635  004740  5016               	movf	??___flpack+2,w,c
 19636  004742  1210               	iorwf	___flpack@arg+2,f,c
 19637  004744  5017               	movf	??___flpack+3,w,c
 19638  004746  1211               	iorwf	___flpack@arg+3,f,c
 19639  004748  5013               	movf	___flpack@sign,w,c
 19640  00474A  A4D8               	btfss	status,2,c
 19641  00474C  8E11               	bsf	___flpack@arg+3,7,c
 19642  00474E  C00E  F00E         	movff	___flpack@arg,?___flpack
 19643  004752  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19644  004756  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19645  00475A  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19646  00475E                     l1534:
 19647  00475E  0012               	return	
 19648  004760                     __end_of___flpack:
 19649                           	opt stack 0
 19650                           tblptru	equ	0xFF8
 19651                           tblptrh	equ	0xFF7
 19652                           tblptrl	equ	0xFF6
 19653                           tablat	equ	0xFF5
 19654                           prodh	equ	0xFF4
 19655                           prodl	equ	0xFF3
 19656                           intcon	equ	0xFF2
 19657                           postinc0	equ	0xFEE
 19658                           wreg	equ	0xFE8
 19659                           indf1	equ	0xFE7
 19660                           postdec1	equ	0xFE5
 19661                           fsr1h	equ	0xFE2
 19662                           fsr1l	equ	0xFE1
 19663                           indf2	equ	0xFDF
 19664                           postinc2	equ	0xFDE
 19665                           postdec2	equ	0xFDD
 19666                           plusw2	equ	0xFDB
 19667                           fsr2h	equ	0xFDA
 19668                           fsr2l	equ	0xFD9
 19669                           status	equ	0xFD8
 19670                           
 19671 ;; *************** function _vscp_readAppReg *****************
 19672 ;; Defined at:
 19673 ;;		line 1270 in file "../main.c"
 19674 ;; Parameters:    Size  Location     Type
 19675 ;;  reg             1    wreg     unsigned char 
 19676 ;; Auto vars:     Size  Location     Type
 19677 ;;  reg             1   18[COMRAM] unsigned char 
 19678 ;;  pos             1   17[COMRAM] unsigned char 
 19679 ;;  rv              1   19[COMRAM] unsigned char 
 19680 ;; Return value:  Size  Location     Type
 19681 ;;                  1    wreg      unsigned char 
 19682 ;; Registers used:
 19683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19684 ;; Tracked objects:
 19685 ;;		On entry : F/0
 19686 ;;		On exit  : 0/0
 19687 ;;		Unchanged: 0/0
 19688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19689 ;;      Params:         0       0       0       0       0       0       0
 19690 ;;      Locals:         3       0       0       0       0       0       0
 19691 ;;      Temps:          0       0       0       0       0       0       0
 19692 ;;      Totals:         3       0       0       0       0       0       0
 19693 ;;Total ram usage:        3 bytes
 19694 ;; Hardware stack levels used:    1
 19695 ;; Hardware stack levels required when called:    3
 19696 ;; This function calls:
 19697 ;;		_readEEPROM
 19698 ;; This function is called by:
 19699 ;;		_vscp_readRegister
 19700 ;;		_vscp_handleProtocolEvent
 19701 ;; This function uses a non-reentrant model
 19702 ;;
 19703                           
 19704                           	psect	text98
 19705  00259A                     __ptext98:
 19706                           	opt stack 0
 19707  00259A                     _vscp_readAppReg:
 19708                           	opt stack 25
 19709                           
 19710                           ;incstack = 0
 19711                           ;incstack = 0
 19712                           ;vscp_readAppReg@reg stored from wreg
 19713  00259A  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19714                           
 19715                           ; BSR set to: 0
 19716                           ;main.c: 1271: uint8_t rv;
 19717                           ;main.c: 1276: if (0 == vscp_page_select) {
 19718  00259E  5047               	movf	_vscp_page_select+1,w,c
 19719  0025A0  1046               	iorwf	_vscp_page_select,w,c
 19720  0025A2  E101 D219          	bz	l10760
 19721  0025A6  D35D               	goto	l10762
 19722  0025A8                     l10558:
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;main.c: 1282: rv = readEEPROM(0x41);
 19726  0025A8  6A0F               	clrf	?_readEEPROM+1,c
 19727  0025AA  0E41               	movlw	65
 19728  0025AC  6E0E               	movwf	?_readEEPROM,c
 19729  0025AE  EC00  F02C         	call	_readEEPROM	;wreg free
 19730  0025B2  D384               	goto	L41
 19731  0025B4                     l10560:
 19732                           
 19733                           ; BSR set to: 0
 19734                           ;main.c: 1287: rv = readEEPROM(0x42);
 19735  0025B4  6A0F               	clrf	?_readEEPROM+1,c
 19736  0025B6  0E42               	movlw	66
 19737  0025B8  6E0E               	movwf	?_readEEPROM,c
 19738  0025BA  EC00  F02C         	call	_readEEPROM	;wreg free
 19739  0025BE  D37E               	goto	L41
 19740  0025C0                     l10562:
 19741                           
 19742                           ; BSR set to: 0
 19743                           ;main.c: 1292: rv = readEEPROM(0x43);
 19744  0025C0  6A0F               	clrf	?_readEEPROM+1,c
 19745  0025C2  0E43               	movlw	67
 19746  0025C4  6E0E               	movwf	?_readEEPROM,c
 19747  0025C6  EC00  F02C         	call	_readEEPROM	;wreg free
 19748  0025CA  D378               	goto	L41
 19749  0025CC                     l10564:
 19750                           
 19751                           ; BSR set to: 0
 19752                           ;main.c: 1297: rv = readEEPROM(0x44);
 19753  0025CC  6A0F               	clrf	?_readEEPROM+1,c
 19754  0025CE  0E44               	movlw	68
 19755  0025D0  6E0E               	movwf	?_readEEPROM,c
 19756  0025D2  EC00  F02C         	call	_readEEPROM	;wreg free
 19757  0025D6  D372               	goto	L41
 19758  0025D8                     l10566:
 19759                           
 19760                           ; BSR set to: 0
 19761                           ;main.c: 1302: rv = readEEPROM(0x45);
 19762  0025D8  6A0F               	clrf	?_readEEPROM+1,c
 19763  0025DA  0E45               	movlw	69
 19764  0025DC  6E0E               	movwf	?_readEEPROM,c
 19765  0025DE  EC00  F02C         	call	_readEEPROM	;wreg free
 19766  0025E2  D36C               	goto	L41
 19767  0025E4                     l10568:
 19768                           
 19769                           ; BSR set to: 0
 19770                           ;main.c: 1307: rv = readEEPROM(0x46);
 19771  0025E4  6A0F               	clrf	?_readEEPROM+1,c
 19772  0025E6  0E46               	movlw	70
 19773  0025E8  6E0E               	movwf	?_readEEPROM,c
 19774  0025EA  EC00  F02C         	call	_readEEPROM	;wreg free
 19775  0025EE  D366               	goto	L41
 19776  0025F0                     l10570:
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;main.c: 1312: rv = readEEPROM(0x47);
 19780  0025F0  6A0F               	clrf	?_readEEPROM+1,c
 19781  0025F2  0E47               	movlw	71
 19782  0025F4  6E0E               	movwf	?_readEEPROM,c
 19783  0025F6  EC00  F02C         	call	_readEEPROM	;wreg free
 19784  0025FA  D360               	goto	L41
 19785  0025FC                     l10572:
 19786                           
 19787                           ; BSR set to: 0
 19788                           ;main.c: 1317: rv = readEEPROM(0x48);
 19789  0025FC  6A0F               	clrf	?_readEEPROM+1,c
 19790  0025FE  0E48               	movlw	72
 19791  002600  6E0E               	movwf	?_readEEPROM,c
 19792  002602  EC00  F02C         	call	_readEEPROM	;wreg free
 19793  002606  D35A               	goto	L41
 19794  002608                     l10574:
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;main.c: 1322: rv = ((current_temp[0] & 0xff00) >> 8);
 19798  002608  0101               	movlb	1	; () banked
 19799  00260A  5101               	movf	(_current_temp+1)& (0+255),w,b
 19800  00260C  D357               	goto	L41
 19801  00260E                     l313:
 19802                           
 19803                           ; BSR set to: 0
 19804                           ;main.c: 1327: rv = (current_temp[0] & 0x00ff);
 19805  00260E  C100  F014         	movff	_current_temp,vscp_readAppReg@rv
 19806                           
 19807                           ;main.c: 1328: break;
 19808  002612  D355               	goto	l10784
 19809  002614                     l10576:
 19810                           
 19811                           ; BSR set to: 0
 19812                           ;main.c: 1332: rv = ((current_temp[1] & 0xff00) >> 8);
 19813  002614  0101               	movlb	1	; () banked
 19814  002616  5103               	movf	(_current_temp+3)& (0+255),w,b
 19815  002618  D351               	goto	L41
 19816  00261A                     l315:
 19817                           
 19818                           ; BSR set to: 0
 19819                           ;main.c: 1337: rv = (current_temp[1] & 0x00ff);
 19820  00261A  C102  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19821                           
 19822                           ;main.c: 1338: break;
 19823  00261E  D34F               	goto	l10784
 19824  002620                     l10578:
 19825                           
 19826                           ; BSR set to: 0
 19827                           ;main.c: 1342: rv = ((current_temp[2] & 0xff00) >> 8);
 19828  002620  0101               	movlb	1	; () banked
 19829  002622  5105               	movf	(_current_temp+5)& (0+255),w,b
 19830  002624  D34B               	goto	L41
 19831  002626                     l317:
 19832                           
 19833                           ; BSR set to: 0
 19834                           ;main.c: 1347: rv = (current_temp[2] & 0x00ff);
 19835  002626  C104  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19836                           
 19837                           ;main.c: 1348: break;
 19838  00262A  D349               	goto	l10784
 19839  00262C                     l10580:
 19840                           
 19841                           ; BSR set to: 0
 19842                           ;main.c: 1352: rv = ((current_temp[3] & 0xff00) >> 8);
 19843  00262C  0101               	movlb	1	; () banked
 19844  00262E  5107               	movf	(_current_temp+7)& (0+255),w,b
 19845  002630  D345               	goto	L41
 19846  002632                     l319:
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;main.c: 1357: rv = (current_temp[3] & 0x00ff);
 19850  002632  C106  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 19851                           
 19852                           ;main.c: 1358: break;
 19853  002636  D343               	goto	l10784
 19854  002638                     l10582:
 19855                           
 19856                           ; BSR set to: 0
 19857                           ;main.c: 1362: rv = ((current_temp[4] & 0xff00) >> 8);
 19858  002638  0101               	movlb	1	; () banked
 19859  00263A  5109               	movf	(_current_temp+9)& (0+255),w,b
 19860  00263C  D33F               	goto	L41
 19861  00263E                     l321:
 19862                           
 19863                           ; BSR set to: 0
 19864                           ;main.c: 1367: rv = (current_temp[4] & 0x00ff);
 19865  00263E  C108  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 19866                           
 19867                           ;main.c: 1368: break;
 19868  002642  D33D               	goto	l10784
 19869  002644                     l10586:
 19870                           
 19871                           ; BSR set to: 0
 19872                           ;main.c: 1382: rv = readEEPROM(0x49);
 19873  002644  6A0F               	clrf	?_readEEPROM+1,c
 19874  002646  0E49               	movlw	73
 19875  002648  6E0E               	movwf	?_readEEPROM,c
 19876  00264A  EC00  F02C         	call	_readEEPROM	;wreg free
 19877  00264E  D336               	goto	L41
 19878  002650                     l10588:
 19879                           
 19880                           ; BSR set to: 0
 19881                           ;main.c: 1387: rv = readEEPROM(0x4A);
 19882  002650  6A0F               	clrf	?_readEEPROM+1,c
 19883  002652  0E4A               	movlw	74
 19884  002654  6E0E               	movwf	?_readEEPROM,c
 19885  002656  EC00  F02C         	call	_readEEPROM	;wreg free
 19886  00265A  D330               	goto	L41
 19887  00265C                     l10590:
 19888                           
 19889                           ; BSR set to: 0
 19890                           ;main.c: 1392: rv = readEEPROM(0x4B);
 19891  00265C  6A0F               	clrf	?_readEEPROM+1,c
 19892  00265E  0E4B               	movlw	75
 19893  002660  6E0E               	movwf	?_readEEPROM,c
 19894  002662  EC00  F02C         	call	_readEEPROM	;wreg free
 19895  002666  D32A               	goto	L41
 19896  002668                     l10592:
 19897                           
 19898                           ; BSR set to: 0
 19899                           ;main.c: 1397: rv = readEEPROM(0x4C);
 19900  002668  6A0F               	clrf	?_readEEPROM+1,c
 19901  00266A  0E4C               	movlw	76
 19902  00266C  6E0E               	movwf	?_readEEPROM,c
 19903  00266E  EC00  F02C         	call	_readEEPROM	;wreg free
 19904  002672  D324               	goto	L41
 19905  002674                     l10594:
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;main.c: 1402: rv = readEEPROM(0x4D);
 19909  002674  6A0F               	clrf	?_readEEPROM+1,c
 19910  002676  0E4D               	movlw	77
 19911  002678  6E0E               	movwf	?_readEEPROM,c
 19912  00267A  EC00  F02C         	call	_readEEPROM	;wreg free
 19913  00267E  D31E               	goto	L41
 19914  002680                     l10596:
 19915                           
 19916                           ; BSR set to: 0
 19917                           ;main.c: 1407: rv = readEEPROM(0x4E);
 19918  002680  6A0F               	clrf	?_readEEPROM+1,c
 19919  002682  0E4E               	movlw	78
 19920  002684  6E0E               	movwf	?_readEEPROM,c
 19921  002686  EC00  F02C         	call	_readEEPROM	;wreg free
 19922  00268A  D318               	goto	L41
 19923  00268C                     l10598:
 19924                           
 19925                           ; BSR set to: 0
 19926                           ;main.c: 1414: rv = readEEPROM(0x4F);
 19927  00268C  6A0F               	clrf	?_readEEPROM+1,c
 19928  00268E  0E4F               	movlw	79
 19929  002690  6E0E               	movwf	?_readEEPROM,c
 19930  002692  EC00  F02C         	call	_readEEPROM	;wreg free
 19931  002696  D312               	goto	L41
 19932  002698                     l10600:
 19933                           
 19934                           ; BSR set to: 0
 19935                           ;main.c: 1419: rv = readEEPROM(0x50);
 19936  002698  6A0F               	clrf	?_readEEPROM+1,c
 19937  00269A  0E50               	movlw	80
 19938  00269C  6E0E               	movwf	?_readEEPROM,c
 19939  00269E  EC00  F02C         	call	_readEEPROM	;wreg free
 19940  0026A2  D30C               	goto	L41
 19941  0026A4                     l10602:
 19942                           
 19943                           ; BSR set to: 0
 19944                           ;main.c: 1424: rv = readEEPROM(0x51);
 19945  0026A4  6A0F               	clrf	?_readEEPROM+1,c
 19946  0026A6  0E51               	movlw	81
 19947  0026A8  6E0E               	movwf	?_readEEPROM,c
 19948  0026AA  EC00  F02C         	call	_readEEPROM	;wreg free
 19949  0026AE  D306               	goto	L41
 19950  0026B0                     l10604:
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;main.c: 1429: rv = readEEPROM(0x52);
 19954  0026B0  6A0F               	clrf	?_readEEPROM+1,c
 19955  0026B2  0E52               	movlw	82
 19956  0026B4  6E0E               	movwf	?_readEEPROM,c
 19957  0026B6  EC00  F02C         	call	_readEEPROM	;wreg free
 19958  0026BA  D300               	goto	L41
 19959  0026BC                     l10606:
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;main.c: 1434: rv = readEEPROM(0x53);
 19963  0026BC  6A0F               	clrf	?_readEEPROM+1,c
 19964  0026BE  0E53               	movlw	83
 19965  0026C0  6E0E               	movwf	?_readEEPROM,c
 19966  0026C2  EC00  F02C         	call	_readEEPROM	;wreg free
 19967  0026C6  D2FA               	goto	L41
 19968  0026C8                     l10608:
 19969                           
 19970                           ; BSR set to: 0
 19971                           ;main.c: 1439: rv = readEEPROM(0x54);
 19972  0026C8  6A0F               	clrf	?_readEEPROM+1,c
 19973  0026CA  0E54               	movlw	84
 19974  0026CC  6E0E               	movwf	?_readEEPROM,c
 19975  0026CE  EC00  F02C         	call	_readEEPROM	;wreg free
 19976  0026D2  D2F4               	goto	L41
 19977  0026D4                     l10610:
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;main.c: 1444: rv = readEEPROM(0x55);
 19981  0026D4  6A0F               	clrf	?_readEEPROM+1,c
 19982  0026D6  0E55               	movlw	85
 19983  0026D8  6E0E               	movwf	?_readEEPROM,c
 19984  0026DA  EC00  F02C         	call	_readEEPROM	;wreg free
 19985  0026DE  D2EE               	goto	L41
 19986  0026E0                     l10612:
 19987                           
 19988                           ; BSR set to: 0
 19989                           ;main.c: 1449: rv = readEEPROM(0x56);
 19990  0026E0  6A0F               	clrf	?_readEEPROM+1,c
 19991  0026E2  0E56               	movlw	86
 19992  0026E4  6E0E               	movwf	?_readEEPROM,c
 19993  0026E6  EC00  F02C         	call	_readEEPROM	;wreg free
 19994  0026EA  D2E8               	goto	L41
 19995  0026EC                     l10614:
 19996                           
 19997                           ; BSR set to: 0
 19998                           ;main.c: 1454: rv = readEEPROM(0x57);
 19999  0026EC  6A0F               	clrf	?_readEEPROM+1,c
 20000  0026EE  0E57               	movlw	87
 20001  0026F0  6E0E               	movwf	?_readEEPROM,c
 20002  0026F2  EC00  F02C         	call	_readEEPROM	;wreg free
 20003  0026F6  D2E2               	goto	L41
 20004  0026F8                     l10616:
 20005                           
 20006                           ; BSR set to: 0
 20007                           ;main.c: 1459: rv = readEEPROM(0x58);
 20008  0026F8  6A0F               	clrf	?_readEEPROM+1,c
 20009  0026FA  0E58               	movlw	88
 20010  0026FC  6E0E               	movwf	?_readEEPROM,c
 20011  0026FE  EC00  F02C         	call	_readEEPROM	;wreg free
 20012  002702  D2DC               	goto	L41
 20013  002704                     l10618:
 20014                           
 20015                           ; BSR set to: 0
 20016                           ;main.c: 1464: rv = readEEPROM(0x59);
 20017  002704  6A0F               	clrf	?_readEEPROM+1,c
 20018  002706  0E59               	movlw	89
 20019  002708  6E0E               	movwf	?_readEEPROM,c
 20020  00270A  EC00  F02C         	call	_readEEPROM	;wreg free
 20021  00270E  D2D6               	goto	L41
 20022  002710                     l10620:
 20023                           
 20024                           ; BSR set to: 0
 20025                           ;main.c: 1469: rv = readEEPROM(0x5A);
 20026  002710  6A0F               	clrf	?_readEEPROM+1,c
 20027  002712  0E5A               	movlw	90
 20028  002714  6E0E               	movwf	?_readEEPROM,c
 20029  002716  EC00  F02C         	call	_readEEPROM	;wreg free
 20030  00271A  D2D0               	goto	L41
 20031  00271C                     l10622:
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;main.c: 1478: rv = readEEPROM(0x5B);
 20035  00271C  6A0F               	clrf	?_readEEPROM+1,c
 20036  00271E  0E5B               	movlw	91
 20037  002720  6E0E               	movwf	?_readEEPROM,c
 20038  002722  EC00  F02C         	call	_readEEPROM	;wreg free
 20039  002726  D2CA               	goto	L41
 20040  002728                     l10624:
 20041                           
 20042                           ; BSR set to: 0
 20043                           ;main.c: 1483: rv = readEEPROM(0x5C);
 20044  002728  6A0F               	clrf	?_readEEPROM+1,c
 20045  00272A  0E5C               	movlw	92
 20046  00272C  6E0E               	movwf	?_readEEPROM,c
 20047  00272E  EC00  F02C         	call	_readEEPROM	;wreg free
 20048  002732  D2C4               	goto	L41
 20049  002734                     l10626:
 20050                           
 20051                           ; BSR set to: 0
 20052                           ;main.c: 1488: rv = readEEPROM(0x5D);
 20053  002734  6A0F               	clrf	?_readEEPROM+1,c
 20054  002736  0E5D               	movlw	93
 20055  002738  6E0E               	movwf	?_readEEPROM,c
 20056  00273A  EC00  F02C         	call	_readEEPROM	;wreg free
 20057  00273E  D2BE               	goto	L41
 20058  002740                     l10628:
 20059                           
 20060                           ; BSR set to: 0
 20061                           ;main.c: 1493: rv = readEEPROM(0x5E);
 20062  002740  6A0F               	clrf	?_readEEPROM+1,c
 20063  002742  0E5E               	movlw	94
 20064  002744  6E0E               	movwf	?_readEEPROM,c
 20065  002746  EC00  F02C         	call	_readEEPROM	;wreg free
 20066  00274A  D2B8               	goto	L41
 20067  00274C                     l10630:
 20068                           
 20069                           ; BSR set to: 0
 20070                           ;main.c: 1498: rv = readEEPROM(0x5F);
 20071  00274C  6A0F               	clrf	?_readEEPROM+1,c
 20072  00274E  0E5F               	movlw	95
 20073  002750  6E0E               	movwf	?_readEEPROM,c
 20074  002752  EC00  F02C         	call	_readEEPROM	;wreg free
 20075  002756  D2B2               	goto	L41
 20076  002758                     l10632:
 20077                           
 20078                           ; BSR set to: 0
 20079                           ;main.c: 1503: rv = readEEPROM(0x60);
 20080  002758  6A0F               	clrf	?_readEEPROM+1,c
 20081  00275A  0E60               	movlw	96
 20082  00275C  6E0E               	movwf	?_readEEPROM,c
 20083  00275E  EC00  F02C         	call	_readEEPROM	;wreg free
 20084  002762  D2AC               	goto	L41
 20085  002764                     l10634:
 20086                           
 20087                           ; BSR set to: 0
 20088                           ;main.c: 1508: rv = readEEPROM(0x61);
 20089  002764  6A0F               	clrf	?_readEEPROM+1,c
 20090  002766  0E61               	movlw	97
 20091  002768  6E0E               	movwf	?_readEEPROM,c
 20092  00276A  EC00  F02C         	call	_readEEPROM	;wreg free
 20093  00276E  D2A6               	goto	L41
 20094  002770                     l10636:
 20095                           
 20096                           ; BSR set to: 0
 20097                           ;main.c: 1513: rv = readEEPROM(0x62);
 20098  002770  6A0F               	clrf	?_readEEPROM+1,c
 20099  002772  0E62               	movlw	98
 20100  002774  6E0E               	movwf	?_readEEPROM,c
 20101  002776  EC00  F02C         	call	_readEEPROM	;wreg free
 20102  00277A  D2A0               	goto	L41
 20103  00277C                     l10638:
 20104                           
 20105                           ; BSR set to: 0
 20106                           ;main.c: 1518: rv = readEEPROM(0x63);
 20107  00277C  6A0F               	clrf	?_readEEPROM+1,c
 20108  00277E  0E63               	movlw	99
 20109  002780  6E0E               	movwf	?_readEEPROM,c
 20110  002782  EC00  F02C         	call	_readEEPROM	;wreg free
 20111  002786  D29A               	goto	L41
 20112  002788                     l10640:
 20113                           
 20114                           ; BSR set to: 0
 20115                           ;main.c: 1523: rv = readEEPROM(0x64);
 20116  002788  6A0F               	clrf	?_readEEPROM+1,c
 20117  00278A  0E64               	movlw	100
 20118  00278C  6E0E               	movwf	?_readEEPROM,c
 20119  00278E  EC00  F02C         	call	_readEEPROM	;wreg free
 20120  002792  D294               	goto	L41
 20121  002794                     l10642:
 20122                           
 20123                           ; BSR set to: 0
 20124                           ;main.c: 1528: rv = readEEPROM(0x65);
 20125  002794  6A0F               	clrf	?_readEEPROM+1,c
 20126  002796  0E65               	movlw	101
 20127  002798  6E0E               	movwf	?_readEEPROM,c
 20128  00279A  EC00  F02C         	call	_readEEPROM	;wreg free
 20129  00279E  D28E               	goto	L41
 20130  0027A0                     l10644:
 20131                           
 20132                           ; BSR set to: 0
 20133                           ;main.c: 1533: rv = readEEPROM(0x66);
 20134  0027A0  6A0F               	clrf	?_readEEPROM+1,c
 20135  0027A2  0E66               	movlw	102
 20136  0027A4  6E0E               	movwf	?_readEEPROM,c
 20137  0027A6  EC00  F02C         	call	_readEEPROM	;wreg free
 20138  0027AA  D288               	goto	L41
 20139  0027AC                     l10646:
 20140                           
 20141                           ; BSR set to: 0
 20142                           ;main.c: 1543: rv = readEEPROM(0x67);
 20143  0027AC  6A0F               	clrf	?_readEEPROM+1,c
 20144  0027AE  0E67               	movlw	103
 20145  0027B0  6E0E               	movwf	?_readEEPROM,c
 20146  0027B2  EC00  F02C         	call	_readEEPROM	;wreg free
 20147  0027B6  D282               	goto	L41
 20148  0027B8                     l10648:
 20149                           
 20150                           ; BSR set to: 0
 20151                           ;main.c: 1548: rv = readEEPROM(0x68);
 20152  0027B8  6A0F               	clrf	?_readEEPROM+1,c
 20153  0027BA  0E68               	movlw	104
 20154  0027BC  6E0E               	movwf	?_readEEPROM,c
 20155  0027BE  EC00  F02C         	call	_readEEPROM	;wreg free
 20156  0027C2  D27C               	goto	L41
 20157  0027C4                     l10650:
 20158                           
 20159                           ; BSR set to: 0
 20160                           ;main.c: 1553: rv = readEEPROM(0x69);
 20161  0027C4  6A0F               	clrf	?_readEEPROM+1,c
 20162  0027C6  0E69               	movlw	105
 20163  0027C8  6E0E               	movwf	?_readEEPROM,c
 20164  0027CA  EC00  F02C         	call	_readEEPROM	;wreg free
 20165  0027CE  D276               	goto	L41
 20166  0027D0                     l10652:
 20167                           
 20168                           ; BSR set to: 0
 20169                           ;main.c: 1558: rv = readEEPROM(0x6A);
 20170  0027D0  6A0F               	clrf	?_readEEPROM+1,c
 20171  0027D2  0E6A               	movlw	106
 20172  0027D4  6E0E               	movwf	?_readEEPROM,c
 20173  0027D6  EC00  F02C         	call	_readEEPROM	;wreg free
 20174  0027DA  D270               	goto	L41
 20175  0027DC                     l10654:
 20176                           
 20177                           ; BSR set to: 0
 20178                           ;main.c: 1563: rv = readEEPROM(0x6B);
 20179  0027DC  6A0F               	clrf	?_readEEPROM+1,c
 20180  0027DE  0E6B               	movlw	107
 20181  0027E0  6E0E               	movwf	?_readEEPROM,c
 20182  0027E2  EC00  F02C         	call	_readEEPROM	;wreg free
 20183  0027E6  D26A               	goto	L41
 20184  0027E8                     l10656:
 20185                           
 20186                           ; BSR set to: 0
 20187                           ;main.c: 1568: rv = readEEPROM(0x6C);
 20188  0027E8  6A0F               	clrf	?_readEEPROM+1,c
 20189  0027EA  0E6C               	movlw	108
 20190  0027EC  6E0E               	movwf	?_readEEPROM,c
 20191  0027EE  EC00  F02C         	call	_readEEPROM	;wreg free
 20192  0027F2  D264               	goto	L41
 20193  0027F4                     l10658:
 20194                           
 20195                           ; BSR set to: 0
 20196                           ;main.c: 1573: rv = readEEPROM(0x6D);
 20197  0027F4  6A0F               	clrf	?_readEEPROM+1,c
 20198  0027F6  0E6D               	movlw	109
 20199  0027F8  6E0E               	movwf	?_readEEPROM,c
 20200  0027FA  EC00  F02C         	call	_readEEPROM	;wreg free
 20201  0027FE  D25E               	goto	L41
 20202  002800                     l10660:
 20203                           
 20204                           ; BSR set to: 0
 20205                           ;main.c: 1578: rv = readEEPROM(0x6E);
 20206  002800  6A0F               	clrf	?_readEEPROM+1,c
 20207  002802  0E6E               	movlw	110
 20208  002804  6E0E               	movwf	?_readEEPROM,c
 20209  002806  EC00  F02C         	call	_readEEPROM	;wreg free
 20210  00280A  D258               	goto	L41
 20211  00280C                     l10662:
 20212                           
 20213                           ; BSR set to: 0
 20214                           ;main.c: 1583: rv = readEEPROM(0x6F);
 20215  00280C  6A0F               	clrf	?_readEEPROM+1,c
 20216  00280E  0E6F               	movlw	111
 20217  002810  6E0E               	movwf	?_readEEPROM,c
 20218  002812  EC00  F02C         	call	_readEEPROM	;wreg free
 20219  002816  D252               	goto	L41
 20220  002818                     l10664:
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;main.c: 1588: rv = readEEPROM(0x70);
 20224  002818  6A0F               	clrf	?_readEEPROM+1,c
 20225  00281A  0E70               	movlw	112
 20226  00281C  6E0E               	movwf	?_readEEPROM,c
 20227  00281E  EC00  F02C         	call	_readEEPROM	;wreg free
 20228  002822  D24C               	goto	L41
 20229  002824                     l10666:
 20230                           
 20231                           ; BSR set to: 0
 20232                           ;main.c: 1593: rv = readEEPROM(0x71);
 20233  002824  6A0F               	clrf	?_readEEPROM+1,c
 20234  002826  0E71               	movlw	113
 20235  002828  6E0E               	movwf	?_readEEPROM,c
 20236  00282A  EC00  F02C         	call	_readEEPROM	;wreg free
 20237  00282E  D246               	goto	L41
 20238  002830                     l10668:
 20239                           
 20240                           ; BSR set to: 0
 20241                           ;main.c: 1598: rv = readEEPROM(0x72);
 20242  002830  6A0F               	clrf	?_readEEPROM+1,c
 20243  002832  0E72               	movlw	114
 20244  002834  6E0E               	movwf	?_readEEPROM,c
 20245  002836  EC00  F02C         	call	_readEEPROM	;wreg free
 20246  00283A  D240               	goto	L41
 20247  00283C                     l10670:
 20248                           
 20249                           ; BSR set to: 0
 20250                           ;main.c: 1607: rv = readEEPROM(0x73);
 20251  00283C  6A0F               	clrf	?_readEEPROM+1,c
 20252  00283E  0E73               	movlw	115
 20253  002840  6E0E               	movwf	?_readEEPROM,c
 20254  002842  EC00  F02C         	call	_readEEPROM	;wreg free
 20255  002846  D23A               	goto	L41
 20256  002848                     l10672:
 20257                           
 20258                           ; BSR set to: 0
 20259                           ;main.c: 1612: rv = readEEPROM(0x74);
 20260  002848  6A0F               	clrf	?_readEEPROM+1,c
 20261  00284A  0E74               	movlw	116
 20262  00284C  6E0E               	movwf	?_readEEPROM,c
 20263  00284E  EC00  F02C         	call	_readEEPROM	;wreg free
 20264  002852  D234               	goto	L41
 20265  002854                     l10694:
 20266                           
 20267                           ; BSR set to: 0
 20268                           ;main.c: 1671: rv = readEEPROM(0x7F);
 20269  002854  6A0F               	clrf	?_readEEPROM+1,c
 20270  002856  0E7F               	movlw	127
 20271  002858  6E0E               	movwf	?_readEEPROM,c
 20272  00285A  EC00  F02C         	call	_readEEPROM	;wreg free
 20273  00285E  D22E               	goto	L41
 20274  002860                     l10696:
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;main.c: 1676: rv = readEEPROM(0x80);
 20278  002860  6A0F               	clrf	?_readEEPROM+1,c
 20279  002862  0E80               	movlw	128
 20280  002864  6E0E               	movwf	?_readEEPROM,c
 20281  002866  EC00  F02C         	call	_readEEPROM	;wreg free
 20282  00286A  D228               	goto	L41
 20283  00286C                     l10698:
 20284                           
 20285                           ; BSR set to: 0
 20286                           ;main.c: 1681: rv = readEEPROM(0x81);
 20287  00286C  6A0F               	clrf	?_readEEPROM+1,c
 20288  00286E  0E81               	movlw	129
 20289  002870  6E0E               	movwf	?_readEEPROM,c
 20290  002872  EC00  F02C         	call	_readEEPROM	;wreg free
 20291  002876  D222               	goto	L41
 20292  002878                     l10700:
 20293                           
 20294                           ; BSR set to: 0
 20295                           ;main.c: 1686: rv = readEEPROM(0x82);
 20296  002878  6A0F               	clrf	?_readEEPROM+1,c
 20297  00287A  0E82               	movlw	130
 20298  00287C  6E0E               	movwf	?_readEEPROM,c
 20299  00287E  EC00  F02C         	call	_readEEPROM	;wreg free
 20300  002882  D21C               	goto	L41
 20301  002884                     l10702:
 20302                           
 20303                           ; BSR set to: 0
 20304                           ;main.c: 1691: rv = readEEPROM(0x83);
 20305  002884  6A0F               	clrf	?_readEEPROM+1,c
 20306  002886  0E83               	movlw	131
 20307  002888  6E0E               	movwf	?_readEEPROM,c
 20308  00288A  EC00  F02C         	call	_readEEPROM	;wreg free
 20309  00288E  D216               	goto	L41
 20310  002890                     l10704:
 20311                           
 20312                           ; BSR set to: 0
 20313                           ;main.c: 1696: rv = readEEPROM(0x84);
 20314  002890  6A0F               	clrf	?_readEEPROM+1,c
 20315  002892  0E84               	movlw	132
 20316  002894  6E0E               	movwf	?_readEEPROM,c
 20317  002896  EC00  F02C         	call	_readEEPROM	;wreg free
 20318  00289A  D210               	goto	L41
 20319  00289C                     l10706:
 20320                           
 20321                           ; BSR set to: 0
 20322                           ;main.c: 1701: rv = readEEPROM(0x85);
 20323  00289C  6A0F               	clrf	?_readEEPROM+1,c
 20324  00289E  0E85               	movlw	133
 20325  0028A0  6E0E               	movwf	?_readEEPROM,c
 20326  0028A2  EC00  F02C         	call	_readEEPROM	;wreg free
 20327  0028A6  D20A               	goto	L41
 20328  0028A8                     l10708:
 20329                           
 20330                           ; BSR set to: 0
 20331                           ;main.c: 1706: rv = readEEPROM(0x86);
 20332  0028A8  6A0F               	clrf	?_readEEPROM+1,c
 20333  0028AA  0E86               	movlw	134
 20334  0028AC  6E0E               	movwf	?_readEEPROM,c
 20335  0028AE  EC00  F02C         	call	_readEEPROM	;wreg free
 20336  0028B2  D204               	goto	L41
 20337  0028B4                     l10710:
 20338                           
 20339                           ; BSR set to: 0
 20340                           ;main.c: 1711: rv = readEEPROM(0x87);
 20341  0028B4  6A0F               	clrf	?_readEEPROM+1,c
 20342  0028B6  0E87               	movlw	135
 20343  0028B8  6E0E               	movwf	?_readEEPROM,c
 20344  0028BA  EC00  F02C         	call	_readEEPROM	;wreg free
 20345  0028BE  D1FE               	goto	L41
 20346  0028C0                     l10712:
 20347                           
 20348                           ; BSR set to: 0
 20349                           ;main.c: 1716: rv = readEEPROM(0x88);
 20350  0028C0  6A0F               	clrf	?_readEEPROM+1,c
 20351  0028C2  0E88               	movlw	136
 20352  0028C4  6E0E               	movwf	?_readEEPROM,c
 20353  0028C6  EC00  F02C         	call	_readEEPROM	;wreg free
 20354  0028CA  D1F8               	goto	L41
 20355  0028CC                     l10714:
 20356                           
 20357                           ; BSR set to: 0
 20358                           ;main.c: 1721: rv = readEEPROM(0x89);
 20359  0028CC  6A0F               	clrf	?_readEEPROM+1,c
 20360  0028CE  0E89               	movlw	137
 20361  0028D0  6E0E               	movwf	?_readEEPROM,c
 20362  0028D2  EC00  F02C         	call	_readEEPROM	;wreg free
 20363  0028D6  D1F2               	goto	L41
 20364  0028D8                     l10716:
 20365                           
 20366                           ; BSR set to: 0
 20367                           ;main.c: 1726: rv = readEEPROM(0x8A);
 20368  0028D8  6A0F               	clrf	?_readEEPROM+1,c
 20369  0028DA  0E8A               	movlw	138
 20370  0028DC  6E0E               	movwf	?_readEEPROM,c
 20371  0028DE  EC00  F02C         	call	_readEEPROM	;wreg free
 20372  0028E2  D1EC               	goto	L41
 20373  0028E4                     l10718:
 20374                           
 20375                           ; BSR set to: 0
 20376                           ;main.c: 1735: rv = readEEPROM(0x8B);
 20377  0028E4  6A0F               	clrf	?_readEEPROM+1,c
 20378  0028E6  0E8B               	movlw	139
 20379  0028E8  6E0E               	movwf	?_readEEPROM,c
 20380  0028EA  EC00  F02C         	call	_readEEPROM	;wreg free
 20381  0028EE  D1E6               	goto	L41
 20382  0028F0                     l10720:
 20383                           
 20384                           ; BSR set to: 0
 20385                           ;main.c: 1740: rv = readEEPROM(0x8C);
 20386  0028F0  6A0F               	clrf	?_readEEPROM+1,c
 20387  0028F2  0E8C               	movlw	140
 20388  0028F4  6E0E               	movwf	?_readEEPROM,c
 20389  0028F6  EC00  F02C         	call	_readEEPROM	;wreg free
 20390  0028FA  D1E0               	goto	L41
 20391  0028FC                     l10722:
 20392                           
 20393                           ; BSR set to: 0
 20394                           ;main.c: 1745: rv = readEEPROM(0x8D);
 20395  0028FC  6A0F               	clrf	?_readEEPROM+1,c
 20396  0028FE  0E8D               	movlw	141
 20397  002900  6E0E               	movwf	?_readEEPROM,c
 20398  002902  EC00  F02C         	call	_readEEPROM	;wreg free
 20399  002906  D1DA               	goto	L41
 20400  002908                     l10724:
 20401                           
 20402                           ; BSR set to: 0
 20403                           ;main.c: 1750: rv = readEEPROM(0x8E);
 20404  002908  6A0F               	clrf	?_readEEPROM+1,c
 20405  00290A  0E8E               	movlw	142
 20406  00290C  6E0E               	movwf	?_readEEPROM,c
 20407  00290E  EC00  F02C         	call	_readEEPROM	;wreg free
 20408  002912  D1D4               	goto	L41
 20409  002914                     l10726:
 20410                           
 20411                           ; BSR set to: 0
 20412                           ;main.c: 1755: rv = readEEPROM(0x8F);
 20413  002914  6A0F               	clrf	?_readEEPROM+1,c
 20414  002916  0E8F               	movlw	143
 20415  002918  6E0E               	movwf	?_readEEPROM,c
 20416  00291A  EC00  F02C         	call	_readEEPROM	;wreg free
 20417  00291E  D1CE               	goto	L41
 20418  002920                     l10728:
 20419                           
 20420                           ; BSR set to: 0
 20421                           ;main.c: 1760: rv = readEEPROM(0x90);
 20422  002920  6A0F               	clrf	?_readEEPROM+1,c
 20423  002922  0E90               	movlw	144
 20424  002924  6E0E               	movwf	?_readEEPROM,c
 20425  002926  EC00  F02C         	call	_readEEPROM	;wreg free
 20426  00292A  D1C8               	goto	L41
 20427  00292C                     l10730:
 20428                           
 20429                           ; BSR set to: 0
 20430                           ;main.c: 1765: rv = readEEPROM(0x91);
 20431  00292C  6A0F               	clrf	?_readEEPROM+1,c
 20432  00292E  0E91               	movlw	145
 20433  002930  6E0E               	movwf	?_readEEPROM,c
 20434  002932  EC00  F02C         	call	_readEEPROM	;wreg free
 20435  002936  D1C2               	goto	L41
 20436  002938                     l10732:
 20437                           
 20438                           ; BSR set to: 0
 20439                           ;main.c: 1770: rv = readEEPROM(0x92);
 20440  002938  6A0F               	clrf	?_readEEPROM+1,c
 20441  00293A  0E92               	movlw	146
 20442  00293C  6E0E               	movwf	?_readEEPROM,c
 20443  00293E  EC00  F02C         	call	_readEEPROM	;wreg free
 20444  002942  D1BC               	goto	L41
 20445  002944                     l10734:
 20446                           
 20447                           ; BSR set to: 0
 20448                           ;main.c: 1775: rv = readEEPROM(0x93);
 20449  002944  6A0F               	clrf	?_readEEPROM+1,c
 20450  002946  0E93               	movlw	147
 20451  002948  6E0E               	movwf	?_readEEPROM,c
 20452  00294A  EC00  F02C         	call	_readEEPROM	;wreg free
 20453  00294E  D1B6               	goto	L41
 20454  002950                     l10736:
 20455                           
 20456                           ; BSR set to: 0
 20457                           ;main.c: 1780: rv = readEEPROM(0x94);
 20458  002950  6A0F               	clrf	?_readEEPROM+1,c
 20459  002952  0E94               	movlw	148
 20460  002954  6E0E               	movwf	?_readEEPROM,c
 20461  002956  EC00  F02C         	call	_readEEPROM	;wreg free
 20462  00295A  D1B0               	goto	L41
 20463  00295C                     l10738:
 20464                           
 20465                           ; BSR set to: 0
 20466                           ;main.c: 1785: rv = readEEPROM(0x95);
 20467  00295C  6A0F               	clrf	?_readEEPROM+1,c
 20468  00295E  0E95               	movlw	149
 20469  002960  6E0E               	movwf	?_readEEPROM,c
 20470  002962  EC00  F02C         	call	_readEEPROM	;wreg free
 20471  002966  D1AA               	goto	L41
 20472  002968                     l10740:
 20473                           
 20474                           ; BSR set to: 0
 20475                           ;main.c: 1790: rv = readEEPROM(0x96);
 20476  002968  6A0F               	clrf	?_readEEPROM+1,c
 20477  00296A  0E96               	movlw	150
 20478  00296C  6E0E               	movwf	?_readEEPROM,c
 20479  00296E  EC00  F02C         	call	_readEEPROM	;wreg free
 20480  002972  D1A4               	goto	L41
 20481  002974                     l10742:
 20482                           
 20483                           ; BSR set to: 0
 20484                           ;main.c: 1800: rv = readEEPROM(0x97);
 20485  002974  6A0F               	clrf	?_readEEPROM+1,c
 20486  002976  0E97               	movlw	151
 20487  002978  6E0E               	movwf	?_readEEPROM,c
 20488  00297A  EC00  F02C         	call	_readEEPROM	;wreg free
 20489  00297E  D19E               	goto	L41
 20490  002980                     l10744:
 20491                           
 20492                           ; BSR set to: 0
 20493                           ;main.c: 1805: rv = readEEPROM(0x98);
 20494  002980  6A0F               	clrf	?_readEEPROM+1,c
 20495  002982  0E98               	movlw	152
 20496  002984  6E0E               	movwf	?_readEEPROM,c
 20497  002986  EC00  F02C         	call	_readEEPROM	;wreg free
 20498  00298A  D198               	goto	L41
 20499  00298C                     l10746:
 20500                           
 20501                           ; BSR set to: 0
 20502                           ;main.c: 1810: rv = readEEPROM(0x99);
 20503  00298C  6A0F               	clrf	?_readEEPROM+1,c
 20504  00298E  0E99               	movlw	153
 20505  002990  6E0E               	movwf	?_readEEPROM,c
 20506  002992  EC00  F02C         	call	_readEEPROM	;wreg free
 20507  002996  D192               	goto	L41
 20508  002998                     l10748:
 20509                           
 20510                           ; BSR set to: 0
 20511                           ;main.c: 1815: rv = readEEPROM(0x9A);
 20512  002998  6A0F               	clrf	?_readEEPROM+1,c
 20513  00299A  0E9A               	movlw	154
 20514  00299C  6E0E               	movwf	?_readEEPROM,c
 20515  00299E  EC00  F02C         	call	_readEEPROM	;wreg free
 20516  0029A2  D18C               	goto	L41
 20517  0029A4                     l10750:
 20518                           
 20519                           ; BSR set to: 0
 20520                           ;main.c: 1820: rv = readEEPROM(0x9B);
 20521  0029A4  6A0F               	clrf	?_readEEPROM+1,c
 20522  0029A6  0E9B               	movlw	155
 20523  0029A8  6E0E               	movwf	?_readEEPROM,c
 20524  0029AA  EC00  F02C         	call	_readEEPROM	;wreg free
 20525  0029AE  D186               	goto	L41
 20526  0029B0                     l10752:
 20527                           
 20528                           ; BSR set to: 0
 20529                           ;main.c: 1825: rv = readEEPROM(0x9C);
 20530  0029B0  6A0F               	clrf	?_readEEPROM+1,c
 20531  0029B2  0E9C               	movlw	156
 20532  0029B4  6E0E               	movwf	?_readEEPROM,c
 20533  0029B6  EC00  F02C         	call	_readEEPROM	;wreg free
 20534  0029BA  D180               	goto	L41
 20535  0029BC                     l408:
 20536                           
 20537                           ; BSR set to: 0
 20538                           ;main.c: 1830: rv = 0;
 20539  0029BC  6A14               	clrf	vscp_readAppReg@rv,c
 20540                           
 20541                           ;main.c: 1831: break;
 20542  0029BE  D17F               	goto	l10784
 20543  0029C0                     l10754:
 20544                           
 20545                           ; BSR set to: 0
 20546                           ;main.c: 1839: rv = readEEPROM(0xF2);
 20547  0029C0  6A0F               	clrf	?_readEEPROM+1,c
 20548  0029C2  0EF2               	movlw	242
 20549  0029C4  6E0E               	movwf	?_readEEPROM,c
 20550  0029C6  EC00  F02C         	call	_readEEPROM	;wreg free
 20551  0029CA  D178               	goto	L41
 20552  0029CC                     l10756:
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;main.c: 1843: rv = readEEPROM(0xF3);
 20556  0029CC  6A0F               	clrf	?_readEEPROM+1,c
 20557  0029CE  0EF3               	movlw	243
 20558  0029D0  6E0E               	movwf	?_readEEPROM,c
 20559  0029D2  EC00  F02C         	call	_readEEPROM	;wreg free
 20560  0029D6  D172               	goto	L41
 20561  0029D8                     l10760:
 20562                           
 20563                           ; BSR set to: 0
 20564  0029D8  5013               	movf	vscp_readAppReg@reg,w,c
 20565                           
 20566                           ; Switch size 1, requested type "speed"
 20567                           ; Number of cases is 108, Range of values is 0 to 119
 20568                           ; switch strategies available:
 20569                           ; Name         Instructions Cycles
 20570                           ; simple_byte          325   163 (average)
 20571                           ;	Chosen strategy is simple_byte
 20572  0029DA  E101 D5E5          	bz	l10558
 20573  0029DE  0A01               	xorlw	1	; case 1
 20574  0029E0  E101 D5E8          	bz	l10560
 20575  0029E4  0A03               	xorlw	3	; case 2
 20576  0029E6  E101 D5EB          	bz	l10562
 20577  0029EA  0A01               	xorlw	1	; case 3
 20578  0029EC  E101 D5EE          	bz	l10564
 20579  0029F0  0A07               	xorlw	7	; case 4
 20580  0029F2  E101 D5F1          	bz	l10566
 20581  0029F6  0A01               	xorlw	1	; case 5
 20582  0029F8  E101 D5F4          	bz	l10568
 20583  0029FC  0A03               	xorlw	3	; case 6
 20584  0029FE  E101 D5F7          	bz	l10570
 20585  002A02  0A01               	xorlw	1	; case 7
 20586  002A04  E101 D5FA          	bz	l10572
 20587  002A08  0A0F               	xorlw	15	; case 8
 20588  002A0A  E101 D5FD          	bz	l10574
 20589  002A0E  0A01               	xorlw	1	; case 9
 20590  002A10  E101 D5FD          	bz	l313
 20591  002A14  0A03               	xorlw	3	; case 10
 20592  002A16  E101 D5FD          	bz	l10576
 20593  002A1A  0A01               	xorlw	1	; case 11
 20594  002A1C  E101 D5FD          	bz	l315
 20595  002A20  0A07               	xorlw	7	; case 12
 20596  002A22  E101 D5FD          	bz	l10578
 20597  002A26  0A01               	xorlw	1	; case 13
 20598  002A28  E101 D5FD          	bz	l317
 20599  002A2C  0A03               	xorlw	3	; case 14
 20600  002A2E  E101 D5FD          	bz	l10580
 20601  002A32  0A01               	xorlw	1	; case 15
 20602  002A34  E101 D5FD          	bz	l319
 20603  002A38  0A1F               	xorlw	31	; case 16
 20604  002A3A  E101 D5FD          	bz	l10582
 20605  002A3E  0A01               	xorlw	1	; case 17
 20606  002A40  E101 D5FD          	bz	l321
 20607  002A44  0A03               	xorlw	3	; case 18
 20608  002A46  E101 D5F7          	bz	l10582
 20609  002A4A  0A01               	xorlw	1	; case 19
 20610  002A4C  E101 D5F7          	bz	l321
 20611  002A50  0A07               	xorlw	7	; case 20
 20612  002A52  E101 D5F7          	bz	l10586
 20613  002A56  0A01               	xorlw	1	; case 21
 20614  002A58  E101 D5FA          	bz	l10588
 20615  002A5C  0A03               	xorlw	3	; case 22
 20616  002A5E  E101 D5FD          	bz	l10590
 20617  002A62  0A01               	xorlw	1	; case 23
 20618  002A64  E101 D600          	bz	l10592
 20619  002A68  0A0F               	xorlw	15	; case 24
 20620  002A6A  E101 D603          	bz	l10594
 20621  002A6E  0A01               	xorlw	1	; case 25
 20622  002A70  E101 D606          	bz	l10596
 20623  002A74  0A3F               	xorlw	63	; case 38
 20624  002A76  E101 D609          	bz	l10598
 20625  002A7A  0A01               	xorlw	1	; case 39
 20626  002A7C  E101 D60C          	bz	l10600
 20627  002A80  0A0F               	xorlw	15	; case 40
 20628  002A82  E101 D60F          	bz	l10602
 20629  002A86  0A01               	xorlw	1	; case 41
 20630  002A88  E101 D612          	bz	l10604
 20631  002A8C  0A03               	xorlw	3	; case 42
 20632  002A8E  E101 D615          	bz	l10606
 20633  002A92  0A01               	xorlw	1	; case 43
 20634  002A94  E101 D618          	bz	l10608
 20635  002A98  0A07               	xorlw	7	; case 44
 20636  002A9A  E101 D61B          	bz	l10610
 20637  002A9E  0A01               	xorlw	1	; case 45
 20638  002AA0  E101 D61E          	bz	l10612
 20639  002AA4  0A03               	xorlw	3	; case 46
 20640  002AA6  E101 D621          	bz	l10614
 20641  002AAA  0A01               	xorlw	1	; case 47
 20642  002AAC  E101 D624          	bz	l10616
 20643  002AB0  0A1F               	xorlw	31	; case 48
 20644  002AB2  E101 D627          	bz	l10618
 20645  002AB6  0A01               	xorlw	1	; case 49
 20646  002AB8  E101 D62A          	bz	l10620
 20647  002ABC  0A03               	xorlw	3	; case 50
 20648  002ABE  E101 D62D          	bz	l10622
 20649  002AC2  0A01               	xorlw	1	; case 51
 20650  002AC4  E101 D630          	bz	l10624
 20651  002AC8  0A07               	xorlw	7	; case 52
 20652  002ACA  E101 D633          	bz	l10626
 20653  002ACE  0A01               	xorlw	1	; case 53
 20654  002AD0  E101 D636          	bz	l10628
 20655  002AD4  0A03               	xorlw	3	; case 54
 20656  002AD6  E101 D639          	bz	l10630
 20657  002ADA  0A01               	xorlw	1	; case 55
 20658  002ADC  E101 D63C          	bz	l10632
 20659  002AE0  0A0F               	xorlw	15	; case 56
 20660  002AE2  E101 D63F          	bz	l10634
 20661  002AE6  0A01               	xorlw	1	; case 57
 20662  002AE8  E101 D642          	bz	l10636
 20663  002AEC  0A03               	xorlw	3	; case 58
 20664  002AEE  E101 D645          	bz	l10638
 20665  002AF2  0A01               	xorlw	1	; case 59
 20666  002AF4  E101 D648          	bz	l10640
 20667  002AF8  0A07               	xorlw	7	; case 60
 20668  002AFA  E101 D64B          	bz	l10642
 20669  002AFE  0A01               	xorlw	1	; case 61
 20670  002B00  E101 D64E          	bz	l10644
 20671  002B04  0A03               	xorlw	3	; case 62
 20672  002B06  E101 D651          	bz	l10646
 20673  002B0A  0A01               	xorlw	1	; case 63
 20674  002B0C  E101 D654          	bz	l10648
 20675  002B10  0A7F               	xorlw	127	; case 64
 20676  002B12  E101 D657          	bz	l10650
 20677  002B16  0A01               	xorlw	1	; case 65
 20678  002B18  E101 D65A          	bz	l10652
 20679  002B1C  0A03               	xorlw	3	; case 66
 20680  002B1E  E101 D65D          	bz	l10654
 20681  002B22  0A01               	xorlw	1	; case 67
 20682  002B24  E101 D660          	bz	l10656
 20683  002B28  0A07               	xorlw	7	; case 68
 20684  002B2A  E101 D663          	bz	l10658
 20685  002B2E  0A01               	xorlw	1	; case 69
 20686  002B30  E101 D666          	bz	l10660
 20687  002B34  0A03               	xorlw	3	; case 70
 20688  002B36  E101 D669          	bz	l10662
 20689  002B3A  0A01               	xorlw	1	; case 71
 20690  002B3C  E101 D66C          	bz	l10664
 20691  002B40  0A0F               	xorlw	15	; case 72
 20692  002B42  E101 D66F          	bz	l10666
 20693  002B46  0A01               	xorlw	1	; case 73
 20694  002B48  E101 D672          	bz	l10668
 20695  002B4C  0A03               	xorlw	3	; case 74
 20696  002B4E  E101 D675          	bz	l10670
 20697  002B52  0A01               	xorlw	1	; case 75
 20698  002B54  E101 D678          	bz	l10672
 20699  002B58  0A07               	xorlw	7	; case 76
 20700  002B5A  E101 D66F          	bz	l10670
 20701  002B5E  0A01               	xorlw	1	; case 77
 20702  002B60  E101 D672          	bz	l10672
 20703  002B64  0A03               	xorlw	3	; case 78
 20704  002B66  E101 D669          	bz	l10670
 20705  002B6A  0A01               	xorlw	1	; case 79
 20706  002B6C  E101 D66C          	bz	l10672
 20707  002B70  0A1F               	xorlw	31	; case 80
 20708  002B72  E101 D663          	bz	l10670
 20709  002B76  0A01               	xorlw	1	; case 81
 20710  002B78  E101 D666          	bz	l10672
 20711  002B7C  0A03               	xorlw	3	; case 82
 20712  002B7E  E101 D65D          	bz	l10670
 20713  002B82  0A01               	xorlw	1	; case 83
 20714  002B84  E101 D660          	bz	l10672
 20715  002B88  0A07               	xorlw	7	; case 84
 20716  002B8A  E101 D657          	bz	l10670
 20717  002B8E  0A01               	xorlw	1	; case 85
 20718  002B90  E101 D65A          	bz	l10672
 20719  002B94  0A03               	xorlw	3	; case 86
 20720  002B96  E101 D65D          	bz	l10694
 20721  002B9A  0A01               	xorlw	1	; case 87
 20722  002B9C  E101 D660          	bz	l10696
 20723  002BA0  0A0F               	xorlw	15	; case 88
 20724  002BA2  E101 D663          	bz	l10698
 20725  002BA6  0A01               	xorlw	1	; case 89
 20726  002BA8  E101 D666          	bz	l10700
 20727  002BAC  0A03               	xorlw	3	; case 90
 20728  002BAE  E101 D669          	bz	l10702
 20729  002BB2  0A01               	xorlw	1	; case 91
 20730  002BB4  E101 D66C          	bz	l10704
 20731  002BB8  0A07               	xorlw	7	; case 92
 20732  002BBA  E101 D66F          	bz	l10706
 20733  002BBE  0A01               	xorlw	1	; case 93
 20734  002BC0  E101 D672          	bz	l10708
 20735  002BC4  0A03               	xorlw	3	; case 94
 20736  002BC6  E101 D675          	bz	l10710
 20737  002BCA  0A01               	xorlw	1	; case 95
 20738  002BCC  E101 D678          	bz	l10712
 20739  002BD0  0A3F               	xorlw	63	; case 96
 20740  002BD2  E101 D67B          	bz	l10714
 20741  002BD6  0A01               	xorlw	1	; case 97
 20742  002BD8  E101 D67E          	bz	l10716
 20743  002BDC  0A03               	xorlw	3	; case 98
 20744  002BDE  E101 D681          	bz	l10718
 20745  002BE2  0A01               	xorlw	1	; case 99
 20746  002BE4  E101 D684          	bz	l10720
 20747  002BE8  0A07               	xorlw	7	; case 100
 20748  002BEA  E101 D687          	bz	l10722
 20749  002BEE  0A01               	xorlw	1	; case 101
 20750  002BF0  E101 D68A          	bz	l10724
 20751  002BF4  0A03               	xorlw	3	; case 102
 20752  002BF6  E101 D68D          	bz	l10726
 20753  002BFA  0A01               	xorlw	1	; case 103
 20754  002BFC  E101 D690          	bz	l10728
 20755  002C00  0A0F               	xorlw	15	; case 104
 20756  002C02  E101 D693          	bz	l10730
 20757  002C06  0A01               	xorlw	1	; case 105
 20758  002C08  E101 D696          	bz	l10732
 20759  002C0C  0A03               	xorlw	3	; case 106
 20760  002C0E  E101 D699          	bz	l10734
 20761  002C12  0A01               	xorlw	1	; case 107
 20762  002C14  E101 D69C          	bz	l10736
 20763  002C18  0A07               	xorlw	7	; case 108
 20764  002C1A  E101 D69F          	bz	l10738
 20765  002C1E  0A01               	xorlw	1	; case 109
 20766  002C20  E101 D6A2          	bz	l10740
 20767  002C24  0A03               	xorlw	3	; case 110
 20768  002C26  E101 D6A5          	bz	l10742
 20769  002C2A  0A01               	xorlw	1	; case 111
 20770  002C2C  E101 D6A8          	bz	l10744
 20771  002C30  0A1F               	xorlw	31	; case 112
 20772  002C32  E101 D6AB          	bz	l10746
 20773  002C36  0A01               	xorlw	1	; case 113
 20774  002C38  E101 D6AE          	bz	l10748
 20775  002C3C  0A03               	xorlw	3	; case 114
 20776  002C3E  E101 D6B1          	bz	l10750
 20777  002C42  0A01               	xorlw	1	; case 115
 20778  002C44  E101 D6B4          	bz	l10752
 20779  002C48  0A07               	xorlw	7	; case 116
 20780  002C4A  E101 D6B7          	bz	l408
 20781  002C4E  0A01               	xorlw	1	; case 117
 20782  002C50  E101 D6B4          	bz	l408
 20783  002C54  0A03               	xorlw	3	; case 118
 20784  002C56  E101 D6B3          	bz	l10754
 20785  002C5A  0A01               	xorlw	1	; case 119
 20786  002C5C  E101 D6B6          	bz	l10756
 20787  002C60  D6AD               	goto	l408
 20788  002C62                     l10762:
 20789                           
 20790                           ; BSR set to: 0
 20791                           ;main.c: 1851: else if (1 == vscp_page_select) {
 20792  002C62  0446               	decf	_vscp_page_select,w,c
 20793  002C64  1047               	iorwf	_vscp_page_select+1,w,c
 20794  002C66  E12B               	bnz	l10784
 20795                           
 20796                           ; BSR set to: 0
 20797                           ;main.c: 1853: if (reg < 72) {
 20798  002C68  0E48               	movlw	72
 20799  002C6A  6013               	cpfslt	vscp_readAppReg@reg,c
 20800  002C6C  D009               	goto	l10768
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;main.c: 1854: rv = readEEPROM(0xAA + reg ) ;
 20804  002C6E  0EAA               	movlw	170
 20805  002C70  2413               	addwf	vscp_readAppReg@reg,w,c
 20806  002C72  6E0E               	movwf	?_readEEPROM,c
 20807  002C74  6A0F               	clrf	?_readEEPROM+1,c
 20808  002C76  0E00               	movlw	0
 20809  002C78  220F               	addwfc	?_readEEPROM+1,f,c
 20810  002C7A  EC00  F02C         	call	_readEEPROM	;wreg free
 20811  002C7E  D01E               	goto	L41
 20812  002C80                     l10768:
 20813                           
 20814                           ; BSR set to: 0
 20815                           ;main.c: 1857: else if (reg < 84) {
 20816  002C80  0E54               	movlw	84
 20817  002C82  6013               	cpfslt	vscp_readAppReg@reg,c
 20818  002C84  D010               	goto	l10780
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;main.c: 1859: uint8_t pos = reg - 72;
 20822  002C86  5013               	movf	vscp_readAppReg@reg,w,c
 20823  002C88  0FB8               	addlw	184
 20824  002C8A  6E12               	movwf	vscp_readAppReg@pos,c
 20825                           
 20826                           ; BSR set to: 0
 20827                           ;main.c: 1860: if ( pos % 2 ) {
 20828  002C8C  A012               	btfss	vscp_readAppReg@pos,0,c
 20829  002C8E  D002               	goto	l10776
 20830                           
 20831                           ; BSR set to: 0
 20832                           ;main.c: 1861: pos--;
 20833  002C90  0612               	decf	vscp_readAppReg@pos,f,c
 20834                           
 20835                           ;main.c: 1862: }
 20836  002C92  D001               	goto	l10778
 20837  002C94                     l10776:
 20838                           
 20839                           ; BSR set to: 0
 20840                           ;main.c: 1863: else {
 20841                           ;main.c: 1864: pos++;
 20842  002C94  2A12               	incf	vscp_readAppReg@pos,f,c
 20843  002C96                     l10778:
 20844                           
 20845                           ; BSR set to: 0
 20846                           ;main.c: 1865: }
 20847                           ;main.c: 1866: rv = adc[ pos ];
 20848  002C96  0E9C               	movlw	low _adc
 20849  002C98  2412               	addwf	vscp_readAppReg@pos,w,c
 20850  002C9A  6ED9               	movwf	fsr2l,c
 20851  002C9C  6ADA               	clrf	fsr2h,c
 20852  002C9E  0E01               	movlw	high _adc
 20853  002CA0  22DA               	addwfc	fsr2h,f,c
 20854  002CA2  50DF               	movf	indf2,w,c
 20855  002CA4  D00B               	goto	L41
 20856  002CA6                     l10780:
 20857                           
 20858                           ; BSR set to: 0
 20859                           ;main.c: 1869: else if (reg < 98) {
 20860  002CA6  0E62               	movlw	98
 20861  002CA8  6013               	cpfslt	vscp_readAppReg@reg,c
 20862  002CAA  D009               	goto	l10784
 20863                           
 20864                           ; BSR set to: 0
 20865                           ;main.c: 1870: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20866  002CAC  0E4A               	movlw	74
 20867  002CAE  2413               	addwf	vscp_readAppReg@reg,w,c
 20868  002CB0  6E0E               	movwf	?_readEEPROM,c
 20869  002CB2  6A0F               	clrf	?_readEEPROM+1,c
 20870  002CB4  0E00               	movlw	0
 20871  002CB6  220F               	addwfc	?_readEEPROM+1,f,c
 20872  002CB8  EC00  F02C         	call	_readEEPROM	;wreg free
 20873  002CBC                     L41:
 20874  002CBC  6E14               	movwf	vscp_readAppReg@rv,c
 20875  002CBE                     l10784:
 20876                           
 20877                           ;main.c: 1871: }
 20878                           ;main.c: 1872: }
 20879                           ;main.c: 1874: return rv;
 20880  002CBE  5014               	movf	vscp_readAppReg@rv,w,c
 20881  002CC0  0012               	return	
 20882  002CC2                     __end_of_vscp_readAppReg:
 20883                           	opt stack 0
 20884                           tblptru	equ	0xFF8
 20885                           tblptrh	equ	0xFF7
 20886                           tblptrl	equ	0xFF6
 20887                           tablat	equ	0xFF5
 20888                           prodh	equ	0xFF4
 20889                           prodl	equ	0xFF3
 20890                           intcon	equ	0xFF2
 20891                           postinc0	equ	0xFEE
 20892                           wreg	equ	0xFE8
 20893                           indf1	equ	0xFE7
 20894                           postdec1	equ	0xFE5
 20895                           fsr1h	equ	0xFE2
 20896                           fsr1l	equ	0xFE1
 20897                           indf2	equ	0xFDF
 20898                           postinc2	equ	0xFDE
 20899                           postdec2	equ	0xFDD
 20900                           plusw2	equ	0xFDB
 20901                           fsr2h	equ	0xFDA
 20902                           fsr2l	equ	0xFD9
 20903                           status	equ	0xFD8
 20904                           
 20905 ;; *************** function _interrupt_at_low_vector *****************
 20906 ;; Defined at:
 20907 ;;		line 131 in file "../main.c"
 20908 ;; Parameters:    Size  Location     Type
 20909 ;;		None
 20910 ;; Auto vars:     Size  Location     Type
 20911 ;;		None
 20912 ;; Return value:  Size  Location     Type
 20913 ;;		None               void
 20914 ;; Registers used:
 20915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20916 ;; Tracked objects:
 20917 ;;		On entry : 0/0
 20918 ;;		On exit  : 0/0
 20919 ;;		Unchanged: 0/0
 20920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20921 ;;      Params:         0       0       0       0       0       0       0
 20922 ;;      Locals:         0       0       0       0       0       0       0
 20923 ;;      Temps:          9       0       0       0       0       0       0
 20924 ;;      Totals:         9       0       0       0       0       0       0
 20925 ;;Total ram usage:        9 bytes
 20926 ;; Hardware stack levels used:    1
 20927 ;; Hardware stack levels required when called:    1
 20928 ;; This function calls:
 20929 ;;		i1_ConvertADC
 20930 ;;		i1_WriteTimer0
 20931 ;; This function is called by:
 20932 ;;		Interrupt level 1
 20933 ;; This function uses a non-reentrant model
 20934 ;;
 20935                           
 20936                           	psect	intcodelo
 20937  000218                     __pintcodelo:
 20938                           	opt stack 0
 20939  000218                     _interrupt_at_low_vector:
 20940                           	opt stack 22
 20941                           
 20942                           ;incstack = 0
 20943  000218  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20944  00021C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20945  000220  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20946  000224  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20947  000228  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20948  00022C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20949  000230  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20950  000234                     
 20951                           ;main.c: 133: if (INTCONbits.TMR0IF) {
 20952  000234  A4F2               	btfss	intcon,2,c	;volatile
 20953  000236  D001               	goto	i1u718_21
 20954  000238  D001               	goto	i1u718_20
 20955  00023A                     i1u718_21:
 20956  00023A  D043               	goto	i1l9190
 20957  00023C                     i1u718_20:
 20958  00023C                     
 20959                           ;main.c: 136: WriteTimer0(0xfb1d);
 20960  00023C  0EFB               	movlw	251
 20961  00023E  6E02               	movwf	?i1_WriteTimer0+1,c
 20962  000240  0E1D               	movlw	29
 20963  000242  6E01               	movwf	?i1_WriteTimer0,c
 20964  000244  EC1B  F02C         	call	i1_WriteTimer0	;wreg free
 20965  000248                     
 20966                           ;main.c: 138: vscp_timer++;
 20967  000248  0101               	movlb	1	; () banked
 20968  00024A  4B1C               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20969  00024C  2B1D               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20970  00024E                     
 20971                           ; BSR set to: 1
 20972                           ;main.c: 139: measurement_clock++;
 20973  00024E  0E01               	movlw	1
 20974  000250  2712               	addwf	_measurement_clock& (0+255),f,b
 20975  000252  0E00               	movlw	0
 20976  000254  2313               	addwfc	(_measurement_clock+1)& (0+255),f,b
 20977  000256  0E00               	movlw	0
 20978  000258  2314               	addwfc	(_measurement_clock+2)& (0+255),f,b
 20979  00025A  0E00               	movlw	0
 20980  00025C  2315               	addwfc	(_measurement_clock+3)& (0+255),f,b
 20981  00025E                     
 20982                           ; BSR set to: 1
 20983                           ;main.c: 140: timeout_clock++;
 20984  00025E  0E01               	movlw	1
 20985  000260  2716               	addwf	_timeout_clock& (0+255),f,b
 20986  000262  0E00               	movlw	0
 20987  000264  2317               	addwfc	(_timeout_clock+1)& (0+255),f,b
 20988  000266  0E00               	movlw	0
 20989  000268  2318               	addwfc	(_timeout_clock+2)& (0+255),f,b
 20990  00026A  0E00               	movlw	0
 20991  00026C  2319               	addwfc	(_timeout_clock+3)& (0+255),f,b
 20992  00026E                     
 20993                           ; BSR set to: 1
 20994                           ;main.c: 143: if (!(PORTC & 0x01)) {
 20995  00026E  B082               	btfsc	3970,0,c	;volatile
 20996  000270  D001               	goto	i1u719_21
 20997  000272  D001               	goto	i1u719_20
 20998  000274                     i1u719_21:
 20999  000274  D003               	goto	i1l136
 21000  000276                     i1u719_20:
 21001  000276                     
 21002                           ; BSR set to: 1
 21003                           ;main.c: 145: vscp_initbtncnt++;
 21004  000276  0100               	movlb	0	; () banked
 21005  000278  2BB8               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21006                           
 21007                           ;main.c: 146: }
 21008  00027A  D002               	goto	i1l9164
 21009  00027C                     i1l136:
 21010                           
 21011                           ; BSR set to: 1
 21012                           ;main.c: 147: else {
 21013                           ;main.c: 148: vscp_initbtncnt = 0;
 21014  00027C  0100               	movlb	0	; () banked
 21015  00027E  6BB8               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21016  000280                     i1l9164:
 21017                           
 21018                           ; BSR set to: 0
 21019                           ;main.c: 149: }
 21020                           ;main.c: 152: vscp_statuscnt++;
 21021  000280  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21022  000282                     
 21023                           ; BSR set to: 0
 21024                           ;main.c: 153: if ( ( 0x02 ==
 21025                           ;main.c: 154: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21026  000282  504D               	movf	_vscp_initledfunc,w,c
 21027  000284  0A02               	xorlw	2
 21028  000286  A4D8               	btfss	status,2,c
 21029  000288  D001               	goto	i1u720_21
 21030  00028A  D001               	goto	i1u720_20
 21031  00028C                     i1u720_21:
 21032  00028C  D00E               	goto	i1l9178
 21033  00028E                     i1u720_20:
 21034  00028E                     
 21035                           ; BSR set to: 0
 21036  00028E  0E64               	movlw	100
 21037  000290  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21038  000292  D001               	goto	i1u721_21
 21039  000294  D001               	goto	i1u721_20
 21040  000296                     i1u721_21:
 21041  000296  D009               	goto	i1l9178
 21042  000298                     i1u721_20:
 21043  000298                     
 21044                           ; BSR set to: 0
 21045                           ;main.c: 155: if ( PORTC & 0x02 ) {
 21046  000298  A282               	btfss	3970,1,c	;volatile
 21047  00029A  D001               	goto	i1u722_21
 21048  00029C  D001               	goto	i1u722_20
 21049  00029E                     i1u722_21:
 21050  00029E  D002               	goto	i1l9174
 21051  0002A0                     i1u722_20:
 21052  0002A0                     i1l9172:
 21053                           
 21054                           ; BSR set to: 0
 21055                           ;main.c: 156: PORTC &= ~0x02;
 21056  0002A0  9282               	bcf	3970,1,c	;volatile
 21057                           
 21058                           ;main.c: 157: }
 21059  0002A2  D001               	goto	i1l9176
 21060  0002A4                     i1l9174:
 21061                           
 21062                           ; BSR set to: 0
 21063                           ;main.c: 158: else {
 21064                           ;main.c: 159: PORTC |= 0x02;
 21065  0002A4  8282               	bsf	3970,1,c	;volatile
 21066  0002A6                     i1l9176:
 21067                           
 21068                           ; BSR set to: 0
 21069                           ;main.c: 160: }
 21070                           ;main.c: 161: vscp_statuscnt = 0;
 21071  0002A6  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21072                           
 21073                           ;main.c: 162: }
 21074  0002A8  D00B               	goto	i1l9188
 21075  0002AA                     i1l9178:
 21076                           
 21077                           ; BSR set to: 0
 21078                           ;main.c: 163: else if (0x01 == vscp_initledfunc) {
 21079  0002AA  044D               	decf	_vscp_initledfunc,w,c
 21080  0002AC  A4D8               	btfss	status,2,c
 21081  0002AE  D001               	goto	i1u723_21
 21082  0002B0  D001               	goto	i1u723_20
 21083  0002B2                     i1u723_21:
 21084  0002B2  D001               	goto	i1l142
 21085  0002B4                     i1u723_20:
 21086  0002B4  D7F7               	goto	i1l9174
 21087  0002B6                     i1l142:
 21088                           
 21089                           ; BSR set to: 0
 21090                           ;main.c: 167: else if (0x00 == vscp_initledfunc) {
 21091  0002B6  664D               	tstfsz	_vscp_initledfunc,c
 21092  0002B8  D001               	goto	i1u724_21
 21093  0002BA  D001               	goto	i1u724_20
 21094  0002BC                     i1u724_21:
 21095  0002BC  D001               	goto	i1l9188
 21096  0002BE                     i1u724_20:
 21097  0002BE  D7F0               	goto	i1l9172
 21098  0002C0                     i1l9188:
 21099                           
 21100                           ; BSR set to: 0
 21101                           ;main.c: 170: }
 21102                           ;main.c: 172: INTCONbits.TMR0IF = 0;
 21103  0002C0  94F2               	bcf	intcon,2,c	;volatile
 21104  0002C2                     i1l9190:
 21105                           
 21106                           ;main.c: 174: }
 21107                           ;main.c: 177: if ( PIR1bits.ADIF ) {
 21108  0002C2  AC9E               	btfss	3998,6,c	;volatile
 21109  0002C4  D001               	goto	i1u725_21
 21110  0002C6  D001               	goto	i1u725_20
 21111  0002C8                     i1u725_21:
 21112  0002C8  D0E5               	goto	i1l162
 21113  0002CA                     i1u725_20:
 21114  0002CA  D0C4               	goto	i1l9252
 21115  0002CC                     i1l9194:
 21116                           
 21117                           ;main.c: 183: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21118  0002CC  5049               	movf	_adc_series_counter,w,c
 21119  0002CE  0D0C               	mullw	12
 21120  0002D0  0E9C               	movlw	low _adc
 21121  0002D2  24F3               	addwf	prodl,w,c
 21122  0002D4  6ED9               	movwf	fsr2l,c
 21123  0002D6  0E01               	movlw	high _adc
 21124  0002D8  20F4               	addwfc	prodh,w,c
 21125  0002DA  6EDA               	movwf	fsr2h,c
 21126  0002DC  CFC4 FFDF          	movff	4036,indf2	;volatile
 21127                           
 21128                           ;main.c: 184: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21129  0002E0  5049               	movf	_adc_series_counter,w,c
 21130  0002E2  0D0C               	mullw	12
 21131  0002E4  0E9D               	movlw	low (_adc+1)
 21132  0002E6  24F3               	addwf	prodl,w,c
 21133  0002E8  6ED9               	movwf	fsr2l,c
 21134  0002EA  0E01               	movlw	high (_adc+1)
 21135  0002EC  20F4               	addwfc	prodh,w,c
 21136  0002EE  6EDA               	movwf	fsr2h,c
 21137  0002F0  CFC3 FFDF          	movff	4035,indf2	;volatile
 21138  0002F4                     
 21139                           ;main.c: 186: ADCON0 = (2<<2) + 1;
 21140  0002F4  0E09               	movlw	9
 21141  0002F6  6EC2               	movwf	4034,c	;volatile
 21142  0002F8                     
 21143                           ;main.c: 190: if ((80 - 1) == adc_series_counter) {
 21144  0002F8  5049               	movf	_adc_series_counter,w,c
 21145  0002FA  0A4F               	xorlw	79
 21146  0002FC  A4D8               	btfss	status,2,c
 21147  0002FE  D001               	goto	i1u726_21
 21148  000300  D001               	goto	i1u726_20
 21149  000302                     i1u726_21:
 21150  000302  D0C5               	goto	i1l9254
 21151  000304                     i1u726_20:
 21152  000304                     
 21153                           ;main.c: 191: adc_conversion_flags |= 1;
 21154  000304  0100               	movlb	0	; () banked
 21155  000306  81B3               	bsf	_adc_conversion_flags& (0+255),0,b
 21156  000308  D0C2               	goto	i1l9254
 21157  00030A                     i1l9202:
 21158                           
 21159                           ;main.c: 197: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21160  00030A  5049               	movf	_adc_series_counter,w,c
 21161  00030C  0D0C               	mullw	12
 21162  00030E  0E9E               	movlw	low (_adc+2)
 21163  000310  24F3               	addwf	prodl,w,c
 21164  000312  6ED9               	movwf	fsr2l,c
 21165  000314  0E01               	movlw	high (_adc+2)
 21166  000316  20F4               	addwfc	prodh,w,c
 21167  000318  6EDA               	movwf	fsr2h,c
 21168  00031A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21169                           
 21170                           ;main.c: 198: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21171  00031E  5049               	movf	_adc_series_counter,w,c
 21172  000320  0D0C               	mullw	12
 21173  000322  0E9F               	movlw	low (_adc+3)
 21174  000324  24F3               	addwf	prodl,w,c
 21175  000326  6ED9               	movwf	fsr2l,c
 21176  000328  0E01               	movlw	high (_adc+3)
 21177  00032A  20F4               	addwfc	prodh,w,c
 21178  00032C  6EDA               	movwf	fsr2h,c
 21179  00032E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21180  000332                     
 21181                           ;main.c: 201: ADCON0 = (1<<2) + 1;
 21182  000332  0E05               	movlw	5
 21183  000334  6EC2               	movwf	4034,c	;volatile
 21184  000336                     
 21185                           ;main.c: 205: if ((80 - 1) == adc_series_counter) {
 21186  000336  5049               	movf	_adc_series_counter,w,c
 21187  000338  0A4F               	xorlw	79
 21188  00033A  A4D8               	btfss	status,2,c
 21189  00033C  D001               	goto	i1u727_21
 21190  00033E  D001               	goto	i1u727_20
 21191  000340                     i1u727_21:
 21192  000340  D0A6               	goto	i1l9254
 21193  000342                     i1u727_20:
 21194  000342                     
 21195                           ;main.c: 206: adc_conversion_flags |= 1 << 1;
 21196  000342  0100               	movlb	0	; () banked
 21197  000344  83B3               	bsf	_adc_conversion_flags& (0+255),1,b
 21198  000346  D0A3               	goto	i1l9254
 21199  000348                     i1l9210:
 21200                           
 21201                           ;main.c: 212: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21202  000348  5049               	movf	_adc_series_counter,w,c
 21203  00034A  0D0C               	mullw	12
 21204  00034C  0EA0               	movlw	low (_adc+4)
 21205  00034E  24F3               	addwf	prodl,w,c
 21206  000350  6ED9               	movwf	fsr2l,c
 21207  000352  0E01               	movlw	high (_adc+4)
 21208  000354  20F4               	addwfc	prodh,w,c
 21209  000356  6EDA               	movwf	fsr2h,c
 21210  000358  CFC4 FFDF          	movff	4036,indf2	;volatile
 21211                           
 21212                           ;main.c: 213: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21213  00035C  5049               	movf	_adc_series_counter,w,c
 21214  00035E  0D0C               	mullw	12
 21215  000360  0EA1               	movlw	low (_adc+5)
 21216  000362  24F3               	addwf	prodl,w,c
 21217  000364  6ED9               	movwf	fsr2l,c
 21218  000366  0E01               	movlw	high (_adc+5)
 21219  000368  20F4               	addwfc	prodh,w,c
 21220  00036A  6EDA               	movwf	fsr2h,c
 21221  00036C  CFC3 FFDF          	movff	4035,indf2	;volatile
 21222  000370                     
 21223                           ;main.c: 216: ADCON0 = (0<<2) + 1;
 21224  000370  0E01               	movlw	1
 21225  000372  6EC2               	movwf	4034,c	;volatile
 21226  000374                     
 21227                           ;main.c: 220: if ((80 - 1) == adc_series_counter) {
 21228  000374  5049               	movf	_adc_series_counter,w,c
 21229  000376  0A4F               	xorlw	79
 21230  000378  A4D8               	btfss	status,2,c
 21231  00037A  D001               	goto	i1u728_21
 21232  00037C  D001               	goto	i1u728_20
 21233  00037E                     i1u728_21:
 21234  00037E  D087               	goto	i1l9254
 21235  000380                     i1u728_20:
 21236  000380                     
 21237                           ;main.c: 221: adc_conversion_flags |= 1 << 2;
 21238  000380  0100               	movlb	0	; () banked
 21239  000382  85B3               	bsf	_adc_conversion_flags& (0+255),2,b
 21240  000384  D084               	goto	i1l9254
 21241  000386                     i1l9218:
 21242                           
 21243                           ;main.c: 227: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21244  000386  5049               	movf	_adc_series_counter,w,c
 21245  000388  0D0C               	mullw	12
 21246  00038A  0EA2               	movlw	low (_adc+6)
 21247  00038C  24F3               	addwf	prodl,w,c
 21248  00038E  6ED9               	movwf	fsr2l,c
 21249  000390  0E01               	movlw	high (_adc+6)
 21250  000392  20F4               	addwfc	prodh,w,c
 21251  000394  6EDA               	movwf	fsr2h,c
 21252  000396  CFC4 FFDF          	movff	4036,indf2	;volatile
 21253                           
 21254                           ;main.c: 228: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21255  00039A  5049               	movf	_adc_series_counter,w,c
 21256  00039C  0D0C               	mullw	12
 21257  00039E  0EA3               	movlw	low (_adc+7)
 21258  0003A0  24F3               	addwf	prodl,w,c
 21259  0003A2  6ED9               	movwf	fsr2l,c
 21260  0003A4  0E01               	movlw	high (_adc+7)
 21261  0003A6  20F4               	addwfc	prodh,w,c
 21262  0003A8  6EDA               	movwf	fsr2h,c
 21263  0003AA  CFC3 FFDF          	movff	4035,indf2	;volatile
 21264  0003AE                     
 21265                           ;main.c: 230: ADCON0 = (9<<2) + 1;
 21266  0003AE  0E25               	movlw	37
 21267  0003B0  6EC2               	movwf	4034,c	;volatile
 21268  0003B2                     
 21269                           ;main.c: 234: if ((80 - 1) == adc_series_counter) {
 21270  0003B2  5049               	movf	_adc_series_counter,w,c
 21271  0003B4  0A4F               	xorlw	79
 21272  0003B6  A4D8               	btfss	status,2,c
 21273  0003B8  D001               	goto	i1u729_21
 21274  0003BA  D001               	goto	i1u729_20
 21275  0003BC                     i1u729_21:
 21276  0003BC  D068               	goto	i1l9254
 21277  0003BE                     i1u729_20:
 21278  0003BE                     
 21279                           ;main.c: 235: adc_conversion_flags |= 1 << 3;
 21280  0003BE  0100               	movlb	0	; () banked
 21281  0003C0  87B3               	bsf	_adc_conversion_flags& (0+255),3,b
 21282  0003C2  D065               	goto	i1l9254
 21283  0003C4                     i1l9226:
 21284                           
 21285                           ;main.c: 241: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21286  0003C4  5049               	movf	_adc_series_counter,w,c
 21287  0003C6  0D0C               	mullw	12
 21288  0003C8  0EA4               	movlw	low (_adc+8)
 21289  0003CA  24F3               	addwf	prodl,w,c
 21290  0003CC  6ED9               	movwf	fsr2l,c
 21291  0003CE  0E01               	movlw	high (_adc+8)
 21292  0003D0  20F4               	addwfc	prodh,w,c
 21293  0003D2  6EDA               	movwf	fsr2h,c
 21294  0003D4  CFC4 FFDF          	movff	4036,indf2	;volatile
 21295                           
 21296                           ;main.c: 242: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21297  0003D8  5049               	movf	_adc_series_counter,w,c
 21298  0003DA  0D0C               	mullw	12
 21299  0003DC  0EA5               	movlw	low (_adc+9)
 21300  0003DE  24F3               	addwf	prodl,w,c
 21301  0003E0  6ED9               	movwf	fsr2l,c
 21302  0003E2  0E01               	movlw	high (_adc+9)
 21303  0003E4  20F4               	addwfc	prodh,w,c
 21304  0003E6  6EDA               	movwf	fsr2h,c
 21305  0003E8  CFC3 FFDF          	movff	4035,indf2	;volatile
 21306  0003EC                     
 21307                           ;main.c: 244: ADCON0 = (8<<2) + 1;
 21308  0003EC  0E21               	movlw	33
 21309  0003EE  6EC2               	movwf	4034,c	;volatile
 21310  0003F0                     
 21311                           ;main.c: 248: if ((80 - 1) == adc_series_counter) {
 21312  0003F0  5049               	movf	_adc_series_counter,w,c
 21313  0003F2  0A4F               	xorlw	79
 21314  0003F4  A4D8               	btfss	status,2,c
 21315  0003F6  D001               	goto	i1u730_21
 21316  0003F8  D001               	goto	i1u730_20
 21317  0003FA                     i1u730_21:
 21318  0003FA  D049               	goto	i1l9254
 21319  0003FC                     i1u730_20:
 21320  0003FC                     
 21321                           ;main.c: 249: adc_conversion_flags |= 1 << 4;
 21322  0003FC  0100               	movlb	0	; () banked
 21323  0003FE  89B3               	bsf	_adc_conversion_flags& (0+255),4,b
 21324  000400  D046               	goto	i1l9254
 21325  000402                     i1l9234:
 21326                           
 21327                           ;main.c: 255: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21328  000402  5049               	movf	_adc_series_counter,w,c
 21329  000404  0D0C               	mullw	12
 21330  000406  0EA6               	movlw	low (_adc+10)
 21331  000408  24F3               	addwf	prodl,w,c
 21332  00040A  6ED9               	movwf	fsr2l,c
 21333  00040C  0E01               	movlw	high (_adc+10)
 21334  00040E  20F4               	addwfc	prodh,w,c
 21335  000410  6EDA               	movwf	fsr2h,c
 21336  000412  CFC4 FFDF          	movff	4036,indf2	;volatile
 21337                           
 21338                           ;main.c: 256: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21339  000416  5049               	movf	_adc_series_counter,w,c
 21340  000418  0D0C               	mullw	12
 21341  00041A  0EA7               	movlw	low (_adc+11)
 21342  00041C  24F3               	addwf	prodl,w,c
 21343  00041E  6ED9               	movwf	fsr2l,c
 21344  000420  0E01               	movlw	high (_adc+11)
 21345  000422  20F4               	addwfc	prodh,w,c
 21346  000424  6EDA               	movwf	fsr2h,c
 21347  000426  CFC3 FFDF          	movff	4035,indf2	;volatile
 21348  00042A                     
 21349                           ;main.c: 258: ADCON0 = (10<<2) + 1;
 21350  00042A  0E29               	movlw	41
 21351  00042C  6EC2               	movwf	4034,c	;volatile
 21352  00042E                     
 21353                           ;main.c: 262: if ((80 - 1) == adc_series_counter) {
 21354  00042E  5049               	movf	_adc_series_counter,w,c
 21355  000430  0A4F               	xorlw	79
 21356  000432  A4D8               	btfss	status,2,c
 21357  000434  D001               	goto	i1u731_21
 21358  000436  D001               	goto	i1u731_20
 21359  000438                     i1u731_21:
 21360  000438  D002               	goto	i1l159
 21361  00043A                     i1u731_20:
 21362  00043A                     
 21363                           ;main.c: 263: adc_conversion_flags |= 1 << 5;
 21364  00043A  0100               	movlb	0	; () banked
 21365  00043C  8BB3               	bsf	_adc_conversion_flags& (0+255),5,b
 21366  00043E                     i1l159:
 21367                           
 21368                           ;main.c: 264: }
 21369                           ;main.c: 267: adc_series_counter++;
 21370  00043E  2A49               	incf	_adc_series_counter,f,c
 21371  000440                     
 21372                           ;main.c: 268: if (adc_series_counter >= 80) {
 21373  000440  0E4F               	movlw	79
 21374  000442  6449               	cpfsgt	_adc_series_counter,c
 21375  000444  D001               	goto	i1u732_21
 21376  000446  D001               	goto	i1u732_20
 21377  000448                     i1u732_21:
 21378  000448  D022               	goto	i1l9254
 21379  00044A                     i1u732_20:
 21380  00044A                     i1l9244:
 21381                           
 21382                           ;main.c: 269: adc_series_counter = 0;
 21383  00044A  6A49               	clrf	_adc_series_counter,c
 21384  00044C  D020               	goto	i1l9254
 21385  00044E                     i1l9246:
 21386                           
 21387                           ;main.c: 275: ADCON0 = (10<<2) + 1;
 21388  00044E  0E29               	movlw	41
 21389  000450  6EC2               	movwf	4034,c	;volatile
 21390  000452  D7FB               	goto	i1l9244
 21391  000454                     i1l9252:
 21392  000454  50C2               	movf	4034,w,c	;volatile
 21393  000456  0B3C               	andlw	60
 21394  000458  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21395  00045A  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21396                           
 21397                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21398                           ; Switch size 1, requested type "speed"
 21399                           ; Number of cases is 1, Range of values is 0 to 0
 21400                           ; switch strategies available:
 21401                           ; Name         Instructions Cycles
 21402                           ; simple_byte            4     3 (average)
 21403                           ;	Chosen strategy is simple_byte
 21404  00045C  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21405  00045E  0A00               	xorlw	0	; case 0
 21406  000460  B4D8               	btfsc	status,2,c
 21407  000462  D001               	goto	i1l12248
 21408  000464  D7F4               	goto	i1l9246
 21409  000466                     i1l12248:
 21410                           
 21411                           ; Switch size 1, requested type "speed"
 21412                           ; Number of cases is 6, Range of values is 0 to 40
 21413                           ; switch strategies available:
 21414                           ; Name         Instructions Cycles
 21415                           ; simple_byte           19    10 (average)
 21416                           ;	Chosen strategy is simple_byte
 21417  000466  5005               	movf	??_interrupt_at_low_vector,w,c
 21418  000468  0A00               	xorlw	0	; case 0
 21419  00046A  B4D8               	btfsc	status,2,c
 21420  00046C  D78C               	goto	i1l9218
 21421  00046E  0A04               	xorlw	4	; case 4
 21422  000470  B4D8               	btfsc	status,2,c
 21423  000472  D76A               	goto	i1l9210
 21424  000474  0A0C               	xorlw	12	; case 8
 21425  000476  B4D8               	btfsc	status,2,c
 21426  000478  D748               	goto	i1l9202
 21427  00047A  0A28               	xorlw	40	; case 32
 21428  00047C  B4D8               	btfsc	status,2,c
 21429  00047E  D7C1               	goto	i1l9234
 21430  000480  0A04               	xorlw	4	; case 36
 21431  000482  B4D8               	btfsc	status,2,c
 21432  000484  D79F               	goto	i1l9226
 21433  000486  0A0C               	xorlw	12	; case 40
 21434  000488  B4D8               	btfsc	status,2,c
 21435  00048A  D720               	goto	i1l9194
 21436  00048C  D7E0               	goto	i1l9246
 21437  00048E                     i1l9254:
 21438                           
 21439                           ;main.c: 281: ConvertADC();
 21440  00048E  EC52  F02C         	call	i1_ConvertADC	;wreg free
 21441  000492                     
 21442                           ;main.c: 283: PIR1bits.ADIF = 0;
 21443  000492  9C9E               	bcf	3998,6,c	;volatile
 21444  000494                     i1l162:
 21445  000494  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21446  000498  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21447  00049C  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21448  0004A0  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21449  0004A4  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21450  0004A8  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21451  0004AC  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21452  0004B0  0010               	retfie	
 21453  0004B2                     __end_of_interrupt_at_low_vector:
 21454                           	opt stack 0
 21455                           tblptru	equ	0xFF8
 21456                           tblptrh	equ	0xFF7
 21457                           tblptrl	equ	0xFF6
 21458                           tablat	equ	0xFF5
 21459                           prodh	equ	0xFF4
 21460                           prodl	equ	0xFF3
 21461                           intcon	equ	0xFF2
 21462                           postinc0	equ	0xFEE
 21463                           wreg	equ	0xFE8
 21464                           indf1	equ	0xFE7
 21465                           postdec1	equ	0xFE5
 21466                           fsr1h	equ	0xFE2
 21467                           fsr1l	equ	0xFE1
 21468                           bsr	equ	0xFE0
 21469                           indf2	equ	0xFDF
 21470                           postinc2	equ	0xFDE
 21471                           postdec2	equ	0xFDD
 21472                           plusw2	equ	0xFDB
 21473                           fsr2h	equ	0xFDA
 21474                           fsr2l	equ	0xFD9
 21475                           status	equ	0xFD8
 21476                           
 21477 ;; *************** function i1_WriteTimer0 *****************
 21478 ;; Defined at:
 21479 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21480 ;; Parameters:    Size  Location     Type
 21481 ;;  timer0          2    0[COMRAM] unsigned int 
 21482 ;; Auto vars:     Size  Location     Type
 21483 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21484 ;; Return value:  Size  Location     Type
 21485 ;;		None               void
 21486 ;; Registers used:
 21487 ;;		None
 21488 ;; Tracked objects:
 21489 ;;		On entry : 0/0
 21490 ;;		On exit  : 0/0
 21491 ;;		Unchanged: 0/0
 21492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21493 ;;      Params:         2       0       0       0       0       0       0
 21494 ;;      Locals:         2       0       0       0       0       0       0
 21495 ;;      Temps:          0       0       0       0       0       0       0
 21496 ;;      Totals:         4       0       0       0       0       0       0
 21497 ;;Total ram usage:        4 bytes
 21498 ;; Hardware stack levels used:    1
 21499 ;; This function calls:
 21500 ;;		Nothing
 21501 ;; This function is called by:
 21502 ;;		_interrupt_at_low_vector
 21503 ;; This function uses a non-reentrant model
 21504 ;;
 21505                           
 21506                           	psect	text100
 21507  005836                     __ptext100:
 21508                           	opt stack 0
 21509  005836                     i1_WriteTimer0:
 21510                           	opt stack 22
 21511                           
 21512                           ;incstack = 0
 21513                           ;incstack = 0
 21514  005836  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21515  00583A  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21516  00583E  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21517  005842  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21518  005846  0012               	return	
 21519  005848                     __end_ofi1_WriteTimer0:
 21520                           	opt stack 0
 21521                           tblptru	equ	0xFF8
 21522                           tblptrh	equ	0xFF7
 21523                           tblptrl	equ	0xFF6
 21524                           tablat	equ	0xFF5
 21525                           prodh	equ	0xFF4
 21526                           prodl	equ	0xFF3
 21527                           intcon	equ	0xFF2
 21528                           postinc0	equ	0xFEE
 21529                           wreg	equ	0xFE8
 21530                           indf1	equ	0xFE7
 21531                           postdec1	equ	0xFE5
 21532                           fsr1h	equ	0xFE2
 21533                           fsr1l	equ	0xFE1
 21534                           bsr	equ	0xFE0
 21535                           indf2	equ	0xFDF
 21536                           postinc2	equ	0xFDE
 21537                           postdec2	equ	0xFDD
 21538                           plusw2	equ	0xFDB
 21539                           fsr2h	equ	0xFDA
 21540                           fsr2l	equ	0xFD9
 21541                           status	equ	0xFD8
 21542                           
 21543 ;; *************** function i1_ConvertADC *****************
 21544 ;; Defined at:
 21545 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21546 ;; Parameters:    Size  Location     Type
 21547 ;;		None
 21548 ;; Auto vars:     Size  Location     Type
 21549 ;;		None
 21550 ;; Return value:  Size  Location     Type
 21551 ;;		None               void
 21552 ;; Registers used:
 21553 ;;		None
 21554 ;; Tracked objects:
 21555 ;;		On entry : 0/0
 21556 ;;		On exit  : 0/0
 21557 ;;		Unchanged: 0/0
 21558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21559 ;;      Params:         0       0       0       0       0       0       0
 21560 ;;      Locals:         0       0       0       0       0       0       0
 21561 ;;      Temps:          0       0       0       0       0       0       0
 21562 ;;      Totals:         0       0       0       0       0       0       0
 21563 ;;Total ram usage:        0 bytes
 21564 ;; Hardware stack levels used:    1
 21565 ;; This function calls:
 21566 ;;		Nothing
 21567 ;; This function is called by:
 21568 ;;		_interrupt_at_low_vector
 21569 ;; This function uses a non-reentrant model
 21570 ;;
 21571                           
 21572                           	psect	text101
 21573  0058A4                     __ptext101:
 21574                           	opt stack 0
 21575  0058A4                     i1_ConvertADC:
 21576                           	opt stack 22
 21577                           
 21578                           ;incstack = 0
 21579                           ;incstack = 0
 21580  0058A4  82C2               	bsf	4034,1,c	;volatile
 21581  0058A6  0012               	return	
 21582  0058A8                     __end_ofi1_ConvertADC:
 21583                           	opt stack 0
 21584                           tblptru	equ	0xFF8
 21585                           tblptrh	equ	0xFF7
 21586                           tblptrl	equ	0xFF6
 21587                           tablat	equ	0xFF5
 21588                           prodh	equ	0xFF4
 21589                           prodl	equ	0xFF3
 21590                           intcon	equ	0xFF2
 21591                           postinc0	equ	0xFEE
 21592                           wreg	equ	0xFE8
 21593                           indf1	equ	0xFE7
 21594                           postdec1	equ	0xFE5
 21595                           fsr1h	equ	0xFE2
 21596                           fsr1l	equ	0xFE1
 21597                           bsr	equ	0xFE0
 21598                           indf2	equ	0xFDF
 21599                           postinc2	equ	0xFDE
 21600                           postdec2	equ	0xFDD
 21601                           plusw2	equ	0xFDB
 21602                           fsr2h	equ	0xFDA
 21603                           fsr2l	equ	0xFD9
 21604                           status	equ	0xFD8
 21605                           tblptru	equ	0xFF8
 21606                           tblptrh	equ	0xFF7
 21607                           tblptrl	equ	0xFF6
 21608                           tablat	equ	0xFF5
 21609                           prodh	equ	0xFF4
 21610                           prodl	equ	0xFF3
 21611                           intcon	equ	0xFF2
 21612                           postinc0	equ	0xFEE
 21613                           wreg	equ	0xFE8
 21614                           indf1	equ	0xFE7
 21615                           postdec1	equ	0xFE5
 21616                           fsr1h	equ	0xFE2
 21617                           fsr1l	equ	0xFE1
 21618                           bsr	equ	0xFE0
 21619                           indf2	equ	0xFDF
 21620                           postinc2	equ	0xFDE
 21621                           postdec2	equ	0xFDD
 21622                           plusw2	equ	0xFDB
 21623                           fsr2h	equ	0xFDA
 21624                           fsr2l	equ	0xFD9
 21625                           status	equ	0xFD8
 21626                           
 21627                           	psect	text102
 21628  000000                     __ptext102:
 21629                           	opt stack 0
 21630                           tblptru	equ	0xFF8
 21631                           tblptrh	equ	0xFF7
 21632                           tblptrl	equ	0xFF6
 21633                           tablat	equ	0xFF5
 21634                           prodh	equ	0xFF4
 21635                           prodl	equ	0xFF3
 21636                           intcon	equ	0xFF2
 21637                           postinc0	equ	0xFEE
 21638                           wreg	equ	0xFE8
 21639                           indf1	equ	0xFE7
 21640                           postdec1	equ	0xFE5
 21641                           fsr1h	equ	0xFE2
 21642                           fsr1l	equ	0xFE1
 21643                           bsr	equ	0xFE0
 21644                           indf2	equ	0xFDF
 21645                           postinc2	equ	0xFDE
 21646                           postdec2	equ	0xFDD
 21647                           plusw2	equ	0xFDB
 21648                           fsr2h	equ	0xFDA
 21649                           fsr2l	equ	0xFD9
 21650                           status	equ	0xFD8
 21651                           
 21652                           	psect	rparam
 21653  0000                     tblptru	equ	0xFF8
 21654                           tblptrh	equ	0xFF7
 21655                           tblptrl	equ	0xFF6
 21656                           tablat	equ	0xFF5
 21657                           prodh	equ	0xFF4
 21658                           prodl	equ	0xFF3
 21659                           intcon	equ	0xFF2
 21660                           postinc0	equ	0xFEE
 21661                           wreg	equ	0xFE8
 21662                           indf1	equ	0xFE7
 21663                           postdec1	equ	0xFE5
 21664                           fsr1h	equ	0xFE2
 21665                           fsr1l	equ	0xFE1
 21666                           bsr	equ	0xFE0
 21667                           indf2	equ	0xFDF
 21668                           postinc2	equ	0xFDE
 21669                           postdec2	equ	0xFDD
 21670                           plusw2	equ	0xFDB
 21671                           fsr2h	equ	0xFDA
 21672                           fsr2l	equ	0xFD9
 21673                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     83     119
    BANK1           256     54     156
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	PTR unsigned char  size(2) Largest target is 0

    ?_eval_poly	PTR unsigned char  size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	PTR unsigned char  size(2) Largest target is 0

    ?___flneg	PTR unsigned char  size(2) Largest target is 0

    ?___asflmul	PTR unsigned char  size(2) Largest target is 0

    ?___flpack	PTR unsigned char  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___fltol
    ___lwtofl->___flpack
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _exp->___fltol
    _ldexp->_eval_poly
    _floor->___fltol
    ___altofl->___fltol
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _setEventData->___fltol
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readAppReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___fldiv
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___aldiv->___fltol
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _eval_poly->___flmul
    _floor->___altofl
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_setEventData
    _setEventData->___fltol
    _Celsius2Fahrenheit->___flmul
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   93236
                                             82 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   34702
                                             68 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     343
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6     855
                                              0 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    1630
                                             43 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             28 BANK0     14     6      8
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4    5945
                                             66 COMRAM     2     2      0
                                             33 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   11079
                                             57 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             33 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    2591
                                             65 COMRAM     1     1      0
                                             22 BANK0     11     4      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    3207
                                             47 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             65 COMRAM     4     4      0
                                             22 BANK0      6     2      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4     445
                                             42 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    1695
                                             30 BANK0      6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    1602
                                             22 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4     893
                                             65 COMRAM     1     1      0
                                             22 BANK0      4     0      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8     729
                                             43 COMRAM    22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   10599
                                             39 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0    7768
                                             39 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0    7542
                                             37 BANK0      2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3    5083
                                             28 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    2785
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    1537
                                             28 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    1256
                                             43 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   26929
                                             31 BANK0     27    27      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7784
                                             51 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                    18    17      1    3152
                                             33 COMRAM    18    17      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1890
                                             20 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                      2     2      0    1077
                                             18 COMRAM     2     2      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                0     0      0      62
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4     445
                                             23 COMRAM     7     3      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8     800
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     312
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      9C       7       60.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     53      77       5       74.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165       3        0.0%
DATA                 0      0     530      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Feb 18 22:33:19 2015

                          ___asfldiv@f1p 0060                            ___altofl@sign 008E  
                           ___fldiv@cntr 003F                  __end_of_vscp_readAppReg 2CC2  
                           ___fldiv@sign 0041                    __end_of_sendVSCPFrame 48CE  
                           ___asflmul@mp 0042                             ___asflsub@f2 0080  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0014  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 4446  
                          ___asflsub@f1p 007E                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 5476                              __CFG_WDT$ON 000000  
                                    l206 1BCE                                      l222 1E16  
                                    l321 263E                                      l313 260E  
                                    l315 261A                                      l251 4958  
                                    l243 3718                                      l317 2626  
                                    l181 42F0                                      l166 4282  
                                    l319 2632                                      l175 42C6  
                                    l408 29BC                                      l520 1032  
                                    l517 0FE4                                      l293 4DF2  
                                    l550 56CE                                      l199 1880  
                                    l632 53BE                                      l626 4EA0  
                                    l820 3B96                                      l637 5504  
                                    l822 3BB4                                      l840 3510  
                                    l833 333C                                      l850 33C0  
                                    l915 5616                                      l843 340A  
                                    l852 33D4                                      l844 338A  
                                    l828 3C2E                                      l854 33E4  
                                    l846 3398                       vscp_readStdReg@reg 0014  
                                    l864 3478                                      l856 33F4  
                                    l848 33AC                                      l865 349C  
                                    l882 4042                                      l892 4F0E  
                                    l887 3D92           __size_of_vscp_handleProbeState 00C4  
                       setEventData@ival 0083                           getVSCPFrame@id 002E  
          __end_of_vscp_handleProbeState 45E0                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                         setEventData@unit 007E  
                                    _adc 019C                                      _exp 371A  
                                    _log 4044                                      fsr2 000FD9  
                                    prod 000FF3                                      wreg 000FE8  
                           ___flmul@cntr 0074                             ___flmul@sign 0075  
                          ___flpack@sign 0013                             ___fltol@exp1 007B  
                                   l1100 5118                                     l1104 5724  
                                   l1033 568A                                     l1051 45CA  
                                   l1043 45DA                                     l1052 45AA  
                                   l1044 4564                                     l1028 5250  
                                   l1080 5666                                     l1144 56AC  
                                   l1313 5706                                     l1233 303A  
                                   l1209 2EA2                                     l1314 5708  
                                   l1234 304E                                     l1091 5558  
                                   l1235 3090                                     l1076 534C  
                                   l1244 30CC                                     l1086 54CC  
                                   l1174 3AC4                                     l1087 54D8  
                                   l1603 4A24                                     l1611 5062  
                                   l1276 5582                                     l1268 3302  
                                   l1612 5080                                     l1533 46AE  
                                   l1534 475E                                     l1544 4720  
                                   l1538 46F2                                     l1618 451A  
                                   l1562 37C8                                     l1299 4FE4  
                                   l1571 3DB6                                     l1563 38EC  
                                   l1572 3EF2                                     l1652 41A6  
                                   l1653 426C                                     l1575 3DDE  
                                   l1655 425C                                     l1559 38FC  
                                   l1680 4D22                                     l1664 4C06  
                                   l1586 3E6E                                     l1851 4170  
                                   l1684 4AC8                  __end_of_doOneSecondWork 371A  
              vscp_getManufacturerId@idx 0012                                     ?_exp 0099  
                                   ?_log 0081                                     l8400 5794  
                                   l8162 54E6                                     l8146 4E44  
                                   l8074 572C                                     l9130 55A4  
                                   l9122 558E                                     l8430 4EA8  
                                   l8270 332A                                     l8158 54E2  
                                   l8440 4ED8                                     l8432 4EB0  
                                   l8280 3354                                     l8442 4EDE  
                                   l8434 4EBA                                     l8338 341E  
                                   l8444 4EE4                                     l8436 4EC4  
                                   l8348 343E                                     l8438 4ECE  
                                   l8462 3CC4                                     l8374 34CA  
                                   l8382 34E4                                     l8366 349E  
                                   l8286 336A                                     l8294 3378  
                                   l8448 4EF0                                     l8288 3374  
                                   l8388 34FA                                     l9622 453E  
                                   l9710 2D1C                                     l9624 4546  
                                   l9608 451E                                     l9712 2D22  
                                   l9642 4580                                     l9572 2470  
                                   l9804 2E3A                                     l9558 5676  
                                   l9646 4584                                     l9814 2E6E  
                                   l9726 2D2A                                     l9648 4588  
                                   l9832 2ED4                                     l9760 2D5C  
                                   l9842 2F36                                     l9826 2EA6  
                                   l9746 2D50                                     l9690 2CDE  
                                   l9924 302E                                     l9908 300E  
                                   l9836 2EEC                                     l9828 2EC4  
                                   l9692 2CE4                                     l9684 2CCC  
                                   l9678 45CE                                     l9846 2F4C  
                                   l9862 2F7C                                     l9766 2D70  
                                   l9686 2CD2                                     l9960 3084  
                                   l9952 3074                                     l9944 3056  
                                   l9880 2FD2                                     l9864 2F7E  
                                   l9784 2DD2                                     l9688 2CD8  
                                   l9970 3092                                     l9874 2FA2  
                                   l9866 2F88                                     l9794 2E06  
                                   l9956 307C                                     l9892 2FEE  
                                   l9974 30AC                                     l9996 30D4  
            __size_of_vscp_getMatrixInfo 001A                                     u6005 3CE0  
                         sendCANFrame@id 003C                                     u5490 4E94  
                                   u5495 4E8A                                     u5665 3332  
                                   u8314 358C                                     u5667 3334  
                                   u8315 3588                                     u9205 3F54  
                                   u9215 3F7E                                     u9055 4858  
                                   u8364 3656                                     u8365 3652  
                         sendCANFrame@rv 0042                                     u5985 3C72  
                                   u5995 3C92                                     u9195 3F2E  
                                   u9710 3A8A                                     u8830 38B0  
                                   u8850 4058                                     u9715 3A80  
                                   u9680 3A28                                     u9685 3A1E  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 426E                                     _init 53C6  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0099                                     log@x 0081  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 066E                              _vscp_minute 00B9  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 04B2  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 38FE  
                            _writeEEPROM 55FA                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 4FE8  
                        _sh_coefficients 011E                     __end_of_getVSCPFrame 4EA2  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 54AA  
                   __size_of_getCANFrame 002C                                    l10010 30FC  
                                  l10020 311E                                    l11000 132E  
                                  l10032 3144                                    l10104 32A0  
                                  l11002 1330                                    l10130 4E12  
                                  l10122 4DCE                                    l11100 3B30  
                                  l11004 1340                                    l11020 56BA  
                                  l10060 31CA                                    l10052 3198  
                                  l10028 3140                                    l10132 4E1E  
                                  l10070 31EA                                    l10126 4DFE  
                                  l10118 4DAA                                    l10230 50F8  
                                  l11112 3B5A                                    l11008 136C  
                                  l10056 31AE                                    l10048 3178  
                                  l10208 3710                                    l10144 351E  
                                  l10224 50EE                                    l12000 42F4  
                                  l11122 3B9A                                    l10082 3240  
                                  l10170 35EE                                    l10154 3562  
                                  l10234 5100                                    l12002 430C  
                                  l11300 43E8                                    l10500 493C  
                                  l10172 35F8                                    l10420 376C  
                                  l12100 197A                                    l12020 4338  
                                  l11134 3BE4                                    l11142 3BFE  
                                  l10078 3218                                    l10182 3646  
                                  l10414 3738                                    l12030 4358  
                                  l10600 2698                                    l10520 5296  
                                  l11128 3BB6                                    l11152 3C24  
                                  l11080 53BA                                    l11208 5344  
                                  l11320 4422                                    l11312 440A  
                                  l11304 43F4                                    l10440 38BA  
                                  l10424 3796                                    l12120 1A74  
                                  l12112 1992                                    l12040 13A8  
                                  _B0CON 000E20                                    l10610 26D4  
                                  l10602 26A4                                    l11170 3F6A  
                                  l11154 3C26                                    l12026 4350  
                                  l10700 2878                                    l10620 2710  
                                  l10612 26E0                                    l10604 26B0  
                                  l11148 3C20                                    l11076 5390  
                                  l11316 4416                                    l11308 43FE  
                                  l11252 571E                                    l11340 56A2  
                                  l10196 36B8                                    l10452 4062  
                                  l12140 1B72                                    l10710 28B4  
                                  l10702 2884                                    l10630 274C  
                                  l10622 271C                                    l10614 26EC  
                                  l10606 26BC                                    l10542 4AD4  
                                  l11094 3B20                                    l11326 4438  
                                  l11270 4388                                    l11262 4374  
                                  l10198 36C2                                    l12142 1B7C  
                                  l12118 1A5A                                    l10720 28F0  
                                  l10712 28C0                                    l10704 2890  
                                  l10640 2788                                    l10632 2758  
                                  l10624 2728                                    l10616 26F8  
                                  l10608 26C8                                    l10560 25B4  
                                  l10536 4ACE                                    l11328 4442  
                                  l10800 06F4                                    l11416 3AAA  
                                  l11408 3A92                                    l11352 3928  
                                  l11520 3DC8                                    l12048 13D2  
                                  _B1CON 000E30                                    l10730 292C  
                                  l10722 28FC                                    l10714 28CC  
                                  l10706 289C                                    l10650 27C4  
                                  l10642 2794                                    l10634 2764  
                                  l10626 2734                                    l10618 2704  
                                  l10570 25F0                                    l10562 25C0  
                                  l11434 46B8                                    l11290 43C6  
                                  l11282 43AA                                    l11274 4392  
                                  l11266 437E                                    l10810 0780  
                                  l10802 0710                                    l11426 3AC6  
                                  l11506 5210                                    l10740 2968  
                                  l10732 2938                                    l10724 2908  
                                  l10716 28D8                                    l10708 28A8  
                                  l10660 2800                                    l10652 27D0  
                                  l10644 27A0                                    l10636 2770  
                                  l10628 2740                                    l10580 262C  
                                  l10572 25FC                                    l10564 25CC  
                                  l11444 4708                                    l11436 46C4  
                                  l10900 0C58                                    l10820 080C  
                                  l10812 079C                                    l10804 072C  
                                  l11372 3982                                    l11364 3964  
                                  l11700 41B0                                    l12180 1DBA  
                                  l12156 1C9C                                    l10750 29A4  
                                  l10742 2974                                    l10734 2944  
                                  l10726 2914                                    l10718 28E4  
                                  l10670 283C                                    l10662 280C  
                                  l10654 27DC                                    l10646 27AC  
                                  l10638 277C                                    l10590 265C  
                                  l10582 2638                                    l10574 2608  
                                  l10566 25D8                                    l10558 25A8  
                                  l11446 4714                                    l11438 46DC  
                                  l11630 4454                                    l11286 43B6  
                                  l11278 439E                                    l10910 0CDA  
                                  l10902 0C72                                    l10830 0898  
                                  l10822 0828                                    l10814 07B8  
                                  l10806 0748                                    l11374 3986  
                                  l11358 3948                                    l11550 3E32  
                                  l11542 3E0A                                    l11526 3DF0  
                                  l11614 49EA                                    l11606 49BC  
                                  l11470 4792                                    l12190 1E0C  
                                  l12158 1CB6                                    l10752 29B0  
                                  l10744 2980                                    l10736 2950  
                                  l10728 2920                                    l10672 2848  
                                  l10664 2818                                    l10656 27E8  
                                  l10648 27B8                                    l10592 2668  
                                  l10576 2614                                    l10568 25E4  
                                  l10760 29D8                                    l11296 43DC  
                                  l10920 0D5C                                    l10912 0CF4  
                                  l10904 0C8C                                    l10840 0924  
                                  l10832 08B4                                    l10824 0844  
                                  l10816 07D4                                    l10808 0764  
                                  l11376 399C                                    l11560 3E5C  
                                  l11552 3E3A                                    l10496 4904  
                                  l11704 41CC                                    l11712 460C  
                                  l11480 47BA                                    l11464 477A  
                                  _B2CON 000E40                                    l10754 29C0  
                                  l10746 298C                                    l10738 295C  
                                  l10666 2824                                    l10658 27F4  
                                  l10594 2674                                    l10586 2644  
                                  l10578 2620                                    l10762 2C62  
                                  l11650 44A6                                    l11634 446A  
                                  l10930 0DDE                                    l10922 0D76  
                                  l10914 0D0E                                    l10906 0CA6  
                                  l10850 09B0                                    l10842 0940  
                                  l10834 08D0                                    l10826 0860  
                                  l10818 07F0                                    l11570 3E9A  
                                  l11562 3E68                                    l11554 3E40  
                                  l11714 4686                                    l12178 1DB0  
                                  l12098 1960                                    l10780 2CA6  
                                  l10756 29CC                                    l10748 2998  
                                  l10668 2830                                    l10596 2680  
                                  l10588 2650                                    l10940 0E60  
                                  l10932 0DF8                                    l10924 0D90  
                                  l10916 0D28                                    l10908 0CC0  
                                  l10860 0A3C                                    l10852 09CC  
                                  l10844 095C                                    l10836 08EC  
                                  l10828 087C                                    l11388 39D0  
                                  l11548 3E26                                    l11820 4BE2  
                                  l11812 4BCA                                    l11476 47AA  
                                  l11492 47F6                                    l10694 2854  
                                  l10598 268C                                    l11662 44D6  
                                  l11646 4492                                    l10950 0EE2  
                                  l10942 0E7A                                    l10934 0E12  
                                  l10926 0DAA                                    l10918 0D42  
                                  l10870 0AC8                                    l10862 0A58  
                                  l10854 09E8                                    l10846 0978  
                                  l10838 0908                                    l11398 3A32  
                                  l11566 3E84                                    l11590 498A  
                                  l11742 4A90                                    l11478 47B6  
                                  l10776 2C94                                    l10768 2C80  
                                  l10696 2860                                    l10784 2CBE  
                                  l10960 0F64                                    l10952 0EFC  
                                  l10944 0E94                                    l10936 0E2C  
                                  l10928 0DC4                                    l10880 0B54  
                                  l10872 0AE4                                    l10864 0A74  
                                  l10856 0A04                                    l10848 0994  
                                  l10792 0684                                    l11752 504C  
                                  l11824 4BF6                                    l11816 4BD2  
                                  l11808 4BBA                                    l11728 4A66  
                                  l11496 480A                                    l11488 47E8  
                                  _B3CON 000E50                                    l10778 2C96  
                                  l10698 286C                                    l11658 44C2  
                                  l10970 0FFE                                    l10962 0F7E  
                                  l10954 0F16                                    l10946 0EAE  
                                  l10938 0E46                                    l10890 0BD6  
                                  l10882 0B6E                                    l10874 0B00  
                                  l10866 0A90                                    l10858 0A20  
                                  l10794 06A0                                    l11578 3EC6  
                                  l11594 499E                                    l11818 4BDE  
                                  l11738 4A84                                    l10972 1018  
                                  l10964 0F98                                    l10956 0F30  
                                  l10948 0EC8                                    l10892 0BF0  
                                  l10884 0B88                                    l10876 0B1C  
                                  l10868 0AAC                                    l10796 06BC  
                                  l11686 544C                                    l10974 1036  
                                  l10966 0FB2                                    l10958 0F4A  
                                  l10894 0C0A                                    l10886 0BA2  
                                  l10878 0B38                                    l10798 06D8  
                                  l10982 106E                                    l11758 507E  
                                  l11766 5632                                    l10992 131A  
                                  l10976 1050                                    l10968 0FCC  
                                  l10896 0C24                                    l10888 0BBC  
                                  l10984 12E2                                    l11792 4B76  
                                  _B4CON 000E60                                    l10978 106A  
                                  l10898 0C3E                                    l11778 4CC4  
                                  l11794 4B80                                    l11970 42A4  
          __size_of_vscp_getMajorVersion 0002                                    l11980 42BA  
                                  l11990 42D6                                    l11982 42C0  
                                  l11974 42AC                                    _B5CON 000E70  
                                  l11978 42B6                                    l11996 42EA  
             __end_of_vscp_goActiveState 56EE                            ___fltol@sign1 007A  
                        __end_of___aldiv 481C            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 3EF4  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4A26  
                          i1_WriteTimer0 5836                          __end_of___flneg 5644  
                                  _EEADR 000FA9                          __end_of___lbmod 55AC  
                        __end_of___flmul 451C                          __end_of___flsub 538A  
                        __end_of___fltol 4C08                  _vscp_handleDropNickname 54AA  
                                  _BSEL0 000DF8                                    u10100 4994  
                                  u10130 4460                                    u10230 4A5C  
                                  u10320 4B9E                                    u10325 4B94  
                                  u10504 13BA                                    _T0CON 000FD5  
                                  u10505 13B6                                    u10614 1A6A  
                                  u10615 1A66                                    u10714 1CAC  
                                  u10634 1B00                                    u10554 1972  
                                  u10715 1CA8                                    u10635 1AFC  
                                  u10555 196E                                    u10734 1D3E  
                                  u10735 1D3A                                    u10584 19A4  
                                  u10585 19A0                                    u10684 1BDE  
                                  u10685 1BDA                                    i1l142 02B6  
                                  i1l136 027C                                    i1l162 0494  
                                  i1l159 043E                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 588A  
             _vscp_readNicknamePermanent 5880                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 007F  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001E                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 4DA8                             _vscp_getGUID 57C8  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 4172                                    _ldexp 4A26  
                           _vscp_getZone 5862                                    _frexp 4C9E  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 58A8  
                 __size_of_vscp_getEvent 002A                                    main@i 00B2  
                             _ConvertADC 58A0                             _vscp_setGUID 56AE  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 58AE  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 55FA                              exp@exponent 00A1  
                            ldexp@newexp 0085                     _ECANSetOperationMode 5788  
                        __initialization 52CE                              log@exponent 0043  
                           __end_of_main 4362                             __end_of_init 5402  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0218  
                        ?_Celsius2Kelvin 002C                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 2CC2                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 016A                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 008F  
                                 ?_ldexp 0081                     __size_of_handle_sync 0082  
                                 ?_frexp 000E                         __end_of___altofl 523E  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 4760  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 5476                          __CFG_BBSIZ$2048 000000  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0032  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 56EE  
                                 i1l9200 0304                                   i1l9210 0348  
                                 i1l9202 030A                                   i1l9220 03AE  
                                 i1l9212 0370                                   i1l9204 0332  
                                 i1l9230 03F0                                   i1l9222 03B2  
                                 i1l9214 0374                                   i1l9206 0336  
                                 i1l9150 0234                                   i1l9240 043A  
                                 i1l9232 03FC                                   i1l9224 03BE  
                                 i1l9216 0380                                   i1l9208 0342  
                                 i1l9160 026E                                   i1l9152 023C  
                                 i1l9242 0440                                   i1l9234 0402  
                                 i1l9226 03C4                                   i1l9218 0386  
                                 i1l9170 0298                                   i1l9162 0276  
                                 i1l9154 0248                                   i1l9244 044A  
                                 i1l9236 042A                                   i1l9228 03EC  
                                 i1l9252 0454                                   i1l9172 02A0  
                                 i1l9164 0280                                   i1l9156 024E  
                                 i1l9246 044E                                   i1l9238 042E  
                                 i1l9254 048E                                   i1l9174 02A4  
                                 i1l9166 0282                                   i1l9158 025E  
                                 i1l9190 02C2                                   i1l9256 0492  
                                 i1l9176 02A6                                   i1l9168 028E  
                                 i1l9194 02CC                                   i1l9178 02AA  
                                 i1l9196 02F4                                   i1l9188 02C0  
                                 i1l9198 02F8                          _init_app_eeprom 1E18  
                       __end_of___lwtofl 5530                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                           __CFG_WDTPS$128 000000  
                 ECANReceiveMessage@data 0015                   ECANReceiveMessage@mode 001C  
                 ECANReceiveMessage@temp 001D                        getVSCPFrame@pData 0028  
                      getVSCPFrame@pSize 0027                                ??_OpenADC 0010  
                     _vscp_newNodeOnline 5530                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0017   vscp_handleProtocolEvent@page_save_1165 0088  
                                 ___flge 5036                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0025  
                                 ___wmul 5402                                ??___fldiv 0034  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0042  
                              ??___flsub 0042                                ??___fltol 0042  
                          _vscp_getEvent 555A                                   _doWork 1370  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 0012                      vscp_writeAppReg@reg 0023  
             __end_of_vscp_setSegmentCRC 5800                      vscp_writeAppReg@val 0021  
                    vscp_writeAppReg@pos 0022                                   clear_0 52D6  
                                 clear_1 52E8                                   clear_2 52F4  
                                 clear_3 5300                            ?_sendCANFrame 003C  
           vscp_handleProtocolEvent@byte 0096                                   floor@i 0093  
                                 floor@x 008F                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 00BA                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 0011  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0021                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004A  
                     __size_of___asfldiv 004A                       __size_of___asflmul 004C  
                             ___fladd@f1 001D                               ___fladd@f2 0021  
                     __size_of___asflsub 004E                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0648  
                       __end_oflog@coeff 066C                          ___lbmod@divisor 000E  
                             ___altofl@c 008A                               ___fldiv@f1 002C  
                             ___fldiv@f2 0030                               ___fldiv@f3 003B  
                             __accesstop 0060                  __end_of__initialization 5306  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 4F18  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                             ___flmul@f1 0060                               ___flmul@f2 0064  
                           eval_poly@res 007D                               ___flsub@f1 0076  
                             ___flsub@f2 007A                               ___fltol@f1 0076  
                        writeEEPROM@data 0010                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 568C                               ___awtofl@c 0018  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0028  
                    ?_Celsius2Fahrenheit 0076                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                   ___asflmul@multiplicand 0076  
            __end_of_vscp_check_pstorage 568C                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                            __end_of_floor 426E  
                          __end_of_ldexp 4ACA                            __end_of_frexp 4D24  
                    ?_vscp_writeRegister 0034                           ??_sendCANFrame 0042  
                             ___lwtofl@c 0018               __end_of_vscp_getFamilyCode 5880  
                          ?__RegsToCANID 000E              __size_of_ECANReceiveMessage 020E  
           __size_of_getCalibrationValue 0048                       sendVSCPFrame@pData 0066  
             __end_of_vscp_getFamilyType 5876          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0034          __size_of_vscp_setManufacturerId 0018  
               __end_of_vscp_writeAppReg 1370                   getVSCPFrame@pvscpclass 002D  
                __end_of_init_app_eeprom 259A                     ??_Celsius2Fahrenheit 0042  
            __end_of_vscp_setControlByte 57EE                 __end_of_vscp_writeStdReg 3ACA  
                     __RegsToCANID@Value 0014                                  ??_floor 0046  
                                ??_ldexp 0043                                  ??_frexp 0014  
                          ?_setEventData 007C                     ??_vscp_writeRegister 0035  
        __end_of_vscp_handleDropNickname 54DA                             _getVSCPFrame 4E2A  
                             __pbssBANK0 00B3                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                       __size_of_eval_poly 00C0  
             __end_of_vscp_getBufferSize 58AC                         Celsius2Kelvin@tc 002C  
                  vscp_writeRegister@reg 0035                   ??_ECANSetOperationMode 000E  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 000E  
                        _writeCoeffs2Ram 4ACA                                  ?___flge 000E  
        __end_of_vscp_getSubMinorVersion 58B0                 ECANSetOperationMode@mode 000E  
                                ?___wmul 0012                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0048  
                         doWork@setpoint 0195                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 51AE  
                      __end_of___asfldiv 5164                         WriteTimer0@timer 0010  
                              ?___altofl 008A                        __end_of___asflmul 50CE  
                                _ECANCON 000F77                        __end_of___asflsub 5036  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 018C                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 0018                      vscp_writeStdReg@idx 0030  
                    vscp_writeStdReg@reg 0033             __end_of_vscp_doOneSecondWork 511A  
                                i1l12248 0466                       _adc_series_counter 0049  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0062  
                             _high_alarm 00B4          __end_of_interrupt_at_low_vector 04B2  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 451C  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 4EA2  
             __end_of_vscp_getMatrixInfo 5740                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 0046                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 007C  
                     _vscp_goActiveState 56D0                   __size_of_sendVSCPFrame 00B2  
           __end_of_vscp_getMajorVersion 58B4                       __size_of_vscp_init 0048  
              vscp_writeStdReg@code_1145 002C                               _readEEPROM 5800  
                 _vscp_getManufacturerId 57A0                   _vscp_setManufacturerId 5740  
                        _ECANSendMessage 3ACA                      ?_vscp_goActiveState 0001  
                                _OpenADC 4F8C                                  __Hparam 0000  
                        ??_vscp_getEvent 0032                         ??_Celsius2Kelvin 0030  
                                __Lparam 0000                       _vscp_node_substate 004E  
             __end_of_vscp_getSegmentCRC 5894               ??_vscp_handleProtocolEvent 007F  
                          ??_getCANFrame 0022                 vscp_writeStdReg@idx_1146 0031  
      __end_of_vscp_getRegisterPagesUsed 58AA                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 4760                          __size_of___flge 004C  
                                ___fladd 3D94                                  ___fldiv 497E  
                                ___flneg 5620                                  ___lbmod 5584  
                                ___flmul 4446                                  ___flsub 534E  
                                ___fltol 4B6A                          __size_of___wmul 003A  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 0AA8  
                           __psmallconst 0600                               ??___altofl 0046  
                   __end_of_init_app_ram 52CE                               ??___flpack 0014  
                     _vscp_sendHeartBeat 55D4                                  __pcinit 52CE  
                             ??___awtofl 001C                           _vscp_deviceURL 0600  
                      __end_of_eval_poly 46A0                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 426E  
                                __ptext1 1370                                  __ptext2 5506  
                                __ptext3 511A                                  __ptext4 5164  
                                __ptext5 4760                                  __ptext6 51AE  
                                __ptext7 4044                                  __ptext8 371A  
                                __ptext9 5620                               ??___lwtofl 001C  
                         _vscp_getUserID 57B4                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E4  
                           __size_of_log 012E                    vscp_writeStdReg@value 0022  
                       ___aldiv@dividend 007C                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00B6  
                                doWork@B 018A                                  doWork@i 019B  
                                doWork@j 0190                                  doWork@v 0186  
                    __end_of_WriteTimer0 5836                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 0014                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 5306                                  exp@sign 00A3  
           __end_of_vscp_handleHeartbeat 534E                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 4B6A  
                   __end_of_sendCANFrame 53C6                               doWork@Rinf 0166  
                     doOneSecondWork@tmp 0089                               doWork@temp 0197  
              vscp_handleProtocolEvent@i 0098                vscp_handleProtocolEvent@j 0099  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 55AC                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0086  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 0084  
                         _vscp_setUserID 5758                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0620      __end_of_vscp_writeNicknamePermanent 5824  
            _vscp_writeNicknamePermanent 5812                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 481C                   __end_of_vscp_getUserID 57C8  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 5286                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 5506            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0087  
               __size_of_vscp_readAppReg 0728                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001A                         writeCoeffs2Ram@i 001D  
                       writeCoeffs2Ram@j 001F                              ___fldiv@exp 0040  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 00E4  
                     _vscp_setSegmentCRC 57EE                        readEEPROM@address 000E  
                           ??_ConvertADC 000E               vscp_handleProtocolEvent@cb 0091  
                __end_of_ECANSendMessage 3C30                        vscp_readStdReg@rv 0013  
                            ___lbmod@rem 0011                              ___flmul@exp 006F  
                          ?__CANIDToRegs 000E                     __end_of__RegsToCANID 3D94  
                    _getCalibrationValue 51AE                              ?_readEEPROM 000E  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 55D4  
                             _vscp_error 589C                     _vscp_doOneSecondWork 50CE  
                     i1WriteTimer0@timer 0003                               _vscp_timer 011C  
                 __end_of_vscp_setUserID 5770                 __size_of_doOneSecondWork 0208  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 497E  
                         ?_sendVSCPFrame 0060                           __end_of___flge 5082  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 543C  
                        ?_vscp_getUserID 0001                           __end_of_doWork 1E18  
           __end_of_vscp_getMinorVersion 58B2                              _WriteTimer0 5824  
                   _vscp_getMajorVersion 58B2                       __end_of_ConvertADC 58A4  
                   ?_getCalibrationValue 0012                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 0097                        ?_vscp_writeAppReg 0021  
                    start_initialization 52CE                               eval_poly@d 007A  
                             eval_poly@n 007B                               eval_poly@x 0076  
                             ldexp@value 0081          __size_of_vscp_handleSetNickname 0024  
                            __end_of_exp 38FE                              __end_of_log 4172  
                     ??_vscp_writeAppReg 0022                            _sendTempEvent 4D24  
                      ?_vscp_writeStdReg 0022                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 000E  
                     ??_vscp_writeStdReg 0023                       _vscp_getFamilyCode 5876  
                    __end_of_handle_sync 4E2A                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 586C                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 570C                     Celsius2Fahrenheit@tc 0076  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 3304                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 0048  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 0017  
                      ??_vscp_getSubzone 0012                                 ??___flge 0016  
               __end_of__ECANPointBuffer 4F18                        __CANIDToRegs@type 0014  
                            _getCANFrame 54DA                                 ??___wmul 0016  
                               ??_doWork 00A4                       _vscp_getBufferSize 58AA  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 3512                      ??_vscp_readRegister 0015  
         __size_of_vscp_goBootloaderMode 0010                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 0014                    __end_ofi1_WriteTimer0 5848  
          __end_of_vscp_goBootloaderMode 5858                     _vscp_handleHeartbeat 5310  
                     __end_of_OpenTimer0 570C                        __size_of___altofl 0048  
                      __size_of___flpack 00C0                                ___asfladd 5164  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                    __size_of_readEEPROM 0012                                ___asfldiv 511A  
                            __pbssBIGRAM 019C                                ___asflmul 5082  
                              ___asflsub 4FE8             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0060                            __pcstackBANK1 0166  
                         ?_sendTempEvent 0001                         _vscp_alarmstatus 004B  
            __size_of_Celsius2Fahrenheit 0074                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 003C                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 0011                     __end_ofi1_ConvertADC 58A8  
                          ?_vscp_setGUID 0011              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0018                        ??_vscp_readAppReg 0012  
                      sendVSCPFrame@size 0065                __end_of_vscp_readRegister 5726  
                           _init_app_ram 5286                     getCalibrationValue@i 0019  
                            _doWork$2270 0176                              _doWork$2268 016E  
                            _doWork$2269 0172             __size_of_vscp_setControlByte 0012  
                          doWork@avarage 0191                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 0013                     ??_vscp_getBufferSize 000E  
                           _current_temp 0100                        OpenADC@portconfig 000F  
                               ?_OpenADC 000E                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 5726                   _vscp_handleSetNickname 5644  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 0067  
                         _ECANInitialize 4C08                                 ?___aldiv 007C  
                               ?___fladd 001D                                 ?___fldiv 002C  
                              __ptext100 5836                                __ptext101 58A4  
                              __ptext102 0000                                 ?___flneg 000E  
                               ?___lbmod 000E                                 ?___flmul 0060  
                               ?___flsub 0076                                 ?___fltol 0076  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 0012  
                            __pintcodelo 0218                        ??_doOneSecondWork 0087  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1155 008F  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 538A  
                            __smallconst 0600                               ?___asfladd 002C  
                      WriteTimer0@timer0 000E                               ?___asfldiv 0060  
                             ?___asflmul 0076                               ?___asflsub 007E  
                     _vscp_getSegmentCRC 588A                           ??_vscp_getGUID 0012  
                              _eval_poly 45E0                              _handle_sync 4DA8  
                         ??_vscp_getZone 0012           __end_of_vscp_getManufacturerId 57B4  
         __end_of_vscp_setManufacturerId 5758                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1154 008E                           __size_of_floor 00FC  
                         __size_of_ldexp 00A4                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 011A  
                   vscp_writeStdReg@code 0028                          ___aldiv@divisor 0080  
                        ___aldiv@counter 0084                           ___wmul@product 0016  
                 ??_vscp_doOneSecondWork 007F                   sendVSCPFrame@vscpclass 0060  
                          OpenADC@config 0012                     _vscp_getMinorVersion 58B0  
                              _sendTimer 004A                                 _PIE1bits 000F9D  
                              _low_alarm 00B5                    __size_of_setEventData 00B0  
                 __end_of_ECANInitialize 4C9E                                 i1u720_20 028E  
                               i1u720_21 028C                                 i1u721_20 0298  
                               i1u721_21 0296                                 i1u730_20 03FC  
                               i1u722_20 02A0                                 i1u730_21 03FA  
                               i1u722_21 029E                                 i1u731_20 043A  
                               i1u723_20 02B4                                 i1u731_21 0438  
                               i1u723_21 02B2                                 i1u732_20 044A  
                               i1u724_20 02BE                                 i1u732_21 0448  
                               i1u724_21 02BC                                 i1u725_20 02CA  
                               i1u725_21 02C8                                 i1u726_20 0304  
                               i1u718_20 023C                                 i1u726_21 0302  
                               i1u718_21 023A                                 i1u727_20 0342  
                               i1u719_20 0276                                 i1u727_21 0340  
                               i1u719_21 0274                                 i1u728_20 0380  
                               i1u728_21 037E                                 i1u729_20 03BE  
                               i1u729_21 03BC                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1                         ECANSendMessage@i 0039  
                       ECANSendMessage@j 0034                    __end_of_vscp_getEvent 5584  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 0032                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 0012  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 000E  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 0044                       vscp_setUserID@data 0011  
                   __end_of__CANIDToRegs 4044                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 0012                             __RegsToCANID 3C30  
                     _vscp_probe_address 004F                          ??_sendTempEvent 0085  
            __size_of_vscp_goActiveState 001E                               ?_eval_poly 0076  
                    getVSCPFrame@pNodeId 0025                                _vscp_init 523E  
                              _vscp_imsg 00BC                                _vscp_hour 00B7  
                              _vscp_omsg 00CA                         vscp_setGUID@data 0011  
      __size_of_vscp_handleProtocolEvent 0642                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001     __size_of_vscp_writeNicknamePermanent 0012  
                       _vscp_page_select 0046                             _setEventData 48CE  
             __size_of_vscp_readRegister 001A                        _measurement_clock 0112  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 0010  
               __size_of_init_app_eeprom 0782             __end_of_vscp_restoreDefaults 589C  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 001A                             _seconds_temp 010C  
            __size_of_vscp_sendHeartBeat 0026                         __size_of_OpenADC 005C  
                       ??_vscp_getUserID 0012                          _vscp_getMDF_URL 5770  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 0160                         __size_of___fldiv 00A8  
                       __size_of___flneg 0024                         _vscp_initledfunc 004D  
                       __size_of___lbmod 0028                         __size_of___flmul 00D6  
                 ??_vscp_handleHeartbeat 0012                         __size_of___flsub 003C  
                       __size_of___fltol 009E                                 ___altofl 51F6  
                               ___flpack 46A0                         getCANFrame@flags 0023  
                           ?_WriteTimer0 000E                                 ___awtofl 543C  
                       getCANFrame@pdata 0021                                 ___lwtofl 5506  
                         sendTempEvent@i 0086                  __size_of_Celsius2Kelvin 0034  
                            ??___asfladd 0032                              ??___asfldiv 0042  
                            ??___asflmul 0042                                 _exp$2274 009D  
                            ??___asflsub 0042                       __end_of_readEEPROM 5812  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 4A26                                 __ptext11 45E0  
                               __ptext20 497E                                 __ptext12 4172  
                               __ptext21 50CE                                 __ptext13 4B6A  
                               __ptext30 4F18                                 __ptext22 55D4  
                               __ptext14 4C9E                                 __ptext31 3D94  
                               __ptext23 5858                                 __ptext15 5036  
                               __ptext40 5876                                 __ptext32 5476  
                               __ptext24 5862                                 __ptext16 51F6  
                               __ptext41 5740                                 __ptext33 2CC2  
                               __ptext25 3512                                 __ptext17 4FE8  
                               __ptext50 57A0                                 __ptext42 5758  
                               __ptext34 5584                                 __ptext26 589C  
                               __ptext18 534E                                 __ptext51 57B4  
                               __ptext43 56AE                                 __ptext35 568C  
                               __ptext27 4DA8                                 __ptext19 5082  
                               __ptext60 5880                                 __ptext52 5770  
                               __ptext44 066E                                 __ptext36 38FE  
                               __ptext28 4D24                                 __ptext61 5644  
                               __ptext53 57C8                                 __ptext45 570C  
                               __ptext37 5894                                 __ptext29 48CE  
                               __ptext70 3ACA                                 __ptext62 5310  
                               __ptext54 58AE                                 __ptext46 4362  
                               __ptext38 1E18                                 __ptext71 3EF4  
                               __ptext63 5848                                 __ptext55 58B0  
                               __ptext47 58A8                                 __ptext39 586C  
                               __ptext80 57EE                                 __ptext72 555A  
                               __ptext64 5726                                 __ptext56 58B2  
                               __ptext48 58AA                                 __ptext81 588A  
                               __ptext73 4E2A                                 __ptext65 451C  
                               __ptext57 5530                                 __ptext49 58AC  
                               __ptext90 5286                                 __ptext82 5800  
                               __ptext74 54DA                                 __ptext66 56D0  
                               __ptext58 54AA                                 __ptext91 4ACA  
                               __ptext83 5812                                 __ptext75 3304  
                               __ptext67 55AC                                 __ptext59 523E  
                               __ptext92 5402                                 __ptext84 55FA  
                               __ptext76 3C30                                 __ptext68 481C  
                               __ptext93 58A0                                 __ptext85 53C6  
                               __ptext77 4EA2                                 __ptext69 538A  
                               __ptext94 5824                                 __ptext86 4C08  
                               __ptext78 5668                                 __ptext95 543C  
                               __ptext87 5788                                 __ptext79 57DC  
                               __ptext96 4446                                 __ptext88 4F8C  
                               __ptext97 46A0                                 __ptext89 56EE  
                               __ptext98 259A                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5858                         ??_vscp_setUserID 0012  
                          __size_of_main 00F4                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0D02                      _vscp_check_pstorage 5668  
                          init_app_ram@i 0021           vscp_handleProtocolEvent@i_1153 0095  
         vscp_handleProtocolEvent@i_1156 0097           vscp_handleProtocolEvent@i_1164 0092  
                       doOneSecondWork@i 008A                     __end_of_vscp_getGUID 57DC  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 01CC  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 586C                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 56D0                       vscp_readAppReg@reg 0013  
                     vscp_readAppReg@pos 0012                             i1_ConvertADC 58A4  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                         init_app_eeprom@i 0011  
                    _vscp_setControlByte 57DC                                 exp@coeff 0620  
                  ___flmul@f3_as_product 0070                                 log@coeff 0648  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 259A  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 0042             ??_vscp_readNicknamePermanent 0012  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004C  
                        _vscp_readStdReg 4362             vscp_handleDropNickname@bytes 0012  
             __end_of_vscp_newNodeOnline 555A                       _ECANReceiveMessage 3304  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 00B8  
                        sendVSCPFrame@id 007B                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5788                     ?_vscp_setControlByte 0001  
                          _timeout_clock 0116                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 00BB                             handle_sync@i 0089  
                        _doOneSecondWork 3512                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 51F6  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 0150                           readEEPROM@data 0011  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 58AE              _vscp_getBootLoaderAlgorithm 58AC  
       __size_of_interrupt_at_low_vector 029A                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 5620                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0012  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5848  
             __end_of_Celsius2Fahrenheit 4F8C             __end_of_ECANSetOperationMode 57A0  
                   _vscp_restoreDefaults 5894              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0012                  __end_of_vscp_getSubzone 5862  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 0085                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 56AE                       __end_of_vscp_error 58A0  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 00B3  
         __end_of_vscp_handleSetNickname 5668       vscp_handleProtocolEvent@bytes_1161 0094  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 0015  
                           ___fladd@exp1 002B                             ___fladd@exp2 002A  
                           ___fladd@sign 0029                             __CANIDToRegs 3EF4  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 0086  
                          ___asfladd@f1p 002C              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002E                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 0062  

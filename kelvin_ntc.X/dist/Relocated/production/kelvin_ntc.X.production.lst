

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Nov 15 22:42:05 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000B00                     __psmallconst:
   122                           	opt stack 0
   123  000B00                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000B00  77                 	db	119
   126  000B01  77                 	db	119
   127  000B02  77                 	db	119
   128  000B03  2E                 	db	46
   129  000B04  65                 	db	101
   130  000B05  75                 	db	117
   131  000B06  72                 	db	114
   132  000B07  6F                 	db	111
   133  000B08  73                 	db	115
   134  000B09  6F                 	db	111
   135  000B0A  75                 	db	117
   136  000B0B  72                 	db	114
   137  000B0C  63                 	db	99
   138  000B0D  65                 	db	101
   139  000B0E  2E                 	db	46
   140  000B0F  73                 	db	115
   141  000B10  65                 	db	101
   142  000B11  2F                 	db	47
   143  000B12  6E                 	db	110
   144  000B13  74                 	db	116
   145  000B14  63                 	db	99
   146  000B15  31                 	db	49
   147  000B16  30                 	db	48
   148  000B17  4B                 	db	75
   149  000B18  41                 	db	65
   150  000B19  5F                 	db	95
   151  000B1A  33                 	db	51
   152  000B1B  2E                 	db	46
   153  000B1C  78                 	db	120
   154  000B1D  6D                 	db	109
   155  000B1E  6C                 	db	108
   156  000B1F  00                 	db	0
   157  000B20                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000B20                     exp@coeff:
   160                           	opt stack 0
   161  000B20  0000               	dw	0
   162  000B22  3F80               	dw	16256
   163  000B24  7218               	dw	29208
   164  000B26  3F31               	dw	16177
   165  000B28  FDF0               	dw	65008
   166  000B2A  3E75               	dw	15989
   167  000B2C  5847               	dw	22599
   168  000B2E  3D63               	dw	15715
   169  000B30  9558               	dw	38232
   170  000B32  3C1D               	dw	15389
   171  000B34  C482               	dw	50306
   172  000B36  3AAE               	dw	15022
   173  000B38  78A8               	dw	30888
   174  000B3A  3921               	dw	14625
   175  000B3C  93EF               	dw	37871
   176  000B3E  3780               	dw	14208
   177  000B40  92A0               	dw	37536
   178  000B42  35A7               	dw	13735
   179  000B44  5646               	dw	22086
   180  000B46  3415               	dw	13333
   181  000B48                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000B48                     log@coeff:
   184                           	opt stack 0
   185  000B48  0000               	dw	0
   186  000B4A  0000               	dw	0
   187  000B4C  FFC4               	dw	65476
   188  000B4E  3F7F               	dw	16255
   189  000B50  EF80               	dw	61312
   190  000B52  BEFF               	dw	48895
   191  000B54  E190               	dw	57744
   192  000B56  3EA9               	dw	16041
   193  000B58  82EC               	dw	33516
   194  000B5A  BE76               	dw	48758
   195  000B5C  AD82               	dw	44418
   196  000B5E  3E2B               	dw	15915
   197  000B60  3C0E               	dw	15374
   198  000B62  BDC3               	dw	48579
   199  000B64  D187               	dw	53639
   200  000B66  3D13               	dw	15635
   201  000B68  7841               	dw	30785
   202  000B6A  BBD3               	dw	48083
   203  000B6C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  000B6C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  005814                     __pcinit:
   305                           	opt stack 0
   306  005814                     start_initialization:
   307                           	opt stack 0
   308  005814                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  005814  EE01  F07E         	lfsr	0,__pbssBIGRAM
   313  005818  EE13 F0C0          	lfsr	1,960
   314  00581C                     clear_0:
   315  00581C  6AEE               	clrf	postinc0,c
   316  00581E  50E5               	movf	postdec1,w,c
   317  005820  50E1               	movf	fsr1l,w,c
   318  005822  E1FC               	bnz	clear_0
   319  005824  50E2               	movf	fsr1h,w,c
   320  005826  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (72 bytes)
   323  005828  EE01  F000         	lfsr	0,__pbssBANK1
   324  00582C  0E48               	movlw	72
   325  00582E                     clear_1:
   326  00582E  6AEE               	clrf	postinc0,c
   327  005830  06E8               	decf	wreg,f,c
   328  005832  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (67 bytes)
   331  005834  EE00  F060         	lfsr	0,__pbssBANK0
   332  005838  0E43               	movlw	67
   333  00583A                     clear_2:
   334  00583A  6AEE               	clrf	postinc0,c
   335  00583C  06E8               	decf	wreg,f,c
   336  00583E  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  005840  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  005844  0E0D               	movlw	13
   341  005846                     clear_3:
   342  005846  6AEE               	clrf	postinc0,c
   343  005848  06E8               	decf	wreg,f,c
   344  00584A  E1FD               	bnz	clear_3
   345  00584C                     end_of_initialization:
   346                           	opt stack 0
   347  00584C                     __end_of__initialization:
   348                           	opt stack 0
   349  00584C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  00584E  6EF8               	movwf	tblptru,c
   351  005850  0100               	movlb	0
   352  005852  EF5E  F024         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _vscp_alarmstatus:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_guid_reset:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_initledfunc:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_minute:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  000060                     __pbssBANK0:
   408                           	opt stack 0
   409  000060                     _current_temp:
   410                           	opt stack 0
   411  000060                     	ds	12
   412  00006C                     _seconds_temp:
   413                           	opt stack 0
   414  00006C                     	ds	6
   415  000072                     _measurement_clock:
   416                           	opt stack 0
   417  000072                     	ds	4
   418  000076                     _timeout_clock:
   419                           	opt stack 0
   420  000076                     	ds	4
   421  00007A                     _sendTimer:
   422                           	opt stack 0
   423  00007A                     	ds	2
   424  00007C                     _vscp_configtimer:
   425                           	opt stack 0
   426  00007C                     	ds	2
   427  00007E                     _vscp_timer:
   428                           	opt stack 0
   429  00007E                     	ds	2
   430  000080                     _adc_conversion_flags:
   431                           	opt stack 0
   432  000080                     	ds	1
   433  000081                     _high_alarm:
   434                           	opt stack 0
   435  000081                     	ds	1
   436  000082                     _low_alarm:
   437                           	opt stack 0
   438  000082                     	ds	1
   439  000083                     _seconds:
   440                           	opt stack 0
   441  000083                     	ds	1
   442  000084                     _vscp_hour:
   443                           	opt stack 0
   444  000084                     	ds	1
   445  000085                     _vscp_initbtncnt:
   446                           	opt stack 0
   447  000085                     	ds	1
   448  000086                     _vscp_nickname:
   449                           	opt stack 0
   450  000086                     	ds	1
   451  000087                     _vscp_node_state:
   452                           	opt stack 0
   453  000087                     	ds	1
   454  000088                     _vscp_imsg:
   455                           	opt stack 0
   456  000088                     	ds	14
   457  000096                     _vscp_omsg:
   458                           	opt stack 0
   459  000096                     	ds	13
   460                           tblptru	equ	0xFF8
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           fsr1h	equ	0xFE2
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	bssBANK1
   468  000100                     __pbssBANK1:
   469                           	opt stack 0
   470  000100                     _sh_coefficients:
   471                           	opt stack 0
   472  000100                     	ds	72
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  00017E                     __pbssBIGRAM:
   482                           	opt stack 0
   483  00017E                     _adc:
   484                           	opt stack 0
   485  00017E                     	ds	960
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK1
   494  000148                     __pcstackBANK1:
   495                           	opt stack 0
   496  000148                     doWork@Rinf:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x0
   500  000148                     	ds	4
   501  00014C                     doWork@calVoltage:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  00014C                     	ds	4
   506  000150                     _doWork$2270:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x8
   510  000150                     	ds	4
   511  000154                     _doWork$2271:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xC
   515  000154                     	ds	4
   516  000158                     _doWork$2272:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x10
   520  000158                     	ds	16
   521  000168                     doWork@v:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x20
   525  000168                     	ds	4
   526  00016C                     doWork@B:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x24
   530  00016C                     	ds	2
   531  00016E                     doWork@resistance:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x26
   535  00016E                     	ds	4
   536  000172                     doWork@j:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x2A
   540  000172                     	ds	1
   541  000173                     doWork@setpoint:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x2B
   545  000173                     	ds	2
   546  000175                     doWork@avarage:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x2D
   550  000175                     	ds	4
   551  000179                     doWork@temp:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x31
   555  000179                     	ds	4
   556  00017D                     doWork@i:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x35
   560  00017D                     	ds	1
   561                           tblptru	equ	0xFF8
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1h	equ	0xFE2
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	cstackBANK0
   569  0000A3                     __pcstackBANK0:
   570                           	opt stack 0
   571  0000A3                     ??_ldexp:
   572  0000A3                     ?_sendVSCPFrame:
   573                           	opt stack 0
   574  0000A3                     ?___fldiv:
   575                           	opt stack 0
   576  0000A3                     ___aldiv@counter:
   577                           	opt stack 0
   578  0000A3                     sendVSCPFrame@vscpclass:
   579                           	opt stack 0
   580  0000A3                     ___fldiv@f1:
   581                           	opt stack 0
   582                           
   583                           ; 4 bytes @ 0x0
   584  0000A3                     	ds	1
   585  0000A4                     ___aldiv@sign:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x1
   589  0000A4                     	ds	1
   590  0000A5                     sendVSCPFrame@vscptype:
   591                           	opt stack 0
   592  0000A5                     ___aldiv@quotient:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x2
   596  0000A5                     	ds	1
   597  0000A6                     sendVSCPFrame@nodeid:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x3
   601  0000A6                     	ds	1
   602  0000A7                     sendVSCPFrame@priority:
   603                           	opt stack 0
   604  0000A7                     ___fldiv@f2:
   605                           	opt stack 0
   606                           
   607                           ; 4 bytes @ 0x4
   608  0000A7                     	ds	1
   609  0000A8                     sendVSCPFrame@size:
   610                           	opt stack 0
   611                           
   612                           ; 1 bytes @ 0x5
   613  0000A8                     	ds	1
   614  0000A9                     ?___altofl:
   615                           	opt stack 0
   616  0000A9                     sendVSCPFrame@pData:
   617                           	opt stack 0
   618  0000A9                     ___altofl@c:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x6
   622  0000A9                     	ds	1
   623  0000AA                     ??_sendVSCPFrame:
   624                           
   625                           ; 0 bytes @ 0x7
   626  0000AA                     	ds	3
   627  0000AD                     ___altofl@sign:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0xA
   631  0000AD                     	ds	1
   632  0000AE                     ?_floor:
   633                           	opt stack 0
   634  0000AE                     floor@x:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0xB
   638  0000AE                     	ds	4
   639  0000B2                     ___fldiv@cntr:
   640                           	opt stack 0
   641  0000B2                     floor@i:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0xF
   645  0000B2                     	ds	1
   646  0000B3                     ___fldiv@f3:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0x10
   650  0000B3                     	ds	3
   651  0000B6                     floor@expon:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x13
   655  0000B6                     	ds	1
   656  0000B7                     ___fldiv@exp:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x14
   660  0000B7                     	ds	1
   661  0000B8                     ___fldiv@sign:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0x15
   665  0000B8                     	ds	1
   666  0000B9                     ?_exp:
   667                           	opt stack 0
   668  0000B9                     ?_log:
   669                           	opt stack 0
   670  0000B9                     ?_Celsius2Fahrenheit:
   671                           	opt stack 0
   672  0000B9                     ?___asfldiv:
   673                           	opt stack 0
   674  0000B9                     ___asfldiv@f1p:
   675                           	opt stack 0
   676  0000B9                     Celsius2Fahrenheit@tc:
   677                           	opt stack 0
   678  0000B9                     exp@x:
   679                           	opt stack 0
   680  0000B9                     log@x:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x16
   684  0000B9                     	ds	2
   685  0000BB                     ___asfldiv@f2:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x18
   689  0000BB                     	ds	2
   690  0000BD                     ?_setEventData:
   691                           	opt stack 0
   692  0000BD                     setEventData@v:
   693                           	opt stack 0
   694  0000BD                     _exp$2276:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x1A
   698  0000BD                     	ds	1
   699  0000BE                     sendVSCPFrame@id:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x1B
   703  0000BE                     	ds	1
   704  0000BF                     setEventData@unit:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x1C
   708  0000BF                     	ds	1
   709  0000C0                     setEventData@newval:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x1D
   713  0000C0                     	ds	1
   714  0000C1                     exp@exponent:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x1E
   718  0000C1                     	ds	1
   719  0000C2                     ??_vscp_handleProtocolEvent:
   720  0000C2                     ??_vscp_doOneSecondWork:
   721                           
   722                           ; 0 bytes @ 0x1F
   723  0000C2                     	ds	1
   724  0000C3                     exp@sign:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x20
   728  0000C3                     	ds	1
   729  0000C4                     ??_doWork:
   730  0000C4                     setEventData@ival:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x21
   734  0000C4                     	ds	2
   735  0000C6                     ??_handle_sync:
   736  0000C6                     ??_doOneSecondWork:
   737                           
   738                           ; 0 bytes @ 0x23
   739  0000C6                     	ds	2
   740  0000C8                     doOneSecondWork@tmp:
   741                           	opt stack 0
   742  0000C8                     handle_sync@i:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x25
   746  0000C8                     	ds	1
   747  0000C9                     doOneSecondWork@i:
   748                           	opt stack 0
   749  0000C9                     vscp_handleProtocolEvent@page_save:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x26
   753  0000C9                     	ds	2
   754  0000CB                     vscp_handleProtocolEvent@page_save_1167:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x28
   758  0000CB                     	ds	2
   759  0000CD                     vscp_handleProtocolEvent@offset:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x2A
   763  0000CD                     	ds	1
   764  0000CE                     vscp_handleProtocolEvent@pos:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0x2B
   768  0000CE                     	ds	1
   769  0000CF                     vscp_handleProtocolEvent@bytes:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x2C
   773  0000CF                     	ds	1
   774  0000D0                     vscp_handleProtocolEvent@len:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x2D
   778  0000D0                     	ds	1
   779  0000D1                     vscp_handleProtocolEvent@pos_1156:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x2E
   783  0000D1                     	ds	1
   784  0000D2                     vscp_handleProtocolEvent@len_1157:
   785                           	opt stack 0
   786                           
   787                           ; 1 bytes @ 0x2F
   788  0000D2                     	ds	1
   789  0000D3                     vscp_handleProtocolEvent@bytes_this_time:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x30
   793  0000D3                     	ds	1
   794  0000D4                     vscp_handleProtocolEvent@cb:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x31
   798  0000D4                     	ds	1
   799  0000D5                     vscp_handleProtocolEvent@i_1166:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x32
   803  0000D5                     	ds	1
   804  0000D6                     vscp_handleProtocolEvent@k:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x33
   808  0000D6                     	ds	1
   809  0000D7                     vscp_handleProtocolEvent@i_1155:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x34
   813  0000D7                     	ds	1
   814  0000D8                     vscp_handleProtocolEvent@byte:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x35
   818  0000D8                     	ds	1
   819  0000D9                     vscp_handleProtocolEvent@bytes_1162:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x36
   823  0000D9                     	ds	2
   824  0000DB                     vscp_handleProtocolEvent@i_1158:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x38
   828  0000DB                     	ds	1
   829  0000DC                     vscp_handleProtocolEvent@i:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x39
   833  0000DC                     	ds	1
   834  0000DD                     vscp_handleProtocolEvent@j:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x3A
   838  0000DD                     	ds	1
   839  0000DE                     main@i:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x3B
   843  0000DE                     	ds	1
   844                           tblptru	equ	0xFF8
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1h	equ	0xFE2
   849                           fsr1l	equ	0xFE1
   850                           
   851                           	psect	cstackCOMRAM
   852  000001                     __pcstackCOMRAM:
   853                           	opt stack 0
   854  000001                     ?i1_WriteTimer0:
   855                           	opt stack 0
   856  000001                     i1WriteTimer0@timer0:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x0
   860  000001                     	ds	2
   861  000003                     i1WriteTimer0@timer:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x2
   865  000003                     	ds	2
   866  000005                     ??_interrupt_at_low_vector:
   867                           
   868                           ; 0 bytes @ 0x4
   869  000005                     	ds	9
   870  00000E                     ?_WriteTimer0:
   871                           	opt stack 0
   872  00000E                     ?_writeEEPROM:
   873                           	opt stack 0
   874  00000E                     ?_OpenADC:
   875                           	opt stack 0
   876  00000E                     ?__CANIDToRegs:
   877                           	opt stack 0
   878  00000E                     ?__RegsToCANID:
   879                           	opt stack 0
   880  00000E                     ??_vscp_getMDF_URL:
   881  00000E                     ?___flge:
   882                           	opt stack 0
   883  00000E                     ?_readEEPROM:
   884                           	opt stack 0
   885  00000E                     ?___lbmod:
   886                           	opt stack 0
   887  00000E                     ?__ECANPointBuffer:
   888                           	opt stack 0
   889  00000E                     ?___flpack:
   890                           	opt stack 0
   891  00000E                     ?_frexp:
   892                           	opt stack 0
   893  00000E                     ?_vscp_getFamilyCode:
   894                           	opt stack 0
   895  00000E                     ?_vscp_getFamilyType:
   896                           	opt stack 0
   897  00000E                     ?___flneg:
   898                           	opt stack 0
   899  00000E                     vscp_getMatrixInfo@pData:
   900                           	opt stack 0
   901  00000E                     ECANSetOperationMode@mode:
   902                           	opt stack 0
   903  00000E                     OpenADC@config2:
   904                           	opt stack 0
   905  00000E                     OpenTimer0@config:
   906                           	opt stack 0
   907  00000E                     ___lbmod@divisor:
   908                           	opt stack 0
   909  00000E                     __CANIDToRegs@ptr:
   910                           	opt stack 0
   911  00000E                     __RegsToCANID@ptr:
   912                           	opt stack 0
   913  00000E                     writeEEPROM@address:
   914                           	opt stack 0
   915  00000E                     readEEPROM@address:
   916                           	opt stack 0
   917  00000E                     WriteTimer0@timer0:
   918                           	opt stack 0
   919  00000E                     ___flpack@arg:
   920                           	opt stack 0
   921  00000E                     ___flge@ff1:
   922                           	opt stack 0
   923  00000E                     ___flneg@f1:
   924                           	opt stack 0
   925  00000E                     frexp@value:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0xD
   929  00000E                     	ds	1
   930  00000F                     vscp_getMDF_URL@idx:
   931                           	opt stack 0
   932  00000F                     vscp_getMatrixInfo@i:
   933                           	opt stack 0
   934  00000F                     OpenADC@portconfig:
   935                           	opt stack 0
   936  00000F                     ___lbmod@dividend:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0xE
   940  00000F                     	ds	1
   941  000010                     ??_OpenADC:
   942  000010                     __RegsToCANID@val:
   943                           	opt stack 0
   944  000010                     writeEEPROM@data:
   945                           	opt stack 0
   946  000010                     ___lbmod@counter:
   947                           	opt stack 0
   948  000010                     WriteTimer0@timer:
   949                           	opt stack 0
   950  000010                     __CANIDToRegs@val:
   951                           	opt stack 0
   952                           
   953                           ; 4 bytes @ 0xF
   954  000010                     	ds	1
   955  000011                     ?_vscp_setGUID:
   956                           	opt stack 0
   957  000011                     ?_vscp_setUserID:
   958                           	opt stack 0
   959  000011                     ?_vscp_setManufacturerId:
   960                           	opt stack 0
   961  000011                     init_app_eeprom@i:
   962                           	opt stack 0
   963  000011                     vscp_setGUID@data:
   964                           	opt stack 0
   965  000011                     vscp_setUserID@data:
   966                           	opt stack 0
   967  000011                     vscp_setManufacturerId@data:
   968                           	opt stack 0
   969  000011                     vscp_goBootloaderMode@algorithm:
   970                           	opt stack 0
   971  000011                     vscp_writeNicknamePermanent@nickname:
   972                           	opt stack 0
   973  000011                     vscp_setSegmentCRC@crc:
   974                           	opt stack 0
   975  000011                     vscp_setControlByte@ctrl:
   976                           	opt stack 0
   977  000011                     __RegsToCANID@type:
   978                           	opt stack 0
   979  000011                     __ECANPointBuffer@b:
   980                           	opt stack 0
   981  000011                     readEEPROM@data:
   982                           	opt stack 0
   983  000011                     ___lbmod@rem:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x10
   987  000011                     	ds	1
   988  000012                     ??__RegsToCANID:
   989  000012                     ?_getCalibrationValue:
   990                           	opt stack 0
   991  000012                     ?___wmul:
   992                           	opt stack 0
   993  000012                     vscp_readAppReg@pos:
   994                           	opt stack 0
   995  000012                     vscp_getGUID@idx:
   996                           	opt stack 0
   997  000012                     vscp_setGUID@idx:
   998                           	opt stack 0
   999  000012                     vscp_getUserID@idx:
  1000                           	opt stack 0
  1001  000012                     vscp_setUserID@idx:
  1002                           	opt stack 0
  1003  000012                     vscp_getManufacturerId@idx:
  1004                           	opt stack 0
  1005  000012                     vscp_setManufacturerId@idx:
  1006                           	opt stack 0
  1007  000012                     vscp_handleDropNickname@bytes:
  1008                           	opt stack 0
  1009  000012                     OpenADC@config:
  1010                           	opt stack 0
  1011  000012                     ___flpack@exp:
  1012                           	opt stack 0
  1013  000012                     __ECANPointBuffer@pt:
  1014                           	opt stack 0
  1015  000012                     frexp@eptr:
  1016                           	opt stack 0
  1017  000012                     ___wmul@multiplier:
  1018                           	opt stack 0
  1019  000012                     ___flge@ff2:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x11
  1023  000012                     	ds	1
  1024  000013                     ??_vscp_readStdReg:
  1025  000013                     vscp_readAppReg@reg:
  1026                           	opt stack 0
  1027  000013                     ___flpack@sign:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x12
  1031  000013                     	ds	1
  1032  000014                     ??_getCalibrationValue:
  1033  000014                     ??___flpack:
  1034  000014                     ??_frexp:
  1035  000014                     vscp_readAppReg@rv:
  1036                           	opt stack 0
  1037  000014                     __CANIDToRegs@type:
  1038                           	opt stack 0
  1039  000014                     __RegsToCANID@Value:
  1040                           	opt stack 0
  1041  000014                     ___wmul@multiplicand:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x13
  1045  000014                     	ds	1
  1046  000015                     ??__CANIDToRegs:
  1047  000015                     ?_ECANReceiveMessage:
  1048                           	opt stack 0
  1049  000015                     ECANReceiveMessage@data:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x14
  1053  000015                     	ds	1
  1054  000016                     ECANReceiveMessage@dataLen:
  1055                           	opt stack 0
  1056  000016                     ___wmul@product:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x15
  1060  000016                     	ds	1
  1061  000017                     ECANReceiveMessage@msgFlags:
  1062                           	opt stack 0
  1063  000017                     __CANIDToRegs@Value:
  1064                           	opt stack 0
  1065  000017                     getCalibrationValue@cal:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x16
  1069  000017                     	ds	1
  1070  000018                     ??_writeCoeffs2Ram:
  1071  000018                     ?_ECANSendMessage:
  1072                           	opt stack 0
  1073  000018                     ?___awtofl:
  1074                           	opt stack 0
  1075  000018                     ?___lwtofl:
  1076                           	opt stack 0
  1077  000018                     ECANReceiveMessage@savedPtr:
  1078                           	opt stack 0
  1079  000018                     ___awtofl@c:
  1080                           	opt stack 0
  1081  000018                     ___lwtofl@c:
  1082                           	opt stack 0
  1083  000018                     ECANSendMessage@id:
  1084                           	opt stack 0
  1085  000018                     vscp_readStdReg@code:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x17
  1089  000018                     	ds	1
  1090  000019                     getCalibrationValue@i:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x18
  1094  000019                     	ds	1
  1095  00001A                     ECANReceiveMessage@id:
  1096                           	opt stack 0
  1097  00001A                     writeCoeffs2Ram@c:
  1098                           	opt stack 0
  1099                           
  1100                           ; 3 bytes @ 0x19
  1101  00001A                     	ds	1
  1102  00001B                     ECANReceiveMessage@i:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x1A
  1106  00001B                     	ds	1
  1107  00001C                     ECANSendMessage@data:
  1108                           	opt stack 0
  1109  00001C                     ECANReceiveMessage@mode:
  1110                           	opt stack 0
  1111  00001C                     vscp_readStdReg@code_1140:
  1112                           	opt stack 0
  1113                           
  1114                           ; 4 bytes @ 0x1B
  1115  00001C                     	ds	1
  1116  00001D                     ECANSendMessage@dataLen:
  1117                           	opt stack 0
  1118  00001D                     ECANReceiveMessage@temp:
  1119                           	opt stack 0
  1120  00001D                     ___awtofl@sign:
  1121                           	opt stack 0
  1122  00001D                     writeCoeffs2Ram@i:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x1C
  1126  00001D                     	ds	1
  1127  00001E                     ?___fladd:
  1128                           	opt stack 0
  1129  00001E                     ?___flmul:
  1130                           	opt stack 0
  1131  00001E                     ECANSendMessage@msgFlags:
  1132                           	opt stack 0
  1133  00001E                     ECANReceiveMessage@ptr:
  1134                           	opt stack 0
  1135  00001E                     ___fladd@f1:
  1136                           	opt stack 0
  1137  00001E                     ___flmul@f1:
  1138                           	opt stack 0
  1139                           
  1140                           ; 4 bytes @ 0x1D
  1141  00001E                     	ds	1
  1142  00001F                     ??_ECANSendMessage:
  1143  00001F                     writeCoeffs2Ram@j:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x1E
  1147  00001F                     	ds	1
  1148  000020                     ?_getCANFrame:
  1149                           	opt stack 0
  1150  000020                     getCANFrame@pdlc:
  1151                           	opt stack 0
  1152  000020                     vscp_readStdReg@idx:
  1153                           	opt stack 0
  1154  000020                     ECANSendMessage@pb:
  1155                           	opt stack 0
  1156                           
  1157                           ; 18 bytes @ 0x1F
  1158  000020                     	ds	1
  1159  000021                     ?_vscp_writeAppReg:
  1160                           	opt stack 0
  1161  000021                     init_app_ram@i:
  1162                           	opt stack 0
  1163  000021                     vscp_writeAppReg@val:
  1164                           	opt stack 0
  1165  000021                     getCANFrame@pdata:
  1166                           	opt stack 0
  1167  000021                     vscp_readStdReg@idx_1141:
  1168                           	opt stack 0
  1169                           
  1170                           ; 1 bytes @ 0x20
  1171  000021                     	ds	1
  1172  000022                     ?_vscp_writeStdReg:
  1173                           	opt stack 0
  1174  000022                     vscp_writeAppReg@pos:
  1175                           	opt stack 0
  1176  000022                     getCANFrame@pid:
  1177                           	opt stack 0
  1178  000022                     vscp_readStdReg@rv:
  1179                           	opt stack 0
  1180  000022                     vscp_writeStdReg@value:
  1181                           	opt stack 0
  1182  000022                     ___fladd@f2:
  1183                           	opt stack 0
  1184  000022                     ___flmul@f2:
  1185                           	opt stack 0
  1186                           
  1187                           ; 4 bytes @ 0x21
  1188  000022                     	ds	1
  1189  000023                     ??_vscp_writeStdReg:
  1190  000023                     vscp_writeAppReg@reg:
  1191                           	opt stack 0
  1192  000023                     getCANFrame@flags:
  1193                           	opt stack 0
  1194  000023                     vscp_readStdReg@reg:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x22
  1198  000023                     	ds	1
  1199  000024                     ?_getVSCPFrame:
  1200                           	opt stack 0
  1201  000024                     vscp_writeAppReg@rv:
  1202                           	opt stack 0
  1203  000024                     getVSCPFrame@pvscptype:
  1204                           	opt stack 0
  1205  000024                     vscp_readRegister@reg:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x23
  1209  000024                     	ds	1
  1210  000025                     getVSCPFrame@pNodeId:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x24
  1214  000025                     	ds	1
  1215  000026                     ??___fladd:
  1216  000026                     getVSCPFrame@pPriority:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x25
  1220  000026                     	ds	1
  1221  000027                     getVSCPFrame@pSize:
  1222                           	opt stack 0
  1223  000027                     vscp_writeStdReg@rv:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x26
  1227  000027                     	ds	1
  1228  000028                     getVSCPFrame@pData:
  1229                           	opt stack 0
  1230  000028                     vscp_writeStdReg@reg:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x27
  1234  000028                     	ds	1
  1235  000029                     ??_getVSCPFrame:
  1236  000029                     ?_vscp_writeRegister:
  1237                           	opt stack 0
  1238  000029                     vscp_writeRegister@value:
  1239                           	opt stack 0
  1240                           
  1241                           ; 1 bytes @ 0x28
  1242  000029                     	ds	1
  1243  00002A                     vscp_writeRegister@reg:
  1244                           	opt stack 0
  1245  00002A                     ___fladd@sign:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x29
  1249  00002A                     	ds	1
  1250  00002B                     ___fladd@exp2:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x2A
  1254  00002B                     	ds	1
  1255  00002C                     ___fladd@exp1:
  1256                           	opt stack 0
  1257                           
  1258                           ; 1 bytes @ 0x2B
  1259  00002C                     	ds	1
  1260  00002D                     ?_Celsius2Kelvin:
  1261                           	opt stack 0
  1262  00002D                     ?___asfladd:
  1263                           	opt stack 0
  1264  00002D                     getVSCPFrame@pvscpclass:
  1265                           	opt stack 0
  1266  00002D                     ___flmul@exp:
  1267                           	opt stack 0
  1268  00002D                     ___asfladd@f1p:
  1269                           	opt stack 0
  1270  00002D                     Celsius2Kelvin@tc:
  1271                           	opt stack 0
  1272                           
  1273                           ; 4 bytes @ 0x2C
  1274  00002D                     	ds	1
  1275  00002E                     getVSCPFrame@id:
  1276                           	opt stack 0
  1277  00002E                     ___flmul@f3_as_product:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0x2D
  1281  00002E                     	ds	1
  1282  00002F                     ___asfladd@f2:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0x2E
  1286  00002F                     	ds	2
  1287  000031                     
  1288                           ; 0 bytes @ 0x30
  1289  000031                     	ds	1
  1290  000032                     ECANSendMessage@mode:
  1291                           	opt stack 0
  1292  000032                     vscp_getEvent@rv:
  1293                           	opt stack 0
  1294  000032                     ___flmul@cntr:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x31
  1298  000032                     	ds	1
  1299  000033                     ECANSendMessage@buffers:
  1300                           	opt stack 0
  1301  000033                     ___flmul@sign:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x32
  1305  000033                     	ds	1
  1306  000034                     ?___flsub:
  1307                           	opt stack 0
  1308  000034                     ?_eval_poly:
  1309                           	opt stack 0
  1310  000034                     ?___asflmul:
  1311                           	opt stack 0
  1312  000034                     ?___fltol:
  1313                           	opt stack 0
  1314  000034                     ECANSendMessage@j:
  1315                           	opt stack 0
  1316  000034                     ___asflmul@multiplicand:
  1317                           	opt stack 0
  1318  000034                     ___flsub@f1:
  1319                           	opt stack 0
  1320  000034                     ___fltol@f1:
  1321                           	opt stack 0
  1322  000034                     eval_poly@x:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x33
  1326  000034                     	ds	1
  1327  000035                     ECANSendMessage@tempBSEL0:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x34
  1331  000035                     	ds	1
  1332  000036                     ECANSendMessage@tempPtr:
  1333                           	opt stack 0
  1334                           
  1335                           ; 2 bytes @ 0x35
  1336  000036                     	ds	2
  1337  000038                     ??___fltol:
  1338  000038                     ECANSendMessage@temp:
  1339                           	opt stack 0
  1340  000038                     ___asflmul@mp:
  1341                           	opt stack 0
  1342  000038                     eval_poly@d:
  1343                           	opt stack 0
  1344  000038                     ___flsub@f2:
  1345                           	opt stack 0
  1346                           
  1347                           ; 4 bytes @ 0x37
  1348  000038                     	ds	1
  1349  000039                     ECANSendMessage@i:
  1350                           	opt stack 0
  1351  000039                     eval_poly@n:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x38
  1355  000039                     	ds	1
  1356  00003A                     ECANSendMessage@ptr:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x39
  1360  00003A                     	ds	1
  1361  00003B                     ??_eval_poly:
  1362                           
  1363                           ; 0 bytes @ 0x3A
  1364  00003B                     	ds	1
  1365  00003C                     ?_sendCANFrame:
  1366                           	opt stack 0
  1367  00003C                     ?___asflsub:
  1368                           	opt stack 0
  1369  00003C                     ___fltol@sign1:
  1370                           	opt stack 0
  1371  00003C                     ___asflsub@f1p:
  1372                           	opt stack 0
  1373  00003C                     sendCANFrame@id:
  1374                           	opt stack 0
  1375  00003C                     eval_poly@res:
  1376                           	opt stack 0
  1377                           
  1378                           ; 4 bytes @ 0x3B
  1379  00003C                     	ds	1
  1380  00003D                     ___fltol@exp1:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x3C
  1384  00003D                     	ds	1
  1385  00003E                     ?___aldiv:
  1386                           	opt stack 0
  1387  00003E                     ___aldiv@dividend:
  1388                           	opt stack 0
  1389  00003E                     ___asflsub@f2:
  1390                           	opt stack 0
  1391                           
  1392                           ; 4 bytes @ 0x3D
  1393  00003E                     	ds	2
  1394  000040                     ?_ldexp:
  1395                           	opt stack 0
  1396  000040                     sendCANFrame@dlc:
  1397                           	opt stack 0
  1398  000040                     log@exponent:
  1399                           	opt stack 0
  1400  000040                     ldexp@value:
  1401                           	opt stack 0
  1402                           
  1403                           ; 4 bytes @ 0x3F
  1404  000040                     	ds	1
  1405  000041                     sendCANFrame@pdata:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x40
  1409  000041                     	ds	1
  1410  000042                     sendCANFrame@rv:
  1411                           	opt stack 0
  1412  000042                     ___aldiv@divisor:
  1413                           	opt stack 0
  1414                           
  1415                           ; 4 bytes @ 0x41
  1416  000042                     	ds	1
  1417  000043                     vscp_sendEvent@rv:
  1418                           	opt stack 0
  1419                           
  1420                           ; 1 bytes @ 0x42
  1421  000043                     	ds	1
  1422  000044                     ??_sendTempEvent:
  1423  000044                     ?_vscp_sendHeartBeat:
  1424                           	opt stack 0
  1425  000044                     ??_vscp_newNodeOnline:
  1426  000044                     vscp_sendHeartBeat@subzone:
  1427                           	opt stack 0
  1428  000044                     ldexp@newexp:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x43
  1432  000044                     	ds	1
  1433  000045                     sendTempEvent@i:
  1434                           	opt stack 0
  1435  000045                     vscp_sendHeartBeat@zone:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x44
  1439  000045                     	ds	1
  1440  000046                     tblptru	equ	0xFF8
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1h	equ	0xFE2
  1445                           fsr1l	equ	0xFE1
  1446                           
  1447                           ; 0 bytes @ 0x45
  1448 ;;
  1449 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1450 ;;
  1451 ;; *************** function _main *****************
  1452 ;; Defined at:
  1453 ;;		line 302 in file "../main.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;  i               1   59[BANK0 ] unsigned char 
  1458 ;; Return value:  Size  Location     Type
  1459 ;;		None               void
  1460 ;; Registers used:
  1461 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : E/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1467 ;;      Params:         0       0       0       0       0       0       0
  1468 ;;      Locals:         0       1       0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0       0       0
  1470 ;;      Totals:         0       1       0       0       0       0       0
  1471 ;;Total ram usage:        1 bytes
  1472 ;; Hardware stack levels required when called:    9
  1473 ;; This function calls:
  1474 ;;		_init
  1475 ;;		_vscp_check_pstorage
  1476 ;;		_init_app_eeprom
  1477 ;;		_vscp_init
  1478 ;;		_writeEEPROM
  1479 ;;		_vscp_getEvent
  1480 ;;		_vscp_goActiveState
  1481 ;;		_vscp_handleProbeState
  1482 ;;		_vscp_handleProtocolEvent
  1483 ;;		_handle_sync
  1484 ;;		_vscp_error
  1485 ;;		_doOneSecondWork
  1486 ;;		_vscp_doOneSecondWork
  1487 ;;		_doWork
  1488 ;; This function is called by:
  1489 ;;		Startup code after reset
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text0
  1494  0048BC                     __ptext0:
  1495                           	opt stack 0
  1496  0048BC                     _main:
  1497                           	opt stack 22
  1498                           
  1499                           ;main.c: 303: unsigned char i;
  1500                           ;main.c: 305: init();
  1501                           
  1502                           ;incstack = 0
  1503                           ;incstack = 0
  1504  0048BC  EC4A  F02C         	call	_init	;wreg free
  1505                           
  1506                           ;main.c: 309: if (!vscp_check_pstorage()) {
  1507  0048C0  ECD6  F02D         	call	_vscp_check_pstorage	;wreg free
  1508  0048C4  0900               	iorlw	0
  1509  0048C6  B4D8               	btfsc	status,2,c
  1510                           
  1511                           ;main.c: 312: init_app_eeprom();
  1512  0048C8  EC46  F015         	call	_init_app_eeprom	;wreg free
  1513                           
  1514                           ;main.c: 314: }
  1515                           ;main.c: 316: vscp_init();
  1516  0048CC  ECE8  F02B         	call	_vscp_init	;wreg free
  1517  0048D0                     l168:
  1518  0048D0  0004               	clrwdt		;# 
  1519                           
  1520                           ;main.c: 322: if ((vscp_initbtncnt > 250) &&
  1521                           ;main.c: 323: (0x01 != vscp_node_state)) {
  1522  0048D2  0EFA               	movlw	250
  1523  0048D4  0100               	movlb	0	; () banked
  1524  0048D6  6585               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1525  0048D8  D00C               	goto	l13738
  1526                           
  1527                           ; BSR set to: 0
  1528  0048DA  0587               	decf	_vscp_node_state& (0+255),w,b
  1529  0048DC  E00A               	bz	l13738
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 326: vscp_nickname = 0xff;
  1533  0048DE  6986               	setf	_vscp_nickname& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 327: writeEEPROM(0x01, 0xff);
  1537  0048E0  6A0F               	clrf	?_writeEEPROM+1,c
  1538  0048E2  0E01               	movlw	1
  1539  0048E4  6E0E               	movwf	?_writeEEPROM,c
  1540  0048E6  0EFF               	movlw	255
  1541  0048E8  6810               	setf	?_writeEEPROM+2,c
  1542  0048EA  EC9F  F02D         	call	_writeEEPROM	;wreg free
  1543                           
  1544                           ;main.c: 328: vscp_init();
  1545  0048EE  ECE8  F02B         	call	_vscp_init	;wreg free
  1546  0048F2                     l13738:
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 330: }
  1550                           ;main.c: 334: vscp_imsg.flags = 0;
  1551  0048F2  6B88               	clrf	_vscp_imsg& (0+255),b
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 335: vscp_getEvent();
  1555  0048F4  EC4F  F02D         	call	_vscp_getEvent	;wreg free
  1556                           
  1557                           ;main.c: 338: switch (vscp_node_state) {
  1558  0048F8  D024               	goto	l13768
  1559  0048FA                     l13742:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 343: if (0xff == vscp_nickname) {
  1563  0048FA  2986               	incf	_vscp_nickname& (0+255),w,b
  1564  0048FC  E103               	bnz	l13746
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;main.c: 345: vscp_node_state = 0x01;
  1568  0048FE  0E01               	movlw	1
  1569  004900  6F87               	movwf	_vscp_node_state& (0+255),b
  1570                           
  1571                           ;main.c: 346: }
  1572  004902  D02B               	goto	l13770
  1573  004904                     l13746:
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;main.c: 347: else {
  1577                           ;main.c: 349: vscp_node_state = 0x03;
  1578  004904  0E03               	movlw	3
  1579  004906  6F87               	movwf	_vscp_node_state& (0+255),b
  1580  004908                     l13748:
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 350: vscp_goActiveState();
  1584  004908  EC0A  F02E         	call	_vscp_goActiveState	;wreg free
  1585  00490C  D026               	goto	l13770
  1586  00490E                     l13750:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 355: vscp_handleProbeState();
  1590  00490E  EC9C  F025         	call	_vscp_handleProbeState	;wreg free
  1591                           
  1592                           ;main.c: 356: break;
  1593  004912  D023               	goto	l13770
  1594  004914                     l177:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;main.c: 365: if (vscp_imsg.flags & 0x80) {
  1598  004914  AF88               	btfss	_vscp_imsg& (0+255),7,b
  1599  004916  D021               	goto	l13770
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;main.c: 367: if ( 0 == vscp_imsg.vscp_class ) {
  1603  004918  518B               	movf	(_vscp_imsg+3)& (0+255),w,b
  1604  00491A  118A               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1605  00491C  E103               	bnz	l13758
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 370: vscp_handleProtocolEvent();
  1609  00491E  EC15  F019         	call	_vscp_handleProtocolEvent	;wreg free
  1610                           
  1611                           ;main.c: 372: }
  1612  004922  D01B               	goto	l13770
  1613  004924                     l13758:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;main.c: 373: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1617                           ;main.c: 374: ( 26 == vscp_imsg.vscp_type ) ) {
  1618  004924  518A               	movf	(_vscp_imsg+2)& (0+255),w,b
  1619  004926  0A1E               	xorlw	30
  1620  004928  118B               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1621  00492A  E117               	bnz	l13770
  1622                           
  1623                           ; BSR set to: 0
  1624  00492C  518C               	movf	(_vscp_imsg+4)& (0+255),w,b
  1625  00492E  0A1A               	xorlw	26
  1626  004930  E114               	bnz	l13770
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;main.c: 375: handle_sync();
  1630  004932  EC7F  F029         	call	_handle_sync	;wreg free
  1631  004936  D011               	goto	l13770
  1632  004938                     l13764:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;main.c: 382: vscp_error();
  1636  004938  ECF5  F02E         	call	_vscp_error	;wreg free
  1637                           
  1638                           ;main.c: 383: break;
  1639  00493C  D00E               	goto	l13770
  1640  00493E                     l183:
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 386: vscp_node_state = 0x00;
  1644  00493E  6B87               	clrf	_vscp_node_state& (0+255),b
  1645                           
  1646                           ;main.c: 387: break;
  1647  004940  D00C               	goto	l13770
  1648  004942                     l13768:
  1649  004942  0100               	movlb	0	; () banked
  1650  004944  5187               	movf	_vscp_node_state& (0+255),w,b
  1651                           
  1652                           ; Switch size 1, requested type "speed"
  1653                           ; Number of cases is 5, Range of values is 0 to 4
  1654                           ; switch strategies available:
  1655                           ; Name         Instructions Cycles
  1656                           ; simple_byte           16     9 (average)
  1657                           ;	Chosen strategy is simple_byte
  1658  004946  E0D9               	bz	l13742
  1659  004948  0A01               	xorlw	1	; case 1
  1660  00494A  E0E1               	bz	l13750
  1661  00494C  0A03               	xorlw	3	; case 2
  1662  00494E  E0DC               	bz	l13748
  1663  004950  0A01               	xorlw	1	; case 3
  1664  004952  E0E0               	bz	l177
  1665  004954  0A07               	xorlw	7	; case 4
  1666  004956  E0F0               	bz	l13764
  1667  004958  D7F2               	goto	l183
  1668  00495A                     l13770:
  1669                           
  1670                           ;main.c: 393: if ( measurement_clock > 1000 ) {
  1671  00495A  0EE9               	movlw	233
  1672  00495C  0100               	movlb	0	; () banked
  1673  00495E  5D72               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1674  004960  0E03               	movlw	3
  1675  004962  5973               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1676  004964  0E00               	movlw	0
  1677  004966  5974               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1678  004968  0E00               	movlw	0
  1679  00496A  5975               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1680  00496C  E3B1               	bnc	l168
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 395: measurement_clock = 0;
  1684  00496E  6B72               	clrf	_measurement_clock& (0+255),b	;volatile
  1685  004970  6B73               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1686  004972  6B74               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1687  004974  6B75               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 396: doOneSecondWork();
  1691  004976  EC41  F01D         	call	_doOneSecondWork	;wreg free
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;main.c: 397: seconds++;
  1695  00497A  2B83               	incf	_seconds& (0+255),f,b
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 401: if (0x03 == vscp_node_state) {
  1699  00497C  5187               	movf	_vscp_node_state& (0+255),w,b
  1700  00497E  0A03               	xorlw	3
  1701  004980  E10A               	bnz	l13792
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 402: for (i = 0; i < 6; i++) {
  1705  004982  6BDE               	clrf	main@i& (0+255),b
  1706  004984                     l13786:
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;main.c: 403: seconds_temp[i]++;
  1710  004984  51DE               	movf	main@i& (0+255),w,b
  1711  004986  0F6C               	addlw	low _seconds_temp
  1712  004988  6ED9               	movwf	fsr2l,c
  1713  00498A  6ADA               	clrf	fsr2h,c
  1714  00498C  2ADF               	incf	indf2,f,c
  1715                           
  1716                           ; BSR set to: 0
  1717  00498E  2BDE               	incf	main@i& (0+255),f,b
  1718                           
  1719                           ; BSR set to: 0
  1720  004990  0E05               	movlw	5
  1721  004992  65DE               	cpfsgt	main@i& (0+255),b
  1722  004994  D7F7               	goto	l13786
  1723  004996                     l13792:
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;main.c: 404: }
  1727                           ;main.c: 405: }
  1728                           ;main.c: 407: if (seconds > 60) {
  1729  004996  0E3C               	movlw	60
  1730  004998  6583               	cpfsgt	_seconds& (0+255),b
  1731  00499A  D001               	goto	l13796
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 408: seconds = 0;
  1735  00499C  6B83               	clrf	_seconds& (0+255),b
  1736  00499E                     l13796:
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 409: }
  1740                           ;main.c: 412: vscp_doOneSecondWork();
  1741  00499E  ECE7  F02A         	call	_vscp_doOneSecondWork	;wreg free
  1742                           
  1743                           ;main.c: 415: doWork();
  1744  0049A2  EC38  F00C         	call	_doWork	;wreg free
  1745  0049A6  D794               	goto	l168
  1746  0049A8                     __end_of_main:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           postdec1	equ	0xFE5
  1752                           fsr1h	equ	0xFE2
  1753                           fsr1l	equ	0xFE1
  1754                           indf2	equ	0xFDF
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8
  1758                           
  1759 ;; *************** function _doWork *****************
  1760 ;; Defined at:
  1761 ;;		line 430 in file "../main.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  temp            4   49[BANK1 ] unsigned char 
  1766 ;;  avarage         4   45[BANK1 ] unsigned char 
  1767 ;;  resistance      4   38[BANK1 ] unsigned char 
  1768 ;;  v               4   32[BANK1 ] unsigned char 
  1769 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1770 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1771 ;;  setpoint        2   43[BANK1 ] int 
  1772 ;;  B               2   36[BANK1 ] unsigned short 
  1773 ;;  i               1   53[BANK1 ] unsigned char 
  1774 ;;  j               1   42[BANK1 ] unsigned char 
  1775 ;; Return value:  Size  Location     Type
  1776 ;;		None               void
  1777 ;; Registers used:
  1778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : F/0
  1781 ;;		On exit  : E/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1784 ;;      Params:         0       0       0       0       0       0       0
  1785 ;;      Locals:         0       0      54       0       0       0       0
  1786 ;;      Temps:          0      14       0       0       0       0       0
  1787 ;;      Totals:         0      14      54       0       0       0       0
  1788 ;;Total ram usage:       68 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    7
  1791 ;; This function calls:
  1792 ;;		_writeEEPROM
  1793 ;;		_readEEPROM
  1794 ;;		_exp
  1795 ;;		_log
  1796 ;;		_getCalibrationValue
  1797 ;;		_vscp_sendEvent
  1798 ;;		___aldiv
  1799 ;;		___altofl
  1800 ;;		___asfladd
  1801 ;;		___fladd
  1802 ;;		___asfldiv
  1803 ;;		___fldiv
  1804 ;;		___flmul
  1805 ;;		___asflsub
  1806 ;;		___flsub
  1807 ;;		___fltol
  1808 ;;		___lwtofl
  1809 ;;		___wmul
  1810 ;; This function is called by:
  1811 ;;		_main
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text1
  1816  001870                     __ptext1:
  1817                           	opt stack 0
  1818  001870                     _doWork:
  1819                           	opt stack 23
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 431: uint8_t i, j;
  1823                           ;main.c: 432: uint16_t B;
  1824                           ;main.c: 433: double avarage;
  1825                           ;main.c: 434: double resistance;
  1826                           ;main.c: 435: double Rinf;
  1827                           ;main.c: 436: double temp;
  1828                           ;main.c: 437: double v;
  1829                           ;main.c: 438: double calVoltage;
  1830                           ;main.c: 439: int setpoint;
  1831                           ;main.c: 441: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1832                           ;main.c: 442: readEEPROM(0xF3));
  1833                           
  1834                           ;incstack = 0
  1835                           ;incstack = 0
  1836  001870  6A0F               	clrf	?_readEEPROM+1,c
  1837  001872  0EF3               	movlw	243
  1838  001874  6E0E               	movwf	?_readEEPROM,c
  1839  001876  EC9C  F02E         	call	_readEEPROM	;wreg free
  1840  00187A  0100               	movlb	0	; () banked
  1841  00187C  6FC4               	movwf	??_doWork& (0+255),b
  1842  00187E  6A0F               	clrf	?_readEEPROM+1,c
  1843  001880  0EF2               	movlw	242
  1844  001882  6E0E               	movwf	?_readEEPROM,c
  1845  001884  EC9C  F02E         	call	_readEEPROM	;wreg free
  1846  001888  6E19               	movwf	?___lwtofl+1,c
  1847  00188A  0100               	movlb	0	; () banked
  1848  00188C  51C4               	movf	??_doWork& (0+255),w,b
  1849  00188E  6E18               	movwf	?___lwtofl,c
  1850  001890  EC25  F02D         	call	___lwtofl	;wreg free
  1851  001894  C01B  F14F         	movff	?___lwtofl+3,doWork@calVoltage+3
  1852  001898  C01A  F14E         	movff	?___lwtofl+2,doWork@calVoltage+2
  1853  00189C  C019  F14D         	movff	?___lwtofl+1,doWork@calVoltage+1
  1854  0018A0  C018  F14C         	movff	?___lwtofl,doWork@calVoltage
  1855                           
  1856                           ;main.c: 447: for (i = 0; i < 6; i++) {
  1857  0018A4  0101               	movlb	1	; () banked
  1858  0018A6  6B7D               	clrf	doWork@i& (0+255),b
  1859  0018A8                     l13906:
  1860                           
  1861                           ; BSR set to: 1
  1862                           ;main.c: 449: if (adc_conversion_flags & 1 << i) {
  1863  0018A8  C17D  F0C4         	movff	doWork@i,??_doWork
  1864  0018AC  0E01               	movlw	1
  1865  0018AE  0100               	movlb	0	; () banked
  1866  0018B0  6FC5               	movwf	(??_doWork+1)& (0+255),b
  1867  0018B2  2BC4               	incf	??_doWork& (0+255),f,b
  1868  0018B4  D002               	goto	u13054
  1869  0018B6                     u13055:
  1870  0018B6  90D8               	bcf	status,0,c
  1871  0018B8  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  1872  0018BA                     u13054:
  1873  0018BA  2FC4               	decfsz	??_doWork& (0+255),f,b
  1874  0018BC  D7FC               	goto	u13055
  1875  0018BE  51C5               	movf	(??_doWork+1)& (0+255),w,b
  1876  0018C0  1580               	andwf	_adc_conversion_flags& (0+255),w,b
  1877  0018C2  E101 D2CC          	bz	l13966
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 452: avarage = 0;
  1881  0018C6  0101               	movlb	1	; () banked
  1882  0018C8  6B75               	clrf	doWork@avarage& (0+255),b
  1883  0018CA  6B76               	clrf	(doWork@avarage+1)& (0+255),b
  1884  0018CC  6B77               	clrf	(doWork@avarage+2)& (0+255),b
  1885  0018CE  6B78               	clrf	(doWork@avarage+3)& (0+255),b
  1886                           
  1887                           ;main.c: 453: for (j = 0; j < 80; j++) {
  1888  0018D0  6B72               	clrf	doWork@j& (0+255),b
  1889  0018D2                     l13914:
  1890                           
  1891                           ; BSR set to: 1
  1892                           ;main.c: 454: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1893  0018D2  0E01               	movlw	high doWork@avarage
  1894  0018D4  6E2E               	movwf	?___asfladd+1,c
  1895  0018D6  0E75               	movlw	low doWork@avarage
  1896  0018D8  6E2D               	movwf	?___asfladd,c
  1897  0018DA  90D8               	bcf	status,0,c
  1898  0018DC  357D               	rlcf	doWork@i& (0+255),w,b
  1899  0018DE  0100               	movlb	0	; () banked
  1900  0018E0  6FC4               	movwf	??_doWork& (0+255),b
  1901  0018E2  6BC5               	clrf	(??_doWork+1)& (0+255),b
  1902  0018E4  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  1903  0018E6  0101               	movlb	1	; () banked
  1904  0018E8  5172               	movf	doWork@j& (0+255),w,b
  1905  0018EA  0D0C               	mullw	12
  1906  0018EC  0E7F               	movlw	low (_adc+1)
  1907  0018EE  24F3               	addwf	prodl,w,c
  1908  0018F0  0100               	movlb	0	; () banked
  1909  0018F2  6FC6               	movwf	(??_doWork+2)& (0+255),b
  1910  0018F4  0E01               	movlw	high (_adc+1)
  1911  0018F6  20F4               	addwfc	prodh,w,c
  1912  0018F8  6FC7               	movwf	(??_doWork+3)& (0+255),b
  1913  0018FA  51C4               	movf	??_doWork& (0+255),w,b
  1914  0018FC  25C6               	addwf	(??_doWork+2)& (0+255),w,b
  1915  0018FE  6ED9               	movwf	fsr2l,c
  1916  001900  51C5               	movf	(??_doWork+1)& (0+255),w,b
  1917  001902  21C7               	addwfc	(??_doWork+3)& (0+255),w,b
  1918  001904  6EDA               	movwf	fsr2h,c
  1919  001906  50DF               	movf	indf2,w,c
  1920  001908  6FC8               	movwf	(??_doWork+4)& (0+255),b
  1921  00190A  90D8               	bcf	status,0,c
  1922  00190C  0101               	movlb	1	; () banked
  1923  00190E  357D               	rlcf	doWork@i& (0+255),w,b
  1924  001910  0100               	movlb	0	; () banked
  1925  001912  6FC9               	movwf	(??_doWork+5)& (0+255),b
  1926  001914  6BCA               	clrf	(??_doWork+6)& (0+255),b
  1927  001916  37CA               	rlcf	(??_doWork+6)& (0+255),f,b
  1928  001918  0101               	movlb	1	; () banked
  1929  00191A  5172               	movf	doWork@j& (0+255),w,b
  1930  00191C  0D0C               	mullw	12
  1931  00191E  0E7E               	movlw	low _adc
  1932  001920  24F3               	addwf	prodl,w,c
  1933  001922  0100               	movlb	0	; () banked
  1934  001924  6FCB               	movwf	(??_doWork+7)& (0+255),b
  1935  001926  0E01               	movlw	high _adc
  1936  001928  20F4               	addwfc	prodh,w,c
  1937  00192A  6FCC               	movwf	(??_doWork+8)& (0+255),b
  1938  00192C  51C9               	movf	(??_doWork+5)& (0+255),w,b
  1939  00192E  25CB               	addwf	(??_doWork+7)& (0+255),w,b
  1940  001930  6ED9               	movwf	fsr2l,c
  1941  001932  51CA               	movf	(??_doWork+6)& (0+255),w,b
  1942  001934  21CC               	addwfc	(??_doWork+8)& (0+255),w,b
  1943  001936  6EDA               	movwf	fsr2h,c
  1944  001938  50DF               	movf	indf2,w,c
  1945  00193A  6E19               	movwf	?___lwtofl+1,c
  1946  00193C  51C8               	movf	(??_doWork+4)& (0+255),w,b
  1947  00193E  6E18               	movwf	?___lwtofl,c
  1948  001940  EC25  F02D         	call	___lwtofl	;wreg free
  1949  001944  C01B  F032         	movff	?___lwtofl+3,?___asfladd+5
  1950  001948  C01A  F031         	movff	?___lwtofl+2,?___asfladd+4
  1951  00194C  C019  F030         	movff	?___lwtofl+1,?___asfladd+3
  1952  001950  C018  F02F         	movff	?___lwtofl,?___asfladd+2
  1953  001954  EC0D  F02B         	call	___asfladd	;wreg free
  1954  001958  0101               	movlb	1	; () banked
  1955  00195A  2B72               	incf	doWork@j& (0+255),f,b
  1956                           
  1957                           ; BSR set to: 1
  1958  00195C  0E4F               	movlw	79
  1959  00195E  6572               	cpfsgt	doWork@j& (0+255),b
  1960  001960  D7B8               	goto	l13914
  1961                           
  1962                           ; BSR set to: 1
  1963                           ;main.c: 458: if (1) {
  1964  001962  0E01               	movlw	high doWork@avarage
  1965  001964  0100               	movlb	0	; () banked
  1966  001966  6FBA               	movwf	(?___asfldiv+1)& (0+255),b
  1967  001968  0E75               	movlw	low doWork@avarage
  1968  00196A  6FB9               	movwf	?___asfldiv& (0+255),b
  1969  00196C  6BBB               	clrf	(?___asfldiv+2)& (0+255),b
  1970  00196E  6BBC               	clrf	(?___asfldiv+3)& (0+255),b
  1971  001970  0EA0               	movlw	160
  1972  001972  6FBD               	movwf	(?___asfldiv+4)& (0+255),b
  1973  001974  0E42               	movlw	66
  1974  001976  6FBE               	movwf	(?___asfldiv+5)& (0+255),b
  1975  001978  EC9B  F02A         	call	___asfldiv	;wreg free
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 466: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  1979                           ;main.c: 467: readEEPROM(2 * i + 0x50);
  1980  00197C  0101               	movlb	1	; () banked
  1981  00197E  517D               	movf	doWork@i& (0+255),w,b
  1982  001980  0D02               	mullw	2
  1983  001982  0E50               	movlw	80
  1984  001984  24F3               	addwf	prodl,w,c
  1985  001986  6E0E               	movwf	?_readEEPROM,c
  1986  001988  0E00               	movlw	0
  1987  00198A  20F4               	addwfc	prodh,w,c
  1988  00198C  6E0F               	movwf	?_readEEPROM+1,c
  1989  00198E  EC9C  F02E         	call	_readEEPROM	;wreg free
  1990  001992  0100               	movlb	0	; () banked
  1991  001994  6FC4               	movwf	??_doWork& (0+255),b
  1992  001996  0101               	movlb	1	; () banked
  1993  001998  517D               	movf	doWork@i& (0+255),w,b
  1994  00199A  0D02               	mullw	2
  1995  00199C  0E4F               	movlw	79
  1996  00199E  24F3               	addwf	prodl,w,c
  1997  0019A0  6E0E               	movwf	?_readEEPROM,c
  1998  0019A2  0E00               	movlw	0
  1999  0019A4  20F4               	addwfc	prodh,w,c
  2000  0019A6  6E0F               	movwf	?_readEEPROM+1,c
  2001  0019A8  EC9C  F02E         	call	_readEEPROM	;wreg free
  2002  0019AC  0101               	movlb	1	; () banked
  2003  0019AE  6F6D               	movwf	(doWork@B+1)& (0+255),b
  2004  0019B0  0100               	movlb	0	; () banked
  2005  0019B2  51C4               	movf	??_doWork& (0+255),w,b
  2006  0019B4  0101               	movlb	1	; () banked
  2007  0019B6  6F6C               	movwf	doWork@B& (0+255),b
  2008                           
  2009                           ; BSR set to: 1
  2010                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2011  0019B8  0E33               	movlw	51
  2012  0019BA  0100               	movlb	0	; () banked
  2013  0019BC  6FA7               	movwf	(?___fldiv+4)& (0+255),b
  2014  0019BE  0E13               	movlw	19
  2015  0019C0  6FA8               	movwf	(?___fldiv+5)& (0+255),b
  2016  0019C2  0E95               	movlw	149
  2017  0019C4  6FA9               	movwf	(?___fldiv+6)& (0+255),b
  2018  0019C6  0EC3               	movlw	195
  2019  0019C8  6FAA               	movwf	(?___fldiv+7)& (0+255),b
  2020  0019CA  C16C  F018         	movff	doWork@B,?___lwtofl
  2021  0019CE  C16D  F019         	movff	doWork@B+1,?___lwtofl+1
  2022  0019D2  EC25  F02D         	call	___lwtofl	;wreg free
  2023  0019D6  C01B  F0A6         	movff	?___lwtofl+3,?___fldiv+3
  2024  0019DA  C01A  F0A5         	movff	?___lwtofl+2,?___fldiv+2
  2025  0019DE  C019  F0A4         	movff	?___lwtofl+1,?___fldiv+1
  2026  0019E2  C018  F0A3         	movff	?___lwtofl,?___fldiv
  2027  0019E6  EC69  F027         	call	___fldiv	;wreg free
  2028  0019EA  C0A6  F153         	movff	?___fldiv+3,_doWork$2270+3
  2029  0019EE  C0A5  F152         	movff	?___fldiv+2,_doWork$2270+2
  2030  0019F2  C0A4  F151         	movff	?___fldiv+1,_doWork$2270+1
  2031  0019F6  C0A3  F150         	movff	?___fldiv,_doWork$2270
  2032                           
  2033                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2034  0019FA  C150  F0B9         	movff	_doWork$2270,?_exp
  2035  0019FE  C151  F0BA         	movff	_doWork$2270+1,?_exp+1
  2036  001A02  C152  F0BB         	movff	_doWork$2270+2,?_exp+2
  2037  001A06  C153  F0BC         	movff	_doWork$2270+3,?_exp+3
  2038  001A0A  EC3E  F01E         	call	_exp	;wreg free
  2039  001A0E  C0BC  F157         	movff	?_exp+3,_doWork$2271+3
  2040  001A12  C0BB  F156         	movff	?_exp+2,_doWork$2271+2
  2041  001A16  C0BA  F155         	movff	?_exp+1,_doWork$2271+1
  2042  001A1A  C0B9  F154         	movff	?_exp,_doWork$2271
  2043                           
  2044                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2045  001A1E  C154  F01E         	movff	_doWork$2271,?___flmul
  2046  001A22  C155  F01F         	movff	_doWork$2271+1,?___flmul+1
  2047  001A26  C156  F020         	movff	_doWork$2271+2,?___flmul+2
  2048  001A2A  C157  F021         	movff	_doWork$2271+3,?___flmul+3
  2049  001A2E  6A22               	clrf	?___flmul+4,c
  2050  001A30  0E40               	movlw	64
  2051  001A32  6E23               	movwf	?___flmul+5,c
  2052  001A34  0E1C               	movlw	28
  2053  001A36  6E24               	movwf	?___flmul+6,c
  2054  001A38  0E46               	movlw	70
  2055  001A3A  6E25               	movwf	?___flmul+7,c
  2056  001A3C  ECD4  F024         	call	___flmul	;wreg free
  2057  001A40  C021  F14B         	movff	?___flmul+3,doWork@Rinf+3
  2058  001A44  C020  F14A         	movff	?___flmul+2,doWork@Rinf+2
  2059  001A48  C01F  F149         	movff	?___flmul+1,doWork@Rinf+1
  2060  001A4C  C01E  F148         	movff	?___flmul,doWork@Rinf
  2061                           
  2062                           ;main.c: 472: v = 5.0 * (double) avarage / 1025;
  2063  001A50  6A22               	clrf	?___flmul+4,c
  2064  001A52  6A23               	clrf	?___flmul+5,c
  2065  001A54  0EA0               	movlw	160
  2066  001A56  6E24               	movwf	?___flmul+6,c
  2067  001A58  0E40               	movlw	64
  2068  001A5A  6E25               	movwf	?___flmul+7,c
  2069  001A5C  C175  F01E         	movff	doWork@avarage,?___flmul
  2070  001A60  C176  F01F         	movff	doWork@avarage+1,?___flmul+1
  2071  001A64  C177  F020         	movff	doWork@avarage+2,?___flmul+2
  2072  001A68  C178  F021         	movff	doWork@avarage+3,?___flmul+3
  2073  001A6C  ECD4  F024         	call	___flmul	;wreg free
  2074  001A70  C021  F0A6         	movff	?___flmul+3,?___fldiv+3
  2075  001A74  C020  F0A5         	movff	?___flmul+2,?___fldiv+2
  2076  001A78  C01F  F0A4         	movff	?___flmul+1,?___fldiv+1
  2077  001A7C  C01E  F0A3         	movff	?___flmul,?___fldiv
  2078  001A80  0100               	movlb	0	; () banked
  2079  001A82  6BA7               	clrf	(?___fldiv+4)& (0+255),b
  2080  001A84  0E20               	movlw	32
  2081  001A86  6FA8               	movwf	(?___fldiv+5)& (0+255),b
  2082  001A88  0E80               	movlw	128
  2083  001A8A  6FA9               	movwf	(?___fldiv+6)& (0+255),b
  2084  001A8C  0E44               	movlw	68
  2085  001A8E  6FAA               	movwf	(?___fldiv+7)& (0+255),b
  2086  001A90  EC69  F027         	call	___fldiv	;wreg free
  2087  001A94  C0A6  F16B         	movff	?___fldiv+3,doWork@v+3
  2088  001A98  C0A5  F16A         	movff	?___fldiv+2,doWork@v+2
  2089  001A9C  C0A4  F169         	movff	?___fldiv+1,doWork@v+1
  2090  001AA0  C0A3  F168         	movff	?___fldiv,doWork@v
  2091                           
  2092                           ;main.c: 474: resistance = (calVoltage - 10000.0 * v) / v;
  2093  001AA4  6A22               	clrf	?___flmul+4,c
  2094  001AA6  0E40               	movlw	64
  2095  001AA8  6E23               	movwf	?___flmul+5,c
  2096  001AAA  0E1C               	movlw	28
  2097  001AAC  6E24               	movwf	?___flmul+6,c
  2098  001AAE  0E46               	movlw	70
  2099  001AB0  6E25               	movwf	?___flmul+7,c
  2100  001AB2  C168  F01E         	movff	doWork@v,?___flmul
  2101  001AB6  C169  F01F         	movff	doWork@v+1,?___flmul+1
  2102  001ABA  C16A  F020         	movff	doWork@v+2,?___flmul+2
  2103  001ABE  C16B  F021         	movff	doWork@v+3,?___flmul+3
  2104  001AC2  ECD4  F024         	call	___flmul	;wreg free
  2105  001AC6  C021  F03B         	movff	?___flmul+3,?___flsub+7
  2106  001ACA  C020  F03A         	movff	?___flmul+2,?___flsub+6
  2107  001ACE  C01F  F039         	movff	?___flmul+1,?___flsub+5
  2108  001AD2  C01E  F038         	movff	?___flmul,?___flsub+4
  2109  001AD6  C14C  F034         	movff	doWork@calVoltage,?___flsub
  2110  001ADA  C14D  F035         	movff	doWork@calVoltage+1,?___flsub+1
  2111  001ADE  C14E  F036         	movff	doWork@calVoltage+2,?___flsub+2
  2112  001AE2  C14F  F037         	movff	doWork@calVoltage+3,?___flsub+3
  2113  001AE6  EC86  F02C         	call	___flsub	;wreg free
  2114  001AEA  C037  F0A6         	movff	?___flsub+3,?___fldiv+3
  2115  001AEE  C036  F0A5         	movff	?___flsub+2,?___fldiv+2
  2116  001AF2  C035  F0A4         	movff	?___flsub+1,?___fldiv+1
  2117  001AF6  C034  F0A3         	movff	?___flsub,?___fldiv
  2118  001AFA  C168  F0A7         	movff	doWork@v,?___fldiv+4
  2119  001AFE  C169  F0A8         	movff	doWork@v+1,?___fldiv+5
  2120  001B02  C16A  F0A9         	movff	doWork@v+2,?___fldiv+6
  2121  001B06  C16B  F0AA         	movff	doWork@v+3,?___fldiv+7
  2122  001B0A  EC69  F027         	call	___fldiv	;wreg free
  2123  001B0E  C0A6  F171         	movff	?___fldiv+3,doWork@resistance+3
  2124  001B12  C0A5  F170         	movff	?___fldiv+2,doWork@resistance+2
  2125  001B16  C0A4  F16F         	movff	?___fldiv+1,doWork@resistance+1
  2126  001B1A  C0A3  F16E         	movff	?___fldiv,doWork@resistance
  2127                           
  2128                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2129  001B1E  C148  F0A7         	movff	doWork@Rinf,?___fldiv+4
  2130  001B22  C149  F0A8         	movff	doWork@Rinf+1,?___fldiv+5
  2131  001B26  C14A  F0A9         	movff	doWork@Rinf+2,?___fldiv+6
  2132  001B2A  C14B  F0AA         	movff	doWork@Rinf+3,?___fldiv+7
  2133  001B2E  C16E  F0A3         	movff	doWork@resistance,?___fldiv
  2134  001B32  C16F  F0A4         	movff	doWork@resistance+1,?___fldiv+1
  2135  001B36  C170  F0A5         	movff	doWork@resistance+2,?___fldiv+2
  2136  001B3A  C171  F0A6         	movff	doWork@resistance+3,?___fldiv+3
  2137  001B3E  EC69  F027         	call	___fldiv	;wreg free
  2138  001B42  C0A6  F0BC         	movff	?___fldiv+3,?_log+3
  2139  001B46  C0A5  F0BB         	movff	?___fldiv+2,?_log+2
  2140  001B4A  C0A4  F0BA         	movff	?___fldiv+1,?_log+1
  2141  001B4E  C0A3  F0B9         	movff	?___fldiv,?_log
  2142  001B52  ECC6  F022         	call	_log	;wreg free
  2143  001B56  C0BC  F15B         	movff	?_log+3,_doWork$2272+3
  2144  001B5A  C0BB  F15A         	movff	?_log+2,_doWork$2272+2
  2145  001B5E  C0BA  F159         	movff	?_log+1,_doWork$2272+1
  2146  001B62  C0B9  F158         	movff	?_log,_doWork$2272
  2147                           
  2148                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2149  001B66  C16C  F018         	movff	doWork@B,?___lwtofl
  2150  001B6A  C16D  F019         	movff	doWork@B+1,?___lwtofl+1
  2151  001B6E  EC25  F02D         	call	___lwtofl	;wreg free
  2152  001B72  C01B  F0A6         	movff	?___lwtofl+3,?___fldiv+3
  2153  001B76  C01A  F0A5         	movff	?___lwtofl+2,?___fldiv+2
  2154  001B7A  C019  F0A4         	movff	?___lwtofl+1,?___fldiv+1
  2155  001B7E  C018  F0A3         	movff	?___lwtofl,?___fldiv
  2156  001B82  C158  F0A7         	movff	_doWork$2272,?___fldiv+4
  2157  001B86  C159  F0A8         	movff	_doWork$2272+1,?___fldiv+5
  2158  001B8A  C15A  F0A9         	movff	_doWork$2272+2,?___fldiv+6
  2159  001B8E  C15B  F0AA         	movff	_doWork$2272+3,?___fldiv+7
  2160  001B92  EC69  F027         	call	___fldiv	;wreg free
  2161  001B96  C0A6  F17C         	movff	?___fldiv+3,doWork@temp+3
  2162  001B9A  C0A5  F17B         	movff	?___fldiv+2,doWork@temp+2
  2163  001B9E  C0A4  F17A         	movff	?___fldiv+1,doWork@temp+1
  2164  001BA2  C0A3  F179         	movff	?___fldiv,doWork@temp
  2165                           
  2166                           ;main.c: 478: temp -= 273.15;
  2167  001BA6  0101               	movlb	1	; () banked
  2168  001BA8  0E01               	movlw	high doWork@temp
  2169  001BAA  6E3D               	movwf	?___asflsub+1,c
  2170  001BAC  0E79               	movlw	low doWork@temp
  2171  001BAE  6E3C               	movwf	?___asflsub,c
  2172  001BB0  0E33               	movlw	51
  2173  001BB2  6E3E               	movwf	?___asflsub+2,c
  2174  001BB4  0E93               	movlw	147
  2175  001BB6  6E3F               	movwf	?___asflsub+3,c
  2176  001BB8  0E88               	movlw	136
  2177  001BBA  6E40               	movwf	?___asflsub+4,c
  2178  001BBC  0E43               	movlw	67
  2179  001BBE  6E41               	movwf	?___asflsub+5,c
  2180  001BC0  EC57  F02B         	call	___asflsub	;wreg free
  2181                           
  2182                           ;main.c: 493: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2183  001BC4  0101               	movlb	1	; () banked
  2184  001BC6  517D               	movf	doWork@i& (0+255),w,b
  2185  001BC8  0D02               	mullw	2
  2186  001BCA  50F3               	movf	prodl,w,c
  2187  001BCC  0100               	movlb	0	; () banked
  2188  001BCE  0F60               	addlw	low _current_temp
  2189  001BD0  6ED9               	movwf	fsr2l,c
  2190  001BD2  6ADA               	clrf	fsr2h,c
  2191  001BD4  CFDE F0C4          	movff	postinc2,??_doWork
  2192  001BD8  CFDD F0C5          	movff	postdec2,??_doWork+1
  2193  001BDC  C0C4  F0C6         	movff	??_doWork,??_doWork+2
  2194  001BE0  C0C5  F0C7         	movff	??_doWork+1,??_doWork+3
  2195  001BE4  0E00               	movlw	0
  2196  001BE6  BFC7               	btfsc	(??_doWork+3)& (0+255),7,b
  2197  001BE8  0EFF               	movlw	255
  2198  001BEA  6FC8               	movwf	(??_doWork+4)& (0+255),b
  2199  001BEC  6FC9               	movwf	(??_doWork+5)& (0+255),b
  2200  001BEE  0101               	movlb	1	; () banked
  2201  001BF0  517D               	movf	doWork@i& (0+255),w,b
  2202  001BF2  ECA1  F02B         	call	_getCalibrationValue
  2203  001BF6  C012  F0CA         	movff	?_getCalibrationValue,??_doWork+6
  2204  001BFA  C013  F0CB         	movff	?_getCalibrationValue+1,??_doWork+7
  2205  001BFE  0E00               	movlw	0
  2206  001C00  0100               	movlb	0	; () banked
  2207  001C02  BFCB               	btfsc	(??_doWork+7)& (0+255),7,b
  2208  001C04  0EFF               	movlw	255
  2209  001C06  6FCC               	movwf	(??_doWork+8)& (0+255),b
  2210  001C08  6FCD               	movwf	(??_doWork+9)& (0+255),b
  2211  001C0A  6A22               	clrf	?___flmul+4,c
  2212  001C0C  6A23               	clrf	?___flmul+5,c
  2213  001C0E  0EC8               	movlw	200
  2214  001C10  6E24               	movwf	?___flmul+6,c
  2215  001C12  0E42               	movlw	66
  2216  001C14  6E25               	movwf	?___flmul+7,c
  2217  001C16  C179  F01E         	movff	doWork@temp,?___flmul
  2218  001C1A  C17A  F01F         	movff	doWork@temp+1,?___flmul+1
  2219  001C1E  C17B  F020         	movff	doWork@temp+2,?___flmul+2
  2220  001C22  C17C  F021         	movff	doWork@temp+3,?___flmul+3
  2221  001C26  ECD4  F024         	call	___flmul	;wreg free
  2222  001C2A  C021  F037         	movff	?___flmul+3,?___fltol+3
  2223  001C2E  C020  F036         	movff	?___flmul+2,?___fltol+2
  2224  001C32  C01F  F035         	movff	?___flmul+1,?___fltol+1
  2225  001C36  C01E  F034         	movff	?___flmul,?___fltol
  2226  001C3A  EC63  F028         	call	___fltol	;wreg free
  2227  001C3E  0100               	movlb	0	; () banked
  2228  001C40  51CA               	movf	(??_doWork+6)& (0+255),w,b
  2229  001C42  2434               	addwf	?___fltol,w,c
  2230  001C44  6FCE               	movwf	(??_doWork+10)& (0+255),b
  2231  001C46  51CB               	movf	(??_doWork+7)& (0+255),w,b
  2232  001C48  2035               	addwfc	?___fltol+1,w,c
  2233  001C4A  6FCF               	movwf	(??_doWork+11)& (0+255),b
  2234  001C4C  51CC               	movf	(??_doWork+8)& (0+255),w,b
  2235  001C4E  2036               	addwfc	?___fltol+2,w,c
  2236  001C50  6FD0               	movwf	(??_doWork+12)& (0+255),b
  2237  001C52  51CD               	movf	(??_doWork+9)& (0+255),w,b
  2238  001C54  2037               	addwfc	?___fltol+3,w,c
  2239  001C56  6FD1               	movwf	(??_doWork+13)& (0+255),b
  2240  001C58  51C6               	movf	(??_doWork+2)& (0+255),w,b
  2241  001C5A  25CE               	addwf	(??_doWork+10)& (0+255),w,b
  2242  001C5C  6E3E               	movwf	?___aldiv,c
  2243  001C5E  51C7               	movf	(??_doWork+3)& (0+255),w,b
  2244  001C60  21CF               	addwfc	(??_doWork+11)& (0+255),w,b
  2245  001C62  6E3F               	movwf	?___aldiv+1,c
  2246  001C64  51C8               	movf	(??_doWork+4)& (0+255),w,b
  2247  001C66  21D0               	addwfc	(??_doWork+12)& (0+255),w,b
  2248  001C68  6E40               	movwf	?___aldiv+2,c
  2249  001C6A  51C9               	movf	(??_doWork+5)& (0+255),w,b
  2250  001C6C  21D1               	addwfc	(??_doWork+13)& (0+255),w,b
  2251  001C6E  6E41               	movwf	?___aldiv+3,c
  2252  001C70  0E02               	movlw	2
  2253  001C72  6E42               	movwf	?___aldiv+4,c
  2254  001C74  0E00               	movlw	0
  2255  001C76  6A43               	clrf	?___aldiv+5,c
  2256  001C78  6A44               	clrf	?___aldiv+6,c
  2257  001C7A  6A45               	clrf	?___aldiv+7,c
  2258  001C7C  ECFB  F025         	call	___aldiv	;wreg free
  2259  001C80  0101               	movlb	1	; () banked
  2260  001C82  517D               	movf	doWork@i& (0+255),w,b
  2261  001C84  0D02               	mullw	2
  2262  001C86  50F3               	movf	prodl,w,c
  2263  001C88  0F60               	addlw	low _current_temp
  2264  001C8A  6ED9               	movwf	fsr2l,c
  2265  001C8C  6ADA               	clrf	fsr2h,c
  2266  001C8E  C03E  FFDE         	movff	?___aldiv,postinc2
  2267  001C92  C03F  FFDD         	movff	?___aldiv+1,postdec2
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;main.c: 514: }
  2271                           ;main.c: 517: if (current_temp[ i ] <
  2272                           ;main.c: 518: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2273                           ;main.c: 519: readEEPROM(2 * i + 0x80))) {
  2274                           
  2275                           ;main.c: 495: }
  2276  001C96  517D               	movf	doWork@i& (0+255),w,b
  2277  001C98  0D02               	mullw	2
  2278  001C9A  0E7F               	movlw	127
  2279  001C9C  24F3               	addwf	prodl,w,c
  2280  001C9E  6E0E               	movwf	?_readEEPROM,c
  2281  001CA0  0E00               	movlw	0
  2282  001CA2  20F4               	addwfc	prodh,w,c
  2283  001CA4  6E0F               	movwf	?_readEEPROM+1,c
  2284  001CA6  EC9C  F02E         	call	_readEEPROM	;wreg free
  2285  001CAA  0100               	movlb	0	; () banked
  2286  001CAC  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2287  001CAE  6BC4               	clrf	??_doWork& (0+255),b
  2288  001CB0  0101               	movlb	1	; () banked
  2289  001CB2  517D               	movf	doWork@i& (0+255),w,b
  2290  001CB4  0D02               	mullw	2
  2291  001CB6  0E80               	movlw	128
  2292  001CB8  24F3               	addwf	prodl,w,c
  2293  001CBA  6E0E               	movwf	?_readEEPROM,c
  2294  001CBC  0E00               	movlw	0
  2295  001CBE  20F4               	addwfc	prodh,w,c
  2296  001CC0  6E0F               	movwf	?_readEEPROM+1,c
  2297  001CC2  EC9C  F02E         	call	_readEEPROM	;wreg free
  2298  001CC6  0100               	movlb	0	; () banked
  2299  001CC8  27C4               	addwf	??_doWork& (0+255),f,b
  2300  001CCA  0E00               	movlw	0
  2301  001CCC  23C5               	addwfc	(??_doWork+1)& (0+255),f,b
  2302  001CCE  0101               	movlb	1	; () banked
  2303  001CD0  517D               	movf	doWork@i& (0+255),w,b
  2304  001CD2  0D02               	mullw	2
  2305  001CD4  50F3               	movf	prodl,w,c
  2306  001CD6  0100               	movlb	0	; () banked
  2307  001CD8  0F60               	addlw	low _current_temp
  2308  001CDA  6ED9               	movwf	fsr2l,c
  2309  001CDC  6ADA               	clrf	fsr2h,c
  2310  001CDE  CFDE F0C6          	movff	postinc2,??_doWork+2
  2311  001CE2  CFDD F0C7          	movff	postdec2,??_doWork+3
  2312  001CE6  51C7               	movf	(??_doWork+3)& (0+255),w,b
  2313  001CE8  0A80               	xorlw	128
  2314  001CEA  6FC8               	movwf	(??_doWork+4)& (0+255),b
  2315  001CEC  51C4               	movf	??_doWork& (0+255),w,b
  2316  001CEE  5DC6               	subwf	(??_doWork+2)& (0+255),w,b
  2317  001CF0  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2318  001CF2  0A80               	xorlw	128
  2319  001CF4  59C8               	subwfb	(??_doWork+4)& (0+255),w,b
  2320  001CF6  E23B               	bc	l201
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;main.c: 521: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2324  001CF8  90D8               	bcf	status,0,c
  2325  001CFA  0101               	movlb	1	; () banked
  2326  001CFC  357D               	rlcf	doWork@i& (0+255),w,b
  2327  001CFE  0100               	movlb	0	; () banked
  2328  001D00  6FC4               	movwf	??_doWork& (0+255),b
  2329  001D02  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2330  001D04  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2331  001D06  0E7F               	movlw	127
  2332  001D08  25C4               	addwf	??_doWork& (0+255),w,b
  2333  001D0A  6E0E               	movwf	?_writeEEPROM,c
  2334  001D0C  0E00               	movlw	0
  2335  001D0E  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2336  001D10  6E0F               	movwf	?_writeEEPROM+1,c
  2337  001D12  0101               	movlb	1	; () banked
  2338  001D14  517D               	movf	doWork@i& (0+255),w,b
  2339  001D16  0D02               	mullw	2
  2340  001D18  50F3               	movf	prodl,w,c
  2341  001D1A  0100               	movlb	0	; () banked
  2342  001D1C  0F60               	addlw	low _current_temp
  2343  001D1E  6ED9               	movwf	fsr2l,c
  2344  001D20  6ADA               	clrf	fsr2h,c
  2345  001D22  CFDE F0C6          	movff	postinc2,??_doWork+2
  2346  001D26  CFDD F0C7          	movff	postdec2,??_doWork+3
  2347  001D2A  C0C7  F0C6         	movff	??_doWork+3,??_doWork+2
  2348  001D2E  6BC7               	clrf	(??_doWork+3)& (0+255),b
  2349  001D30  BFC6               	btfsc	(??_doWork+2)& (0+255),7,b
  2350  001D32  69C7               	setf	(??_doWork+3)& (0+255),b
  2351  001D34  51C6               	movf	(??_doWork+2)& (0+255),w,b
  2352  001D36  6E10               	movwf	?_writeEEPROM+2,c
  2353  001D38  EC9F  F02D         	call	_writeEEPROM	;wreg free
  2354                           
  2355                           ;main.c: 522: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2356  001D3C  90D8               	bcf	status,0,c
  2357  001D3E  0101               	movlb	1	; () banked
  2358  001D40  357D               	rlcf	doWork@i& (0+255),w,b
  2359  001D42  0100               	movlb	0	; () banked
  2360  001D44  6FC4               	movwf	??_doWork& (0+255),b
  2361  001D46  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2362  001D48  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2363  001D4A  0E80               	movlw	128
  2364  001D4C  25C4               	addwf	??_doWork& (0+255),w,b
  2365  001D4E  6E0E               	movwf	?_writeEEPROM,c
  2366  001D50  0E00               	movlw	0
  2367  001D52  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2368  001D54  6E0F               	movwf	?_writeEEPROM+1,c
  2369  001D56  0101               	movlb	1	; () banked
  2370  001D58  517D               	movf	doWork@i& (0+255),w,b
  2371  001D5A  0D02               	mullw	2
  2372  001D5C  50F3               	movf	prodl,w,c
  2373  001D5E  0100               	movlb	0	; () banked
  2374  001D60  0F60               	addlw	low _current_temp
  2375  001D62  6ED9               	movwf	fsr2l,c
  2376  001D64  6ADA               	clrf	fsr2h,c
  2377  001D66  50DF               	movf	indf2,w,c
  2378  001D68  6E10               	movwf	?_writeEEPROM+2,c
  2379  001D6A  EC9F  F02D         	call	_writeEEPROM	;wreg free
  2380  001D6E                     l201:
  2381                           
  2382                           ;main.c: 523: }
  2383                           ;main.c: 526: if (current_temp[ i ] >
  2384                           ;main.c: 527: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2385                           ;main.c: 528: readEEPROM(2 * i + 0x8C))) {
  2386  001D6E  0101               	movlb	1	; () banked
  2387  001D70  517D               	movf	doWork@i& (0+255),w,b
  2388  001D72  0D02               	mullw	2
  2389  001D74  50F3               	movf	prodl,w,c
  2390  001D76  0F60               	addlw	low _current_temp
  2391  001D78  6ED9               	movwf	fsr2l,c
  2392  001D7A  6ADA               	clrf	fsr2h,c
  2393  001D7C  CFDE F0C4          	movff	postinc2,??_doWork
  2394  001D80  CFDD F0C5          	movff	postdec2,??_doWork+1
  2395  001D84  517D               	movf	doWork@i& (0+255),w,b
  2396  001D86  0D02               	mullw	2
  2397  001D88  0E8B               	movlw	139
  2398  001D8A  24F3               	addwf	prodl,w,c
  2399  001D8C  6E0E               	movwf	?_readEEPROM,c
  2400  001D8E  0E00               	movlw	0
  2401  001D90  20F4               	addwfc	prodh,w,c
  2402  001D92  6E0F               	movwf	?_readEEPROM+1,c
  2403  001D94  EC9C  F02E         	call	_readEEPROM	;wreg free
  2404  001D98  0100               	movlb	0	; () banked
  2405  001D9A  6FC7               	movwf	(??_doWork+3)& (0+255),b
  2406  001D9C  6BC6               	clrf	(??_doWork+2)& (0+255),b
  2407  001D9E  0101               	movlb	1	; () banked
  2408  001DA0  517D               	movf	doWork@i& (0+255),w,b
  2409  001DA2  0D02               	mullw	2
  2410  001DA4  0E8C               	movlw	140
  2411  001DA6  24F3               	addwf	prodl,w,c
  2412  001DA8  6E0E               	movwf	?_readEEPROM,c
  2413  001DAA  0E00               	movlw	0
  2414  001DAC  20F4               	addwfc	prodh,w,c
  2415  001DAE  6E0F               	movwf	?_readEEPROM+1,c
  2416  001DB0  EC9C  F02E         	call	_readEEPROM	;wreg free
  2417  001DB4  0100               	movlb	0	; () banked
  2418  001DB6  27C6               	addwf	(??_doWork+2)& (0+255),f,b
  2419  001DB8  0E00               	movlw	0
  2420  001DBA  23C7               	addwfc	(??_doWork+3)& (0+255),f,b
  2421  001DBC  51C7               	movf	(??_doWork+3)& (0+255),w,b
  2422  001DBE  0A80               	xorlw	128
  2423  001DC0  6FC8               	movwf	(??_doWork+4)& (0+255),b
  2424  001DC2  51C4               	movf	??_doWork& (0+255),w,b
  2425  001DC4  5DC6               	subwf	(??_doWork+2)& (0+255),w,b
  2426  001DC6  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2427  001DC8  0A80               	xorlw	128
  2428  001DCA  59C8               	subwfb	(??_doWork+4)& (0+255),w,b
  2429  001DCC  E23B               	bc	l13964
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;main.c: 530: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2433  001DCE  90D8               	bcf	status,0,c
  2434  001DD0  0101               	movlb	1	; () banked
  2435  001DD2  357D               	rlcf	doWork@i& (0+255),w,b
  2436  001DD4  0100               	movlb	0	; () banked
  2437  001DD6  6FC4               	movwf	??_doWork& (0+255),b
  2438  001DD8  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2439  001DDA  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2440  001DDC  0E8B               	movlw	139
  2441  001DDE  25C4               	addwf	??_doWork& (0+255),w,b
  2442  001DE0  6E0E               	movwf	?_writeEEPROM,c
  2443  001DE2  0E00               	movlw	0
  2444  001DE4  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2445  001DE6  6E0F               	movwf	?_writeEEPROM+1,c
  2446  001DE8  0101               	movlb	1	; () banked
  2447  001DEA  517D               	movf	doWork@i& (0+255),w,b
  2448  001DEC  0D02               	mullw	2
  2449  001DEE  50F3               	movf	prodl,w,c
  2450  001DF0  0100               	movlb	0	; () banked
  2451  001DF2  0F60               	addlw	low _current_temp
  2452  001DF4  6ED9               	movwf	fsr2l,c
  2453  001DF6  6ADA               	clrf	fsr2h,c
  2454  001DF8  CFDE F0C6          	movff	postinc2,??_doWork+2
  2455  001DFC  CFDD F0C7          	movff	postdec2,??_doWork+3
  2456  001E00  C0C7  F0C6         	movff	??_doWork+3,??_doWork+2
  2457  001E04  6BC7               	clrf	(??_doWork+3)& (0+255),b
  2458  001E06  BFC6               	btfsc	(??_doWork+2)& (0+255),7,b
  2459  001E08  69C7               	setf	(??_doWork+3)& (0+255),b
  2460  001E0A  51C6               	movf	(??_doWork+2)& (0+255),w,b
  2461  001E0C  6E10               	movwf	?_writeEEPROM+2,c
  2462  001E0E  EC9F  F02D         	call	_writeEEPROM	;wreg free
  2463                           
  2464                           ;main.c: 531: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2465  001E12  90D8               	bcf	status,0,c
  2466  001E14  0101               	movlb	1	; () banked
  2467  001E16  357D               	rlcf	doWork@i& (0+255),w,b
  2468  001E18  0100               	movlb	0	; () banked
  2469  001E1A  6FC4               	movwf	??_doWork& (0+255),b
  2470  001E1C  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2471  001E1E  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2472  001E20  0E8C               	movlw	140
  2473  001E22  25C4               	addwf	??_doWork& (0+255),w,b
  2474  001E24  6E0E               	movwf	?_writeEEPROM,c
  2475  001E26  0E00               	movlw	0
  2476  001E28  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2477  001E2A  6E0F               	movwf	?_writeEEPROM+1,c
  2478  001E2C  0101               	movlb	1	; () banked
  2479  001E2E  517D               	movf	doWork@i& (0+255),w,b
  2480  001E30  0D02               	mullw	2
  2481  001E32  50F3               	movf	prodl,w,c
  2482  001E34  0100               	movlb	0	; () banked
  2483  001E36  0F60               	addlw	low _current_temp
  2484  001E38  6ED9               	movwf	fsr2l,c
  2485  001E3A  6ADA               	clrf	fsr2h,c
  2486  001E3C  50DF               	movf	indf2,w,c
  2487  001E3E  6E10               	movwf	?_writeEEPROM+2,c
  2488  001E40  EC9F  F02D         	call	_writeEEPROM	;wreg free
  2489  001E44                     l13964:
  2490                           
  2491                           ;main.c: 532: }
  2492                           ;main.c: 535: adc_conversion_flags &= ~(1 << i);
  2493  001E44  C17D  F0C4         	movff	doWork@i,??_doWork
  2494  001E48  0E01               	movlw	1
  2495  001E4A  0100               	movlb	0	; () banked
  2496  001E4C  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2497  001E4E  2BC4               	incf	??_doWork& (0+255),f,b
  2498  001E50  D002               	goto	u13104
  2499  001E52                     u13105:
  2500  001E52  90D8               	bcf	status,0,c
  2501  001E54  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2502  001E56                     u13104:
  2503  001E56  2FC4               	decfsz	??_doWork& (0+255),f,b
  2504  001E58  D7FC               	goto	u13105
  2505  001E5A  1DC5               	comf	(??_doWork+1)& (0+255),w,b
  2506  001E5C  1780               	andwf	_adc_conversion_flags& (0+255),f,b
  2507  001E5E                     l13966:
  2508                           
  2509                           ; BSR set to: 0
  2510  001E5E  0101               	movlb	1	; () banked
  2511  001E60  2B7D               	incf	doWork@i& (0+255),f,b
  2512                           
  2513                           ; BSR set to: 1
  2514  001E62  0E05               	movlw	5
  2515  001E64  657D               	cpfsgt	doWork@i& (0+255),b
  2516  001E66  D520               	goto	l13906
  2517                           
  2518                           ; BSR set to: 1
  2519                           ;main.c: 537: }
  2520                           ;main.c: 538: }
  2521                           ;main.c: 541: if (0x03 == vscp_node_state) {
  2522  001E68  0100               	movlb	0	; () banked
  2523  001E6A  5187               	movf	_vscp_node_state& (0+255),w,b
  2524  001E6C  0A03               	xorlw	3
  2525  001E6E  E001 D23C          	bnz	l224
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;main.c: 544: for (i = 0; i < 6; i++) {
  2529  001E72  0101               	movlb	1	; () banked
  2530  001E74  6B7D               	clrf	doWork@i& (0+255),b
  2531  001E76                     l13978:
  2532                           
  2533                           ; BSR set to: 1
  2534                           ;main.c: 547: if (low_alarm & 1 << i) {
  2535  001E76  C17D  F0C4         	movff	doWork@i,??_doWork
  2536  001E7A  0E01               	movlw	1
  2537  001E7C  0100               	movlb	0	; () banked
  2538  001E7E  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2539  001E80  2BC4               	incf	??_doWork& (0+255),f,b
  2540  001E82  D002               	goto	u13134
  2541  001E84                     u13135:
  2542  001E84  90D8               	bcf	status,0,c
  2543  001E86  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2544  001E88                     u13134:
  2545  001E88  2FC4               	decfsz	??_doWork& (0+255),f,b
  2546  001E8A  D7FC               	goto	u13135
  2547  001E8C  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2548  001E8E  1582               	andwf	_low_alarm& (0+255),w,b
  2549  001E90  E061               	bz	l13986
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;main.c: 550: setpoint =
  2553                           ;main.c: 551: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2554                           ;main.c: 552: readEEPROM(2 * i + 0x5C) +
  2555                           ;main.c: 553: readEEPROM(i + 0x97)*100);
  2556  001E92  90D8               	bcf	status,0,c
  2557  001E94  0101               	movlb	1	; () banked
  2558  001E96  357D               	rlcf	doWork@i& (0+255),w,b
  2559  001E98  0100               	movlb	0	; () banked
  2560  001E9A  6FC4               	movwf	??_doWork& (0+255),b
  2561  001E9C  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2562  001E9E  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2563  001EA0  0E5C               	movlw	92
  2564  001EA2  25C4               	addwf	??_doWork& (0+255),w,b
  2565  001EA4  6E0E               	movwf	?_readEEPROM,c
  2566  001EA6  0E00               	movlw	0
  2567  001EA8  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2568  001EAA  6E0F               	movwf	?_readEEPROM+1,c
  2569  001EAC  EC9C  F02E         	call	_readEEPROM	;wreg free
  2570  001EB0  0100               	movlb	0	; () banked
  2571  001EB2  6FC6               	movwf	(??_doWork+2)& (0+255),b
  2572  001EB4  90D8               	bcf	status,0,c
  2573  001EB6  0101               	movlb	1	; () banked
  2574  001EB8  357D               	rlcf	doWork@i& (0+255),w,b
  2575  001EBA  0100               	movlb	0	; () banked
  2576  001EBC  6FC7               	movwf	(??_doWork+3)& (0+255),b
  2577  001EBE  6BC8               	clrf	(??_doWork+4)& (0+255),b
  2578  001EC0  37C8               	rlcf	(??_doWork+4)& (0+255),f,b
  2579  001EC2  0E5B               	movlw	91
  2580  001EC4  25C7               	addwf	(??_doWork+3)& (0+255),w,b
  2581  001EC6  6E0E               	movwf	?_readEEPROM,c
  2582  001EC8  0E00               	movlw	0
  2583  001ECA  21C8               	addwfc	(??_doWork+4)& (0+255),w,b
  2584  001ECC  6E0F               	movwf	?_readEEPROM+1,c
  2585  001ECE  EC9C  F02E         	call	_readEEPROM	;wreg free
  2586  001ED2  0100               	movlb	0	; () banked
  2587  001ED4  6FCA               	movwf	(??_doWork+6)& (0+255),b
  2588  001ED6  6BC9               	clrf	(??_doWork+5)& (0+255),b
  2589  001ED8  0E97               	movlw	151
  2590  001EDA  0101               	movlb	1	; () banked
  2591  001EDC  257D               	addwf	doWork@i& (0+255),w,b
  2592  001EDE  6E0E               	movwf	?_readEEPROM,c
  2593  001EE0  6A0F               	clrf	?_readEEPROM+1,c
  2594  001EE2  0E00               	movlw	0
  2595  001EE4  220F               	addwfc	?_readEEPROM+1,f,c
  2596  001EE6  EC9C  F02E         	call	_readEEPROM	;wreg free
  2597  001EEA  0D64               	mullw	100
  2598  001EEC  0100               	movlb	0	; () banked
  2599  001EEE  51C9               	movf	(??_doWork+5)& (0+255),w,b
  2600  001EF0  24F3               	addwf	prodl,w,c
  2601  001EF2  6FCB               	movwf	(??_doWork+7)& (0+255),b
  2602  001EF4  51CA               	movf	(??_doWork+6)& (0+255),w,b
  2603  001EF6  20F4               	addwfc	prodh,w,c
  2604  001EF8  6FCC               	movwf	(??_doWork+8)& (0+255),b
  2605  001EFA  51C6               	movf	(??_doWork+2)& (0+255),w,b
  2606  001EFC  25CB               	addwf	(??_doWork+7)& (0+255),w,b
  2607  001EFE  0101               	movlb	1	; () banked
  2608  001F00  6F73               	movwf	doWork@setpoint& (0+255),b
  2609  001F02  0100               	movlb	0	; () banked
  2610  001F04  0E00               	movlw	0
  2611  001F06  21CC               	addwfc	(??_doWork+8)& (0+255),w,b
  2612  001F08  0101               	movlb	1	; () banked
  2613  001F0A  6F74               	movwf	(doWork@setpoint+1)& (0+255),b
  2614                           
  2615                           ; BSR set to: 1
  2616                           ;main.c: 558: if (current_temp[ i ] > setpoint) {
  2617  001F0C  517D               	movf	doWork@i& (0+255),w,b
  2618  001F0E  0D02               	mullw	2
  2619  001F10  50F3               	movf	prodl,w,c
  2620  001F12  0F60               	addlw	low _current_temp
  2621  001F14  6ED9               	movwf	fsr2l,c
  2622  001F16  6ADA               	clrf	fsr2h,c
  2623  001F18  CFDE F0C4          	movff	postinc2,??_doWork
  2624  001F1C  CFDD F0C5          	movff	postdec2,??_doWork+1
  2625  001F20  5174               	movf	(doWork@setpoint+1)& (0+255),w,b
  2626  001F22  0A80               	xorlw	128
  2627  001F24  0100               	movlb	0	; () banked
  2628  001F26  6FC6               	movwf	(??_doWork+2)& (0+255),b
  2629  001F28  51C4               	movf	??_doWork& (0+255),w,b
  2630  001F2A  0101               	movlb	1	; () banked
  2631  001F2C  5D73               	subwf	doWork@setpoint& (0+255),w,b
  2632  001F2E  0100               	movlb	0	; () banked
  2633  001F30  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2634  001F32  0A80               	xorlw	128
  2635  001F34  59C6               	subwfb	(??_doWork+2)& (0+255),w,b
  2636  001F36  E301 D0B8          	bc	l208
  2637  001F3A                     l13984:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 561: low_alarm &= ~(1 << i);
  2641  001F3A  C17D  F0C4         	movff	doWork@i,??_doWork
  2642  001F3E  0E01               	movlw	1
  2643  001F40  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2644  001F42  2BC4               	incf	??_doWork& (0+255),f,b
  2645  001F44  D002               	goto	u13164
  2646  001F46                     u13165:
  2647  001F46  90D8               	bcf	status,0,c
  2648  001F48  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2649  001F4A                     u13164:
  2650  001F4A  2FC4               	decfsz	??_doWork& (0+255),f,b
  2651  001F4C  D7FC               	goto	u13165
  2652  001F4E  1DC5               	comf	(??_doWork+1)& (0+255),w,b
  2653  001F50  1782               	andwf	_low_alarm& (0+255),f,b
  2654  001F52  D0AB               	goto	l208
  2655  001F54                     l13986:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 566: else {
  2659                           ;main.c: 570: setpoint =
  2660                           ;main.c: 571: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2661                           ;main.c: 572: readEEPROM(2 * i + 0x5C));
  2662  001F54  0101               	movlb	1	; () banked
  2663  001F56  517D               	movf	doWork@i& (0+255),w,b
  2664  001F58  0D02               	mullw	2
  2665  001F5A  0E5C               	movlw	92
  2666  001F5C  24F3               	addwf	prodl,w,c
  2667  001F5E  6E0E               	movwf	?_readEEPROM,c
  2668  001F60  0E00               	movlw	0
  2669  001F62  20F4               	addwfc	prodh,w,c
  2670  001F64  6E0F               	movwf	?_readEEPROM+1,c
  2671  001F66  EC9C  F02E         	call	_readEEPROM	;wreg free
  2672  001F6A  0100               	movlb	0	; () banked
  2673  001F6C  6FC4               	movwf	??_doWork& (0+255),b
  2674  001F6E  0101               	movlb	1	; () banked
  2675  001F70  517D               	movf	doWork@i& (0+255),w,b
  2676  001F72  0D02               	mullw	2
  2677  001F74  0E5B               	movlw	91
  2678  001F76  24F3               	addwf	prodl,w,c
  2679  001F78  6E0E               	movwf	?_readEEPROM,c
  2680  001F7A  0E00               	movlw	0
  2681  001F7C  20F4               	addwfc	prodh,w,c
  2682  001F7E  6E0F               	movwf	?_readEEPROM+1,c
  2683  001F80  EC9C  F02E         	call	_readEEPROM	;wreg free
  2684  001F84  0100               	movlb	0	; () banked
  2685  001F86  6FC6               	movwf	(??_doWork+2)& (0+255),b
  2686  001F88  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2687  001F8A  51C4               	movf	??_doWork& (0+255),w,b
  2688  001F8C  25C5               	addwf	(??_doWork+1)& (0+255),w,b
  2689  001F8E  0101               	movlb	1	; () banked
  2690  001F90  6F73               	movwf	doWork@setpoint& (0+255),b
  2691  001F92  0100               	movlb	0	; () banked
  2692  001F94  0E00               	movlw	0
  2693  001F96  21C6               	addwfc	(??_doWork+2)& (0+255),w,b
  2694  001F98  0101               	movlb	1	; () banked
  2695  001F9A  6F74               	movwf	(doWork@setpoint+1)& (0+255),b
  2696                           
  2697                           ; BSR set to: 1
  2698                           ;main.c: 574: if (current_temp[ i ] < setpoint) {
  2699  001F9C  517D               	movf	doWork@i& (0+255),w,b
  2700  001F9E  0D02               	mullw	2
  2701  001FA0  50F3               	movf	prodl,w,c
  2702  001FA2  0100               	movlb	0	; () banked
  2703  001FA4  0F60               	addlw	low _current_temp
  2704  001FA6  6ED9               	movwf	fsr2l,c
  2705  001FA8  6ADA               	clrf	fsr2h,c
  2706  001FAA  CFDE F0C4          	movff	postinc2,??_doWork
  2707  001FAE  CFDD F0C5          	movff	postdec2,??_doWork+1
  2708  001FB2  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2709  001FB4  0A80               	xorlw	128
  2710  001FB6  6FC6               	movwf	(??_doWork+2)& (0+255),b
  2711  001FB8  0101               	movlb	1	; () banked
  2712  001FBA  5173               	movf	doWork@setpoint& (0+255),w,b
  2713  001FBC  0100               	movlb	0	; () banked
  2714  001FBE  5DC4               	subwf	??_doWork& (0+255),w,b
  2715  001FC0  0101               	movlb	1	; () banked
  2716  001FC2  5174               	movf	(doWork@setpoint+1)& (0+255),w,b
  2717  001FC4  0A80               	xorlw	128
  2718  001FC6  0100               	movlb	0	; () banked
  2719  001FC8  59C6               	subwfb	(??_doWork+2)& (0+255),w,b
  2720  001FCA  E26F               	bc	l208
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;main.c: 577: low_alarm |= (1 << i);
  2724  001FCC  C17D  F0C4         	movff	doWork@i,??_doWork
  2725  001FD0  0E01               	movlw	1
  2726  001FD2  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2727  001FD4  2BC4               	incf	??_doWork& (0+255),f,b
  2728  001FD6  D002               	goto	u13184
  2729  001FD8                     u13185:
  2730  001FD8  90D8               	bcf	status,0,c
  2731  001FDA  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2732  001FDC                     u13184:
  2733  001FDC  2FC4               	decfsz	??_doWork& (0+255),f,b
  2734  001FDE  D7FC               	goto	u13185
  2735  001FE0  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2736  001FE2  1382               	iorwf	_low_alarm& (0+255),f,b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;main.c: 582: vscp_alarmstatus |= 1;
  2740  001FE4  804A               	bsf	_vscp_alarmstatus,0,c
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;main.c: 585: if (readEEPROM(i + 0x43) & (1<<3)) {
  2744  001FE6  0E43               	movlw	67
  2745  001FE8  0101               	movlb	1	; () banked
  2746  001FEA  257D               	addwf	doWork@i& (0+255),w,b
  2747  001FEC  6E0E               	movwf	?_readEEPROM,c
  2748  001FEE  6A0F               	clrf	?_readEEPROM+1,c
  2749  001FF0  0E00               	movlw	0
  2750  001FF2  220F               	addwfc	?_readEEPROM+1,f,c
  2751  001FF4  EC9C  F02E         	call	_readEEPROM	;wreg free
  2752  001FF8  0100               	movlb	0	; () banked
  2753  001FFA  6FC4               	movwf	??_doWork& (0+255),b
  2754  001FFC  A7C4               	btfss	??_doWork& (0+255),3,b
  2755  001FFE  D055               	goto	l208
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;main.c: 587: vscp_omsg.vscp_class = 1;
  2759  002000  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  2760  002002  0E01               	movlw	1
  2761  002004  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  2762                           
  2763                           ;main.c: 588: vscp_omsg.vscp_type = 2;
  2764  002006  0E02               	movlw	2
  2765  002008  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 589: vscp_omsg.priority = 0x00;
  2769  00200A  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
  2770                           
  2771                           ;main.c: 590: vscp_omsg.flags = 0x80 + 3;
  2772  00200C  0E83               	movlw	131
  2773  00200E  6F96               	movwf	_vscp_omsg& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<5)) {
  2777  002010  0E43               	movlw	67
  2778  002012  0101               	movlb	1	; () banked
  2779  002014  257D               	addwf	doWork@i& (0+255),w,b
  2780  002016  6E0E               	movwf	?_readEEPROM,c
  2781  002018  6A0F               	clrf	?_readEEPROM+1,c
  2782  00201A  0E00               	movlw	0
  2783  00201C  220F               	addwfc	?_readEEPROM+1,f,c
  2784  00201E  EC9C  F02E         	call	_readEEPROM	;wreg free
  2785  002022  0100               	movlb	0	; () banked
  2786  002024  6FC4               	movwf	??_doWork& (0+255),b
  2787  002026  ABC4               	btfss	??_doWork& (0+255),5,b
  2788  002028  D017               	goto	l14008
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 595: if (readEEPROM(i + 0x43) & (1<<6)) {
  2792  00202A  0E43               	movlw	67
  2793  00202C  0101               	movlb	1	; () banked
  2794  00202E  257D               	addwf	doWork@i& (0+255),w,b
  2795  002030  6E0E               	movwf	?_readEEPROM,c
  2796  002032  6A0F               	clrf	?_readEEPROM+1,c
  2797  002034  0E00               	movlw	0
  2798  002036  220F               	addwfc	?_readEEPROM+1,f,c
  2799  002038  EC9C  F02E         	call	_readEEPROM	;wreg free
  2800  00203C  0100               	movlb	0	; () banked
  2801  00203E  6FC4               	movwf	??_doWork& (0+255),b
  2802  002040  ADC4               	btfss	??_doWork& (0+255),6,b
  2803  002042  D005               	goto	l14006
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;main.c: 596: vscp_omsg.vscp_class = 30;
  2807  002044  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  2808  002046  0E1E               	movlw	30
  2809  002048  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  2810                           
  2811                           ;main.c: 597: vscp_omsg.vscp_type = 5;
  2812  00204A  0E05               	movlw	5
  2813  00204C  D004               	goto	L1
  2814  00204E                     l14006:
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;main.c: 599: else {
  2818                           ;main.c: 600: vscp_omsg.vscp_class = 30;
  2819  00204E  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  2820  002050  0E1E               	movlw	30
  2821  002052  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  2822                           
  2823                           ;main.c: 601: vscp_omsg.vscp_type = 6;
  2824  002054  0E06               	movlw	6
  2825  002056                     L1:
  2826  002056  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  2827  002058                     l14008:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 602: }
  2831                           ;main.c: 604: }
  2832                           ;main.c: 606: vscp_omsg.data[ 0 ] = i;
  2833  002058  C17D  F09B         	movff	doWork@i,_vscp_omsg+5
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;main.c: 607: vscp_omsg.data[ 1 ] =
  2837                           ;main.c: 608: readEEPROM(2 * i + 0x73);
  2838  00205C  90D8               	bcf	status,0,c
  2839  00205E  0101               	movlb	1	; () banked
  2840  002060  357D               	rlcf	doWork@i& (0+255),w,b
  2841  002062  0100               	movlb	0	; () banked
  2842  002064  6FC4               	movwf	??_doWork& (0+255),b
  2843  002066  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2844  002068  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2845  00206A  0E73               	movlw	115
  2846  00206C  25C4               	addwf	??_doWork& (0+255),w,b
  2847  00206E  6E0E               	movwf	?_readEEPROM,c
  2848  002070  0E00               	movlw	0
  2849  002072  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2850  002074  6E0F               	movwf	?_readEEPROM+1,c
  2851  002076  EC9C  F02E         	call	_readEEPROM	;wreg free
  2852  00207A  0100               	movlb	0	; () banked
  2853  00207C  6F9C               	movwf	(_vscp_omsg+6)& (0+255),b
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;main.c: 609: vscp_omsg.data[ 2 ] =
  2857                           ;main.c: 610: readEEPROM(2 * i + 0x74);
  2858  00207E  90D8               	bcf	status,0,c
  2859  002080  0101               	movlb	1	; () banked
  2860  002082  357D               	rlcf	doWork@i& (0+255),w,b
  2861  002084  0100               	movlb	0	; () banked
  2862  002086  6FC4               	movwf	??_doWork& (0+255),b
  2863  002088  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2864  00208A  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2865  00208C  0E74               	movlw	116
  2866  00208E  25C4               	addwf	??_doWork& (0+255),w,b
  2867  002090  6E0E               	movwf	?_readEEPROM,c
  2868  002092  0E00               	movlw	0
  2869  002094  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2870  002096  6E0F               	movwf	?_readEEPROM+1,c
  2871  002098  EC9C  F02E         	call	_readEEPROM	;wreg free
  2872  00209C  0100               	movlb	0	; () banked
  2873  00209E  6F9D               	movwf	(_vscp_omsg+7)& (0+255),b
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 613: if (!vscp_sendEvent()) {
  2877  0020A0  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  2878  0020A4  0900               	iorlw	0
  2879  0020A6  E101 D748          	bz	l13984
  2880  0020AA                     l208:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;main.c: 617: }
  2884                           ;main.c: 618: }
  2885                           ;main.c: 619: }
  2886                           ;main.c: 620: }
  2887                           ;main.c: 623: if ( high_alarm & (1 << i ) ) {
  2888  0020AA  C17D  F0C4         	movff	doWork@i,??_doWork
  2889  0020AE  0E01               	movlw	1
  2890  0020B0  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2891  0020B2  2BC4               	incf	??_doWork& (0+255),f,b
  2892  0020B4  D002               	goto	u13234
  2893  0020B6                     u13235:
  2894  0020B6  90D8               	bcf	status,0,c
  2895  0020B8  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2896  0020BA                     u13234:
  2897  0020BA  2FC4               	decfsz	??_doWork& (0+255),f,b
  2898  0020BC  D7FC               	goto	u13235
  2899  0020BE  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2900  0020C0  1581               	andwf	_high_alarm& (0+255),w,b
  2901  0020C2  E065               	bz	l14024
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;main.c: 627: setpoint =
  2905                           ;main.c: 628: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2906                           ;main.c: 629: readEEPROM(2 * i + 0x68) -
  2907                           ;main.c: 630: readEEPROM(i + 0x97)*100);
  2908  0020C4  90D8               	bcf	status,0,c
  2909  0020C6  0101               	movlb	1	; () banked
  2910  0020C8  357D               	rlcf	doWork@i& (0+255),w,b
  2911  0020CA  0100               	movlb	0	; () banked
  2912  0020CC  6FC4               	movwf	??_doWork& (0+255),b
  2913  0020CE  6BC5               	clrf	(??_doWork+1)& (0+255),b
  2914  0020D0  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  2915  0020D2  0E67               	movlw	103
  2916  0020D4  25C4               	addwf	??_doWork& (0+255),w,b
  2917  0020D6  6E0E               	movwf	?_readEEPROM,c
  2918  0020D8  0E00               	movlw	0
  2919  0020DA  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  2920  0020DC  6E0F               	movwf	?_readEEPROM+1,c
  2921  0020DE  EC9C  F02E         	call	_readEEPROM	;wreg free
  2922  0020E2  0100               	movlb	0	; () banked
  2923  0020E4  6FC7               	movwf	(??_doWork+3)& (0+255),b
  2924  0020E6  6BC6               	clrf	(??_doWork+2)& (0+255),b
  2925  0020E8  90D8               	bcf	status,0,c
  2926  0020EA  0101               	movlb	1	; () banked
  2927  0020EC  357D               	rlcf	doWork@i& (0+255),w,b
  2928  0020EE  0100               	movlb	0	; () banked
  2929  0020F0  6FC8               	movwf	(??_doWork+4)& (0+255),b
  2930  0020F2  6BC9               	clrf	(??_doWork+5)& (0+255),b
  2931  0020F4  37C9               	rlcf	(??_doWork+5)& (0+255),f,b
  2932  0020F6  0E68               	movlw	104
  2933  0020F8  25C8               	addwf	(??_doWork+4)& (0+255),w,b
  2934  0020FA  6E0E               	movwf	?_readEEPROM,c
  2935  0020FC  0E00               	movlw	0
  2936  0020FE  21C9               	addwfc	(??_doWork+5)& (0+255),w,b
  2937  002100  6E0F               	movwf	?_readEEPROM+1,c
  2938  002102  EC9C  F02E         	call	_readEEPROM	;wreg free
  2939  002106  0100               	movlb	0	; () banked
  2940  002108  27C6               	addwf	(??_doWork+2)& (0+255),f,b
  2941  00210A  0E00               	movlw	0
  2942  00210C  23C7               	addwfc	(??_doWork+3)& (0+255),f,b
  2943  00210E  0E97               	movlw	151
  2944  002110  0101               	movlb	1	; () banked
  2945  002112  257D               	addwf	doWork@i& (0+255),w,b
  2946  002114  6E0E               	movwf	?_readEEPROM,c
  2947  002116  6A0F               	clrf	?_readEEPROM+1,c
  2948  002118  0E00               	movlw	0
  2949  00211A  220F               	addwfc	?_readEEPROM+1,f,c
  2950  00211C  EC9C  F02E         	call	_readEEPROM	;wreg free
  2951  002120  6E12               	movwf	?___wmul,c
  2952  002122  6A13               	clrf	?___wmul+1,c
  2953  002124  6815               	setf	?___wmul+3,c
  2954  002126  0E9C               	movlw	156
  2955  002128  6E14               	movwf	?___wmul+2,c
  2956  00212A  ECA3  F02C         	call	___wmul	;wreg free
  2957  00212E  5012               	movf	?___wmul,w,c
  2958  002130  0100               	movlb	0	; () banked
  2959  002132  25C6               	addwf	(??_doWork+2)& (0+255),w,b
  2960  002134  0101               	movlb	1	; () banked
  2961  002136  6F73               	movwf	doWork@setpoint& (0+255),b
  2962  002138  5013               	movf	?___wmul+1,w,c
  2963  00213A  0100               	movlb	0	; () banked
  2964  00213C  21C7               	addwfc	(??_doWork+3)& (0+255),w,b
  2965  00213E  0101               	movlb	1	; () banked
  2966  002140  6F74               	movwf	(doWork@setpoint+1)& (0+255),b
  2967                           
  2968                           ; BSR set to: 1
  2969                           ;main.c: 633: if (current_temp[ i ] < setpoint) {
  2970  002142  517D               	movf	doWork@i& (0+255),w,b
  2971  002144  0D02               	mullw	2
  2972  002146  50F3               	movf	prodl,w,c
  2973  002148  0100               	movlb	0	; () banked
  2974  00214A  0F60               	addlw	low _current_temp
  2975  00214C  6ED9               	movwf	fsr2l,c
  2976  00214E  6ADA               	clrf	fsr2h,c
  2977  002150  CFDE F0C4          	movff	postinc2,??_doWork
  2978  002154  CFDD F0C5          	movff	postdec2,??_doWork+1
  2979  002158  51C5               	movf	(??_doWork+1)& (0+255),w,b
  2980  00215A  0A80               	xorlw	128
  2981  00215C  6FC6               	movwf	(??_doWork+2)& (0+255),b
  2982  00215E  0101               	movlb	1	; () banked
  2983  002160  5173               	movf	doWork@setpoint& (0+255),w,b
  2984  002162  0100               	movlb	0	; () banked
  2985  002164  5DC4               	subwf	??_doWork& (0+255),w,b
  2986  002166  0101               	movlb	1	; () banked
  2987  002168  5174               	movf	(doWork@setpoint+1)& (0+255),w,b
  2988  00216A  0A80               	xorlw	128
  2989  00216C  0100               	movlb	0	; () banked
  2990  00216E  59C6               	subwfb	(??_doWork+2)& (0+255),w,b
  2991  002170  E301 D0B6          	bc	l14056
  2992  002174                     l14022:
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;main.c: 636: high_alarm &= ~(1 << i);
  2996  002174  C17D  F0C4         	movff	doWork@i,??_doWork
  2997  002178  0E01               	movlw	1
  2998  00217A  6FC5               	movwf	(??_doWork+1)& (0+255),b
  2999  00217C  2BC4               	incf	??_doWork& (0+255),f,b
  3000  00217E  D002               	goto	u13264
  3001  002180                     u13265:
  3002  002180  90D8               	bcf	status,0,c
  3003  002182  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  3004  002184                     u13264:
  3005  002184  2FC4               	decfsz	??_doWork& (0+255),f,b
  3006  002186  D7FC               	goto	u13265
  3007  002188  1DC5               	comf	(??_doWork+1)& (0+255),w,b
  3008  00218A  1781               	andwf	_high_alarm& (0+255),f,b
  3009  00218C  D0A9               	goto	l14056
  3010  00218E                     l14024:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;main.c: 641: else {
  3014                           ;main.c: 646: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  3015                           ;main.c: 647: readEEPROM(2 * i + 0x68));
  3016  00218E  0101               	movlb	1	; () banked
  3017  002190  517D               	movf	doWork@i& (0+255),w,b
  3018  002192  0D02               	mullw	2
  3019  002194  0E68               	movlw	104
  3020  002196  24F3               	addwf	prodl,w,c
  3021  002198  6E0E               	movwf	?_readEEPROM,c
  3022  00219A  0E00               	movlw	0
  3023  00219C  20F4               	addwfc	prodh,w,c
  3024  00219E  6E0F               	movwf	?_readEEPROM+1,c
  3025  0021A0  EC9C  F02E         	call	_readEEPROM	;wreg free
  3026  0021A4  0100               	movlb	0	; () banked
  3027  0021A6  6FC4               	movwf	??_doWork& (0+255),b
  3028  0021A8  0101               	movlb	1	; () banked
  3029  0021AA  517D               	movf	doWork@i& (0+255),w,b
  3030  0021AC  0D02               	mullw	2
  3031  0021AE  0E67               	movlw	103
  3032  0021B0  24F3               	addwf	prodl,w,c
  3033  0021B2  6E0E               	movwf	?_readEEPROM,c
  3034  0021B4  0E00               	movlw	0
  3035  0021B6  20F4               	addwfc	prodh,w,c
  3036  0021B8  6E0F               	movwf	?_readEEPROM+1,c
  3037  0021BA  EC9C  F02E         	call	_readEEPROM	;wreg free
  3038  0021BE  0100               	movlb	0	; () banked
  3039  0021C0  6FC6               	movwf	(??_doWork+2)& (0+255),b
  3040  0021C2  6BC5               	clrf	(??_doWork+1)& (0+255),b
  3041  0021C4  51C4               	movf	??_doWork& (0+255),w,b
  3042  0021C6  25C5               	addwf	(??_doWork+1)& (0+255),w,b
  3043  0021C8  0101               	movlb	1	; () banked
  3044  0021CA  6F73               	movwf	doWork@setpoint& (0+255),b
  3045  0021CC  0100               	movlb	0	; () banked
  3046  0021CE  0E00               	movlw	0
  3047  0021D0  21C6               	addwfc	(??_doWork+2)& (0+255),w,b
  3048  0021D2  0101               	movlb	1	; () banked
  3049  0021D4  6F74               	movwf	(doWork@setpoint+1)& (0+255),b
  3050                           
  3051                           ; BSR set to: 1
  3052                           ;main.c: 649: if (current_temp[ i ] > setpoint) {
  3053  0021D6  517D               	movf	doWork@i& (0+255),w,b
  3054  0021D8  0D02               	mullw	2
  3055  0021DA  50F3               	movf	prodl,w,c
  3056  0021DC  0F60               	addlw	low _current_temp
  3057  0021DE  6ED9               	movwf	fsr2l,c
  3058  0021E0  6ADA               	clrf	fsr2h,c
  3059  0021E2  CFDE F0C4          	movff	postinc2,??_doWork
  3060  0021E6  CFDD F0C5          	movff	postdec2,??_doWork+1
  3061  0021EA  5174               	movf	(doWork@setpoint+1)& (0+255),w,b
  3062  0021EC  0A80               	xorlw	128
  3063  0021EE  0100               	movlb	0	; () banked
  3064  0021F0  6FC6               	movwf	(??_doWork+2)& (0+255),b
  3065  0021F2  51C4               	movf	??_doWork& (0+255),w,b
  3066  0021F4  0101               	movlb	1	; () banked
  3067  0021F6  5D73               	subwf	doWork@setpoint& (0+255),w,b
  3068  0021F8  0100               	movlb	0	; () banked
  3069  0021FA  51C5               	movf	(??_doWork+1)& (0+255),w,b
  3070  0021FC  0A80               	xorlw	128
  3071  0021FE  59C6               	subwfb	(??_doWork+2)& (0+255),w,b
  3072  002200  E26F               	bc	l14056
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;main.c: 652: high_alarm |= (1 << i);
  3076  002202  C17D  F0C4         	movff	doWork@i,??_doWork
  3077  002206  0E01               	movlw	1
  3078  002208  6FC5               	movwf	(??_doWork+1)& (0+255),b
  3079  00220A  2BC4               	incf	??_doWork& (0+255),f,b
  3080  00220C  D002               	goto	u13284
  3081  00220E                     u13285:
  3082  00220E  90D8               	bcf	status,0,c
  3083  002210  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  3084  002212                     u13284:
  3085  002212  2FC4               	decfsz	??_doWork& (0+255),f,b
  3086  002214  D7FC               	goto	u13285
  3087  002216  51C5               	movf	(??_doWork+1)& (0+255),w,b
  3088  002218  1381               	iorwf	_high_alarm& (0+255),f,b
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;main.c: 658: vscp_alarmstatus |= 2;
  3092  00221A  824A               	bsf	_vscp_alarmstatus,1,c
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;main.c: 661: if (readEEPROM(i + 0x43) & (1<<4)) {
  3096  00221C  0E43               	movlw	67
  3097  00221E  0101               	movlb	1	; () banked
  3098  002220  257D               	addwf	doWork@i& (0+255),w,b
  3099  002222  6E0E               	movwf	?_readEEPROM,c
  3100  002224  6A0F               	clrf	?_readEEPROM+1,c
  3101  002226  0E00               	movlw	0
  3102  002228  220F               	addwfc	?_readEEPROM+1,f,c
  3103  00222A  EC9C  F02E         	call	_readEEPROM	;wreg free
  3104  00222E  0100               	movlb	0	; () banked
  3105  002230  6FC4               	movwf	??_doWork& (0+255),b
  3106  002232  A9C4               	btfss	??_doWork& (0+255),4,b
  3107  002234  D055               	goto	l14056
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 663: vscp_omsg.vscp_class = 1;
  3111  002236  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  3112  002238  0E01               	movlw	1
  3113  00223A  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  3114                           
  3115                           ;main.c: 664: vscp_omsg.vscp_type = 2;
  3116  00223C  0E02               	movlw	2
  3117  00223E  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 665: vscp_omsg.priority = 0x00;
  3121  002240  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
  3122                           
  3123                           ;main.c: 666: vscp_omsg.flags = 0x80 + 3;
  3124  002242  0E83               	movlw	131
  3125  002244  6F96               	movwf	_vscp_omsg& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;main.c: 668: if (readEEPROM(i + 0x43) & (1<<5)) {
  3129  002246  0E43               	movlw	67
  3130  002248  0101               	movlb	1	; () banked
  3131  00224A  257D               	addwf	doWork@i& (0+255),w,b
  3132  00224C  6E0E               	movwf	?_readEEPROM,c
  3133  00224E  6A0F               	clrf	?_readEEPROM+1,c
  3134  002250  0E00               	movlw	0
  3135  002252  220F               	addwfc	?_readEEPROM+1,f,c
  3136  002254  EC9C  F02E         	call	_readEEPROM	;wreg free
  3137  002258  0100               	movlb	0	; () banked
  3138  00225A  6FC4               	movwf	??_doWork& (0+255),b
  3139  00225C  ABC4               	btfss	??_doWork& (0+255),5,b
  3140  00225E  D017               	goto	l14046
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;main.c: 669: if (readEEPROM(i + 0x43) & (1<<6)) {
  3144  002260  0E43               	movlw	67
  3145  002262  0101               	movlb	1	; () banked
  3146  002264  257D               	addwf	doWork@i& (0+255),w,b
  3147  002266  6E0E               	movwf	?_readEEPROM,c
  3148  002268  6A0F               	clrf	?_readEEPROM+1,c
  3149  00226A  0E00               	movlw	0
  3150  00226C  220F               	addwfc	?_readEEPROM+1,f,c
  3151  00226E  EC9C  F02E         	call	_readEEPROM	;wreg free
  3152  002272  0100               	movlb	0	; () banked
  3153  002274  6FC4               	movwf	??_doWork& (0+255),b
  3154  002276  ADC4               	btfss	??_doWork& (0+255),6,b
  3155  002278  D005               	goto	l14044
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 670: vscp_omsg.vscp_class = 30;
  3159  00227A  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  3160  00227C  0E1E               	movlw	30
  3161  00227E  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  3162                           
  3163                           ;main.c: 671: vscp_omsg.vscp_type = 6;
  3164  002280  0E06               	movlw	6
  3165  002282  D004               	goto	L2
  3166  002284                     l14044:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 673: vscp_omsg.vscp_class = 30;
  3170  002284  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  3171  002286  0E1E               	movlw	30
  3172  002288  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  3173                           
  3174                           ;main.c: 674: vscp_omsg.vscp_type = 5;
  3175  00228A  0E05               	movlw	5
  3176  00228C                     L2:
  3177  00228C  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  3178  00228E                     l14046:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;main.c: 675: }
  3182                           ;main.c: 676: }
  3183                           ;main.c: 678: vscp_omsg.data[ 0 ] = i;
  3184  00228E  C17D  F09B         	movff	doWork@i,_vscp_omsg+5
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 679: vscp_omsg.data[ 1 ] =
  3188                           ;main.c: 680: readEEPROM(2 * i +
  3189                           ;main.c: 681: 0x73);
  3190  002292  90D8               	bcf	status,0,c
  3191  002294  0101               	movlb	1	; () banked
  3192  002296  357D               	rlcf	doWork@i& (0+255),w,b
  3193  002298  0100               	movlb	0	; () banked
  3194  00229A  6FC4               	movwf	??_doWork& (0+255),b
  3195  00229C  6BC5               	clrf	(??_doWork+1)& (0+255),b
  3196  00229E  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  3197  0022A0  0E73               	movlw	115
  3198  0022A2  25C4               	addwf	??_doWork& (0+255),w,b
  3199  0022A4  6E0E               	movwf	?_readEEPROM,c
  3200  0022A6  0E00               	movlw	0
  3201  0022A8  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  3202  0022AA  6E0F               	movwf	?_readEEPROM+1,c
  3203  0022AC  EC9C  F02E         	call	_readEEPROM	;wreg free
  3204  0022B0  0100               	movlb	0	; () banked
  3205  0022B2  6F9C               	movwf	(_vscp_omsg+6)& (0+255),b
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;main.c: 682: vscp_omsg.data[ 2 ] =
  3209                           ;main.c: 683: readEEPROM(2 * i +
  3210                           ;main.c: 684: 0x74);
  3211  0022B4  90D8               	bcf	status,0,c
  3212  0022B6  0101               	movlb	1	; () banked
  3213  0022B8  357D               	rlcf	doWork@i& (0+255),w,b
  3214  0022BA  0100               	movlb	0	; () banked
  3215  0022BC  6FC4               	movwf	??_doWork& (0+255),b
  3216  0022BE  6BC5               	clrf	(??_doWork+1)& (0+255),b
  3217  0022C0  37C5               	rlcf	(??_doWork+1)& (0+255),f,b
  3218  0022C2  0E74               	movlw	116
  3219  0022C4  25C4               	addwf	??_doWork& (0+255),w,b
  3220  0022C6  6E0E               	movwf	?_readEEPROM,c
  3221  0022C8  0E00               	movlw	0
  3222  0022CA  21C5               	addwfc	(??_doWork+1)& (0+255),w,b
  3223  0022CC  6E0F               	movwf	?_readEEPROM+1,c
  3224  0022CE  EC9C  F02E         	call	_readEEPROM	;wreg free
  3225  0022D2  0100               	movlb	0	; () banked
  3226  0022D4  6F9D               	movwf	(_vscp_omsg+7)& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;main.c: 687: if (!vscp_sendEvent()) {
  3230  0022D6  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  3231  0022DA  0900               	iorlw	0
  3232  0022DC  E101 D74A          	bz	l14022
  3233  0022E0                     l14056:
  3234                           
  3235                           ; BSR set to: 0
  3236  0022E0  0101               	movlb	1	; () banked
  3237  0022E2  2B7D               	incf	doWork@i& (0+255),f,b
  3238  0022E4  0E05               	movlw	5
  3239  0022E6  657D               	cpfsgt	doWork@i& (0+255),b
  3240  0022E8  D5C6               	goto	l13978
  3241  0022EA                     l224:
  3242  0022EA  0012               	return	
  3243  0022EC                     __end_of_doWork:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postdec1	equ	0xFE5
  3251                           fsr1h	equ	0xFE2
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           postinc2	equ	0xFDE
  3255                           postdec2	equ	0xFDD
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function ___lwtofl *****************
  3261 ;; Defined at:
  3262 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  c               2   23[COMRAM] unsigned int 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  4   23[COMRAM] unsigned int 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3276 ;;      Params:         4       0       0       0       0       0       0
  3277 ;;      Locals:         0       0       0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0
  3279 ;;      Totals:         4       0       0       0       0       0       0
  3280 ;;Total ram usage:        4 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    3
  3283 ;; This function calls:
  3284 ;;		___flpack
  3285 ;; This function is called by:
  3286 ;;		_doWork
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text2
  3291  005A4A                     __ptext2:
  3292                           	opt stack 0
  3293  005A4A                     ___lwtofl:
  3294                           	opt stack 26
  3295                           
  3296                           ;incstack = 0
  3297                           ;incstack = 0
  3298  005A4A  C018  F00E         	movff	___lwtofl@c,?___flpack
  3299  005A4E  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3300  005A52  6A10               	clrf	?___flpack+2,c
  3301  005A54  6A11               	clrf	?___flpack+3,c
  3302  005A56  0E96               	movlw	150
  3303  005A58  6E12               	movwf	?___flpack+4,c
  3304  005A5A  0E00               	movlw	0
  3305  005A5C  6A13               	clrf	?___flpack+5,c
  3306  005A5E  EC3C  F025         	call	___flpack	;wreg free
  3307  005A62  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3308  005A66  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3309  005A6A  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3310  005A6E  C00E  F018         	movff	?___flpack,?___lwtofl
  3311  005A72  0012               	return	
  3312  005A74                     __end_of___lwtofl:
  3313                           	opt stack 0
  3314                           tblptru	equ	0xFF8
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           postdec1	equ	0xFE5
  3320                           fsr1h	equ	0xFE2
  3321                           fsr1l	equ	0xFE1
  3322                           indf2	equ	0xFDF
  3323                           postinc2	equ	0xFDE
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           status	equ	0xFD8
  3328                           
  3329 ;; *************** function ___asfldiv *****************
  3330 ;; Defined at:
  3331 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;  f1p             2   22[BANK0 ] PTR 
  3334 ;;		 -> doWork@avarage(4), 
  3335 ;;  f2              4   24[BANK0 ] PTR 
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  4   22[BANK0 ] PTR 
  3340 ;; Registers used:
  3341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3342 ;; Tracked objects:
  3343 ;;		On entry : F/0
  3344 ;;		On exit  : F/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3347 ;;      Params:         0       6       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0
  3350 ;;      Totals:         0       6       0       0       0       0       0
  3351 ;;Total ram usage:        6 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    4
  3354 ;; This function calls:
  3355 ;;		___fldiv
  3356 ;; This function is called by:
  3357 ;;		_doWork
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text3
  3362  005536                     __ptext3:
  3363                           	opt stack 0
  3364  005536                     ___asfldiv:
  3365                           	opt stack 25
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;	Return value of ___asfldiv is never used
  3369                           
  3370                           ;incstack = 0
  3371                           ;incstack = 0
  3372  005536  C0B9  FFD9         	movff	___asfldiv@f1p,fsr2l
  3373  00553A  C0BA  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3374  00553E  CFDE F0A3          	movff	postinc2,?___fldiv
  3375  005542  CFDE F0A4          	movff	postinc2,?___fldiv+1
  3376  005546  CFDE F0A5          	movff	postinc2,?___fldiv+2
  3377  00554A  CFDE F0A6          	movff	postinc2,?___fldiv+3
  3378  00554E  C0BB  F0A7         	movff	___asfldiv@f2,?___fldiv+4
  3379  005552  C0BC  F0A8         	movff	___asfldiv@f2+1,?___fldiv+5
  3380  005556  C0BD  F0A9         	movff	___asfldiv@f2+2,?___fldiv+6
  3381  00555A  C0BE  F0AA         	movff	___asfldiv@f2+3,?___fldiv+7
  3382  00555E  EC69  F027         	call	___fldiv	;wreg free
  3383  005562  C0B9  FFD9         	movff	___asfldiv@f1p,fsr2l
  3384  005566  C0BA  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3385  00556A  0100               	movlb	0	; () banked
  3386  00556C  C0A3  FFDE         	movff	?___fldiv,postinc2
  3387  005570  C0A4  FFDE         	movff	?___fldiv+1,postinc2
  3388  005574  C0A5  FFDE         	movff	?___fldiv+2,postinc2
  3389  005578  C0A6  FFDD         	movff	?___fldiv+3,postdec2
  3390  00557C  06D9               	decf	fsr2l,f,c
  3391  00557E  06D9               	decf	fsr2l,f,c
  3392                           
  3393                           ; BSR set to: 0
  3394  005580  0012               	return	
  3395  005582                     __end_of___asfldiv:
  3396                           	opt stack 0
  3397                           tblptru	equ	0xFF8
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           fsr2h	equ	0xFDA
  3409                           fsr2l	equ	0xFD9
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function ___asfladd *****************
  3413 ;; Defined at:
  3414 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  f1p             2   44[COMRAM] PTR 
  3417 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3418 ;;  f2              4   46[COMRAM] PTR 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;		None
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  4   44[COMRAM] PTR 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3430 ;;      Params:         6       0       0       0       0       0       0
  3431 ;;      Locals:         0       0       0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0
  3433 ;;      Totals:         6       0       0       0       0       0       0
  3434 ;;Total ram usage:        6 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:    4
  3437 ;; This function calls:
  3438 ;;		___fladd
  3439 ;; This function is called by:
  3440 ;;		_doWork
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text4
  3445  00561A                     __ptext4:
  3446                           	opt stack 0
  3447  00561A                     ___asfladd:
  3448                           	opt stack 25
  3449                           
  3450                           ;	Return value of ___asfladd is never used
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;incstack = 0
  3454                           ;incstack = 0
  3455  00561A  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  3456  00561E  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3457  005622  CFDE F01E          	movff	postinc2,?___fladd
  3458  005626  CFDE F01F          	movff	postinc2,?___fladd+1
  3459  00562A  CFDE F020          	movff	postinc2,?___fladd+2
  3460  00562E  CFDE F021          	movff	postinc2,?___fladd+3
  3461  005632  C02F  F022         	movff	___asfladd@f2,?___fladd+4
  3462  005636  C030  F023         	movff	___asfladd@f2+1,?___fladd+5
  3463  00563A  C031  F024         	movff	___asfladd@f2+2,?___fladd+6
  3464  00563E  C032  F025         	movff	___asfladd@f2+3,?___fladd+7
  3465  005642  EC6E  F021         	call	___fladd	;wreg free
  3466  005646  C02D  FFD9         	movff	___asfladd@f1p,fsr2l
  3467  00564A  C02E  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3468  00564E  C01E  FFDE         	movff	?___fladd,postinc2
  3469  005652  C01F  FFDE         	movff	?___fladd+1,postinc2
  3470  005656  C020  FFDE         	movff	?___fladd+2,postinc2
  3471  00565A  C021  FFDD         	movff	?___fladd+3,postdec2
  3472  00565E  06D9               	decf	fsr2l,f,c
  3473  005660  06D9               	decf	fsr2l,f,c
  3474  005662  0012               	return	
  3475  005664                     __end_of___asfladd:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           prodh	equ	0xFF4
  3479                           prodl	equ	0xFF3
  3480                           postinc0	equ	0xFEE
  3481                           wreg	equ	0xFE8
  3482                           postdec1	equ	0xFE5
  3483                           fsr1h	equ	0xFE2
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           postdec2	equ	0xFDD
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function ___aldiv *****************
  3493 ;; Defined at:
  3494 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  dividend        4   61[COMRAM] long 
  3497 ;;  divisor         4   65[COMRAM] long 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  quotient        4    2[BANK0 ] long 
  3500 ;;  sign            1    1[BANK0 ] unsigned char 
  3501 ;;  counter         1    0[BANK0 ] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  4   61[COMRAM] long 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0
  3506 ;; Tracked objects:
  3507 ;;		On entry : F/0
  3508 ;;		On exit  : F/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         8       0       0       0       0       0       0
  3512 ;;      Locals:         0       6       0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0
  3514 ;;      Totals:         8       6       0       0       0       0       0
  3515 ;;Total ram usage:       14 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    2
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_doWork
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text5
  3526  004BF6                     __ptext5:
  3527                           	opt stack 0
  3528  004BF6                     ___aldiv:
  3529                           	opt stack 27
  3530                           
  3531                           ; BSR set to: 0
  3532                           
  3533                           ;incstack = 0
  3534                           ;incstack = 0
  3535  004BF6  6BA4               	clrf	___aldiv@sign& (0+255),b
  3536  004BF8  AE45               	btfss	___aldiv@divisor+3,7,c
  3537  004BFA  D00A               	goto	l11482
  3538                           
  3539                           ; BSR set to: 0
  3540  004BFC  1E45               	comf	___aldiv@divisor+3,f,c
  3541  004BFE  1E44               	comf	___aldiv@divisor+2,f,c
  3542  004C00  1E43               	comf	___aldiv@divisor+1,f,c
  3543  004C02  6C42               	negf	___aldiv@divisor,c
  3544  004C04  0E00               	movlw	0
  3545  004C06  2243               	addwfc	___aldiv@divisor+1,f,c
  3546  004C08  2244               	addwfc	___aldiv@divisor+2,f,c
  3547  004C0A  2245               	addwfc	___aldiv@divisor+3,f,c
  3548                           
  3549                           ; BSR set to: 0
  3550  004C0C  0E01               	movlw	1
  3551  004C0E  6FA4               	movwf	___aldiv@sign& (0+255),b
  3552  004C10                     l11482:
  3553                           
  3554                           ; BSR set to: 0
  3555  004C10  AE41               	btfss	___aldiv@dividend+3,7,c
  3556  004C12  D00A               	goto	l11488
  3557                           
  3558                           ; BSR set to: 0
  3559  004C14  1E41               	comf	___aldiv@dividend+3,f,c
  3560  004C16  1E40               	comf	___aldiv@dividend+2,f,c
  3561  004C18  1E3F               	comf	___aldiv@dividend+1,f,c
  3562  004C1A  6C3E               	negf	___aldiv@dividend,c
  3563  004C1C  0E00               	movlw	0
  3564  004C1E  223F               	addwfc	___aldiv@dividend+1,f,c
  3565  004C20  2240               	addwfc	___aldiv@dividend+2,f,c
  3566  004C22  2241               	addwfc	___aldiv@dividend+3,f,c
  3567                           
  3568                           ; BSR set to: 0
  3569  004C24  0E01               	movlw	1
  3570  004C26  1BA4               	xorwf	___aldiv@sign& (0+255),f,b
  3571  004C28                     l11488:
  3572                           
  3573                           ; BSR set to: 0
  3574  004C28  6BA5               	clrf	___aldiv@quotient& (0+255),b
  3575  004C2A  6BA6               	clrf	(___aldiv@quotient+1)& (0+255),b
  3576  004C2C  6BA7               	clrf	(___aldiv@quotient+2)& (0+255),b
  3577  004C2E  6BA8               	clrf	(___aldiv@quotient+3)& (0+255),b
  3578                           
  3579                           ; BSR set to: 0
  3580  004C30  5045               	movf	___aldiv@divisor+3,w,c
  3581  004C32  1042               	iorwf	___aldiv@divisor,w,c
  3582  004C34  1043               	iorwf	___aldiv@divisor+1,w,c
  3583  004C36  1044               	iorwf	___aldiv@divisor+2,w,c
  3584  004C38  E029               	bz	l11510
  3585                           
  3586                           ; BSR set to: 0
  3587  004C3A  0E01               	movlw	1
  3588  004C3C  6FA3               	movwf	___aldiv@counter& (0+255),b
  3589  004C3E  D006               	goto	l11496
  3590  004C40                     l11494:
  3591                           
  3592                           ; BSR set to: 0
  3593  004C40  90D8               	bcf	status,0,c
  3594  004C42  3642               	rlcf	___aldiv@divisor,f,c
  3595  004C44  3643               	rlcf	___aldiv@divisor+1,f,c
  3596  004C46  3644               	rlcf	___aldiv@divisor+2,f,c
  3597  004C48  3645               	rlcf	___aldiv@divisor+3,f,c
  3598  004C4A  2BA3               	incf	___aldiv@counter& (0+255),f,b
  3599  004C4C                     l11496:
  3600                           
  3601                           ; BSR set to: 0
  3602  004C4C  AE45               	btfss	___aldiv@divisor+3,7,c
  3603  004C4E  D7F8               	goto	l11494
  3604  004C50                     l11498:
  3605                           
  3606                           ; BSR set to: 0
  3607  004C50  90D8               	bcf	status,0,c
  3608  004C52  37A5               	rlcf	___aldiv@quotient& (0+255),f,b
  3609  004C54  37A6               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3610  004C56  37A7               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3611  004C58  37A8               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3612                           
  3613                           ; BSR set to: 0
  3614  004C5A  5042               	movf	___aldiv@divisor,w,c
  3615  004C5C  5C3E               	subwf	___aldiv@dividend,w,c
  3616  004C5E  5043               	movf	___aldiv@divisor+1,w,c
  3617  004C60  583F               	subwfb	___aldiv@dividend+1,w,c
  3618  004C62  5044               	movf	___aldiv@divisor+2,w,c
  3619  004C64  5840               	subwfb	___aldiv@dividend+2,w,c
  3620  004C66  5045               	movf	___aldiv@divisor+3,w,c
  3621  004C68  5841               	subwfb	___aldiv@dividend+3,w,c
  3622  004C6A  E309               	bnc	l11506
  3623                           
  3624                           ; BSR set to: 0
  3625  004C6C  5042               	movf	___aldiv@divisor,w,c
  3626  004C6E  5E3E               	subwf	___aldiv@dividend,f,c
  3627  004C70  5043               	movf	___aldiv@divisor+1,w,c
  3628  004C72  5A3F               	subwfb	___aldiv@dividend+1,f,c
  3629  004C74  5044               	movf	___aldiv@divisor+2,w,c
  3630  004C76  5A40               	subwfb	___aldiv@dividend+2,f,c
  3631  004C78  5045               	movf	___aldiv@divisor+3,w,c
  3632  004C7A  5A41               	subwfb	___aldiv@dividend+3,f,c
  3633                           
  3634                           ; BSR set to: 0
  3635  004C7C  81A5               	bsf	___aldiv@quotient& (0+255),0,b
  3636  004C7E                     l11506:
  3637                           
  3638                           ; BSR set to: 0
  3639  004C7E  90D8               	bcf	status,0,c
  3640  004C80  3245               	rrcf	___aldiv@divisor+3,f,c
  3641  004C82  3244               	rrcf	___aldiv@divisor+2,f,c
  3642  004C84  3243               	rrcf	___aldiv@divisor+1,f,c
  3643  004C86  3242               	rrcf	___aldiv@divisor,f,c
  3644                           
  3645                           ; BSR set to: 0
  3646  004C88  2FA3               	decfsz	___aldiv@counter& (0+255),f,b
  3647  004C8A  D7E2               	goto	l11498
  3648  004C8C                     l11510:
  3649                           
  3650                           ; BSR set to: 0
  3651  004C8C  51A4               	movf	___aldiv@sign& (0+255),w,b
  3652  004C8E  E008               	bz	l11514
  3653                           
  3654                           ; BSR set to: 0
  3655  004C90  1FA8               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3656  004C92  1FA7               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3657  004C94  1FA6               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3658  004C96  6DA5               	negf	___aldiv@quotient& (0+255),b
  3659  004C98  0E00               	movlw	0
  3660  004C9A  23A6               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3661  004C9C  23A7               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3662  004C9E  23A8               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3663  004CA0                     l11514:
  3664                           
  3665                           ; BSR set to: 0
  3666  004CA0  C0A5  F03E         	movff	___aldiv@quotient,?___aldiv
  3667  004CA4  C0A6  F03F         	movff	___aldiv@quotient+1,?___aldiv+1
  3668  004CA8  C0A7  F040         	movff	___aldiv@quotient+2,?___aldiv+2
  3669  004CAC  C0A8  F041         	movff	___aldiv@quotient+3,?___aldiv+3
  3670                           
  3671                           ; BSR set to: 0
  3672  004CB0  0012               	return	
  3673  004CB2                     __end_of___aldiv:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1h	equ	0xFE2
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _getCalibrationValue *****************
  3691 ;; Defined at:
  3692 ;;		line 874 in file "../main.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  i               1    wreg     unsigned char 
  3695 ;; Auto vars:     Size  Location     Type
  3696 ;;  i               1   24[COMRAM] unsigned char 
  3697 ;;  cal             2   22[COMRAM] short 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  2   17[COMRAM] short 
  3700 ;; Registers used:
  3701 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : F/1
  3704 ;;		On exit  : 0/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3707 ;;      Params:         2       0       0       0       0       0       0
  3708 ;;      Locals:         3       0       0       0       0       0       0
  3709 ;;      Temps:          3       0       0       0       0       0       0
  3710 ;;      Totals:         8       0       0       0       0       0       0
  3711 ;;Total ram usage:        8 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:    3
  3714 ;; This function calls:
  3715 ;;		_readEEPROM
  3716 ;; This function is called by:
  3717 ;;		_doWork
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text6
  3722  005742                     __ptext6:
  3723                           	opt stack 0
  3724  005742                     _getCalibrationValue:
  3725                           	opt stack 26
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;incstack = 0
  3729                           ;incstack = 0
  3730                           ;getCalibrationValue@i stored from wreg
  3731  005742  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3732                           
  3733                           ; BSR set to: 1
  3734                           ;main.c: 875: int16_t cal;
  3735                           ;main.c: 877: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3736                           ;main.c: 878: readEEPROM(2 * i + 0x9F);
  3737  005746  5019               	movf	getCalibrationValue@i,w,c
  3738  005748  0D02               	mullw	2
  3739  00574A  0E9F               	movlw	159
  3740  00574C  24F3               	addwf	prodl,w,c
  3741  00574E  6E0E               	movwf	?_readEEPROM,c
  3742  005750  0E00               	movlw	0
  3743  005752  20F4               	addwfc	prodh,w,c
  3744  005754  6E0F               	movwf	?_readEEPROM+1,c
  3745  005756  EC9C  F02E         	call	_readEEPROM	;wreg free
  3746  00575A  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3747  00575C  5019               	movf	getCalibrationValue@i,w,c
  3748  00575E  0D02               	mullw	2
  3749  005760  0E9E               	movlw	158
  3750  005762  24F3               	addwf	prodl,w,c
  3751  005764  6E0E               	movwf	?_readEEPROM,c
  3752  005766  0E00               	movlw	0
  3753  005768  20F4               	addwfc	prodh,w,c
  3754  00576A  6E0F               	movwf	?_readEEPROM+1,c
  3755  00576C  EC9C  F02E         	call	_readEEPROM	;wreg free
  3756  005770  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3757  005772  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3758  005774  5014               	movf	??_getCalibrationValue,w,c
  3759  005776  2415               	addwf	??_getCalibrationValue+1,w,c
  3760  005778  6E17               	movwf	getCalibrationValue@cal,c
  3761  00577A  0E00               	movlw	0
  3762  00577C  2016               	addwfc	??_getCalibrationValue+2,w,c
  3763  00577E  6E18               	movwf	getCalibrationValue@cal+1,c
  3764                           
  3765                           ;main.c: 880: return cal;
  3766  005780  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3767  005784  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3768  005788  0012               	return	
  3769  00578A                     __end_of_getCalibrationValue:
  3770                           	opt stack 0
  3771                           tblptru	equ	0xFF8
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           postinc0	equ	0xFEE
  3775                           wreg	equ	0xFE8
  3776                           postdec1	equ	0xFE5
  3777                           fsr1h	equ	0xFE2
  3778                           fsr1l	equ	0xFE1
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           fsr2h	equ	0xFDA
  3783                           fsr2l	equ	0xFD9
  3784                           status	equ	0xFD8
  3785                           
  3786 ;; *************** function _log *****************
  3787 ;; Defined at:
  3788 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;  x               4   22[BANK0 ] short 
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  exponent        2   63[COMRAM] int 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  4   22[BANK0 ] int 
  3795 ;; Registers used:
  3796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/1
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3802 ;;      Params:         0       4       0       0       0       0       0
  3803 ;;      Locals:         2       0       0       0       0       0       0
  3804 ;;      Temps:          0       0       0       0       0       0       0
  3805 ;;      Totals:         2       4       0       0       0       0       0
  3806 ;;Total ram usage:        6 bytes
  3807 ;; Hardware stack levels used:    1
  3808 ;; Hardware stack levels required when called:    5
  3809 ;; This function calls:
  3810 ;;		___fladd
  3811 ;;		___flmul
  3812 ;;		___awtofl
  3813 ;;		_eval_poly
  3814 ;;		_frexp
  3815 ;; This function is called by:
  3816 ;;		_doWork
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text7
  3821  00458C                     __ptext7:
  3822                           	opt stack 0
  3823  00458C                     _log:
  3824                           	opt stack 24
  3825                           
  3826                           ;incstack = 0
  3827                           ;incstack = 0
  3828  00458C  0100               	movlb	0	; () banked
  3829  00458E  BFBC               	btfsc	(log@x+3)& (0+255),7,b
  3830  004590  D007               	goto	u13420
  3831                           
  3832                           ; BSR set to: 0
  3833                           
  3834                           ; BSR set to: 0
  3835  004592  EE20  F0B9         	lfsr	2,log@x
  3836  004596  50DE               	movf	postinc2,w,c
  3837  004598  10DE               	iorwf	postinc2,w,c
  3838  00459A  10DE               	iorwf	postinc2,w,c
  3839  00459C  10DE               	iorwf	postinc2,w,c
  3840  00459E  E105               	bnz	l14102
  3841  0045A0                     u13420:
  3842                           
  3843                           ; BSR set to: 0
  3844  0045A0  6BB9               	clrf	?_log& (0+255),b
  3845  0045A2  6BBA               	clrf	(?_log+1)& (0+255),b
  3846  0045A4  6BBB               	clrf	(?_log+2)& (0+255),b
  3847  0045A6  6BBC               	clrf	(?_log+3)& (0+255),b
  3848  0045A8  D086               	goto	l1855
  3849  0045AA                     l14102:
  3850                           
  3851                           ; BSR set to: 0
  3852  0045AA  6A22               	clrf	?___flmul+4,c
  3853  0045AC  6A23               	clrf	?___flmul+5,c
  3854  0045AE  6A24               	clrf	?___flmul+6,c
  3855  0045B0  0E40               	movlw	64
  3856  0045B2  6E25               	movwf	?___flmul+7,c
  3857  0045B4  0E40               	movlw	low log@exponent
  3858  0045B6  6E12               	movwf	?_frexp+4,c
  3859  0045B8  0E00               	movlw	high log@exponent
  3860  0045BA  6E13               	movwf	?_frexp+5,c
  3861  0045BC  0E0F               	movlw	15
  3862  0045BE  6E13               	movwf	?_frexp+5,c
  3863  0045C0  0E5F               	movlw	__accesstop+-1
  3864  0045C2  6412               	cpfsgt	?_frexp+4,c
  3865  0045C4  6A13               	clrf	?_frexp+5,c
  3866  0045C6  C0B9  F00E         	movff	log@x,?_frexp
  3867  0045CA  C0BA  F00F         	movff	log@x+1,?_frexp+1
  3868  0045CE  C0BB  F010         	movff	log@x+2,?_frexp+2
  3869  0045D2  C0BC  F011         	movff	log@x+3,?_frexp+3
  3870  0045D6  ECFC  F028         	call	_frexp	;wreg free
  3871  0045DA  C011  F021         	movff	?_frexp+3,?___flmul+3
  3872  0045DE  C010  F020         	movff	?_frexp+2,?___flmul+2
  3873  0045E2  C00F  F01F         	movff	?_frexp+1,?___flmul+1
  3874  0045E6  C00E  F01E         	movff	?_frexp,?___flmul
  3875  0045EA  ECD4  F024         	call	___flmul	;wreg free
  3876  0045EE  C021  F021         	movff	?___flmul+3,?___fladd+3
  3877  0045F2  C020  F020         	movff	?___flmul+2,?___fladd+2
  3878  0045F6  C01F  F01F         	movff	?___flmul+1,?___fladd+1
  3879  0045FA  C01E  F01E         	movff	?___flmul,?___fladd
  3880  0045FE  6A22               	clrf	?___fladd+4,c
  3881  004600  6A23               	clrf	?___fladd+5,c
  3882  004602  0E80               	movlw	128
  3883  004604  6E24               	movwf	?___fladd+6,c
  3884  004606  0EBF               	movlw	191
  3885  004608  6E25               	movwf	?___fladd+7,c
  3886  00460A  EC6E  F021         	call	___fladd	;wreg free
  3887  00460E  C021  F0BC         	movff	?___fladd+3,log@x+3
  3888  004612  C020  F0BB         	movff	?___fladd+2,log@x+2
  3889  004616  C01F  F0BA         	movff	?___fladd+1,log@x+1
  3890  00461A  C01E  F0B9         	movff	?___fladd,log@x
  3891  00461E  0640               	decf	log@exponent,f,c
  3892  004620  A0D8               	btfss	status,0,c
  3893  004622  0641               	decf	log@exponent+1,f,c
  3894  004624  C0B9  F034         	movff	log@x,?_eval_poly
  3895  004628  C0BA  F035         	movff	log@x+1,?_eval_poly+1
  3896  00462C  C0BB  F036         	movff	log@x+2,?_eval_poly+2
  3897  004630  C0BC  F037         	movff	log@x+3,?_eval_poly+3
  3898  004634  0E48               	movlw	low log@coeff
  3899  004636  6E38               	movwf	?_eval_poly+4,c
  3900  004638  6A3A               	clrf	?_eval_poly+6,c
  3901  00463A  0E08               	movlw	8
  3902  00463C  6E39               	movwf	?_eval_poly+5,c
  3903  00463E  EC59  F026         	call	_eval_poly	;wreg free
  3904  004642  C037  F0BC         	movff	?_eval_poly+3,log@x+3
  3905  004646  C036  F0BB         	movff	?_eval_poly+2,log@x+2
  3906  00464A  C035  F0BA         	movff	?_eval_poly+1,log@x+1
  3907  00464E  C034  F0B9         	movff	?_eval_poly,log@x
  3908  004652  0E18               	movlw	24
  3909  004654  6E22               	movwf	?___flmul+4,c
  3910  004656  0E72               	movlw	114
  3911  004658  6E23               	movwf	?___flmul+5,c
  3912  00465A  0E31               	movlw	49
  3913  00465C  6E24               	movwf	?___flmul+6,c
  3914  00465E  0E3F               	movlw	63
  3915  004660  6E25               	movwf	?___flmul+7,c
  3916  004662  C040  F018         	movff	log@exponent,?___awtofl
  3917  004666  C041  F019         	movff	log@exponent+1,?___awtofl+1
  3918  00466A  ECC0  F02C         	call	___awtofl	;wreg free
  3919  00466E  C01B  F021         	movff	?___awtofl+3,?___flmul+3
  3920  004672  C01A  F020         	movff	?___awtofl+2,?___flmul+2
  3921  004676  C019  F01F         	movff	?___awtofl+1,?___flmul+1
  3922  00467A  C018  F01E         	movff	?___awtofl,?___flmul
  3923  00467E  ECD4  F024         	call	___flmul	;wreg free
  3924  004682  C021  F021         	movff	?___flmul+3,?___fladd+3
  3925  004686  C020  F020         	movff	?___flmul+2,?___fladd+2
  3926  00468A  C01F  F01F         	movff	?___flmul+1,?___fladd+1
  3927  00468E  C01E  F01E         	movff	?___flmul,?___fladd
  3928  004692  C0B9  F022         	movff	log@x,?___fladd+4
  3929  004696  C0BA  F023         	movff	log@x+1,?___fladd+5
  3930  00469A  C0BB  F024         	movff	log@x+2,?___fladd+6
  3931  00469E  C0BC  F025         	movff	log@x+3,?___fladd+7
  3932  0046A2  EC6E  F021         	call	___fladd	;wreg free
  3933  0046A6  C021  F0BC         	movff	?___fladd+3,?_log+3
  3934  0046AA  C020  F0BB         	movff	?___fladd+2,?_log+2
  3935  0046AE  C01F  F0BA         	movff	?___fladd+1,?_log+1
  3936  0046B2  C01E  F0B9         	movff	?___fladd,?_log
  3937  0046B6                     l1855:
  3938  0046B6  0012               	return	
  3939  0046B8                     __end_of_log:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           prodh	equ	0xFF4
  3943                           prodl	equ	0xFF3
  3944                           postinc0	equ	0xFEE
  3945                           wreg	equ	0xFE8
  3946                           postdec1	equ	0xFE5
  3947                           fsr1h	equ	0xFE2
  3948                           fsr1l	equ	0xFE1
  3949                           indf2	equ	0xFDF
  3950                           postinc2	equ	0xFDE
  3951                           postdec2	equ	0xFDD
  3952                           fsr2h	equ	0xFDA
  3953                           fsr2l	equ	0xFD9
  3954                           status	equ	0xFD8
  3955                           
  3956 ;; *************** function _exp *****************
  3957 ;; Defined at:
  3958 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  x               4   22[BANK0 ] int 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;  exponent        2   30[BANK0 ] int 
  3963 ;;  sign            1   32[BANK0 ] unsigned char 
  3964 ;; Return value:  Size  Location     Type
  3965 ;;                  4   22[BANK0 ] unsigned char 
  3966 ;; Registers used:
  3967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3968 ;; Tracked objects:
  3969 ;;		On entry : 0/1
  3970 ;;		On exit  : 0/0
  3971 ;;		Unchanged: 0/0
  3972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3973 ;;      Params:         0       4       0       0       0       0       0
  3974 ;;      Locals:         0       7       0       0       0       0       0
  3975 ;;      Temps:          0       0       0       0       0       0       0
  3976 ;;      Totals:         0      11       0       0       0       0       0
  3977 ;;Total ram usage:       11 bytes
  3978 ;; Hardware stack levels used:    1
  3979 ;; Hardware stack levels required when called:    6
  3980 ;; This function calls:
  3981 ;;		___fldiv
  3982 ;;		___asflmul
  3983 ;;		___asflsub
  3984 ;;		___awtofl
  3985 ;;		_floor
  3986 ;;		_eval_poly
  3987 ;;		_ldexp
  3988 ;;		___flge
  3989 ;;		___flneg
  3990 ;;		___fltol
  3991 ;; This function is called by:
  3992 ;;		_doWork
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text8
  3997  003C7C                     __ptext8:
  3998                           	opt stack 0
  3999  003C7C                     _exp:
  4000                           	opt stack 23
  4001                           
  4002                           ;incstack = 0
  4003                           ;incstack = 0
  4004  003C7C  0100               	movlb	0	; () banked
  4005  003C7E  EE20  F0B9         	lfsr	2,exp@x
  4006  003C82  50DE               	movf	postinc2,w,c
  4007  003C84  10DE               	iorwf	postinc2,w,c
  4008  003C86  10DE               	iorwf	postinc2,w,c
  4009  003C88  10DE               	iorwf	postinc2,w,c
  4010  003C8A  E107               	bnz	l14064
  4011                           
  4012                           ; BSR set to: 0
  4013  003C8C  0E00               	movlw	0
  4014  003C8E  6FB9               	movwf	?_exp& (0+255),b
  4015  003C90  6FBA               	movwf	(?_exp+1)& (0+255),b
  4016  003C92  0E80               	movlw	128
  4017  003C94  6FBB               	movwf	(?_exp+2)& (0+255),b
  4018  003C96  0E3F               	movlw	63
  4019  003C98  D018               	goto	L3
  4020  003C9A                     l14064:
  4021                           
  4022                           ; BSR set to: 0
  4023  003C9A  0E18               	movlw	24
  4024  003C9C  6E0E               	movwf	?___flge,c
  4025  003C9E  0E72               	movlw	114
  4026  003CA0  6E0F               	movwf	?___flge+1,c
  4027  003CA2  0E31               	movlw	49
  4028  003CA4  6E10               	movwf	?___flge+2,c
  4029  003CA6  0E44               	movlw	68
  4030  003CA8  6E11               	movwf	?___flge+3,c
  4031  003CAA  C0B9  F012         	movff	exp@x,?___flge+4
  4032  003CAE  C0BA  F013         	movff	exp@x+1,?___flge+5
  4033  003CB2  C0BB  F014         	movff	exp@x+2,?___flge+6
  4034  003CB6  C0BC  F015         	movff	exp@x+3,?___flge+7
  4035  003CBA  ECC1  F02A         	call	___flge	;wreg free
  4036  003CBE  E207               	bc	l14070
  4037  003CC0  0100               	movlb	0	; () banked
  4038  003CC2  69B9               	setf	?_exp& (0+255),b
  4039  003CC4  69BA               	setf	(?_exp+1)& (0+255),b
  4040  003CC6  0E7F               	movlw	127
  4041  003CC8  6FBB               	movwf	(?_exp+2)& (0+255),b
  4042  003CCA                     L3:
  4043  003CCA  6FBC               	movwf	(?_exp+3)& (0+255),b
  4044  003CCC  D0CA               	goto	l1563
  4045  003CCE                     l14070:
  4046  003CCE  C0B9  F00E         	movff	exp@x,?___flge
  4047  003CD2  C0BA  F00F         	movff	exp@x+1,?___flge+1
  4048  003CD6  C0BB  F010         	movff	exp@x+2,?___flge+2
  4049  003CDA  C0BC  F011         	movff	exp@x+3,?___flge+3
  4050  003CDE  0E87               	movlw	135
  4051  003CE0  6E12               	movwf	?___flge+4,c
  4052  003CE2  0E48               	movlw	72
  4053  003CE4  6E13               	movwf	?___flge+5,c
  4054  003CE6  0E3A               	movlw	58
  4055  003CE8  6E14               	movwf	?___flge+6,c
  4056  003CEA  0EC4               	movlw	196
  4057  003CEC  6E15               	movwf	?___flge+7,c
  4058  003CEE  ECC1  F02A         	call	___flge	;wreg free
  4059  003CF2  E202               	bc	l14074
  4060  003CF4  0100               	movlb	0	; () banked
  4061  003CF6  D08F               	goto	u13400
  4062  003CF8                     l14074:
  4063  003CF8  0100               	movlb	0	; () banked
  4064  003CFA  0E01               	movlw	1
  4065  003CFC  AFBC               	btfss	(exp@x+3)& (0+255),7,b
  4066  003CFE  0E00               	movlw	0
  4067  003D00  6FC3               	movwf	exp@sign& (0+255),b
  4068  003D02  51C3               	movf	exp@sign& (0+255),w,b
  4069  003D04  E012               	bz	l1566
  4070                           
  4071                           ; BSR set to: 0
  4072  003D06  C0B9  F00E         	movff	exp@x,?___flneg
  4073  003D0A  C0BA  F00F         	movff	exp@x+1,?___flneg+1
  4074  003D0E  C0BB  F010         	movff	exp@x+2,?___flneg+2
  4075  003D12  C0BC  F011         	movff	exp@x+3,?___flneg+3
  4076  003D16  ECB2  F02D         	call	___flneg	;wreg free
  4077  003D1A  C011  F0BC         	movff	?___flneg+3,exp@x+3
  4078  003D1E  C010  F0BB         	movff	?___flneg+2,exp@x+2
  4079  003D22  C00F  F0BA         	movff	?___flneg+1,exp@x+1
  4080  003D26  C00E  F0B9         	movff	?___flneg,exp@x
  4081  003D2A                     l1566:
  4082                           
  4083                           ; BSR set to: 0
  4084  003D2A  0E3B               	movlw	59
  4085  003D2C  6E34               	movwf	?___asflmul,c
  4086  003D2E  0EAA               	movlw	170
  4087  003D30  6E35               	movwf	?___asflmul+1,c
  4088  003D32  0EB8               	movlw	184
  4089  003D34  6E36               	movwf	?___asflmul+2,c
  4090  003D36  0E3F               	movlw	63
  4091  003D38  6E37               	movwf	?___asflmul+3,c
  4092  003D3A  0EB9               	movlw	exp@x& (0+255)
  4093  003D3C  EC7C  F02B         	call	___asflmul
  4094  003D40  C0B9  F0AE         	movff	exp@x,?_floor
  4095  003D44  C0BA  F0AF         	movff	exp@x+1,?_floor+1
  4096  003D48  C0BB  F0B0         	movff	exp@x+2,?_floor+2
  4097  003D4C  C0BC  F0B1         	movff	exp@x+3,?_floor+3
  4098  003D50  ECDF  F023         	call	_floor	;wreg free
  4099  003D54  C0B1  F0C0         	movff	?_floor+3,_exp$2276+3
  4100  003D58  C0B0  F0BF         	movff	?_floor+2,_exp$2276+2
  4101  003D5C  C0AF  F0BE         	movff	?_floor+1,_exp$2276+1
  4102  003D60  C0AE  F0BD         	movff	?_floor,_exp$2276
  4103  003D64  C0BD  F034         	movff	_exp$2276,?___fltol
  4104  003D68  C0BE  F035         	movff	_exp$2276+1,?___fltol+1
  4105  003D6C  C0BF  F036         	movff	_exp$2276+2,?___fltol+2
  4106  003D70  C0C0  F037         	movff	_exp$2276+3,?___fltol+3
  4107  003D74  EC63  F028         	call	___fltol	;wreg free
  4108  003D78  C034  F0C1         	movff	?___fltol,exp@exponent
  4109  003D7C  C035  F0C2         	movff	?___fltol+1,exp@exponent+1
  4110  003D80  0100               	movlb	0	; () banked
  4111  003D82  0E00               	movlw	high exp@x
  4112  003D84  6E3D               	movwf	?___asflsub+1,c
  4113  003D86  0EB9               	movlw	low exp@x
  4114  003D88  6E3C               	movwf	?___asflsub,c
  4115  003D8A  C0C1  F018         	movff	exp@exponent,?___awtofl
  4116  003D8E  C0C2  F019         	movff	exp@exponent+1,?___awtofl+1
  4117  003D92  ECC0  F02C         	call	___awtofl	;wreg free
  4118  003D96  C01B  F041         	movff	?___awtofl+3,?___asflsub+5
  4119  003D9A  C01A  F040         	movff	?___awtofl+2,?___asflsub+4
  4120  003D9E  C019  F03F         	movff	?___awtofl+1,?___asflsub+3
  4121  003DA2  C018  F03E         	movff	?___awtofl,?___asflsub+2
  4122  003DA6  EC57  F02B         	call	___asflsub	;wreg free
  4123  003DAA  C0B9  F034         	movff	exp@x,?_eval_poly
  4124  003DAE  C0BA  F035         	movff	exp@x+1,?_eval_poly+1
  4125  003DB2  C0BB  F036         	movff	exp@x+2,?_eval_poly+2
  4126  003DB6  C0BC  F037         	movff	exp@x+3,?_eval_poly+3
  4127  003DBA  0E20               	movlw	low exp@coeff
  4128  003DBC  6E38               	movwf	?_eval_poly+4,c
  4129  003DBE  6A3A               	clrf	?_eval_poly+6,c
  4130  003DC0  0E09               	movlw	9
  4131  003DC2  6E39               	movwf	?_eval_poly+5,c
  4132  003DC4  EC59  F026         	call	_eval_poly	;wreg free
  4133  003DC8  C037  F043         	movff	?_eval_poly+3,?_ldexp+3
  4134  003DCC  C036  F042         	movff	?_eval_poly+2,?_ldexp+2
  4135  003DD0  C035  F041         	movff	?_eval_poly+1,?_ldexp+1
  4136  003DD4  C034  F040         	movff	?_eval_poly,?_ldexp
  4137  003DD8  C0C1  F044         	movff	exp@exponent,?_ldexp+4
  4138  003DDC  C0C2  F045         	movff	exp@exponent+1,?_ldexp+5
  4139  003DE0  ECC0  F027         	call	_ldexp	;wreg free
  4140  003DE4  C043  F0BC         	movff	?_ldexp+3,exp@x+3
  4141  003DE8  C042  F0BB         	movff	?_ldexp+2,exp@x+2
  4142  003DEC  C041  F0BA         	movff	?_ldexp+1,exp@x+1
  4143  003DF0  C040  F0B9         	movff	?_ldexp,exp@x
  4144  003DF4  0100               	movlb	0	; () banked
  4145  003DF6  51C3               	movf	exp@sign& (0+255),w,b
  4146  003DF8  E02C               	bz	l1567
  4147                           
  4148                           ; BSR set to: 0
  4149  003DFA  EE20  F0B9         	lfsr	2,exp@x
  4150  003DFE  0EFF               	movlw	255
  4151  003E00  18DE               	xorwf	postinc2,w,c
  4152  003E02  0EFF               	movlw	255
  4153  003E04  B4D8               	btfsc	status,2,c
  4154  003E06  18DE               	xorwf	postinc2,w,c
  4155  003E08  0E7F               	movlw	127
  4156  003E0A  B4D8               	btfsc	status,2,c
  4157  003E0C  18DE               	xorwf	postinc2,w,c
  4158  003E0E  0E7F               	movlw	127
  4159  003E10  B4D8               	btfsc	status,2,c
  4160  003E12  18DE               	xorwf	postinc2,w,c
  4161  003E14  E105               	bnz	l14090
  4162  003E16                     u13400:
  4163                           
  4164                           ; BSR set to: 0
  4165  003E16  6BB9               	clrf	?_exp& (0+255),b
  4166  003E18  6BBA               	clrf	(?_exp+1)& (0+255),b
  4167  003E1A  6BBB               	clrf	(?_exp+2)& (0+255),b
  4168  003E1C  6BBC               	clrf	(?_exp+3)& (0+255),b
  4169  003E1E  D021               	goto	l1563
  4170  003E20                     l14090:
  4171                           
  4172                           ; BSR set to: 0
  4173  003E20  6BA3               	clrf	?___fldiv& (0+255),b
  4174  003E22  6BA4               	clrf	(?___fldiv+1)& (0+255),b
  4175  003E24  0E80               	movlw	128
  4176  003E26  6FA5               	movwf	(?___fldiv+2)& (0+255),b
  4177  003E28  0E3F               	movlw	63
  4178  003E2A  6FA6               	movwf	(?___fldiv+3)& (0+255),b
  4179  003E2C  C0B9  F0A7         	movff	exp@x,?___fldiv+4
  4180  003E30  C0BA  F0A8         	movff	exp@x+1,?___fldiv+5
  4181  003E34  C0BB  F0A9         	movff	exp@x+2,?___fldiv+6
  4182  003E38  C0BC  F0AA         	movff	exp@x+3,?___fldiv+7
  4183  003E3C  EC69  F027         	call	___fldiv	;wreg free
  4184  003E40  C0A6  F0BC         	movff	?___fldiv+3,?_exp+3
  4185  003E44  C0A5  F0BB         	movff	?___fldiv+2,?_exp+2
  4186  003E48  C0A4  F0BA         	movff	?___fldiv+1,?_exp+1
  4187  003E4C  C0A3  F0B9         	movff	?___fldiv,?_exp
  4188  003E50  D008               	goto	l1563
  4189  003E52                     l1567:
  4190                           
  4191                           ; BSR set to: 0
  4192  003E52  C0B9  F0B9         	movff	exp@x,?_exp
  4193  003E56  C0BA  F0BA         	movff	exp@x+1,?_exp+1
  4194  003E5A  C0BB  F0BB         	movff	exp@x+2,?_exp+2
  4195  003E5E  C0BC  F0BC         	movff	exp@x+3,?_exp+3
  4196  003E62                     l1563:
  4197  003E62  0012               	return	
  4198  003E64                     __end_of_exp:
  4199                           	opt stack 0
  4200                           tblptru	equ	0xFF8
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           postinc0	equ	0xFEE
  4204                           wreg	equ	0xFE8
  4205                           postdec1	equ	0xFE5
  4206                           fsr1h	equ	0xFE2
  4207                           fsr1l	equ	0xFE1
  4208                           indf2	equ	0xFDF
  4209                           postinc2	equ	0xFDE
  4210                           postdec2	equ	0xFDD
  4211                           fsr2h	equ	0xFDA
  4212                           fsr2l	equ	0xFD9
  4213                           status	equ	0xFD8
  4214                           
  4215 ;; *************** function ___flneg *****************
  4216 ;; Defined at:
  4217 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4218 ;; Parameters:    Size  Location     Type
  4219 ;;  f1              4   13[COMRAM] unsigned char 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  4   13[COMRAM] unsigned char 
  4224 ;; Registers used:
  4225 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4226 ;; Tracked objects:
  4227 ;;		On entry : F/0
  4228 ;;		On exit  : F/0
  4229 ;;		Unchanged: F/0
  4230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4231 ;;      Params:         4       0       0       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0       0       0
  4234 ;;      Totals:         4       0       0       0       0       0       0
  4235 ;;Total ram usage:        4 bytes
  4236 ;; Hardware stack levels used:    1
  4237 ;; Hardware stack levels required when called:    2
  4238 ;; This function calls:
  4239 ;;		Nothing
  4240 ;; This function is called by:
  4241 ;;		_exp
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text9
  4246  005B64                     __ptext9:
  4247                           	opt stack 0
  4248  005B64                     ___flneg:
  4249                           	opt stack 26
  4250                           
  4251                           ; BSR set to: 0
  4252                           
  4253                           ;incstack = 0
  4254                           ;incstack = 0
  4255  005B64  EE20  F00E         	lfsr	2,___flneg@f1
  4256  005B68  50DE               	movf	postinc2,w,c
  4257  005B6A  10DE               	iorwf	postinc2,w,c
  4258  005B6C  10DE               	iorwf	postinc2,w,c
  4259  005B6E  10DE               	iorwf	postinc2,w,c
  4260  005B70  E002               	bz	l11784
  4261                           
  4262                           ; BSR set to: 0
  4263  005B72  0E80               	movlw	128
  4264  005B74  1A11               	xorwf	___flneg@f1+3,f,c
  4265  005B76                     l11784:
  4266                           
  4267                           ; BSR set to: 0
  4268  005B76  C00E  F00E         	movff	___flneg@f1,?___flneg
  4269  005B7A  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4270  005B7E  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4271  005B82  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4272                           
  4273                           ; BSR set to: 0
  4274  005B86  0012               	return	
  4275  005B88                     __end_of___flneg:
  4276                           	opt stack 0
  4277                           tblptru	equ	0xFF8
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           postinc0	equ	0xFEE
  4281                           wreg	equ	0xFE8
  4282                           postdec1	equ	0xFE5
  4283                           fsr1h	equ	0xFE2
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           postinc2	equ	0xFDE
  4287                           postdec2	equ	0xFDD
  4288                           fsr2h	equ	0xFDA
  4289                           fsr2l	equ	0xFD9
  4290                           status	equ	0xFD8
  4291                           
  4292 ;; *************** function _ldexp *****************
  4293 ;; Defined at:
  4294 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  value           4   63[COMRAM] unsigned char 
  4297 ;;  newexp          2   67[COMRAM] int 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  4   63[COMRAM] int 
  4302 ;; Registers used:
  4303 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4309 ;;      Params:         6       0       0       0       0       0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0
  4311 ;;      Temps:          0       3       0       0       0       0       0
  4312 ;;      Totals:         6       3       0       0       0       0       0
  4313 ;;Total ram usage:        9 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    2
  4316 ;; This function calls:
  4317 ;;		Nothing
  4318 ;; This function is called by:
  4319 ;;		_exp
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text10
  4324  004F80                     __ptext10:
  4325                           	opt stack 0
  4326  004F80                     _ldexp:
  4327                           	opt stack 26
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;incstack = 0
  4331                           ;incstack = 0
  4332  004F80  EE20  F040         	lfsr	2,ldexp@value
  4333  004F84  50DE               	movf	postinc2,w,c
  4334  004F86  10DE               	iorwf	postinc2,w,c
  4335  004F88  10DE               	iorwf	postinc2,w,c
  4336  004F8A  10DE               	iorwf	postinc2,w,c
  4337  004F8C  E015               	bz	u10230
  4338  004F8E  5043               	movf	ldexp@value+3,w,c
  4339  004F90  0B7F               	andlw	127
  4340  004F92  0100               	movlb	0	; () banked
  4341  004F94  6FA3               	movwf	??_ldexp& (0+255),b
  4342  004F96  90D8               	bcf	status,0,c
  4343  004F98  35A3               	rlcf	??_ldexp& (0+255),w,b
  4344  004F9A  6FA4               	movwf	(??_ldexp+1)& (0+255),b
  4345  004F9C  6BA5               	clrf	(??_ldexp+2)& (0+255),b
  4346  004F9E  37A5               	rlcf	(??_ldexp+2)& (0+255),f,b
  4347  004FA0  51A4               	movf	(??_ldexp+1)& (0+255),w,b
  4348  004FA2  2644               	addwf	ldexp@newexp,f,c
  4349  004FA4  51A5               	movf	(??_ldexp+2)& (0+255),w,b
  4350  004FA6  2245               	addwfc	ldexp@newexp+1,f,c
  4351  004FA8  3442               	rlcf	ldexp@value+2,w,c
  4352  004FAA  36E8               	rlcf	wreg,f,c
  4353  004FAC  0B01               	andlw	1
  4354  004FAE  2644               	addwf	ldexp@newexp,f,c
  4355  004FB0  0E00               	movlw	0
  4356  004FB2  2245               	addwfc	ldexp@newexp+1,f,c
  4357                           
  4358                           ; BSR set to: 0
  4359  004FB4  AE45               	btfss	ldexp@newexp+1,7,c
  4360  004FB6  D005               	goto	l11746
  4361  004FB8                     u10230:
  4362                           
  4363                           ; BSR set to: 0
  4364  004FB8  6A40               	clrf	?_ldexp,c
  4365  004FBA  6A41               	clrf	?_ldexp+1,c
  4366  004FBC  6A42               	clrf	?_ldexp+2,c
  4367  004FBE  6A43               	clrf	?_ldexp+3,c
  4368  004FC0  D031               	goto	l1688
  4369  004FC2                     l11746:
  4370                           
  4371                           ; BSR set to: 0
  4372  004FC2  5045               	movf	ldexp@newexp+1,w,c
  4373  004FC4  0A80               	xorlw	128
  4374  004FC6  0F7F               	addlw	-129
  4375  004FC8  0E00               	movlw	0
  4376  004FCA  B4D8               	btfsc	status,2,c
  4377  004FCC  5C44               	subwf	ldexp@newexp,w,c
  4378  004FCE  E30E               	bnc	l11760
  4379                           
  4380                           ; BSR set to: 0
  4381  004FD0  AE43               	btfss	ldexp@value+3,7,c
  4382  004FD2  D006               	goto	l11756
  4383                           
  4384                           ; BSR set to: 0
  4385  004FD4  6840               	setf	?_ldexp,c
  4386  004FD6  6841               	setf	?_ldexp+1,c
  4387  004FD8  0E7F               	movlw	127
  4388  004FDA  6E42               	movwf	?_ldexp+2,c
  4389  004FDC  0EFF               	movlw	255
  4390  004FDE  D004               	goto	L4
  4391  004FE0                     l11756:
  4392                           
  4393                           ; BSR set to: 0
  4394  004FE0  6840               	setf	?_ldexp,c
  4395  004FE2  6841               	setf	?_ldexp+1,c
  4396  004FE4  0E7F               	movlw	127
  4397  004FE6  6E42               	movwf	?_ldexp+2,c
  4398  004FE8                     L4:
  4399  004FE8  6E43               	movwf	?_ldexp+3,c
  4400  004FEA  D01C               	goto	l1688
  4401  004FEC                     l11760:
  4402                           
  4403                           ; BSR set to: 0
  4404  004FEC  3445               	rlcf	ldexp@newexp+1,w,c
  4405  004FEE  3045               	rrcf	ldexp@newexp+1,w,c
  4406  004FF0  6FA4               	movwf	(??_ldexp+1)& (0+255),b
  4407  004FF2  3044               	rrcf	ldexp@newexp,w,c
  4408  004FF4  6FA3               	movwf	??_ldexp& (0+255),b
  4409  004FF6  1843               	xorwf	ldexp@value+3,w,c
  4410  004FF8  0B80               	andlw	-128
  4411  004FFA  19A3               	xorwf	??_ldexp& (0+255),w,b
  4412  004FFC  6E43               	movwf	ldexp@value+3,c
  4413  004FFE  C044  F0A3         	movff	ldexp@newexp,??_ldexp
  4414  005002  0E01               	movlw	1
  4415  005004  17A3               	andwf	??_ldexp& (0+255),f,b
  4416  005006  33A3               	rrcf	??_ldexp& (0+255),f,b
  4417  005008  33A3               	rrcf	??_ldexp& (0+255),f,b
  4418  00500A  5042               	movf	ldexp@value+2,w,c
  4419  00500C  19A3               	xorwf	??_ldexp& (0+255),w,b
  4420  00500E  0B7F               	andlw	-129
  4421  005010  19A3               	xorwf	??_ldexp& (0+255),w,b
  4422  005012  6E42               	movwf	ldexp@value+2,c
  4423                           
  4424                           ; BSR set to: 0
  4425  005014  C040  F040         	movff	ldexp@value,?_ldexp
  4426  005018  C041  F041         	movff	ldexp@value+1,?_ldexp+1
  4427  00501C  C042  F042         	movff	ldexp@value+2,?_ldexp+2
  4428  005020  C043  F043         	movff	ldexp@value+3,?_ldexp+3
  4429  005024                     l1688:
  4430  005024  0012               	return	
  4431  005026                     __end_of_ldexp:
  4432                           	opt stack 0
  4433                           tblptru	equ	0xFF8
  4434                           prodh	equ	0xFF4
  4435                           prodl	equ	0xFF3
  4436                           postinc0	equ	0xFEE
  4437                           wreg	equ	0xFE8
  4438                           postdec1	equ	0xFE5
  4439                           fsr1h	equ	0xFE2
  4440                           fsr1l	equ	0xFE1
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _eval_poly *****************
  4449 ;; Defined at:
  4450 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  x               4   51[COMRAM] int 
  4453 ;;  d               1   55[COMRAM] PTR const 
  4454 ;;		 -> log@coeff(36), exp@coeff(40), 
  4455 ;;  n               2   56[COMRAM] int 
  4456 ;; Auto vars:     Size  Location     Type
  4457 ;;  res             4   59[COMRAM] int 
  4458 ;; Return value:  Size  Location     Type
  4459 ;;                  4   51[COMRAM] int 
  4460 ;; Registers used:
  4461 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4462 ;; Tracked objects:
  4463 ;;		On entry : 0/0
  4464 ;;		On exit  : 0/0
  4465 ;;		Unchanged: 0/0
  4466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4467 ;;      Params:         7       0       0       0       0       0       0
  4468 ;;      Locals:         4       0       0       0       0       0       0
  4469 ;;      Temps:          1       0       0       0       0       0       0
  4470 ;;      Totals:        12       0       0       0       0       0       0
  4471 ;;Total ram usage:       12 bytes
  4472 ;; Hardware stack levels used:    1
  4473 ;; Hardware stack levels required when called:    4
  4474 ;; This function calls:
  4475 ;;		___fladd
  4476 ;;		___flmul
  4477 ;; This function is called by:
  4478 ;;		_exp
  4479 ;;		_log
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text11
  4484  004CB2                     __ptext11:
  4485                           	opt stack 0
  4486  004CB2                     _eval_poly:
  4487                           	opt stack 24
  4488                           
  4489                           ;incstack = 0
  4490                           ;incstack = 0
  4491  004CB2  5039               	movf	eval_poly@n,w,c
  4492  004CB4  0D04               	mullw	4
  4493  004CB6  5038               	movf	eval_poly@d,w,c
  4494  004CB8  24F3               	addwf	prodl,w,c
  4495  004CBA  6E3B               	movwf	??_eval_poly& (0+255),c
  4496  004CBC  C03B  FFF6         	movff	??_eval_poly,tblptrl
  4497  004CC0  0E0B               	movlw	high __smallconst
  4498  004CC2  6EF7               	movwf	tblptrh,c
  4499  004CC4  0009               	tblrd		*+
  4500  004CC6  CFF5 F03C          	movff	tablat,eval_poly@res
  4501  004CCA  0009               	tblrd		*+
  4502  004CCC  CFF5 F03D          	movff	tablat,eval_poly@res+1
  4503  004CD0  0009               	tblrd		*+
  4504  004CD2  CFF5 F03E          	movff	tablat,eval_poly@res+2
  4505  004CD6  000A               	tblrd		*-
  4506  004CD8  CFF5 F03F          	movff	tablat,eval_poly@res+3
  4507  004CDC  D03C               	goto	l14394
  4508  004CDE                     l14392:
  4509  004CDE  C03C  F022         	movff	eval_poly@res,?___flmul+4
  4510  004CE2  C03D  F023         	movff	eval_poly@res+1,?___flmul+5
  4511  004CE6  C03E  F024         	movff	eval_poly@res+2,?___flmul+6
  4512  004CEA  C03F  F025         	movff	eval_poly@res+3,?___flmul+7
  4513  004CEE  C034  F01E         	movff	eval_poly@x,?___flmul
  4514  004CF2  C035  F01F         	movff	eval_poly@x+1,?___flmul+1
  4515  004CF6  C036  F020         	movff	eval_poly@x+2,?___flmul+2
  4516  004CFA  C037  F021         	movff	eval_poly@x+3,?___flmul+3
  4517  004CFE  ECD4  F024         	call	___flmul	;wreg free
  4518  004D02  C021  F021         	movff	?___flmul+3,?___fladd+3
  4519  004D06  C020  F020         	movff	?___flmul+2,?___fladd+2
  4520  004D0A  C01F  F01F         	movff	?___flmul+1,?___fladd+1
  4521  004D0E  C01E  F01E         	movff	?___flmul,?___fladd
  4522  004D12  0639               	decf	eval_poly@n,f,c
  4523  004D14  A0D8               	btfss	status,0,c
  4524  004D16  063A               	decf	eval_poly@n+1,f,c
  4525  004D18  5039               	movf	eval_poly@n& (0+255),w,c
  4526  004D1A  0D04               	mullw	4
  4527  004D1C  5038               	movf	eval_poly@d,w,c
  4528  004D1E  24F3               	addwf	prodl,w,c
  4529  004D20  6E3B               	movwf	??_eval_poly& (0+255),c
  4530  004D22  C03B  FFF6         	movff	??_eval_poly,tblptrl
  4531  004D26  0E0B               	movlw	high __smallconst
  4532  004D28  6EF7               	movwf	tblptrh,c
  4533  004D2A  0009               	tblrd		*+
  4534  004D2C  CFF5 F022          	movff	tablat,?___fladd+4
  4535  004D30  0009               	tblrd		*+
  4536  004D32  CFF5 F023          	movff	tablat,?___fladd+5
  4537  004D36  0009               	tblrd		*+
  4538  004D38  CFF5 F024          	movff	tablat,?___fladd+6
  4539  004D3C  000A               	tblrd		*-
  4540  004D3E  CFF5 F025          	movff	tablat,?___fladd+7
  4541  004D42  EC6E  F021         	call	___fladd	;wreg free
  4542  004D46  C021  F03F         	movff	?___fladd+3,eval_poly@res+3
  4543  004D4A  C020  F03E         	movff	?___fladd+2,eval_poly@res+2
  4544  004D4E  C01F  F03D         	movff	?___fladd+1,eval_poly@res+1
  4545  004D52  C01E  F03C         	movff	?___fladd,eval_poly@res
  4546  004D56                     l14394:
  4547  004D56  503A               	movf	eval_poly@n+1,w,c
  4548  004D58  1039               	iorwf	eval_poly@n,w,c
  4549  004D5A  E1C1               	bnz	l14392
  4550  004D5C  C03C  F034         	movff	eval_poly@res,?_eval_poly
  4551  004D60  C03D  F035         	movff	eval_poly@res+1,?_eval_poly+1
  4552  004D64  C03E  F036         	movff	eval_poly@res+2,?_eval_poly+2
  4553  004D68  C03F  F037         	movff	eval_poly@res+3,?_eval_poly+3
  4554  004D6C  0012               	return	
  4555  004D6E                     __end_of_eval_poly:
  4556                           	opt stack 0
  4557                           tblptru	equ	0xFF8
  4558                           tblptrh	equ	0xFF7
  4559                           tblptrl	equ	0xFF6
  4560                           tablat	equ	0xFF5
  4561                           prodh	equ	0xFF4
  4562                           prodl	equ	0xFF3
  4563                           postinc0	equ	0xFEE
  4564                           wreg	equ	0xFE8
  4565                           postdec1	equ	0xFE5
  4566                           fsr1h	equ	0xFE2
  4567                           fsr1l	equ	0xFE1
  4568                           indf2	equ	0xFDF
  4569                           postinc2	equ	0xFDE
  4570                           postdec2	equ	0xFDD
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function _floor *****************
  4576 ;; Defined at:
  4577 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  x               4   11[BANK0 ] int 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  i               4   15[BANK0 ] int 
  4582 ;;  expon           2   19[BANK0 ] int 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  4   11[BANK0 ] int 
  4585 ;; Registers used:
  4586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4592 ;;      Params:         0       4       0       0       0       0       0
  4593 ;;      Locals:         0       6       0       0       0       0       0
  4594 ;;      Temps:          0       0       0       0       0       0       0
  4595 ;;      Totals:         0      10       0       0       0       0       0
  4596 ;;Total ram usage:       10 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    4
  4599 ;; This function calls:
  4600 ;;		___altofl
  4601 ;;		___fladd
  4602 ;;		___flge
  4603 ;;		_frexp
  4604 ;;		___fltol
  4605 ;; This function is called by:
  4606 ;;		_exp
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text12
  4611  0047BE                     __ptext12:
  4612                           	opt stack 0
  4613  0047BE                     _floor:
  4614                           	opt stack 24
  4615                           
  4616                           ;incstack = 0
  4617                           ;incstack = 0
  4618  0047BE  C0AE  F00E         	movff	floor@x,?_frexp
  4619  0047C2  C0AF  F00F         	movff	floor@x+1,?_frexp+1
  4620  0047C6  C0B0  F010         	movff	floor@x+2,?_frexp+2
  4621  0047CA  C0B1  F011         	movff	floor@x+3,?_frexp+3
  4622  0047CE  0100               	movlb	0	; () banked
  4623  0047D0  0E00               	movlw	high floor@expon
  4624  0047D2  6E13               	movwf	?_frexp+5,c
  4625  0047D4  0EB6               	movlw	low floor@expon
  4626  0047D6  6E12               	movwf	?_frexp+4,c
  4627  0047D8  ECFC  F028         	call	_frexp	;wreg free
  4628                           
  4629                           ; BSR set to: 0
  4630  0047DC  AFB7               	btfss	(floor@expon+1)& (0+255),7,b
  4631  0047DE  D00F               	goto	l14380
  4632                           
  4633                           ; BSR set to: 0
  4634  0047E0  AFB1               	btfss	(floor@x+3)& (0+255),7,b
  4635  0047E2  D008               	goto	l1656
  4636                           
  4637                           ; BSR set to: 0
  4638  0047E4  0E00               	movlw	0
  4639  0047E6  6FAE               	movwf	?_floor& (0+255),b
  4640  0047E8  6FAF               	movwf	(?_floor+1)& (0+255),b
  4641  0047EA  0E80               	movlw	128
  4642  0047EC  6FB0               	movwf	(?_floor+2)& (0+255),b
  4643  0047EE  0EBF               	movlw	191
  4644  0047F0  6FB1               	movwf	(?_floor+3)& (0+255),b
  4645  0047F2  D063               	goto	l1657
  4646  0047F4                     l1656:
  4647                           
  4648                           ; BSR set to: 0
  4649  0047F4  6BAE               	clrf	?_floor& (0+255),b
  4650  0047F6  6BAF               	clrf	(?_floor+1)& (0+255),b
  4651  0047F8  6BB0               	clrf	(?_floor+2)& (0+255),b
  4652  0047FA  6BB1               	clrf	(?_floor+3)& (0+255),b
  4653  0047FC  D05E               	goto	l1657
  4654  0047FE                     l14380:
  4655                           
  4656                           ; BSR set to: 0
  4657  0047FE  0E1D               	movlw	29
  4658  004800  5DB6               	subwf	floor@expon& (0+255),w,b
  4659  004802  0E00               	movlw	0
  4660  004804  59B7               	subwfb	(floor@expon+1)& (0+255),w,b
  4661  004806  E309               	bnc	l14384
  4662                           
  4663                           ; BSR set to: 0
  4664  004808  C0AE  F0AE         	movff	floor@x,?_floor
  4665  00480C  C0AF  F0AF         	movff	floor@x+1,?_floor+1
  4666  004810  C0B0  F0B0         	movff	floor@x+2,?_floor+2
  4667  004814  C0B1  F0B1         	movff	floor@x+3,?_floor+3
  4668  004818  D050               	goto	l1657
  4669  00481A                     l14384:
  4670                           
  4671                           ; BSR set to: 0
  4672  00481A  C0AE  F034         	movff	floor@x,?___fltol
  4673  00481E  C0AF  F035         	movff	floor@x+1,?___fltol+1
  4674  004822  C0B0  F036         	movff	floor@x+2,?___fltol+2
  4675  004826  C0B1  F037         	movff	floor@x+3,?___fltol+3
  4676  00482A  EC63  F028         	call	___fltol	;wreg free
  4677  00482E  C037  F0AC         	movff	?___fltol+3,?___altofl+3
  4678  004832  C036  F0AB         	movff	?___fltol+2,?___altofl+2
  4679  004836  C035  F0AA         	movff	?___fltol+1,?___altofl+1
  4680  00483A  C034  F0A9         	movff	?___fltol,?___altofl
  4681  00483E  EC32  F02B         	call	___altofl	;wreg free
  4682  004842  C0AC  F0B5         	movff	?___altofl+3,floor@i+3
  4683  004846  C0AB  F0B4         	movff	?___altofl+2,floor@i+2
  4684  00484A  C0AA  F0B3         	movff	?___altofl+1,floor@i+1
  4685  00484E  C0A9  F0B2         	movff	?___altofl,floor@i
  4686  004852  C0AE  F00E         	movff	floor@x,?___flge
  4687  004856  C0AF  F00F         	movff	floor@x+1,?___flge+1
  4688  00485A  C0B0  F010         	movff	floor@x+2,?___flge+2
  4689  00485E  C0B1  F011         	movff	floor@x+3,?___flge+3
  4690  004862  C0B2  F012         	movff	floor@i,?___flge+4
  4691  004866  C0B3  F013         	movff	floor@i+1,?___flge+5
  4692  00486A  C0B4  F014         	movff	floor@i+2,?___flge+6
  4693  00486E  C0B5  F015         	movff	floor@i+3,?___flge+7
  4694  004872  ECC1  F02A         	call	___flge	;wreg free
  4695  004876  E219               	bc	l1659
  4696  004878  C0B2  F01E         	movff	floor@i,?___fladd
  4697  00487C  C0B3  F01F         	movff	floor@i+1,?___fladd+1
  4698  004880  C0B4  F020         	movff	floor@i+2,?___fladd+2
  4699  004884  C0B5  F021         	movff	floor@i+3,?___fladd+3
  4700  004888  6A22               	clrf	?___fladd+4,c
  4701  00488A  6A23               	clrf	?___fladd+5,c
  4702  00488C  0E80               	movlw	128
  4703  00488E  6E24               	movwf	?___fladd+6,c
  4704  004890  0EBF               	movlw	191
  4705  004892  6E25               	movwf	?___fladd+7,c
  4706  004894  EC6E  F021         	call	___fladd	;wreg free
  4707  004898  C021  F0B1         	movff	?___fladd+3,?_floor+3
  4708  00489C  C020  F0B0         	movff	?___fladd+2,?_floor+2
  4709  0048A0  C01F  F0AF         	movff	?___fladd+1,?_floor+1
  4710  0048A4  C01E  F0AE         	movff	?___fladd,?_floor
  4711  0048A8  D008               	goto	l1657
  4712  0048AA                     l1659:
  4713  0048AA  C0B2  F0AE         	movff	floor@i,?_floor
  4714  0048AE  C0B3  F0AF         	movff	floor@i+1,?_floor+1
  4715  0048B2  C0B4  F0B0         	movff	floor@i+2,?_floor+2
  4716  0048B6  C0B5  F0B1         	movff	floor@i+3,?_floor+3
  4717  0048BA                     l1657:
  4718  0048BA  0012               	return	
  4719  0048BC                     __end_of_floor:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           postinc0	equ	0xFEE
  4728                           wreg	equ	0xFE8
  4729                           postdec1	equ	0xFE5
  4730                           fsr1h	equ	0xFE2
  4731                           fsr1l	equ	0xFE1
  4732                           indf2	equ	0xFDF
  4733                           postinc2	equ	0xFDE
  4734                           postdec2	equ	0xFDD
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function ___fltol *****************
  4740 ;; Defined at:
  4741 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;  f1              4   51[COMRAM] int 
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;  exp1            1   60[COMRAM] unsigned char 
  4746 ;;  sign1           1   59[COMRAM] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  4   51[COMRAM] long 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4756 ;;      Params:         4       0       0       0       0       0       0
  4757 ;;      Locals:         2       0       0       0       0       0       0
  4758 ;;      Temps:          4       0       0       0       0       0       0
  4759 ;;      Totals:        10       0       0       0       0       0       0
  4760 ;;Total ram usage:       10 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    2
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		_doWork
  4767 ;;		_setEventData
  4768 ;;		_exp
  4769 ;;		_floor
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text13
  4774  0050C6                     __ptext13:
  4775                           	opt stack 0
  4776  0050C6                     ___fltol:
  4777                           	opt stack 27
  4778                           
  4779                           ;incstack = 0
  4780                           ;incstack = 0
  4781  0050C6  3436               	rlcf	(___fltol@f1+2)& (0+255),w,c
  4782  0050C8  3437               	rlcf	(___fltol@f1+3)& (0+255),w,c
  4783  0050CA  6E3D               	movwf	___fltol@exp1,c
  4784  0050CC  663D               	tstfsz	___fltol@exp1& (0+255),c
  4785  0050CE  D005               	goto	l11812
  4786  0050D0                     l11810:
  4787  0050D0  6A34               	clrf	?___fltol,c
  4788  0050D2  6A35               	clrf	?___fltol+1,c
  4789  0050D4  6A36               	clrf	?___fltol+2,c
  4790  0050D6  6A37               	clrf	?___fltol+3,c
  4791  0050D8  D043               	goto	l1668
  4792  0050DA                     l11812:
  4793  0050DA  C034  F038         	movff	___fltol@f1,??___fltol
  4794  0050DE  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  4795  0050E2  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  4796  0050E6  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  4797  0050EA  0E20               	movlw	32
  4798  0050EC  D005               	goto	u10320
  4799  0050EE                     u10325:
  4800  0050EE  90D8               	bcf	status,0,c
  4801  0050F0  323B               	rrcf	??___fltol+3,f,c
  4802  0050F2  323A               	rrcf	??___fltol+2,f,c
  4803  0050F4  3239               	rrcf	??___fltol+1,f,c
  4804  0050F6  3238               	rrcf	??___fltol,f,c
  4805  0050F8                     u10320:
  4806  0050F8  2EE8               	decfsz	wreg,f,c
  4807  0050FA  D7F9               	goto	u10325
  4808  0050FC  5038               	movf	??___fltol,w,c
  4809  0050FE  6E3C               	movwf	___fltol@sign1,c
  4810  005100  8E36               	bsf	___fltol@f1+2,7,c
  4811  005102  6A37               	clrf	___fltol@f1+3,c
  4812  005104  0E96               	movlw	150
  4813  005106  5E3D               	subwf	___fltol@exp1,f,c
  4814  005108  AE3D               	btfss	___fltol@exp1,7,c
  4815  00510A  D00C               	goto	l11830
  4816  00510C  503D               	movf	___fltol@exp1,w,c
  4817  00510E  0A80               	xorlw	128
  4818  005110  0F97               	addlw	151
  4819  005112  E3DE               	bnc	l11810
  4820  005114                     l11826:
  4821  005114  90D8               	bcf	status,0,c
  4822  005116  3237               	rrcf	___fltol@f1+3,f,c
  4823  005118  3236               	rrcf	___fltol@f1+2,f,c
  4824  00511A  3235               	rrcf	___fltol@f1+1,f,c
  4825  00511C  3234               	rrcf	___fltol@f1,f,c
  4826  00511E  3E3D               	incfsz	___fltol@exp1,f,c
  4827  005120  D7F9               	goto	l11826
  4828  005122  D00C               	goto	l11838
  4829  005124                     l11830:
  4830  005124  0E1F               	movlw	31
  4831  005126  643D               	cpfsgt	___fltol@exp1,c
  4832  005128  D007               	goto	l11836
  4833  00512A  D7D2               	goto	l11810
  4834  00512C                     l11834:
  4835  00512C  90D8               	bcf	status,0,c
  4836  00512E  3634               	rlcf	___fltol@f1,f,c
  4837  005130  3635               	rlcf	___fltol@f1+1,f,c
  4838  005132  3636               	rlcf	___fltol@f1+2,f,c
  4839  005134  3637               	rlcf	___fltol@f1+3,f,c
  4840  005136  063D               	decf	___fltol@exp1,f,c
  4841  005138                     l11836:
  4842  005138  663D               	tstfsz	___fltol@exp1,c
  4843  00513A  D7F8               	goto	l11834
  4844  00513C                     l11838:
  4845  00513C  503C               	movf	___fltol@sign1,w,c
  4846  00513E  E008               	bz	l11842
  4847  005140  1E37               	comf	___fltol@f1+3,f,c
  4848  005142  1E36               	comf	___fltol@f1+2,f,c
  4849  005144  1E35               	comf	___fltol@f1+1,f,c
  4850  005146  6C34               	negf	___fltol@f1,c
  4851  005148  0E00               	movlw	0
  4852  00514A  2235               	addwfc	___fltol@f1+1,f,c
  4853  00514C  2236               	addwfc	___fltol@f1+2,f,c
  4854  00514E  2237               	addwfc	___fltol@f1+3,f,c
  4855  005150                     l11842:
  4856  005150  C034  F034         	movff	___fltol@f1,?___fltol
  4857  005154  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  4858  005158  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  4859  00515C  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  4860  005160                     l1668:
  4861  005160  0012               	return	
  4862  005162                     __end_of___fltol:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           postinc0	equ	0xFEE
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _frexp *****************
  4883 ;; Defined at:
  4884 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  value           4   13[COMRAM] long 
  4887 ;;  eptr            2   17[COMRAM] PTR int 
  4888 ;;		 -> log@exponent(2), floor@expon(2), 
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  4   13[COMRAM] PTR int 
  4893 ;; Registers used:
  4894 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4895 ;; Tracked objects:
  4896 ;;		On entry : F/0
  4897 ;;		On exit  : F/0
  4898 ;;		Unchanged: F/0
  4899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4900 ;;      Params:         6       0       0       0       0       0       0
  4901 ;;      Locals:         0       0       0       0       0       0       0
  4902 ;;      Temps:          3       0       0       0       0       0       0
  4903 ;;      Totals:         9       0       0       0       0       0       0
  4904 ;;Total ram usage:        9 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    2
  4907 ;; This function calls:
  4908 ;;		Nothing
  4909 ;; This function is called by:
  4910 ;;		_floor
  4911 ;;		_log
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text14
  4916  0051F8                     __ptext14:
  4917                           	opt stack 0
  4918  0051F8                     _frexp:
  4919                           	opt stack 26
  4920                           
  4921                           ; BSR set to: 0
  4922                           
  4923                           ;incstack = 0
  4924                           ;incstack = 0
  4925  0051F8  EE20  F00E         	lfsr	2,frexp@value
  4926  0051FC  50DE               	movf	postinc2,w,c
  4927  0051FE  10DE               	iorwf	postinc2,w,c
  4928  005200  10DE               	iorwf	postinc2,w,c
  4929  005202  10DE               	iorwf	postinc2,w,c
  4930  005204  E10C               	bnz	l11796
  4931                           
  4932                           ; BSR set to: 0
  4933  005206  C012  FFD9         	movff	frexp@eptr,fsr2l
  4934  00520A  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4935  00520E  0E00               	movlw	0
  4936  005210  6ADE               	clrf	postinc2,c
  4937  005212  6ADD               	clrf	postdec2,c
  4938                           
  4939                           ; BSR set to: 0
  4940  005214  6A0E               	clrf	?_frexp,c
  4941  005216  6A0F               	clrf	?_frexp+1,c
  4942  005218  6A10               	clrf	?_frexp+2,c
  4943  00521A  6A11               	clrf	?_frexp+3,c
  4944  00521C  D02F               	goto	l1684
  4945  00521E                     l11796:
  4946                           
  4947                           ; BSR set to: 0
  4948  00521E  5011               	movf	frexp@value+3,w,c
  4949  005220  0B7F               	andlw	127
  4950  005222  6E14               	movwf	??_frexp& (0+255),c
  4951  005224  90D8               	bcf	status,0,c
  4952  005226  3414               	rlcf	??_frexp,w,c
  4953  005228  6E15               	movwf	(??_frexp+1)& (0+255),c
  4954  00522A  6A16               	clrf	(??_frexp+2)& (0+255),c
  4955  00522C  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4956  00522E  C012  FFD9         	movff	frexp@eptr,fsr2l
  4957  005232  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4958  005236  C015  FFDE         	movff	??_frexp+1,postinc2
  4959  00523A  C016  FFDD         	movff	??_frexp+2,postdec2
  4960  00523E  3410               	rlcf	frexp@value+2,w,c
  4961  005240  36E8               	rlcf	wreg,f,c
  4962  005242  0B01               	andlw	1
  4963  005244  C012  FFD9         	movff	frexp@eptr,fsr2l
  4964  005248  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4965  00524C  12DE               	iorwf	postinc2,f,c
  4966  00524E  0E00               	movlw	0
  4967  005250  12DD               	iorwf	postdec2,f,c
  4968                           
  4969                           ; BSR set to: 0
  4970  005252  C012  FFD9         	movff	frexp@eptr,fsr2l
  4971  005256  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4972  00525A  0E82               	movlw	130
  4973  00525C  26DE               	addwf	postinc2,f,c
  4974  00525E  0EFF               	movlw	255
  4975  005260  22DD               	addwfc	postdec2,f,c
  4976                           
  4977                           ; BSR set to: 0
  4978  005262  5011               	movf	frexp@value+3,w,c
  4979  005264  0B80               	andlw	-128
  4980  005266  093F               	iorlw	63
  4981  005268  6E11               	movwf	frexp@value+3,c
  4982                           
  4983                           ; BSR set to: 0
  4984  00526A  9E10               	bcf	frexp@value+2,7,c
  4985                           
  4986                           ; BSR set to: 0
  4987  00526C  C00E  F00E         	movff	frexp@value,?_frexp
  4988  005270  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4989  005274  C010  F010         	movff	frexp@value+2,?_frexp+2
  4990  005278  C011  F011         	movff	frexp@value+3,?_frexp+3
  4991  00527C                     l1684:
  4992                           
  4993                           ; BSR set to: 0
  4994  00527C  0012               	return	
  4995  00527E                     __end_of_frexp:
  4996                           	opt stack 0
  4997                           tblptru	equ	0xFF8
  4998                           tblptrh	equ	0xFF7
  4999                           tblptrl	equ	0xFF6
  5000                           tablat	equ	0xFF5
  5001                           prodh	equ	0xFF4
  5002                           prodl	equ	0xFF3
  5003                           postinc0	equ	0xFEE
  5004                           wreg	equ	0xFE8
  5005                           postdec1	equ	0xFE5
  5006                           fsr1h	equ	0xFE2
  5007                           fsr1l	equ	0xFE1
  5008                           indf2	equ	0xFDF
  5009                           postinc2	equ	0xFDE
  5010                           postdec2	equ	0xFDD
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function ___flge *****************
  5016 ;; Defined at:
  5017 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;  ff1             4   13[COMRAM] PTR int 
  5020 ;;  ff2             4   17[COMRAM] PTR int 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;		None               void
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5032 ;;      Params:         8       0       0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0
  5035 ;;      Totals:         8       0       0       0       0       0       0
  5036 ;;Total ram usage:        8 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    2
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_exp
  5043 ;;		_floor
  5044 ;; This function uses a non-reentrant model
  5045 ;;
  5046                           
  5047                           	psect	text15
  5048  005582                     __ptext15:
  5049                           	opt stack 0
  5050  005582                     ___flge:
  5051                           	opt stack 26
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;incstack = 0
  5055                           ;incstack = 0
  5056  005582  AE11               	btfss	___flge@ff1+3,7,c
  5057  005584  D009               	goto	l11770
  5058  005586  6C0E               	negf	___flge@ff1,c
  5059  005588  1E0F               	comf	___flge@ff1+1,f,c
  5060  00558A  B0D8               	btfsc	status,0,c
  5061  00558C  2A0F               	incf	___flge@ff1+1,f,c
  5062  00558E  1E10               	comf	___flge@ff1+2,f,c
  5063  005590  B0D8               	btfsc	status,0,c
  5064  005592  2A10               	incf	___flge@ff1+2,f,c
  5065  005594  0E80               	movlw	128
  5066  005596  5611               	subfwb	___flge@ff1+3,f,c
  5067  005598                     l11770:
  5068  005598  AE15               	btfss	___flge@ff2+3,7,c
  5069  00559A  D009               	goto	l1615
  5070  00559C  6C12               	negf	___flge@ff2,c
  5071  00559E  1E13               	comf	___flge@ff2+1,f,c
  5072  0055A0  B0D8               	btfsc	status,0,c
  5073  0055A2  2A13               	incf	___flge@ff2+1,f,c
  5074  0055A4  1E14               	comf	___flge@ff2+2,f,c
  5075  0055A6  B0D8               	btfsc	status,0,c
  5076  0055A8  2A14               	incf	___flge@ff2+2,f,c
  5077  0055AA  0E80               	movlw	128
  5078  0055AC  5615               	subfwb	___flge@ff2+3,f,c
  5079  0055AE                     l1615:
  5080  0055AE  0E80               	movlw	128
  5081  0055B0  1A11               	xorwf	___flge@ff1+3,f,c
  5082  0055B2  1A15               	xorwf	___flge@ff2+3,f,c
  5083  0055B4  5012               	movf	___flge@ff2,w,c
  5084  0055B6  5C0E               	subwf	___flge@ff1,w,c
  5085  0055B8  5013               	movf	___flge@ff2+1,w,c
  5086  0055BA  580F               	subwfb	___flge@ff1+1,w,c
  5087  0055BC  5014               	movf	___flge@ff2+2,w,c
  5088  0055BE  5810               	subwfb	___flge@ff1+2,w,c
  5089  0055C0  5015               	movf	___flge@ff2+3,w,c
  5090  0055C2  5811               	subwfb	___flge@ff1+3,w,c
  5091  0055C4  E202               	bc	l11776
  5092  0055C6  90D8               	bcf	status,0,c
  5093  0055C8  D001               	goto	l1616
  5094  0055CA                     l11776:
  5095  0055CA  80D8               	bsf	status,0,c
  5096  0055CC                     l1616:
  5097  0055CC  0012               	return	
  5098  0055CE                     __end_of___flge:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           postinc0	equ	0xFEE
  5107                           wreg	equ	0xFE8
  5108                           postdec1	equ	0xFE5
  5109                           fsr1h	equ	0xFE2
  5110                           fsr1l	equ	0xFE1
  5111                           indf2	equ	0xFDF
  5112                           postinc2	equ	0xFDE
  5113                           postdec2	equ	0xFDD
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function ___altofl *****************
  5119 ;; Defined at:
  5120 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  c               4    6[BANK0 ] long 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  sign            1   10[BANK0 ] unsigned char 
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  4    6[BANK0 ] unsigned char 
  5127 ;; Registers used:
  5128 ;;		wreg, status,2, status,0, cstack
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5134 ;;      Params:         0       4       0       0       0       0       0
  5135 ;;      Locals:         0       1       0       0       0       0       0
  5136 ;;      Temps:          0       0       0       0       0       0       0
  5137 ;;      Totals:         0       5       0       0       0       0       0
  5138 ;;Total ram usage:        5 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    3
  5141 ;; This function calls:
  5142 ;;		___flpack
  5143 ;; This function is called by:
  5144 ;;		_doWork
  5145 ;;		_floor
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           	psect	text16
  5150  005664                     __ptext16:
  5151                           	opt stack 0
  5152  005664                     ___altofl:
  5153                           	opt stack 26
  5154                           
  5155                           ;incstack = 0
  5156                           ;incstack = 0
  5157  005664  0100               	movlb	0	; () banked
  5158  005666  6BAD               	clrf	___altofl@sign& (0+255),b
  5159  005668  AFAC               	btfss	(___altofl@c+3)& (0+255),7,b
  5160  00566A  D00A               	goto	l14186
  5161                           
  5162                           ; BSR set to: 0
  5163  00566C  1FAC               	comf	(___altofl@c+3)& (0+255),f,b
  5164  00566E  1FAB               	comf	(___altofl@c+2)& (0+255),f,b
  5165  005670  1FAA               	comf	(___altofl@c+1)& (0+255),f,b
  5166  005672  6DA9               	negf	___altofl@c& (0+255),b
  5167  005674  0E00               	movlw	0
  5168  005676  23AA               	addwfc	(___altofl@c+1)& (0+255),f,b
  5169  005678  23AB               	addwfc	(___altofl@c+2)& (0+255),f,b
  5170  00567A  23AC               	addwfc	(___altofl@c+3)& (0+255),f,b
  5171                           
  5172                           ; BSR set to: 0
  5173  00567C  0E01               	movlw	1
  5174  00567E  6FAD               	movwf	___altofl@sign& (0+255),b
  5175  005680                     l14186:
  5176                           
  5177                           ; BSR set to: 0
  5178  005680  C0A9  F00E         	movff	___altofl@c,?___flpack
  5179  005684  C0AA  F00F         	movff	___altofl@c+1,?___flpack+1
  5180  005688  C0AB  F010         	movff	___altofl@c+2,?___flpack+2
  5181  00568C  C0AC  F011         	movff	___altofl@c+3,?___flpack+3
  5182  005690  0E96               	movlw	150
  5183  005692  6E12               	movwf	?___flpack+4,c
  5184  005694  C0AD  F013         	movff	___altofl@sign,?___flpack+5
  5185  005698  EC3C  F025         	call	___flpack	;wreg free
  5186  00569C  C011  F0AC         	movff	?___flpack+3,?___altofl+3
  5187  0056A0  C010  F0AB         	movff	?___flpack+2,?___altofl+2
  5188  0056A4  C00F  F0AA         	movff	?___flpack+1,?___altofl+1
  5189  0056A8  C00E  F0A9         	movff	?___flpack,?___altofl
  5190  0056AC  0012               	return	
  5191  0056AE                     __end_of___altofl:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           postdec1	equ	0xFE5
  5202                           fsr1h	equ	0xFE2
  5203                           fsr1l	equ	0xFE1
  5204                           indf2	equ	0xFDF
  5205                           postinc2	equ	0xFDE
  5206                           postdec2	equ	0xFDD
  5207                           fsr2h	equ	0xFDA
  5208                           fsr2l	equ	0xFD9
  5209                           status	equ	0xFD8
  5210                           
  5211 ;; *************** function ___asflsub *****************
  5212 ;; Defined at:
  5213 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  f1p             2   59[COMRAM] PTR 
  5216 ;;		 -> exp@x(4), doWork@temp(4), 
  5217 ;;  f2              4   61[COMRAM] PTR 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  4   59[COMRAM] PTR 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/1
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5229 ;;      Params:         6       0       0       0       0       0       0
  5230 ;;      Locals:         0       0       0       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0
  5232 ;;      Totals:         6       0       0       0       0       0       0
  5233 ;;Total ram usage:        6 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    5
  5236 ;; This function calls:
  5237 ;;		___flsub
  5238 ;; This function is called by:
  5239 ;;		_doWork
  5240 ;;		_exp
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	text17
  5245  0056AE                     __ptext17:
  5246                           	opt stack 0
  5247  0056AE                     ___asflsub:
  5248                           	opt stack 24
  5249                           
  5250                           ;	Return value of ___asflsub is never used
  5251                           
  5252                           ;incstack = 0
  5253                           ;incstack = 0
  5254  0056AE  C03C  FFD9         	movff	___asflsub@f1p,fsr2l
  5255  0056B2  C03D  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5256  0056B6  CFDE F034          	movff	postinc2,?___flsub
  5257  0056BA  CFDE F035          	movff	postinc2,?___flsub+1
  5258  0056BE  CFDE F036          	movff	postinc2,?___flsub+2
  5259  0056C2  CFDE F037          	movff	postinc2,?___flsub+3
  5260  0056C6  C03E  F038         	movff	___asflsub@f2,?___flsub+4
  5261  0056CA  C03F  F039         	movff	___asflsub@f2+1,?___flsub+5
  5262  0056CE  C040  F03A         	movff	___asflsub@f2+2,?___flsub+6
  5263  0056D2  C041  F03B         	movff	___asflsub@f2+3,?___flsub+7
  5264  0056D6  EC86  F02C         	call	___flsub	;wreg free
  5265  0056DA  C03C  FFD9         	movff	___asflsub@f1p,fsr2l
  5266  0056DE  C03D  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5267  0056E2  C034  FFDE         	movff	?___flsub,postinc2
  5268  0056E6  C035  FFDE         	movff	?___flsub+1,postinc2
  5269  0056EA  C036  FFDE         	movff	?___flsub+2,postinc2
  5270  0056EE  C037  FFDD         	movff	?___flsub+3,postdec2
  5271  0056F2  06D9               	decf	fsr2l,f,c
  5272  0056F4  06D9               	decf	fsr2l,f,c
  5273  0056F6  0012               	return	
  5274  0056F8                     __end_of___asflsub:
  5275                           	opt stack 0
  5276                           tblptru	equ	0xFF8
  5277                           tblptrh	equ	0xFF7
  5278                           tblptrl	equ	0xFF6
  5279                           tablat	equ	0xFF5
  5280                           prodh	equ	0xFF4
  5281                           prodl	equ	0xFF3
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           postdec1	equ	0xFE5
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function ___flsub *****************
  5295 ;; Defined at:
  5296 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  f1              4   51[COMRAM] PTR 
  5299 ;;  f2              4   55[COMRAM] PTR 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  4   51[COMRAM] PTR 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/1
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5311 ;;      Params:         8       0       0       0       0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0
  5314 ;;      Totals:         8       0       0       0       0       0       0
  5315 ;;Total ram usage:        8 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    4
  5318 ;; This function calls:
  5319 ;;		___fladd
  5320 ;; This function is called by:
  5321 ;;		_doWork
  5322 ;;		___asflsub
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text18
  5327  00590C                     __ptext18:
  5328                           	opt stack 0
  5329  00590C                     ___flsub:
  5330                           	opt stack 25
  5331                           
  5332                           ;incstack = 0
  5333                           ;incstack = 0
  5334  00590C  0E80               	movlw	128
  5335  00590E  1A3B               	xorwf	___flsub@f2+3,f,c
  5336  005910  C034  F01E         	movff	___flsub@f1,?___fladd
  5337  005914  C035  F01F         	movff	___flsub@f1+1,?___fladd+1
  5338  005918  C036  F020         	movff	___flsub@f1+2,?___fladd+2
  5339  00591C  C037  F021         	movff	___flsub@f1+3,?___fladd+3
  5340  005920  C038  F022         	movff	___flsub@f2,?___fladd+4
  5341  005924  C039  F023         	movff	___flsub@f2+1,?___fladd+5
  5342  005928  C03A  F024         	movff	___flsub@f2+2,?___fladd+6
  5343  00592C  C03B  F025         	movff	___flsub@f2+3,?___fladd+7
  5344  005930  EC6E  F021         	call	___fladd	;wreg free
  5345  005934  C021  F037         	movff	?___fladd+3,?___flsub+3
  5346  005938  C020  F036         	movff	?___fladd+2,?___flsub+2
  5347  00593C  C01F  F035         	movff	?___fladd+1,?___flsub+1
  5348  005940  C01E  F034         	movff	?___fladd,?___flsub
  5349  005944  0012               	return	
  5350  005946                     __end_of___flsub:
  5351                           	opt stack 0
  5352                           tblptru	equ	0xFF8
  5353                           tblptrh	equ	0xFF7
  5354                           tblptrl	equ	0xFF6
  5355                           tablat	equ	0xFF5
  5356                           prodh	equ	0xFF4
  5357                           prodl	equ	0xFF3
  5358                           postinc0	equ	0xFEE
  5359                           wreg	equ	0xFE8
  5360                           postdec1	equ	0xFE5
  5361                           fsr1h	equ	0xFE2
  5362                           fsr1l	equ	0xFE1
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function ___asflmul *****************
  5371 ;; Defined at:
  5372 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  mp              1    wreg     PTR 
  5375 ;;		 -> exp@x(4), 
  5376 ;;  multiplicand    4   51[COMRAM] PTR 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  mp              1   55[COMRAM] PTR 
  5379 ;;		 -> exp@x(4), 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  4   51[COMRAM] PTR 
  5382 ;; Registers used:
  5383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : F/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5389 ;;      Params:         4       0       0       0       0       0       0
  5390 ;;      Locals:         1       0       0       0       0       0       0
  5391 ;;      Temps:          0       0       0       0       0       0       0
  5392 ;;      Totals:         5       0       0       0       0       0       0
  5393 ;;Total ram usage:        5 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    4
  5396 ;; This function calls:
  5397 ;;		___flmul
  5398 ;; This function is called by:
  5399 ;;		_exp
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text19
  5404  0056F8                     __ptext19:
  5405                           	opt stack 0
  5406  0056F8                     ___asflmul:
  5407                           	opt stack 24
  5408                           
  5409                           ;incstack = 0
  5410                           ;incstack = 0
  5411                           ;___asflmul@mp stored from wreg
  5412  0056F8  CFE8 F038          	movff	wreg,___asflmul@mp
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;	Return value of ___asflmul is never used
  5416  0056FC  5038               	movf	___asflmul@mp,w,c
  5417  0056FE  6ED9               	movwf	fsr2l,c
  5418  005700  6ADA               	clrf	fsr2h,c
  5419  005702  CFDE F01E          	movff	postinc2,?___flmul
  5420  005706  CFDE F01F          	movff	postinc2,?___flmul+1
  5421  00570A  CFDE F020          	movff	postinc2,?___flmul+2
  5422  00570E  CFDE F021          	movff	postinc2,?___flmul+3
  5423  005712  C034  F022         	movff	___asflmul@multiplicand,?___flmul+4
  5424  005716  C035  F023         	movff	___asflmul@multiplicand+1,?___flmul+5
  5425  00571A  C036  F024         	movff	___asflmul@multiplicand+2,?___flmul+6
  5426  00571E  C037  F025         	movff	___asflmul@multiplicand+3,?___flmul+7
  5427  005722  ECD4  F024         	call	___flmul	;wreg free
  5428  005726  5038               	movf	___asflmul@mp,w,c
  5429  005728  6ED9               	movwf	fsr2l,c
  5430  00572A  6ADA               	clrf	fsr2h,c
  5431  00572C  C01E  FFDE         	movff	?___flmul,postinc2
  5432  005730  C01F  FFDE         	movff	?___flmul+1,postinc2
  5433  005734  C020  FFDE         	movff	?___flmul+2,postinc2
  5434  005738  C021  FFDD         	movff	?___flmul+3,postdec2
  5435  00573C  06D9               	decf	fsr2l,f,c
  5436  00573E  06D9               	decf	fsr2l,f,c
  5437  005740  0012               	return	
  5438  005742                     __end_of___asflmul:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           postinc0	equ	0xFEE
  5447                           wreg	equ	0xFE8
  5448                           postdec1	equ	0xFE5
  5449                           fsr1h	equ	0xFE2
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function ___fldiv *****************
  5459 ;; Defined at:
  5460 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  f1              4    0[BANK0 ] PTR 
  5463 ;;  f2              4    4[BANK0 ] PTR 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  f3              4   16[BANK0 ] PTR 
  5466 ;;  sign            1   21[BANK0 ] unsigned char 
  5467 ;;  exp             1   20[BANK0 ] unsigned char 
  5468 ;;  cntr            1   15[BANK0 ] unsigned char 
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  4    0[BANK0 ] unsigned char 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0, cstack
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5478 ;;      Params:         0       8       0       0       0       0       0
  5479 ;;      Locals:         0      14       0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0
  5481 ;;      Totals:         0      22       0       0       0       0       0
  5482 ;;Total ram usage:       22 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    3
  5485 ;; This function calls:
  5486 ;;		___flpack
  5487 ;; This function is called by:
  5488 ;;		_doWork
  5489 ;;		_Celsius2Fahrenheit
  5490 ;;		___asfldiv
  5491 ;;		_exp
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text20
  5496  004ED2                     __ptext20:
  5497                           	opt stack 0
  5498  004ED2                     ___fldiv:
  5499                           	opt stack 26
  5500                           
  5501                           ;incstack = 0
  5502                           ;incstack = 0
  5503  004ED2  0100               	movlb	0	; () banked
  5504  004ED4  35A5               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  5505  004ED6  35A6               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  5506  004ED8  6FB7               	movwf	___fldiv@exp& (0+255),b
  5507  004EDA  67B7               	tstfsz	___fldiv@exp& (0+255),b
  5508  004EDC  D001               	goto	l14270
  5509  004EDE  D006               	goto	u13740
  5510  004EE0                     l14270:
  5511                           
  5512                           ; BSR set to: 0
  5513  004EE0  0100               	movlb	0	; () banked
  5514  004EE2  35A9               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  5515  004EE4  35AA               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  5516  004EE6  6FB8               	movwf	___fldiv@sign& (0+255),b
  5517  004EE8  67B8               	tstfsz	___fldiv@sign& (0+255),b
  5518  004EEA  D005               	goto	l14274
  5519  004EEC                     u13740:
  5520                           
  5521                           ; BSR set to: 0
  5522  004EEC  6BA3               	clrf	?___fldiv& (0+255),b
  5523  004EEE  6BA4               	clrf	(?___fldiv+1)& (0+255),b
  5524  004EF0  6BA5               	clrf	(?___fldiv+2)& (0+255),b
  5525  004EF2  6BA6               	clrf	(?___fldiv+3)& (0+255),b
  5526  004EF4  D044               	goto	l1607
  5527  004EF6                     l14274:
  5528                           
  5529                           ; BSR set to: 0
  5530  004EF6  51B8               	movf	___fldiv@sign& (0+255),w,b
  5531  004EF8  0F89               	addlw	137
  5532  004EFA  5FB7               	subwf	___fldiv@exp& (0+255),f,b
  5533                           
  5534                           ; BSR set to: 0
  5535  004EFC  C0A6  F0B8         	movff	___fldiv@f1+3,___fldiv@sign
  5536  004F00  0100               	movlb	0	; () banked
  5537  004F02  51AA               	movf	(___fldiv@f2+3)& (0+255),w,b
  5538  004F04  1BB8               	xorwf	___fldiv@sign& (0+255),f,b
  5539  004F06  0E80               	movlw	128
  5540  004F08  17B8               	andwf	___fldiv@sign& (0+255),f,b
  5541                           
  5542                           ; BSR set to: 0
  5543  004F0A  8FA5               	bsf	(___fldiv@f1+2)& (0+255),7,b
  5544                           
  5545                           ; BSR set to: 0
  5546  004F0C  6BA6               	clrf	(___fldiv@f1+3)& (0+255),b
  5547  004F0E  8FA9               	bsf	(___fldiv@f2+2)& (0+255),7,b
  5548                           
  5549                           ; BSR set to: 0
  5550  004F10  6BAA               	clrf	(___fldiv@f2+3)& (0+255),b
  5551                           
  5552                           ; BSR set to: 0
  5553  004F12  0E20               	movlw	32
  5554  004F14  6FB2               	movwf	___fldiv@cntr& (0+255),b
  5555  004F16                     l14286:
  5556                           
  5557                           ; BSR set to: 0
  5558  004F16  90D8               	bcf	status,0,c
  5559  004F18  37B3               	rlcf	___fldiv@f3& (0+255),f,b
  5560  004F1A  37B4               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  5561  004F1C  37B5               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  5562  004F1E  37B6               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  5563                           
  5564                           ; BSR set to: 0
  5565  004F20  51A7               	movf	___fldiv@f2& (0+255),w,b
  5566  004F22  5DA3               	subwf	___fldiv@f1& (0+255),w,b
  5567  004F24  51A8               	movf	(___fldiv@f2+1)& (0+255),w,b
  5568  004F26  59A4               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  5569  004F28  51A9               	movf	(___fldiv@f2+2)& (0+255),w,b
  5570  004F2A  59A5               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  5571  004F2C  51AA               	movf	(___fldiv@f2+3)& (0+255),w,b
  5572  004F2E  59A6               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  5573  004F30  E309               	bnc	l14294
  5574                           
  5575                           ; BSR set to: 0
  5576  004F32  51A7               	movf	___fldiv@f2& (0+255),w,b
  5577  004F34  5FA3               	subwf	___fldiv@f1& (0+255),f,b
  5578  004F36  51A8               	movf	(___fldiv@f2+1)& (0+255),w,b
  5579  004F38  5BA4               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  5580  004F3A  51A9               	movf	(___fldiv@f2+2)& (0+255),w,b
  5581  004F3C  5BA5               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  5582  004F3E  51AA               	movf	(___fldiv@f2+3)& (0+255),w,b
  5583  004F40  5BA6               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  5584                           
  5585                           ; BSR set to: 0
  5586  004F42  81B3               	bsf	___fldiv@f3& (0+255),0,b
  5587  004F44                     l14294:
  5588                           
  5589                           ; BSR set to: 0
  5590  004F44  90D8               	bcf	status,0,c
  5591  004F46  37A3               	rlcf	___fldiv@f1& (0+255),f,b
  5592  004F48  37A4               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  5593  004F4A  37A5               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  5594  004F4C  37A6               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  5595                           
  5596                           ; BSR set to: 0
  5597  004F4E  2FB2               	decfsz	___fldiv@cntr& (0+255),f,b
  5598  004F50  D7E2               	goto	l14286
  5599                           
  5600                           ; BSR set to: 0
  5601  004F52  C0B3  F00E         	movff	___fldiv@f3,?___flpack
  5602  004F56  C0B4  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5603  004F5A  C0B5  F010         	movff	___fldiv@f3+2,?___flpack+2
  5604  004F5E  C0B6  F011         	movff	___fldiv@f3+3,?___flpack+3
  5605  004F62  C0B7  F012         	movff	___fldiv@exp,?___flpack+4
  5606  004F66  C0B8  F013         	movff	___fldiv@sign,?___flpack+5
  5607  004F6A  EC3C  F025         	call	___flpack	;wreg free
  5608  004F6E  C011  F0A6         	movff	?___flpack+3,?___fldiv+3
  5609  004F72  C010  F0A5         	movff	?___flpack+2,?___fldiv+2
  5610  004F76  C00F  F0A4         	movff	?___flpack+1,?___fldiv+1
  5611  004F7A  C00E  F0A3         	movff	?___flpack,?___fldiv
  5612  004F7E                     l1607:
  5613  004F7E  0012               	return	
  5614  004F80                     __end_of___fldiv:
  5615                           	opt stack 0
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodh	equ	0xFF4
  5621                           prodl	equ	0xFF3
  5622                           postinc0	equ	0xFEE
  5623                           wreg	equ	0xFE8
  5624                           postdec1	equ	0xFE5
  5625                           fsr1h	equ	0xFE2
  5626                           fsr1l	equ	0xFE1
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           postdec2	equ	0xFDD
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _vscp_doOneSecondWork *****************
  5635 ;; Defined at:
  5636 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;		None               void
  5643 ;; Registers used:
  5644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : F/0
  5647 ;;		On exit  : F/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5650 ;;      Params:         0       0       0       0       0       0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0
  5652 ;;      Temps:          0       1       0       0       0       0       0
  5653 ;;      Totals:         0       1       0       0       0       0       0
  5654 ;;Total ram usage:        1 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    8
  5657 ;; This function calls:
  5658 ;;		_vscp_getZone
  5659 ;;		_vscp_getSubzone
  5660 ;;		_vscp_sendHeartBeat
  5661 ;; This function is called by:
  5662 ;;		_main
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text21
  5667  0055CE                     __ptext21:
  5668                           	opt stack 0
  5669  0055CE                     _vscp_doOneSecondWork:
  5670                           	opt stack 22
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;vscp_firmware.c: 526: ++vscp_second;
  5674                           
  5675                           ;incstack = 0
  5676                           ;incstack = 0
  5677  0055CE  2A51               	incf	_vscp_second,f,c
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5681  0055D0  0E3B               	movlw	59
  5682  0055D2  6451               	cpfsgt	_vscp_second,c
  5683  0055D4  D00C               	goto	l10236
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;vscp_firmware.c: 529: vscp_second = 0;
  5687  0055D6  6A51               	clrf	_vscp_second,c
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;vscp_firmware.c: 530: vscp_minute++;
  5691  0055D8  2A4D               	incf	_vscp_minute,f,c
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5695  0055DA  5187               	movf	_vscp_node_state& (0+255),w,b
  5696  0055DC  0A03               	xorlw	3
  5697  0055DE  E107               	bnz	l10236
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5701                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5702  0055E0  ECD3  F02E         	call	_vscp_getSubzone	;wreg free
  5703  0055E4  6E44               	movwf	?_vscp_sendHeartBeat,c
  5704  0055E6  ECD8  F02E         	call	_vscp_getZone	;wreg free
  5705  0055EA  EC8C  F02D         	call	_vscp_sendHeartBeat
  5706  0055EE                     l10236:
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;vscp_firmware.c: 536: }
  5710                           ;vscp_firmware.c: 537: }
  5711                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5712  0055EE  0E3B               	movlw	59
  5713  0055F0  644D               	cpfsgt	_vscp_minute,c
  5714  0055F2  D002               	goto	l10242
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5718  0055F4  6A4D               	clrf	_vscp_minute,c
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;vscp_firmware.c: 541: vscp_hour++;
  5722  0055F6  2B84               	incf	_vscp_hour& (0+255),f,b
  5723  0055F8                     l10242:
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;vscp_firmware.c: 542: }
  5727                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5728  0055F8  0E17               	movlw	23
  5729  0055FA  6584               	cpfsgt	_vscp_hour& (0+255),b
  5730  0055FC  D001               	goto	l10246
  5731                           
  5732                           ; BSR set to: 0
  5733  0055FE  6B84               	clrf	_vscp_hour& (0+255),b
  5734  005600                     l10246:
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5738  005600  5187               	movf	_vscp_node_state& (0+255),w,b
  5739  005602  0A03               	xorlw	3
  5740  005604  E109               	bnz	l1103
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5744  005606  2A4B               	incf	_vscp_guid_reset,f,c
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5748  005608  C04B  F0C2         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5749  00560C  0E0F               	movlw	15
  5750  00560E  17C2               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5751  005610  0E02               	movlw	2
  5752  005612  5DC2               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5753  005614  B0D8               	btfsc	status,0,c
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5757  005616  6A4B               	clrf	_vscp_guid_reset,c
  5758  005618                     l1103:
  5759                           
  5760                           ; BSR set to: 0
  5761  005618  0012               	return	
  5762  00561A                     __end_of_vscp_doOneSecondWork:
  5763                           	opt stack 0
  5764                           tblptru	equ	0xFF8
  5765                           tblptrh	equ	0xFF7
  5766                           tblptrl	equ	0xFF6
  5767                           tablat	equ	0xFF5
  5768                           prodh	equ	0xFF4
  5769                           prodl	equ	0xFF3
  5770                           postinc0	equ	0xFEE
  5771                           wreg	equ	0xFE8
  5772                           postdec1	equ	0xFE5
  5773                           fsr1h	equ	0xFE2
  5774                           fsr1l	equ	0xFE1
  5775                           indf2	equ	0xFDF
  5776                           postinc2	equ	0xFDE
  5777                           postdec2	equ	0xFDD
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _vscp_sendHeartBeat *****************
  5783 ;; Defined at:
  5784 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  zone            1    wreg     unsigned char 
  5787 ;;  subzone         1   67[COMRAM] unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  zone            1   68[COMRAM] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;		None               void
  5792 ;; Registers used:
  5793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : F/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5799 ;;      Params:         1       0       0       0       0       0       0
  5800 ;;      Locals:         1       0       0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0
  5802 ;;      Totals:         2       0       0       0       0       0       0
  5803 ;;Total ram usage:        2 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    7
  5806 ;; This function calls:
  5807 ;;		_vscp_sendEvent
  5808 ;; This function is called by:
  5809 ;;		_vscp_doOneSecondWork
  5810 ;; This function uses a non-reentrant model
  5811 ;;
  5812                           
  5813                           	psect	text22
  5814  005B18                     __ptext22:
  5815                           	opt stack 0
  5816  005B18                     _vscp_sendHeartBeat:
  5817                           	opt stack 22
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;incstack = 0
  5821                           ;incstack = 0
  5822                           ;vscp_sendHeartBeat@zone stored from wreg
  5823  005B18  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5824                           
  5825                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5826  005B1C  0E83               	movlw	131
  5827  005B1E  0100               	movlb	0	; () banked
  5828  005B20  6F96               	movwf	_vscp_omsg& (0+255),b
  5829                           
  5830                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5831  005B22  0E07               	movlw	7
  5832  005B24  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  5833                           
  5834                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5835  005B26  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  5836  005B28  0E14               	movlw	20
  5837  005B2A  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  5838                           
  5839                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5840  005B2C  0E09               	movlw	9
  5841  005B2E  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5845  005B30  6B9B               	clrf	(_vscp_omsg+5)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5849  005B32  C045  F09C         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5853  005B36  C044  F09D         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5857  005B3A  EF78  F02D         	goto	_vscp_sendEvent	;wreg free
  5858  005B3E                     __end_of_vscp_sendHeartBeat:
  5859                           	opt stack 0
  5860                           tblptru	equ	0xFF8
  5861                           tblptrh	equ	0xFF7
  5862                           tblptrl	equ	0xFF6
  5863                           tablat	equ	0xFF5
  5864                           prodh	equ	0xFF4
  5865                           prodl	equ	0xFF3
  5866                           postinc0	equ	0xFEE
  5867                           wreg	equ	0xFE8
  5868                           postdec1	equ	0xFE5
  5869                           fsr1h	equ	0xFE2
  5870                           fsr1l	equ	0xFE1
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _vscp_getSubzone *****************
  5879 ;; Defined at:
  5880 ;;		line 2735 in file "../main.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;		None
  5885 ;; Return value:  Size  Location     Type
  5886 ;;                  1    wreg      unsigned char 
  5887 ;; Registers used:
  5888 ;;		wreg, status,2, cstack
  5889 ;; Tracked objects:
  5890 ;;		On entry : F/0
  5891 ;;		On exit  : 0/0
  5892 ;;		Unchanged: 0/0
  5893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5894 ;;      Params:         0       0       0       0       0       0       0
  5895 ;;      Locals:         0       0       0       0       0       0       0
  5896 ;;      Temps:          0       0       0       0       0       0       0
  5897 ;;      Totals:         0       0       0       0       0       0       0
  5898 ;;Total ram usage:        0 bytes
  5899 ;; Hardware stack levels used:    1
  5900 ;; Hardware stack levels required when called:    3
  5901 ;; This function calls:
  5902 ;;		_readEEPROM
  5903 ;; This function is called by:
  5904 ;;		_vscp_doOneSecondWork
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text23
  5909  005DA6                     __ptext23:
  5910                           	opt stack 0
  5911  005DA6                     _vscp_getSubzone:
  5912                           	opt stack 26
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;main.c: 2736: return readEEPROM(0x42);
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;incstack = 0
  5919                           ;incstack = 0
  5920  005DA6  6A0F               	clrf	?_readEEPROM+1,c
  5921  005DA8  0E42               	movlw	66
  5922  005DAA  6E0E               	movwf	?_readEEPROM,c
  5923  005DAC  EF9C  F02E         	goto	_readEEPROM	;wreg free
  5924  005DB0                     __end_of_vscp_getSubzone:
  5925                           	opt stack 0
  5926                           tblptru	equ	0xFF8
  5927                           tblptrh	equ	0xFF7
  5928                           tblptrl	equ	0xFF6
  5929                           tablat	equ	0xFF5
  5930                           prodh	equ	0xFF4
  5931                           prodl	equ	0xFF3
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           postdec1	equ	0xFE5
  5935                           fsr1h	equ	0xFE2
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _vscp_getZone *****************
  5945 ;; Defined at:
  5946 ;;		line 2726 in file "../main.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;                  1    wreg      unsigned char 
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5960 ;;      Params:         0       0       0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    3
  5967 ;; This function calls:
  5968 ;;		_readEEPROM
  5969 ;; This function is called by:
  5970 ;;		_vscp_doOneSecondWork
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text24
  5975  005DB0                     __ptext24:
  5976                           	opt stack 0
  5977  005DB0                     _vscp_getZone:
  5978                           	opt stack 26
  5979                           
  5980                           ;main.c: 2727: return readEEPROM(0x41);
  5981                           
  5982                           ;incstack = 0
  5983                           ;incstack = 0
  5984  005DB0  6A0F               	clrf	?_readEEPROM+1,c
  5985  005DB2  0E41               	movlw	65
  5986  005DB4  6E0E               	movwf	?_readEEPROM,c
  5987  005DB6  EF9C  F02E         	goto	_readEEPROM	;wreg free
  5988  005DBA                     __end_of_vscp_getZone:
  5989                           	opt stack 0
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           postdec1	equ	0xFE5
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           fsr2h	equ	0xFDA
  6005                           fsr2l	equ	0xFD9
  6006                           status	equ	0xFD8
  6007                           
  6008 ;; *************** function _doOneSecondWork *****************
  6009 ;; Defined at:
  6010 ;;		line 704 in file "../main.c"
  6011 ;; Parameters:    Size  Location     Type
  6012 ;;		None
  6013 ;; Auto vars:     Size  Location     Type
  6014 ;;  i               1   38[BANK0 ] unsigned char 
  6015 ;;  tmp             1   37[BANK0 ] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;		None               void
  6018 ;; Registers used:
  6019 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : F/0
  6022 ;;		On exit  : F/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6025 ;;      Params:         0       0       0       0       0       0       0
  6026 ;;      Locals:         0       2       0       0       0       0       0
  6027 ;;      Temps:          0       2       0       0       0       0       0
  6028 ;;      Totals:         0       4       0       0       0       0       0
  6029 ;;Total ram usage:        4 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    8
  6032 ;; This function calls:
  6033 ;;		_readEEPROM
  6034 ;;		_vscp_sendEvent
  6035 ;;		_sendTempEvent
  6036 ;; This function is called by:
  6037 ;;		_main
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text25
  6042  003A82                     __ptext25:
  6043                           	opt stack 0
  6044  003A82                     _doOneSecondWork:
  6045                           	opt stack 22
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;main.c: 706: uint8_t tmp;
  6049                           ;main.c: 707: uint8_t i;
  6050                           ;main.c: 710: if ( 0x03 == vscp_node_state ) {
  6051                           
  6052                           ;incstack = 0
  6053                           ;incstack = 0
  6054  003A82  5187               	movf	_vscp_node_state& (0+255),w,b
  6055  003A84  0A03               	xorlw	3
  6056  003A86  E001 D0F8          	bnz	l245
  6057                           
  6058                           ; BSR set to: 0
  6059                           ;main.c: 712: for (i = 0; i < 6; i++) {
  6060  003A8A  6BC9               	clrf	doOneSecondWork@i& (0+255),b
  6061  003A8C                     l13830:
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;main.c: 715: tmp = readEEPROM(0x49 + i);
  6065  003A8C  0E49               	movlw	73
  6066  003A8E  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6067  003A90  6E0E               	movwf	?_readEEPROM,c
  6068  003A92  6A0F               	clrf	?_readEEPROM+1,c
  6069  003A94  0E00               	movlw	0
  6070  003A96  220F               	addwfc	?_readEEPROM+1,f,c
  6071  003A98  EC9C  F02E         	call	_readEEPROM	;wreg free
  6072  003A9C  0100               	movlb	0	; () banked
  6073  003A9E  6FC8               	movwf	doOneSecondWork@tmp& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;main.c: 716: if (tmp && (seconds_temp[i] > tmp)) {
  6077  003AA0  51C8               	movf	doOneSecondWork@tmp& (0+255),w,b
  6078  003AA2  E011               	bz	l13840
  6079                           
  6080                           ; BSR set to: 0
  6081  003AA4  51C9               	movf	doOneSecondWork@i& (0+255),w,b
  6082  003AA6  0F6C               	addlw	low _seconds_temp
  6083  003AA8  6ED9               	movwf	fsr2l,c
  6084  003AAA  6ADA               	clrf	fsr2h,c
  6085  003AAC  50DF               	movf	indf2,w,c
  6086  003AAE  61C8               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6087  003AB0  D00A               	goto	l13840
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;main.c: 719: if ( sendTempEvent( i ) ) {
  6091  003AB2  51C9               	movf	doOneSecondWork@i& (0+255),w,b
  6092  003AB4  EC3F  F029         	call	_sendTempEvent
  6093  003AB8  0900               	iorlw	0
  6094  003ABA  E005               	bz	l13840
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;main.c: 720: seconds_temp[i] = 0;
  6098  003ABC  51C9               	movf	doOneSecondWork@i& (0+255),w,b
  6099  003ABE  0F6C               	addlw	low _seconds_temp
  6100  003AC0  6ED9               	movwf	fsr2l,c
  6101  003AC2  6ADA               	clrf	fsr2h,c
  6102  003AC4  6ADF               	clrf	indf2,c
  6103  003AC6                     l13840:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;main.c: 721: }
  6107                           ;main.c: 723: }
  6108                           ;main.c: 726: if (0x80 & readEEPROM(0x43 + i)) {
  6109  003AC6  0E43               	movlw	67
  6110  003AC8  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6111  003ACA  6E0E               	movwf	?_readEEPROM,c
  6112  003ACC  6A0F               	clrf	?_readEEPROM+1,c
  6113  003ACE  0E00               	movlw	0
  6114  003AD0  220F               	addwfc	?_readEEPROM+1,f,c
  6115  003AD2  EC9C  F02E         	call	_readEEPROM	;wreg free
  6116  003AD6  0100               	movlb	0	; () banked
  6117  003AD8  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6118  003ADA  AFC6               	btfss	??_doOneSecondWork& (0+255),7,b
  6119  003ADC  D0CA               	goto	l13894
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;main.c: 729: if (low_alarm & (1 << i)) {
  6123  003ADE  C0C9  F0C6         	movff	doOneSecondWork@i,??_doOneSecondWork
  6124  003AE2  0E01               	movlw	1
  6125  003AE4  6FC7               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6126  003AE6  2BC6               	incf	??_doOneSecondWork& (0+255),f,b
  6127  003AE8  D002               	goto	u12944
  6128  003AEA                     u12945:
  6129  003AEA  90D8               	bcf	status,0,c
  6130  003AEC  37C7               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6131  003AEE                     u12944:
  6132  003AEE  2FC6               	decfsz	??_doOneSecondWork& (0+255),f,b
  6133  003AF0  D7FC               	goto	u12945
  6134  003AF2  51C7               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6135  003AF4  1582               	andwf	_low_alarm& (0+255),w,b
  6136  003AF6  E058               	bz	l13868
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;main.c: 732: if (readEEPROM(i + 0x43) & (1<<3)) {
  6140  003AF8  0E43               	movlw	67
  6141  003AFA  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6142  003AFC  6E0E               	movwf	?_readEEPROM,c
  6143  003AFE  6A0F               	clrf	?_readEEPROM+1,c
  6144  003B00  0E00               	movlw	0
  6145  003B02  220F               	addwfc	?_readEEPROM+1,f,c
  6146  003B04  EC9C  F02E         	call	_readEEPROM	;wreg free
  6147  003B08  0100               	movlb	0	; () banked
  6148  003B0A  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6149  003B0C  A7C6               	btfss	??_doOneSecondWork& (0+255),3,b
  6150  003B0E  D04C               	goto	l13868
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;main.c: 735: vscp_omsg.priority = 0x00;
  6154  003B10  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 736: vscp_omsg.flags = 0x80 + 3;
  6158  003B12  0E83               	movlw	131
  6159  003B14  6F96               	movwf	_vscp_omsg& (0+255),b
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<5)) {
  6163  003B16  0E43               	movlw	67
  6164  003B18  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6165  003B1A  6E0E               	movwf	?_readEEPROM,c
  6166  003B1C  6A0F               	clrf	?_readEEPROM+1,c
  6167  003B1E  0E00               	movlw	0
  6168  003B20  220F               	addwfc	?_readEEPROM+1,f,c
  6169  003B22  EC9C  F02E         	call	_readEEPROM	;wreg free
  6170  003B26  0100               	movlb	0	; () banked
  6171  003B28  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6172  003B2A  ABC6               	btfss	??_doOneSecondWork& (0+255),5,b
  6173  003B2C  D016               	goto	l13858
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;main.c: 740: if (readEEPROM(i + 0x43) & (1<<6)) {
  6177  003B2E  0E43               	movlw	67
  6178  003B30  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6179  003B32  6E0E               	movwf	?_readEEPROM,c
  6180  003B34  6A0F               	clrf	?_readEEPROM+1,c
  6181  003B36  0E00               	movlw	0
  6182  003B38  220F               	addwfc	?_readEEPROM+1,f,c
  6183  003B3A  EC9C  F02E         	call	_readEEPROM	;wreg free
  6184  003B3E  0100               	movlb	0	; () banked
  6185  003B40  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6186  003B42  ADC6               	btfss	??_doOneSecondWork& (0+255),6,b
  6187  003B44  D005               	goto	l13856
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;main.c: 741: vscp_omsg.vscp_class = 30;
  6191  003B46  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6192  003B48  0E1E               	movlw	30
  6193  003B4A  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6194                           
  6195                           ;main.c: 742: vscp_omsg.vscp_type = 5;
  6196  003B4C  0E05               	movlw	5
  6197  003B4E  D009               	goto	L6
  6198  003B50                     l13856:
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;main.c: 744: else {
  6202                           ;main.c: 745: vscp_omsg.vscp_class = 30;
  6203  003B50  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6204  003B52  0E1E               	movlw	30
  6205  003B54  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6206                           
  6207                           ;main.c: 746: vscp_omsg.vscp_type = 6;
  6208  003B56  0E06               	movlw	6
  6209  003B58  D004               	goto	L6
  6210  003B5A                     l13858:
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;main.c: 750: else {
  6214                           ;main.c: 752: vscp_omsg.vscp_class = 1;
  6215  003B5A  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6216  003B5C  0E01               	movlw	1
  6217  003B5E  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6218                           
  6219                           ;main.c: 753: vscp_omsg.vscp_type = 2;
  6220  003B60  0E02               	movlw	2
  6221  003B62                     L6:
  6222  003B62  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;main.c: 754: }
  6226                           ;main.c: 756: vscp_omsg.data[ 0 ] = i;
  6227  003B64  C0C9  F09B         	movff	doOneSecondWork@i,_vscp_omsg+5
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;main.c: 757: vscp_omsg.data[ 1 ] =
  6231                           ;main.c: 758: readEEPROM(2 * i + 0x73);
  6232  003B68  90D8               	bcf	status,0,c
  6233  003B6A  35C9               	rlcf	doOneSecondWork@i& (0+255),w,b
  6234  003B6C  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6235  003B6E  6BC7               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6236  003B70  37C7               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6237  003B72  0E73               	movlw	115
  6238  003B74  25C6               	addwf	??_doOneSecondWork& (0+255),w,b
  6239  003B76  6E0E               	movwf	?_readEEPROM,c
  6240  003B78  0E00               	movlw	0
  6241  003B7A  21C7               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6242  003B7C  6E0F               	movwf	?_readEEPROM+1,c
  6243  003B7E  EC9C  F02E         	call	_readEEPROM	;wreg free
  6244  003B82  0100               	movlb	0	; () banked
  6245  003B84  6F9C               	movwf	(_vscp_omsg+6)& (0+255),b
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;main.c: 759: vscp_omsg.data[ 2 ] =
  6249                           ;main.c: 760: readEEPROM(2 * i + 0x74);
  6250  003B86  90D8               	bcf	status,0,c
  6251  003B88  35C9               	rlcf	doOneSecondWork@i& (0+255),w,b
  6252  003B8A  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6253  003B8C  6BC7               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6254  003B8E  37C7               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6255  003B90  0E74               	movlw	116
  6256  003B92  25C6               	addwf	??_doOneSecondWork& (0+255),w,b
  6257  003B94  6E0E               	movwf	?_readEEPROM,c
  6258  003B96  0E00               	movlw	0
  6259  003B98  21C7               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6260  003B9A  6E0F               	movwf	?_readEEPROM+1,c
  6261  003B9C  EC9C  F02E         	call	_readEEPROM	;wreg free
  6262  003BA0  0100               	movlb	0	; () banked
  6263  003BA2  6F9D               	movwf	(_vscp_omsg+7)& (0+255),b
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;main.c: 765: vscp_sendEvent();
  6267  003BA4  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  6268  003BA8                     l13868:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;main.c: 767: }
  6272                           ;main.c: 768: }
  6273                           ;main.c: 771: if (high_alarm & (1 << i)) {
  6274  003BA8  C0C9  F0C6         	movff	doOneSecondWork@i,??_doOneSecondWork
  6275  003BAC  0E01               	movlw	1
  6276  003BAE  6FC7               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6277  003BB0  2BC6               	incf	??_doOneSecondWork& (0+255),f,b
  6278  003BB2  D002               	goto	u12994
  6279  003BB4                     u12995:
  6280  003BB4  90D8               	bcf	status,0,c
  6281  003BB6  37C7               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6282  003BB8                     u12994:
  6283  003BB8  2FC6               	decfsz	??_doOneSecondWork& (0+255),f,b
  6284  003BBA  D7FC               	goto	u12995
  6285  003BBC  51C7               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6286  003BBE  1581               	andwf	_high_alarm& (0+255),w,b
  6287  003BC0  E058               	bz	l13894
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;main.c: 774: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6291  003BC2  0E43               	movlw	67
  6292  003BC4  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6293  003BC6  6E0E               	movwf	?_readEEPROM,c
  6294  003BC8  6A0F               	clrf	?_readEEPROM+1,c
  6295  003BCA  0E00               	movlw	0
  6296  003BCC  220F               	addwfc	?_readEEPROM+1,f,c
  6297  003BCE  EC9C  F02E         	call	_readEEPROM	;wreg free
  6298  003BD2  0100               	movlb	0	; () banked
  6299  003BD4  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6300  003BD6  A9C6               	btfss	??_doOneSecondWork& (0+255),4,b
  6301  003BD8  D04C               	goto	l13894
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;main.c: 776: vscp_omsg.priority = 0x00;
  6305  003BDA  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;main.c: 777: vscp_omsg.flags = 0x80 + 3;
  6309  003BDC  0E83               	movlw	131
  6310  003BDE  6F96               	movwf	_vscp_omsg& (0+255),b
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;main.c: 779: if (readEEPROM(i + 0x43) & (1<<5)) {
  6314  003BE0  0E43               	movlw	67
  6315  003BE2  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6316  003BE4  6E0E               	movwf	?_readEEPROM,c
  6317  003BE6  6A0F               	clrf	?_readEEPROM+1,c
  6318  003BE8  0E00               	movlw	0
  6319  003BEA  220F               	addwfc	?_readEEPROM+1,f,c
  6320  003BEC  EC9C  F02E         	call	_readEEPROM	;wreg free
  6321  003BF0  0100               	movlb	0	; () banked
  6322  003BF2  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6323  003BF4  ABC6               	btfss	??_doOneSecondWork& (0+255),5,b
  6324  003BF6  D016               	goto	l13884
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;main.c: 780: if (readEEPROM(i + 0x43) & (1<<6)) {
  6328  003BF8  0E43               	movlw	67
  6329  003BFA  25C9               	addwf	doOneSecondWork@i& (0+255),w,b
  6330  003BFC  6E0E               	movwf	?_readEEPROM,c
  6331  003BFE  6A0F               	clrf	?_readEEPROM+1,c
  6332  003C00  0E00               	movlw	0
  6333  003C02  220F               	addwfc	?_readEEPROM+1,f,c
  6334  003C04  EC9C  F02E         	call	_readEEPROM	;wreg free
  6335  003C08  0100               	movlb	0	; () banked
  6336  003C0A  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6337  003C0C  ADC6               	btfss	??_doOneSecondWork& (0+255),6,b
  6338  003C0E  D005               	goto	l13882
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;main.c: 781: vscp_omsg.vscp_class = 30;
  6342  003C10  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6343  003C12  0E1E               	movlw	30
  6344  003C14  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6345                           
  6346                           ;main.c: 782: vscp_omsg.vscp_type = 6;
  6347  003C16  0E06               	movlw	6
  6348  003C18  D009               	goto	L7
  6349  003C1A                     l13882:
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;main.c: 784: else {
  6353                           ;main.c: 785: vscp_omsg.vscp_class = 30;
  6354  003C1A  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6355  003C1C  0E1E               	movlw	30
  6356  003C1E  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6357                           
  6358                           ;main.c: 786: vscp_omsg.vscp_type = 5;
  6359  003C20  0E05               	movlw	5
  6360  003C22  D004               	goto	L7
  6361  003C24                     l13884:
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;main.c: 789: else {
  6365                           ;main.c: 791: vscp_omsg.vscp_class = 1;
  6366  003C24  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6367  003C26  0E01               	movlw	1
  6368  003C28  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6369                           
  6370                           ;main.c: 792: vscp_omsg.vscp_type = 2;
  6371  003C2A  0E02               	movlw	2
  6372  003C2C                     L7:
  6373  003C2C  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;main.c: 793: }
  6377                           ;main.c: 795: vscp_omsg.data[ 0 ] = i;
  6378  003C2E  C0C9  F09B         	movff	doOneSecondWork@i,_vscp_omsg+5
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;main.c: 796: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6382                           ;main.c: 797: 0x73);
  6383  003C32  90D8               	bcf	status,0,c
  6384  003C34  35C9               	rlcf	doOneSecondWork@i& (0+255),w,b
  6385  003C36  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6386  003C38  6BC7               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6387  003C3A  37C7               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6388  003C3C  0E73               	movlw	115
  6389  003C3E  25C6               	addwf	??_doOneSecondWork& (0+255),w,b
  6390  003C40  6E0E               	movwf	?_readEEPROM,c
  6391  003C42  0E00               	movlw	0
  6392  003C44  21C7               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6393  003C46  6E0F               	movwf	?_readEEPROM+1,c
  6394  003C48  EC9C  F02E         	call	_readEEPROM	;wreg free
  6395  003C4C  0100               	movlb	0	; () banked
  6396  003C4E  6F9C               	movwf	(_vscp_omsg+6)& (0+255),b
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;main.c: 798: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6400                           ;main.c: 799: 0x74);
  6401  003C50  90D8               	bcf	status,0,c
  6402  003C52  35C9               	rlcf	doOneSecondWork@i& (0+255),w,b
  6403  003C54  6FC6               	movwf	??_doOneSecondWork& (0+255),b
  6404  003C56  6BC7               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6405  003C58  37C7               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6406  003C5A  0E74               	movlw	116
  6407  003C5C  25C6               	addwf	??_doOneSecondWork& (0+255),w,b
  6408  003C5E  6E0E               	movwf	?_readEEPROM,c
  6409  003C60  0E00               	movlw	0
  6410  003C62  21C7               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6411  003C64  6E0F               	movwf	?_readEEPROM+1,c
  6412  003C66  EC9C  F02E         	call	_readEEPROM	;wreg free
  6413  003C6A  0100               	movlb	0	; () banked
  6414  003C6C  6F9D               	movwf	(_vscp_omsg+7)& (0+255),b
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;main.c: 804: vscp_sendEvent();
  6418  003C6E  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  6419  003C72                     l13894:
  6420                           
  6421                           ; BSR set to: 0
  6422  003C72  2BC9               	incf	doOneSecondWork@i& (0+255),f,b
  6423                           
  6424                           ; BSR set to: 0
  6425  003C74  0E05               	movlw	5
  6426  003C76  65C9               	cpfsgt	doOneSecondWork@i& (0+255),b
  6427  003C78  D709               	goto	l13830
  6428  003C7A                     l245:
  6429                           
  6430                           ; BSR set to: 0
  6431  003C7A  0012               	return	
  6432  003C7C                     __end_of_doOneSecondWork:
  6433                           	opt stack 0
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           postdec1	equ	0xFE5
  6443                           fsr1h	equ	0xFE2
  6444                           fsr1l	equ	0xFE1
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function _vscp_error *****************
  6453 ;; Defined at:
  6454 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;		None
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;		None
  6459 ;; Return value:  Size  Location     Type
  6460 ;;		None               void
  6461 ;; Registers used:
  6462 ;;		None
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6468 ;;      Params:         0       0       0       0       0       0       0
  6469 ;;      Locals:         0       0       0       0       0       0       0
  6470 ;;      Temps:          0       0       0       0       0       0       0
  6471 ;;      Totals:         0       0       0       0       0       0       0
  6472 ;;Total ram usage:        0 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    2
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_main
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           	psect	text26
  6483  005DEA                     __ptext26:
  6484                           	opt stack 0
  6485  005DEA                     _vscp_error:
  6486                           	opt stack 28
  6487                           
  6488                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;incstack = 0
  6492                           ;incstack = 0
  6493  005DEA  6A4C               	clrf	_vscp_initledfunc,c
  6494  005DEC  0012               	return	
  6495  005DEE                     __end_of_vscp_error:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           postinc0	equ	0xFEE
  6504                           wreg	equ	0xFE8
  6505                           postdec1	equ	0xFE5
  6506                           fsr1h	equ	0xFE2
  6507                           fsr1l	equ	0xFE1
  6508                           indf2	equ	0xFDF
  6509                           postinc2	equ	0xFDE
  6510                           postdec2	equ	0xFDD
  6511                           fsr2h	equ	0xFDA
  6512                           fsr2l	equ	0xFD9
  6513                           status	equ	0xFD8
  6514                           
  6515 ;; *************** function _handle_sync *****************
  6516 ;; Defined at:
  6517 ;;		line 1255 in file "../main.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;  i               1   37[BANK0 ] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;		None               void
  6524 ;; Registers used:
  6525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : F/0
  6528 ;;		On exit  : F/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6531 ;;      Params:         0       0       0       0       0       0       0
  6532 ;;      Locals:         0       1       0       0       0       0       0
  6533 ;;      Temps:          0       2       0       0       0       0       0
  6534 ;;      Totals:         0       3       0       0       0       0       0
  6535 ;;Total ram usage:        3 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    8
  6538 ;; This function calls:
  6539 ;;		_readEEPROM
  6540 ;;		_sendTempEvent
  6541 ;; This function is called by:
  6542 ;;		_main
  6543 ;; This function uses a non-reentrant model
  6544 ;;
  6545                           
  6546                           	psect	text27
  6547  0052FE                     __ptext27:
  6548                           	opt stack 0
  6549  0052FE                     _handle_sync:
  6550                           	opt stack 22
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;main.c: 1256: uint8_t i;
  6554                           ;main.c: 1258: for (i = 0; i < 6; i++) {
  6555                           
  6556                           ;incstack = 0
  6557                           ;incstack = 0
  6558  0052FE  6BC8               	clrf	handle_sync@i& (0+255),b
  6559  005300                     l13804:
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 1260: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6563                           ;main.c: 1261: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6564                           ;main.c: 1262: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6565                           ;main.c: 1263: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6566  005300  298F               	incf	(_vscp_imsg+7)& (0+255),w,b
  6567  005302  E010               	bz	l13808
  6568                           
  6569                           ; BSR set to: 0
  6570  005304  90D8               	bcf	status,0,c
  6571  005306  35C8               	rlcf	handle_sync@i& (0+255),w,b
  6572  005308  6FC6               	movwf	??_handle_sync& (0+255),b
  6573  00530A  6BC7               	clrf	(??_handle_sync+1)& (0+255),b
  6574  00530C  37C7               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6575  00530E  0E73               	movlw	115
  6576  005310  25C6               	addwf	??_handle_sync& (0+255),w,b
  6577  005312  6E0E               	movwf	?_readEEPROM,c
  6578  005314  0E00               	movlw	0
  6579  005316  21C7               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6580  005318  6E0F               	movwf	?_readEEPROM+1,c
  6581  00531A  EC9C  F02E         	call	_readEEPROM	;wreg free
  6582  00531E  0100               	movlb	0	; () banked
  6583  005320  198F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6584  005322  E125               	bnz	l13818
  6585  005324                     l13808:
  6586                           
  6587                           ; BSR set to: 0
  6588  005324  2990               	incf	(_vscp_imsg+8)& (0+255),w,b
  6589  005326  E010               	bz	l295
  6590                           
  6591                           ; BSR set to: 0
  6592  005328  90D8               	bcf	status,0,c
  6593  00532A  35C8               	rlcf	handle_sync@i& (0+255),w,b
  6594  00532C  6FC6               	movwf	??_handle_sync& (0+255),b
  6595  00532E  6BC7               	clrf	(??_handle_sync+1)& (0+255),b
  6596  005330  37C7               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6597  005332  0E74               	movlw	116
  6598  005334  25C6               	addwf	??_handle_sync& (0+255),w,b
  6599  005336  6E0E               	movwf	?_readEEPROM,c
  6600  005338  0E00               	movlw	0
  6601  00533A  21C7               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6602  00533C  6E0F               	movwf	?_readEEPROM+1,c
  6603  00533E  EC9C  F02E         	call	_readEEPROM	;wreg free
  6604  005342  0100               	movlb	0	; () banked
  6605  005344  1990               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6606  005346  E113               	bnz	l13818
  6607  005348                     l295:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 1266: timeout_clock = 0;
  6611  005348  6B76               	clrf	_timeout_clock& (0+255),b	;volatile
  6612  00534A  6B77               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6613  00534C  6B78               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6614  00534E  6B79               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6615                           
  6616                           ;main.c: 1267: while (!sendTempEvent(i)) {
  6617  005350  D009               	goto	l13816
  6618  005352                     l13812:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;main.c: 1268: if (timeout_clock > 1000) break;
  6622  005352  0EE9               	movlw	233
  6623  005354  5D76               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6624  005356  0E03               	movlw	3
  6625  005358  5977               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6626  00535A  0E00               	movlw	0
  6627  00535C  5978               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6628  00535E  0E00               	movlw	0
  6629  005360  5979               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6630  005362  E205               	bc	l13818
  6631  005364                     l13816:
  6632                           
  6633                           ; BSR set to: 0
  6634  005364  51C8               	movf	handle_sync@i& (0+255),w,b
  6635  005366  EC3F  F029         	call	_sendTempEvent
  6636  00536A  0900               	iorlw	0
  6637  00536C  E0F2               	bz	l13812
  6638  00536E                     l13818:
  6639                           
  6640                           ; BSR set to: 0
  6641  00536E  2BC8               	incf	handle_sync@i& (0+255),f,b
  6642                           
  6643                           ; BSR set to: 0
  6644  005370  0E05               	movlw	5
  6645  005372  65C8               	cpfsgt	handle_sync@i& (0+255),b
  6646  005374  D7C5               	goto	l13804
  6647                           
  6648                           ; BSR set to: 0
  6649  005376  0C05               	retlw	5
  6650  005378                     __end_of_handle_sync:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           postdec1	equ	0xFE5
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           indf2	equ	0xFDF
  6664                           postinc2	equ	0xFDE
  6665                           postdec2	equ	0xFDD
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function _sendTempEvent *****************
  6671 ;; Defined at:
  6672 ;;		line 817 in file "../main.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  i               1    wreg     unsigned char 
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  i               1   68[COMRAM] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      unsigned char 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : F/0
  6683 ;;		On exit  : F/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6686 ;;      Params:         0       0       0       0       0       0       0
  6687 ;;      Locals:         1       0       0       0       0       0       0
  6688 ;;      Temps:          1       0       0       0       0       0       0
  6689 ;;      Totals:         2       0       0       0       0       0       0
  6690 ;;Total ram usage:        2 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    7
  6693 ;; This function calls:
  6694 ;;		_readEEPROM
  6695 ;;		_vscp_sendEvent
  6696 ;;		_setEventData
  6697 ;; This function is called by:
  6698 ;;		_doOneSecondWork
  6699 ;;		_handle_sync
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text28
  6704  00527E                     __ptext28:
  6705                           	opt stack 0
  6706  00527E                     _sendTempEvent:
  6707                           	opt stack 22
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;incstack = 0
  6711                           ;incstack = 0
  6712                           ;sendTempEvent@i stored from wreg
  6713  00527E  CFE8 F045          	movff	wreg,sendTempEvent@i
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;main.c: 818: vscp_omsg.priority = 0x03;
  6717  005282  0E03               	movlw	3
  6718  005284  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  6719                           
  6720                           ;main.c: 819: vscp_omsg.flags = 0x80 + 4;
  6721  005286  0E84               	movlw	132
  6722  005288  6F96               	movwf	_vscp_omsg& (0+255),b
  6723                           
  6724                           ;main.c: 820: vscp_omsg.vscp_class = 10;
  6725  00528A  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  6726  00528C  0E0A               	movlw	10
  6727  00528E  6F98               	movwf	(_vscp_omsg+2)& (0+255),b
  6728                           
  6729                           ;main.c: 821: vscp_omsg.vscp_type = 6;
  6730  005290  0E06               	movlw	6
  6731  005292  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;main.c: 824: vscp_omsg.data[ 0 ] = 0x80 |
  6735                           ;main.c: 825: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6736                           ;main.c: 826: i;
  6737  005294  0E43               	movlw	67
  6738  005296  2445               	addwf	sendTempEvent@i,w,c
  6739  005298  6E0E               	movwf	?_readEEPROM,c
  6740  00529A  6A0F               	clrf	?_readEEPROM+1,c
  6741  00529C  0E00               	movlw	0
  6742  00529E  220F               	addwfc	?_readEEPROM+1,f,c
  6743  0052A0  EC9C  F02E         	call	_readEEPROM	;wreg free
  6744  0052A4  6E44               	movwf	??_sendTempEvent& (0+255),c
  6745  0052A6  0E03               	movlw	3
  6746  0052A8  1644               	andwf	??_sendTempEvent,f,c
  6747  0052AA  90D8               	bcf	status,0,c
  6748  0052AC  3644               	rlcf	??_sendTempEvent,f,c
  6749  0052AE  90D8               	bcf	status,0,c
  6750  0052B0  3644               	rlcf	??_sendTempEvent,f,c
  6751  0052B2  90D8               	bcf	status,0,c
  6752  0052B4  3444               	rlcf	??_sendTempEvent,w,c
  6753  0052B6  1045               	iorwf	sendTempEvent@i,w,c
  6754  0052B8  0980               	iorlw	128
  6755  0052BA  0100               	movlb	0	; () banked
  6756  0052BC  6F9B               	movwf	(_vscp_omsg+5)& (0+255),b
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;main.c: 828: vscp_omsg.data[ 1 ] = 0x82;
  6760  0052BE  0E82               	movlw	130
  6761  0052C0  6F9C               	movwf	(_vscp_omsg+6)& (0+255),b
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;main.c: 830: setEventData( current_temp[i],
  6765                           ;main.c: 831: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6766  0052C2  5045               	movf	sendTempEvent@i,w,c
  6767  0052C4  0D02               	mullw	2
  6768  0052C6  50F3               	movf	prodl,w,c
  6769  0052C8  0F60               	addlw	low _current_temp
  6770  0052CA  6ED9               	movwf	fsr2l,c
  6771  0052CC  6ADA               	clrf	fsr2h,c
  6772  0052CE  CFDE F0BD          	movff	postinc2,?_setEventData
  6773  0052D2  CFDD F0BE          	movff	postdec2,?_setEventData+1
  6774  0052D6  0E43               	movlw	67
  6775  0052D8  2445               	addwf	sendTempEvent@i,w,c
  6776  0052DA  6E0E               	movwf	?_readEEPROM,c
  6777  0052DC  6A0F               	clrf	?_readEEPROM+1,c
  6778  0052DE  0E00               	movlw	0
  6779  0052E0  220F               	addwfc	?_readEEPROM+1,f,c
  6780  0052E2  EC9C  F02E         	call	_readEEPROM	;wreg free
  6781  0052E6  0B03               	andlw	3
  6782  0052E8  0100               	movlb	0	; () banked
  6783  0052EA  6FBF               	movwf	(?_setEventData+2)& (0+255),b
  6784  0052EC  ECB7  F026         	call	_setEventData	;wreg free
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;main.c: 834: if (!vscp_sendEvent()) {
  6788  0052F0  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  6789  0052F4  0900               	iorlw	0
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;main.c: 835: return 0;
  6793  0052F6  0E00               	movlw	0
  6794  0052F8  A4D8               	btfss	status,2,c
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;main.c: 836: }
  6798                           ;main.c: 838: return 1;
  6799  0052FA  0E01               	movlw	1
  6800                           
  6801                           ; BSR set to: 0
  6802  0052FC  0012               	return	
  6803  0052FE                     __end_of_sendTempEvent:
  6804                           	opt stack 0
  6805                           tblptru	equ	0xFF8
  6806                           tblptrh	equ	0xFF7
  6807                           tblptrl	equ	0xFF6
  6808                           tablat	equ	0xFF5
  6809                           prodh	equ	0xFF4
  6810                           prodl	equ	0xFF3
  6811                           postinc0	equ	0xFEE
  6812                           wreg	equ	0xFE8
  6813                           postdec1	equ	0xFE5
  6814                           fsr1h	equ	0xFE2
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           fsr2h	equ	0xFDA
  6820                           fsr2l	equ	0xFD9
  6821                           status	equ	0xFD8
  6822                           
  6823 ;; *************** function _setEventData *****************
  6824 ;; Defined at:
  6825 ;;		line 846 in file "../main.c"
  6826 ;; Parameters:    Size  Location     Type
  6827 ;;  v               2   26[BANK0 ] int 
  6828 ;;  unit            1   28[BANK0 ] unsigned char 
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;  newval          4   29[BANK0 ] unsigned char 
  6831 ;;  ival            2   33[BANK0 ] int 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : F/0
  6838 ;;		On exit  : F/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6841 ;;      Params:         0       3       0       0       0       0       0
  6842 ;;      Locals:         0       6       0       0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0
  6844 ;;      Totals:         0       9       0       0       0       0       0
  6845 ;;Total ram usage:        9 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    5
  6848 ;; This function calls:
  6849 ;;		_Celsius2Kelvin
  6850 ;;		_Celsius2Fahrenheit
  6851 ;;		___awtofl
  6852 ;;		___fltol
  6853 ;; This function is called by:
  6854 ;;		_sendTempEvent
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           	psect	text29
  6859  004D6E                     __ptext29:
  6860                           	opt stack 0
  6861  004D6E                     _setEventData:
  6862                           	opt stack 23
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;main.c: 847: double newval;
  6866                           ;main.c: 848: int ival;
  6867                           ;main.c: 850: if (0 == unit) {
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;incstack = 0
  6871                           ;incstack = 0
  6872  004D6E  67BF               	tstfsz	setEventData@unit& (0+255),b
  6873  004D70  D019               	goto	l14134
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;main.c: 852: newval = Celsius2Kelvin(v);
  6877  004D72  C0BD  F018         	movff	setEventData@v,?___awtofl
  6878  004D76  C0BE  F019         	movff	setEventData@v+1,?___awtofl+1
  6879  004D7A  ECC0  F02C         	call	___awtofl	;wreg free
  6880  004D7E  C01B  F030         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6881  004D82  C01A  F02F         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6882  004D86  C019  F02E         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6883  004D8A  C018  F02D         	movff	?___awtofl,?_Celsius2Kelvin
  6884  004D8E  ECDD  F02C         	call	_Celsius2Kelvin	;wreg free
  6885  004D92  C030  F0C3         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6886  004D96  C02F  F0C2         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6887  004D9A  C02E  F0C1         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6888  004D9E  C02D  F0C0         	movff	?_Celsius2Kelvin,setEventData@newval
  6889                           
  6890                           ;main.c: 853: } else if (2 == unit) {
  6891  004DA2  D02A               	goto	l253
  6892  004DA4                     l14134:
  6893                           
  6894                           ; BSR set to: 0
  6895  004DA4  51BF               	movf	setEventData@unit& (0+255),w,b
  6896  004DA6  0A02               	xorlw	2
  6897  004DA8  E119               	bnz	l14138
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main.c: 855: newval = Celsius2Fahrenheit(v);
  6901  004DAA  C0BD  F018         	movff	setEventData@v,?___awtofl
  6902  004DAE  C0BE  F019         	movff	setEventData@v+1,?___awtofl+1
  6903  004DB2  ECC0  F02C         	call	___awtofl	;wreg free
  6904  004DB6  C01B  F0BC         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6905  004DBA  C01A  F0BB         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6906  004DBE  C019  F0BA         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6907  004DC2  C018  F0B9         	movff	?___awtofl,?_Celsius2Fahrenheit
  6908  004DC6  EC33  F02A         	call	_Celsius2Fahrenheit	;wreg free
  6909  004DCA  C0BC  F0C3         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6910  004DCE  C0BB  F0C2         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6911  004DD2  C0BA  F0C1         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6912  004DD6  C0B9  F0C0         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6913                           
  6914                           ;main.c: 856: } else {
  6915  004DDA  D00E               	goto	l253
  6916  004DDC                     l14138:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main.c: 858: newval = v;
  6920  004DDC  C0BD  F018         	movff	setEventData@v,?___awtofl
  6921  004DE0  C0BE  F019         	movff	setEventData@v+1,?___awtofl+1
  6922  004DE4  ECC0  F02C         	call	___awtofl	;wreg free
  6923  004DE8  C01B  F0C3         	movff	?___awtofl+3,setEventData@newval+3
  6924  004DEC  C01A  F0C2         	movff	?___awtofl+2,setEventData@newval+2
  6925  004DF0  C019  F0C1         	movff	?___awtofl+1,setEventData@newval+1
  6926  004DF4  C018  F0C0         	movff	?___awtofl,setEventData@newval
  6927  004DF8                     l253:
  6928                           
  6929                           ;main.c: 859: }
  6930                           ;main.c: 861: ival = (int) newval;
  6931  004DF8  C0C0  F034         	movff	setEventData@newval,?___fltol
  6932  004DFC  C0C1  F035         	movff	setEventData@newval+1,?___fltol+1
  6933  004E00  C0C2  F036         	movff	setEventData@newval+2,?___fltol+2
  6934  004E04  C0C3  F037         	movff	setEventData@newval+3,?___fltol+3
  6935  004E08  EC63  F028         	call	___fltol	;wreg free
  6936  004E0C  C034  F0C4         	movff	?___fltol,setEventData@ival
  6937  004E10  C035  F0C5         	movff	?___fltol+1,setEventData@ival+1
  6938                           
  6939                           ;main.c: 863: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  6940  004E14  0100               	movlb	0	; () banked
  6941  004E16  51C5               	movf	(setEventData@ival+1)& (0+255),w,b
  6942  004E18  6F9D               	movwf	(_vscp_omsg+7)& (0+255),b
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;main.c: 864: vscp_omsg.data[ 3 ] = (ival & 0xff);
  6946  004E1A  C0C4  F09E         	movff	setEventData@ival,_vscp_omsg+8
  6947                           
  6948                           ; BSR set to: 0
  6949  004E1E  0012               	return	
  6950  004E20                     __end_of_setEventData:
  6951                           	opt stack 0
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           postinc0	equ	0xFEE
  6959                           wreg	equ	0xFE8
  6960                           postdec1	equ	0xFE5
  6961                           fsr1h	equ	0xFE2
  6962                           fsr1l	equ	0xFE1
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           fsr2h	equ	0xFDA
  6967                           fsr2l	equ	0xFD9
  6968                           status	equ	0xFD8
  6969                           
  6970 ;; *************** function _Celsius2Fahrenheit *****************
  6971 ;; Defined at:
  6972 ;;		line 42 in file "../ntc.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;  tc              4   22[BANK0 ] int 
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;		None
  6977 ;; Return value:  Size  Location     Type
  6978 ;;                  4   22[BANK0 ] int 
  6979 ;; Registers used:
  6980 ;;		wreg, status,2, status,0, cstack
  6981 ;; Tracked objects:
  6982 ;;		On entry : 0/0
  6983 ;;		On exit  : 0/0
  6984 ;;		Unchanged: 0/0
  6985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6986 ;;      Params:         0       4       0       0       0       0       0
  6987 ;;      Locals:         0       0       0       0       0       0       0
  6988 ;;      Temps:          0       0       0       0       0       0       0
  6989 ;;      Totals:         0       4       0       0       0       0       0
  6990 ;;Total ram usage:        4 bytes
  6991 ;; Hardware stack levels used:    1
  6992 ;; Hardware stack levels required when called:    4
  6993 ;; This function calls:
  6994 ;;		___fladd
  6995 ;;		___fldiv
  6996 ;;		___flmul
  6997 ;; This function is called by:
  6998 ;;		_setEventData
  6999 ;; This function uses a non-reentrant model
  7000 ;;
  7001                           
  7002                           	psect	text30
  7003  005466                     __ptext30:
  7004                           	opt stack 0
  7005  005466                     _Celsius2Fahrenheit:
  7006                           	opt stack 23
  7007                           
  7008                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;incstack = 0
  7012                           ;incstack = 0
  7013  005466  6A22               	clrf	?___fladd+4,c
  7014  005468  6A23               	clrf	?___fladd+5,c
  7015  00546A  0E7A               	movlw	122
  7016  00546C  6E24               	movwf	?___fladd+6,c
  7017  00546E  0E46               	movlw	70
  7018  005470  6E25               	movwf	?___fladd+7,c
  7019  005472  6A22               	clrf	?___flmul+4,c
  7020  005474  6A23               	clrf	?___flmul+5,c
  7021  005476  0E10               	movlw	16
  7022  005478  6E24               	movwf	?___flmul+6,c
  7023  00547A  0E41               	movlw	65
  7024  00547C  6E25               	movwf	?___flmul+7,c
  7025  00547E  C0B9  F01E         	movff	Celsius2Fahrenheit@tc,?___flmul
  7026  005482  C0BA  F01F         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7027  005486  C0BB  F020         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7028  00548A  C0BC  F021         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7029  00548E  ECD4  F024         	call	___flmul	;wreg free
  7030  005492  C021  F021         	movff	?___flmul+3,?___fladd+3
  7031  005496  C020  F020         	movff	?___flmul+2,?___fladd+2
  7032  00549A  C01F  F01F         	movff	?___flmul+1,?___fladd+1
  7033  00549E  C01E  F01E         	movff	?___flmul,?___fladd
  7034  0054A2  EC6E  F021         	call	___fladd	;wreg free
  7035  0054A6  C021  F0A6         	movff	?___fladd+3,?___fldiv+3
  7036  0054AA  C020  F0A5         	movff	?___fladd+2,?___fldiv+2
  7037  0054AE  C01F  F0A4         	movff	?___fladd+1,?___fldiv+1
  7038  0054B2  C01E  F0A3         	movff	?___fladd,?___fldiv
  7039  0054B6  0100               	movlb	0	; () banked
  7040  0054B8  6BA7               	clrf	(?___fldiv+4)& (0+255),b
  7041  0054BA  6BA8               	clrf	(?___fldiv+5)& (0+255),b
  7042  0054BC  0EA0               	movlw	160
  7043  0054BE  6FA9               	movwf	(?___fldiv+6)& (0+255),b
  7044  0054C0  0E40               	movlw	64
  7045  0054C2  6FAA               	movwf	(?___fldiv+7)& (0+255),b
  7046  0054C4  EC69  F027         	call	___fldiv	;wreg free
  7047  0054C8  C0A6  F0BC         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7048  0054CC  C0A5  F0BB         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7049  0054D0  C0A4  F0BA         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7050  0054D4  C0A3  F0B9         	movff	?___fldiv,?_Celsius2Fahrenheit
  7051  0054D8  0012               	return	
  7052  0054DA                     __end_of_Celsius2Fahrenheit:
  7053                           	opt stack 0
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           postinc0	equ	0xFEE
  7061                           wreg	equ	0xFE8
  7062                           postdec1	equ	0xFE5
  7063                           fsr1h	equ	0xFE2
  7064                           fsr1l	equ	0xFE1
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function ___fladd *****************
  7073 ;; Defined at:
  7074 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;  f1              4   29[COMRAM] int 
  7077 ;;  f2              4   33[COMRAM] int 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  exp1            1   43[COMRAM] unsigned char 
  7080 ;;  exp2            1   42[COMRAM] unsigned char 
  7081 ;;  sign            1   41[COMRAM] unsigned char 
  7082 ;; Return value:  Size  Location     Type
  7083 ;;                  4   29[COMRAM] unsigned char 
  7084 ;; Registers used:
  7085 ;;		wreg, status,2, status,0, cstack
  7086 ;; Tracked objects:
  7087 ;;		On entry : 0/0
  7088 ;;		On exit  : 0/0
  7089 ;;		Unchanged: 0/0
  7090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7091 ;;      Params:         8       0       0       0       0       0       0
  7092 ;;      Locals:         6       0       0       0       0       0       0
  7093 ;;      Temps:          1       0       0       0       0       0       0
  7094 ;;      Totals:        15       0       0       0       0       0       0
  7095 ;;Total ram usage:       15 bytes
  7096 ;; Hardware stack levels used:    1
  7097 ;; Hardware stack levels required when called:    3
  7098 ;; This function calls:
  7099 ;;		___flpack
  7100 ;; This function is called by:
  7101 ;;		_doWork
  7102 ;;		_Celsius2Fahrenheit
  7103 ;;		_Celsius2Kelvin
  7104 ;;		___asfladd
  7105 ;;		_floor
  7106 ;;		___flsub
  7107 ;;		_log
  7108 ;;		_eval_poly
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text31
  7113  0042DC                     __ptext31:
  7114                           	opt stack 0
  7115  0042DC                     ___fladd:
  7116                           	opt stack 25
  7117                           
  7118                           ;incstack = 0
  7119                           ;incstack = 0
  7120  0042DC  3420               	rlcf	(___fladd@f1+2)& (0+255),w,c
  7121  0042DE  3421               	rlcf	(___fladd@f1+3)& (0+255),w,c
  7122  0042E0  6E2C               	movwf	___fladd@exp1,c
  7123  0042E2  3424               	rlcf	(___fladd@f2+2)& (0+255),w,c
  7124  0042E4  3425               	rlcf	(___fladd@f2+3)& (0+255),w,c
  7125  0042E6  6E2B               	movwf	___fladd@exp2,c
  7126  0042E8  502C               	movf	___fladd@exp1,w,c
  7127  0042EA  E009               	bz	l1575
  7128  0042EC  502B               	movf	___fladd@exp2,w,c
  7129  0042EE  602C               	cpfslt	___fladd@exp1,c
  7130  0042F0  D00F               	goto	l14200
  7131  0042F2  502C               	movf	___fladd@exp1,w,c
  7132  0042F4  5C2B               	subwf	___fladd@exp2,w,c
  7133  0042F6  6E26               	movwf	??___fladd& (0+255),c
  7134  0042F8  0E21               	movlw	33
  7135  0042FA  5C26               	subwf	??___fladd,w,c
  7136  0042FC  E309               	bnc	l14200
  7137  0042FE                     l1575:
  7138  0042FE  C022  F01E         	movff	___fladd@f2,?___fladd
  7139  004302  C023  F01F         	movff	___fladd@f2+1,?___fladd+1
  7140  004306  C024  F020         	movff	___fladd@f2+2,?___fladd+2
  7141  00430A  C025  F021         	movff	___fladd@f2+3,?___fladd+3
  7142  00430E  D095               	goto	l1576
  7143  004310                     l14200:
  7144  004310  502B               	movf	___fladd@exp2,w,c
  7145  004312  E009               	bz	l1579
  7146  004314  502C               	movf	___fladd@exp1,w,c
  7147  004316  602B               	cpfslt	___fladd@exp2,c
  7148  004318  D00F               	goto	l14206
  7149  00431A  502B               	movf	___fladd@exp2,w,c
  7150  00431C  5C2C               	subwf	___fladd@exp1,w,c
  7151  00431E  6E26               	movwf	??___fladd& (0+255),c
  7152  004320  0E21               	movlw	33
  7153  004322  5C26               	subwf	??___fladd,w,c
  7154  004324  E309               	bnc	l14206
  7155  004326                     l1579:
  7156  004326  C01E  F01E         	movff	___fladd@f1,?___fladd
  7157  00432A  C01F  F01F         	movff	___fladd@f1+1,?___fladd+1
  7158  00432E  C020  F020         	movff	___fladd@f1+2,?___fladd+2
  7159  004332  C021  F021         	movff	___fladd@f1+3,?___fladd+3
  7160  004336  D081               	goto	l1576
  7161  004338                     l14206:
  7162  004338  0E06               	movlw	6
  7163  00433A  6E2A               	movwf	___fladd@sign,c
  7164  00433C  BE21               	btfsc	___fladd@f1+3,7,c
  7165  00433E  8E2A               	bsf	___fladd@sign,7,c
  7166  004340  BE25               	btfsc	___fladd@f2+3,7,c
  7167  004342  8C2A               	bsf	___fladd@sign,6,c
  7168  004344  8E20               	bsf	___fladd@f1+2,7,c
  7169  004346  6A21               	clrf	___fladd@f1+3,c
  7170  004348  8E24               	bsf	___fladd@f2+2,7,c
  7171  00434A  6A25               	clrf	___fladd@f2+3,c
  7172  00434C  502B               	movf	___fladd@exp2,w,c
  7173  00434E  602C               	cpfslt	___fladd@exp1,c
  7174  004350  D018               	goto	l14232
  7175  004352                     l14222:
  7176  004352  90D8               	bcf	status,0,c
  7177  004354  3622               	rlcf	___fladd@f2,f,c
  7178  004356  3623               	rlcf	___fladd@f2+1,f,c
  7179  004358  3624               	rlcf	___fladd@f2+2,f,c
  7180  00435A  3625               	rlcf	___fladd@f2+3,f,c
  7181  00435C  062B               	decf	___fladd@exp2,f,c
  7182  00435E  502B               	movf	___fladd@exp2,w,c
  7183  004360  182C               	xorwf	___fladd@exp1,w,c
  7184  004362  E00B               	bz	l14230
  7185  004364  062A               	decf	___fladd@sign,f,c
  7186  004366  502A               	movf	___fladd@sign& (0+255),w,c
  7187  004368  0B07               	andlw	7
  7188  00436A  E007               	bz	l14230
  7189  00436C  D7F2               	goto	l14222
  7190  00436E                     l14228:
  7191  00436E  90D8               	bcf	status,0,c
  7192  004370  3221               	rrcf	___fladd@f1+3,f,c
  7193  004372  3220               	rrcf	___fladd@f1+2,f,c
  7194  004374  321F               	rrcf	___fladd@f1+1,f,c
  7195  004376  321E               	rrcf	___fladd@f1,f,c
  7196  004378  2A2C               	incf	___fladd@exp1,f,c
  7197  00437A                     l14230:
  7198  00437A  502B               	movf	___fladd@exp2,w,c
  7199  00437C  622C               	cpfseq	___fladd@exp1,c
  7200  00437E  D7F7               	goto	l14228
  7201  004380  D01A               	goto	l1590
  7202  004382                     l14232:
  7203  004382  502C               	movf	___fladd@exp1,w,c
  7204  004384  602B               	cpfslt	___fladd@exp2,c
  7205  004386  D017               	goto	l1590
  7206  004388                     l14234:
  7207  004388  90D8               	bcf	status,0,c
  7208  00438A  361E               	rlcf	___fladd@f1,f,c
  7209  00438C  361F               	rlcf	___fladd@f1+1,f,c
  7210  00438E  3620               	rlcf	___fladd@f1+2,f,c
  7211  004390  3621               	rlcf	___fladd@f1+3,f,c
  7212  004392  062C               	decf	___fladd@exp1,f,c
  7213  004394  502B               	movf	___fladd@exp2,w,c
  7214  004396  182C               	xorwf	___fladd@exp1,w,c
  7215  004398  E00B               	bz	l14242
  7216  00439A  062A               	decf	___fladd@sign,f,c
  7217  00439C  502A               	movf	___fladd@sign& (0+255),w,c
  7218  00439E  0B07               	andlw	7
  7219  0043A0  E007               	bz	l14242
  7220  0043A2  D7F2               	goto	l14234
  7221  0043A4                     l14240:
  7222  0043A4  90D8               	bcf	status,0,c
  7223  0043A6  3225               	rrcf	___fladd@f2+3,f,c
  7224  0043A8  3224               	rrcf	___fladd@f2+2,f,c
  7225  0043AA  3223               	rrcf	___fladd@f2+1,f,c
  7226  0043AC  3222               	rrcf	___fladd@f2,f,c
  7227  0043AE  2A2B               	incf	___fladd@exp2,f,c
  7228  0043B0                     l14242:
  7229  0043B0  502B               	movf	___fladd@exp2,w,c
  7230  0043B2  622C               	cpfseq	___fladd@exp1,c
  7231  0043B4  D7F7               	goto	l14240
  7232  0043B6                     l1590:
  7233  0043B6  AE2A               	btfss	___fladd@sign,7,c
  7234  0043B8  D009               	goto	l14246
  7235  0043BA  1E1E               	comf	___fladd@f1,f,c
  7236  0043BC  1E1F               	comf	___fladd@f1+1,f,c
  7237  0043BE  1E20               	comf	___fladd@f1+2,f,c
  7238  0043C0  1E21               	comf	___fladd@f1+3,f,c
  7239  0043C2  2A1E               	incf	___fladd@f1,f,c
  7240  0043C4  0E00               	movlw	0
  7241  0043C6  221F               	addwfc	___fladd@f1+1,f,c
  7242  0043C8  2220               	addwfc	___fladd@f1+2,f,c
  7243  0043CA  2221               	addwfc	___fladd@f1+3,f,c
  7244  0043CC                     l14246:
  7245  0043CC  AC2A               	btfss	___fladd@sign,6,c
  7246  0043CE  D009               	goto	l14250
  7247  0043D0  1E22               	comf	___fladd@f2,f,c
  7248  0043D2  1E23               	comf	___fladd@f2+1,f,c
  7249  0043D4  1E24               	comf	___fladd@f2+2,f,c
  7250  0043D6  1E25               	comf	___fladd@f2+3,f,c
  7251  0043D8  2A22               	incf	___fladd@f2,f,c
  7252  0043DA  0E00               	movlw	0
  7253  0043DC  2223               	addwfc	___fladd@f2+1,f,c
  7254  0043DE  2224               	addwfc	___fladd@f2+2,f,c
  7255  0043E0  2225               	addwfc	___fladd@f2+3,f,c
  7256  0043E2                     l14250:
  7257  0043E2  6A2A               	clrf	___fladd@sign,c
  7258  0043E4  501E               	movf	___fladd@f1,w,c
  7259  0043E6  2622               	addwf	___fladd@f2,f,c
  7260  0043E8  501F               	movf	___fladd@f1+1,w,c
  7261  0043EA  2223               	addwfc	___fladd@f2+1,f,c
  7262  0043EC  5020               	movf	___fladd@f1+2,w,c
  7263  0043EE  2224               	addwfc	___fladd@f2+2,f,c
  7264  0043F0  5021               	movf	___fladd@f1+3,w,c
  7265  0043F2  2225               	addwfc	___fladd@f2+3,f,c
  7266  0043F4  AE25               	btfss	___fladd@f2+3,7,c
  7267  0043F6  D00B               	goto	l14258
  7268  0043F8  1E22               	comf	___fladd@f2,f,c
  7269  0043FA  1E23               	comf	___fladd@f2+1,f,c
  7270  0043FC  1E24               	comf	___fladd@f2+2,f,c
  7271  0043FE  1E25               	comf	___fladd@f2+3,f,c
  7272  004400  2A22               	incf	___fladd@f2,f,c
  7273  004402  0E00               	movlw	0
  7274  004404  2223               	addwfc	___fladd@f2+1,f,c
  7275  004406  2224               	addwfc	___fladd@f2+2,f,c
  7276  004408  2225               	addwfc	___fladd@f2+3,f,c
  7277  00440A  0E01               	movlw	1
  7278  00440C  6E2A               	movwf	___fladd@sign,c
  7279  00440E                     l14258:
  7280  00440E  C022  F00E         	movff	___fladd@f2,?___flpack
  7281  004412  C023  F00F         	movff	___fladd@f2+1,?___flpack+1
  7282  004416  C024  F010         	movff	___fladd@f2+2,?___flpack+2
  7283  00441A  C025  F011         	movff	___fladd@f2+3,?___flpack+3
  7284  00441E  C02C  F012         	movff	___fladd@exp1,?___flpack+4
  7285  004422  C02A  F013         	movff	___fladd@sign,?___flpack+5
  7286  004426  EC3C  F025         	call	___flpack	;wreg free
  7287  00442A  C011  F021         	movff	?___flpack+3,?___fladd+3
  7288  00442E  C010  F020         	movff	?___flpack+2,?___fladd+2
  7289  004432  C00F  F01F         	movff	?___flpack+1,?___fladd+1
  7290  004436  C00E  F01E         	movff	?___flpack,?___fladd
  7291  00443A                     l1576:
  7292  00443A  0012               	return	
  7293  00443C                     __end_of___fladd:
  7294                           	opt stack 0
  7295                           tblptru	equ	0xFF8
  7296                           tblptrh	equ	0xFF7
  7297                           tblptrl	equ	0xFF6
  7298                           tablat	equ	0xFF5
  7299                           prodh	equ	0xFF4
  7300                           prodl	equ	0xFF3
  7301                           postinc0	equ	0xFEE
  7302                           wreg	equ	0xFE8
  7303                           postdec1	equ	0xFE5
  7304                           fsr1h	equ	0xFE2
  7305                           fsr1l	equ	0xFE1
  7306                           indf2	equ	0xFDF
  7307                           postinc2	equ	0xFDE
  7308                           postdec2	equ	0xFDD
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function _Celsius2Kelvin *****************
  7314 ;; Defined at:
  7315 ;;		line 61 in file "../ntc.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  tc              4   44[COMRAM] unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  4   44[COMRAM] unsigned char 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, status,0, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7329 ;;      Params:         4       0       0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0
  7332 ;;      Totals:         4       0       0       0       0       0       0
  7333 ;;Total ram usage:        4 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    4
  7336 ;; This function calls:
  7337 ;;		___fladd
  7338 ;; This function is called by:
  7339 ;;		_setEventData
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           	psect	text32
  7344  0059BA                     __ptext32:
  7345                           	opt stack 0
  7346  0059BA                     _Celsius2Kelvin:
  7347                           	opt stack 23
  7348                           
  7349                           ;ntc.c: 62: return (27316.0 + tc);
  7350                           
  7351                           ;incstack = 0
  7352                           ;incstack = 0
  7353  0059BA  C02D  F01E         	movff	Celsius2Kelvin@tc,?___fladd
  7354  0059BE  C02E  F01F         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7355  0059C2  C02F  F020         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7356  0059C6  C030  F021         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7357  0059CA  6A22               	clrf	?___fladd+4,c
  7358  0059CC  0E68               	movlw	104
  7359  0059CE  6E23               	movwf	?___fladd+5,c
  7360  0059D0  0ED5               	movlw	213
  7361  0059D2  6E24               	movwf	?___fladd+6,c
  7362  0059D4  0E46               	movlw	70
  7363  0059D6  6E25               	movwf	?___fladd+7,c
  7364  0059D8  EC6E  F021         	call	___fladd	;wreg free
  7365  0059DC  C021  F030         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7366  0059E0  C020  F02F         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7367  0059E4  C01F  F02E         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7368  0059E8  C01E  F02D         	movff	?___fladd,?_Celsius2Kelvin
  7369  0059EC  0012               	return	
  7370  0059EE                     __end_of_Celsius2Kelvin:
  7371                           	opt stack 0
  7372                           tblptru	equ	0xFF8
  7373                           tblptrh	equ	0xFF7
  7374                           tblptrl	equ	0xFF6
  7375                           tablat	equ	0xFF5
  7376                           prodh	equ	0xFF4
  7377                           prodl	equ	0xFF3
  7378                           postinc0	equ	0xFEE
  7379                           wreg	equ	0xFE8
  7380                           postdec1	equ	0xFE5
  7381                           fsr1h	equ	0xFE2
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _vscp_handleProtocolEvent *****************
  7391 ;; Defined at:
  7392 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;  bytes           1   44[BANK0 ] unsigned char 
  7397 ;;  page_save       2   40[BANK0 ] unsigned short 
  7398 ;;  i               1   50[BANK0 ] unsigned char 
  7399 ;;  bytes           2   54[BANK0 ] unsigned short 
  7400 ;;  page_save       2   38[BANK0 ] unsigned short 
  7401 ;;  byte            1   53[BANK0 ] unsigned char 
  7402 ;;  cb              1   49[BANK0 ] unsigned char 
  7403 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7404 ;;  j               1   58[BANK0 ] unsigned char 
  7405 ;;  i               1   56[BANK0 ] unsigned char 
  7406 ;;  k               1   51[BANK0 ] unsigned char 
  7407 ;;  i               1   52[BANK0 ] unsigned char 
  7408 ;;  len             1   47[BANK0 ] unsigned char 
  7409 ;;  pos             1   46[BANK0 ] unsigned char 
  7410 ;;  i               1   57[BANK0 ] unsigned char 
  7411 ;;  len             1   45[BANK0 ] unsigned char 
  7412 ;;  pos             1   43[BANK0 ] unsigned char 
  7413 ;;  offset          1   42[BANK0 ] unsigned char 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : F/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7423 ;;      Params:         0       0       0       0       0       0       0
  7424 ;;      Locals:         0      21       0       0       0       0       0
  7425 ;;      Temps:          0       7       0       0       0       0       0
  7426 ;;      Totals:         0      28       0       0       0       0       0
  7427 ;;Total ram usage:       28 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    8
  7430 ;; This function calls:
  7431 ;;		_vscp_init
  7432 ;;		_vscp_sendEvent
  7433 ;;		_vscp_readAppReg
  7434 ;;		_vscp_writeAppReg
  7435 ;;		_vscp_getGUID
  7436 ;;		_vscp_getMDF_URL
  7437 ;;		_vscp_getMatrixInfo
  7438 ;;		_vscp_goBootloaderMode
  7439 ;;		_vscp_handleHeartbeat
  7440 ;;		_vscp_handleSetNickname
  7441 ;;		_vscp_handleDropNickname
  7442 ;;		_vscp_newNodeOnline
  7443 ;;		_vscp_readRegister
  7444 ;;		_vscp_readStdReg
  7445 ;;		_vscp_writeRegister
  7446 ;;		_vscp_writeStdReg
  7447 ;;		___lbmod
  7448 ;; This function is called by:
  7449 ;;		_main
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           	psect	text33
  7454  00322A                     __ptext33:
  7455                           	opt stack 0
  7456  00322A                     _vscp_handleProtocolEvent:
  7457                           	opt stack 22
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7461                           
  7462                           ;incstack = 0
  7463                           ;incstack = 0
  7464  00322A  518B               	movf	(_vscp_imsg+3)& (0+255),w,b
  7465  00322C  118A               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7466  00322E  E101 D2EF          	bz	l10116
  7467  003232  D31F               	goto	l1272
  7468  003234                     l9698:
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7472  003234  EC2B  F02C         	call	_vscp_handleHeartbeat	;wreg free
  7473                           
  7474                           ;vscp_firmware.c: 807: break;
  7475  003238  D31C               	goto	l1272
  7476  00323A                     l9700:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7480  00323A  EC3A  F02D         	call	_vscp_newNodeOnline	;wreg free
  7481                           
  7482                           ;vscp_firmware.c: 812: break;
  7483  00323E  D319               	goto	l1272
  7484  003240                     l9702:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7488  003240  ECC4  F02D         	call	_vscp_handleSetNickname	;wreg free
  7489                           
  7490                           ;vscp_firmware.c: 817: break;
  7491  003244  D316               	goto	l1272
  7492  003246                     l9704:
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7496  003246  ECF7  F02C         	call	_vscp_handleDropNickname	;wreg free
  7497                           
  7498                           ;vscp_firmware.c: 822: break;
  7499  00324A  D313               	goto	l1272
  7500  00324C                     l9706:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7504                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7505  00324C  5188               	movf	_vscp_imsg& (0+255),w,b
  7506  00324E  0B0F               	andlw	15
  7507  003250  0A02               	xorlw	2
  7508  003252  E001 D30E          	bnz	l1272
  7509                           
  7510                           ; BSR set to: 0
  7511  003256  5186               	movf	_vscp_nickname& (0+255),w,b
  7512  003258  EE20  F08E         	lfsr	2,_vscp_imsg+6
  7513  00325C  62DF               	cpfseq	indf2,c
  7514  00325E  D309               	goto	l1272
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7518  003260  0E80               	movlw	128
  7519  003262  618F               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7520  003264  D012               	goto	l9726
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7524  003266  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7525  003268  EC76  F011         	call	_vscp_readAppReg
  7526  00326C                     L8:
  7527  00326C  0100               	movlb	0	; () banked
  7528  00326E  6F9C               	movwf	(_vscp_omsg+6)& (0+255),b
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7532  003270  C08F  F09B         	movff	_vscp_imsg+7,_vscp_omsg+5
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7536  003274  0E03               	movlw	3
  7537  003276  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7541  003278  0E82               	movlw	130
  7542  00327A  6F96               	movwf	_vscp_omsg& (0+255),b
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7546  00327C  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  7547  00327E  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7551  003280  0E0A               	movlw	10
  7552  003282  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  7553  003284                     l9724:
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7557  003284  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  7558                           
  7559                           ;vscp_firmware.c: 844: }
  7560  003288  D2F4               	goto	l1272
  7561  00328A                     l9726:
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;vscp_firmware.c: 845: else {
  7565                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7566                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7567  00328A  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7568  00328C  EC32  F01F         	call	_vscp_readStdReg
  7569  003290  D7ED               	goto	L8
  7570  003292                     l9740:
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7574                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7575  003292  5188               	movf	_vscp_imsg& (0+255),w,b
  7576  003294  0B0F               	andlw	15
  7577  003296  0A03               	xorlw	3
  7578  003298  E001 D2EB          	bnz	l1272
  7579                           
  7580                           ; BSR set to: 0
  7581  00329C  5186               	movf	_vscp_nickname& (0+255),w,b
  7582  00329E  EE20  F08E         	lfsr	2,_vscp_imsg+6
  7583  0032A2  62DF               	cpfseq	indf2,c
  7584  0032A4  D2E6               	goto	l1272
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7588  0032A6  0E80               	movlw	128
  7589  0032A8  618F               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7590  0032AA  D006               	goto	l9760
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7594                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7595  0032AC  C090  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7596  0032B0  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7597  0032B2  ECB7  F005         	call	_vscp_writeAppReg
  7598  0032B6  D7DA               	goto	L8
  7599  0032B8                     l9760:
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;vscp_firmware.c: 888: else {
  7603                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7604                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7605  0032B8  C090  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7606  0032BC  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7607  0032BE  EC5C  F023         	call	_vscp_writeStdReg
  7608  0032C2  D7D4               	goto	L8
  7609  0032C4                     l9774:
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7613                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7614                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7615                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7616                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7617                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7618                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7619  0032C4  5186               	movf	_vscp_nickname& (0+255),w,b
  7620  0032C6  EE20  F08E         	lfsr	2,_vscp_imsg+6
  7621  0032CA  62DF               	cpfseq	indf2,c
  7622  0032CC  D2D2               	goto	l1272
  7623                           
  7624                           ; BSR set to: 0
  7625  0032CE  0E00               	movlw	0
  7626  0032D0  EC92  F02E         	call	_vscp_getGUID
  7627  0032D4  0100               	movlb	0	; () banked
  7628  0032D6  1990               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7629  0032D8  E001 D2CB          	bnz	l1272
  7630                           
  7631                           ; BSR set to: 0
  7632  0032DC  0E03               	movlw	3
  7633  0032DE  EC92  F02E         	call	_vscp_getGUID
  7634  0032E2  0100               	movlb	0	; () banked
  7635  0032E4  1991               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7636  0032E6  E001 D2C4          	bnz	l1272
  7637                           
  7638                           ; BSR set to: 0
  7639  0032EA  0E05               	movlw	5
  7640  0032EC  EC92  F02E         	call	_vscp_getGUID
  7641  0032F0  0100               	movlb	0	; () banked
  7642  0032F2  1992               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7643  0032F4  E001 D2BD          	bnz	l1272
  7644                           
  7645                           ; BSR set to: 0
  7646  0032F8  0E07               	movlw	7
  7647  0032FA  EC92  F02E         	call	_vscp_getGUID
  7648  0032FE  0100               	movlb	0	; () banked
  7649  003300  1993               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7650  003302  E001 D2B6          	bnz	l1272
  7651                           
  7652                           ; BSR set to: 0
  7653  003306  5047               	movf	_vscp_page_select+1,w,c
  7654  003308  1994               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7655  00330A  E001 D2B2          	bnz	l1272
  7656                           
  7657                           ; BSR set to: 0
  7658  00330E  5046               	movf	_vscp_page_select,w,c
  7659  003310  EE20  F095         	lfsr	2,_vscp_imsg+13
  7660  003314  62DF               	cpfseq	indf2,c
  7661  003316  D2AD               	goto	l1272
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7665  003318  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  7666  00331A  EC66  F02E         	call	_vscp_goBootloaderMode
  7667  00331E  D2A9               	goto	l1272
  7668  003320                     l9790:
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7672                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7673                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7674                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7675  003320  0E00               	movlw	0
  7676  003322  EC92  F02E         	call	_vscp_getGUID
  7677  003326  0100               	movlb	0	; () banked
  7678  003328  198F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7679  00332A  E173               	bnz	l9834
  7680                           
  7681                           ; BSR set to: 0
  7682  00332C  0E01               	movlw	1
  7683  00332E  EC92  F02E         	call	_vscp_getGUID
  7684  003332  0100               	movlb	0	; () banked
  7685  003334  1990               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7686  003336  E16D               	bnz	l9834
  7687                           
  7688                           ; BSR set to: 0
  7689  003338  0E02               	movlw	2
  7690  00333A  EC92  F02E         	call	_vscp_getGUID
  7691  00333E  0100               	movlb	0	; () banked
  7692  003340  1991               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7693  003342  E167               	bnz	l9834
  7694                           
  7695                           ; BSR set to: 0
  7696  003344  0E03               	movlw	3
  7697  003346  EC92  F02E         	call	_vscp_getGUID
  7698  00334A  0100               	movlb	0	; () banked
  7699  00334C  1992               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7700  00334E  E161               	bnz	l9834
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7704  003350  884B               	bsf	_vscp_guid_reset,4,c
  7705  003352  D05F               	goto	l9834
  7706  003354                     l9800:
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7710                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7711                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7712                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7713  003354  0E04               	movlw	4
  7714  003356  EC92  F02E         	call	_vscp_getGUID
  7715  00335A  0100               	movlb	0	; () banked
  7716  00335C  198F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7717  00335E  E159               	bnz	l9834
  7718                           
  7719                           ; BSR set to: 0
  7720  003360  0E05               	movlw	5
  7721  003362  EC92  F02E         	call	_vscp_getGUID
  7722  003366  0100               	movlb	0	; () banked
  7723  003368  1990               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7724  00336A  E153               	bnz	l9834
  7725                           
  7726                           ; BSR set to: 0
  7727  00336C  0E06               	movlw	6
  7728  00336E  EC92  F02E         	call	_vscp_getGUID
  7729  003372  0100               	movlb	0	; () banked
  7730  003374  1991               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7731  003376  E14D               	bnz	l9834
  7732                           
  7733                           ; BSR set to: 0
  7734  003378  0E07               	movlw	7
  7735  00337A  EC92  F02E         	call	_vscp_getGUID
  7736  00337E  0100               	movlb	0	; () banked
  7737  003380  1992               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7738  003382  E147               	bnz	l9834
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7742  003384  8A4B               	bsf	_vscp_guid_reset,5,c
  7743  003386  D045               	goto	l9834
  7744  003388                     l9810:
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7748                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7749                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7750                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7751  003388  0E08               	movlw	8
  7752  00338A  EC92  F02E         	call	_vscp_getGUID
  7753  00338E  0100               	movlb	0	; () banked
  7754  003390  198F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7755  003392  E13F               	bnz	l9834
  7756                           
  7757                           ; BSR set to: 0
  7758  003394  0E09               	movlw	9
  7759  003396  EC92  F02E         	call	_vscp_getGUID
  7760  00339A  0100               	movlb	0	; () banked
  7761  00339C  1990               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7762  00339E  E139               	bnz	l9834
  7763                           
  7764                           ; BSR set to: 0
  7765  0033A0  0E0A               	movlw	10
  7766  0033A2  EC92  F02E         	call	_vscp_getGUID
  7767  0033A6  0100               	movlb	0	; () banked
  7768  0033A8  1991               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7769  0033AA  E133               	bnz	l9834
  7770                           
  7771                           ; BSR set to: 0
  7772  0033AC  0E0B               	movlw	11
  7773  0033AE  EC92  F02E         	call	_vscp_getGUID
  7774  0033B2  0100               	movlb	0	; () banked
  7775  0033B4  1992               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7776  0033B6  E12D               	bnz	l9834
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7780  0033B8  8C4B               	bsf	_vscp_guid_reset,6,c
  7781  0033BA  D02B               	goto	l9834
  7782  0033BC                     l9820:
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7786                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7787                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7788                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7789  0033BC  0E0C               	movlw	12
  7790  0033BE  EC92  F02E         	call	_vscp_getGUID
  7791  0033C2  0100               	movlb	0	; () banked
  7792  0033C4  198F               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7793  0033C6  E125               	bnz	l9834
  7794                           
  7795                           ; BSR set to: 0
  7796  0033C8  0E0D               	movlw	13
  7797  0033CA  EC92  F02E         	call	_vscp_getGUID
  7798  0033CE  0100               	movlb	0	; () banked
  7799  0033D0  1990               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7800  0033D2  E11F               	bnz	l9834
  7801                           
  7802                           ; BSR set to: 0
  7803  0033D4  0E0E               	movlw	14
  7804  0033D6  EC92  F02E         	call	_vscp_getGUID
  7805  0033DA  0100               	movlb	0	; () banked
  7806  0033DC  1991               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7807  0033DE  E119               	bnz	l9834
  7808                           
  7809                           ; BSR set to: 0
  7810  0033E0  0E0F               	movlw	15
  7811  0033E2  EC92  F02E         	call	_vscp_getGUID
  7812  0033E6  0100               	movlb	0	; () banked
  7813  0033E8  1992               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7814  0033EA  E113               	bnz	l9834
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7818  0033EC  8E4B               	bsf	_vscp_guid_reset,7,c
  7819  0033EE  D011               	goto	l9834
  7820  0033F0                     l1212:
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7824  0033F0  6A4B               	clrf	_vscp_guid_reset,c
  7825                           
  7826                           ;vscp_firmware.c: 965: break;
  7827  0033F2  D00F               	goto	l9834
  7828  0033F4                     l9832:
  7829                           
  7830                           ; BSR set to: 0
  7831  0033F4  398E               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7832  0033F6  0B0F               	andlw	15
  7833  0033F8  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7834  0033FA  6BC3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7835                           
  7836                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7837                           ; Switch size 1, requested type "speed"
  7838                           ; Number of cases is 1, Range of values is 0 to 0
  7839                           ; switch strategies available:
  7840                           ; Name         Instructions Cycles
  7841                           ; simple_byte            4     3 (average)
  7842                           ;	Chosen strategy is simple_byte
  7843  0033FC  51C3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7844  0033FE  E1F8               	bnz	l1212
  7845                           
  7846                           ; BSR set to: 0
  7847                           ; Switch size 1, requested type "speed"
  7848                           ; Number of cases is 4, Range of values is 0 to 3
  7849                           ; switch strategies available:
  7850                           ; Name         Instructions Cycles
  7851                           ; simple_byte           13     7 (average)
  7852                           ;	Chosen strategy is simple_byte
  7853  003400  51C2               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7854  003402  E08E               	bz	l9790
  7855  003404  0A01               	xorlw	1	; case 1
  7856  003406  E0A6               	bz	l9800
  7857  003408  0A03               	xorlw	3	; case 2
  7858  00340A  E0BE               	bz	l9810
  7859  00340C  0A01               	xorlw	1	; case 3
  7860  00340E  E0D6               	bz	l9820
  7861  003410  D7EF               	goto	l1212
  7862  003412                     l9834:
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7866  003412  504B               	movf	_vscp_guid_reset,w,c
  7867  003414  0BF0               	andlw	240
  7868  003416  0AF0               	xorlw	240
  7869  003418  E001 D22B          	bnz	l1272
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;vscp_firmware.c: 970: vscp_init();
  7873  00341C  ECE8  F02B         	call	_vscp_init	;wreg free
  7874  003420  D228               	goto	l1272
  7875  003422                     l9838:
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7879  003422  5186               	movf	_vscp_nickname& (0+255),w,b
  7880  003424  EE20  F08E         	lfsr	2,_vscp_imsg+6
  7881  003428  62DF               	cpfseq	indf2,c
  7882  00342A  D223               	goto	l1272
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;vscp_firmware.c: 978: uint8_t i;
  7886                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7887  00342C  6BCE               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7888                           
  7889                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7890  00342E  C08F  F0CD         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7891                           
  7892                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7893  003432  C090  F0D0         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7894                           
  7895                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7896  003436  6BDC               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7897  003438  D049               	goto	l9870
  7898  00343A                     l9842:
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7902  00343A  51CD               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7903  00343C  25DC               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7904  00343E  EC28  F02E         	call	_vscp_readRegister
  7905  003442  0100               	movlb	0	; () banked
  7906  003444  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7907  003446  0E07               	movlw	7
  7908  003448  6E0E               	movwf	?___lbmod,c
  7909  00344A  51DC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7910  00344C  EC64  F02D         	call	___lbmod
  7911  003450  0100               	movlb	0	; () banked
  7912  003452  6FC3               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7913  003454  51C3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7914  003456  0F9C               	addlw	low (_vscp_omsg+6)
  7915  003458  6ED9               	movwf	fsr2l,c
  7916  00345A  6ADA               	clrf	fsr2h,c
  7917  00345C  C0C2  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7921  003460  0E07               	movlw	7
  7922  003462  6E0E               	movwf	?___lbmod,c
  7923  003464  51DC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7924  003466  EC64  F02D         	call	___lbmod
  7925  00346A  0A06               	xorlw	6
  7926  00346C  E00B               	bz	l9848
  7927  00346E  0EFF               	movlw	255
  7928  003470  0100               	movlb	0	; () banked
  7929  003472  25D0               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7930  003474  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7931  003476  6BC3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7932  003478  0EFF               	movlw	255
  7933  00347A  23C3               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7934  00347C  51DC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7935  00347E  19C2               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7936  003480  11C3               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7937  003482  E123               	bnz	l9868
  7938  003484                     l9848:
  7939                           
  7940                           ;vscp_firmware.c: 988: uint8_t bytes;
  7941                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7942  003484  0E07               	movlw	7
  7943  003486  6E0E               	movwf	?___lbmod,c
  7944  003488  0100               	movlb	0	; () banked
  7945  00348A  51DC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7946  00348C  EC64  F02D         	call	___lbmod
  7947  003490  0A06               	xorlw	6
  7948  003492  E103               	bnz	l9852
  7949                           
  7950                           ;vscp_firmware.c: 991: bytes = 7;
  7951  003494  0E07               	movlw	7
  7952  003496  0100               	movlb	0	; () banked
  7953  003498  D009               	goto	L9
  7954  00349A                     l9852:
  7955                           
  7956                           ;vscp_firmware.c: 993: else {
  7957                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7958  00349A  0E07               	movlw	7
  7959  00349C  6E0E               	movwf	?___lbmod,c
  7960  00349E  0100               	movlb	0	; () banked
  7961  0034A0  51DC               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7962  0034A2  EC64  F02D         	call	___lbmod
  7963  0034A6  0100               	movlb	0	; () banked
  7964  0034A8  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7965  0034AA  29C2               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7966  0034AC                     L9:
  7967  0034AC  6FCF               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;vscp_firmware.c: 995: }
  7971                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7972  0034AE  51CF               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7973  0034B0  0F81               	addlw	129
  7974  0034B2  6F96               	movwf	_vscp_omsg& (0+255),b
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7978  0034B4  0E07               	movlw	7
  7979  0034B6  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7983  0034B8  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  7984  0034BA  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7988  0034BC  0E1A               	movlw	26
  7989  0034BE  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  7993  0034C0  C0CE  F09B         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  7997  0034C4  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;vscp_firmware.c: 1005: pos++;
  8001  0034C8  2BCE               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8002  0034CA                     l9868:
  8003                           
  8004                           ; BSR set to: 0
  8005  0034CA  2BDC               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8006  0034CC                     l9870:
  8007                           
  8008                           ; BSR set to: 0
  8009  0034CC  51D0               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8010  0034CE  5DDC               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8011  0034D0  E301 D1CF          	bc	l1272
  8012  0034D4  D7B2               	goto	l9842
  8013  0034D6                     l9872:
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8017  0034D6  5186               	movf	_vscp_nickname& (0+255),w,b
  8018  0034D8  EE20  F08E         	lfsr	2,_vscp_imsg+6
  8019  0034DC  62DF               	cpfseq	indf2,c
  8020  0034DE  D1C9               	goto	l1272
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;vscp_firmware.c: 1014: uint8_t i;
  8024                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8025  0034E0  C08F  F0D1         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8029  0034E4  5188               	movf	_vscp_imsg& (0+255),w,b
  8030  0034E6  0FFE               	addlw	254
  8031  0034E8  0B07               	andlw	7
  8032  0034EA  6FD2               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8036  0034EC  6BD7               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8037  0034EE  D018               	goto	l9886
  8038  0034F0                     l9880:
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8042  0034F0  51D7               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8043  0034F2  0F90               	addlw	low (_vscp_imsg+8)
  8044  0034F4  6ED9               	movwf	fsr2l,c
  8045  0034F6  6ADA               	clrf	fsr2h,c
  8046  0034F8  50DF               	movf	indf2,w,c
  8047  0034FA  6E29               	movwf	?_vscp_writeRegister,c
  8048  0034FC  51D1               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8049  0034FE  25D7               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8050  003500  ECE8  F02D         	call	_vscp_writeRegister
  8051                           
  8052                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8053  003504  0100               	movlb	0	; () banked
  8054  003506  51D1               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8055  003508  25D7               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8056  00350A  EC28  F02E         	call	_vscp_readRegister
  8057  00350E  0100               	movlb	0	; () banked
  8058  003510  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8059  003512  51D7               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8060  003514  0F9C               	addlw	low (_vscp_omsg+6)
  8061  003516  6ED9               	movwf	fsr2l,c
  8062  003518  6ADA               	clrf	fsr2h,c
  8063  00351A  C0C2  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8064                           
  8065                           ; BSR set to: 0
  8066  00351E  2BD7               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8067  003520                     l9886:
  8068                           
  8069                           ; BSR set to: 0
  8070  003520  51D2               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8071  003522  5DD7               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8072  003524  E3E5               	bnc	l9880
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;vscp_firmware.c: 1022: }
  8076                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8077  003526  0E07               	movlw	7
  8078  003528  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8082  00352A  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  8083  00352C  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  8084                           
  8085                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8086  00352E  0E1A               	movlw	26
  8087  003530  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8091  003532  6B9B               	clrf	(_vscp_omsg+5)& (0+255),b
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8095  003534  51D2               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8096  003536  0F81               	addlw	129
  8097  003538  6F96               	movwf	_vscp_omsg& (0+255),b
  8098  00353A  D6A4               	goto	l9724
  8099  00353C                     l9898:
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8103  00353C  5186               	movf	_vscp_nickname& (0+255),w,b
  8104  00353E  EE20  F08E         	lfsr	2,_vscp_imsg+6
  8105  003542  62DF               	cpfseq	indf2,c
  8106  003544  D196               	goto	l1272
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8110                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8111                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8112  003546  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8113  003548  EC76  F011         	call	_vscp_readAppReg
  8114  00354C  0100               	movlb	0	; () banked
  8115  00354E  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8116  003550  29C2               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8117  003552  6E21               	movwf	?_vscp_writeAppReg,c
  8118  003554  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8119  003556  ECB7  F005         	call	_vscp_writeAppReg
  8120  00355A  D688               	goto	L8
  8121  00355C                     l9914:
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8125  00355C  5186               	movf	_vscp_nickname& (0+255),w,b
  8126  00355E  EE20  F08E         	lfsr	2,_vscp_imsg+6
  8127  003562  62DF               	cpfseq	indf2,c
  8128  003564  D186               	goto	l1272
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8132                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8133                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8134  003566  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8135  003568  EC76  F011         	call	_vscp_readAppReg
  8136  00356C  0100               	movlb	0	; () banked
  8137  00356E  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8138  003570  05C2               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8139  003572  6E21               	movwf	?_vscp_writeAppReg,c
  8140  003574  518F               	movf	(_vscp_imsg+7)& (0+255),w,b
  8141  003576  ECB7  F005         	call	_vscp_writeAppReg
  8142  00357A  D678               	goto	L8
  8143  00357C                     l9930:
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8147                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8148  00357C  518E               	movf	(_vscp_imsg+6)& (0+255),w,b
  8149  00357E  1986               	xorwf	_vscp_nickname& (0+255),w,b
  8150  003580  E003               	bz	l1236
  8151                           
  8152                           ; BSR set to: 0
  8153  003582  298E               	incf	(_vscp_imsg+6)& (0+255),w,b
  8154  003584  E001 D175          	bnz	l1272
  8155  003588                     l1236:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8159  003588  6BD6               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8163  00358A  0E03               	movlw	3
  8164  00358C  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  8165                           
  8166                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8167  00358E  0E88               	movlw	136
  8168  003590  6F96               	movwf	_vscp_omsg& (0+255),b
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8172  003592  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  8173  003594  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  8174                           
  8175                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8176  003596  0E20               	movlw	32
  8177  003598  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8181  00359A  6BDB               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8182  00359C                     l1237:
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;vscp_firmware.c: 1091: {
  8186                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8187  00359C  C0DB  F09B         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8191  0035A0  0E01               	movlw	1
  8192  0035A2  6FDD               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8193  0035A4                     l9950:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8197  0035A4  51DD               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8198  0035A6  0F9B               	addlw	low (_vscp_omsg+5)
  8199  0035A8  6ED9               	movwf	fsr2l,c
  8200  0035AA  6ADA               	clrf	fsr2h,c
  8201  0035AC  51D6               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8202  0035AE  080F               	sublw	15
  8203  0035B0  EC92  F02E         	call	_vscp_getGUID
  8204  0035B4  6EDF               	movwf	indf2,c
  8205  0035B6  0100               	movlb	0	; () banked
  8206  0035B8  2BD6               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;vscp_firmware.c: 1096: if (k > 16)
  8210  0035BA  0E10               	movlw	16
  8211  0035BC  65D6               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8212  0035BE  D001               	goto	l9958
  8213  0035C0  D004               	goto	l9962
  8214  0035C2                     l9958:
  8215                           
  8216                           ; BSR set to: 0
  8217  0035C2  2BDD               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8218                           
  8219                           ; BSR set to: 0
  8220  0035C4  0E07               	movlw	7
  8221  0035C6  65DD               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8222  0035C8  D7ED               	goto	l9950
  8223  0035CA                     l9962:
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;vscp_firmware.c: 1098: }
  8227                           ;vscp_firmware.c: 1100: if (k > 16)
  8228  0035CA  0E10               	movlw	16
  8229  0035CC  65D6               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8230  0035CE  D001               	goto	l9966
  8231  0035D0  D006               	goto	l1238
  8232  0035D2                     l9966:
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8236  0035D2  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  8237                           
  8238                           ; BSR set to: 0
  8239  0035D6  2BDB               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8240                           
  8241                           ; BSR set to: 0
  8242  0035D8  0E02               	movlw	2
  8243  0035DA  65DB               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8244  0035DC  D7DF               	goto	l1237
  8245  0035DE                     l1238:
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;vscp_firmware.c: 1104: }
  8249                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8250  0035DE  6BDD               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8251  0035E0                     l9976:
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;vscp_firmware.c: 1107: {
  8255                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8256  0035E0  51DD               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8257  0035E2  EC5A  F02E         	call	_vscp_getMDF_URL
  8258  0035E6  0900               	iorlw	0
  8259  0035E8  E008               	bz	l9980
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8263  0035EA  51DD               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8264  0035EC  0F9E               	addlw	low (_vscp_omsg+8)
  8265  0035EE  6ED9               	movwf	fsr2l,c
  8266  0035F0  6ADA               	clrf	fsr2h,c
  8267  0035F2  51DD               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8268  0035F4  EC5A  F02E         	call	_vscp_getMDF_URL
  8269  0035F8  D005               	goto	L10
  8270  0035FA                     l9980:
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;vscp_firmware.c: 1110: else
  8274                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8275  0035FA  51DD               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8276  0035FC  0F9E               	addlw	low (_vscp_omsg+8)
  8277  0035FE  6ED9               	movwf	fsr2l,c
  8278  003600  6ADA               	clrf	fsr2h,c
  8279  003602  0E00               	movlw	0
  8280  003604                     L10:
  8281  003604  6EDF               	movwf	indf2,c
  8282                           
  8283                           ; BSR set to: 0
  8284  003606  2BDD               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8285                           
  8286                           ; BSR set to: 0
  8287  003608  0E04               	movlw	4
  8288  00360A  65DD               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8289  00360C  D7E9               	goto	l9976
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;vscp_firmware.c: 1112: }
  8293                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8294  00360E  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;vscp_firmware.c: 1116: k = 5;
  8298  003612  0E05               	movlw	5
  8299  003614  6FD6               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8303  003616  0E03               	movlw	3
  8304  003618  6FDB               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8305  00361A                     l1247:
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;vscp_firmware.c: 1118: {
  8309                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8310  00361A  C0DB  F09B         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8314  00361E  0E01               	movlw	1
  8315  003620  6FDD               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8316  003622                     l10002:
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8320  003622  51DD               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8321  003624  0F9B               	addlw	low (_vscp_omsg+5)
  8322  003626  6ED9               	movwf	fsr2l,c
  8323  003628  6ADA               	clrf	fsr2h,c
  8324  00362A  51D6               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8325  00362C  EC5A  F02E         	call	_vscp_getMDF_URL
  8326  003630  6EDF               	movwf	indf2,c
  8327                           
  8328                           ; BSR set to: 0
  8329  003632  2BD6               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8330                           
  8331                           ; BSR set to: 0
  8332  003634  2BDD               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8333                           
  8334                           ; BSR set to: 0
  8335  003636  0E07               	movlw	7
  8336  003638  65DD               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8337  00363A  D7F3               	goto	l10002
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;vscp_firmware.c: 1123: }
  8341                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8342  00363C  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  8343                           
  8344                           ; BSR set to: 0
  8345  003640  2BDB               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8346                           
  8347                           ; BSR set to: 0
  8348  003642  0E06               	movlw	6
  8349  003644  65DB               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8350  003646  D7E9               	goto	l1247
  8351  003648  D114               	goto	l1272
  8352  00364A                     l10016:
  8353                           
  8354                           ; BSR set to: 0
  8355                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8356  00364A  5186               	movf	_vscp_nickname& (0+255),w,b
  8357  00364C  EE20  F08E         	lfsr	2,_vscp_imsg+6
  8358  003650  62DF               	cpfseq	indf2,c
  8359  003652  D10F               	goto	l1272
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8363  003654  0E03               	movlw	3
  8364  003656  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  8365                           
  8366                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8367  003658  0E87               	movlw	135
  8368  00365A  6F96               	movwf	_vscp_omsg& (0+255),b
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8372  00365C  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  8373  00365E  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  8374                           
  8375                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8376  003660  0E22               	movlw	34
  8377  003662  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8381  003664  0E9B               	movlw	(_vscp_omsg+5)& (0+255)
  8382  003666  EC35  F02E         	call	_vscp_getMatrixInfo
  8383  00366A  D60C               	goto	l9724
  8384  00366C                     l10026:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8388  00366C  5186               	movf	_vscp_nickname& (0+255),w,b
  8389  00366E  EE20  F08E         	lfsr	2,_vscp_imsg+6
  8390  003672  62DF               	cpfseq	indf2,c
  8391  003674  D0FE               	goto	l1272
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8395  003676  6BD8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8399                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8400  003678  C088  F0C2         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8401  00367C  0E0F               	movlw	15
  8402  00367E  17C2               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8403  003680  0E04               	movlw	4
  8404  003682  5DC2               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8405  003684  E312               	bnc	l10042
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8409  003686  C092  F0D9         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1162
  8410  00368A  6BDA               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8414  00368C  51DA               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8415  00368E  11D9               	iorwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8416  003690  E103               	bnz	l10038
  8417                           
  8418                           ; BSR set to: 0
  8419  003692  0E01               	movlw	1
  8420  003694  6FDA               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8421  003696  6BD9               	clrf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8422  003698                     l10038:
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8426  003698  0E01               	movlw	1
  8427  00369A  5DD9               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8428  00369C  0E01               	movlw	1
  8429  00369E  59DA               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8430  0036A0  E307               	bnc	l10044
  8431                           
  8432                           ; BSR set to: 0
  8433  0036A2  0E01               	movlw	1
  8434  0036A4  6FDA               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8435  0036A6  0E00               	movlw	0
  8436  0036A8  D002               	goto	L12
  8437  0036AA                     l10042:
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;vscp_firmware.c: 1173: else {
  8441                           ;vscp_firmware.c: 1174: bytes = 1;
  8442  0036AA  6BDA               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8443  0036AC  0E01               	movlw	1
  8444  0036AE                     L12:
  8445  0036AE  6FD9               	movwf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8446  0036B0                     l10044:
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;vscp_firmware.c: 1175: }
  8450                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8451  0036B0  C046  F0C9         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8452  0036B4  C047  F0CA         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8456  0036B8  5190               	movf	(_vscp_imsg+8)& (0+255),w,b
  8457  0036BA  C08F  F0C2         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8458  0036BE  6BC3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8459  0036C0  C0C2  F0C3         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8460  0036C4  6BC2               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8461  0036C6  11C2               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8462  0036C8  6E46               	movwf	_vscp_page_select,c
  8463  0036CA  51C3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8464  0036CC  6E47               	movwf	_vscp_page_select+1,c
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8468  0036CE  0E07               	movlw	7
  8469  0036D0  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8473  0036D2  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  8474  0036D4  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8478  0036D6  0E27               	movlw	39
  8479  0036D8  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8483  0036DA  6B9B               	clrf	(_vscp_omsg+5)& (0+255),b
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8487  0036DC  C08F  F09C         	movff	_vscp_imsg+7,_vscp_omsg+6
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8491  0036E0  C090  F09D         	movff	_vscp_imsg+8,_vscp_omsg+7
  8492  0036E4                     l10060:
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8496  0036E4  51D8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8497  0036E6  5DD9               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8498  0036E8  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8499  0036EA  0E00               	movlw	0
  8500  0036EC  59DA               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8501  0036EE  6FC3               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8502  0036F0  0E04               	movlw	4
  8503  0036F2  5DC2               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8504  0036F4  0E00               	movlw	0
  8505  0036F6  59C3               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8506  0036F8  E302               	bnc	l10064
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8510  0036FA  0E04               	movlw	4
  8511  0036FC  D002               	goto	L13
  8512  0036FE                     l10064:
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;vscp_firmware.c: 1198: else {
  8516                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8517  0036FE  51D8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8518  003700  5DD9               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8519  003702                     L13:
  8520  003702  6FD3               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;vscp_firmware.c: 1200: }
  8524                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8525  003704  51D3               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8526  003706  0F84               	addlw	132
  8527  003708  6F96               	movwf	_vscp_omsg& (0+255),b
  8528                           
  8529                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8530                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8531  00370A  5191               	movf	(_vscp_imsg+9)& (0+255),w,b
  8532  00370C  25D8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8533  00370E  6F9E               	movwf	(_vscp_omsg+8)& (0+255),b
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8537  003710  6BD4               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8538  003712  D00E               	goto	l10072
  8539  003714                     l10068:
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8543                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8544  003714  5191               	movf	(_vscp_imsg+9)& (0+255),w,b
  8545  003716  25D8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8546  003718  25D4               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8547  00371A  EC28  F02E         	call	_vscp_readRegister
  8548  00371E  0100               	movlb	0	; () banked
  8549  003720  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8550  003722  51D4               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8551  003724  0F9F               	addlw	low (_vscp_omsg+9)
  8552  003726  6ED9               	movwf	fsr2l,c
  8553  003728  6ADA               	clrf	fsr2h,c
  8554  00372A  C0C2  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8555                           
  8556                           ; BSR set to: 0
  8557  00372E  2BD4               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8558  003730                     l10072:
  8559                           
  8560                           ; BSR set to: 0
  8561  003730  51D3               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8562  003732  5DD4               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8563  003734  E3EF               	bnc	l10068
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;vscp_firmware.c: 1211: }
  8567                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8568  003736  EC78  F02D         	call	_vscp_sendEvent	;wreg free
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8572  00373A  51D3               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8573  00373C  27D8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8577  00373E  2B9B               	incf	(_vscp_omsg+5)& (0+255),f,b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8581  003740  51D8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8582  003742  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8583  003744  6BC3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8584  003746  51D9               	movf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8585  003748  5DC2               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8586  00374A  51DA               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8587  00374C  59C3               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8588  00374E  E3CA               	bnc	l10060
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8592  003750  C0C9  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8593  003754  C0CA  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8594  003758  D08C               	goto	l1272
  8595  00375A                     l10082:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8599  00375A  5186               	movf	_vscp_nickname& (0+255),w,b
  8600  00375C  EE20  F08E         	lfsr	2,_vscp_imsg+6
  8601  003760  62DF               	cpfseq	indf2,c
  8602  003762  D087               	goto	l1272
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;vscp_firmware.c: 1234: uint8_t i;
  8606                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8607                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8608  003764  C046  F0CB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8609  003768  C047  F0CC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8613  00376C  5190               	movf	(_vscp_imsg+8)& (0+255),w,b
  8614  00376E  C08F  F0C2         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8615  003772  6BC3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8616  003774  C0C2  F0C3         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8617  003778  6BC2               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8618  00377A  11C2               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8619  00377C  6E46               	movwf	_vscp_page_select,c
  8620  00377E  51C3               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8621  003780  6E47               	movwf	_vscp_page_select+1,c
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8625  003782  C091  F0D5         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8626                           
  8627                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8628                           ;vscp_firmware.c: 1248: i++) {
  8629  003786  D014               	goto	l10094
  8630  003788                     l10090:
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8634                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8635  003788  5191               	movf	(_vscp_imsg+9)& (0+255),w,b
  8636  00378A  0892               	sublw	low (_vscp_imsg+10)
  8637  00378C  25D5               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8638  00378E  6ED9               	movwf	fsr2l,c
  8639  003790  6ADA               	clrf	fsr2h,c
  8640  003792  50DF               	movf	indf2,w,c
  8641  003794  6E29               	movwf	?_vscp_writeRegister,c
  8642  003796  51D5               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8643  003798  ECE8  F02D         	call	_vscp_writeRegister
  8644  00379C  0100               	movlb	0	; () banked
  8645  00379E  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8646  0037A0  5191               	movf	(_vscp_imsg+9)& (0+255),w,b
  8647  0037A2  089F               	sublw	low (_vscp_omsg+9)
  8648  0037A4  25D5               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8649  0037A6  6ED9               	movwf	fsr2l,c
  8650  0037A8  6ADA               	clrf	fsr2h,c
  8651  0037AA  C0C2  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8652                           
  8653                           ; BSR set to: 0
  8654  0037AE  2BD5               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8655  0037B0                     l10094:
  8656                           
  8657                           ; BSR set to: 0
  8658  0037B0  5188               	movf	_vscp_imsg& (0+255),w,b
  8659  0037B2  0B0F               	andlw	15
  8660  0037B4  6FC2               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8661  0037B6  6BC3               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8662  0037B8  5191               	movf	(_vscp_imsg+9)& (0+255),w,b
  8663  0037BA  27C2               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8664  0037BC  0E00               	movlw	0
  8665  0037BE  23C3               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8666  0037C0  0EFC               	movlw	252
  8667  0037C2  25C2               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8668  0037C4  6FC4               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8669  0037C6  0EFF               	movlw	255
  8670  0037C8  21C3               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8671  0037CA  6FC5               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8672  0037CC  51D5               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8673  0037CE  6FC6               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8674  0037D0  6BC7               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8675  0037D2  51C7               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8676  0037D4  0A80               	xorlw	128
  8677  0037D6  6FC8               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8678  0037D8  51C4               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8679  0037DA  5DC6               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8680  0037DC  51C5               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8681  0037DE  0A80               	xorlw	128
  8682  0037E0  59C8               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8683  0037E2  E3D2               	bnc	l10090
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;vscp_firmware.c: 1251: }
  8687                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8688  0037E4  C0CB  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8689  0037E8  C0CC  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8693  0037EC  0E07               	movlw	7
  8694  0037EE  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8698  0037F0  5188               	movf	_vscp_imsg& (0+255),w,b
  8699  0037F2  0B0F               	andlw	15
  8700  0037F4  0F80               	addlw	128
  8701  0037F6  6F96               	movwf	_vscp_omsg& (0+255),b
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8705  0037F8  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
  8706  0037FA  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8710  0037FC  0E27               	movlw	39
  8711  0037FE  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8715  003800  6B9B               	clrf	(_vscp_omsg+5)& (0+255),b
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8719  003802  C08F  F09C         	movff	_vscp_imsg+7,_vscp_omsg+6
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8723  003806  C090  F09D         	movff	_vscp_imsg+8,_vscp_omsg+7
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8727  00380A  C091  F09E         	movff	_vscp_imsg+9,_vscp_omsg+8
  8728  00380E  D53A               	goto	l9724
  8729  003810                     l10116:
  8730                           
  8731                           ; BSR set to: 0
  8732  003810  518C               	movf	(_vscp_imsg+4)& (0+255),w,b
  8733                           
  8734                           ; Switch size 1, requested type "speed"
  8735                           ; Number of cases is 16, Range of values is 1 to 38
  8736                           ; switch strategies available:
  8737                           ; Name         Instructions Cycles
  8738                           ; simple_byte           49    25 (average)
  8739                           ;	Chosen strategy is simple_byte
  8740  003812  0A01               	xorlw	1	; case 1
  8741  003814  E101 D50E          	bz	l9698
  8742  003818  0A03               	xorlw	3	; case 2
  8743  00381A  E101 D50E          	bz	l9700
  8744  00381E  0A04               	xorlw	4	; case 6
  8745  003820  E101 D50E          	bz	l9702
  8746  003824  0A0E               	xorlw	14	; case 8
  8747  003826  E101 D50E          	bz	l9704
  8748  00382A  0A01               	xorlw	1	; case 9
  8749  00382C  E101 D50E          	bz	l9706
  8750  003830  0A02               	xorlw	2	; case 11
  8751  003832  E101 D52E          	bz	l9740
  8752  003836  0A07               	xorlw	7	; case 12
  8753  003838  E101 D544          	bz	l9774
  8754  00383C  0A1B               	xorlw	27	; case 23
  8755  00383E  E101 D5D9          	bz	l9832
  8756  003842  0A0F               	xorlw	15	; case 24
  8757  003844  E101 D5ED          	bz	l9838
  8758  003848  0A01               	xorlw	1	; case 25
  8759  00384A  E101 D644          	bz	l9872
  8760  00384E  0A04               	xorlw	4	; case 29
  8761  003850  E101 D674          	bz	l9898
  8762  003854  0A03               	xorlw	3	; case 30
  8763  003856  E101 D681          	bz	l9914
  8764  00385A  0A01               	xorlw	1	; case 31
  8765  00385C  E101 D68E          	bz	l9930
  8766  003860  0A3E               	xorlw	62	; case 33
  8767  003862  E101 D6F2          	bz	l10016
  8768  003866  0A04               	xorlw	4	; case 37
  8769  003868  E101 D700          	bz	l10026
  8770  00386C  0A03               	xorlw	3	; case 38
  8771  00386E  E101 D774          	bz	l10082
  8772  003872                     l1272:
  8773  003872  0012               	return	
  8774  003874                     __end_of_vscp_handleProtocolEvent:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           postdec1	equ	0xFE5
  8785                           fsr1h	equ	0xFE2
  8786                           fsr1l	equ	0xFE1
  8787                           indf2	equ	0xFDF
  8788                           postinc2	equ	0xFDE
  8789                           postdec2	equ	0xFDD
  8790                           fsr2h	equ	0xFDA
  8791                           fsr2l	equ	0xFD9
  8792                           status	equ	0xFD8
  8793                           
  8794 ;; *************** function ___lbmod *****************
  8795 ;; Defined at:
  8796 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;  dividend        1    wreg     unsigned char 
  8799 ;;  divisor         1   13[COMRAM] unsigned char 
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  dividend        1   14[COMRAM] unsigned char 
  8802 ;;  rem             1   16[COMRAM] unsigned char 
  8803 ;;  counter         1   15[COMRAM] unsigned char 
  8804 ;; Return value:  Size  Location     Type
  8805 ;;                  1    wreg      unsigned char 
  8806 ;; Registers used:
  8807 ;;		wreg, status,2, status,0
  8808 ;; Tracked objects:
  8809 ;;		On entry : F/0
  8810 ;;		On exit  : 0/0
  8811 ;;		Unchanged: 0/0
  8812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8813 ;;      Params:         1       0       0       0       0       0       0
  8814 ;;      Locals:         3       0       0       0       0       0       0
  8815 ;;      Temps:          0       0       0       0       0       0       0
  8816 ;;      Totals:         4       0       0       0       0       0       0
  8817 ;;Total ram usage:        4 bytes
  8818 ;; Hardware stack levels used:    1
  8819 ;; Hardware stack levels required when called:    2
  8820 ;; This function calls:
  8821 ;;		Nothing
  8822 ;; This function is called by:
  8823 ;;		_vscp_handleProtocolEvent
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           	psect	text34
  8828  005AC8                     __ptext34:
  8829                           	opt stack 0
  8830  005AC8                     ___lbmod:
  8831                           	opt stack 27
  8832                           
  8833                           ;incstack = 0
  8834                           ;incstack = 0
  8835                           ;___lbmod@dividend stored from wreg
  8836  005AC8  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8837                           
  8838                           ; BSR set to: 0
  8839  005ACC  0E08               	movlw	8
  8840  005ACE  6E10               	movwf	___lbmod@counter,c
  8841                           
  8842                           ; BSR set to: 0
  8843  005AD0  6A11               	clrf	___lbmod@rem,c
  8844  005AD2                     l9134:
  8845  005AD2  90D8               	bcf	status,0,c
  8846  005AD4  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8847  005AD6  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8848  005AD8  6E11               	movwf	___lbmod@rem,c
  8849  005ADA  90D8               	bcf	status,0,c
  8850  005ADC  360F               	rlcf	___lbmod@dividend,f,c
  8851  005ADE  500E               	movf	___lbmod@divisor,w,c
  8852  005AE0  5C11               	subwf	___lbmod@rem,w,c
  8853  005AE2  E302               	bnc	l9142
  8854  005AE4  500E               	movf	___lbmod@divisor,w,c
  8855  005AE6  5E11               	subwf	___lbmod@rem,f,c
  8856  005AE8                     l9142:
  8857  005AE8  2E10               	decfsz	___lbmod@counter,f,c
  8858  005AEA  D7F3               	goto	l9134
  8859  005AEC  5011               	movf	___lbmod@rem,w,c
  8860  005AEE  0012               	return	
  8861  005AF0                     __end_of___lbmod:
  8862                           	opt stack 0
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           prodh	equ	0xFF4
  8868                           prodl	equ	0xFF3
  8869                           postinc0	equ	0xFEE
  8870                           wreg	equ	0xFE8
  8871                           postdec1	equ	0xFE5
  8872                           fsr1h	equ	0xFE2
  8873                           fsr1l	equ	0xFE1
  8874                           indf2	equ	0xFDF
  8875                           postinc2	equ	0xFDE
  8876                           postdec2	equ	0xFDD
  8877                           fsr2h	equ	0xFDA
  8878                           fsr2l	equ	0xFD9
  8879                           status	equ	0xFD8
  8880                           
  8881 ;; *************** function _vscp_writeRegister *****************
  8882 ;; Defined at:
  8883 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  reg             1    wreg     unsigned char 
  8886 ;;  value           1   40[COMRAM] unsigned char 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  reg             1   41[COMRAM] unsigned char 
  8889 ;; Return value:  Size  Location     Type
  8890 ;;                  1    wreg      unsigned char 
  8891 ;; Registers used:
  8892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8893 ;; Tracked objects:
  8894 ;;		On entry : F/0
  8895 ;;		On exit  : 0/0
  8896 ;;		Unchanged: 0/0
  8897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8898 ;;      Params:         1       0       0       0       0       0       0
  8899 ;;      Locals:         1       0       0       0       0       0       0
  8900 ;;      Temps:          0       0       0       0       0       0       0
  8901 ;;      Totals:         2       0       0       0       0       0       0
  8902 ;;Total ram usage:        2 bytes
  8903 ;; Hardware stack levels used:    1
  8904 ;; Hardware stack levels required when called:    7
  8905 ;; This function calls:
  8906 ;;		_vscp_writeAppReg
  8907 ;;		_vscp_writeStdReg
  8908 ;; This function is called by:
  8909 ;;		_vscp_handleProtocolEvent
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           	psect	text35
  8914  005BD0                     __ptext35:
  8915                           	opt stack 0
  8916  005BD0                     _vscp_writeRegister:
  8917                           	opt stack 22
  8918                           
  8919                           ;incstack = 0
  8920                           ;incstack = 0
  8921                           ;vscp_writeRegister@reg stored from wreg
  8922  005BD0  CFE8 F02A          	movff	wreg,vscp_writeRegister@reg
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8926  005BD4  0E7F               	movlw	127
  8927  005BD6  642A               	cpfsgt	vscp_writeRegister@reg,c
  8928  005BD8  D006               	goto	l11378
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8932  005BDA  C029  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8933  005BDE  502A               	movf	vscp_writeRegister@reg,w,c
  8934  005BE0  EC5C  F023         	call	_vscp_writeStdReg
  8935  005BE4  D005               	goto	l1152
  8936  005BE6                     l11378:
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;vscp_firmware.c: 705: else {
  8940                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8941  005BE6  C029  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8942  005BEA  502A               	movf	vscp_writeRegister@reg,w,c
  8943  005BEC  ECB7  F005         	call	_vscp_writeAppReg
  8944  005BF0                     l1152:
  8945  005BF0  0012               	return	
  8946  005BF2                     __end_of_vscp_writeRegister:
  8947                           	opt stack 0
  8948                           tblptru	equ	0xFF8
  8949                           tblptrh	equ	0xFF7
  8950                           tblptrl	equ	0xFF6
  8951                           tablat	equ	0xFF5
  8952                           prodh	equ	0xFF4
  8953                           prodl	equ	0xFF3
  8954                           postinc0	equ	0xFEE
  8955                           wreg	equ	0xFE8
  8956                           postdec1	equ	0xFE5
  8957                           fsr1h	equ	0xFE2
  8958                           fsr1l	equ	0xFE1
  8959                           indf2	equ	0xFDF
  8960                           postinc2	equ	0xFDE
  8961                           postdec2	equ	0xFDD
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _vscp_writeStdReg *****************
  8967 ;; Defined at:
  8968 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  reg             1    wreg     unsigned char 
  8971 ;;  value           1   33[COMRAM] unsigned char 
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;  reg             1   39[COMRAM] unsigned char 
  8974 ;;  rv              1   38[COMRAM] unsigned char 
  8975 ;; Return value:  Size  Location     Type
  8976 ;;                  1    wreg      unsigned char 
  8977 ;; Registers used:
  8978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : F/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8984 ;;      Params:         1       0       0       0       0       0       0
  8985 ;;      Locals:         2       0       0       0       0       0       0
  8986 ;;      Temps:          4       0       0       0       0       0       0
  8987 ;;      Totals:         7       0       0       0       0       0       0
  8988 ;;Total ram usage:        7 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    6
  8991 ;; This function calls:
  8992 ;;		_vscp_getGUID
  8993 ;;		_vscp_setGUID
  8994 ;;		_vscp_getUserID
  8995 ;;		_vscp_setUserID
  8996 ;;		_vscp_getManufacturerId
  8997 ;;		_vscp_setManufacturerId
  8998 ;;		_vscp_restoreDefaults
  8999 ;; This function is called by:
  9000 ;;		_vscp_writeRegister
  9001 ;;		_vscp_handleProtocolEvent
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           	psect	text36
  9006  0046B8                     __ptext36:
  9007                           	opt stack 0
  9008  0046B8                     _vscp_writeStdReg:
  9009                           	opt stack 23
  9010                           
  9011                           ;incstack = 0
  9012                           ;incstack = 0
  9013                           ;vscp_writeStdReg@reg stored from wreg
  9014  0046B8  CFE8 F028          	movff	wreg,vscp_writeStdReg@reg
  9015                           
  9016                           ; BSR set to: 0
  9017                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9018  0046BC  1C22               	comf	vscp_writeStdReg@value,w,c
  9019  0046BE  6E27               	movwf	vscp_writeStdReg@rv,c
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9023                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9024  0046C0  0E83               	movlw	131
  9025  0046C2  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9026  0046C4  D00E               	goto	l11390
  9027                           
  9028                           ; BSR set to: 0
  9029  0046C6  0E89               	movlw	137
  9030  0046C8  6028               	cpfslt	vscp_writeStdReg@reg,c
  9031  0046CA  D00B               	goto	l11390
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9035  0046CC  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9036  0046D0  5028               	movf	vscp_writeStdReg@reg,w,c
  9037  0046D2  0F7C               	addlw	124
  9038  0046D4  EC4E  F02E         	call	_vscp_setUserID
  9039                           
  9040                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9041  0046D8  5028               	movf	vscp_writeStdReg@reg,w,c
  9042  0046DA  0F7C               	addlw	124
  9043  0046DC  EC88  F02E         	call	_vscp_getUserID
  9044  0046E0  D069               	goto	L19
  9045  0046E2                     l11390:
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9049  0046E2  5028               	movf	vscp_writeStdReg@reg,w,c
  9050  0046E4  0A92               	xorlw	146
  9051  0046E6  E10D               	bnz	l11396
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9055  0046E8  5022               	movf	vscp_writeStdReg@value,w,c
  9056  0046EA  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9057  0046EC  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9058  0046EE  5046               	movf	_vscp_page_select,w,c
  9059  0046F0  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9060  0046F2  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9061  0046F4  1023               	iorwf	??_vscp_writeStdReg,w,c
  9062  0046F6  6E46               	movwf	_vscp_page_select,c
  9063  0046F8  5024               	movf	??_vscp_writeStdReg+1,w,c
  9064  0046FA  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9065  0046FC  6E47               	movwf	_vscp_page_select+1,c
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9069  0046FE  5047               	movf	_vscp_page_select+1,w,c
  9070  004700  D059               	goto	L19
  9071  004702                     l11396:
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9075  004702  5028               	movf	vscp_writeStdReg@reg,w,c
  9076  004704  0A93               	xorlw	147
  9077  004706  E10B               	bnz	l11402
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9081  004708  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9082  00470A  5047               	movf	_vscp_page_select+1,w,c
  9083  00470C  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9084  00470E  5022               	movf	vscp_writeStdReg@value,w,c
  9085  004710  1023               	iorwf	??_vscp_writeStdReg,w,c
  9086  004712  6E46               	movwf	_vscp_page_select,c
  9087  004714  5024               	movf	??_vscp_writeStdReg+1,w,c
  9088  004716  6E47               	movwf	_vscp_page_select+1,c
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9092  004718  C046  F027         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9093                           
  9094                           ;vscp_firmware.c: 737: }
  9095  00471C  D04E               	goto	l11444
  9096  00471E                     l11402:
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9100  00471E  0E88               	movlw	136
  9101  004720  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9102  004722  D019               	goto	l11414
  9103                           
  9104                           ; BSR set to: 0
  9105  004724  0E91               	movlw	145
  9106  004726  6028               	cpfslt	vscp_writeStdReg@reg,c
  9107  004728  D016               	goto	l11414
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9111                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9112  00472A  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9113  00472E  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9114  004732  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9115  004734  2824               	incf	??_vscp_writeStdReg+1,w,c
  9116  004736  E102               	bnz	l11410
  9117                           
  9118                           ; BSR set to: 0
  9119  004738  2846               	incf	_vscp_page_select,w,c
  9120  00473A  E002               	bz	l11412
  9121  00473C                     l11410:
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;vscp_firmware.c: 747: rv = ~value;
  9125  00473C  1C22               	comf	vscp_writeStdReg@value,w,c
  9126  00473E  D03A               	goto	L19
  9127  004740                     l11412:
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;vscp_firmware.c: 749: else {
  9131                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9132  004740  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9133  004744  5028               	movf	vscp_writeStdReg@reg,w,c
  9134  004746  0F77               	addlw	119
  9135  004748  EC42  F02E         	call	_vscp_setManufacturerId
  9136                           
  9137                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9138  00474C  5028               	movf	vscp_writeStdReg@reg,w,c
  9139  00474E  0F77               	addlw	119
  9140  004750  EC7E  F02E         	call	_vscp_getManufacturerId
  9141  004754  D02F               	goto	L19
  9142  004756                     l11414:
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9146  004756  0ECF               	movlw	207
  9147  004758  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9148  00475A  D017               	goto	l11426
  9149                           
  9150                           ; BSR set to: 0
  9151  00475C  0EE0               	movlw	224
  9152  00475E  6028               	cpfslt	vscp_writeStdReg@reg,c
  9153  004760  D014               	goto	l11426
  9154                           
  9155                           ; BSR set to: 0
  9156                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9157                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9158  004762  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9159  004766  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9160  00476A  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9161  00476C  2824               	incf	??_vscp_writeStdReg+1,w,c
  9162  00476E  E1E6               	bnz	l11410
  9163                           
  9164                           ; BSR set to: 0
  9165  004770  2846               	incf	_vscp_page_select,w,c
  9166  004772  E1E4               	bnz	l11410
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;vscp_firmware.c: 762: else {
  9170                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9171  004774  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9172  004778  5028               	movf	vscp_writeStdReg@reg,w,c
  9173  00477A  0F30               	addlw	48
  9174  00477C  ECF9  F02D         	call	_vscp_setGUID
  9175                           
  9176                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9177  004780  5028               	movf	vscp_writeStdReg@reg,w,c
  9178  004782  0F30               	addlw	48
  9179  004784  EC92  F02E         	call	_vscp_getGUID
  9180  004788  D015               	goto	L19
  9181  00478A                     l11426:
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9185  00478A  5028               	movf	vscp_writeStdReg@reg,w,c
  9186  00478C  0AA2               	xorlw	162
  9187  00478E  E1D6               	bnz	l11410
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9191  004790  5022               	movf	vscp_writeStdReg@value,w,c
  9192  004792  0A55               	xorlw	85
  9193  004794  E104               	bnz	l11434
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9197  004796  6B7C               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9198  004798  6B7D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;vscp_firmware.c: 771: rv = 0x55;
  9202  00479A  0E55               	movlw	85
  9203  00479C  D00B               	goto	L19
  9204  00479E                     l11434:
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9208  00479E  5022               	movf	vscp_writeStdReg@value,w,c
  9209  0047A0  0AAA               	xorlw	170
  9210  0047A2  E10B               	bnz	l11444
  9211                           
  9212                           ; BSR set to: 0
  9213                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9214  0047A4  0EE8               	movlw	232
  9215  0047A6  5D7C               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9216  0047A8  0E03               	movlw	3
  9217  0047AA  597D               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9218  0047AC  E205               	bc	l1178
  9219                           
  9220                           ; BSR set to: 0
  9221                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9222  0047AE  ECF1  F02E         	call	_vscp_restoreDefaults	;wreg free
  9223                           
  9224                           ; BSR set to: 1
  9225                           ;vscp_firmware.c: 776: rv = 0xaa;
  9226  0047B2  0EAA               	movlw	170
  9227  0047B4                     L19:
  9228  0047B4  6E27               	movwf	vscp_writeStdReg@rv,c
  9229                           
  9230                           ;vscp_firmware.c: 777: }
  9231  0047B6  D001               	goto	l11444
  9232  0047B8                     l1178:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;vscp_firmware.c: 778: else {
  9236                           ;vscp_firmware.c: 779: rv = 0;
  9237  0047B8  6A27               	clrf	vscp_writeStdReg@rv,c
  9238  0047BA                     l11444:
  9239                           
  9240                           ;vscp_firmware.c: 787: }
  9241                           ;vscp_firmware.c: 789: return rv;
  9242  0047BA  5027               	movf	vscp_writeStdReg@rv,w,c
  9243  0047BC  0012               	return	
  9244  0047BE                     __end_of_vscp_writeStdReg:
  9245                           	opt stack 0
  9246                           tblptru	equ	0xFF8
  9247                           tblptrh	equ	0xFF7
  9248                           tblptrl	equ	0xFF6
  9249                           tablat	equ	0xFF5
  9250                           prodh	equ	0xFF4
  9251                           prodl	equ	0xFF3
  9252                           postinc0	equ	0xFEE
  9253                           wreg	equ	0xFE8
  9254                           postdec1	equ	0xFE5
  9255                           fsr1h	equ	0xFE2
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _vscp_restoreDefaults *****************
  9265 ;; Defined at:
  9266 ;;		line 2835 in file "../main.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : F/0
  9277 ;;		On exit  : F/1
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9280 ;;      Params:         0       0       0       0       0       0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0
  9283 ;;      Totals:         0       0       0       0       0       0       0
  9284 ;;Total ram usage:        0 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    5
  9287 ;; This function calls:
  9288 ;;		_init_app_eeprom
  9289 ;;		_init_app_ram
  9290 ;; This function is called by:
  9291 ;;		_vscp_writeStdReg
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           	psect	text37
  9296  005DE2                     __ptext37:
  9297                           	opt stack 0
  9298  005DE2                     _vscp_restoreDefaults:
  9299                           	opt stack 23
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;main.c: 2836: init_app_eeprom();
  9303                           
  9304                           ;incstack = 0
  9305                           ;incstack = 0
  9306  005DE2  EC46  F015         	call	_init_app_eeprom	;wreg free
  9307                           
  9308                           ;main.c: 2837: init_app_ram();
  9309  005DE6  EF68  F02C         	goto	_init_app_ram	;wreg free
  9310  005DEA                     __end_of_vscp_restoreDefaults:
  9311                           	opt stack 0
  9312                           tblptru	equ	0xFF8
  9313                           tblptrh	equ	0xFF7
  9314                           tblptrl	equ	0xFF6
  9315                           tablat	equ	0xFF5
  9316                           prodh	equ	0xFF4
  9317                           prodl	equ	0xFF3
  9318                           postinc0	equ	0xFEE
  9319                           wreg	equ	0xFE8
  9320                           postdec1	equ	0xFE5
  9321                           fsr1h	equ	0xFE2
  9322                           fsr1l	equ	0xFE1
  9323                           indf2	equ	0xFDF
  9324                           postinc2	equ	0xFDE
  9325                           postdec2	equ	0xFDD
  9326                           fsr2h	equ	0xFDA
  9327                           fsr2l	equ	0xFD9
  9328                           status	equ	0xFD8
  9329                           
  9330 ;; *************** function _init_app_eeprom *****************
  9331 ;; Defined at:
  9332 ;;		line 1022 in file "../main.c"
  9333 ;; Parameters:    Size  Location     Type
  9334 ;;		None
  9335 ;; Auto vars:     Size  Location     Type
  9336 ;;  i               1   16[COMRAM] unsigned char 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;		None               void
  9339 ;; Registers used:
  9340 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/1
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9346 ;;      Params:         0       0       0       0       0       0       0
  9347 ;;      Locals:         1       0       0       0       0       0       0
  9348 ;;      Temps:          0       0       0       0       0       0       0
  9349 ;;      Totals:         1       0       0       0       0       0       0
  9350 ;;Total ram usage:        1 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    3
  9353 ;; This function calls:
  9354 ;;		_writeEEPROM
  9355 ;; This function is called by:
  9356 ;;		_main
  9357 ;;		_vscp_restoreDefaults
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           	psect	text38
  9362  002A8C                     __ptext38:
  9363                           	opt stack 0
  9364  002A8C                     _init_app_eeprom:
  9365                           	opt stack 24
  9366                           
  9367                           ;main.c: 1024: writeEEPROM( 0x41, 0 );
  9368                           
  9369                           ; BSR set to: 1
  9370                           ;incstack = 0
  9371                           ;incstack = 0
  9372  002A8C  6A0F               	clrf	?_writeEEPROM+1,c
  9373  002A8E  0E41               	movlw	65
  9374  002A90  6E0E               	movwf	?_writeEEPROM,c
  9375  002A92  0E00               	movlw	0
  9376  002A94  6A10               	clrf	?_writeEEPROM+2,c
  9377  002A96  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9378                           
  9379                           ;main.c: 1025: writeEEPROM( 0x41, 0 );
  9380  002A9A  6A0F               	clrf	?_writeEEPROM+1,c
  9381  002A9C  0E41               	movlw	65
  9382  002A9E  6E0E               	movwf	?_writeEEPROM,c
  9383  002AA0  0E00               	movlw	0
  9384  002AA2  6A10               	clrf	?_writeEEPROM+2,c
  9385  002AA4  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9386                           
  9387                           ;main.c: 1027: writeEEPROM(0x43, 0b00000001);
  9388  002AA8  6A0F               	clrf	?_writeEEPROM+1,c
  9389  002AAA  0E43               	movlw	67
  9390  002AAC  6E0E               	movwf	?_writeEEPROM,c
  9391  002AAE  0E01               	movlw	1
  9392  002AB0  6E10               	movwf	?_writeEEPROM+2,c
  9393  002AB2  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9394                           
  9395                           ;main.c: 1028: writeEEPROM(0x44, 0b00000001);
  9396  002AB6  6A0F               	clrf	?_writeEEPROM+1,c
  9397  002AB8  0E44               	movlw	68
  9398  002ABA  6E0E               	movwf	?_writeEEPROM,c
  9399  002ABC  0E01               	movlw	1
  9400  002ABE  6E10               	movwf	?_writeEEPROM+2,c
  9401  002AC0  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9402                           
  9403                           ;main.c: 1029: writeEEPROM(0x45, 0b00000001);
  9404  002AC4  6A0F               	clrf	?_writeEEPROM+1,c
  9405  002AC6  0E45               	movlw	69
  9406  002AC8  6E0E               	movwf	?_writeEEPROM,c
  9407  002ACA  0E01               	movlw	1
  9408  002ACC  6E10               	movwf	?_writeEEPROM+2,c
  9409  002ACE  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9410                           
  9411                           ;main.c: 1030: writeEEPROM(0x46, 0b00000001);
  9412  002AD2  6A0F               	clrf	?_writeEEPROM+1,c
  9413  002AD4  0E46               	movlw	70
  9414  002AD6  6E0E               	movwf	?_writeEEPROM,c
  9415  002AD8  0E01               	movlw	1
  9416  002ADA  6E10               	movwf	?_writeEEPROM+2,c
  9417  002ADC  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9418                           
  9419                           ;main.c: 1031: writeEEPROM(0x47, 0b00000001);
  9420  002AE0  6A0F               	clrf	?_writeEEPROM+1,c
  9421  002AE2  0E47               	movlw	71
  9422  002AE4  6E0E               	movwf	?_writeEEPROM,c
  9423  002AE6  0E01               	movlw	1
  9424  002AE8  6E10               	movwf	?_writeEEPROM+2,c
  9425  002AEA  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9426                           
  9427                           ;main.c: 1032: writeEEPROM(0x48, 0b00000001);
  9428  002AEE  6A0F               	clrf	?_writeEEPROM+1,c
  9429  002AF0  0E48               	movlw	72
  9430  002AF2  6E0E               	movwf	?_writeEEPROM,c
  9431  002AF4  0E01               	movlw	1
  9432  002AF6  6E10               	movwf	?_writeEEPROM+2,c
  9433  002AF8  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9434                           
  9435                           ;main.c: 1034: writeEEPROM(0x49, 30);
  9436  002AFC  6A0F               	clrf	?_writeEEPROM+1,c
  9437  002AFE  0E49               	movlw	73
  9438  002B00  6E0E               	movwf	?_writeEEPROM,c
  9439  002B02  0E1E               	movlw	30
  9440  002B04  6E10               	movwf	?_writeEEPROM+2,c
  9441  002B06  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9442                           
  9443                           ;main.c: 1035: writeEEPROM(0x4A, 0);
  9444  002B0A  6A0F               	clrf	?_writeEEPROM+1,c
  9445  002B0C  0E4A               	movlw	74
  9446  002B0E  6E0E               	movwf	?_writeEEPROM,c
  9447  002B10  0E00               	movlw	0
  9448  002B12  6A10               	clrf	?_writeEEPROM+2,c
  9449  002B14  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9450                           
  9451                           ;main.c: 1036: writeEEPROM(0x4B, 0);
  9452  002B18  6A0F               	clrf	?_writeEEPROM+1,c
  9453  002B1A  0E4B               	movlw	75
  9454  002B1C  6E0E               	movwf	?_writeEEPROM,c
  9455  002B1E  0E00               	movlw	0
  9456  002B20  6A10               	clrf	?_writeEEPROM+2,c
  9457  002B22  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9458                           
  9459                           ;main.c: 1037: writeEEPROM(0x4C, 0);
  9460  002B26  6A0F               	clrf	?_writeEEPROM+1,c
  9461  002B28  0E4C               	movlw	76
  9462  002B2A  6E0E               	movwf	?_writeEEPROM,c
  9463  002B2C  0E00               	movlw	0
  9464  002B2E  6A10               	clrf	?_writeEEPROM+2,c
  9465  002B30  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9466                           
  9467                           ;main.c: 1038: writeEEPROM(0x4D, 0);
  9468  002B34  6A0F               	clrf	?_writeEEPROM+1,c
  9469  002B36  0E4D               	movlw	77
  9470  002B38  6E0E               	movwf	?_writeEEPROM,c
  9471  002B3A  0E00               	movlw	0
  9472  002B3C  6A10               	clrf	?_writeEEPROM+2,c
  9473  002B3E  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9474                           
  9475                           ;main.c: 1039: writeEEPROM(0x4E, 0);
  9476  002B42  6A0F               	clrf	?_writeEEPROM+1,c
  9477  002B44  0E4E               	movlw	78
  9478  002B46  6E0E               	movwf	?_writeEEPROM,c
  9479  002B48  0E00               	movlw	0
  9480  002B4A  6A10               	clrf	?_writeEEPROM+2,c
  9481  002B4C  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9482                           
  9483                           ;main.c: 1043: writeEEPROM(0x4F, 0x0F);
  9484  002B50  6A0F               	clrf	?_writeEEPROM+1,c
  9485  002B52  0E4F               	movlw	79
  9486  002B54  6E0E               	movwf	?_writeEEPROM,c
  9487  002B56  0E0F               	movlw	15
  9488  002B58  6E10               	movwf	?_writeEEPROM+2,c
  9489  002B5A  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9490                           
  9491                           ;main.c: 1044: writeEEPROM(0x50, 0x68);
  9492  002B5E  6A0F               	clrf	?_writeEEPROM+1,c
  9493  002B60  0E50               	movlw	80
  9494  002B62  6E0E               	movwf	?_writeEEPROM,c
  9495  002B64  0E68               	movlw	104
  9496  002B66  6E10               	movwf	?_writeEEPROM+2,c
  9497  002B68  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9498                           
  9499                           ;main.c: 1046: writeEEPROM(0x51, 0x0D);
  9500  002B6C  6A0F               	clrf	?_writeEEPROM+1,c
  9501  002B6E  0E51               	movlw	81
  9502  002B70  6E0E               	movwf	?_writeEEPROM,c
  9503  002B72  0E0D               	movlw	13
  9504  002B74  6E10               	movwf	?_writeEEPROM+2,c
  9505  002B76  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9506                           
  9507                           ;main.c: 1047: writeEEPROM(0x52, 0x7F);
  9508  002B7A  6A0F               	clrf	?_writeEEPROM+1,c
  9509  002B7C  0E52               	movlw	82
  9510  002B7E  6E0E               	movwf	?_writeEEPROM,c
  9511  002B80  0E7F               	movlw	127
  9512  002B82  6E10               	movwf	?_writeEEPROM+2,c
  9513  002B84  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9514                           
  9515                           ;main.c: 1049: writeEEPROM(0x53, 0x0D);
  9516  002B88  6A0F               	clrf	?_writeEEPROM+1,c
  9517  002B8A  0E53               	movlw	83
  9518  002B8C  6E0E               	movwf	?_writeEEPROM,c
  9519  002B8E  0E0D               	movlw	13
  9520  002B90  6E10               	movwf	?_writeEEPROM+2,c
  9521  002B92  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9522                           
  9523                           ;main.c: 1050: writeEEPROM(0x54, 0x7F);
  9524  002B96  6A0F               	clrf	?_writeEEPROM+1,c
  9525  002B98  0E54               	movlw	84
  9526  002B9A  6E0E               	movwf	?_writeEEPROM,c
  9527  002B9C  0E7F               	movlw	127
  9528  002B9E  6E10               	movwf	?_writeEEPROM+2,c
  9529  002BA0  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9530                           
  9531                           ;main.c: 1052: writeEEPROM(0x55, 0x0D);
  9532  002BA4  6A0F               	clrf	?_writeEEPROM+1,c
  9533  002BA6  0E55               	movlw	85
  9534  002BA8  6E0E               	movwf	?_writeEEPROM,c
  9535  002BAA  0E0D               	movlw	13
  9536  002BAC  6E10               	movwf	?_writeEEPROM+2,c
  9537  002BAE  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9538                           
  9539                           ;main.c: 1053: writeEEPROM(0x56, 0x7F);
  9540  002BB2  6A0F               	clrf	?_writeEEPROM+1,c
  9541  002BB4  0E56               	movlw	86
  9542  002BB6  6E0E               	movwf	?_writeEEPROM,c
  9543  002BB8  0E7F               	movlw	127
  9544  002BBA  6E10               	movwf	?_writeEEPROM+2,c
  9545  002BBC  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9546                           
  9547                           ;main.c: 1055: writeEEPROM(0x57, 0x0D);
  9548  002BC0  6A0F               	clrf	?_writeEEPROM+1,c
  9549  002BC2  0E57               	movlw	87
  9550  002BC4  6E0E               	movwf	?_writeEEPROM,c
  9551  002BC6  0E0D               	movlw	13
  9552  002BC8  6E10               	movwf	?_writeEEPROM+2,c
  9553  002BCA  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9554                           
  9555                           ;main.c: 1056: writeEEPROM(0x58, 0x7F);
  9556  002BCE  6A0F               	clrf	?_writeEEPROM+1,c
  9557  002BD0  0E58               	movlw	88
  9558  002BD2  6E0E               	movwf	?_writeEEPROM,c
  9559  002BD4  0E7F               	movlw	127
  9560  002BD6  6E10               	movwf	?_writeEEPROM+2,c
  9561  002BD8  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9562                           
  9563                           ;main.c: 1058: writeEEPROM(0x59, 0x0D);
  9564  002BDC  6A0F               	clrf	?_writeEEPROM+1,c
  9565  002BDE  0E59               	movlw	89
  9566  002BE0  6E0E               	movwf	?_writeEEPROM,c
  9567  002BE2  0E0D               	movlw	13
  9568  002BE4  6E10               	movwf	?_writeEEPROM+2,c
  9569  002BE6  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9570                           
  9571                           ;main.c: 1059: writeEEPROM(0x5A, 0x7F);
  9572  002BEA  6A0F               	clrf	?_writeEEPROM+1,c
  9573  002BEC  0E5A               	movlw	90
  9574  002BEE  6E0E               	movwf	?_writeEEPROM,c
  9575  002BF0  0E7F               	movlw	127
  9576  002BF2  6E10               	movwf	?_writeEEPROM+2,c
  9577  002BF4  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9578                           
  9579                           ;main.c: 1063: writeEEPROM(0x5B, 0x80);
  9580  002BF8  6A0F               	clrf	?_writeEEPROM+1,c
  9581  002BFA  0E5B               	movlw	91
  9582  002BFC  6E0E               	movwf	?_writeEEPROM,c
  9583  002BFE  0E80               	movlw	128
  9584  002C00  6E10               	movwf	?_writeEEPROM+2,c
  9585  002C02  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9586                           
  9587                           ;main.c: 1064: writeEEPROM(0x5C, 0xff);
  9588  002C06  6A0F               	clrf	?_writeEEPROM+1,c
  9589  002C08  0E5C               	movlw	92
  9590  002C0A  6E0E               	movwf	?_writeEEPROM,c
  9591  002C0C  0EFF               	movlw	255
  9592  002C0E  6810               	setf	?_writeEEPROM+2,c
  9593  002C10  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9594                           
  9595                           ;main.c: 1066: writeEEPROM(0x5D, 0x80);
  9596  002C14  6A0F               	clrf	?_writeEEPROM+1,c
  9597  002C16  0E5D               	movlw	93
  9598  002C18  6E0E               	movwf	?_writeEEPROM,c
  9599  002C1A  0E80               	movlw	128
  9600  002C1C  6E10               	movwf	?_writeEEPROM+2,c
  9601  002C1E  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9602                           
  9603                           ;main.c: 1067: writeEEPROM(0x5E, 0xff);
  9604  002C22  6A0F               	clrf	?_writeEEPROM+1,c
  9605  002C24  0E5E               	movlw	94
  9606  002C26  6E0E               	movwf	?_writeEEPROM,c
  9607  002C28  0EFF               	movlw	255
  9608  002C2A  6810               	setf	?_writeEEPROM+2,c
  9609  002C2C  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9610                           
  9611                           ;main.c: 1069: writeEEPROM(0x5F, 0x80);
  9612  002C30  6A0F               	clrf	?_writeEEPROM+1,c
  9613  002C32  0E5F               	movlw	95
  9614  002C34  6E0E               	movwf	?_writeEEPROM,c
  9615  002C36  0E80               	movlw	128
  9616  002C38  6E10               	movwf	?_writeEEPROM+2,c
  9617  002C3A  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9618                           
  9619                           ;main.c: 1070: writeEEPROM(0x60, 0xff);
  9620  002C3E  6A0F               	clrf	?_writeEEPROM+1,c
  9621  002C40  0E60               	movlw	96
  9622  002C42  6E0E               	movwf	?_writeEEPROM,c
  9623  002C44  0EFF               	movlw	255
  9624  002C46  6810               	setf	?_writeEEPROM+2,c
  9625  002C48  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9626                           
  9627                           ;main.c: 1072: writeEEPROM(0x61, 0x80);
  9628  002C4C  6A0F               	clrf	?_writeEEPROM+1,c
  9629  002C4E  0E61               	movlw	97
  9630  002C50  6E0E               	movwf	?_writeEEPROM,c
  9631  002C52  0E80               	movlw	128
  9632  002C54  6E10               	movwf	?_writeEEPROM+2,c
  9633  002C56  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9634                           
  9635                           ;main.c: 1073: writeEEPROM(0x62, 0xff);
  9636  002C5A  6A0F               	clrf	?_writeEEPROM+1,c
  9637  002C5C  0E62               	movlw	98
  9638  002C5E  6E0E               	movwf	?_writeEEPROM,c
  9639  002C60  0EFF               	movlw	255
  9640  002C62  6810               	setf	?_writeEEPROM+2,c
  9641  002C64  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9642                           
  9643                           ;main.c: 1075: writeEEPROM(0x63, 0x80);
  9644  002C68  6A0F               	clrf	?_writeEEPROM+1,c
  9645  002C6A  0E63               	movlw	99
  9646  002C6C  6E0E               	movwf	?_writeEEPROM,c
  9647  002C6E  0E80               	movlw	128
  9648  002C70  6E10               	movwf	?_writeEEPROM+2,c
  9649  002C72  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9650                           
  9651                           ;main.c: 1076: writeEEPROM(0x64, 0xff);
  9652  002C76  6A0F               	clrf	?_writeEEPROM+1,c
  9653  002C78  0E64               	movlw	100
  9654  002C7A  6E0E               	movwf	?_writeEEPROM,c
  9655  002C7C  0EFF               	movlw	255
  9656  002C7E  6810               	setf	?_writeEEPROM+2,c
  9657  002C80  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9658                           
  9659                           ;main.c: 1078: writeEEPROM(0x65, 0x80);
  9660  002C84  6A0F               	clrf	?_writeEEPROM+1,c
  9661  002C86  0E65               	movlw	101
  9662  002C88  6E0E               	movwf	?_writeEEPROM,c
  9663  002C8A  0E80               	movlw	128
  9664  002C8C  6E10               	movwf	?_writeEEPROM+2,c
  9665  002C8E  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9666                           
  9667                           ;main.c: 1079: writeEEPROM(0x66, 0xff);
  9668  002C92  6A0F               	clrf	?_writeEEPROM+1,c
  9669  002C94  0E66               	movlw	102
  9670  002C96  6E0E               	movwf	?_writeEEPROM,c
  9671  002C98  0EFF               	movlw	255
  9672  002C9A  6810               	setf	?_writeEEPROM+2,c
  9673  002C9C  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9674                           
  9675                           ;main.c: 1083: writeEEPROM(0x67, 0x7f);
  9676  002CA0  6A0F               	clrf	?_writeEEPROM+1,c
  9677  002CA2  0E67               	movlw	103
  9678  002CA4  6E0E               	movwf	?_writeEEPROM,c
  9679  002CA6  0E7F               	movlw	127
  9680  002CA8  6E10               	movwf	?_writeEEPROM+2,c
  9681  002CAA  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9682                           
  9683                           ;main.c: 1084: writeEEPROM(0x68, 0xff);
  9684  002CAE  6A0F               	clrf	?_writeEEPROM+1,c
  9685  002CB0  0E68               	movlw	104
  9686  002CB2  6E0E               	movwf	?_writeEEPROM,c
  9687  002CB4  0EFF               	movlw	255
  9688  002CB6  6810               	setf	?_writeEEPROM+2,c
  9689  002CB8  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9690                           
  9691                           ;main.c: 1086: writeEEPROM(0x69, 0x7f);
  9692  002CBC  6A0F               	clrf	?_writeEEPROM+1,c
  9693  002CBE  0E69               	movlw	105
  9694  002CC0  6E0E               	movwf	?_writeEEPROM,c
  9695  002CC2  0E7F               	movlw	127
  9696  002CC4  6E10               	movwf	?_writeEEPROM+2,c
  9697  002CC6  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9698                           
  9699                           ;main.c: 1087: writeEEPROM(0x6A, 0xff);
  9700  002CCA  6A0F               	clrf	?_writeEEPROM+1,c
  9701  002CCC  0E6A               	movlw	106
  9702  002CCE  6E0E               	movwf	?_writeEEPROM,c
  9703  002CD0  0EFF               	movlw	255
  9704  002CD2  6810               	setf	?_writeEEPROM+2,c
  9705  002CD4  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9706                           
  9707                           ;main.c: 1089: writeEEPROM(0x6B, 0x7f);
  9708  002CD8  6A0F               	clrf	?_writeEEPROM+1,c
  9709  002CDA  0E6B               	movlw	107
  9710  002CDC  6E0E               	movwf	?_writeEEPROM,c
  9711  002CDE  0E7F               	movlw	127
  9712  002CE0  6E10               	movwf	?_writeEEPROM+2,c
  9713  002CE2  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9714                           
  9715                           ;main.c: 1090: writeEEPROM(0x6C, 0xff);
  9716  002CE6  6A0F               	clrf	?_writeEEPROM+1,c
  9717  002CE8  0E6C               	movlw	108
  9718  002CEA  6E0E               	movwf	?_writeEEPROM,c
  9719  002CEC  0EFF               	movlw	255
  9720  002CEE  6810               	setf	?_writeEEPROM+2,c
  9721  002CF0  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9722                           
  9723                           ;main.c: 1092: writeEEPROM(0x6D, 0x7f);
  9724  002CF4  6A0F               	clrf	?_writeEEPROM+1,c
  9725  002CF6  0E6D               	movlw	109
  9726  002CF8  6E0E               	movwf	?_writeEEPROM,c
  9727  002CFA  0E7F               	movlw	127
  9728  002CFC  6E10               	movwf	?_writeEEPROM+2,c
  9729  002CFE  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9730                           
  9731                           ;main.c: 1093: writeEEPROM(0x6E, 0xff);
  9732  002D02  6A0F               	clrf	?_writeEEPROM+1,c
  9733  002D04  0E6E               	movlw	110
  9734  002D06  6E0E               	movwf	?_writeEEPROM,c
  9735  002D08  0EFF               	movlw	255
  9736  002D0A  6810               	setf	?_writeEEPROM+2,c
  9737  002D0C  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9738                           
  9739                           ;main.c: 1095: writeEEPROM(0x6F, 0x7f);
  9740  002D10  6A0F               	clrf	?_writeEEPROM+1,c
  9741  002D12  0E6F               	movlw	111
  9742  002D14  6E0E               	movwf	?_writeEEPROM,c
  9743  002D16  0E7F               	movlw	127
  9744  002D18  6E10               	movwf	?_writeEEPROM+2,c
  9745  002D1A  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9746                           
  9747                           ;main.c: 1096: writeEEPROM(0x70, 0xff);
  9748  002D1E  6A0F               	clrf	?_writeEEPROM+1,c
  9749  002D20  0E70               	movlw	112
  9750  002D22  6E0E               	movwf	?_writeEEPROM,c
  9751  002D24  0EFF               	movlw	255
  9752  002D26  6810               	setf	?_writeEEPROM+2,c
  9753  002D28  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9754                           
  9755                           ;main.c: 1098: writeEEPROM(0x71, 0x7f);
  9756  002D2C  6A0F               	clrf	?_writeEEPROM+1,c
  9757  002D2E  0E71               	movlw	113
  9758  002D30  6E0E               	movwf	?_writeEEPROM,c
  9759  002D32  0E7F               	movlw	127
  9760  002D34  6E10               	movwf	?_writeEEPROM+2,c
  9761  002D36  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9762                           
  9763                           ;main.c: 1099: writeEEPROM(0x72, 0xff);
  9764  002D3A  6A0F               	clrf	?_writeEEPROM+1,c
  9765  002D3C  0E72               	movlw	114
  9766  002D3E  6E0E               	movwf	?_writeEEPROM,c
  9767  002D40  0EFF               	movlw	255
  9768  002D42  6810               	setf	?_writeEEPROM+2,c
  9769  002D44  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9770                           
  9771                           ;main.c: 1103: writeEEPROM(0x73, 0);
  9772  002D48  6A0F               	clrf	?_writeEEPROM+1,c
  9773  002D4A  0E73               	movlw	115
  9774  002D4C  6E0E               	movwf	?_writeEEPROM,c
  9775  002D4E  0E00               	movlw	0
  9776  002D50  6A10               	clrf	?_writeEEPROM+2,c
  9777  002D52  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9778                           
  9779                           ;main.c: 1104: writeEEPROM(0x74, 0);
  9780  002D56  6A0F               	clrf	?_writeEEPROM+1,c
  9781  002D58  0E74               	movlw	116
  9782  002D5A  6E0E               	movwf	?_writeEEPROM,c
  9783  002D5C  0E00               	movlw	0
  9784  002D5E  6A10               	clrf	?_writeEEPROM+2,c
  9785  002D60  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9786                           
  9787                           ;main.c: 1106: writeEEPROM(0x75, 0);
  9788  002D64  6A0F               	clrf	?_writeEEPROM+1,c
  9789  002D66  0E75               	movlw	117
  9790  002D68  6E0E               	movwf	?_writeEEPROM,c
  9791  002D6A  0E00               	movlw	0
  9792  002D6C  6A10               	clrf	?_writeEEPROM+2,c
  9793  002D6E  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9794                           
  9795                           ;main.c: 1107: writeEEPROM(0x76, 0);
  9796  002D72  6A0F               	clrf	?_writeEEPROM+1,c
  9797  002D74  0E76               	movlw	118
  9798  002D76  6E0E               	movwf	?_writeEEPROM,c
  9799  002D78  0E00               	movlw	0
  9800  002D7A  6A10               	clrf	?_writeEEPROM+2,c
  9801  002D7C  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9802                           
  9803                           ;main.c: 1109: writeEEPROM(0x77, 0);
  9804  002D80  6A0F               	clrf	?_writeEEPROM+1,c
  9805  002D82  0E77               	movlw	119
  9806  002D84  6E0E               	movwf	?_writeEEPROM,c
  9807  002D86  0E00               	movlw	0
  9808  002D88  6A10               	clrf	?_writeEEPROM+2,c
  9809  002D8A  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9810                           
  9811                           ;main.c: 1110: writeEEPROM(0x78, 0);
  9812  002D8E  6A0F               	clrf	?_writeEEPROM+1,c
  9813  002D90  0E78               	movlw	120
  9814  002D92  6E0E               	movwf	?_writeEEPROM,c
  9815  002D94  0E00               	movlw	0
  9816  002D96  6A10               	clrf	?_writeEEPROM+2,c
  9817  002D98  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9818                           
  9819                           ;main.c: 1112: writeEEPROM(0x79, 0);
  9820  002D9C  6A0F               	clrf	?_writeEEPROM+1,c
  9821  002D9E  0E79               	movlw	121
  9822  002DA0  6E0E               	movwf	?_writeEEPROM,c
  9823  002DA2  0E00               	movlw	0
  9824  002DA4  6A10               	clrf	?_writeEEPROM+2,c
  9825  002DA6  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9826                           
  9827                           ;main.c: 1113: writeEEPROM(0x7A, 0);
  9828  002DAA  6A0F               	clrf	?_writeEEPROM+1,c
  9829  002DAC  0E7A               	movlw	122
  9830  002DAE  6E0E               	movwf	?_writeEEPROM,c
  9831  002DB0  0E00               	movlw	0
  9832  002DB2  6A10               	clrf	?_writeEEPROM+2,c
  9833  002DB4  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9834                           
  9835                           ;main.c: 1115: writeEEPROM(0x7B, 0);
  9836  002DB8  6A0F               	clrf	?_writeEEPROM+1,c
  9837  002DBA  0E7B               	movlw	123
  9838  002DBC  6E0E               	movwf	?_writeEEPROM,c
  9839  002DBE  0E00               	movlw	0
  9840  002DC0  6A10               	clrf	?_writeEEPROM+2,c
  9841  002DC2  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9842                           
  9843                           ;main.c: 1116: writeEEPROM(0x7C, 0);
  9844  002DC6  6A0F               	clrf	?_writeEEPROM+1,c
  9845  002DC8  0E7C               	movlw	124
  9846  002DCA  6E0E               	movwf	?_writeEEPROM,c
  9847  002DCC  0E00               	movlw	0
  9848  002DCE  6A10               	clrf	?_writeEEPROM+2,c
  9849  002DD0  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9850                           
  9851                           ;main.c: 1118: writeEEPROM(0x7D, 0);
  9852  002DD4  6A0F               	clrf	?_writeEEPROM+1,c
  9853  002DD6  0E7D               	movlw	125
  9854  002DD8  6E0E               	movwf	?_writeEEPROM,c
  9855  002DDA  0E00               	movlw	0
  9856  002DDC  6A10               	clrf	?_writeEEPROM+2,c
  9857  002DDE  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9858                           
  9859                           ;main.c: 1119: writeEEPROM(0x7E, 0);
  9860  002DE2  6A0F               	clrf	?_writeEEPROM+1,c
  9861  002DE4  0E7E               	movlw	126
  9862  002DE6  6E0E               	movwf	?_writeEEPROM,c
  9863  002DE8  0E00               	movlw	0
  9864  002DEA  6A10               	clrf	?_writeEEPROM+2,c
  9865  002DEC  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9866                           
  9867                           ;main.c: 1123: writeEEPROM(0x7F, 0x7f);
  9868  002DF0  6A0F               	clrf	?_writeEEPROM+1,c
  9869  002DF2  0E7F               	movlw	127
  9870  002DF4  6E0E               	movwf	?_writeEEPROM,c
  9871  002DF6  6E10               	movwf	?_writeEEPROM+2,c
  9872  002DF8  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9873                           
  9874                           ;main.c: 1124: writeEEPROM(0x80, 0xff);
  9875  002DFC  6A0F               	clrf	?_writeEEPROM+1,c
  9876  002DFE  0E80               	movlw	128
  9877  002E00  6E0E               	movwf	?_writeEEPROM,c
  9878  002E02  0EFF               	movlw	255
  9879  002E04  6810               	setf	?_writeEEPROM+2,c
  9880  002E06  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9881                           
  9882                           ;main.c: 1126: writeEEPROM(0x81, 0x7f);
  9883  002E0A  6A0F               	clrf	?_writeEEPROM+1,c
  9884  002E0C  0E81               	movlw	129
  9885  002E0E  6E0E               	movwf	?_writeEEPROM,c
  9886  002E10  0E7F               	movlw	127
  9887  002E12  6E10               	movwf	?_writeEEPROM+2,c
  9888  002E14  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9889                           
  9890                           ;main.c: 1127: writeEEPROM(0x82, 0xff);
  9891  002E18  6A0F               	clrf	?_writeEEPROM+1,c
  9892  002E1A  0E82               	movlw	130
  9893  002E1C  6E0E               	movwf	?_writeEEPROM,c
  9894  002E1E  0EFF               	movlw	255
  9895  002E20  6810               	setf	?_writeEEPROM+2,c
  9896  002E22  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9897                           
  9898                           ;main.c: 1129: writeEEPROM(0x83, 0x7f);
  9899  002E26  6A0F               	clrf	?_writeEEPROM+1,c
  9900  002E28  0E83               	movlw	131
  9901  002E2A  6E0E               	movwf	?_writeEEPROM,c
  9902  002E2C  0E7F               	movlw	127
  9903  002E2E  6E10               	movwf	?_writeEEPROM+2,c
  9904  002E30  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9905                           
  9906                           ;main.c: 1130: writeEEPROM(0x84, 0xff);
  9907  002E34  6A0F               	clrf	?_writeEEPROM+1,c
  9908  002E36  0E84               	movlw	132
  9909  002E38  6E0E               	movwf	?_writeEEPROM,c
  9910  002E3A  0EFF               	movlw	255
  9911  002E3C  6810               	setf	?_writeEEPROM+2,c
  9912  002E3E  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9913                           
  9914                           ;main.c: 1132: writeEEPROM(0x85, 0x7f);
  9915  002E42  6A0F               	clrf	?_writeEEPROM+1,c
  9916  002E44  0E85               	movlw	133
  9917  002E46  6E0E               	movwf	?_writeEEPROM,c
  9918  002E48  0E7F               	movlw	127
  9919  002E4A  6E10               	movwf	?_writeEEPROM+2,c
  9920  002E4C  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9921                           
  9922                           ;main.c: 1133: writeEEPROM(0x86, 0xff);
  9923  002E50  6A0F               	clrf	?_writeEEPROM+1,c
  9924  002E52  0E86               	movlw	134
  9925  002E54  6E0E               	movwf	?_writeEEPROM,c
  9926  002E56  0EFF               	movlw	255
  9927  002E58  6810               	setf	?_writeEEPROM+2,c
  9928  002E5A  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9929                           
  9930                           ;main.c: 1135: writeEEPROM(0x87, 0x7f);
  9931  002E5E  6A0F               	clrf	?_writeEEPROM+1,c
  9932  002E60  0E87               	movlw	135
  9933  002E62  6E0E               	movwf	?_writeEEPROM,c
  9934  002E64  0E7F               	movlw	127
  9935  002E66  6E10               	movwf	?_writeEEPROM+2,c
  9936  002E68  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9937                           
  9938                           ;main.c: 1136: writeEEPROM(0x88, 0xff);
  9939  002E6C  6A0F               	clrf	?_writeEEPROM+1,c
  9940  002E6E  0E88               	movlw	136
  9941  002E70  6E0E               	movwf	?_writeEEPROM,c
  9942  002E72  0EFF               	movlw	255
  9943  002E74  6810               	setf	?_writeEEPROM+2,c
  9944  002E76  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9945                           
  9946                           ;main.c: 1138: writeEEPROM(0x89, 0x7f);
  9947  002E7A  6A0F               	clrf	?_writeEEPROM+1,c
  9948  002E7C  0E89               	movlw	137
  9949  002E7E  6E0E               	movwf	?_writeEEPROM,c
  9950  002E80  0E7F               	movlw	127
  9951  002E82  6E10               	movwf	?_writeEEPROM+2,c
  9952  002E84  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9953                           
  9954                           ;main.c: 1139: writeEEPROM(0x8A, 0xff);
  9955  002E88  6A0F               	clrf	?_writeEEPROM+1,c
  9956  002E8A  0E8A               	movlw	138
  9957  002E8C  6E0E               	movwf	?_writeEEPROM,c
  9958  002E8E  0EFF               	movlw	255
  9959  002E90  6810               	setf	?_writeEEPROM+2,c
  9960  002E92  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9961                           
  9962                           ;main.c: 1143: writeEEPROM(0x8B, 0x80);
  9963  002E96  6A0F               	clrf	?_writeEEPROM+1,c
  9964  002E98  0E8B               	movlw	139
  9965  002E9A  6E0E               	movwf	?_writeEEPROM,c
  9966  002E9C  0E80               	movlw	128
  9967  002E9E  6E10               	movwf	?_writeEEPROM+2,c
  9968  002EA0  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9969                           
  9970                           ;main.c: 1144: writeEEPROM(0x8C, 0x00);
  9971  002EA4  6A0F               	clrf	?_writeEEPROM+1,c
  9972  002EA6  0E8C               	movlw	140
  9973  002EA8  6E0E               	movwf	?_writeEEPROM,c
  9974  002EAA  0E00               	movlw	0
  9975  002EAC  6A10               	clrf	?_writeEEPROM+2,c
  9976  002EAE  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9977                           
  9978                           ;main.c: 1146: writeEEPROM(0x8D, 0x80);
  9979  002EB2  6A0F               	clrf	?_writeEEPROM+1,c
  9980  002EB4  0E8D               	movlw	141
  9981  002EB6  6E0E               	movwf	?_writeEEPROM,c
  9982  002EB8  0E80               	movlw	128
  9983  002EBA  6E10               	movwf	?_writeEEPROM+2,c
  9984  002EBC  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9985                           
  9986                           ;main.c: 1147: writeEEPROM(0x8E, 0x00);
  9987  002EC0  6A0F               	clrf	?_writeEEPROM+1,c
  9988  002EC2  0E8E               	movlw	142
  9989  002EC4  6E0E               	movwf	?_writeEEPROM,c
  9990  002EC6  0E00               	movlw	0
  9991  002EC8  6A10               	clrf	?_writeEEPROM+2,c
  9992  002ECA  EC9F  F02D         	call	_writeEEPROM	;wreg free
  9993                           
  9994                           ;main.c: 1149: writeEEPROM(0x8F, 0x80);
  9995  002ECE  6A0F               	clrf	?_writeEEPROM+1,c
  9996  002ED0  0E8F               	movlw	143
  9997  002ED2  6E0E               	movwf	?_writeEEPROM,c
  9998  002ED4  0E80               	movlw	128
  9999  002ED6  6E10               	movwf	?_writeEEPROM+2,c
 10000  002ED8  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10001                           
 10002                           ;main.c: 1150: writeEEPROM(0x90, 0x00);
 10003  002EDC  6A0F               	clrf	?_writeEEPROM+1,c
 10004  002EDE  0E90               	movlw	144
 10005  002EE0  6E0E               	movwf	?_writeEEPROM,c
 10006  002EE2  0E00               	movlw	0
 10007  002EE4  6A10               	clrf	?_writeEEPROM+2,c
 10008  002EE6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10009                           
 10010                           ;main.c: 1152: writeEEPROM(0x91, 0x80);
 10011  002EEA  6A0F               	clrf	?_writeEEPROM+1,c
 10012  002EEC  0E91               	movlw	145
 10013  002EEE  6E0E               	movwf	?_writeEEPROM,c
 10014  002EF0  0E80               	movlw	128
 10015  002EF2  6E10               	movwf	?_writeEEPROM+2,c
 10016  002EF4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10017                           
 10018                           ;main.c: 1153: writeEEPROM(0x92, 0x00);
 10019  002EF8  6A0F               	clrf	?_writeEEPROM+1,c
 10020  002EFA  0E92               	movlw	146
 10021  002EFC  6E0E               	movwf	?_writeEEPROM,c
 10022  002EFE  0E00               	movlw	0
 10023  002F00  6A10               	clrf	?_writeEEPROM+2,c
 10024  002F02  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10025                           
 10026                           ;main.c: 1155: writeEEPROM(0x93, 0x80);
 10027  002F06  6A0F               	clrf	?_writeEEPROM+1,c
 10028  002F08  0E93               	movlw	147
 10029  002F0A  6E0E               	movwf	?_writeEEPROM,c
 10030  002F0C  0E80               	movlw	128
 10031  002F0E  6E10               	movwf	?_writeEEPROM+2,c
 10032  002F10  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10033                           
 10034                           ;main.c: 1156: writeEEPROM(0x94, 0x00);
 10035  002F14  6A0F               	clrf	?_writeEEPROM+1,c
 10036  002F16  0E94               	movlw	148
 10037  002F18  6E0E               	movwf	?_writeEEPROM,c
 10038  002F1A  0E00               	movlw	0
 10039  002F1C  6A10               	clrf	?_writeEEPROM+2,c
 10040  002F1E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10041                           
 10042                           ;main.c: 1158: writeEEPROM(0x95, 0x80);
 10043  002F22  6A0F               	clrf	?_writeEEPROM+1,c
 10044  002F24  0E95               	movlw	149
 10045  002F26  6E0E               	movwf	?_writeEEPROM,c
 10046  002F28  0E80               	movlw	128
 10047  002F2A  6E10               	movwf	?_writeEEPROM+2,c
 10048  002F2C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10049                           
 10050                           ;main.c: 1159: writeEEPROM(0x96, 0x00);
 10051  002F30  6A0F               	clrf	?_writeEEPROM+1,c
 10052  002F32  0E96               	movlw	150
 10053  002F34  6E0E               	movwf	?_writeEEPROM,c
 10054  002F36  0E00               	movlw	0
 10055  002F38  6A10               	clrf	?_writeEEPROM+2,c
 10056  002F3A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10057                           
 10058                           ;main.c: 1163: writeEEPROM(0x97, 2);
 10059  002F3E  6A0F               	clrf	?_writeEEPROM+1,c
 10060  002F40  0E97               	movlw	151
 10061  002F42  6E0E               	movwf	?_writeEEPROM,c
 10062  002F44  0E02               	movlw	2
 10063  002F46  6E10               	movwf	?_writeEEPROM+2,c
 10064  002F48  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10065                           
 10066                           ;main.c: 1164: writeEEPROM(0x98, 2);
 10067  002F4C  6A0F               	clrf	?_writeEEPROM+1,c
 10068  002F4E  0E98               	movlw	152
 10069  002F50  6E0E               	movwf	?_writeEEPROM,c
 10070  002F52  0E02               	movlw	2
 10071  002F54  6E10               	movwf	?_writeEEPROM+2,c
 10072  002F56  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10073                           
 10074                           ;main.c: 1165: writeEEPROM(0x99, 2);
 10075  002F5A  6A0F               	clrf	?_writeEEPROM+1,c
 10076  002F5C  0E99               	movlw	153
 10077  002F5E  6E0E               	movwf	?_writeEEPROM,c
 10078  002F60  0E02               	movlw	2
 10079  002F62  6E10               	movwf	?_writeEEPROM+2,c
 10080  002F64  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10081                           
 10082                           ;main.c: 1166: writeEEPROM(0x9A, 2);
 10083  002F68  6A0F               	clrf	?_writeEEPROM+1,c
 10084  002F6A  0E9A               	movlw	154
 10085  002F6C  6E0E               	movwf	?_writeEEPROM,c
 10086  002F6E  0E02               	movlw	2
 10087  002F70  6E10               	movwf	?_writeEEPROM+2,c
 10088  002F72  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10089                           
 10090                           ;main.c: 1167: writeEEPROM(0x9B, 2);
 10091  002F76  6A0F               	clrf	?_writeEEPROM+1,c
 10092  002F78  0E9B               	movlw	155
 10093  002F7A  6E0E               	movwf	?_writeEEPROM,c
 10094  002F7C  0E02               	movlw	2
 10095  002F7E  6E10               	movwf	?_writeEEPROM+2,c
 10096  002F80  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10097                           
 10098                           ;main.c: 1168: writeEEPROM(0x9C, 2);
 10099  002F84  6A0F               	clrf	?_writeEEPROM+1,c
 10100  002F86  0E9C               	movlw	156
 10101  002F88  6E0E               	movwf	?_writeEEPROM,c
 10102  002F8A  0E02               	movlw	2
 10103  002F8C  6E10               	movwf	?_writeEEPROM+2,c
 10104  002F8E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10105                           
 10106                           ;main.c: 1172: writeEEPROM(0xF2, 0xc3);
 10107  002F92  6A0F               	clrf	?_writeEEPROM+1,c
 10108  002F94  0EF2               	movlw	242
 10109  002F96  6E0E               	movwf	?_writeEEPROM,c
 10110  002F98  0EC3               	movlw	195
 10111  002F9A  6E10               	movwf	?_writeEEPROM+2,c
 10112  002F9C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10113                           
 10114                           ;main.c: 1173: writeEEPROM(0xF3, 0x50);
 10115  002FA0  6A0F               	clrf	?_writeEEPROM+1,c
 10116  002FA2  0EF3               	movlw	243
 10117  002FA4  6E0E               	movwf	?_writeEEPROM,c
 10118  002FA6  0E50               	movlw	80
 10119  002FA8  6E10               	movwf	?_writeEEPROM+2,c
 10120  002FAA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10121                           
 10122                           ;main.c: 1177: writeEEPROM(0x9E, 0);
 10123  002FAE  6A0F               	clrf	?_writeEEPROM+1,c
 10124  002FB0  0E9E               	movlw	158
 10125  002FB2  6E0E               	movwf	?_writeEEPROM,c
 10126  002FB4  0E00               	movlw	0
 10127  002FB6  6A10               	clrf	?_writeEEPROM+2,c
 10128  002FB8  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10129                           
 10130                           ;main.c: 1178: writeEEPROM(0x9F, 0);
 10131  002FBC  6A0F               	clrf	?_writeEEPROM+1,c
 10132  002FBE  0E9F               	movlw	159
 10133  002FC0  6E0E               	movwf	?_writeEEPROM,c
 10134  002FC2  0E00               	movlw	0
 10135  002FC4  6A10               	clrf	?_writeEEPROM+2,c
 10136  002FC6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10137                           
 10138                           ;main.c: 1179: writeEEPROM(0xA0, 0);
 10139  002FCA  6A0F               	clrf	?_writeEEPROM+1,c
 10140  002FCC  0EA0               	movlw	160
 10141  002FCE  6E0E               	movwf	?_writeEEPROM,c
 10142  002FD0  0E00               	movlw	0
 10143  002FD2  6A10               	clrf	?_writeEEPROM+2,c
 10144  002FD4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10145                           
 10146                           ;main.c: 1180: writeEEPROM(0xA1, 0);
 10147  002FD8  6A0F               	clrf	?_writeEEPROM+1,c
 10148  002FDA  0EA1               	movlw	161
 10149  002FDC  6E0E               	movwf	?_writeEEPROM,c
 10150  002FDE  0E00               	movlw	0
 10151  002FE0  6A10               	clrf	?_writeEEPROM+2,c
 10152  002FE2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10153                           
 10154                           ;main.c: 1181: writeEEPROM(0xA2, 0);
 10155  002FE6  6A0F               	clrf	?_writeEEPROM+1,c
 10156  002FE8  0EA2               	movlw	162
 10157  002FEA  6E0E               	movwf	?_writeEEPROM,c
 10158  002FEC  0E00               	movlw	0
 10159  002FEE  6A10               	clrf	?_writeEEPROM+2,c
 10160  002FF0  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10161                           
 10162                           ;main.c: 1182: writeEEPROM(0xA3, 0);
 10163  002FF4  6A0F               	clrf	?_writeEEPROM+1,c
 10164  002FF6  0EA3               	movlw	163
 10165  002FF8  6E0E               	movwf	?_writeEEPROM,c
 10166  002FFA  0E00               	movlw	0
 10167  002FFC  6A10               	clrf	?_writeEEPROM+2,c
 10168  002FFE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10169                           
 10170                           ;main.c: 1183: writeEEPROM(0xA4, 0);
 10171  003002  6A0F               	clrf	?_writeEEPROM+1,c
 10172  003004  0EA4               	movlw	164
 10173  003006  6E0E               	movwf	?_writeEEPROM,c
 10174  003008  0E00               	movlw	0
 10175  00300A  6A10               	clrf	?_writeEEPROM+2,c
 10176  00300C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10177                           
 10178                           ;main.c: 1184: writeEEPROM(0xA5, 0);
 10179  003010  6A0F               	clrf	?_writeEEPROM+1,c
 10180  003012  0EA5               	movlw	165
 10181  003014  6E0E               	movwf	?_writeEEPROM,c
 10182  003016  0E00               	movlw	0
 10183  003018  6A10               	clrf	?_writeEEPROM+2,c
 10184  00301A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10185                           
 10186                           ;main.c: 1185: writeEEPROM(0xA6, 0);
 10187  00301E  6A0F               	clrf	?_writeEEPROM+1,c
 10188  003020  0EA6               	movlw	166
 10189  003022  6E0E               	movwf	?_writeEEPROM,c
 10190  003024  0E00               	movlw	0
 10191  003026  6A10               	clrf	?_writeEEPROM+2,c
 10192  003028  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10193                           
 10194                           ;main.c: 1186: writeEEPROM(0xA7, 0);
 10195  00302C  6A0F               	clrf	?_writeEEPROM+1,c
 10196  00302E  0EA7               	movlw	167
 10197  003030  6E0E               	movwf	?_writeEEPROM,c
 10198  003032  0E00               	movlw	0
 10199  003034  6A10               	clrf	?_writeEEPROM+2,c
 10200  003036  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10201                           
 10202                           ;main.c: 1187: writeEEPROM(0xA8, 0);
 10203  00303A  6A0F               	clrf	?_writeEEPROM+1,c
 10204  00303C  0EA8               	movlw	168
 10205  00303E  6E0E               	movwf	?_writeEEPROM,c
 10206  003040  0E00               	movlw	0
 10207  003042  6A10               	clrf	?_writeEEPROM+2,c
 10208  003044  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10209                           
 10210                           ;main.c: 1188: writeEEPROM(0xA9, 0);
 10211  003048  6A0F               	clrf	?_writeEEPROM+1,c
 10212  00304A  0EA9               	movlw	169
 10213  00304C  6E0E               	movwf	?_writeEEPROM,c
 10214  00304E  0E00               	movlw	0
 10215  003050  6A10               	clrf	?_writeEEPROM+2,c
 10216  003052  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10217                           
 10218                           ;main.c: 1192: writeEEPROM(0xAA, 0);
 10219  003056  6A0F               	clrf	?_writeEEPROM+1,c
 10220  003058  0EAA               	movlw	170
 10221  00305A  6E0E               	movwf	?_writeEEPROM,c
 10222  00305C  0E00               	movlw	0
 10223  00305E  6A10               	clrf	?_writeEEPROM+2,c
 10224  003060  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10225                           
 10226                           ;main.c: 1193: writeEEPROM(0xAB, 0);
 10227  003064  6A0F               	clrf	?_writeEEPROM+1,c
 10228  003066  0EAB               	movlw	171
 10229  003068  6E0E               	movwf	?_writeEEPROM,c
 10230  00306A  0E00               	movlw	0
 10231  00306C  6A10               	clrf	?_writeEEPROM+2,c
 10232  00306E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10233                           
 10234                           ;main.c: 1194: writeEEPROM(0xAC, 0);
 10235  003072  6A0F               	clrf	?_writeEEPROM+1,c
 10236  003074  0EAC               	movlw	172
 10237  003076  6E0E               	movwf	?_writeEEPROM,c
 10238  003078  0E00               	movlw	0
 10239  00307A  6A10               	clrf	?_writeEEPROM+2,c
 10240  00307C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10241                           
 10242                           ;main.c: 1195: writeEEPROM(0xAD, 0);
 10243  003080  6A0F               	clrf	?_writeEEPROM+1,c
 10244  003082  0EAD               	movlw	173
 10245  003084  6E0E               	movwf	?_writeEEPROM,c
 10246  003086  0E00               	movlw	0
 10247  003088  6A10               	clrf	?_writeEEPROM+2,c
 10248  00308A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10249                           
 10250                           ;main.c: 1196: writeEEPROM(0xAE, 0);
 10251  00308E  6A0F               	clrf	?_writeEEPROM+1,c
 10252  003090  0EAE               	movlw	174
 10253  003092  6E0E               	movwf	?_writeEEPROM,c
 10254  003094  0E00               	movlw	0
 10255  003096  6A10               	clrf	?_writeEEPROM+2,c
 10256  003098  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10257                           
 10258                           ;main.c: 1197: writeEEPROM(0xAF, 0);
 10259  00309C  6A0F               	clrf	?_writeEEPROM+1,c
 10260  00309E  0EAF               	movlw	175
 10261  0030A0  6E0E               	movwf	?_writeEEPROM,c
 10262  0030A2  0E00               	movlw	0
 10263  0030A4  6A10               	clrf	?_writeEEPROM+2,c
 10264  0030A6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10265                           
 10266                           ;main.c: 1198: writeEEPROM(0xB0, 0);
 10267  0030AA  6A0F               	clrf	?_writeEEPROM+1,c
 10268  0030AC  0EB0               	movlw	176
 10269  0030AE  6E0E               	movwf	?_writeEEPROM,c
 10270  0030B0  0E00               	movlw	0
 10271  0030B2  6A10               	clrf	?_writeEEPROM+2,c
 10272  0030B4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10273                           
 10274                           ;main.c: 1199: writeEEPROM(0xB1, 0);
 10275  0030B8  6A0F               	clrf	?_writeEEPROM+1,c
 10276  0030BA  0EB1               	movlw	177
 10277  0030BC  6E0E               	movwf	?_writeEEPROM,c
 10278  0030BE  0E00               	movlw	0
 10279  0030C0  6A10               	clrf	?_writeEEPROM+2,c
 10280  0030C2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10281                           
 10282                           ;main.c: 1200: writeEEPROM(0xB2, 0);
 10283  0030C6  6A0F               	clrf	?_writeEEPROM+1,c
 10284  0030C8  0EB2               	movlw	178
 10285  0030CA  6E0E               	movwf	?_writeEEPROM,c
 10286  0030CC  0E00               	movlw	0
 10287  0030CE  6A10               	clrf	?_writeEEPROM+2,c
 10288  0030D0  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10289                           
 10290                           ;main.c: 1201: writeEEPROM(0xB3, 0);
 10291  0030D4  6A0F               	clrf	?_writeEEPROM+1,c
 10292  0030D6  0EB3               	movlw	179
 10293  0030D8  6E0E               	movwf	?_writeEEPROM,c
 10294  0030DA  0E00               	movlw	0
 10295  0030DC  6A10               	clrf	?_writeEEPROM+2,c
 10296  0030DE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10297                           
 10298                           ;main.c: 1202: writeEEPROM(0xB4, 0);
 10299  0030E2  6A0F               	clrf	?_writeEEPROM+1,c
 10300  0030E4  0EB4               	movlw	180
 10301  0030E6  6E0E               	movwf	?_writeEEPROM,c
 10302  0030E8  0E00               	movlw	0
 10303  0030EA  6A10               	clrf	?_writeEEPROM+2,c
 10304  0030EC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10305                           
 10306                           ;main.c: 1203: writeEEPROM(0xB5, 0);
 10307  0030F0  6A0F               	clrf	?_writeEEPROM+1,c
 10308  0030F2  0EB5               	movlw	181
 10309  0030F4  6E0E               	movwf	?_writeEEPROM,c
 10310  0030F6  0E00               	movlw	0
 10311  0030F8  6A10               	clrf	?_writeEEPROM+2,c
 10312  0030FA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10313                           
 10314                           ;main.c: 1207: for (uint8_t i = 0; i < 6; i++) {
 10315  0030FE  6A11               	clrf	init_app_eeprom@i,c
 10316  003100                     l9586:
 10317                           
 10318                           ;main.c: 1208: writeEEPROM(0xB6 + i * 12, 0);
 10319  003100  5011               	movf	init_app_eeprom@i,w,c
 10320  003102  0D0C               	mullw	12
 10321  003104  0EB6               	movlw	182
 10322  003106  24F3               	addwf	prodl,w,c
 10323  003108  6E0E               	movwf	?_writeEEPROM,c
 10324  00310A  0E00               	movlw	0
 10325  00310C  20F4               	addwfc	prodh,w,c
 10326  00310E  6E0F               	movwf	?_writeEEPROM+1,c
 10327  003110  0E00               	movlw	0
 10328  003112  6A10               	clrf	?_writeEEPROM+2,c
 10329  003114  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10330                           
 10331                           ;main.c: 1209: writeEEPROM(0xB7 + i * 12, 0);
 10332  003118  5011               	movf	init_app_eeprom@i,w,c
 10333  00311A  0D0C               	mullw	12
 10334  00311C  0EB7               	movlw	183
 10335  00311E  24F3               	addwf	prodl,w,c
 10336  003120  6E0E               	movwf	?_writeEEPROM,c
 10337  003122  0E00               	movlw	0
 10338  003124  20F4               	addwfc	prodh,w,c
 10339  003126  6E0F               	movwf	?_writeEEPROM+1,c
 10340  003128  0E00               	movlw	0
 10341  00312A  6A10               	clrf	?_writeEEPROM+2,c
 10342  00312C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10343                           
 10344                           ;main.c: 1210: writeEEPROM(0xB8 + i * 12, 0);
 10345  003130  5011               	movf	init_app_eeprom@i,w,c
 10346  003132  0D0C               	mullw	12
 10347  003134  0EB8               	movlw	184
 10348  003136  24F3               	addwf	prodl,w,c
 10349  003138  6E0E               	movwf	?_writeEEPROM,c
 10350  00313A  0E00               	movlw	0
 10351  00313C  20F4               	addwfc	prodh,w,c
 10352  00313E  6E0F               	movwf	?_writeEEPROM+1,c
 10353  003140  0E00               	movlw	0
 10354  003142  6A10               	clrf	?_writeEEPROM+2,c
 10355  003144  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10356                           
 10357                           ;main.c: 1211: writeEEPROM(0xB9 + i * 12, 0);
 10358  003148  5011               	movf	init_app_eeprom@i,w,c
 10359  00314A  0D0C               	mullw	12
 10360  00314C  0EB9               	movlw	185
 10361  00314E  24F3               	addwf	prodl,w,c
 10362  003150  6E0E               	movwf	?_writeEEPROM,c
 10363  003152  0E00               	movlw	0
 10364  003154  20F4               	addwfc	prodh,w,c
 10365  003156  6E0F               	movwf	?_writeEEPROM+1,c
 10366  003158  0E00               	movlw	0
 10367  00315A  6A10               	clrf	?_writeEEPROM+2,c
 10368  00315C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10369                           
 10370                           ;main.c: 1212: writeEEPROM(0xBA + i * 12, 0);
 10371  003160  5011               	movf	init_app_eeprom@i,w,c
 10372  003162  0D0C               	mullw	12
 10373  003164  0EBA               	movlw	186
 10374  003166  24F3               	addwf	prodl,w,c
 10375  003168  6E0E               	movwf	?_writeEEPROM,c
 10376  00316A  0E00               	movlw	0
 10377  00316C  20F4               	addwfc	prodh,w,c
 10378  00316E  6E0F               	movwf	?_writeEEPROM+1,c
 10379  003170  0E00               	movlw	0
 10380  003172  6A10               	clrf	?_writeEEPROM+2,c
 10381  003174  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10382                           
 10383                           ;main.c: 1213: writeEEPROM(0xBB + i * 12, 0);
 10384  003178  5011               	movf	init_app_eeprom@i,w,c
 10385  00317A  0D0C               	mullw	12
 10386  00317C  0EBB               	movlw	187
 10387  00317E  24F3               	addwf	prodl,w,c
 10388  003180  6E0E               	movwf	?_writeEEPROM,c
 10389  003182  0E00               	movlw	0
 10390  003184  20F4               	addwfc	prodh,w,c
 10391  003186  6E0F               	movwf	?_writeEEPROM+1,c
 10392  003188  0E00               	movlw	0
 10393  00318A  6A10               	clrf	?_writeEEPROM+2,c
 10394  00318C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10395                           
 10396                           ;main.c: 1214: writeEEPROM(0xBC + i * 12, 0);
 10397  003190  5011               	movf	init_app_eeprom@i,w,c
 10398  003192  0D0C               	mullw	12
 10399  003194  0EBC               	movlw	188
 10400  003196  24F3               	addwf	prodl,w,c
 10401  003198  6E0E               	movwf	?_writeEEPROM,c
 10402  00319A  0E00               	movlw	0
 10403  00319C  20F4               	addwfc	prodh,w,c
 10404  00319E  6E0F               	movwf	?_writeEEPROM+1,c
 10405  0031A0  0E00               	movlw	0
 10406  0031A2  6A10               	clrf	?_writeEEPROM+2,c
 10407  0031A4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10408                           
 10409                           ;main.c: 1215: writeEEPROM(0xBD + i * 12, 0);
 10410  0031A8  5011               	movf	init_app_eeprom@i,w,c
 10411  0031AA  0D0C               	mullw	12
 10412  0031AC  0EBD               	movlw	189
 10413  0031AE  24F3               	addwf	prodl,w,c
 10414  0031B0  6E0E               	movwf	?_writeEEPROM,c
 10415  0031B2  0E00               	movlw	0
 10416  0031B4  20F4               	addwfc	prodh,w,c
 10417  0031B6  6E0F               	movwf	?_writeEEPROM+1,c
 10418  0031B8  0E00               	movlw	0
 10419  0031BA  6A10               	clrf	?_writeEEPROM+2,c
 10420  0031BC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10421                           
 10422                           ;main.c: 1216: writeEEPROM(0xBE + i * 12, 0);
 10423  0031C0  5011               	movf	init_app_eeprom@i,w,c
 10424  0031C2  0D0C               	mullw	12
 10425  0031C4  0EBE               	movlw	190
 10426  0031C6  24F3               	addwf	prodl,w,c
 10427  0031C8  6E0E               	movwf	?_writeEEPROM,c
 10428  0031CA  0E00               	movlw	0
 10429  0031CC  20F4               	addwfc	prodh,w,c
 10430  0031CE  6E0F               	movwf	?_writeEEPROM+1,c
 10431  0031D0  0E00               	movlw	0
 10432  0031D2  6A10               	clrf	?_writeEEPROM+2,c
 10433  0031D4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10434                           
 10435                           ;main.c: 1217: writeEEPROM(0xBF + i * 12, 0);
 10436  0031D8  5011               	movf	init_app_eeprom@i,w,c
 10437  0031DA  0D0C               	mullw	12
 10438  0031DC  0EBF               	movlw	191
 10439  0031DE  24F3               	addwf	prodl,w,c
 10440  0031E0  6E0E               	movwf	?_writeEEPROM,c
 10441  0031E2  0E00               	movlw	0
 10442  0031E4  20F4               	addwfc	prodh,w,c
 10443  0031E6  6E0F               	movwf	?_writeEEPROM+1,c
 10444  0031E8  0E00               	movlw	0
 10445  0031EA  6A10               	clrf	?_writeEEPROM+2,c
 10446  0031EC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10447                           
 10448                           ;main.c: 1218: writeEEPROM(0xC0 + i * 12, 0);
 10449  0031F0  5011               	movf	init_app_eeprom@i,w,c
 10450  0031F2  0D0C               	mullw	12
 10451  0031F4  0EC0               	movlw	192
 10452  0031F6  24F3               	addwf	prodl,w,c
 10453  0031F8  6E0E               	movwf	?_writeEEPROM,c
 10454  0031FA  0E00               	movlw	0
 10455  0031FC  20F4               	addwfc	prodh,w,c
 10456  0031FE  6E0F               	movwf	?_writeEEPROM+1,c
 10457  003200  0E00               	movlw	0
 10458  003202  6A10               	clrf	?_writeEEPROM+2,c
 10459  003204  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10460                           
 10461                           ;main.c: 1219: writeEEPROM(0xC1 + i * 12, 0);
 10462  003208  5011               	movf	init_app_eeprom@i,w,c
 10463  00320A  0D0C               	mullw	12
 10464  00320C  0EC1               	movlw	193
 10465  00320E  24F3               	addwf	prodl,w,c
 10466  003210  6E0E               	movwf	?_writeEEPROM,c
 10467  003212  0E00               	movlw	0
 10468  003214  20F4               	addwfc	prodh,w,c
 10469  003216  6E0F               	movwf	?_writeEEPROM+1,c
 10470  003218  0E00               	movlw	0
 10471  00321A  6A10               	clrf	?_writeEEPROM+2,c
 10472  00321C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10473  003220  2A11               	incf	init_app_eeprom@i,f,c
 10474  003222  0E05               	movlw	5
 10475  003224  6411               	cpfsgt	init_app_eeprom@i,c
 10476  003226  D76C               	goto	l9586
 10477  003228  0C05               	retlw	5
 10478  00322A                     __end_of_init_app_eeprom:
 10479                           	opt stack 0
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           postinc0	equ	0xFEE
 10487                           wreg	equ	0xFE8
 10488                           postdec1	equ	0xFE5
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           fsr2h	equ	0xFDA
 10495                           fsr2l	equ	0xFD9
 10496                           status	equ	0xFD8
 10497                           
 10498 ;; *************** function _vscp_setManufacturerId *****************
 10499 ;; Defined at:
 10500 ;;		line 2652 in file "../main.c"
 10501 ;; Parameters:    Size  Location     Type
 10502 ;;  idx             1    wreg     unsigned char 
 10503 ;;  data            1   16[COMRAM] unsigned char 
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  idx             1   17[COMRAM] unsigned char 
 10506 ;; Return value:  Size  Location     Type
 10507 ;;		None               void
 10508 ;; Registers used:
 10509 ;;		wreg, status,2, status,0, cstack
 10510 ;; Tracked objects:
 10511 ;;		On entry : F/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10515 ;;      Params:         1       0       0       0       0       0       0
 10516 ;;      Locals:         1       0       0       0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0
 10518 ;;      Totals:         2       0       0       0       0       0       0
 10519 ;;Total ram usage:        2 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    3
 10522 ;; This function calls:
 10523 ;;		_writeEEPROM
 10524 ;; This function is called by:
 10525 ;;		_vscp_writeStdReg
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           	psect	text39
 10530  005C84                     __ptext39:
 10531                           	opt stack 0
 10532  005C84                     _vscp_setManufacturerId:
 10533                           	opt stack 25
 10534                           
 10535                           ;incstack = 0
 10536                           ;incstack = 0
 10537                           ;vscp_setManufacturerId@idx stored from wreg
 10538  005C84  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;main.c: 2653: writeEEPROM(0x09 + idx, data);
 10542  005C88  0E09               	movlw	9
 10543  005C8A  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10544  005C8C  6E0E               	movwf	?_writeEEPROM,c
 10545  005C8E  6A0F               	clrf	?_writeEEPROM+1,c
 10546  005C90  0E00               	movlw	0
 10547  005C92  220F               	addwfc	?_writeEEPROM+1,f,c
 10548  005C94  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10549  005C98  EF9F  F02D         	goto	_writeEEPROM	;wreg free
 10550  005C9C                     __end_of_vscp_setManufacturerId:
 10551                           	opt stack 0
 10552                           tblptru	equ	0xFF8
 10553                           tblptrh	equ	0xFF7
 10554                           tblptrl	equ	0xFF6
 10555                           tablat	equ	0xFF5
 10556                           prodh	equ	0xFF4
 10557                           prodl	equ	0xFF3
 10558                           postinc0	equ	0xFEE
 10559                           wreg	equ	0xFE8
 10560                           postdec1	equ	0xFE5
 10561                           fsr1h	equ	0xFE2
 10562                           fsr1l	equ	0xFE1
 10563                           indf2	equ	0xFDF
 10564                           postinc2	equ	0xFDE
 10565                           postdec2	equ	0xFDD
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570 ;; *************** function _vscp_setUserID *****************
 10571 ;; Defined at:
 10572 ;;		line 2630 in file "../main.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  idx             1    wreg     unsigned char 
 10575 ;;  data            1   16[COMRAM] unsigned char 
 10576 ;; Auto vars:     Size  Location     Type
 10577 ;;  idx             1   17[COMRAM] unsigned char 
 10578 ;; Return value:  Size  Location     Type
 10579 ;;		None               void
 10580 ;; Registers used:
 10581 ;;		wreg, status,2, status,0, cstack
 10582 ;; Tracked objects:
 10583 ;;		On entry : F/0
 10584 ;;		On exit  : 0/0
 10585 ;;		Unchanged: 0/0
 10586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10587 ;;      Params:         1       0       0       0       0       0       0
 10588 ;;      Locals:         1       0       0       0       0       0       0
 10589 ;;      Temps:          0       0       0       0       0       0       0
 10590 ;;      Totals:         2       0       0       0       0       0       0
 10591 ;;Total ram usage:        2 bytes
 10592 ;; Hardware stack levels used:    1
 10593 ;; Hardware stack levels required when called:    3
 10594 ;; This function calls:
 10595 ;;		_writeEEPROM
 10596 ;; This function is called by:
 10597 ;;		_vscp_writeStdReg
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           	psect	text40
 10602  005C9C                     __ptext40:
 10603                           	opt stack 0
 10604  005C9C                     _vscp_setUserID:
 10605                           	opt stack 25
 10606                           
 10607                           ;incstack = 0
 10608                           ;incstack = 0
 10609                           ;vscp_setUserID@idx stored from wreg
 10610  005C9C  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;main.c: 2631: writeEEPROM(idx + 0x04, data);
 10614  005CA0  0E04               	movlw	4
 10615  005CA2  2412               	addwf	vscp_setUserID@idx,w,c
 10616  005CA4  6E0E               	movwf	?_writeEEPROM,c
 10617  005CA6  6A0F               	clrf	?_writeEEPROM+1,c
 10618  005CA8  0E00               	movlw	0
 10619  005CAA  220F               	addwfc	?_writeEEPROM+1,f,c
 10620  005CAC  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10621  005CB0  EF9F  F02D         	goto	_writeEEPROM	;wreg free
 10622  005CB4                     __end_of_vscp_setUserID:
 10623                           	opt stack 0
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           postinc0	equ	0xFEE
 10631                           wreg	equ	0xFE8
 10632                           postdec1	equ	0xFE5
 10633                           fsr1h	equ	0xFE2
 10634                           fsr1l	equ	0xFE1
 10635                           indf2	equ	0xFDF
 10636                           postinc2	equ	0xFDE
 10637                           postdec2	equ	0xFDD
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _vscp_setGUID *****************
 10643 ;; Defined at:
 10644 ;;		line 2599 in file "../main.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;  idx             1    wreg     unsigned char 
 10647 ;;  data            1   16[COMRAM] unsigned char 
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  idx             1   17[COMRAM] unsigned char 
 10650 ;; Return value:  Size  Location     Type
 10651 ;;		None               void
 10652 ;; Registers used:
 10653 ;;		wreg, status,2, status,0, cstack
 10654 ;; Tracked objects:
 10655 ;;		On entry : F/0
 10656 ;;		On exit  : 0/0
 10657 ;;		Unchanged: 0/0
 10658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10659 ;;      Params:         1       0       0       0       0       0       0
 10660 ;;      Locals:         1       0       0       0       0       0       0
 10661 ;;      Temps:          0       0       0       0       0       0       0
 10662 ;;      Totals:         2       0       0       0       0       0       0
 10663 ;;Total ram usage:        2 bytes
 10664 ;; Hardware stack levels used:    1
 10665 ;; Hardware stack levels required when called:    3
 10666 ;; This function calls:
 10667 ;;		_writeEEPROM
 10668 ;; This function is called by:
 10669 ;;		_vscp_writeStdReg
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           	psect	text41
 10674  005BF2                     __ptext41:
 10675                           	opt stack 0
 10676  005BF2                     _vscp_setGUID:
 10677                           	opt stack 25
 10678                           
 10679                           ;incstack = 0
 10680                           ;incstack = 0
 10681                           ;vscp_setGUID@idx stored from wreg
 10682  005BF2  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;main.c: 2600: if ( idx>15 ) return;
 10686  005BF6  0E0F               	movlw	15
 10687  005BF8  6412               	cpfsgt	vscp_setGUID@idx,c
 10688  005BFA  D001               	goto	l11032
 10689  005BFC  D00A               	goto	l552
 10690  005BFE                     l11032:
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;main.c: 2601: writeEEPROM( 0x11 + idx, data );
 10694  005BFE  0E11               	movlw	17
 10695  005C00  2412               	addwf	vscp_setGUID@idx,w,c
 10696  005C02  6E0E               	movwf	?_writeEEPROM,c
 10697  005C04  6A0F               	clrf	?_writeEEPROM+1,c
 10698  005C06  0E00               	movlw	0
 10699  005C08  220F               	addwfc	?_writeEEPROM+1,f,c
 10700  005C0A  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10701  005C0E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10702  005C12                     l552:
 10703  005C12  0012               	return	
 10704  005C14                     __end_of_vscp_setGUID:
 10705                           	opt stack 0
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           postinc0	equ	0xFEE
 10713                           wreg	equ	0xFE8
 10714                           postdec1	equ	0xFE5
 10715                           fsr1h	equ	0xFE2
 10716                           fsr1l	equ	0xFE1
 10717                           indf2	equ	0xFDF
 10718                           postinc2	equ	0xFDE
 10719                           postdec2	equ	0xFDD
 10720                           fsr2h	equ	0xFDA
 10721                           fsr2l	equ	0xFD9
 10722                           status	equ	0xFD8
 10723                           
 10724 ;; *************** function _vscp_writeAppReg *****************
 10725 ;; Defined at:
 10726 ;;		line 1892 in file "../main.c"
 10727 ;; Parameters:    Size  Location     Type
 10728 ;;  reg             1    wreg     unsigned char 
 10729 ;;  val             1   32[COMRAM] unsigned char 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  reg             1   34[COMRAM] unsigned char 
 10732 ;;  pos             1   33[COMRAM] unsigned char 
 10733 ;;  rv              1   35[COMRAM] unsigned char 
 10734 ;; Return value:  Size  Location     Type
 10735 ;;                  1    wreg      unsigned char 
 10736 ;; Registers used:
 10737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10738 ;; Tracked objects:
 10739 ;;		On entry : F/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10743 ;;      Params:         1       0       0       0       0       0       0
 10744 ;;      Locals:         3       0       0       0       0       0       0
 10745 ;;      Temps:          0       0       0       0       0       0       0
 10746 ;;      Totals:         4       0       0       0       0       0       0
 10747 ;;Total ram usage:        4 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:    4
 10750 ;; This function calls:
 10751 ;;		_writeEEPROM
 10752 ;;		_readEEPROM
 10753 ;;		_writeCoeffs2Ram
 10754 ;; This function is called by:
 10755 ;;		_vscp_writeRegister
 10756 ;;		_vscp_handleProtocolEvent
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           	psect	text42
 10761  000B6E                     __ptext42:
 10762                           	opt stack 0
 10763  000B6E                     _vscp_writeAppReg:
 10764                           	opt stack 24
 10765                           
 10766                           ;incstack = 0
 10767                           ;incstack = 0
 10768                           ;vscp_writeAppReg@reg stored from wreg
 10769  000B6E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;main.c: 1893: uint8_t rv;
 10773                           ;main.c: 1900: rv = ~val;
 10774  000B72  1C21               	comf	vscp_writeAppReg@val,w,c
 10775  000B74  6E24               	movwf	vscp_writeAppReg@rv,c
 10776                           
 10777                           ;main.c: 1902: if (0 == vscp_page_select) {
 10778  000B76  5047               	movf	_vscp_page_select+1,w,c
 10779  000B78  1046               	iorwf	_vscp_page_select,w,c
 10780  000B7A  E102 EFB7  F00A    	bz	l10994
 10781  000B80  EFF1  F00B         	goto	l10996
 10782  000B84                     l10804:
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;main.c: 1908: writeEEPROM(0x41, val);
 10786  000B84  6A0F               	clrf	?_writeEEPROM+1,c
 10787  000B86  0E41               	movlw	65
 10788  000B88  6E0E               	movwf	?_writeEEPROM,c
 10789  000B8A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10790  000B8E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10791                           
 10792                           ;main.c: 1909: rv = readEEPROM(0x41);
 10793  000B92  6A0F               	clrf	?_readEEPROM+1,c
 10794  000B94  0E41               	movlw	65
 10795  000B96  6E0E               	movwf	?_readEEPROM,c
 10796  000B98  EC9C  F02E         	call	_readEEPROM	;wreg free
 10797  000B9C  EF35  F00C         	goto	L20
 10798  000BA0                     l10806:
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;main.c: 1914: writeEEPROM(0x42, val);
 10802  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
 10803  000BA2  0E42               	movlw	66
 10804  000BA4  6E0E               	movwf	?_writeEEPROM,c
 10805  000BA6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10806  000BAA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10807                           
 10808                           ;main.c: 1915: rv = readEEPROM(0x42);
 10809  000BAE  6A0F               	clrf	?_readEEPROM+1,c
 10810  000BB0  0E42               	movlw	66
 10811  000BB2  6E0E               	movwf	?_readEEPROM,c
 10812  000BB4  EC9C  F02E         	call	_readEEPROM	;wreg free
 10813  000BB8  EF35  F00C         	goto	L20
 10814  000BBC                     l10808:
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;main.c: 1924: writeEEPROM(0x43, val);
 10818  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 10819  000BBE  0E43               	movlw	67
 10820  000BC0  6E0E               	movwf	?_writeEEPROM,c
 10821  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10822  000BC6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10823                           
 10824                           ;main.c: 1925: rv = readEEPROM(0x43);
 10825  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 10826  000BCC  0E43               	movlw	67
 10827  000BCE  6E0E               	movwf	?_readEEPROM,c
 10828  000BD0  EC9C  F02E         	call	_readEEPROM	;wreg free
 10829  000BD4  EF35  F00C         	goto	L20
 10830  000BD8                     l10810:
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;main.c: 1930: writeEEPROM(0x44, val);
 10834  000BD8  6A0F               	clrf	?_writeEEPROM+1,c
 10835  000BDA  0E44               	movlw	68
 10836  000BDC  6E0E               	movwf	?_writeEEPROM,c
 10837  000BDE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10838  000BE2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10839                           
 10840                           ;main.c: 1931: rv = readEEPROM(0x44);
 10841  000BE6  6A0F               	clrf	?_readEEPROM+1,c
 10842  000BE8  0E44               	movlw	68
 10843  000BEA  6E0E               	movwf	?_readEEPROM,c
 10844  000BEC  EC9C  F02E         	call	_readEEPROM	;wreg free
 10845  000BF0  EF35  F00C         	goto	L20
 10846  000BF4                     l10812:
 10847                           
 10848                           ; BSR set to: 0
 10849                           ;main.c: 1936: writeEEPROM(0x45, val);
 10850  000BF4  6A0F               	clrf	?_writeEEPROM+1,c
 10851  000BF6  0E45               	movlw	69
 10852  000BF8  6E0E               	movwf	?_writeEEPROM,c
 10853  000BFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10854  000BFE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10855                           
 10856                           ;main.c: 1937: rv = readEEPROM(0x45);
 10857  000C02  6A0F               	clrf	?_readEEPROM+1,c
 10858  000C04  0E45               	movlw	69
 10859  000C06  6E0E               	movwf	?_readEEPROM,c
 10860  000C08  EC9C  F02E         	call	_readEEPROM	;wreg free
 10861  000C0C  EF35  F00C         	goto	L20
 10862  000C10                     l10814:
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;main.c: 1942: writeEEPROM(0x46, val);
 10866  000C10  6A0F               	clrf	?_writeEEPROM+1,c
 10867  000C12  0E46               	movlw	70
 10868  000C14  6E0E               	movwf	?_writeEEPROM,c
 10869  000C16  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10870  000C1A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10871                           
 10872                           ;main.c: 1943: rv = readEEPROM(0x46);
 10873  000C1E  6A0F               	clrf	?_readEEPROM+1,c
 10874  000C20  0E46               	movlw	70
 10875  000C22  6E0E               	movwf	?_readEEPROM,c
 10876  000C24  EC9C  F02E         	call	_readEEPROM	;wreg free
 10877  000C28  EF35  F00C         	goto	L20
 10878  000C2C                     l10816:
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;main.c: 1948: writeEEPROM(0x47, val);
 10882  000C2C  6A0F               	clrf	?_writeEEPROM+1,c
 10883  000C2E  0E47               	movlw	71
 10884  000C30  6E0E               	movwf	?_writeEEPROM,c
 10885  000C32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10886  000C36  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10887                           
 10888                           ;main.c: 1949: rv = readEEPROM(0x47);
 10889  000C3A  6A0F               	clrf	?_readEEPROM+1,c
 10890  000C3C  0E47               	movlw	71
 10891  000C3E  6E0E               	movwf	?_readEEPROM,c
 10892  000C40  EC9C  F02E         	call	_readEEPROM	;wreg free
 10893  000C44  EF35  F00C         	goto	L20
 10894  000C48                     l10818:
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;main.c: 1954: writeEEPROM(0x48, val);
 10898  000C48  6A0F               	clrf	?_writeEEPROM+1,c
 10899  000C4A  0E48               	movlw	72
 10900  000C4C  6E0E               	movwf	?_writeEEPROM,c
 10901  000C4E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10902  000C52  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10903                           
 10904                           ;main.c: 1955: rv = readEEPROM(0x48);
 10905  000C56  6A0F               	clrf	?_readEEPROM+1,c
 10906  000C58  0E48               	movlw	72
 10907  000C5A  6E0E               	movwf	?_readEEPROM,c
 10908  000C5C  EC9C  F02E         	call	_readEEPROM	;wreg free
 10909  000C60  EF35  F00C         	goto	L20
 10910  000C64                     l10820:
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;main.c: 1964: writeEEPROM(0x49, val);
 10914  000C64  6A0F               	clrf	?_writeEEPROM+1,c
 10915  000C66  0E49               	movlw	73
 10916  000C68  6E0E               	movwf	?_writeEEPROM,c
 10917  000C6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10918  000C6E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10919                           
 10920                           ;main.c: 1965: rv = readEEPROM(0x49);
 10921  000C72  6A0F               	clrf	?_readEEPROM+1,c
 10922  000C74  0E49               	movlw	73
 10923  000C76  6E0E               	movwf	?_readEEPROM,c
 10924  000C78  EC9C  F02E         	call	_readEEPROM	;wreg free
 10925  000C7C  EF35  F00C         	goto	L20
 10926  000C80                     l10822:
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;main.c: 1970: writeEEPROM(0x4A, val);
 10930  000C80  6A0F               	clrf	?_writeEEPROM+1,c
 10931  000C82  0E4A               	movlw	74
 10932  000C84  6E0E               	movwf	?_writeEEPROM,c
 10933  000C86  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10934  000C8A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10935                           
 10936                           ;main.c: 1971: rv = readEEPROM(0x4A);
 10937  000C8E  6A0F               	clrf	?_readEEPROM+1,c
 10938  000C90  0E4A               	movlw	74
 10939  000C92  6E0E               	movwf	?_readEEPROM,c
 10940  000C94  EC9C  F02E         	call	_readEEPROM	;wreg free
 10941  000C98  EF35  F00C         	goto	L20
 10942  000C9C                     l10824:
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;main.c: 1976: writeEEPROM(0x4B, val);
 10946  000C9C  6A0F               	clrf	?_writeEEPROM+1,c
 10947  000C9E  0E4B               	movlw	75
 10948  000CA0  6E0E               	movwf	?_writeEEPROM,c
 10949  000CA2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10950  000CA6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10951                           
 10952                           ;main.c: 1977: rv = readEEPROM(0x4B);
 10953  000CAA  6A0F               	clrf	?_readEEPROM+1,c
 10954  000CAC  0E4B               	movlw	75
 10955  000CAE  6E0E               	movwf	?_readEEPROM,c
 10956  000CB0  EC9C  F02E         	call	_readEEPROM	;wreg free
 10957  000CB4  EF35  F00C         	goto	L20
 10958  000CB8                     l10826:
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;main.c: 1982: writeEEPROM(0x4C, val);
 10962  000CB8  6A0F               	clrf	?_writeEEPROM+1,c
 10963  000CBA  0E4C               	movlw	76
 10964  000CBC  6E0E               	movwf	?_writeEEPROM,c
 10965  000CBE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10966  000CC2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10967                           
 10968                           ;main.c: 1983: rv = readEEPROM(0x4C);
 10969  000CC6  6A0F               	clrf	?_readEEPROM+1,c
 10970  000CC8  0E4C               	movlw	76
 10971  000CCA  6E0E               	movwf	?_readEEPROM,c
 10972  000CCC  EC9C  F02E         	call	_readEEPROM	;wreg free
 10973  000CD0  EF35  F00C         	goto	L20
 10974  000CD4                     l10828:
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;main.c: 1988: writeEEPROM(0x4D, val);
 10978  000CD4  6A0F               	clrf	?_writeEEPROM+1,c
 10979  000CD6  0E4D               	movlw	77
 10980  000CD8  6E0E               	movwf	?_writeEEPROM,c
 10981  000CDA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10982  000CDE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10983                           
 10984                           ;main.c: 1989: rv = readEEPROM(0x4D);
 10985  000CE2  6A0F               	clrf	?_readEEPROM+1,c
 10986  000CE4  0E4D               	movlw	77
 10987  000CE6  6E0E               	movwf	?_readEEPROM,c
 10988  000CE8  EC9C  F02E         	call	_readEEPROM	;wreg free
 10989  000CEC  EF35  F00C         	goto	L20
 10990  000CF0                     l10830:
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;main.c: 1994: writeEEPROM(0x4E, val);
 10994  000CF0  6A0F               	clrf	?_writeEEPROM+1,c
 10995  000CF2  0E4E               	movlw	78
 10996  000CF4  6E0E               	movwf	?_writeEEPROM,c
 10997  000CF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10998  000CFA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 10999                           
 11000                           ;main.c: 1995: rv = readEEPROM(0x4E);
 11001  000CFE  6A0F               	clrf	?_readEEPROM+1,c
 11002  000D00  0E4E               	movlw	78
 11003  000D02  6E0E               	movwf	?_readEEPROM,c
 11004  000D04  EC9C  F02E         	call	_readEEPROM	;wreg free
 11005  000D08  EF35  F00C         	goto	L20
 11006  000D0C                     l10832:
 11007                           
 11008                           ; BSR set to: 0
 11009                           ;main.c: 2004: writeEEPROM(0x4F, val);
 11010  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
 11011  000D0E  0E4F               	movlw	79
 11012  000D10  6E0E               	movwf	?_writeEEPROM,c
 11013  000D12  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11014  000D16  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11015                           
 11016                           ;main.c: 2005: rv = readEEPROM(0x4F);
 11017  000D1A  6A0F               	clrf	?_readEEPROM+1,c
 11018  000D1C  0E4F               	movlw	79
 11019  000D1E  6E0E               	movwf	?_readEEPROM,c
 11020  000D20  EC9C  F02E         	call	_readEEPROM	;wreg free
 11021  000D24  EF35  F00C         	goto	L20
 11022  000D28                     l10834:
 11023                           
 11024                           ; BSR set to: 0
 11025                           ;main.c: 2010: writeEEPROM(0x50, val);
 11026  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11027  000D2A  0E50               	movlw	80
 11028  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11029  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11030  000D32  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11031                           
 11032                           ;main.c: 2011: rv = readEEPROM(0x50);
 11033  000D36  6A0F               	clrf	?_readEEPROM+1,c
 11034  000D38  0E50               	movlw	80
 11035  000D3A  6E0E               	movwf	?_readEEPROM,c
 11036  000D3C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11037  000D40  EF35  F00C         	goto	L20
 11038  000D44                     l10836:
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;main.c: 2016: writeEEPROM(0x51, val);
 11042  000D44  6A0F               	clrf	?_writeEEPROM+1,c
 11043  000D46  0E51               	movlw	81
 11044  000D48  6E0E               	movwf	?_writeEEPROM,c
 11045  000D4A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11046  000D4E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11047                           
 11048                           ;main.c: 2017: rv = readEEPROM(0x51);
 11049  000D52  6A0F               	clrf	?_readEEPROM+1,c
 11050  000D54  0E51               	movlw	81
 11051  000D56  6E0E               	movwf	?_readEEPROM,c
 11052  000D58  EC9C  F02E         	call	_readEEPROM	;wreg free
 11053  000D5C  EF35  F00C         	goto	L20
 11054  000D60                     l10838:
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;main.c: 2022: writeEEPROM(0x52, val);
 11058  000D60  6A0F               	clrf	?_writeEEPROM+1,c
 11059  000D62  0E52               	movlw	82
 11060  000D64  6E0E               	movwf	?_writeEEPROM,c
 11061  000D66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11062  000D6A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11063                           
 11064                           ;main.c: 2023: rv = readEEPROM(0x52);
 11065  000D6E  6A0F               	clrf	?_readEEPROM+1,c
 11066  000D70  0E52               	movlw	82
 11067  000D72  6E0E               	movwf	?_readEEPROM,c
 11068  000D74  EC9C  F02E         	call	_readEEPROM	;wreg free
 11069  000D78  EF35  F00C         	goto	L20
 11070  000D7C                     l10840:
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;main.c: 2028: writeEEPROM(0x53, val);
 11074  000D7C  6A0F               	clrf	?_writeEEPROM+1,c
 11075  000D7E  0E53               	movlw	83
 11076  000D80  6E0E               	movwf	?_writeEEPROM,c
 11077  000D82  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11078  000D86  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11079                           
 11080                           ;main.c: 2029: rv = readEEPROM(0x53);
 11081  000D8A  6A0F               	clrf	?_readEEPROM+1,c
 11082  000D8C  0E53               	movlw	83
 11083  000D8E  6E0E               	movwf	?_readEEPROM,c
 11084  000D90  EC9C  F02E         	call	_readEEPROM	;wreg free
 11085  000D94  EF35  F00C         	goto	L20
 11086  000D98                     l10842:
 11087                           
 11088                           ; BSR set to: 0
 11089                           ;main.c: 2034: writeEEPROM(0x54, val);
 11090  000D98  6A0F               	clrf	?_writeEEPROM+1,c
 11091  000D9A  0E54               	movlw	84
 11092  000D9C  6E0E               	movwf	?_writeEEPROM,c
 11093  000D9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11094  000DA2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11095                           
 11096                           ;main.c: 2035: rv = readEEPROM(0x54);
 11097  000DA6  6A0F               	clrf	?_readEEPROM+1,c
 11098  000DA8  0E54               	movlw	84
 11099  000DAA  6E0E               	movwf	?_readEEPROM,c
 11100  000DAC  EC9C  F02E         	call	_readEEPROM	;wreg free
 11101  000DB0  EF35  F00C         	goto	L20
 11102  000DB4                     l10844:
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;main.c: 2040: writeEEPROM(0x55, val);
 11106  000DB4  6A0F               	clrf	?_writeEEPROM+1,c
 11107  000DB6  0E55               	movlw	85
 11108  000DB8  6E0E               	movwf	?_writeEEPROM,c
 11109  000DBA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11110  000DBE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11111                           
 11112                           ;main.c: 2041: rv = readEEPROM(0x55);
 11113  000DC2  6A0F               	clrf	?_readEEPROM+1,c
 11114  000DC4  0E55               	movlw	85
 11115  000DC6  6E0E               	movwf	?_readEEPROM,c
 11116  000DC8  EC9C  F02E         	call	_readEEPROM	;wreg free
 11117  000DCC  EF35  F00C         	goto	L20
 11118  000DD0                     l10846:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;main.c: 2046: writeEEPROM(0x56, val);
 11122  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
 11123  000DD2  0E56               	movlw	86
 11124  000DD4  6E0E               	movwf	?_writeEEPROM,c
 11125  000DD6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11126  000DDA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11127                           
 11128                           ;main.c: 2047: rv = readEEPROM(0x56);
 11129  000DDE  6A0F               	clrf	?_readEEPROM+1,c
 11130  000DE0  0E56               	movlw	86
 11131  000DE2  6E0E               	movwf	?_readEEPROM,c
 11132  000DE4  EC9C  F02E         	call	_readEEPROM	;wreg free
 11133  000DE8  EF35  F00C         	goto	L20
 11134  000DEC                     l10848:
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;main.c: 2052: writeEEPROM(0x57, val);
 11138  000DEC  6A0F               	clrf	?_writeEEPROM+1,c
 11139  000DEE  0E57               	movlw	87
 11140  000DF0  6E0E               	movwf	?_writeEEPROM,c
 11141  000DF2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11142  000DF6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11143                           
 11144                           ;main.c: 2053: rv = readEEPROM(0x57);
 11145  000DFA  6A0F               	clrf	?_readEEPROM+1,c
 11146  000DFC  0E57               	movlw	87
 11147  000DFE  6E0E               	movwf	?_readEEPROM,c
 11148  000E00  EC9C  F02E         	call	_readEEPROM	;wreg free
 11149  000E04  EF35  F00C         	goto	L20
 11150  000E08                     l10850:
 11151                           
 11152                           ; BSR set to: 0
 11153                           ;main.c: 2058: writeEEPROM(0x58, val);
 11154  000E08  6A0F               	clrf	?_writeEEPROM+1,c
 11155  000E0A  0E58               	movlw	88
 11156  000E0C  6E0E               	movwf	?_writeEEPROM,c
 11157  000E0E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11158  000E12  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11159                           
 11160                           ;main.c: 2059: rv = readEEPROM(0x58);
 11161  000E16  6A0F               	clrf	?_readEEPROM+1,c
 11162  000E18  0E58               	movlw	88
 11163  000E1A  6E0E               	movwf	?_readEEPROM,c
 11164  000E1C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11165  000E20  EF35  F00C         	goto	L20
 11166  000E24                     l10852:
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;main.c: 2064: writeEEPROM(0x59, val);
 11170  000E24  6A0F               	clrf	?_writeEEPROM+1,c
 11171  000E26  0E59               	movlw	89
 11172  000E28  6E0E               	movwf	?_writeEEPROM,c
 11173  000E2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11174  000E2E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11175                           
 11176                           ;main.c: 2065: rv = readEEPROM(0x59);
 11177  000E32  6A0F               	clrf	?_readEEPROM+1,c
 11178  000E34  0E59               	movlw	89
 11179  000E36  6E0E               	movwf	?_readEEPROM,c
 11180  000E38  EC9C  F02E         	call	_readEEPROM	;wreg free
 11181  000E3C  EF35  F00C         	goto	L20
 11182  000E40                     l10854:
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;main.c: 2070: writeEEPROM(0x5A, val);
 11186  000E40  6A0F               	clrf	?_writeEEPROM+1,c
 11187  000E42  0E5A               	movlw	90
 11188  000E44  6E0E               	movwf	?_writeEEPROM,c
 11189  000E46  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11190  000E4A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11191                           
 11192                           ;main.c: 2071: rv = readEEPROM(0x5A);
 11193  000E4E  6A0F               	clrf	?_readEEPROM+1,c
 11194  000E50  0E5A               	movlw	90
 11195  000E52  6E0E               	movwf	?_readEEPROM,c
 11196  000E54  EC9C  F02E         	call	_readEEPROM	;wreg free
 11197  000E58  EF35  F00C         	goto	L20
 11198  000E5C                     l10856:
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;main.c: 2080: writeEEPROM(0x5B, val);
 11202  000E5C  6A0F               	clrf	?_writeEEPROM+1,c
 11203  000E5E  0E5B               	movlw	91
 11204  000E60  6E0E               	movwf	?_writeEEPROM,c
 11205  000E62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11206  000E66  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11207                           
 11208                           ;main.c: 2081: rv = readEEPROM(0x5B);
 11209  000E6A  6A0F               	clrf	?_readEEPROM+1,c
 11210  000E6C  0E5B               	movlw	91
 11211  000E6E  6E0E               	movwf	?_readEEPROM,c
 11212  000E70  EC9C  F02E         	call	_readEEPROM	;wreg free
 11213  000E74  EF35  F00C         	goto	L20
 11214  000E78                     l10858:
 11215                           
 11216                           ; BSR set to: 0
 11217                           ;main.c: 2086: writeEEPROM(0x5C, val);
 11218  000E78  6A0F               	clrf	?_writeEEPROM+1,c
 11219  000E7A  0E5C               	movlw	92
 11220  000E7C  6E0E               	movwf	?_writeEEPROM,c
 11221  000E7E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11222  000E82  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11223                           
 11224                           ;main.c: 2087: rv = readEEPROM(0x5C);
 11225  000E86  6A0F               	clrf	?_readEEPROM+1,c
 11226  000E88  0E5C               	movlw	92
 11227  000E8A  6E0E               	movwf	?_readEEPROM,c
 11228  000E8C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11229  000E90  EF35  F00C         	goto	L20
 11230  000E94                     l10860:
 11231                           
 11232                           ; BSR set to: 0
 11233                           ;main.c: 2092: writeEEPROM(0x5D, val);
 11234  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 11235  000E96  0E5D               	movlw	93
 11236  000E98  6E0E               	movwf	?_writeEEPROM,c
 11237  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11238  000E9E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11239                           
 11240                           ;main.c: 2093: rv = readEEPROM(0x5D);
 11241  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 11242  000EA4  0E5D               	movlw	93
 11243  000EA6  6E0E               	movwf	?_readEEPROM,c
 11244  000EA8  EC9C  F02E         	call	_readEEPROM	;wreg free
 11245  000EAC  EF35  F00C         	goto	L20
 11246  000EB0                     l10862:
 11247                           
 11248                           ; BSR set to: 0
 11249                           ;main.c: 2098: writeEEPROM(0x5E, val);
 11250  000EB0  6A0F               	clrf	?_writeEEPROM+1,c
 11251  000EB2  0E5E               	movlw	94
 11252  000EB4  6E0E               	movwf	?_writeEEPROM,c
 11253  000EB6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11254  000EBA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11255                           
 11256                           ;main.c: 2099: rv = readEEPROM(0x5E);
 11257  000EBE  6A0F               	clrf	?_readEEPROM+1,c
 11258  000EC0  0E5E               	movlw	94
 11259  000EC2  6E0E               	movwf	?_readEEPROM,c
 11260  000EC4  EC9C  F02E         	call	_readEEPROM	;wreg free
 11261  000EC8  EF35  F00C         	goto	L20
 11262  000ECC                     l10864:
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;main.c: 2104: writeEEPROM(0x5F, val);
 11266  000ECC  6A0F               	clrf	?_writeEEPROM+1,c
 11267  000ECE  0E5F               	movlw	95
 11268  000ED0  6E0E               	movwf	?_writeEEPROM,c
 11269  000ED2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11270  000ED6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11271                           
 11272                           ;main.c: 2105: rv = readEEPROM(0x5F);
 11273  000EDA  6A0F               	clrf	?_readEEPROM+1,c
 11274  000EDC  0E5F               	movlw	95
 11275  000EDE  6E0E               	movwf	?_readEEPROM,c
 11276  000EE0  EC9C  F02E         	call	_readEEPROM	;wreg free
 11277  000EE4  EF35  F00C         	goto	L20
 11278  000EE8                     l10866:
 11279                           
 11280                           ; BSR set to: 0
 11281                           ;main.c: 2110: writeEEPROM(0x60, val);
 11282  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 11283  000EEA  0E60               	movlw	96
 11284  000EEC  6E0E               	movwf	?_writeEEPROM,c
 11285  000EEE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11286  000EF2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11287                           
 11288                           ;main.c: 2111: rv = readEEPROM(0x60);
 11289  000EF6  6A0F               	clrf	?_readEEPROM+1,c
 11290  000EF8  0E60               	movlw	96
 11291  000EFA  6E0E               	movwf	?_readEEPROM,c
 11292  000EFC  EC9C  F02E         	call	_readEEPROM	;wreg free
 11293  000F00  EF35  F00C         	goto	L20
 11294  000F04                     l10868:
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;main.c: 2116: writeEEPROM(0x61, val);
 11298  000F04  6A0F               	clrf	?_writeEEPROM+1,c
 11299  000F06  0E61               	movlw	97
 11300  000F08  6E0E               	movwf	?_writeEEPROM,c
 11301  000F0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11302  000F0E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11303                           
 11304                           ;main.c: 2117: rv = readEEPROM(0x61);
 11305  000F12  6A0F               	clrf	?_readEEPROM+1,c
 11306  000F14  0E61               	movlw	97
 11307  000F16  6E0E               	movwf	?_readEEPROM,c
 11308  000F18  EC9C  F02E         	call	_readEEPROM	;wreg free
 11309  000F1C  EF35  F00C         	goto	L20
 11310  000F20                     l10870:
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;main.c: 2122: writeEEPROM(0x62, val);
 11314  000F20  6A0F               	clrf	?_writeEEPROM+1,c
 11315  000F22  0E62               	movlw	98
 11316  000F24  6E0E               	movwf	?_writeEEPROM,c
 11317  000F26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11318  000F2A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11319                           
 11320                           ;main.c: 2123: rv = readEEPROM(0x62);
 11321  000F2E  6A0F               	clrf	?_readEEPROM+1,c
 11322  000F30  0E62               	movlw	98
 11323  000F32  6E0E               	movwf	?_readEEPROM,c
 11324  000F34  EC9C  F02E         	call	_readEEPROM	;wreg free
 11325  000F38  EF35  F00C         	goto	L20
 11326  000F3C                     l10872:
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;main.c: 2128: writeEEPROM(0x63, val);
 11330  000F3C  6A0F               	clrf	?_writeEEPROM+1,c
 11331  000F3E  0E63               	movlw	99
 11332  000F40  6E0E               	movwf	?_writeEEPROM,c
 11333  000F42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11334  000F46  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11335                           
 11336                           ;main.c: 2129: rv = readEEPROM(0x63);
 11337  000F4A  6A0F               	clrf	?_readEEPROM+1,c
 11338  000F4C  0E63               	movlw	99
 11339  000F4E  6E0E               	movwf	?_readEEPROM,c
 11340  000F50  EC9C  F02E         	call	_readEEPROM	;wreg free
 11341  000F54  EF35  F00C         	goto	L20
 11342  000F58                     l10874:
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;main.c: 2134: writeEEPROM(0x64, val);
 11346  000F58  6A0F               	clrf	?_writeEEPROM+1,c
 11347  000F5A  0E64               	movlw	100
 11348  000F5C  6E0E               	movwf	?_writeEEPROM,c
 11349  000F5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11350  000F62  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11351                           
 11352                           ;main.c: 2135: rv = readEEPROM(0x64);
 11353  000F66  6A0F               	clrf	?_readEEPROM+1,c
 11354  000F68  0E64               	movlw	100
 11355  000F6A  6E0E               	movwf	?_readEEPROM,c
 11356  000F6C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11357  000F70  EF35  F00C         	goto	L20
 11358  000F74                     l10876:
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;main.c: 2140: writeEEPROM(0x65, val);
 11362  000F74  6A0F               	clrf	?_writeEEPROM+1,c
 11363  000F76  0E65               	movlw	101
 11364  000F78  6E0E               	movwf	?_writeEEPROM,c
 11365  000F7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11366  000F7E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11367                           
 11368                           ;main.c: 2141: rv = readEEPROM(0x65);
 11369  000F82  6A0F               	clrf	?_readEEPROM+1,c
 11370  000F84  0E65               	movlw	101
 11371  000F86  6E0E               	movwf	?_readEEPROM,c
 11372  000F88  EC9C  F02E         	call	_readEEPROM	;wreg free
 11373  000F8C  EF35  F00C         	goto	L20
 11374  000F90                     l10878:
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;main.c: 2146: writeEEPROM(0x66, val);
 11378  000F90  6A0F               	clrf	?_writeEEPROM+1,c
 11379  000F92  0E66               	movlw	102
 11380  000F94  6E0E               	movwf	?_writeEEPROM,c
 11381  000F96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11382  000F9A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11383                           
 11384                           ;main.c: 2147: rv = readEEPROM(0x66);
 11385  000F9E  6A0F               	clrf	?_readEEPROM+1,c
 11386  000FA0  0E66               	movlw	102
 11387  000FA2  6E0E               	movwf	?_readEEPROM,c
 11388  000FA4  EC9C  F02E         	call	_readEEPROM	;wreg free
 11389  000FA8  EF35  F00C         	goto	L20
 11390  000FAC                     l10880:
 11391                           
 11392                           ; BSR set to: 0
 11393                           ;main.c: 2156: writeEEPROM(0x67, val);
 11394  000FAC  6A0F               	clrf	?_writeEEPROM+1,c
 11395  000FAE  0E67               	movlw	103
 11396  000FB0  6E0E               	movwf	?_writeEEPROM,c
 11397  000FB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11398  000FB6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11399                           
 11400                           ;main.c: 2157: rv = readEEPROM(0x67);
 11401  000FBA  6A0F               	clrf	?_readEEPROM+1,c
 11402  000FBC  0E67               	movlw	103
 11403  000FBE  6E0E               	movwf	?_readEEPROM,c
 11404  000FC0  EC9C  F02E         	call	_readEEPROM	;wreg free
 11405  000FC4  EF35  F00C         	goto	L20
 11406  000FC8                     l10882:
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;main.c: 2162: writeEEPROM(0x68, val);
 11410  000FC8  6A0F               	clrf	?_writeEEPROM+1,c
 11411  000FCA  0E68               	movlw	104
 11412  000FCC  6E0E               	movwf	?_writeEEPROM,c
 11413  000FCE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11414  000FD2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11415                           
 11416                           ;main.c: 2163: rv = readEEPROM(0x68);
 11417  000FD6  6A0F               	clrf	?_readEEPROM+1,c
 11418  000FD8  0E68               	movlw	104
 11419  000FDA  6E0E               	movwf	?_readEEPROM,c
 11420  000FDC  EC9C  F02E         	call	_readEEPROM	;wreg free
 11421  000FE0  EF35  F00C         	goto	L20
 11422  000FE4                     l10884:
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;main.c: 2168: writeEEPROM(0x69, val);
 11426  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 11427  000FE6  0E69               	movlw	105
 11428  000FE8  6E0E               	movwf	?_writeEEPROM,c
 11429  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11430  000FEE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11431                           
 11432                           ;main.c: 2169: rv = readEEPROM(0x69);
 11433  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 11434  000FF4  0E69               	movlw	105
 11435  000FF6  6E0E               	movwf	?_readEEPROM,c
 11436  000FF8  EC9C  F02E         	call	_readEEPROM	;wreg free
 11437  000FFC  EF35  F00C         	goto	L20
 11438  001000                     l10886:
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;main.c: 2174: writeEEPROM(0x6A, val);
 11442  001000  6A0F               	clrf	?_writeEEPROM+1,c
 11443  001002  0E6A               	movlw	106
 11444  001004  6E0E               	movwf	?_writeEEPROM,c
 11445  001006  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11446  00100A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11447                           
 11448                           ;main.c: 2175: rv = readEEPROM(0x6A);
 11449  00100E  6A0F               	clrf	?_readEEPROM+1,c
 11450  001010  0E6A               	movlw	106
 11451  001012  6E0E               	movwf	?_readEEPROM,c
 11452  001014  EC9C  F02E         	call	_readEEPROM	;wreg free
 11453  001018  EF35  F00C         	goto	L20
 11454  00101C                     l10888:
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;main.c: 2180: writeEEPROM(0x6B, val);
 11458  00101C  6A0F               	clrf	?_writeEEPROM+1,c
 11459  00101E  0E6B               	movlw	107
 11460  001020  6E0E               	movwf	?_writeEEPROM,c
 11461  001022  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11462  001026  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11463                           
 11464                           ;main.c: 2181: rv = readEEPROM(0x6B);
 11465  00102A  6A0F               	clrf	?_readEEPROM+1,c
 11466  00102C  0E6B               	movlw	107
 11467  00102E  6E0E               	movwf	?_readEEPROM,c
 11468  001030  EC9C  F02E         	call	_readEEPROM	;wreg free
 11469  001034  EF35  F00C         	goto	L20
 11470  001038                     l10890:
 11471                           
 11472                           ; BSR set to: 0
 11473                           ;main.c: 2186: writeEEPROM(0x6C, val);
 11474  001038  6A0F               	clrf	?_writeEEPROM+1,c
 11475  00103A  0E6C               	movlw	108
 11476  00103C  6E0E               	movwf	?_writeEEPROM,c
 11477  00103E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11478  001042  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11479                           
 11480                           ;main.c: 2187: rv = readEEPROM(0x6C);
 11481  001046  6A0F               	clrf	?_readEEPROM+1,c
 11482  001048  0E6C               	movlw	108
 11483  00104A  6E0E               	movwf	?_readEEPROM,c
 11484  00104C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11485  001050  EF35  F00C         	goto	L20
 11486  001054                     l10892:
 11487                           
 11488                           ; BSR set to: 0
 11489                           ;main.c: 2192: writeEEPROM(0x6D, val);
 11490  001054  6A0F               	clrf	?_writeEEPROM+1,c
 11491  001056  0E6D               	movlw	109
 11492  001058  6E0E               	movwf	?_writeEEPROM,c
 11493  00105A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11494  00105E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11495                           
 11496                           ;main.c: 2193: rv = readEEPROM(0x6D);
 11497  001062  6A0F               	clrf	?_readEEPROM+1,c
 11498  001064  0E6D               	movlw	109
 11499  001066  6E0E               	movwf	?_readEEPROM,c
 11500  001068  EC9C  F02E         	call	_readEEPROM	;wreg free
 11501  00106C  D3FE               	goto	L20
 11502  00106E                     l10894:
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;main.c: 2198: writeEEPROM(0x6E, val);
 11506  00106E  6A0F               	clrf	?_writeEEPROM+1,c
 11507  001070  0E6E               	movlw	110
 11508  001072  6E0E               	movwf	?_writeEEPROM,c
 11509  001074  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11510  001078  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11511                           
 11512                           ;main.c: 2199: rv = readEEPROM(0x6E);
 11513  00107C  6A0F               	clrf	?_readEEPROM+1,c
 11514  00107E  0E6E               	movlw	110
 11515  001080  6E0E               	movwf	?_readEEPROM,c
 11516  001082  EC9C  F02E         	call	_readEEPROM	;wreg free
 11517  001086  D3F1               	goto	L20
 11518  001088                     l10896:
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;main.c: 2204: writeEEPROM(0x6F, val);
 11522  001088  6A0F               	clrf	?_writeEEPROM+1,c
 11523  00108A  0E6F               	movlw	111
 11524  00108C  6E0E               	movwf	?_writeEEPROM,c
 11525  00108E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11526  001092  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11527                           
 11528                           ;main.c: 2205: rv = readEEPROM(0x6F);
 11529  001096  6A0F               	clrf	?_readEEPROM+1,c
 11530  001098  0E6F               	movlw	111
 11531  00109A  6E0E               	movwf	?_readEEPROM,c
 11532  00109C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11533  0010A0  D3E4               	goto	L20
 11534  0010A2                     l10898:
 11535                           
 11536                           ; BSR set to: 0
 11537                           ;main.c: 2210: writeEEPROM(0x70, val);
 11538  0010A2  6A0F               	clrf	?_writeEEPROM+1,c
 11539  0010A4  0E70               	movlw	112
 11540  0010A6  6E0E               	movwf	?_writeEEPROM,c
 11541  0010A8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11542  0010AC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11543                           
 11544                           ;main.c: 2211: rv = readEEPROM(0x70);
 11545  0010B0  6A0F               	clrf	?_readEEPROM+1,c
 11546  0010B2  0E70               	movlw	112
 11547  0010B4  6E0E               	movwf	?_readEEPROM,c
 11548  0010B6  EC9C  F02E         	call	_readEEPROM	;wreg free
 11549  0010BA  D3D7               	goto	L20
 11550  0010BC                     l10900:
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;main.c: 2216: writeEEPROM(0x71, val);
 11554  0010BC  6A0F               	clrf	?_writeEEPROM+1,c
 11555  0010BE  0E71               	movlw	113
 11556  0010C0  6E0E               	movwf	?_writeEEPROM,c
 11557  0010C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11558  0010C6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11559                           
 11560                           ;main.c: 2217: rv = readEEPROM(0x71);
 11561  0010CA  6A0F               	clrf	?_readEEPROM+1,c
 11562  0010CC  0E71               	movlw	113
 11563  0010CE  6E0E               	movwf	?_readEEPROM,c
 11564  0010D0  EC9C  F02E         	call	_readEEPROM	;wreg free
 11565  0010D4  D3CA               	goto	L20
 11566  0010D6                     l10902:
 11567                           
 11568                           ; BSR set to: 0
 11569                           ;main.c: 2222: writeEEPROM(0x72, val);
 11570  0010D6  6A0F               	clrf	?_writeEEPROM+1,c
 11571  0010D8  0E72               	movlw	114
 11572  0010DA  6E0E               	movwf	?_writeEEPROM,c
 11573  0010DC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11574  0010E0  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11575                           
 11576                           ;main.c: 2223: rv = readEEPROM(0x72);
 11577  0010E4  6A0F               	clrf	?_readEEPROM+1,c
 11578  0010E6  0E72               	movlw	114
 11579  0010E8  6E0E               	movwf	?_readEEPROM,c
 11580  0010EA  EC9C  F02E         	call	_readEEPROM	;wreg free
 11581  0010EE  D3BD               	goto	L20
 11582  0010F0                     l10904:
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;main.c: 2232: writeEEPROM(0x73, val);
 11586  0010F0  6A0F               	clrf	?_writeEEPROM+1,c
 11587  0010F2  0E73               	movlw	115
 11588  0010F4  6E0E               	movwf	?_writeEEPROM,c
 11589  0010F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11590  0010FA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11591                           
 11592                           ;main.c: 2233: rv = readEEPROM(0x73);
 11593  0010FE  6A0F               	clrf	?_readEEPROM+1,c
 11594  001100  0E73               	movlw	115
 11595  001102  6E0E               	movwf	?_readEEPROM,c
 11596  001104  EC9C  F02E         	call	_readEEPROM	;wreg free
 11597  001108  D3B0               	goto	L20
 11598  00110A                     l10906:
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;main.c: 2238: writeEEPROM(0x74, val);
 11602  00110A  6A0F               	clrf	?_writeEEPROM+1,c
 11603  00110C  0E74               	movlw	116
 11604  00110E  6E0E               	movwf	?_writeEEPROM,c
 11605  001110  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11606  001114  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11607                           
 11608                           ;main.c: 2239: rv = readEEPROM(0x74);
 11609  001118  6A0F               	clrf	?_readEEPROM+1,c
 11610  00111A  0E74               	movlw	116
 11611  00111C  6E0E               	movwf	?_readEEPROM,c
 11612  00111E  EC9C  F02E         	call	_readEEPROM	;wreg free
 11613  001122  D3A3               	goto	L20
 11614  001124                     l10908:
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;main.c: 2244: writeEEPROM(0x75, val);
 11618  001124  6A0F               	clrf	?_writeEEPROM+1,c
 11619  001126  0E75               	movlw	117
 11620  001128  6E0E               	movwf	?_writeEEPROM,c
 11621  00112A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11622  00112E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11623                           
 11624                           ;main.c: 2245: rv = readEEPROM(0x75);
 11625  001132  6A0F               	clrf	?_readEEPROM+1,c
 11626  001134  0E75               	movlw	117
 11627  001136  6E0E               	movwf	?_readEEPROM,c
 11628  001138  EC9C  F02E         	call	_readEEPROM	;wreg free
 11629  00113C  D396               	goto	L20
 11630  00113E                     l10910:
 11631                           
 11632                           ; BSR set to: 0
 11633                           ;main.c: 2250: writeEEPROM(0x76, val);
 11634  00113E  6A0F               	clrf	?_writeEEPROM+1,c
 11635  001140  0E76               	movlw	118
 11636  001142  6E0E               	movwf	?_writeEEPROM,c
 11637  001144  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11638  001148  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11639                           
 11640                           ;main.c: 2251: rv = readEEPROM(0x76);
 11641  00114C  6A0F               	clrf	?_readEEPROM+1,c
 11642  00114E  0E76               	movlw	118
 11643  001150  6E0E               	movwf	?_readEEPROM,c
 11644  001152  EC9C  F02E         	call	_readEEPROM	;wreg free
 11645  001156  D389               	goto	L20
 11646  001158                     l10912:
 11647                           
 11648                           ; BSR set to: 0
 11649                           ;main.c: 2256: writeEEPROM(0x77, val);
 11650  001158  6A0F               	clrf	?_writeEEPROM+1,c
 11651  00115A  0E77               	movlw	119
 11652  00115C  6E0E               	movwf	?_writeEEPROM,c
 11653  00115E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11654  001162  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11655                           
 11656                           ;main.c: 2257: rv = readEEPROM(0x77);
 11657  001166  6A0F               	clrf	?_readEEPROM+1,c
 11658  001168  0E77               	movlw	119
 11659  00116A  6E0E               	movwf	?_readEEPROM,c
 11660  00116C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11661  001170  D37C               	goto	L20
 11662  001172                     l10914:
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;main.c: 2262: writeEEPROM(0x78, val);
 11666  001172  6A0F               	clrf	?_writeEEPROM+1,c
 11667  001174  0E78               	movlw	120
 11668  001176  6E0E               	movwf	?_writeEEPROM,c
 11669  001178  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11670  00117C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11671                           
 11672                           ;main.c: 2263: rv = readEEPROM(0x78);
 11673  001180  6A0F               	clrf	?_readEEPROM+1,c
 11674  001182  0E78               	movlw	120
 11675  001184  6E0E               	movwf	?_readEEPROM,c
 11676  001186  EC9C  F02E         	call	_readEEPROM	;wreg free
 11677  00118A  D36F               	goto	L20
 11678  00118C                     l10916:
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;main.c: 2268: writeEEPROM(0x79, val);
 11682  00118C  6A0F               	clrf	?_writeEEPROM+1,c
 11683  00118E  0E79               	movlw	121
 11684  001190  6E0E               	movwf	?_writeEEPROM,c
 11685  001192  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11686  001196  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11687                           
 11688                           ;main.c: 2269: rv = readEEPROM(0x79);
 11689  00119A  6A0F               	clrf	?_readEEPROM+1,c
 11690  00119C  0E79               	movlw	121
 11691  00119E  6E0E               	movwf	?_readEEPROM,c
 11692  0011A0  EC9C  F02E         	call	_readEEPROM	;wreg free
 11693  0011A4  D362               	goto	L20
 11694  0011A6                     l10918:
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;main.c: 2274: writeEEPROM(0x7A, val);
 11698  0011A6  6A0F               	clrf	?_writeEEPROM+1,c
 11699  0011A8  0E7A               	movlw	122
 11700  0011AA  6E0E               	movwf	?_writeEEPROM,c
 11701  0011AC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11702  0011B0  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11703                           
 11704                           ;main.c: 2275: rv = readEEPROM(0x7A);
 11705  0011B4  6A0F               	clrf	?_readEEPROM+1,c
 11706  0011B6  0E7A               	movlw	122
 11707  0011B8  6E0E               	movwf	?_readEEPROM,c
 11708  0011BA  EC9C  F02E         	call	_readEEPROM	;wreg free
 11709  0011BE  D355               	goto	L20
 11710  0011C0                     l10920:
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 2280: writeEEPROM(0x7B, val);
 11714  0011C0  6A0F               	clrf	?_writeEEPROM+1,c
 11715  0011C2  0E7B               	movlw	123
 11716  0011C4  6E0E               	movwf	?_writeEEPROM,c
 11717  0011C6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11718  0011CA  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11719                           
 11720                           ;main.c: 2281: rv = readEEPROM(0x7B);
 11721  0011CE  6A0F               	clrf	?_readEEPROM+1,c
 11722  0011D0  0E7B               	movlw	123
 11723  0011D2  6E0E               	movwf	?_readEEPROM,c
 11724  0011D4  EC9C  F02E         	call	_readEEPROM	;wreg free
 11725  0011D8  D348               	goto	L20
 11726  0011DA                     l10922:
 11727                           
 11728                           ; BSR set to: 0
 11729                           ;main.c: 2286: writeEEPROM(0x7C, val);
 11730  0011DA  6A0F               	clrf	?_writeEEPROM+1,c
 11731  0011DC  0E7C               	movlw	124
 11732  0011DE  6E0E               	movwf	?_writeEEPROM,c
 11733  0011E0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11734  0011E4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11735                           
 11736                           ;main.c: 2287: rv = readEEPROM(0x7C);
 11737  0011E8  6A0F               	clrf	?_readEEPROM+1,c
 11738  0011EA  0E7C               	movlw	124
 11739  0011EC  6E0E               	movwf	?_readEEPROM,c
 11740  0011EE  EC9C  F02E         	call	_readEEPROM	;wreg free
 11741  0011F2  D33B               	goto	L20
 11742  0011F4                     l10924:
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;main.c: 2292: writeEEPROM(0x7D, val);
 11746  0011F4  6A0F               	clrf	?_writeEEPROM+1,c
 11747  0011F6  0E7D               	movlw	125
 11748  0011F8  6E0E               	movwf	?_writeEEPROM,c
 11749  0011FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11750  0011FE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11751                           
 11752                           ;main.c: 2293: rv = readEEPROM(0x7D);
 11753  001202  6A0F               	clrf	?_readEEPROM+1,c
 11754  001204  0E7D               	movlw	125
 11755  001206  6E0E               	movwf	?_readEEPROM,c
 11756  001208  EC9C  F02E         	call	_readEEPROM	;wreg free
 11757  00120C  D32E               	goto	L20
 11758  00120E                     l10926:
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;main.c: 2298: writeEEPROM(0x7E, val);
 11762  00120E  6A0F               	clrf	?_writeEEPROM+1,c
 11763  001210  0E7E               	movlw	126
 11764  001212  6E0E               	movwf	?_writeEEPROM,c
 11765  001214  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11766  001218  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11767                           
 11768                           ;main.c: 2299: rv = readEEPROM(0x7E);
 11769  00121C  6A0F               	clrf	?_readEEPROM+1,c
 11770  00121E  0E7E               	movlw	126
 11771  001220  6E0E               	movwf	?_readEEPROM,c
 11772  001222  EC9C  F02E         	call	_readEEPROM	;wreg free
 11773  001226  D321               	goto	L20
 11774  001228                     l10928:
 11775                           
 11776                           ; BSR set to: 0
 11777                           ;main.c: 2308: writeEEPROM(0x7F, val );
 11778  001228  6A0F               	clrf	?_writeEEPROM+1,c
 11779  00122A  0E7F               	movlw	127
 11780  00122C  6E0E               	movwf	?_writeEEPROM,c
 11781  00122E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11782  001232  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11783                           
 11784                           ;main.c: 2309: rv = readEEPROM(0x7F);
 11785  001236  6A0F               	clrf	?_readEEPROM+1,c
 11786  001238  0E7F               	movlw	127
 11787  00123A  6E0E               	movwf	?_readEEPROM,c
 11788  00123C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11789  001240  D314               	goto	L20
 11790  001242                     l10930:
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;main.c: 2314: writeEEPROM(0x80, val );
 11794  001242  6A0F               	clrf	?_writeEEPROM+1,c
 11795  001244  0E80               	movlw	128
 11796  001246  6E0E               	movwf	?_writeEEPROM,c
 11797  001248  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11798  00124C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11799                           
 11800                           ;main.c: 2315: rv = readEEPROM(0x80);
 11801  001250  6A0F               	clrf	?_readEEPROM+1,c
 11802  001252  0E80               	movlw	128
 11803  001254  6E0E               	movwf	?_readEEPROM,c
 11804  001256  EC9C  F02E         	call	_readEEPROM	;wreg free
 11805  00125A  D307               	goto	L20
 11806  00125C                     l10932:
 11807                           
 11808                           ; BSR set to: 0
 11809                           ;main.c: 2320: writeEEPROM(0x81, val );
 11810  00125C  6A0F               	clrf	?_writeEEPROM+1,c
 11811  00125E  0E81               	movlw	129
 11812  001260  6E0E               	movwf	?_writeEEPROM,c
 11813  001262  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11814  001266  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11815                           
 11816                           ;main.c: 2321: rv = readEEPROM(0x81);
 11817  00126A  6A0F               	clrf	?_readEEPROM+1,c
 11818  00126C  0E81               	movlw	129
 11819  00126E  6E0E               	movwf	?_readEEPROM,c
 11820  001270  EC9C  F02E         	call	_readEEPROM	;wreg free
 11821  001274  D2FA               	goto	L20
 11822  001276                     l10934:
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;main.c: 2326: writeEEPROM(0x82, val );
 11826  001276  6A0F               	clrf	?_writeEEPROM+1,c
 11827  001278  0E82               	movlw	130
 11828  00127A  6E0E               	movwf	?_writeEEPROM,c
 11829  00127C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11830  001280  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11831                           
 11832                           ;main.c: 2327: rv = readEEPROM(0x82);
 11833  001284  6A0F               	clrf	?_readEEPROM+1,c
 11834  001286  0E82               	movlw	130
 11835  001288  6E0E               	movwf	?_readEEPROM,c
 11836  00128A  EC9C  F02E         	call	_readEEPROM	;wreg free
 11837  00128E  D2ED               	goto	L20
 11838  001290                     l10936:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;main.c: 2332: writeEEPROM(0x83, val );
 11842  001290  6A0F               	clrf	?_writeEEPROM+1,c
 11843  001292  0E83               	movlw	131
 11844  001294  6E0E               	movwf	?_writeEEPROM,c
 11845  001296  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11846  00129A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11847                           
 11848                           ;main.c: 2333: rv = readEEPROM(0x83);
 11849  00129E  6A0F               	clrf	?_readEEPROM+1,c
 11850  0012A0  0E83               	movlw	131
 11851  0012A2  6E0E               	movwf	?_readEEPROM,c
 11852  0012A4  EC9C  F02E         	call	_readEEPROM	;wreg free
 11853  0012A8  D2E0               	goto	L20
 11854  0012AA                     l10938:
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;main.c: 2338: writeEEPROM(0x84, val );
 11858  0012AA  6A0F               	clrf	?_writeEEPROM+1,c
 11859  0012AC  0E84               	movlw	132
 11860  0012AE  6E0E               	movwf	?_writeEEPROM,c
 11861  0012B0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11862  0012B4  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11863                           
 11864                           ;main.c: 2339: rv = readEEPROM(0x84);
 11865  0012B8  6A0F               	clrf	?_readEEPROM+1,c
 11866  0012BA  0E84               	movlw	132
 11867  0012BC  6E0E               	movwf	?_readEEPROM,c
 11868  0012BE  EC9C  F02E         	call	_readEEPROM	;wreg free
 11869  0012C2  D2D3               	goto	L20
 11870  0012C4                     l10940:
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;main.c: 2344: writeEEPROM(0x85, val );
 11874  0012C4  6A0F               	clrf	?_writeEEPROM+1,c
 11875  0012C6  0E85               	movlw	133
 11876  0012C8  6E0E               	movwf	?_writeEEPROM,c
 11877  0012CA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11878  0012CE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11879                           
 11880                           ;main.c: 2345: rv = readEEPROM(0x85);
 11881  0012D2  6A0F               	clrf	?_readEEPROM+1,c
 11882  0012D4  0E85               	movlw	133
 11883  0012D6  6E0E               	movwf	?_readEEPROM,c
 11884  0012D8  EC9C  F02E         	call	_readEEPROM	;wreg free
 11885  0012DC  D2C6               	goto	L20
 11886  0012DE                     l10942:
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;main.c: 2350: writeEEPROM(0x86, val );
 11890  0012DE  6A0F               	clrf	?_writeEEPROM+1,c
 11891  0012E0  0E86               	movlw	134
 11892  0012E2  6E0E               	movwf	?_writeEEPROM,c
 11893  0012E4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11894  0012E8  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11895                           
 11896                           ;main.c: 2351: rv = readEEPROM(0x86);
 11897  0012EC  6A0F               	clrf	?_readEEPROM+1,c
 11898  0012EE  0E86               	movlw	134
 11899  0012F0  6E0E               	movwf	?_readEEPROM,c
 11900  0012F2  EC9C  F02E         	call	_readEEPROM	;wreg free
 11901  0012F6  D2B9               	goto	L20
 11902  0012F8                     l10944:
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;main.c: 2356: writeEEPROM(0x87, val );
 11906  0012F8  6A0F               	clrf	?_writeEEPROM+1,c
 11907  0012FA  0E87               	movlw	135
 11908  0012FC  6E0E               	movwf	?_writeEEPROM,c
 11909  0012FE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11910  001302  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11911                           
 11912                           ;main.c: 2357: rv = readEEPROM(0x87);
 11913  001306  6A0F               	clrf	?_readEEPROM+1,c
 11914  001308  0E87               	movlw	135
 11915  00130A  6E0E               	movwf	?_readEEPROM,c
 11916  00130C  EC9C  F02E         	call	_readEEPROM	;wreg free
 11917  001310  D2AC               	goto	L20
 11918  001312                     l10946:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;main.c: 2362: writeEEPROM(0x88, val );
 11922  001312  6A0F               	clrf	?_writeEEPROM+1,c
 11923  001314  0E88               	movlw	136
 11924  001316  6E0E               	movwf	?_writeEEPROM,c
 11925  001318  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11926  00131C  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11927                           
 11928                           ;main.c: 2363: rv = readEEPROM(0x88);
 11929  001320  6A0F               	clrf	?_readEEPROM+1,c
 11930  001322  0E88               	movlw	136
 11931  001324  6E0E               	movwf	?_readEEPROM,c
 11932  001326  EC9C  F02E         	call	_readEEPROM	;wreg free
 11933  00132A  D29F               	goto	L20
 11934  00132C                     l10948:
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;main.c: 2368: writeEEPROM(0x89, val );
 11938  00132C  6A0F               	clrf	?_writeEEPROM+1,c
 11939  00132E  0E89               	movlw	137
 11940  001330  6E0E               	movwf	?_writeEEPROM,c
 11941  001332  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11942  001336  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11943                           
 11944                           ;main.c: 2369: rv = readEEPROM(0x89);
 11945  00133A  6A0F               	clrf	?_readEEPROM+1,c
 11946  00133C  0E89               	movlw	137
 11947  00133E  6E0E               	movwf	?_readEEPROM,c
 11948  001340  EC9C  F02E         	call	_readEEPROM	;wreg free
 11949  001344  D292               	goto	L20
 11950  001346                     l10950:
 11951                           
 11952                           ; BSR set to: 0
 11953                           ;main.c: 2374: writeEEPROM(0x8A, val );
 11954  001346  6A0F               	clrf	?_writeEEPROM+1,c
 11955  001348  0E8A               	movlw	138
 11956  00134A  6E0E               	movwf	?_writeEEPROM,c
 11957  00134C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11958  001350  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11959                           
 11960                           ;main.c: 2375: rv = readEEPROM(0x8A);
 11961  001354  6A0F               	clrf	?_readEEPROM+1,c
 11962  001356  0E8A               	movlw	138
 11963  001358  6E0E               	movwf	?_readEEPROM,c
 11964  00135A  EC9C  F02E         	call	_readEEPROM	;wreg free
 11965  00135E  D285               	goto	L20
 11966  001360                     l10952:
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;main.c: 2384: writeEEPROM(0x8B, val );
 11970  001360  6A0F               	clrf	?_writeEEPROM+1,c
 11971  001362  0E8B               	movlw	139
 11972  001364  6E0E               	movwf	?_writeEEPROM,c
 11973  001366  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11974  00136A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11975                           
 11976                           ;main.c: 2385: rv = readEEPROM(0x8B);
 11977  00136E  6A0F               	clrf	?_readEEPROM+1,c
 11978  001370  0E8B               	movlw	139
 11979  001372  6E0E               	movwf	?_readEEPROM,c
 11980  001374  EC9C  F02E         	call	_readEEPROM	;wreg free
 11981  001378  D278               	goto	L20
 11982  00137A                     l10954:
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;main.c: 2390: writeEEPROM(0x8C, val );
 11986  00137A  6A0F               	clrf	?_writeEEPROM+1,c
 11987  00137C  0E8C               	movlw	140
 11988  00137E  6E0E               	movwf	?_writeEEPROM,c
 11989  001380  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11990  001384  EC9F  F02D         	call	_writeEEPROM	;wreg free
 11991                           
 11992                           ;main.c: 2391: rv = readEEPROM(0x8C);
 11993  001388  6A0F               	clrf	?_readEEPROM+1,c
 11994  00138A  0E8C               	movlw	140
 11995  00138C  6E0E               	movwf	?_readEEPROM,c
 11996  00138E  EC9C  F02E         	call	_readEEPROM	;wreg free
 11997  001392  D26B               	goto	L20
 11998  001394                     l10956:
 11999                           
 12000                           ; BSR set to: 0
 12001                           ;main.c: 2396: writeEEPROM(0x8D, val );
 12002  001394  6A0F               	clrf	?_writeEEPROM+1,c
 12003  001396  0E8D               	movlw	141
 12004  001398  6E0E               	movwf	?_writeEEPROM,c
 12005  00139A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12006  00139E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12007                           
 12008                           ;main.c: 2397: rv = readEEPROM(0x8D);
 12009  0013A2  6A0F               	clrf	?_readEEPROM+1,c
 12010  0013A4  0E8D               	movlw	141
 12011  0013A6  6E0E               	movwf	?_readEEPROM,c
 12012  0013A8  EC9C  F02E         	call	_readEEPROM	;wreg free
 12013  0013AC  D25E               	goto	L20
 12014  0013AE                     l10958:
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;main.c: 2402: writeEEPROM(0x8E, val );
 12018  0013AE  6A0F               	clrf	?_writeEEPROM+1,c
 12019  0013B0  0E8E               	movlw	142
 12020  0013B2  6E0E               	movwf	?_writeEEPROM,c
 12021  0013B4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12022  0013B8  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12023                           
 12024                           ;main.c: 2403: rv = readEEPROM(0x8E);
 12025  0013BC  6A0F               	clrf	?_readEEPROM+1,c
 12026  0013BE  0E8E               	movlw	142
 12027  0013C0  6E0E               	movwf	?_readEEPROM,c
 12028  0013C2  EC9C  F02E         	call	_readEEPROM	;wreg free
 12029  0013C6  D251               	goto	L20
 12030  0013C8                     l10960:
 12031                           
 12032                           ; BSR set to: 0
 12033                           ;main.c: 2408: writeEEPROM(0x8F, val );
 12034  0013C8  6A0F               	clrf	?_writeEEPROM+1,c
 12035  0013CA  0E8F               	movlw	143
 12036  0013CC  6E0E               	movwf	?_writeEEPROM,c
 12037  0013CE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12038  0013D2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12039                           
 12040                           ;main.c: 2409: rv = readEEPROM(0x8F);
 12041  0013D6  6A0F               	clrf	?_readEEPROM+1,c
 12042  0013D8  0E8F               	movlw	143
 12043  0013DA  6E0E               	movwf	?_readEEPROM,c
 12044  0013DC  EC9C  F02E         	call	_readEEPROM	;wreg free
 12045  0013E0  D244               	goto	L20
 12046  0013E2                     l10962:
 12047                           
 12048                           ; BSR set to: 0
 12049                           ;main.c: 2414: writeEEPROM(0x90, val );
 12050  0013E2  6A0F               	clrf	?_writeEEPROM+1,c
 12051  0013E4  0E90               	movlw	144
 12052  0013E6  6E0E               	movwf	?_writeEEPROM,c
 12053  0013E8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12054  0013EC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12055                           
 12056                           ;main.c: 2415: rv = readEEPROM(0x90);
 12057  0013F0  6A0F               	clrf	?_readEEPROM+1,c
 12058  0013F2  0E90               	movlw	144
 12059  0013F4  6E0E               	movwf	?_readEEPROM,c
 12060  0013F6  EC9C  F02E         	call	_readEEPROM	;wreg free
 12061  0013FA  D237               	goto	L20
 12062  0013FC                     l10964:
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;main.c: 2420: writeEEPROM(0x91, val );
 12066  0013FC  6A0F               	clrf	?_writeEEPROM+1,c
 12067  0013FE  0E91               	movlw	145
 12068  001400  6E0E               	movwf	?_writeEEPROM,c
 12069  001402  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12070  001406  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12071                           
 12072                           ;main.c: 2421: rv = readEEPROM(0x91);
 12073  00140A  6A0F               	clrf	?_readEEPROM+1,c
 12074  00140C  0E91               	movlw	145
 12075  00140E  6E0E               	movwf	?_readEEPROM,c
 12076  001410  EC9C  F02E         	call	_readEEPROM	;wreg free
 12077  001414  D22A               	goto	L20
 12078  001416                     l10966:
 12079                           
 12080                           ; BSR set to: 0
 12081                           ;main.c: 2426: writeEEPROM(0x92, val );
 12082  001416  6A0F               	clrf	?_writeEEPROM+1,c
 12083  001418  0E92               	movlw	146
 12084  00141A  6E0E               	movwf	?_writeEEPROM,c
 12085  00141C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12086  001420  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12087                           
 12088                           ;main.c: 2427: rv = readEEPROM(0x92);
 12089  001424  6A0F               	clrf	?_readEEPROM+1,c
 12090  001426  0E92               	movlw	146
 12091  001428  6E0E               	movwf	?_readEEPROM,c
 12092  00142A  EC9C  F02E         	call	_readEEPROM	;wreg free
 12093  00142E  D21D               	goto	L20
 12094  001430                     l10968:
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;main.c: 2432: writeEEPROM(0x93, val );
 12098  001430  6A0F               	clrf	?_writeEEPROM+1,c
 12099  001432  0E93               	movlw	147
 12100  001434  6E0E               	movwf	?_writeEEPROM,c
 12101  001436  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12102  00143A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12103                           
 12104                           ;main.c: 2433: rv = readEEPROM(0x93);
 12105  00143E  6A0F               	clrf	?_readEEPROM+1,c
 12106  001440  0E93               	movlw	147
 12107  001442  6E0E               	movwf	?_readEEPROM,c
 12108  001444  EC9C  F02E         	call	_readEEPROM	;wreg free
 12109  001448  D210               	goto	L20
 12110  00144A                     l10970:
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;main.c: 2438: writeEEPROM(0x94, val );
 12114  00144A  6A0F               	clrf	?_writeEEPROM+1,c
 12115  00144C  0E94               	movlw	148
 12116  00144E  6E0E               	movwf	?_writeEEPROM,c
 12117  001450  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12118  001454  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12119                           
 12120                           ;main.c: 2439: rv = readEEPROM(0x94);
 12121  001458  6A0F               	clrf	?_readEEPROM+1,c
 12122  00145A  0E94               	movlw	148
 12123  00145C  6E0E               	movwf	?_readEEPROM,c
 12124  00145E  EC9C  F02E         	call	_readEEPROM	;wreg free
 12125  001462  D203               	goto	L20
 12126  001464                     l10972:
 12127                           
 12128                           ; BSR set to: 0
 12129                           ;main.c: 2444: writeEEPROM(0x95, val );
 12130  001464  6A0F               	clrf	?_writeEEPROM+1,c
 12131  001466  0E95               	movlw	149
 12132  001468  6E0E               	movwf	?_writeEEPROM,c
 12133  00146A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12134  00146E  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12135                           
 12136                           ;main.c: 2445: rv = readEEPROM(0x95);
 12137  001472  6A0F               	clrf	?_readEEPROM+1,c
 12138  001474  0E95               	movlw	149
 12139  001476  6E0E               	movwf	?_readEEPROM,c
 12140  001478  EC9C  F02E         	call	_readEEPROM	;wreg free
 12141  00147C  D1F6               	goto	L20
 12142  00147E                     l10974:
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;main.c: 2450: writeEEPROM(0x96, val );
 12146  00147E  6A0F               	clrf	?_writeEEPROM+1,c
 12147  001480  0E96               	movlw	150
 12148  001482  6E0E               	movwf	?_writeEEPROM,c
 12149  001484  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12150  001488  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12151                           
 12152                           ;main.c: 2451: rv = readEEPROM(0x96);
 12153  00148C  6A0F               	clrf	?_readEEPROM+1,c
 12154  00148E  0E96               	movlw	150
 12155  001490  6E0E               	movwf	?_readEEPROM,c
 12156  001492  EC9C  F02E         	call	_readEEPROM	;wreg free
 12157  001496  D1E9               	goto	L20
 12158  001498                     l10976:
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;main.c: 2460: writeEEPROM(0x97, val);
 12162  001498  6A0F               	clrf	?_writeEEPROM+1,c
 12163  00149A  0E97               	movlw	151
 12164  00149C  6E0E               	movwf	?_writeEEPROM,c
 12165  00149E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12166  0014A2  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12167                           
 12168                           ;main.c: 2461: rv = readEEPROM(0x97);
 12169  0014A6  6A0F               	clrf	?_readEEPROM+1,c
 12170  0014A8  0E97               	movlw	151
 12171  0014AA  6E0E               	movwf	?_readEEPROM,c
 12172  0014AC  EC9C  F02E         	call	_readEEPROM	;wreg free
 12173  0014B0  D1DC               	goto	L20
 12174  0014B2                     l10978:
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;main.c: 2466: writeEEPROM(0x98, val);
 12178  0014B2  6A0F               	clrf	?_writeEEPROM+1,c
 12179  0014B4  0E98               	movlw	152
 12180  0014B6  6E0E               	movwf	?_writeEEPROM,c
 12181  0014B8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12182  0014BC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12183                           
 12184                           ;main.c: 2467: rv = readEEPROM(0x98);
 12185  0014C0  6A0F               	clrf	?_readEEPROM+1,c
 12186  0014C2  0E98               	movlw	152
 12187  0014C4  6E0E               	movwf	?_readEEPROM,c
 12188  0014C6  EC9C  F02E         	call	_readEEPROM	;wreg free
 12189  0014CA  D1CF               	goto	L20
 12190  0014CC                     l10980:
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;main.c: 2472: writeEEPROM(0x99, val);
 12194  0014CC  6A0F               	clrf	?_writeEEPROM+1,c
 12195  0014CE  0E99               	movlw	153
 12196  0014D0  6E0E               	movwf	?_writeEEPROM,c
 12197  0014D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12198  0014D6  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12199  0014DA  6A0F               	clrf	?_readEEPROM+1,c
 12200  0014DC  0E99               	movlw	153
 12201  0014DE  6E0E               	movwf	?_readEEPROM,c
 12202  0014E0  EC9C  F02E         	call	_readEEPROM	;wreg free
 12203  0014E4                     l519:
 12204                           
 12205                           ;main.c: 2477: writeEEPROM(0x9A, val);
 12206  0014E4  6A0F               	clrf	?_writeEEPROM+1,c
 12207  0014E6  0E9A               	movlw	154
 12208  0014E8  6E0E               	movwf	?_writeEEPROM,c
 12209  0014EA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12210  0014EE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12211                           
 12212                           ;main.c: 2478: rv = readEEPROM(0x9A);
 12213  0014F2  6A0F               	clrf	?_readEEPROM+1,c
 12214  0014F4  0E9A               	movlw	154
 12215  0014F6  6E0E               	movwf	?_readEEPROM,c
 12216  0014F8  EC9C  F02E         	call	_readEEPROM	;wreg free
 12217  0014FC  D1B6               	goto	L20
 12218  0014FE                     l10982:
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;main.c: 2483: writeEEPROM(0x9B, val);
 12222  0014FE  6A0F               	clrf	?_writeEEPROM+1,c
 12223  001500  0E9B               	movlw	155
 12224  001502  6E0E               	movwf	?_writeEEPROM,c
 12225  001504  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12226  001508  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12227                           
 12228                           ;main.c: 2484: rv = readEEPROM(0x9B);
 12229  00150C  6A0F               	clrf	?_readEEPROM+1,c
 12230  00150E  0E9B               	movlw	155
 12231  001510  6E0E               	movwf	?_readEEPROM,c
 12232  001512  EC9C  F02E         	call	_readEEPROM	;wreg free
 12233  001516  D1A9               	goto	L20
 12234  001518                     l10984:
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;main.c: 2489: writeEEPROM(0x9C, val);
 12238  001518  6A0F               	clrf	?_writeEEPROM+1,c
 12239  00151A  0E9C               	movlw	156
 12240  00151C  6E0E               	movwf	?_writeEEPROM,c
 12241  00151E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12242  001522  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12243                           
 12244                           ;main.c: 2490: rv = readEEPROM(0x9C);
 12245  001526  6A0F               	clrf	?_readEEPROM+1,c
 12246  001528  0E9C               	movlw	156
 12247  00152A  6E0E               	movwf	?_readEEPROM,c
 12248  00152C  EC9C  F02E         	call	_readEEPROM	;wreg free
 12249  001530  D19C               	goto	L20
 12250  001532                     l522:
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;main.c: 2495: rv = 0;
 12254  001532  6A24               	clrf	vscp_writeAppReg@rv,c
 12255                           
 12256                           ;main.c: 2496: break;
 12257  001534  D19B               	goto	l11020
 12258  001536                     l10986:
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;main.c: 2504: writeEEPROM(0xF2, val);
 12262  001536  6A0F               	clrf	?_writeEEPROM+1,c
 12263  001538  0EF2               	movlw	242
 12264  00153A  6E0E               	movwf	?_writeEEPROM,c
 12265  00153C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12266  001540  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12267                           
 12268                           ;main.c: 2505: rv = readEEPROM(0xF2);
 12269  001544  6A0F               	clrf	?_readEEPROM+1,c
 12270  001546  0EF2               	movlw	242
 12271  001548  6E0E               	movwf	?_readEEPROM,c
 12272  00154A  EC9C  F02E         	call	_readEEPROM	;wreg free
 12273  00154E  D18D               	goto	L20
 12274  001550                     l10988:
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;main.c: 2509: writeEEPROM(0xF3, val);
 12278  001550  6A0F               	clrf	?_writeEEPROM+1,c
 12279  001552  0EF3               	movlw	243
 12280  001554  6E0E               	movwf	?_writeEEPROM,c
 12281  001556  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12282  00155A  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12283                           
 12284                           ;main.c: 2510: rv = readEEPROM(0xF3);
 12285  00155E  6A0F               	clrf	?_readEEPROM+1,c
 12286  001560  0EF3               	movlw	243
 12287  001562  6E0E               	movwf	?_readEEPROM,c
 12288  001564  EC9C  F02E         	call	_readEEPROM	;wreg free
 12289  001568  D180               	goto	L20
 12290  00156A                     l10990:
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;main.c: 2514: rv = ~val;
 12294  00156A  1C21               	comf	vscp_writeAppReg@val,w,c
 12295  00156C  D17E               	goto	L20
 12296  00156E                     l10994:
 12297                           
 12298                           ; BSR set to: 0
 12299  00156E  5023               	movf	vscp_writeAppReg@reg,w,c
 12300                           
 12301                           ; Switch size 1, requested type "speed"
 12302                           ; Number of cases is 96, Range of values is 0 to 119
 12303                           ; switch strategies available:
 12304                           ; Name         Instructions Cycles
 12305                           ; simple_byte          289   145 (average)
 12306                           ;	Chosen strategy is simple_byte
 12307  001570  E102 EFC2  F005    	bz	l10804
 12308  001576  0A01               	xorlw	1	; case 1
 12309  001578  E102 EFD0  F005    	bz	l10806
 12310  00157E  0A03               	xorlw	3	; case 2
 12311  001580  E102 EFDE  F005    	bz	l10808
 12312  001586  0A01               	xorlw	1	; case 3
 12313  001588  E102 EFEC  F005    	bz	l10810
 12314  00158E  0A07               	xorlw	7	; case 4
 12315  001590  E102 EFFA  F005    	bz	l10812
 12316  001596  0A01               	xorlw	1	; case 5
 12317  001598  E102 EF08  F006    	bz	l10814
 12318  00159E  0A03               	xorlw	3	; case 6
 12319  0015A0  E102 EF16  F006    	bz	l10816
 12320  0015A6  0A01               	xorlw	1	; case 7
 12321  0015A8  E102 EF24  F006    	bz	l10818
 12322  0015AE  0A13               	xorlw	19	; case 20
 12323  0015B0  E102 EF32  F006    	bz	l10820
 12324  0015B6  0A01               	xorlw	1	; case 21
 12325  0015B8  E102 EF40  F006    	bz	l10822
 12326  0015BE  0A03               	xorlw	3	; case 22
 12327  0015C0  E102 EF4E  F006    	bz	l10824
 12328  0015C6  0A01               	xorlw	1	; case 23
 12329  0015C8  E102 EF5C  F006    	bz	l10826
 12330  0015CE  0A0F               	xorlw	15	; case 24
 12331  0015D0  E102 EF6A  F006    	bz	l10828
 12332  0015D6  0A01               	xorlw	1	; case 25
 12333  0015D8  E102 EF78  F006    	bz	l10830
 12334  0015DE  0A3F               	xorlw	63	; case 38
 12335  0015E0  E102 EF86  F006    	bz	l10832
 12336  0015E6  0A01               	xorlw	1	; case 39
 12337  0015E8  E102 EF94  F006    	bz	l10834
 12338  0015EE  0A0F               	xorlw	15	; case 40
 12339  0015F0  E102 EFA2  F006    	bz	l10836
 12340  0015F6  0A01               	xorlw	1	; case 41
 12341  0015F8  E102 EFB0  F006    	bz	l10838
 12342  0015FE  0A03               	xorlw	3	; case 42
 12343  001600  E102 EFBE  F006    	bz	l10840
 12344  001606  0A01               	xorlw	1	; case 43
 12345  001608  E102 EFCC  F006    	bz	l10842
 12346  00160E  0A07               	xorlw	7	; case 44
 12347  001610  E102 EFDA  F006    	bz	l10844
 12348  001616  0A01               	xorlw	1	; case 45
 12349  001618  E102 EFE8  F006    	bz	l10846
 12350  00161E  0A03               	xorlw	3	; case 46
 12351  001620  E102 EFF6  F006    	bz	l10848
 12352  001626  0A01               	xorlw	1	; case 47
 12353  001628  E102 EF04  F007    	bz	l10850
 12354  00162E  0A1F               	xorlw	31	; case 48
 12355  001630  E102 EF12  F007    	bz	l10852
 12356  001636  0A01               	xorlw	1	; case 49
 12357  001638  E101 D402          	bz	l10854
 12358  00163C  0A03               	xorlw	3	; case 50
 12359  00163E  E101 D40D          	bz	l10856
 12360  001642  0A01               	xorlw	1	; case 51
 12361  001644  E101 D418          	bz	l10858
 12362  001648  0A07               	xorlw	7	; case 52
 12363  00164A  E101 D423          	bz	l10860
 12364  00164E  0A01               	xorlw	1	; case 53
 12365  001650  E101 D42E          	bz	l10862
 12366  001654  0A03               	xorlw	3	; case 54
 12367  001656  E101 D439          	bz	l10864
 12368  00165A  0A01               	xorlw	1	; case 55
 12369  00165C  E101 D444          	bz	l10866
 12370  001660  0A0F               	xorlw	15	; case 56
 12371  001662  E101 D44F          	bz	l10868
 12372  001666  0A01               	xorlw	1	; case 57
 12373  001668  E101 D45A          	bz	l10870
 12374  00166C  0A03               	xorlw	3	; case 58
 12375  00166E  E101 D465          	bz	l10872
 12376  001672  0A01               	xorlw	1	; case 59
 12377  001674  E101 D470          	bz	l10874
 12378  001678  0A07               	xorlw	7	; case 60
 12379  00167A  E101 D47B          	bz	l10876
 12380  00167E  0A01               	xorlw	1	; case 61
 12381  001680  E101 D486          	bz	l10878
 12382  001684  0A03               	xorlw	3	; case 62
 12383  001686  E101 D491          	bz	l10880
 12384  00168A  0A01               	xorlw	1	; case 63
 12385  00168C  E101 D49C          	bz	l10882
 12386  001690  0A7F               	xorlw	127	; case 64
 12387  001692  E101 D4A7          	bz	l10884
 12388  001696  0A01               	xorlw	1	; case 65
 12389  001698  E101 D4B2          	bz	l10886
 12390  00169C  0A03               	xorlw	3	; case 66
 12391  00169E  E101 D4BD          	bz	l10888
 12392  0016A2  0A01               	xorlw	1	; case 67
 12393  0016A4  E101 D4C8          	bz	l10890
 12394  0016A8  0A07               	xorlw	7	; case 68
 12395  0016AA  E101 D4D3          	bz	l10892
 12396  0016AE  0A01               	xorlw	1	; case 69
 12397  0016B0  E101 D4DD          	bz	l10894
 12398  0016B4  0A03               	xorlw	3	; case 70
 12399  0016B6  E101 D4E7          	bz	l10896
 12400  0016BA  0A01               	xorlw	1	; case 71
 12401  0016BC  E101 D4F1          	bz	l10898
 12402  0016C0  0A0F               	xorlw	15	; case 72
 12403  0016C2  E101 D4FB          	bz	l10900
 12404  0016C6  0A01               	xorlw	1	; case 73
 12405  0016C8  E101 D505          	bz	l10902
 12406  0016CC  0A03               	xorlw	3	; case 74
 12407  0016CE  E101 D50F          	bz	l10904
 12408  0016D2  0A01               	xorlw	1	; case 75
 12409  0016D4  E101 D519          	bz	l10906
 12410  0016D8  0A07               	xorlw	7	; case 76
 12411  0016DA  E101 D523          	bz	l10908
 12412  0016DE  0A01               	xorlw	1	; case 77
 12413  0016E0  E101 D52D          	bz	l10910
 12414  0016E4  0A03               	xorlw	3	; case 78
 12415  0016E6  E101 D537          	bz	l10912
 12416  0016EA  0A01               	xorlw	1	; case 79
 12417  0016EC  E101 D541          	bz	l10914
 12418  0016F0  0A1F               	xorlw	31	; case 80
 12419  0016F2  E101 D54B          	bz	l10916
 12420  0016F6  0A01               	xorlw	1	; case 81
 12421  0016F8  E101 D555          	bz	l10918
 12422  0016FC  0A03               	xorlw	3	; case 82
 12423  0016FE  E101 D55F          	bz	l10920
 12424  001702  0A01               	xorlw	1	; case 83
 12425  001704  E101 D569          	bz	l10922
 12426  001708  0A07               	xorlw	7	; case 84
 12427  00170A  E101 D573          	bz	l10924
 12428  00170E  0A01               	xorlw	1	; case 85
 12429  001710  E101 D57D          	bz	l10926
 12430  001714  0A03               	xorlw	3	; case 86
 12431  001716  E101 D587          	bz	l10928
 12432  00171A  0A01               	xorlw	1	; case 87
 12433  00171C  E101 D591          	bz	l10930
 12434  001720  0A0F               	xorlw	15	; case 88
 12435  001722  E101 D59B          	bz	l10932
 12436  001726  0A01               	xorlw	1	; case 89
 12437  001728  E101 D5A5          	bz	l10934
 12438  00172C  0A03               	xorlw	3	; case 90
 12439  00172E  E101 D5AF          	bz	l10936
 12440  001732  0A01               	xorlw	1	; case 91
 12441  001734  E101 D5B9          	bz	l10938
 12442  001738  0A07               	xorlw	7	; case 92
 12443  00173A  E101 D5C3          	bz	l10940
 12444  00173E  0A01               	xorlw	1	; case 93
 12445  001740  E101 D5CD          	bz	l10942
 12446  001744  0A03               	xorlw	3	; case 94
 12447  001746  E101 D5D7          	bz	l10944
 12448  00174A  0A01               	xorlw	1	; case 95
 12449  00174C  E101 D5E1          	bz	l10946
 12450  001750  0A3F               	xorlw	63	; case 96
 12451  001752  E101 D5EB          	bz	l10948
 12452  001756  0A01               	xorlw	1	; case 97
 12453  001758  E101 D5F5          	bz	l10950
 12454  00175C  0A03               	xorlw	3	; case 98
 12455  00175E  E101 D5FF          	bz	l10952
 12456  001762  0A01               	xorlw	1	; case 99
 12457  001764  E101 D609          	bz	l10954
 12458  001768  0A07               	xorlw	7	; case 100
 12459  00176A  E101 D613          	bz	l10956
 12460  00176E  0A01               	xorlw	1	; case 101
 12461  001770  E101 D61D          	bz	l10958
 12462  001774  0A03               	xorlw	3	; case 102
 12463  001776  E101 D627          	bz	l10960
 12464  00177A  0A01               	xorlw	1	; case 103
 12465  00177C  E101 D631          	bz	l10962
 12466  001780  0A0F               	xorlw	15	; case 104
 12467  001782  E101 D63B          	bz	l10964
 12468  001786  0A01               	xorlw	1	; case 105
 12469  001788  E101 D645          	bz	l10966
 12470  00178C  0A03               	xorlw	3	; case 106
 12471  00178E  E101 D64F          	bz	l10968
 12472  001792  0A01               	xorlw	1	; case 107
 12473  001794  E101 D659          	bz	l10970
 12474  001798  0A07               	xorlw	7	; case 108
 12475  00179A  E101 D663          	bz	l10972
 12476  00179E  0A01               	xorlw	1	; case 109
 12477  0017A0  E101 D66D          	bz	l10974
 12478  0017A4  0A03               	xorlw	3	; case 110
 12479  0017A6  E101 D677          	bz	l10976
 12480  0017AA  0A01               	xorlw	1	; case 111
 12481  0017AC  E101 D681          	bz	l10978
 12482  0017B0  0A1F               	xorlw	31	; case 112
 12483  0017B2  E101 D68B          	bz	l10980
 12484  0017B6  0A01               	xorlw	1	; case 113
 12485  0017B8  E101 D694          	bz	l519
 12486  0017BC  0A03               	xorlw	3	; case 114
 12487  0017BE  E101 D69E          	bz	l10982
 12488  0017C2  0A01               	xorlw	1	; case 115
 12489  0017C4  E101 D6A8          	bz	l10984
 12490  0017C8  0A07               	xorlw	7	; case 116
 12491  0017CA  E101 D6B2          	bz	l522
 12492  0017CE  0A01               	xorlw	1	; case 117
 12493  0017D0  E101 D6AF          	bz	l522
 12494  0017D4  0A03               	xorlw	3	; case 118
 12495  0017D6  E101 D6AE          	bz	l10986
 12496  0017DA  0A01               	xorlw	1	; case 119
 12497  0017DC  E101 D6B8          	bz	l10988
 12498  0017E0  D6C4               	goto	l10990
 12499  0017E2                     l10996:
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;main.c: 2518: else if (1 == vscp_page_select) {
 12503  0017E2  0446               	decf	_vscp_page_select,w,c
 12504  0017E4  1047               	iorwf	_vscp_page_select+1,w,c
 12505  0017E6  E142               	bnz	l11020
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;main.c: 2521: if (reg < 72) {
 12509  0017E8  0E48               	movlw	72
 12510  0017EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12511  0017EC  D016               	goto	l11004
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;main.c: 2522: writeEEPROM(0xAA + reg, val);
 12515  0017EE  0EAA               	movlw	170
 12516  0017F0  2423               	addwf	vscp_writeAppReg@reg,w,c
 12517  0017F2  6E0E               	movwf	?_writeEEPROM,c
 12518  0017F4  6A0F               	clrf	?_writeEEPROM+1,c
 12519  0017F6  0E00               	movlw	0
 12520  0017F8  220F               	addwfc	?_writeEEPROM+1,f,c
 12521  0017FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12522  0017FE  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12523                           
 12524                           ;main.c: 2523: rv = readEEPROM(0xAA + reg );
 12525  001802  0EAA               	movlw	170
 12526  001804  2423               	addwf	vscp_writeAppReg@reg,w,c
 12527  001806  6E0E               	movwf	?_readEEPROM,c
 12528  001808  6A0F               	clrf	?_readEEPROM+1,c
 12529  00180A  0E00               	movlw	0
 12530  00180C  220F               	addwfc	?_readEEPROM+1,f,c
 12531  00180E  EC9C  F02E         	call	_readEEPROM	;wreg free
 12532  001812  6E24               	movwf	vscp_writeAppReg@rv,c
 12533                           
 12534                           ;main.c: 2524: writeCoeffs2Ram();
 12535  001814  EC13  F028         	call	_writeCoeffs2Ram	;wreg free
 12536                           
 12537                           ;main.c: 2525: }
 12538  001818  D029               	goto	l11020
 12539  00181A                     l11004:
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;main.c: 2527: else if (reg < 84) {
 12543  00181A  0E54               	movlw	84
 12544  00181C  6023               	cpfslt	vscp_writeAppReg@reg,c
 12545  00181E  D010               	goto	l11016
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;main.c: 2529: uint8_t pos = reg - 72;
 12549  001820  5023               	movf	vscp_writeAppReg@reg,w,c
 12550  001822  0FB8               	addlw	184
 12551  001824  6E22               	movwf	vscp_writeAppReg@pos,c
 12552                           
 12553                           ; BSR set to: 0
 12554                           ;main.c: 2530: if ( pos % 2 ) {
 12555  001826  A022               	btfss	vscp_writeAppReg@pos,0,c
 12556  001828  D002               	goto	l11012
 12557                           
 12558                           ; BSR set to: 0
 12559                           ;main.c: 2531: pos--;
 12560  00182A  0622               	decf	vscp_writeAppReg@pos,f,c
 12561                           
 12562                           ;main.c: 2532: }
 12563  00182C  D001               	goto	l11014
 12564  00182E                     l11012:
 12565                           
 12566                           ; BSR set to: 0
 12567                           ;main.c: 2533: else {
 12568                           ;main.c: 2534: pos++;
 12569  00182E  2A22               	incf	vscp_writeAppReg@pos,f,c
 12570  001830                     l11014:
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;main.c: 2535: }
 12574                           ;main.c: 2536: rv = adc[ pos ];
 12575  001830  0E7E               	movlw	low _adc
 12576  001832  2422               	addwf	vscp_writeAppReg@pos,w,c
 12577  001834  6ED9               	movwf	fsr2l,c
 12578  001836  6ADA               	clrf	fsr2h,c
 12579  001838  0E01               	movlw	high _adc
 12580  00183A  22DA               	addwfc	fsr2h,f,c
 12581  00183C  50DF               	movf	indf2,w,c
 12582  00183E  D015               	goto	L20
 12583  001840                     l11016:
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;main.c: 2539: else if (reg < 98) {
 12587  001840  0E62               	movlw	98
 12588  001842  6023               	cpfslt	vscp_writeAppReg@reg,c
 12589  001844  D013               	goto	l11020
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;main.c: 2540: writeEEPROM( 0x9E + reg - 84, val );
 12593  001846  0E4A               	movlw	74
 12594  001848  2423               	addwf	vscp_writeAppReg@reg,w,c
 12595  00184A  6E0E               	movwf	?_writeEEPROM,c
 12596  00184C  6A0F               	clrf	?_writeEEPROM+1,c
 12597  00184E  0E00               	movlw	0
 12598  001850  220F               	addwfc	?_writeEEPROM+1,f,c
 12599  001852  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12600  001856  EC9F  F02D         	call	_writeEEPROM	;wreg free
 12601                           
 12602                           ;main.c: 2541: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12603  00185A  0E4A               	movlw	74
 12604  00185C  2423               	addwf	vscp_writeAppReg@reg,w,c
 12605  00185E  6E0E               	movwf	?_readEEPROM,c
 12606  001860  6A0F               	clrf	?_readEEPROM+1,c
 12607  001862  0E00               	movlw	0
 12608  001864  220F               	addwfc	?_readEEPROM+1,f,c
 12609  001866  EC9C  F02E         	call	_readEEPROM	;wreg free
 12610  00186A                     L20:
 12611  00186A  6E24               	movwf	vscp_writeAppReg@rv,c
 12612  00186C                     l11020:
 12613                           
 12614                           ;main.c: 2542: }
 12615                           ;main.c: 2543: }
 12616                           ;main.c: 2545: return rv;
 12617  00186C  5024               	movf	vscp_writeAppReg@rv,w,c
 12618  00186E  0012               	return	
 12619  001870                     __end_of_vscp_writeAppReg:
 12620                           	opt stack 0
 12621                           tblptru	equ	0xFF8
 12622                           tblptrh	equ	0xFF7
 12623                           tblptrl	equ	0xFF6
 12624                           tablat	equ	0xFF5
 12625                           prodh	equ	0xFF4
 12626                           prodl	equ	0xFF3
 12627                           postinc0	equ	0xFEE
 12628                           wreg	equ	0xFE8
 12629                           postdec1	equ	0xFE5
 12630                           fsr1h	equ	0xFE2
 12631                           fsr1l	equ	0xFE1
 12632                           indf2	equ	0xFDF
 12633                           postinc2	equ	0xFDE
 12634                           postdec2	equ	0xFDD
 12635                           fsr2h	equ	0xFDA
 12636                           fsr2l	equ	0xFD9
 12637                           status	equ	0xFD8
 12638                           
 12639 ;; *************** function _vscp_readRegister *****************
 12640 ;; Defined at:
 12641 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12642 ;; Parameters:    Size  Location     Type
 12643 ;;  reg             1    wreg     unsigned char 
 12644 ;; Auto vars:     Size  Location     Type
 12645 ;;  reg             1   35[COMRAM] unsigned char 
 12646 ;; Return value:  Size  Location     Type
 12647 ;;                  1    wreg      unsigned char 
 12648 ;; Registers used:
 12649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12650 ;; Tracked objects:
 12651 ;;		On entry : F/0
 12652 ;;		On exit  : 0/0
 12653 ;;		Unchanged: 0/0
 12654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12655 ;;      Params:         0       0       0       0       0       0       0
 12656 ;;      Locals:         1       0       0       0       0       0       0
 12657 ;;      Temps:          0       0       0       0       0       0       0
 12658 ;;      Totals:         1       0       0       0       0       0       0
 12659 ;;Total ram usage:        1 bytes
 12660 ;; Hardware stack levels used:    1
 12661 ;; Hardware stack levels required when called:    5
 12662 ;; This function calls:
 12663 ;;		_vscp_readAppReg
 12664 ;;		_vscp_readStdReg
 12665 ;; This function is called by:
 12666 ;;		_vscp_handleProtocolEvent
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           	psect	text43
 12671  005C50                     __ptext43:
 12672                           	opt stack 0
 12673  005C50                     _vscp_readRegister:
 12674                           	opt stack 24
 12675                           
 12676                           ;incstack = 0
 12677                           ;incstack = 0
 12678                           ;vscp_readRegister@reg stored from wreg
 12679  005C50  CFE8 F024          	movff	wreg,vscp_readRegister@reg
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12683  005C54  0E7F               	movlw	127
 12684  005C56  6424               	cpfsgt	vscp_readRegister@reg,c
 12685  005C58  D004               	goto	l11268
 12686                           
 12687                           ; BSR set to: 0
 12688                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12689  005C5A  5024               	movf	vscp_readRegister@reg,w,c
 12690  005C5C  EC32  F01F         	call	_vscp_readStdReg
 12691  005C60  D003               	goto	l1107
 12692  005C62                     l11268:
 12693                           
 12694                           ; BSR set to: 0
 12695                           ;vscp_firmware.c: 565: else {
 12696                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12697  005C62  5024               	movf	vscp_readRegister@reg,w,c
 12698  005C64  EC76  F011         	call	_vscp_readAppReg
 12699  005C68                     l1107:
 12700  005C68  0012               	return	
 12701  005C6A                     __end_of_vscp_readRegister:
 12702                           	opt stack 0
 12703                           tblptru	equ	0xFF8
 12704                           tblptrh	equ	0xFF7
 12705                           tblptrl	equ	0xFF6
 12706                           tablat	equ	0xFF5
 12707                           prodh	equ	0xFF4
 12708                           prodl	equ	0xFF3
 12709                           postinc0	equ	0xFEE
 12710                           wreg	equ	0xFE8
 12711                           postdec1	equ	0xFE5
 12712                           fsr1h	equ	0xFE2
 12713                           fsr1l	equ	0xFE1
 12714                           indf2	equ	0xFDF
 12715                           postinc2	equ	0xFDE
 12716                           postdec2	equ	0xFDD
 12717                           fsr2h	equ	0xFDA
 12718                           fsr2l	equ	0xFD9
 12719                           status	equ	0xFD8
 12720                           
 12721 ;; *************** function _vscp_readStdReg *****************
 12722 ;; Defined at:
 12723 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;  reg             1    wreg     unsigned char 
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;  reg             1   34[COMRAM] unsigned char 
 12728 ;;  code            4   27[COMRAM] unsigned long 
 12729 ;;  idx             1   32[COMRAM] unsigned char 
 12730 ;;  code            4   23[COMRAM] unsigned long 
 12731 ;;  idx             1   31[COMRAM] unsigned char 
 12732 ;;  rv              1   33[COMRAM] unsigned char 
 12733 ;; Return value:  Size  Location     Type
 12734 ;;                  1    wreg      unsigned char 
 12735 ;; Registers used:
 12736 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12737 ;; Tracked objects:
 12738 ;;		On entry : F/0
 12739 ;;		On exit  : 0/0
 12740 ;;		Unchanged: 0/0
 12741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12742 ;;      Params:         0       0       0       0       0       0       0
 12743 ;;      Locals:        12       0       0       0       0       0       0
 12744 ;;      Temps:          5       0       0       0       0       0       0
 12745 ;;      Totals:        17       0       0       0       0       0       0
 12746 ;;Total ram usage:       17 bytes
 12747 ;; Hardware stack levels used:    1
 12748 ;; Hardware stack levels required when called:    4
 12749 ;; This function calls:
 12750 ;;		_vscp_getMajorVersion
 12751 ;;		_vscp_getMinorVersion
 12752 ;;		_vscp_getSubMinorVersion
 12753 ;;		_vscp_getGUID
 12754 ;;		_vscp_getMDF_URL
 12755 ;;		_vscp_getUserID
 12756 ;;		_vscp_getManufacturerId
 12757 ;;		_vscp_getBootLoaderAlgorithm
 12758 ;;		_vscp_getBufferSize
 12759 ;;		_vscp_getRegisterPagesUsed
 12760 ;;		_vscp_getFamilyCode
 12761 ;;		_vscp_getFamilyType
 12762 ;; This function is called by:
 12763 ;;		_vscp_readRegister
 12764 ;;		_vscp_handleProtocolEvent
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text44
 12769  003E64                     __ptext44:
 12770                           	opt stack 0
 12771  003E64                     _vscp_readStdReg:
 12772                           	opt stack 25
 12773                           
 12774                           ;incstack = 0
 12775                           ;incstack = 0
 12776                           ;vscp_readStdReg@reg stored from wreg
 12777  003E64  CFE8 F023          	movff	wreg,vscp_readStdReg@reg
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12781  003E68  6A22               	clrf	vscp_readStdReg@rv,c
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12785  003E6A  5023               	movf	vscp_readStdReg@reg,w,c
 12786  003E6C  0A80               	xorlw	128
 12787  003E6E  E104               	bnz	l11278
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12791  003E70  C04A  F022         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12792                           
 12793                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12794  003E74  6A4A               	clrf	_vscp_alarmstatus,c
 12795                           
 12796                           ;vscp_firmware.c: 584: }
 12797  003E76  D0CB               	goto	l11366
 12798  003E78                     l11278:
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12802  003E78  5023               	movf	vscp_readStdReg@reg,w,c
 12803  003E7A  0A81               	xorlw	129
 12804  003E7C  E102               	bnz	l11282
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;vscp_firmware.c: 588: rv = 1;
 12808  003E7E  0E01               	movlw	1
 12809  003E80  D081               	goto	L31
 12810  003E82                     l11282:
 12811                           
 12812                           ; BSR set to: 0
 12813                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12814  003E82  5023               	movf	vscp_readStdReg@reg,w,c
 12815  003E84  0A82               	xorlw	130
 12816  003E86  E102               	bnz	l11286
 12817                           
 12818                           ; BSR set to: 0
 12819                           ;vscp_firmware.c: 594: rv = 5;
 12820  003E88  0E05               	movlw	5
 12821  003E8A  D07C               	goto	L31
 12822  003E8C                     l11286:
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12826  003E8C  5023               	movf	vscp_readStdReg@reg,w,c
 12827  003E8E  0A83               	xorlw	131
 12828  003E90  E102               	bnz	l11290
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;vscp_firmware.c: 600: rv = 0;
 12832  003E92  6A22               	clrf	vscp_readStdReg@rv,c
 12833                           
 12834                           ;vscp_firmware.c: 602: }
 12835  003E94  D0BC               	goto	l11366
 12836  003E96                     l11290:
 12837                           
 12838                           ; BSR set to: 0
 12839                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 12840  003E96  5023               	movf	vscp_readStdReg@reg,w,c
 12841  003E98  0A94               	xorlw	148
 12842  003E9A  E103               	bnz	l11294
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 12846  003E9C  EC00  F02F         	call	_vscp_getMajorVersion	;wreg free
 12847  003EA0  D071               	goto	L31
 12848  003EA2                     l11294:
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 12852  003EA2  5023               	movf	vscp_readStdReg@reg,w,c
 12853  003EA4  0A95               	xorlw	149
 12854  003EA6  E103               	bnz	l11298
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 12858  003EA8  ECFF  F02E         	call	_vscp_getMinorVersion	;wreg free
 12859  003EAC  D06B               	goto	L31
 12860  003EAE                     l11298:
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 12864  003EAE  5023               	movf	vscp_readStdReg@reg,w,c
 12865  003EB0  0A96               	xorlw	150
 12866  003EB2  E103               	bnz	l11302
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 12870  003EB4  ECFE  F02E         	call	_vscp_getSubMinorVersion	;wreg free
 12871  003EB8  D065               	goto	L31
 12872  003EBA                     l11302:
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 12876  003EBA  0E89               	movlw	137
 12877  003EBC  6023               	cpfslt	vscp_readStdReg@reg,c
 12878  003EBE  D005               	goto	l11306
 12879                           
 12880                           ; BSR set to: 0
 12881                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 12882  003EC0  5023               	movf	vscp_readStdReg@reg,w,c
 12883  003EC2  0F7C               	addlw	124
 12884  003EC4  EC88  F02E         	call	_vscp_getUserID
 12885  003EC8  D05D               	goto	L31
 12886  003ECA                     l11306:
 12887                           
 12888                           ; BSR set to: 0
 12889                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 12890                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 12891  003ECA  0E88               	movlw	136
 12892  003ECC  6423               	cpfsgt	vscp_readStdReg@reg,c
 12893  003ECE  D008               	goto	l11312
 12894                           
 12895                           ; BSR set to: 0
 12896  003ED0  0E91               	movlw	145
 12897  003ED2  6023               	cpfslt	vscp_readStdReg@reg,c
 12898  003ED4  D005               	goto	l11312
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 12902  003ED6  5023               	movf	vscp_readStdReg@reg,w,c
 12903  003ED8  0F77               	addlw	119
 12904  003EDA  EC7E  F02E         	call	_vscp_getManufacturerId
 12905  003EDE  D052               	goto	L31
 12906  003EE0                     l11312:
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 12910  003EE0  5023               	movf	vscp_readStdReg@reg,w,c
 12911  003EE2  0A91               	xorlw	145
 12912  003EE4  E103               	bnz	l11316
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 12916  003EE6  C086  F022         	movff	_vscp_nickname,vscp_readStdReg@rv
 12917                           
 12918                           ;vscp_firmware.c: 639: }
 12919  003EEA  D091               	goto	l11366
 12920  003EEC                     l11316:
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 12924  003EEC  5023               	movf	vscp_readStdReg@reg,w,c
 12925  003EEE  0A93               	xorlw	147
 12926  003EF0  E103               	bnz	l11320
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 12930  003EF2  C046  F022         	movff	_vscp_page_select,vscp_readStdReg@rv
 12931                           
 12932                           ;vscp_firmware.c: 645: }
 12933  003EF6  D08B               	goto	l11366
 12934  003EF8                     l11320:
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 12938  003EF8  5023               	movf	vscp_readStdReg@reg,w,c
 12939  003EFA  0A92               	xorlw	146
 12940  003EFC  E102               	bnz	l11324
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 12944  003EFE  5047               	movf	_vscp_page_select+1,w,c
 12945  003F00  D041               	goto	L31
 12946  003F02                     l11324:
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 12950  003F02  5023               	movf	vscp_readStdReg@reg,w,c
 12951  003F04  0A97               	xorlw	151
 12952  003F06  E103               	bnz	l11328
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 12956  003F08  ECFD  F02E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 12957  003F0C  D03B               	goto	L31
 12958  003F0E                     l11328:
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 12962  003F0E  5023               	movf	vscp_readStdReg@reg,w,c
 12963  003F10  0A98               	xorlw	152
 12964  003F12  E103               	bnz	l11332
 12965                           
 12966                           ; BSR set to: 0
 12967                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 12968  003F14  ECFC  F02E         	call	_vscp_getBufferSize	;wreg free
 12969  003F18  D035               	goto	L31
 12970  003F1A                     l11332:
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 12974  003F1A  5023               	movf	vscp_readStdReg@reg,w,c
 12975  003F1C  0A99               	xorlw	153
 12976  003F1E  E103               	bnz	l11336
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 12980  003F20  ECFB  F02E         	call	_vscp_getRegisterPagesUsed	;wreg free
 12981  003F24  D02F               	goto	L31
 12982  003F26                     l11336:
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 12986                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 12987  003F26  0E99               	movlw	153
 12988  003F28  6423               	cpfsgt	vscp_readStdReg@reg,c
 12989  003F2A  D02E               	goto	l11346
 12990                           
 12991                           ; BSR set to: 0
 12992  003F2C  0E9E               	movlw	158
 12993  003F2E  6023               	cpfslt	vscp_readStdReg@reg,c
 12994  003F30  D02B               	goto	l11346
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 12998  003F32  ECE2  F02E         	call	_vscp_getFamilyCode	;wreg free
 12999  003F36  C011  F01B         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13000  003F3A  C010  F01A         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13001  003F3E  C00F  F019         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13002  003F42  C00E  F018         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13006  003F46  5023               	movf	vscp_readStdReg@reg,w,c
 13007  003F48  0F66               	addlw	102
 13008  003F4A  6E20               	movwf	vscp_readStdReg@idx,c
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13012  003F4C  5020               	movf	vscp_readStdReg@idx,w,c
 13013  003F4E  0803               	sublw	3
 13014  003F50  6E13               	movwf	??_vscp_readStdReg& (0+255),c
 13015  003F52  90D8               	bcf	status,0,c
 13016  003F54  3613               	rlcf	??_vscp_readStdReg,f,c
 13017  003F56  90D8               	bcf	status,0,c
 13018  003F58  3613               	rlcf	??_vscp_readStdReg,f,c
 13019  003F5A  90D8               	bcf	status,0,c
 13020  003F5C  3613               	rlcf	??_vscp_readStdReg,f,c
 13021  003F5E  5013               	movf	??_vscp_readStdReg,w,c
 13022  003F60  C018  F014         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13023  003F64  C019  F015         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13024  003F68  C01A  F016         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13025  003F6C  C01B  F017         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13026  003F70  2AE8               	incf	wreg,f,c
 13027  003F72  D005               	goto	u9520
 13028  003F74                     u9525:
 13029  003F74  90D8               	bcf	status,0,c
 13030  003F76  3217               	rrcf	??_vscp_readStdReg+4,f,c
 13031  003F78  3216               	rrcf	??_vscp_readStdReg+3,f,c
 13032  003F7A  3215               	rrcf	??_vscp_readStdReg+2,f,c
 13033  003F7C  3214               	rrcf	??_vscp_readStdReg+1,f,c
 13034  003F7E                     u9520:
 13035  003F7E  2EE8               	decfsz	wreg,f,c
 13036  003F80  D7F9               	goto	u9525
 13037  003F82  D030               	goto	L32
 13038  003F84                     L31:
 13039  003F84  6E22               	movwf	vscp_readStdReg@rv,c
 13040                           
 13041                           ;vscp_firmware.c: 671: }
 13042  003F86  D043               	goto	l11366
 13043  003F88                     l11346:
 13044                           
 13045                           ; BSR set to: 0
 13046                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13047                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13048  003F88  0E9D               	movlw	157
 13049  003F8A  6423               	cpfsgt	vscp_readStdReg@reg,c
 13050  003F8C  D02D               	goto	l11356
 13051                           
 13052                           ; BSR set to: 0
 13053  003F8E  0EA2               	movlw	162
 13054  003F90  6023               	cpfslt	vscp_readStdReg@reg,c
 13055  003F92  D02A               	goto	l11356
 13056                           
 13057                           ; BSR set to: 0
 13058                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13059  003F94  ECDD  F02E         	call	_vscp_getFamilyType	;wreg free
 13060  003F98  C011  F01F         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1140+3
 13061  003F9C  C010  F01E         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1140+2
 13062  003FA0  C00F  F01D         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1140+1
 13063  003FA4  C00E  F01C         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1140
 13064                           
 13065                           ; BSR set to: 0
 13066                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13067  003FA8  5023               	movf	vscp_readStdReg@reg,w,c
 13068  003FAA  0F62               	addlw	98
 13069  003FAC  6E21               	movwf	vscp_readStdReg@idx_1141,c
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13073  003FAE  5021               	movf	vscp_readStdReg@idx_1141,w,c
 13074  003FB0  0803               	sublw	3
 13075  003FB2  6E13               	movwf	??_vscp_readStdReg& (0+255),c
 13076  003FB4  90D8               	bcf	status,0,c
 13077  003FB6  3613               	rlcf	??_vscp_readStdReg,f,c
 13078  003FB8  90D8               	bcf	status,0,c
 13079  003FBA  3613               	rlcf	??_vscp_readStdReg,f,c
 13080  003FBC  90D8               	bcf	status,0,c
 13081  003FBE  3613               	rlcf	??_vscp_readStdReg,f,c
 13082  003FC0  5013               	movf	??_vscp_readStdReg,w,c
 13083  003FC2  C01C  F014         	movff	vscp_readStdReg@code_1140,??_vscp_readStdReg+1
 13084  003FC6  C01D  F015         	movff	vscp_readStdReg@code_1140+1,??_vscp_readStdReg+2
 13085  003FCA  C01E  F016         	movff	vscp_readStdReg@code_1140+2,??_vscp_readStdReg+3
 13086  003FCE  C01F  F017         	movff	vscp_readStdReg@code_1140+3,??_vscp_readStdReg+4
 13087  003FD2  2AE8               	incf	wreg,f,c
 13088  003FD4  D005               	goto	u9550
 13089  003FD6                     u9555:
 13090  003FD6  90D8               	bcf	status,0,c
 13091  003FD8  3217               	rrcf	??_vscp_readStdReg+4,f,c
 13092  003FDA  3216               	rrcf	??_vscp_readStdReg+3,f,c
 13093  003FDC  3215               	rrcf	??_vscp_readStdReg+2,f,c
 13094  003FDE  3214               	rrcf	??_vscp_readStdReg+1,f,c
 13095  003FE0                     u9550:
 13096  003FE0  2EE8               	decfsz	wreg,f,c
 13097  003FE2  D7F9               	goto	u9555
 13098  003FE4                     L32:
 13099  003FE4  5014               	movf	??_vscp_readStdReg+1,w,c
 13100  003FE6  D7CE               	goto	L31
 13101  003FE8                     l11356:
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13105                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13106  003FE8  0ECF               	movlw	207
 13107  003FEA  6423               	cpfsgt	vscp_readStdReg@reg,c
 13108  003FEC  D008               	goto	l11362
 13109                           
 13110                           ; BSR set to: 0
 13111  003FEE  0EE0               	movlw	224
 13112  003FF0  6023               	cpfslt	vscp_readStdReg@reg,c
 13113  003FF2  D005               	goto	l11362
 13114                           
 13115                           ; BSR set to: 0
 13116                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13117  003FF4  5023               	movf	vscp_readStdReg@reg,w,c
 13118  003FF6  0F30               	addlw	48
 13119  003FF8  EC92  F02E         	call	_vscp_getGUID
 13120  003FFC  D7C3               	goto	L31
 13121  003FFE                     l11362:
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13125  003FFE  0EDF               	movlw	223
 13126  004000  6423               	cpfsgt	vscp_readStdReg@reg,c
 13127  004002  D005               	goto	l11366
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13131  004004  5023               	movf	vscp_readStdReg@reg,w,c
 13132  004006  0F20               	addlw	32
 13133  004008  EC5A  F02E         	call	_vscp_getMDF_URL
 13134  00400C  D7BB               	goto	L31
 13135  00400E                     l11366:
 13136                           
 13137                           ;vscp_firmware.c: 691: }
 13138                           ;vscp_firmware.c: 693: return rv;
 13139  00400E  5022               	movf	vscp_readStdReg@rv,w,c
 13140  004010  0012               	return	
 13141  004012                     __end_of_vscp_readStdReg:
 13142                           	opt stack 0
 13143                           tblptru	equ	0xFF8
 13144                           tblptrh	equ	0xFF7
 13145                           tblptrl	equ	0xFF6
 13146                           tablat	equ	0xFF5
 13147                           prodh	equ	0xFF4
 13148                           prodl	equ	0xFF3
 13149                           postinc0	equ	0xFEE
 13150                           wreg	equ	0xFE8
 13151                           postdec1	equ	0xFE5
 13152                           fsr1h	equ	0xFE2
 13153                           fsr1l	equ	0xFE1
 13154                           indf2	equ	0xFDF
 13155                           postinc2	equ	0xFDE
 13156                           postdec2	equ	0xFDD
 13157                           fsr2h	equ	0xFDA
 13158                           fsr2l	equ	0xFD9
 13159                           status	equ	0xFD8
 13160                           
 13161 ;; *************** function _vscp_getFamilyType *****************
 13162 ;; Defined at:
 13163 ;;		line 2826 in file "../main.c"
 13164 ;; Parameters:    Size  Location     Type
 13165 ;;		None
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;		None
 13168 ;; Return value:  Size  Location     Type
 13169 ;;                  4   13[COMRAM] unsigned long 
 13170 ;; Registers used:
 13171 ;;		None
 13172 ;; Tracked objects:
 13173 ;;		On entry : F/0
 13174 ;;		On exit  : F/0
 13175 ;;		Unchanged: F/0
 13176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13177 ;;      Params:         4       0       0       0       0       0       0
 13178 ;;      Locals:         0       0       0       0       0       0       0
 13179 ;;      Temps:          0       0       0       0       0       0       0
 13180 ;;      Totals:         4       0       0       0       0       0       0
 13181 ;;Total ram usage:        4 bytes
 13182 ;; Hardware stack levels used:    1
 13183 ;; Hardware stack levels required when called:    2
 13184 ;; This function calls:
 13185 ;;		Nothing
 13186 ;; This function is called by:
 13187 ;;		_vscp_readStdReg
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           	psect	text45
 13192  005DBA                     __ptext45:
 13193                           	opt stack 0
 13194  005DBA                     _vscp_getFamilyType:
 13195                           	opt stack 26
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;main.c: 2827: return 0;
 13199                           
 13200                           ;incstack = 0
 13201                           ;incstack = 0
 13202  005DBA  6A0E               	clrf	?_vscp_getFamilyType,c
 13203  005DBC  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13204  005DBE  6A10               	clrf	?_vscp_getFamilyType+2,c
 13205  005DC0  6A11               	clrf	?_vscp_getFamilyType+3,c
 13206                           
 13207                           ; BSR set to: 0
 13208  005DC2  0012               	return	
 13209  005DC4                     __end_of_vscp_getFamilyType:
 13210                           	opt stack 0
 13211                           tblptru	equ	0xFF8
 13212                           tblptrh	equ	0xFF7
 13213                           tblptrl	equ	0xFF6
 13214                           tablat	equ	0xFF5
 13215                           prodh	equ	0xFF4
 13216                           prodl	equ	0xFF3
 13217                           postinc0	equ	0xFEE
 13218                           wreg	equ	0xFE8
 13219                           postdec1	equ	0xFE5
 13220                           fsr1h	equ	0xFE2
 13221                           fsr1l	equ	0xFE1
 13222                           indf2	equ	0xFDF
 13223                           postinc2	equ	0xFDE
 13224                           postdec2	equ	0xFDD
 13225                           fsr2h	equ	0xFDA
 13226                           fsr2l	equ	0xFD9
 13227                           status	equ	0xFD8
 13228                           
 13229 ;; *************** function _vscp_getFamilyCode *****************
 13230 ;; Defined at:
 13231 ;;		line 2816 in file "../main.c"
 13232 ;; Parameters:    Size  Location     Type
 13233 ;;		None
 13234 ;; Auto vars:     Size  Location     Type
 13235 ;;		None
 13236 ;; Return value:  Size  Location     Type
 13237 ;;                  4   13[COMRAM] unsigned long 
 13238 ;; Registers used:
 13239 ;;		None
 13240 ;; Tracked objects:
 13241 ;;		On entry : F/0
 13242 ;;		On exit  : F/0
 13243 ;;		Unchanged: F/0
 13244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13245 ;;      Params:         4       0       0       0       0       0       0
 13246 ;;      Locals:         0       0       0       0       0       0       0
 13247 ;;      Temps:          0       0       0       0       0       0       0
 13248 ;;      Totals:         4       0       0       0       0       0       0
 13249 ;;Total ram usage:        4 bytes
 13250 ;; Hardware stack levels used:    1
 13251 ;; Hardware stack levels required when called:    2
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_vscp_readStdReg
 13256 ;; This function uses a non-reentrant model
 13257 ;;
 13258                           
 13259                           	psect	text46
 13260  005DC4                     __ptext46:
 13261                           	opt stack 0
 13262  005DC4                     _vscp_getFamilyCode:
 13263                           	opt stack 26
 13264                           
 13265                           ; BSR set to: 0
 13266                           ;main.c: 2817: return 0L;
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;incstack = 0
 13270                           ;incstack = 0
 13271  005DC4  6A0E               	clrf	?_vscp_getFamilyCode,c
 13272  005DC6  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13273  005DC8  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13274  005DCA  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13275                           
 13276                           ; BSR set to: 0
 13277  005DCC  0012               	return	
 13278  005DCE                     __end_of_vscp_getFamilyCode:
 13279                           	opt stack 0
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           postinc0	equ	0xFEE
 13287                           wreg	equ	0xFE8
 13288                           postdec1	equ	0xFE5
 13289                           fsr1h	equ	0xFE2
 13290                           fsr1l	equ	0xFE1
 13291                           indf2	equ	0xFDF
 13292                           postinc2	equ	0xFDE
 13293                           postdec2	equ	0xFDD
 13294                           fsr2h	equ	0xFDA
 13295                           fsr2l	equ	0xFD9
 13296                           status	equ	0xFD8
 13297                           
 13298 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13299 ;; Defined at:
 13300 ;;		line 2717 in file "../main.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;		None
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;		None
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  1    wreg      unsigned char 
 13307 ;; Registers used:
 13308 ;;		wreg
 13309 ;; Tracked objects:
 13310 ;;		On entry : F/0
 13311 ;;		On exit  : F/0
 13312 ;;		Unchanged: F/0
 13313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13314 ;;      Params:         0       0       0       0       0       0       0
 13315 ;;      Locals:         0       0       0       0       0       0       0
 13316 ;;      Temps:          0       0       0       0       0       0       0
 13317 ;;      Totals:         0       0       0       0       0       0       0
 13318 ;;Total ram usage:        0 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    2
 13321 ;; This function calls:
 13322 ;;		Nothing
 13323 ;; This function is called by:
 13324 ;;		_vscp_readStdReg
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           	psect	text47
 13329  005DF6                     __ptext47:
 13330                           	opt stack 0
 13331  005DF6                     _vscp_getRegisterPagesUsed:
 13332                           	opt stack 26
 13333                           
 13334                           ; BSR set to: 0
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;main.c: 2718: return 1;
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;incstack = 0
 13341                           ;incstack = 0
 13342  005DF6  0C01               	retlw	1
 13343  005DF8                     __end_of_vscp_getRegisterPagesUsed:
 13344                           	opt stack 0
 13345                           tblptru	equ	0xFF8
 13346                           tblptrh	equ	0xFF7
 13347                           tblptrl	equ	0xFF6
 13348                           tablat	equ	0xFF5
 13349                           prodh	equ	0xFF4
 13350                           prodl	equ	0xFF3
 13351                           postinc0	equ	0xFEE
 13352                           wreg	equ	0xFE8
 13353                           postdec1	equ	0xFE5
 13354                           fsr1h	equ	0xFE2
 13355                           fsr1l	equ	0xFE1
 13356                           indf2	equ	0xFDF
 13357                           postinc2	equ	0xFDE
 13358                           postdec2	equ	0xFDD
 13359                           fsr2h	equ	0xFDA
 13360                           fsr2l	equ	0xFD9
 13361                           status	equ	0xFD8
 13362                           
 13363 ;; *************** function _vscp_getBufferSize *****************
 13364 ;; Defined at:
 13365 ;;		line 2670 in file "../main.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;		None
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;		None
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  1    wreg      unsigned char 
 13372 ;; Registers used:
 13373 ;;		wreg
 13374 ;; Tracked objects:
 13375 ;;		On entry : F/0
 13376 ;;		On exit  : F/0
 13377 ;;		Unchanged: F/0
 13378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13379 ;;      Params:         0       0       0       0       0       0       0
 13380 ;;      Locals:         0       0       0       0       0       0       0
 13381 ;;      Temps:          0       0       0       0       0       0       0
 13382 ;;      Totals:         0       0       0       0       0       0       0
 13383 ;;Total ram usage:        0 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; Hardware stack levels required when called:    2
 13386 ;; This function calls:
 13387 ;;		Nothing
 13388 ;; This function is called by:
 13389 ;;		_vscp_readStdReg
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           	psect	text48
 13394  005DF8                     __ptext48:
 13395                           	opt stack 0
 13396  005DF8                     _vscp_getBufferSize:
 13397                           	opt stack 26
 13398                           
 13399                           ; BSR set to: 0
 13400                           
 13401                           ; BSR set to: 0
 13402                           ;main.c: 2671: return 8;
 13403                           
 13404                           ; BSR set to: 0
 13405                           ;incstack = 0
 13406                           ;incstack = 0
 13407  005DF8  0C08               	retlw	8
 13408  005DFA                     __end_of_vscp_getBufferSize:
 13409                           	opt stack 0
 13410                           tblptru	equ	0xFF8
 13411                           tblptrh	equ	0xFF7
 13412                           tblptrl	equ	0xFF6
 13413                           tablat	equ	0xFF5
 13414                           prodh	equ	0xFF4
 13415                           prodl	equ	0xFF3
 13416                           postinc0	equ	0xFEE
 13417                           wreg	equ	0xFE8
 13418                           postdec1	equ	0xFE5
 13419                           fsr1h	equ	0xFE2
 13420                           fsr1l	equ	0xFE1
 13421                           indf2	equ	0xFDF
 13422                           postinc2	equ	0xFDE
 13423                           postdec2	equ	0xFDD
 13424                           fsr2h	equ	0xFDA
 13425                           fsr2l	equ	0xFD9
 13426                           status	equ	0xFD8
 13427                           
 13428 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13429 ;; Defined at:
 13430 ;;		line 2661 in file "../main.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;		None
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;		None
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  1    wreg      unsigned char 
 13437 ;; Registers used:
 13438 ;;		wreg
 13439 ;; Tracked objects:
 13440 ;;		On entry : F/0
 13441 ;;		On exit  : F/0
 13442 ;;		Unchanged: F/0
 13443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13444 ;;      Params:         0       0       0       0       0       0       0
 13445 ;;      Locals:         0       0       0       0       0       0       0
 13446 ;;      Temps:          0       0       0       0       0       0       0
 13447 ;;      Totals:         0       0       0       0       0       0       0
 13448 ;;Total ram usage:        0 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    2
 13451 ;; This function calls:
 13452 ;;		Nothing
 13453 ;; This function is called by:
 13454 ;;		_vscp_readStdReg
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           	psect	text49
 13459  005DFA                     __ptext49:
 13460                           	opt stack 0
 13461  005DFA                     _vscp_getBootLoaderAlgorithm:
 13462                           	opt stack 26
 13463                           
 13464                           ; BSR set to: 0
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;main.c: 2662: return 0x01;
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;incstack = 0
 13471                           ;incstack = 0
 13472  005DFA  0C01               	retlw	1
 13473  005DFC                     __end_of_vscp_getBootLoaderAlgorithm:
 13474                           	opt stack 0
 13475                           tblptru	equ	0xFF8
 13476                           tblptrh	equ	0xFF7
 13477                           tblptrl	equ	0xFF6
 13478                           tablat	equ	0xFF5
 13479                           prodh	equ	0xFF4
 13480                           prodl	equ	0xFF3
 13481                           postinc0	equ	0xFEE
 13482                           wreg	equ	0xFE8
 13483                           postdec1	equ	0xFE5
 13484                           fsr1h	equ	0xFE2
 13485                           fsr1l	equ	0xFE1
 13486                           indf2	equ	0xFDF
 13487                           postinc2	equ	0xFDE
 13488                           postdec2	equ	0xFDD
 13489                           fsr2h	equ	0xFDA
 13490                           fsr2l	equ	0xFD9
 13491                           status	equ	0xFD8
 13492                           
 13493 ;; *************** function _vscp_getManufacturerId *****************
 13494 ;; Defined at:
 13495 ;;		line 2641 in file "../main.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;  idx             1    wreg     unsigned char 
 13498 ;; Auto vars:     Size  Location     Type
 13499 ;;  idx             1   17[COMRAM] unsigned char 
 13500 ;; Return value:  Size  Location     Type
 13501 ;;                  1    wreg      unsigned char 
 13502 ;; Registers used:
 13503 ;;		wreg, status,2, status,0, cstack
 13504 ;; Tracked objects:
 13505 ;;		On entry : 0/0
 13506 ;;		On exit  : 0/0
 13507 ;;		Unchanged: 0/0
 13508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13509 ;;      Params:         0       0       0       0       0       0       0
 13510 ;;      Locals:         1       0       0       0       0       0       0
 13511 ;;      Temps:          0       0       0       0       0       0       0
 13512 ;;      Totals:         1       0       0       0       0       0       0
 13513 ;;Total ram usage:        1 bytes
 13514 ;; Hardware stack levels used:    1
 13515 ;; Hardware stack levels required when called:    3
 13516 ;; This function calls:
 13517 ;;		_readEEPROM
 13518 ;; This function is called by:
 13519 ;;		_vscp_readStdReg
 13520 ;;		_vscp_writeStdReg
 13521 ;; This function uses a non-reentrant model
 13522 ;;
 13523                           
 13524                           	psect	text50
 13525  005CFC                     __ptext50:
 13526                           	opt stack 0
 13527  005CFC                     _vscp_getManufacturerId:
 13528                           	opt stack 25
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;incstack = 0
 13532                           ;incstack = 0
 13533                           ;vscp_getManufacturerId@idx stored from wreg
 13534  005CFC  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13535                           
 13536                           ;main.c: 2642: return readEEPROM(0x09 + idx);
 13537  005D00  0E09               	movlw	9
 13538  005D02  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13539  005D04  6E0E               	movwf	?_readEEPROM,c
 13540  005D06  6A0F               	clrf	?_readEEPROM+1,c
 13541  005D08  0E00               	movlw	0
 13542  005D0A  220F               	addwfc	?_readEEPROM+1,f,c
 13543  005D0C  EF9C  F02E         	goto	_readEEPROM	;wreg free
 13544  005D10                     __end_of_vscp_getManufacturerId:
 13545                           	opt stack 0
 13546                           tblptru	equ	0xFF8
 13547                           tblptrh	equ	0xFF7
 13548                           tblptrl	equ	0xFF6
 13549                           tablat	equ	0xFF5
 13550                           prodh	equ	0xFF4
 13551                           prodl	equ	0xFF3
 13552                           postinc0	equ	0xFEE
 13553                           wreg	equ	0xFE8
 13554                           postdec1	equ	0xFE5
 13555                           fsr1h	equ	0xFE2
 13556                           fsr1l	equ	0xFE1
 13557                           indf2	equ	0xFDF
 13558                           postinc2	equ	0xFDE
 13559                           postdec2	equ	0xFDD
 13560                           fsr2h	equ	0xFDA
 13561                           fsr2l	equ	0xFD9
 13562                           status	equ	0xFD8
 13563                           
 13564 ;; *************** function _vscp_getUserID *****************
 13565 ;; Defined at:
 13566 ;;		line 2621 in file "../main.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;  idx             1    wreg     unsigned char 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  idx             1   17[COMRAM] unsigned char 
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  1    wreg      unsigned char 
 13573 ;; Registers used:
 13574 ;;		wreg, status,2, status,0, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13580 ;;      Params:         0       0       0       0       0       0       0
 13581 ;;      Locals:         1       0       0       0       0       0       0
 13582 ;;      Temps:          0       0       0       0       0       0       0
 13583 ;;      Totals:         1       0       0       0       0       0       0
 13584 ;;Total ram usage:        1 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    3
 13587 ;; This function calls:
 13588 ;;		_readEEPROM
 13589 ;; This function is called by:
 13590 ;;		_vscp_readStdReg
 13591 ;;		_vscp_writeStdReg
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           	psect	text51
 13596  005D10                     __ptext51:
 13597                           	opt stack 0
 13598  005D10                     _vscp_getUserID:
 13599                           	opt stack 25
 13600                           
 13601                           ;incstack = 0
 13602                           ;incstack = 0
 13603                           ;vscp_getUserID@idx stored from wreg
 13604  005D10  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13605                           
 13606                           ;main.c: 2622: return readEEPROM(0x04 + idx);
 13607  005D14  0E04               	movlw	4
 13608  005D16  2412               	addwf	vscp_getUserID@idx,w,c
 13609  005D18  6E0E               	movwf	?_readEEPROM,c
 13610  005D1A  6A0F               	clrf	?_readEEPROM+1,c
 13611  005D1C  0E00               	movlw	0
 13612  005D1E  220F               	addwfc	?_readEEPROM+1,f,c
 13613  005D20  EF9C  F02E         	goto	_readEEPROM	;wreg free
 13614  005D24                     __end_of_vscp_getUserID:
 13615                           	opt stack 0
 13616                           tblptru	equ	0xFF8
 13617                           tblptrh	equ	0xFF7
 13618                           tblptrl	equ	0xFF6
 13619                           tablat	equ	0xFF5
 13620                           prodh	equ	0xFF4
 13621                           prodl	equ	0xFF3
 13622                           postinc0	equ	0xFEE
 13623                           wreg	equ	0xFE8
 13624                           postdec1	equ	0xFE5
 13625                           fsr1h	equ	0xFE2
 13626                           fsr1l	equ	0xFE1
 13627                           indf2	equ	0xFDF
 13628                           postinc2	equ	0xFDE
 13629                           postdec2	equ	0xFDD
 13630                           fsr2h	equ	0xFDA
 13631                           fsr2l	equ	0xFD9
 13632                           status	equ	0xFD8
 13633                           
 13634 ;; *************** function _vscp_getMDF_URL *****************
 13635 ;; Defined at:
 13636 ;;		line 2612 in file "../main.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  idx             1    wreg     unsigned char 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  idx             1   14[COMRAM] unsigned char 
 13641 ;; Return value:  Size  Location     Type
 13642 ;;                  1    wreg      unsigned char 
 13643 ;; Registers used:
 13644 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13645 ;; Tracked objects:
 13646 ;;		On entry : F/0
 13647 ;;		On exit  : F/0
 13648 ;;		Unchanged: F/0
 13649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13650 ;;      Params:         0       0       0       0       0       0       0
 13651 ;;      Locals:         1       0       0       0       0       0       0
 13652 ;;      Temps:          1       0       0       0       0       0       0
 13653 ;;      Totals:         2       0       0       0       0       0       0
 13654 ;;Total ram usage:        2 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    2
 13657 ;; This function calls:
 13658 ;;		Nothing
 13659 ;; This function is called by:
 13660 ;;		_vscp_readStdReg
 13661 ;;		_vscp_handleProtocolEvent
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665                           	psect	text52
 13666  005CB4                     __ptext52:
 13667                           	opt stack 0
 13668  005CB4                     _vscp_getMDF_URL:
 13669                           	opt stack 26
 13670                           
 13671                           ;incstack = 0
 13672                           ;incstack = 0
 13673                           ;vscp_getMDF_URL@idx stored from wreg
 13674  005CB4  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;main.c: 2613: return vscp_deviceURL[ idx ];
 13678  005CB8  500F               	movf	vscp_getMDF_URL@idx,w,c
 13679  005CBA  0F00               	addlw	low _vscp_deviceURL
 13680  005CBC  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13681  005CBE  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13682  005CC2  0E0B               	movlw	high __smallconst
 13683  005CC4  6EF7               	movwf	tblptrh,c
 13684  005CC6  0008               	tblrd		*
 13685  005CC8  50F5               	movf	tablat,w,c
 13686                           
 13687                           ; BSR set to: 0
 13688  005CCA  0012               	return	
 13689  005CCC                     __end_of_vscp_getMDF_URL:
 13690                           	opt stack 0
 13691                           tblptru	equ	0xFF8
 13692                           tblptrh	equ	0xFF7
 13693                           tblptrl	equ	0xFF6
 13694                           tablat	equ	0xFF5
 13695                           prodh	equ	0xFF4
 13696                           prodl	equ	0xFF3
 13697                           postinc0	equ	0xFEE
 13698                           wreg	equ	0xFE8
 13699                           postdec1	equ	0xFE5
 13700                           fsr1h	equ	0xFE2
 13701                           fsr1l	equ	0xFE1
 13702                           indf2	equ	0xFDF
 13703                           postinc2	equ	0xFDE
 13704                           postdec2	equ	0xFDD
 13705                           fsr2h	equ	0xFDA
 13706                           fsr2l	equ	0xFD9
 13707                           status	equ	0xFD8
 13708                           
 13709 ;; *************** function _vscp_getGUID *****************
 13710 ;; Defined at:
 13711 ;;		line 2589 in file "../main.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;  idx             1    wreg     unsigned char 
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;  idx             1   17[COMRAM] unsigned char 
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      unsigned char 
 13718 ;; Registers used:
 13719 ;;		wreg, status,2, status,0, cstack
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13725 ;;      Params:         0       0       0       0       0       0       0
 13726 ;;      Locals:         1       0       0       0       0       0       0
 13727 ;;      Temps:          0       0       0       0       0       0       0
 13728 ;;      Totals:         1       0       0       0       0       0       0
 13729 ;;Total ram usage:        1 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    3
 13732 ;; This function calls:
 13733 ;;		_readEEPROM
 13734 ;; This function is called by:
 13735 ;;		_vscp_readStdReg
 13736 ;;		_vscp_writeStdReg
 13737 ;;		_vscp_handleProtocolEvent
 13738 ;; This function uses a non-reentrant model
 13739 ;;
 13740                           
 13741                           	psect	text53
 13742  005D24                     __ptext53:
 13743                           	opt stack 0
 13744  005D24                     _vscp_getGUID:
 13745                           	opt stack 25
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;incstack = 0
 13749                           ;incstack = 0
 13750                           ;vscp_getGUID@idx stored from wreg
 13751  005D24  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13752                           
 13753                           ;main.c: 2590: return readEEPROM(0x11 + idx);
 13754  005D28  0E11               	movlw	17
 13755  005D2A  2412               	addwf	vscp_getGUID@idx,w,c
 13756  005D2C  6E0E               	movwf	?_readEEPROM,c
 13757  005D2E  6A0F               	clrf	?_readEEPROM+1,c
 13758  005D30  0E00               	movlw	0
 13759  005D32  220F               	addwfc	?_readEEPROM+1,f,c
 13760  005D34  EF9C  F02E         	goto	_readEEPROM	;wreg free
 13761  005D38                     __end_of_vscp_getGUID:
 13762                           	opt stack 0
 13763                           tblptru	equ	0xFF8
 13764                           tblptrh	equ	0xFF7
 13765                           tblptrl	equ	0xFF6
 13766                           tablat	equ	0xFF5
 13767                           prodh	equ	0xFF4
 13768                           prodl	equ	0xFF3
 13769                           postinc0	equ	0xFEE
 13770                           wreg	equ	0xFE8
 13771                           postdec1	equ	0xFE5
 13772                           fsr1h	equ	0xFE2
 13773                           fsr1l	equ	0xFE1
 13774                           indf2	equ	0xFDF
 13775                           postinc2	equ	0xFDE
 13776                           postdec2	equ	0xFDD
 13777                           fsr2h	equ	0xFDA
 13778                           fsr2l	equ	0xFD9
 13779                           status	equ	0xFD8
 13780                           
 13781 ;; *************** function _vscp_getSubMinorVersion *****************
 13782 ;; Defined at:
 13783 ;;		line 2578 in file "../main.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;		None
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;		None
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      unsigned char 
 13790 ;; Registers used:
 13791 ;;		wreg
 13792 ;; Tracked objects:
 13793 ;;		On entry : F/0
 13794 ;;		On exit  : F/0
 13795 ;;		Unchanged: F/0
 13796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13797 ;;      Params:         0       0       0       0       0       0       0
 13798 ;;      Locals:         0       0       0       0       0       0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0
 13800 ;;      Totals:         0       0       0       0       0       0       0
 13801 ;;Total ram usage:        0 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    2
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		_vscp_readStdReg
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           	psect	text54
 13812  005DFC                     __ptext54:
 13813                           	opt stack 0
 13814  005DFC                     _vscp_getSubMinorVersion:
 13815                           	opt stack 26
 13816                           
 13817                           ; BSR set to: 0
 13818                           
 13819                           ; BSR set to: 0
 13820                           ;main.c: 2579: return 2;
 13821                           
 13822                           ;incstack = 0
 13823                           ;incstack = 0
 13824  005DFC  0C02               	retlw	2
 13825  005DFE                     __end_of_vscp_getSubMinorVersion:
 13826                           	opt stack 0
 13827                           tblptru	equ	0xFF8
 13828                           tblptrh	equ	0xFF7
 13829                           tblptrl	equ	0xFF6
 13830                           tablat	equ	0xFF5
 13831                           prodh	equ	0xFF4
 13832                           prodl	equ	0xFF3
 13833                           postinc0	equ	0xFEE
 13834                           wreg	equ	0xFE8
 13835                           postdec1	equ	0xFE5
 13836                           fsr1h	equ	0xFE2
 13837                           fsr1l	equ	0xFE1
 13838                           indf2	equ	0xFDF
 13839                           postinc2	equ	0xFDE
 13840                           postdec2	equ	0xFDD
 13841                           fsr2h	equ	0xFDA
 13842                           fsr2l	equ	0xFD9
 13843                           status	equ	0xFD8
 13844                           
 13845 ;; *************** function _vscp_getMinorVersion *****************
 13846 ;; Defined at:
 13847 ;;		line 2569 in file "../main.c"
 13848 ;; Parameters:    Size  Location     Type
 13849 ;;		None
 13850 ;; Auto vars:     Size  Location     Type
 13851 ;;		None
 13852 ;; Return value:  Size  Location     Type
 13853 ;;                  1    wreg      unsigned char 
 13854 ;; Registers used:
 13855 ;;		wreg
 13856 ;; Tracked objects:
 13857 ;;		On entry : F/0
 13858 ;;		On exit  : F/0
 13859 ;;		Unchanged: F/0
 13860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13861 ;;      Params:         0       0       0       0       0       0       0
 13862 ;;      Locals:         0       0       0       0       0       0       0
 13863 ;;      Temps:          0       0       0       0       0       0       0
 13864 ;;      Totals:         0       0       0       0       0       0       0
 13865 ;;Total ram usage:        0 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    2
 13868 ;; This function calls:
 13869 ;;		Nothing
 13870 ;; This function is called by:
 13871 ;;		_vscp_readStdReg
 13872 ;; This function uses a non-reentrant model
 13873 ;;
 13874                           
 13875                           	psect	text55
 13876  005DFE                     __ptext55:
 13877                           	opt stack 0
 13878  005DFE                     _vscp_getMinorVersion:
 13879                           	opt stack 26
 13880                           
 13881                           ; BSR set to: 0
 13882                           
 13883                           ; BSR set to: 0
 13884                           ;main.c: 2570: return 2;
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;incstack = 0
 13888                           ;incstack = 0
 13889  005DFE  0C02               	retlw	2
 13890  005E00                     __end_of_vscp_getMinorVersion:
 13891                           	opt stack 0
 13892                           tblptru	equ	0xFF8
 13893                           tblptrh	equ	0xFF7
 13894                           tblptrl	equ	0xFF6
 13895                           tablat	equ	0xFF5
 13896                           prodh	equ	0xFF4
 13897                           prodl	equ	0xFF3
 13898                           postinc0	equ	0xFEE
 13899                           wreg	equ	0xFE8
 13900                           postdec1	equ	0xFE5
 13901                           fsr1h	equ	0xFE2
 13902                           fsr1l	equ	0xFE1
 13903                           indf2	equ	0xFDF
 13904                           postinc2	equ	0xFDE
 13905                           postdec2	equ	0xFDD
 13906                           fsr2h	equ	0xFDA
 13907                           fsr2l	equ	0xFD9
 13908                           status	equ	0xFD8
 13909                           
 13910 ;; *************** function _vscp_getMajorVersion *****************
 13911 ;; Defined at:
 13912 ;;		line 2560 in file "../main.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;		None
 13915 ;; Auto vars:     Size  Location     Type
 13916 ;;		None
 13917 ;; Return value:  Size  Location     Type
 13918 ;;                  1    wreg      unsigned char 
 13919 ;; Registers used:
 13920 ;;		wreg
 13921 ;; Tracked objects:
 13922 ;;		On entry : F/0
 13923 ;;		On exit  : F/0
 13924 ;;		Unchanged: F/0
 13925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13926 ;;      Params:         0       0       0       0       0       0       0
 13927 ;;      Locals:         0       0       0       0       0       0       0
 13928 ;;      Temps:          0       0       0       0       0       0       0
 13929 ;;      Totals:         0       0       0       0       0       0       0
 13930 ;;Total ram usage:        0 bytes
 13931 ;; Hardware stack levels used:    1
 13932 ;; Hardware stack levels required when called:    2
 13933 ;; This function calls:
 13934 ;;		Nothing
 13935 ;; This function is called by:
 13936 ;;		_vscp_readStdReg
 13937 ;; This function uses a non-reentrant model
 13938 ;;
 13939                           
 13940                           	psect	text56
 13941  005E00                     __ptext56:
 13942                           	opt stack 0
 13943  005E00                     _vscp_getMajorVersion:
 13944                           	opt stack 26
 13945                           
 13946                           ; BSR set to: 0
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;main.c: 2561: return 1;
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;incstack = 0
 13953                           ;incstack = 0
 13954  005E00  0C01               	retlw	1
 13955  005E02                     __end_of_vscp_getMajorVersion:
 13956                           	opt stack 0
 13957                           tblptru	equ	0xFF8
 13958                           tblptrh	equ	0xFF7
 13959                           tblptrl	equ	0xFF6
 13960                           tablat	equ	0xFF5
 13961                           prodh	equ	0xFF4
 13962                           prodl	equ	0xFF3
 13963                           postinc0	equ	0xFEE
 13964                           wreg	equ	0xFE8
 13965                           postdec1	equ	0xFE5
 13966                           fsr1h	equ	0xFE2
 13967                           fsr1l	equ	0xFE1
 13968                           indf2	equ	0xFDF
 13969                           postinc2	equ	0xFDE
 13970                           postdec2	equ	0xFDD
 13971                           fsr2h	equ	0xFDA
 13972                           fsr2l	equ	0xFD9
 13973                           status	equ	0xFD8
 13974                           
 13975 ;; *************** function _vscp_newNodeOnline *****************
 13976 ;; Defined at:
 13977 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 13978 ;; Parameters:    Size  Location     Type
 13979 ;;		None
 13980 ;; Auto vars:     Size  Location     Type
 13981 ;;		None
 13982 ;; Return value:  Size  Location     Type
 13983 ;;		None               void
 13984 ;; Registers used:
 13985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13986 ;; Tracked objects:
 13987 ;;		On entry : F/0
 13988 ;;		On exit  : F/0
 13989 ;;		Unchanged: 0/0
 13990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13991 ;;      Params:         0       0       0       0       0       0       0
 13992 ;;      Locals:         0       0       0       0       0       0       0
 13993 ;;      Temps:          1       0       0       0       0       0       0
 13994 ;;      Totals:         1       0       0       0       0       0       0
 13995 ;;Total ram usage:        1 bytes
 13996 ;; Hardware stack levels used:    1
 13997 ;; Hardware stack levels required when called:    7
 13998 ;; This function calls:
 13999 ;;		_vscp_sendEvent
 14000 ;; This function is called by:
 14001 ;;		_vscp_handleProtocolEvent
 14002 ;; This function uses a non-reentrant model
 14003 ;;
 14004                           
 14005                           	psect	text57
 14006  005A74                     __ptext57:
 14007                           	opt stack 0
 14008  005A74                     _vscp_newNodeOnline:
 14009                           	opt stack 22
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14013                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14014                           
 14015                           ; BSR set to: 0
 14016                           ;incstack = 0
 14017                           ;incstack = 0
 14018  005A74  C088  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14019  005A78  0E0F               	movlw	15
 14020  005A7A  1644               	andwf	??_vscp_newNodeOnline,f,c
 14021  005A7C  0444               	decf	??_vscp_newNodeOnline,w,c
 14022  005A7E  E10E               	bnz	l1094
 14023                           
 14024                           ; BSR set to: 0
 14025  005A80  5186               	movf	_vscp_nickname& (0+255),w,b
 14026  005A82  EE20  F08E         	lfsr	2,_vscp_imsg+6
 14027  005A86  62DF               	cpfseq	indf2,c
 14028  005A88  D009               	goto	l1094
 14029                           
 14030                           ; BSR set to: 0
 14031                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14032  005A8A  0E80               	movlw	128
 14033  005A8C  6F96               	movwf	_vscp_omsg& (0+255),b
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14037  005A8E  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14041  005A90  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
 14042  005A92  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
 14043                           
 14044                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14045  005A94  0E03               	movlw	3
 14046  005A96  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14050  005A98  EC78  F02D         	call	_vscp_sendEvent	;wreg free
 14051  005A9C                     l1094:
 14052                           
 14053                           ; BSR set to: 0
 14054  005A9C  0012               	return	
 14055  005A9E                     __end_of_vscp_newNodeOnline:
 14056                           	opt stack 0
 14057                           tblptru	equ	0xFF8
 14058                           tblptrh	equ	0xFF7
 14059                           tblptrl	equ	0xFF6
 14060                           tablat	equ	0xFF5
 14061                           prodh	equ	0xFF4
 14062                           prodl	equ	0xFF3
 14063                           postinc0	equ	0xFEE
 14064                           wreg	equ	0xFE8
 14065                           postdec1	equ	0xFE5
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075 ;; *************** function _vscp_handleDropNickname *****************
 14076 ;; Defined at:
 14077 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;		None
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;  bytes           1   17[COMRAM] unsigned char 
 14082 ;; Return value:  Size  Location     Type
 14083 ;;		None               void
 14084 ;; Registers used:
 14085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14086 ;; Tracked objects:
 14087 ;;		On entry : F/0
 14088 ;;		On exit  : F/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14091 ;;      Params:         0       0       0       0       0       0       0
 14092 ;;      Locals:         1       0       0       0       0       0       0
 14093 ;;      Temps:          0       0       0       0       0       0       0
 14094 ;;      Totals:         1       0       0       0       0       0       0
 14095 ;;Total ram usage:        1 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    5
 14098 ;; This function calls:
 14099 ;;		_vscp_init
 14100 ;;		_vscp_writeNicknamePermanent
 14101 ;; This function is called by:
 14102 ;;		_vscp_handleProtocolEvent
 14103 ;; This function uses a non-reentrant model
 14104 ;;
 14105                           
 14106                           	psect	text58
 14107  0059EE                     __ptext58:
 14108                           	opt stack 0
 14109  0059EE                     _vscp_handleDropNickname:
 14110                           	opt stack 24
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;incstack = 0
 14117                           ;incstack = 0
 14118  0059EE  5188               	movf	_vscp_imsg& (0+255),w,b
 14119  0059F0  0B0F               	andlw	15
 14120  0059F2  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14124  0059F4  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14125  0059F6  E012               	bz	l1090
 14126                           
 14127                           ; BSR set to: 0
 14128  0059F8  5186               	movf	_vscp_nickname& (0+255),w,b
 14129  0059FA  EE20  F08E         	lfsr	2,_vscp_imsg+6
 14130  0059FE  62DF               	cpfseq	indf2,c
 14131  005A00  D00D               	goto	l1090
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14135  005A02  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14136  005A04  E005               	bz	l1089
 14137                           
 14138                           ; BSR set to: 0
 14139  005A06  0E01               	movlw	1
 14140  005A08  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14141  005A0A  D008               	goto	l1090
 14142                           
 14143                           ; BSR set to: 0
 14144  005A0C  678F               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14145  005A0E  D006               	goto	l1090
 14146  005A10                     l1089:
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14150  005A10  6986               	setf	_vscp_nickname& (0+255),b
 14151                           
 14152                           ; BSR set to: 0
 14153                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14154  005A12  0EFF               	movlw	255
 14155  005A14  ECB8  F02E         	call	_vscp_writeNicknamePermanent
 14156                           
 14157                           ;vscp_firmware.c: 481: vscp_init();
 14158  005A18  ECE8  F02B         	call	_vscp_init	;wreg free
 14159  005A1C                     l1090:
 14160                           
 14161                           ; BSR set to: 0
 14162  005A1C  0012               	return	
 14163  005A1E                     __end_of_vscp_handleDropNickname:
 14164                           	opt stack 0
 14165                           tblptru	equ	0xFF8
 14166                           tblptrh	equ	0xFF7
 14167                           tblptrl	equ	0xFF6
 14168                           tablat	equ	0xFF5
 14169                           prodh	equ	0xFF4
 14170                           prodl	equ	0xFF3
 14171                           postinc0	equ	0xFEE
 14172                           wreg	equ	0xFE8
 14173                           postdec1	equ	0xFE5
 14174                           fsr1h	equ	0xFE2
 14175                           fsr1l	equ	0xFE1
 14176                           indf2	equ	0xFDF
 14177                           postinc2	equ	0xFDE
 14178                           postdec2	equ	0xFDD
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function _vscp_init *****************
 14184 ;; Defined at:
 14185 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;		None
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;		None
 14190 ;; Return value:  Size  Location     Type
 14191 ;;		None               void
 14192 ;; Registers used:
 14193 ;;		wreg, status,2, cstack
 14194 ;; Tracked objects:
 14195 ;;		On entry : 0/1
 14196 ;;		On exit  : F/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14199 ;;      Params:         0       0       0       0       0       0       0
 14200 ;;      Locals:         0       0       0       0       0       0       0
 14201 ;;      Temps:          0       0       0       0       0       0       0
 14202 ;;      Totals:         0       0       0       0       0       0       0
 14203 ;;Total ram usage:        0 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:    4
 14206 ;; This function calls:
 14207 ;;		_vscp_readNicknamePermanent
 14208 ;; This function is called by:
 14209 ;;		_main
 14210 ;;		_vscp_handleDropNickname
 14211 ;;		_vscp_handleProtocolEvent
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           	psect	text59
 14216  0057D0                     __ptext59:
 14217                           	opt stack 0
 14218  0057D0                     _vscp_init:
 14219                           	opt stack 24
 14220                           
 14221                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;incstack = 0
 14225                           ;incstack = 0
 14226  0057D0  0E02               	movlw	2
 14227  0057D2  6E4C               	movwf	_vscp_initledfunc,c
 14228                           
 14229                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14230  0057D4  ECE7  F02E         	call	_vscp_readNicknamePermanent	;wreg free
 14231  0057D8  0100               	movlb	0	; () banked
 14232  0057DA  6F86               	movwf	_vscp_nickname& (0+255),b
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14236  0057DC  6786               	tstfsz	_vscp_nickname& (0+255),b
 14237  0057DE  D001               	goto	l1031
 14238                           
 14239                           ; BSR set to: 0
 14240  0057E0  6986               	setf	_vscp_nickname& (0+255),b
 14241  0057E2                     l1031:
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14245  0057E2  6B88               	clrf	_vscp_imsg& (0+255),b
 14246                           
 14247                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14248  0057E4  6B89               	clrf	(_vscp_imsg+1)& (0+255),b
 14249                           
 14250                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14251  0057E6  6B8A               	clrf	(_vscp_imsg+2)& (0+255),b
 14252  0057E8  6B8B               	clrf	(_vscp_imsg+3)& (0+255),b
 14253                           
 14254                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14255  0057EA  6B8C               	clrf	(_vscp_imsg+4)& (0+255),b
 14256                           
 14257                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14258  0057EC  6B96               	clrf	_vscp_omsg& (0+255),b
 14259                           
 14260                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14261  0057EE  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
 14262                           
 14263                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14264  0057F0  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
 14265  0057F2  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
 14266                           
 14267                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14268  0057F4  6B9A               	clrf	(_vscp_omsg+4)& (0+255),b
 14269                           
 14270                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14271  0057F6  6A4A               	clrf	_vscp_alarmstatus,c
 14272                           
 14273                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14274  0057F8  6A4F               	clrf	_vscp_probe_address,c
 14275                           
 14276                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14277  0057FA  6B87               	clrf	_vscp_node_state& (0+255),b
 14278                           
 14279                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14280  0057FC  6A4E               	clrf	_vscp_node_substate,c
 14281                           
 14282                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14283  0057FE  6A50               	clrf	_vscp_probe_cnt,c
 14284                           
 14285                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14286  005800  6A46               	clrf	_vscp_page_select,c
 14287  005802  6A47               	clrf	_vscp_page_select+1,c
 14288                           
 14289                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14290  005804  6B7E               	clrf	_vscp_timer& (0+255),b	;volatile
 14291  005806  6B7F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14292                           
 14293                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14294  005808  6B7C               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14295  00580A  6B7D               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14296                           
 14297                           ;vscp_firmware.c: 155: vscp_second = 0;
 14298  00580C  6A51               	clrf	_vscp_second,c
 14299                           
 14300                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14301  00580E  6A4D               	clrf	_vscp_minute,c
 14302                           
 14303                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14304  005810  6B84               	clrf	_vscp_hour& (0+255),b
 14305                           
 14306                           ; BSR set to: 0
 14307  005812  0012               	return	
 14308  005814                     __end_of_vscp_init:
 14309                           	opt stack 0
 14310                           tblptru	equ	0xFF8
 14311                           tblptrh	equ	0xFF7
 14312                           tblptrl	equ	0xFF6
 14313                           tablat	equ	0xFF5
 14314                           prodh	equ	0xFF4
 14315                           prodl	equ	0xFF3
 14316                           postinc0	equ	0xFEE
 14317                           wreg	equ	0xFE8
 14318                           postdec1	equ	0xFE5
 14319                           fsr1h	equ	0xFE2
 14320                           fsr1l	equ	0xFE1
 14321                           indf2	equ	0xFDF
 14322                           postinc2	equ	0xFDE
 14323                           postdec2	equ	0xFDD
 14324                           fsr2h	equ	0xFDA
 14325                           fsr2l	equ	0xFD9
 14326                           status	equ	0xFD8
 14327                           
 14328 ;; *************** function _vscp_readNicknamePermanent *****************
 14329 ;; Defined at:
 14330 ;;		line 2761 in file "../main.c"
 14331 ;; Parameters:    Size  Location     Type
 14332 ;;		None
 14333 ;; Auto vars:     Size  Location     Type
 14334 ;;		None
 14335 ;; Return value:  Size  Location     Type
 14336 ;;                  1    wreg      unsigned char 
 14337 ;; Registers used:
 14338 ;;		wreg, status,2, cstack
 14339 ;; Tracked objects:
 14340 ;;		On entry : 0/1
 14341 ;;		On exit  : 0/0
 14342 ;;		Unchanged: 0/0
 14343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14344 ;;      Params:         0       0       0       0       0       0       0
 14345 ;;      Locals:         0       0       0       0       0       0       0
 14346 ;;      Temps:          0       0       0       0       0       0       0
 14347 ;;      Totals:         0       0       0       0       0       0       0
 14348 ;;Total ram usage:        0 bytes
 14349 ;; Hardware stack levels used:    1
 14350 ;; Hardware stack levels required when called:    3
 14351 ;; This function calls:
 14352 ;;		_readEEPROM
 14353 ;; This function is called by:
 14354 ;;		_vscp_init
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           	psect	text60
 14359  005DCE                     __ptext60:
 14360                           	opt stack 0
 14361  005DCE                     _vscp_readNicknamePermanent:
 14362                           	opt stack 24
 14363                           
 14364                           ;main.c: 2762: return readEEPROM( 0x01 );
 14365                           
 14366                           ; BSR set to: 0
 14367                           ;incstack = 0
 14368                           ;incstack = 0
 14369  005DCE  6A0F               	clrf	?_readEEPROM+1,c
 14370  005DD0  0E01               	movlw	1
 14371  005DD2  6E0E               	movwf	?_readEEPROM,c
 14372  005DD4  EF9C  F02E         	goto	_readEEPROM	;wreg free
 14373  005DD8                     __end_of_vscp_readNicknamePermanent:
 14374                           	opt stack 0
 14375                           tblptru	equ	0xFF8
 14376                           tblptrh	equ	0xFF7
 14377                           tblptrl	equ	0xFF6
 14378                           tablat	equ	0xFF5
 14379                           prodh	equ	0xFF4
 14380                           prodl	equ	0xFF3
 14381                           postinc0	equ	0xFEE
 14382                           wreg	equ	0xFE8
 14383                           postdec1	equ	0xFE5
 14384                           fsr1h	equ	0xFE2
 14385                           fsr1l	equ	0xFE1
 14386                           indf2	equ	0xFDF
 14387                           postinc2	equ	0xFDE
 14388                           postdec2	equ	0xFDD
 14389                           fsr2h	equ	0xFDA
 14390                           fsr2l	equ	0xFD9
 14391                           status	equ	0xFD8
 14392                           
 14393 ;; *************** function _vscp_handleSetNickname *****************
 14394 ;; Defined at:
 14395 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14396 ;; Parameters:    Size  Location     Type
 14397 ;;		None
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;		None
 14400 ;; Return value:  Size  Location     Type
 14401 ;;		None               void
 14402 ;; Registers used:
 14403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14404 ;; Tracked objects:
 14405 ;;		On entry : F/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14409 ;;      Params:         0       0       0       0       0       0       0
 14410 ;;      Locals:         0       0       0       0       0       0       0
 14411 ;;      Temps:          0       0       0       0       0       0       0
 14412 ;;      Totals:         0       0       0       0       0       0       0
 14413 ;;Total ram usage:        0 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; Hardware stack levels required when called:    4
 14416 ;; This function calls:
 14417 ;;		_vscp_writeNicknamePermanent
 14418 ;;		_vscp_setSegmentCRC
 14419 ;; This function is called by:
 14420 ;;		_vscp_handleProtocolEvent
 14421 ;; This function uses a non-reentrant model
 14422 ;;
 14423                           
 14424                           	psect	text61
 14425  005B88                     __ptext61:
 14426                           	opt stack 0
 14427  005B88                     _vscp_handleSetNickname:
 14428                           	opt stack 25
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14432                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14433                           
 14434                           ;incstack = 0
 14435                           ;incstack = 0
 14436  005B88  5188               	movf	_vscp_imsg& (0+255),w,b
 14437  005B8A  0B0F               	andlw	15
 14438  005B8C  0A02               	xorlw	2
 14439  005B8E  E10D               	bnz	l1083
 14440                           
 14441                           ; BSR set to: 0
 14442  005B90  5186               	movf	_vscp_nickname& (0+255),w,b
 14443  005B92  EE20  F08E         	lfsr	2,_vscp_imsg+6
 14444  005B96  62DF               	cpfseq	indf2,c
 14445  005B98  D008               	goto	l1083
 14446                           
 14447                           ; BSR set to: 0
 14448                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14449  005B9A  C08F  F086         	movff	_vscp_imsg+7,_vscp_nickname
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14453  005B9E  5186               	movf	_vscp_nickname& (0+255),w,b
 14454  005BA0  ECB8  F02E         	call	_vscp_writeNicknamePermanent
 14455                           
 14456                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14457  005BA4  0E40               	movlw	64
 14458  005BA6  ECAF  F02E         	call	_vscp_setSegmentCRC
 14459  005BAA                     l1083:
 14460  005BAA  0012               	return	
 14461  005BAC                     __end_of_vscp_handleSetNickname:
 14462                           	opt stack 0
 14463                           tblptru	equ	0xFF8
 14464                           tblptrh	equ	0xFF7
 14465                           tblptrl	equ	0xFF6
 14466                           tablat	equ	0xFF5
 14467                           prodh	equ	0xFF4
 14468                           prodl	equ	0xFF3
 14469                           postinc0	equ	0xFEE
 14470                           wreg	equ	0xFE8
 14471                           postdec1	equ	0xFE5
 14472                           fsr1h	equ	0xFE2
 14473                           fsr1l	equ	0xFE1
 14474                           indf2	equ	0xFDF
 14475                           postinc2	equ	0xFDE
 14476                           postdec2	equ	0xFDD
 14477                           fsr2h	equ	0xFDA
 14478                           fsr2l	equ	0xFD9
 14479                           status	equ	0xFD8
 14480                           
 14481 ;; *************** function _vscp_handleHeartbeat *****************
 14482 ;; Defined at:
 14483 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14484 ;; Parameters:    Size  Location     Type
 14485 ;;		None
 14486 ;; Auto vars:     Size  Location     Type
 14487 ;;		None
 14488 ;; Return value:  Size  Location     Type
 14489 ;;		None               void
 14490 ;; Registers used:
 14491 ;;		wreg, status,2, status,0, cstack
 14492 ;; Tracked objects:
 14493 ;;		On entry : F/0
 14494 ;;		On exit  : 0/0
 14495 ;;		Unchanged: 0/0
 14496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14497 ;;      Params:         0       0       0       0       0       0       0
 14498 ;;      Locals:         0       0       0       0       0       0       0
 14499 ;;      Temps:          0       0       0       0       0       0       0
 14500 ;;      Totals:         0       0       0       0       0       0       0
 14501 ;;Total ram usage:        0 bytes
 14502 ;; Hardware stack levels used:    1
 14503 ;; Hardware stack levels required when called:    4
 14504 ;; This function calls:
 14505 ;;		_vscp_writeNicknamePermanent
 14506 ;;		_vscp_getSegmentCRC
 14507 ;;		_vscp_setSegmentCRC
 14508 ;; This function is called by:
 14509 ;;		_vscp_handleProtocolEvent
 14510 ;; This function uses a non-reentrant model
 14511 ;;
 14512                           
 14513                           	psect	text62
 14514  005856                     __ptext62:
 14515                           	opt stack 0
 14516  005856                     _vscp_handleHeartbeat:
 14517                           	opt stack 25
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14521                           
 14522                           ;incstack = 0
 14523                           ;incstack = 0
 14524  005856  ECEC  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14525  00585A  0900               	iorlw	0
 14526  00585C  E116               	bnz	l11224
 14527                           
 14528                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14529                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14530  00585E  0100               	movlb	0	; () banked
 14531  005860  5188               	movf	_vscp_imsg& (0+255),w,b
 14532  005862  0B0F               	andlw	15
 14533  005864  0A05               	xorlw	5
 14534  005866  E115               	bnz	l1079
 14535                           
 14536                           ; BSR set to: 0
 14537  005868  ECEC  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14538  00586C  0100               	movlb	0	; () banked
 14539  00586E  198E               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14540  005870  E010               	bz	l1079
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14544  005872  518E               	movf	(_vscp_imsg+6)& (0+255),w,b
 14545  005874  ECAF  F02E         	call	_vscp_setSegmentCRC
 14546                           
 14547                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14548  005878  0100               	movlb	0	; () banked
 14549  00587A  6986               	setf	_vscp_nickname& (0+255),b
 14550                           
 14551                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14552  00587C  0EFF               	movlw	255
 14553  00587E  ECB8  F02E         	call	_vscp_writeNicknamePermanent
 14554                           
 14555                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14556  005882  0E01               	movlw	1
 14557  005884  0100               	movlb	0	; () banked
 14558  005886  6F87               	movwf	_vscp_node_state& (0+255),b
 14559  005888  D004               	goto	l1079
 14560  00588A                     l11224:
 14561                           
 14562                           ;vscp_firmware.c: 411: else {
 14563                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14564  00588A  0100               	movlb	0	; () banked
 14565  00588C  518E               	movf	(_vscp_imsg+6)& (0+255),w,b
 14566  00588E  ECAF  F02E         	call	_vscp_setSegmentCRC
 14567  005892                     l1079:
 14568  005892  0012               	return	
 14569  005894                     __end_of_vscp_handleHeartbeat:
 14570                           	opt stack 0
 14571                           tblptru	equ	0xFF8
 14572                           tblptrh	equ	0xFF7
 14573                           tblptrl	equ	0xFF6
 14574                           tablat	equ	0xFF5
 14575                           prodh	equ	0xFF4
 14576                           prodl	equ	0xFF3
 14577                           postinc0	equ	0xFEE
 14578                           wreg	equ	0xFE8
 14579                           postdec1	equ	0xFE5
 14580                           fsr1h	equ	0xFE2
 14581                           fsr1l	equ	0xFE1
 14582                           indf2	equ	0xFDF
 14583                           postinc2	equ	0xFDE
 14584                           postdec2	equ	0xFDD
 14585                           fsr2h	equ	0xFDA
 14586                           fsr2l	equ	0xFD9
 14587                           status	equ	0xFD8
 14588                           
 14589 ;; *************** function _vscp_goBootloaderMode *****************
 14590 ;; Defined at:
 14591 ;;		line 2744 in file "../main.c"
 14592 ;; Parameters:    Size  Location     Type
 14593 ;;  algorithm       1    wreg     unsigned char 
 14594 ;; Auto vars:     Size  Location     Type
 14595 ;;  algorithm       1   16[COMRAM] unsigned char 
 14596 ;; Return value:  Size  Location     Type
 14597 ;;		None               void
 14598 ;; Registers used:
 14599 ;;		wreg, status,2, status,0, cstack
 14600 ;; Tracked objects:
 14601 ;;		On entry : F/0
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14605 ;;      Params:         0       0       0       0       0       0       0
 14606 ;;      Locals:         1       0       0       0       0       0       0
 14607 ;;      Temps:          0       0       0       0       0       0       0
 14608 ;;      Totals:         1       0       0       0       0       0       0
 14609 ;;Total ram usage:        1 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    3
 14612 ;; This function calls:
 14613 ;;		_writeEEPROM
 14614 ;; This function is called by:
 14615 ;;		_vscp_handleProtocolEvent
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           	psect	text63
 14620  005CCC                     __ptext63:
 14621                           	opt stack 0
 14622  005CCC                     _vscp_goBootloaderMode:
 14623                           	opt stack 26
 14624                           
 14625                           ;incstack = 0
 14626                           ;incstack = 0
 14627                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14628  005CCC  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;main.c: 2745: if ( 0x01 != algorithm ) return;
 14632  005CD0  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14633  005CD2  E107               	bnz	l594
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;main.c: 2749: writeEEPROM(0x00, 0xff);
 14637  005CD4  6A0F               	clrf	?_writeEEPROM+1,c
 14638  005CD6  6A0E               	clrf	?_writeEEPROM,c
 14639  005CD8  0EFF               	movlw	255
 14640  005CDA  6810               	setf	?_writeEEPROM+2,c
 14641  005CDC  EC9F  F02D         	call	_writeEEPROM	;wreg free
 14642  005CE0  00FF               	reset		;# 
 14643  005CE2                     l594:
 14644  005CE2  0012               	return	
 14645  005CE4                     __end_of_vscp_goBootloaderMode:
 14646                           	opt stack 0
 14647                           tblptru	equ	0xFF8
 14648                           tblptrh	equ	0xFF7
 14649                           tblptrl	equ	0xFF6
 14650                           tablat	equ	0xFF5
 14651                           prodh	equ	0xFF4
 14652                           prodl	equ	0xFF3
 14653                           postinc0	equ	0xFEE
 14654                           wreg	equ	0xFE8
 14655                           postdec1	equ	0xFE5
 14656                           fsr1h	equ	0xFE2
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function _vscp_getMatrixInfo *****************
 14666 ;; Defined at:
 14667 ;;		line 2679 in file "../main.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  pData           1    wreg     PTR unsigned char 
 14670 ;;		 -> vscp_omsg(13), 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14673 ;;		 -> vscp_omsg(13), 
 14674 ;;  i               1   14[COMRAM] unsigned char 
 14675 ;; Return value:  Size  Location     Type
 14676 ;;		None               void
 14677 ;; Registers used:
 14678 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14679 ;; Tracked objects:
 14680 ;;		On entry : F/0
 14681 ;;		On exit  : F/0
 14682 ;;		Unchanged: F/0
 14683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14684 ;;      Params:         0       0       0       0       0       0       0
 14685 ;;      Locals:         2       0       0       0       0       0       0
 14686 ;;      Temps:          0       0       0       0       0       0       0
 14687 ;;      Totals:         2       0       0       0       0       0       0
 14688 ;;Total ram usage:        2 bytes
 14689 ;; Hardware stack levels used:    1
 14690 ;; Hardware stack levels required when called:    2
 14691 ;; This function calls:
 14692 ;;		Nothing
 14693 ;; This function is called by:
 14694 ;;		_vscp_handleProtocolEvent
 14695 ;; This function uses a non-reentrant model
 14696 ;;
 14697                           
 14698                           	psect	text64
 14699  005C6A                     __ptext64:
 14700                           	opt stack 0
 14701  005C6A                     _vscp_getMatrixInfo:
 14702                           	opt stack 27
 14703                           
 14704                           ;incstack = 0
 14705                           ;incstack = 0
 14706                           ;vscp_getMatrixInfo@pData stored from wreg
 14707  005C6A  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;main.c: 2680: uint8_t i;
 14711                           ;main.c: 2684: for (i = 0; i < 8; i++) {
 14712  005C6E  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14713  005C70                     l8080:
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;main.c: 2685: pData[ i ] = 0;
 14717  005C70  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14718  005C72  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14719  005C74  6ED9               	movwf	fsr2l,c
 14720  005C76  6ADA               	clrf	fsr2h,c
 14721  005C78  6ADF               	clrf	indf2,c
 14722                           
 14723                           ; BSR set to: 0
 14724  005C7A  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14725                           
 14726                           ; BSR set to: 0
 14727  005C7C  0E07               	movlw	7
 14728  005C7E  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14729  005C80  D7F7               	goto	l8080
 14730                           
 14731                           ; BSR set to: 0
 14732  005C82  0C07               	retlw	7
 14733  005C84                     __end_of_vscp_getMatrixInfo:
 14734                           	opt stack 0
 14735                           tblptru	equ	0xFF8
 14736                           tblptrh	equ	0xFF7
 14737                           tblptrl	equ	0xFF6
 14738                           tablat	equ	0xFF5
 14739                           prodh	equ	0xFF4
 14740                           prodl	equ	0xFF3
 14741                           postinc0	equ	0xFEE
 14742                           wreg	equ	0xFE8
 14743                           postdec1	equ	0xFE5
 14744                           fsr1h	equ	0xFE2
 14745                           fsr1l	equ	0xFE1
 14746                           indf2	equ	0xFDF
 14747                           postinc2	equ	0xFDE
 14748                           postdec2	equ	0xFDD
 14749                           fsr2h	equ	0xFDA
 14750                           fsr2l	equ	0xFD9
 14751                           status	equ	0xFD8
 14752                           
 14753 ;; *************** function _vscp_handleProbeState *****************
 14754 ;; Defined at:
 14755 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 14756 ;; Parameters:    Size  Location     Type
 14757 ;;		None
 14758 ;; Auto vars:     Size  Location     Type
 14759 ;;		None
 14760 ;; Return value:  Size  Location     Type
 14761 ;;		None               void
 14762 ;; Registers used:
 14763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14764 ;; Tracked objects:
 14765 ;;		On entry : 0/0
 14766 ;;		On exit  : F/0
 14767 ;;		Unchanged: 0/0
 14768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14769 ;;      Params:         0       0       0       0       0       0       0
 14770 ;;      Locals:         0       0       0       0       0       0       0
 14771 ;;      Temps:          0       0       0       0       0       0       0
 14772 ;;      Totals:         0       0       0       0       0       0       0
 14773 ;;Total ram usage:        0 bytes
 14774 ;; Hardware stack levels used:    1
 14775 ;; Hardware stack levels required when called:    8
 14776 ;; This function calls:
 14777 ;;		_vscp_goActiveState
 14778 ;;		_vscp_sendEvent
 14779 ;;		_vscp_writeNicknamePermanent
 14780 ;;		_vscp_setSegmentCRC
 14781 ;; This function is called by:
 14782 ;;		_main
 14783 ;; This function uses a non-reentrant model
 14784 ;;
 14785                           
 14786                           	psect	text65
 14787  004B38                     __ptext65:
 14788                           	opt stack 0
 14789  004B38                     _vscp_handleProbeState:
 14790                           	opt stack 22
 14791                           
 14792                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 14793                           
 14794                           ; BSR set to: 0
 14795                           ;incstack = 0
 14796                           ;incstack = 0
 14797  004B38  D055               	goto	l9692
 14798  004B3A                     l9622:
 14799                           
 14800                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 14801  004B3A  284F               	incf	_vscp_probe_address,w,c
 14802  004B3C  E011               	bz	l9638
 14803                           
 14804                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 14805  004B3E  0E81               	movlw	129
 14806  004B40  0100               	movlb	0	; () banked
 14807  004B42  6F96               	movwf	_vscp_omsg& (0+255),b
 14808                           
 14809                           ; BSR set to: 0
 14810                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 14811  004B44  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
 14812                           
 14813                           ; BSR set to: 0
 14814                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 14815  004B46  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
 14816  004B48  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
 14817                           
 14818                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 14819  004B4A  0E02               	movlw	2
 14820  004B4C  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
 14821                           
 14822                           ; BSR set to: 0
 14823                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14824  004B4E  C04F  F09B         	movff	_vscp_probe_address,_vscp_omsg+5
 14825                           
 14826                           ; BSR set to: 0
 14827                           ;vscp_firmware.c: 216: vscp_sendEvent();
 14828  004B52  EC78  F02D         	call	_vscp_sendEvent	;wreg free
 14829                           
 14830                           ; BSR set to: 0
 14831                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 14832  004B56  0E01               	movlw	1
 14833  004B58  6E4E               	movwf	_vscp_node_substate,c
 14834  004B5A                     l9636:
 14835                           
 14836                           ; BSR set to: 0
 14837                           ;vscp_firmware.c: 219: vscp_timer = 0;
 14838  004B5A  6B7E               	clrf	_vscp_timer& (0+255),b	;volatile
 14839  004B5C  6B7F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14840                           
 14841                           ;vscp_firmware.c: 221: }
 14842  004B5E  D048               	goto	l1046
 14843  004B60                     l9638:
 14844                           
 14845                           ;vscp_firmware.c: 222: else {
 14846                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 14847  004B60  0E04               	movlw	4
 14848  004B62  0100               	movlb	0	; () banked
 14849  004B64  6F87               	movwf	_vscp_node_state& (0+255),b
 14850                           
 14851                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 14852  004B66  0E81               	movlw	129
 14853  004B68  6F96               	movwf	_vscp_omsg& (0+255),b
 14854                           
 14855                           ; BSR set to: 0
 14856                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 14857  004B6A  699B               	setf	(_vscp_omsg+5)& (0+255),b
 14858                           
 14859                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 14860  004B6C  0E07               	movlw	7
 14861  004B6E  6F97               	movwf	(_vscp_omsg+1)& (0+255),b
 14862                           
 14863                           ; BSR set to: 0
 14864                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 14865  004B70  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
 14866  004B72  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
 14867                           
 14868                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 14869  004B74  0E03               	movlw	3
 14870  004B76  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
 14871                           
 14872                           ; BSR set to: 0
 14873                           ;vscp_firmware.c: 235: vscp_sendEvent();
 14874  004B78  EC78  F02D         	call	_vscp_sendEvent	;wreg free
 14875  004B7C  D039               	goto	l1046
 14876  004B7E                     l1047:
 14877                           
 14878                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 14879  004B7E  0100               	movlb	0	; () banked
 14880  004B80  AF88               	btfss	_vscp_imsg& (0+255),7,b
 14881  004B82  D00F               	goto	l9662
 14882                           
 14883                           ; BSR set to: 0
 14884                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 14885                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 14886  004B84  518B               	movf	(_vscp_imsg+3)& (0+255),w,b
 14887  004B86  118A               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14888  004B88  E133               	bnz	l1046
 14889                           
 14890                           ; BSR set to: 0
 14891  004B8A  518C               	movf	(_vscp_imsg+4)& (0+255),w,b
 14892  004B8C  0A03               	xorlw	3
 14893  004B8E  E130               	bnz	l1046
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 14897  004B90  664F               	tstfsz	_vscp_probe_address,c
 14898  004B92  D003               	goto	l9656
 14899                           
 14900                           ; BSR set to: 0
 14901                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 14902  004B94  0E02               	movlw	2
 14903  004B96  6F87               	movwf	_vscp_node_state& (0+255),b
 14904  004B98  D7E0               	goto	l9636
 14905  004B9A                     l9656:
 14906                           
 14907                           ; BSR set to: 0
 14908                           ;vscp_firmware.c: 257: else {
 14909                           ;vscp_firmware.c: 260: vscp_probe_address++;
 14910  004B9A  2A4F               	incf	_vscp_probe_address,f,c
 14911                           
 14912                           ; BSR set to: 0
 14913                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 14914  004B9C  6A4E               	clrf	_vscp_node_substate,c
 14915  004B9E                     l9660:
 14916                           
 14917                           ; BSR set to: 0
 14918                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 14919  004B9E  6A50               	clrf	_vscp_probe_cnt,c
 14920  004BA0  D027               	goto	l1046
 14921  004BA2                     l9662:
 14922                           
 14923                           ; BSR set to: 0
 14924                           ;vscp_firmware.c: 267: else {
 14925                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 14926  004BA2  0EE9               	movlw	233
 14927  004BA4  5D7E               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14928  004BA6  0E03               	movlw	3
 14929  004BA8  597F               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14930  004BAA  E322               	bnc	l1046
 14931                           
 14932                           ; BSR set to: 0
 14933                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 14934  004BAC  2A50               	incf	_vscp_probe_cnt,f,c
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 14938  004BAE  0E02               	movlw	2
 14939  004BB0  6450               	cpfsgt	_vscp_probe_cnt,c
 14940  004BB2  D016               	goto	l1054
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 14944  004BB4  664F               	tstfsz	_vscp_probe_address,c
 14945  004BB6  D005               	goto	l1055
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;vscp_firmware.c: 279: vscp_probe_address++;
 14949  004BB8  2A4F               	incf	_vscp_probe_address,f,c
 14950                           
 14951                           ; BSR set to: 0
 14952                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 14953  004BBA  6A4E               	clrf	_vscp_node_substate,c
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;vscp_firmware.c: 281: vscp_timer = 0;
 14957  004BBC  6B7E               	clrf	_vscp_timer& (0+255),b	;volatile
 14958  004BBE  6B7F               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14959  004BC0  D7EE               	goto	l9660
 14960  004BC2                     l1055:
 14961                           
 14962                           ; BSR set to: 0
 14963                           ;vscp_firmware.c: 285: else {
 14964                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 14965  004BC2  C04F  F086         	movff	_vscp_probe_address,_vscp_nickname
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 14969  004BC6  0E03               	movlw	3
 14970  004BC8  6F87               	movwf	_vscp_node_state& (0+255),b
 14971                           
 14972                           ; BSR set to: 0
 14973                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 14974  004BCA  6A4E               	clrf	_vscp_node_substate,c
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 14978  004BCC  5186               	movf	_vscp_nickname& (0+255),w,b
 14979  004BCE  ECB8  F02E         	call	_vscp_writeNicknamePermanent
 14980                           
 14981                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 14982  004BD2  0E40               	movlw	64
 14983  004BD4  ECAF  F02E         	call	_vscp_setSegmentCRC
 14984                           
 14985                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 14986  004BD8  6A50               	clrf	_vscp_probe_cnt,c
 14987                           
 14988                           ;vscp_firmware.c: 296: vscp_goActiveState();
 14989  004BDA  EC0A  F02E         	call	_vscp_goActiveState	;wreg free
 14990  004BDE  D008               	goto	l1046
 14991  004BE0                     l1054:
 14992                           
 14993                           ;vscp_firmware.c: 300: else {
 14994                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 14995  004BE0  6A4E               	clrf	_vscp_node_substate,c
 14996  004BE2  D006               	goto	l1046
 14997  004BE4                     l9692:
 14998  004BE4  504E               	movf	_vscp_node_substate,w,c
 14999                           
 15000                           ; Switch size 1, requested type "speed"
 15001                           ; Number of cases is 3, Range of values is 0 to 2
 15002                           ; switch strategies available:
 15003                           ; Name         Instructions Cycles
 15004                           ; simple_byte           10     6 (average)
 15005                           ;	Chosen strategy is simple_byte
 15006  004BE6  E0A9               	bz	l9622
 15007  004BE8  0A01               	xorlw	1	; case 1
 15008  004BEA  E0C9               	bz	l1047
 15009  004BEC  0A03               	xorlw	3	; case 2
 15010  004BEE  E1F8               	bnz	l1054
 15011  004BF0                     l1046:
 15012                           
 15013                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15014  004BF0  0100               	movlb	0	; () banked
 15015  004BF2  6B88               	clrf	_vscp_imsg& (0+255),b
 15016                           
 15017                           ; BSR set to: 0
 15018  004BF4  0012               	return	
 15019  004BF6                     __end_of_vscp_handleProbeState:
 15020                           	opt stack 0
 15021                           tblptru	equ	0xFF8
 15022                           tblptrh	equ	0xFF7
 15023                           tblptrl	equ	0xFF6
 15024                           tablat	equ	0xFF5
 15025                           prodh	equ	0xFF4
 15026                           prodl	equ	0xFF3
 15027                           postinc0	equ	0xFEE
 15028                           wreg	equ	0xFE8
 15029                           postdec1	equ	0xFE5
 15030                           fsr1h	equ	0xFE2
 15031                           fsr1l	equ	0xFE1
 15032                           indf2	equ	0xFDF
 15033                           postinc2	equ	0xFDE
 15034                           postdec2	equ	0xFDD
 15035                           fsr2h	equ	0xFDA
 15036                           fsr2l	equ	0xFD9
 15037                           status	equ	0xFD8
 15038                           
 15039 ;; *************** function _vscp_goActiveState *****************
 15040 ;; Defined at:
 15041 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15042 ;; Parameters:    Size  Location     Type
 15043 ;;		None
 15044 ;; Auto vars:     Size  Location     Type
 15045 ;;		None
 15046 ;; Return value:  Size  Location     Type
 15047 ;;		None               void
 15048 ;; Registers used:
 15049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : F/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15055 ;;      Params:         0       0       0       0       0       0       0
 15056 ;;      Locals:         0       0       0       0       0       0       0
 15057 ;;      Temps:          0       0       0       0       0       0       0
 15058 ;;      Totals:         0       0       0       0       0       0       0
 15059 ;;Total ram usage:        0 bytes
 15060 ;; Hardware stack levels used:    1
 15061 ;; Hardware stack levels required when called:    7
 15062 ;; This function calls:
 15063 ;;		_vscp_sendEvent
 15064 ;; This function is called by:
 15065 ;;		_main
 15066 ;;		_vscp_handleProbeState
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           	psect	text66
 15071  005C14                     __ptext66:
 15072                           	opt stack 0
 15073  005C14                     _vscp_goActiveState:
 15074                           	opt stack 22
 15075                           
 15076                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;incstack = 0
 15080                           ;incstack = 0
 15081  005C14  0E81               	movlw	129
 15082  005C16  0100               	movlb	0	; () banked
 15083  005C18  6F96               	movwf	_vscp_omsg& (0+255),b
 15084                           
 15085                           ; BSR set to: 0
 15086                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15087  005C1A  6B97               	clrf	(_vscp_omsg+1)& (0+255),b
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15091  005C1C  6B98               	clrf	(_vscp_omsg+2)& (0+255),b
 15092  005C1E  6B99               	clrf	(_vscp_omsg+3)& (0+255),b
 15093                           
 15094                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15095  005C20  0E02               	movlw	2
 15096  005C22  6F9A               	movwf	(_vscp_omsg+4)& (0+255),b
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15100  005C24  C086  F09B         	movff	_vscp_nickname,_vscp_omsg+5
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15104  005C28  EC78  F02D         	call	_vscp_sendEvent	;wreg free
 15105                           
 15106                           ; BSR set to: 0
 15107                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15108  005C2C  0E01               	movlw	1
 15109  005C2E  6E4C               	movwf	_vscp_initledfunc,c
 15110                           
 15111                           ; BSR set to: 0
 15112  005C30  0C01               	retlw	1
 15113  005C32                     __end_of_vscp_goActiveState:
 15114                           	opt stack 0
 15115                           tblptru	equ	0xFF8
 15116                           tblptrh	equ	0xFF7
 15117                           tblptrl	equ	0xFF6
 15118                           tablat	equ	0xFF5
 15119                           prodh	equ	0xFF4
 15120                           prodl	equ	0xFF3
 15121                           postinc0	equ	0xFEE
 15122                           wreg	equ	0xFE8
 15123                           postdec1	equ	0xFE5
 15124                           fsr1h	equ	0xFE2
 15125                           fsr1l	equ	0xFE1
 15126                           indf2	equ	0xFDF
 15127                           postinc2	equ	0xFDE
 15128                           postdec2	equ	0xFDD
 15129                           fsr2h	equ	0xFDA
 15130                           fsr2l	equ	0xFD9
 15131                           status	equ	0xFD8
 15132                           
 15133 ;; *************** function _vscp_sendEvent *****************
 15134 ;; Defined at:
 15135 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15136 ;; Parameters:    Size  Location     Type
 15137 ;;		None
 15138 ;; Auto vars:     Size  Location     Type
 15139 ;;  rv              1   66[COMRAM] unsigned char 
 15140 ;; Return value:  Size  Location     Type
 15141 ;;                  1    wreg      unsigned char 
 15142 ;; Registers used:
 15143 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15144 ;; Tracked objects:
 15145 ;;		On entry : F/0
 15146 ;;		On exit  : F/0
 15147 ;;		Unchanged: 0/0
 15148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15149 ;;      Params:         0       0       0       0       0       0       0
 15150 ;;      Locals:         1       0       0       0       0       0       0
 15151 ;;      Temps:          0       0       0       0       0       0       0
 15152 ;;      Totals:         1       0       0       0       0       0       0
 15153 ;;Total ram usage:        1 bytes
 15154 ;; Hardware stack levels used:    1
 15155 ;; Hardware stack levels required when called:    6
 15156 ;; This function calls:
 15157 ;;		_sendVSCPFrame
 15158 ;; This function is called by:
 15159 ;;		_doWork
 15160 ;;		_doOneSecondWork
 15161 ;;		_sendTempEvent
 15162 ;;		_vscp_handleProbeState
 15163 ;;		_vscp_goActiveState
 15164 ;;		_vscp_sendHeartBeat
 15165 ;;		_vscp_newNodeOnline
 15166 ;;		_vscp_handleProtocolEvent
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           	psect	text67
 15171  005AF0                     __ptext67:
 15172                           	opt stack 0
 15173  005AF0                     _vscp_sendEvent:
 15174                           	opt stack 23
 15175                           
 15176                           ; BSR set to: 0
 15177                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;incstack = 0
 15181                           ;incstack = 0
 15182  005AF0  C098  F0A3         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15183  005AF4  C099  F0A4         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15184  005AF8  C09A  F0A5         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15185  005AFC  C086  F0A6         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15186  005B00  C097  F0A7         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15187  005B04  5196               	movf	_vscp_omsg& (0+255),w,b
 15188  005B06  0B0F               	andlw	15
 15189  005B08  6FA8               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15190  005B0A  0E9B               	movlw	low (_vscp_omsg+5)
 15191  005B0C  6FA9               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15192  005B0E  EC10  F027         	call	_sendVSCPFrame	;wreg free
 15193  005B12  6E43               	movwf	vscp_sendEvent@rv,c
 15194                           
 15195                           ; BSR set to: 0
 15196                           ;vscp_firmware.c: 1298: }
 15197                           ;vscp_firmware.c: 1300: return rv;
 15198  005B14  5043               	movf	vscp_sendEvent@rv,w,c
 15199                           
 15200                           ; BSR set to: 0
 15201  005B16  0012               	return	
 15202  005B18                     __end_of_vscp_sendEvent:
 15203                           	opt stack 0
 15204                           tblptru	equ	0xFF8
 15205                           tblptrh	equ	0xFF7
 15206                           tblptrl	equ	0xFF6
 15207                           tablat	equ	0xFF5
 15208                           prodh	equ	0xFF4
 15209                           prodl	equ	0xFF3
 15210                           postinc0	equ	0xFEE
 15211                           wreg	equ	0xFE8
 15212                           postdec1	equ	0xFE5
 15213                           fsr1h	equ	0xFE2
 15214                           fsr1l	equ	0xFE1
 15215                           indf2	equ	0xFDF
 15216                           postinc2	equ	0xFDE
 15217                           postdec2	equ	0xFDD
 15218                           fsr2h	equ	0xFDA
 15219                           fsr2l	equ	0xFD9
 15220                           status	equ	0xFD8
 15221                           
 15222 ;; *************** function _sendVSCPFrame *****************
 15223 ;; Defined at:
 15224 ;;		line 2850 in file "../main.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15227 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15228 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15229 ;;  priority        1    4[BANK0 ] unsigned char 
 15230 ;;  size            1    5[BANK0 ] unsigned char 
 15231 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15232 ;;		 -> vscp_omsg(13), 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  id              4   27[BANK0 ] unsigned long 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      unsigned char 
 15237 ;; Registers used:
 15238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : F/0
 15241 ;;		On exit  : F/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15244 ;;      Params:         0       7       0       0       0       0       0
 15245 ;;      Locals:         0       4       0       0       0       0       0
 15246 ;;      Temps:          0      20       0       0       0       0       0
 15247 ;;      Totals:         0      31       0       0       0       0       0
 15248 ;;Total ram usage:       31 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    5
 15251 ;; This function calls:
 15252 ;;		_sendCANFrame
 15253 ;; This function is called by:
 15254 ;;		_vscp_sendEvent
 15255 ;; This function uses a non-reentrant model
 15256 ;;
 15257                           
 15258                           	psect	text68
 15259  004E20                     __ptext68:
 15260                           	opt stack 0
 15261  004E20                     _sendVSCPFrame:
 15262                           	opt stack 23
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;main.c: 2851: uint32_t id = ((uint32_t) priority << 26) |
 15266                           ;main.c: 2852: ((uint32_t) vscpclass << 16) |
 15267                           ;main.c: 2853: ((uint32_t) vscptype << 8) |
 15268                           ;main.c: 2854: nodeid;
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;incstack = 0
 15272                           ;incstack = 0
 15273  004E20  C0A5  F0AA         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15274  004E24  6BAB               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15275  004E26  6BAC               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15276  004E28  6BAD               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15277  004E2A  C0AC  F0AD         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15278  004E2E  C0AB  F0AC         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15279  004E32  C0AA  F0AB         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15280  004E36  6BAA               	clrf	??_sendVSCPFrame& (0+255),b
 15281  004E38  51A3               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15282  004E3A  6FAE               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15283  004E3C  51A4               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15284  004E3E  6FAF               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15285  004E40  6BB0               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15286  004E42  6BB1               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15287  004E44  C0AF  F0B1         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15288  004E48  C0AE  F0B0         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15289  004E4C  6BAF               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15290  004E4E  6BAE               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15291  004E50  C0A7  F0B2         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15292  004E54  6BB3               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15293  004E56  6BB4               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15294  004E58  6BB5               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15295  004E5A  0E1A               	movlw	26
 15296  004E5C                     u9045:
 15297  004E5C  90D8               	bcf	status,0,c
 15298  004E5E  37B2               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15299  004E60  37B3               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15300  004E62  37B4               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15301  004E64  37B5               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15302  004E66  2EE8               	decfsz	wreg,f,c
 15303  004E68  D7F9               	goto	u9045
 15304  004E6A  51AE               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15305  004E6C  11B2               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15306  004E6E  6FB6               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15307  004E70  51AF               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15308  004E72  11B3               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15309  004E74  6FB7               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15310  004E76  51B0               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15311  004E78  11B4               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15312  004E7A  6FB8               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15313  004E7C  51B1               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15314  004E7E  11B5               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15315  004E80  6FB9               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15316  004E82  51AA               	movf	??_sendVSCPFrame& (0+255),w,b
 15317  004E84  11B6               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15318  004E86  6FBA               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15319  004E88  51AB               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15320  004E8A  11B7               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15321  004E8C  6FBB               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15322  004E8E  51AC               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15323  004E90  11B8               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15324  004E92  6FBC               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15325  004E94  51AD               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15326  004E96  11B9               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15327  004E98  6FBD               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15328  004E9A  51A6               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15329  004E9C  11BA               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15330  004E9E  6FBE               	movwf	sendVSCPFrame@id& (0+255),b
 15331  004EA0  51BB               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15332  004EA2  6FBF               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15333  004EA4  51BC               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15334  004EA6  6FC0               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15335  004EA8  51BD               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15336  004EAA  6FC1               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15337                           
 15338                           ; BSR set to: 0
 15339                           ;main.c: 2858: vscp_errorcnt++;
 15340  004EAC  C0BE  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15341  004EB0  C0BF  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15342  004EB4  C0C0  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15343  004EB8  C0C1  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15344  004EBC  C0A8  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15345  004EC0  C0A9  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15346  004EC4  ECC5  F02B         	call	_sendCANFrame	;wreg free
 15347  004EC8  0900               	iorlw	0
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;main.c: 2859: return 0;
 15351  004ECA  0E00               	movlw	0
 15352  004ECC  A4D8               	btfss	status,2,c
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;main.c: 2860: }
 15356                           ;main.c: 2862: return 1;
 15357  004ECE  0E01               	movlw	1
 15358                           
 15359                           ; BSR set to: 0
 15360  004ED0  0012               	return	
 15361  004ED2                     __end_of_sendVSCPFrame:
 15362                           	opt stack 0
 15363                           tblptru	equ	0xFF8
 15364                           tblptrh	equ	0xFF7
 15365                           tblptrl	equ	0xFF6
 15366                           tablat	equ	0xFF5
 15367                           prodh	equ	0xFF4
 15368                           prodl	equ	0xFF3
 15369                           postinc0	equ	0xFEE
 15370                           wreg	equ	0xFE8
 15371                           postdec1	equ	0xFE5
 15372                           fsr1h	equ	0xFE2
 15373                           fsr1l	equ	0xFE1
 15374                           indf2	equ	0xFDF
 15375                           postinc2	equ	0xFDE
 15376                           postdec2	equ	0xFDD
 15377                           fsr2h	equ	0xFDA
 15378                           fsr2l	equ	0xFD9
 15379                           status	equ	0xFD8
 15380                           
 15381 ;; *************** function _sendCANFrame *****************
 15382 ;; Defined at:
 15383 ;;		line 2897 in file "../main.c"
 15384 ;; Parameters:    Size  Location     Type
 15385 ;;  id              4   59[COMRAM] unsigned long 
 15386 ;;  dlc             1   63[COMRAM] unsigned char 
 15387 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15388 ;;		 -> vscp_omsg(13), 
 15389 ;; Auto vars:     Size  Location     Type
 15390 ;;  rv              1   65[COMRAM] unsigned char 
 15391 ;; Return value:  Size  Location     Type
 15392 ;;                  1    wreg      unsigned char 
 15393 ;; Registers used:
 15394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15395 ;; Tracked objects:
 15396 ;;		On entry : F/0
 15397 ;;		On exit  : F/0
 15398 ;;		Unchanged: 0/0
 15399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15400 ;;      Params:         6       0       0       0       0       0       0
 15401 ;;      Locals:         1       0       0       0       0       0       0
 15402 ;;      Temps:          0       0       0       0       0       0       0
 15403 ;;      Totals:         7       0       0       0       0       0       0
 15404 ;;Total ram usage:        7 bytes
 15405 ;; Hardware stack levels used:    1
 15406 ;; Hardware stack levels required when called:    4
 15407 ;; This function calls:
 15408 ;;		_ECANSendMessage
 15409 ;; This function is called by:
 15410 ;;		_sendVSCPFrame
 15411 ;; This function uses a non-reentrant model
 15412 ;;
 15413                           
 15414                           	psect	text69
 15415  00578A                     __ptext69:
 15416                           	opt stack 0
 15417  00578A                     _sendCANFrame:
 15418                           	opt stack 23
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;main.c: 2898: uint8_t rv = 0;
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;incstack = 0
 15425                           ;incstack = 0
 15426  00578A  6A42               	clrf	sendCANFrame@rv,c
 15427                           
 15428                           ;main.c: 2900: sendTimer = 0;
 15429  00578C  6B7A               	clrf	_sendTimer& (0+255),b	;volatile
 15430  00578E  6B7B               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 15431                           
 15432                           ;main.c: 2901: while ( sendTimer < 1000 ) {
 15433  005790  D015               	goto	l11096
 15434  005792                     l11092:
 15435                           
 15436                           ; BSR set to: 0
 15437                           ;main.c: 2902: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15438  005792  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15439  005796  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15440  00579A  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15441  00579E  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15442  0057A2  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15443  0057A6  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15444  0057AA  0E20               	movlw	32
 15445  0057AC  6E1E               	movwf	?_ECANSendMessage+6,c
 15446  0057AE  EC09  F020         	call	_ECANSendMessage	;wreg free
 15447  0057B2  0900               	iorlw	0
 15448  0057B4  E003               	bz	l11096
 15449                           
 15450                           ;main.c: 2903: rv = 1;
 15451  0057B6  0E01               	movlw	1
 15452  0057B8  6E42               	movwf	sendCANFrame@rv,c
 15453                           
 15454                           ;main.c: 2904: break;
 15455  0057BA  D006               	goto	l635
 15456  0057BC                     l11096:
 15457  0057BC  0EE8               	movlw	232
 15458  0057BE  0100               	movlb	0	; () banked
 15459  0057C0  5D7A               	subwf	_sendTimer& (0+255),w,b	;volatile
 15460  0057C2  0E03               	movlw	3
 15461  0057C4  597B               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 15462  0057C6  E3E5               	bnc	l11092
 15463  0057C8                     l635:
 15464                           
 15465                           ;main.c: 2905: }
 15466                           ;main.c: 2906: }
 15467                           ;main.c: 2908: vscp_omsg.flags = 0;
 15468  0057C8  0100               	movlb	0	; () banked
 15469  0057CA  6B96               	clrf	_vscp_omsg& (0+255),b
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;main.c: 2910: return rv;
 15473  0057CC  5042               	movf	sendCANFrame@rv,w,c
 15474                           
 15475                           ; BSR set to: 0
 15476  0057CE  0012               	return	
 15477  0057D0                     __end_of_sendCANFrame:
 15478                           	opt stack 0
 15479                           tblptru	equ	0xFF8
 15480                           tblptrh	equ	0xFF7
 15481                           tblptrl	equ	0xFF6
 15482                           tablat	equ	0xFF5
 15483                           prodh	equ	0xFF4
 15484                           prodl	equ	0xFF3
 15485                           postinc0	equ	0xFEE
 15486                           wreg	equ	0xFE8
 15487                           postdec1	equ	0xFE5
 15488                           fsr1h	equ	0xFE2
 15489                           fsr1l	equ	0xFE1
 15490                           indf2	equ	0xFDF
 15491                           postinc2	equ	0xFDE
 15492                           postdec2	equ	0xFDD
 15493                           fsr2h	equ	0xFDA
 15494                           fsr2l	equ	0xFD9
 15495                           status	equ	0xFD8
 15496                           
 15497 ;; *************** function _ECANSendMessage *****************
 15498 ;; Defined at:
 15499 ;;		line 617 in file "../ECAN.c"
 15500 ;; Parameters:    Size  Location     Type
 15501 ;;  id              4   23[COMRAM] unsigned long 
 15502 ;;  data            1   27[COMRAM] PTR unsigned char 
 15503 ;;		 -> vscp_omsg(13), 
 15504 ;;  dataLen         1   28[COMRAM] unsigned char 
 15505 ;;  msgFlags        1   29[COMRAM] enum E16306
 15506 ;; Auto vars:     Size  Location     Type
 15507 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15508 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15509 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15510 ;;		 -> B0CON(1), 
 15511 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15512 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15513 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15514 ;;		 -> B0CON(1), 
 15515 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15516 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15517 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15518 ;;		 -> B0CON(1), 
 15519 ;;  i               1   56[COMRAM] unsigned char 
 15520 ;;  temp            1   55[COMRAM] unsigned char 
 15521 ;;  tempBSEL0       1   52[COMRAM] struct .
 15522 ;;  j               1   51[COMRAM] unsigned char 
 15523 ;;  buffers         1   50[COMRAM] unsigned char 
 15524 ;;  mode            1   49[COMRAM] unsigned char 
 15525 ;; Return value:  Size  Location     Type
 15526 ;;                  1    wreg      enum E15660
 15527 ;; Registers used:
 15528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15529 ;; Tracked objects:
 15530 ;;		On entry : F/0
 15531 ;;		On exit  : 2/0
 15532 ;;		Unchanged: 0/0
 15533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15534 ;;      Params:         7       0       0       0       0       0       0
 15535 ;;      Locals:        28       0       0       0       0       0       0
 15536 ;;      Temps:          1       0       0       0       0       0       0
 15537 ;;      Totals:        36       0       0       0       0       0       0
 15538 ;;Total ram usage:       36 bytes
 15539 ;; Hardware stack levels used:    1
 15540 ;; Hardware stack levels required when called:    3
 15541 ;; This function calls:
 15542 ;;		__CANIDToRegs
 15543 ;; This function is called by:
 15544 ;;		_sendCANFrame
 15545 ;; This function uses a non-reentrant model
 15546 ;;
 15547                           
 15548                           	psect	text70
 15549  004012                     __ptext70:
 15550                           	opt stack 0
 15551  004012                     _ECANSendMessage:
 15552                           	opt stack 23
 15553                           
 15554                           ; BSR set to: 0
 15555                           ;ECAN.c: 619: BYTE mode;
 15556                           ;ECAN.c: 620: BYTE buffers;
 15557                           ;ECAN.c: 628: BYTE i,j;
 15558                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15559                           ;ECAN.c: 630: BYTE* pb[9];
 15560                           ;ECAN.c: 631: BYTE temp;
 15561                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15562                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;incstack = 0
 15566                           ;incstack = 0
 15567  004012  0E0F               	movlw	15	;volatile
 15568  004014  6E21               	movwf	ECANSendMessage@pb+1,c
 15569  004016  0E40               	movlw	64	;volatile
 15570  004018  6E20               	movwf	ECANSendMessage@pb,c
 15571                           
 15572                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15573  00401A  0E0F               	movlw	15	;volatile
 15574  00401C  6E23               	movwf	ECANSendMessage@pb+3,c
 15575  00401E  0E30               	movlw	48	;volatile
 15576  004020  6E22               	movwf	ECANSendMessage@pb+2,c
 15577                           
 15578                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15579  004022  0E0F               	movlw	15	;volatile
 15580  004024  6E25               	movwf	ECANSendMessage@pb+5,c
 15581  004026  0E20               	movlw	32	;volatile
 15582  004028  6E24               	movwf	ECANSendMessage@pb+4,c
 15583                           
 15584                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15585  00402A  0E0E               	movlw	14	;volatile
 15586  00402C  6E27               	movwf	ECANSendMessage@pb+7,c
 15587  00402E  0E20               	movlw	32	;volatile
 15588  004030  6E26               	movwf	ECANSendMessage@pb+6,c
 15589                           
 15590                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15591  004032  0E0E               	movlw	14	;volatile
 15592  004034  6E29               	movwf	ECANSendMessage@pb+9,c
 15593  004036  0E30               	movlw	48	;volatile
 15594  004038  6E28               	movwf	ECANSendMessage@pb+8,c
 15595                           
 15596                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15597  00403A  0E0E               	movlw	14	;volatile
 15598  00403C  6E2B               	movwf	ECANSendMessage@pb+11,c
 15599  00403E  0E40               	movlw	64	;volatile
 15600  004040  6E2A               	movwf	ECANSendMessage@pb+10,c
 15601                           
 15602                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15603  004042  0E0E               	movlw	14	;volatile
 15604  004044  6E2D               	movwf	ECANSendMessage@pb+13,c
 15605  004046  0E50               	movlw	80	;volatile
 15606  004048  6E2C               	movwf	ECANSendMessage@pb+12,c
 15607                           
 15608                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15609  00404A  0E0E               	movlw	14	;volatile
 15610  00404C  6E2F               	movwf	ECANSendMessage@pb+15,c
 15611  00404E  0E60               	movlw	96	;volatile
 15612  004050  6E2E               	movwf	ECANSendMessage@pb+14,c
 15613                           
 15614                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15615  004052  0E0E               	movlw	14	;volatile
 15616  004054  6E31               	movwf	ECANSendMessage@pb+17,c
 15617  004056  0E70               	movlw	112	;volatile
 15618  004058  6E30               	movwf	ECANSendMessage@pb+16,c
 15619                           
 15620                           ; BSR set to: 14
 15621                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15622  00405A  5077               	movf	3959,w,c	;volatile
 15623  00405C  0BC0               	andlw	192
 15624  00405E  6E32               	movwf	ECANSendMessage@mode,c
 15625                           
 15626                           ; BSR set to: 14
 15627                           ;ECAN.c: 660: if ( mode == 0x00 )
 15628  004060  6632               	tstfsz	ECANSendMessage@mode,c
 15629  004062  D002               	goto	l11110
 15630                           
 15631                           ; BSR set to: 14
 15632                           ;ECAN.c: 661: buffers = 2;
 15633  004064  0E02               	movlw	2
 15634  004066  D001               	goto	L33
 15635  004068                     l11110:
 15636                           
 15637                           ; BSR set to: 14
 15638                           ;ECAN.c: 662: else
 15639                           ;ECAN.c: 663: buffers = 8;
 15640  004068  0E08               	movlw	8
 15641  00406A                     L33:
 15642  00406A  6E33               	movwf	ECANSendMessage@buffers,c
 15643                           
 15644                           ; BSR set to: 14
 15645                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15646  00406C  010D               	movlb	13	; () banked
 15647  00406E  90D8               	bcf	status,0,c
 15648  004070  31F8               	rrcf	248,w,b	;volatile
 15649  004072  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15650                           
 15651                           ; BSR set to: 13
 15652                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15653  004074  6A39               	clrf	ECANSendMessage@i,c
 15654  004076  D07B               	goto	l11170
 15655  004078                     l11116:
 15656                           
 15657                           ;ECAN.c: 688: {
 15658                           ;ECAN.c: 693: ptr = pb[i];
 15659  004078  5039               	movf	ECANSendMessage@i,w,c
 15660  00407A  0D02               	mullw	2
 15661  00407C  50F3               	movf	prodl,w,c
 15662  00407E  0F20               	addlw	low ECANSendMessage@pb
 15663  004080  6ED9               	movwf	fsr2l,c
 15664  004082  6ADA               	clrf	fsr2h,c
 15665  004084  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15666  004088  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15667                           
 15668                           ;ECAN.c: 694: tempPtr = ptr;
 15669  00408C  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15670  004090  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15671                           
 15672                           ;ECAN.c: 702: if ( i > 2 )
 15673  004094  0E02               	movlw	2
 15674  004096  6439               	cpfsgt	ECANSendMessage@i,c
 15675  004098  D004               	goto	l11128
 15676                           
 15677                           ;ECAN.c: 703: {
 15678                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15679  00409A  90D8               	bcf	status,0,c
 15680  00409C  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15681                           
 15682                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15683  00409E  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15684  0040A0  D065               	goto	l11168
 15685  0040A2                     l11128:
 15686                           
 15687                           ;ECAN.c: 714: }
 15688                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15689  0040A2  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15690  0040A6  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15691  0040AA  50DF               	movf	indf2,w,c
 15692  0040AC  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15693  0040AE  B61F               	btfsc	??_ECANSendMessage,3,c
 15694  0040B0  D05D               	goto	l11168
 15695                           
 15696                           ;ECAN.c: 721: {
 15697                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15698  0040B2  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15699  0040B6  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15700  0040BA  0EFC               	movlw	252
 15701  0040BC  16DF               	andwf	indf2,f,c
 15702                           
 15703                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15704  0040BE  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15705  0040C2  0E03               	movlw	3
 15706  0040C4  161F               	andwf	??_ECANSendMessage,f,c
 15707  0040C6  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15708  0040CA  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15709  0040CE  501F               	movf	??_ECANSendMessage,w,c
 15710  0040D0  12DF               	iorwf	indf2,f,c
 15711                           
 15712                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15713  0040D2  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15714  0040D4  D004               	goto	l823
 15715                           
 15716                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15717  0040D6  501D               	movf	ECANSendMessage@dataLen,w,c
 15718  0040D8  0940               	iorlw	64
 15719  0040DA  6E38               	movwf	ECANSendMessage@temp,c
 15720  0040DC  D002               	goto	l11138
 15721  0040DE                     l823:
 15722                           
 15723                           ;ECAN.c: 729: else
 15724                           ;ECAN.c: 730: temp = dataLen;
 15725  0040DE  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15726  0040E2                     l11138:
 15727                           
 15728                           ;ECAN.c: 732: *(ptr+5) = temp;
 15729  0040E2  EE20 F005          	lfsr	2,5
 15730  0040E6  503A               	movf	ECANSendMessage@ptr,w,c
 15731  0040E8  26D9               	addwf	fsr2l,f,c
 15732  0040EA  503B               	movf	ECANSendMessage@ptr+1,w,c
 15733  0040EC  22DA               	addwfc	fsr2h,f,c
 15734  0040EE  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15735                           
 15736                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15737  0040F2  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15738  0040F4  D003               	goto	l825
 15739                           
 15740                           ;ECAN.c: 736: temp = 1;
 15741  0040F6  0E01               	movlw	1
 15742  0040F8  6E38               	movwf	ECANSendMessage@temp,c
 15743  0040FA  D001               	goto	l11144
 15744  0040FC                     l825:
 15745                           
 15746                           ;ECAN.c: 738: else
 15747                           ;ECAN.c: 739: temp = 0;
 15748  0040FC  6A38               	clrf	ECANSendMessage@temp,c
 15749  0040FE                     l11144:
 15750                           
 15751                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15752  0040FE  283A               	incf	ECANSendMessage@ptr,w,c
 15753  004100  6E0E               	movwf	?__CANIDToRegs,c
 15754  004102  0E00               	movlw	0
 15755  004104  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15756  004106  6E0F               	movwf	?__CANIDToRegs+1,c
 15757  004108  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15758  00410C  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15759  004110  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15760  004114  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15761  004118  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15762  00411C  EC1E  F022         	call	__CANIDToRegs	;wreg free
 15763                           
 15764                           ;ECAN.c: 745: ptr += 6;
 15765  004120  0E06               	movlw	6
 15766  004122  263A               	addwf	ECANSendMessage@ptr,f,c
 15767  004124  0E00               	movlw	0
 15768  004126  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15769                           
 15770                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15771  004128  6A34               	clrf	ECANSendMessage@j,c
 15772  00412A  D00D               	goto	l11158
 15773  00412C                     l11150:
 15774                           
 15775                           ;ECAN.c: 748: *ptr++ = *data++;
 15776  00412C  501C               	movf	ECANSendMessage@data,w,c
 15777  00412E  6ED9               	movwf	fsr2l,c
 15778  004130  6ADA               	clrf	fsr2h,c
 15779  004132  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15780  004136  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15781  00413A  CFDF FFE7          	movff	indf2,indf1
 15782  00413E  2A1C               	incf	ECANSendMessage@data,f,c
 15783  004140  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15784  004142  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15785  004144  2A34               	incf	ECANSendMessage@j,f,c
 15786  004146                     l11158:
 15787  004146  501D               	movf	ECANSendMessage@dataLen,w,c
 15788  004148  5C34               	subwf	ECANSendMessage@j,w,c
 15789  00414A  E3F0               	bnc	l11150
 15790                           
 15791                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15792  00414C  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15793  004150  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15794  004154  50DF               	movf	indf2,w,c
 15795  004156  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15796  004158  B41F               	btfsc	??_ECANSendMessage,2,c
 15797  00415A  D006               	goto	l11164
 15798                           
 15799                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15800  00415C  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15801  004160  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15802  004164  0E00               	movlw	0
 15803  004166  86DB               	bsf	plusw2,3,c
 15804  004168                     l11164:
 15805                           
 15806                           ;ECAN.c: 755: return TRUE;
 15807  004168  0E01               	movlw	1
 15808  00416A  D005               	goto	l831
 15809  00416C                     l11168:
 15810  00416C  2A39               	incf	ECANSendMessage@i,f,c
 15811  00416E                     l11170:
 15812  00416E  5033               	movf	ECANSendMessage@buffers,w,c
 15813  004170  5C39               	subwf	ECANSendMessage@i,w,c
 15814  004172  E382               	bnc	l11116
 15815                           
 15816                           ;ECAN.c: 756: }
 15817                           ;ECAN.c: 757: }
 15818                           ;ECAN.c: 760: return FALSE;
 15819  004174  0E00               	movlw	0
 15820  004176                     l831:
 15821  004176  0012               	return	
 15822  004178                     __end_of_ECANSendMessage:
 15823                           	opt stack 0
 15824                           tblptru	equ	0xFF8
 15825                           tblptrh	equ	0xFF7
 15826                           tblptrl	equ	0xFF6
 15827                           tablat	equ	0xFF5
 15828                           prodh	equ	0xFF4
 15829                           prodl	equ	0xFF3
 15830                           postinc0	equ	0xFEE
 15831                           wreg	equ	0xFE8
 15832                           indf1	equ	0xFE7
 15833                           postdec1	equ	0xFE5
 15834                           fsr1h	equ	0xFE2
 15835                           fsr1l	equ	0xFE1
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           plusw2	equ	0xFDB
 15840                           fsr2h	equ	0xFDA
 15841                           fsr2l	equ	0xFD9
 15842                           status	equ	0xFD8
 15843                           
 15844 ;; *************** function __CANIDToRegs *****************
 15845 ;; Defined at:
 15846 ;;		line 1099 in file "../ECAN.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15849 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15850 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15851 ;;		 -> B0CON(1), 
 15852 ;;  val             4   15[COMRAM] unsigned long 
 15853 ;;  type            1   19[COMRAM] unsigned char 
 15854 ;; Auto vars:     Size  Location     Type
 15855 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15856 ;;		 -> _CANIDToRegs@val(4), 
 15857 ;; Return value:  Size  Location     Type
 15858 ;;		None               void
 15859 ;; Registers used:
 15860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15861 ;; Tracked objects:
 15862 ;;		On entry : 2/D
 15863 ;;		On exit  : 2/0
 15864 ;;		Unchanged: 2/0
 15865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15866 ;;      Params:         7       0       0       0       0       0       0
 15867 ;;      Locals:         1       0       0       0       0       0       0
 15868 ;;      Temps:          2       0       0       0       0       0       0
 15869 ;;      Totals:        10       0       0       0       0       0       0
 15870 ;;Total ram usage:       10 bytes
 15871 ;; Hardware stack levels used:    1
 15872 ;; Hardware stack levels required when called:    2
 15873 ;; This function calls:
 15874 ;;		Nothing
 15875 ;; This function is called by:
 15876 ;;		_ECANSendMessage
 15877 ;; This function uses a non-reentrant model
 15878 ;;
 15879                           
 15880                           	psect	text71
 15881  00443C                     __ptext71:
 15882                           	opt stack 0
 15883  00443C                     __CANIDToRegs:
 15884                           	opt stack 23
 15885                           
 15886                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15887                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15888                           
 15889                           ;incstack = 0
 15890                           ;incstack = 0
 15891  00443C  0E10               	movlw	low __CANIDToRegs@val
 15892  00443E  6E17               	movwf	__CANIDToRegs@Value,c
 15893                           
 15894                           ;ECAN.c: 1104: if ( type == 0 )
 15895  004440  6614               	tstfsz	__CANIDToRegs@type,c
 15896  004442  D037               	goto	l11186
 15897                           
 15898                           ;ECAN.c: 1105: {
 15899                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15900  004444  5017               	movf	__CANIDToRegs@Value,w,c
 15901  004446  6ED9               	movwf	fsr2l,c
 15902  004448  6ADA               	clrf	fsr2h,c
 15903  00444A  50DF               	movf	indf2,w,c
 15904  00444C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15905  00444E  90D8               	bcf	status,0,c
 15906  004450  3215               	rrcf	??__CANIDToRegs,f,c
 15907  004452  90D8               	bcf	status,0,c
 15908  004454  3215               	rrcf	??__CANIDToRegs,f,c
 15909  004456  90D8               	bcf	status,0,c
 15910  004458  3015               	rrcf	??__CANIDToRegs,w,c
 15911  00445A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15912  00445E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15913  004462  6EDF               	movwf	indf2,c
 15914                           
 15915                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15916  004464  5017               	movf	__CANIDToRegs@Value,w,c
 15917  004466  6ED9               	movwf	fsr2l,c
 15918  004468  6ADA               	clrf	fsr2h,c
 15919  00446A  2AD9               	incf	fsr2l,f,c
 15920  00446C  6ADA               	clrf	fsr2h,c
 15921  00446E  50DF               	movf	indf2,w,c
 15922  004470  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15923  004472  0E05               	movlw	5
 15924  004474  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15925  004476                     u9185:
 15926  004476  90D8               	bcf	status,0,c
 15927  004478  3615               	rlcf	??__CANIDToRegs,f,c
 15928  00447A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15929  00447C  D7FC               	goto	u9185
 15930  00447E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15931  004482  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15932  004486  5015               	movf	??__CANIDToRegs,w,c
 15933  004488  12DF               	iorwf	indf2,f,c
 15934                           
 15935                           ;ECAN.c: 1109: ptr++;
 15936  00448A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15937  00448C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15938                           
 15939                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15940  00448E  5017               	movf	__CANIDToRegs@Value,w,c
 15941  004490  6ED9               	movwf	fsr2l,c
 15942  004492  6ADA               	clrf	fsr2h,c
 15943  004494  50DF               	movf	indf2,w,c
 15944  004496  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15945  004498  0E05               	movlw	5
 15946  00449A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15947  00449C                     u9195:
 15948  00449C  90D8               	bcf	status,0,c
 15949  00449E  3615               	rlcf	??__CANIDToRegs,f,c
 15950  0044A0  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15951  0044A2  D7FC               	goto	u9195
 15952  0044A4  5015               	movf	??__CANIDToRegs,w,c
 15953  0044A6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15954  0044AA  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15955  0044AE  6EDF               	movwf	indf2,c
 15956                           
 15957                           ;ECAN.c: 1111: }
 15958  0044B0  D06C               	goto	l885
 15959  0044B2                     l11186:
 15960                           
 15961                           ;ECAN.c: 1112: else
 15962                           ;ECAN.c: 1113: {
 15963                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 15964  0044B2  5017               	movf	__CANIDToRegs@Value,w,c
 15965  0044B4  6ED9               	movwf	fsr2l,c
 15966  0044B6  6ADA               	clrf	fsr2h,c
 15967  0044B8  0E02               	movlw	2
 15968  0044BA  26D9               	addwf	fsr2l,f,c
 15969  0044BC  6ADA               	clrf	fsr2h,c
 15970  0044BE  50DF               	movf	indf2,w,c
 15971  0044C0  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15972  0044C2  0E05               	movlw	5
 15973  0044C4  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15974  0044C6                     u9205:
 15975  0044C6  90D8               	bcf	status,0,c
 15976  0044C8  3215               	rrcf	??__CANIDToRegs,f,c
 15977  0044CA  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15978  0044CC  D7FC               	goto	u9205
 15979  0044CE  5015               	movf	??__CANIDToRegs,w,c
 15980  0044D0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15981  0044D4  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15982  0044D8  6EDF               	movwf	indf2,c
 15983                           
 15984                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 15985  0044DA  5017               	movf	__CANIDToRegs@Value,w,c
 15986  0044DC  6ED9               	movwf	fsr2l,c
 15987  0044DE  6ADA               	clrf	fsr2h,c
 15988  0044E0  0E03               	movlw	3
 15989  0044E2  26D9               	addwf	fsr2l,f,c
 15990  0044E4  6ADA               	clrf	fsr2h,c
 15991  0044E6  50DF               	movf	indf2,w,c
 15992  0044E8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15993  0044EA  90D8               	bcf	status,0,c
 15994  0044EC  3615               	rlcf	??__CANIDToRegs,f,c
 15995  0044EE  90D8               	bcf	status,0,c
 15996  0044F0  3615               	rlcf	??__CANIDToRegs,f,c
 15997  0044F2  90D8               	bcf	status,0,c
 15998  0044F4  3615               	rlcf	??__CANIDToRegs,f,c
 15999  0044F6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16000  0044FA  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16001  0044FE  5015               	movf	??__CANIDToRegs,w,c
 16002  004500  12DF               	iorwf	indf2,f,c
 16003                           
 16004                           ;ECAN.c: 1117: ptr++;
 16005  004502  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16006  004504  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16007                           
 16008                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16009  004506  5017               	movf	__CANIDToRegs@Value,w,c
 16010  004508  6ED9               	movwf	fsr2l,c
 16011  00450A  6ADA               	clrf	fsr2h,c
 16012  00450C  0E02               	movlw	2
 16013  00450E  26D9               	addwf	fsr2l,f,c
 16014  004510  6ADA               	clrf	fsr2h,c
 16015  004512  50DF               	movf	indf2,w,c
 16016  004514  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16017  004516  90D8               	bcf	status,0,c
 16018  004518  3615               	rlcf	??__CANIDToRegs,f,c
 16019  00451A  90D8               	bcf	status,0,c
 16020  00451C  3615               	rlcf	??__CANIDToRegs,f,c
 16021  00451E  90D8               	bcf	status,0,c
 16022  004520  3415               	rlcf	??__CANIDToRegs,w,c
 16023  004522  0BE0               	andlw	224
 16024  004524  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16025  004528  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16026  00452C  6EDF               	movwf	indf2,c
 16027                           
 16028                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16029  00452E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16030  004532  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16031  004536  0E00               	movlw	0
 16032  004538  86DB               	bsf	plusw2,3,c
 16033                           
 16034                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16035  00453A  5017               	movf	__CANIDToRegs@Value,w,c
 16036  00453C  6ED9               	movwf	fsr2l,c
 16037  00453E  6ADA               	clrf	fsr2h,c
 16038  004540  0E02               	movlw	2
 16039  004542  26D9               	addwf	fsr2l,f,c
 16040  004544  6ADA               	clrf	fsr2h,c
 16041  004546  50DF               	movf	indf2,w,c
 16042  004548  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16043  00454A  0E03               	movlw	3
 16044  00454C  1615               	andwf	??__CANIDToRegs,f,c
 16045  00454E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16046  004552  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16047  004556  5015               	movf	??__CANIDToRegs,w,c
 16048  004558  12DF               	iorwf	indf2,f,c
 16049                           
 16050                           ;ECAN.c: 1122: ptr++;
 16051  00455A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16052  00455C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16053                           
 16054                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16055  00455E  5017               	movf	__CANIDToRegs@Value,w,c
 16056  004560  6ED9               	movwf	fsr2l,c
 16057  004562  6ADA               	clrf	fsr2h,c
 16058  004564  2AD9               	incf	fsr2l,f,c
 16059  004566  6ADA               	clrf	fsr2h,c
 16060  004568  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16061  00456C  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16062  004570  CFDF FFE7          	movff	indf2,indf1
 16063                           
 16064                           ;ECAN.c: 1124: ptr++;
 16065  004574  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16066  004576  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16067                           
 16068                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16069  004578  5017               	movf	__CANIDToRegs@Value,w,c
 16070  00457A  6ED9               	movwf	fsr2l,c
 16071  00457C  6ADA               	clrf	fsr2h,c
 16072  00457E  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16073  004582  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16074  004586  CFDF FFE7          	movff	indf2,indf1
 16075  00458A                     l885:
 16076  00458A  0012               	return	
 16077  00458C                     __end_of__CANIDToRegs:
 16078                           	opt stack 0
 16079                           tblptru	equ	0xFF8
 16080                           tblptrh	equ	0xFF7
 16081                           tblptrl	equ	0xFF6
 16082                           tablat	equ	0xFF5
 16083                           prodh	equ	0xFF4
 16084                           prodl	equ	0xFF3
 16085                           postinc0	equ	0xFEE
 16086                           wreg	equ	0xFE8
 16087                           indf1	equ	0xFE7
 16088                           postdec1	equ	0xFE5
 16089                           fsr1h	equ	0xFE2
 16090                           fsr1l	equ	0xFE1
 16091                           indf2	equ	0xFDF
 16092                           postinc2	equ	0xFDE
 16093                           postdec2	equ	0xFDD
 16094                           plusw2	equ	0xFDB
 16095                           fsr2h	equ	0xFDA
 16096                           fsr2l	equ	0xFD9
 16097                           status	equ	0xFD8
 16098                           
 16099 ;; *************** function _vscp_getEvent *****************
 16100 ;; Defined at:
 16101 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16102 ;; Parameters:    Size  Location     Type
 16103 ;;		None
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;  rv              1   49[COMRAM] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;                  1    wreg      unsigned char 
 16108 ;; Registers used:
 16109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16110 ;; Tracked objects:
 16111 ;;		On entry : F/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16115 ;;      Params:         0       0       0       0       0       0       0
 16116 ;;      Locals:         1       0       0       0       0       0       0
 16117 ;;      Temps:          0       0       0       0       0       0       0
 16118 ;;      Totals:         1       0       0       0       0       0       0
 16119 ;;Total ram usage:        1 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    6
 16122 ;; This function calls:
 16123 ;;		_getVSCPFrame
 16124 ;; This function is called by:
 16125 ;;		_main
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           	psect	text72
 16130  005A9E                     __ptext72:
 16131                           	opt stack 0
 16132  005A9E                     _vscp_getEvent:
 16133                           	opt stack 24
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;vscp_firmware.c: 1309: int8_t rv;
 16137                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16138                           
 16139                           ;incstack = 0
 16140                           ;incstack = 0
 16141  005A9E  BF88               	btfsc	_vscp_imsg& (0+255),7,b
 16142  005AA0  D012               	goto	l1280
 16143                           
 16144                           ; BSR set to: 0
 16145                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16146                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16147                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16148                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16149                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16150                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16151  005AA2  0E8C               	movlw	low (_vscp_imsg+4)
 16152  005AA4  6E24               	movwf	?_getVSCPFrame,c
 16153  005AA6  0E8D               	movlw	low (_vscp_imsg+5)
 16154  005AA8  6E25               	movwf	?_getVSCPFrame+1,c
 16155  005AAA  0E89               	movlw	low (_vscp_imsg+1)
 16156  005AAC  6E26               	movwf	?_getVSCPFrame+2,c
 16157  005AAE  0E88               	movlw	low _vscp_imsg
 16158  005AB0  6E27               	movwf	?_getVSCPFrame+3,c
 16159  005AB2  0E8E               	movlw	low (_vscp_imsg+6)
 16160  005AB4  6E28               	movwf	?_getVSCPFrame+4,c
 16161  005AB6  0E8A               	movlw	(_vscp_imsg+2)& (0+255)
 16162  005AB8  ECBC  F029         	call	_getVSCPFrame
 16163  005ABC  6E32               	movwf	vscp_getEvent@rv,c
 16164  005ABE  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16165  005AC0  E002               	bz	l1280
 16166                           
 16167                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16168  005AC2  0100               	movlb	0	; () banked
 16169  005AC4  8F88               	bsf	_vscp_imsg& (0+255),7,b
 16170  005AC6                     l1280:
 16171  005AC6  0012               	return	
 16172  005AC8                     __end_of_vscp_getEvent:
 16173                           	opt stack 0
 16174                           tblptru	equ	0xFF8
 16175                           tblptrh	equ	0xFF7
 16176                           tblptrl	equ	0xFF6
 16177                           tablat	equ	0xFF5
 16178                           prodh	equ	0xFF4
 16179                           prodl	equ	0xFF3
 16180                           postinc0	equ	0xFEE
 16181                           wreg	equ	0xFE8
 16182                           indf1	equ	0xFE7
 16183                           postdec1	equ	0xFE5
 16184                           fsr1h	equ	0xFE2
 16185                           fsr1l	equ	0xFE1
 16186                           indf2	equ	0xFDF
 16187                           postinc2	equ	0xFDE
 16188                           postdec2	equ	0xFDD
 16189                           plusw2	equ	0xFDB
 16190                           fsr2h	equ	0xFDA
 16191                           fsr2l	equ	0xFD9
 16192                           status	equ	0xFD8
 16193                           
 16194 ;; *************** function _getVSCPFrame *****************
 16195 ;; Defined at:
 16196 ;;		line 2876 in file "../main.c"
 16197 ;; Parameters:    Size  Location     Type
 16198 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16199 ;;		 -> vscp_imsg(14), 
 16200 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16201 ;;		 -> vscp_imsg(14), 
 16202 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16203 ;;		 -> vscp_imsg(14), 
 16204 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16205 ;;		 -> vscp_imsg(14), 
 16206 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16207 ;;		 -> vscp_imsg(14), 
 16208 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16209 ;;		 -> vscp_imsg(14), 
 16210 ;; Auto vars:     Size  Location     Type
 16211 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16212 ;;		 -> vscp_imsg(14), 
 16213 ;;  id              4   45[COMRAM] unsigned long 
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  1    wreg      unsigned char 
 16216 ;; Registers used:
 16217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : F/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16223 ;;      Params:         5       0       0       0       0       0       0
 16224 ;;      Locals:         5       0       0       0       0       0       0
 16225 ;;      Temps:          4       0       0       0       0       0       0
 16226 ;;      Totals:        14       0       0       0       0       0       0
 16227 ;;Total ram usage:       14 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    5
 16230 ;; This function calls:
 16231 ;;		_getCANFrame
 16232 ;; This function is called by:
 16233 ;;		_vscp_getEvent
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           	psect	text73
 16238  005378                     __ptext73:
 16239                           	opt stack 0
 16240  005378                     _getVSCPFrame:
 16241                           	opt stack 24
 16242                           
 16243                           ;incstack = 0
 16244                           ;incstack = 0
 16245                           ;getVSCPFrame@pvscpclass stored from wreg
 16246  005378  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16247                           
 16248                           ; BSR set to: 0
 16249                           ;main.c: 2877: uint32_t id;
 16250                           ;main.c: 2879: if (!getCANFrame(&id, pSize, pData)) {
 16251  00537C  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16252  005380  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16253  005384  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16254  005386  EC0F  F02D         	call	_getCANFrame
 16255  00538A  0900               	iorlw	0
 16256  00538C  E102               	bnz	l8156
 16257                           
 16258                           ;main.c: 2880: return 0;
 16259  00538E  0E00               	movlw	0
 16260  005390  D02E               	goto	l629
 16261  005392                     l8156:
 16262                           
 16263                           ;main.c: 2881: }
 16264                           ;main.c: 2883: *pNodeId = id & 0x0ff;
 16265  005392  5025               	movf	getVSCPFrame@pNodeId,w,c
 16266  005394  6ED9               	movwf	fsr2l,c
 16267  005396  6ADA               	clrf	fsr2h,c
 16268  005398  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16269                           
 16270                           ;main.c: 2884: *pvscptype = (id >> 8) & 0xff;
 16271  00539C  5024               	movf	getVSCPFrame@pvscptype,w,c
 16272  00539E  6ED9               	movwf	fsr2l,c
 16273  0053A0  6ADA               	clrf	fsr2h,c
 16274  0053A2  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16275                           
 16276                           ;main.c: 2885: *pvscpclass = (id >> 16) & 0x1ff;
 16277  0053A6  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16278  0053A8  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16279  0053AA  0E01               	movlw	1
 16280  0053AC  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16281  0053AE  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16282  0053B0  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16283  0053B2  6ED9               	movwf	fsr2l,c
 16284  0053B4  6ADA               	clrf	fsr2h,c
 16285  0053B6  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16286  0053BA  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16287                           
 16288                           ;main.c: 2886: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16289  0053BE  5026               	movf	getVSCPFrame@pPriority,w,c
 16290  0053C0  6ED9               	movwf	fsr2l,c
 16291  0053C2  6ADA               	clrf	fsr2h,c
 16292  0053C4  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16293  0053C8  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16294  0053CC  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16295  0053D0  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16296  0053D4  0E1B               	movlw	27
 16297  0053D6  D005               	goto	u5480
 16298  0053D8                     u5485:
 16299  0053D8  90D8               	bcf	status,0,c
 16300  0053DA  322C               	rrcf	??_getVSCPFrame+3,f,c
 16301  0053DC  322B               	rrcf	??_getVSCPFrame+2,f,c
 16302  0053DE  322A               	rrcf	??_getVSCPFrame+1,f,c
 16303  0053E0  3229               	rrcf	??_getVSCPFrame,f,c
 16304  0053E2                     u5480:
 16305  0053E2  2EE8               	decfsz	wreg,f,c
 16306  0053E4  D7F9               	goto	u5485
 16307  0053E6  5029               	movf	??_getVSCPFrame,w,c
 16308  0053E8  0B07               	andlw	7
 16309  0053EA  6EDF               	movwf	indf2,c
 16310                           
 16311                           ;main.c: 2888: return 1;
 16312  0053EC  0E01               	movlw	1
 16313  0053EE                     l629:
 16314  0053EE  0012               	return	
 16315  0053F0                     __end_of_getVSCPFrame:
 16316                           	opt stack 0
 16317                           tblptru	equ	0xFF8
 16318                           tblptrh	equ	0xFF7
 16319                           tblptrl	equ	0xFF6
 16320                           tablat	equ	0xFF5
 16321                           prodh	equ	0xFF4
 16322                           prodl	equ	0xFF3
 16323                           postinc0	equ	0xFEE
 16324                           wreg	equ	0xFE8
 16325                           indf1	equ	0xFE7
 16326                           postdec1	equ	0xFE5
 16327                           fsr1h	equ	0xFE2
 16328                           fsr1l	equ	0xFE1
 16329                           indf2	equ	0xFDF
 16330                           postinc2	equ	0xFDE
 16331                           postdec2	equ	0xFDD
 16332                           plusw2	equ	0xFDB
 16333                           fsr2h	equ	0xFDA
 16334                           fsr2l	equ	0xFD9
 16335                           status	equ	0xFD8
 16336                           
 16337 ;; *************** function _getCANFrame *****************
 16338 ;; Defined at:
 16339 ;;		line 2918 in file "../main.c"
 16340 ;; Parameters:    Size  Location     Type
 16341 ;;  pid             1    wreg     PTR unsigned long 
 16342 ;;		 -> getVSCPFrame@id(4), 
 16343 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16344 ;;		 -> vscp_imsg(14), 
 16345 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16346 ;;		 -> vscp_imsg(14), 
 16347 ;; Auto vars:     Size  Location     Type
 16348 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16349 ;;		 -> getVSCPFrame@id(4), 
 16350 ;;  flags           1   34[COMRAM] enum E16409
 16351 ;; Return value:  Size  Location     Type
 16352 ;;                  1    wreg      unsigned char 
 16353 ;; Registers used:
 16354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16355 ;; Tracked objects:
 16356 ;;		On entry : F/0
 16357 ;;		On exit  : 0/0
 16358 ;;		Unchanged: 0/0
 16359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16360 ;;      Params:         2       0       0       0       0       0       0
 16361 ;;      Locals:         2       0       0       0       0       0       0
 16362 ;;      Temps:          0       0       0       0       0       0       0
 16363 ;;      Totals:         4       0       0       0       0       0       0
 16364 ;;Total ram usage:        4 bytes
 16365 ;; Hardware stack levels used:    1
 16366 ;; Hardware stack levels required when called:    4
 16367 ;; This function calls:
 16368 ;;		_ECANReceiveMessage
 16369 ;; This function is called by:
 16370 ;;		_getVSCPFrame
 16371 ;; This function uses a non-reentrant model
 16372 ;;
 16373                           
 16374                           	psect	text74
 16375  005A1E                     __ptext74:
 16376                           	opt stack 0
 16377  005A1E                     _getCANFrame:
 16378                           	opt stack 24
 16379                           
 16380                           ;incstack = 0
 16381                           ;incstack = 0
 16382                           ;getCANFrame@pid stored from wreg
 16383  005A1E  CFE8 F022          	movff	wreg,getCANFrame@pid
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;main.c: 2919: ECAN_RX_MSG_FLAGS flags;
 16387                           ;main.c: 2923: if (vscp_imsg.flags & 0x80) return 0;
 16388  005A22  AF88               	btfss	_vscp_imsg& (0+255),7,b
 16389  005A24  D002               	goto	l8172
 16390  005A26                     l8168:
 16391  005A26  0E00               	movlw	0
 16392  005A28  D00F               	goto	l640
 16393  005A2A                     l8172:
 16394                           
 16395                           ; BSR set to: 0
 16396                           ;main.c: 2925: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16397  005A2A  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16398  005A2E  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16399  005A32  0E23               	movlw	low getCANFrame@flags
 16400  005A34  6E17               	movwf	?_ECANReceiveMessage+2,c
 16401  005A36  5022               	movf	getCANFrame@pid,w,c
 16402  005A38  EC3A  F01C         	call	_ECANReceiveMessage
 16403  005A3C  0900               	iorlw	0
 16404  005A3E  E0F3               	bz	l8168
 16405                           
 16406                           ;main.c: 2927: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16407  005A40  AC23               	btfss	getCANFrame@flags,6,c
 16408                           
 16409                           ;main.c: 2930: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16410  005A42  AA23               	btfss	getCANFrame@flags,5,c
 16411  005A44  D7F0               	goto	l8168
 16412                           
 16413                           ;main.c: 2932: return 1;
 16414  005A46  0E01               	movlw	1
 16415  005A48                     l640:
 16416  005A48  0012               	return	
 16417  005A4A                     __end_of_getCANFrame:
 16418                           	opt stack 0
 16419                           tblptru	equ	0xFF8
 16420                           tblptrh	equ	0xFF7
 16421                           tblptrl	equ	0xFF6
 16422                           tablat	equ	0xFF5
 16423                           prodh	equ	0xFF4
 16424                           prodl	equ	0xFF3
 16425                           postinc0	equ	0xFEE
 16426                           wreg	equ	0xFE8
 16427                           indf1	equ	0xFE7
 16428                           postdec1	equ	0xFE5
 16429                           fsr1h	equ	0xFE2
 16430                           fsr1l	equ	0xFE1
 16431                           indf2	equ	0xFDF
 16432                           postinc2	equ	0xFDE
 16433                           postdec2	equ	0xFDD
 16434                           plusw2	equ	0xFDB
 16435                           fsr2h	equ	0xFDA
 16436                           fsr2l	equ	0xFD9
 16437                           status	equ	0xFD8
 16438                           
 16439 ;; *************** function _ECANReceiveMessage *****************
 16440 ;; Defined at:
 16441 ;;		line 803 in file "../ECAN.c"
 16442 ;; Parameters:    Size  Location     Type
 16443 ;;  id              1    wreg     PTR unsigned long 
 16444 ;;		 -> getVSCPFrame@id(4), 
 16445 ;;  data            1   20[COMRAM] PTR unsigned char 
 16446 ;;		 -> vscp_imsg(14), 
 16447 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16448 ;;		 -> vscp_imsg(14), 
 16449 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16450 ;;		 -> getCANFrame@flags(1), 
 16451 ;; Auto vars:     Size  Location     Type
 16452 ;;  id              1   25[COMRAM] PTR unsigned long 
 16453 ;;		 -> getVSCPFrame@id(4), 
 16454 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16455 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16456 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16457 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16458 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16459 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16460 ;;  temp            1   28[COMRAM] struct .
 16461 ;;  mode            1   27[COMRAM] unsigned char 
 16462 ;;  i               1   26[COMRAM] unsigned char 
 16463 ;; Return value:  Size  Location     Type
 16464 ;;                  1    wreg      enum E15660
 16465 ;; Registers used:
 16466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16467 ;; Tracked objects:
 16468 ;;		On entry : F/0
 16469 ;;		On exit  : 0/0
 16470 ;;		Unchanged: 0/0
 16471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16472 ;;      Params:         3       0       0       0       0       0       0
 16473 ;;      Locals:         8       0       0       0       0       0       0
 16474 ;;      Temps:          0       0       0       0       0       0       0
 16475 ;;      Totals:        11       0       0       0       0       0       0
 16476 ;;Total ram usage:       11 bytes
 16477 ;; Hardware stack levels used:    1
 16478 ;; Hardware stack levels required when called:    3
 16479 ;; This function calls:
 16480 ;;		__ECANPointBuffer
 16481 ;;		__RegsToCANID
 16482 ;; This function is called by:
 16483 ;;		_getCANFrame
 16484 ;; This function uses a non-reentrant model
 16485 ;;
 16486                           
 16487                           	psect	text75
 16488  003874                     __ptext75:
 16489                           	opt stack 0
 16490  003874                     _ECANReceiveMessage:
 16491                           	opt stack 24
 16492                           
 16493                           ;incstack = 0
 16494                           ;incstack = 0
 16495                           ;ECANReceiveMessage@id stored from wreg
 16496  003874  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16497                           
 16498                           ; BSR set to: 0
 16499                           ;ECAN.c: 805: BYTE mode;
 16500                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16501                           ;ECAN.c: 809: char i;
 16502                           ;ECAN.c: 810: BYTE_VAL temp;
 16503                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16504  003878  6A48               	clrf	__ECANRxFilterHitInfo,c
 16505                           
 16506                           ; BSR set to: 0
 16507                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16508  00387A  5077               	movf	3959,w,c	;volatile
 16509  00387C  0BC0               	andlw	192
 16510  00387E  6E1C               	movwf	ECANReceiveMessage@mode,c
 16511                           
 16512                           ; BSR set to: 0
 16513                           ;ECAN.c: 816: if ( mode == 0x00 )
 16514  003880  661C               	tstfsz	ECANReceiveMessage@mode,c
 16515  003882  D032               	goto	l8304
 16516                           
 16517                           ; BSR set to: 0
 16518                           ;ECAN.c: 822: {
 16519                           ;ECAN.c: 824: if ( RXB0FUL )
 16520  003884  AE60               	btfss	3936,7,c	;volatile
 16521  003886  D012               	goto	l836
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;ECAN.c: 825: {
 16525                           ;ECAN.c: 827: RXB0IF = 0;
 16526  003888  90A4               	bcf	4004,0,c	;volatile
 16527                           
 16528                           ;ECAN.c: 830: if ( RXB0OVFL )
 16529  00388A  AE74               	btfss	3956,7,c	;volatile
 16530  00388C  D006               	goto	l8280
 16531                           
 16532                           ; BSR set to: 0
 16533                           ;ECAN.c: 831: {
 16534                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16535  00388E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16536  003890  6ED9               	movwf	fsr2l,c
 16537  003892  6ADA               	clrf	fsr2h,c
 16538  003894  0E00               	movlw	0
 16539  003896  86DB               	bsf	plusw2,3,c
 16540                           
 16541                           ; BSR set to: 0
 16542                           ;ECAN.c: 833: RXB0OVFL = 0;
 16543  003898  9E74               	bcf	3956,7,c	;volatile
 16544  00389A                     l8280:
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;ECAN.c: 834: }
 16548                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16549  00389A  A060               	btfss	3936,0,c	;volatile
 16550  00389C  D002               	bra	u5655
 16551  00389E  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16552  0038A0  D001               	bra	u5657
 16553  0038A2                     u5655:
 16554  0038A2  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16555  0038A4                     u5657:
 16556                           
 16557                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16558  0038A4  0E0F               	movlw	15	;volatile
 16559  0038A6  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16560  0038A8  0E60               	movlw	96	;volatile
 16561  0038AA  D01A               	goto	L34
 16562  0038AC                     l836:
 16563                           
 16564                           ; BSR set to: 0
 16565                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16566  0038AC  010F               	movlb	15	; () banked
 16567  0038AE  AF50               	btfss	80,7,b	;volatile
 16568  0038B0  D019               	goto	l8298
 16569                           
 16570                           ; BSR set to: 15
 16571                           ;ECAN.c: 842: {
 16572                           ;ECAN.c: 844: RXB1IF = 0;
 16573  0038B2  92A4               	bcf	4004,1,c	;volatile
 16574                           
 16575                           ;ECAN.c: 847: if ( RXB1OVFL )
 16576  0038B4  AC74               	btfss	3956,6,c	;volatile
 16577  0038B6  D006               	goto	l8290
 16578                           
 16579                           ; BSR set to: 15
 16580                           ;ECAN.c: 848: {
 16581                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16582  0038B8  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16583  0038BA  6ED9               	movwf	fsr2l,c
 16584  0038BC  6ADA               	clrf	fsr2h,c
 16585  0038BE  0E00               	movlw	0
 16586  0038C0  86DB               	bsf	plusw2,3,c
 16587                           
 16588                           ; BSR set to: 15
 16589                           ;ECAN.c: 850: RXB1OVFL = 0;
 16590  0038C2  9C74               	bcf	3956,6,c	;volatile
 16591  0038C4                     l8290:
 16592                           
 16593                           ; BSR set to: 15
 16594                           ;ECAN.c: 851: }
 16595                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16596  0038C4  5150               	movf	80,w,b	;volatile
 16597  0038C6  0B07               	andlw	7
 16598  0038C8  6E48               	movwf	__ECANRxFilterHitInfo,c
 16599                           
 16600                           ; BSR set to: 15
 16601                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16602  0038CA  0E02               	movlw	2
 16603  0038CC  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16604  0038CE  D005               	goto	l8296
 16605                           
 16606                           ; BSR set to: 15
 16607                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16608  0038D0  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16609  0038D2  6ED9               	movwf	fsr2l,c
 16610  0038D4  6ADA               	clrf	fsr2h,c
 16611  0038D6  0E00               	movlw	0
 16612  0038D8  8EDB               	bsf	plusw2,7,c
 16613  0038DA                     l8296:
 16614                           
 16615                           ; BSR set to: 15
 16616                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16617  0038DA  0E0F               	movlw	15	;volatile
 16618  0038DC  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16619  0038DE  0E50               	movlw	80	;volatile
 16620  0038E0                     L34:
 16621  0038E0  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16622                           
 16623                           ;ECAN.c: 860: }
 16624  0038E2  D065               	goto	l8358
 16625  0038E4                     l8298:
 16626                           
 16627                           ;ECAN.c: 861: else
 16628                           ;ECAN.c: 862: return FALSE;
 16629  0038E4  0E00               	movlw	0
 16630  0038E6  D0CC               	goto	l843
 16631  0038E8                     l8304:
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16635  0038E8  501C               	movf	ECANReceiveMessage@mode,w,c
 16636  0038EA  0A40               	xorlw	64
 16637  0038EC  E146               	bnz	l846
 16638                           
 16639                           ; BSR set to: 0
 16640                           ;ECAN.c: 875: {
 16641                           ;ECAN.c: 876: if ( RXB0FUL )
 16642  0038EE  AE60               	btfss	3936,7,c	;volatile
 16643  0038F0  D004               	goto	l847
 16644                           
 16645                           ; BSR set to: 0
 16646                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16647  0038F2  0E0F               	movlw	15	;volatile
 16648  0038F4  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16649  0038F6  0E60               	movlw	96	;volatile
 16650  0038F8  D03E               	goto	L41
 16651  0038FA                     l847:
 16652                           
 16653                           ; BSR set to: 0
 16654                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16655  0038FA  010F               	movlb	15	; () banked
 16656  0038FC  AF50               	btfss	80,7,b	;volatile
 16657  0038FE  D004               	goto	l849
 16658                           
 16659                           ; BSR set to: 15
 16660                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16661  003900  0E0F               	movlw	15	;volatile
 16662  003902  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16663  003904  0E50               	movlw	80	;volatile
 16664  003906  D037               	goto	L41
 16665  003908                     l849:
 16666                           
 16667                           ; BSR set to: 15
 16668                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16669  003908  010D               	movlb	13
 16670  00390A  B5F8               	btfsc	248,2,b	;volatile
 16671  00390C  D007               	goto	l851
 16672  00390E  010E               	movlb	14
 16673  003910  AF20               	btfss	32,7,b	;volatile
 16674  003912  D004               	goto	l851
 16675                           
 16676                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16677  003914  0E0E               	movlw	14	;volatile
 16678  003916  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16679  003918  0E20               	movlw	32	;volatile
 16680  00391A  D02D               	goto	L41
 16681  00391C                     l851:
 16682                           
 16683                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16684  00391C  010D               	movlb	13
 16685  00391E  B7F8               	btfsc	248,3,b	;volatile
 16686  003920  D007               	goto	l853
 16687  003922  010E               	movlb	14
 16688  003924  AF30               	btfss	48,7,b	;volatile
 16689  003926  D004               	goto	l853
 16690                           
 16691                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16692  003928  0E0E               	movlw	14	;volatile
 16693  00392A  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16694  00392C  0E30               	movlw	48	;volatile
 16695  00392E  D023               	goto	L41
 16696  003930                     l853:
 16697                           
 16698                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16699  003930  010D               	movlb	13
 16700  003932  B9F8               	btfsc	248,4,b	;volatile
 16701  003934  D007               	goto	l855
 16702  003936  010E               	movlb	14
 16703  003938  AF40               	btfss	64,7,b	;volatile
 16704  00393A  D004               	goto	l855
 16705                           
 16706                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16707  00393C  0E0E               	movlw	14	;volatile
 16708  00393E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16709  003940  0E40               	movlw	64	;volatile
 16710  003942  D019               	goto	L41
 16711  003944                     l855:
 16712                           
 16713                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16714  003944  010D               	movlb	13
 16715  003946  BBF8               	btfsc	248,5,b	;volatile
 16716  003948  D005               	goto	l857
 16717  00394A  010E               	movlb	14
 16718  00394C  AF50               	btfss	80,7,b	;volatile
 16719  00394E  D002               	goto	l857
 16720                           
 16721                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16722  003950  0E0E               	movlw	14	;volatile
 16723  003952  D7D7               	goto	L42
 16724  003954                     l857:
 16725                           
 16726                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16727  003954  010D               	movlb	13
 16728  003956  BDF8               	btfsc	248,6,b	;volatile
 16729  003958  D005               	goto	l859
 16730  00395A  010E               	movlb	14
 16731  00395C  AF60               	btfss	96,7,b	;volatile
 16732  00395E  D002               	goto	l859
 16733                           
 16734                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16735  003960  0E0E               	movlw	14	;volatile
 16736  003962  D7C8               	goto	L43
 16737  003964                     l859:
 16738                           
 16739                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16740  003964  010D               	movlb	13
 16741  003966  BFF8               	btfsc	248,7,b	;volatile
 16742  003968  D7BD               	goto	l8298
 16743  00396A  010E               	movlb	14
 16744  00396C  AF70               	btfss	112,7,b	;volatile
 16745  00396E  D7BA               	goto	l8298
 16746                           
 16747                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16748  003970  0E0E               	movlw	14	;volatile
 16749  003972  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16750  003974  0E70               	movlw	112	;volatile
 16751  003976                     L41:
 16752  003976  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16753  003978  D00A               	goto	l8348
 16754  00397A                     l846:
 16755                           
 16756                           ; BSR set to: 0
 16757                           ;ECAN.c: 910: else
 16758                           ;ECAN.c: 915: {
 16759                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16760  00397A  AE74               	btfss	3956,7,c	;volatile
 16761  00397C  D7B3               	goto	l8298
 16762                           
 16763                           ; BSR set to: 0
 16764                           ;ECAN.c: 917: {
 16765                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16766  00397E  506F               	movf	3951,w,c	;volatile
 16767  003980  0B07               	andlw	7
 16768  003982  ECF8  F029         	call	__ECANPointBuffer
 16769  003986  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16770  00398A  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16771  00398E                     l8348:
 16772                           
 16773                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16774  00398E  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16775  003992  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16776  003996  50DF               	movf	indf2,w,c
 16777  003998  0B1F               	andlw	31
 16778  00399A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16779                           
 16780                           ;ECAN.c: 932: RXB1IF = 0;
 16781  00399C  92A4               	bcf	4004,1,c	;volatile
 16782                           
 16783                           ;ECAN.c: 934: if ( RXB1OVFL )
 16784  00399E  AC74               	btfss	3956,6,c	;volatile
 16785  0039A0  D006               	goto	l8358
 16786                           
 16787                           ;ECAN.c: 935: {
 16788                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16789  0039A2  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16790  0039A4  6ED9               	movwf	fsr2l,c
 16791  0039A6  6ADA               	clrf	fsr2h,c
 16792  0039A8  0E00               	movlw	0
 16793  0039AA  86DB               	bsf	plusw2,3,c
 16794                           
 16795                           ;ECAN.c: 937: RXB1OVFL = 0;
 16796  0039AC  9C74               	bcf	3956,6,c	;volatile
 16797  0039AE                     l8358:
 16798                           
 16799                           ;ECAN.c: 942: savedPtr = ptr;
 16800  0039AE  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16801  0039B2  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16802                           
 16803                           ;ECAN.c: 943: *msgFlags = 0;
 16804  0039B6  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16805  0039B8  6ED9               	movwf	fsr2l,c
 16806  0039BA  6ADA               	clrf	fsr2h,c
 16807  0039BC  6ADF               	clrf	indf2,c
 16808                           
 16809                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16810  0039BE  EE20 F005          	lfsr	2,5
 16811  0039C2  501E               	movf	ECANReceiveMessage@ptr,w,c
 16812  0039C4  26D9               	addwf	fsr2l,f,c
 16813  0039C6  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16814  0039C8  22DA               	addwfc	fsr2h,f,c
 16815  0039CA  50DF               	movf	indf2,w,c
 16816  0039CC  6E1D               	movwf	ECANReceiveMessage@temp,c
 16817                           
 16818                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16819  0039CE  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16820  0039D0  6ED9               	movwf	fsr2l,c
 16821  0039D2  6ADA               	clrf	fsr2h,c
 16822  0039D4  501D               	movf	ECANReceiveMessage@temp,w,c
 16823  0039D6  0B0F               	andlw	15
 16824  0039D8  6EDF               	movwf	indf2,c
 16825                           
 16826                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16827  0039DA  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16828  0039DC  D005               	goto	l867
 16829                           
 16830                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16831  0039DE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16832  0039E0  6ED9               	movwf	fsr2l,c
 16833  0039E2  6ADA               	clrf	fsr2h,c
 16834  0039E4  0E00               	movlw	0
 16835  0039E6  8CDB               	bsf	plusw2,6,c
 16836  0039E8                     l867:
 16837                           
 16838                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16839  0039E8  EE20 F002          	lfsr	2,2
 16840  0039EC  501E               	movf	ECANReceiveMessage@ptr,w,c
 16841  0039EE  26D9               	addwf	fsr2l,f,c
 16842  0039F0  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16843  0039F2  22DA               	addwfc	fsr2h,f,c
 16844  0039F4  50DF               	movf	indf2,w,c
 16845  0039F6  6E1D               	movwf	ECANReceiveMessage@temp,c
 16846                           
 16847                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16848  0039F8  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16849  0039FA  D008               	goto	l868
 16850                           
 16851                           ;ECAN.c: 956: {
 16852                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16853  0039FC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16854  0039FE  6ED9               	movwf	fsr2l,c
 16855  003A00  6ADA               	clrf	fsr2h,c
 16856  003A02  0E00               	movlw	0
 16857  003A04  8ADB               	bsf	plusw2,5,c
 16858                           
 16859                           ;ECAN.c: 958: temp.Val = 1;
 16860  003A06  0E01               	movlw	1
 16861  003A08  6E1D               	movwf	ECANReceiveMessage@temp,c
 16862                           
 16863                           ;ECAN.c: 959: }
 16864  003A0A  D001               	goto	l8376
 16865  003A0C                     l868:
 16866                           
 16867                           ;ECAN.c: 960: else
 16868                           ;ECAN.c: 961: temp.Val = 0;
 16869  003A0C  6A1D               	clrf	ECANReceiveMessage@temp,c
 16870  003A0E                     l8376:
 16871                           
 16872                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16873  003A0E  281E               	incf	ECANReceiveMessage@ptr,w,c
 16874  003A10  6E0E               	movwf	?__RegsToCANID,c
 16875  003A12  0E00               	movlw	0
 16876  003A14  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16877  003A16  6E0F               	movwf	?__RegsToCANID+1,c
 16878  003A18  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16879  003A1C  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16880  003A20  ECBC  F020         	call	__RegsToCANID	;wreg free
 16881                           
 16882                           ;ECAN.c: 966: ptr += 6;
 16883  003A24  0E06               	movlw	6
 16884  003A26  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16885  003A28  0E00               	movlw	0
 16886  003A2A  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16887                           
 16888                           ;ECAN.c: 967: temp.Val = *dataLen;
 16889  003A2C  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16890  003A2E  6ED9               	movwf	fsr2l,c
 16891  003A30  6ADA               	clrf	fsr2h,c
 16892  003A32  50DF               	movf	indf2,w,c
 16893  003A34  6E1D               	movwf	ECANReceiveMessage@temp,c
 16894                           
 16895                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16896  003A36  6A1B               	clrf	ECANReceiveMessage@i,c
 16897  003A38  D00D               	goto	l8392
 16898  003A3A                     l8384:
 16899                           
 16900                           ;ECAN.c: 969: *data++ = *ptr++;
 16901  003A3A  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16902  003A3E  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16903  003A42  5015               	movf	ECANReceiveMessage@data,w,c
 16904  003A44  6EE1               	movwf	fsr1l,c
 16905  003A46  6AE2               	clrf	fsr1h,c
 16906  003A48  CFDF FFE7          	movff	indf2,indf1
 16907  003A4C  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16908  003A4E  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16909  003A50  2A15               	incf	ECANReceiveMessage@data,f,c
 16910  003A52  2A1B               	incf	ECANReceiveMessage@i,f,c
 16911  003A54                     l8392:
 16912  003A54  501D               	movf	ECANReceiveMessage@temp,w,c
 16913  003A56  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16914  003A58  E3F0               	bnc	l8384
 16915                           
 16916                           ;ECAN.c: 972: if ( IRXIF )
 16917  003A5A  AEA4               	btfss	4004,7,c	;volatile
 16918  003A5C  D006               	goto	l8398
 16919                           
 16920                           ;ECAN.c: 973: {
 16921                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16922  003A5E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16923  003A60  6ED9               	movwf	fsr2l,c
 16924  003A62  6ADA               	clrf	fsr2h,c
 16925  003A64  0E00               	movlw	0
 16926  003A66  88DB               	bsf	plusw2,4,c
 16927                           
 16928                           ;ECAN.c: 975: IRXIF = 0;
 16929  003A68  9EA4               	bcf	4004,7,c	;volatile
 16930  003A6A                     l8398:
 16931                           
 16932                           ;ECAN.c: 976: }
 16933                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16934  003A6A  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16935  003A6E  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16936  003A72  0E7F               	movlw	127
 16937  003A74  16DF               	andwf	indf2,f,c
 16938                           
 16939                           ;ECAN.c: 983: if ( mode == 0x80 )
 16940  003A76  501C               	movf	ECANReceiveMessage@mode,w,c
 16941  003A78  0A80               	xorlw	128
 16942  003A7A  B4D8               	btfsc	status,2,c
 16943                           
 16944                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16945  003A7C  9E74               	bcf	3956,7,c	;volatile
 16946                           
 16947                           ;ECAN.c: 990: return TRUE;
 16948  003A7E  0E01               	movlw	1
 16949  003A80                     l843:
 16950  003A80  0012               	return	
 16951  003A82                     __end_of_ECANReceiveMessage:
 16952                           	opt stack 0
 16953                           tblptru	equ	0xFF8
 16954                           tblptrh	equ	0xFF7
 16955                           tblptrl	equ	0xFF6
 16956                           tablat	equ	0xFF5
 16957                           prodh	equ	0xFF4
 16958                           prodl	equ	0xFF3
 16959                           postinc0	equ	0xFEE
 16960                           wreg	equ	0xFE8
 16961                           indf1	equ	0xFE7
 16962                           postdec1	equ	0xFE5
 16963                           fsr1h	equ	0xFE2
 16964                           fsr1l	equ	0xFE1
 16965                           indf2	equ	0xFDF
 16966                           postinc2	equ	0xFDE
 16967                           postdec2	equ	0xFDD
 16968                           plusw2	equ	0xFDB
 16969                           fsr2h	equ	0xFDA
 16970                           fsr2l	equ	0xFD9
 16971                           status	equ	0xFD8
 16972                           
 16973 ;; *************** function __RegsToCANID *****************
 16974 ;; Defined at:
 16975 ;;		line 1156 in file "../ECAN.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 16978 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16979 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16980 ;;  val             1   15[COMRAM] PTR unsigned long 
 16981 ;;		 -> getVSCPFrame@id(4), 
 16982 ;;  type            1   16[COMRAM] unsigned char 
 16983 ;; Auto vars:     Size  Location     Type
 16984 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 16985 ;;		 -> getVSCPFrame@id(4), 
 16986 ;; Return value:  Size  Location     Type
 16987 ;;		None               void
 16988 ;; Registers used:
 16989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16995 ;;      Params:         4       0       0       0       0       0       0
 16996 ;;      Locals:         1       0       0       0       0       0       0
 16997 ;;      Temps:          2       0       0       0       0       0       0
 16998 ;;      Totals:         7       0       0       0       0       0       0
 16999 ;;Total ram usage:        7 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    2
 17002 ;; This function calls:
 17003 ;;		Nothing
 17004 ;; This function is called by:
 17005 ;;		_ECANReceiveMessage
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           	psect	text76
 17010  004178                     __ptext76:
 17011                           	opt stack 0
 17012  004178                     __RegsToCANID:
 17013                           	opt stack 24
 17014                           
 17015                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17016                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17017                           
 17018                           ;incstack = 0
 17019                           ;incstack = 0
 17020  004178  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17021                           
 17022                           ;ECAN.c: 1161: if ( type == 0 )
 17023  00417C  6611               	tstfsz	__RegsToCANID@type,c
 17024  00417E  D046               	goto	l8472
 17025                           
 17026                           ;ECAN.c: 1162: {
 17027                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17028  004180  5014               	movf	__RegsToCANID@Value,w,c
 17029  004182  6ED9               	movwf	fsr2l,c
 17030  004184  6ADA               	clrf	fsr2h,c
 17031  004186  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17032  00418A  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17033  00418E  50E7               	movf	indf1,w,c
 17034  004190  6E12               	movwf	??__RegsToCANID& (0+255),c
 17035  004192  90D8               	bcf	status,0,c
 17036  004194  3612               	rlcf	??__RegsToCANID,f,c
 17037  004196  90D8               	bcf	status,0,c
 17038  004198  3612               	rlcf	??__RegsToCANID,f,c
 17039  00419A  90D8               	bcf	status,0,c
 17040  00419C  3412               	rlcf	??__RegsToCANID,w,c
 17041  00419E  6EDF               	movwf	indf2,c
 17042                           
 17043                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17044  0041A0  5014               	movf	__RegsToCANID@Value,w,c
 17045  0041A2  6ED9               	movwf	fsr2l,c
 17046  0041A4  6ADA               	clrf	fsr2h,c
 17047  0041A6  2AD9               	incf	fsr2l,f,c
 17048  0041A8  6ADA               	clrf	fsr2h,c
 17049  0041AA  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17050  0041AE  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17051  0041B2  50E7               	movf	indf1,w,c
 17052  0041B4  6E12               	movwf	??__RegsToCANID& (0+255),c
 17053  0041B6  0E05               	movlw	5
 17054  0041B8  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17055  0041BA                     u5975:
 17056  0041BA  90D8               	bcf	status,0,c
 17057  0041BC  3212               	rrcf	??__RegsToCANID,f,c
 17058  0041BE  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17059  0041C0  D7FC               	goto	u5975
 17060  0041C2  5012               	movf	??__RegsToCANID,w,c
 17061  0041C4  6EDF               	movwf	indf2,c
 17062                           
 17063                           ;ECAN.c: 1166: ptr++;
 17064  0041C6  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17065  0041C8  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17066                           
 17067                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17068  0041CA  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17069  0041CE  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17070  0041D2  50DF               	movf	indf2,w,c
 17071  0041D4  6E12               	movwf	??__RegsToCANID& (0+255),c
 17072  0041D6  0E05               	movlw	5
 17073  0041D8  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17074  0041DA                     u5985:
 17075  0041DA  90D8               	bcf	status,0,c
 17076  0041DC  3212               	rrcf	??__RegsToCANID,f,c
 17077  0041DE  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17078  0041E0  D7FC               	goto	u5985
 17079  0041E2  5014               	movf	__RegsToCANID@Value,w,c
 17080  0041E4  6ED9               	movwf	fsr2l,c
 17081  0041E6  6ADA               	clrf	fsr2h,c
 17082  0041E8  5012               	movf	??__RegsToCANID,w,c
 17083  0041EA  12DF               	iorwf	indf2,f,c
 17084                           
 17085                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17086  0041EC  5014               	movf	__RegsToCANID@Value,w,c
 17087  0041EE  6ED9               	movwf	fsr2l,c
 17088  0041F0  6ADA               	clrf	fsr2h,c
 17089  0041F2  0E02               	movlw	2
 17090  0041F4  26D9               	addwf	fsr2l,f,c
 17091  0041F6  6ADA               	clrf	fsr2h,c
 17092  0041F8  6ADF               	clrf	indf2,c
 17093                           
 17094                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17095  0041FA  5014               	movf	__RegsToCANID@Value,w,c
 17096  0041FC  6ED9               	movwf	fsr2l,c
 17097  0041FE  6ADA               	clrf	fsr2h,c
 17098  004200  0E03               	movlw	3
 17099  004202  26D9               	addwf	fsr2l,f,c
 17100  004204  6ADA               	clrf	fsr2h,c
 17101  004206  0E00               	movlw	0
 17102  004208  6EDF               	movwf	indf2,c
 17103                           
 17104                           ;ECAN.c: 1170: }
 17105  00420A  D067               	goto	l890
 17106  00420C                     l8472:
 17107                           
 17108                           ;ECAN.c: 1171: else
 17109                           ;ECAN.c: 1172: {
 17110                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17111  00420C  5014               	movf	__RegsToCANID@Value,w,c
 17112  00420E  6ED9               	movwf	fsr2l,c
 17113  004210  6ADA               	clrf	fsr2h,c
 17114  004212  0E02               	movlw	2
 17115  004214  26D9               	addwf	fsr2l,f,c
 17116  004216  6ADA               	clrf	fsr2h,c
 17117  004218  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17118  00421C  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17119  004220  50E7               	movf	indf1,w,c
 17120  004222  6E12               	movwf	??__RegsToCANID& (0+255),c
 17121  004224  0E05               	movlw	5
 17122  004226  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17123  004228                     u5995:
 17124  004228  90D8               	bcf	status,0,c
 17125  00422A  3612               	rlcf	??__RegsToCANID,f,c
 17126  00422C  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17127  00422E  D7FC               	goto	u5995
 17128  004230  5012               	movf	??__RegsToCANID,w,c
 17129  004232  6EDF               	movwf	indf2,c
 17130                           
 17131                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17132  004234  5014               	movf	__RegsToCANID@Value,w,c
 17133  004236  6ED9               	movwf	fsr2l,c
 17134  004238  6ADA               	clrf	fsr2h,c
 17135  00423A  0E03               	movlw	3
 17136  00423C  26D9               	addwf	fsr2l,f,c
 17137  00423E  6ADA               	clrf	fsr2h,c
 17138  004240  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17139  004244  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17140  004248  50E7               	movf	indf1,w,c
 17141  00424A  6E12               	movwf	??__RegsToCANID& (0+255),c
 17142  00424C  90D8               	bcf	status,0,c
 17143  00424E  3212               	rrcf	??__RegsToCANID,f,c
 17144  004250  90D8               	bcf	status,0,c
 17145  004252  3212               	rrcf	??__RegsToCANID,f,c
 17146  004254  90D8               	bcf	status,0,c
 17147  004256  3012               	rrcf	??__RegsToCANID,w,c
 17148  004258  6EDF               	movwf	indf2,c
 17149                           
 17150                           ;ECAN.c: 1176: ptr++;
 17151  00425A  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17152  00425C  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17153                           
 17154                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17155  00425E  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17156  004262  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17157  004266  50DF               	movf	indf2,w,c
 17158  004268  6E12               	movwf	??__RegsToCANID& (0+255),c
 17159  00426A  0E03               	movlw	3
 17160  00426C  1612               	andwf	??__RegsToCANID,f,c
 17161  00426E  5014               	movf	__RegsToCANID@Value,w,c
 17162  004270  6ED9               	movwf	fsr2l,c
 17163  004272  6ADA               	clrf	fsr2h,c
 17164  004274  0E02               	movlw	2
 17165  004276  26D9               	addwf	fsr2l,f,c
 17166  004278  6ADA               	clrf	fsr2h,c
 17167  00427A  5012               	movf	??__RegsToCANID,w,c
 17168  00427C  12DF               	iorwf	indf2,f,c
 17169                           
 17170                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17171  00427E  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17172  004282  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17173  004286  50DF               	movf	indf2,w,c
 17174  004288  6E12               	movwf	??__RegsToCANID& (0+255),c
 17175  00428A  90D8               	bcf	status,0,c
 17176  00428C  3212               	rrcf	??__RegsToCANID,f,c
 17177  00428E  90D8               	bcf	status,0,c
 17178  004290  3212               	rrcf	??__RegsToCANID,f,c
 17179  004292  90D8               	bcf	status,0,c
 17180  004294  3212               	rrcf	??__RegsToCANID,f,c
 17181  004296  0E1C               	movlw	28
 17182  004298  1612               	andwf	??__RegsToCANID,f,c
 17183  00429A  5014               	movf	__RegsToCANID@Value,w,c
 17184  00429C  6ED9               	movwf	fsr2l,c
 17185  00429E  6ADA               	clrf	fsr2h,c
 17186  0042A0  0E02               	movlw	2
 17187  0042A2  26D9               	addwf	fsr2l,f,c
 17188  0042A4  6ADA               	clrf	fsr2h,c
 17189  0042A6  5012               	movf	??__RegsToCANID,w,c
 17190  0042A8  12DF               	iorwf	indf2,f,c
 17191                           
 17192                           ;ECAN.c: 1180: ptr++;
 17193  0042AA  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17194  0042AC  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17195                           
 17196                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17197  0042AE  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17198  0042B2  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17199  0042B6  5014               	movf	__RegsToCANID@Value,w,c
 17200  0042B8  6EE1               	movwf	fsr1l,c
 17201  0042BA  6AE2               	clrf	fsr1h,c
 17202  0042BC  2AE1               	incf	fsr1l,f,c
 17203  0042BE  6AE2               	clrf	fsr1h,c
 17204  0042C0  CFDF FFE7          	movff	indf2,indf1
 17205                           
 17206                           ;ECAN.c: 1182: ptr++;
 17207  0042C4  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17208  0042C6  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17209                           
 17210                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17211  0042C8  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17212  0042CC  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17213  0042D0  5014               	movf	__RegsToCANID@Value,w,c
 17214  0042D2  6EE1               	movwf	fsr1l,c
 17215  0042D4  6AE2               	clrf	fsr1h,c
 17216  0042D6  CFDF FFE7          	movff	indf2,indf1
 17217  0042DA                     l890:
 17218  0042DA  0012               	return	
 17219  0042DC                     __end_of__RegsToCANID:
 17220                           	opt stack 0
 17221                           tblptru	equ	0xFF8
 17222                           tblptrh	equ	0xFF7
 17223                           tblptrl	equ	0xFF6
 17224                           tablat	equ	0xFF5
 17225                           prodh	equ	0xFF4
 17226                           prodl	equ	0xFF3
 17227                           postinc0	equ	0xFEE
 17228                           wreg	equ	0xFE8
 17229                           indf1	equ	0xFE7
 17230                           postdec1	equ	0xFE5
 17231                           fsr1h	equ	0xFE2
 17232                           fsr1l	equ	0xFE1
 17233                           indf2	equ	0xFDF
 17234                           postinc2	equ	0xFDE
 17235                           postdec2	equ	0xFDD
 17236                           plusw2	equ	0xFDB
 17237                           fsr2h	equ	0xFDA
 17238                           fsr2l	equ	0xFD9
 17239                           status	equ	0xFD8
 17240                           
 17241 ;; *************** function __ECANPointBuffer *****************
 17242 ;; Defined at:
 17243 ;;		line 1207 in file "../ECAN.c"
 17244 ;; Parameters:    Size  Location     Type
 17245 ;;  b               1    wreg     unsigned char 
 17246 ;; Auto vars:     Size  Location     Type
 17247 ;;  b               1   16[COMRAM] unsigned char 
 17248 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17249 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17250 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17251 ;; Return value:  Size  Location     Type
 17252 ;;                  2   13[COMRAM] PTR unsigned char 
 17253 ;; Registers used:
 17254 ;;		wreg, status,2, status,0
 17255 ;; Tracked objects:
 17256 ;;		On entry : F/0
 17257 ;;		On exit  : 0/0
 17258 ;;		Unchanged: 0/0
 17259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17260 ;;      Params:         3       0       0       0       0       0       0
 17261 ;;      Locals:         3       0       0       0       0       0       0
 17262 ;;      Temps:          0       0       0       0       0       0       0
 17263 ;;      Totals:         6       0       0       0       0       0       0
 17264 ;;Total ram usage:        6 bytes
 17265 ;; Hardware stack levels used:    1
 17266 ;; Hardware stack levels required when called:    2
 17267 ;; This function calls:
 17268 ;;		Nothing
 17269 ;; This function is called by:
 17270 ;;		_ECANReceiveMessage
 17271 ;; This function uses a non-reentrant model
 17272 ;;
 17273                           
 17274                           	psect	text77
 17275  0053F0                     __ptext77:
 17276                           	opt stack 0
 17277  0053F0                     __ECANPointBuffer:
 17278                           	opt stack 24
 17279                           
 17280                           ;incstack = 0
 17281                           ;incstack = 0
 17282                           ;__ECANPointBuffer@b stored from wreg
 17283  0053F0  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;ECAN.c: 1208: BYTE* pt;
 17287                           ;ECAN.c: 1210: switch(b)
 17288  0053F4  D024               	goto	l8458
 17289  0053F6                     l8440:
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17293  0053F6  0E0F               	movlw	15	;volatile
 17294  0053F8  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17295  0053FA  0E60               	movlw	96	;volatile
 17296  0053FC  D01E               	goto	L50
 17297  0053FE                     l8442:
 17298                           
 17299                           ; BSR set to: 0
 17300                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17301  0053FE  010F               	movlb	15	; () banked
 17302  005400  0E0F               	movlw	15	;volatile
 17303  005402  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17304  005404  0E50               	movlw	80	;volatile
 17305  005406  D019               	goto	L50
 17306  005408                     l8444:
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17310  005408  010E               	movlb	14	; () banked
 17311  00540A  0E0E               	movlw	14	;volatile
 17312  00540C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17313  00540E  0E20               	movlw	32	;volatile
 17314  005410  D014               	goto	L50
 17315  005412                     l8446:
 17316                           
 17317                           ; BSR set to: 0
 17318                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17319  005412  010E               	movlb	14	; () banked
 17320  005414  0E0E               	movlw	14	;volatile
 17321  005416  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17322  005418  0E30               	movlw	48	;volatile
 17323  00541A  D00F               	goto	L50
 17324  00541C                     l8448:
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17328  00541C  010E               	movlb	14	; () banked
 17329  00541E  0E0E               	movlw	14	;volatile
 17330  005420  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17331  005422  0E40               	movlw	64	;volatile
 17332  005424  D00A               	goto	L50
 17333  005426                     l8450:
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17337  005426  010E               	movlb	14	; () banked
 17338  005428  0E0E               	movlw	14	;volatile
 17339  00542A  D7EB               	goto	L51
 17340  00542C                     l8452:
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17344  00542C  010E               	movlb	14	; () banked
 17345  00542E  0E0E               	movlw	14	;volatile
 17346  005430  D7E3               	goto	L52
 17347  005432                     l8454:
 17348                           
 17349                           ; BSR set to: 0
 17350                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17351  005432  010E               	movlb	14	; () banked
 17352  005434  0E0E               	movlw	14	;volatile
 17353  005436  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17354  005438  0E70               	movlw	112	;volatile
 17355  00543A                     L50:
 17356  00543A  6E12               	movwf	__ECANPointBuffer@pt,c
 17357                           
 17358                           ;ECAN.c: 1235: break;
 17359  00543C  D00F               	goto	l895
 17360  00543E                     l8458:
 17361                           
 17362                           ; BSR set to: 0
 17363  00543E  5011               	movf	__ECANPointBuffer@b,w,c
 17364                           
 17365                           ; Switch size 1, requested type "speed"
 17366                           ; Number of cases is 7, Range of values is 0 to 6
 17367                           ; switch strategies available:
 17368                           ; Name         Instructions Cycles
 17369                           ; simple_byte           22    12 (average)
 17370                           ;	Chosen strategy is simple_byte
 17371  005440  E0DA               	bz	l8440
 17372  005442  0A01               	xorlw	1	; case 1
 17373  005444  E0DC               	bz	l8442
 17374  005446  0A03               	xorlw	3	; case 2
 17375  005448  E0DF               	bz	l8444
 17376  00544A  0A01               	xorlw	1	; case 3
 17377  00544C  E0E2               	bz	l8446
 17378  00544E  0A07               	xorlw	7	; case 4
 17379  005450  E0E5               	bz	l8448
 17380  005452  0A01               	xorlw	1	; case 5
 17381  005454  E0E8               	bz	l8450
 17382  005456  0A03               	xorlw	3	; case 6
 17383  005458  E0E9               	bz	l8452
 17384  00545A  D7EB               	goto	l8454
 17385  00545C                     l895:
 17386                           
 17387                           ;ECAN.c: 1237: return (pt);
 17388  00545C  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17389  005460  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17390  005464  0012               	return	
 17391  005466                     __end_of__ECANPointBuffer:
 17392                           	opt stack 0
 17393                           tblptru	equ	0xFF8
 17394                           tblptrh	equ	0xFF7
 17395                           tblptrl	equ	0xFF6
 17396                           tablat	equ	0xFF5
 17397                           prodh	equ	0xFF4
 17398                           prodl	equ	0xFF3
 17399                           postinc0	equ	0xFEE
 17400                           wreg	equ	0xFE8
 17401                           indf1	equ	0xFE7
 17402                           postdec1	equ	0xFE5
 17403                           fsr1h	equ	0xFE2
 17404                           fsr1l	equ	0xFE1
 17405                           indf2	equ	0xFDF
 17406                           postinc2	equ	0xFDE
 17407                           postdec2	equ	0xFDD
 17408                           plusw2	equ	0xFDB
 17409                           fsr2h	equ	0xFDA
 17410                           fsr2l	equ	0xFD9
 17411                           status	equ	0xFD8
 17412                           
 17413 ;; *************** function _vscp_check_pstorage *****************
 17414 ;; Defined at:
 17415 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17416 ;; Parameters:    Size  Location     Type
 17417 ;;		None
 17418 ;; Auto vars:     Size  Location     Type
 17419 ;;		None
 17420 ;; Return value:  Size  Location     Type
 17421 ;;                  1    wreg      unsigned char 
 17422 ;; Registers used:
 17423 ;;		wreg, status,2, status,0, cstack
 17424 ;; Tracked objects:
 17425 ;;		On entry : 1/1
 17426 ;;		On exit  : 0/0
 17427 ;;		Unchanged: 0/0
 17428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17429 ;;      Params:         0       0       0       0       0       0       0
 17430 ;;      Locals:         0       0       0       0       0       0       0
 17431 ;;      Temps:          0       0       0       0       0       0       0
 17432 ;;      Totals:         0       0       0       0       0       0       0
 17433 ;;Total ram usage:        0 bytes
 17434 ;; Hardware stack levels used:    1
 17435 ;; Hardware stack levels required when called:    4
 17436 ;; This function calls:
 17437 ;;		_vscp_writeNicknamePermanent
 17438 ;;		_vscp_getSegmentCRC
 17439 ;;		_vscp_setSegmentCRC
 17440 ;;		_vscp_setControlByte
 17441 ;; This function is called by:
 17442 ;;		_main
 17443 ;; This function uses a non-reentrant model
 17444 ;;
 17445                           
 17446                           	psect	text78
 17447  005BAC                     __ptext78:
 17448                           	opt stack 0
 17449  005BAC                     _vscp_check_pstorage:
 17450                           	opt stack 26
 17451                           
 17452                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17453                           
 17454                           ;incstack = 0
 17455                           ;incstack = 0
 17456  005BAC  ECEC  F02E         	call	_vscp_getSegmentCRC	;wreg free
 17457  005BB0  0BC0               	andlw	192
 17458  005BB2  0A40               	xorlw	64
 17459  005BB4  E102               	bnz	l9572
 17460                           
 17461                           ;vscp_firmware.c: 172: return !0;
 17462  005BB6  0E01               	movlw	1
 17463  005BB8  D00A               	goto	l1036
 17464  005BBA                     l9572:
 17465                           
 17466                           ;vscp_firmware.c: 173: }
 17467                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17468  005BBA  0EFF               	movlw	255
 17469  005BBC  ECB8  F02E         	call	_vscp_writeNicknamePermanent
 17470                           
 17471                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17472  005BC0  0E00               	movlw	0
 17473  005BC2  ECAF  F02E         	call	_vscp_setSegmentCRC
 17474                           
 17475                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17476  005BC6  0EA0               	movlw	160
 17477  005BC8  ECA6  F02E         	call	_vscp_setControlByte
 17478                           
 17479                           ;vscp_firmware.c: 185: return 0;
 17480  005BCC  0E00               	movlw	0
 17481  005BCE                     l1036:
 17482  005BCE  0012               	return	
 17483  005BD0                     __end_of_vscp_check_pstorage:
 17484                           	opt stack 0
 17485                           tblptru	equ	0xFF8
 17486                           tblptrh	equ	0xFF7
 17487                           tblptrl	equ	0xFF6
 17488                           tablat	equ	0xFF5
 17489                           prodh	equ	0xFF4
 17490                           prodl	equ	0xFF3
 17491                           postinc0	equ	0xFEE
 17492                           wreg	equ	0xFE8
 17493                           indf1	equ	0xFE7
 17494                           postdec1	equ	0xFE5
 17495                           fsr1h	equ	0xFE2
 17496                           fsr1l	equ	0xFE1
 17497                           indf2	equ	0xFDF
 17498                           postinc2	equ	0xFDE
 17499                           postdec2	equ	0xFDD
 17500                           plusw2	equ	0xFDB
 17501                           fsr2h	equ	0xFDA
 17502                           fsr2l	equ	0xFD9
 17503                           status	equ	0xFD8
 17504                           
 17505 ;; *************** function _vscp_setControlByte *****************
 17506 ;; Defined at:
 17507 ;;		line 2797 in file "../main.c"
 17508 ;; Parameters:    Size  Location     Type
 17509 ;;  ctrl            1    wreg     unsigned char 
 17510 ;; Auto vars:     Size  Location     Type
 17511 ;;  ctrl            1   16[COMRAM] unsigned char 
 17512 ;; Return value:  Size  Location     Type
 17513 ;;		None               void
 17514 ;; Registers used:
 17515 ;;		wreg, status,2, cstack
 17516 ;; Tracked objects:
 17517 ;;		On entry : 0/1
 17518 ;;		On exit  : 0/0
 17519 ;;		Unchanged: 0/0
 17520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17521 ;;      Params:         0       0       0       0       0       0       0
 17522 ;;      Locals:         1       0       0       0       0       0       0
 17523 ;;      Temps:          0       0       0       0       0       0       0
 17524 ;;      Totals:         1       0       0       0       0       0       0
 17525 ;;Total ram usage:        1 bytes
 17526 ;; Hardware stack levels used:    1
 17527 ;; Hardware stack levels required when called:    3
 17528 ;; This function calls:
 17529 ;;		_writeEEPROM
 17530 ;; This function is called by:
 17531 ;;		_vscp_check_pstorage
 17532 ;; This function uses a non-reentrant model
 17533 ;;
 17534                           
 17535                           	psect	text79
 17536  005D4C                     __ptext79:
 17537                           	opt stack 0
 17538  005D4C                     _vscp_setControlByte:
 17539                           	opt stack 26
 17540                           
 17541                           ;incstack = 0
 17542                           ;incstack = 0
 17543                           ;vscp_setControlByte@ctrl stored from wreg
 17544  005D4C  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17545                           
 17546                           ;main.c: 2798: writeEEPROM(0x03, ctrl);
 17547  005D50  6A0F               	clrf	?_writeEEPROM+1,c
 17548  005D52  0E03               	movlw	3
 17549  005D54  6E0E               	movwf	?_writeEEPROM,c
 17550  005D56  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17551  005D5A  EF9F  F02D         	goto	_writeEEPROM	;wreg free
 17552  005D5E                     __end_of_vscp_setControlByte:
 17553                           	opt stack 0
 17554                           tblptru	equ	0xFF8
 17555                           tblptrh	equ	0xFF7
 17556                           tblptrl	equ	0xFF6
 17557                           tablat	equ	0xFF5
 17558                           prodh	equ	0xFF4
 17559                           prodl	equ	0xFF3
 17560                           postinc0	equ	0xFEE
 17561                           wreg	equ	0xFE8
 17562                           indf1	equ	0xFE7
 17563                           postdec1	equ	0xFE5
 17564                           fsr1h	equ	0xFE2
 17565                           fsr1l	equ	0xFE1
 17566                           indf2	equ	0xFDF
 17567                           postinc2	equ	0xFDE
 17568                           postdec2	equ	0xFDD
 17569                           plusw2	equ	0xFDB
 17570                           fsr2h	equ	0xFDA
 17571                           fsr2l	equ	0xFD9
 17572                           status	equ	0xFD8
 17573                           
 17574 ;; *************** function _vscp_setSegmentCRC *****************
 17575 ;; Defined at:
 17576 ;;		line 2788 in file "../main.c"
 17577 ;; Parameters:    Size  Location     Type
 17578 ;;  crc             1    wreg     unsigned char 
 17579 ;; Auto vars:     Size  Location     Type
 17580 ;;  crc             1   16[COMRAM] unsigned char 
 17581 ;; Return value:  Size  Location     Type
 17582 ;;		None               void
 17583 ;; Registers used:
 17584 ;;		wreg, status,2, cstack
 17585 ;; Tracked objects:
 17586 ;;		On entry : 0/0
 17587 ;;		On exit  : 0/0
 17588 ;;		Unchanged: 0/0
 17589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17590 ;;      Params:         0       0       0       0       0       0       0
 17591 ;;      Locals:         1       0       0       0       0       0       0
 17592 ;;      Temps:          0       0       0       0       0       0       0
 17593 ;;      Totals:         1       0       0       0       0       0       0
 17594 ;;Total ram usage:        1 bytes
 17595 ;; Hardware stack levels used:    1
 17596 ;; Hardware stack levels required when called:    3
 17597 ;; This function calls:
 17598 ;;		_writeEEPROM
 17599 ;; This function is called by:
 17600 ;;		_vscp_check_pstorage
 17601 ;;		_vscp_handleProbeState
 17602 ;;		_vscp_handleHeartbeat
 17603 ;;		_vscp_handleSetNickname
 17604 ;; This function uses a non-reentrant model
 17605 ;;
 17606                           
 17607                           	psect	text80
 17608  005D5E                     __ptext80:
 17609                           	opt stack 0
 17610  005D5E                     _vscp_setSegmentCRC:
 17611                           	opt stack 25
 17612                           
 17613                           ;incstack = 0
 17614                           ;incstack = 0
 17615                           ;vscp_setSegmentCRC@crc stored from wreg
 17616  005D5E  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17617                           
 17618                           ;main.c: 2789: writeEEPROM(0x02, crc);
 17619  005D62  6A0F               	clrf	?_writeEEPROM+1,c
 17620  005D64  0E02               	movlw	2
 17621  005D66  6E0E               	movwf	?_writeEEPROM,c
 17622  005D68  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17623  005D6C  EF9F  F02D         	goto	_writeEEPROM	;wreg free
 17624  005D70                     __end_of_vscp_setSegmentCRC:
 17625                           	opt stack 0
 17626                           tblptru	equ	0xFF8
 17627                           tblptrh	equ	0xFF7
 17628                           tblptrl	equ	0xFF6
 17629                           tablat	equ	0xFF5
 17630                           prodh	equ	0xFF4
 17631                           prodl	equ	0xFF3
 17632                           postinc0	equ	0xFEE
 17633                           wreg	equ	0xFE8
 17634                           indf1	equ	0xFE7
 17635                           postdec1	equ	0xFE5
 17636                           fsr1h	equ	0xFE2
 17637                           fsr1l	equ	0xFE1
 17638                           indf2	equ	0xFDF
 17639                           postinc2	equ	0xFDE
 17640                           postdec2	equ	0xFDD
 17641                           plusw2	equ	0xFDB
 17642                           fsr2h	equ	0xFDA
 17643                           fsr2l	equ	0xFD9
 17644                           status	equ	0xFD8
 17645                           
 17646 ;; *************** function _vscp_getSegmentCRC *****************
 17647 ;; Defined at:
 17648 ;;		line 2779 in file "../main.c"
 17649 ;; Parameters:    Size  Location     Type
 17650 ;;		None
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;		None
 17653 ;; Return value:  Size  Location     Type
 17654 ;;                  1    wreg      unsigned char 
 17655 ;; Registers used:
 17656 ;;		wreg, status,2, cstack
 17657 ;; Tracked objects:
 17658 ;;		On entry : 0/0
 17659 ;;		On exit  : 0/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17662 ;;      Params:         0       0       0       0       0       0       0
 17663 ;;      Locals:         0       0       0       0       0       0       0
 17664 ;;      Temps:          0       0       0       0       0       0       0
 17665 ;;      Totals:         0       0       0       0       0       0       0
 17666 ;;Total ram usage:        0 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    3
 17669 ;; This function calls:
 17670 ;;		_readEEPROM
 17671 ;; This function is called by:
 17672 ;;		_vscp_check_pstorage
 17673 ;;		_vscp_handleHeartbeat
 17674 ;; This function uses a non-reentrant model
 17675 ;;
 17676                           
 17677                           	psect	text81
 17678  005DD8                     __ptext81:
 17679                           	opt stack 0
 17680  005DD8                     _vscp_getSegmentCRC:
 17681                           	opt stack 25
 17682                           
 17683                           ;main.c: 2780: return readEEPROM(0x02);
 17684                           
 17685                           ;incstack = 0
 17686                           ;incstack = 0
 17687  005DD8  6A0F               	clrf	?_readEEPROM+1,c
 17688  005DDA  0E02               	movlw	2
 17689  005DDC  6E0E               	movwf	?_readEEPROM,c
 17690  005DDE  EF9C  F02E         	goto	_readEEPROM	;wreg free
 17691  005DE2                     __end_of_vscp_getSegmentCRC:
 17692                           	opt stack 0
 17693                           tblptru	equ	0xFF8
 17694                           tblptrh	equ	0xFF7
 17695                           tblptrl	equ	0xFF6
 17696                           tablat	equ	0xFF5
 17697                           prodh	equ	0xFF4
 17698                           prodl	equ	0xFF3
 17699                           postinc0	equ	0xFEE
 17700                           wreg	equ	0xFE8
 17701                           indf1	equ	0xFE7
 17702                           postdec1	equ	0xFE5
 17703                           fsr1h	equ	0xFE2
 17704                           fsr1l	equ	0xFE1
 17705                           indf2	equ	0xFDF
 17706                           postinc2	equ	0xFDE
 17707                           postdec2	equ	0xFDD
 17708                           plusw2	equ	0xFDB
 17709                           fsr2h	equ	0xFDA
 17710                           fsr2l	equ	0xFD9
 17711                           status	equ	0xFD8
 17712                           
 17713 ;; *************** function _readEEPROM *****************
 17714 ;; Defined at:
 17715 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 17716 ;; Parameters:    Size  Location     Type
 17717 ;;  address         2   13[COMRAM] unsigned short 
 17718 ;; Auto vars:     Size  Location     Type
 17719 ;;  data            1   16[COMRAM] unsigned char 
 17720 ;; Return value:  Size  Location     Type
 17721 ;;                  1    wreg      unsigned char 
 17722 ;; Registers used:
 17723 ;;		wreg, status,2
 17724 ;; Tracked objects:
 17725 ;;		On entry : 0/0
 17726 ;;		On exit  : 0/0
 17727 ;;		Unchanged: 0/0
 17728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17729 ;;      Params:         2       0       0       0       0       0       0
 17730 ;;      Locals:         2       0       0       0       0       0       0
 17731 ;;      Temps:          0       0       0       0       0       0       0
 17732 ;;      Totals:         4       0       0       0       0       0       0
 17733 ;;Total ram usage:        4 bytes
 17734 ;; Hardware stack levels used:    1
 17735 ;; Hardware stack levels required when called:    2
 17736 ;; This function calls:
 17737 ;;		Nothing
 17738 ;; This function is called by:
 17739 ;;		_doWork
 17740 ;;		_doOneSecondWork
 17741 ;;		_sendTempEvent
 17742 ;;		_getCalibrationValue
 17743 ;;		_writeCoeffs2Ram
 17744 ;;		_handle_sync
 17745 ;;		_vscp_readAppReg
 17746 ;;		_vscp_writeAppReg
 17747 ;;		_vscp_getGUID
 17748 ;;		_vscp_getUserID
 17749 ;;		_vscp_getManufacturerId
 17750 ;;		_vscp_getZone
 17751 ;;		_vscp_getSubzone
 17752 ;;		_vscp_readNicknamePermanent
 17753 ;;		_vscp_getSegmentCRC
 17754 ;; This function uses a non-reentrant model
 17755 ;;
 17756                           
 17757                           	psect	text82
 17758  005D38                     __ptext82:
 17759                           	opt stack 0
 17760  005D38                     _readEEPROM:
 17761                           	opt stack 26
 17762                           
 17763                           ;eeprom.c: 95: uint8_t data;
 17764                           ;eeprom.c: 100: EEADR = address & 0xff;
 17765                           
 17766                           ;incstack = 0
 17767                           ;incstack = 0
 17768  005D38  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17769                           
 17770                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 17771  005D3C  9EA6               	bcf	4006,7,c	;volatile
 17772                           
 17773                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 17774  005D3E  9CA6               	bcf	4006,6,c	;volatile
 17775                           
 17776                           ;eeprom.c: 103: EECON1bits.RD = 1;
 17777  005D40  80A6               	bsf	4006,0,c	;volatile
 17778  005D42  F000               	nop		;# 
 17779                           
 17780                           ;eeprom.c: 105: data = EEDATA;
 17781  005D44  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17782                           
 17783                           ;eeprom.c: 107: return data;
 17784  005D48  5011               	movf	readEEPROM@data,w,c
 17785  005D4A  0012               	return	
 17786  005D4C                     __end_of_readEEPROM:
 17787                           	opt stack 0
 17788                           tblptru	equ	0xFF8
 17789                           tblptrh	equ	0xFF7
 17790                           tblptrl	equ	0xFF6
 17791                           tablat	equ	0xFF5
 17792                           prodh	equ	0xFF4
 17793                           prodl	equ	0xFF3
 17794                           postinc0	equ	0xFEE
 17795                           wreg	equ	0xFE8
 17796                           indf1	equ	0xFE7
 17797                           postdec1	equ	0xFE5
 17798                           fsr1h	equ	0xFE2
 17799                           fsr1l	equ	0xFE1
 17800                           indf2	equ	0xFDF
 17801                           postinc2	equ	0xFDE
 17802                           postdec2	equ	0xFDD
 17803                           plusw2	equ	0xFDB
 17804                           fsr2h	equ	0xFDA
 17805                           fsr2l	equ	0xFD9
 17806                           status	equ	0xFD8
 17807                           
 17808 ;; *************** function _vscp_writeNicknamePermanent *****************
 17809 ;; Defined at:
 17810 ;;		line 2770 in file "../main.c"
 17811 ;; Parameters:    Size  Location     Type
 17812 ;;  nickname        1    wreg     unsigned char 
 17813 ;; Auto vars:     Size  Location     Type
 17814 ;;  nickname        1   16[COMRAM] unsigned char 
 17815 ;; Return value:  Size  Location     Type
 17816 ;;		None               void
 17817 ;; Registers used:
 17818 ;;		wreg, status,2, cstack
 17819 ;; Tracked objects:
 17820 ;;		On entry : 0/0
 17821 ;;		On exit  : 0/0
 17822 ;;		Unchanged: 0/0
 17823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17824 ;;      Params:         0       0       0       0       0       0       0
 17825 ;;      Locals:         1       0       0       0       0       0       0
 17826 ;;      Temps:          0       0       0       0       0       0       0
 17827 ;;      Totals:         1       0       0       0       0       0       0
 17828 ;;Total ram usage:        1 bytes
 17829 ;; Hardware stack levels used:    1
 17830 ;; Hardware stack levels required when called:    3
 17831 ;; This function calls:
 17832 ;;		_writeEEPROM
 17833 ;; This function is called by:
 17834 ;;		_vscp_check_pstorage
 17835 ;;		_vscp_handleProbeState
 17836 ;;		_vscp_handleHeartbeat
 17837 ;;		_vscp_handleSetNickname
 17838 ;;		_vscp_handleDropNickname
 17839 ;; This function uses a non-reentrant model
 17840 ;;
 17841                           
 17842                           	psect	text83
 17843  005D70                     __ptext83:
 17844                           	opt stack 0
 17845  005D70                     _vscp_writeNicknamePermanent:
 17846                           	opt stack 25
 17847                           
 17848                           ;incstack = 0
 17849                           ;incstack = 0
 17850                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17851  005D70  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17852                           
 17853                           ;main.c: 2771: writeEEPROM( 0x01, nickname );
 17854  005D74  6A0F               	clrf	?_writeEEPROM+1,c
 17855  005D76  0E01               	movlw	1
 17856  005D78  6E0E               	movwf	?_writeEEPROM,c
 17857  005D7A  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17858  005D7E  EF9F  F02D         	goto	_writeEEPROM	;wreg free
 17859  005D82                     __end_of_vscp_writeNicknamePermanent:
 17860                           	opt stack 0
 17861                           tblptru	equ	0xFF8
 17862                           tblptrh	equ	0xFF7
 17863                           tblptrl	equ	0xFF6
 17864                           tablat	equ	0xFF5
 17865                           prodh	equ	0xFF4
 17866                           prodl	equ	0xFF3
 17867                           postinc0	equ	0xFEE
 17868                           wreg	equ	0xFE8
 17869                           indf1	equ	0xFE7
 17870                           postdec1	equ	0xFE5
 17871                           fsr1h	equ	0xFE2
 17872                           fsr1l	equ	0xFE1
 17873                           indf2	equ	0xFDF
 17874                           postinc2	equ	0xFDE
 17875                           postdec2	equ	0xFDD
 17876                           plusw2	equ	0xFDB
 17877                           fsr2h	equ	0xFDA
 17878                           fsr2l	equ	0xFD9
 17879                           status	equ	0xFD8
 17880                           
 17881 ;; *************** function _writeEEPROM *****************
 17882 ;; Defined at:
 17883 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 17884 ;; Parameters:    Size  Location     Type
 17885 ;;  address         2   13[COMRAM] unsigned short 
 17886 ;;  data            1   15[COMRAM] unsigned char 
 17887 ;; Auto vars:     Size  Location     Type
 17888 ;;		None
 17889 ;; Return value:  Size  Location     Type
 17890 ;;		None               void
 17891 ;; Registers used:
 17892 ;;		wreg, status,2
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17898 ;;      Params:         3       0       0       0       0       0       0
 17899 ;;      Locals:         0       0       0       0       0       0       0
 17900 ;;      Temps:          0       0       0       0       0       0       0
 17901 ;;      Totals:         3       0       0       0       0       0       0
 17902 ;;Total ram usage:        3 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    2
 17905 ;; This function calls:
 17906 ;;		Nothing
 17907 ;; This function is called by:
 17908 ;;		_main
 17909 ;;		_doWork
 17910 ;;		_init_app_eeprom
 17911 ;;		_vscp_writeAppReg
 17912 ;;		_vscp_setGUID
 17913 ;;		_vscp_setUserID
 17914 ;;		_vscp_setManufacturerId
 17915 ;;		_vscp_goBootloaderMode
 17916 ;;		_vscp_writeNicknamePermanent
 17917 ;;		_vscp_setSegmentCRC
 17918 ;;		_vscp_setControlByte
 17919 ;; This function uses a non-reentrant model
 17920 ;;
 17921                           
 17922                           	psect	text84
 17923  005B3E                     __ptext84:
 17924                           	opt stack 0
 17925  005B3E                     _writeEEPROM:
 17926                           	opt stack 27
 17927                           
 17928                           ;eeprom.c: 30: EEADR = address & 0xff;
 17929                           
 17930                           ;incstack = 0
 17931                           ;incstack = 0
 17932  005B3E  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17933                           
 17934                           ;eeprom.c: 31: EEDATA = data;
 17935  005B42  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17936                           
 17937                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 17938  005B46  9EA6               	bcf	4006,7,c	;volatile
 17939                           
 17940                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 17941  005B48  9CA6               	bcf	4006,6,c	;volatile
 17942                           
 17943                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 17944  005B4A  84A6               	bsf	4006,2,c	;volatile
 17945                           
 17946                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 17947  005B4C  9EF2               	bcf	intcon,7,c	;volatile
 17948                           
 17949                           ;eeprom.c: 38: EECON2 = 0x55;
 17950  005B4E  0E55               	movlw	85
 17951  005B50  6EA7               	movwf	4007,c	;volatile
 17952                           
 17953                           ;eeprom.c: 39: EECON2 = 0xaa;
 17954  005B52  0EAA               	movlw	170
 17955  005B54  6EA7               	movwf	4007,c	;volatile
 17956                           
 17957                           ;eeprom.c: 40: EECON1bits.WR = 1;
 17958  005B56  82A6               	bsf	4006,1,c	;volatile
 17959                           
 17960                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 17961  005B58  8EF2               	bsf	intcon,7,c	;volatile
 17962  005B5A                     l918:
 17963  005B5A  A8A1               	btfss	4001,4,c	;volatile
 17964  005B5C  D7FE               	goto	l918
 17965                           
 17966                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 17967  005B5E  98A1               	bcf	4001,4,c	;volatile
 17968                           
 17969                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 17970  005B60  94A6               	bcf	4006,2,c	;volatile
 17971  005B62  0012               	return	
 17972  005B64                     __end_of_writeEEPROM:
 17973                           	opt stack 0
 17974                           tblptru	equ	0xFF8
 17975                           tblptrh	equ	0xFF7
 17976                           tblptrl	equ	0xFF6
 17977                           tablat	equ	0xFF5
 17978                           prodh	equ	0xFF4
 17979                           prodl	equ	0xFF3
 17980                           intcon	equ	0xFF2
 17981                           postinc0	equ	0xFEE
 17982                           wreg	equ	0xFE8
 17983                           indf1	equ	0xFE7
 17984                           postdec1	equ	0xFE5
 17985                           fsr1h	equ	0xFE2
 17986                           fsr1l	equ	0xFE1
 17987                           indf2	equ	0xFDF
 17988                           postinc2	equ	0xFDE
 17989                           postdec2	equ	0xFDD
 17990                           plusw2	equ	0xFDB
 17991                           fsr2h	equ	0xFDA
 17992                           fsr2l	equ	0xFD9
 17993                           status	equ	0xFD8
 17994                           
 17995 ;; *************** function _init *****************
 17996 ;; Defined at:
 17997 ;;		line 888 in file "../main.c"
 17998 ;; Parameters:    Size  Location     Type
 17999 ;;		None
 18000 ;; Auto vars:     Size  Location     Type
 18001 ;;		None
 18002 ;; Return value:  Size  Location     Type
 18003 ;;		None               void
 18004 ;; Registers used:
 18005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18006 ;; Tracked objects:
 18007 ;;		On entry : 0/0
 18008 ;;		On exit  : 1/1
 18009 ;;		Unchanged: 0/0
 18010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18011 ;;      Params:         0       0       0       0       0       0       0
 18012 ;;      Locals:         0       0       0       0       0       0       0
 18013 ;;      Temps:          0       0       0       0       0       0       0
 18014 ;;      Totals:         0       0       0       0       0       0       0
 18015 ;;Total ram usage:        0 bytes
 18016 ;; Hardware stack levels used:    1
 18017 ;; Hardware stack levels required when called:    5
 18018 ;; This function calls:
 18019 ;;		_WriteTimer0
 18020 ;;		_ConvertADC
 18021 ;;		_init_app_ram
 18022 ;;		_OpenTimer0
 18023 ;;		_OpenADC
 18024 ;;		_ECANInitialize
 18025 ;; This function is called by:
 18026 ;;		_main
 18027 ;; This function uses a non-reentrant model
 18028 ;;
 18029                           
 18030                           	psect	text85
 18031  005894                     __ptext85:
 18032                           	opt stack 0
 18033  005894                     _init:
 18034                           	opt stack 25
 18035                           
 18036                           ;main.c: 892: init_app_ram();
 18037                           
 18038                           ;incstack = 0
 18039                           ;incstack = 0
 18040  005894  EC68  F02C         	call	_init_app_ram	;wreg free
 18041                           
 18042                           ; BSR set to: 1
 18043                           ;main.c: 900: TRISA = 0x07;
 18044  005898  0E07               	movlw	7
 18045  00589A  6E92               	movwf	3986,c	;volatile
 18046                           
 18047                           ; BSR set to: 1
 18048                           ;main.c: 911: TRISB = 0x1B;
 18049  00589C  0E1B               	movlw	27
 18050  00589E  6E93               	movwf	3987,c	;volatile
 18051                           
 18052                           ; BSR set to: 1
 18053                           ;main.c: 921: TRISC = 0x01;
 18054  0058A0  0E01               	movlw	1
 18055  0058A2  6E94               	movwf	3988,c	;volatile
 18056                           
 18057                           ; BSR set to: 1
 18058                           ;main.c: 922: PORTC = 0x00;
 18059  0058A4  6A82               	clrf	3970,c	;volatile
 18060                           
 18061                           ; BSR set to: 1
 18062                           ;main.c: 924: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18063  0058A6  0E92               	movlw	146
 18064  0058A8  EC19  F02E         	call	_OpenTimer0
 18065                           
 18066                           ; BSR set to: 1
 18067                           ;main.c: 925: WriteTimer0(0xfb1d);
 18068  0058AC  0EFB               	movlw	251
 18069  0058AE  6E0F               	movwf	?_WriteTimer0+1,c
 18070  0058B0  0E1D               	movlw	29
 18071  0058B2  6E0E               	movwf	?_WriteTimer0,c
 18072  0058B4  ECC1  F02E         	call	_WriteTimer0	;wreg free
 18073                           
 18074                           ; BSR set to: 1
 18075                           ;main.c: 927: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18076                           ;main.c: 928: 0b10000111 & 0b11111111 & 0b11110100 &
 18077                           ;main.c: 929: 0b11111110 & 0b11111101,
 18078                           ;main.c: 930: 15);
 18079  0058B8  0E84               	movlw	132
 18080  0058BA  6E0E               	movwf	?_OpenADC,c
 18081  0058BC  0E0F               	movlw	15
 18082  0058BE  6E0F               	movwf	?_OpenADC+1,c
 18083  0058C0  0EEF               	movlw	239
 18084  0058C2  EC6D  F02A         	call	_OpenADC
 18085                           
 18086                           ; BSR set to: 1
 18087                           ;main.c: 933: ECANInitialize();
 18088  0058C6  ECB1  F028         	call	_ECANInitialize	;wreg free
 18089                           
 18090                           ;main.c: 957: INTCONbits.GIE = 1;
 18091  0058CA  8EF2               	bsf	intcon,7,c	;volatile
 18092                           
 18093                           ;main.c: 959: ConvertADC();
 18094  0058CC  EFF7  F02E         	goto	_ConvertADC	;wreg free
 18095  0058D0                     __end_of_init:
 18096                           	opt stack 0
 18097                           tblptru	equ	0xFF8
 18098                           tblptrh	equ	0xFF7
 18099                           tblptrl	equ	0xFF6
 18100                           tablat	equ	0xFF5
 18101                           prodh	equ	0xFF4
 18102                           prodl	equ	0xFF3
 18103                           intcon	equ	0xFF2
 18104                           postinc0	equ	0xFEE
 18105                           wreg	equ	0xFE8
 18106                           indf1	equ	0xFE7
 18107                           postdec1	equ	0xFE5
 18108                           fsr1h	equ	0xFE2
 18109                           fsr1l	equ	0xFE1
 18110                           indf2	equ	0xFDF
 18111                           postinc2	equ	0xFDE
 18112                           postdec2	equ	0xFDD
 18113                           plusw2	equ	0xFDB
 18114                           fsr2h	equ	0xFDA
 18115                           fsr2l	equ	0xFD9
 18116                           status	equ	0xFD8
 18117                           
 18118 ;; *************** function _ECANInitialize *****************
 18119 ;; Defined at:
 18120 ;;		line 168 in file "../ECAN.c"
 18121 ;; Parameters:    Size  Location     Type
 18122 ;;		None
 18123 ;; Auto vars:     Size  Location     Type
 18124 ;;		None
 18125 ;; Return value:  Size  Location     Type
 18126 ;;		None               void
 18127 ;; Registers used:
 18128 ;;		wreg, status,2, status,0, cstack
 18129 ;; Tracked objects:
 18130 ;;		On entry : F/1
 18131 ;;		On exit  : 1/1
 18132 ;;		Unchanged: 0/0
 18133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18134 ;;      Params:         0       0       0       0       0       0       0
 18135 ;;      Locals:         0       0       0       0       0       0       0
 18136 ;;      Temps:          0       0       0       0       0       0       0
 18137 ;;      Totals:         0       0       0       0       0       0       0
 18138 ;;Total ram usage:        0 bytes
 18139 ;; Hardware stack levels used:    1
 18140 ;; Hardware stack levels required when called:    3
 18141 ;; This function calls:
 18142 ;;		_ECANSetOperationMode
 18143 ;; This function is called by:
 18144 ;;		_init
 18145 ;; This function uses a non-reentrant model
 18146 ;;
 18147                           
 18148                           	psect	text86
 18149  005162                     __ptext86:
 18150                           	opt stack 0
 18151  005162                     _ECANInitialize:
 18152                           	opt stack 26
 18153                           
 18154                           ; BSR set to: 1
 18155                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18156                           
 18157                           ;incstack = 0
 18158                           ;incstack = 0
 18159  005162  0E80               	movlw	128
 18160  005164  EC72  F02E         	call	_ECANSetOperationMode
 18161                           
 18162                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18163  005168  0E09               	movlw	9
 18164  00516A  6E70               	movwf	3952,c	;volatile
 18165                           
 18166                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18167  00516C  0EFC               	movlw	252
 18168  00516E  6E71               	movwf	3953,c	;volatile
 18169                           
 18170                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18171                           ;ECAN.c: 181: (0 << 6) |
 18172                           ;ECAN.c: 182: (2-1);
 18173  005170  0E01               	movlw	1
 18174  005172  6E72               	movwf	3954,c	;volatile
 18175                           
 18176                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18177  005174  0E20               	movlw	32
 18178  005176  6E73               	movwf	3955,c	;volatile
 18179                           
 18180                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18181  005178  8E77               	bsf	3959,7,c	;volatile
 18182                           
 18183                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18184  00517A  9C77               	bcf	3959,6,c	;volatile
 18185                           
 18186                           ;ECAN.c: 205: RXB0CON = 0;
 18187  00517C  6A60               	clrf	3936,c	;volatile
 18188                           
 18189                           ;ECAN.c: 211: RXB1CON = 0;
 18190  00517E  010F               	movlb	15	; () banked
 18191  005180  6B50               	clrf	80,b	;volatile
 18192                           
 18193                           ; BSR set to: 15
 18194                           ;ECAN.c: 221: B0CON = 0;
 18195  005182  010E               	movlb	14	; () banked
 18196  005184  6B20               	clrf	32,b	;volatile
 18197                           
 18198                           ; BSR set to: 14
 18199                           ;ECAN.c: 231: B1CON = 0;
 18200  005186  6B30               	clrf	48,b	;volatile
 18201                           
 18202                           ; BSR set to: 14
 18203                           ;ECAN.c: 241: B2CON = 0;
 18204  005188  6B40               	clrf	64,b	;volatile
 18205                           
 18206                           ; BSR set to: 14
 18207                           ;ECAN.c: 254: B3CON = 0 << 2;
 18208  00518A  6B50               	clrf	80,b	;volatile
 18209                           
 18210                           ; BSR set to: 14
 18211                           ;ECAN.c: 264: B4CON = 0 << 2;
 18212  00518C  6B60               	clrf	96,b	;volatile
 18213                           
 18214                           ; BSR set to: 14
 18215                           ;ECAN.c: 274: B5CON = 0 << 2;
 18216  00518E  6B70               	clrf	112,b	;volatile
 18217                           
 18218                           ; BSR set to: 14
 18219                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18220  005190  0EE0               	movlw	224
 18221  005192  010D               	movlb	13	; () banked
 18222  005194  6FF8               	movwf	248,b	;volatile
 18223                           
 18224                           ; BSR set to: 13
 18225                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18226  005196  010F               	movlb	15	; () banked
 18227  005198  6B00               	clrf	0,b	;volatile
 18228                           
 18229                           ; BSR set to: 15
 18230  00519A  0E08               	movlw	8
 18231  00519C  6F01               	movwf	1,b	;volatile
 18232                           
 18233                           ; BSR set to: 15
 18234  00519E  6B02               	clrf	2,b	;volatile
 18235                           
 18236                           ; BSR set to: 15
 18237  0051A0  6B03               	clrf	3,b	;volatile
 18238                           
 18239                           ; BSR set to: 15
 18240                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18241  0051A2  6B04               	clrf	4,b	;volatile
 18242                           
 18243                           ; BSR set to: 15
 18244  0051A4  0EE8               	movlw	232
 18245  0051A6  6F05               	movwf	5,b	;volatile
 18246                           
 18247                           ; BSR set to: 15
 18248  0051A8  0E1A               	movlw	26
 18249  0051AA  6F06               	movwf	6,b	;volatile
 18250                           
 18251                           ; BSR set to: 15
 18252  0051AC  6B07               	clrf	7,b	;volatile
 18253                           
 18254                           ; BSR set to: 15
 18255                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18256  0051AE  0E03               	movlw	3
 18257  0051B0  010D               	movlb	13	; () banked
 18258  0051B2  6FD4               	movwf	212,b	;volatile
 18259                           
 18260                           ; BSR set to: 13
 18261                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18262  0051B4  6BD5               	clrf	213,b	;volatile
 18263                           
 18264                           ; BSR set to: 13
 18265                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18266  0051B6  6BE0               	clrf	224,b	;volatile
 18267                           
 18268                           ; BSR set to: 13
 18269                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18270  0051B8  0E11               	movlw	17
 18271  0051BA  6FE1               	movwf	225,b	;volatile
 18272                           
 18273                           ; BSR set to: 13
 18274                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18275  0051BC  6FE2               	movwf	226,b	;volatile
 18276                           
 18277                           ; BSR set to: 13
 18278                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18279  0051BE  6BE3               	clrf	227,b	;volatile
 18280                           
 18281                           ; BSR set to: 13
 18282                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18283  0051C0  6BE4               	clrf	228,b	;volatile
 18284                           
 18285                           ; BSR set to: 13
 18286                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18287  0051C2  6BE5               	clrf	229,b	;volatile
 18288                           
 18289                           ; BSR set to: 13
 18290                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18291  0051C4  6BE6               	clrf	230,b	;volatile
 18292                           
 18293                           ; BSR set to: 13
 18294                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18295  0051C6  6BE7               	clrf	231,b	;volatile
 18296                           
 18297                           ; BSR set to: 13
 18298                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18299  0051C8  0E54               	movlw	84
 18300  0051CA  6FF0               	movwf	240,b	;volatile
 18301                           
 18302                           ; BSR set to: 13
 18303                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18304  0051CC  0E05               	movlw	5
 18305  0051CE  6FF1               	movwf	241,b	;volatile
 18306                           
 18307                           ; BSR set to: 13
 18308                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18309  0051D0  6BF2               	clrf	242,b	;volatile
 18310                           
 18311                           ; BSR set to: 13
 18312                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18313  0051D2  6BF2               	clrf	242,b	;volatile
 18314                           
 18315                           ; BSR set to: 13
 18316                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18317  0051D4  0E0F               	movlw	15
 18318  0051D6  010F               	movlb	15	; () banked
 18319  0051D8  6F18               	movwf	24,b	;volatile
 18320                           
 18321                           ; BSR set to: 15
 18322  0051DA  0EE0               	movlw	224
 18323  0051DC  6F19               	movwf	25,b	;volatile
 18324                           
 18325                           ; BSR set to: 15
 18326  0051DE  6B1A               	clrf	26,b	;volatile
 18327                           
 18328                           ; BSR set to: 15
 18329  0051E0  6B1B               	clrf	27,b	;volatile
 18330                           
 18331                           ; BSR set to: 15
 18332                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18333  0051E2  8719               	bsf	25,3,b	;volatile
 18334                           
 18335                           ; BSR set to: 15
 18336                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18337  0051E4  0E0F               	movlw	15
 18338  0051E6  6F1C               	movwf	28,b	;volatile
 18339                           
 18340                           ; BSR set to: 15
 18341  0051E8  0EE0               	movlw	224
 18342  0051EA  6F1D               	movwf	29,b	;volatile
 18343                           
 18344                           ; BSR set to: 15
 18345  0051EC  691E               	setf	30,b	;volatile
 18346                           
 18347                           ; BSR set to: 15
 18348  0051EE  6B1F               	clrf	31,b	;volatile
 18349                           
 18350                           ; BSR set to: 15
 18351                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18352  0051F0  871D               	bsf	29,3,b	;volatile
 18353                           
 18354                           ; BSR set to: 15
 18355                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18356  0051F2  0E00               	movlw	0
 18357  0051F4  EF72  F02E         	goto	_ECANSetOperationMode
 18358  0051F8                     __end_of_ECANInitialize:
 18359                           	opt stack 0
 18360                           tblptru	equ	0xFF8
 18361                           tblptrh	equ	0xFF7
 18362                           tblptrl	equ	0xFF6
 18363                           tablat	equ	0xFF5
 18364                           prodh	equ	0xFF4
 18365                           prodl	equ	0xFF3
 18366                           intcon	equ	0xFF2
 18367                           postinc0	equ	0xFEE
 18368                           wreg	equ	0xFE8
 18369                           indf1	equ	0xFE7
 18370                           postdec1	equ	0xFE5
 18371                           fsr1h	equ	0xFE2
 18372                           fsr1l	equ	0xFE1
 18373                           indf2	equ	0xFDF
 18374                           postinc2	equ	0xFDE
 18375                           postdec2	equ	0xFDD
 18376                           plusw2	equ	0xFDB
 18377                           fsr2h	equ	0xFDA
 18378                           fsr2l	equ	0xFD9
 18379                           status	equ	0xFD8
 18380                           
 18381 ;; *************** function _ECANSetOperationMode *****************
 18382 ;; Defined at:
 18383 ;;		line 1012 in file "../ECAN.c"
 18384 ;; Parameters:    Size  Location     Type
 18385 ;;  mode            1    wreg     enum E16337
 18386 ;; Auto vars:     Size  Location     Type
 18387 ;;  mode            1   13[COMRAM] enum E16337
 18388 ;; Return value:  Size  Location     Type
 18389 ;;		None               void
 18390 ;; Registers used:
 18391 ;;		wreg, status,2, status,0
 18392 ;; Tracked objects:
 18393 ;;		On entry : 1/1
 18394 ;;		On exit  : 1/1
 18395 ;;		Unchanged: 1/0
 18396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18397 ;;      Params:         0       0       0       0       0       0       0
 18398 ;;      Locals:         1       0       0       0       0       0       0
 18399 ;;      Temps:          0       0       0       0       0       0       0
 18400 ;;      Totals:         1       0       0       0       0       0       0
 18401 ;;Total ram usage:        1 bytes
 18402 ;; Hardware stack levels used:    1
 18403 ;; Hardware stack levels required when called:    2
 18404 ;; This function calls:
 18405 ;;		Nothing
 18406 ;; This function is called by:
 18407 ;;		_ECANInitialize
 18408 ;; This function uses a non-reentrant model
 18409 ;;
 18410                           
 18411                           	psect	text87
 18412  005CE4                     __ptext87:
 18413                           	opt stack 0
 18414  005CE4                     _ECANSetOperationMode:
 18415                           	opt stack 26
 18416                           
 18417                           ;incstack = 0
 18418                           ;incstack = 0
 18419                           ;ECANSetOperationMode@mode stored from wreg
 18420  005CE4  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18421                           
 18422                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18423  005CE8  0E1F               	movlw	31
 18424  005CEA  166F               	andwf	3951,f,c	;volatile
 18425                           
 18426                           ;ECAN.c: 1014: CANCON |= mode;
 18427  005CEC  500E               	movf	ECANSetOperationMode@mode,w,c
 18428  005CEE  126F               	iorwf	3951,f,c	;volatile
 18429  005CF0                     l8410:
 18430  005CF0  506F               	movf	3951,w,c	;volatile
 18431  005CF2  0BE0               	andlw	224
 18432  005CF4  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18433  005CF6  B4D8               	btfsc	status,2,c
 18434  005CF8  0012               	return	
 18435  005CFA  D7FA               	goto	l8410
 18436  005CFC                     __end_of_ECANSetOperationMode:
 18437                           	opt stack 0
 18438                           tblptru	equ	0xFF8
 18439                           tblptrh	equ	0xFF7
 18440                           tblptrl	equ	0xFF6
 18441                           tablat	equ	0xFF5
 18442                           prodh	equ	0xFF4
 18443                           prodl	equ	0xFF3
 18444                           intcon	equ	0xFF2
 18445                           postinc0	equ	0xFEE
 18446                           wreg	equ	0xFE8
 18447                           indf1	equ	0xFE7
 18448                           postdec1	equ	0xFE5
 18449                           fsr1h	equ	0xFE2
 18450                           fsr1l	equ	0xFE1
 18451                           indf2	equ	0xFDF
 18452                           postinc2	equ	0xFDE
 18453                           postdec2	equ	0xFDD
 18454                           plusw2	equ	0xFDB
 18455                           fsr2h	equ	0xFDA
 18456                           fsr2l	equ	0xFD9
 18457                           status	equ	0xFD8
 18458                           
 18459 ;; *************** function _OpenADC *****************
 18460 ;; Defined at:
 18461 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18462 ;; Parameters:    Size  Location     Type
 18463 ;;  config          1    wreg     unsigned char 
 18464 ;;  config2         1   13[COMRAM] unsigned char 
 18465 ;;  portconfig      1   14[COMRAM] unsigned char 
 18466 ;; Auto vars:     Size  Location     Type
 18467 ;;  config          1   17[COMRAM] unsigned char 
 18468 ;; Return value:  Size  Location     Type
 18469 ;;		None               void
 18470 ;; Registers used:
 18471 ;;		wreg, status,2, status,0
 18472 ;; Tracked objects:
 18473 ;;		On entry : F/1
 18474 ;;		On exit  : F/1
 18475 ;;		Unchanged: F/0
 18476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18477 ;;      Params:         2       0       0       0       0       0       0
 18478 ;;      Locals:         1       0       0       0       0       0       0
 18479 ;;      Temps:          2       0       0       0       0       0       0
 18480 ;;      Totals:         5       0       0       0       0       0       0
 18481 ;;Total ram usage:        5 bytes
 18482 ;; Hardware stack levels used:    1
 18483 ;; Hardware stack levels required when called:    2
 18484 ;; This function calls:
 18485 ;;		Nothing
 18486 ;; This function is called by:
 18487 ;;		_init
 18488 ;; This function uses a non-reentrant model
 18489 ;;
 18490                           
 18491                           	psect	text88
 18492  0054DA                     __ptext88:
 18493                           	opt stack 0
 18494  0054DA                     _OpenADC:
 18495                           	opt stack 27
 18496                           
 18497                           ;incstack = 0
 18498                           ;incstack = 0
 18499                           ;OpenADC@config stored from wreg
 18500  0054DA  CFE8 F012          	movff	wreg,OpenADC@config
 18501                           
 18502                           ; BSR set to: 1
 18503  0054DE  6AC2               	clrf	4034,c	;volatile
 18504  0054E0  6AC0               	clrf	4032,c	;volatile
 18505                           
 18506                           ; BSR set to: 1
 18507  0054E2  90D8               	bcf	status,0,c
 18508  0054E4  300E               	rrcf	OpenADC@config2,w,c
 18509  0054E6  0B3C               	andlw	60
 18510  0054E8  6EC2               	movwf	4034,c	;volatile
 18511  0054EA  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18512  0054EE  3A10               	swapf	??_OpenADC,f,c
 18513  0054F0  0EF0               	movlw	240
 18514  0054F2  1610               	andwf	??_OpenADC,f,c
 18515  0054F4  0E30               	movlw	48
 18516  0054F6  1610               	andwf	??_OpenADC,f,c
 18517  0054F8  500F               	movf	OpenADC@portconfig,w,c
 18518  0054FA  0B0F               	andlw	15
 18519  0054FC  1010               	iorwf	??_OpenADC,w,c
 18520  0054FE  6EC1               	movwf	4033,c	;volatile
 18521  005500  C012  F010         	movff	OpenADC@config,??_OpenADC
 18522  005504  90D8               	bcf	status,0,c
 18523  005506  3610               	rlcf	??_OpenADC,f,c
 18524  005508  90D8               	bcf	status,0,c
 18525  00550A  3610               	rlcf	??_OpenADC,f,c
 18526  00550C  0E38               	movlw	56
 18527  00550E  1610               	andwf	??_OpenADC,f,c
 18528  005510  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18529  005514  3A11               	swapf	??_OpenADC+1,f,c
 18530  005516  0E0F               	movlw	15
 18531  005518  1611               	andwf	??_OpenADC+1,f,c
 18532  00551A  0E07               	movlw	7
 18533  00551C  1611               	andwf	??_OpenADC+1,f,c
 18534  00551E  5012               	movf	OpenADC@config,w,c
 18535  005520  0B80               	andlw	128
 18536  005522  1011               	iorwf	??_OpenADC+1,w,c
 18537  005524  1010               	iorwf	??_OpenADC,w,c
 18538  005526  6EC0               	movwf	4032,c	;volatile
 18539                           
 18540                           ; BSR set to: 1
 18541  005528  AE0E               	btfss	OpenADC@config2,7,c
 18542  00552A  D003               	goto	l1303
 18543                           
 18544                           ; BSR set to: 1
 18545  00552C  9C9E               	bcf	3998,6,c	;volatile
 18546  00552E  8C9D               	bsf	3997,6,c	;volatile
 18547  005530  8CF2               	bsf	intcon,6,c	;volatile
 18548  005532                     l1303:
 18549                           
 18550                           ; BSR set to: 1
 18551  005532  80C2               	bsf	4034,0,c	;volatile
 18552                           
 18553                           ; BSR set to: 1
 18554  005534  0012               	return	
 18555  005536                     __end_of_OpenADC:
 18556                           	opt stack 0
 18557                           tblptru	equ	0xFF8
 18558                           tblptrh	equ	0xFF7
 18559                           tblptrl	equ	0xFF6
 18560                           tablat	equ	0xFF5
 18561                           prodh	equ	0xFF4
 18562                           prodl	equ	0xFF3
 18563                           intcon	equ	0xFF2
 18564                           postinc0	equ	0xFEE
 18565                           wreg	equ	0xFE8
 18566                           indf1	equ	0xFE7
 18567                           postdec1	equ	0xFE5
 18568                           fsr1h	equ	0xFE2
 18569                           fsr1l	equ	0xFE1
 18570                           indf2	equ	0xFDF
 18571                           postinc2	equ	0xFDE
 18572                           postdec2	equ	0xFDD
 18573                           plusw2	equ	0xFDB
 18574                           fsr2h	equ	0xFDA
 18575                           fsr2l	equ	0xFD9
 18576                           status	equ	0xFD8
 18577                           
 18578 ;; *************** function _OpenTimer0 *****************
 18579 ;; Defined at:
 18580 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18581 ;; Parameters:    Size  Location     Type
 18582 ;;  config          1    wreg     unsigned char 
 18583 ;; Auto vars:     Size  Location     Type
 18584 ;;  config          1   13[COMRAM] unsigned char 
 18585 ;; Return value:  Size  Location     Type
 18586 ;;		None               void
 18587 ;; Registers used:
 18588 ;;		wreg, status,2, status,0
 18589 ;; Tracked objects:
 18590 ;;		On entry : F/1
 18591 ;;		On exit  : F/1
 18592 ;;		Unchanged: F/0
 18593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18594 ;;      Params:         0       0       0       0       0       0       0
 18595 ;;      Locals:         1       0       0       0       0       0       0
 18596 ;;      Temps:          0       0       0       0       0       0       0
 18597 ;;      Totals:         1       0       0       0       0       0       0
 18598 ;;Total ram usage:        1 bytes
 18599 ;; Hardware stack levels used:    1
 18600 ;; Hardware stack levels required when called:    2
 18601 ;; This function calls:
 18602 ;;		Nothing
 18603 ;; This function is called by:
 18604 ;;		_init
 18605 ;; This function uses a non-reentrant model
 18606 ;;
 18607                           
 18608                           	psect	text89
 18609  005C32                     __ptext89:
 18610                           	opt stack 0
 18611  005C32                     _OpenTimer0:
 18612                           	opt stack 27
 18613                           
 18614                           ; BSR set to: 1
 18615                           ;incstack = 0
 18616                           ;incstack = 0
 18617                           ;OpenTimer0@config stored from wreg
 18618  005C32  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18619                           
 18620                           ; BSR set to: 1
 18621  005C36  500E               	movf	OpenTimer0@config,w,c
 18622  005C38  0B7F               	andlw	127
 18623  005C3A  6ED5               	movwf	4053,c	;volatile
 18624                           
 18625                           ; BSR set to: 1
 18626  005C3C  6AD7               	clrf	4055,c	;volatile
 18627                           
 18628                           ; BSR set to: 1
 18629  005C3E  6AD6               	clrf	4054,c	;volatile
 18630                           
 18631                           ; BSR set to: 1
 18632  005C40  94F2               	bcf	intcon,2,c	;volatile
 18633                           
 18634                           ; BSR set to: 1
 18635  005C42  AE0E               	btfss	OpenTimer0@config,7,c
 18636  005C44  D002               	goto	l1317
 18637                           
 18638                           ; BSR set to: 1
 18639  005C46  8AF2               	bsf	intcon,5,c	;volatile
 18640  005C48  D001               	goto	l1318
 18641  005C4A                     l1317:
 18642                           
 18643                           ; BSR set to: 1
 18644  005C4A  9AF2               	bcf	intcon,5,c	;volatile
 18645  005C4C                     l1318:
 18646                           
 18647                           ; BSR set to: 1
 18648  005C4C  8ED5               	bsf	4053,7,c	;volatile
 18649                           
 18650                           ; BSR set to: 1
 18651  005C4E  0012               	return	
 18652  005C50                     __end_of_OpenTimer0:
 18653                           	opt stack 0
 18654                           tblptru	equ	0xFF8
 18655                           tblptrh	equ	0xFF7
 18656                           tblptrl	equ	0xFF6
 18657                           tablat	equ	0xFF5
 18658                           prodh	equ	0xFF4
 18659                           prodl	equ	0xFF3
 18660                           intcon	equ	0xFF2
 18661                           postinc0	equ	0xFEE
 18662                           wreg	equ	0xFE8
 18663                           indf1	equ	0xFE7
 18664                           postdec1	equ	0xFE5
 18665                           fsr1h	equ	0xFE2
 18666                           fsr1l	equ	0xFE1
 18667                           indf2	equ	0xFDF
 18668                           postinc2	equ	0xFDE
 18669                           postdec2	equ	0xFDD
 18670                           plusw2	equ	0xFDB
 18671                           fsr2h	equ	0xFDA
 18672                           fsr2l	equ	0xFD9
 18673                           status	equ	0xFD8
 18674                           
 18675 ;; *************** function _init_app_ram *****************
 18676 ;; Defined at:
 18677 ;;		line 987 in file "../main.c"
 18678 ;; Parameters:    Size  Location     Type
 18679 ;;		None
 18680 ;; Auto vars:     Size  Location     Type
 18681 ;;  i               1   32[COMRAM] unsigned char 
 18682 ;; Return value:  Size  Location     Type
 18683 ;;		None               void
 18684 ;; Registers used:
 18685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18686 ;; Tracked objects:
 18687 ;;		On entry : 0/0
 18688 ;;		On exit  : F/1
 18689 ;;		Unchanged: 0/0
 18690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18691 ;;      Params:         0       0       0       0       0       0       0
 18692 ;;      Locals:         1       0       0       0       0       0       0
 18693 ;;      Temps:          0       0       0       0       0       0       0
 18694 ;;      Totals:         1       0       0       0       0       0       0
 18695 ;;Total ram usage:        1 bytes
 18696 ;; Hardware stack levels used:    1
 18697 ;; Hardware stack levels required when called:    4
 18698 ;; This function calls:
 18699 ;;		_writeCoeffs2Ram
 18700 ;; This function is called by:
 18701 ;;		_init
 18702 ;;		_vscp_restoreDefaults
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           	psect	text90
 18707  0058D0                     __ptext90:
 18708                           	opt stack 0
 18709  0058D0                     _init_app_ram:
 18710                           	opt stack 23
 18711                           
 18712                           ;main.c: 988: char i;
 18713                           ;main.c: 990: measurement_clock = 0;
 18714                           
 18715                           ; BSR set to: 1
 18716                           ;incstack = 0
 18717                           ;incstack = 0
 18718  0058D0  0100               	movlb	0	; () banked
 18719  0058D2  6B72               	clrf	_measurement_clock& (0+255),b	;volatile
 18720  0058D4  6B73               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18721  0058D6  6B74               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18722  0058D8  6B75               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18723                           
 18724                           ;main.c: 991: seconds = 0;
 18725  0058DA  6B83               	clrf	_seconds& (0+255),b
 18726                           
 18727                           ;main.c: 994: for (i = 0; i < 6; i++) {
 18728  0058DC  6A21               	clrf	init_app_ram@i,c
 18729  0058DE                     l10532:
 18730                           
 18731                           ; BSR set to: 0
 18732                           ;main.c: 995: seconds_temp[i] = 0;
 18733  0058DE  5021               	movf	init_app_ram@i,w,c
 18734  0058E0  0F6C               	addlw	low _seconds_temp
 18735  0058E2  6ED9               	movwf	fsr2l,c
 18736  0058E4  6ADA               	clrf	fsr2h,c
 18737  0058E6  6ADF               	clrf	indf2,c
 18738                           
 18739                           ; BSR set to: 0
 18740                           ;main.c: 996: current_temp[i] = 0;
 18741  0058E8  5021               	movf	init_app_ram@i,w,c
 18742  0058EA  0D02               	mullw	2
 18743  0058EC  50F3               	movf	prodl,w,c
 18744  0058EE  0F60               	addlw	low _current_temp
 18745  0058F0  6ED9               	movwf	fsr2l,c
 18746  0058F2  6ADA               	clrf	fsr2h,c
 18747  0058F4  6ADE               	clrf	postinc2,c
 18748  0058F6  6ADD               	clrf	postdec2,c
 18749                           
 18750                           ; BSR set to: 0
 18751  0058F8  2A21               	incf	init_app_ram@i,f,c
 18752                           
 18753                           ; BSR set to: 0
 18754  0058FA  0E05               	movlw	5
 18755  0058FC  6421               	cpfsgt	init_app_ram@i,c
 18756  0058FE  D7EF               	goto	l10532
 18757                           
 18758                           ; BSR set to: 0
 18759                           ;main.c: 997: }
 18760                           ;main.c: 1000: adc_conversion_flags = 0;
 18761  005900  6B80               	clrf	_adc_conversion_flags& (0+255),b
 18762                           
 18763                           ;main.c: 1003: adc_series_counter = 0;
 18764  005902  6A49               	clrf	_adc_series_counter,c
 18765                           
 18766                           ;main.c: 1006: low_alarm = 0;
 18767  005904  6B82               	clrf	_low_alarm& (0+255),b
 18768                           
 18769                           ;main.c: 1009: high_alarm = 0;
 18770  005906  6B81               	clrf	_high_alarm& (0+255),b
 18771                           
 18772                           ; BSR set to: 0
 18773                           ;main.c: 1012: writeCoeffs2Ram();
 18774  005908  EF13  F028         	goto	_writeCoeffs2Ram	;wreg free
 18775  00590C                     __end_of_init_app_ram:
 18776                           	opt stack 0
 18777                           tblptru	equ	0xFF8
 18778                           tblptrh	equ	0xFF7
 18779                           tblptrl	equ	0xFF6
 18780                           tablat	equ	0xFF5
 18781                           prodh	equ	0xFF4
 18782                           prodl	equ	0xFF3
 18783                           intcon	equ	0xFF2
 18784                           postinc0	equ	0xFEE
 18785                           wreg	equ	0xFE8
 18786                           indf1	equ	0xFE7
 18787                           postdec1	equ	0xFE5
 18788                           fsr1h	equ	0xFE2
 18789                           fsr1l	equ	0xFE1
 18790                           indf2	equ	0xFDF
 18791                           postinc2	equ	0xFDE
 18792                           postdec2	equ	0xFDD
 18793                           plusw2	equ	0xFDB
 18794                           fsr2h	equ	0xFDA
 18795                           fsr2l	equ	0xFD9
 18796                           status	equ	0xFD8
 18797                           
 18798 ;; *************** function _writeCoeffs2Ram *****************
 18799 ;; Defined at:
 18800 ;;		line 969 in file "../main.c"
 18801 ;; Parameters:    Size  Location     Type
 18802 ;;		None
 18803 ;; Auto vars:     Size  Location     Type
 18804 ;;  c               3   25[COMRAM] unsigned char [3]
 18805 ;;  j               2   30[COMRAM] int 
 18806 ;;  i               2   28[COMRAM] int 
 18807 ;; Return value:  Size  Location     Type
 18808 ;;		None               void
 18809 ;; Registers used:
 18810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18811 ;; Tracked objects:
 18812 ;;		On entry : 0/0
 18813 ;;		On exit  : F/1
 18814 ;;		Unchanged: 0/0
 18815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18816 ;;      Params:         0       0       0       0       0       0       0
 18817 ;;      Locals:         7       0       0       0       0       0       0
 18818 ;;      Temps:          2       0       0       0       0       0       0
 18819 ;;      Totals:         9       0       0       0       0       0       0
 18820 ;;Total ram usage:        9 bytes
 18821 ;; Hardware stack levels used:    1
 18822 ;; Hardware stack levels required when called:    3
 18823 ;; This function calls:
 18824 ;;		_readEEPROM
 18825 ;;		___wmul
 18826 ;; This function is called by:
 18827 ;;		_init_app_ram
 18828 ;;		_vscp_writeAppReg
 18829 ;; This function uses a non-reentrant model
 18830 ;;
 18831                           
 18832                           	psect	text91
 18833  005026                     __ptext91:
 18834                           	opt stack 0
 18835  005026                     _writeCoeffs2Ram:
 18836                           	opt stack 23
 18837                           
 18838                           ;main.c: 970: int i, j;
 18839                           ;main.c: 971: uint8_t c[3];
 18840                           ;main.c: 973: for (i = 0; i < 6; i++) {
 18841                           
 18842                           ; BSR set to: 1
 18843                           ;incstack = 0
 18844                           ;incstack = 0
 18845  005026  6A1D               	clrf	writeCoeffs2Ram@i,c
 18846  005028  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 18847  00502A                     l10548:
 18848                           
 18849                           ;main.c: 974: for (j = 2; j > 0; j--) {
 18850  00502A  6A20               	clrf	writeCoeffs2Ram@j+1,c
 18851  00502C  0E02               	movlw	2
 18852  00502E  6E1F               	movwf	writeCoeffs2Ram@j,c
 18853  005030                     l10554:
 18854                           
 18855                           ;main.c: 976: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 18856  005030  501F               	movf	writeCoeffs2Ram@j,w,c
 18857  005032  0802               	sublw	2
 18858  005034  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 18859  005036  5018               	movf	??_writeCoeffs2Ram,w,c
 18860  005038  0F1A               	addlw	low writeCoeffs2Ram@c
 18861  00503A  6ED9               	movwf	fsr2l,c
 18862  00503C  6ADA               	clrf	fsr2h,c
 18863  00503E  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 18864  005042  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 18865  005046  6A15               	clrf	?___wmul+3,c
 18866  005048  0E03               	movlw	3
 18867  00504A  6E14               	movwf	?___wmul+2,c
 18868  00504C  ECA3  F02C         	call	___wmul	;wreg free
 18869  005050  501F               	movf	writeCoeffs2Ram@j,w,c
 18870  005052  2612               	addwf	?___wmul,f,c
 18871  005054  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18872  005056  2213               	addwfc	?___wmul+1,f,c
 18873  005058  0EAA               	movlw	170
 18874  00505A  2412               	addwf	?___wmul,w,c
 18875  00505C  6E0E               	movwf	?_readEEPROM,c
 18876  00505E  0E00               	movlw	0
 18877  005060  2013               	addwfc	?___wmul+1,w,c
 18878  005062  6E0F               	movwf	?_readEEPROM+1,c
 18879  005064  EC9C  F02E         	call	_readEEPROM	;wreg free
 18880  005068  6EDF               	movwf	indf2,c
 18881  00506A  061F               	decf	writeCoeffs2Ram@j,f,c
 18882  00506C  A0D8               	btfss	status,0,c
 18883  00506E  0620               	decf	writeCoeffs2Ram@j+1,f,c
 18884  005070  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18885  005072  0A80               	xorlw	128
 18886  005074  0F80               	addlw	-128
 18887  005076  0E01               	movlw	1
 18888  005078  B4D8               	btfsc	status,2,c
 18889  00507A  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 18890  00507C  E2D9               	bc	l10554
 18891                           
 18892                           ;main.c: 977: }
 18893                           ;main.c: 978: sh_coefficients[i] = *((double*) c);
 18894  00507E  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 18895  005082  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 18896  005086  90D8               	bcf	status,0,c
 18897  005088  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18898  00508A  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18899  00508C  90D8               	bcf	status,0,c
 18900  00508E  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18901  005090  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18902  005092  0101               	movlb	1	; () banked
 18903  005094  0E00               	movlw	low _sh_coefficients
 18904  005096  2418               	addwf	??_writeCoeffs2Ram,w,c
 18905  005098  6ED9               	movwf	fsr2l,c
 18906  00509A  0E01               	movlw	high _sh_coefficients
 18907  00509C  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 18908  00509E  6EDA               	movwf	fsr2h,c
 18909  0050A0  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 18910  0050A4  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 18911  0050A8  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 18912  0050AC  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 18913                           
 18914                           ; BSR set to: 1
 18915  0050B0  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 18916  0050B2  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 18917                           
 18918                           ; BSR set to: 1
 18919  0050B4  501E               	movf	writeCoeffs2Ram@i+1,w,c
 18920  0050B6  0A80               	xorlw	128
 18921  0050B8  0F80               	addlw	-128
 18922  0050BA  0E06               	movlw	6
 18923  0050BC  B4D8               	btfsc	status,2,c
 18924  0050BE  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 18925  0050C0  B0D8               	btfsc	status,0,c
 18926                           
 18927                           ; BSR set to: 1
 18928  0050C2  0012               	return	
 18929  0050C4  D7B2               	goto	l10548
 18930  0050C6                     __end_of_writeCoeffs2Ram:
 18931                           	opt stack 0
 18932                           tblptru	equ	0xFF8
 18933                           tblptrh	equ	0xFF7
 18934                           tblptrl	equ	0xFF6
 18935                           tablat	equ	0xFF5
 18936                           prodh	equ	0xFF4
 18937                           prodl	equ	0xFF3
 18938                           intcon	equ	0xFF2
 18939                           postinc0	equ	0xFEE
 18940                           wreg	equ	0xFE8
 18941                           indf1	equ	0xFE7
 18942                           postdec1	equ	0xFE5
 18943                           fsr1h	equ	0xFE2
 18944                           fsr1l	equ	0xFE1
 18945                           indf2	equ	0xFDF
 18946                           postinc2	equ	0xFDE
 18947                           postdec2	equ	0xFDD
 18948                           plusw2	equ	0xFDB
 18949                           fsr2h	equ	0xFDA
 18950                           fsr2l	equ	0xFD9
 18951                           status	equ	0xFD8
 18952                           
 18953 ;; *************** function ___wmul *****************
 18954 ;; Defined at:
 18955 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 18956 ;; Parameters:    Size  Location     Type
 18957 ;;  multiplier      2   17[COMRAM] unsigned int 
 18958 ;;  multiplicand    2   19[COMRAM] unsigned int 
 18959 ;; Auto vars:     Size  Location     Type
 18960 ;;  product         2   21[COMRAM] unsigned int 
 18961 ;; Return value:  Size  Location     Type
 18962 ;;                  2   17[COMRAM] unsigned int 
 18963 ;; Registers used:
 18964 ;;		wreg, status,2, status,0, prodl, prodh
 18965 ;; Tracked objects:
 18966 ;;		On entry : 0/1
 18967 ;;		On exit  : 0/0
 18968 ;;		Unchanged: 0/0
 18969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18970 ;;      Params:         4       0       0       0       0       0       0
 18971 ;;      Locals:         2       0       0       0       0       0       0
 18972 ;;      Temps:          0       0       0       0       0       0       0
 18973 ;;      Totals:         6       0       0       0       0       0       0
 18974 ;;Total ram usage:        6 bytes
 18975 ;; Hardware stack levels used:    1
 18976 ;; Hardware stack levels required when called:    2
 18977 ;; This function calls:
 18978 ;;		Nothing
 18979 ;; This function is called by:
 18980 ;;		_doWork
 18981 ;;		_writeCoeffs2Ram
 18982 ;; This function uses a non-reentrant model
 18983 ;;
 18984                           
 18985                           	psect	text92
 18986  005946                     __ptext92:
 18987                           	opt stack 0
 18988  005946                     ___wmul:
 18989                           	opt stack 27
 18990                           
 18991                           ; BSR set to: 1
 18992                           ;incstack = 0
 18993                           ;incstack = 0
 18994  005946  5012               	movf	___wmul@multiplier,w,c
 18995  005948  0214               	mulwf	___wmul@multiplicand,c
 18996  00594A  CFF3 F016          	movff	prodl,___wmul@product
 18997  00594E  CFF4 F017          	movff	prodh,___wmul@product+1
 18998  005952  5012               	movf	___wmul@multiplier,w,c
 18999  005954  0215               	mulwf	___wmul@multiplicand+1,c
 19000  005956  CFF3 FFF4          	movff	prodl,prodh
 19001  00595A  6AF3               	clrf	prodl,c
 19002  00595C  50F3               	movf	prodl,w,c
 19003  00595E  2616               	addwf	___wmul@product,f,c
 19004  005960  50F4               	movf	prodh,w,c
 19005  005962  2217               	addwfc	___wmul@product+1,f,c
 19006  005964  5013               	movf	___wmul@multiplier+1,w,c
 19007  005966  0214               	mulwf	___wmul@multiplicand,c
 19008  005968  CFF3 FFF4          	movff	prodl,prodh
 19009  00596C  6AF3               	clrf	prodl,c
 19010  00596E  50F3               	movf	prodl,w,c
 19011  005970  2616               	addwf	___wmul@product,f,c
 19012  005972  50F4               	movf	prodh,w,c
 19013  005974  2217               	addwfc	___wmul@product+1,f,c
 19014  005976  C016  F012         	movff	___wmul@product,?___wmul
 19015  00597A  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19016  00597E  0012               	return	
 19017  005980                     __end_of___wmul:
 19018                           	opt stack 0
 19019                           tblptru	equ	0xFF8
 19020                           tblptrh	equ	0xFF7
 19021                           tblptrl	equ	0xFF6
 19022                           tablat	equ	0xFF5
 19023                           prodh	equ	0xFF4
 19024                           prodl	equ	0xFF3
 19025                           intcon	equ	0xFF2
 19026                           postinc0	equ	0xFEE
 19027                           wreg	equ	0xFE8
 19028                           indf1	equ	0xFE7
 19029                           postdec1	equ	0xFE5
 19030                           fsr1h	equ	0xFE2
 19031                           fsr1l	equ	0xFE1
 19032                           indf2	equ	0xFDF
 19033                           postinc2	equ	0xFDE
 19034                           postdec2	equ	0xFDD
 19035                           plusw2	equ	0xFDB
 19036                           fsr2h	equ	0xFDA
 19037                           fsr2l	equ	0xFD9
 19038                           status	equ	0xFD8
 19039                           
 19040 ;; *************** function _ConvertADC *****************
 19041 ;; Defined at:
 19042 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19043 ;; Parameters:    Size  Location     Type
 19044 ;;		None
 19045 ;; Auto vars:     Size  Location     Type
 19046 ;;		None
 19047 ;; Return value:  Size  Location     Type
 19048 ;;		None               void
 19049 ;; Registers used:
 19050 ;;		None
 19051 ;; Tracked objects:
 19052 ;;		On entry : 1/1
 19053 ;;		On exit  : 1/1
 19054 ;;		Unchanged: 1/0
 19055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19056 ;;      Params:         0       0       0       0       0       0       0
 19057 ;;      Locals:         0       0       0       0       0       0       0
 19058 ;;      Temps:          0       0       0       0       0       0       0
 19059 ;;      Totals:         0       0       0       0       0       0       0
 19060 ;;Total ram usage:        0 bytes
 19061 ;; Hardware stack levels used:    1
 19062 ;; Hardware stack levels required when called:    2
 19063 ;; This function calls:
 19064 ;;		Nothing
 19065 ;; This function is called by:
 19066 ;;		_init
 19067 ;; This function uses a non-reentrant model
 19068 ;;
 19069                           
 19070                           	psect	text93
 19071  005DEE                     __ptext93:
 19072                           	opt stack 0
 19073  005DEE                     _ConvertADC:
 19074                           	opt stack 27
 19075                           
 19076                           ;incstack = 0
 19077                           ;incstack = 0
 19078  005DEE  82C2               	bsf	4034,1,c	;volatile
 19079  005DF0  0012               	return	
 19080  005DF2                     __end_of_ConvertADC:
 19081                           	opt stack 0
 19082                           tblptru	equ	0xFF8
 19083                           tblptrh	equ	0xFF7
 19084                           tblptrl	equ	0xFF6
 19085                           tablat	equ	0xFF5
 19086                           prodh	equ	0xFF4
 19087                           prodl	equ	0xFF3
 19088                           intcon	equ	0xFF2
 19089                           postinc0	equ	0xFEE
 19090                           wreg	equ	0xFE8
 19091                           indf1	equ	0xFE7
 19092                           postdec1	equ	0xFE5
 19093                           fsr1h	equ	0xFE2
 19094                           fsr1l	equ	0xFE1
 19095                           indf2	equ	0xFDF
 19096                           postinc2	equ	0xFDE
 19097                           postdec2	equ	0xFDD
 19098                           plusw2	equ	0xFDB
 19099                           fsr2h	equ	0xFDA
 19100                           fsr2l	equ	0xFD9
 19101                           status	equ	0xFD8
 19102                           
 19103 ;; *************** function _WriteTimer0 *****************
 19104 ;; Defined at:
 19105 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19106 ;; Parameters:    Size  Location     Type
 19107 ;;  timer0          2   13[COMRAM] unsigned int 
 19108 ;; Auto vars:     Size  Location     Type
 19109 ;;  timer           2   15[COMRAM] struct Timers
 19110 ;; Return value:  Size  Location     Type
 19111 ;;		None               void
 19112 ;; Registers used:
 19113 ;;		None
 19114 ;; Tracked objects:
 19115 ;;		On entry : F/1
 19116 ;;		On exit  : F/1
 19117 ;;		Unchanged: F/0
 19118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19119 ;;      Params:         2       0       0       0       0       0       0
 19120 ;;      Locals:         2       0       0       0       0       0       0
 19121 ;;      Temps:          0       0       0       0       0       0       0
 19122 ;;      Totals:         4       0       0       0       0       0       0
 19123 ;;Total ram usage:        4 bytes
 19124 ;; Hardware stack levels used:    1
 19125 ;; Hardware stack levels required when called:    2
 19126 ;; This function calls:
 19127 ;;		Nothing
 19128 ;; This function is called by:
 19129 ;;		_init
 19130 ;; This function uses a non-reentrant model
 19131 ;;
 19132                           
 19133                           	psect	text94
 19134  005D82                     __ptext94:
 19135                           	opt stack 0
 19136  005D82                     _WriteTimer0:
 19137                           	opt stack 27
 19138                           
 19139                           ; BSR set to: 1
 19140                           
 19141                           ;incstack = 0
 19142                           ;incstack = 0
 19143  005D82  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19144  005D86  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19145  005D8A  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19146  005D8E  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19147                           
 19148                           ; BSR set to: 1
 19149  005D92  0012               	return	
 19150  005D94                     __end_of_WriteTimer0:
 19151                           	opt stack 0
 19152                           tblptru	equ	0xFF8
 19153                           tblptrh	equ	0xFF7
 19154                           tblptrl	equ	0xFF6
 19155                           tablat	equ	0xFF5
 19156                           prodh	equ	0xFF4
 19157                           prodl	equ	0xFF3
 19158                           intcon	equ	0xFF2
 19159                           postinc0	equ	0xFEE
 19160                           wreg	equ	0xFE8
 19161                           indf1	equ	0xFE7
 19162                           postdec1	equ	0xFE5
 19163                           fsr1h	equ	0xFE2
 19164                           fsr1l	equ	0xFE1
 19165                           indf2	equ	0xFDF
 19166                           postinc2	equ	0xFDE
 19167                           postdec2	equ	0xFDD
 19168                           plusw2	equ	0xFDB
 19169                           fsr2h	equ	0xFDA
 19170                           fsr2l	equ	0xFD9
 19171                           status	equ	0xFD8
 19172                           
 19173 ;; *************** function ___awtofl *****************
 19174 ;; Defined at:
 19175 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19176 ;; Parameters:    Size  Location     Type
 19177 ;;  c               2   23[COMRAM] int 
 19178 ;; Auto vars:     Size  Location     Type
 19179 ;;  f1              4    0        int 
 19180 ;;  sign            1   28[COMRAM] unsigned char 
 19181 ;; Return value:  Size  Location     Type
 19182 ;;                  4   23[COMRAM] unsigned char 
 19183 ;; Registers used:
 19184 ;;		wreg, status,2, status,0, cstack
 19185 ;; Tracked objects:
 19186 ;;		On entry : 0/0
 19187 ;;		On exit  : 0/0
 19188 ;;		Unchanged: 0/0
 19189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19190 ;;      Params:         4       0       0       0       0       0       0
 19191 ;;      Locals:         2       0       0       0       0       0       0
 19192 ;;      Temps:          0       0       0       0       0       0       0
 19193 ;;      Totals:         6       0       0       0       0       0       0
 19194 ;;Total ram usage:        6 bytes
 19195 ;; Hardware stack levels used:    1
 19196 ;; Hardware stack levels required when called:    3
 19197 ;; This function calls:
 19198 ;;		___flpack
 19199 ;; This function is called by:
 19200 ;;		_setEventData
 19201 ;;		_exp
 19202 ;;		_log
 19203 ;; This function uses a non-reentrant model
 19204 ;;
 19205                           
 19206                           	psect	text95
 19207  005980                     __ptext95:
 19208                           	opt stack 0
 19209  005980                     ___awtofl:
 19210                           	opt stack 25
 19211                           
 19212                           ; BSR set to: 1
 19213                           ;incstack = 0
 19214                           ;incstack = 0
 19215  005980  6A1D               	clrf	___awtofl@sign,c
 19216  005982  AE19               	btfss	___awtofl@c+1,7,c
 19217  005984  D005               	goto	l14366
 19218  005986  6C18               	negf	___awtofl@c,c
 19219  005988  1E19               	comf	___awtofl@c+1,f,c
 19220  00598A  B0D8               	btfsc	status,0,c
 19221  00598C  2A19               	incf	___awtofl@c+1,f,c
 19222  00598E  2A1D               	incf	___awtofl@sign,f,c
 19223  005990                     l14366:
 19224  005990  C018  F00E         	movff	___awtofl@c,?___flpack
 19225  005994  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19226  005998  6A10               	clrf	?___flpack+2,c
 19227  00599A  6A11               	clrf	?___flpack+3,c
 19228  00599C  0E96               	movlw	150
 19229  00599E  6E12               	movwf	?___flpack+4,c
 19230  0059A0  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 19231  0059A4  EC3C  F025         	call	___flpack	;wreg free
 19232  0059A8  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19233  0059AC  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19234  0059B0  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19235  0059B4  C00E  F018         	movff	?___flpack,?___awtofl
 19236  0059B8  0012               	return	
 19237  0059BA                     __end_of___awtofl:
 19238                           	opt stack 0
 19239                           tblptru	equ	0xFF8
 19240                           tblptrh	equ	0xFF7
 19241                           tblptrl	equ	0xFF6
 19242                           tablat	equ	0xFF5
 19243                           prodh	equ	0xFF4
 19244                           prodl	equ	0xFF3
 19245                           intcon	equ	0xFF2
 19246                           postinc0	equ	0xFEE
 19247                           wreg	equ	0xFE8
 19248                           indf1	equ	0xFE7
 19249                           postdec1	equ	0xFE5
 19250                           fsr1h	equ	0xFE2
 19251                           fsr1l	equ	0xFE1
 19252                           indf2	equ	0xFDF
 19253                           postinc2	equ	0xFDE
 19254                           postdec2	equ	0xFDD
 19255                           plusw2	equ	0xFDB
 19256                           fsr2h	equ	0xFDA
 19257                           fsr2l	equ	0xFD9
 19258                           status	equ	0xFD8
 19259                           
 19260 ;; *************** function ___flmul *****************
 19261 ;; Defined at:
 19262 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19263 ;; Parameters:    Size  Location     Type
 19264 ;;  f1              4   29[COMRAM] unsigned char 
 19265 ;;  f2              4   33[COMRAM] unsigned char 
 19266 ;; Auto vars:     Size  Location     Type
 19267 ;;  f3_as_produc    4   45[COMRAM] unsigned long 
 19268 ;;  sign            1   50[COMRAM] unsigned char 
 19269 ;;  cntr            1   49[COMRAM] unsigned char 
 19270 ;;  exp             1   44[COMRAM] unsigned char 
 19271 ;; Return value:  Size  Location     Type
 19272 ;;                  4   29[COMRAM] unsigned char 
 19273 ;; Registers used:
 19274 ;;		wreg, status,2, status,0, cstack
 19275 ;; Tracked objects:
 19276 ;;		On entry : 0/1
 19277 ;;		On exit  : 0/0
 19278 ;;		Unchanged: 0/0
 19279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19280 ;;      Params:         8       0       0       0       0       0       0
 19281 ;;      Locals:        14       0       0       0       0       0       0
 19282 ;;      Temps:          0       0       0       0       0       0       0
 19283 ;;      Totals:        22       0       0       0       0       0       0
 19284 ;;Total ram usage:       22 bytes
 19285 ;; Hardware stack levels used:    1
 19286 ;; Hardware stack levels required when called:    3
 19287 ;; This function calls:
 19288 ;;		___flpack
 19289 ;; This function is called by:
 19290 ;;		_doWork
 19291 ;;		_Celsius2Fahrenheit
 19292 ;;		___asflmul
 19293 ;;		_log
 19294 ;;		_eval_poly
 19295 ;; This function uses a non-reentrant model
 19296 ;;
 19297                           
 19298                           	psect	text96
 19299  0049A8                     __ptext96:
 19300                           	opt stack 0
 19301  0049A8                     ___flmul:
 19302                           	opt stack 26
 19303                           
 19304                           ;incstack = 0
 19305                           ;incstack = 0
 19306  0049A8  3420               	rlcf	(___flmul@f1+2)& (0+255),w,c
 19307  0049AA  3421               	rlcf	(___flmul@f1+3)& (0+255),w,c
 19308  0049AC  6E2D               	movwf	___flmul@exp,c
 19309  0049AE  662D               	tstfsz	___flmul@exp& (0+255),c
 19310  0049B0  D001               	goto	l14310
 19311  0049B2  D005               	goto	u13770
 19312  0049B4                     l14310:
 19313  0049B4  3424               	rlcf	(___flmul@f2+2)& (0+255),w,c
 19314  0049B6  3425               	rlcf	(___flmul@f2+3)& (0+255),w,c
 19315  0049B8  6E33               	movwf	___flmul@sign,c
 19316  0049BA  6633               	tstfsz	___flmul@sign& (0+255),c
 19317  0049BC  D005               	goto	l14314
 19318  0049BE                     u13770:
 19319  0049BE  6A1E               	clrf	?___flmul,c
 19320  0049C0  6A1F               	clrf	?___flmul+1,c
 19321  0049C2  6A20               	clrf	?___flmul+2,c
 19322  0049C4  6A21               	clrf	?___flmul+3,c
 19323  0049C6  D057               	goto	l1622
 19324  0049C8                     l14314:
 19325  0049C8  5033               	movf	___flmul@sign,w,c
 19326  0049CA  0F7B               	addlw	123
 19327  0049CC  262D               	addwf	___flmul@exp,f,c
 19328  0049CE  C021  F033         	movff	___flmul@f1+3,___flmul@sign
 19329  0049D2  5025               	movf	(___flmul@f2+3)& (0+255),w,c
 19330  0049D4  1A33               	xorwf	___flmul@sign,f,c
 19331  0049D6  0E80               	movlw	128
 19332  0049D8  1633               	andwf	___flmul@sign,f,c
 19333  0049DA  8E20               	bsf	___flmul@f1+2,7,c
 19334  0049DC  8E24               	bsf	___flmul@f2+2,7,c
 19335  0049DE  0E00               	movlw	0
 19336  0049E0  1625               	andwf	___flmul@f2+3,f,c
 19337  0049E2  6A2E               	clrf	___flmul@f3_as_product,c
 19338  0049E4  6A2F               	clrf	___flmul@f3_as_product+1,c
 19339  0049E6  6A30               	clrf	___flmul@f3_as_product+2,c
 19340  0049E8  6A31               	clrf	___flmul@f3_as_product+3,c
 19341  0049EA  0E07               	movlw	7
 19342  0049EC  6E32               	movwf	___flmul@cntr,c
 19343  0049EE                     l14326:
 19344  0049EE  A01E               	btfss	___flmul@f1,0,c
 19345  0049F0  D008               	goto	l14330
 19346  0049F2  5022               	movf	___flmul@f2,w,c
 19347  0049F4  262E               	addwf	___flmul@f3_as_product,f,c
 19348  0049F6  5023               	movf	___flmul@f2+1,w,c
 19349  0049F8  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19350  0049FA  5024               	movf	___flmul@f2+2,w,c
 19351  0049FC  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19352  0049FE  5025               	movf	___flmul@f2+3,w,c
 19353  004A00  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19354  004A02                     l14330:
 19355  004A02  90D8               	bcf	status,0,c
 19356  004A04  3221               	rrcf	___flmul@f1+3,f,c
 19357  004A06  3220               	rrcf	___flmul@f1+2,f,c
 19358  004A08  321F               	rrcf	___flmul@f1+1,f,c
 19359  004A0A  321E               	rrcf	___flmul@f1,f,c
 19360  004A0C  90D8               	bcf	status,0,c
 19361  004A0E  3622               	rlcf	___flmul@f2,f,c
 19362  004A10  3623               	rlcf	___flmul@f2+1,f,c
 19363  004A12  3624               	rlcf	___flmul@f2+2,f,c
 19364  004A14  3625               	rlcf	___flmul@f2+3,f,c
 19365  004A16  2E32               	decfsz	___flmul@cntr,f,c
 19366  004A18  D7EA               	goto	l14326
 19367  004A1A  0E11               	movlw	17
 19368  004A1C  6E32               	movwf	___flmul@cntr,c
 19369  004A1E                     l14338:
 19370  004A1E  A01E               	btfss	___flmul@f1,0,c
 19371  004A20  D008               	goto	l14342
 19372  004A22  5022               	movf	___flmul@f2,w,c
 19373  004A24  262E               	addwf	___flmul@f3_as_product,f,c
 19374  004A26  5023               	movf	___flmul@f2+1,w,c
 19375  004A28  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19376  004A2A  5024               	movf	___flmul@f2+2,w,c
 19377  004A2C  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19378  004A2E  5025               	movf	___flmul@f2+3,w,c
 19379  004A30  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19380  004A32                     l14342:
 19381  004A32  90D8               	bcf	status,0,c
 19382  004A34  3221               	rrcf	___flmul@f1+3,f,c
 19383  004A36  3220               	rrcf	___flmul@f1+2,f,c
 19384  004A38  321F               	rrcf	___flmul@f1+1,f,c
 19385  004A3A  321E               	rrcf	___flmul@f1,f,c
 19386  004A3C  90D8               	bcf	status,0,c
 19387  004A3E  3231               	rrcf	___flmul@f3_as_product+3,f,c
 19388  004A40  3230               	rrcf	___flmul@f3_as_product+2,f,c
 19389  004A42  322F               	rrcf	___flmul@f3_as_product+1,f,c
 19390  004A44  322E               	rrcf	___flmul@f3_as_product,f,c
 19391  004A46  2E32               	decfsz	___flmul@cntr,f,c
 19392  004A48  D7EA               	goto	l14338
 19393  004A4A  C02E  F00E         	movff	___flmul@f3_as_product,?___flpack
 19394  004A4E  C02F  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19395  004A52  C030  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19396  004A56  C031  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19397  004A5A  C02D  F012         	movff	___flmul@exp,?___flpack+4
 19398  004A5E  C033  F013         	movff	___flmul@sign,?___flpack+5
 19399  004A62  EC3C  F025         	call	___flpack	;wreg free
 19400  004A66  C011  F021         	movff	?___flpack+3,?___flmul+3
 19401  004A6A  C010  F020         	movff	?___flpack+2,?___flmul+2
 19402  004A6E  C00F  F01F         	movff	?___flpack+1,?___flmul+1
 19403  004A72  C00E  F01E         	movff	?___flpack,?___flmul
 19404  004A76                     l1622:
 19405  004A76  0012               	return	
 19406  004A78                     __end_of___flmul:
 19407                           	opt stack 0
 19408                           tblptru	equ	0xFF8
 19409                           tblptrh	equ	0xFF7
 19410                           tblptrl	equ	0xFF6
 19411                           tablat	equ	0xFF5
 19412                           prodh	equ	0xFF4
 19413                           prodl	equ	0xFF3
 19414                           intcon	equ	0xFF2
 19415                           postinc0	equ	0xFEE
 19416                           wreg	equ	0xFE8
 19417                           indf1	equ	0xFE7
 19418                           postdec1	equ	0xFE5
 19419                           fsr1h	equ	0xFE2
 19420                           fsr1l	equ	0xFE1
 19421                           indf2	equ	0xFDF
 19422                           postinc2	equ	0xFDE
 19423                           postdec2	equ	0xFDD
 19424                           plusw2	equ	0xFDB
 19425                           fsr2h	equ	0xFDA
 19426                           fsr2l	equ	0xFD9
 19427                           status	equ	0xFD8
 19428                           
 19429 ;; *************** function ___flpack *****************
 19430 ;; Defined at:
 19431 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19432 ;; Parameters:    Size  Location     Type
 19433 ;;  arg             4   13[COMRAM] unsigned long 
 19434 ;;  exp             1   17[COMRAM] unsigned char 
 19435 ;;  sign            1   18[COMRAM] unsigned char 
 19436 ;; Auto vars:     Size  Location     Type
 19437 ;;		None
 19438 ;; Return value:  Size  Location     Type
 19439 ;;                  4   13[COMRAM] unsigned char 
 19440 ;; Registers used:
 19441 ;;		wreg, status,2, status,0
 19442 ;; Tracked objects:
 19443 ;;		On entry : 0/0
 19444 ;;		On exit  : 0/0
 19445 ;;		Unchanged: 0/0
 19446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19447 ;;      Params:         6       0       0       0       0       0       0
 19448 ;;      Locals:         0       0       0       0       0       0       0
 19449 ;;      Temps:          4       0       0       0       0       0       0
 19450 ;;      Totals:        10       0       0       0       0       0       0
 19451 ;;Total ram usage:       10 bytes
 19452 ;; Hardware stack levels used:    1
 19453 ;; Hardware stack levels required when called:    2
 19454 ;; This function calls:
 19455 ;;		Nothing
 19456 ;; This function is called by:
 19457 ;;		___altofl
 19458 ;;		___awtofl
 19459 ;;		___fladd
 19460 ;;		___fldiv
 19461 ;;		___flmul
 19462 ;;		___lwtofl
 19463 ;; This function uses a non-reentrant model
 19464 ;;
 19465                           
 19466                           	psect	text97
 19467  004A78                     __ptext97:
 19468                           	opt stack 0
 19469  004A78                     ___flpack:
 19470                           	opt stack 26
 19471                           
 19472                           ;incstack = 0
 19473                           ;incstack = 0
 19474  004A78  5012               	movf	___flpack@exp,w,c
 19475  004A7A  E005               	bz	l1537
 19476  004A7C  5011               	movf	___flpack@arg+3,w,c
 19477  004A7E  100E               	iorwf	___flpack@arg,w,c
 19478  004A80  100F               	iorwf	___flpack@arg+1,w,c
 19479  004A82  1010               	iorwf	___flpack@arg+2,w,c
 19480  004A84  E10B               	bnz	l14158
 19481  004A86                     l1537:
 19482  004A86  6A0E               	clrf	?___flpack,c
 19483  004A88  6A0F               	clrf	?___flpack+1,c
 19484  004A8A  6A10               	clrf	?___flpack+2,c
 19485  004A8C  6A11               	clrf	?___flpack+3,c
 19486  004A8E  D053               	goto	l1538
 19487  004A90                     l14156:
 19488  004A90  2A12               	incf	___flpack@exp,f,c
 19489  004A92  90D8               	bcf	status,0,c
 19490  004A94  3211               	rrcf	___flpack@arg+3,f,c
 19491  004A96  3210               	rrcf	___flpack@arg+2,f,c
 19492  004A98  320F               	rrcf	___flpack@arg+1,f,c
 19493  004A9A  320E               	rrcf	___flpack@arg,f,c
 19494  004A9C                     l14158:
 19495  004A9C  6A14               	clrf	??___flpack& (0+255),c
 19496  004A9E  6A15               	clrf	(??___flpack+1)& (0+255),c
 19497  004AA0  6A16               	clrf	(??___flpack+2)& (0+255),c
 19498  004AA2  0EFE               	movlw	254
 19499  004AA4  1411               	andwf	___flpack@arg+3,w,c
 19500  004AA6  6E17               	movwf	(??___flpack+3)& (0+255),c
 19501  004AA8  5017               	movf	??___flpack+3,w,c
 19502  004AAA  1014               	iorwf	??___flpack,w,c
 19503  004AAC  1015               	iorwf	??___flpack+1,w,c
 19504  004AAE  1016               	iorwf	??___flpack+2,w,c
 19505  004AB0  E00C               	bz	l1542
 19506  004AB2  D7EE               	goto	l14156
 19507  004AB4                     l14160:
 19508  004AB4  2A12               	incf	___flpack@exp,f,c
 19509  004AB6  2A0E               	incf	___flpack@arg,f,c
 19510  004AB8  0E00               	movlw	0
 19511  004ABA  220F               	addwfc	___flpack@arg+1,f,c
 19512  004ABC  2210               	addwfc	___flpack@arg+2,f,c
 19513  004ABE  2211               	addwfc	___flpack@arg+3,f,c
 19514  004AC0  90D8               	bcf	status,0,c
 19515  004AC2  3211               	rrcf	___flpack@arg+3,f,c
 19516  004AC4  3210               	rrcf	___flpack@arg+2,f,c
 19517  004AC6  320F               	rrcf	___flpack@arg+1,f,c
 19518  004AC8  320E               	rrcf	___flpack@arg,f,c
 19519  004ACA                     l1542:
 19520  004ACA  6A14               	clrf	??___flpack& (0+255),c
 19521  004ACC  6A15               	clrf	(??___flpack+1)& (0+255),c
 19522  004ACE  6A16               	clrf	(??___flpack+2)& (0+255),c
 19523  004AD0  5011               	movf	___flpack@arg+3,w,c
 19524  004AD2  6E17               	movwf	(??___flpack+3)& (0+255),c
 19525  004AD4  5017               	movf	??___flpack+3,w,c
 19526  004AD6  1014               	iorwf	??___flpack,w,c
 19527  004AD8  1015               	iorwf	??___flpack+1,w,c
 19528  004ADA  1016               	iorwf	??___flpack+2,w,c
 19529  004ADC  E007               	bz	l14168
 19530  004ADE  D7EA               	goto	l14160
 19531  004AE0                     l14166:
 19532  004AE0  0612               	decf	___flpack@exp,f,c
 19533  004AE2  90D8               	bcf	status,0,c
 19534  004AE4  360E               	rlcf	___flpack@arg,f,c
 19535  004AE6  360F               	rlcf	___flpack@arg+1,f,c
 19536  004AE8  3610               	rlcf	___flpack@arg+2,f,c
 19537  004AEA  3611               	rlcf	___flpack@arg+3,f,c
 19538  004AEC                     l14168:
 19539  004AEC  AE10               	btfss	___flpack@arg+2,7,c
 19540  004AEE  D7F8               	goto	l14166
 19541  004AF0  B012               	btfsc	___flpack@exp,0,c
 19542  004AF2  D002               	goto	l1548
 19543  004AF4  0E7F               	movlw	127
 19544  004AF6  1610               	andwf	___flpack@arg+2,f,c
 19545  004AF8                     l1548:
 19546  004AF8  90D8               	bcf	status,0,c
 19547  004AFA  3212               	rrcf	___flpack@exp,f,c
 19548  004AFC  C012  F014         	movff	___flpack@exp,??___flpack
 19549  004B00  6A15               	clrf	(??___flpack+1)& (0+255),c
 19550  004B02  6A16               	clrf	(??___flpack+2)& (0+255),c
 19551  004B04  6A17               	clrf	(??___flpack+3)& (0+255),c
 19552  004B06  C014  F017         	movff	??___flpack,??___flpack+3
 19553  004B0A  6A16               	clrf	??___flpack+2,c
 19554  004B0C  6A15               	clrf	??___flpack+1,c
 19555  004B0E  6A14               	clrf	??___flpack,c
 19556  004B10  5014               	movf	??___flpack,w,c
 19557  004B12  120E               	iorwf	___flpack@arg,f,c
 19558  004B14  5015               	movf	??___flpack+1,w,c
 19559  004B16  120F               	iorwf	___flpack@arg+1,f,c
 19560  004B18  5016               	movf	??___flpack+2,w,c
 19561  004B1A  1210               	iorwf	___flpack@arg+2,f,c
 19562  004B1C  5017               	movf	??___flpack+3,w,c
 19563  004B1E  1211               	iorwf	___flpack@arg+3,f,c
 19564  004B20  5013               	movf	___flpack@sign,w,c
 19565  004B22  A4D8               	btfss	status,2,c
 19566  004B24  8E11               	bsf	___flpack@arg+3,7,c
 19567  004B26  C00E  F00E         	movff	___flpack@arg,?___flpack
 19568  004B2A  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19569  004B2E  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19570  004B32  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19571  004B36                     l1538:
 19572  004B36  0012               	return	
 19573  004B38                     __end_of___flpack:
 19574                           	opt stack 0
 19575                           tblptru	equ	0xFF8
 19576                           tblptrh	equ	0xFF7
 19577                           tblptrl	equ	0xFF6
 19578                           tablat	equ	0xFF5
 19579                           prodh	equ	0xFF4
 19580                           prodl	equ	0xFF3
 19581                           intcon	equ	0xFF2
 19582                           postinc0	equ	0xFEE
 19583                           wreg	equ	0xFE8
 19584                           indf1	equ	0xFE7
 19585                           postdec1	equ	0xFE5
 19586                           fsr1h	equ	0xFE2
 19587                           fsr1l	equ	0xFE1
 19588                           indf2	equ	0xFDF
 19589                           postinc2	equ	0xFDE
 19590                           postdec2	equ	0xFDD
 19591                           plusw2	equ	0xFDB
 19592                           fsr2h	equ	0xFDA
 19593                           fsr2l	equ	0xFD9
 19594                           status	equ	0xFD8
 19595                           
 19596 ;; *************** function _vscp_readAppReg *****************
 19597 ;; Defined at:
 19598 ;;		line 1279 in file "../main.c"
 19599 ;; Parameters:    Size  Location     Type
 19600 ;;  reg             1    wreg     unsigned char 
 19601 ;; Auto vars:     Size  Location     Type
 19602 ;;  reg             1   18[COMRAM] unsigned char 
 19603 ;;  pos             1   17[COMRAM] unsigned char 
 19604 ;;  rv              1   19[COMRAM] unsigned char 
 19605 ;; Return value:  Size  Location     Type
 19606 ;;                  1    wreg      unsigned char 
 19607 ;; Registers used:
 19608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19609 ;; Tracked objects:
 19610 ;;		On entry : F/0
 19611 ;;		On exit  : 0/0
 19612 ;;		Unchanged: 0/0
 19613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19614 ;;      Params:         0       0       0       0       0       0       0
 19615 ;;      Locals:         3       0       0       0       0       0       0
 19616 ;;      Temps:          0       0       0       0       0       0       0
 19617 ;;      Totals:         3       0       0       0       0       0       0
 19618 ;;Total ram usage:        3 bytes
 19619 ;; Hardware stack levels used:    1
 19620 ;; Hardware stack levels required when called:    3
 19621 ;; This function calls:
 19622 ;;		_readEEPROM
 19623 ;; This function is called by:
 19624 ;;		_vscp_readRegister
 19625 ;;		_vscp_handleProtocolEvent
 19626 ;; This function uses a non-reentrant model
 19627 ;;
 19628                           
 19629                           	psect	text98
 19630  0022EC                     __ptext98:
 19631                           	opt stack 0
 19632  0022EC                     _vscp_readAppReg:
 19633                           	opt stack 25
 19634                           
 19635                           ;incstack = 0
 19636                           ;incstack = 0
 19637                           ;vscp_readAppReg@reg stored from wreg
 19638  0022EC  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19639                           
 19640                           ; BSR set to: 0
 19641                           ;main.c: 1280: uint8_t rv;
 19642                           ;main.c: 1285: if (0 == vscp_page_select) {
 19643  0022F0  5047               	movf	_vscp_page_select+1,w,c
 19644  0022F2  1046               	iorwf	_vscp_page_select,w,c
 19645  0022F4  E101 D255          	bz	l10772
 19646  0022F8  D399               	goto	l10774
 19647  0022FA                     l10570:
 19648                           
 19649                           ; BSR set to: 0
 19650                           ;main.c: 1291: rv = readEEPROM( 0x41 );
 19651  0022FA  6A0F               	clrf	?_readEEPROM+1,c
 19652  0022FC  0E41               	movlw	65
 19653  0022FE  6E0E               	movwf	?_readEEPROM,c
 19654  002300  EC9C  F02E         	call	_readEEPROM	;wreg free
 19655  002304  D3C0               	goto	L53
 19656  002306                     l10572:
 19657                           
 19658                           ; BSR set to: 0
 19659                           ;main.c: 1296: rv = readEEPROM( 0x42 );
 19660  002306  6A0F               	clrf	?_readEEPROM+1,c
 19661  002308  0E42               	movlw	66
 19662  00230A  6E0E               	movwf	?_readEEPROM,c
 19663  00230C  EC9C  F02E         	call	_readEEPROM	;wreg free
 19664  002310  D3BA               	goto	L53
 19665  002312                     l10574:
 19666                           
 19667                           ; BSR set to: 0
 19668                           ;main.c: 1301: rv = readEEPROM( 0x43 );
 19669  002312  6A0F               	clrf	?_readEEPROM+1,c
 19670  002314  0E43               	movlw	67
 19671  002316  6E0E               	movwf	?_readEEPROM,c
 19672  002318  EC9C  F02E         	call	_readEEPROM	;wreg free
 19673  00231C  D3B4               	goto	L53
 19674  00231E                     l10576:
 19675                           
 19676                           ; BSR set to: 0
 19677                           ;main.c: 1306: rv = readEEPROM (0x44 );
 19678  00231E  6A0F               	clrf	?_readEEPROM+1,c
 19679  002320  0E44               	movlw	68
 19680  002322  6E0E               	movwf	?_readEEPROM,c
 19681  002324  EC9C  F02E         	call	_readEEPROM	;wreg free
 19682  002328  D3AE               	goto	L53
 19683  00232A                     l10578:
 19684                           
 19685                           ; BSR set to: 0
 19686                           ;main.c: 1311: rv = readEEPROM( 0x45 );
 19687  00232A  6A0F               	clrf	?_readEEPROM+1,c
 19688  00232C  0E45               	movlw	69
 19689  00232E  6E0E               	movwf	?_readEEPROM,c
 19690  002330  EC9C  F02E         	call	_readEEPROM	;wreg free
 19691  002334  D3A8               	goto	L53
 19692  002336                     l10580:
 19693                           
 19694                           ; BSR set to: 0
 19695                           ;main.c: 1316: rv = readEEPROM( 0x46 );
 19696  002336  6A0F               	clrf	?_readEEPROM+1,c
 19697  002338  0E46               	movlw	70
 19698  00233A  6E0E               	movwf	?_readEEPROM,c
 19699  00233C  EC9C  F02E         	call	_readEEPROM	;wreg free
 19700  002340  D3A2               	goto	L53
 19701  002342                     l10582:
 19702                           
 19703                           ; BSR set to: 0
 19704                           ;main.c: 1321: rv = readEEPROM( 0x47 );
 19705  002342  6A0F               	clrf	?_readEEPROM+1,c
 19706  002344  0E47               	movlw	71
 19707  002346  6E0E               	movwf	?_readEEPROM,c
 19708  002348  EC9C  F02E         	call	_readEEPROM	;wreg free
 19709  00234C  D39C               	goto	L53
 19710  00234E                     l10584:
 19711                           
 19712                           ; BSR set to: 0
 19713                           ;main.c: 1326: rv = readEEPROM( 0x48 );
 19714  00234E  6A0F               	clrf	?_readEEPROM+1,c
 19715  002350  0E48               	movlw	72
 19716  002352  6E0E               	movwf	?_readEEPROM,c
 19717  002354  EC9C  F02E         	call	_readEEPROM	;wreg free
 19718  002358  D396               	goto	L53
 19719  00235A                     l10586:
 19720                           
 19721                           ; BSR set to: 0
 19722                           ;main.c: 1331: rv = ((current_temp[0] & 0xff00) >> 8);
 19723  00235A  5161               	movf	(_current_temp+1)& (0+255),w,b
 19724  00235C  D394               	goto	L53
 19725  00235E                     l315:
 19726                           
 19727                           ; BSR set to: 0
 19728                           ;main.c: 1336: rv = (current_temp[0] & 0x00ff);
 19729  00235E  C060  F014         	movff	_current_temp,vscp_readAppReg@rv
 19730                           
 19731                           ;main.c: 1337: break;
 19732  002362  D392               	goto	l10796
 19733  002364                     l10588:
 19734                           
 19735                           ; BSR set to: 0
 19736                           ;main.c: 1341: rv = ((current_temp[1] & 0xff00) >> 8);
 19737  002364  5163               	movf	(_current_temp+3)& (0+255),w,b
 19738  002366  D38F               	goto	L53
 19739  002368                     l317:
 19740                           
 19741                           ; BSR set to: 0
 19742                           ;main.c: 1346: rv = (current_temp[1] & 0x00ff);
 19743  002368  C062  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19744                           
 19745                           ;main.c: 1347: break;
 19746  00236C  D38D               	goto	l10796
 19747  00236E                     l10590:
 19748                           
 19749                           ; BSR set to: 0
 19750                           ;main.c: 1351: rv = ((current_temp[2] & 0xff00) >> 8);
 19751  00236E  5165               	movf	(_current_temp+5)& (0+255),w,b
 19752  002370  D38A               	goto	L53
 19753  002372                     l319:
 19754                           
 19755                           ; BSR set to: 0
 19756                           ;main.c: 1356: rv = (current_temp[2] & 0x00ff);
 19757  002372  C064  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19758                           
 19759                           ;main.c: 1357: break;
 19760  002376  D388               	goto	l10796
 19761  002378                     l10592:
 19762                           
 19763                           ; BSR set to: 0
 19764                           ;main.c: 1361: rv = ((current_temp[3] & 0xff00) >> 8);
 19765  002378  5167               	movf	(_current_temp+7)& (0+255),w,b
 19766  00237A  D385               	goto	L53
 19767  00237C                     l321:
 19768                           
 19769                           ; BSR set to: 0
 19770                           ;main.c: 1366: rv = (current_temp[3] & 0x00ff);
 19771  00237C  C066  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 19772                           
 19773                           ;main.c: 1367: break;
 19774  002380  D383               	goto	l10796
 19775  002382                     l10594:
 19776                           
 19777                           ; BSR set to: 0
 19778                           ;main.c: 1371: rv = ((current_temp[4] & 0xff00) >> 8);
 19779  002382  5169               	movf	(_current_temp+9)& (0+255),w,b
 19780  002384  D380               	goto	L53
 19781  002386                     l323:
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;main.c: 1376: rv = (current_temp[4] & 0x00ff);
 19785  002386  C068  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 19786                           
 19787                           ;main.c: 1377: break;
 19788  00238A  D37E               	goto	l10796
 19789  00238C                     l10596:
 19790                           
 19791                           ; BSR set to: 0
 19792                           ;main.c: 1381: rv = ((current_temp[5] & 0xff00) >> 8);
 19793  00238C  516B               	movf	(_current_temp+11)& (0+255),w,b
 19794  00238E  D37B               	goto	L53
 19795  002390                     l325:
 19796                           
 19797                           ; BSR set to: 0
 19798                           ;main.c: 1386: rv = (current_temp[5] & 0x00ff);
 19799  002390  C06A  F014         	movff	_current_temp+10,vscp_readAppReg@rv
 19800                           
 19801                           ;main.c: 1387: break;
 19802  002394  D379               	goto	l10796
 19803  002396                     l10598:
 19804                           
 19805                           ; BSR set to: 0
 19806                           ;main.c: 1391: rv = readEEPROM(0x49);
 19807  002396  6A0F               	clrf	?_readEEPROM+1,c
 19808  002398  0E49               	movlw	73
 19809  00239A  6E0E               	movwf	?_readEEPROM,c
 19810  00239C  EC9C  F02E         	call	_readEEPROM	;wreg free
 19811  0023A0  D372               	goto	L53
 19812  0023A2                     l10600:
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;main.c: 1396: rv = readEEPROM(0x4A);
 19816  0023A2  6A0F               	clrf	?_readEEPROM+1,c
 19817  0023A4  0E4A               	movlw	74
 19818  0023A6  6E0E               	movwf	?_readEEPROM,c
 19819  0023A8  EC9C  F02E         	call	_readEEPROM	;wreg free
 19820  0023AC  D36C               	goto	L53
 19821  0023AE                     l10602:
 19822                           
 19823                           ; BSR set to: 0
 19824                           ;main.c: 1401: rv = readEEPROM(0x4B);
 19825  0023AE  6A0F               	clrf	?_readEEPROM+1,c
 19826  0023B0  0E4B               	movlw	75
 19827  0023B2  6E0E               	movwf	?_readEEPROM,c
 19828  0023B4  EC9C  F02E         	call	_readEEPROM	;wreg free
 19829  0023B8  D366               	goto	L53
 19830  0023BA                     l10604:
 19831                           
 19832                           ; BSR set to: 0
 19833                           ;main.c: 1406: rv = readEEPROM(0x4C);
 19834  0023BA  6A0F               	clrf	?_readEEPROM+1,c
 19835  0023BC  0E4C               	movlw	76
 19836  0023BE  6E0E               	movwf	?_readEEPROM,c
 19837  0023C0  EC9C  F02E         	call	_readEEPROM	;wreg free
 19838  0023C4  D360               	goto	L53
 19839  0023C6                     l10606:
 19840                           
 19841                           ; BSR set to: 0
 19842                           ;main.c: 1411: rv = readEEPROM(0x4D);
 19843  0023C6  6A0F               	clrf	?_readEEPROM+1,c
 19844  0023C8  0E4D               	movlw	77
 19845  0023CA  6E0E               	movwf	?_readEEPROM,c
 19846  0023CC  EC9C  F02E         	call	_readEEPROM	;wreg free
 19847  0023D0  D35A               	goto	L53
 19848  0023D2                     l10608:
 19849                           
 19850                           ; BSR set to: 0
 19851                           ;main.c: 1416: rv = readEEPROM(0x4E);
 19852  0023D2  6A0F               	clrf	?_readEEPROM+1,c
 19853  0023D4  0E4E               	movlw	78
 19854  0023D6  6E0E               	movwf	?_readEEPROM,c
 19855  0023D8  EC9C  F02E         	call	_readEEPROM	;wreg free
 19856  0023DC  D354               	goto	L53
 19857  0023DE                     l10610:
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;main.c: 1423: rv = readEEPROM(0x4F);
 19861  0023DE  6A0F               	clrf	?_readEEPROM+1,c
 19862  0023E0  0E4F               	movlw	79
 19863  0023E2  6E0E               	movwf	?_readEEPROM,c
 19864  0023E4  EC9C  F02E         	call	_readEEPROM	;wreg free
 19865  0023E8  D34E               	goto	L53
 19866  0023EA                     l10612:
 19867                           
 19868                           ; BSR set to: 0
 19869                           ;main.c: 1428: rv = readEEPROM(0x50);
 19870  0023EA  6A0F               	clrf	?_readEEPROM+1,c
 19871  0023EC  0E50               	movlw	80
 19872  0023EE  6E0E               	movwf	?_readEEPROM,c
 19873  0023F0  EC9C  F02E         	call	_readEEPROM	;wreg free
 19874  0023F4  D348               	goto	L53
 19875  0023F6                     l10614:
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;main.c: 1433: rv = readEEPROM(0x51);
 19879  0023F6  6A0F               	clrf	?_readEEPROM+1,c
 19880  0023F8  0E51               	movlw	81
 19881  0023FA  6E0E               	movwf	?_readEEPROM,c
 19882  0023FC  EC9C  F02E         	call	_readEEPROM	;wreg free
 19883  002400  D342               	goto	L53
 19884  002402                     l10616:
 19885                           
 19886                           ; BSR set to: 0
 19887                           ;main.c: 1438: rv = readEEPROM(0x52);
 19888  002402  6A0F               	clrf	?_readEEPROM+1,c
 19889  002404  0E52               	movlw	82
 19890  002406  6E0E               	movwf	?_readEEPROM,c
 19891  002408  EC9C  F02E         	call	_readEEPROM	;wreg free
 19892  00240C  D33C               	goto	L53
 19893  00240E                     l10618:
 19894                           
 19895                           ; BSR set to: 0
 19896                           ;main.c: 1443: rv = readEEPROM(0x53);
 19897  00240E  6A0F               	clrf	?_readEEPROM+1,c
 19898  002410  0E53               	movlw	83
 19899  002412  6E0E               	movwf	?_readEEPROM,c
 19900  002414  EC9C  F02E         	call	_readEEPROM	;wreg free
 19901  002418  D336               	goto	L53
 19902  00241A                     l10620:
 19903                           
 19904                           ; BSR set to: 0
 19905                           ;main.c: 1448: rv = readEEPROM(0x54);
 19906  00241A  6A0F               	clrf	?_readEEPROM+1,c
 19907  00241C  0E54               	movlw	84
 19908  00241E  6E0E               	movwf	?_readEEPROM,c
 19909  002420  EC9C  F02E         	call	_readEEPROM	;wreg free
 19910  002424  D330               	goto	L53
 19911  002426                     l10622:
 19912                           
 19913                           ; BSR set to: 0
 19914                           ;main.c: 1453: rv = readEEPROM(0x55);
 19915  002426  6A0F               	clrf	?_readEEPROM+1,c
 19916  002428  0E55               	movlw	85
 19917  00242A  6E0E               	movwf	?_readEEPROM,c
 19918  00242C  EC9C  F02E         	call	_readEEPROM	;wreg free
 19919  002430  D32A               	goto	L53
 19920  002432                     l10624:
 19921                           
 19922                           ; BSR set to: 0
 19923                           ;main.c: 1458: rv = readEEPROM(0x56);
 19924  002432  6A0F               	clrf	?_readEEPROM+1,c
 19925  002434  0E56               	movlw	86
 19926  002436  6E0E               	movwf	?_readEEPROM,c
 19927  002438  EC9C  F02E         	call	_readEEPROM	;wreg free
 19928  00243C  D324               	goto	L53
 19929  00243E                     l10626:
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;main.c: 1463: rv = readEEPROM(0x57);
 19933  00243E  6A0F               	clrf	?_readEEPROM+1,c
 19934  002440  0E57               	movlw	87
 19935  002442  6E0E               	movwf	?_readEEPROM,c
 19936  002444  EC9C  F02E         	call	_readEEPROM	;wreg free
 19937  002448  D31E               	goto	L53
 19938  00244A                     l10628:
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;main.c: 1468: rv = readEEPROM(0x58);
 19942  00244A  6A0F               	clrf	?_readEEPROM+1,c
 19943  00244C  0E58               	movlw	88
 19944  00244E  6E0E               	movwf	?_readEEPROM,c
 19945  002450  EC9C  F02E         	call	_readEEPROM	;wreg free
 19946  002454  D318               	goto	L53
 19947  002456                     l10630:
 19948                           
 19949                           ; BSR set to: 0
 19950                           ;main.c: 1473: rv = readEEPROM(0x59);
 19951  002456  6A0F               	clrf	?_readEEPROM+1,c
 19952  002458  0E59               	movlw	89
 19953  00245A  6E0E               	movwf	?_readEEPROM,c
 19954  00245C  EC9C  F02E         	call	_readEEPROM	;wreg free
 19955  002460  D312               	goto	L53
 19956  002462                     l10632:
 19957                           
 19958                           ; BSR set to: 0
 19959                           ;main.c: 1478: rv = readEEPROM(0x5A);
 19960  002462  6A0F               	clrf	?_readEEPROM+1,c
 19961  002464  0E5A               	movlw	90
 19962  002466  6E0E               	movwf	?_readEEPROM,c
 19963  002468  EC9C  F02E         	call	_readEEPROM	;wreg free
 19964  00246C  D30C               	goto	L53
 19965  00246E                     l10634:
 19966                           
 19967                           ; BSR set to: 0
 19968                           ;main.c: 1487: rv = readEEPROM(0x5B);
 19969  00246E  6A0F               	clrf	?_readEEPROM+1,c
 19970  002470  0E5B               	movlw	91
 19971  002472  6E0E               	movwf	?_readEEPROM,c
 19972  002474  EC9C  F02E         	call	_readEEPROM	;wreg free
 19973  002478  D306               	goto	L53
 19974  00247A                     l10636:
 19975                           
 19976                           ; BSR set to: 0
 19977                           ;main.c: 1492: rv = readEEPROM(0x5C);
 19978  00247A  6A0F               	clrf	?_readEEPROM+1,c
 19979  00247C  0E5C               	movlw	92
 19980  00247E  6E0E               	movwf	?_readEEPROM,c
 19981  002480  EC9C  F02E         	call	_readEEPROM	;wreg free
 19982  002484  D300               	goto	L53
 19983  002486                     l10638:
 19984                           
 19985                           ; BSR set to: 0
 19986                           ;main.c: 1497: rv = readEEPROM(0x5D);
 19987  002486  6A0F               	clrf	?_readEEPROM+1,c
 19988  002488  0E5D               	movlw	93
 19989  00248A  6E0E               	movwf	?_readEEPROM,c
 19990  00248C  EC9C  F02E         	call	_readEEPROM	;wreg free
 19991  002490  D2FA               	goto	L53
 19992  002492                     l10640:
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;main.c: 1502: rv = readEEPROM(0x5E);
 19996  002492  6A0F               	clrf	?_readEEPROM+1,c
 19997  002494  0E5E               	movlw	94
 19998  002496  6E0E               	movwf	?_readEEPROM,c
 19999  002498  EC9C  F02E         	call	_readEEPROM	;wreg free
 20000  00249C  D2F4               	goto	L53
 20001  00249E                     l10642:
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;main.c: 1507: rv = readEEPROM(0x5F);
 20005  00249E  6A0F               	clrf	?_readEEPROM+1,c
 20006  0024A0  0E5F               	movlw	95
 20007  0024A2  6E0E               	movwf	?_readEEPROM,c
 20008  0024A4  EC9C  F02E         	call	_readEEPROM	;wreg free
 20009  0024A8  D2EE               	goto	L53
 20010  0024AA                     l10644:
 20011                           
 20012                           ; BSR set to: 0
 20013                           ;main.c: 1512: rv = readEEPROM(0x60);
 20014  0024AA  6A0F               	clrf	?_readEEPROM+1,c
 20015  0024AC  0E60               	movlw	96
 20016  0024AE  6E0E               	movwf	?_readEEPROM,c
 20017  0024B0  EC9C  F02E         	call	_readEEPROM	;wreg free
 20018  0024B4  D2E8               	goto	L53
 20019  0024B6                     l10646:
 20020                           
 20021                           ; BSR set to: 0
 20022                           ;main.c: 1517: rv = readEEPROM(0x61);
 20023  0024B6  6A0F               	clrf	?_readEEPROM+1,c
 20024  0024B8  0E61               	movlw	97
 20025  0024BA  6E0E               	movwf	?_readEEPROM,c
 20026  0024BC  EC9C  F02E         	call	_readEEPROM	;wreg free
 20027  0024C0  D2E2               	goto	L53
 20028  0024C2                     l10648:
 20029                           
 20030                           ; BSR set to: 0
 20031                           ;main.c: 1522: rv = readEEPROM(0x62);
 20032  0024C2  6A0F               	clrf	?_readEEPROM+1,c
 20033  0024C4  0E62               	movlw	98
 20034  0024C6  6E0E               	movwf	?_readEEPROM,c
 20035  0024C8  EC9C  F02E         	call	_readEEPROM	;wreg free
 20036  0024CC  D2DC               	goto	L53
 20037  0024CE                     l10650:
 20038                           
 20039                           ; BSR set to: 0
 20040                           ;main.c: 1527: rv = readEEPROM(0x63);
 20041  0024CE  6A0F               	clrf	?_readEEPROM+1,c
 20042  0024D0  0E63               	movlw	99
 20043  0024D2  6E0E               	movwf	?_readEEPROM,c
 20044  0024D4  EC9C  F02E         	call	_readEEPROM	;wreg free
 20045  0024D8  D2D6               	goto	L53
 20046  0024DA                     l10652:
 20047                           
 20048                           ; BSR set to: 0
 20049                           ;main.c: 1532: rv = readEEPROM(0x64);
 20050  0024DA  6A0F               	clrf	?_readEEPROM+1,c
 20051  0024DC  0E64               	movlw	100
 20052  0024DE  6E0E               	movwf	?_readEEPROM,c
 20053  0024E0  EC9C  F02E         	call	_readEEPROM	;wreg free
 20054  0024E4  D2D0               	goto	L53
 20055  0024E6                     l10654:
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;main.c: 1537: rv = readEEPROM(0x65);
 20059  0024E6  6A0F               	clrf	?_readEEPROM+1,c
 20060  0024E8  0E65               	movlw	101
 20061  0024EA  6E0E               	movwf	?_readEEPROM,c
 20062  0024EC  EC9C  F02E         	call	_readEEPROM	;wreg free
 20063  0024F0  D2CA               	goto	L53
 20064  0024F2                     l10656:
 20065                           
 20066                           ; BSR set to: 0
 20067                           ;main.c: 1542: rv = readEEPROM(0x66);
 20068  0024F2  6A0F               	clrf	?_readEEPROM+1,c
 20069  0024F4  0E66               	movlw	102
 20070  0024F6  6E0E               	movwf	?_readEEPROM,c
 20071  0024F8  EC9C  F02E         	call	_readEEPROM	;wreg free
 20072  0024FC  D2C4               	goto	L53
 20073  0024FE                     l10658:
 20074                           
 20075                           ; BSR set to: 0
 20076                           ;main.c: 1552: rv = readEEPROM(0x67);
 20077  0024FE  6A0F               	clrf	?_readEEPROM+1,c
 20078  002500  0E67               	movlw	103
 20079  002502  6E0E               	movwf	?_readEEPROM,c
 20080  002504  EC9C  F02E         	call	_readEEPROM	;wreg free
 20081  002508  D2BE               	goto	L53
 20082  00250A                     l10660:
 20083                           
 20084                           ; BSR set to: 0
 20085                           ;main.c: 1557: rv = readEEPROM(0x68);
 20086  00250A  6A0F               	clrf	?_readEEPROM+1,c
 20087  00250C  0E68               	movlw	104
 20088  00250E  6E0E               	movwf	?_readEEPROM,c
 20089  002510  EC9C  F02E         	call	_readEEPROM	;wreg free
 20090  002514  D2B8               	goto	L53
 20091  002516                     l10662:
 20092                           
 20093                           ; BSR set to: 0
 20094                           ;main.c: 1562: rv = readEEPROM(0x69);
 20095  002516  6A0F               	clrf	?_readEEPROM+1,c
 20096  002518  0E69               	movlw	105
 20097  00251A  6E0E               	movwf	?_readEEPROM,c
 20098  00251C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20099  002520  D2B2               	goto	L53
 20100  002522                     l10664:
 20101                           
 20102                           ; BSR set to: 0
 20103                           ;main.c: 1567: rv = readEEPROM(0x6A);
 20104  002522  6A0F               	clrf	?_readEEPROM+1,c
 20105  002524  0E6A               	movlw	106
 20106  002526  6E0E               	movwf	?_readEEPROM,c
 20107  002528  EC9C  F02E         	call	_readEEPROM	;wreg free
 20108  00252C  D2AC               	goto	L53
 20109  00252E                     l10666:
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;main.c: 1572: rv = readEEPROM(0x6B);
 20113  00252E  6A0F               	clrf	?_readEEPROM+1,c
 20114  002530  0E6B               	movlw	107
 20115  002532  6E0E               	movwf	?_readEEPROM,c
 20116  002534  EC9C  F02E         	call	_readEEPROM	;wreg free
 20117  002538  D2A6               	goto	L53
 20118  00253A                     l10668:
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;main.c: 1577: rv = readEEPROM(0x6C);
 20122  00253A  6A0F               	clrf	?_readEEPROM+1,c
 20123  00253C  0E6C               	movlw	108
 20124  00253E  6E0E               	movwf	?_readEEPROM,c
 20125  002540  EC9C  F02E         	call	_readEEPROM	;wreg free
 20126  002544  D2A0               	goto	L53
 20127  002546                     l10670:
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;main.c: 1582: rv = readEEPROM(0x6D);
 20131  002546  6A0F               	clrf	?_readEEPROM+1,c
 20132  002548  0E6D               	movlw	109
 20133  00254A  6E0E               	movwf	?_readEEPROM,c
 20134  00254C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20135  002550  D29A               	goto	L53
 20136  002552                     l10672:
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;main.c: 1587: rv = readEEPROM(0x6E);
 20140  002552  6A0F               	clrf	?_readEEPROM+1,c
 20141  002554  0E6E               	movlw	110
 20142  002556  6E0E               	movwf	?_readEEPROM,c
 20143  002558  EC9C  F02E         	call	_readEEPROM	;wreg free
 20144  00255C  D294               	goto	L53
 20145  00255E                     l10674:
 20146                           
 20147                           ; BSR set to: 0
 20148                           ;main.c: 1592: rv = readEEPROM(0x6F);
 20149  00255E  6A0F               	clrf	?_readEEPROM+1,c
 20150  002560  0E6F               	movlw	111
 20151  002562  6E0E               	movwf	?_readEEPROM,c
 20152  002564  EC9C  F02E         	call	_readEEPROM	;wreg free
 20153  002568  D28E               	goto	L53
 20154  00256A                     l10676:
 20155                           
 20156                           ; BSR set to: 0
 20157                           ;main.c: 1597: rv = readEEPROM(0x70);
 20158  00256A  6A0F               	clrf	?_readEEPROM+1,c
 20159  00256C  0E70               	movlw	112
 20160  00256E  6E0E               	movwf	?_readEEPROM,c
 20161  002570  EC9C  F02E         	call	_readEEPROM	;wreg free
 20162  002574  D288               	goto	L53
 20163  002576                     l10678:
 20164                           
 20165                           ; BSR set to: 0
 20166                           ;main.c: 1602: rv = readEEPROM(0x71);
 20167  002576  6A0F               	clrf	?_readEEPROM+1,c
 20168  002578  0E71               	movlw	113
 20169  00257A  6E0E               	movwf	?_readEEPROM,c
 20170  00257C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20171  002580  D282               	goto	L53
 20172  002582                     l10680:
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;main.c: 1607: rv = readEEPROM(0x72);
 20176  002582  6A0F               	clrf	?_readEEPROM+1,c
 20177  002584  0E72               	movlw	114
 20178  002586  6E0E               	movwf	?_readEEPROM,c
 20179  002588  EC9C  F02E         	call	_readEEPROM	;wreg free
 20180  00258C  D27C               	goto	L53
 20181  00258E                     l10682:
 20182                           
 20183                           ; BSR set to: 0
 20184                           ;main.c: 1616: rv = readEEPROM(0x73);
 20185  00258E  6A0F               	clrf	?_readEEPROM+1,c
 20186  002590  0E73               	movlw	115
 20187  002592  6E0E               	movwf	?_readEEPROM,c
 20188  002594  EC9C  F02E         	call	_readEEPROM	;wreg free
 20189  002598  D276               	goto	L53
 20190  00259A                     l10684:
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;main.c: 1621: rv = readEEPROM(0x74);
 20194  00259A  6A0F               	clrf	?_readEEPROM+1,c
 20195  00259C  0E74               	movlw	116
 20196  00259E  6E0E               	movwf	?_readEEPROM,c
 20197  0025A0  EC9C  F02E         	call	_readEEPROM	;wreg free
 20198  0025A4  D270               	goto	L53
 20199  0025A6                     l10686:
 20200                           
 20201                           ; BSR set to: 0
 20202                           ;main.c: 1626: rv = readEEPROM(0x75);
 20203  0025A6  6A0F               	clrf	?_readEEPROM+1,c
 20204  0025A8  0E75               	movlw	117
 20205  0025AA  6E0E               	movwf	?_readEEPROM,c
 20206  0025AC  EC9C  F02E         	call	_readEEPROM	;wreg free
 20207  0025B0  D26A               	goto	L53
 20208  0025B2                     l10688:
 20209                           
 20210                           ; BSR set to: 0
 20211                           ;main.c: 1631: rv = readEEPROM(0x76);
 20212  0025B2  6A0F               	clrf	?_readEEPROM+1,c
 20213  0025B4  0E76               	movlw	118
 20214  0025B6  6E0E               	movwf	?_readEEPROM,c
 20215  0025B8  EC9C  F02E         	call	_readEEPROM	;wreg free
 20216  0025BC  D264               	goto	L53
 20217  0025BE                     l10690:
 20218                           
 20219                           ; BSR set to: 0
 20220                           ;main.c: 1636: rv = readEEPROM(0x77);
 20221  0025BE  6A0F               	clrf	?_readEEPROM+1,c
 20222  0025C0  0E77               	movlw	119
 20223  0025C2  6E0E               	movwf	?_readEEPROM,c
 20224  0025C4  EC9C  F02E         	call	_readEEPROM	;wreg free
 20225  0025C8  D25E               	goto	L53
 20226  0025CA                     l10692:
 20227                           
 20228                           ; BSR set to: 0
 20229                           ;main.c: 1641: rv = readEEPROM(0x78);
 20230  0025CA  6A0F               	clrf	?_readEEPROM+1,c
 20231  0025CC  0E78               	movlw	120
 20232  0025CE  6E0E               	movwf	?_readEEPROM,c
 20233  0025D0  EC9C  F02E         	call	_readEEPROM	;wreg free
 20234  0025D4  D258               	goto	L53
 20235  0025D6                     l10694:
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;main.c: 1646: rv = readEEPROM(0x79);
 20239  0025D6  6A0F               	clrf	?_readEEPROM+1,c
 20240  0025D8  0E79               	movlw	121
 20241  0025DA  6E0E               	movwf	?_readEEPROM,c
 20242  0025DC  EC9C  F02E         	call	_readEEPROM	;wreg free
 20243  0025E0  D252               	goto	L53
 20244  0025E2                     l10696:
 20245                           
 20246                           ; BSR set to: 0
 20247                           ;main.c: 1651: rv = readEEPROM(0x7A);
 20248  0025E2  6A0F               	clrf	?_readEEPROM+1,c
 20249  0025E4  0E7A               	movlw	122
 20250  0025E6  6E0E               	movwf	?_readEEPROM,c
 20251  0025E8  EC9C  F02E         	call	_readEEPROM	;wreg free
 20252  0025EC  D24C               	goto	L53
 20253  0025EE                     l10698:
 20254                           
 20255                           ; BSR set to: 0
 20256                           ;main.c: 1656: rv = readEEPROM(0x7B);
 20257  0025EE  6A0F               	clrf	?_readEEPROM+1,c
 20258  0025F0  0E7B               	movlw	123
 20259  0025F2  6E0E               	movwf	?_readEEPROM,c
 20260  0025F4  EC9C  F02E         	call	_readEEPROM	;wreg free
 20261  0025F8  D246               	goto	L53
 20262  0025FA                     l10700:
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;main.c: 1661: rv = readEEPROM(0x7C);
 20266  0025FA  6A0F               	clrf	?_readEEPROM+1,c
 20267  0025FC  0E7C               	movlw	124
 20268  0025FE  6E0E               	movwf	?_readEEPROM,c
 20269  002600  EC9C  F02E         	call	_readEEPROM	;wreg free
 20270  002604  D240               	goto	L53
 20271  002606                     l10702:
 20272                           
 20273                           ; BSR set to: 0
 20274                           ;main.c: 1666: rv = readEEPROM(0x7D);
 20275  002606  6A0F               	clrf	?_readEEPROM+1,c
 20276  002608  0E7D               	movlw	125
 20277  00260A  6E0E               	movwf	?_readEEPROM,c
 20278  00260C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20279  002610  D23A               	goto	L53
 20280  002612                     l10704:
 20281                           
 20282                           ; BSR set to: 0
 20283                           ;main.c: 1671: rv = readEEPROM(0x7E);
 20284  002612  6A0F               	clrf	?_readEEPROM+1,c
 20285  002614  0E7E               	movlw	126
 20286  002616  6E0E               	movwf	?_readEEPROM,c
 20287  002618  EC9C  F02E         	call	_readEEPROM	;wreg free
 20288  00261C  D234               	goto	L53
 20289  00261E                     l10706:
 20290                           
 20291                           ; BSR set to: 0
 20292                           ;main.c: 1680: rv = readEEPROM(0x7F);
 20293  00261E  6A0F               	clrf	?_readEEPROM+1,c
 20294  002620  0E7F               	movlw	127
 20295  002622  6E0E               	movwf	?_readEEPROM,c
 20296  002624  EC9C  F02E         	call	_readEEPROM	;wreg free
 20297  002628  D22E               	goto	L53
 20298  00262A                     l10708:
 20299                           
 20300                           ; BSR set to: 0
 20301                           ;main.c: 1685: rv = readEEPROM(0x80);
 20302  00262A  6A0F               	clrf	?_readEEPROM+1,c
 20303  00262C  0E80               	movlw	128
 20304  00262E  6E0E               	movwf	?_readEEPROM,c
 20305  002630  EC9C  F02E         	call	_readEEPROM	;wreg free
 20306  002634  D228               	goto	L53
 20307  002636                     l10710:
 20308                           
 20309                           ; BSR set to: 0
 20310                           ;main.c: 1690: rv = readEEPROM(0x81);
 20311  002636  6A0F               	clrf	?_readEEPROM+1,c
 20312  002638  0E81               	movlw	129
 20313  00263A  6E0E               	movwf	?_readEEPROM,c
 20314  00263C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20315  002640  D222               	goto	L53
 20316  002642                     l10712:
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;main.c: 1695: rv = readEEPROM(0x82);
 20320  002642  6A0F               	clrf	?_readEEPROM+1,c
 20321  002644  0E82               	movlw	130
 20322  002646  6E0E               	movwf	?_readEEPROM,c
 20323  002648  EC9C  F02E         	call	_readEEPROM	;wreg free
 20324  00264C  D21C               	goto	L53
 20325  00264E                     l10714:
 20326                           
 20327                           ; BSR set to: 0
 20328                           ;main.c: 1700: rv = readEEPROM(0x83);
 20329  00264E  6A0F               	clrf	?_readEEPROM+1,c
 20330  002650  0E83               	movlw	131
 20331  002652  6E0E               	movwf	?_readEEPROM,c
 20332  002654  EC9C  F02E         	call	_readEEPROM	;wreg free
 20333  002658  D216               	goto	L53
 20334  00265A                     l10716:
 20335                           
 20336                           ; BSR set to: 0
 20337                           ;main.c: 1705: rv = readEEPROM(0x84);
 20338  00265A  6A0F               	clrf	?_readEEPROM+1,c
 20339  00265C  0E84               	movlw	132
 20340  00265E  6E0E               	movwf	?_readEEPROM,c
 20341  002660  EC9C  F02E         	call	_readEEPROM	;wreg free
 20342  002664  D210               	goto	L53
 20343  002666                     l10718:
 20344                           
 20345                           ; BSR set to: 0
 20346                           ;main.c: 1710: rv = readEEPROM(0x85);
 20347  002666  6A0F               	clrf	?_readEEPROM+1,c
 20348  002668  0E85               	movlw	133
 20349  00266A  6E0E               	movwf	?_readEEPROM,c
 20350  00266C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20351  002670  D20A               	goto	L53
 20352  002672                     l10720:
 20353                           
 20354                           ; BSR set to: 0
 20355                           ;main.c: 1715: rv = readEEPROM(0x86);
 20356  002672  6A0F               	clrf	?_readEEPROM+1,c
 20357  002674  0E86               	movlw	134
 20358  002676  6E0E               	movwf	?_readEEPROM,c
 20359  002678  EC9C  F02E         	call	_readEEPROM	;wreg free
 20360  00267C  D204               	goto	L53
 20361  00267E                     l10722:
 20362                           
 20363                           ; BSR set to: 0
 20364                           ;main.c: 1720: rv = readEEPROM(0x87);
 20365  00267E  6A0F               	clrf	?_readEEPROM+1,c
 20366  002680  0E87               	movlw	135
 20367  002682  6E0E               	movwf	?_readEEPROM,c
 20368  002684  EC9C  F02E         	call	_readEEPROM	;wreg free
 20369  002688  D1FE               	goto	L53
 20370  00268A                     l10724:
 20371                           
 20372                           ; BSR set to: 0
 20373                           ;main.c: 1725: rv = readEEPROM(0x88);
 20374  00268A  6A0F               	clrf	?_readEEPROM+1,c
 20375  00268C  0E88               	movlw	136
 20376  00268E  6E0E               	movwf	?_readEEPROM,c
 20377  002690  EC9C  F02E         	call	_readEEPROM	;wreg free
 20378  002694  D1F8               	goto	L53
 20379  002696                     l10726:
 20380                           
 20381                           ; BSR set to: 0
 20382                           ;main.c: 1730: rv = readEEPROM(0x89);
 20383  002696  6A0F               	clrf	?_readEEPROM+1,c
 20384  002698  0E89               	movlw	137
 20385  00269A  6E0E               	movwf	?_readEEPROM,c
 20386  00269C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20387  0026A0  D1F2               	goto	L53
 20388  0026A2                     l10728:
 20389                           
 20390                           ; BSR set to: 0
 20391                           ;main.c: 1735: rv = readEEPROM(0x8A);
 20392  0026A2  6A0F               	clrf	?_readEEPROM+1,c
 20393  0026A4  0E8A               	movlw	138
 20394  0026A6  6E0E               	movwf	?_readEEPROM,c
 20395  0026A8  EC9C  F02E         	call	_readEEPROM	;wreg free
 20396  0026AC  D1EC               	goto	L53
 20397  0026AE                     l10730:
 20398                           
 20399                           ; BSR set to: 0
 20400                           ;main.c: 1744: rv = readEEPROM(0x8B);
 20401  0026AE  6A0F               	clrf	?_readEEPROM+1,c
 20402  0026B0  0E8B               	movlw	139
 20403  0026B2  6E0E               	movwf	?_readEEPROM,c
 20404  0026B4  EC9C  F02E         	call	_readEEPROM	;wreg free
 20405  0026B8  D1E6               	goto	L53
 20406  0026BA                     l10732:
 20407                           
 20408                           ; BSR set to: 0
 20409                           ;main.c: 1749: rv = readEEPROM(0x8C);
 20410  0026BA  6A0F               	clrf	?_readEEPROM+1,c
 20411  0026BC  0E8C               	movlw	140
 20412  0026BE  6E0E               	movwf	?_readEEPROM,c
 20413  0026C0  EC9C  F02E         	call	_readEEPROM	;wreg free
 20414  0026C4  D1E0               	goto	L53
 20415  0026C6                     l10734:
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;main.c: 1754: rv = readEEPROM(0x8D);
 20419  0026C6  6A0F               	clrf	?_readEEPROM+1,c
 20420  0026C8  0E8D               	movlw	141
 20421  0026CA  6E0E               	movwf	?_readEEPROM,c
 20422  0026CC  EC9C  F02E         	call	_readEEPROM	;wreg free
 20423  0026D0  D1DA               	goto	L53
 20424  0026D2                     l10736:
 20425                           
 20426                           ; BSR set to: 0
 20427                           ;main.c: 1759: rv = readEEPROM(0x8E);
 20428  0026D2  6A0F               	clrf	?_readEEPROM+1,c
 20429  0026D4  0E8E               	movlw	142
 20430  0026D6  6E0E               	movwf	?_readEEPROM,c
 20431  0026D8  EC9C  F02E         	call	_readEEPROM	;wreg free
 20432  0026DC  D1D4               	goto	L53
 20433  0026DE                     l10738:
 20434                           
 20435                           ; BSR set to: 0
 20436                           ;main.c: 1764: rv = readEEPROM(0x8F);
 20437  0026DE  6A0F               	clrf	?_readEEPROM+1,c
 20438  0026E0  0E8F               	movlw	143
 20439  0026E2  6E0E               	movwf	?_readEEPROM,c
 20440  0026E4  EC9C  F02E         	call	_readEEPROM	;wreg free
 20441  0026E8  D1CE               	goto	L53
 20442  0026EA                     l10740:
 20443                           
 20444                           ; BSR set to: 0
 20445                           ;main.c: 1769: rv = readEEPROM(0x90);
 20446  0026EA  6A0F               	clrf	?_readEEPROM+1,c
 20447  0026EC  0E90               	movlw	144
 20448  0026EE  6E0E               	movwf	?_readEEPROM,c
 20449  0026F0  EC9C  F02E         	call	_readEEPROM	;wreg free
 20450  0026F4  D1C8               	goto	L53
 20451  0026F6                     l10742:
 20452                           
 20453                           ; BSR set to: 0
 20454                           ;main.c: 1774: rv = readEEPROM(0x91);
 20455  0026F6  6A0F               	clrf	?_readEEPROM+1,c
 20456  0026F8  0E91               	movlw	145
 20457  0026FA  6E0E               	movwf	?_readEEPROM,c
 20458  0026FC  EC9C  F02E         	call	_readEEPROM	;wreg free
 20459  002700  D1C2               	goto	L53
 20460  002702                     l10744:
 20461                           
 20462                           ; BSR set to: 0
 20463                           ;main.c: 1779: rv = readEEPROM(0x92);
 20464  002702  6A0F               	clrf	?_readEEPROM+1,c
 20465  002704  0E92               	movlw	146
 20466  002706  6E0E               	movwf	?_readEEPROM,c
 20467  002708  EC9C  F02E         	call	_readEEPROM	;wreg free
 20468  00270C  D1BC               	goto	L53
 20469  00270E                     l10746:
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;main.c: 1784: rv = readEEPROM(0x93);
 20473  00270E  6A0F               	clrf	?_readEEPROM+1,c
 20474  002710  0E93               	movlw	147
 20475  002712  6E0E               	movwf	?_readEEPROM,c
 20476  002714  EC9C  F02E         	call	_readEEPROM	;wreg free
 20477  002718  D1B6               	goto	L53
 20478  00271A                     l10748:
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;main.c: 1789: rv = readEEPROM(0x94);
 20482  00271A  6A0F               	clrf	?_readEEPROM+1,c
 20483  00271C  0E94               	movlw	148
 20484  00271E  6E0E               	movwf	?_readEEPROM,c
 20485  002720  EC9C  F02E         	call	_readEEPROM	;wreg free
 20486  002724  D1B0               	goto	L53
 20487  002726                     l10750:
 20488                           
 20489                           ; BSR set to: 0
 20490                           ;main.c: 1794: rv = readEEPROM(0x95);
 20491  002726  6A0F               	clrf	?_readEEPROM+1,c
 20492  002728  0E95               	movlw	149
 20493  00272A  6E0E               	movwf	?_readEEPROM,c
 20494  00272C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20495  002730  D1AA               	goto	L53
 20496  002732                     l10752:
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;main.c: 1799: rv = readEEPROM(0x96);
 20500  002732  6A0F               	clrf	?_readEEPROM+1,c
 20501  002734  0E96               	movlw	150
 20502  002736  6E0E               	movwf	?_readEEPROM,c
 20503  002738  EC9C  F02E         	call	_readEEPROM	;wreg free
 20504  00273C  D1A4               	goto	L53
 20505  00273E                     l10754:
 20506                           
 20507                           ; BSR set to: 0
 20508                           ;main.c: 1809: rv = readEEPROM(0x97);
 20509  00273E  6A0F               	clrf	?_readEEPROM+1,c
 20510  002740  0E97               	movlw	151
 20511  002742  6E0E               	movwf	?_readEEPROM,c
 20512  002744  EC9C  F02E         	call	_readEEPROM	;wreg free
 20513  002748  D19E               	goto	L53
 20514  00274A                     l10756:
 20515                           
 20516                           ; BSR set to: 0
 20517                           ;main.c: 1814: rv = readEEPROM(0x98);
 20518  00274A  6A0F               	clrf	?_readEEPROM+1,c
 20519  00274C  0E98               	movlw	152
 20520  00274E  6E0E               	movwf	?_readEEPROM,c
 20521  002750  EC9C  F02E         	call	_readEEPROM	;wreg free
 20522  002754  D198               	goto	L53
 20523  002756                     l10758:
 20524                           
 20525                           ; BSR set to: 0
 20526                           ;main.c: 1819: rv = readEEPROM(0x99);
 20527  002756  6A0F               	clrf	?_readEEPROM+1,c
 20528  002758  0E99               	movlw	153
 20529  00275A  6E0E               	movwf	?_readEEPROM,c
 20530  00275C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20531  002760  D192               	goto	L53
 20532  002762                     l10760:
 20533                           
 20534                           ; BSR set to: 0
 20535                           ;main.c: 1824: rv = readEEPROM(0x9A);
 20536  002762  6A0F               	clrf	?_readEEPROM+1,c
 20537  002764  0E9A               	movlw	154
 20538  002766  6E0E               	movwf	?_readEEPROM,c
 20539  002768  EC9C  F02E         	call	_readEEPROM	;wreg free
 20540  00276C  D18C               	goto	L53
 20541  00276E                     l10762:
 20542                           
 20543                           ; BSR set to: 0
 20544                           ;main.c: 1829: rv = readEEPROM(0x9B);
 20545  00276E  6A0F               	clrf	?_readEEPROM+1,c
 20546  002770  0E9B               	movlw	155
 20547  002772  6E0E               	movwf	?_readEEPROM,c
 20548  002774  EC9C  F02E         	call	_readEEPROM	;wreg free
 20549  002778  D186               	goto	L53
 20550  00277A                     l10764:
 20551                           
 20552                           ; BSR set to: 0
 20553                           ;main.c: 1834: rv = readEEPROM(0x9C);
 20554  00277A  6A0F               	clrf	?_readEEPROM+1,c
 20555  00277C  0E9C               	movlw	156
 20556  00277E  6E0E               	movwf	?_readEEPROM,c
 20557  002780  EC9C  F02E         	call	_readEEPROM	;wreg free
 20558  002784  D180               	goto	L53
 20559  002786                     l410:
 20560                           
 20561                           ; BSR set to: 0
 20562                           ;main.c: 1839: rv = 0;
 20563  002786  6A14               	clrf	vscp_readAppReg@rv,c
 20564                           
 20565                           ;main.c: 1840: break;
 20566  002788  D17F               	goto	l10796
 20567  00278A                     l10766:
 20568                           
 20569                           ; BSR set to: 0
 20570                           ;main.c: 1848: rv = readEEPROM(0xF2);
 20571  00278A  6A0F               	clrf	?_readEEPROM+1,c
 20572  00278C  0EF2               	movlw	242
 20573  00278E  6E0E               	movwf	?_readEEPROM,c
 20574  002790  EC9C  F02E         	call	_readEEPROM	;wreg free
 20575  002794  D178               	goto	L53
 20576  002796                     l10768:
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;main.c: 1852: rv = readEEPROM(0xF3);
 20580  002796  6A0F               	clrf	?_readEEPROM+1,c
 20581  002798  0EF3               	movlw	243
 20582  00279A  6E0E               	movwf	?_readEEPROM,c
 20583  00279C  EC9C  F02E         	call	_readEEPROM	;wreg free
 20584  0027A0  D172               	goto	L53
 20585  0027A2                     l10772:
 20586                           
 20587                           ; BSR set to: 0
 20588  0027A2  5013               	movf	vscp_readAppReg@reg,w,c
 20589                           
 20590                           ; Switch size 1, requested type "speed"
 20591                           ; Number of cases is 108, Range of values is 0 to 119
 20592                           ; switch strategies available:
 20593                           ; Name         Instructions Cycles
 20594                           ; simple_byte          325   163 (average)
 20595                           ;	Chosen strategy is simple_byte
 20596  0027A4  E101 D5A9          	bz	l10570
 20597  0027A8  0A01               	xorlw	1	; case 1
 20598  0027AA  E101 D5AC          	bz	l10572
 20599  0027AE  0A03               	xorlw	3	; case 2
 20600  0027B0  E101 D5AF          	bz	l10574
 20601  0027B4  0A01               	xorlw	1	; case 3
 20602  0027B6  E101 D5B2          	bz	l10576
 20603  0027BA  0A07               	xorlw	7	; case 4
 20604  0027BC  E101 D5B5          	bz	l10578
 20605  0027C0  0A01               	xorlw	1	; case 5
 20606  0027C2  E101 D5B8          	bz	l10580
 20607  0027C6  0A03               	xorlw	3	; case 6
 20608  0027C8  E101 D5BB          	bz	l10582
 20609  0027CC  0A01               	xorlw	1	; case 7
 20610  0027CE  E101 D5BE          	bz	l10584
 20611  0027D2  0A0F               	xorlw	15	; case 8
 20612  0027D4  E101 D5C1          	bz	l10586
 20613  0027D8  0A01               	xorlw	1	; case 9
 20614  0027DA  E101 D5C0          	bz	l315
 20615  0027DE  0A03               	xorlw	3	; case 10
 20616  0027E0  E101 D5C0          	bz	l10588
 20617  0027E4  0A01               	xorlw	1	; case 11
 20618  0027E6  E101 D5BF          	bz	l317
 20619  0027EA  0A07               	xorlw	7	; case 12
 20620  0027EC  E101 D5BF          	bz	l10590
 20621  0027F0  0A01               	xorlw	1	; case 13
 20622  0027F2  E101 D5BE          	bz	l319
 20623  0027F6  0A03               	xorlw	3	; case 14
 20624  0027F8  E101 D5BE          	bz	l10592
 20625  0027FC  0A01               	xorlw	1	; case 15
 20626  0027FE  E101 D5BD          	bz	l321
 20627  002802  0A1F               	xorlw	31	; case 16
 20628  002804  E101 D5BD          	bz	l10594
 20629  002808  0A01               	xorlw	1	; case 17
 20630  00280A  E101 D5BC          	bz	l323
 20631  00280E  0A03               	xorlw	3	; case 18
 20632  002810  E101 D5BC          	bz	l10596
 20633  002814  0A01               	xorlw	1	; case 19
 20634  002816  E101 D5BB          	bz	l325
 20635  00281A  0A07               	xorlw	7	; case 20
 20636  00281C  E101 D5BB          	bz	l10598
 20637  002820  0A01               	xorlw	1	; case 21
 20638  002822  E101 D5BE          	bz	l10600
 20639  002826  0A03               	xorlw	3	; case 22
 20640  002828  E101 D5C1          	bz	l10602
 20641  00282C  0A01               	xorlw	1	; case 23
 20642  00282E  E101 D5C4          	bz	l10604
 20643  002832  0A0F               	xorlw	15	; case 24
 20644  002834  E101 D5C7          	bz	l10606
 20645  002838  0A01               	xorlw	1	; case 25
 20646  00283A  E101 D5CA          	bz	l10608
 20647  00283E  0A3F               	xorlw	63	; case 38
 20648  002840  E101 D5CD          	bz	l10610
 20649  002844  0A01               	xorlw	1	; case 39
 20650  002846  E101 D5D0          	bz	l10612
 20651  00284A  0A0F               	xorlw	15	; case 40
 20652  00284C  E101 D5D3          	bz	l10614
 20653  002850  0A01               	xorlw	1	; case 41
 20654  002852  E101 D5D6          	bz	l10616
 20655  002856  0A03               	xorlw	3	; case 42
 20656  002858  E101 D5D9          	bz	l10618
 20657  00285C  0A01               	xorlw	1	; case 43
 20658  00285E  E101 D5DC          	bz	l10620
 20659  002862  0A07               	xorlw	7	; case 44
 20660  002864  E101 D5DF          	bz	l10622
 20661  002868  0A01               	xorlw	1	; case 45
 20662  00286A  E101 D5E2          	bz	l10624
 20663  00286E  0A03               	xorlw	3	; case 46
 20664  002870  E101 D5E5          	bz	l10626
 20665  002874  0A01               	xorlw	1	; case 47
 20666  002876  E101 D5E8          	bz	l10628
 20667  00287A  0A1F               	xorlw	31	; case 48
 20668  00287C  E101 D5EB          	bz	l10630
 20669  002880  0A01               	xorlw	1	; case 49
 20670  002882  E101 D5EE          	bz	l10632
 20671  002886  0A03               	xorlw	3	; case 50
 20672  002888  E101 D5F1          	bz	l10634
 20673  00288C  0A01               	xorlw	1	; case 51
 20674  00288E  E101 D5F4          	bz	l10636
 20675  002892  0A07               	xorlw	7	; case 52
 20676  002894  E101 D5F7          	bz	l10638
 20677  002898  0A01               	xorlw	1	; case 53
 20678  00289A  E101 D5FA          	bz	l10640
 20679  00289E  0A03               	xorlw	3	; case 54
 20680  0028A0  E101 D5FD          	bz	l10642
 20681  0028A4  0A01               	xorlw	1	; case 55
 20682  0028A6  E101 D600          	bz	l10644
 20683  0028AA  0A0F               	xorlw	15	; case 56
 20684  0028AC  E101 D603          	bz	l10646
 20685  0028B0  0A01               	xorlw	1	; case 57
 20686  0028B2  E101 D606          	bz	l10648
 20687  0028B6  0A03               	xorlw	3	; case 58
 20688  0028B8  E101 D609          	bz	l10650
 20689  0028BC  0A01               	xorlw	1	; case 59
 20690  0028BE  E101 D60C          	bz	l10652
 20691  0028C2  0A07               	xorlw	7	; case 60
 20692  0028C4  E101 D60F          	bz	l10654
 20693  0028C8  0A01               	xorlw	1	; case 61
 20694  0028CA  E101 D612          	bz	l10656
 20695  0028CE  0A03               	xorlw	3	; case 62
 20696  0028D0  E101 D615          	bz	l10658
 20697  0028D4  0A01               	xorlw	1	; case 63
 20698  0028D6  E101 D618          	bz	l10660
 20699  0028DA  0A7F               	xorlw	127	; case 64
 20700  0028DC  E101 D61B          	bz	l10662
 20701  0028E0  0A01               	xorlw	1	; case 65
 20702  0028E2  E101 D61E          	bz	l10664
 20703  0028E6  0A03               	xorlw	3	; case 66
 20704  0028E8  E101 D621          	bz	l10666
 20705  0028EC  0A01               	xorlw	1	; case 67
 20706  0028EE  E101 D624          	bz	l10668
 20707  0028F2  0A07               	xorlw	7	; case 68
 20708  0028F4  E101 D627          	bz	l10670
 20709  0028F8  0A01               	xorlw	1	; case 69
 20710  0028FA  E101 D62A          	bz	l10672
 20711  0028FE  0A03               	xorlw	3	; case 70
 20712  002900  E101 D62D          	bz	l10674
 20713  002904  0A01               	xorlw	1	; case 71
 20714  002906  E101 D630          	bz	l10676
 20715  00290A  0A0F               	xorlw	15	; case 72
 20716  00290C  E101 D633          	bz	l10678
 20717  002910  0A01               	xorlw	1	; case 73
 20718  002912  E101 D636          	bz	l10680
 20719  002916  0A03               	xorlw	3	; case 74
 20720  002918  E101 D639          	bz	l10682
 20721  00291C  0A01               	xorlw	1	; case 75
 20722  00291E  E101 D63C          	bz	l10684
 20723  002922  0A07               	xorlw	7	; case 76
 20724  002924  E101 D63F          	bz	l10686
 20725  002928  0A01               	xorlw	1	; case 77
 20726  00292A  E101 D642          	bz	l10688
 20727  00292E  0A03               	xorlw	3	; case 78
 20728  002930  E101 D645          	bz	l10690
 20729  002934  0A01               	xorlw	1	; case 79
 20730  002936  E101 D648          	bz	l10692
 20731  00293A  0A1F               	xorlw	31	; case 80
 20732  00293C  E101 D64B          	bz	l10694
 20733  002940  0A01               	xorlw	1	; case 81
 20734  002942  E101 D64E          	bz	l10696
 20735  002946  0A03               	xorlw	3	; case 82
 20736  002948  E101 D651          	bz	l10698
 20737  00294C  0A01               	xorlw	1	; case 83
 20738  00294E  E101 D654          	bz	l10700
 20739  002952  0A07               	xorlw	7	; case 84
 20740  002954  E101 D657          	bz	l10702
 20741  002958  0A01               	xorlw	1	; case 85
 20742  00295A  E101 D65A          	bz	l10704
 20743  00295E  0A03               	xorlw	3	; case 86
 20744  002960  E101 D65D          	bz	l10706
 20745  002964  0A01               	xorlw	1	; case 87
 20746  002966  E101 D660          	bz	l10708
 20747  00296A  0A0F               	xorlw	15	; case 88
 20748  00296C  E101 D663          	bz	l10710
 20749  002970  0A01               	xorlw	1	; case 89
 20750  002972  E101 D666          	bz	l10712
 20751  002976  0A03               	xorlw	3	; case 90
 20752  002978  E101 D669          	bz	l10714
 20753  00297C  0A01               	xorlw	1	; case 91
 20754  00297E  E101 D66C          	bz	l10716
 20755  002982  0A07               	xorlw	7	; case 92
 20756  002984  E101 D66F          	bz	l10718
 20757  002988  0A01               	xorlw	1	; case 93
 20758  00298A  E101 D672          	bz	l10720
 20759  00298E  0A03               	xorlw	3	; case 94
 20760  002990  E101 D675          	bz	l10722
 20761  002994  0A01               	xorlw	1	; case 95
 20762  002996  E101 D678          	bz	l10724
 20763  00299A  0A3F               	xorlw	63	; case 96
 20764  00299C  E101 D67B          	bz	l10726
 20765  0029A0  0A01               	xorlw	1	; case 97
 20766  0029A2  E101 D67E          	bz	l10728
 20767  0029A6  0A03               	xorlw	3	; case 98
 20768  0029A8  E101 D681          	bz	l10730
 20769  0029AC  0A01               	xorlw	1	; case 99
 20770  0029AE  E101 D684          	bz	l10732
 20771  0029B2  0A07               	xorlw	7	; case 100
 20772  0029B4  E101 D687          	bz	l10734
 20773  0029B8  0A01               	xorlw	1	; case 101
 20774  0029BA  E101 D68A          	bz	l10736
 20775  0029BE  0A03               	xorlw	3	; case 102
 20776  0029C0  E101 D68D          	bz	l10738
 20777  0029C4  0A01               	xorlw	1	; case 103
 20778  0029C6  E101 D690          	bz	l10740
 20779  0029CA  0A0F               	xorlw	15	; case 104
 20780  0029CC  E101 D693          	bz	l10742
 20781  0029D0  0A01               	xorlw	1	; case 105
 20782  0029D2  E101 D696          	bz	l10744
 20783  0029D6  0A03               	xorlw	3	; case 106
 20784  0029D8  E101 D699          	bz	l10746
 20785  0029DC  0A01               	xorlw	1	; case 107
 20786  0029DE  E101 D69C          	bz	l10748
 20787  0029E2  0A07               	xorlw	7	; case 108
 20788  0029E4  E101 D69F          	bz	l10750
 20789  0029E8  0A01               	xorlw	1	; case 109
 20790  0029EA  E101 D6A2          	bz	l10752
 20791  0029EE  0A03               	xorlw	3	; case 110
 20792  0029F0  E101 D6A5          	bz	l10754
 20793  0029F4  0A01               	xorlw	1	; case 111
 20794  0029F6  E101 D6A8          	bz	l10756
 20795  0029FA  0A1F               	xorlw	31	; case 112
 20796  0029FC  E101 D6AB          	bz	l10758
 20797  002A00  0A01               	xorlw	1	; case 113
 20798  002A02  E101 D6AE          	bz	l10760
 20799  002A06  0A03               	xorlw	3	; case 114
 20800  002A08  E101 D6B1          	bz	l10762
 20801  002A0C  0A01               	xorlw	1	; case 115
 20802  002A0E  E101 D6B4          	bz	l10764
 20803  002A12  0A07               	xorlw	7	; case 116
 20804  002A14  E101 D6B7          	bz	l410
 20805  002A18  0A01               	xorlw	1	; case 117
 20806  002A1A  E101 D6B4          	bz	l410
 20807  002A1E  0A03               	xorlw	3	; case 118
 20808  002A20  E101 D6B3          	bz	l10766
 20809  002A24  0A01               	xorlw	1	; case 119
 20810  002A26  E101 D6B6          	bz	l10768
 20811  002A2A  D6AD               	goto	l410
 20812  002A2C                     l10774:
 20813                           
 20814                           ; BSR set to: 0
 20815                           ;main.c: 1860: else if (1 == vscp_page_select) {
 20816  002A2C  0446               	decf	_vscp_page_select,w,c
 20817  002A2E  1047               	iorwf	_vscp_page_select+1,w,c
 20818  002A30  E12B               	bnz	l10796
 20819                           
 20820                           ; BSR set to: 0
 20821                           ;main.c: 1862: if (reg < 72) {
 20822  002A32  0E48               	movlw	72
 20823  002A34  6013               	cpfslt	vscp_readAppReg@reg,c
 20824  002A36  D009               	goto	l10780
 20825                           
 20826                           ; BSR set to: 0
 20827                           ;main.c: 1863: rv = readEEPROM(0xAA + reg ) ;
 20828  002A38  0EAA               	movlw	170
 20829  002A3A  2413               	addwf	vscp_readAppReg@reg,w,c
 20830  002A3C  6E0E               	movwf	?_readEEPROM,c
 20831  002A3E  6A0F               	clrf	?_readEEPROM+1,c
 20832  002A40  0E00               	movlw	0
 20833  002A42  220F               	addwfc	?_readEEPROM+1,f,c
 20834  002A44  EC9C  F02E         	call	_readEEPROM	;wreg free
 20835  002A48  D01E               	goto	L53
 20836  002A4A                     l10780:
 20837                           
 20838                           ; BSR set to: 0
 20839                           ;main.c: 1866: else if (reg < 84) {
 20840  002A4A  0E54               	movlw	84
 20841  002A4C  6013               	cpfslt	vscp_readAppReg@reg,c
 20842  002A4E  D010               	goto	l10792
 20843                           
 20844                           ; BSR set to: 0
 20845                           ;main.c: 1868: uint8_t pos = reg - 72;
 20846  002A50  5013               	movf	vscp_readAppReg@reg,w,c
 20847  002A52  0FB8               	addlw	184
 20848  002A54  6E12               	movwf	vscp_readAppReg@pos,c
 20849                           
 20850                           ; BSR set to: 0
 20851                           ;main.c: 1869: if ( pos % 2 ) {
 20852  002A56  A012               	btfss	vscp_readAppReg@pos,0,c
 20853  002A58  D002               	goto	l10788
 20854                           
 20855                           ; BSR set to: 0
 20856                           ;main.c: 1870: pos--;
 20857  002A5A  0612               	decf	vscp_readAppReg@pos,f,c
 20858                           
 20859                           ;main.c: 1871: }
 20860  002A5C  D001               	goto	l10790
 20861  002A5E                     l10788:
 20862                           
 20863                           ; BSR set to: 0
 20864                           ;main.c: 1872: else {
 20865                           ;main.c: 1873: pos++;
 20866  002A5E  2A12               	incf	vscp_readAppReg@pos,f,c
 20867  002A60                     l10790:
 20868                           
 20869                           ; BSR set to: 0
 20870                           ;main.c: 1874: }
 20871                           ;main.c: 1875: rv = adc[ pos ];
 20872  002A60  0E7E               	movlw	low _adc
 20873  002A62  2412               	addwf	vscp_readAppReg@pos,w,c
 20874  002A64  6ED9               	movwf	fsr2l,c
 20875  002A66  6ADA               	clrf	fsr2h,c
 20876  002A68  0E01               	movlw	high _adc
 20877  002A6A  22DA               	addwfc	fsr2h,f,c
 20878  002A6C  50DF               	movf	indf2,w,c
 20879  002A6E  D00B               	goto	L53
 20880  002A70                     l10792:
 20881                           
 20882                           ; BSR set to: 0
 20883                           ;main.c: 1878: else if (reg < 98) {
 20884  002A70  0E62               	movlw	98
 20885  002A72  6013               	cpfslt	vscp_readAppReg@reg,c
 20886  002A74  D009               	goto	l10796
 20887                           
 20888                           ; BSR set to: 0
 20889                           ;main.c: 1879: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20890  002A76  0E4A               	movlw	74
 20891  002A78  2413               	addwf	vscp_readAppReg@reg,w,c
 20892  002A7A  6E0E               	movwf	?_readEEPROM,c
 20893  002A7C  6A0F               	clrf	?_readEEPROM+1,c
 20894  002A7E  0E00               	movlw	0
 20895  002A80  220F               	addwfc	?_readEEPROM+1,f,c
 20896  002A82  EC9C  F02E         	call	_readEEPROM	;wreg free
 20897  002A86                     L53:
 20898  002A86  6E14               	movwf	vscp_readAppReg@rv,c
 20899  002A88                     l10796:
 20900                           
 20901                           ;main.c: 1880: }
 20902                           ;main.c: 1881: }
 20903                           ;main.c: 1883: return rv;
 20904  002A88  5014               	movf	vscp_readAppReg@rv,w,c
 20905  002A8A  0012               	return	
 20906  002A8C                     __end_of_vscp_readAppReg:
 20907                           	opt stack 0
 20908                           tblptru	equ	0xFF8
 20909                           tblptrh	equ	0xFF7
 20910                           tblptrl	equ	0xFF6
 20911                           tablat	equ	0xFF5
 20912                           prodh	equ	0xFF4
 20913                           prodl	equ	0xFF3
 20914                           intcon	equ	0xFF2
 20915                           postinc0	equ	0xFEE
 20916                           wreg	equ	0xFE8
 20917                           indf1	equ	0xFE7
 20918                           postdec1	equ	0xFE5
 20919                           fsr1h	equ	0xFE2
 20920                           fsr1l	equ	0xFE1
 20921                           indf2	equ	0xFDF
 20922                           postinc2	equ	0xFDE
 20923                           postdec2	equ	0xFDD
 20924                           plusw2	equ	0xFDB
 20925                           fsr2h	equ	0xFDA
 20926                           fsr2l	equ	0xFD9
 20927                           status	equ	0xFD8
 20928                           
 20929 ;; *************** function _interrupt_at_low_vector *****************
 20930 ;; Defined at:
 20931 ;;		line 135 in file "../main.c"
 20932 ;; Parameters:    Size  Location     Type
 20933 ;;		None
 20934 ;; Auto vars:     Size  Location     Type
 20935 ;;		None
 20936 ;; Return value:  Size  Location     Type
 20937 ;;		None               void
 20938 ;; Registers used:
 20939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20940 ;; Tracked objects:
 20941 ;;		On entry : 0/0
 20942 ;;		On exit  : 0/0
 20943 ;;		Unchanged: 0/0
 20944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20945 ;;      Params:         0       0       0       0       0       0       0
 20946 ;;      Locals:         0       0       0       0       0       0       0
 20947 ;;      Temps:          9       0       0       0       0       0       0
 20948 ;;      Totals:         9       0       0       0       0       0       0
 20949 ;;Total ram usage:        9 bytes
 20950 ;; Hardware stack levels used:    1
 20951 ;; Hardware stack levels required when called:    1
 20952 ;; This function calls:
 20953 ;;		i1_ConvertADC
 20954 ;;		i1_WriteTimer0
 20955 ;; This function is called by:
 20956 ;;		Interrupt level 1
 20957 ;; This function uses a non-reentrant model
 20958 ;;
 20959                           
 20960                           	psect	intcodelo
 20961  000818                     __pintcodelo:
 20962                           	opt stack 0
 20963  000818                     _interrupt_at_low_vector:
 20964                           	opt stack 22
 20965                           
 20966                           ;incstack = 0
 20967  000818  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20968  00081C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20969  000820  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20970  000824  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20971  000828  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20972  00082C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20973  000830  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20974  000834                     
 20975                           ;main.c: 137: if (INTCONbits.TMR0IF) {
 20976  000834  A4F2               	btfss	intcon,2,c	;volatile
 20977  000836  D001               	goto	i1u718_21
 20978  000838  D001               	goto	i1u718_20
 20979  00083A                     i1u718_21:
 20980  00083A  D045               	goto	i1l9206
 20981  00083C                     i1u718_20:
 20982  00083C                     
 20983                           ;main.c: 140: WriteTimer0(0xfb1d);
 20984  00083C  0EFB               	movlw	251
 20985  00083E  6E02               	movwf	?i1_WriteTimer0+1,c
 20986  000840  0E1D               	movlw	29
 20987  000842  6E01               	movwf	?i1_WriteTimer0,c
 20988  000844  ECCA  F02E         	call	i1_WriteTimer0	;wreg free
 20989  000848                     
 20990                           ;main.c: 142: vscp_timer++;
 20991  000848  0100               	movlb	0	; () banked
 20992  00084A  4B7E               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20993  00084C  2B7F               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20994  00084E                     
 20995                           ; BSR set to: 0
 20996                           ;main.c: 143: vscp_configtimer++;
 20997  00084E  4B7C               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20998  000850  2B7D               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20999  000852                     
 21000                           ; BSR set to: 0
 21001                           ;main.c: 144: measurement_clock++;
 21002  000852  0E01               	movlw	1
 21003  000854  2772               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21004  000856  0E00               	movlw	0
 21005  000858  2373               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21006  00085A  0E00               	movlw	0
 21007  00085C  2374               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21008  00085E  0E00               	movlw	0
 21009  000860  2375               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21010  000862                     
 21011                           ; BSR set to: 0
 21012                           ;main.c: 145: timeout_clock++;
 21013  000862  0E01               	movlw	1
 21014  000864  2776               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21015  000866  0E00               	movlw	0
 21016  000868  2377               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21017  00086A  0E00               	movlw	0
 21018  00086C  2378               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21019  00086E  0E00               	movlw	0
 21020  000870  2379               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21021  000872                     
 21022                           ; BSR set to: 0
 21023                           ;main.c: 146: sendTimer++;
 21024  000872  4B7A               	infsnz	_sendTimer& (0+255),f,b	;volatile
 21025  000874  2B7B               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 21026  000876                     
 21027                           ; BSR set to: 0
 21028                           ;main.c: 149: if (!(PORTC & 0x01)) {
 21029  000876  B082               	btfsc	3970,0,c	;volatile
 21030  000878  D001               	goto	i1u719_21
 21031  00087A  D001               	goto	i1u719_20
 21032  00087C                     i1u719_21:
 21033  00087C  D002               	goto	i1l138
 21034  00087E                     i1u719_20:
 21035  00087E                     
 21036                           ; BSR set to: 0
 21037                           ;main.c: 151: vscp_initbtncnt++;
 21038  00087E  2B85               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21039                           
 21040                           ;main.c: 152: }
 21041  000880  D001               	goto	i1l9180
 21042  000882                     i1l138:
 21043                           
 21044                           ; BSR set to: 0
 21045                           ;main.c: 153: else {
 21046                           ;main.c: 154: vscp_initbtncnt = 0;
 21047  000882  6B85               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21048  000884                     i1l9180:
 21049                           
 21050                           ; BSR set to: 0
 21051                           ;main.c: 155: }
 21052                           ;main.c: 158: vscp_statuscnt++;
 21053  000884  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21054  000886                     
 21055                           ; BSR set to: 0
 21056                           ;main.c: 159: if ( ( 0x02 ==
 21057                           ;main.c: 160: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21058  000886  504C               	movf	_vscp_initledfunc,w,c
 21059  000888  0A02               	xorlw	2
 21060  00088A  A4D8               	btfss	status,2,c
 21061  00088C  D001               	goto	i1u720_21
 21062  00088E  D001               	goto	i1u720_20
 21063  000890                     i1u720_21:
 21064  000890  D00E               	goto	i1l9194
 21065  000892                     i1u720_20:
 21066  000892                     
 21067                           ; BSR set to: 0
 21068  000892  0E64               	movlw	100
 21069  000894  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21070  000896  D001               	goto	i1u721_21
 21071  000898  D001               	goto	i1u721_20
 21072  00089A                     i1u721_21:
 21073  00089A  D009               	goto	i1l9194
 21074  00089C                     i1u721_20:
 21075  00089C                     
 21076                           ; BSR set to: 0
 21077                           ;main.c: 161: if ( PORTC & 0x02 ) {
 21078  00089C  A282               	btfss	3970,1,c	;volatile
 21079  00089E  D001               	goto	i1u722_21
 21080  0008A0  D001               	goto	i1u722_20
 21081  0008A2                     i1u722_21:
 21082  0008A2  D002               	goto	i1l9190
 21083  0008A4                     i1u722_20:
 21084  0008A4                     i1l9188:
 21085                           
 21086                           ; BSR set to: 0
 21087                           ;main.c: 162: PORTC &= ~0x02;
 21088  0008A4  9282               	bcf	3970,1,c	;volatile
 21089                           
 21090                           ;main.c: 163: }
 21091  0008A6  D001               	goto	i1l9192
 21092  0008A8                     i1l9190:
 21093                           
 21094                           ; BSR set to: 0
 21095                           ;main.c: 164: else {
 21096                           ;main.c: 165: PORTC |= 0x02;
 21097  0008A8  8282               	bsf	3970,1,c	;volatile
 21098  0008AA                     i1l9192:
 21099                           
 21100                           ; BSR set to: 0
 21101                           ;main.c: 166: }
 21102                           ;main.c: 167: vscp_statuscnt = 0;
 21103  0008AA  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21104                           
 21105                           ;main.c: 168: }
 21106  0008AC  D00B               	goto	i1l9204
 21107  0008AE                     i1l9194:
 21108                           
 21109                           ; BSR set to: 0
 21110                           ;main.c: 169: else if (0x01 == vscp_initledfunc) {
 21111  0008AE  044C               	decf	_vscp_initledfunc,w,c
 21112  0008B0  A4D8               	btfss	status,2,c
 21113  0008B2  D001               	goto	i1u723_21
 21114  0008B4  D001               	goto	i1u723_20
 21115  0008B6                     i1u723_21:
 21116  0008B6  D001               	goto	i1l144
 21117  0008B8                     i1u723_20:
 21118  0008B8  D7F7               	goto	i1l9190
 21119  0008BA                     i1l144:
 21120                           
 21121                           ; BSR set to: 0
 21122                           ;main.c: 173: else if (0x00 == vscp_initledfunc) {
 21123  0008BA  664C               	tstfsz	_vscp_initledfunc,c
 21124  0008BC  D001               	goto	i1u724_21
 21125  0008BE  D001               	goto	i1u724_20
 21126  0008C0                     i1u724_21:
 21127  0008C0  D001               	goto	i1l9204
 21128  0008C2                     i1u724_20:
 21129  0008C2  D7F0               	goto	i1l9188
 21130  0008C4                     i1l9204:
 21131                           
 21132                           ; BSR set to: 0
 21133                           ;main.c: 176: }
 21134                           ;main.c: 178: INTCONbits.TMR0IF = 0;
 21135  0008C4  94F2               	bcf	intcon,2,c	;volatile
 21136  0008C6                     i1l9206:
 21137                           
 21138                           ;main.c: 180: }
 21139                           ;main.c: 183: if ( PIR1bits.ADIF ) {
 21140  0008C6  AC9E               	btfss	3998,6,c	;volatile
 21141  0008C8  D001               	goto	i1u725_21
 21142  0008CA  D001               	goto	i1u725_20
 21143  0008CC                     i1u725_21:
 21144  0008CC  D0E5               	goto	i1l164
 21145  0008CE                     i1u725_20:
 21146  0008CE  D0C4               	goto	i1l9268
 21147  0008D0                     i1l9210:
 21148                           
 21149                           ;main.c: 189: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21150  0008D0  5049               	movf	_adc_series_counter,w,c
 21151  0008D2  0D0C               	mullw	12
 21152  0008D4  0E7E               	movlw	low _adc
 21153  0008D6  24F3               	addwf	prodl,w,c
 21154  0008D8  6ED9               	movwf	fsr2l,c
 21155  0008DA  0E01               	movlw	high _adc
 21156  0008DC  20F4               	addwfc	prodh,w,c
 21157  0008DE  6EDA               	movwf	fsr2h,c
 21158  0008E0  CFC4 FFDF          	movff	4036,indf2	;volatile
 21159                           
 21160                           ;main.c: 190: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21161  0008E4  5049               	movf	_adc_series_counter,w,c
 21162  0008E6  0D0C               	mullw	12
 21163  0008E8  0E7F               	movlw	low (_adc+1)
 21164  0008EA  24F3               	addwf	prodl,w,c
 21165  0008EC  6ED9               	movwf	fsr2l,c
 21166  0008EE  0E01               	movlw	high (_adc+1)
 21167  0008F0  20F4               	addwfc	prodh,w,c
 21168  0008F2  6EDA               	movwf	fsr2h,c
 21169  0008F4  CFC3 FFDF          	movff	4035,indf2	;volatile
 21170  0008F8                     
 21171                           ;main.c: 192: ADCON0 = (2<<2) + 1;
 21172  0008F8  0E09               	movlw	9
 21173  0008FA  6EC2               	movwf	4034,c	;volatile
 21174  0008FC                     
 21175                           ;main.c: 196: if ((80 - 1) == adc_series_counter) {
 21176  0008FC  5049               	movf	_adc_series_counter,w,c
 21177  0008FE  0A4F               	xorlw	79
 21178  000900  A4D8               	btfss	status,2,c
 21179  000902  D001               	goto	i1u726_21
 21180  000904  D001               	goto	i1u726_20
 21181  000906                     i1u726_21:
 21182  000906  D0C5               	goto	i1l9270
 21183  000908                     i1u726_20:
 21184  000908                     
 21185                           ;main.c: 197: adc_conversion_flags |= 1;
 21186  000908  0100               	movlb	0	; () banked
 21187  00090A  8180               	bsf	_adc_conversion_flags& (0+255),0,b
 21188  00090C  D0C2               	goto	i1l9270
 21189  00090E                     i1l9218:
 21190                           
 21191                           ;main.c: 203: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21192  00090E  5049               	movf	_adc_series_counter,w,c
 21193  000910  0D0C               	mullw	12
 21194  000912  0E80               	movlw	low (_adc+2)
 21195  000914  24F3               	addwf	prodl,w,c
 21196  000916  6ED9               	movwf	fsr2l,c
 21197  000918  0E01               	movlw	high (_adc+2)
 21198  00091A  20F4               	addwfc	prodh,w,c
 21199  00091C  6EDA               	movwf	fsr2h,c
 21200  00091E  CFC4 FFDF          	movff	4036,indf2	;volatile
 21201                           
 21202                           ;main.c: 204: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21203  000922  5049               	movf	_adc_series_counter,w,c
 21204  000924  0D0C               	mullw	12
 21205  000926  0E81               	movlw	low (_adc+3)
 21206  000928  24F3               	addwf	prodl,w,c
 21207  00092A  6ED9               	movwf	fsr2l,c
 21208  00092C  0E01               	movlw	high (_adc+3)
 21209  00092E  20F4               	addwfc	prodh,w,c
 21210  000930  6EDA               	movwf	fsr2h,c
 21211  000932  CFC3 FFDF          	movff	4035,indf2	;volatile
 21212  000936                     
 21213                           ;main.c: 207: ADCON0 = (1<<2) + 1;
 21214  000936  0E05               	movlw	5
 21215  000938  6EC2               	movwf	4034,c	;volatile
 21216  00093A                     
 21217                           ;main.c: 211: if ((80 - 1) == adc_series_counter) {
 21218  00093A  5049               	movf	_adc_series_counter,w,c
 21219  00093C  0A4F               	xorlw	79
 21220  00093E  A4D8               	btfss	status,2,c
 21221  000940  D001               	goto	i1u727_21
 21222  000942  D001               	goto	i1u727_20
 21223  000944                     i1u727_21:
 21224  000944  D0A6               	goto	i1l9270
 21225  000946                     i1u727_20:
 21226  000946                     
 21227                           ;main.c: 212: adc_conversion_flags |= 1 << 1;
 21228  000946  0100               	movlb	0	; () banked
 21229  000948  8380               	bsf	_adc_conversion_flags& (0+255),1,b
 21230  00094A  D0A3               	goto	i1l9270
 21231  00094C                     i1l9226:
 21232                           
 21233                           ;main.c: 218: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21234  00094C  5049               	movf	_adc_series_counter,w,c
 21235  00094E  0D0C               	mullw	12
 21236  000950  0E82               	movlw	low (_adc+4)
 21237  000952  24F3               	addwf	prodl,w,c
 21238  000954  6ED9               	movwf	fsr2l,c
 21239  000956  0E01               	movlw	high (_adc+4)
 21240  000958  20F4               	addwfc	prodh,w,c
 21241  00095A  6EDA               	movwf	fsr2h,c
 21242  00095C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21243                           
 21244                           ;main.c: 219: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21245  000960  5049               	movf	_adc_series_counter,w,c
 21246  000962  0D0C               	mullw	12
 21247  000964  0E83               	movlw	low (_adc+5)
 21248  000966  24F3               	addwf	prodl,w,c
 21249  000968  6ED9               	movwf	fsr2l,c
 21250  00096A  0E01               	movlw	high (_adc+5)
 21251  00096C  20F4               	addwfc	prodh,w,c
 21252  00096E  6EDA               	movwf	fsr2h,c
 21253  000970  CFC3 FFDF          	movff	4035,indf2	;volatile
 21254  000974                     
 21255                           ;main.c: 222: ADCON0 = (0<<2) + 1;
 21256  000974  0E01               	movlw	1
 21257  000976  6EC2               	movwf	4034,c	;volatile
 21258  000978                     
 21259                           ;main.c: 226: if ((80 - 1) == adc_series_counter) {
 21260  000978  5049               	movf	_adc_series_counter,w,c
 21261  00097A  0A4F               	xorlw	79
 21262  00097C  A4D8               	btfss	status,2,c
 21263  00097E  D001               	goto	i1u728_21
 21264  000980  D001               	goto	i1u728_20
 21265  000982                     i1u728_21:
 21266  000982  D087               	goto	i1l9270
 21267  000984                     i1u728_20:
 21268  000984                     
 21269                           ;main.c: 227: adc_conversion_flags |= 1 << 2;
 21270  000984  0100               	movlb	0	; () banked
 21271  000986  8580               	bsf	_adc_conversion_flags& (0+255),2,b
 21272  000988  D084               	goto	i1l9270
 21273  00098A                     i1l9234:
 21274                           
 21275                           ;main.c: 233: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21276  00098A  5049               	movf	_adc_series_counter,w,c
 21277  00098C  0D0C               	mullw	12
 21278  00098E  0E84               	movlw	low (_adc+6)
 21279  000990  24F3               	addwf	prodl,w,c
 21280  000992  6ED9               	movwf	fsr2l,c
 21281  000994  0E01               	movlw	high (_adc+6)
 21282  000996  20F4               	addwfc	prodh,w,c
 21283  000998  6EDA               	movwf	fsr2h,c
 21284  00099A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21285                           
 21286                           ;main.c: 234: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21287  00099E  5049               	movf	_adc_series_counter,w,c
 21288  0009A0  0D0C               	mullw	12
 21289  0009A2  0E85               	movlw	low (_adc+7)
 21290  0009A4  24F3               	addwf	prodl,w,c
 21291  0009A6  6ED9               	movwf	fsr2l,c
 21292  0009A8  0E01               	movlw	high (_adc+7)
 21293  0009AA  20F4               	addwfc	prodh,w,c
 21294  0009AC  6EDA               	movwf	fsr2h,c
 21295  0009AE  CFC3 FFDF          	movff	4035,indf2	;volatile
 21296  0009B2                     
 21297                           ;main.c: 236: ADCON0 = (9<<2) + 1;
 21298  0009B2  0E25               	movlw	37
 21299  0009B4  6EC2               	movwf	4034,c	;volatile
 21300  0009B6                     
 21301                           ;main.c: 240: if ((80 - 1) == adc_series_counter) {
 21302  0009B6  5049               	movf	_adc_series_counter,w,c
 21303  0009B8  0A4F               	xorlw	79
 21304  0009BA  A4D8               	btfss	status,2,c
 21305  0009BC  D001               	goto	i1u729_21
 21306  0009BE  D001               	goto	i1u729_20
 21307  0009C0                     i1u729_21:
 21308  0009C0  D068               	goto	i1l9270
 21309  0009C2                     i1u729_20:
 21310  0009C2                     
 21311                           ;main.c: 241: adc_conversion_flags |= 1 << 3;
 21312  0009C2  0100               	movlb	0	; () banked
 21313  0009C4  8780               	bsf	_adc_conversion_flags& (0+255),3,b
 21314  0009C6  D065               	goto	i1l9270
 21315  0009C8                     i1l9242:
 21316                           
 21317                           ;main.c: 247: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21318  0009C8  5049               	movf	_adc_series_counter,w,c
 21319  0009CA  0D0C               	mullw	12
 21320  0009CC  0E86               	movlw	low (_adc+8)
 21321  0009CE  24F3               	addwf	prodl,w,c
 21322  0009D0  6ED9               	movwf	fsr2l,c
 21323  0009D2  0E01               	movlw	high (_adc+8)
 21324  0009D4  20F4               	addwfc	prodh,w,c
 21325  0009D6  6EDA               	movwf	fsr2h,c
 21326  0009D8  CFC4 FFDF          	movff	4036,indf2	;volatile
 21327                           
 21328                           ;main.c: 248: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21329  0009DC  5049               	movf	_adc_series_counter,w,c
 21330  0009DE  0D0C               	mullw	12
 21331  0009E0  0E87               	movlw	low (_adc+9)
 21332  0009E2  24F3               	addwf	prodl,w,c
 21333  0009E4  6ED9               	movwf	fsr2l,c
 21334  0009E6  0E01               	movlw	high (_adc+9)
 21335  0009E8  20F4               	addwfc	prodh,w,c
 21336  0009EA  6EDA               	movwf	fsr2h,c
 21337  0009EC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21338  0009F0                     
 21339                           ;main.c: 250: ADCON0 = (8<<2) + 1;
 21340  0009F0  0E21               	movlw	33
 21341  0009F2  6EC2               	movwf	4034,c	;volatile
 21342  0009F4                     
 21343                           ;main.c: 254: if ((80 - 1) == adc_series_counter) {
 21344  0009F4  5049               	movf	_adc_series_counter,w,c
 21345  0009F6  0A4F               	xorlw	79
 21346  0009F8  A4D8               	btfss	status,2,c
 21347  0009FA  D001               	goto	i1u730_21
 21348  0009FC  D001               	goto	i1u730_20
 21349  0009FE                     i1u730_21:
 21350  0009FE  D049               	goto	i1l9270
 21351  000A00                     i1u730_20:
 21352  000A00                     
 21353                           ;main.c: 255: adc_conversion_flags |= 1 << 4;
 21354  000A00  0100               	movlb	0	; () banked
 21355  000A02  8980               	bsf	_adc_conversion_flags& (0+255),4,b
 21356  000A04  D046               	goto	i1l9270
 21357  000A06                     i1l9250:
 21358                           
 21359                           ;main.c: 261: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21360  000A06  5049               	movf	_adc_series_counter,w,c
 21361  000A08  0D0C               	mullw	12
 21362  000A0A  0E88               	movlw	low (_adc+10)
 21363  000A0C  24F3               	addwf	prodl,w,c
 21364  000A0E  6ED9               	movwf	fsr2l,c
 21365  000A10  0E01               	movlw	high (_adc+10)
 21366  000A12  20F4               	addwfc	prodh,w,c
 21367  000A14  6EDA               	movwf	fsr2h,c
 21368  000A16  CFC4 FFDF          	movff	4036,indf2	;volatile
 21369                           
 21370                           ;main.c: 262: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21371  000A1A  5049               	movf	_adc_series_counter,w,c
 21372  000A1C  0D0C               	mullw	12
 21373  000A1E  0E89               	movlw	low (_adc+11)
 21374  000A20  24F3               	addwf	prodl,w,c
 21375  000A22  6ED9               	movwf	fsr2l,c
 21376  000A24  0E01               	movlw	high (_adc+11)
 21377  000A26  20F4               	addwfc	prodh,w,c
 21378  000A28  6EDA               	movwf	fsr2h,c
 21379  000A2A  CFC3 FFDF          	movff	4035,indf2	;volatile
 21380  000A2E                     
 21381                           ;main.c: 264: ADCON0 = (10<<2) + 1;
 21382  000A2E  0E29               	movlw	41
 21383  000A30  6EC2               	movwf	4034,c	;volatile
 21384  000A32                     
 21385                           ;main.c: 268: if ((80 - 1) == adc_series_counter) {
 21386  000A32  5049               	movf	_adc_series_counter,w,c
 21387  000A34  0A4F               	xorlw	79
 21388  000A36  A4D8               	btfss	status,2,c
 21389  000A38  D001               	goto	i1u731_21
 21390  000A3A  D001               	goto	i1u731_20
 21391  000A3C                     i1u731_21:
 21392  000A3C  D002               	goto	i1l161
 21393  000A3E                     i1u731_20:
 21394  000A3E                     
 21395                           ;main.c: 269: adc_conversion_flags |= 1 << 5;
 21396  000A3E  0100               	movlb	0	; () banked
 21397  000A40  8B80               	bsf	_adc_conversion_flags& (0+255),5,b
 21398  000A42                     i1l161:
 21399                           
 21400                           ;main.c: 270: }
 21401                           ;main.c: 273: adc_series_counter++;
 21402  000A42  2A49               	incf	_adc_series_counter,f,c
 21403  000A44                     
 21404                           ;main.c: 274: if (adc_series_counter >= 80) {
 21405  000A44  0E4F               	movlw	79
 21406  000A46  6449               	cpfsgt	_adc_series_counter,c
 21407  000A48  D001               	goto	i1u732_21
 21408  000A4A  D001               	goto	i1u732_20
 21409  000A4C                     i1u732_21:
 21410  000A4C  D022               	goto	i1l9270
 21411  000A4E                     i1u732_20:
 21412  000A4E                     i1l9260:
 21413                           
 21414                           ;main.c: 275: adc_series_counter = 0;
 21415  000A4E  6A49               	clrf	_adc_series_counter,c
 21416  000A50  D020               	goto	i1l9270
 21417  000A52                     i1l9262:
 21418                           
 21419                           ;main.c: 281: ADCON0 = (10<<2) + 1;
 21420  000A52  0E29               	movlw	41
 21421  000A54  6EC2               	movwf	4034,c	;volatile
 21422  000A56  D7FB               	goto	i1l9260
 21423  000A58                     i1l9268:
 21424  000A58  50C2               	movf	4034,w,c	;volatile
 21425  000A5A  0B3C               	andlw	60
 21426  000A5C  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21427  000A5E  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21428                           
 21429                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21430                           ; Switch size 1, requested type "speed"
 21431                           ; Number of cases is 1, Range of values is 0 to 0
 21432                           ; switch strategies available:
 21433                           ; Name         Instructions Cycles
 21434                           ; simple_byte            4     3 (average)
 21435                           ;	Chosen strategy is simple_byte
 21436  000A60  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21437  000A62  0A00               	xorlw	0	; case 0
 21438  000A64  B4D8               	btfsc	status,2,c
 21439  000A66  D001               	goto	i1l14452
 21440  000A68  D7F4               	goto	i1l9262
 21441  000A6A                     i1l14452:
 21442                           
 21443                           ; Switch size 1, requested type "speed"
 21444                           ; Number of cases is 6, Range of values is 0 to 40
 21445                           ; switch strategies available:
 21446                           ; Name         Instructions Cycles
 21447                           ; simple_byte           19    10 (average)
 21448                           ;	Chosen strategy is simple_byte
 21449  000A6A  5005               	movf	??_interrupt_at_low_vector,w,c
 21450  000A6C  0A00               	xorlw	0	; case 0
 21451  000A6E  B4D8               	btfsc	status,2,c
 21452  000A70  D78C               	goto	i1l9234
 21453  000A72  0A04               	xorlw	4	; case 4
 21454  000A74  B4D8               	btfsc	status,2,c
 21455  000A76  D76A               	goto	i1l9226
 21456  000A78  0A0C               	xorlw	12	; case 8
 21457  000A7A  B4D8               	btfsc	status,2,c
 21458  000A7C  D748               	goto	i1l9218
 21459  000A7E  0A28               	xorlw	40	; case 32
 21460  000A80  B4D8               	btfsc	status,2,c
 21461  000A82  D7C1               	goto	i1l9250
 21462  000A84  0A04               	xorlw	4	; case 36
 21463  000A86  B4D8               	btfsc	status,2,c
 21464  000A88  D79F               	goto	i1l9242
 21465  000A8A  0A0C               	xorlw	12	; case 40
 21466  000A8C  B4D8               	btfsc	status,2,c
 21467  000A8E  D720               	goto	i1l9210
 21468  000A90  D7E0               	goto	i1l9262
 21469  000A92                     i1l9270:
 21470                           
 21471                           ;main.c: 287: ConvertADC();
 21472  000A92  ECF9  F02E         	call	i1_ConvertADC	;wreg free
 21473  000A96                     
 21474                           ;main.c: 289: PIR1bits.ADIF = 0;
 21475  000A96  9C9E               	bcf	3998,6,c	;volatile
 21476  000A98                     i1l164:
 21477  000A98  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21478  000A9C  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21479  000AA0  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21480  000AA4  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21481  000AA8  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21482  000AAC  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21483  000AB0  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21484  000AB4  0010               	retfie	
 21485  000AB6                     __end_of_interrupt_at_low_vector:
 21486                           	opt stack 0
 21487                           tblptru	equ	0xFF8
 21488                           tblptrh	equ	0xFF7
 21489                           tblptrl	equ	0xFF6
 21490                           tablat	equ	0xFF5
 21491                           prodh	equ	0xFF4
 21492                           prodl	equ	0xFF3
 21493                           intcon	equ	0xFF2
 21494                           postinc0	equ	0xFEE
 21495                           wreg	equ	0xFE8
 21496                           indf1	equ	0xFE7
 21497                           postdec1	equ	0xFE5
 21498                           fsr1h	equ	0xFE2
 21499                           fsr1l	equ	0xFE1
 21500                           bsr	equ	0xFE0
 21501                           indf2	equ	0xFDF
 21502                           postinc2	equ	0xFDE
 21503                           postdec2	equ	0xFDD
 21504                           plusw2	equ	0xFDB
 21505                           fsr2h	equ	0xFDA
 21506                           fsr2l	equ	0xFD9
 21507                           status	equ	0xFD8
 21508                           
 21509 ;; *************** function i1_WriteTimer0 *****************
 21510 ;; Defined at:
 21511 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21512 ;; Parameters:    Size  Location     Type
 21513 ;;  timer0          2    0[COMRAM] unsigned int 
 21514 ;; Auto vars:     Size  Location     Type
 21515 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21516 ;; Return value:  Size  Location     Type
 21517 ;;		None               void
 21518 ;; Registers used:
 21519 ;;		None
 21520 ;; Tracked objects:
 21521 ;;		On entry : 0/0
 21522 ;;		On exit  : 0/0
 21523 ;;		Unchanged: 0/0
 21524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21525 ;;      Params:         2       0       0       0       0       0       0
 21526 ;;      Locals:         2       0       0       0       0       0       0
 21527 ;;      Temps:          0       0       0       0       0       0       0
 21528 ;;      Totals:         4       0       0       0       0       0       0
 21529 ;;Total ram usage:        4 bytes
 21530 ;; Hardware stack levels used:    1
 21531 ;; This function calls:
 21532 ;;		Nothing
 21533 ;; This function is called by:
 21534 ;;		_interrupt_at_low_vector
 21535 ;; This function uses a non-reentrant model
 21536 ;;
 21537                           
 21538                           	psect	text100
 21539  005D94                     __ptext100:
 21540                           	opt stack 0
 21541  005D94                     i1_WriteTimer0:
 21542                           	opt stack 22
 21543                           
 21544                           ;incstack = 0
 21545                           ;incstack = 0
 21546  005D94  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21547  005D98  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21548  005D9C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21549  005DA0  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21550  005DA4  0012               	return	
 21551  005DA6                     __end_ofi1_WriteTimer0:
 21552                           	opt stack 0
 21553                           tblptru	equ	0xFF8
 21554                           tblptrh	equ	0xFF7
 21555                           tblptrl	equ	0xFF6
 21556                           tablat	equ	0xFF5
 21557                           prodh	equ	0xFF4
 21558                           prodl	equ	0xFF3
 21559                           intcon	equ	0xFF2
 21560                           postinc0	equ	0xFEE
 21561                           wreg	equ	0xFE8
 21562                           indf1	equ	0xFE7
 21563                           postdec1	equ	0xFE5
 21564                           fsr1h	equ	0xFE2
 21565                           fsr1l	equ	0xFE1
 21566                           bsr	equ	0xFE0
 21567                           indf2	equ	0xFDF
 21568                           postinc2	equ	0xFDE
 21569                           postdec2	equ	0xFDD
 21570                           plusw2	equ	0xFDB
 21571                           fsr2h	equ	0xFDA
 21572                           fsr2l	equ	0xFD9
 21573                           status	equ	0xFD8
 21574                           
 21575 ;; *************** function i1_ConvertADC *****************
 21576 ;; Defined at:
 21577 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21578 ;; Parameters:    Size  Location     Type
 21579 ;;		None
 21580 ;; Auto vars:     Size  Location     Type
 21581 ;;		None
 21582 ;; Return value:  Size  Location     Type
 21583 ;;		None               void
 21584 ;; Registers used:
 21585 ;;		None
 21586 ;; Tracked objects:
 21587 ;;		On entry : 0/0
 21588 ;;		On exit  : 0/0
 21589 ;;		Unchanged: 0/0
 21590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21591 ;;      Params:         0       0       0       0       0       0       0
 21592 ;;      Locals:         0       0       0       0       0       0       0
 21593 ;;      Temps:          0       0       0       0       0       0       0
 21594 ;;      Totals:         0       0       0       0       0       0       0
 21595 ;;Total ram usage:        0 bytes
 21596 ;; Hardware stack levels used:    1
 21597 ;; This function calls:
 21598 ;;		Nothing
 21599 ;; This function is called by:
 21600 ;;		_interrupt_at_low_vector
 21601 ;; This function uses a non-reentrant model
 21602 ;;
 21603                           
 21604                           	psect	text101
 21605  005DF2                     __ptext101:
 21606                           	opt stack 0
 21607  005DF2                     i1_ConvertADC:
 21608                           	opt stack 22
 21609                           
 21610                           ;incstack = 0
 21611                           ;incstack = 0
 21612  005DF2  82C2               	bsf	4034,1,c	;volatile
 21613  005DF4  0012               	return	
 21614  005DF6                     __end_ofi1_ConvertADC:
 21615                           	opt stack 0
 21616                           tblptru	equ	0xFF8
 21617                           tblptrh	equ	0xFF7
 21618                           tblptrl	equ	0xFF6
 21619                           tablat	equ	0xFF5
 21620                           prodh	equ	0xFF4
 21621                           prodl	equ	0xFF3
 21622                           intcon	equ	0xFF2
 21623                           postinc0	equ	0xFEE
 21624                           wreg	equ	0xFE8
 21625                           indf1	equ	0xFE7
 21626                           postdec1	equ	0xFE5
 21627                           fsr1h	equ	0xFE2
 21628                           fsr1l	equ	0xFE1
 21629                           bsr	equ	0xFE0
 21630                           indf2	equ	0xFDF
 21631                           postinc2	equ	0xFDE
 21632                           postdec2	equ	0xFDD
 21633                           plusw2	equ	0xFDB
 21634                           fsr2h	equ	0xFDA
 21635                           fsr2l	equ	0xFD9
 21636                           status	equ	0xFD8
 21637                           tblptru	equ	0xFF8
 21638                           tblptrh	equ	0xFF7
 21639                           tblptrl	equ	0xFF6
 21640                           tablat	equ	0xFF5
 21641                           prodh	equ	0xFF4
 21642                           prodl	equ	0xFF3
 21643                           intcon	equ	0xFF2
 21644                           postinc0	equ	0xFEE
 21645                           wreg	equ	0xFE8
 21646                           indf1	equ	0xFE7
 21647                           postdec1	equ	0xFE5
 21648                           fsr1h	equ	0xFE2
 21649                           fsr1l	equ	0xFE1
 21650                           bsr	equ	0xFE0
 21651                           indf2	equ	0xFDF
 21652                           postinc2	equ	0xFDE
 21653                           postdec2	equ	0xFDD
 21654                           plusw2	equ	0xFDB
 21655                           fsr2h	equ	0xFDA
 21656                           fsr2l	equ	0xFD9
 21657                           status	equ	0xFD8
 21658                           
 21659                           	psect	text102
 21660  000000                     __ptext102:
 21661                           	opt stack 0
 21662                           tblptru	equ	0xFF8
 21663                           tblptrh	equ	0xFF7
 21664                           tblptrl	equ	0xFF6
 21665                           tablat	equ	0xFF5
 21666                           prodh	equ	0xFF4
 21667                           prodl	equ	0xFF3
 21668                           intcon	equ	0xFF2
 21669                           postinc0	equ	0xFEE
 21670                           wreg	equ	0xFE8
 21671                           indf1	equ	0xFE7
 21672                           postdec1	equ	0xFE5
 21673                           fsr1h	equ	0xFE2
 21674                           fsr1l	equ	0xFE1
 21675                           bsr	equ	0xFE0
 21676                           indf2	equ	0xFDF
 21677                           postinc2	equ	0xFDE
 21678                           postdec2	equ	0xFDD
 21679                           plusw2	equ	0xFDB
 21680                           fsr2h	equ	0xFDA
 21681                           fsr2l	equ	0xFD9
 21682                           status	equ	0xFD8
 21683                           
 21684                           	psect	rparam
 21685  0000                     tblptru	equ	0xFF8
 21686                           tblptrh	equ	0xFF7
 21687                           tblptrl	equ	0xFF6
 21688                           tablat	equ	0xFF5
 21689                           prodh	equ	0xFF4
 21690                           prodl	equ	0xFF3
 21691                           intcon	equ	0xFF2
 21692                           postinc0	equ	0xFEE
 21693                           wreg	equ	0xFE8
 21694                           indf1	equ	0xFE7
 21695                           postdec1	equ	0xFE5
 21696                           fsr1h	equ	0xFE2
 21697                           fsr1l	equ	0xFE1
 21698                           bsr	equ	0xFE0
 21699                           indf2	equ	0xFDF
 21700                           postinc2	equ	0xFDE
 21701                           postdec2	equ	0xFDD
 21702                           plusw2	equ	0xFDB
 21703                           fsr2h	equ	0xFDA
 21704                           fsr2l	equ	0xFD9
 21705                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1112
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     60     127
    BANK1           256     54     126
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	 size(2) Largest target is 0

    ?_eval_poly	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	 size(2) Largest target is 0

    ?___flneg	 size(2) Largest target is 0

    ?___asflmul	 size(2) Largest target is 0

    ?___flpack	 size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___aldiv
    ___lwtofl->___flpack
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _eval_poly->___flmul
    ___fltol->___flmul
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___flmul
    ___asflmul->___flmul
    ___fldiv->___flsub
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_vscp_sendEvent
    _setEventData->___fltol
    ___fladd->___awtofl
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___awtofl
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doWork->_exp
    ___asfldiv->___fldiv
    _log->___fldiv
    _exp->___fldiv
    _floor->___altofl
    ___altofl->___aldiv
    _sendTempEvent->_setEventData
    _setEventData->_Celsius2Fahrenheit
    _Celsius2Fahrenheit->___fldiv
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  148262
                                             59 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   74037
                                             33 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     865
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6    2070
                                             22 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    3985
                                             44 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             61 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   14303
                                             63 COMRAM     2     2      0
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   24732
                                             22 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             63 COMRAM     6     0      6
                                              0 BANK0      3     3      0
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    6410
                                             51 COMRAM    12     5      7
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    6633
                                             11 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             51 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4    1120
                                              6 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    4140
                                             59 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3930
                                             51 COMRAM     8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4    2255
                                             51 COMRAM     5     1      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    1860
                                              0 BANK0     22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   18687
                                             35 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0   15142
                                             35 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0   14697
                                             67 COMRAM     2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3   12082
                                             26 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    6955
                                             22 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3775
                                             29 COMRAM    15     7      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    3050
                                             44 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   27056
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7456
                                             40 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2824
                                             33 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             35 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             18 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    1120
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    2045
                                             29 COMRAM    22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      7E       7       49.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      7F       5       79.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F       3        0.0%
DATA                 0      0     51A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Nov 15 22:42:05 2015

                          ___asfldiv@f1p 00B9                            ___altofl@sign 00AD  
                           ___fldiv@cntr 00B2                  __end_of_vscp_readAppReg 2A8C  
                           ___fldiv@sign 00B8                    __end_of_sendVSCPFrame 4ED2  
                           ___asflmul@mp 0038                             ___asflsub@f2 003E  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0014  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 4012  
                          ___asflsub@f1p 003C                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 59BA                              __CFG_WDT$ON 000000  
                                    l201 1D6E                                      l208 20AA  
                                    l224 22EA                                      l321 237C  
                                    l410 2786                                      l323 2386  
                                    l315 235E                                      l325 2390  
                                    l317 2368                                      l253 4DF8  
                                    l245 3C7A                                      l319 2372  
                                    l183 493E                                      l168 48D0  
                                    l177 4914                       vscp_readStdReg@idx 0020  
                                    l522 1532                                      l519 14E4  
                                    l295 5348                                      l640 5A48  
                                    l552 5C12                                      l635 57C8  
                                    l629 53EE                                      l831 4176  
                                    l823 40DE                                      l825 40FC  
                                    l594 5CE2                                      l851 391C  
                                    l843 3A80                                      l836 38AC  
                                    l853 3930                                      l918 5B5A  
                                    l846 397A                       vscp_readStdReg@reg 0023  
                                    l855 3944                                      l847 38FA  
                                    l857 3954                                      l849 3908  
                                    l890 42DA                                      l867 39E8  
                                    l859 3964                                      l868 3A0C  
                                    l885 458A                                      l895 545C  
         __size_of_vscp_handleProbeState 00BE                         setEventData@ival 00C4  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 4BF6  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 00BF                                      _adc 017E  
                                    _exp 3C7C                                      _log 458C  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0032  
                           ___flmul@sign 0033                            ___flpack@sign 0013  
                           ___fltol@exp1 003D                                     l1031 57E2  
                                   l1103 5618                                     l1107 5C68  
                                   l1036 5BCE                                     l1212 33F0  
                                   l1054 4BE0                                     l1046 4BF0  
                                   l1303 5532                                     l1055 4BC2  
                                   l1047 4B7E                                     l1152 5BF0  
                                   l1090 5A1C                                     l1083 5BAA  
                                   l1236 3588                                     l1317 5C4A  
                                   l1237 359C                                     l1318 5C4C  
                                   l1094 5A9C                                     l1238 35DE  
                                   l1079 5892                                     l1247 361A  
                                   l1280 5AC6                                     l1272 3872  
                                   l1089 5A10                                     l1178 47B8  
                                   l1542 4ACA                                     l1622 4A76  
                                   l1607 4F7E                                     l1615 55AE  
                                   l1616 55CC                                     l1537 4A86  
                                   l1538 4B36                                     l1563 3E62  
                                   l1548 4AF8                                     l1590 43B6  
                                   l1566 3D2A                                     l1575 42FE  
                                   l1567 3E52                                     l1576 443A  
                                   l1656 47F4                                     l1657 48BA  
                                   l1579 4326                                     l1659 48AA  
                                   l1684 527C                                     l1668 5160  
                                   l1855 46B6                                     l1688 5024  
                __end_of_doOneSecondWork 3C7C                      vscp_readStdReg@code 0018  
              vscp_getManufacturerId@idx 0012                                     ?_exp 00B9  
                                   ?_log 00B9                                     l8304 38E8  
                                   l8080 5C70                                     l8410 5CF0  
                                   l8172 5A2A                                     l8156 5392  
                                   l9142 5AE8                                     l9134 5AD2  
                                   l8440 53F6                                     l8280 389A  
                                   l8168 5A26                                     l8450 5426  
                                   l8442 53FE                                     l8290 38C4  
                                   l8452 542C                                     l8444 5408  
                                   l8348 398E                                     l8454 5432  
                                   l8446 5412                                     l8358 39AE  
                                   l8448 541C                                     l8472 420C  
                                   l8384 3A3A                                     l8392 3A54  
                                   l8376 3A0E                                     l8296 38DA  
                                   l8458 543E                                     l8298 38E4  
                                   l9700 323A                                     l8398 3A6A  
                                   l9622 4B3A                                     l9702 3240  
                                   l9800 3354                                     l9704 3246  
                                   l9810 3388                                     l9706 324C  
                                   l9572 5BBA                                     l9660 4B9E  
                                   l9636 4B5A                                     l9820 33BC  
                                   l9740 3292                                     l9724 3284  
                                   l9662 4BA2                                     l9638 4B60  
                                   l9726 328A                                     l9656 4B9A  
                                   l9832 33F4                                     l9760 32B8  
                                   l9586 3100                                     l9930 357C  
                                   l9914 355C                                     l9842 343A  
                                   l9834 3412                                     l9692 4BE4  
                                   l9852 349A                                     l9950 35A4  
                                   l9870 34CC                                     l9838 3422  
                                   l9790 3320                                     l9774 32C4  
                                   l9880 34F0                                     l9872 34D6  
                                   l9848 3484                                     l9962 35CA  
                                   l9698 3234                                     l9980 35FA  
                                   l9868 34CA                                     l9966 35D2  
                                   l9958 35C2                                     l9886 3520  
                                   l9976 35E0                                     l9898 353C  
            __size_of_vscp_getMatrixInfo 001A                           sendCANFrame@id 003C  
                                   u5480 53E2                                     u5485 53D8  
                                   u5655 38A2                                     u5657 38A4  
                                   u9205 44C6                                     u9045 4E5C  
                                   u5975 41BA                                     u9520 3F7E  
                         sendCANFrame@rv 0042                                     u5985 41DA  
                                   u9185 4476                                     u5995 4228  
                                   u9195 449C                                     u9525 3F74  
                                   u9550 3FE0                                     u9555 3FD6  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 48BC                                     _init 5894  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 00B9                                     log@x 00B9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0B6E                              _vscp_minute 004D  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0AB6  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 46B8  
                            _writeEEPROM 5B3E                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 5536  
                        _sh_coefficients 0100                     __end_of_getVSCPFrame 53F0  
                                  ??_exp 0046                                    ??_log 0040  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 59EE  
                   __size_of_getCANFrame 002C                                    l10002 3622  
                                  l10016 364A                                    l10042 36AA  
                                  l10026 366C                                    l11012 182E  
                                  l11004 181A                                    l11020 186C  
                                  l10060 36E4                                    l10044 36B0  
                                  l10116 3810                                    l11110 4068  
                                  l11014 1830                                    l10038 3698  
                                  l11016 1840                                    l11032 5BFE  
                                  l10072 3730                                    l10064 36FE  
                                  l10090 3788                                    l10082 375A  
                                  l10242 55F8                                    l11116 4078  
                                  l10068 3714                                    l10236 55EE  
                                  l11150 412C                                    l11302 3EBA  
                                  l10094 37B0                                    l10246 5600  
                                  l10600 23A2                                    l11144 40FE  
                                  l11128 40A2                                    l11224 588A  
                                  l11320 3EF8                                    l11312 3EE0  
                                  _B0CON 000E20                                    l10610 23DE  
                                  l10602 23AE                                    l11138 40E2  
                                  l11170 416E                                    l11306 3ECA  
                                  l11410 473C                                    l11402 471E  
                                  l10700 25FA                                    l10620 241A  
                                  l10612 23EA                                    l10604 23BA  
                                  l10532 58DE                                    l11164 4168  
                                  l11092 5792                                    l11332 3F1A  
                                  l11324 3F02                                    l11316 3EEC  
                                  l11412 4740                                    l10710 2636  
                                  l10702 2606                                    l10630 2456  
                                  l10622 2426                                    l10614 23F6  
                                  l10606 23C6                                    l11158 4146  
                                  l11414 4756                                    l11510 4C8C  
                                  l10720 2672                                    l10712 2642  
                                  l10704 2612                                    l10640 2492  
                                  l10632 2462                                    l10624 2432  
                                  l10616 2402                                    l10608 23D2  
                                  l11168 416C                                    l11096 57BC  
                                  l11336 3F26                                    l11328 3F0E  
                                  _B1CON 000E30                                    l10730 26AE  
                                  l10722 267E                                    l10714 264E  
                                  l10706 261E                                    l10650 24CE  
                                  l10642 249E                                    l10634 246E  
                                  l10626 243E                                    l10618 240E  
                                  l10570 22FA                                    l10554 5030  
                                  l11186 44B2                                    l11362 3FFE  
                                  l11346 3F88                                    l11290 3E96  
                                  l11282 3E82                                    l10810 0BD8  
                                  l11434 479E                                    l11426 478A  
                                  l11514 4CA0                                    l11506 4C7E  
                                  l10740 26EA                                    l10732 26BA  
                                  l10724 268A                                    l10716 265A  
                                  l10708 262A                                    l10660 250A  
                                  l10652 24DA                                    l10644 24AA  
                                  l10636 247A                                    l10628 244A  
                                  l10580 2336                                    l10572 2306  
                                  l10548 502A                                    l11356 3FE8  
                                  l11268 5C62                                    l10900 10BC  
                                  l10820 0C64                                    l10812 0BF4  
                                  l10804 0B84                                    l11444 47BA  
                                  l10750 2726                                    l10742 26F6  
                                  l10734 26C6                                    l10726 2696  
                                  l10718 2666                                    l10670 2546  
                                  l10662 2516                                    l10654 24E6  
                                  l10646 24B6                                    l10638 2486  
                                  l10590 236E                                    l10582 2342  
                                  l10574 2312                                    l11294 3EA2  
                                  l11286 3E8C                                    l11366 400E  
                                  l11278 3E78                                    l10910 113E  
                                  l10902 10D6                                    l10830 0CF0  
                                  l10822 0C80                                    l10814 0C10  
                                  l10806 0BA0                                    l11390 46E2  
                                  l14102 45AA                                    l14022 2174  
                                  l14006 204E                                    l10760 2762  
                                  l10752 2732                                    l10744 2702  
                                  l10736 26D2                                    l10728 26A2  
                                  l10680 2582                                    l10672 2552  
                                  l10664 2522                                    l10656 24F2  
                                  l10648 24C2                                    l10592 2378  
                                  l10584 234E                                    l10576 231E  
                                  l10920 11C0                                    l10912 1158  
                                  l10904 10F0                                    l10840 0D7C  
                                  l10832 0D0C                                    l10824 0C9C  
                                  l10816 0C2C                                    l10808 0BBC  
                                  l14200 4310                                    l14024 218E  
                                  l14008 2058                                    _B2CON 000E40  
                                  l10762 276E                                    l10754 273E  
                                  l10746 270E                                    l10738 26DE  
                                  l10690 25BE                                    l10682 258E  
                                  l10674 255E                                    l10666 252E  
                                  l10658 24FE                                    l10594 2382  
                                  l10586 235A                                    l10578 232A  
                                  l11298 3EAE                                    l10930 1242  
                                  l10922 11DA                                    l10914 1172  
                                  l10906 110A                                    l10850 0E08  
                                  l10842 0D98                                    l10834 0D28  
                                  l10826 0CB8                                    l10818 0C48  
                                  l11378 5BE6                                    l11810 50D0  
                                  l11482 4C10                                    l10780 2A4A  
                                  l10764 277A                                    l10756 274A  
                                  l10748 271A                                    l10692 25CA  
                                  l10684 259A                                    l10676 256A  
                                  l10668 253A                                    l10596 238C  
                                  l10588 2364                                    l10772 27A2  
                                  l10940 12C4                                    l10932 125C  
                                  l10924 11F4                                    l10916 118C  
                                  l10908 1124                                    l10860 0E94  
                                  l10852 0E24                                    l10844 0DB4  
                                  l10836 0D44                                    l10828 0CD4  
                                  l11396 4702                                    l11812 50DA  
                                  l14044 2284                                    l10790 2A60  
                                  l10766 278A                                    l10758 2756  
                                  l10694 25D6                                    l10686 25A6  
                                  l10678 2576                                    l10598 2396  
                                  l10774 2A2C                                    l14310 49B4  
                                  l10950 1346                                    l10942 12DE  
                                  l10934 1276                                    l10926 120E  
                                  l10918 11A6                                    l10870 0F20  
                                  l10862 0EB0                                    l10854 0E40  
                                  l10846 0DD0                                    l10838 0D60  
                                  l14230 437A                                    l14222 4352  
                                  l14206 4338                                    l14134 4DA4  
                                  l11830 5124                                    l14070 3CCE  
                                  l11494 4C40                                    l14046 228E  
                                  l10792 2A70                                    l10768 2796  
                                  l10696 25E2                                    l10688 25B2  
                                  l14160 4AB4                                    l10960 13C8  
                                  l10952 1360                                    l10944 12F8  
                                  l10936 1290                                    l10928 1228  
                                  l10880 0FAC                                    l10872 0F3C  
                                  l10864 0ECC                                    l10856 0E5C  
                                  l10848 0DEC                                    l14240 43A4  
                                  l14232 4382                                    l11760 4FEC  
                                  l14064 3C9A                                    l11496 4C4C  
                                  l11488 4C28                                    l14056 22E0  
                                  _B3CON 000E50                                    l10698 25EE  
                                  l14330 4A02                                    l14314 49C8  
                                  l10970 144A                                    l10962 13E2  
                                  l10954 137A                                    l10946 1312  
                                  l10938 12AA                                    l10890 1038  
                                  l10882 0FC8                                    l10874 0F58  
                                  l10866 0EE8                                    l10858 0E78  
                                  l14250 43E2                                    l14242 43B0  
                                  l14234 4388                                    l14138 4DDC  
                                  l11770 5598                                    l11842 5150  
                                  l11834 512C                                    l11826 5114  
                                  l11746 4FC2                                    l14090 3E20  
                                  l14074 3CF8                                    l11498 4C50  
                                  l10788 2A5E                                    l10796 2A88  
                                  l14156 4A90                                    l10980 14CC  
                                  l10972 1464                                    l10964 13FC  
                                  l10956 1394                                    l10948 132C  
                                  l10892 1054                                    l10884 0FE4  
                                  l10876 0F74                                    l10868 0F04  
                                  l14228 436E                                    l11836 5138  
                                  l11756 4FE0                                    l14166 4AE0  
                                  l14158 4A9C                                    l14342 4A32  
                                  l14326 49EE                                    l10990 156A  
                                  l10982 14FE                                    l10974 147E  
                                  l10966 1416                                    l10958 13AE  
                                  l10894 106E                                    l10886 1000  
                                  l10878 0F90                                    l14246 43CC  
                                  l14270 4EE0                                    l11838 513C  
                                  l14168 4AEC                                    l10984 1518  
                                  l10976 1498                                    l10968 1430  
                                  l10896 1088                                    l10888 101C  
                                  l11776 55CA                                    l11784 5B76  
                                  _B4CON 000E60                                    l14338 4A1E  
                                  l10986 1536                                    l10978 14B2  
                                  l10898 10A2                                    l10994 156E  
                                  l14258 440E                                    l14274 4EF6  
                                  l14186 5680            __size_of_vscp_getMajorVersion 0002  
                                  l10988 1550                                    l10996 17E2  
                                  l13812 5352                                    l13804 5300  
                                  l11796 521E                                    l14380 47FE  
                                  l14366 5990                                    l13830 3A8C  
                                  l14294 4F44                                    l14286 4F16  
                                  l13750 490E                                    l13742 48FA  
                                  l13816 5364                                    l13808 5324  
                                  l13840 3AC6                                    l14384 481A  
                                  l14392 4CDE                                    _B5CON 000E70  
                                  l13818 536E                                    l14394 4D56  
                                  l13914 18D2                                    l13906 18A8  
                                  l13770 495A                                    l13746 4904  
                                  l13738 48F2                                    l13764 4938  
                                  l13748 4908                                    l13758 4924  
                                  l13856 3B50                                    l13792 4996  
                                  l13768 4942                                    l13882 3C1A  
                                  l13858 3B5A                                    l13786 4984  
                                  l13884 3C24                                    l13868 3BA8  
                                  l13964 1E44                                    l13796 499E  
                                  l13894 3C72                                    l13966 1E5E  
                                  l13984 1F3A                                    l13986 1F54  
                                  l13978 1E76               __end_of_vscp_goActiveState 5C32  
                          ___fltol@sign1 003C                          __end_of___aldiv 4CB2  
          ??_vscp_writeNicknamePermanent 0011                       writeEEPROM@address 000E  
                        __end_of___fladd 443C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 4F80                            i1_WriteTimer0 5D94  
                        __end_of___flneg 5B88                                    _EEADR 000FA9  
                        __end_of___lbmod 5AF0                          __end_of___flmul 4A78  
                        __end_of___flsub 5946                          __end_of___fltol 5162  
                _vscp_handleDropNickname 59EE                                    _BSEL0 000DF8  
                                  u10230 4FB8                                    u10320 50F8  
                                  u10325 50EE                                    _T0CON 000FD5  
                                  u13104 1E56                                    u13105 1E52  
                                  u13134 1E88                                    u13054 18BA  
                                  u13135 1E84                                    u13055 18B6  
                                  u13400 3E16                                    u13234 20BA  
                                  u13235 20B6                                    u13420 45A0  
                                  u13164 1F4A                                    u13165 1F46  
                                  u13264 2184                                    u13184 1FDC  
                                  u13265 2180                                    u13185 1FD8  
                                  u13284 2212                                    u13285 220E  
                                  u13740 4EEC                                    u12944 3AEE  
                                  u12945 3AEA                                    u13770 49BE  
                                  u12994 3BB8                                    u12995 3BB4  
                                  i1l144 08BA                                    i1l161 0A42  
                                  i1l138 0882                                    i1l164 0A98  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 0018  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 5DD8               _vscp_readNicknamePermanent 5DCE  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 00C0                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001D  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 52FE  
                           _vscp_getGUID 5D24                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 47BE  
                                  _ldexp 4F80                             _vscp_getZone 5DB0  
                                  _frexp 51F8                       vscp_writeAppReg@rv 0024  
              _vscp_getRegisterPagesUsed 5DF6                   __size_of_vscp_getEvent 002A  
                                  main@i 00DE                               _ConvertADC 5DEE  
                           _vscp_setGUID 5BF2                                    tablat 000FF5  
                _vscp_getSubMinorVersion 5DFC                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5B3E  
                            exp@exponent 00C1                              ldexp@newexp 0044  
                   _ECANSetOperationMode 5CE4                          __initialization 5814  
                            log@exponent 0040                             __end_of_main 49A8  
                           __end_of_init 58D0                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0818                          ?_Celsius2Kelvin 002D  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0022  
                                 ??_main 0046                                   ??_init 0022  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 0012  
               ??_vscp_setManufacturerId 0012                 _vscp_handleProtocolEvent 322A  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0017                         doWork@calVoltage 014C  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 00AE                                   ?_ldexp 0040  
                   __size_of_handle_sync 007A                                   ?_frexp 000E  
                       __end_of___altofl 56AE               ECANReceiveMessage@savedPtr 0018  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 4B38                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 59BA  
                        __CFG_BBSIZ$2048 000000                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0027                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 5C32                                   i1l9210 08D0  
                                 i1l9220 0936                                   i1l9212 08F8  
                                 i1l9204 08C4                                   i1l9230 0978  
                                 i1l9222 093A                                   i1l9214 08FC  
                                 i1l9206 08C6                                   i1l9240 09C2  
                                 i1l9232 0984                                   i1l9224 0946  
                                 i1l9216 0908                                   i1l9250 0A06  
                                 i1l9242 09C8                                   i1l9234 098A  
                                 i1l9226 094C                                   i1l9218 090E  
                                 i1l9170 0852                                   i1l9162 0834  
                                 i1l9260 0A4E                                   i1l9252 0A2E  
                                 i1l9244 09F0                                   i1l9236 09B2  
                                 i1l9228 0974                                   i1l9180 0884  
                                 i1l9172 0862                                   i1l9164 083C  
                                 i1l9262 0A52                                   i1l9254 0A32  
                                 i1l9246 09F4                                   i1l9238 09B6  
                                 i1l9270 0A92                                   i1l9190 08A8  
                                 i1l9182 0886                                   i1l9174 0872  
                                 i1l9166 0848                                   i1l9272 0A96  
                                 i1l9256 0A3E                                   i1l9248 0A00  
                                 i1l9192 08AA                                   i1l9184 0892  
                                 i1l9176 0876                                   i1l9168 084E  
                                 i1l9258 0A44                                   i1l9186 089C  
                                 i1l9194 08AE                                   i1l9178 087E  
                                 i1l9268 0A58                                   i1l9188 08A4  
                        _init_app_eeprom 2A8C                         __end_of___lwtofl 5A74  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                         __CFG_WDTPS$128 000000                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 5A74  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1167 00CB                                   ___flge 5582  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0026                                   ___wmul 5946  
                              ??___fldiv 003C                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0026                                ??___flsub 003C  
                              ??___fltol 0038                            _vscp_getEvent 5A9E  
                                 _doWork 1870                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 0012  
                    vscp_writeAppReg@reg 0023               __end_of_vscp_setSegmentCRC 5D70  
                    vscp_writeAppReg@val 0021                      vscp_writeAppReg@pos 0022  
                                 clear_0 581C                                   clear_1 582E  
                                 clear_2 583A                                   clear_3 5846  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 00D8  
                                 floor@i 00B2                                   floor@x 00AE  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0086  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0021  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004A                       __size_of___asfldiv 004C  
                     __size_of___asflmul 004A                               ___fladd@f1 001E  
                             ___fladd@f2 0022                       __size_of___asflsub 004A  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0B48                         __end_oflog@coeff 0B6C  
                        ___lbmod@divisor 000E                               ___altofl@c 00A9  
                             ___fldiv@f1 00A3                               ___fldiv@f2 00A7  
                             ___fldiv@f3 00B3                               __accesstop 0060  
                __end_of__initialization 584C                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 5466                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 001E  
                             ___flmul@f2 0022                             eval_poly@res 003C  
                             ___flsub@f1 0034                               ___flsub@f2 0038  
                             ___fltol@f1 0034                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 5BD0  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 00B9  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0034              __end_of_vscp_check_pstorage 5BD0  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 48BC                            __end_of_ldexp 5026  
                          __end_of_frexp 527E                      ?_vscp_writeRegister 0029  
                         ??_sendCANFrame 0042                               ___lwtofl@c 0018  
             __end_of_vscp_getFamilyCode 5DCE                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 020E             __size_of_getCalibrationValue 0048  
                     sendVSCPFrame@pData 00A9               __end_of_vscp_getFamilyType 5DC4  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0029  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1870  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 322A  
                   ??_Celsius2Fahrenheit 003C              __end_of_vscp_setControlByte 5D5E  
               __end_of_vscp_writeStdReg 47BE                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 00A3  
                                ??_frexp 0014                            ?_setEventData 00BD  
                   ??_vscp_writeRegister 002A          __end_of_vscp_handleDropNickname 5A1E  
                           _getVSCPFrame 5378                               __pbssBANK0 0060  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00BC               __end_of_vscp_getBufferSize 5DFA  
                       Celsius2Kelvin@tc 002D                    vscp_writeRegister@reg 002A  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 5026  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5DFE  
               ECANSetOperationMode@mode 000E                                  ?___wmul 0012  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                           doWork@setpoint 0173  
                                _B2RXFUL 007207                                  _B3RXFUL 007287  
                                _B4RXFUL 007307                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 0011                                  _B5RXFUL 007387  
                      __end_of___asfladd 5664                        __end_of___asfldiv 5582  
                       WriteTimer0@timer 0010                                ?___altofl 00A9  
                      __end_of___asflmul 5742                                  _ECANCON 000F77  
                      __end_of___asflsub 56F8                                ?___flpack 000E  
                          ??_WriteTimer0 0010                         doWork@resistance 016E  
                    __size_of_ConvertADC 0004                                ?___awtofl 0018  
                         ??__RegsToCANID 0012                    sendVSCPFrame@priority 00A7  
                                _BRGCON1 000F70                                  _BRGCON2 000F71  
                                _BRGCON3 000F72                                ?___lwtofl 0018  
                    vscp_writeStdReg@reg 0028             __end_of_vscp_doOneSecondWork 561A  
                                i1l14452 0A6A                       _adc_series_counter 0049  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 00A5  
                             _high_alarm 0081          __end_of_interrupt_at_low_vector 0AB6  
               vscp_readStdReg@code_1140 001C                        sendCANFrame@pdata 0041  
                  _vscp_handleProbeState 4B38                                  _RXB0CON 000F60  
                                _RXB1CON 000F50                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 53F0               __end_of_vscp_getMatrixInfo 5C84  
                                _TXB0CON 000F40                                  _TXB1CON 000F30  
                                _TXB2CON 000F20                           ??_setEventData 003E  
                                _RXFCON0 000DD4                                  _RXFCON1 000DD5  
                          setEventData@v 00BD                       _vscp_goActiveState 5C14  
                 __size_of_sendVSCPFrame 00B2             __end_of_vscp_getMajorVersion 5E02  
                     __size_of_vscp_init 0044                               _readEEPROM 5D38  
                 _vscp_getManufacturerId 5CFC                   _vscp_setManufacturerId 5C84  
                        _ECANSendMessage 4012                      ?_vscp_goActiveState 0001  
                                _OpenADC 54DA                                  __Hparam 0000  
                        ??_vscp_getEvent 0032                         ??_Celsius2Kelvin 0031  
                                __Lparam 0000                       _vscp_node_substate 004E  
             __end_of_vscp_getSegmentCRC 5DE2               ??_vscp_handleProtocolEvent 00C2  
                          ??_getCANFrame 0022        __end_of_vscp_getRegisterPagesUsed 5DF8  
               __size_of_vscp_getMDF_URL 0018                                  ___aldiv 4BF6  
                        __size_of___flge 004C                                  ___fladd 42DC  
                                ___fldiv 4ED2                                  ___flneg 5B64  
                                ___lbmod 5AC8                                  ___flmul 49A8  
                                ___flsub 590C                                  ___fltol 50C6  
                        __size_of___wmul 003A                          getCANFrame@pdlc 0020  
                              _FIFOEMPTY 007BA7                            ?i1_ConvertADC 0001  
                        __size_of_doWork 0A7C                             __psmallconst 0B00  
                             ??___altofl 0046                     __end_of_init_app_ram 590C  
                             ??___flpack 0014                       _vscp_sendHeartBeat 5B18  
                                __pcinit 5814                               ??___awtofl 001C  
                         _vscp_deviceURL 0B00                        __end_of_eval_poly 4D6E  
                                __ramtop 0600                      __size_of_OpenTimer0 001E  
                                __ptext0 48BC                                  __ptext1 1870  
                                __ptext2 5A4A                                  __ptext3 5536  
                                __ptext4 561A                                  __ptext5 4BF6  
                                __ptext6 5742                                  __ptext7 458C  
                                __ptext8 3C7C                                  __ptext9 5B64  
                             ??___lwtofl 001C                           _vscp_getUserID 5D10  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 0044  
                           __size_of_exp 01E8                             __size_of_log 012C  
                  vscp_writeStdReg@value 0022                         ___aldiv@dividend 003E  
                    ?_vscp_sendHeartBeat 0044                 ??_vscp_handleSetNickname 0012  
                                _seconds 0083                                  doWork@B 016C  
                                doWork@i 017D                                  doWork@j 0172  
                                doWork@v 0168                      __end_of_WriteTimer0 5D94  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 0014  
                     vscp_getMDF_URL@idx 000F                           OpenADC@config2 000E  
          vscp_handleProtocolEvent@bytes 00CF                     end_of_initialization 584C  
                                exp@sign 00C3             __end_of_vscp_handleHeartbeat 5894  
               __size_of_vscp_getSubzone 000A                            __Lmediumconst 0000  
                __end_of_writeCoeffs2Ram 50C6                     __end_of_sendCANFrame 57D0  
                             doWork@Rinf 0148                       doOneSecondWork@tmp 00C8  
                             doWork@temp 0179                vscp_handleProtocolEvent@i 00DC  
              vscp_handleProtocolEvent@j 00DD                vscp_handleProtocolEvent@k 00D6  
                   ??_vscp_sendHeartBeat 0045                           _vscp_sendEvent 5AF0  
                      ECANSendMessage@id 0018                        ECANSendMessage@pb 0020  
                       ___aldiv@quotient 00A5                                  postdec1 000FE5  
                                postdec2 000FDD                  __size_of_ECANInitialize 0096  
                 __size_of_sendTempEvent 0080                           _vscp_setUserID 5C9C  
                                postinc0 000FEE                                  postinc2 000FDE  
                         ??i1_ConvertADC 0001                   __end_of_vscp_deviceURL 0B20  
    __end_of_vscp_writeNicknamePermanent 5D82              _vscp_writeNicknamePermanent 5D70  
                     __ECANPointBuffer@b 0011                            _sendVSCPFrame 4E20  
                 __end_of_vscp_getUserID 5D24             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0078CB                        __end_of_vscp_init 5814  
                         _vscp_probe_cnt 0050                      __end_of_getCANFrame 5A4A  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
                          ??_handle_sync 00C6                 __size_of_vscp_readAppReg 07A0  
                       ___lbmod@dividend 000F                         writeCoeffs2Ram@c 001A  
                       writeCoeffs2Ram@i 001D                         writeCoeffs2Ram@j 001F  
                            ___fldiv@exp 00B7                           _vscp_statuscnt 0052  
               __size_of_vscp_readStdReg 01AE                       _vscp_setSegmentCRC 5D5E  
                      readEEPROM@address 000E                             ??_ConvertADC 000E  
             vscp_handleProtocolEvent@cb 00D4                  __end_of_ECANSendMessage 4178  
                      vscp_readStdReg@rv 0022                              ___lbmod@rem 0011  
                            ___flmul@exp 002D                            ?__CANIDToRegs 000E  
                   __end_of__RegsToCANID 42DC                      _getCalibrationValue 5742  
                            ?_readEEPROM 000E                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 5B18                               _vscp_error 5DEA  
                   _vscp_doOneSecondWork 55CE                       i1WriteTimer0@timer 0003  
                             _vscp_timer 007E                   __end_of_vscp_setUserID 5CB4  
               __size_of_doOneSecondWork 01FA                   vscp_sendHeartBeat@zone 0045  
                   __end_of_setEventData 4E20                           ?_sendVSCPFrame 00A3  
                         __end_of___flge 55CE                     __size_of_writeEEPROM 0026  
                         __end_of___wmul 5980                          ?_vscp_getUserID 0001  
                         __end_of_doWork 22EC             __end_of_vscp_getMinorVersion 5E00  
                            _WriteTimer0 5D82                     _vscp_getMajorVersion 5E00  
                     __end_of_ConvertADC 5DF2                     ?_getCalibrationValue 0012  
                   ??_vscp_setSegmentCRC 0011                        ??_vscp_getMDF_URL 000E  
          ??_vscp_getBootLoaderAlgorithm 000E                               floor@expon 00B6  
                      ?_vscp_writeAppReg 0021                      start_initialization 5814  
                             eval_poly@d 0038                               eval_poly@n 0039  
                             eval_poly@x 0034                               ldexp@value 0040  
        __size_of_vscp_handleSetNickname 0024                              __end_of_exp 3E64  
                            __end_of_log 46B8                       ??_vscp_writeAppReg 0022  
                          _sendTempEvent 527E                        ?_vscp_writeStdReg 0022  
                    __CFG_BOREN$BOACTIVE 000000              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 000E                       ??_vscp_writeStdReg 0023  
                     _vscp_getFamilyCode 5DC4                      __end_of_handle_sync 5378  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5DBA  
                             frexp@value 000E                      sendVSCPFrame@nodeid 00A6  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 5C50  
                   Celsius2Fahrenheit@tc 00B9                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00D3                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 3874  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 003C                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0017                        ??_vscp_getSubzone 0012  
                               ??___flge 0016                 __end_of__ECANPointBuffer 5466  
                      __CANIDToRegs@type 0014                              _getCANFrame 5A1E  
                               ??___wmul 0016                                 ??_doWork 00C4  
                     _vscp_getBufferSize 5DF8              vscp_handleProtocolEvent@len 00D0  
            vscp_handleProtocolEvent@pos 00CE               __end_of_ECANReceiveMessage 3A82  
                    ??_vscp_readRegister 0024           __size_of_vscp_goBootloaderMode 0018  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 0014  
                  __end_ofi1_WriteTimer0 5DA6            __end_of_vscp_goBootloaderMode 5CE4  
                   _vscp_handleHeartbeat 5856                       __end_of_OpenTimer0 5C50  
                      __size_of___altofl 004A                        __size_of___flpack 00C0  
                              ___asfladd 561A                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0014  
                              ___asfldiv 5536                              __pbssBIGRAM 017E  
                              ___asflmul 56F8                                ___asflsub 56AE  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00A3  
                          __pcstackBANK1 0148                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0074  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0046  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5DF6                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 0012                        sendVSCPFrame@size 00A8  
              __end_of_vscp_readRegister 5C6A                             _init_app_ram 58D0  
                   getCalibrationValue@i 0019                              _doWork$2270 0150  
                            _doWork$2271 0154                              _doWork$2272 0158  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0175  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 0013  
                   ??_vscp_getBufferSize 000E                             _current_temp 0060  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5C6A  
                 _vscp_handleSetNickname 5B88            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00AA                           _ECANInitialize 5162  
                               ?___aldiv 003E                                 ?___fladd 001E  
                               ?___fldiv 00A3                                __ptext100 5D94  
                              __ptext101 5DF2                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 001E                                 ?___flsub 0034  
                               ?___fltol 0034                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 0012                              __pintcodelo 0818  
                      ??_doOneSecondWork 00C6                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1157 00D2                  vscp_readStdReg@idx_1141 0021  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 578A  
                            __smallconst 0B00                               ?___asfladd 002D  
                      WriteTimer0@timer0 000E                               ?___asfldiv 00B9  
                             ?___asflmul 0034                               ?___asflsub 003C  
                     _vscp_getSegmentCRC 5DD8                           ??_vscp_getGUID 0012  
                              _eval_poly 4CB2                              _handle_sync 52FE  
                         ??_vscp_getZone 0012           __end_of_vscp_getManufacturerId 5D10  
         __end_of_vscp_setManufacturerId 5C9C                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1156 00D1                           __size_of_floor 00FE  
                         __size_of_ldexp 00A6                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 007C  
                        ___aldiv@divisor 0042                          ___aldiv@counter 00A3  
                         ___wmul@product 0016                   ??_vscp_doOneSecondWork 00C2  
                 sendVSCPFrame@vscpclass 00A3                            OpenADC@config 0012  
                   _vscp_getMinorVersion 5DFE                                _sendTimer 007A  
                               _PIE1bits 000F9D                                _low_alarm 0082  
                  __size_of_setEventData 00B2                   __end_of_ECANInitialize 51F8  
                               i1u720_20 0892                                 i1u720_21 0890  
                               i1u721_20 089C                                 i1u721_21 089A  
                               i1u730_20 0A00                                 i1u722_20 08A4  
                               i1u730_21 09FE                                 i1u722_21 08A2  
                               i1u731_20 0A3E                                 i1u723_20 08B8  
                               i1u731_21 0A3C                                 i1u723_21 08B6  
                               i1u732_20 0A4E                                 i1u724_20 08C2  
                               i1u732_21 0A4C                                 i1u724_21 08C0  
                               i1u725_20 08CE                                 i1u725_21 08CC  
                               i1u726_20 0908                                 i1u718_20 083C  
                               i1u726_21 0906                                 i1u718_21 083A  
                               i1u727_20 0946                                 i1u719_20 087E  
                               i1u727_21 0944                                 i1u719_21 087C  
                               i1u728_20 0984                                 i1u728_21 0982  
                               i1u729_20 09C2                                 i1u729_21 09C0  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 5AC8                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 0012                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 458C  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 0012  
                           __RegsToCANID 4178                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0044              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 0034                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 57D0                                _vscp_imsg 0088  
                              _vscp_hour 0084                                _vscp_omsg 0096  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 064A  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4D6E               __size_of_vscp_readRegister 001A  
                      _measurement_clock 0072                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0010                 __size_of_init_app_eeprom 079E  
           __end_of_vscp_restoreDefaults 5DEA                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 006C              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 0012  
                        _vscp_getMDF_URL 5CB4                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0160  
                       __size_of___fldiv 00AE                         __size_of___flneg 0024  
                       _vscp_initledfunc 004C                         __size_of___lbmod 0028  
                       __size_of___flmul 00D0                   ??_vscp_handleHeartbeat 0012  
                       __size_of___flsub 003A                         __size_of___fltol 009C  
                               ___altofl 5664                                 ___flpack 4A78  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 5980                         getCANFrame@pdata 0021  
                               ___lwtofl 5A4A                           sendTempEvent@i 0045  
                __size_of_Celsius2Kelvin 0034                              ??___asfladd 0033  
                            ??___asfldiv 003C                              ??___asflmul 0038  
                               _exp$2276 00BD                              ??___asflsub 0042  
                     __end_of_readEEPROM 5D4C                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4F80  
                               __ptext11 4CB2                                 __ptext20 4ED2  
                               __ptext12 47BE                                 __ptext21 55CE  
                               __ptext13 50C6                                 __ptext30 5466  
                               __ptext22 5B18                                 __ptext14 51F8  
                               __ptext31 42DC                                 __ptext23 5DA6  
                               __ptext15 5582                                 __ptext40 5C9C  
                               __ptext32 59BA                                 __ptext24 5DB0  
                               __ptext16 5664                                 __ptext41 5BF2  
                               __ptext33 322A                                 __ptext25 3A82  
                               __ptext17 56AE                                 __ptext50 5CFC  
                               __ptext42 0B6E                                 __ptext34 5AC8  
                               __ptext26 5DEA                                 __ptext18 590C  
                               __ptext51 5D10                                 __ptext43 5C50  
                               __ptext35 5BD0                                 __ptext27 52FE  
                               __ptext19 56F8                                 __ptext60 5DCE  
                               __ptext52 5CB4                                 __ptext44 3E64  
                               __ptext36 46B8                                 __ptext28 527E  
                               __ptext61 5B88                                 __ptext53 5D24  
                               __ptext45 5DBA                                 __ptext37 5DE2  
                               __ptext29 4D6E                                 __ptext70 4012  
                               __ptext62 5856                                 __ptext54 5DFC  
                               __ptext46 5DC4                                 __ptext38 2A8C  
                               __ptext71 443C                                 __ptext63 5CCC  
                               __ptext55 5DFE                                 __ptext47 5DF6  
                               __ptext39 5C84                                 __ptext80 5D5E  
                               __ptext72 5A9E                                 __ptext64 5C6A  
                               __ptext56 5E00                                 __ptext48 5DF8  
                               __ptext81 5DD8                                 __ptext73 5378  
                               __ptext65 4B38                                 __ptext57 5A74  
                               __ptext49 5DFA                                 __ptext90 58D0  
                               __ptext82 5D38                                 __ptext74 5A1E  
                               __ptext66 5C14                                 __ptext58 59EE  
                               __ptext91 5026                                 __ptext83 5D70  
                               __ptext75 3874                                 __ptext67 5AF0  
                               __ptext59 57D0                                 __ptext92 5946  
                               __ptext84 5B3E                                 __ptext76 4178  
                               __ptext68 4E20                                 __ptext93 5DEE  
                               __ptext85 5894                                 __ptext77 53F0  
                               __ptext69 578A                                 __ptext94 5D82  
                               __ptext86 5162                                 __ptext78 5BAC  
                               __ptext95 5980                                 __ptext87 5CE4  
                               __ptext79 5D4C                                 __ptext96 49A8  
                               __ptext88 54DA                                 __ptext97 4A78  
                               __ptext89 5C32                                 __ptext98 22EC  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5DA6                         ??_vscp_setUserID 0012  
                          __size_of_main 00EC                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0D02                      _vscp_check_pstorage 5BAC  
                          init_app_ram@i 0021           vscp_handleProtocolEvent@i_1155 00D7  
         vscp_handleProtocolEvent@i_1158 00DB           vscp_handleProtocolEvent@i_1166 00D5  
                       doOneSecondWork@i 00C9                     __end_of_vscp_getGUID 5D38  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5DBA                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 5C14                       vscp_readAppReg@reg 0013  
                     vscp_readAppReg@pos 0012                             i1_ConvertADC 5DF2  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 00CD                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                         init_app_eeprom@i 0011  
                    _vscp_setControlByte 5D4C                                 exp@coeff 0B20  
                  ___flmul@f3_as_product 002E                                 log@coeff 0B48  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 22EC  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F50  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
                            ??_eval_poly 003B             ??_vscp_readNicknamePermanent 0012  
                    ECANReceiveMessage@i 001B                          _vscp_guid_reset 004B  
                        _vscp_readStdReg 3E64             vscp_handleDropNickname@bytes 0012  
             __end_of_vscp_newNodeOnline 5A9E                       _ECANReceiveMessage 3874  
                         ??_getVSCPFrame 0029                          _vscp_initbtncnt 0085  
                        sendVSCPFrame@id 00BE                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 000E                  vscp_getMatrixInfo@pData 000E  
                __end_of_vscp_getMDF_URL 5CCC                     ?_vscp_setControlByte 0001  
                          _timeout_clock 0076                      ?_ECANReceiveMessage 0015  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0087                             handle_sync@i 00C8  
                        _doOneSecondWork 3A82                             ??_vscp_error 000E  
                ECANSendMessage@msgFlags 001E                      vscp_getMatrixInfo@i 000F  
                vscp_setControlByte@ctrl 0011              __end_of_getCalibrationValue 578A  
                     ECANSendMessage@ptr 003A                        ??_init_app_eeprom 0011  
                  __size_of__CANIDToRegs 0150                           readEEPROM@data 0011  
               __size_of_writeCoeffs2Ram 00A0      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 5DFC              _vscp_getBootLoaderAlgorithm 5DFA  
       __size_of_interrupt_at_low_vector 029E                   ECANSendMessage@dataLen 001D  
                    __end_of_writeEEPROM 5B64                      __ECANPointBuffer@pt 0012  
                   ??_ECANReceiveMessage 0018                    ??_vscp_check_pstorage 0012  
                 ECANSendMessage@buffers 0033                    _vscp_goBootloaderMode 5CCC  
             __end_of_Celsius2Fahrenheit 54DA             __end_of_ECANSetOperationMode 5CFC  
                   _vscp_restoreDefaults 5DE2              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 0012                  __end_of_vscp_getSubzone 5DB0  
                           ?_handle_sync 0001              __size_of_vscp_getFamilyType 000A  
                           ___aldiv@sign 00A4                               _RXM1EXIDEN 0078EB  
             __end_of_vscp_writeRegister 5BF2                       __end_of_vscp_error 5DEE  
                 ECANSendMessage@tempPtr 0036                     _adc_conversion_flags 0080  
         __end_of_vscp_handleSetNickname 5BAC       vscp_handleProtocolEvent@bytes_1162 00D9  
                  ??_vscp_setControlByte 0011                     vscp_readRegister@reg 0024  
                           ___fladd@exp1 002C                             ___fladd@exp2 002B  
                           ___fladd@sign 002A                             __CANIDToRegs 443C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00C9  
                          ___asfladd@f1p 002D              __size_of_vscp_getBufferSize 0002  
                           ___asfladd@f2 002F                 __size_of_ECANSendMessage 0166  
                           ___asfldiv@f2 00BB  

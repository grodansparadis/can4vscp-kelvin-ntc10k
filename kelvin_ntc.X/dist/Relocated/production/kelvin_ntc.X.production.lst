

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Sep 14 10:17:44 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000B00                     __psmallconst:
   122                           	opt stack 0
   123  000B00                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000B00  77                 	db	119
   126  000B01  77                 	db	119
   127  000B02  77                 	db	119
   128  000B03  2E                 	db	46
   129  000B04  65                 	db	101
   130  000B05  75                 	db	117
   131  000B06  72                 	db	114
   132  000B07  6F                 	db	111
   133  000B08  73                 	db	115
   134  000B09  6F                 	db	111
   135  000B0A  75                 	db	117
   136  000B0B  72                 	db	114
   137  000B0C  63                 	db	99
   138  000B0D  65                 	db	101
   139  000B0E  2E                 	db	46
   140  000B0F  73                 	db	115
   141  000B10  65                 	db	101
   142  000B11  2F                 	db	47
   143  000B12  6E                 	db	110
   144  000B13  74                 	db	116
   145  000B14  63                 	db	99
   146  000B15  31                 	db	49
   147  000B16  30                 	db	48
   148  000B17  4B                 	db	75
   149  000B18  41                 	db	65
   150  000B19  5F                 	db	95
   151  000B1A  33                 	db	51
   152  000B1B  2E                 	db	46
   153  000B1C  78                 	db	120
   154  000B1D  6D                 	db	109
   155  000B1E  6C                 	db	108
   156  000B1F  00                 	db	0
   157  000B20                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000B20                     exp@coeff:
   160                           	opt stack 0
   161  000B20  0000               	dw	0
   162  000B22  3F80               	dw	16256
   163  000B24  7218               	dw	29208
   164  000B26  3F31               	dw	16177
   165  000B28  FDF0               	dw	65008
   166  000B2A  3E75               	dw	15989
   167  000B2C  5847               	dw	22599
   168  000B2E  3D63               	dw	15715
   169  000B30  9558               	dw	38232
   170  000B32  3C1D               	dw	15389
   171  000B34  C482               	dw	50306
   172  000B36  3AAE               	dw	15022
   173  000B38  78A8               	dw	30888
   174  000B3A  3921               	dw	14625
   175  000B3C  93EF               	dw	37871
   176  000B3E  3780               	dw	14208
   177  000B40  92A0               	dw	37536
   178  000B42  35A7               	dw	13735
   179  000B44  5646               	dw	22086
   180  000B46  3415               	dw	13333
   181  000B48                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000B48                     log@coeff:
   184                           	opt stack 0
   185  000B48  0000               	dw	0
   186  000B4A  0000               	dw	0
   187  000B4C  FFC4               	dw	65476
   188  000B4E  3F7F               	dw	16255
   189  000B50  EF80               	dw	61312
   190  000B52  BEFF               	dw	48895
   191  000B54  E190               	dw	57744
   192  000B56  3EA9               	dw	16041
   193  000B58  82EC               	dw	33516
   194  000B5A  BE76               	dw	48758
   195  000B5C  AD82               	dw	44418
   196  000B5E  3E2B               	dw	15915
   197  000B60  3C0E               	dw	15374
   198  000B62  BDC3               	dw	48579
   199  000B64  D187               	dw	53639
   200  000B66  3D13               	dw	15635
   201  000B68  7841               	dw	30785
   202  000B6A  BBD3               	dw	48083
   203  000B6C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  000B6C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  0057F6                     __pcinit:
   305                           	opt stack 0
   306  0057F6                     start_initialization:
   307                           	opt stack 0
   308  0057F6                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  0057F6  EE01  F084         	lfsr	0,__pbssBIGRAM
   313  0057FA  EE13 F0C0          	lfsr	1,960
   314  0057FE                     clear_0:
   315  0057FE  6AEE               	clrf	postinc0,c
   316  005800  50E5               	movf	postdec1,w,c
   317  005802  50E1               	movf	fsr1l,w,c
   318  005804  E1FC               	bnz	clear_0
   319  005806  50E2               	movf	fsr1h,w,c
   320  005808  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (78 bytes)
   323  00580A  EE01  F000         	lfsr	0,__pbssBANK1
   324  00580E  0E4E               	movlw	78
   325  005810                     clear_1:
   326  005810  6AEE               	clrf	postinc0,c
   327  005812  06E8               	decf	wreg,f,c
   328  005814  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (60 bytes)
   331  005816  EE00  F0A0         	lfsr	0,__pbssBANK0
   332  00581A  0E3C               	movlw	60
   333  00581C                     clear_2:
   334  00581C  6AEE               	clrf	postinc0,c
   335  00581E  06E8               	decf	wreg,f,c
   336  005820  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  005822  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  005826  0E0D               	movlw	13
   341  005828                     clear_3:
   342  005828  6AEE               	clrf	postinc0,c
   343  00582A  06E8               	decf	wreg,f,c
   344  00582C  E1FD               	bnz	clear_3
   345  00582E                     end_of_initialization:
   346                           	opt stack 0
   347  00582E                     __end_of__initialization:
   348                           	opt stack 0
   349  00582E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  005830  6EF8               	movwf	tblptru,c
   351  005832  0100               	movlb	0
   352  005834  EF68  F024         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _vscp_alarmstatus:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_guid_reset:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_initledfunc:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_minute:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000A0                     __pbssBANK0:
   408                           	opt stack 0
   409  0000A0                     _current_temp:
   410                           	opt stack 0
   411  0000A0                     	ds	12
   412  0000AC                     _measurement_clock:
   413                           	opt stack 0
   414  0000AC                     	ds	4
   415  0000B0                     _timeout_clock:
   416                           	opt stack 0
   417  0000B0                     	ds	4
   418  0000B4                     _vscp_configtimer:
   419                           	opt stack 0
   420  0000B4                     	ds	2
   421  0000B6                     _vscp_timer:
   422                           	opt stack 0
   423  0000B6                     	ds	2
   424  0000B8                     _adc_conversion_flags:
   425                           	opt stack 0
   426  0000B8                     	ds	1
   427  0000B9                     _high_alarm:
   428                           	opt stack 0
   429  0000B9                     	ds	1
   430  0000BA                     _low_alarm:
   431                           	opt stack 0
   432  0000BA                     	ds	1
   433  0000BB                     _seconds:
   434                           	opt stack 0
   435  0000BB                     	ds	1
   436  0000BC                     _sendTimer:
   437                           	opt stack 0
   438  0000BC                     	ds	1
   439  0000BD                     _vscp_hour:
   440                           	opt stack 0
   441  0000BD                     	ds	1
   442  0000BE                     _vscp_initbtncnt:
   443                           	opt stack 0
   444  0000BE                     	ds	1
   445  0000BF                     _vscp_nickname:
   446                           	opt stack 0
   447  0000BF                     	ds	1
   448  0000C0                     _vscp_node_state:
   449                           	opt stack 0
   450  0000C0                     	ds	1
   451  0000C1                     _vscp_imsg:
   452                           	opt stack 0
   453  0000C1                     	ds	14
   454  0000CF                     _vscp_omsg:
   455                           	opt stack 0
   456  0000CF                     	ds	13
   457                           tblptru	equ	0xFF8
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1h	equ	0xFE2
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssBANK1
   465  000100                     __pbssBANK1:
   466                           	opt stack 0
   467  000100                     _seconds_temp:
   468                           	opt stack 0
   469  000100                     	ds	6
   470  000106                     _sh_coefficients:
   471                           	opt stack 0
   472  000106                     	ds	72
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  000184                     __pbssBIGRAM:
   482                           	opt stack 0
   483  000184                     _adc:
   484                           	opt stack 0
   485  000184                     	ds	960
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK1
   494  00014E                     __pcstackBANK1:
   495                           	opt stack 0
   496  00014E                     doWork@Rinf:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x0
   500  00014E                     	ds	4
   501  000152                     doWork@calVoltage:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  000152                     	ds	4
   506  000156                     _doWork$2270:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x8
   510  000156                     	ds	4
   511  00015A                     _doWork$2271:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xC
   515  00015A                     	ds	4
   516  00015E                     _doWork$2272:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x10
   520  00015E                     	ds	16
   521  00016E                     doWork@v:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x20
   525  00016E                     	ds	4
   526  000172                     doWork@B:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x24
   530  000172                     	ds	2
   531  000174                     doWork@resistance:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x26
   535  000174                     	ds	4
   536  000178                     doWork@j:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x2A
   540  000178                     	ds	1
   541  000179                     doWork@setpoint:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x2B
   545  000179                     	ds	2
   546  00017B                     doWork@avarage:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x2D
   550  00017B                     	ds	4
   551  00017F                     doWork@temp:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x31
   555  00017F                     	ds	4
   556  000183                     doWork@i:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x35
   560  000183                     	ds	1
   561                           tblptru	equ	0xFF8
   562                           postinc0	equ	0xFEE
   563                           wreg	equ	0xFE8
   564                           postdec1	equ	0xFE5
   565                           fsr1h	equ	0xFE2
   566                           fsr1l	equ	0xFE1
   567                           
   568                           	psect	cstackBANK0
   569  000060                     __pcstackBANK0:
   570                           	opt stack 0
   571  000060                     ?_sendVSCPFrame:
   572                           	opt stack 0
   573  000060                     ?___fladd:
   574                           	opt stack 0
   575  000060                     ___aldiv@counter:
   576                           	opt stack 0
   577  000060                     sendVSCPFrame@vscpclass:
   578                           	opt stack 0
   579  000060                     ___fladd@f1:
   580                           	opt stack 0
   581                           
   582                           ; 4 bytes @ 0x0
   583  000060                     	ds	1
   584  000061                     ___aldiv@sign:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x1
   588  000061                     	ds	1
   589  000062                     sendVSCPFrame@vscptype:
   590                           	opt stack 0
   591  000062                     ___aldiv@quotient:
   592                           	opt stack 0
   593                           
   594                           ; 4 bytes @ 0x2
   595  000062                     	ds	1
   596  000063                     sendVSCPFrame@nodeid:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x3
   600  000063                     	ds	1
   601  000064                     sendVSCPFrame@priority:
   602                           	opt stack 0
   603  000064                     ___fladd@f2:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x4
   607  000064                     	ds	1
   608  000065                     sendVSCPFrame@size:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x5
   612  000065                     	ds	1
   613  000066                     ?___altofl:
   614                           	opt stack 0
   615  000066                     sendVSCPFrame@pData:
   616                           	opt stack 0
   617  000066                     ___altofl@c:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x6
   621  000066                     	ds	1
   622  000067                     ??_sendVSCPFrame:
   623                           
   624                           ; 0 bytes @ 0x7
   625  000067                     	ds	1
   626  000068                     ?___flsub:
   627                           	opt stack 0
   628  000068                     ___flsub@f1:
   629                           	opt stack 0
   630  000068                     eval_poly@res:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x8
   634  000068                     	ds	2
   635  00006A                     ___altofl@sign:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0xA
   639  00006A                     	ds	1
   640  00006B                     ?_floor:
   641                           	opt stack 0
   642  00006B                     floor@x:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0xB
   646  00006B                     	ds	1
   647  00006C                     ?_ldexp:
   648                           	opt stack 0
   649  00006C                     ___flsub@f2:
   650                           	opt stack 0
   651  00006C                     ldexp@value:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0xC
   655  00006C                     	ds	3
   656  00006F                     floor@i:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0xF
   660  00006F                     	ds	1
   661  000070                     ?___fldiv:
   662                           	opt stack 0
   663  000070                     ldexp@newexp:
   664                           	opt stack 0
   665  000070                     ___fldiv@f1:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0x10
   669  000070                     	ds	3
   670  000073                     floor@expon:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x13
   674  000073                     	ds	1
   675  000074                     ___fldiv@f2:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x14
   679  000074                     	ds	7
   680  00007B                     sendVSCPFrame@id:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x1B
   684  00007B                     	ds	4
   685  00007F                     ??_vscp_handleProtocolEvent:
   686  00007F                     ??_vscp_doOneSecondWork:
   687  00007F                     ___fldiv@cntr:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x1F
   691  00007F                     	ds	1
   692  000080                     ___fldiv@f3:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x20
   696  000080                     	ds	4
   697  000084                     ___fldiv@exp:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x24
   701  000084                     	ds	1
   702  000085                     ___fldiv@sign:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x25
   706  000085                     	ds	1
   707  000086                     ?_exp:
   708                           	opt stack 0
   709  000086                     ?_log:
   710                           	opt stack 0
   711  000086                     ?_Celsius2Fahrenheit:
   712                           	opt stack 0
   713  000086                     ?___asfldiv:
   714                           	opt stack 0
   715  000086                     vscp_handleProtocolEvent@page_save:
   716                           	opt stack 0
   717  000086                     ___asfldiv@f1p:
   718                           	opt stack 0
   719  000086                     Celsius2Fahrenheit@tc:
   720                           	opt stack 0
   721  000086                     exp@x:
   722                           	opt stack 0
   723  000086                     log@x:
   724                           	opt stack 0
   725                           
   726                           ; 4 bytes @ 0x26
   727  000086                     	ds	2
   728  000088                     vscp_handleProtocolEvent@page_save_1167:
   729                           	opt stack 0
   730  000088                     ___asfldiv@f2:
   731                           	opt stack 0
   732                           
   733                           ; 4 bytes @ 0x28
   734  000088                     	ds	2
   735  00008A                     ?_setEventData:
   736                           	opt stack 0
   737  00008A                     vscp_handleProtocolEvent@offset:
   738                           	opt stack 0
   739  00008A                     setEventData@v:
   740                           	opt stack 0
   741  00008A                     _exp$2276:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x2A
   745  00008A                     	ds	1
   746  00008B                     vscp_handleProtocolEvent@pos:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x2B
   750  00008B                     	ds	1
   751  00008C                     setEventData@unit:
   752                           	opt stack 0
   753  00008C                     vscp_handleProtocolEvent@bytes:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x2C
   757  00008C                     	ds	1
   758  00008D                     vscp_handleProtocolEvent@len:
   759                           	opt stack 0
   760  00008D                     setEventData@newval:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x2D
   764  00008D                     	ds	1
   765  00008E                     vscp_handleProtocolEvent@pos_1156:
   766                           	opt stack 0
   767  00008E                     exp@exponent:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x2E
   771  00008E                     	ds	1
   772  00008F                     vscp_handleProtocolEvent@len_1157:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x2F
   776  00008F                     	ds	1
   777  000090                     vscp_handleProtocolEvent@bytes_this_time:
   778                           	opt stack 0
   779  000090                     exp@sign:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x30
   783  000090                     	ds	1
   784  000091                     ??_doWork:
   785  000091                     vscp_handleProtocolEvent@cb:
   786                           	opt stack 0
   787  000091                     setEventData@ival:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x31
   791  000091                     	ds	1
   792  000092                     vscp_handleProtocolEvent@i_1166:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x32
   796  000092                     	ds	1
   797  000093                     ??_handle_sync:
   798  000093                     ??_doOneSecondWork:
   799  000093                     vscp_handleProtocolEvent@k:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x33
   803  000093                     	ds	1
   804  000094                     vscp_handleProtocolEvent@i_1155:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x34
   808  000094                     	ds	1
   809  000095                     doOneSecondWork@tmp:
   810                           	opt stack 0
   811  000095                     handle_sync@i:
   812                           	opt stack 0
   813  000095                     vscp_handleProtocolEvent@byte:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x35
   817  000095                     	ds	1
   818  000096                     doOneSecondWork@i:
   819                           	opt stack 0
   820  000096                     vscp_handleProtocolEvent@bytes_1162:
   821                           	opt stack 0
   822                           
   823                           ; 2 bytes @ 0x36
   824  000096                     	ds	2
   825  000098                     vscp_handleProtocolEvent@i_1158:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x38
   829  000098                     	ds	1
   830  000099                     vscp_handleProtocolEvent@i:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x39
   834  000099                     	ds	1
   835  00009A                     vscp_handleProtocolEvent@j:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x3A
   839  00009A                     	ds	5
   840  00009F                     main@i:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x3F
   844  00009F                     	ds	1
   845                           tblptru	equ	0xFF8
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           postdec1	equ	0xFE5
   849                           fsr1h	equ	0xFE2
   850                           fsr1l	equ	0xFE1
   851                           
   852                           	psect	cstackCOMRAM
   853  000001                     __pcstackCOMRAM:
   854                           	opt stack 0
   855  000001                     ?i1_WriteTimer0:
   856                           	opt stack 0
   857  000001                     i1WriteTimer0@timer0:
   858                           	opt stack 0
   859                           
   860                           ; 2 bytes @ 0x0
   861  000001                     	ds	2
   862  000003                     i1WriteTimer0@timer:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x2
   866  000003                     	ds	2
   867  000005                     ??_interrupt_at_low_vector:
   868                           
   869                           ; 0 bytes @ 0x4
   870  000005                     	ds	9
   871  00000E                     ?_WriteTimer0:
   872                           	opt stack 0
   873  00000E                     ?_writeEEPROM:
   874                           	opt stack 0
   875  00000E                     ?_OpenADC:
   876                           	opt stack 0
   877  00000E                     ?__CANIDToRegs:
   878                           	opt stack 0
   879  00000E                     ?__RegsToCANID:
   880                           	opt stack 0
   881  00000E                     ??_vscp_getMDF_URL:
   882  00000E                     ?___flge:
   883                           	opt stack 0
   884  00000E                     ?_readEEPROM:
   885                           	opt stack 0
   886  00000E                     ?___lbmod:
   887                           	opt stack 0
   888  00000E                     ?__ECANPointBuffer:
   889                           	opt stack 0
   890  00000E                     ?___flpack:
   891                           	opt stack 0
   892  00000E                     ?_frexp:
   893                           	opt stack 0
   894  00000E                     ?_vscp_getFamilyCode:
   895                           	opt stack 0
   896  00000E                     ?_vscp_getFamilyType:
   897                           	opt stack 0
   898  00000E                     ?___flneg:
   899                           	opt stack 0
   900  00000E                     vscp_getMatrixInfo@pData:
   901                           	opt stack 0
   902  00000E                     ECANSetOperationMode@mode:
   903                           	opt stack 0
   904  00000E                     OpenADC@config2:
   905                           	opt stack 0
   906  00000E                     OpenTimer0@config:
   907                           	opt stack 0
   908  00000E                     ___lbmod@divisor:
   909                           	opt stack 0
   910  00000E                     __CANIDToRegs@ptr:
   911                           	opt stack 0
   912  00000E                     __RegsToCANID@ptr:
   913                           	opt stack 0
   914  00000E                     writeEEPROM@address:
   915                           	opt stack 0
   916  00000E                     readEEPROM@address:
   917                           	opt stack 0
   918  00000E                     WriteTimer0@timer0:
   919                           	opt stack 0
   920  00000E                     ___flpack@arg:
   921                           	opt stack 0
   922  00000E                     ___flge@ff1:
   923                           	opt stack 0
   924  00000E                     ___flneg@f1:
   925                           	opt stack 0
   926  00000E                     frexp@value:
   927                           	opt stack 0
   928                           
   929                           ; 4 bytes @ 0xD
   930  00000E                     	ds	1
   931  00000F                     vscp_getMDF_URL@idx:
   932                           	opt stack 0
   933  00000F                     vscp_getMatrixInfo@i:
   934                           	opt stack 0
   935  00000F                     OpenADC@portconfig:
   936                           	opt stack 0
   937  00000F                     ___lbmod@dividend:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0xE
   941  00000F                     	ds	1
   942  000010                     ??_OpenADC:
   943  000010                     __RegsToCANID@val:
   944                           	opt stack 0
   945  000010                     writeEEPROM@data:
   946                           	opt stack 0
   947  000010                     ___lbmod@counter:
   948                           	opt stack 0
   949  000010                     WriteTimer0@timer:
   950                           	opt stack 0
   951  000010                     __CANIDToRegs@val:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0xF
   955  000010                     	ds	1
   956  000011                     ?_vscp_setGUID:
   957                           	opt stack 0
   958  000011                     ?_vscp_setUserID:
   959                           	opt stack 0
   960  000011                     ?_vscp_setManufacturerId:
   961                           	opt stack 0
   962  000011                     init_app_eeprom@i:
   963                           	opt stack 0
   964  000011                     vscp_setGUID@data:
   965                           	opt stack 0
   966  000011                     vscp_setUserID@data:
   967                           	opt stack 0
   968  000011                     vscp_setManufacturerId@data:
   969                           	opt stack 0
   970  000011                     vscp_goBootloaderMode@algorithm:
   971                           	opt stack 0
   972  000011                     vscp_writeNicknamePermanent@nickname:
   973                           	opt stack 0
   974  000011                     vscp_setSegmentCRC@crc:
   975                           	opt stack 0
   976  000011                     vscp_setControlByte@ctrl:
   977                           	opt stack 0
   978  000011                     __RegsToCANID@type:
   979                           	opt stack 0
   980  000011                     __ECANPointBuffer@b:
   981                           	opt stack 0
   982  000011                     readEEPROM@data:
   983                           	opt stack 0
   984  000011                     ___lbmod@rem:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x10
   988  000011                     	ds	1
   989  000012                     ??__RegsToCANID:
   990  000012                     ?_getCalibrationValue:
   991                           	opt stack 0
   992  000012                     ?___wmul:
   993                           	opt stack 0
   994  000012                     vscp_readAppReg@pos:
   995                           	opt stack 0
   996  000012                     vscp_getGUID@idx:
   997                           	opt stack 0
   998  000012                     vscp_setGUID@idx:
   999                           	opt stack 0
  1000  000012                     vscp_getUserID@idx:
  1001                           	opt stack 0
  1002  000012                     vscp_setUserID@idx:
  1003                           	opt stack 0
  1004  000012                     vscp_getManufacturerId@idx:
  1005                           	opt stack 0
  1006  000012                     vscp_setManufacturerId@idx:
  1007                           	opt stack 0
  1008  000012                     vscp_handleDropNickname@bytes:
  1009                           	opt stack 0
  1010  000012                     OpenADC@config:
  1011                           	opt stack 0
  1012  000012                     ___flpack@exp:
  1013                           	opt stack 0
  1014  000012                     __ECANPointBuffer@pt:
  1015                           	opt stack 0
  1016  000012                     frexp@eptr:
  1017                           	opt stack 0
  1018  000012                     ___wmul@multiplier:
  1019                           	opt stack 0
  1020  000012                     ___flge@ff2:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x11
  1024  000012                     	ds	1
  1025  000013                     ??_vscp_readStdReg:
  1026  000013                     vscp_readAppReg@reg:
  1027                           	opt stack 0
  1028  000013                     ___flpack@sign:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x12
  1032  000013                     	ds	1
  1033  000014                     ??_getCalibrationValue:
  1034  000014                     ??___flpack:
  1035  000014                     ??_frexp:
  1036  000014                     vscp_readAppReg@rv:
  1037                           	opt stack 0
  1038  000014                     __CANIDToRegs@type:
  1039                           	opt stack 0
  1040  000014                     __RegsToCANID@Value:
  1041                           	opt stack 0
  1042  000014                     ___wmul@multiplicand:
  1043                           	opt stack 0
  1044                           
  1045                           ; 2 bytes @ 0x13
  1046  000014                     	ds	1
  1047  000015                     ??__CANIDToRegs:
  1048  000015                     ?_ECANReceiveMessage:
  1049                           	opt stack 0
  1050  000015                     ECANReceiveMessage@data:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x14
  1054  000015                     	ds	1
  1055  000016                     ECANReceiveMessage@dataLen:
  1056                           	opt stack 0
  1057  000016                     ___wmul@product:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x15
  1061  000016                     	ds	1
  1062  000017                     ECANReceiveMessage@msgFlags:
  1063                           	opt stack 0
  1064  000017                     __CANIDToRegs@Value:
  1065                           	opt stack 0
  1066  000017                     getCalibrationValue@cal:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x16
  1070  000017                     	ds	1
  1071  000018                     ??_writeCoeffs2Ram:
  1072  000018                     ?_ECANSendMessage:
  1073                           	opt stack 0
  1074  000018                     ?___awtofl:
  1075                           	opt stack 0
  1076  000018                     ?___lwtofl:
  1077                           	opt stack 0
  1078  000018                     ECANReceiveMessage@savedPtr:
  1079                           	opt stack 0
  1080  000018                     ___awtofl@c:
  1081                           	opt stack 0
  1082  000018                     ___lwtofl@c:
  1083                           	opt stack 0
  1084  000018                     ECANSendMessage@id:
  1085                           	opt stack 0
  1086  000018                     vscp_readStdReg@code:
  1087                           	opt stack 0
  1088                           
  1089                           ; 4 bytes @ 0x17
  1090  000018                     	ds	1
  1091  000019                     getCalibrationValue@i:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x18
  1095  000019                     	ds	1
  1096  00001A                     ECANReceiveMessage@id:
  1097                           	opt stack 0
  1098  00001A                     writeCoeffs2Ram@c:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x19
  1102  00001A                     	ds	1
  1103  00001B                     ECANReceiveMessage@i:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x1A
  1107  00001B                     	ds	1
  1108  00001C                     ECANSendMessage@data:
  1109                           	opt stack 0
  1110  00001C                     ECANReceiveMessage@mode:
  1111                           	opt stack 0
  1112  00001C                     vscp_readStdReg@code_1140:
  1113                           	opt stack 0
  1114                           
  1115                           ; 4 bytes @ 0x1B
  1116  00001C                     	ds	1
  1117  00001D                     ECANSendMessage@dataLen:
  1118                           	opt stack 0
  1119  00001D                     ECANReceiveMessage@temp:
  1120                           	opt stack 0
  1121  00001D                     ___awtofl@sign:
  1122                           	opt stack 0
  1123  00001D                     writeCoeffs2Ram@i:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x1C
  1127  00001D                     	ds	1
  1128  00001E                     ?___flmul:
  1129                           	opt stack 0
  1130  00001E                     ECANSendMessage@msgFlags:
  1131                           	opt stack 0
  1132  00001E                     ECANReceiveMessage@ptr:
  1133                           	opt stack 0
  1134  00001E                     ___flmul@f1:
  1135                           	opt stack 0
  1136                           
  1137                           ; 4 bytes @ 0x1D
  1138  00001E                     	ds	1
  1139  00001F                     ??_ECANSendMessage:
  1140  00001F                     writeCoeffs2Ram@j:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x1E
  1144  00001F                     	ds	1
  1145  000020                     ?_getCANFrame:
  1146                           	opt stack 0
  1147  000020                     getCANFrame@pdlc:
  1148                           	opt stack 0
  1149  000020                     vscp_readStdReg@idx:
  1150                           	opt stack 0
  1151  000020                     ECANSendMessage@pb:
  1152                           	opt stack 0
  1153                           
  1154                           ; 18 bytes @ 0x1F
  1155  000020                     	ds	1
  1156  000021                     ?_vscp_writeAppReg:
  1157                           	opt stack 0
  1158  000021                     init_app_ram@i:
  1159                           	opt stack 0
  1160  000021                     vscp_writeAppReg@val:
  1161                           	opt stack 0
  1162  000021                     getCANFrame@pdata:
  1163                           	opt stack 0
  1164  000021                     vscp_readStdReg@idx_1141:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x20
  1168  000021                     	ds	1
  1169  000022                     ?_vscp_writeStdReg:
  1170                           	opt stack 0
  1171  000022                     vscp_writeAppReg@pos:
  1172                           	opt stack 0
  1173  000022                     getCANFrame@pid:
  1174                           	opt stack 0
  1175  000022                     vscp_readStdReg@rv:
  1176                           	opt stack 0
  1177  000022                     vscp_writeStdReg@value:
  1178                           	opt stack 0
  1179  000022                     ___flmul@f2:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x21
  1183  000022                     	ds	1
  1184  000023                     ??_vscp_writeStdReg:
  1185  000023                     vscp_writeAppReg@reg:
  1186                           	opt stack 0
  1187  000023                     getCANFrame@flags:
  1188                           	opt stack 0
  1189  000023                     vscp_readStdReg@reg:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x22
  1193  000023                     	ds	1
  1194  000024                     ?_getVSCPFrame:
  1195                           	opt stack 0
  1196  000024                     vscp_writeAppReg@rv:
  1197                           	opt stack 0
  1198  000024                     getVSCPFrame@pvscptype:
  1199                           	opt stack 0
  1200  000024                     vscp_readRegister@reg:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x23
  1204  000024                     	ds	1
  1205  000025                     getVSCPFrame@pNodeId:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x24
  1209  000025                     	ds	1
  1210  000026                     getVSCPFrame@pPriority:
  1211                           	opt stack 0
  1212                           
  1213                           ; 1 bytes @ 0x25
  1214  000026                     	ds	1
  1215  000027                     getVSCPFrame@pSize:
  1216                           	opt stack 0
  1217  000027                     vscp_writeStdReg@rv:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x26
  1221  000027                     	ds	1
  1222  000028                     getVSCPFrame@pData:
  1223                           	opt stack 0
  1224  000028                     vscp_writeStdReg@reg:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x27
  1228  000028                     	ds	1
  1229  000029                     ??_getVSCPFrame:
  1230  000029                     ?_vscp_writeRegister:
  1231                           	opt stack 0
  1232  000029                     vscp_writeRegister@value:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x28
  1236  000029                     	ds	1
  1237  00002A                     vscp_writeRegister@reg:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x29
  1241  00002A                     	ds	3
  1242  00002D                     getVSCPFrame@pvscpclass:
  1243                           	opt stack 0
  1244  00002D                     ___flmul@exp:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x2C
  1248  00002D                     	ds	1
  1249  00002E                     getVSCPFrame@id:
  1250                           	opt stack 0
  1251  00002E                     ___flmul@f3_as_product:
  1252                           	opt stack 0
  1253                           
  1254                           ; 4 bytes @ 0x2D
  1255  00002E                     	ds	4
  1256  000032                     ECANSendMessage@mode:
  1257                           	opt stack 0
  1258  000032                     vscp_getEvent@rv:
  1259                           	opt stack 0
  1260  000032                     ___flmul@cntr:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x31
  1264  000032                     	ds	1
  1265  000033                     ECANSendMessage@buffers:
  1266                           	opt stack 0
  1267  000033                     ___flmul@sign:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x32
  1271  000033                     	ds	1
  1272  000034                     ??___fladd:
  1273  000034                     ?___asflmul:
  1274                           	opt stack 0
  1275  000034                     ?___fltol:
  1276                           	opt stack 0
  1277  000034                     ECANSendMessage@j:
  1278                           	opt stack 0
  1279  000034                     ___asflmul@multiplicand:
  1280                           	opt stack 0
  1281  000034                     ___fltol@f1:
  1282                           	opt stack 0
  1283                           
  1284                           ; 4 bytes @ 0x33
  1285  000034                     	ds	1
  1286  000035                     ECANSendMessage@tempBSEL0:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x34
  1290  000035                     	ds	1
  1291  000036                     ECANSendMessage@tempPtr:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x35
  1295  000036                     	ds	2
  1296  000038                     ??___fltol:
  1297  000038                     ECANSendMessage@temp:
  1298                           	opt stack 0
  1299  000038                     ___asflmul@mp:
  1300                           	opt stack 0
  1301  000038                     ___fladd@sign:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x37
  1305  000038                     	ds	1
  1306  000039                     ECANSendMessage@i:
  1307                           	opt stack 0
  1308  000039                     ___fladd@exp2:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x38
  1312  000039                     	ds	1
  1313  00003A                     ___fladd@exp1:
  1314                           	opt stack 0
  1315  00003A                     ECANSendMessage@ptr:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x39
  1319  00003A                     	ds	1
  1320  00003B                     ?_Celsius2Kelvin:
  1321                           	opt stack 0
  1322  00003B                     ?_eval_poly:
  1323                           	opt stack 0
  1324  00003B                     ?___asfladd:
  1325                           	opt stack 0
  1326  00003B                     ?___asflsub:
  1327                           	opt stack 0
  1328  00003B                     ___asfladd@f1p:
  1329                           	opt stack 0
  1330  00003B                     ___asflsub@f1p:
  1331                           	opt stack 0
  1332  00003B                     Celsius2Kelvin@tc:
  1333                           	opt stack 0
  1334  00003B                     eval_poly@x:
  1335                           	opt stack 0
  1336                           
  1337                           ; 4 bytes @ 0x3A
  1338  00003B                     	ds	1
  1339  00003C                     ?_sendCANFrame:
  1340                           	opt stack 0
  1341  00003C                     ___fltol@sign1:
  1342                           	opt stack 0
  1343  00003C                     sendCANFrame@id:
  1344                           	opt stack 0
  1345                           
  1346                           ; 4 bytes @ 0x3B
  1347  00003C                     	ds	1
  1348  00003D                     ___fltol@exp1:
  1349                           	opt stack 0
  1350  00003D                     ___asfladd@f2:
  1351                           	opt stack 0
  1352  00003D                     ___asflsub@f2:
  1353                           	opt stack 0
  1354                           
  1355                           ; 4 bytes @ 0x3C
  1356  00003D                     	ds	1
  1357  00003E                     ?___aldiv:
  1358                           	opt stack 0
  1359  00003E                     ___aldiv@dividend:
  1360                           	opt stack 0
  1361                           
  1362                           ; 4 bytes @ 0x3D
  1363  00003E                     	ds	1
  1364  00003F                     eval_poly@d:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x3E
  1368  00003F                     	ds	1
  1369  000040                     sendCANFrame@dlc:
  1370                           	opt stack 0
  1371  000040                     eval_poly@n:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x3F
  1375  000040                     	ds	1
  1376  000041                     sendCANFrame@pdata:
  1377                           	opt stack 0
  1378                           
  1379                           ; 1 bytes @ 0x40
  1380  000041                     	ds	1
  1381  000042                     ??_eval_poly:
  1382  000042                     ___aldiv@divisor:
  1383                           	opt stack 0
  1384                           
  1385                           ; 4 bytes @ 0x41
  1386  000042                     	ds	1
  1387  000043                     ??_ldexp:
  1388  000043                     vscp_sendEvent@rv:
  1389                           	opt stack 0
  1390  000043                     log@exponent:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x42
  1394  000043                     	ds	1
  1395  000044                     ??_sendTempEvent:
  1396  000044                     ?_vscp_sendHeartBeat:
  1397                           	opt stack 0
  1398  000044                     ??_vscp_newNodeOnline:
  1399  000044                     vscp_sendHeartBeat@subzone:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x43
  1403  000044                     	ds	1
  1404  000045                     sendTempEvent@i:
  1405                           	opt stack 0
  1406  000045                     vscp_sendHeartBeat@zone:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x44
  1410  000045                     	ds	1
  1411  000046                     tblptru	equ	0xFF8
  1412                           postinc0	equ	0xFEE
  1413                           wreg	equ	0xFE8
  1414                           postdec1	equ	0xFE5
  1415                           fsr1h	equ	0xFE2
  1416                           fsr1l	equ	0xFE1
  1417                           
  1418                           ; 0 bytes @ 0x45
  1419 ;;
  1420 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1421 ;;
  1422 ;; *************** function _main *****************
  1423 ;; Defined at:
  1424 ;;		line 302 in file "../main.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;		None
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  i               1   63[BANK0 ] unsigned char 
  1429 ;; Return value:  Size  Location     Type
  1430 ;;		None               void
  1431 ;; Registers used:
  1432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1433 ;; Tracked objects:
  1434 ;;		On entry : 0/0
  1435 ;;		On exit  : E/0
  1436 ;;		Unchanged: 0/0
  1437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1438 ;;      Params:         0       0       0       0       0       0       0
  1439 ;;      Locals:         0       1       0       0       0       0       0
  1440 ;;      Temps:          0       0       0       0       0       0       0
  1441 ;;      Totals:         0       1       0       0       0       0       0
  1442 ;;Total ram usage:        1 bytes
  1443 ;; Hardware stack levels required when called:    9
  1444 ;; This function calls:
  1445 ;;		_init
  1446 ;;		_vscp_check_pstorage
  1447 ;;		_init_app_eeprom
  1448 ;;		_vscp_init
  1449 ;;		_writeEEPROM
  1450 ;;		_vscp_getEvent
  1451 ;;		_vscp_goActiveState
  1452 ;;		_vscp_handleProbeState
  1453 ;;		_vscp_handleProtocolEvent
  1454 ;;		_handle_sync
  1455 ;;		_vscp_error
  1456 ;;		_doOneSecondWork
  1457 ;;		_vscp_doOneSecondWork
  1458 ;;		_doWork
  1459 ;; This function is called by:
  1460 ;;		Startup code after reset
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text0
  1465  0048D0                     __ptext0:
  1466                           	opt stack 0
  1467  0048D0                     _main:
  1468                           	opt stack 22
  1469                           
  1470                           ;main.c: 303: unsigned char i;
  1471                           ;main.c: 305: init();
  1472                           
  1473                           ;incstack = 0
  1474                           ;incstack = 0
  1475  0048D0  EC7A  F02C         	call	_init	;wreg free
  1476                           
  1477                           ;main.c: 309: if (!vscp_check_pstorage()) {
  1478  0048D4  ECE2  F02D         	call	_vscp_check_pstorage	;wreg free
  1479  0048D8  0900               	iorlw	0
  1480  0048DA  B4D8               	btfsc	status,2,c
  1481                           
  1482                           ;main.c: 312: init_app_eeprom();
  1483  0048DC  EC76  F011         	call	_init_app_eeprom	;wreg free
  1484                           
  1485                           ;main.c: 314: }
  1486                           ;main.c: 316: vscp_init();
  1487  0048E0  ECD9  F02B         	call	_vscp_init	;wreg free
  1488  0048E4                     l168:
  1489  0048E4  0004               	clrwdt		;# 
  1490                           
  1491                           ;main.c: 322: if ((vscp_initbtncnt > 250) &&
  1492                           ;main.c: 323: (0x01 != vscp_node_state)) {
  1493  0048E6  0EFA               	movlw	250
  1494  0048E8  0100               	movlb	0	; () banked
  1495  0048EA  65BE               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1496  0048EC  D00C               	goto	l13732
  1497                           
  1498                           ; BSR set to: 0
  1499  0048EE  05C0               	decf	_vscp_node_state& (0+255),w,b
  1500  0048F0  E00A               	bz	l13732
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;main.c: 326: vscp_nickname = 0xff;
  1504  0048F2  69BF               	setf	_vscp_nickname& (0+255),b
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;main.c: 327: writeEEPROM(0x01, 0xff);
  1508  0048F4  6A0F               	clrf	?_writeEEPROM+1,c
  1509  0048F6  0E01               	movlw	1
  1510  0048F8  6E0E               	movwf	?_writeEEPROM,c
  1511  0048FA  0EFF               	movlw	255
  1512  0048FC  6810               	setf	?_writeEEPROM+2,c
  1513  0048FE  ECAB  F02D         	call	_writeEEPROM	;wreg free
  1514                           
  1515                           ;main.c: 328: vscp_init();
  1516  004902  ECD9  F02B         	call	_vscp_init	;wreg free
  1517  004906                     l13732:
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;main.c: 330: }
  1521                           ;main.c: 334: vscp_imsg.flags = 0;
  1522  004906  6BC1               	clrf	_vscp_imsg& (0+255),b
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;main.c: 335: vscp_getEvent();
  1526  004908  EC5B  F02D         	call	_vscp_getEvent	;wreg free
  1527                           
  1528                           ;main.c: 338: switch (vscp_node_state) {
  1529  00490C  D024               	goto	l13762
  1530  00490E                     l13736:
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 343: if (0xff == vscp_nickname) {
  1534  00490E  29BF               	incf	_vscp_nickname& (0+255),w,b
  1535  004910  E103               	bnz	l13740
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 345: vscp_node_state = 0x01;
  1539  004912  0E01               	movlw	1
  1540  004914  6FC0               	movwf	_vscp_node_state& (0+255),b
  1541                           
  1542                           ;main.c: 346: }
  1543  004916  D02B               	goto	l13764
  1544  004918                     l13740:
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 347: else {
  1548                           ;main.c: 349: vscp_node_state = 0x03;
  1549  004918  0E03               	movlw	3
  1550  00491A  6FC0               	movwf	_vscp_node_state& (0+255),b
  1551  00491C                     l13742:
  1552                           
  1553                           ; BSR set to: 0
  1554                           ;main.c: 350: vscp_goActiveState();
  1555  00491C  EC16  F02E         	call	_vscp_goActiveState	;wreg free
  1556  004920  D026               	goto	l13764
  1557  004922                     l13744:
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;main.c: 355: vscp_handleProbeState();
  1561  004922  EC09  F026         	call	_vscp_handleProbeState	;wreg free
  1562                           
  1563                           ;main.c: 356: break;
  1564  004926  D023               	goto	l13764
  1565  004928                     l177:
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 365: if (vscp_imsg.flags & 0x80) {
  1569  004928  AFC1               	btfss	_vscp_imsg& (0+255),7,b
  1570  00492A  D021               	goto	l13764
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;main.c: 367: if ( 0 == vscp_imsg.vscp_class ) {
  1574  00492C  51C4               	movf	(_vscp_imsg+3)& (0+255),w,b
  1575  00492E  11C3               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1576  004930  E103               	bnz	l13752
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;main.c: 370: vscp_handleProtocolEvent();
  1580  004932  EC10  F019         	call	_vscp_handleProtocolEvent	;wreg free
  1581                           
  1582                           ;main.c: 372: }
  1583  004936  D01B               	goto	l13764
  1584  004938                     l13752:
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;main.c: 373: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1588                           ;main.c: 374: ( 26 == vscp_imsg.vscp_type ) ) {
  1589  004938  51C3               	movf	(_vscp_imsg+2)& (0+255),w,b
  1590  00493A  0A1E               	xorlw	30
  1591  00493C  11C4               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1592  00493E  E117               	bnz	l13764
  1593                           
  1594                           ; BSR set to: 0
  1595  004940  51C5               	movf	(_vscp_imsg+4)& (0+255),w,b
  1596  004942  0A1A               	xorlw	26
  1597  004944  E114               	bnz	l13764
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;main.c: 375: handle_sync();
  1601  004946  EC8E  F029         	call	_handle_sync	;wreg free
  1602  00494A  D011               	goto	l13764
  1603  00494C                     l13758:
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 382: vscp_error();
  1607  00494C  EC01  F02F         	call	_vscp_error	;wreg free
  1608                           
  1609                           ;main.c: 383: break;
  1610  004950  D00E               	goto	l13764
  1611  004952                     l183:
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 386: vscp_node_state = 0x00;
  1615  004952  6BC0               	clrf	_vscp_node_state& (0+255),b
  1616                           
  1617                           ;main.c: 387: break;
  1618  004954  D00C               	goto	l13764
  1619  004956                     l13762:
  1620  004956  0100               	movlb	0	; () banked
  1621  004958  51C0               	movf	_vscp_node_state& (0+255),w,b
  1622                           
  1623                           ; Switch size 1, requested type "speed"
  1624                           ; Number of cases is 5, Range of values is 0 to 4
  1625                           ; switch strategies available:
  1626                           ; Name         Instructions Cycles
  1627                           ; simple_byte           16     9 (average)
  1628                           ;	Chosen strategy is simple_byte
  1629  00495A  E0D9               	bz	l13736
  1630  00495C  0A01               	xorlw	1	; case 1
  1631  00495E  E0E1               	bz	l13744
  1632  004960  0A03               	xorlw	3	; case 2
  1633  004962  E0DC               	bz	l13742
  1634  004964  0A01               	xorlw	1	; case 3
  1635  004966  E0E0               	bz	l177
  1636  004968  0A07               	xorlw	7	; case 4
  1637  00496A  E0F0               	bz	l13758
  1638  00496C  D7F2               	goto	l183
  1639  00496E                     l13764:
  1640                           
  1641                           ;main.c: 393: if ( measurement_clock > 1000 ) {
  1642  00496E  0EE9               	movlw	233
  1643  004970  0100               	movlb	0	; () banked
  1644  004972  5DAC               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1645  004974  0E03               	movlw	3
  1646  004976  59AD               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1647  004978  0E00               	movlw	0
  1648  00497A  59AE               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1649  00497C  0E00               	movlw	0
  1650  00497E  59AF               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1651  004980  E3B1               	bnc	l168
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 395: measurement_clock = 0;
  1655  004982  6BAC               	clrf	_measurement_clock& (0+255),b	;volatile
  1656  004984  6BAD               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1657  004986  6BAE               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1658  004988  6BAF               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 396: doOneSecondWork();
  1662  00498A  EC3C  F01D         	call	_doOneSecondWork	;wreg free
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 397: seconds++;
  1666  00498E  2BBB               	incf	_seconds& (0+255),f,b
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 401: if (0x03 == vscp_node_state) {
  1670  004990  51C0               	movf	_vscp_node_state& (0+255),w,b
  1671  004992  0A03               	xorlw	3
  1672  004994  E10D               	bnz	l13786
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;main.c: 402: for (i = 0; i < 6; i++) {
  1676  004996  6B9F               	clrf	main@i& (0+255),b
  1677  004998                     l13780:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 403: seconds_temp[i]++;
  1681  004998  0E00               	movlw	low _seconds_temp
  1682  00499A  0100               	movlb	0	; () banked
  1683  00499C  259F               	addwf	main@i& (0+255),w,b
  1684  00499E  6ED9               	movwf	fsr2l,c
  1685  0049A0  6ADA               	clrf	fsr2h,c
  1686  0049A2  0E01               	movlw	high _seconds_temp
  1687  0049A4  22DA               	addwfc	fsr2h,f,c
  1688  0049A6  2ADF               	incf	indf2,f,c
  1689                           
  1690                           ; BSR set to: 1
  1691  0049A8  2B9F               	incf	main@i& (0+255),f,b
  1692                           
  1693                           ; BSR set to: 0
  1694  0049AA  0E05               	movlw	5
  1695  0049AC  659F               	cpfsgt	main@i& (0+255),b
  1696  0049AE  D7F4               	goto	l13780
  1697  0049B0                     l13786:
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 404: }
  1701                           ;main.c: 405: }
  1702                           ;main.c: 407: if (seconds > 60) {
  1703  0049B0  0E3C               	movlw	60
  1704  0049B2  65BB               	cpfsgt	_seconds& (0+255),b
  1705  0049B4  D001               	goto	l13790
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 408: seconds = 0;
  1709  0049B6  6BBB               	clrf	_seconds& (0+255),b
  1710  0049B8                     l13790:
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 409: }
  1714                           ;main.c: 412: vscp_doOneSecondWork();
  1715  0049B8  EC45  F02B         	call	_vscp_doOneSecondWork	;wreg free
  1716                           
  1717                           ;main.c: 415: doWork();
  1718  0049BC  EC38  F00C         	call	_doWork	;wreg free
  1719  0049C0  D791               	goto	l168
  1720  0049C2                     __end_of_main:
  1721                           	opt stack 0
  1722                           tblptru	equ	0xFF8
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1h	equ	0xFE2
  1727                           fsr1l	equ	0xFE1
  1728                           indf2	equ	0xFDF
  1729                           fsr2h	equ	0xFDA
  1730                           fsr2l	equ	0xFD9
  1731                           status	equ	0xFD8
  1732                           
  1733 ;; *************** function _doWork *****************
  1734 ;; Defined at:
  1735 ;;		line 430 in file "../main.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;		None
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;  temp            4   49[BANK1 ] unsigned char 
  1740 ;;  avarage         4   45[BANK1 ] unsigned char 
  1741 ;;  resistance      4   38[BANK1 ] unsigned char 
  1742 ;;  v               4   32[BANK1 ] unsigned char 
  1743 ;;  calVoltage      4    4[BANK1 ] unsigned char 
  1744 ;;  Rinf            4    0[BANK1 ] unsigned char 
  1745 ;;  setpoint        2   43[BANK1 ] int 
  1746 ;;  B               2   36[BANK1 ] unsigned short 
  1747 ;;  i               1   53[BANK1 ] unsigned char 
  1748 ;;  j               1   42[BANK1 ] unsigned char 
  1749 ;; Return value:  Size  Location     Type
  1750 ;;		None               void
  1751 ;; Registers used:
  1752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1753 ;; Tracked objects:
  1754 ;;		On entry : F/0
  1755 ;;		On exit  : E/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1758 ;;      Params:         0       0       0       0       0       0       0
  1759 ;;      Locals:         0       0      54       0       0       0       0
  1760 ;;      Temps:          0      14       0       0       0       0       0
  1761 ;;      Totals:         0      14      54       0       0       0       0
  1762 ;;Total ram usage:       68 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    7
  1765 ;; This function calls:
  1766 ;;		_writeEEPROM
  1767 ;;		_readEEPROM
  1768 ;;		_exp
  1769 ;;		_log
  1770 ;;		_getCalibrationValue
  1771 ;;		_vscp_sendEvent
  1772 ;;		___aldiv
  1773 ;;		___altofl
  1774 ;;		___asfladd
  1775 ;;		___fladd
  1776 ;;		___asfldiv
  1777 ;;		___fldiv
  1778 ;;		___flmul
  1779 ;;		___asflsub
  1780 ;;		___flsub
  1781 ;;		___fltol
  1782 ;;		___lwtofl
  1783 ;;		___wmul
  1784 ;; This function is called by:
  1785 ;;		_main
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text1
  1790  001870                     __ptext1:
  1791                           	opt stack 0
  1792  001870                     _doWork:
  1793                           	opt stack 23
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 431: uint8_t i, j;
  1797                           ;main.c: 432: uint16_t B;
  1798                           ;main.c: 433: double avarage;
  1799                           ;main.c: 434: double resistance;
  1800                           ;main.c: 435: double Rinf;
  1801                           ;main.c: 436: double temp;
  1802                           ;main.c: 437: double v;
  1803                           ;main.c: 438: double calVoltage;
  1804                           ;main.c: 439: int setpoint;
  1805                           ;main.c: 441: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1806                           ;main.c: 442: readEEPROM(0xF3));
  1807                           
  1808                           ;incstack = 0
  1809                           ;incstack = 0
  1810  001870  6A0F               	clrf	?_readEEPROM+1,c
  1811  001872  0EF3               	movlw	243
  1812  001874  6E0E               	movwf	?_readEEPROM,c
  1813  001876  ECA8  F02E         	call	_readEEPROM	;wreg free
  1814  00187A  0100               	movlb	0	; () banked
  1815  00187C  6F91               	movwf	??_doWork& (0+255),b
  1816  00187E  6A0F               	clrf	?_readEEPROM+1,c
  1817  001880  0EF2               	movlw	242
  1818  001882  6E0E               	movwf	?_readEEPROM,c
  1819  001884  ECA8  F02E         	call	_readEEPROM	;wreg free
  1820  001888  6E19               	movwf	?___lwtofl+1,c
  1821  00188A  0100               	movlb	0	; () banked
  1822  00188C  5191               	movf	??_doWork& (0+255),w,b
  1823  00188E  6E18               	movwf	?___lwtofl,c
  1824  001890  EC31  F02D         	call	___lwtofl	;wreg free
  1825  001894  C01B  F155         	movff	?___lwtofl+3,doWork@calVoltage+3
  1826  001898  C01A  F154         	movff	?___lwtofl+2,doWork@calVoltage+2
  1827  00189C  C019  F153         	movff	?___lwtofl+1,doWork@calVoltage+1
  1828  0018A0  C018  F152         	movff	?___lwtofl,doWork@calVoltage
  1829                           
  1830                           ;main.c: 447: for (i = 0; i < 6; i++) {
  1831  0018A4  0101               	movlb	1	; () banked
  1832  0018A6  6B83               	clrf	doWork@i& (0+255),b
  1833  0018A8                     l13900:
  1834                           
  1835                           ; BSR set to: 1
  1836                           ;main.c: 449: if (adc_conversion_flags & 1 << i) {
  1837  0018A8  C183  F091         	movff	doWork@i,??_doWork
  1838  0018AC  0E01               	movlw	1
  1839  0018AE  0100               	movlb	0	; () banked
  1840  0018B0  6F92               	movwf	(??_doWork+1)& (0+255),b
  1841  0018B2  2B91               	incf	??_doWork& (0+255),f,b
  1842  0018B4  D002               	goto	u13024
  1843  0018B6                     u13025:
  1844  0018B6  90D8               	bcf	status,0,c
  1845  0018B8  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  1846  0018BA                     u13024:
  1847  0018BA  2F91               	decfsz	??_doWork& (0+255),f,b
  1848  0018BC  D7FC               	goto	u13025
  1849  0018BE  5192               	movf	(??_doWork+1)& (0+255),w,b
  1850  0018C0  15B8               	andwf	_adc_conversion_flags& (0+255),w,b
  1851  0018C2  E101 D2CC          	bz	l13960
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;main.c: 452: avarage = 0;
  1855  0018C6  0101               	movlb	1	; () banked
  1856  0018C8  6B7B               	clrf	doWork@avarage& (0+255),b
  1857  0018CA  6B7C               	clrf	(doWork@avarage+1)& (0+255),b
  1858  0018CC  6B7D               	clrf	(doWork@avarage+2)& (0+255),b
  1859  0018CE  6B7E               	clrf	(doWork@avarage+3)& (0+255),b
  1860                           
  1861                           ;main.c: 453: for (j = 0; j < 80; j++) {
  1862  0018D0  6B78               	clrf	doWork@j& (0+255),b
  1863  0018D2                     l13908:
  1864                           
  1865                           ; BSR set to: 1
  1866                           ;main.c: 454: avarage += ((uint16_t) adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1867  0018D2  0E01               	movlw	high doWork@avarage
  1868  0018D4  6E3C               	movwf	?___asfladd+1,c
  1869  0018D6  0E7B               	movlw	low doWork@avarage
  1870  0018D8  6E3B               	movwf	?___asfladd,c
  1871  0018DA  90D8               	bcf	status,0,c
  1872  0018DC  3583               	rlcf	doWork@i& (0+255),w,b
  1873  0018DE  0100               	movlb	0	; () banked
  1874  0018E0  6F91               	movwf	??_doWork& (0+255),b
  1875  0018E2  6B92               	clrf	(??_doWork+1)& (0+255),b
  1876  0018E4  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  1877  0018E6  0101               	movlb	1	; () banked
  1878  0018E8  5178               	movf	doWork@j& (0+255),w,b
  1879  0018EA  0D0C               	mullw	12
  1880  0018EC  0E85               	movlw	low (_adc+1)
  1881  0018EE  24F3               	addwf	prodl,w,c
  1882  0018F0  0100               	movlb	0	; () banked
  1883  0018F2  6F93               	movwf	(??_doWork+2)& (0+255),b
  1884  0018F4  0E01               	movlw	high (_adc+1)
  1885  0018F6  20F4               	addwfc	prodh,w,c
  1886  0018F8  6F94               	movwf	(??_doWork+3)& (0+255),b
  1887  0018FA  5191               	movf	??_doWork& (0+255),w,b
  1888  0018FC  2593               	addwf	(??_doWork+2)& (0+255),w,b
  1889  0018FE  6ED9               	movwf	fsr2l,c
  1890  001900  5192               	movf	(??_doWork+1)& (0+255),w,b
  1891  001902  2194               	addwfc	(??_doWork+3)& (0+255),w,b
  1892  001904  6EDA               	movwf	fsr2h,c
  1893  001906  50DF               	movf	indf2,w,c
  1894  001908  6F95               	movwf	(??_doWork+4)& (0+255),b
  1895  00190A  90D8               	bcf	status,0,c
  1896  00190C  0101               	movlb	1	; () banked
  1897  00190E  3583               	rlcf	doWork@i& (0+255),w,b
  1898  001910  0100               	movlb	0	; () banked
  1899  001912  6F96               	movwf	(??_doWork+5)& (0+255),b
  1900  001914  6B97               	clrf	(??_doWork+6)& (0+255),b
  1901  001916  3797               	rlcf	(??_doWork+6)& (0+255),f,b
  1902  001918  0101               	movlb	1	; () banked
  1903  00191A  5178               	movf	doWork@j& (0+255),w,b
  1904  00191C  0D0C               	mullw	12
  1905  00191E  0E84               	movlw	low _adc
  1906  001920  24F3               	addwf	prodl,w,c
  1907  001922  0100               	movlb	0	; () banked
  1908  001924  6F98               	movwf	(??_doWork+7)& (0+255),b
  1909  001926  0E01               	movlw	high _adc
  1910  001928  20F4               	addwfc	prodh,w,c
  1911  00192A  6F99               	movwf	(??_doWork+8)& (0+255),b
  1912  00192C  5196               	movf	(??_doWork+5)& (0+255),w,b
  1913  00192E  2598               	addwf	(??_doWork+7)& (0+255),w,b
  1914  001930  6ED9               	movwf	fsr2l,c
  1915  001932  5197               	movf	(??_doWork+6)& (0+255),w,b
  1916  001934  2199               	addwfc	(??_doWork+8)& (0+255),w,b
  1917  001936  6EDA               	movwf	fsr2h,c
  1918  001938  50DF               	movf	indf2,w,c
  1919  00193A  6E19               	movwf	?___lwtofl+1,c
  1920  00193C  5195               	movf	(??_doWork+4)& (0+255),w,b
  1921  00193E  6E18               	movwf	?___lwtofl,c
  1922  001940  EC31  F02D         	call	___lwtofl	;wreg free
  1923  001944  C01B  F040         	movff	?___lwtofl+3,?___asfladd+5
  1924  001948  C01A  F03F         	movff	?___lwtofl+2,?___asfladd+4
  1925  00194C  C019  F03E         	movff	?___lwtofl+1,?___asfladd+3
  1926  001950  C018  F03D         	movff	?___lwtofl,?___asfladd+2
  1927  001954  ECAB  F02A         	call	___asfladd	;wreg free
  1928                           
  1929                           ; BSR set to: 0
  1930  001958  0101               	movlb	1	; () banked
  1931  00195A  2B78               	incf	doWork@j& (0+255),f,b
  1932                           
  1933                           ; BSR set to: 1
  1934  00195C  0E4F               	movlw	79
  1935  00195E  6578               	cpfsgt	doWork@j& (0+255),b
  1936  001960  D7B8               	goto	l13908
  1937                           
  1938                           ; BSR set to: 1
  1939                           ;main.c: 458: if (1) {
  1940  001962  0E01               	movlw	high doWork@avarage
  1941  001964  0100               	movlb	0	; () banked
  1942  001966  6F87               	movwf	(?___asfldiv+1)& (0+255),b
  1943  001968  0E7B               	movlw	low doWork@avarage
  1944  00196A  6F86               	movwf	?___asfldiv& (0+255),b
  1945  00196C  6B88               	clrf	(?___asfldiv+2)& (0+255),b
  1946  00196E  6B89               	clrf	(?___asfldiv+3)& (0+255),b
  1947  001970  0EA0               	movlw	160
  1948  001972  6F8A               	movwf	(?___asfldiv+4)& (0+255),b
  1949  001974  0E42               	movlw	66
  1950  001976  6F8B               	movwf	(?___asfldiv+5)& (0+255),b
  1951  001978  ECF9  F02A         	call	___asfldiv	;wreg free
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;main.c: 466: B = (uint16_t) readEEPROM(2 * i + 0x4F)*256 +
  1955                           ;main.c: 467: readEEPROM(2 * i + 0x50);
  1956  00197C  0101               	movlb	1	; () banked
  1957  00197E  5183               	movf	doWork@i& (0+255),w,b
  1958  001980  0D02               	mullw	2
  1959  001982  0E50               	movlw	80
  1960  001984  24F3               	addwf	prodl,w,c
  1961  001986  6E0E               	movwf	?_readEEPROM,c
  1962  001988  0E00               	movlw	0
  1963  00198A  20F4               	addwfc	prodh,w,c
  1964  00198C  6E0F               	movwf	?_readEEPROM+1,c
  1965  00198E  ECA8  F02E         	call	_readEEPROM	;wreg free
  1966  001992  0100               	movlb	0	; () banked
  1967  001994  6F91               	movwf	??_doWork& (0+255),b
  1968  001996  0101               	movlb	1	; () banked
  1969  001998  5183               	movf	doWork@i& (0+255),w,b
  1970  00199A  0D02               	mullw	2
  1971  00199C  0E4F               	movlw	79
  1972  00199E  24F3               	addwf	prodl,w,c
  1973  0019A0  6E0E               	movwf	?_readEEPROM,c
  1974  0019A2  0E00               	movlw	0
  1975  0019A4  20F4               	addwfc	prodh,w,c
  1976  0019A6  6E0F               	movwf	?_readEEPROM+1,c
  1977  0019A8  ECA8  F02E         	call	_readEEPROM	;wreg free
  1978  0019AC  0101               	movlb	1	; () banked
  1979  0019AE  6F73               	movwf	(doWork@B+1)& (0+255),b
  1980  0019B0  0100               	movlb	0	; () banked
  1981  0019B2  5191               	movf	??_doWork& (0+255),w,b
  1982  0019B4  0101               	movlb	1	; () banked
  1983  0019B6  6F72               	movwf	doWork@B& (0+255),b
  1984                           
  1985                           ; BSR set to: 1
  1986                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  1987  0019B8  0E33               	movlw	51
  1988  0019BA  0100               	movlb	0	; () banked
  1989  0019BC  6F74               	movwf	(?___fldiv+4)& (0+255),b
  1990  0019BE  0E13               	movlw	19
  1991  0019C0  6F75               	movwf	(?___fldiv+5)& (0+255),b
  1992  0019C2  0E95               	movlw	149
  1993  0019C4  6F76               	movwf	(?___fldiv+6)& (0+255),b
  1994  0019C6  0EC3               	movlw	195
  1995  0019C8  6F77               	movwf	(?___fldiv+7)& (0+255),b
  1996  0019CA  C172  F018         	movff	doWork@B,?___lwtofl
  1997  0019CE  C173  F019         	movff	doWork@B+1,?___lwtofl+1
  1998  0019D2  EC31  F02D         	call	___lwtofl	;wreg free
  1999  0019D6  C01B  F073         	movff	?___lwtofl+3,?___fldiv+3
  2000  0019DA  C01A  F072         	movff	?___lwtofl+2,?___fldiv+2
  2001  0019DE  C019  F071         	movff	?___lwtofl+1,?___fldiv+1
  2002  0019E2  C018  F070         	movff	?___lwtofl,?___fldiv
  2003  0019E6  EC78  F027         	call	___fldiv	;wreg free
  2004  0019EA  C073  F159         	movff	?___fldiv+3,_doWork$2270+3
  2005  0019EE  C072  F158         	movff	?___fldiv+2,_doWork$2270+2
  2006  0019F2  C071  F157         	movff	?___fldiv+1,_doWork$2270+1
  2007  0019F6  C070  F156         	movff	?___fldiv,_doWork$2270
  2008                           
  2009                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2010  0019FA  C156  F086         	movff	_doWork$2270,?_exp
  2011  0019FE  C157  F087         	movff	_doWork$2270+1,?_exp+1
  2012  001A02  C158  F088         	movff	_doWork$2270+2,?_exp+2
  2013  001A06  C159  F089         	movff	_doWork$2270+3,?_exp+3
  2014  001A0A  EC3F  F01E         	call	_exp	;wreg free
  2015  001A0E  C089  F15D         	movff	?_exp+3,_doWork$2271+3
  2016  001A12  C088  F15C         	movff	?_exp+2,_doWork$2271+2
  2017  001A16  C087  F15B         	movff	?_exp+1,_doWork$2271+1
  2018  001A1A  C086  F15A         	movff	?_exp,_doWork$2271
  2019                           
  2020                           ;main.c: 470: Rinf = 10000.0 * exp(B / -298.15);
  2021  001A1E  C15A  F01E         	movff	_doWork$2271,?___flmul
  2022  001A22  C15B  F01F         	movff	_doWork$2271+1,?___flmul+1
  2023  001A26  C15C  F020         	movff	_doWork$2271+2,?___flmul+2
  2024  001A2A  C15D  F021         	movff	_doWork$2271+3,?___flmul+3
  2025  001A2E  6A22               	clrf	?___flmul+4,c
  2026  001A30  0E40               	movlw	64
  2027  001A32  6E23               	movwf	?___flmul+5,c
  2028  001A34  0E1C               	movlw	28
  2029  001A36  6E24               	movwf	?___flmul+6,c
  2030  001A38  0E46               	movlw	70
  2031  001A3A  6E25               	movwf	?___flmul+7,c
  2032  001A3C  ECE1  F024         	call	___flmul	;wreg free
  2033  001A40  C021  F151         	movff	?___flmul+3,doWork@Rinf+3
  2034  001A44  C020  F150         	movff	?___flmul+2,doWork@Rinf+2
  2035  001A48  C01F  F14F         	movff	?___flmul+1,doWork@Rinf+1
  2036  001A4C  C01E  F14E         	movff	?___flmul,doWork@Rinf
  2037                           
  2038                           ;main.c: 472: v = 5.0 * (double) avarage / 1025;
  2039  001A50  6A22               	clrf	?___flmul+4,c
  2040  001A52  6A23               	clrf	?___flmul+5,c
  2041  001A54  0EA0               	movlw	160
  2042  001A56  6E24               	movwf	?___flmul+6,c
  2043  001A58  0E40               	movlw	64
  2044  001A5A  6E25               	movwf	?___flmul+7,c
  2045  001A5C  C17B  F01E         	movff	doWork@avarage,?___flmul
  2046  001A60  C17C  F01F         	movff	doWork@avarage+1,?___flmul+1
  2047  001A64  C17D  F020         	movff	doWork@avarage+2,?___flmul+2
  2048  001A68  C17E  F021         	movff	doWork@avarage+3,?___flmul+3
  2049  001A6C  ECE1  F024         	call	___flmul	;wreg free
  2050  001A70  C021  F073         	movff	?___flmul+3,?___fldiv+3
  2051  001A74  C020  F072         	movff	?___flmul+2,?___fldiv+2
  2052  001A78  C01F  F071         	movff	?___flmul+1,?___fldiv+1
  2053  001A7C  C01E  F070         	movff	?___flmul,?___fldiv
  2054  001A80  0100               	movlb	0	; () banked
  2055  001A82  6B74               	clrf	(?___fldiv+4)& (0+255),b
  2056  001A84  0E20               	movlw	32
  2057  001A86  6F75               	movwf	(?___fldiv+5)& (0+255),b
  2058  001A88  0E80               	movlw	128
  2059  001A8A  6F76               	movwf	(?___fldiv+6)& (0+255),b
  2060  001A8C  0E44               	movlw	68
  2061  001A8E  6F77               	movwf	(?___fldiv+7)& (0+255),b
  2062  001A90  EC78  F027         	call	___fldiv	;wreg free
  2063  001A94  C073  F171         	movff	?___fldiv+3,doWork@v+3
  2064  001A98  C072  F170         	movff	?___fldiv+2,doWork@v+2
  2065  001A9C  C071  F16F         	movff	?___fldiv+1,doWork@v+1
  2066  001AA0  C070  F16E         	movff	?___fldiv,doWork@v
  2067                           
  2068                           ;main.c: 474: resistance = (calVoltage - 10000.0 * v) / v;
  2069  001AA4  6A22               	clrf	?___flmul+4,c
  2070  001AA6  0E40               	movlw	64
  2071  001AA8  6E23               	movwf	?___flmul+5,c
  2072  001AAA  0E1C               	movlw	28
  2073  001AAC  6E24               	movwf	?___flmul+6,c
  2074  001AAE  0E46               	movlw	70
  2075  001AB0  6E25               	movwf	?___flmul+7,c
  2076  001AB2  C16E  F01E         	movff	doWork@v,?___flmul
  2077  001AB6  C16F  F01F         	movff	doWork@v+1,?___flmul+1
  2078  001ABA  C170  F020         	movff	doWork@v+2,?___flmul+2
  2079  001ABE  C171  F021         	movff	doWork@v+3,?___flmul+3
  2080  001AC2  ECE1  F024         	call	___flmul	;wreg free
  2081  001AC6  C021  F06F         	movff	?___flmul+3,?___flsub+7
  2082  001ACA  C020  F06E         	movff	?___flmul+2,?___flsub+6
  2083  001ACE  C01F  F06D         	movff	?___flmul+1,?___flsub+5
  2084  001AD2  C01E  F06C         	movff	?___flmul,?___flsub+4
  2085  001AD6  C152  F068         	movff	doWork@calVoltage,?___flsub
  2086  001ADA  C153  F069         	movff	doWork@calVoltage+1,?___flsub+1
  2087  001ADE  C154  F06A         	movff	doWork@calVoltage+2,?___flsub+2
  2088  001AE2  C155  F06B         	movff	doWork@calVoltage+3,?___flsub+3
  2089  001AE6  EC5C  F02C         	call	___flsub	;wreg free
  2090  001AEA  C06B  F073         	movff	?___flsub+3,?___fldiv+3
  2091  001AEE  C06A  F072         	movff	?___flsub+2,?___fldiv+2
  2092  001AF2  C069  F071         	movff	?___flsub+1,?___fldiv+1
  2093  001AF6  C068  F070         	movff	?___flsub,?___fldiv
  2094  001AFA  C16E  F074         	movff	doWork@v,?___fldiv+4
  2095  001AFE  C16F  F075         	movff	doWork@v+1,?___fldiv+5
  2096  001B02  C170  F076         	movff	doWork@v+2,?___fldiv+6
  2097  001B06  C171  F077         	movff	doWork@v+3,?___fldiv+7
  2098  001B0A  EC78  F027         	call	___fldiv	;wreg free
  2099  001B0E  C073  F177         	movff	?___fldiv+3,doWork@resistance+3
  2100  001B12  C072  F176         	movff	?___fldiv+2,doWork@resistance+2
  2101  001B16  C071  F175         	movff	?___fldiv+1,doWork@resistance+1
  2102  001B1A  C070  F174         	movff	?___fldiv,doWork@resistance
  2103                           
  2104                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2105  001B1E  C14E  F074         	movff	doWork@Rinf,?___fldiv+4
  2106  001B22  C14F  F075         	movff	doWork@Rinf+1,?___fldiv+5
  2107  001B26  C150  F076         	movff	doWork@Rinf+2,?___fldiv+6
  2108  001B2A  C151  F077         	movff	doWork@Rinf+3,?___fldiv+7
  2109  001B2E  C174  F070         	movff	doWork@resistance,?___fldiv
  2110  001B32  C175  F071         	movff	doWork@resistance+1,?___fldiv+1
  2111  001B36  C176  F072         	movff	doWork@resistance+2,?___fldiv+2
  2112  001B3A  C177  F073         	movff	doWork@resistance+3,?___fldiv+3
  2113  001B3E  EC78  F027         	call	___fldiv	;wreg free
  2114  001B42  C073  F089         	movff	?___fldiv+3,?_log+3
  2115  001B46  C072  F088         	movff	?___fldiv+2,?_log+2
  2116  001B4A  C071  F087         	movff	?___fldiv+1,?_log+1
  2117  001B4E  C070  F086         	movff	?___fldiv,?_log
  2118  001B52  ECCE  F022         	call	_log	;wreg free
  2119  001B56  C089  F161         	movff	?_log+3,_doWork$2272+3
  2120  001B5A  C088  F160         	movff	?_log+2,_doWork$2272+2
  2121  001B5E  C087  F15F         	movff	?_log+1,_doWork$2272+1
  2122  001B62  C086  F15E         	movff	?_log,_doWork$2272
  2123                           
  2124                           ;main.c: 476: temp = ((double) B) / log(resistance / Rinf);
  2125  001B66  C172  F018         	movff	doWork@B,?___lwtofl
  2126  001B6A  C173  F019         	movff	doWork@B+1,?___lwtofl+1
  2127  001B6E  EC31  F02D         	call	___lwtofl	;wreg free
  2128  001B72  C01B  F073         	movff	?___lwtofl+3,?___fldiv+3
  2129  001B76  C01A  F072         	movff	?___lwtofl+2,?___fldiv+2
  2130  001B7A  C019  F071         	movff	?___lwtofl+1,?___fldiv+1
  2131  001B7E  C018  F070         	movff	?___lwtofl,?___fldiv
  2132  001B82  C15E  F074         	movff	_doWork$2272,?___fldiv+4
  2133  001B86  C15F  F075         	movff	_doWork$2272+1,?___fldiv+5
  2134  001B8A  C160  F076         	movff	_doWork$2272+2,?___fldiv+6
  2135  001B8E  C161  F077         	movff	_doWork$2272+3,?___fldiv+7
  2136  001B92  EC78  F027         	call	___fldiv	;wreg free
  2137  001B96  C073  F182         	movff	?___fldiv+3,doWork@temp+3
  2138  001B9A  C072  F181         	movff	?___fldiv+2,doWork@temp+2
  2139  001B9E  C071  F180         	movff	?___fldiv+1,doWork@temp+1
  2140  001BA2  C070  F17F         	movff	?___fldiv,doWork@temp
  2141                           
  2142                           ;main.c: 478: temp -= 273.15;
  2143  001BA6  0101               	movlb	1	; () banked
  2144  001BA8  0E01               	movlw	high doWork@temp
  2145  001BAA  6E3C               	movwf	?___asflsub+1,c
  2146  001BAC  0E7F               	movlw	low doWork@temp
  2147  001BAE  6E3B               	movwf	?___asflsub,c
  2148  001BB0  0E33               	movlw	51
  2149  001BB2  6E3D               	movwf	?___asflsub+2,c
  2150  001BB4  0E93               	movlw	147
  2151  001BB6  6E3E               	movwf	?___asflsub+3,c
  2152  001BB8  0E88               	movlw	136
  2153  001BBA  6E3F               	movwf	?___asflsub+4,c
  2154  001BBC  0E43               	movlw	67
  2155  001BBE  6E40               	movwf	?___asflsub+5,c
  2156  001BC0  ECD2  F02A         	call	___asflsub	;wreg free
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 493: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2160  001BC4  0101               	movlb	1	; () banked
  2161  001BC6  5183               	movf	doWork@i& (0+255),w,b
  2162  001BC8  0D02               	mullw	2
  2163  001BCA  50F3               	movf	prodl,w,c
  2164  001BCC  0100               	movlb	0	; () banked
  2165  001BCE  0FA0               	addlw	low _current_temp
  2166  001BD0  6ED9               	movwf	fsr2l,c
  2167  001BD2  6ADA               	clrf	fsr2h,c
  2168  001BD4  CFDE F091          	movff	postinc2,??_doWork
  2169  001BD8  CFDD F092          	movff	postdec2,??_doWork+1
  2170  001BDC  C091  F093         	movff	??_doWork,??_doWork+2
  2171  001BE0  C092  F094         	movff	??_doWork+1,??_doWork+3
  2172  001BE4  0E00               	movlw	0
  2173  001BE6  BF94               	btfsc	(??_doWork+3)& (0+255),7,b
  2174  001BE8  0EFF               	movlw	255
  2175  001BEA  6F95               	movwf	(??_doWork+4)& (0+255),b
  2176  001BEC  6F96               	movwf	(??_doWork+5)& (0+255),b
  2177  001BEE  0101               	movlb	1	; () banked
  2178  001BF0  5183               	movf	doWork@i& (0+255),w,b
  2179  001BF2  ECB5  F02B         	call	_getCalibrationValue
  2180  001BF6  C012  F097         	movff	?_getCalibrationValue,??_doWork+6
  2181  001BFA  C013  F098         	movff	?_getCalibrationValue+1,??_doWork+7
  2182  001BFE  0E00               	movlw	0
  2183  001C00  0100               	movlb	0	; () banked
  2184  001C02  BF98               	btfsc	(??_doWork+7)& (0+255),7,b
  2185  001C04  0EFF               	movlw	255
  2186  001C06  6F99               	movwf	(??_doWork+8)& (0+255),b
  2187  001C08  6F9A               	movwf	(??_doWork+9)& (0+255),b
  2188  001C0A  6A22               	clrf	?___flmul+4,c
  2189  001C0C  6A23               	clrf	?___flmul+5,c
  2190  001C0E  0EC8               	movlw	200
  2191  001C10  6E24               	movwf	?___flmul+6,c
  2192  001C12  0E42               	movlw	66
  2193  001C14  6E25               	movwf	?___flmul+7,c
  2194  001C16  C17F  F01E         	movff	doWork@temp,?___flmul
  2195  001C1A  C180  F01F         	movff	doWork@temp+1,?___flmul+1
  2196  001C1E  C181  F020         	movff	doWork@temp+2,?___flmul+2
  2197  001C22  C182  F021         	movff	doWork@temp+3,?___flmul+3
  2198  001C26  ECE1  F024         	call	___flmul	;wreg free
  2199  001C2A  C021  F037         	movff	?___flmul+3,?___fltol+3
  2200  001C2E  C020  F036         	movff	?___flmul+2,?___fltol+2
  2201  001C32  C01F  F035         	movff	?___flmul+1,?___fltol+1
  2202  001C36  C01E  F034         	movff	?___flmul,?___fltol
  2203  001C3A  EC72  F028         	call	___fltol	;wreg free
  2204  001C3E  0100               	movlb	0	; () banked
  2205  001C40  5197               	movf	(??_doWork+6)& (0+255),w,b
  2206  001C42  2434               	addwf	?___fltol,w,c
  2207  001C44  6F9B               	movwf	(??_doWork+10)& (0+255),b
  2208  001C46  5198               	movf	(??_doWork+7)& (0+255),w,b
  2209  001C48  2035               	addwfc	?___fltol+1,w,c
  2210  001C4A  6F9C               	movwf	(??_doWork+11)& (0+255),b
  2211  001C4C  5199               	movf	(??_doWork+8)& (0+255),w,b
  2212  001C4E  2036               	addwfc	?___fltol+2,w,c
  2213  001C50  6F9D               	movwf	(??_doWork+12)& (0+255),b
  2214  001C52  519A               	movf	(??_doWork+9)& (0+255),w,b
  2215  001C54  2037               	addwfc	?___fltol+3,w,c
  2216  001C56  6F9E               	movwf	(??_doWork+13)& (0+255),b
  2217  001C58  5193               	movf	(??_doWork+2)& (0+255),w,b
  2218  001C5A  259B               	addwf	(??_doWork+10)& (0+255),w,b
  2219  001C5C  6E3E               	movwf	?___aldiv,c
  2220  001C5E  5194               	movf	(??_doWork+3)& (0+255),w,b
  2221  001C60  219C               	addwfc	(??_doWork+11)& (0+255),w,b
  2222  001C62  6E3F               	movwf	?___aldiv+1,c
  2223  001C64  5195               	movf	(??_doWork+4)& (0+255),w,b
  2224  001C66  219D               	addwfc	(??_doWork+12)& (0+255),w,b
  2225  001C68  6E40               	movwf	?___aldiv+2,c
  2226  001C6A  5196               	movf	(??_doWork+5)& (0+255),w,b
  2227  001C6C  219E               	addwfc	(??_doWork+13)& (0+255),w,b
  2228  001C6E  6E41               	movwf	?___aldiv+3,c
  2229  001C70  0E02               	movlw	2
  2230  001C72  6E42               	movwf	?___aldiv+4,c
  2231  001C74  0E00               	movlw	0
  2232  001C76  6A43               	clrf	?___aldiv+5,c
  2233  001C78  6A44               	clrf	?___aldiv+6,c
  2234  001C7A  6A45               	clrf	?___aldiv+7,c
  2235  001C7C  EC68  F026         	call	___aldiv	;wreg free
  2236  001C80  0101               	movlb	1	; () banked
  2237  001C82  5183               	movf	doWork@i& (0+255),w,b
  2238  001C84  0D02               	mullw	2
  2239  001C86  50F3               	movf	prodl,w,c
  2240  001C88  0FA0               	addlw	low _current_temp
  2241  001C8A  6ED9               	movwf	fsr2l,c
  2242  001C8C  6ADA               	clrf	fsr2h,c
  2243  001C8E  C03E  FFDE         	movff	?___aldiv,postinc2
  2244  001C92  C03F  FFDD         	movff	?___aldiv+1,postdec2
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;main.c: 514: }
  2248                           ;main.c: 517: if (current_temp[ i ] <
  2249                           ;main.c: 518: (int16_t) (readEEPROM(2 * i + 0x7F)*256 +
  2250                           ;main.c: 519: readEEPROM(2 * i + 0x80))) {
  2251                           
  2252                           ;main.c: 495: }
  2253  001C96  5183               	movf	doWork@i& (0+255),w,b
  2254  001C98  0D02               	mullw	2
  2255  001C9A  0E7F               	movlw	127
  2256  001C9C  24F3               	addwf	prodl,w,c
  2257  001C9E  6E0E               	movwf	?_readEEPROM,c
  2258  001CA0  0E00               	movlw	0
  2259  001CA2  20F4               	addwfc	prodh,w,c
  2260  001CA4  6E0F               	movwf	?_readEEPROM+1,c
  2261  001CA6  ECA8  F02E         	call	_readEEPROM	;wreg free
  2262  001CAA  0100               	movlb	0	; () banked
  2263  001CAC  6F92               	movwf	(??_doWork+1)& (0+255),b
  2264  001CAE  6B91               	clrf	??_doWork& (0+255),b
  2265  001CB0  0101               	movlb	1	; () banked
  2266  001CB2  5183               	movf	doWork@i& (0+255),w,b
  2267  001CB4  0D02               	mullw	2
  2268  001CB6  0E80               	movlw	128
  2269  001CB8  24F3               	addwf	prodl,w,c
  2270  001CBA  6E0E               	movwf	?_readEEPROM,c
  2271  001CBC  0E00               	movlw	0
  2272  001CBE  20F4               	addwfc	prodh,w,c
  2273  001CC0  6E0F               	movwf	?_readEEPROM+1,c
  2274  001CC2  ECA8  F02E         	call	_readEEPROM	;wreg free
  2275  001CC6  0100               	movlb	0	; () banked
  2276  001CC8  2791               	addwf	??_doWork& (0+255),f,b
  2277  001CCA  0E00               	movlw	0
  2278  001CCC  2392               	addwfc	(??_doWork+1)& (0+255),f,b
  2279  001CCE  0101               	movlb	1	; () banked
  2280  001CD0  5183               	movf	doWork@i& (0+255),w,b
  2281  001CD2  0D02               	mullw	2
  2282  001CD4  50F3               	movf	prodl,w,c
  2283  001CD6  0100               	movlb	0	; () banked
  2284  001CD8  0FA0               	addlw	low _current_temp
  2285  001CDA  6ED9               	movwf	fsr2l,c
  2286  001CDC  6ADA               	clrf	fsr2h,c
  2287  001CDE  CFDE F093          	movff	postinc2,??_doWork+2
  2288  001CE2  CFDD F094          	movff	postdec2,??_doWork+3
  2289  001CE6  5194               	movf	(??_doWork+3)& (0+255),w,b
  2290  001CE8  0A80               	xorlw	128
  2291  001CEA  6F95               	movwf	(??_doWork+4)& (0+255),b
  2292  001CEC  5191               	movf	??_doWork& (0+255),w,b
  2293  001CEE  5D93               	subwf	(??_doWork+2)& (0+255),w,b
  2294  001CF0  5192               	movf	(??_doWork+1)& (0+255),w,b
  2295  001CF2  0A80               	xorlw	128
  2296  001CF4  5995               	subwfb	(??_doWork+4)& (0+255),w,b
  2297  001CF6  E23B               	bc	l201
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 521: writeEEPROM(2 * i + 0x7F, current_temp[ i ] >> 8);
  2301  001CF8  90D8               	bcf	status,0,c
  2302  001CFA  0101               	movlb	1	; () banked
  2303  001CFC  3583               	rlcf	doWork@i& (0+255),w,b
  2304  001CFE  0100               	movlb	0	; () banked
  2305  001D00  6F91               	movwf	??_doWork& (0+255),b
  2306  001D02  6B92               	clrf	(??_doWork+1)& (0+255),b
  2307  001D04  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2308  001D06  0E7F               	movlw	127
  2309  001D08  2591               	addwf	??_doWork& (0+255),w,b
  2310  001D0A  6E0E               	movwf	?_writeEEPROM,c
  2311  001D0C  0E00               	movlw	0
  2312  001D0E  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2313  001D10  6E0F               	movwf	?_writeEEPROM+1,c
  2314  001D12  0101               	movlb	1	; () banked
  2315  001D14  5183               	movf	doWork@i& (0+255),w,b
  2316  001D16  0D02               	mullw	2
  2317  001D18  50F3               	movf	prodl,w,c
  2318  001D1A  0100               	movlb	0	; () banked
  2319  001D1C  0FA0               	addlw	low _current_temp
  2320  001D1E  6ED9               	movwf	fsr2l,c
  2321  001D20  6ADA               	clrf	fsr2h,c
  2322  001D22  CFDE F093          	movff	postinc2,??_doWork+2
  2323  001D26  CFDD F094          	movff	postdec2,??_doWork+3
  2324  001D2A  C094  F093         	movff	??_doWork+3,??_doWork+2
  2325  001D2E  6B94               	clrf	(??_doWork+3)& (0+255),b
  2326  001D30  BF93               	btfsc	(??_doWork+2)& (0+255),7,b
  2327  001D32  6994               	setf	(??_doWork+3)& (0+255),b
  2328  001D34  5193               	movf	(??_doWork+2)& (0+255),w,b
  2329  001D36  6E10               	movwf	?_writeEEPROM+2,c
  2330  001D38  ECAB  F02D         	call	_writeEEPROM	;wreg free
  2331                           
  2332                           ;main.c: 522: writeEEPROM(2 * i + 0x80, 0xff & current_temp[ i ]);
  2333  001D3C  90D8               	bcf	status,0,c
  2334  001D3E  0101               	movlb	1	; () banked
  2335  001D40  3583               	rlcf	doWork@i& (0+255),w,b
  2336  001D42  0100               	movlb	0	; () banked
  2337  001D44  6F91               	movwf	??_doWork& (0+255),b
  2338  001D46  6B92               	clrf	(??_doWork+1)& (0+255),b
  2339  001D48  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2340  001D4A  0E80               	movlw	128
  2341  001D4C  2591               	addwf	??_doWork& (0+255),w,b
  2342  001D4E  6E0E               	movwf	?_writeEEPROM,c
  2343  001D50  0E00               	movlw	0
  2344  001D52  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2345  001D54  6E0F               	movwf	?_writeEEPROM+1,c
  2346  001D56  0101               	movlb	1	; () banked
  2347  001D58  5183               	movf	doWork@i& (0+255),w,b
  2348  001D5A  0D02               	mullw	2
  2349  001D5C  50F3               	movf	prodl,w,c
  2350  001D5E  0100               	movlb	0	; () banked
  2351  001D60  0FA0               	addlw	low _current_temp
  2352  001D62  6ED9               	movwf	fsr2l,c
  2353  001D64  6ADA               	clrf	fsr2h,c
  2354  001D66  50DF               	movf	indf2,w,c
  2355  001D68  6E10               	movwf	?_writeEEPROM+2,c
  2356  001D6A  ECAB  F02D         	call	_writeEEPROM	;wreg free
  2357  001D6E                     l201:
  2358                           
  2359                           ;main.c: 523: }
  2360                           ;main.c: 526: if (current_temp[ i ] >
  2361                           ;main.c: 527: (int16_t) (readEEPROM(2 * i + 0x8B)*256 +
  2362                           ;main.c: 528: readEEPROM(2 * i + 0x8C))) {
  2363  001D6E  0101               	movlb	1	; () banked
  2364  001D70  5183               	movf	doWork@i& (0+255),w,b
  2365  001D72  0D02               	mullw	2
  2366  001D74  50F3               	movf	prodl,w,c
  2367  001D76  0FA0               	addlw	low _current_temp
  2368  001D78  6ED9               	movwf	fsr2l,c
  2369  001D7A  6ADA               	clrf	fsr2h,c
  2370  001D7C  CFDE F091          	movff	postinc2,??_doWork
  2371  001D80  CFDD F092          	movff	postdec2,??_doWork+1
  2372  001D84  5183               	movf	doWork@i& (0+255),w,b
  2373  001D86  0D02               	mullw	2
  2374  001D88  0E8B               	movlw	139
  2375  001D8A  24F3               	addwf	prodl,w,c
  2376  001D8C  6E0E               	movwf	?_readEEPROM,c
  2377  001D8E  0E00               	movlw	0
  2378  001D90  20F4               	addwfc	prodh,w,c
  2379  001D92  6E0F               	movwf	?_readEEPROM+1,c
  2380  001D94  ECA8  F02E         	call	_readEEPROM	;wreg free
  2381  001D98  0100               	movlb	0	; () banked
  2382  001D9A  6F94               	movwf	(??_doWork+3)& (0+255),b
  2383  001D9C  6B93               	clrf	(??_doWork+2)& (0+255),b
  2384  001D9E  0101               	movlb	1	; () banked
  2385  001DA0  5183               	movf	doWork@i& (0+255),w,b
  2386  001DA2  0D02               	mullw	2
  2387  001DA4  0E8C               	movlw	140
  2388  001DA6  24F3               	addwf	prodl,w,c
  2389  001DA8  6E0E               	movwf	?_readEEPROM,c
  2390  001DAA  0E00               	movlw	0
  2391  001DAC  20F4               	addwfc	prodh,w,c
  2392  001DAE  6E0F               	movwf	?_readEEPROM+1,c
  2393  001DB0  ECA8  F02E         	call	_readEEPROM	;wreg free
  2394  001DB4  0100               	movlb	0	; () banked
  2395  001DB6  2793               	addwf	(??_doWork+2)& (0+255),f,b
  2396  001DB8  0E00               	movlw	0
  2397  001DBA  2394               	addwfc	(??_doWork+3)& (0+255),f,b
  2398  001DBC  5194               	movf	(??_doWork+3)& (0+255),w,b
  2399  001DBE  0A80               	xorlw	128
  2400  001DC0  6F95               	movwf	(??_doWork+4)& (0+255),b
  2401  001DC2  5191               	movf	??_doWork& (0+255),w,b
  2402  001DC4  5D93               	subwf	(??_doWork+2)& (0+255),w,b
  2403  001DC6  5192               	movf	(??_doWork+1)& (0+255),w,b
  2404  001DC8  0A80               	xorlw	128
  2405  001DCA  5995               	subwfb	(??_doWork+4)& (0+255),w,b
  2406  001DCC  E23B               	bc	l13958
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;main.c: 530: writeEEPROM(2 * i + 0x8B, current_temp[ i ] >> 8);
  2410  001DCE  90D8               	bcf	status,0,c
  2411  001DD0  0101               	movlb	1	; () banked
  2412  001DD2  3583               	rlcf	doWork@i& (0+255),w,b
  2413  001DD4  0100               	movlb	0	; () banked
  2414  001DD6  6F91               	movwf	??_doWork& (0+255),b
  2415  001DD8  6B92               	clrf	(??_doWork+1)& (0+255),b
  2416  001DDA  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2417  001DDC  0E8B               	movlw	139
  2418  001DDE  2591               	addwf	??_doWork& (0+255),w,b
  2419  001DE0  6E0E               	movwf	?_writeEEPROM,c
  2420  001DE2  0E00               	movlw	0
  2421  001DE4  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2422  001DE6  6E0F               	movwf	?_writeEEPROM+1,c
  2423  001DE8  0101               	movlb	1	; () banked
  2424  001DEA  5183               	movf	doWork@i& (0+255),w,b
  2425  001DEC  0D02               	mullw	2
  2426  001DEE  50F3               	movf	prodl,w,c
  2427  001DF0  0100               	movlb	0	; () banked
  2428  001DF2  0FA0               	addlw	low _current_temp
  2429  001DF4  6ED9               	movwf	fsr2l,c
  2430  001DF6  6ADA               	clrf	fsr2h,c
  2431  001DF8  CFDE F093          	movff	postinc2,??_doWork+2
  2432  001DFC  CFDD F094          	movff	postdec2,??_doWork+3
  2433  001E00  C094  F093         	movff	??_doWork+3,??_doWork+2
  2434  001E04  6B94               	clrf	(??_doWork+3)& (0+255),b
  2435  001E06  BF93               	btfsc	(??_doWork+2)& (0+255),7,b
  2436  001E08  6994               	setf	(??_doWork+3)& (0+255),b
  2437  001E0A  5193               	movf	(??_doWork+2)& (0+255),w,b
  2438  001E0C  6E10               	movwf	?_writeEEPROM+2,c
  2439  001E0E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  2440                           
  2441                           ;main.c: 531: writeEEPROM(2 * i + 0x8C, 0xff & current_temp[ i ]);
  2442  001E12  90D8               	bcf	status,0,c
  2443  001E14  0101               	movlb	1	; () banked
  2444  001E16  3583               	rlcf	doWork@i& (0+255),w,b
  2445  001E18  0100               	movlb	0	; () banked
  2446  001E1A  6F91               	movwf	??_doWork& (0+255),b
  2447  001E1C  6B92               	clrf	(??_doWork+1)& (0+255),b
  2448  001E1E  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2449  001E20  0E8C               	movlw	140
  2450  001E22  2591               	addwf	??_doWork& (0+255),w,b
  2451  001E24  6E0E               	movwf	?_writeEEPROM,c
  2452  001E26  0E00               	movlw	0
  2453  001E28  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2454  001E2A  6E0F               	movwf	?_writeEEPROM+1,c
  2455  001E2C  0101               	movlb	1	; () banked
  2456  001E2E  5183               	movf	doWork@i& (0+255),w,b
  2457  001E30  0D02               	mullw	2
  2458  001E32  50F3               	movf	prodl,w,c
  2459  001E34  0100               	movlb	0	; () banked
  2460  001E36  0FA0               	addlw	low _current_temp
  2461  001E38  6ED9               	movwf	fsr2l,c
  2462  001E3A  6ADA               	clrf	fsr2h,c
  2463  001E3C  50DF               	movf	indf2,w,c
  2464  001E3E  6E10               	movwf	?_writeEEPROM+2,c
  2465  001E40  ECAB  F02D         	call	_writeEEPROM	;wreg free
  2466  001E44                     l13958:
  2467                           
  2468                           ;main.c: 532: }
  2469                           ;main.c: 535: adc_conversion_flags &= ~(1 << i);
  2470  001E44  C183  F091         	movff	doWork@i,??_doWork
  2471  001E48  0E01               	movlw	1
  2472  001E4A  0100               	movlb	0	; () banked
  2473  001E4C  6F92               	movwf	(??_doWork+1)& (0+255),b
  2474  001E4E  2B91               	incf	??_doWork& (0+255),f,b
  2475  001E50  D002               	goto	u13074
  2476  001E52                     u13075:
  2477  001E52  90D8               	bcf	status,0,c
  2478  001E54  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2479  001E56                     u13074:
  2480  001E56  2F91               	decfsz	??_doWork& (0+255),f,b
  2481  001E58  D7FC               	goto	u13075
  2482  001E5A  1D92               	comf	(??_doWork+1)& (0+255),w,b
  2483  001E5C  17B8               	andwf	_adc_conversion_flags& (0+255),f,b
  2484  001E5E                     l13960:
  2485                           
  2486                           ; BSR set to: 0
  2487  001E5E  0101               	movlb	1	; () banked
  2488  001E60  2B83               	incf	doWork@i& (0+255),f,b
  2489                           
  2490                           ; BSR set to: 1
  2491  001E62  0E05               	movlw	5
  2492  001E64  6583               	cpfsgt	doWork@i& (0+255),b
  2493  001E66  D520               	goto	l13900
  2494                           
  2495                           ; BSR set to: 1
  2496                           ;main.c: 537: }
  2497                           ;main.c: 538: }
  2498                           ;main.c: 541: if (0x03 == vscp_node_state) {
  2499  001E68  0100               	movlb	0	; () banked
  2500  001E6A  51C0               	movf	_vscp_node_state& (0+255),w,b
  2501  001E6C  0A03               	xorlw	3
  2502  001E6E  E001 D23C          	bnz	l224
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;main.c: 544: for (i = 0; i < 6; i++) {
  2506  001E72  0101               	movlb	1	; () banked
  2507  001E74  6B83               	clrf	doWork@i& (0+255),b
  2508  001E76                     l13972:
  2509                           
  2510                           ; BSR set to: 1
  2511                           ;main.c: 547: if (low_alarm & 1 << i) {
  2512  001E76  C183  F091         	movff	doWork@i,??_doWork
  2513  001E7A  0E01               	movlw	1
  2514  001E7C  0100               	movlb	0	; () banked
  2515  001E7E  6F92               	movwf	(??_doWork+1)& (0+255),b
  2516  001E80  2B91               	incf	??_doWork& (0+255),f,b
  2517  001E82  D002               	goto	u13104
  2518  001E84                     u13105:
  2519  001E84  90D8               	bcf	status,0,c
  2520  001E86  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2521  001E88                     u13104:
  2522  001E88  2F91               	decfsz	??_doWork& (0+255),f,b
  2523  001E8A  D7FC               	goto	u13105
  2524  001E8C  5192               	movf	(??_doWork+1)& (0+255),w,b
  2525  001E8E  15BA               	andwf	_low_alarm& (0+255),w,b
  2526  001E90  E061               	bz	l13980
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;main.c: 550: setpoint =
  2530                           ;main.c: 551: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2531                           ;main.c: 552: readEEPROM(2 * i + 0x5C) +
  2532                           ;main.c: 553: readEEPROM(i + 0x97)*100);
  2533  001E92  90D8               	bcf	status,0,c
  2534  001E94  0101               	movlb	1	; () banked
  2535  001E96  3583               	rlcf	doWork@i& (0+255),w,b
  2536  001E98  0100               	movlb	0	; () banked
  2537  001E9A  6F91               	movwf	??_doWork& (0+255),b
  2538  001E9C  6B92               	clrf	(??_doWork+1)& (0+255),b
  2539  001E9E  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2540  001EA0  0E5C               	movlw	92
  2541  001EA2  2591               	addwf	??_doWork& (0+255),w,b
  2542  001EA4  6E0E               	movwf	?_readEEPROM,c
  2543  001EA6  0E00               	movlw	0
  2544  001EA8  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2545  001EAA  6E0F               	movwf	?_readEEPROM+1,c
  2546  001EAC  ECA8  F02E         	call	_readEEPROM	;wreg free
  2547  001EB0  0100               	movlb	0	; () banked
  2548  001EB2  6F93               	movwf	(??_doWork+2)& (0+255),b
  2549  001EB4  90D8               	bcf	status,0,c
  2550  001EB6  0101               	movlb	1	; () banked
  2551  001EB8  3583               	rlcf	doWork@i& (0+255),w,b
  2552  001EBA  0100               	movlb	0	; () banked
  2553  001EBC  6F94               	movwf	(??_doWork+3)& (0+255),b
  2554  001EBE  6B95               	clrf	(??_doWork+4)& (0+255),b
  2555  001EC0  3795               	rlcf	(??_doWork+4)& (0+255),f,b
  2556  001EC2  0E5B               	movlw	91
  2557  001EC4  2594               	addwf	(??_doWork+3)& (0+255),w,b
  2558  001EC6  6E0E               	movwf	?_readEEPROM,c
  2559  001EC8  0E00               	movlw	0
  2560  001ECA  2195               	addwfc	(??_doWork+4)& (0+255),w,b
  2561  001ECC  6E0F               	movwf	?_readEEPROM+1,c
  2562  001ECE  ECA8  F02E         	call	_readEEPROM	;wreg free
  2563  001ED2  0100               	movlb	0	; () banked
  2564  001ED4  6F97               	movwf	(??_doWork+6)& (0+255),b
  2565  001ED6  6B96               	clrf	(??_doWork+5)& (0+255),b
  2566  001ED8  0E97               	movlw	151
  2567  001EDA  0101               	movlb	1	; () banked
  2568  001EDC  2583               	addwf	doWork@i& (0+255),w,b
  2569  001EDE  6E0E               	movwf	?_readEEPROM,c
  2570  001EE0  6A0F               	clrf	?_readEEPROM+1,c
  2571  001EE2  0E00               	movlw	0
  2572  001EE4  220F               	addwfc	?_readEEPROM+1,f,c
  2573  001EE6  ECA8  F02E         	call	_readEEPROM	;wreg free
  2574  001EEA  0D64               	mullw	100
  2575  001EEC  0100               	movlb	0	; () banked
  2576  001EEE  5196               	movf	(??_doWork+5)& (0+255),w,b
  2577  001EF0  24F3               	addwf	prodl,w,c
  2578  001EF2  6F98               	movwf	(??_doWork+7)& (0+255),b
  2579  001EF4  5197               	movf	(??_doWork+6)& (0+255),w,b
  2580  001EF6  20F4               	addwfc	prodh,w,c
  2581  001EF8  6F99               	movwf	(??_doWork+8)& (0+255),b
  2582  001EFA  5193               	movf	(??_doWork+2)& (0+255),w,b
  2583  001EFC  2598               	addwf	(??_doWork+7)& (0+255),w,b
  2584  001EFE  0101               	movlb	1	; () banked
  2585  001F00  6F79               	movwf	doWork@setpoint& (0+255),b
  2586  001F02  0100               	movlb	0	; () banked
  2587  001F04  0E00               	movlw	0
  2588  001F06  2199               	addwfc	(??_doWork+8)& (0+255),w,b
  2589  001F08  0101               	movlb	1	; () banked
  2590  001F0A  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2591                           
  2592                           ; BSR set to: 1
  2593                           ;main.c: 558: if (current_temp[ i ] > setpoint) {
  2594  001F0C  5183               	movf	doWork@i& (0+255),w,b
  2595  001F0E  0D02               	mullw	2
  2596  001F10  50F3               	movf	prodl,w,c
  2597  001F12  0FA0               	addlw	low _current_temp
  2598  001F14  6ED9               	movwf	fsr2l,c
  2599  001F16  6ADA               	clrf	fsr2h,c
  2600  001F18  CFDE F091          	movff	postinc2,??_doWork
  2601  001F1C  CFDD F092          	movff	postdec2,??_doWork+1
  2602  001F20  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  2603  001F22  0A80               	xorlw	128
  2604  001F24  0100               	movlb	0	; () banked
  2605  001F26  6F93               	movwf	(??_doWork+2)& (0+255),b
  2606  001F28  5191               	movf	??_doWork& (0+255),w,b
  2607  001F2A  0101               	movlb	1	; () banked
  2608  001F2C  5D79               	subwf	doWork@setpoint& (0+255),w,b
  2609  001F2E  0100               	movlb	0	; () banked
  2610  001F30  5192               	movf	(??_doWork+1)& (0+255),w,b
  2611  001F32  0A80               	xorlw	128
  2612  001F34  5993               	subwfb	(??_doWork+2)& (0+255),w,b
  2613  001F36  E301 D0B8          	bc	l208
  2614  001F3A                     l13978:
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 561: low_alarm &= ~(1 << i);
  2618  001F3A  C183  F091         	movff	doWork@i,??_doWork
  2619  001F3E  0E01               	movlw	1
  2620  001F40  6F92               	movwf	(??_doWork+1)& (0+255),b
  2621  001F42  2B91               	incf	??_doWork& (0+255),f,b
  2622  001F44  D002               	goto	u13134
  2623  001F46                     u13135:
  2624  001F46  90D8               	bcf	status,0,c
  2625  001F48  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2626  001F4A                     u13134:
  2627  001F4A  2F91               	decfsz	??_doWork& (0+255),f,b
  2628  001F4C  D7FC               	goto	u13135
  2629  001F4E  1D92               	comf	(??_doWork+1)& (0+255),w,b
  2630  001F50  17BA               	andwf	_low_alarm& (0+255),f,b
  2631  001F52  D0AB               	goto	l208
  2632  001F54                     l13980:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 566: else {
  2636                           ;main.c: 570: setpoint =
  2637                           ;main.c: 571: (int16_t) (readEEPROM(2 * i + 0x5B)*256 +
  2638                           ;main.c: 572: readEEPROM(2 * i + 0x5C));
  2639  001F54  0101               	movlb	1	; () banked
  2640  001F56  5183               	movf	doWork@i& (0+255),w,b
  2641  001F58  0D02               	mullw	2
  2642  001F5A  0E5C               	movlw	92
  2643  001F5C  24F3               	addwf	prodl,w,c
  2644  001F5E  6E0E               	movwf	?_readEEPROM,c
  2645  001F60  0E00               	movlw	0
  2646  001F62  20F4               	addwfc	prodh,w,c
  2647  001F64  6E0F               	movwf	?_readEEPROM+1,c
  2648  001F66  ECA8  F02E         	call	_readEEPROM	;wreg free
  2649  001F6A  0100               	movlb	0	; () banked
  2650  001F6C  6F91               	movwf	??_doWork& (0+255),b
  2651  001F6E  0101               	movlb	1	; () banked
  2652  001F70  5183               	movf	doWork@i& (0+255),w,b
  2653  001F72  0D02               	mullw	2
  2654  001F74  0E5B               	movlw	91
  2655  001F76  24F3               	addwf	prodl,w,c
  2656  001F78  6E0E               	movwf	?_readEEPROM,c
  2657  001F7A  0E00               	movlw	0
  2658  001F7C  20F4               	addwfc	prodh,w,c
  2659  001F7E  6E0F               	movwf	?_readEEPROM+1,c
  2660  001F80  ECA8  F02E         	call	_readEEPROM	;wreg free
  2661  001F84  0100               	movlb	0	; () banked
  2662  001F86  6F93               	movwf	(??_doWork+2)& (0+255),b
  2663  001F88  6B92               	clrf	(??_doWork+1)& (0+255),b
  2664  001F8A  5191               	movf	??_doWork& (0+255),w,b
  2665  001F8C  2592               	addwf	(??_doWork+1)& (0+255),w,b
  2666  001F8E  0101               	movlb	1	; () banked
  2667  001F90  6F79               	movwf	doWork@setpoint& (0+255),b
  2668  001F92  0100               	movlb	0	; () banked
  2669  001F94  0E00               	movlw	0
  2670  001F96  2193               	addwfc	(??_doWork+2)& (0+255),w,b
  2671  001F98  0101               	movlb	1	; () banked
  2672  001F9A  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2673                           
  2674                           ; BSR set to: 1
  2675                           ;main.c: 574: if (current_temp[ i ] < setpoint) {
  2676  001F9C  5183               	movf	doWork@i& (0+255),w,b
  2677  001F9E  0D02               	mullw	2
  2678  001FA0  50F3               	movf	prodl,w,c
  2679  001FA2  0100               	movlb	0	; () banked
  2680  001FA4  0FA0               	addlw	low _current_temp
  2681  001FA6  6ED9               	movwf	fsr2l,c
  2682  001FA8  6ADA               	clrf	fsr2h,c
  2683  001FAA  CFDE F091          	movff	postinc2,??_doWork
  2684  001FAE  CFDD F092          	movff	postdec2,??_doWork+1
  2685  001FB2  5192               	movf	(??_doWork+1)& (0+255),w,b
  2686  001FB4  0A80               	xorlw	128
  2687  001FB6  6F93               	movwf	(??_doWork+2)& (0+255),b
  2688  001FB8  0101               	movlb	1	; () banked
  2689  001FBA  5179               	movf	doWork@setpoint& (0+255),w,b
  2690  001FBC  0100               	movlb	0	; () banked
  2691  001FBE  5D91               	subwf	??_doWork& (0+255),w,b
  2692  001FC0  0101               	movlb	1	; () banked
  2693  001FC2  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  2694  001FC4  0A80               	xorlw	128
  2695  001FC6  0100               	movlb	0	; () banked
  2696  001FC8  5993               	subwfb	(??_doWork+2)& (0+255),w,b
  2697  001FCA  E26F               	bc	l208
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 577: low_alarm |= (1 << i);
  2701  001FCC  C183  F091         	movff	doWork@i,??_doWork
  2702  001FD0  0E01               	movlw	1
  2703  001FD2  6F92               	movwf	(??_doWork+1)& (0+255),b
  2704  001FD4  2B91               	incf	??_doWork& (0+255),f,b
  2705  001FD6  D002               	goto	u13154
  2706  001FD8                     u13155:
  2707  001FD8  90D8               	bcf	status,0,c
  2708  001FDA  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2709  001FDC                     u13154:
  2710  001FDC  2F91               	decfsz	??_doWork& (0+255),f,b
  2711  001FDE  D7FC               	goto	u13155
  2712  001FE0  5192               	movf	(??_doWork+1)& (0+255),w,b
  2713  001FE2  13BA               	iorwf	_low_alarm& (0+255),f,b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;main.c: 582: vscp_alarmstatus |= 1;
  2717  001FE4  804A               	bsf	_vscp_alarmstatus,0,c
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;main.c: 585: if (readEEPROM(i + 0x43) & (1<<3)) {
  2721  001FE6  0E43               	movlw	67
  2722  001FE8  0101               	movlb	1	; () banked
  2723  001FEA  2583               	addwf	doWork@i& (0+255),w,b
  2724  001FEC  6E0E               	movwf	?_readEEPROM,c
  2725  001FEE  6A0F               	clrf	?_readEEPROM+1,c
  2726  001FF0  0E00               	movlw	0
  2727  001FF2  220F               	addwfc	?_readEEPROM+1,f,c
  2728  001FF4  ECA8  F02E         	call	_readEEPROM	;wreg free
  2729  001FF8  0100               	movlb	0	; () banked
  2730  001FFA  6F91               	movwf	??_doWork& (0+255),b
  2731  001FFC  A791               	btfss	??_doWork& (0+255),3,b
  2732  001FFE  D055               	goto	l208
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 587: vscp_omsg.vscp_class = 1;
  2736  002000  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2737  002002  0E01               	movlw	1
  2738  002004  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2739                           
  2740                           ;main.c: 588: vscp_omsg.vscp_type = 2;
  2741  002006  0E02               	movlw	2
  2742  002008  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;main.c: 589: vscp_omsg.priority = 0x00;
  2746  00200A  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  2747                           
  2748                           ;main.c: 590: vscp_omsg.flags = 0x80 + 3;
  2749  00200C  0E83               	movlw	131
  2750  00200E  6FCF               	movwf	_vscp_omsg& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;main.c: 593: if (readEEPROM(i + 0x43) & (1<<5)) {
  2754  002010  0E43               	movlw	67
  2755  002012  0101               	movlb	1	; () banked
  2756  002014  2583               	addwf	doWork@i& (0+255),w,b
  2757  002016  6E0E               	movwf	?_readEEPROM,c
  2758  002018  6A0F               	clrf	?_readEEPROM+1,c
  2759  00201A  0E00               	movlw	0
  2760  00201C  220F               	addwfc	?_readEEPROM+1,f,c
  2761  00201E  ECA8  F02E         	call	_readEEPROM	;wreg free
  2762  002022  0100               	movlb	0	; () banked
  2763  002024  6F91               	movwf	??_doWork& (0+255),b
  2764  002026  AB91               	btfss	??_doWork& (0+255),5,b
  2765  002028  D017               	goto	l14002
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 595: if (readEEPROM(i + 0x43) & (1<<6)) {
  2769  00202A  0E43               	movlw	67
  2770  00202C  0101               	movlb	1	; () banked
  2771  00202E  2583               	addwf	doWork@i& (0+255),w,b
  2772  002030  6E0E               	movwf	?_readEEPROM,c
  2773  002032  6A0F               	clrf	?_readEEPROM+1,c
  2774  002034  0E00               	movlw	0
  2775  002036  220F               	addwfc	?_readEEPROM+1,f,c
  2776  002038  ECA8  F02E         	call	_readEEPROM	;wreg free
  2777  00203C  0100               	movlb	0	; () banked
  2778  00203E  6F91               	movwf	??_doWork& (0+255),b
  2779  002040  AD91               	btfss	??_doWork& (0+255),6,b
  2780  002042  D005               	goto	l14000
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 596: vscp_omsg.vscp_class = 30;
  2784  002044  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2785  002046  0E1E               	movlw	30
  2786  002048  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2787                           
  2788                           ;main.c: 597: vscp_omsg.vscp_type = 5;
  2789  00204A  0E05               	movlw	5
  2790  00204C  D004               	goto	L1
  2791  00204E                     l14000:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 599: else {
  2795                           ;main.c: 600: vscp_omsg.vscp_class = 30;
  2796  00204E  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  2797  002050  0E1E               	movlw	30
  2798  002052  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  2799                           
  2800                           ;main.c: 601: vscp_omsg.vscp_type = 6;
  2801  002054  0E06               	movlw	6
  2802  002056                     L1:
  2803  002056  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  2804  002058                     l14002:
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;main.c: 602: }
  2808                           ;main.c: 604: }
  2809                           ;main.c: 606: vscp_omsg.data[ 0 ] = i;
  2810  002058  C183  F0D4         	movff	doWork@i,_vscp_omsg+5
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;main.c: 607: vscp_omsg.data[ 1 ] =
  2814                           ;main.c: 608: readEEPROM(2 * i + 0x73);
  2815  00205C  90D8               	bcf	status,0,c
  2816  00205E  0101               	movlb	1	; () banked
  2817  002060  3583               	rlcf	doWork@i& (0+255),w,b
  2818  002062  0100               	movlb	0	; () banked
  2819  002064  6F91               	movwf	??_doWork& (0+255),b
  2820  002066  6B92               	clrf	(??_doWork+1)& (0+255),b
  2821  002068  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2822  00206A  0E73               	movlw	115
  2823  00206C  2591               	addwf	??_doWork& (0+255),w,b
  2824  00206E  6E0E               	movwf	?_readEEPROM,c
  2825  002070  0E00               	movlw	0
  2826  002072  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2827  002074  6E0F               	movwf	?_readEEPROM+1,c
  2828  002076  ECA8  F02E         	call	_readEEPROM	;wreg free
  2829  00207A  0100               	movlb	0	; () banked
  2830  00207C  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;main.c: 609: vscp_omsg.data[ 2 ] =
  2834                           ;main.c: 610: readEEPROM(2 * i + 0x74);
  2835  00207E  90D8               	bcf	status,0,c
  2836  002080  0101               	movlb	1	; () banked
  2837  002082  3583               	rlcf	doWork@i& (0+255),w,b
  2838  002084  0100               	movlb	0	; () banked
  2839  002086  6F91               	movwf	??_doWork& (0+255),b
  2840  002088  6B92               	clrf	(??_doWork+1)& (0+255),b
  2841  00208A  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2842  00208C  0E74               	movlw	116
  2843  00208E  2591               	addwf	??_doWork& (0+255),w,b
  2844  002090  6E0E               	movwf	?_readEEPROM,c
  2845  002092  0E00               	movlw	0
  2846  002094  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2847  002096  6E0F               	movwf	?_readEEPROM+1,c
  2848  002098  ECA8  F02E         	call	_readEEPROM	;wreg free
  2849  00209C  0100               	movlb	0	; () banked
  2850  00209E  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  2851                           
  2852                           ; BSR set to: 0
  2853                           ;main.c: 613: if (!vscp_sendEvent()) {
  2854  0020A0  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  2855  0020A4  0900               	iorlw	0
  2856  0020A6  E101 D748          	bz	l13978
  2857  0020AA                     l208:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 617: }
  2861                           ;main.c: 618: }
  2862                           ;main.c: 619: }
  2863                           ;main.c: 620: }
  2864                           ;main.c: 623: if ( high_alarm & (1 << i ) ) {
  2865  0020AA  C183  F091         	movff	doWork@i,??_doWork
  2866  0020AE  0E01               	movlw	1
  2867  0020B0  6F92               	movwf	(??_doWork+1)& (0+255),b
  2868  0020B2  2B91               	incf	??_doWork& (0+255),f,b
  2869  0020B4  D002               	goto	u13204
  2870  0020B6                     u13205:
  2871  0020B6  90D8               	bcf	status,0,c
  2872  0020B8  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2873  0020BA                     u13204:
  2874  0020BA  2F91               	decfsz	??_doWork& (0+255),f,b
  2875  0020BC  D7FC               	goto	u13205
  2876  0020BE  5192               	movf	(??_doWork+1)& (0+255),w,b
  2877  0020C0  15B9               	andwf	_high_alarm& (0+255),w,b
  2878  0020C2  E065               	bz	l14018
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;main.c: 627: setpoint =
  2882                           ;main.c: 628: (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2883                           ;main.c: 629: readEEPROM(2 * i + 0x68) -
  2884                           ;main.c: 630: readEEPROM(i + 0x97)*100);
  2885  0020C4  90D8               	bcf	status,0,c
  2886  0020C6  0101               	movlb	1	; () banked
  2887  0020C8  3583               	rlcf	doWork@i& (0+255),w,b
  2888  0020CA  0100               	movlb	0	; () banked
  2889  0020CC  6F91               	movwf	??_doWork& (0+255),b
  2890  0020CE  6B92               	clrf	(??_doWork+1)& (0+255),b
  2891  0020D0  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2892  0020D2  0E67               	movlw	103
  2893  0020D4  2591               	addwf	??_doWork& (0+255),w,b
  2894  0020D6  6E0E               	movwf	?_readEEPROM,c
  2895  0020D8  0E00               	movlw	0
  2896  0020DA  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  2897  0020DC  6E0F               	movwf	?_readEEPROM+1,c
  2898  0020DE  ECA8  F02E         	call	_readEEPROM	;wreg free
  2899  0020E2  0100               	movlb	0	; () banked
  2900  0020E4  6F94               	movwf	(??_doWork+3)& (0+255),b
  2901  0020E6  6B93               	clrf	(??_doWork+2)& (0+255),b
  2902  0020E8  90D8               	bcf	status,0,c
  2903  0020EA  0101               	movlb	1	; () banked
  2904  0020EC  3583               	rlcf	doWork@i& (0+255),w,b
  2905  0020EE  0100               	movlb	0	; () banked
  2906  0020F0  6F95               	movwf	(??_doWork+4)& (0+255),b
  2907  0020F2  6B96               	clrf	(??_doWork+5)& (0+255),b
  2908  0020F4  3796               	rlcf	(??_doWork+5)& (0+255),f,b
  2909  0020F6  0E68               	movlw	104
  2910  0020F8  2595               	addwf	(??_doWork+4)& (0+255),w,b
  2911  0020FA  6E0E               	movwf	?_readEEPROM,c
  2912  0020FC  0E00               	movlw	0
  2913  0020FE  2196               	addwfc	(??_doWork+5)& (0+255),w,b
  2914  002100  6E0F               	movwf	?_readEEPROM+1,c
  2915  002102  ECA8  F02E         	call	_readEEPROM	;wreg free
  2916  002106  0100               	movlb	0	; () banked
  2917  002108  2793               	addwf	(??_doWork+2)& (0+255),f,b
  2918  00210A  0E00               	movlw	0
  2919  00210C  2394               	addwfc	(??_doWork+3)& (0+255),f,b
  2920  00210E  0E97               	movlw	151
  2921  002110  0101               	movlb	1	; () banked
  2922  002112  2583               	addwf	doWork@i& (0+255),w,b
  2923  002114  6E0E               	movwf	?_readEEPROM,c
  2924  002116  6A0F               	clrf	?_readEEPROM+1,c
  2925  002118  0E00               	movlw	0
  2926  00211A  220F               	addwfc	?_readEEPROM+1,f,c
  2927  00211C  ECA8  F02E         	call	_readEEPROM	;wreg free
  2928  002120  6E12               	movwf	?___wmul,c
  2929  002122  6A13               	clrf	?___wmul+1,c
  2930  002124  6815               	setf	?___wmul+3,c
  2931  002126  0E9C               	movlw	156
  2932  002128  6E14               	movwf	?___wmul+2,c
  2933  00212A  EC98  F02C         	call	___wmul	;wreg free
  2934  00212E  5012               	movf	?___wmul,w,c
  2935  002130  0100               	movlb	0	; () banked
  2936  002132  2593               	addwf	(??_doWork+2)& (0+255),w,b
  2937  002134  0101               	movlb	1	; () banked
  2938  002136  6F79               	movwf	doWork@setpoint& (0+255),b
  2939  002138  5013               	movf	?___wmul+1,w,c
  2940  00213A  0100               	movlb	0	; () banked
  2941  00213C  2194               	addwfc	(??_doWork+3)& (0+255),w,b
  2942  00213E  0101               	movlb	1	; () banked
  2943  002140  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  2944                           
  2945                           ; BSR set to: 1
  2946                           ;main.c: 633: if (current_temp[ i ] < setpoint) {
  2947  002142  5183               	movf	doWork@i& (0+255),w,b
  2948  002144  0D02               	mullw	2
  2949  002146  50F3               	movf	prodl,w,c
  2950  002148  0100               	movlb	0	; () banked
  2951  00214A  0FA0               	addlw	low _current_temp
  2952  00214C  6ED9               	movwf	fsr2l,c
  2953  00214E  6ADA               	clrf	fsr2h,c
  2954  002150  CFDE F091          	movff	postinc2,??_doWork
  2955  002154  CFDD F092          	movff	postdec2,??_doWork+1
  2956  002158  5192               	movf	(??_doWork+1)& (0+255),w,b
  2957  00215A  0A80               	xorlw	128
  2958  00215C  6F93               	movwf	(??_doWork+2)& (0+255),b
  2959  00215E  0101               	movlb	1	; () banked
  2960  002160  5179               	movf	doWork@setpoint& (0+255),w,b
  2961  002162  0100               	movlb	0	; () banked
  2962  002164  5D91               	subwf	??_doWork& (0+255),w,b
  2963  002166  0101               	movlb	1	; () banked
  2964  002168  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  2965  00216A  0A80               	xorlw	128
  2966  00216C  0100               	movlb	0	; () banked
  2967  00216E  5993               	subwfb	(??_doWork+2)& (0+255),w,b
  2968  002170  E301 D0B6          	bc	l14050
  2969  002174                     l14016:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;main.c: 636: high_alarm &= ~(1 << i);
  2973  002174  C183  F091         	movff	doWork@i,??_doWork
  2974  002178  0E01               	movlw	1
  2975  00217A  6F92               	movwf	(??_doWork+1)& (0+255),b
  2976  00217C  2B91               	incf	??_doWork& (0+255),f,b
  2977  00217E  D002               	goto	u13234
  2978  002180                     u13235:
  2979  002180  90D8               	bcf	status,0,c
  2980  002182  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2981  002184                     u13234:
  2982  002184  2F91               	decfsz	??_doWork& (0+255),f,b
  2983  002186  D7FC               	goto	u13235
  2984  002188  1D92               	comf	(??_doWork+1)& (0+255),w,b
  2985  00218A  17B9               	andwf	_high_alarm& (0+255),f,b
  2986  00218C  D0A9               	goto	l14050
  2987  00218E                     l14018:
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;main.c: 641: else {
  2991                           ;main.c: 646: setpoint = (int16_t) (readEEPROM(2 * i + 0x67)*256 +
  2992                           ;main.c: 647: readEEPROM(2 * i + 0x68));
  2993  00218E  0101               	movlb	1	; () banked
  2994  002190  5183               	movf	doWork@i& (0+255),w,b
  2995  002192  0D02               	mullw	2
  2996  002194  0E68               	movlw	104
  2997  002196  24F3               	addwf	prodl,w,c
  2998  002198  6E0E               	movwf	?_readEEPROM,c
  2999  00219A  0E00               	movlw	0
  3000  00219C  20F4               	addwfc	prodh,w,c
  3001  00219E  6E0F               	movwf	?_readEEPROM+1,c
  3002  0021A0  ECA8  F02E         	call	_readEEPROM	;wreg free
  3003  0021A4  0100               	movlb	0	; () banked
  3004  0021A6  6F91               	movwf	??_doWork& (0+255),b
  3005  0021A8  0101               	movlb	1	; () banked
  3006  0021AA  5183               	movf	doWork@i& (0+255),w,b
  3007  0021AC  0D02               	mullw	2
  3008  0021AE  0E67               	movlw	103
  3009  0021B0  24F3               	addwf	prodl,w,c
  3010  0021B2  6E0E               	movwf	?_readEEPROM,c
  3011  0021B4  0E00               	movlw	0
  3012  0021B6  20F4               	addwfc	prodh,w,c
  3013  0021B8  6E0F               	movwf	?_readEEPROM+1,c
  3014  0021BA  ECA8  F02E         	call	_readEEPROM	;wreg free
  3015  0021BE  0100               	movlb	0	; () banked
  3016  0021C0  6F93               	movwf	(??_doWork+2)& (0+255),b
  3017  0021C2  6B92               	clrf	(??_doWork+1)& (0+255),b
  3018  0021C4  5191               	movf	??_doWork& (0+255),w,b
  3019  0021C6  2592               	addwf	(??_doWork+1)& (0+255),w,b
  3020  0021C8  0101               	movlb	1	; () banked
  3021  0021CA  6F79               	movwf	doWork@setpoint& (0+255),b
  3022  0021CC  0100               	movlb	0	; () banked
  3023  0021CE  0E00               	movlw	0
  3024  0021D0  2193               	addwfc	(??_doWork+2)& (0+255),w,b
  3025  0021D2  0101               	movlb	1	; () banked
  3026  0021D4  6F7A               	movwf	(doWork@setpoint+1)& (0+255),b
  3027                           
  3028                           ; BSR set to: 1
  3029                           ;main.c: 649: if (current_temp[ i ] > setpoint) {
  3030  0021D6  5183               	movf	doWork@i& (0+255),w,b
  3031  0021D8  0D02               	mullw	2
  3032  0021DA  50F3               	movf	prodl,w,c
  3033  0021DC  0FA0               	addlw	low _current_temp
  3034  0021DE  6ED9               	movwf	fsr2l,c
  3035  0021E0  6ADA               	clrf	fsr2h,c
  3036  0021E2  CFDE F091          	movff	postinc2,??_doWork
  3037  0021E6  CFDD F092          	movff	postdec2,??_doWork+1
  3038  0021EA  517A               	movf	(doWork@setpoint+1)& (0+255),w,b
  3039  0021EC  0A80               	xorlw	128
  3040  0021EE  0100               	movlb	0	; () banked
  3041  0021F0  6F93               	movwf	(??_doWork+2)& (0+255),b
  3042  0021F2  5191               	movf	??_doWork& (0+255),w,b
  3043  0021F4  0101               	movlb	1	; () banked
  3044  0021F6  5D79               	subwf	doWork@setpoint& (0+255),w,b
  3045  0021F8  0100               	movlb	0	; () banked
  3046  0021FA  5192               	movf	(??_doWork+1)& (0+255),w,b
  3047  0021FC  0A80               	xorlw	128
  3048  0021FE  5993               	subwfb	(??_doWork+2)& (0+255),w,b
  3049  002200  E26F               	bc	l14050
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;main.c: 652: high_alarm |= (1 << i);
  3053  002202  C183  F091         	movff	doWork@i,??_doWork
  3054  002206  0E01               	movlw	1
  3055  002208  6F92               	movwf	(??_doWork+1)& (0+255),b
  3056  00220A  2B91               	incf	??_doWork& (0+255),f,b
  3057  00220C  D002               	goto	u13254
  3058  00220E                     u13255:
  3059  00220E  90D8               	bcf	status,0,c
  3060  002210  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  3061  002212                     u13254:
  3062  002212  2F91               	decfsz	??_doWork& (0+255),f,b
  3063  002214  D7FC               	goto	u13255
  3064  002216  5192               	movf	(??_doWork+1)& (0+255),w,b
  3065  002218  13B9               	iorwf	_high_alarm& (0+255),f,b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 658: vscp_alarmstatus |= 2;
  3069  00221A  824A               	bsf	_vscp_alarmstatus,1,c
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 661: if (readEEPROM(i + 0x43) & (1<<4)) {
  3073  00221C  0E43               	movlw	67
  3074  00221E  0101               	movlb	1	; () banked
  3075  002220  2583               	addwf	doWork@i& (0+255),w,b
  3076  002222  6E0E               	movwf	?_readEEPROM,c
  3077  002224  6A0F               	clrf	?_readEEPROM+1,c
  3078  002226  0E00               	movlw	0
  3079  002228  220F               	addwfc	?_readEEPROM+1,f,c
  3080  00222A  ECA8  F02E         	call	_readEEPROM	;wreg free
  3081  00222E  0100               	movlb	0	; () banked
  3082  002230  6F91               	movwf	??_doWork& (0+255),b
  3083  002232  A991               	btfss	??_doWork& (0+255),4,b
  3084  002234  D055               	goto	l14050
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 663: vscp_omsg.vscp_class = 1;
  3088  002236  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  3089  002238  0E01               	movlw	1
  3090  00223A  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  3091                           
  3092                           ;main.c: 664: vscp_omsg.vscp_type = 2;
  3093  00223C  0E02               	movlw	2
  3094  00223E  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;main.c: 665: vscp_omsg.priority = 0x00;
  3098  002240  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  3099                           
  3100                           ;main.c: 666: vscp_omsg.flags = 0x80 + 3;
  3101  002242  0E83               	movlw	131
  3102  002244  6FCF               	movwf	_vscp_omsg& (0+255),b
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;main.c: 668: if (readEEPROM(i + 0x43) & (1<<5)) {
  3106  002246  0E43               	movlw	67
  3107  002248  0101               	movlb	1	; () banked
  3108  00224A  2583               	addwf	doWork@i& (0+255),w,b
  3109  00224C  6E0E               	movwf	?_readEEPROM,c
  3110  00224E  6A0F               	clrf	?_readEEPROM+1,c
  3111  002250  0E00               	movlw	0
  3112  002252  220F               	addwfc	?_readEEPROM+1,f,c
  3113  002254  ECA8  F02E         	call	_readEEPROM	;wreg free
  3114  002258  0100               	movlb	0	; () banked
  3115  00225A  6F91               	movwf	??_doWork& (0+255),b
  3116  00225C  AB91               	btfss	??_doWork& (0+255),5,b
  3117  00225E  D017               	goto	l14040
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 669: if (readEEPROM(i + 0x43) & (1<<6)) {
  3121  002260  0E43               	movlw	67
  3122  002262  0101               	movlb	1	; () banked
  3123  002264  2583               	addwf	doWork@i& (0+255),w,b
  3124  002266  6E0E               	movwf	?_readEEPROM,c
  3125  002268  6A0F               	clrf	?_readEEPROM+1,c
  3126  00226A  0E00               	movlw	0
  3127  00226C  220F               	addwfc	?_readEEPROM+1,f,c
  3128  00226E  ECA8  F02E         	call	_readEEPROM	;wreg free
  3129  002272  0100               	movlb	0	; () banked
  3130  002274  6F91               	movwf	??_doWork& (0+255),b
  3131  002276  AD91               	btfss	??_doWork& (0+255),6,b
  3132  002278  D005               	goto	l14038
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;main.c: 670: vscp_omsg.vscp_class = 30;
  3136  00227A  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  3137  00227C  0E1E               	movlw	30
  3138  00227E  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  3139                           
  3140                           ;main.c: 671: vscp_omsg.vscp_type = 6;
  3141  002280  0E06               	movlw	6
  3142  002282  D004               	goto	L2
  3143  002284                     l14038:
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 673: vscp_omsg.vscp_class = 30;
  3147  002284  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  3148  002286  0E1E               	movlw	30
  3149  002288  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  3150                           
  3151                           ;main.c: 674: vscp_omsg.vscp_type = 5;
  3152  00228A  0E05               	movlw	5
  3153  00228C                     L2:
  3154  00228C  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  3155  00228E                     l14040:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 675: }
  3159                           ;main.c: 676: }
  3160                           ;main.c: 678: vscp_omsg.data[ 0 ] = i;
  3161  00228E  C183  F0D4         	movff	doWork@i,_vscp_omsg+5
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;main.c: 679: vscp_omsg.data[ 1 ] =
  3165                           ;main.c: 680: readEEPROM(2 * i +
  3166                           ;main.c: 681: 0x73);
  3167  002292  90D8               	bcf	status,0,c
  3168  002294  0101               	movlb	1	; () banked
  3169  002296  3583               	rlcf	doWork@i& (0+255),w,b
  3170  002298  0100               	movlb	0	; () banked
  3171  00229A  6F91               	movwf	??_doWork& (0+255),b
  3172  00229C  6B92               	clrf	(??_doWork+1)& (0+255),b
  3173  00229E  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  3174  0022A0  0E73               	movlw	115
  3175  0022A2  2591               	addwf	??_doWork& (0+255),w,b
  3176  0022A4  6E0E               	movwf	?_readEEPROM,c
  3177  0022A6  0E00               	movlw	0
  3178  0022A8  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  3179  0022AA  6E0F               	movwf	?_readEEPROM+1,c
  3180  0022AC  ECA8  F02E         	call	_readEEPROM	;wreg free
  3181  0022B0  0100               	movlb	0	; () banked
  3182  0022B2  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 682: vscp_omsg.data[ 2 ] =
  3186                           ;main.c: 683: readEEPROM(2 * i +
  3187                           ;main.c: 684: 0x74);
  3188  0022B4  90D8               	bcf	status,0,c
  3189  0022B6  0101               	movlb	1	; () banked
  3190  0022B8  3583               	rlcf	doWork@i& (0+255),w,b
  3191  0022BA  0100               	movlb	0	; () banked
  3192  0022BC  6F91               	movwf	??_doWork& (0+255),b
  3193  0022BE  6B92               	clrf	(??_doWork+1)& (0+255),b
  3194  0022C0  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  3195  0022C2  0E74               	movlw	116
  3196  0022C4  2591               	addwf	??_doWork& (0+255),w,b
  3197  0022C6  6E0E               	movwf	?_readEEPROM,c
  3198  0022C8  0E00               	movlw	0
  3199  0022CA  2192               	addwfc	(??_doWork+1)& (0+255),w,b
  3200  0022CC  6E0F               	movwf	?_readEEPROM+1,c
  3201  0022CE  ECA8  F02E         	call	_readEEPROM	;wreg free
  3202  0022D2  0100               	movlb	0	; () banked
  3203  0022D4  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;main.c: 687: if (!vscp_sendEvent()) {
  3207  0022D6  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  3208  0022DA  0900               	iorlw	0
  3209  0022DC  E101 D74A          	bz	l14016
  3210  0022E0                     l14050:
  3211                           
  3212                           ; BSR set to: 0
  3213  0022E0  0101               	movlb	1	; () banked
  3214  0022E2  2B83               	incf	doWork@i& (0+255),f,b
  3215  0022E4  0E05               	movlw	5
  3216  0022E6  6583               	cpfsgt	doWork@i& (0+255),b
  3217  0022E8  D5C6               	goto	l13972
  3218  0022EA                     l224:
  3219  0022EA  0012               	return	
  3220  0022EC                     __end_of_doWork:
  3221                           	opt stack 0
  3222                           tblptru	equ	0xFF8
  3223                           prodh	equ	0xFF4
  3224                           prodl	equ	0xFF3
  3225                           postinc0	equ	0xFEE
  3226                           wreg	equ	0xFE8
  3227                           postdec1	equ	0xFE5
  3228                           fsr1h	equ	0xFE2
  3229                           fsr1l	equ	0xFE1
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function ___lwtofl *****************
  3238 ;; Defined at:
  3239 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  c               2   23[COMRAM] unsigned int 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;		None
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  4   23[COMRAM] unsigned int 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3253 ;;      Params:         4       0       0       0       0       0       0
  3254 ;;      Locals:         0       0       0       0       0       0       0
  3255 ;;      Temps:          0       0       0       0       0       0       0
  3256 ;;      Totals:         4       0       0       0       0       0       0
  3257 ;;Total ram usage:        4 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    3
  3260 ;; This function calls:
  3261 ;;		___flpack
  3262 ;; This function is called by:
  3263 ;;		_doWork
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           	psect	text2
  3268  005A62                     __ptext2:
  3269                           	opt stack 0
  3270  005A62                     ___lwtofl:
  3271                           	opt stack 26
  3272                           
  3273                           ;incstack = 0
  3274                           ;incstack = 0
  3275  005A62  C018  F00E         	movff	___lwtofl@c,?___flpack
  3276  005A66  C019  F00F         	movff	___lwtofl@c+1,?___flpack+1
  3277  005A6A  6A10               	clrf	?___flpack+2,c
  3278  005A6C  6A11               	clrf	?___flpack+3,c
  3279  005A6E  0E96               	movlw	150
  3280  005A70  6E12               	movwf	?___flpack+4,c
  3281  005A72  0E00               	movlw	0
  3282  005A74  6A13               	clrf	?___flpack+5,c
  3283  005A76  ECA9  F025         	call	___flpack	;wreg free
  3284  005A7A  C011  F01B         	movff	?___flpack+3,?___lwtofl+3
  3285  005A7E  C010  F01A         	movff	?___flpack+2,?___lwtofl+2
  3286  005A82  C00F  F019         	movff	?___flpack+1,?___lwtofl+1
  3287  005A86  C00E  F018         	movff	?___flpack,?___lwtofl
  3288  005A8A  0012               	return	
  3289  005A8C                     __end_of___lwtofl:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           postinc0	equ	0xFEE
  3295                           wreg	equ	0xFE8
  3296                           postdec1	equ	0xFE5
  3297                           fsr1h	equ	0xFE2
  3298                           fsr1l	equ	0xFE1
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function ___asfldiv *****************
  3307 ;; Defined at:
  3308 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  f1p             2   38[BANK0 ] PTR 
  3311 ;;		 -> doWork@avarage(4), 
  3312 ;;  f2              4   40[BANK0 ] PTR 
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  4   38[BANK0 ] PTR 
  3317 ;; Registers used:
  3318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : F/0
  3321 ;;		On exit  : F/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3324 ;;      Params:         0       6       0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0
  3327 ;;      Totals:         0       6       0       0       0       0       0
  3328 ;;Total ram usage:        6 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    4
  3331 ;; This function calls:
  3332 ;;		___fldiv
  3333 ;; This function is called by:
  3334 ;;		_doWork
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text3
  3339  0055F2                     __ptext3:
  3340                           	opt stack 0
  3341  0055F2                     ___asfldiv:
  3342                           	opt stack 25
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;	Return value of ___asfldiv is never used
  3346                           
  3347                           ;incstack = 0
  3348                           ;incstack = 0
  3349  0055F2  C086  FFD9         	movff	___asfldiv@f1p,fsr2l
  3350  0055F6  C087  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3351  0055FA  CFDE F070          	movff	postinc2,?___fldiv
  3352  0055FE  CFDE F071          	movff	postinc2,?___fldiv+1
  3353  005602  CFDE F072          	movff	postinc2,?___fldiv+2
  3354  005606  CFDE F073          	movff	postinc2,?___fldiv+3
  3355  00560A  C088  F074         	movff	___asfldiv@f2,?___fldiv+4
  3356  00560E  C089  F075         	movff	___asfldiv@f2+1,?___fldiv+5
  3357  005612  C08A  F076         	movff	___asfldiv@f2+2,?___fldiv+6
  3358  005616  C08B  F077         	movff	___asfldiv@f2+3,?___fldiv+7
  3359  00561A  EC78  F027         	call	___fldiv	;wreg free
  3360  00561E  C086  FFD9         	movff	___asfldiv@f1p,fsr2l
  3361  005622  C087  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  3362  005626  0100               	movlb	0	; () banked
  3363  005628  C070  FFDE         	movff	?___fldiv,postinc2
  3364  00562C  C071  FFDE         	movff	?___fldiv+1,postinc2
  3365  005630  C072  FFDE         	movff	?___fldiv+2,postinc2
  3366  005634  C073  FFDD         	movff	?___fldiv+3,postdec2
  3367  005638  06D9               	decf	fsr2l,f,c
  3368  00563A  06D9               	decf	fsr2l,f,c
  3369                           
  3370                           ; BSR set to: 0
  3371  00563C  0012               	return	
  3372  00563E                     __end_of___asfldiv:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           postdec1	equ	0xFE5
  3380                           fsr1h	equ	0xFE2
  3381                           fsr1l	equ	0xFE1
  3382                           indf2	equ	0xFDF
  3383                           postinc2	equ	0xFDE
  3384                           postdec2	equ	0xFDD
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function ___asfladd *****************
  3390 ;; Defined at:
  3391 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  f1p             2   58[COMRAM] PTR 
  3394 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  3395 ;;  f2              4   60[COMRAM] PTR 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  4   58[COMRAM] PTR 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : F/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3407 ;;      Params:         6       0       0       0       0       0       0
  3408 ;;      Locals:         0       0       0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0
  3410 ;;      Totals:         6       0       0       0       0       0       0
  3411 ;;Total ram usage:        6 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    4
  3414 ;; This function calls:
  3415 ;;		___fladd
  3416 ;; This function is called by:
  3417 ;;		_doWork
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text4
  3422  005556                     __ptext4:
  3423                           	opt stack 0
  3424  005556                     ___asfladd:
  3425                           	opt stack 25
  3426                           
  3427                           ;	Return value of ___asfladd is never used
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;incstack = 0
  3431                           ;incstack = 0
  3432  005556  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  3433  00555A  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3434  00555E  0100               	movlb	0	; () banked
  3435  005560  CFDE F060          	movff	postinc2,?___fladd
  3436  005564  CFDE F061          	movff	postinc2,?___fladd+1
  3437  005568  CFDE F062          	movff	postinc2,?___fladd+2
  3438  00556C  CFDE F063          	movff	postinc2,?___fladd+3
  3439  005570  C03D  F064         	movff	___asfladd@f2,?___fladd+4
  3440  005574  C03E  F065         	movff	___asfladd@f2+1,?___fladd+5
  3441  005578  C03F  F066         	movff	___asfladd@f2+2,?___fladd+6
  3442  00557C  C040  F067         	movff	___asfladd@f2+3,?___fladd+7
  3443  005580  EC09  F020         	call	___fladd	;wreg free
  3444  005584  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  3445  005588  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  3446  00558C  0100               	movlb	0	; () banked
  3447  00558E  C060  FFDE         	movff	?___fladd,postinc2
  3448  005592  C061  FFDE         	movff	?___fladd+1,postinc2
  3449  005596  C062  FFDE         	movff	?___fladd+2,postinc2
  3450  00559A  C063  FFDD         	movff	?___fladd+3,postdec2
  3451  00559E  06D9               	decf	fsr2l,f,c
  3452  0055A0  06D9               	decf	fsr2l,f,c
  3453                           
  3454                           ; BSR set to: 0
  3455  0055A2  0012               	return	
  3456  0055A4                     __end_of___asfladd:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           postinc0	equ	0xFEE
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1h	equ	0xFE2
  3465                           fsr1l	equ	0xFE1
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function ___aldiv *****************
  3474 ;; Defined at:
  3475 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  dividend        4   61[COMRAM] long 
  3478 ;;  divisor         4   65[COMRAM] long 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  quotient        4    2[BANK0 ] long 
  3481 ;;  sign            1    1[BANK0 ] unsigned char 
  3482 ;;  counter         1    0[BANK0 ] unsigned char 
  3483 ;; Return value:  Size  Location     Type
  3484 ;;                  4   61[COMRAM] long 
  3485 ;; Registers used:
  3486 ;;		wreg, status,2, status,0
  3487 ;; Tracked objects:
  3488 ;;		On entry : F/0
  3489 ;;		On exit  : F/0
  3490 ;;		Unchanged: 0/0
  3491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3492 ;;      Params:         8       0       0       0       0       0       0
  3493 ;;      Locals:         0       6       0       0       0       0       0
  3494 ;;      Temps:          0       0       0       0       0       0       0
  3495 ;;      Totals:         8       6       0       0       0       0       0
  3496 ;;Total ram usage:       14 bytes
  3497 ;; Hardware stack levels used:    1
  3498 ;; Hardware stack levels required when called:    2
  3499 ;; This function calls:
  3500 ;;		Nothing
  3501 ;; This function is called by:
  3502 ;;		_doWork
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text5
  3507  004CD0                     __ptext5:
  3508                           	opt stack 0
  3509  004CD0                     ___aldiv:
  3510                           	opt stack 27
  3511                           
  3512                           ; BSR set to: 0
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;incstack = 0
  3516                           ;incstack = 0
  3517  004CD0  6B61               	clrf	___aldiv@sign& (0+255),b
  3518  004CD2  AE45               	btfss	___aldiv@divisor+3,7,c
  3519  004CD4  D00A               	goto	l11476
  3520                           
  3521                           ; BSR set to: 0
  3522  004CD6  1E45               	comf	___aldiv@divisor+3,f,c
  3523  004CD8  1E44               	comf	___aldiv@divisor+2,f,c
  3524  004CDA  1E43               	comf	___aldiv@divisor+1,f,c
  3525  004CDC  6C42               	negf	___aldiv@divisor,c
  3526  004CDE  0E00               	movlw	0
  3527  004CE0  2243               	addwfc	___aldiv@divisor+1,f,c
  3528  004CE2  2244               	addwfc	___aldiv@divisor+2,f,c
  3529  004CE4  2245               	addwfc	___aldiv@divisor+3,f,c
  3530                           
  3531                           ; BSR set to: 0
  3532  004CE6  0E01               	movlw	1
  3533  004CE8  6F61               	movwf	___aldiv@sign& (0+255),b
  3534  004CEA                     l11476:
  3535                           
  3536                           ; BSR set to: 0
  3537  004CEA  AE41               	btfss	___aldiv@dividend+3,7,c
  3538  004CEC  D00A               	goto	l11482
  3539                           
  3540                           ; BSR set to: 0
  3541  004CEE  1E41               	comf	___aldiv@dividend+3,f,c
  3542  004CF0  1E40               	comf	___aldiv@dividend+2,f,c
  3543  004CF2  1E3F               	comf	___aldiv@dividend+1,f,c
  3544  004CF4  6C3E               	negf	___aldiv@dividend,c
  3545  004CF6  0E00               	movlw	0
  3546  004CF8  223F               	addwfc	___aldiv@dividend+1,f,c
  3547  004CFA  2240               	addwfc	___aldiv@dividend+2,f,c
  3548  004CFC  2241               	addwfc	___aldiv@dividend+3,f,c
  3549                           
  3550                           ; BSR set to: 0
  3551  004CFE  0E01               	movlw	1
  3552  004D00  1B61               	xorwf	___aldiv@sign& (0+255),f,b
  3553  004D02                     l11482:
  3554                           
  3555                           ; BSR set to: 0
  3556  004D02  6B62               	clrf	___aldiv@quotient& (0+255),b
  3557  004D04  6B63               	clrf	(___aldiv@quotient+1)& (0+255),b
  3558  004D06  6B64               	clrf	(___aldiv@quotient+2)& (0+255),b
  3559  004D08  6B65               	clrf	(___aldiv@quotient+3)& (0+255),b
  3560                           
  3561                           ; BSR set to: 0
  3562  004D0A  5045               	movf	___aldiv@divisor+3,w,c
  3563  004D0C  1042               	iorwf	___aldiv@divisor,w,c
  3564  004D0E  1043               	iorwf	___aldiv@divisor+1,w,c
  3565  004D10  1044               	iorwf	___aldiv@divisor+2,w,c
  3566  004D12  E029               	bz	l11504
  3567                           
  3568                           ; BSR set to: 0
  3569  004D14  0E01               	movlw	1
  3570  004D16  6F60               	movwf	___aldiv@counter& (0+255),b
  3571  004D18  D006               	goto	l11490
  3572  004D1A                     l11488:
  3573                           
  3574                           ; BSR set to: 0
  3575  004D1A  90D8               	bcf	status,0,c
  3576  004D1C  3642               	rlcf	___aldiv@divisor,f,c
  3577  004D1E  3643               	rlcf	___aldiv@divisor+1,f,c
  3578  004D20  3644               	rlcf	___aldiv@divisor+2,f,c
  3579  004D22  3645               	rlcf	___aldiv@divisor+3,f,c
  3580  004D24  2B60               	incf	___aldiv@counter& (0+255),f,b
  3581  004D26                     l11490:
  3582                           
  3583                           ; BSR set to: 0
  3584  004D26  AE45               	btfss	___aldiv@divisor+3,7,c
  3585  004D28  D7F8               	goto	l11488
  3586  004D2A                     l11492:
  3587                           
  3588                           ; BSR set to: 0
  3589  004D2A  90D8               	bcf	status,0,c
  3590  004D2C  3762               	rlcf	___aldiv@quotient& (0+255),f,b
  3591  004D2E  3763               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3592  004D30  3764               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3593  004D32  3765               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3594                           
  3595                           ; BSR set to: 0
  3596  004D34  5042               	movf	___aldiv@divisor,w,c
  3597  004D36  5C3E               	subwf	___aldiv@dividend,w,c
  3598  004D38  5043               	movf	___aldiv@divisor+1,w,c
  3599  004D3A  583F               	subwfb	___aldiv@dividend+1,w,c
  3600  004D3C  5044               	movf	___aldiv@divisor+2,w,c
  3601  004D3E  5840               	subwfb	___aldiv@dividend+2,w,c
  3602  004D40  5045               	movf	___aldiv@divisor+3,w,c
  3603  004D42  5841               	subwfb	___aldiv@dividend+3,w,c
  3604  004D44  E309               	bnc	l11500
  3605                           
  3606                           ; BSR set to: 0
  3607  004D46  5042               	movf	___aldiv@divisor,w,c
  3608  004D48  5E3E               	subwf	___aldiv@dividend,f,c
  3609  004D4A  5043               	movf	___aldiv@divisor+1,w,c
  3610  004D4C  5A3F               	subwfb	___aldiv@dividend+1,f,c
  3611  004D4E  5044               	movf	___aldiv@divisor+2,w,c
  3612  004D50  5A40               	subwfb	___aldiv@dividend+2,f,c
  3613  004D52  5045               	movf	___aldiv@divisor+3,w,c
  3614  004D54  5A41               	subwfb	___aldiv@dividend+3,f,c
  3615                           
  3616                           ; BSR set to: 0
  3617  004D56  8162               	bsf	___aldiv@quotient& (0+255),0,b
  3618  004D58                     l11500:
  3619                           
  3620                           ; BSR set to: 0
  3621  004D58  90D8               	bcf	status,0,c
  3622  004D5A  3245               	rrcf	___aldiv@divisor+3,f,c
  3623  004D5C  3244               	rrcf	___aldiv@divisor+2,f,c
  3624  004D5E  3243               	rrcf	___aldiv@divisor+1,f,c
  3625  004D60  3242               	rrcf	___aldiv@divisor,f,c
  3626                           
  3627                           ; BSR set to: 0
  3628  004D62  2F60               	decfsz	___aldiv@counter& (0+255),f,b
  3629  004D64  D7E2               	goto	l11492
  3630  004D66                     l11504:
  3631                           
  3632                           ; BSR set to: 0
  3633  004D66  5161               	movf	___aldiv@sign& (0+255),w,b
  3634  004D68  E008               	bz	l11508
  3635                           
  3636                           ; BSR set to: 0
  3637  004D6A  1F65               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3638  004D6C  1F64               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3639  004D6E  1F63               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3640  004D70  6D62               	negf	___aldiv@quotient& (0+255),b
  3641  004D72  0E00               	movlw	0
  3642  004D74  2363               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3643  004D76  2364               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3644  004D78  2365               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3645  004D7A                     l11508:
  3646                           
  3647                           ; BSR set to: 0
  3648  004D7A  C062  F03E         	movff	___aldiv@quotient,?___aldiv
  3649  004D7E  C063  F03F         	movff	___aldiv@quotient+1,?___aldiv+1
  3650  004D82  C064  F040         	movff	___aldiv@quotient+2,?___aldiv+2
  3651  004D86  C065  F041         	movff	___aldiv@quotient+3,?___aldiv+3
  3652                           
  3653                           ; BSR set to: 0
  3654  004D8A  0012               	return	
  3655  004D8C                     __end_of___aldiv:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           postinc0	equ	0xFEE
  3661                           wreg	equ	0xFE8
  3662                           postdec1	equ	0xFE5
  3663                           fsr1h	equ	0xFE2
  3664                           fsr1l	equ	0xFE1
  3665                           indf2	equ	0xFDF
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _getCalibrationValue *****************
  3673 ;; Defined at:
  3674 ;;		line 874 in file "../main.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;  i               1    wreg     unsigned char 
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;  i               1   24[COMRAM] unsigned char 
  3679 ;;  cal             2   22[COMRAM] short 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2   17[COMRAM] short 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3684 ;; Tracked objects:
  3685 ;;		On entry : F/1
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3689 ;;      Params:         2       0       0       0       0       0       0
  3690 ;;      Locals:         3       0       0       0       0       0       0
  3691 ;;      Temps:          3       0       0       0       0       0       0
  3692 ;;      Totals:         8       0       0       0       0       0       0
  3693 ;;Total ram usage:        8 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    3
  3696 ;; This function calls:
  3697 ;;		_readEEPROM
  3698 ;; This function is called by:
  3699 ;;		_doWork
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text6
  3704  00576A                     __ptext6:
  3705                           	opt stack 0
  3706  00576A                     _getCalibrationValue:
  3707                           	opt stack 26
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;incstack = 0
  3711                           ;incstack = 0
  3712                           ;getCalibrationValue@i stored from wreg
  3713  00576A  CFE8 F019          	movff	wreg,getCalibrationValue@i
  3714                           
  3715                           ; BSR set to: 1
  3716                           ;main.c: 875: int16_t cal;
  3717                           ;main.c: 877: cal = readEEPROM(2 * i + 0x9E) * 256 +
  3718                           ;main.c: 878: readEEPROM(2 * i + 0x9F);
  3719  00576E  5019               	movf	getCalibrationValue@i,w,c
  3720  005770  0D02               	mullw	2
  3721  005772  0E9F               	movlw	159
  3722  005774  24F3               	addwf	prodl,w,c
  3723  005776  6E0E               	movwf	?_readEEPROM,c
  3724  005778  0E00               	movlw	0
  3725  00577A  20F4               	addwfc	prodh,w,c
  3726  00577C  6E0F               	movwf	?_readEEPROM+1,c
  3727  00577E  ECA8  F02E         	call	_readEEPROM	;wreg free
  3728  005782  6E14               	movwf	??_getCalibrationValue& (0+255),c
  3729  005784  5019               	movf	getCalibrationValue@i,w,c
  3730  005786  0D02               	mullw	2
  3731  005788  0E9E               	movlw	158
  3732  00578A  24F3               	addwf	prodl,w,c
  3733  00578C  6E0E               	movwf	?_readEEPROM,c
  3734  00578E  0E00               	movlw	0
  3735  005790  20F4               	addwfc	prodh,w,c
  3736  005792  6E0F               	movwf	?_readEEPROM+1,c
  3737  005794  ECA8  F02E         	call	_readEEPROM	;wreg free
  3738  005798  6E16               	movwf	(??_getCalibrationValue+2)& (0+255),c
  3739  00579A  6A15               	clrf	(??_getCalibrationValue+1)& (0+255),c
  3740  00579C  5014               	movf	??_getCalibrationValue,w,c
  3741  00579E  2415               	addwf	??_getCalibrationValue+1,w,c
  3742  0057A0  6E17               	movwf	getCalibrationValue@cal,c
  3743  0057A2  0E00               	movlw	0
  3744  0057A4  2016               	addwfc	??_getCalibrationValue+2,w,c
  3745  0057A6  6E18               	movwf	getCalibrationValue@cal+1,c
  3746                           
  3747                           ;main.c: 880: return cal;
  3748  0057A8  C017  F012         	movff	getCalibrationValue@cal,?_getCalibrationValue
  3749  0057AC  C018  F013         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  3750  0057B0  0012               	return	
  3751  0057B2                     __end_of_getCalibrationValue:
  3752                           	opt stack 0
  3753                           tblptru	equ	0xFF8
  3754                           prodh	equ	0xFF4
  3755                           prodl	equ	0xFF3
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           postdec1	equ	0xFE5
  3759                           fsr1h	equ	0xFE2
  3760                           fsr1l	equ	0xFE1
  3761                           indf2	equ	0xFDF
  3762                           postinc2	equ	0xFDE
  3763                           postdec2	equ	0xFDD
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _log *****************
  3769 ;; Defined at:
  3770 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  x               4   38[BANK0 ] short 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  exponent        2   66[COMRAM] int 
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  4   38[BANK0 ] int 
  3777 ;; Registers used:
  3778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/1
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3784 ;;      Params:         0       4       0       0       0       0       0
  3785 ;;      Locals:         2       0       0       0       0       0       0
  3786 ;;      Temps:          0       0       0       0       0       0       0
  3787 ;;      Totals:         2       4       0       0       0       0       0
  3788 ;;Total ram usage:        6 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    5
  3791 ;; This function calls:
  3792 ;;		___fladd
  3793 ;;		___flmul
  3794 ;;		___awtofl
  3795 ;;		_eval_poly
  3796 ;;		_frexp
  3797 ;; This function is called by:
  3798 ;;		_doWork
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text7
  3803  00459C                     __ptext7:
  3804                           	opt stack 0
  3805  00459C                     _log:
  3806                           	opt stack 24
  3807                           
  3808                           ;incstack = 0
  3809                           ;incstack = 0
  3810  00459C  0100               	movlb	0	; () banked
  3811  00459E  BF89               	btfsc	(log@x+3)& (0+255),7,b
  3812  0045A0  D007               	goto	u13390
  3813                           
  3814                           ; BSR set to: 0
  3815                           
  3816                           ; BSR set to: 0
  3817  0045A2  EE20  F086         	lfsr	2,log@x
  3818  0045A6  50DE               	movf	postinc2,w,c
  3819  0045A8  10DE               	iorwf	postinc2,w,c
  3820  0045AA  10DE               	iorwf	postinc2,w,c
  3821  0045AC  10DE               	iorwf	postinc2,w,c
  3822  0045AE  E105               	bnz	l14096
  3823  0045B0                     u13390:
  3824                           
  3825                           ; BSR set to: 0
  3826  0045B0  6B86               	clrf	?_log& (0+255),b
  3827  0045B2  6B87               	clrf	(?_log+1)& (0+255),b
  3828  0045B4  6B88               	clrf	(?_log+2)& (0+255),b
  3829  0045B6  6B89               	clrf	(?_log+3)& (0+255),b
  3830  0045B8  D087               	goto	l1855
  3831  0045BA                     l14096:
  3832                           
  3833                           ; BSR set to: 0
  3834  0045BA  6A22               	clrf	?___flmul+4,c
  3835  0045BC  6A23               	clrf	?___flmul+5,c
  3836  0045BE  6A24               	clrf	?___flmul+6,c
  3837  0045C0  0E40               	movlw	64
  3838  0045C2  6E25               	movwf	?___flmul+7,c
  3839  0045C4  0E43               	movlw	low log@exponent
  3840  0045C6  6E12               	movwf	?_frexp+4,c
  3841  0045C8  0E00               	movlw	high log@exponent
  3842  0045CA  6E13               	movwf	?_frexp+5,c
  3843  0045CC  0E0F               	movlw	15
  3844  0045CE  6E13               	movwf	?_frexp+5,c
  3845  0045D0  0E5F               	movlw	__accesstop+-1
  3846  0045D2  6412               	cpfsgt	?_frexp+4,c
  3847  0045D4  6A13               	clrf	?_frexp+5,c
  3848  0045D6  C086  F00E         	movff	log@x,?_frexp
  3849  0045DA  C087  F00F         	movff	log@x+1,?_frexp+1
  3850  0045DE  C088  F010         	movff	log@x+2,?_frexp+2
  3851  0045E2  C089  F011         	movff	log@x+3,?_frexp+3
  3852  0045E6  EC0B  F029         	call	_frexp	;wreg free
  3853  0045EA  C011  F021         	movff	?_frexp+3,?___flmul+3
  3854  0045EE  C010  F020         	movff	?_frexp+2,?___flmul+2
  3855  0045F2  C00F  F01F         	movff	?_frexp+1,?___flmul+1
  3856  0045F6  C00E  F01E         	movff	?_frexp,?___flmul
  3857  0045FA  ECE1  F024         	call	___flmul	;wreg free
  3858  0045FE  C021  F063         	movff	?___flmul+3,?___fladd+3
  3859  004602  C020  F062         	movff	?___flmul+2,?___fladd+2
  3860  004606  C01F  F061         	movff	?___flmul+1,?___fladd+1
  3861  00460A  C01E  F060         	movff	?___flmul,?___fladd
  3862  00460E  0100               	movlb	0	; () banked
  3863  004610  6B64               	clrf	(?___fladd+4)& (0+255),b
  3864  004612  6B65               	clrf	(?___fladd+5)& (0+255),b
  3865  004614  0E80               	movlw	128
  3866  004616  6F66               	movwf	(?___fladd+6)& (0+255),b
  3867  004618  0EBF               	movlw	191
  3868  00461A  6F67               	movwf	(?___fladd+7)& (0+255),b
  3869  00461C  EC09  F020         	call	___fladd	;wreg free
  3870  004620  C063  F089         	movff	?___fladd+3,log@x+3
  3871  004624  C062  F088         	movff	?___fladd+2,log@x+2
  3872  004628  C061  F087         	movff	?___fladd+1,log@x+1
  3873  00462C  C060  F086         	movff	?___fladd,log@x
  3874  004630  0643               	decf	log@exponent,f,c
  3875  004632  A0D8               	btfss	status,0,c
  3876  004634  0644               	decf	log@exponent+1,f,c
  3877  004636  C086  F03B         	movff	log@x,?_eval_poly
  3878  00463A  C087  F03C         	movff	log@x+1,?_eval_poly+1
  3879  00463E  C088  F03D         	movff	log@x+2,?_eval_poly+2
  3880  004642  C089  F03E         	movff	log@x+3,?_eval_poly+3
  3881  004646  0E48               	movlw	low log@coeff
  3882  004648  6E3F               	movwf	?_eval_poly+4,c
  3883  00464A  6A41               	clrf	?_eval_poly+6,c
  3884  00464C  0E08               	movlw	8
  3885  00464E  6E40               	movwf	?_eval_poly+5,c
  3886  004650  EC49  F025         	call	_eval_poly	;wreg free
  3887  004654  C03E  F089         	movff	?_eval_poly+3,log@x+3
  3888  004658  C03D  F088         	movff	?_eval_poly+2,log@x+2
  3889  00465C  C03C  F087         	movff	?_eval_poly+1,log@x+1
  3890  004660  C03B  F086         	movff	?_eval_poly,log@x
  3891  004664  0E18               	movlw	24
  3892  004666  6E22               	movwf	?___flmul+4,c
  3893  004668  0E72               	movlw	114
  3894  00466A  6E23               	movwf	?___flmul+5,c
  3895  00466C  0E31               	movlw	49
  3896  00466E  6E24               	movwf	?___flmul+6,c
  3897  004670  0E3F               	movlw	63
  3898  004672  6E25               	movwf	?___flmul+7,c
  3899  004674  C043  F018         	movff	log@exponent,?___awtofl
  3900  004678  C044  F019         	movff	log@exponent+1,?___awtofl+1
  3901  00467C  ECB5  F02C         	call	___awtofl	;wreg free
  3902  004680  C01B  F021         	movff	?___awtofl+3,?___flmul+3
  3903  004684  C01A  F020         	movff	?___awtofl+2,?___flmul+2
  3904  004688  C019  F01F         	movff	?___awtofl+1,?___flmul+1
  3905  00468C  C018  F01E         	movff	?___awtofl,?___flmul
  3906  004690  ECE1  F024         	call	___flmul	;wreg free
  3907  004694  C021  F063         	movff	?___flmul+3,?___fladd+3
  3908  004698  C020  F062         	movff	?___flmul+2,?___fladd+2
  3909  00469C  C01F  F061         	movff	?___flmul+1,?___fladd+1
  3910  0046A0  C01E  F060         	movff	?___flmul,?___fladd
  3911  0046A4  C086  F064         	movff	log@x,?___fladd+4
  3912  0046A8  C087  F065         	movff	log@x+1,?___fladd+5
  3913  0046AC  C088  F066         	movff	log@x+2,?___fladd+6
  3914  0046B0  C089  F067         	movff	log@x+3,?___fladd+7
  3915  0046B4  EC09  F020         	call	___fladd	;wreg free
  3916  0046B8  C063  F089         	movff	?___fladd+3,?_log+3
  3917  0046BC  C062  F088         	movff	?___fladd+2,?_log+2
  3918  0046C0  C061  F087         	movff	?___fladd+1,?_log+1
  3919  0046C4  C060  F086         	movff	?___fladd,?_log
  3920  0046C8                     l1855:
  3921  0046C8  0012               	return	
  3922  0046CA                     __end_of_log:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           postdec1	equ	0xFE5
  3930                           fsr1h	equ	0xFE2
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _exp *****************
  3940 ;; Defined at:
  3941 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  x               4   38[BANK0 ] int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  exponent        2   46[BANK0 ] int 
  3946 ;;  sign            1   48[BANK0 ] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  4   38[BANK0 ] unsigned char 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/1
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3956 ;;      Params:         0       4       0       0       0       0       0
  3957 ;;      Locals:         0       7       0       0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0
  3959 ;;      Totals:         0      11       0       0       0       0       0
  3960 ;;Total ram usage:       11 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    6
  3963 ;; This function calls:
  3964 ;;		___fldiv
  3965 ;;		___asflmul
  3966 ;;		___asflsub
  3967 ;;		___awtofl
  3968 ;;		_floor
  3969 ;;		_eval_poly
  3970 ;;		_ldexp
  3971 ;;		___flge
  3972 ;;		___flneg
  3973 ;;		___fltol
  3974 ;; This function is called by:
  3975 ;;		_doWork
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text8
  3980  003C7E                     __ptext8:
  3981                           	opt stack 0
  3982  003C7E                     _exp:
  3983                           	opt stack 23
  3984                           
  3985                           ;incstack = 0
  3986                           ;incstack = 0
  3987  003C7E  0100               	movlb	0	; () banked
  3988  003C80  EE20  F086         	lfsr	2,exp@x
  3989  003C84  50DE               	movf	postinc2,w,c
  3990  003C86  10DE               	iorwf	postinc2,w,c
  3991  003C88  10DE               	iorwf	postinc2,w,c
  3992  003C8A  10DE               	iorwf	postinc2,w,c
  3993  003C8C  E107               	bnz	l14058
  3994                           
  3995                           ; BSR set to: 0
  3996  003C8E  0E00               	movlw	0
  3997  003C90  6F86               	movwf	?_exp& (0+255),b
  3998  003C92  6F87               	movwf	(?_exp+1)& (0+255),b
  3999  003C94  0E80               	movlw	128
  4000  003C96  6F88               	movwf	(?_exp+2)& (0+255),b
  4001  003C98  0E3F               	movlw	63
  4002  003C9A  D018               	goto	L3
  4003  003C9C                     l14058:
  4004                           
  4005                           ; BSR set to: 0
  4006  003C9C  0E18               	movlw	24
  4007  003C9E  6E0E               	movwf	?___flge,c
  4008  003CA0  0E72               	movlw	114
  4009  003CA2  6E0F               	movwf	?___flge+1,c
  4010  003CA4  0E31               	movlw	49
  4011  003CA6  6E10               	movwf	?___flge+2,c
  4012  003CA8  0E44               	movlw	68
  4013  003CAA  6E11               	movwf	?___flge+3,c
  4014  003CAC  C086  F012         	movff	exp@x,?___flge+4
  4015  003CB0  C087  F013         	movff	exp@x+1,?___flge+5
  4016  003CB4  C088  F014         	movff	exp@x+2,?___flge+6
  4017  003CB8  C089  F015         	movff	exp@x+3,?___flge+7
  4018  003CBC  EC1F  F02B         	call	___flge	;wreg free
  4019  003CC0  E207               	bc	l14064
  4020  003CC2  0100               	movlb	0	; () banked
  4021  003CC4  6986               	setf	?_exp& (0+255),b
  4022  003CC6  6987               	setf	(?_exp+1)& (0+255),b
  4023  003CC8  0E7F               	movlw	127
  4024  003CCA  6F88               	movwf	(?_exp+2)& (0+255),b
  4025  003CCC                     L3:
  4026  003CCC  6F89               	movwf	(?_exp+3)& (0+255),b
  4027  003CCE  D0C9               	goto	l1563
  4028  003CD0                     l14064:
  4029  003CD0  C086  F00E         	movff	exp@x,?___flge
  4030  003CD4  C087  F00F         	movff	exp@x+1,?___flge+1
  4031  003CD8  C088  F010         	movff	exp@x+2,?___flge+2
  4032  003CDC  C089  F011         	movff	exp@x+3,?___flge+3
  4033  003CE0  0E87               	movlw	135
  4034  003CE2  6E12               	movwf	?___flge+4,c
  4035  003CE4  0E48               	movlw	72
  4036  003CE6  6E13               	movwf	?___flge+5,c
  4037  003CE8  0E3A               	movlw	58
  4038  003CEA  6E14               	movwf	?___flge+6,c
  4039  003CEC  0EC4               	movlw	196
  4040  003CEE  6E15               	movwf	?___flge+7,c
  4041  003CF0  EC1F  F02B         	call	___flge	;wreg free
  4042  003CF4  E202               	bc	l14068
  4043  003CF6  0100               	movlb	0	; () banked
  4044  003CF8  D08E               	goto	u13370
  4045  003CFA                     l14068:
  4046  003CFA  0100               	movlb	0	; () banked
  4047  003CFC  0E01               	movlw	1
  4048  003CFE  AF89               	btfss	(exp@x+3)& (0+255),7,b
  4049  003D00  0E00               	movlw	0
  4050  003D02  6F90               	movwf	exp@sign& (0+255),b
  4051  003D04  5190               	movf	exp@sign& (0+255),w,b
  4052  003D06  E012               	bz	l1566
  4053                           
  4054                           ; BSR set to: 0
  4055  003D08  C086  F00E         	movff	exp@x,?___flneg
  4056  003D0C  C087  F00F         	movff	exp@x+1,?___flneg+1
  4057  003D10  C088  F010         	movff	exp@x+2,?___flneg+2
  4058  003D14  C089  F011         	movff	exp@x+3,?___flneg+3
  4059  003D18  ECBE  F02D         	call	___flneg	;wreg free
  4060  003D1C  C011  F089         	movff	?___flneg+3,exp@x+3
  4061  003D20  C010  F088         	movff	?___flneg+2,exp@x+2
  4062  003D24  C00F  F087         	movff	?___flneg+1,exp@x+1
  4063  003D28  C00E  F086         	movff	?___flneg,exp@x
  4064  003D2C                     l1566:
  4065                           
  4066                           ; BSR set to: 0
  4067  003D2C  0E3B               	movlw	59
  4068  003D2E  6E34               	movwf	?___asflmul,c
  4069  003D30  0EAA               	movlw	170
  4070  003D32  6E35               	movwf	?___asflmul+1,c
  4071  003D34  0EB8               	movlw	184
  4072  003D36  6E36               	movwf	?___asflmul+2,c
  4073  003D38  0E3F               	movlw	63
  4074  003D3A  6E37               	movwf	?___asflmul+3,c
  4075  003D3C  0E86               	movlw	exp@x& (0+255)
  4076  003D3E  EC90  F02B         	call	___asflmul
  4077  003D42  C086  F06B         	movff	exp@x,?_floor
  4078  003D46  C087  F06C         	movff	exp@x+1,?_floor+1
  4079  003D4A  C088  F06D         	movff	exp@x+2,?_floor+2
  4080  003D4E  C089  F06E         	movff	exp@x+3,?_floor+3
  4081  003D52  ECE8  F023         	call	_floor	;wreg free
  4082  003D56  C06E  F08D         	movff	?_floor+3,_exp$2276+3
  4083  003D5A  C06D  F08C         	movff	?_floor+2,_exp$2276+2
  4084  003D5E  C06C  F08B         	movff	?_floor+1,_exp$2276+1
  4085  003D62  C06B  F08A         	movff	?_floor,_exp$2276
  4086  003D66  C08A  F034         	movff	_exp$2276,?___fltol
  4087  003D6A  C08B  F035         	movff	_exp$2276+1,?___fltol+1
  4088  003D6E  C08C  F036         	movff	_exp$2276+2,?___fltol+2
  4089  003D72  C08D  F037         	movff	_exp$2276+3,?___fltol+3
  4090  003D76  EC72  F028         	call	___fltol	;wreg free
  4091  003D7A  C034  F08E         	movff	?___fltol,exp@exponent
  4092  003D7E  C035  F08F         	movff	?___fltol+1,exp@exponent+1
  4093  003D82  0100               	movlb	0	; () banked
  4094  003D84  0E00               	movlw	high exp@x
  4095  003D86  6E3C               	movwf	?___asflsub+1,c
  4096  003D88  0E86               	movlw	low exp@x
  4097  003D8A  6E3B               	movwf	?___asflsub,c
  4098  003D8C  C08E  F018         	movff	exp@exponent,?___awtofl
  4099  003D90  C08F  F019         	movff	exp@exponent+1,?___awtofl+1
  4100  003D94  ECB5  F02C         	call	___awtofl	;wreg free
  4101  003D98  C01B  F040         	movff	?___awtofl+3,?___asflsub+5
  4102  003D9C  C01A  F03F         	movff	?___awtofl+2,?___asflsub+4
  4103  003DA0  C019  F03E         	movff	?___awtofl+1,?___asflsub+3
  4104  003DA4  C018  F03D         	movff	?___awtofl,?___asflsub+2
  4105  003DA8  ECD2  F02A         	call	___asflsub	;wreg free
  4106                           
  4107                           ; BSR set to: 0
  4108  003DAC  C086  F03B         	movff	exp@x,?_eval_poly
  4109  003DB0  C087  F03C         	movff	exp@x+1,?_eval_poly+1
  4110  003DB4  C088  F03D         	movff	exp@x+2,?_eval_poly+2
  4111  003DB8  C089  F03E         	movff	exp@x+3,?_eval_poly+3
  4112  003DBC  0E20               	movlw	low exp@coeff
  4113  003DBE  6E3F               	movwf	?_eval_poly+4,c
  4114  003DC0  6A41               	clrf	?_eval_poly+6,c
  4115  003DC2  0E09               	movlw	9
  4116  003DC4  6E40               	movwf	?_eval_poly+5,c
  4117  003DC6  EC49  F025         	call	_eval_poly	;wreg free
  4118  003DCA  C03E  F06F         	movff	?_eval_poly+3,?_ldexp+3
  4119  003DCE  C03D  F06E         	movff	?_eval_poly+2,?_ldexp+2
  4120  003DD2  C03C  F06D         	movff	?_eval_poly+1,?_ldexp+1
  4121  003DD6  C03B  F06C         	movff	?_eval_poly,?_ldexp
  4122  003DDA  C08E  F070         	movff	exp@exponent,?_ldexp+4
  4123  003DDE  C08F  F071         	movff	exp@exponent+1,?_ldexp+5
  4124  003DE2  ECCF  F027         	call	_ldexp	;wreg free
  4125  003DE6  C06F  F089         	movff	?_ldexp+3,exp@x+3
  4126  003DEA  C06E  F088         	movff	?_ldexp+2,exp@x+2
  4127  003DEE  C06D  F087         	movff	?_ldexp+1,exp@x+1
  4128  003DF2  C06C  F086         	movff	?_ldexp,exp@x
  4129                           
  4130                           ; BSR set to: 0
  4131  003DF6  5190               	movf	exp@sign& (0+255),w,b
  4132  003DF8  E02C               	bz	l1567
  4133                           
  4134                           ; BSR set to: 0
  4135  003DFA  EE20  F086         	lfsr	2,exp@x
  4136  003DFE  0EFF               	movlw	255
  4137  003E00  18DE               	xorwf	postinc2,w,c
  4138  003E02  0EFF               	movlw	255
  4139  003E04  B4D8               	btfsc	status,2,c
  4140  003E06  18DE               	xorwf	postinc2,w,c
  4141  003E08  0E7F               	movlw	127
  4142  003E0A  B4D8               	btfsc	status,2,c
  4143  003E0C  18DE               	xorwf	postinc2,w,c
  4144  003E0E  0E7F               	movlw	127
  4145  003E10  B4D8               	btfsc	status,2,c
  4146  003E12  18DE               	xorwf	postinc2,w,c
  4147  003E14  E105               	bnz	l14084
  4148  003E16                     u13370:
  4149                           
  4150                           ; BSR set to: 0
  4151  003E16  6B86               	clrf	?_exp& (0+255),b
  4152  003E18  6B87               	clrf	(?_exp+1)& (0+255),b
  4153  003E1A  6B88               	clrf	(?_exp+2)& (0+255),b
  4154  003E1C  6B89               	clrf	(?_exp+3)& (0+255),b
  4155  003E1E  D021               	goto	l1563
  4156  003E20                     l14084:
  4157                           
  4158                           ; BSR set to: 0
  4159  003E20  6B70               	clrf	?___fldiv& (0+255),b
  4160  003E22  6B71               	clrf	(?___fldiv+1)& (0+255),b
  4161  003E24  0E80               	movlw	128
  4162  003E26  6F72               	movwf	(?___fldiv+2)& (0+255),b
  4163  003E28  0E3F               	movlw	63
  4164  003E2A  6F73               	movwf	(?___fldiv+3)& (0+255),b
  4165  003E2C  C086  F074         	movff	exp@x,?___fldiv+4
  4166  003E30  C087  F075         	movff	exp@x+1,?___fldiv+5
  4167  003E34  C088  F076         	movff	exp@x+2,?___fldiv+6
  4168  003E38  C089  F077         	movff	exp@x+3,?___fldiv+7
  4169  003E3C  EC78  F027         	call	___fldiv	;wreg free
  4170  003E40  C073  F089         	movff	?___fldiv+3,?_exp+3
  4171  003E44  C072  F088         	movff	?___fldiv+2,?_exp+2
  4172  003E48  C071  F087         	movff	?___fldiv+1,?_exp+1
  4173  003E4C  C070  F086         	movff	?___fldiv,?_exp
  4174  003E50  D008               	goto	l1563
  4175  003E52                     l1567:
  4176                           
  4177                           ; BSR set to: 0
  4178  003E52  C086  F086         	movff	exp@x,?_exp
  4179  003E56  C087  F087         	movff	exp@x+1,?_exp+1
  4180  003E5A  C088  F088         	movff	exp@x+2,?_exp+2
  4181  003E5E  C089  F089         	movff	exp@x+3,?_exp+3
  4182  003E62                     l1563:
  4183  003E62  0012               	return	
  4184  003E64                     __end_of_exp:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           prodh	equ	0xFF4
  4188                           prodl	equ	0xFF3
  4189                           postinc0	equ	0xFEE
  4190                           wreg	equ	0xFE8
  4191                           postdec1	equ	0xFE5
  4192                           fsr1h	equ	0xFE2
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function ___flneg *****************
  4202 ;; Defined at:
  4203 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  f1              4   13[COMRAM] unsigned char 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  4   13[COMRAM] unsigned char 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4212 ;; Tracked objects:
  4213 ;;		On entry : F/0
  4214 ;;		On exit  : F/0
  4215 ;;		Unchanged: F/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4217 ;;      Params:         4       0       0       0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0
  4220 ;;      Totals:         4       0       0       0       0       0       0
  4221 ;;Total ram usage:        4 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    2
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_exp
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text9
  4232  005B7C                     __ptext9:
  4233                           	opt stack 0
  4234  005B7C                     ___flneg:
  4235                           	opt stack 26
  4236                           
  4237                           ; BSR set to: 0
  4238                           
  4239                           ;incstack = 0
  4240                           ;incstack = 0
  4241  005B7C  EE20  F00E         	lfsr	2,___flneg@f1
  4242  005B80  50DE               	movf	postinc2,w,c
  4243  005B82  10DE               	iorwf	postinc2,w,c
  4244  005B84  10DE               	iorwf	postinc2,w,c
  4245  005B86  10DE               	iorwf	postinc2,w,c
  4246  005B88  E002               	bz	l11778
  4247                           
  4248                           ; BSR set to: 0
  4249  005B8A  0E80               	movlw	128
  4250  005B8C  1A11               	xorwf	___flneg@f1+3,f,c
  4251  005B8E                     l11778:
  4252                           
  4253                           ; BSR set to: 0
  4254  005B8E  C00E  F00E         	movff	___flneg@f1,?___flneg
  4255  005B92  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  4256  005B96  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  4257  005B9A  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  4258                           
  4259                           ; BSR set to: 0
  4260  005B9E  0012               	return	
  4261  005BA0                     __end_of___flneg:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           prodh	equ	0xFF4
  4265                           prodl	equ	0xFF3
  4266                           postinc0	equ	0xFEE
  4267                           wreg	equ	0xFE8
  4268                           postdec1	equ	0xFE5
  4269                           fsr1h	equ	0xFE2
  4270                           fsr1l	equ	0xFE1
  4271                           indf2	equ	0xFDF
  4272                           postinc2	equ	0xFDE
  4273                           postdec2	equ	0xFDD
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _ldexp *****************
  4279 ;; Defined at:
  4280 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  value           4   12[BANK0 ] unsigned char 
  4283 ;;  newexp          2   16[BANK0 ] int 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  4   12[BANK0 ] int 
  4288 ;; Registers used:
  4289 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : F/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4295 ;;      Params:         0       6       0       0       0       0       0
  4296 ;;      Locals:         0       0       0       0       0       0       0
  4297 ;;      Temps:          3       0       0       0       0       0       0
  4298 ;;      Totals:         3       6       0       0       0       0       0
  4299 ;;Total ram usage:        9 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    2
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		_exp
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text10
  4310  004F9E                     __ptext10:
  4311                           	opt stack 0
  4312  004F9E                     _ldexp:
  4313                           	opt stack 26
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;incstack = 0
  4317                           ;incstack = 0
  4318  004F9E  0100               	movlb	0	; () banked
  4319  004FA0  EE20  F06C         	lfsr	2,ldexp@value
  4320  004FA4  50DE               	movf	postinc2,w,c
  4321  004FA6  10DE               	iorwf	postinc2,w,c
  4322  004FA8  10DE               	iorwf	postinc2,w,c
  4323  004FAA  10DE               	iorwf	postinc2,w,c
  4324  004FAC  E014               	bz	u10200
  4325                           
  4326                           ; BSR set to: 0
  4327                           
  4328                           ; BSR set to: 0
  4329  004FAE  516F               	movf	(ldexp@value+3)& (0+255),w,b
  4330  004FB0  0B7F               	andlw	127
  4331  004FB2  6E43               	movwf	??_ldexp& (0+255),c
  4332  004FB4  90D8               	bcf	status,0,c
  4333  004FB6  3443               	rlcf	??_ldexp,w,c
  4334  004FB8  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4335  004FBA  6A45               	clrf	(??_ldexp+2)& (0+255),c
  4336  004FBC  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  4337  004FBE  5044               	movf	??_ldexp+1,w,c
  4338  004FC0  2770               	addwf	ldexp@newexp& (0+255),f,b
  4339  004FC2  5045               	movf	??_ldexp+2,w,c
  4340  004FC4  2371               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4341  004FC6  356E               	rlcf	(ldexp@value+2)& (0+255),w,b
  4342  004FC8  36E8               	rlcf	wreg,f,c
  4343  004FCA  0B01               	andlw	1
  4344  004FCC  2770               	addwf	ldexp@newexp& (0+255),f,b
  4345  004FCE  0E00               	movlw	0
  4346  004FD0  2371               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4347                           
  4348                           ; BSR set to: 0
  4349  004FD2  AF71               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4350  004FD4  D005               	goto	l11740
  4351  004FD6                     u10200:
  4352                           
  4353                           ; BSR set to: 0
  4354  004FD6  6B6C               	clrf	?_ldexp& (0+255),b
  4355  004FD8  6B6D               	clrf	(?_ldexp+1)& (0+255),b
  4356  004FDA  6B6E               	clrf	(?_ldexp+2)& (0+255),b
  4357  004FDC  6B6F               	clrf	(?_ldexp+3)& (0+255),b
  4358  004FDE  D031               	goto	l1688
  4359  004FE0                     l11740:
  4360                           
  4361                           ; BSR set to: 0
  4362  004FE0  5171               	movf	(ldexp@newexp+1)& (0+255),w,b
  4363  004FE2  0A80               	xorlw	128
  4364  004FE4  0F7F               	addlw	-129
  4365  004FE6  0E00               	movlw	0
  4366  004FE8  B4D8               	btfsc	status,2,c
  4367  004FEA  5D70               	subwf	ldexp@newexp& (0+255),w,b
  4368  004FEC  E30E               	bnc	l11754
  4369                           
  4370                           ; BSR set to: 0
  4371  004FEE  AF6F               	btfss	(ldexp@value+3)& (0+255),7,b
  4372  004FF0  D006               	goto	l11750
  4373                           
  4374                           ; BSR set to: 0
  4375  004FF2  696C               	setf	?_ldexp& (0+255),b
  4376  004FF4  696D               	setf	(?_ldexp+1)& (0+255),b
  4377  004FF6  0E7F               	movlw	127
  4378  004FF8  6F6E               	movwf	(?_ldexp+2)& (0+255),b
  4379  004FFA  0EFF               	movlw	255
  4380  004FFC  D004               	goto	L4
  4381  004FFE                     l11750:
  4382                           
  4383                           ; BSR set to: 0
  4384  004FFE  696C               	setf	?_ldexp& (0+255),b
  4385  005000  696D               	setf	(?_ldexp+1)& (0+255),b
  4386  005002  0E7F               	movlw	127
  4387  005004  6F6E               	movwf	(?_ldexp+2)& (0+255),b
  4388  005006                     L4:
  4389  005006  6F6F               	movwf	(?_ldexp+3)& (0+255),b
  4390  005008  D01C               	goto	l1688
  4391  00500A                     l11754:
  4392                           
  4393                           ; BSR set to: 0
  4394  00500A  3571               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4395  00500C  3171               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4396  00500E  6E44               	movwf	(??_ldexp+1)& (0+255),c
  4397  005010  3170               	rrcf	ldexp@newexp& (0+255),w,b
  4398  005012  6E43               	movwf	??_ldexp& (0+255),c
  4399  005014  196F               	xorwf	(ldexp@value+3)& (0+255),w,b
  4400  005016  0B80               	andlw	-128
  4401  005018  1843               	xorwf	??_ldexp,w,c
  4402  00501A  6F6F               	movwf	(ldexp@value+3)& (0+255),b
  4403  00501C  C070  F043         	movff	ldexp@newexp,??_ldexp
  4404  005020  0E01               	movlw	1
  4405  005022  1643               	andwf	??_ldexp,f,c
  4406  005024  3243               	rrcf	??_ldexp,f,c
  4407  005026  3243               	rrcf	??_ldexp,f,c
  4408  005028  516E               	movf	(ldexp@value+2)& (0+255),w,b
  4409  00502A  1843               	xorwf	??_ldexp,w,c
  4410  00502C  0B7F               	andlw	-129
  4411  00502E  1843               	xorwf	??_ldexp,w,c
  4412  005030  6F6E               	movwf	(ldexp@value+2)& (0+255),b
  4413                           
  4414                           ; BSR set to: 0
  4415  005032  C06C  F06C         	movff	ldexp@value,?_ldexp
  4416  005036  C06D  F06D         	movff	ldexp@value+1,?_ldexp+1
  4417  00503A  C06E  F06E         	movff	ldexp@value+2,?_ldexp+2
  4418  00503E  C06F  F06F         	movff	ldexp@value+3,?_ldexp+3
  4419  005042                     l1688:
  4420                           
  4421                           ; BSR set to: 0
  4422  005042  0012               	return	
  4423  005044                     __end_of_ldexp:
  4424                           	opt stack 0
  4425                           tblptru	equ	0xFF8
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postdec1	equ	0xFE5
  4431                           fsr1h	equ	0xFE2
  4432                           fsr1l	equ	0xFE1
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function _eval_poly *****************
  4441 ;; Defined at:
  4442 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  x               4   58[COMRAM] int 
  4445 ;;  d               1   62[COMRAM] PTR const 
  4446 ;;		 -> log@coeff(36), exp@coeff(40), 
  4447 ;;  n               2   63[COMRAM] int 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  res             4    8[BANK0 ] int 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  4   58[COMRAM] int 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4459 ;;      Params:         7       0       0       0       0       0       0
  4460 ;;      Locals:         0       4       0       0       0       0       0
  4461 ;;      Temps:          1       0       0       0       0       0       0
  4462 ;;      Totals:         8       4       0       0       0       0       0
  4463 ;;Total ram usage:       12 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    4
  4466 ;; This function calls:
  4467 ;;		___fladd
  4468 ;;		___flmul
  4469 ;; This function is called by:
  4470 ;;		_exp
  4471 ;;		_log
  4472 ;; This function uses a non-reentrant model
  4473 ;;
  4474                           
  4475                           	psect	text11
  4476  004A92                     __ptext11:
  4477                           	opt stack 0
  4478  004A92                     _eval_poly:
  4479                           	opt stack 24
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;incstack = 0
  4483                           ;incstack = 0
  4484  004A92  5040               	movf	eval_poly@n,w,c
  4485  004A94  0D04               	mullw	4
  4486  004A96  503F               	movf	eval_poly@d,w,c
  4487  004A98  24F3               	addwf	prodl,w,c
  4488  004A9A  6E42               	movwf	??_eval_poly& (0+255),c
  4489  004A9C  C042  FFF6         	movff	??_eval_poly,tblptrl
  4490  004AA0  0E0B               	movlw	high __smallconst
  4491  004AA2  6EF7               	movwf	tblptrh,c
  4492  004AA4  0009               	tblrd		*+
  4493  004AA6  0100               	movlb	0	; () banked
  4494  004AA8  CFF5 F068          	movff	tablat,eval_poly@res
  4495  004AAC  0009               	tblrd		*+
  4496  004AAE  CFF5 F069          	movff	tablat,eval_poly@res+1
  4497  004AB2  0009               	tblrd		*+
  4498  004AB4  CFF5 F06A          	movff	tablat,eval_poly@res+2
  4499  004AB8  000A               	tblrd		*-
  4500  004ABA  CFF5 F06B          	movff	tablat,eval_poly@res+3
  4501  004ABE  D03D               	goto	l14388
  4502  004AC0                     l14386:
  4503  004AC0  C068  F022         	movff	eval_poly@res,?___flmul+4
  4504  004AC4  C069  F023         	movff	eval_poly@res+1,?___flmul+5
  4505  004AC8  C06A  F024         	movff	eval_poly@res+2,?___flmul+6
  4506  004ACC  C06B  F025         	movff	eval_poly@res+3,?___flmul+7
  4507  004AD0  C03B  F01E         	movff	eval_poly@x,?___flmul
  4508  004AD4  C03C  F01F         	movff	eval_poly@x+1,?___flmul+1
  4509  004AD8  C03D  F020         	movff	eval_poly@x+2,?___flmul+2
  4510  004ADC  C03E  F021         	movff	eval_poly@x+3,?___flmul+3
  4511  004AE0  ECE1  F024         	call	___flmul	;wreg free
  4512  004AE4  C021  F063         	movff	?___flmul+3,?___fladd+3
  4513  004AE8  C020  F062         	movff	?___flmul+2,?___fladd+2
  4514  004AEC  C01F  F061         	movff	?___flmul+1,?___fladd+1
  4515  004AF0  C01E  F060         	movff	?___flmul,?___fladd
  4516  004AF4  0640               	decf	eval_poly@n,f,c
  4517  004AF6  A0D8               	btfss	status,0,c
  4518  004AF8  0641               	decf	eval_poly@n+1,f,c
  4519  004AFA  5040               	movf	eval_poly@n& (0+255),w,c
  4520  004AFC  0D04               	mullw	4
  4521  004AFE  503F               	movf	eval_poly@d,w,c
  4522  004B00  24F3               	addwf	prodl,w,c
  4523  004B02  6E42               	movwf	??_eval_poly& (0+255),c
  4524  004B04  C042  FFF6         	movff	??_eval_poly,tblptrl
  4525  004B08  0E0B               	movlw	high __smallconst
  4526  004B0A  6EF7               	movwf	tblptrh,c
  4527  004B0C  0009               	tblrd		*+
  4528  004B0E  0100               	movlb	0	; () banked
  4529  004B10  CFF5 F064          	movff	tablat,?___fladd+4
  4530  004B14  0009               	tblrd		*+
  4531  004B16  CFF5 F065          	movff	tablat,?___fladd+5
  4532  004B1A  0009               	tblrd		*+
  4533  004B1C  CFF5 F066          	movff	tablat,?___fladd+6
  4534  004B20  000A               	tblrd		*-
  4535  004B22  CFF5 F067          	movff	tablat,?___fladd+7
  4536  004B26  EC09  F020         	call	___fladd	;wreg free
  4537  004B2A  C063  F06B         	movff	?___fladd+3,eval_poly@res+3
  4538  004B2E  C062  F06A         	movff	?___fladd+2,eval_poly@res+2
  4539  004B32  C061  F069         	movff	?___fladd+1,eval_poly@res+1
  4540  004B36  C060  F068         	movff	?___fladd,eval_poly@res
  4541  004B3A                     l14388:
  4542  004B3A  5041               	movf	eval_poly@n+1,w,c
  4543  004B3C  1040               	iorwf	eval_poly@n,w,c
  4544  004B3E  E1C0               	bnz	l14386
  4545  004B40  C068  F03B         	movff	eval_poly@res,?_eval_poly
  4546  004B44  C069  F03C         	movff	eval_poly@res+1,?_eval_poly+1
  4547  004B48  C06A  F03D         	movff	eval_poly@res+2,?_eval_poly+2
  4548  004B4C  C06B  F03E         	movff	eval_poly@res+3,?_eval_poly+3
  4549  004B50  0012               	return	
  4550  004B52                     __end_of_eval_poly:
  4551                           	opt stack 0
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _floor *****************
  4571 ;; Defined at:
  4572 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  x               4   11[BANK0 ] int 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  i               4   15[BANK0 ] int 
  4577 ;;  expon           2   19[BANK0 ] int 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  4   11[BANK0 ] int 
  4580 ;; Registers used:
  4581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4587 ;;      Params:         0       4       0       0       0       0       0
  4588 ;;      Locals:         0       6       0       0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0       0       0
  4590 ;;      Totals:         0      10       0       0       0       0       0
  4591 ;;Total ram usage:       10 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    4
  4594 ;; This function calls:
  4595 ;;		___altofl
  4596 ;;		___fladd
  4597 ;;		___flge
  4598 ;;		_frexp
  4599 ;;		___fltol
  4600 ;; This function is called by:
  4601 ;;		_exp
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text12
  4606  0047D0                     __ptext12:
  4607                           	opt stack 0
  4608  0047D0                     _floor:
  4609                           	opt stack 24
  4610                           
  4611                           ;incstack = 0
  4612                           ;incstack = 0
  4613  0047D0  C06B  F00E         	movff	floor@x,?_frexp
  4614  0047D4  C06C  F00F         	movff	floor@x+1,?_frexp+1
  4615  0047D8  C06D  F010         	movff	floor@x+2,?_frexp+2
  4616  0047DC  C06E  F011         	movff	floor@x+3,?_frexp+3
  4617  0047E0  0100               	movlb	0	; () banked
  4618  0047E2  0E00               	movlw	high floor@expon
  4619  0047E4  6E13               	movwf	?_frexp+5,c
  4620  0047E6  0E73               	movlw	low floor@expon
  4621  0047E8  6E12               	movwf	?_frexp+4,c
  4622  0047EA  EC0B  F029         	call	_frexp	;wreg free
  4623                           
  4624                           ; BSR set to: 0
  4625  0047EE  AF74               	btfss	(floor@expon+1)& (0+255),7,b
  4626  0047F0  D00F               	goto	l14374
  4627                           
  4628                           ; BSR set to: 0
  4629  0047F2  AF6E               	btfss	(floor@x+3)& (0+255),7,b
  4630  0047F4  D008               	goto	l1656
  4631                           
  4632                           ; BSR set to: 0
  4633  0047F6  0E00               	movlw	0
  4634  0047F8  6F6B               	movwf	?_floor& (0+255),b
  4635  0047FA  6F6C               	movwf	(?_floor+1)& (0+255),b
  4636  0047FC  0E80               	movlw	128
  4637  0047FE  6F6D               	movwf	(?_floor+2)& (0+255),b
  4638  004800  0EBF               	movlw	191
  4639  004802  6F6E               	movwf	(?_floor+3)& (0+255),b
  4640  004804  D064               	goto	l1657
  4641  004806                     l1656:
  4642                           
  4643                           ; BSR set to: 0
  4644  004806  6B6B               	clrf	?_floor& (0+255),b
  4645  004808  6B6C               	clrf	(?_floor+1)& (0+255),b
  4646  00480A  6B6D               	clrf	(?_floor+2)& (0+255),b
  4647  00480C  6B6E               	clrf	(?_floor+3)& (0+255),b
  4648  00480E  D05F               	goto	l1657
  4649  004810                     l14374:
  4650                           
  4651                           ; BSR set to: 0
  4652  004810  0E1D               	movlw	29
  4653  004812  5D73               	subwf	floor@expon& (0+255),w,b
  4654  004814  0E00               	movlw	0
  4655  004816  5974               	subwfb	(floor@expon+1)& (0+255),w,b
  4656  004818  E309               	bnc	l14378
  4657                           
  4658                           ; BSR set to: 0
  4659  00481A  C06B  F06B         	movff	floor@x,?_floor
  4660  00481E  C06C  F06C         	movff	floor@x+1,?_floor+1
  4661  004822  C06D  F06D         	movff	floor@x+2,?_floor+2
  4662  004826  C06E  F06E         	movff	floor@x+3,?_floor+3
  4663  00482A  D051               	goto	l1657
  4664  00482C                     l14378:
  4665                           
  4666                           ; BSR set to: 0
  4667  00482C  C06B  F034         	movff	floor@x,?___fltol
  4668  004830  C06C  F035         	movff	floor@x+1,?___fltol+1
  4669  004834  C06D  F036         	movff	floor@x+2,?___fltol+2
  4670  004838  C06E  F037         	movff	floor@x+3,?___fltol+3
  4671  00483C  EC72  F028         	call	___fltol	;wreg free
  4672  004840  C037  F069         	movff	?___fltol+3,?___altofl+3
  4673  004844  C036  F068         	movff	?___fltol+2,?___altofl+2
  4674  004848  C035  F067         	movff	?___fltol+1,?___altofl+1
  4675  00484C  C034  F066         	movff	?___fltol,?___altofl
  4676  004850  EC6B  F02B         	call	___altofl	;wreg free
  4677  004854  C069  F072         	movff	?___altofl+3,floor@i+3
  4678  004858  C068  F071         	movff	?___altofl+2,floor@i+2
  4679  00485C  C067  F070         	movff	?___altofl+1,floor@i+1
  4680  004860  C066  F06F         	movff	?___altofl,floor@i
  4681  004864  C06B  F00E         	movff	floor@x,?___flge
  4682  004868  C06C  F00F         	movff	floor@x+1,?___flge+1
  4683  00486C  C06D  F010         	movff	floor@x+2,?___flge+2
  4684  004870  C06E  F011         	movff	floor@x+3,?___flge+3
  4685  004874  C06F  F012         	movff	floor@i,?___flge+4
  4686  004878  C070  F013         	movff	floor@i+1,?___flge+5
  4687  00487C  C071  F014         	movff	floor@i+2,?___flge+6
  4688  004880  C072  F015         	movff	floor@i+3,?___flge+7
  4689  004884  EC1F  F02B         	call	___flge	;wreg free
  4690  004888  E21A               	bc	l1659
  4691  00488A  C06F  F060         	movff	floor@i,?___fladd
  4692  00488E  C070  F061         	movff	floor@i+1,?___fladd+1
  4693  004892  C071  F062         	movff	floor@i+2,?___fladd+2
  4694  004896  C072  F063         	movff	floor@i+3,?___fladd+3
  4695  00489A  0100               	movlb	0	; () banked
  4696  00489C  6B64               	clrf	(?___fladd+4)& (0+255),b
  4697  00489E  6B65               	clrf	(?___fladd+5)& (0+255),b
  4698  0048A0  0E80               	movlw	128
  4699  0048A2  6F66               	movwf	(?___fladd+6)& (0+255),b
  4700  0048A4  0EBF               	movlw	191
  4701  0048A6  6F67               	movwf	(?___fladd+7)& (0+255),b
  4702  0048A8  EC09  F020         	call	___fladd	;wreg free
  4703  0048AC  C063  F06E         	movff	?___fladd+3,?_floor+3
  4704  0048B0  C062  F06D         	movff	?___fladd+2,?_floor+2
  4705  0048B4  C061  F06C         	movff	?___fladd+1,?_floor+1
  4706  0048B8  C060  F06B         	movff	?___fladd,?_floor
  4707  0048BC  D008               	goto	l1657
  4708  0048BE                     l1659:
  4709  0048BE  C06F  F06B         	movff	floor@i,?_floor
  4710  0048C2  C070  F06C         	movff	floor@i+1,?_floor+1
  4711  0048C6  C071  F06D         	movff	floor@i+2,?_floor+2
  4712  0048CA  C072  F06E         	movff	floor@i+3,?_floor+3
  4713  0048CE                     l1657:
  4714  0048CE  0012               	return	
  4715  0048D0                     __end_of_floor:
  4716                           	opt stack 0
  4717                           tblptru	equ	0xFF8
  4718                           tblptrh	equ	0xFF7
  4719                           tblptrl	equ	0xFF6
  4720                           tablat	equ	0xFF5
  4721                           prodh	equ	0xFF4
  4722                           prodl	equ	0xFF3
  4723                           postinc0	equ	0xFEE
  4724                           wreg	equ	0xFE8
  4725                           postdec1	equ	0xFE5
  4726                           fsr1h	equ	0xFE2
  4727                           fsr1l	equ	0xFE1
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735 ;; *************** function ___fltol *****************
  4736 ;; Defined at:
  4737 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  4738 ;; Parameters:    Size  Location     Type
  4739 ;;  f1              4   51[COMRAM] int 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  exp1            1   60[COMRAM] unsigned char 
  4742 ;;  sign1           1   59[COMRAM] unsigned char 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  4   51[COMRAM] long 
  4745 ;; Registers used:
  4746 ;;		wreg, status,2, status,0
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4752 ;;      Params:         4       0       0       0       0       0       0
  4753 ;;      Locals:         2       0       0       0       0       0       0
  4754 ;;      Temps:          4       0       0       0       0       0       0
  4755 ;;      Totals:        10       0       0       0       0       0       0
  4756 ;;Total ram usage:       10 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    2
  4759 ;; This function calls:
  4760 ;;		Nothing
  4761 ;; This function is called by:
  4762 ;;		_doWork
  4763 ;;		_setEventData
  4764 ;;		_exp
  4765 ;;		_floor
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text13
  4770  0050E4                     __ptext13:
  4771                           	opt stack 0
  4772  0050E4                     ___fltol:
  4773                           	opt stack 27
  4774                           
  4775                           ;incstack = 0
  4776                           ;incstack = 0
  4777  0050E4  3436               	rlcf	(___fltol@f1+2)& (0+255),w,c
  4778  0050E6  3437               	rlcf	(___fltol@f1+3)& (0+255),w,c
  4779  0050E8  6E3D               	movwf	___fltol@exp1,c
  4780  0050EA  663D               	tstfsz	___fltol@exp1& (0+255),c
  4781  0050EC  D005               	goto	l11806
  4782  0050EE                     l11804:
  4783  0050EE  6A34               	clrf	?___fltol,c
  4784  0050F0  6A35               	clrf	?___fltol+1,c
  4785  0050F2  6A36               	clrf	?___fltol+2,c
  4786  0050F4  6A37               	clrf	?___fltol+3,c
  4787  0050F6  D043               	goto	l1668
  4788  0050F8                     l11806:
  4789  0050F8  C034  F038         	movff	___fltol@f1,??___fltol
  4790  0050FC  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  4791  005100  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  4792  005104  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  4793  005108  0E20               	movlw	32
  4794  00510A  D005               	goto	u10290
  4795  00510C                     u10295:
  4796  00510C  90D8               	bcf	status,0,c
  4797  00510E  323B               	rrcf	??___fltol+3,f,c
  4798  005110  323A               	rrcf	??___fltol+2,f,c
  4799  005112  3239               	rrcf	??___fltol+1,f,c
  4800  005114  3238               	rrcf	??___fltol,f,c
  4801  005116                     u10290:
  4802  005116  2EE8               	decfsz	wreg,f,c
  4803  005118  D7F9               	goto	u10295
  4804  00511A  5038               	movf	??___fltol,w,c
  4805  00511C  6E3C               	movwf	___fltol@sign1,c
  4806  00511E  8E36               	bsf	___fltol@f1+2,7,c
  4807  005120  6A37               	clrf	___fltol@f1+3,c
  4808  005122  0E96               	movlw	150
  4809  005124  5E3D               	subwf	___fltol@exp1,f,c
  4810  005126  AE3D               	btfss	___fltol@exp1,7,c
  4811  005128  D00C               	goto	l11824
  4812  00512A  503D               	movf	___fltol@exp1,w,c
  4813  00512C  0A80               	xorlw	128
  4814  00512E  0F97               	addlw	151
  4815  005130  E3DE               	bnc	l11804
  4816  005132                     l11820:
  4817  005132  90D8               	bcf	status,0,c
  4818  005134  3237               	rrcf	___fltol@f1+3,f,c
  4819  005136  3236               	rrcf	___fltol@f1+2,f,c
  4820  005138  3235               	rrcf	___fltol@f1+1,f,c
  4821  00513A  3234               	rrcf	___fltol@f1,f,c
  4822  00513C  3E3D               	incfsz	___fltol@exp1,f,c
  4823  00513E  D7F9               	goto	l11820
  4824  005140  D00C               	goto	l11832
  4825  005142                     l11824:
  4826  005142  0E1F               	movlw	31
  4827  005144  643D               	cpfsgt	___fltol@exp1,c
  4828  005146  D007               	goto	l11830
  4829  005148  D7D2               	goto	l11804
  4830  00514A                     l11828:
  4831  00514A  90D8               	bcf	status,0,c
  4832  00514C  3634               	rlcf	___fltol@f1,f,c
  4833  00514E  3635               	rlcf	___fltol@f1+1,f,c
  4834  005150  3636               	rlcf	___fltol@f1+2,f,c
  4835  005152  3637               	rlcf	___fltol@f1+3,f,c
  4836  005154  063D               	decf	___fltol@exp1,f,c
  4837  005156                     l11830:
  4838  005156  663D               	tstfsz	___fltol@exp1,c
  4839  005158  D7F8               	goto	l11828
  4840  00515A                     l11832:
  4841  00515A  503C               	movf	___fltol@sign1,w,c
  4842  00515C  E008               	bz	l11836
  4843  00515E  1E37               	comf	___fltol@f1+3,f,c
  4844  005160  1E36               	comf	___fltol@f1+2,f,c
  4845  005162  1E35               	comf	___fltol@f1+1,f,c
  4846  005164  6C34               	negf	___fltol@f1,c
  4847  005166  0E00               	movlw	0
  4848  005168  2235               	addwfc	___fltol@f1+1,f,c
  4849  00516A  2236               	addwfc	___fltol@f1+2,f,c
  4850  00516C  2237               	addwfc	___fltol@f1+3,f,c
  4851  00516E                     l11836:
  4852  00516E  C034  F034         	movff	___fltol@f1,?___fltol
  4853  005172  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  4854  005176  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  4855  00517A  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  4856  00517E                     l1668:
  4857  00517E  0012               	return	
  4858  005180                     __end_of___fltol:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           postinc0	equ	0xFEE
  4867                           wreg	equ	0xFE8
  4868                           postdec1	equ	0xFE5
  4869                           fsr1h	equ	0xFE2
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           postinc2	equ	0xFDE
  4873                           postdec2	equ	0xFDD
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function _frexp *****************
  4879 ;; Defined at:
  4880 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  value           4   13[COMRAM] long 
  4883 ;;  eptr            2   17[COMRAM] PTR int 
  4884 ;;		 -> log@exponent(2), floor@expon(2), 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  4   13[COMRAM] PTR int 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4891 ;; Tracked objects:
  4892 ;;		On entry : F/0
  4893 ;;		On exit  : F/0
  4894 ;;		Unchanged: F/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4896 ;;      Params:         6       0       0       0       0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0       0
  4898 ;;      Temps:          3       0       0       0       0       0       0
  4899 ;;      Totals:         9       0       0       0       0       0       0
  4900 ;;Total ram usage:        9 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    2
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_floor
  4907 ;;		_log
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text14
  4912  005216                     __ptext14:
  4913                           	opt stack 0
  4914  005216                     _frexp:
  4915                           	opt stack 26
  4916                           
  4917                           ; BSR set to: 0
  4918                           
  4919                           ;incstack = 0
  4920                           ;incstack = 0
  4921  005216  EE20  F00E         	lfsr	2,frexp@value
  4922  00521A  50DE               	movf	postinc2,w,c
  4923  00521C  10DE               	iorwf	postinc2,w,c
  4924  00521E  10DE               	iorwf	postinc2,w,c
  4925  005220  10DE               	iorwf	postinc2,w,c
  4926  005222  E10C               	bnz	l11790
  4927                           
  4928                           ; BSR set to: 0
  4929  005224  C012  FFD9         	movff	frexp@eptr,fsr2l
  4930  005228  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4931  00522C  0E00               	movlw	0
  4932  00522E  6ADE               	clrf	postinc2,c
  4933  005230  6ADD               	clrf	postdec2,c
  4934                           
  4935                           ; BSR set to: 0
  4936  005232  6A0E               	clrf	?_frexp,c
  4937  005234  6A0F               	clrf	?_frexp+1,c
  4938  005236  6A10               	clrf	?_frexp+2,c
  4939  005238  6A11               	clrf	?_frexp+3,c
  4940  00523A  D02F               	goto	l1684
  4941  00523C                     l11790:
  4942                           
  4943                           ; BSR set to: 0
  4944  00523C  5011               	movf	frexp@value+3,w,c
  4945  00523E  0B7F               	andlw	127
  4946  005240  6E14               	movwf	??_frexp& (0+255),c
  4947  005242  90D8               	bcf	status,0,c
  4948  005244  3414               	rlcf	??_frexp,w,c
  4949  005246  6E15               	movwf	(??_frexp+1)& (0+255),c
  4950  005248  6A16               	clrf	(??_frexp+2)& (0+255),c
  4951  00524A  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4952  00524C  C012  FFD9         	movff	frexp@eptr,fsr2l
  4953  005250  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4954  005254  C015  FFDE         	movff	??_frexp+1,postinc2
  4955  005258  C016  FFDD         	movff	??_frexp+2,postdec2
  4956  00525C  3410               	rlcf	frexp@value+2,w,c
  4957  00525E  36E8               	rlcf	wreg,f,c
  4958  005260  0B01               	andlw	1
  4959  005262  C012  FFD9         	movff	frexp@eptr,fsr2l
  4960  005266  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4961  00526A  12DE               	iorwf	postinc2,f,c
  4962  00526C  0E00               	movlw	0
  4963  00526E  12DD               	iorwf	postdec2,f,c
  4964                           
  4965                           ; BSR set to: 0
  4966  005270  C012  FFD9         	movff	frexp@eptr,fsr2l
  4967  005274  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4968  005278  0E82               	movlw	130
  4969  00527A  26DE               	addwf	postinc2,f,c
  4970  00527C  0EFF               	movlw	255
  4971  00527E  22DD               	addwfc	postdec2,f,c
  4972                           
  4973                           ; BSR set to: 0
  4974  005280  5011               	movf	frexp@value+3,w,c
  4975  005282  0B80               	andlw	-128
  4976  005284  093F               	iorlw	63
  4977  005286  6E11               	movwf	frexp@value+3,c
  4978                           
  4979                           ; BSR set to: 0
  4980  005288  9E10               	bcf	frexp@value+2,7,c
  4981                           
  4982                           ; BSR set to: 0
  4983  00528A  C00E  F00E         	movff	frexp@value,?_frexp
  4984  00528E  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4985  005292  C010  F010         	movff	frexp@value+2,?_frexp+2
  4986  005296  C011  F011         	movff	frexp@value+3,?_frexp+3
  4987  00529A                     l1684:
  4988                           
  4989                           ; BSR set to: 0
  4990  00529A  0012               	return	
  4991  00529C                     __end_of_frexp:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           postinc0	equ	0xFEE
  5000                           wreg	equ	0xFE8
  5001                           postdec1	equ	0xFE5
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011 ;; *************** function ___flge *****************
  5012 ;; Defined at:
  5013 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;  ff1             4   13[COMRAM] PTR int 
  5016 ;;  ff2             4   17[COMRAM] PTR int 
  5017 ;; Auto vars:     Size  Location     Type
  5018 ;;		None
  5019 ;; Return value:  Size  Location     Type
  5020 ;;		None               void
  5021 ;; Registers used:
  5022 ;;		wreg, status,2, status,0
  5023 ;; Tracked objects:
  5024 ;;		On entry : 0/0
  5025 ;;		On exit  : 0/0
  5026 ;;		Unchanged: 0/0
  5027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5028 ;;      Params:         8       0       0       0       0       0       0
  5029 ;;      Locals:         0       0       0       0       0       0       0
  5030 ;;      Temps:          0       0       0       0       0       0       0
  5031 ;;      Totals:         8       0       0       0       0       0       0
  5032 ;;Total ram usage:        8 bytes
  5033 ;; Hardware stack levels used:    1
  5034 ;; Hardware stack levels required when called:    2
  5035 ;; This function calls:
  5036 ;;		Nothing
  5037 ;; This function is called by:
  5038 ;;		_exp
  5039 ;;		_floor
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text15
  5044  00563E                     __ptext15:
  5045                           	opt stack 0
  5046  00563E                     ___flge:
  5047                           	opt stack 26
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;incstack = 0
  5051                           ;incstack = 0
  5052  00563E  AE11               	btfss	___flge@ff1+3,7,c
  5053  005640  D009               	goto	l11764
  5054  005642  6C0E               	negf	___flge@ff1,c
  5055  005644  1E0F               	comf	___flge@ff1+1,f,c
  5056  005646  B0D8               	btfsc	status,0,c
  5057  005648  2A0F               	incf	___flge@ff1+1,f,c
  5058  00564A  1E10               	comf	___flge@ff1+2,f,c
  5059  00564C  B0D8               	btfsc	status,0,c
  5060  00564E  2A10               	incf	___flge@ff1+2,f,c
  5061  005650  0E80               	movlw	128
  5062  005652  5611               	subfwb	___flge@ff1+3,f,c
  5063  005654                     l11764:
  5064  005654  AE15               	btfss	___flge@ff2+3,7,c
  5065  005656  D009               	goto	l1615
  5066  005658  6C12               	negf	___flge@ff2,c
  5067  00565A  1E13               	comf	___flge@ff2+1,f,c
  5068  00565C  B0D8               	btfsc	status,0,c
  5069  00565E  2A13               	incf	___flge@ff2+1,f,c
  5070  005660  1E14               	comf	___flge@ff2+2,f,c
  5071  005662  B0D8               	btfsc	status,0,c
  5072  005664  2A14               	incf	___flge@ff2+2,f,c
  5073  005666  0E80               	movlw	128
  5074  005668  5615               	subfwb	___flge@ff2+3,f,c
  5075  00566A                     l1615:
  5076  00566A  0E80               	movlw	128
  5077  00566C  1A11               	xorwf	___flge@ff1+3,f,c
  5078  00566E  1A15               	xorwf	___flge@ff2+3,f,c
  5079  005670  5012               	movf	___flge@ff2,w,c
  5080  005672  5C0E               	subwf	___flge@ff1,w,c
  5081  005674  5013               	movf	___flge@ff2+1,w,c
  5082  005676  580F               	subwfb	___flge@ff1+1,w,c
  5083  005678  5014               	movf	___flge@ff2+2,w,c
  5084  00567A  5810               	subwfb	___flge@ff1+2,w,c
  5085  00567C  5015               	movf	___flge@ff2+3,w,c
  5086  00567E  5811               	subwfb	___flge@ff1+3,w,c
  5087  005680  E202               	bc	l11770
  5088  005682  90D8               	bcf	status,0,c
  5089  005684  D001               	goto	l1616
  5090  005686                     l11770:
  5091  005686  80D8               	bsf	status,0,c
  5092  005688                     l1616:
  5093  005688  0012               	return	
  5094  00568A                     __end_of___flge:
  5095                           	opt stack 0
  5096                           tblptru	equ	0xFF8
  5097                           tblptrh	equ	0xFF7
  5098                           tblptrl	equ	0xFF6
  5099                           tablat	equ	0xFF5
  5100                           prodh	equ	0xFF4
  5101                           prodl	equ	0xFF3
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           postdec1	equ	0xFE5
  5105                           fsr1h	equ	0xFE2
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___altofl *****************
  5115 ;; Defined at:
  5116 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  c               4    6[BANK0 ] long 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  sign            1   10[BANK0 ] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;                  4    6[BANK0 ] unsigned char 
  5123 ;; Registers used:
  5124 ;;		wreg, status,2, status,0, cstack
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5130 ;;      Params:         0       4       0       0       0       0       0
  5131 ;;      Locals:         0       1       0       0       0       0       0
  5132 ;;      Temps:          0       0       0       0       0       0       0
  5133 ;;      Totals:         0       5       0       0       0       0       0
  5134 ;;Total ram usage:        5 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:    3
  5137 ;; This function calls:
  5138 ;;		___flpack
  5139 ;; This function is called by:
  5140 ;;		_doWork
  5141 ;;		_floor
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text16
  5146  0056D6                     __ptext16:
  5147                           	opt stack 0
  5148  0056D6                     ___altofl:
  5149                           	opt stack 26
  5150                           
  5151                           ;incstack = 0
  5152                           ;incstack = 0
  5153  0056D6  0100               	movlb	0	; () banked
  5154  0056D8  6B6A               	clrf	___altofl@sign& (0+255),b
  5155  0056DA  AF69               	btfss	(___altofl@c+3)& (0+255),7,b
  5156  0056DC  D00A               	goto	l14180
  5157                           
  5158                           ; BSR set to: 0
  5159  0056DE  1F69               	comf	(___altofl@c+3)& (0+255),f,b
  5160  0056E0  1F68               	comf	(___altofl@c+2)& (0+255),f,b
  5161  0056E2  1F67               	comf	(___altofl@c+1)& (0+255),f,b
  5162  0056E4  6D66               	negf	___altofl@c& (0+255),b
  5163  0056E6  0E00               	movlw	0
  5164  0056E8  2367               	addwfc	(___altofl@c+1)& (0+255),f,b
  5165  0056EA  2368               	addwfc	(___altofl@c+2)& (0+255),f,b
  5166  0056EC  2369               	addwfc	(___altofl@c+3)& (0+255),f,b
  5167                           
  5168                           ; BSR set to: 0
  5169  0056EE  0E01               	movlw	1
  5170  0056F0  6F6A               	movwf	___altofl@sign& (0+255),b
  5171  0056F2                     l14180:
  5172                           
  5173                           ; BSR set to: 0
  5174  0056F2  C066  F00E         	movff	___altofl@c,?___flpack
  5175  0056F6  C067  F00F         	movff	___altofl@c+1,?___flpack+1
  5176  0056FA  C068  F010         	movff	___altofl@c+2,?___flpack+2
  5177  0056FE  C069  F011         	movff	___altofl@c+3,?___flpack+3
  5178  005702  0E96               	movlw	150
  5179  005704  6E12               	movwf	?___flpack+4,c
  5180  005706  C06A  F013         	movff	___altofl@sign,?___flpack+5
  5181  00570A  ECA9  F025         	call	___flpack	;wreg free
  5182  00570E  C011  F069         	movff	?___flpack+3,?___altofl+3
  5183  005712  C010  F068         	movff	?___flpack+2,?___altofl+2
  5184  005716  C00F  F067         	movff	?___flpack+1,?___altofl+1
  5185  00571A  C00E  F066         	movff	?___flpack,?___altofl
  5186  00571E  0012               	return	
  5187  005720                     __end_of___altofl:
  5188                           	opt stack 0
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           postdec1	equ	0xFE5
  5198                           fsr1h	equ	0xFE2
  5199                           fsr1l	equ	0xFE1
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function ___asflsub *****************
  5208 ;; Defined at:
  5209 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  f1p             2   58[COMRAM] PTR 
  5212 ;;		 -> exp@x(4), doWork@temp(4), 
  5213 ;;  f2              4   60[COMRAM] PTR 
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;		None
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  4   58[COMRAM] PTR 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/1
  5222 ;;		On exit  : F/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5225 ;;      Params:         6       0       0       0       0       0       0
  5226 ;;      Locals:         0       0       0       0       0       0       0
  5227 ;;      Temps:          0       0       0       0       0       0       0
  5228 ;;      Totals:         6       0       0       0       0       0       0
  5229 ;;Total ram usage:        6 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    5
  5232 ;; This function calls:
  5233 ;;		___flsub
  5234 ;; This function is called by:
  5235 ;;		_doWork
  5236 ;;		_exp
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text17
  5241  0055A4                     __ptext17:
  5242                           	opt stack 0
  5243  0055A4                     ___asflsub:
  5244                           	opt stack 24
  5245                           
  5246                           ;	Return value of ___asflsub is never used
  5247                           
  5248                           ;incstack = 0
  5249                           ;incstack = 0
  5250  0055A4  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  5251  0055A8  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5252  0055AC  0100               	movlb	0	; () banked
  5253  0055AE  CFDE F068          	movff	postinc2,?___flsub
  5254  0055B2  CFDE F069          	movff	postinc2,?___flsub+1
  5255  0055B6  CFDE F06A          	movff	postinc2,?___flsub+2
  5256  0055BA  CFDE F06B          	movff	postinc2,?___flsub+3
  5257  0055BE  C03D  F06C         	movff	___asflsub@f2,?___flsub+4
  5258  0055C2  C03E  F06D         	movff	___asflsub@f2+1,?___flsub+5
  5259  0055C6  C03F  F06E         	movff	___asflsub@f2+2,?___flsub+6
  5260  0055CA  C040  F06F         	movff	___asflsub@f2+3,?___flsub+7
  5261  0055CE  EC5C  F02C         	call	___flsub	;wreg free
  5262  0055D2  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  5263  0055D6  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  5264  0055DA  0100               	movlb	0	; () banked
  5265  0055DC  C068  FFDE         	movff	?___flsub,postinc2
  5266  0055E0  C069  FFDE         	movff	?___flsub+1,postinc2
  5267  0055E4  C06A  FFDE         	movff	?___flsub+2,postinc2
  5268  0055E8  C06B  FFDD         	movff	?___flsub+3,postdec2
  5269  0055EC  06D9               	decf	fsr2l,f,c
  5270  0055EE  06D9               	decf	fsr2l,f,c
  5271                           
  5272                           ; BSR set to: 0
  5273  0055F0  0012               	return	
  5274  0055F2                     __end_of___asflsub:
  5275                           	opt stack 0
  5276                           tblptru	equ	0xFF8
  5277                           tblptrh	equ	0xFF7
  5278                           tblptrl	equ	0xFF6
  5279                           tablat	equ	0xFF5
  5280                           prodh	equ	0xFF4
  5281                           prodl	equ	0xFF3
  5282                           postinc0	equ	0xFEE
  5283                           wreg	equ	0xFE8
  5284                           postdec1	equ	0xFE5
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function ___flsub *****************
  5295 ;; Defined at:
  5296 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  f1              4    8[BANK0 ] PTR 
  5299 ;;  f2              4   12[BANK0 ] PTR 
  5300 ;; Auto vars:     Size  Location     Type
  5301 ;;		None
  5302 ;; Return value:  Size  Location     Type
  5303 ;;                  4    8[BANK0 ] PTR 
  5304 ;; Registers used:
  5305 ;;		wreg, status,2, status,0, cstack
  5306 ;; Tracked objects:
  5307 ;;		On entry : 0/1
  5308 ;;		On exit  : 0/0
  5309 ;;		Unchanged: 0/0
  5310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5311 ;;      Params:         0       8       0       0       0       0       0
  5312 ;;      Locals:         0       0       0       0       0       0       0
  5313 ;;      Temps:          0       0       0       0       0       0       0
  5314 ;;      Totals:         0       8       0       0       0       0       0
  5315 ;;Total ram usage:        8 bytes
  5316 ;; Hardware stack levels used:    1
  5317 ;; Hardware stack levels required when called:    4
  5318 ;; This function calls:
  5319 ;;		___fladd
  5320 ;; This function is called by:
  5321 ;;		_doWork
  5322 ;;		___asflsub
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text18
  5327  0058B8                     __ptext18:
  5328                           	opt stack 0
  5329  0058B8                     ___flsub:
  5330                           	opt stack 25
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;incstack = 0
  5334                           ;incstack = 0
  5335  0058B8  0100               	movlb	0	; () banked
  5336  0058BA  0E80               	movlw	128
  5337  0058BC  1B6F               	xorwf	(___flsub@f2+3)& (0+255),f,b
  5338                           
  5339                           ; BSR set to: 0
  5340  0058BE  C068  F060         	movff	___flsub@f1,?___fladd
  5341  0058C2  C069  F061         	movff	___flsub@f1+1,?___fladd+1
  5342  0058C6  C06A  F062         	movff	___flsub@f1+2,?___fladd+2
  5343  0058CA  C06B  F063         	movff	___flsub@f1+3,?___fladd+3
  5344  0058CE  C06C  F064         	movff	___flsub@f2,?___fladd+4
  5345  0058D2  C06D  F065         	movff	___flsub@f2+1,?___fladd+5
  5346  0058D6  C06E  F066         	movff	___flsub@f2+2,?___fladd+6
  5347  0058DA  C06F  F067         	movff	___flsub@f2+3,?___fladd+7
  5348  0058DE  EC09  F020         	call	___fladd	;wreg free
  5349  0058E2  C063  F06B         	movff	?___fladd+3,?___flsub+3
  5350  0058E6  C062  F06A         	movff	?___fladd+2,?___flsub+2
  5351  0058EA  C061  F069         	movff	?___fladd+1,?___flsub+1
  5352  0058EE  C060  F068         	movff	?___fladd,?___flsub
  5353  0058F2  0012               	return	
  5354  0058F4                     __end_of___flsub:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           postdec1	equ	0xFE5
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           fsr2h	equ	0xFDA
  5371                           fsr2l	equ	0xFD9
  5372                           status	equ	0xFD8
  5373                           
  5374 ;; *************** function ___asflmul *****************
  5375 ;; Defined at:
  5376 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  mp              1    wreg     PTR 
  5379 ;;		 -> exp@x(4), 
  5380 ;;  multiplicand    4   51[COMRAM] PTR 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  mp              1   55[COMRAM] PTR 
  5383 ;;		 -> exp@x(4), 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  4   51[COMRAM] PTR 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : F/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5393 ;;      Params:         4       0       0       0       0       0       0
  5394 ;;      Locals:         1       0       0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0       0       0
  5396 ;;      Totals:         5       0       0       0       0       0       0
  5397 ;;Total ram usage:        5 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    4
  5400 ;; This function calls:
  5401 ;;		___flmul
  5402 ;; This function is called by:
  5403 ;;		_exp
  5404 ;; This function uses a non-reentrant model
  5405 ;;
  5406                           
  5407                           	psect	text19
  5408  005720                     __ptext19:
  5409                           	opt stack 0
  5410  005720                     ___asflmul:
  5411                           	opt stack 24
  5412                           
  5413                           ;incstack = 0
  5414                           ;incstack = 0
  5415                           ;___asflmul@mp stored from wreg
  5416  005720  CFE8 F038          	movff	wreg,___asflmul@mp
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;	Return value of ___asflmul is never used
  5420  005724  5038               	movf	___asflmul@mp,w,c
  5421  005726  6ED9               	movwf	fsr2l,c
  5422  005728  6ADA               	clrf	fsr2h,c
  5423  00572A  CFDE F01E          	movff	postinc2,?___flmul
  5424  00572E  CFDE F01F          	movff	postinc2,?___flmul+1
  5425  005732  CFDE F020          	movff	postinc2,?___flmul+2
  5426  005736  CFDE F021          	movff	postinc2,?___flmul+3
  5427  00573A  C034  F022         	movff	___asflmul@multiplicand,?___flmul+4
  5428  00573E  C035  F023         	movff	___asflmul@multiplicand+1,?___flmul+5
  5429  005742  C036  F024         	movff	___asflmul@multiplicand+2,?___flmul+6
  5430  005746  C037  F025         	movff	___asflmul@multiplicand+3,?___flmul+7
  5431  00574A  ECE1  F024         	call	___flmul	;wreg free
  5432  00574E  5038               	movf	___asflmul@mp,w,c
  5433  005750  6ED9               	movwf	fsr2l,c
  5434  005752  6ADA               	clrf	fsr2h,c
  5435  005754  C01E  FFDE         	movff	?___flmul,postinc2
  5436  005758  C01F  FFDE         	movff	?___flmul+1,postinc2
  5437  00575C  C020  FFDE         	movff	?___flmul+2,postinc2
  5438  005760  C021  FFDD         	movff	?___flmul+3,postdec2
  5439  005764  06D9               	decf	fsr2l,f,c
  5440  005766  06D9               	decf	fsr2l,f,c
  5441  005768  0012               	return	
  5442  00576A                     __end_of___asflmul:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           postinc0	equ	0xFEE
  5451                           wreg	equ	0xFE8
  5452                           postdec1	equ	0xFE5
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           fsr2h	equ	0xFDA
  5459                           fsr2l	equ	0xFD9
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function ___fldiv *****************
  5463 ;; Defined at:
  5464 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;  f1              4   16[BANK0 ] PTR 
  5467 ;;  f2              4   20[BANK0 ] PTR 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;  f3              4   32[BANK0 ] PTR 
  5470 ;;  sign            1   37[BANK0 ] unsigned char 
  5471 ;;  exp             1   36[BANK0 ] unsigned char 
  5472 ;;  cntr            1   31[BANK0 ] unsigned char 
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  4   16[BANK0 ] unsigned char 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5482 ;;      Params:         0       8       0       0       0       0       0
  5483 ;;      Locals:         0      14       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0
  5485 ;;      Totals:         0      22       0       0       0       0       0
  5486 ;;Total ram usage:       22 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    3
  5489 ;; This function calls:
  5490 ;;		___flpack
  5491 ;; This function is called by:
  5492 ;;		_doWork
  5493 ;;		_Celsius2Fahrenheit
  5494 ;;		___asfldiv
  5495 ;;		_exp
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text20
  5500  004EF0                     __ptext20:
  5501                           	opt stack 0
  5502  004EF0                     ___fldiv:
  5503                           	opt stack 26
  5504                           
  5505                           ;incstack = 0
  5506                           ;incstack = 0
  5507  004EF0  0100               	movlb	0	; () banked
  5508  004EF2  3572               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  5509  004EF4  3573               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  5510  004EF6  6F84               	movwf	___fldiv@exp& (0+255),b
  5511  004EF8  6784               	tstfsz	___fldiv@exp& (0+255),b
  5512  004EFA  D001               	goto	l14264
  5513  004EFC  D006               	goto	u13710
  5514  004EFE                     l14264:
  5515                           
  5516                           ; BSR set to: 0
  5517  004EFE  0100               	movlb	0	; () banked
  5518  004F00  3576               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  5519  004F02  3577               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  5520  004F04  6F85               	movwf	___fldiv@sign& (0+255),b
  5521  004F06  6785               	tstfsz	___fldiv@sign& (0+255),b
  5522  004F08  D005               	goto	l14268
  5523  004F0A                     u13710:
  5524                           
  5525                           ; BSR set to: 0
  5526  004F0A  6B70               	clrf	?___fldiv& (0+255),b
  5527  004F0C  6B71               	clrf	(?___fldiv+1)& (0+255),b
  5528  004F0E  6B72               	clrf	(?___fldiv+2)& (0+255),b
  5529  004F10  6B73               	clrf	(?___fldiv+3)& (0+255),b
  5530  004F12  D044               	goto	l1607
  5531  004F14                     l14268:
  5532                           
  5533                           ; BSR set to: 0
  5534  004F14  5185               	movf	___fldiv@sign& (0+255),w,b
  5535  004F16  0F89               	addlw	137
  5536  004F18  5F84               	subwf	___fldiv@exp& (0+255),f,b
  5537                           
  5538                           ; BSR set to: 0
  5539  004F1A  C073  F085         	movff	___fldiv@f1+3,___fldiv@sign
  5540  004F1E  0100               	movlb	0	; () banked
  5541  004F20  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  5542  004F22  1B85               	xorwf	___fldiv@sign& (0+255),f,b
  5543  004F24  0E80               	movlw	128
  5544  004F26  1785               	andwf	___fldiv@sign& (0+255),f,b
  5545                           
  5546                           ; BSR set to: 0
  5547  004F28  8F72               	bsf	(___fldiv@f1+2)& (0+255),7,b
  5548                           
  5549                           ; BSR set to: 0
  5550  004F2A  6B73               	clrf	(___fldiv@f1+3)& (0+255),b
  5551  004F2C  8F76               	bsf	(___fldiv@f2+2)& (0+255),7,b
  5552                           
  5553                           ; BSR set to: 0
  5554  004F2E  6B77               	clrf	(___fldiv@f2+3)& (0+255),b
  5555                           
  5556                           ; BSR set to: 0
  5557  004F30  0E20               	movlw	32
  5558  004F32  6F7F               	movwf	___fldiv@cntr& (0+255),b
  5559  004F34                     l14280:
  5560                           
  5561                           ; BSR set to: 0
  5562  004F34  90D8               	bcf	status,0,c
  5563  004F36  3780               	rlcf	___fldiv@f3& (0+255),f,b
  5564  004F38  3781               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  5565  004F3A  3782               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  5566  004F3C  3783               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  5567                           
  5568                           ; BSR set to: 0
  5569  004F3E  5174               	movf	___fldiv@f2& (0+255),w,b
  5570  004F40  5D70               	subwf	___fldiv@f1& (0+255),w,b
  5571  004F42  5175               	movf	(___fldiv@f2+1)& (0+255),w,b
  5572  004F44  5971               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  5573  004F46  5176               	movf	(___fldiv@f2+2)& (0+255),w,b
  5574  004F48  5972               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  5575  004F4A  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  5576  004F4C  5973               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  5577  004F4E  E309               	bnc	l14288
  5578                           
  5579                           ; BSR set to: 0
  5580  004F50  5174               	movf	___fldiv@f2& (0+255),w,b
  5581  004F52  5F70               	subwf	___fldiv@f1& (0+255),f,b
  5582  004F54  5175               	movf	(___fldiv@f2+1)& (0+255),w,b
  5583  004F56  5B71               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  5584  004F58  5176               	movf	(___fldiv@f2+2)& (0+255),w,b
  5585  004F5A  5B72               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  5586  004F5C  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  5587  004F5E  5B73               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  5588                           
  5589                           ; BSR set to: 0
  5590  004F60  8180               	bsf	___fldiv@f3& (0+255),0,b
  5591  004F62                     l14288:
  5592                           
  5593                           ; BSR set to: 0
  5594  004F62  90D8               	bcf	status,0,c
  5595  004F64  3770               	rlcf	___fldiv@f1& (0+255),f,b
  5596  004F66  3771               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  5597  004F68  3772               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  5598  004F6A  3773               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  5599                           
  5600                           ; BSR set to: 0
  5601  004F6C  2F7F               	decfsz	___fldiv@cntr& (0+255),f,b
  5602  004F6E  D7E2               	goto	l14280
  5603                           
  5604                           ; BSR set to: 0
  5605  004F70  C080  F00E         	movff	___fldiv@f3,?___flpack
  5606  004F74  C081  F00F         	movff	___fldiv@f3+1,?___flpack+1
  5607  004F78  C082  F010         	movff	___fldiv@f3+2,?___flpack+2
  5608  004F7C  C083  F011         	movff	___fldiv@f3+3,?___flpack+3
  5609  004F80  C084  F012         	movff	___fldiv@exp,?___flpack+4
  5610  004F84  C085  F013         	movff	___fldiv@sign,?___flpack+5
  5611  004F88  ECA9  F025         	call	___flpack	;wreg free
  5612  004F8C  C011  F073         	movff	?___flpack+3,?___fldiv+3
  5613  004F90  C010  F072         	movff	?___flpack+2,?___fldiv+2
  5614  004F94  C00F  F071         	movff	?___flpack+1,?___fldiv+1
  5615  004F98  C00E  F070         	movff	?___flpack,?___fldiv
  5616  004F9C                     l1607:
  5617  004F9C  0012               	return	
  5618  004F9E                     __end_of___fldiv:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           postinc0	equ	0xFEE
  5627                           wreg	equ	0xFE8
  5628                           postdec1	equ	0xFE5
  5629                           fsr1h	equ	0xFE2
  5630                           fsr1l	equ	0xFE1
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _vscp_doOneSecondWork *****************
  5639 ;; Defined at:
  5640 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;		None
  5643 ;; Auto vars:     Size  Location     Type
  5644 ;;		None
  5645 ;; Return value:  Size  Location     Type
  5646 ;;		None               void
  5647 ;; Registers used:
  5648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5649 ;; Tracked objects:
  5650 ;;		On entry : F/0
  5651 ;;		On exit  : F/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5654 ;;      Params:         0       0       0       0       0       0       0
  5655 ;;      Locals:         0       0       0       0       0       0       0
  5656 ;;      Temps:          0       1       0       0       0       0       0
  5657 ;;      Totals:         0       1       0       0       0       0       0
  5658 ;;Total ram usage:        1 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; Hardware stack levels required when called:    8
  5661 ;; This function calls:
  5662 ;;		_vscp_getZone
  5663 ;;		_vscp_getSubzone
  5664 ;;		_vscp_sendHeartBeat
  5665 ;; This function is called by:
  5666 ;;		_main
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text21
  5671  00568A                     __ptext21:
  5672                           	opt stack 0
  5673  00568A                     _vscp_doOneSecondWork:
  5674                           	opt stack 22
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;vscp_firmware.c: 526: ++vscp_second;
  5678                           
  5679                           ;incstack = 0
  5680                           ;incstack = 0
  5681  00568A  2A51               	incf	_vscp_second,f,c
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  5685  00568C  0E3B               	movlw	59
  5686  00568E  6451               	cpfsgt	_vscp_second,c
  5687  005690  D00C               	goto	l10232
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;vscp_firmware.c: 529: vscp_second = 0;
  5691  005692  6A51               	clrf	_vscp_second,c
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;vscp_firmware.c: 530: vscp_minute++;
  5695  005694  2A4D               	incf	_vscp_minute,f,c
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  5699  005696  51C0               	movf	_vscp_node_state& (0+255),w,b
  5700  005698  0A03               	xorlw	3
  5701  00569A  E107               	bnz	l10232
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  5705                           ;vscp_firmware.c: 535: vscp_getSubzone());
  5706  00569C  ECDF  F02E         	call	_vscp_getSubzone	;wreg free
  5707  0056A0  6E44               	movwf	?_vscp_sendHeartBeat,c
  5708  0056A2  ECE4  F02E         	call	_vscp_getZone	;wreg free
  5709  0056A6  EC98  F02D         	call	_vscp_sendHeartBeat
  5710  0056AA                     l10232:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;vscp_firmware.c: 536: }
  5714                           ;vscp_firmware.c: 537: }
  5715                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  5716  0056AA  0E3B               	movlw	59
  5717  0056AC  644D               	cpfsgt	_vscp_minute,c
  5718  0056AE  D002               	goto	l10238
  5719                           
  5720                           ; BSR set to: 0
  5721                           ;vscp_firmware.c: 540: vscp_minute = 0;
  5722  0056B0  6A4D               	clrf	_vscp_minute,c
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;vscp_firmware.c: 541: vscp_hour++;
  5726  0056B2  2BBD               	incf	_vscp_hour& (0+255),f,b
  5727  0056B4                     l10238:
  5728                           
  5729                           ; BSR set to: 0
  5730                           ;vscp_firmware.c: 542: }
  5731                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  5732  0056B4  0E17               	movlw	23
  5733  0056B6  65BD               	cpfsgt	_vscp_hour& (0+255),b
  5734  0056B8  D001               	goto	l10242
  5735                           
  5736                           ; BSR set to: 0
  5737  0056BA  6BBD               	clrf	_vscp_hour& (0+255),b
  5738  0056BC                     l10242:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  5742  0056BC  51C0               	movf	_vscp_node_state& (0+255),w,b
  5743  0056BE  0A03               	xorlw	3
  5744  0056C0  E109               	bnz	l1103
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  5748  0056C2  2A4B               	incf	_vscp_guid_reset,f,c
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  5752  0056C4  C04B  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  5753  0056C8  0E0F               	movlw	15
  5754  0056CA  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  5755  0056CC  0E02               	movlw	2
  5756  0056CE  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  5757  0056D0  B0D8               	btfsc	status,0,c
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  5761  0056D2  6A4B               	clrf	_vscp_guid_reset,c
  5762  0056D4                     l1103:
  5763                           
  5764                           ; BSR set to: 0
  5765  0056D4  0012               	return	
  5766  0056D6                     __end_of_vscp_doOneSecondWork:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           postdec1	equ	0xFE5
  5777                           fsr1h	equ	0xFE2
  5778                           fsr1l	equ	0xFE1
  5779                           indf2	equ	0xFDF
  5780                           postinc2	equ	0xFDE
  5781                           postdec2	equ	0xFDD
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _vscp_sendHeartBeat *****************
  5787 ;; Defined at:
  5788 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  zone            1    wreg     unsigned char 
  5791 ;;  subzone         1   67[COMRAM] unsigned char 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  zone            1   68[COMRAM] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;		None               void
  5796 ;; Registers used:
  5797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : F/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5803 ;;      Params:         1       0       0       0       0       0       0
  5804 ;;      Locals:         1       0       0       0       0       0       0
  5805 ;;      Temps:          0       0       0       0       0       0       0
  5806 ;;      Totals:         2       0       0       0       0       0       0
  5807 ;;Total ram usage:        2 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    7
  5810 ;; This function calls:
  5811 ;;		_vscp_sendEvent
  5812 ;; This function is called by:
  5813 ;;		_vscp_doOneSecondWork
  5814 ;; This function uses a non-reentrant model
  5815 ;;
  5816                           
  5817                           	psect	text22
  5818  005B30                     __ptext22:
  5819                           	opt stack 0
  5820  005B30                     _vscp_sendHeartBeat:
  5821                           	opt stack 22
  5822                           
  5823                           ; BSR set to: 0
  5824                           ;incstack = 0
  5825                           ;incstack = 0
  5826                           ;vscp_sendHeartBeat@zone stored from wreg
  5827  005B30  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  5828                           
  5829                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  5830  005B34  0E83               	movlw	131
  5831  005B36  0100               	movlb	0	; () banked
  5832  005B38  6FCF               	movwf	_vscp_omsg& (0+255),b
  5833                           
  5834                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  5835  005B3A  0E07               	movlw	7
  5836  005B3C  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  5837                           
  5838                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  5839  005B3E  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  5840  005B40  0E14               	movlw	20
  5841  005B42  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  5842                           
  5843                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  5844  005B44  0E09               	movlw	9
  5845  005B46  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  5849  005B48  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  5853  005B4A  C045  F0D5         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  5857  005B4E  C044  F0D6         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  5858                           
  5859                           ; BSR set to: 0
  5860                           ;vscp_firmware.c: 388: vscp_sendEvent();
  5861  005B52  EF84  F02D         	goto	_vscp_sendEvent	;wreg free
  5862  005B56                     __end_of_vscp_sendHeartBeat:
  5863                           	opt stack 0
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1h	equ	0xFE2
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _vscp_getSubzone *****************
  5883 ;; Defined at:
  5884 ;;		line 2735 in file "../main.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      unsigned char 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : F/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5898 ;;      Params:         0       0       0       0       0       0       0
  5899 ;;      Locals:         0       0       0       0       0       0       0
  5900 ;;      Temps:          0       0       0       0       0       0       0
  5901 ;;      Totals:         0       0       0       0       0       0       0
  5902 ;;Total ram usage:        0 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    3
  5905 ;; This function calls:
  5906 ;;		_readEEPROM
  5907 ;; This function is called by:
  5908 ;;		_vscp_doOneSecondWork
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text23
  5913  005DBE                     __ptext23:
  5914                           	opt stack 0
  5915  005DBE                     _vscp_getSubzone:
  5916                           	opt stack 26
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;main.c: 2736: return readEEPROM(0x42);
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;incstack = 0
  5923                           ;incstack = 0
  5924  005DBE  6A0F               	clrf	?_readEEPROM+1,c
  5925  005DC0  0E42               	movlw	66
  5926  005DC2  6E0E               	movwf	?_readEEPROM,c
  5927  005DC4  EFA8  F02E         	goto	_readEEPROM	;wreg free
  5928  005DC8                     __end_of_vscp_getSubzone:
  5929                           	opt stack 0
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           postinc0	equ	0xFEE
  5937                           wreg	equ	0xFE8
  5938                           postdec1	equ	0xFE5
  5939                           fsr1h	equ	0xFE2
  5940                           fsr1l	equ	0xFE1
  5941                           indf2	equ	0xFDF
  5942                           postinc2	equ	0xFDE
  5943                           postdec2	equ	0xFDD
  5944                           fsr2h	equ	0xFDA
  5945                           fsr2l	equ	0xFD9
  5946                           status	equ	0xFD8
  5947                           
  5948 ;; *************** function _vscp_getZone *****************
  5949 ;; Defined at:
  5950 ;;		line 2726 in file "../main.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;		None
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  1    wreg      unsigned char 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5964 ;;      Params:         0       0       0       0       0       0       0
  5965 ;;      Locals:         0       0       0       0       0       0       0
  5966 ;;      Temps:          0       0       0       0       0       0       0
  5967 ;;      Totals:         0       0       0       0       0       0       0
  5968 ;;Total ram usage:        0 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    3
  5971 ;; This function calls:
  5972 ;;		_readEEPROM
  5973 ;; This function is called by:
  5974 ;;		_vscp_doOneSecondWork
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           	psect	text24
  5979  005DC8                     __ptext24:
  5980                           	opt stack 0
  5981  005DC8                     _vscp_getZone:
  5982                           	opt stack 26
  5983                           
  5984                           ;main.c: 2727: return readEEPROM(0x41);
  5985                           
  5986                           ;incstack = 0
  5987                           ;incstack = 0
  5988  005DC8  6A0F               	clrf	?_readEEPROM+1,c
  5989  005DCA  0E41               	movlw	65
  5990  005DCC  6E0E               	movwf	?_readEEPROM,c
  5991  005DCE  EFA8  F02E         	goto	_readEEPROM	;wreg free
  5992  005DD2                     __end_of_vscp_getZone:
  5993                           	opt stack 0
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           postdec1	equ	0xFE5
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _doOneSecondWork *****************
  6013 ;; Defined at:
  6014 ;;		line 704 in file "../main.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  i               1   54[BANK0 ] unsigned char 
  6019 ;;  tmp             1   53[BANK0 ] unsigned char 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;		None               void
  6022 ;; Registers used:
  6023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : F/0
  6026 ;;		On exit  : F/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6029 ;;      Params:         0       0       0       0       0       0       0
  6030 ;;      Locals:         0       2       0       0       0       0       0
  6031 ;;      Temps:          0       2       0       0       0       0       0
  6032 ;;      Totals:         0       4       0       0       0       0       0
  6033 ;;Total ram usage:        4 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    8
  6036 ;; This function calls:
  6037 ;;		_readEEPROM
  6038 ;;		_vscp_sendEvent
  6039 ;;		_sendTempEvent
  6040 ;; This function is called by:
  6041 ;;		_main
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           	psect	text25
  6046  003A78                     __ptext25:
  6047                           	opt stack 0
  6048  003A78                     _doOneSecondWork:
  6049                           	opt stack 22
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;main.c: 706: uint8_t tmp;
  6053                           ;main.c: 707: uint8_t i;
  6054                           ;main.c: 710: if ( 0x03 == vscp_node_state ) {
  6055                           
  6056                           ;incstack = 0
  6057                           ;incstack = 0
  6058  003A78  51C0               	movf	_vscp_node_state& (0+255),w,b
  6059  003A7A  0A03               	xorlw	3
  6060  003A7C  E001 D0FE          	bnz	l245
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;main.c: 712: for (i = 0; i < 6; i++) {
  6064  003A80  6B96               	clrf	doOneSecondWork@i& (0+255),b
  6065  003A82                     l13824:
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;main.c: 715: tmp = readEEPROM(0x49 + i);
  6069  003A82  0E49               	movlw	73
  6070  003A84  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6071  003A86  6E0E               	movwf	?_readEEPROM,c
  6072  003A88  6A0F               	clrf	?_readEEPROM+1,c
  6073  003A8A  0E00               	movlw	0
  6074  003A8C  220F               	addwfc	?_readEEPROM+1,f,c
  6075  003A8E  ECA8  F02E         	call	_readEEPROM	;wreg free
  6076  003A92  0100               	movlb	0	; () banked
  6077  003A94  6F95               	movwf	doOneSecondWork@tmp& (0+255),b
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;main.c: 716: if (tmp && (seconds_temp[i] > tmp)) {
  6081  003A96  5195               	movf	doOneSecondWork@tmp& (0+255),w,b
  6082  003A98  E016               	bz	l13834
  6083                           
  6084                           ; BSR set to: 0
  6085  003A9A  0E00               	movlw	low _seconds_temp
  6086  003A9C  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6087  003A9E  6ED9               	movwf	fsr2l,c
  6088  003AA0  6ADA               	clrf	fsr2h,c
  6089  003AA2  0E01               	movlw	high _seconds_temp
  6090  003AA4  22DA               	addwfc	fsr2h,f,c
  6091  003AA6  50DF               	movf	indf2,w,c
  6092  003AA8  6195               	cpfslt	doOneSecondWork@tmp& (0+255),b
  6093  003AAA  D00D               	goto	l13834
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;main.c: 719: if ( sendTempEvent( i ) ) {
  6097  003AAC  5196               	movf	doOneSecondWork@i& (0+255),w,b
  6098  003AAE  EC4E  F029         	call	_sendTempEvent
  6099  003AB2  0900               	iorlw	0
  6100  003AB4  E008               	bz	l13834
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;main.c: 720: seconds_temp[i] = 0;
  6104  003AB6  0E00               	movlw	low _seconds_temp
  6105  003AB8  0100               	movlb	0	; () banked
  6106  003ABA  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6107  003ABC  6ED9               	movwf	fsr2l,c
  6108  003ABE  6ADA               	clrf	fsr2h,c
  6109  003AC0  0E01               	movlw	high _seconds_temp
  6110  003AC2  22DA               	addwfc	fsr2h,f,c
  6111  003AC4  6ADF               	clrf	indf2,c
  6112  003AC6                     l13834:
  6113                           
  6114                           ;main.c: 721: }
  6115                           ;main.c: 723: }
  6116                           ;main.c: 726: if (0x80 & readEEPROM(0x43 + i)) {
  6117  003AC6  0E43               	movlw	67
  6118  003AC8  0100               	movlb	0	; () banked
  6119  003ACA  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6120  003ACC  6E0E               	movwf	?_readEEPROM,c
  6121  003ACE  6A0F               	clrf	?_readEEPROM+1,c
  6122  003AD0  0E00               	movlw	0
  6123  003AD2  220F               	addwfc	?_readEEPROM+1,f,c
  6124  003AD4  ECA8  F02E         	call	_readEEPROM	;wreg free
  6125  003AD8  0100               	movlb	0	; () banked
  6126  003ADA  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6127  003ADC  AF93               	btfss	??_doOneSecondWork& (0+255),7,b
  6128  003ADE  D0CA               	goto	l13888
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;main.c: 729: if (low_alarm & (1 << i)) {
  6132  003AE0  C096  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6133  003AE4  0E01               	movlw	1
  6134  003AE6  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6135  003AE8  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6136  003AEA  D002               	goto	u12914
  6137  003AEC                     u12915:
  6138  003AEC  90D8               	bcf	status,0,c
  6139  003AEE  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6140  003AF0                     u12914:
  6141  003AF0  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6142  003AF2  D7FC               	goto	u12915
  6143  003AF4  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6144  003AF6  15BA               	andwf	_low_alarm& (0+255),w,b
  6145  003AF8  E058               	bz	l13862
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;main.c: 732: if (readEEPROM(i + 0x43) & (1<<3)) {
  6149  003AFA  0E43               	movlw	67
  6150  003AFC  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6151  003AFE  6E0E               	movwf	?_readEEPROM,c
  6152  003B00  6A0F               	clrf	?_readEEPROM+1,c
  6153  003B02  0E00               	movlw	0
  6154  003B04  220F               	addwfc	?_readEEPROM+1,f,c
  6155  003B06  ECA8  F02E         	call	_readEEPROM	;wreg free
  6156  003B0A  0100               	movlb	0	; () banked
  6157  003B0C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6158  003B0E  A793               	btfss	??_doOneSecondWork& (0+255),3,b
  6159  003B10  D04C               	goto	l13862
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;main.c: 735: vscp_omsg.priority = 0x00;
  6163  003B12  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;main.c: 736: vscp_omsg.flags = 0x80 + 3;
  6167  003B14  0E83               	movlw	131
  6168  003B16  6FCF               	movwf	_vscp_omsg& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;main.c: 738: if (readEEPROM(i + 0x43) & (1<<5)) {
  6172  003B18  0E43               	movlw	67
  6173  003B1A  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6174  003B1C  6E0E               	movwf	?_readEEPROM,c
  6175  003B1E  6A0F               	clrf	?_readEEPROM+1,c
  6176  003B20  0E00               	movlw	0
  6177  003B22  220F               	addwfc	?_readEEPROM+1,f,c
  6178  003B24  ECA8  F02E         	call	_readEEPROM	;wreg free
  6179  003B28  0100               	movlb	0	; () banked
  6180  003B2A  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6181  003B2C  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  6182  003B2E  D016               	goto	l13852
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;main.c: 740: if (readEEPROM(i + 0x43) & (1<<6)) {
  6186  003B30  0E43               	movlw	67
  6187  003B32  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6188  003B34  6E0E               	movwf	?_readEEPROM,c
  6189  003B36  6A0F               	clrf	?_readEEPROM+1,c
  6190  003B38  0E00               	movlw	0
  6191  003B3A  220F               	addwfc	?_readEEPROM+1,f,c
  6192  003B3C  ECA8  F02E         	call	_readEEPROM	;wreg free
  6193  003B40  0100               	movlb	0	; () banked
  6194  003B42  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6195  003B44  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  6196  003B46  D005               	goto	l13850
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;main.c: 741: vscp_omsg.vscp_class = 30;
  6200  003B48  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6201  003B4A  0E1E               	movlw	30
  6202  003B4C  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6203                           
  6204                           ;main.c: 742: vscp_omsg.vscp_type = 5;
  6205  003B4E  0E05               	movlw	5
  6206  003B50  D009               	goto	L6
  6207  003B52                     l13850:
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;main.c: 744: else {
  6211                           ;main.c: 745: vscp_omsg.vscp_class = 30;
  6212  003B52  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6213  003B54  0E1E               	movlw	30
  6214  003B56  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6215                           
  6216                           ;main.c: 746: vscp_omsg.vscp_type = 6;
  6217  003B58  0E06               	movlw	6
  6218  003B5A  D004               	goto	L6
  6219  003B5C                     l13852:
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;main.c: 750: else {
  6223                           ;main.c: 752: vscp_omsg.vscp_class = 1;
  6224  003B5C  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6225  003B5E  0E01               	movlw	1
  6226  003B60  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6227                           
  6228                           ;main.c: 753: vscp_omsg.vscp_type = 2;
  6229  003B62  0E02               	movlw	2
  6230  003B64                     L6:
  6231  003B64  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;main.c: 754: }
  6235                           ;main.c: 756: vscp_omsg.data[ 0 ] = i;
  6236  003B66  C096  F0D4         	movff	doOneSecondWork@i,_vscp_omsg+5
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;main.c: 757: vscp_omsg.data[ 1 ] =
  6240                           ;main.c: 758: readEEPROM(2 * i + 0x73);
  6241  003B6A  90D8               	bcf	status,0,c
  6242  003B6C  3596               	rlcf	doOneSecondWork@i& (0+255),w,b
  6243  003B6E  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6244  003B70  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6245  003B72  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6246  003B74  0E73               	movlw	115
  6247  003B76  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6248  003B78  6E0E               	movwf	?_readEEPROM,c
  6249  003B7A  0E00               	movlw	0
  6250  003B7C  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6251  003B7E  6E0F               	movwf	?_readEEPROM+1,c
  6252  003B80  ECA8  F02E         	call	_readEEPROM	;wreg free
  6253  003B84  0100               	movlb	0	; () banked
  6254  003B86  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;main.c: 759: vscp_omsg.data[ 2 ] =
  6258                           ;main.c: 760: readEEPROM(2 * i + 0x74);
  6259  003B88  90D8               	bcf	status,0,c
  6260  003B8A  3596               	rlcf	doOneSecondWork@i& (0+255),w,b
  6261  003B8C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6262  003B8E  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6263  003B90  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6264  003B92  0E74               	movlw	116
  6265  003B94  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6266  003B96  6E0E               	movwf	?_readEEPROM,c
  6267  003B98  0E00               	movlw	0
  6268  003B9A  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6269  003B9C  6E0F               	movwf	?_readEEPROM+1,c
  6270  003B9E  ECA8  F02E         	call	_readEEPROM	;wreg free
  6271  003BA2  0100               	movlb	0	; () banked
  6272  003BA4  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;main.c: 765: vscp_sendEvent();
  6276  003BA6  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  6277  003BAA                     l13862:
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 767: }
  6281                           ;main.c: 768: }
  6282                           ;main.c: 771: if (high_alarm & (1 << i)) {
  6283  003BAA  C096  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6284  003BAE  0E01               	movlw	1
  6285  003BB0  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6286  003BB2  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6287  003BB4  D002               	goto	u12964
  6288  003BB6                     u12965:
  6289  003BB6  90D8               	bcf	status,0,c
  6290  003BB8  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6291  003BBA                     u12964:
  6292  003BBA  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6293  003BBC  D7FC               	goto	u12965
  6294  003BBE  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6295  003BC0  15B9               	andwf	_high_alarm& (0+255),w,b
  6296  003BC2  E058               	bz	l13888
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;main.c: 774: if ((readEEPROM(i + 0x43) & (1<<4))) {
  6300  003BC4  0E43               	movlw	67
  6301  003BC6  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6302  003BC8  6E0E               	movwf	?_readEEPROM,c
  6303  003BCA  6A0F               	clrf	?_readEEPROM+1,c
  6304  003BCC  0E00               	movlw	0
  6305  003BCE  220F               	addwfc	?_readEEPROM+1,f,c
  6306  003BD0  ECA8  F02E         	call	_readEEPROM	;wreg free
  6307  003BD4  0100               	movlb	0	; () banked
  6308  003BD6  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6309  003BD8  A993               	btfss	??_doOneSecondWork& (0+255),4,b
  6310  003BDA  D04C               	goto	l13888
  6311                           
  6312                           ; BSR set to: 0
  6313                           ;main.c: 776: vscp_omsg.priority = 0x00;
  6314  003BDC  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;main.c: 777: vscp_omsg.flags = 0x80 + 3;
  6318  003BDE  0E83               	movlw	131
  6319  003BE0  6FCF               	movwf	_vscp_omsg& (0+255),b
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;main.c: 779: if (readEEPROM(i + 0x43) & (1<<5)) {
  6323  003BE2  0E43               	movlw	67
  6324  003BE4  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6325  003BE6  6E0E               	movwf	?_readEEPROM,c
  6326  003BE8  6A0F               	clrf	?_readEEPROM+1,c
  6327  003BEA  0E00               	movlw	0
  6328  003BEC  220F               	addwfc	?_readEEPROM+1,f,c
  6329  003BEE  ECA8  F02E         	call	_readEEPROM	;wreg free
  6330  003BF2  0100               	movlb	0	; () banked
  6331  003BF4  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6332  003BF6  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  6333  003BF8  D016               	goto	l13878
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;main.c: 780: if (readEEPROM(i + 0x43) & (1<<6)) {
  6337  003BFA  0E43               	movlw	67
  6338  003BFC  2596               	addwf	doOneSecondWork@i& (0+255),w,b
  6339  003BFE  6E0E               	movwf	?_readEEPROM,c
  6340  003C00  6A0F               	clrf	?_readEEPROM+1,c
  6341  003C02  0E00               	movlw	0
  6342  003C04  220F               	addwfc	?_readEEPROM+1,f,c
  6343  003C06  ECA8  F02E         	call	_readEEPROM	;wreg free
  6344  003C0A  0100               	movlb	0	; () banked
  6345  003C0C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6346  003C0E  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  6347  003C10  D005               	goto	l13876
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;main.c: 781: vscp_omsg.vscp_class = 30;
  6351  003C12  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6352  003C14  0E1E               	movlw	30
  6353  003C16  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6354                           
  6355                           ;main.c: 782: vscp_omsg.vscp_type = 6;
  6356  003C18  0E06               	movlw	6
  6357  003C1A  D009               	goto	L7
  6358  003C1C                     l13876:
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;main.c: 784: else {
  6362                           ;main.c: 785: vscp_omsg.vscp_class = 30;
  6363  003C1C  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6364  003C1E  0E1E               	movlw	30
  6365  003C20  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6366                           
  6367                           ;main.c: 786: vscp_omsg.vscp_type = 5;
  6368  003C22  0E05               	movlw	5
  6369  003C24  D004               	goto	L7
  6370  003C26                     l13878:
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;main.c: 789: else {
  6374                           ;main.c: 791: vscp_omsg.vscp_class = 1;
  6375  003C26  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6376  003C28  0E01               	movlw	1
  6377  003C2A  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6378                           
  6379                           ;main.c: 792: vscp_omsg.vscp_type = 2;
  6380  003C2C  0E02               	movlw	2
  6381  003C2E                     L7:
  6382  003C2E  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;main.c: 793: }
  6386                           ;main.c: 795: vscp_omsg.data[ 0 ] = i;
  6387  003C30  C096  F0D4         	movff	doOneSecondWork@i,_vscp_omsg+5
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;main.c: 796: vscp_omsg.data[ 1 ] = readEEPROM(2 * i +
  6391                           ;main.c: 797: 0x73);
  6392  003C34  90D8               	bcf	status,0,c
  6393  003C36  3596               	rlcf	doOneSecondWork@i& (0+255),w,b
  6394  003C38  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6395  003C3A  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6396  003C3C  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6397  003C3E  0E73               	movlw	115
  6398  003C40  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6399  003C42  6E0E               	movwf	?_readEEPROM,c
  6400  003C44  0E00               	movlw	0
  6401  003C46  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6402  003C48  6E0F               	movwf	?_readEEPROM+1,c
  6403  003C4A  ECA8  F02E         	call	_readEEPROM	;wreg free
  6404  003C4E  0100               	movlb	0	; () banked
  6405  003C50  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;main.c: 798: vscp_omsg.data[ 2 ] = readEEPROM(2 * i +
  6409                           ;main.c: 799: 0x74);
  6410  003C52  90D8               	bcf	status,0,c
  6411  003C54  3596               	rlcf	doOneSecondWork@i& (0+255),w,b
  6412  003C56  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6413  003C58  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6414  003C5A  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6415  003C5C  0E74               	movlw	116
  6416  003C5E  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6417  003C60  6E0E               	movwf	?_readEEPROM,c
  6418  003C62  0E00               	movlw	0
  6419  003C64  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6420  003C66  6E0F               	movwf	?_readEEPROM+1,c
  6421  003C68  ECA8  F02E         	call	_readEEPROM	;wreg free
  6422  003C6C  0100               	movlb	0	; () banked
  6423  003C6E  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;main.c: 804: vscp_sendEvent();
  6427  003C70  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  6428  003C74                     l13888:
  6429                           
  6430                           ; BSR set to: 0
  6431  003C74  2B96               	incf	doOneSecondWork@i& (0+255),f,b
  6432                           
  6433                           ; BSR set to: 0
  6434  003C76  0E05               	movlw	5
  6435  003C78  6596               	cpfsgt	doOneSecondWork@i& (0+255),b
  6436  003C7A  D703               	goto	l13824
  6437  003C7C                     l245:
  6438                           
  6439                           ; BSR set to: 0
  6440  003C7C  0012               	return	
  6441  003C7E                     __end_of_doOneSecondWork:
  6442                           	opt stack 0
  6443                           tblptru	equ	0xFF8
  6444                           tblptrh	equ	0xFF7
  6445                           tblptrl	equ	0xFF6
  6446                           tablat	equ	0xFF5
  6447                           prodh	equ	0xFF4
  6448                           prodl	equ	0xFF3
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           postdec1	equ	0xFE5
  6452                           fsr1h	equ	0xFE2
  6453                           fsr1l	equ	0xFE1
  6454                           indf2	equ	0xFDF
  6455                           postinc2	equ	0xFDE
  6456                           postdec2	equ	0xFDD
  6457                           fsr2h	equ	0xFDA
  6458                           fsr2l	equ	0xFD9
  6459                           status	equ	0xFD8
  6460                           
  6461 ;; *************** function _vscp_error *****************
  6462 ;; Defined at:
  6463 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;		None
  6468 ;; Return value:  Size  Location     Type
  6469 ;;		None               void
  6470 ;; Registers used:
  6471 ;;		None
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6477 ;;      Params:         0       0       0       0       0       0       0
  6478 ;;      Locals:         0       0       0       0       0       0       0
  6479 ;;      Temps:          0       0       0       0       0       0       0
  6480 ;;      Totals:         0       0       0       0       0       0       0
  6481 ;;Total ram usage:        0 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    2
  6484 ;; This function calls:
  6485 ;;		Nothing
  6486 ;; This function is called by:
  6487 ;;		_main
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text26
  6492  005E02                     __ptext26:
  6493                           	opt stack 0
  6494  005E02                     _vscp_error:
  6495                           	opt stack 28
  6496                           
  6497                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;incstack = 0
  6501                           ;incstack = 0
  6502  005E02  6A4C               	clrf	_vscp_initledfunc,c
  6503  005E04  0012               	return	
  6504  005E06                     __end_of_vscp_error:
  6505                           	opt stack 0
  6506                           tblptru	equ	0xFF8
  6507                           tblptrh	equ	0xFF7
  6508                           tblptrl	equ	0xFF6
  6509                           tablat	equ	0xFF5
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           postdec1	equ	0xFE5
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _handle_sync *****************
  6525 ;; Defined at:
  6526 ;;		line 1255 in file "../main.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  i               1   53[BANK0 ] unsigned char 
  6531 ;; Return value:  Size  Location     Type
  6532 ;;		None               void
  6533 ;; Registers used:
  6534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : F/0
  6537 ;;		On exit  : F/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6540 ;;      Params:         0       0       0       0       0       0       0
  6541 ;;      Locals:         0       1       0       0       0       0       0
  6542 ;;      Temps:          0       2       0       0       0       0       0
  6543 ;;      Totals:         0       3       0       0       0       0       0
  6544 ;;Total ram usage:        3 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    8
  6547 ;; This function calls:
  6548 ;;		_readEEPROM
  6549 ;;		_sendTempEvent
  6550 ;; This function is called by:
  6551 ;;		_main
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text27
  6556  00531C                     __ptext27:
  6557                           	opt stack 0
  6558  00531C                     _handle_sync:
  6559                           	opt stack 22
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 1256: uint8_t i;
  6563                           ;main.c: 1258: for (i = 0; i < 6; i++) {
  6564                           
  6565                           ;incstack = 0
  6566                           ;incstack = 0
  6567  00531C  6B95               	clrf	handle_sync@i& (0+255),b
  6568  00531E                     l13798:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;main.c: 1260: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6572                           ;main.c: 1261: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6573                           ;main.c: 1262: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6574                           ;main.c: 1263: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6575  00531E  29C8               	incf	(_vscp_imsg+7)& (0+255),w,b
  6576  005320  E010               	bz	l13802
  6577                           
  6578                           ; BSR set to: 0
  6579  005322  90D8               	bcf	status,0,c
  6580  005324  3595               	rlcf	handle_sync@i& (0+255),w,b
  6581  005326  6F93               	movwf	??_handle_sync& (0+255),b
  6582  005328  6B94               	clrf	(??_handle_sync+1)& (0+255),b
  6583  00532A  3794               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6584  00532C  0E73               	movlw	115
  6585  00532E  2593               	addwf	??_handle_sync& (0+255),w,b
  6586  005330  6E0E               	movwf	?_readEEPROM,c
  6587  005332  0E00               	movlw	0
  6588  005334  2194               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6589  005336  6E0F               	movwf	?_readEEPROM+1,c
  6590  005338  ECA8  F02E         	call	_readEEPROM	;wreg free
  6591  00533C  0100               	movlb	0	; () banked
  6592  00533E  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6593  005340  E125               	bnz	l13812
  6594  005342                     l13802:
  6595                           
  6596                           ; BSR set to: 0
  6597  005342  29C9               	incf	(_vscp_imsg+8)& (0+255),w,b
  6598  005344  E010               	bz	l295
  6599                           
  6600                           ; BSR set to: 0
  6601  005346  90D8               	bcf	status,0,c
  6602  005348  3595               	rlcf	handle_sync@i& (0+255),w,b
  6603  00534A  6F93               	movwf	??_handle_sync& (0+255),b
  6604  00534C  6B94               	clrf	(??_handle_sync+1)& (0+255),b
  6605  00534E  3794               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6606  005350  0E74               	movlw	116
  6607  005352  2593               	addwf	??_handle_sync& (0+255),w,b
  6608  005354  6E0E               	movwf	?_readEEPROM,c
  6609  005356  0E00               	movlw	0
  6610  005358  2194               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6611  00535A  6E0F               	movwf	?_readEEPROM+1,c
  6612  00535C  ECA8  F02E         	call	_readEEPROM	;wreg free
  6613  005360  0100               	movlb	0	; () banked
  6614  005362  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6615  005364  E113               	bnz	l13812
  6616  005366                     l295:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;main.c: 1266: timeout_clock = 0;
  6620  005366  6BB0               	clrf	_timeout_clock& (0+255),b	;volatile
  6621  005368  6BB1               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6622  00536A  6BB2               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6623  00536C  6BB3               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6624                           
  6625                           ;main.c: 1267: while (!sendTempEvent(i)) {
  6626  00536E  D009               	goto	l13810
  6627  005370                     l13806:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 1268: if (timeout_clock > 1000) break;
  6631  005370  0EE9               	movlw	233
  6632  005372  5DB0               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6633  005374  0E03               	movlw	3
  6634  005376  59B1               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6635  005378  0E00               	movlw	0
  6636  00537A  59B2               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6637  00537C  0E00               	movlw	0
  6638  00537E  59B3               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6639  005380  E205               	bc	l13812
  6640  005382                     l13810:
  6641                           
  6642                           ; BSR set to: 0
  6643  005382  5195               	movf	handle_sync@i& (0+255),w,b
  6644  005384  EC4E  F029         	call	_sendTempEvent
  6645  005388  0900               	iorlw	0
  6646  00538A  E0F2               	bz	l13806
  6647  00538C                     l13812:
  6648                           
  6649                           ; BSR set to: 0
  6650  00538C  2B95               	incf	handle_sync@i& (0+255),f,b
  6651                           
  6652                           ; BSR set to: 0
  6653  00538E  0E05               	movlw	5
  6654  005390  6595               	cpfsgt	handle_sync@i& (0+255),b
  6655  005392  D7C5               	goto	l13798
  6656                           
  6657                           ; BSR set to: 0
  6658  005394  0C05               	retlw	5
  6659  005396                     __end_of_handle_sync:
  6660                           	opt stack 0
  6661                           tblptru	equ	0xFF8
  6662                           tblptrh	equ	0xFF7
  6663                           tblptrl	equ	0xFF6
  6664                           tablat	equ	0xFF5
  6665                           prodh	equ	0xFF4
  6666                           prodl	equ	0xFF3
  6667                           postinc0	equ	0xFEE
  6668                           wreg	equ	0xFE8
  6669                           postdec1	equ	0xFE5
  6670                           fsr1h	equ	0xFE2
  6671                           fsr1l	equ	0xFE1
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function _sendTempEvent *****************
  6680 ;; Defined at:
  6681 ;;		line 817 in file "../main.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  i               1    wreg     unsigned char 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  i               1   68[COMRAM] unsigned char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  1    wreg      unsigned char 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : F/0
  6692 ;;		On exit  : F/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6695 ;;      Params:         0       0       0       0       0       0       0
  6696 ;;      Locals:         1       0       0       0       0       0       0
  6697 ;;      Temps:          1       0       0       0       0       0       0
  6698 ;;      Totals:         2       0       0       0       0       0       0
  6699 ;;Total ram usage:        2 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    7
  6702 ;; This function calls:
  6703 ;;		_readEEPROM
  6704 ;;		_vscp_sendEvent
  6705 ;;		_setEventData
  6706 ;; This function is called by:
  6707 ;;		_doOneSecondWork
  6708 ;;		_handle_sync
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text28
  6713  00529C                     __ptext28:
  6714                           	opt stack 0
  6715  00529C                     _sendTempEvent:
  6716                           	opt stack 22
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;incstack = 0
  6720                           ;incstack = 0
  6721                           ;sendTempEvent@i stored from wreg
  6722  00529C  CFE8 F045          	movff	wreg,sendTempEvent@i
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;main.c: 818: vscp_omsg.priority = 0x03;
  6726  0052A0  0E03               	movlw	3
  6727  0052A2  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  6728                           
  6729                           ;main.c: 819: vscp_omsg.flags = 0x80 + 4;
  6730  0052A4  0E84               	movlw	132
  6731  0052A6  6FCF               	movwf	_vscp_omsg& (0+255),b
  6732                           
  6733                           ;main.c: 820: vscp_omsg.vscp_class = 10;
  6734  0052A8  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  6735  0052AA  0E0A               	movlw	10
  6736  0052AC  6FD1               	movwf	(_vscp_omsg+2)& (0+255),b
  6737                           
  6738                           ;main.c: 821: vscp_omsg.vscp_type = 6;
  6739  0052AE  0E06               	movlw	6
  6740  0052B0  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;main.c: 824: vscp_omsg.data[ 0 ] = 0x80 |
  6744                           ;main.c: 825: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6745                           ;main.c: 826: i;
  6746  0052B2  0E43               	movlw	67
  6747  0052B4  2445               	addwf	sendTempEvent@i,w,c
  6748  0052B6  6E0E               	movwf	?_readEEPROM,c
  6749  0052B8  6A0F               	clrf	?_readEEPROM+1,c
  6750  0052BA  0E00               	movlw	0
  6751  0052BC  220F               	addwfc	?_readEEPROM+1,f,c
  6752  0052BE  ECA8  F02E         	call	_readEEPROM	;wreg free
  6753  0052C2  6E44               	movwf	??_sendTempEvent& (0+255),c
  6754  0052C4  0E03               	movlw	3
  6755  0052C6  1644               	andwf	??_sendTempEvent,f,c
  6756  0052C8  90D8               	bcf	status,0,c
  6757  0052CA  3644               	rlcf	??_sendTempEvent,f,c
  6758  0052CC  90D8               	bcf	status,0,c
  6759  0052CE  3644               	rlcf	??_sendTempEvent,f,c
  6760  0052D0  90D8               	bcf	status,0,c
  6761  0052D2  3444               	rlcf	??_sendTempEvent,w,c
  6762  0052D4  1045               	iorwf	sendTempEvent@i,w,c
  6763  0052D6  0980               	iorlw	128
  6764  0052D8  0100               	movlb	0	; () banked
  6765  0052DA  6FD4               	movwf	(_vscp_omsg+5)& (0+255),b
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;main.c: 828: vscp_omsg.data[ 1 ] = 0x82;
  6769  0052DC  0E82               	movlw	130
  6770  0052DE  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;main.c: 830: setEventData( current_temp[i],
  6774                           ;main.c: 831: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6775  0052E0  5045               	movf	sendTempEvent@i,w,c
  6776  0052E2  0D02               	mullw	2
  6777  0052E4  50F3               	movf	prodl,w,c
  6778  0052E6  0FA0               	addlw	low _current_temp
  6779  0052E8  6ED9               	movwf	fsr2l,c
  6780  0052EA  6ADA               	clrf	fsr2h,c
  6781  0052EC  CFDE F08A          	movff	postinc2,?_setEventData
  6782  0052F0  CFDD F08B          	movff	postdec2,?_setEventData+1
  6783  0052F4  0E43               	movlw	67
  6784  0052F6  2445               	addwf	sendTempEvent@i,w,c
  6785  0052F8  6E0E               	movwf	?_readEEPROM,c
  6786  0052FA  6A0F               	clrf	?_readEEPROM+1,c
  6787  0052FC  0E00               	movlw	0
  6788  0052FE  220F               	addwfc	?_readEEPROM+1,f,c
  6789  005300  ECA8  F02E         	call	_readEEPROM	;wreg free
  6790  005304  0B03               	andlw	3
  6791  005306  0100               	movlb	0	; () banked
  6792  005308  6F8C               	movwf	(?_setEventData+2)& (0+255),b
  6793  00530A  ECC6  F026         	call	_setEventData	;wreg free
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;main.c: 834: if (!vscp_sendEvent()) {
  6797  00530E  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  6798  005312  0900               	iorlw	0
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;main.c: 835: return 0;
  6802  005314  0E00               	movlw	0
  6803  005316  A4D8               	btfss	status,2,c
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;main.c: 836: }
  6807                           ;main.c: 838: return 1;
  6808  005318  0E01               	movlw	1
  6809                           
  6810                           ; BSR set to: 0
  6811  00531A  0012               	return	
  6812  00531C                     __end_of_sendTempEvent:
  6813                           	opt stack 0
  6814                           tblptru	equ	0xFF8
  6815                           tblptrh	equ	0xFF7
  6816                           tblptrl	equ	0xFF6
  6817                           tablat	equ	0xFF5
  6818                           prodh	equ	0xFF4
  6819                           prodl	equ	0xFF3
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _setEventData *****************
  6833 ;; Defined at:
  6834 ;;		line 846 in file "../main.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  v               2   42[BANK0 ] int 
  6837 ;;  unit            1   44[BANK0 ] unsigned char 
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;  newval          4   45[BANK0 ] unsigned char 
  6840 ;;  ival            2   49[BANK0 ] int 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;		None               void
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : F/0
  6847 ;;		On exit  : F/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6850 ;;      Params:         0       3       0       0       0       0       0
  6851 ;;      Locals:         0       6       0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0
  6853 ;;      Totals:         0       9       0       0       0       0       0
  6854 ;;Total ram usage:        9 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    5
  6857 ;; This function calls:
  6858 ;;		_Celsius2Kelvin
  6859 ;;		_Celsius2Fahrenheit
  6860 ;;		___awtofl
  6861 ;;		___fltol
  6862 ;; This function is called by:
  6863 ;;		_sendTempEvent
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text29
  6868  004D8C                     __ptext29:
  6869                           	opt stack 0
  6870  004D8C                     _setEventData:
  6871                           	opt stack 23
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;main.c: 847: double newval;
  6875                           ;main.c: 848: int ival;
  6876                           ;main.c: 850: if (0 == unit) {
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;incstack = 0
  6880                           ;incstack = 0
  6881  004D8C  678C               	tstfsz	setEventData@unit& (0+255),b
  6882  004D8E  D019               	goto	l14128
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;main.c: 852: newval = Celsius2Kelvin(v);
  6886  004D90  C08A  F018         	movff	setEventData@v,?___awtofl
  6887  004D94  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6888  004D98  ECB5  F02C         	call	___awtofl	;wreg free
  6889  004D9C  C01B  F03E         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6890  004DA0  C01A  F03D         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6891  004DA4  C019  F03C         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6892  004DA8  C018  F03B         	movff	?___awtofl,?_Celsius2Kelvin
  6893  004DAC  ECD2  F02C         	call	_Celsius2Kelvin	;wreg free
  6894  004DB0  C03E  F090         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6895  004DB4  C03D  F08F         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6896  004DB8  C03C  F08E         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6897  004DBC  C03B  F08D         	movff	?_Celsius2Kelvin,setEventData@newval
  6898                           
  6899                           ;main.c: 853: } else if (2 == unit) {
  6900  004DC0  D02A               	goto	l253
  6901  004DC2                     l14128:
  6902                           
  6903                           ; BSR set to: 0
  6904  004DC2  518C               	movf	setEventData@unit& (0+255),w,b
  6905  004DC4  0A02               	xorlw	2
  6906  004DC6  E119               	bnz	l14132
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;main.c: 855: newval = Celsius2Fahrenheit(v);
  6910  004DC8  C08A  F018         	movff	setEventData@v,?___awtofl
  6911  004DCC  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6912  004DD0  ECB5  F02C         	call	___awtofl	;wreg free
  6913  004DD4  C01B  F089         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6914  004DD8  C01A  F088         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6915  004DDC  C019  F087         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6916  004DE0  C018  F086         	movff	?___awtofl,?_Celsius2Fahrenheit
  6917  004DE4  EC07  F02A         	call	_Celsius2Fahrenheit	;wreg free
  6918  004DE8  C089  F090         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6919  004DEC  C088  F08F         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6920  004DF0  C087  F08E         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6921  004DF4  C086  F08D         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6922                           
  6923                           ;main.c: 856: } else {
  6924  004DF8  D00E               	goto	l253
  6925  004DFA                     l14132:
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;main.c: 858: newval = v;
  6929  004DFA  C08A  F018         	movff	setEventData@v,?___awtofl
  6930  004DFE  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6931  004E02  ECB5  F02C         	call	___awtofl	;wreg free
  6932  004E06  C01B  F090         	movff	?___awtofl+3,setEventData@newval+3
  6933  004E0A  C01A  F08F         	movff	?___awtofl+2,setEventData@newval+2
  6934  004E0E  C019  F08E         	movff	?___awtofl+1,setEventData@newval+1
  6935  004E12  C018  F08D         	movff	?___awtofl,setEventData@newval
  6936  004E16                     l253:
  6937                           
  6938                           ;main.c: 859: }
  6939                           ;main.c: 861: ival = (int) newval;
  6940  004E16  C08D  F034         	movff	setEventData@newval,?___fltol
  6941  004E1A  C08E  F035         	movff	setEventData@newval+1,?___fltol+1
  6942  004E1E  C08F  F036         	movff	setEventData@newval+2,?___fltol+2
  6943  004E22  C090  F037         	movff	setEventData@newval+3,?___fltol+3
  6944  004E26  EC72  F028         	call	___fltol	;wreg free
  6945  004E2A  C034  F091         	movff	?___fltol,setEventData@ival
  6946  004E2E  C035  F092         	movff	?___fltol+1,setEventData@ival+1
  6947                           
  6948                           ;main.c: 863: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  6949  004E32  0100               	movlb	0	; () banked
  6950  004E34  5192               	movf	(setEventData@ival+1)& (0+255),w,b
  6951  004E36  6FD6               	movwf	(_vscp_omsg+7)& (0+255),b
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;main.c: 864: vscp_omsg.data[ 3 ] = (ival & 0xff);
  6955  004E38  C091  F0D7         	movff	setEventData@ival,_vscp_omsg+8
  6956                           
  6957                           ; BSR set to: 0
  6958  004E3C  0012               	return	
  6959  004E3E                     __end_of_setEventData:
  6960                           	opt stack 0
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           postinc0	equ	0xFEE
  6968                           wreg	equ	0xFE8
  6969                           postdec1	equ	0xFE5
  6970                           fsr1h	equ	0xFE2
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           
  6979 ;; *************** function _Celsius2Fahrenheit *****************
  6980 ;; Defined at:
  6981 ;;		line 42 in file "../ntc.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;  tc              4   38[BANK0 ] int 
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;		None
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  4   38[BANK0 ] int 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2, status,0, cstack
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6995 ;;      Params:         0       4       0       0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0
  6998 ;;      Totals:         0       4       0       0       0       0       0
  6999 ;;Total ram usage:        4 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    4
  7002 ;; This function calls:
  7003 ;;		___fladd
  7004 ;;		___fldiv
  7005 ;;		___flmul
  7006 ;; This function is called by:
  7007 ;;		_setEventData
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text30
  7012  00540E                     __ptext30:
  7013                           	opt stack 0
  7014  00540E                     _Celsius2Fahrenheit:
  7015                           	opt stack 23
  7016                           
  7017                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;incstack = 0
  7021                           ;incstack = 0
  7022  00540E  0100               	movlb	0	; () banked
  7023  005410  6B64               	clrf	(?___fladd+4)& (0+255),b
  7024  005412  6B65               	clrf	(?___fladd+5)& (0+255),b
  7025  005414  0E7A               	movlw	122
  7026  005416  6F66               	movwf	(?___fladd+6)& (0+255),b
  7027  005418  0E46               	movlw	70
  7028  00541A  6F67               	movwf	(?___fladd+7)& (0+255),b
  7029  00541C  6A22               	clrf	?___flmul+4,c
  7030  00541E  6A23               	clrf	?___flmul+5,c
  7031  005420  0E10               	movlw	16
  7032  005422  6E24               	movwf	?___flmul+6,c
  7033  005424  0E41               	movlw	65
  7034  005426  6E25               	movwf	?___flmul+7,c
  7035  005428  C086  F01E         	movff	Celsius2Fahrenheit@tc,?___flmul
  7036  00542C  C087  F01F         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  7037  005430  C088  F020         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  7038  005434  C089  F021         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  7039  005438  ECE1  F024         	call	___flmul	;wreg free
  7040  00543C  C021  F063         	movff	?___flmul+3,?___fladd+3
  7041  005440  C020  F062         	movff	?___flmul+2,?___fladd+2
  7042  005444  C01F  F061         	movff	?___flmul+1,?___fladd+1
  7043  005448  C01E  F060         	movff	?___flmul,?___fladd
  7044  00544C  EC09  F020         	call	___fladd	;wreg free
  7045  005450  C063  F073         	movff	?___fladd+3,?___fldiv+3
  7046  005454  C062  F072         	movff	?___fladd+2,?___fldiv+2
  7047  005458  C061  F071         	movff	?___fladd+1,?___fldiv+1
  7048  00545C  C060  F070         	movff	?___fladd,?___fldiv
  7049  005460  0100               	movlb	0	; () banked
  7050  005462  6B74               	clrf	(?___fldiv+4)& (0+255),b
  7051  005464  6B75               	clrf	(?___fldiv+5)& (0+255),b
  7052  005466  0EA0               	movlw	160
  7053  005468  6F76               	movwf	(?___fldiv+6)& (0+255),b
  7054  00546A  0E40               	movlw	64
  7055  00546C  6F77               	movwf	(?___fldiv+7)& (0+255),b
  7056  00546E  EC78  F027         	call	___fldiv	;wreg free
  7057  005472  C073  F089         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  7058  005476  C072  F088         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  7059  00547A  C071  F087         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  7060  00547E  C070  F086         	movff	?___fldiv,?_Celsius2Fahrenheit
  7061  005482  0012               	return	
  7062  005484                     __end_of_Celsius2Fahrenheit:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function ___fladd *****************
  7083 ;; Defined at:
  7084 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  f1              4    0[BANK0 ] int 
  7087 ;;  f2              4    4[BANK0 ] int 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  exp1            1   57[COMRAM] unsigned char 
  7090 ;;  exp2            1   56[COMRAM] unsigned char 
  7091 ;;  sign            1   55[COMRAM] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  4    0[BANK0 ] unsigned char 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7101 ;;      Params:         0       8       0       0       0       0       0
  7102 ;;      Locals:         6       0       0       0       0       0       0
  7103 ;;      Temps:          1       0       0       0       0       0       0
  7104 ;;      Totals:         7       8       0       0       0       0       0
  7105 ;;Total ram usage:       15 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    3
  7108 ;; This function calls:
  7109 ;;		___flpack
  7110 ;; This function is called by:
  7111 ;;		_doWork
  7112 ;;		_Celsius2Fahrenheit
  7113 ;;		_Celsius2Kelvin
  7114 ;;		___asfladd
  7115 ;;		_floor
  7116 ;;		___flsub
  7117 ;;		_log
  7118 ;;		_eval_poly
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text31
  7123  004012                     __ptext31:
  7124                           	opt stack 0
  7125  004012                     ___fladd:
  7126                           	opt stack 25
  7127                           
  7128                           ;incstack = 0
  7129                           ;incstack = 0
  7130  004012  0100               	movlb	0	; () banked
  7131  004014  3562               	rlcf	(___fladd@f1+2)& (0+255),w,b
  7132  004016  3563               	rlcf	(___fladd@f1+3)& (0+255),w,b
  7133  004018  6E3A               	movwf	___fladd@exp1,c
  7134  00401A  3566               	rlcf	(___fladd@f2+2)& (0+255),w,b
  7135  00401C  3567               	rlcf	(___fladd@f2+3)& (0+255),w,b
  7136  00401E  6E39               	movwf	___fladd@exp2,c
  7137  004020  503A               	movf	___fladd@exp1,w,c
  7138  004022  E009               	bz	l1575
  7139                           
  7140                           ; BSR set to: 0
  7141  004024  5039               	movf	___fladd@exp2,w,c
  7142  004026  603A               	cpfslt	___fladd@exp1,c
  7143  004028  D00F               	goto	l14194
  7144                           
  7145                           ; BSR set to: 0
  7146  00402A  503A               	movf	___fladd@exp1,w,c
  7147  00402C  5C39               	subwf	___fladd@exp2,w,c
  7148  00402E  6E34               	movwf	??___fladd& (0+255),c
  7149  004030  0E21               	movlw	33
  7150  004032  5C34               	subwf	??___fladd,w,c
  7151  004034  E309               	bnc	l14194
  7152  004036                     l1575:
  7153                           
  7154                           ; BSR set to: 0
  7155  004036  C064  F060         	movff	___fladd@f2,?___fladd
  7156  00403A  C065  F061         	movff	___fladd@f2+1,?___fladd+1
  7157  00403E  C066  F062         	movff	___fladd@f2+2,?___fladd+2
  7158  004042  C067  F063         	movff	___fladd@f2+3,?___fladd+3
  7159  004046  D09C               	goto	l1576
  7160  004048                     l14194:
  7161                           
  7162                           ; BSR set to: 0
  7163  004048  5039               	movf	___fladd@exp2,w,c
  7164  00404A  E009               	bz	l1579
  7165                           
  7166                           ; BSR set to: 0
  7167  00404C  503A               	movf	___fladd@exp1,w,c
  7168  00404E  6039               	cpfslt	___fladd@exp2,c
  7169  004050  D00F               	goto	l14200
  7170                           
  7171                           ; BSR set to: 0
  7172  004052  5039               	movf	___fladd@exp2,w,c
  7173  004054  5C3A               	subwf	___fladd@exp1,w,c
  7174  004056  6E34               	movwf	??___fladd& (0+255),c
  7175  004058  0E21               	movlw	33
  7176  00405A  5C34               	subwf	??___fladd,w,c
  7177  00405C  E309               	bnc	l14200
  7178  00405E                     l1579:
  7179                           
  7180                           ; BSR set to: 0
  7181  00405E  C060  F060         	movff	___fladd@f1,?___fladd
  7182  004062  C061  F061         	movff	___fladd@f1+1,?___fladd+1
  7183  004066  C062  F062         	movff	___fladd@f1+2,?___fladd+2
  7184  00406A  C063  F063         	movff	___fladd@f1+3,?___fladd+3
  7185  00406E  D088               	goto	l1576
  7186  004070                     l14200:
  7187                           
  7188                           ; BSR set to: 0
  7189  004070  0E06               	movlw	6
  7190  004072  6E38               	movwf	___fladd@sign,c
  7191                           
  7192                           ; BSR set to: 0
  7193  004074  BF63               	btfsc	(___fladd@f1+3)& (0+255),7,b
  7194                           
  7195                           ; BSR set to: 0
  7196  004076  8E38               	bsf	___fladd@sign,7,c
  7197                           
  7198                           ; BSR set to: 0
  7199  004078  BF67               	btfsc	(___fladd@f2+3)& (0+255),7,b
  7200                           
  7201                           ; BSR set to: 0
  7202  00407A  8C38               	bsf	___fladd@sign,6,c
  7203                           
  7204                           ; BSR set to: 0
  7205  00407C  8F62               	bsf	(___fladd@f1+2)& (0+255),7,b
  7206                           
  7207                           ; BSR set to: 0
  7208  00407E  6B63               	clrf	(___fladd@f1+3)& (0+255),b
  7209                           
  7210                           ; BSR set to: 0
  7211  004080  8F66               	bsf	(___fladd@f2+2)& (0+255),7,b
  7212  004082  6B67               	clrf	(___fladd@f2+3)& (0+255),b
  7213                           
  7214                           ; BSR set to: 0
  7215  004084  5039               	movf	___fladd@exp2,w,c
  7216  004086  603A               	cpfslt	___fladd@exp1,c
  7217  004088  D01A               	goto	l14226
  7218  00408A                     l14216:
  7219  00408A  0100               	movlb	0	; () banked
  7220  00408C  90D8               	bcf	status,0,c
  7221  00408E  3764               	rlcf	___fladd@f2& (0+255),f,b
  7222  004090  3765               	rlcf	(___fladd@f2+1)& (0+255),f,b
  7223  004092  3766               	rlcf	(___fladd@f2+2)& (0+255),f,b
  7224  004094  3767               	rlcf	(___fladd@f2+3)& (0+255),f,b
  7225  004096  0639               	decf	___fladd@exp2,f,c
  7226                           
  7227                           ; BSR set to: 0
  7228  004098  5039               	movf	___fladd@exp2,w,c
  7229  00409A  183A               	xorwf	___fladd@exp1,w,c
  7230  00409C  E00C               	bz	l14224
  7231                           
  7232                           ; BSR set to: 0
  7233  00409E  0638               	decf	___fladd@sign,f,c
  7234  0040A0  5038               	movf	___fladd@sign& (0+255),w,c
  7235  0040A2  0B07               	andlw	7
  7236  0040A4  E008               	bz	l14224
  7237  0040A6  D7F1               	goto	l14216
  7238  0040A8                     l14222:
  7239  0040A8  0100               	movlb	0	; () banked
  7240  0040AA  90D8               	bcf	status,0,c
  7241  0040AC  3363               	rrcf	(___fladd@f1+3)& (0+255),f,b
  7242  0040AE  3362               	rrcf	(___fladd@f1+2)& (0+255),f,b
  7243  0040B0  3361               	rrcf	(___fladd@f1+1)& (0+255),f,b
  7244  0040B2  3360               	rrcf	___fladd@f1& (0+255),f,b
  7245  0040B4  2A3A               	incf	___fladd@exp1,f,c
  7246  0040B6                     l14224:
  7247  0040B6  5039               	movf	___fladd@exp2,w,c
  7248  0040B8  623A               	cpfseq	___fladd@exp1,c
  7249  0040BA  D7F6               	goto	l14222
  7250  0040BC  D01C               	goto	l1590
  7251  0040BE                     l14226:
  7252                           
  7253                           ; BSR set to: 0
  7254  0040BE  503A               	movf	___fladd@exp1,w,c
  7255  0040C0  6039               	cpfslt	___fladd@exp2,c
  7256  0040C2  D019               	goto	l1590
  7257  0040C4                     l14228:
  7258  0040C4  0100               	movlb	0	; () banked
  7259  0040C6  90D8               	bcf	status,0,c
  7260  0040C8  3760               	rlcf	___fladd@f1& (0+255),f,b
  7261  0040CA  3761               	rlcf	(___fladd@f1+1)& (0+255),f,b
  7262  0040CC  3762               	rlcf	(___fladd@f1+2)& (0+255),f,b
  7263  0040CE  3763               	rlcf	(___fladd@f1+3)& (0+255),f,b
  7264  0040D0  063A               	decf	___fladd@exp1,f,c
  7265                           
  7266                           ; BSR set to: 0
  7267  0040D2  5039               	movf	___fladd@exp2,w,c
  7268  0040D4  183A               	xorwf	___fladd@exp1,w,c
  7269  0040D6  E00C               	bz	l14236
  7270                           
  7271                           ; BSR set to: 0
  7272  0040D8  0638               	decf	___fladd@sign,f,c
  7273  0040DA  5038               	movf	___fladd@sign& (0+255),w,c
  7274  0040DC  0B07               	andlw	7
  7275  0040DE  E008               	bz	l14236
  7276  0040E0  D7F1               	goto	l14228
  7277  0040E2                     l14234:
  7278  0040E2  0100               	movlb	0	; () banked
  7279  0040E4  90D8               	bcf	status,0,c
  7280  0040E6  3367               	rrcf	(___fladd@f2+3)& (0+255),f,b
  7281  0040E8  3366               	rrcf	(___fladd@f2+2)& (0+255),f,b
  7282  0040EA  3365               	rrcf	(___fladd@f2+1)& (0+255),f,b
  7283  0040EC  3364               	rrcf	___fladd@f2& (0+255),f,b
  7284  0040EE  2A39               	incf	___fladd@exp2,f,c
  7285  0040F0                     l14236:
  7286  0040F0  5039               	movf	___fladd@exp2,w,c
  7287  0040F2  623A               	cpfseq	___fladd@exp1,c
  7288  0040F4  D7F6               	goto	l14234
  7289  0040F6                     l1590:
  7290  0040F6  AE38               	btfss	___fladd@sign,7,c
  7291  0040F8  D00A               	goto	l14240
  7292  0040FA  0100               	movlb	0	; () banked
  7293  0040FC  1F60               	comf	___fladd@f1& (0+255),f,b
  7294  0040FE  1F61               	comf	(___fladd@f1+1)& (0+255),f,b
  7295  004100  1F62               	comf	(___fladd@f1+2)& (0+255),f,b
  7296  004102  1F63               	comf	(___fladd@f1+3)& (0+255),f,b
  7297  004104  2B60               	incf	___fladd@f1& (0+255),f,b
  7298  004106  0E00               	movlw	0
  7299  004108  2361               	addwfc	(___fladd@f1+1)& (0+255),f,b
  7300  00410A  2362               	addwfc	(___fladd@f1+2)& (0+255),f,b
  7301  00410C  2363               	addwfc	(___fladd@f1+3)& (0+255),f,b
  7302  00410E                     l14240:
  7303  00410E  AC38               	btfss	___fladd@sign,6,c
  7304  004110  D00A               	goto	l14244
  7305  004112  0100               	movlb	0	; () banked
  7306  004114  1F64               	comf	___fladd@f2& (0+255),f,b
  7307  004116  1F65               	comf	(___fladd@f2+1)& (0+255),f,b
  7308  004118  1F66               	comf	(___fladd@f2+2)& (0+255),f,b
  7309  00411A  1F67               	comf	(___fladd@f2+3)& (0+255),f,b
  7310  00411C  2B64               	incf	___fladd@f2& (0+255),f,b
  7311  00411E  0E00               	movlw	0
  7312  004120  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7313  004122  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7314  004124  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7315  004126                     l14244:
  7316  004126  6A38               	clrf	___fladd@sign,c
  7317  004128  0100               	movlb	0	; () banked
  7318  00412A  5160               	movf	___fladd@f1& (0+255),w,b
  7319  00412C  2764               	addwf	___fladd@f2& (0+255),f,b
  7320  00412E  5161               	movf	(___fladd@f1+1)& (0+255),w,b
  7321  004130  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7322  004132  5162               	movf	(___fladd@f1+2)& (0+255),w,b
  7323  004134  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7324  004136  5163               	movf	(___fladd@f1+3)& (0+255),w,b
  7325  004138  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7326                           
  7327                           ; BSR set to: 0
  7328  00413A  AF67               	btfss	(___fladd@f2+3)& (0+255),7,b
  7329  00413C  D00B               	goto	l14252
  7330                           
  7331                           ; BSR set to: 0
  7332  00413E  1F64               	comf	___fladd@f2& (0+255),f,b
  7333  004140  1F65               	comf	(___fladd@f2+1)& (0+255),f,b
  7334  004142  1F66               	comf	(___fladd@f2+2)& (0+255),f,b
  7335  004144  1F67               	comf	(___fladd@f2+3)& (0+255),f,b
  7336  004146  2B64               	incf	___fladd@f2& (0+255),f,b
  7337  004148  0E00               	movlw	0
  7338  00414A  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7339  00414C  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7340  00414E  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7341                           
  7342                           ; BSR set to: 0
  7343  004150  0E01               	movlw	1
  7344  004152  6E38               	movwf	___fladd@sign,c
  7345  004154                     l14252:
  7346                           
  7347                           ; BSR set to: 0
  7348  004154  C064  F00E         	movff	___fladd@f2,?___flpack
  7349  004158  C065  F00F         	movff	___fladd@f2+1,?___flpack+1
  7350  00415C  C066  F010         	movff	___fladd@f2+2,?___flpack+2
  7351  004160  C067  F011         	movff	___fladd@f2+3,?___flpack+3
  7352  004164  C03A  F012         	movff	___fladd@exp1,?___flpack+4
  7353  004168  C038  F013         	movff	___fladd@sign,?___flpack+5
  7354  00416C  ECA9  F025         	call	___flpack	;wreg free
  7355  004170  C011  F063         	movff	?___flpack+3,?___fladd+3
  7356  004174  C010  F062         	movff	?___flpack+2,?___fladd+2
  7357  004178  C00F  F061         	movff	?___flpack+1,?___fladd+1
  7358  00417C  C00E  F060         	movff	?___flpack,?___fladd
  7359  004180                     l1576:
  7360  004180  0012               	return	
  7361  004182                     __end_of___fladd:
  7362                           	opt stack 0
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           prodh	equ	0xFF4
  7368                           prodl	equ	0xFF3
  7369                           postinc0	equ	0xFEE
  7370                           wreg	equ	0xFE8
  7371                           postdec1	equ	0xFE5
  7372                           fsr1h	equ	0xFE2
  7373                           fsr1l	equ	0xFE1
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           fsr2h	equ	0xFDA
  7378                           fsr2l	equ	0xFD9
  7379                           status	equ	0xFD8
  7380                           
  7381 ;; *************** function _Celsius2Kelvin *****************
  7382 ;; Defined at:
  7383 ;;		line 61 in file "../ntc.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  tc              4   58[COMRAM] unsigned char 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  4   58[COMRAM] unsigned char 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7397 ;;      Params:         4       0       0       0       0       0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0
  7400 ;;      Totals:         4       0       0       0       0       0       0
  7401 ;;Total ram usage:        4 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    4
  7404 ;; This function calls:
  7405 ;;		___fladd
  7406 ;; This function is called by:
  7407 ;;		_setEventData
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text32
  7412  0059A4                     __ptext32:
  7413                           	opt stack 0
  7414  0059A4                     _Celsius2Kelvin:
  7415                           	opt stack 23
  7416                           
  7417                           ;ntc.c: 62: return (27316.0 + tc);
  7418                           
  7419                           ;incstack = 0
  7420                           ;incstack = 0
  7421  0059A4  C03B  F060         	movff	Celsius2Kelvin@tc,?___fladd
  7422  0059A8  C03C  F061         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7423  0059AC  C03D  F062         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7424  0059B0  C03E  F063         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7425  0059B4  0100               	movlb	0	; () banked
  7426  0059B6  6B64               	clrf	(?___fladd+4)& (0+255),b
  7427  0059B8  0E68               	movlw	104
  7428  0059BA  6F65               	movwf	(?___fladd+5)& (0+255),b
  7429  0059BC  0ED5               	movlw	213
  7430  0059BE  6F66               	movwf	(?___fladd+6)& (0+255),b
  7431  0059C0  0E46               	movlw	70
  7432  0059C2  6F67               	movwf	(?___fladd+7)& (0+255),b
  7433  0059C4  EC09  F020         	call	___fladd	;wreg free
  7434  0059C8  C063  F03E         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7435  0059CC  C062  F03D         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7436  0059D0  C061  F03C         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7437  0059D4  C060  F03B         	movff	?___fladd,?_Celsius2Kelvin
  7438  0059D8  0012               	return	
  7439  0059DA                     __end_of_Celsius2Kelvin:
  7440                           	opt stack 0
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           postinc0	equ	0xFEE
  7448                           wreg	equ	0xFE8
  7449                           postdec1	equ	0xFE5
  7450                           fsr1h	equ	0xFE2
  7451                           fsr1l	equ	0xFE1
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           fsr2h	equ	0xFDA
  7456                           fsr2l	equ	0xFD9
  7457                           status	equ	0xFD8
  7458                           
  7459 ;; *************** function _vscp_handleProtocolEvent *****************
  7460 ;; Defined at:
  7461 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;  bytes           1   44[BANK0 ] unsigned char 
  7466 ;;  page_save       2   40[BANK0 ] unsigned short 
  7467 ;;  i               1   50[BANK0 ] unsigned char 
  7468 ;;  bytes           2   54[BANK0 ] unsigned short 
  7469 ;;  page_save       2   38[BANK0 ] unsigned short 
  7470 ;;  byte            1   53[BANK0 ] unsigned char 
  7471 ;;  cb              1   49[BANK0 ] unsigned char 
  7472 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7473 ;;  j               1   58[BANK0 ] unsigned char 
  7474 ;;  i               1   56[BANK0 ] unsigned char 
  7475 ;;  k               1   51[BANK0 ] unsigned char 
  7476 ;;  i               1   52[BANK0 ] unsigned char 
  7477 ;;  len             1   47[BANK0 ] unsigned char 
  7478 ;;  pos             1   46[BANK0 ] unsigned char 
  7479 ;;  i               1   57[BANK0 ] unsigned char 
  7480 ;;  len             1   45[BANK0 ] unsigned char 
  7481 ;;  pos             1   43[BANK0 ] unsigned char 
  7482 ;;  offset          1   42[BANK0 ] unsigned char 
  7483 ;; Return value:  Size  Location     Type
  7484 ;;		None               void
  7485 ;; Registers used:
  7486 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : F/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7492 ;;      Params:         0       0       0       0       0       0       0
  7493 ;;      Locals:         0      21       0       0       0       0       0
  7494 ;;      Temps:          0       7       0       0       0       0       0
  7495 ;;      Totals:         0      28       0       0       0       0       0
  7496 ;;Total ram usage:       28 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    8
  7499 ;; This function calls:
  7500 ;;		_vscp_init
  7501 ;;		_vscp_sendEvent
  7502 ;;		_vscp_readAppReg
  7503 ;;		_vscp_writeAppReg
  7504 ;;		_vscp_getGUID
  7505 ;;		_vscp_getMDF_URL
  7506 ;;		_vscp_getMatrixInfo
  7507 ;;		_vscp_goBootloaderMode
  7508 ;;		_vscp_handleHeartbeat
  7509 ;;		_vscp_handleSetNickname
  7510 ;;		_vscp_handleDropNickname
  7511 ;;		_vscp_newNodeOnline
  7512 ;;		_vscp_readRegister
  7513 ;;		_vscp_readStdReg
  7514 ;;		_vscp_writeRegister
  7515 ;;		_vscp_writeStdReg
  7516 ;;		___lbmod
  7517 ;; This function is called by:
  7518 ;;		_main
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           	psect	text33
  7523  003220                     __ptext33:
  7524                           	opt stack 0
  7525  003220                     _vscp_handleProtocolEvent:
  7526                           	opt stack 22
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7530                           
  7531                           ;incstack = 0
  7532                           ;incstack = 0
  7533  003220  51C4               	movf	(_vscp_imsg+3)& (0+255),w,b
  7534  003222  11C3               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7535  003224  E101 D2EF          	bz	l10112
  7536  003228  D31F               	goto	l1272
  7537  00322A                     l9694:
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7541  00322A  EC3D  F02C         	call	_vscp_handleHeartbeat	;wreg free
  7542                           
  7543                           ;vscp_firmware.c: 807: break;
  7544  00322E  D31C               	goto	l1272
  7545  003230                     l9696:
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7549  003230  EC46  F02D         	call	_vscp_newNodeOnline	;wreg free
  7550                           
  7551                           ;vscp_firmware.c: 812: break;
  7552  003234  D319               	goto	l1272
  7553  003236                     l9698:
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7557  003236  ECD0  F02D         	call	_vscp_handleSetNickname	;wreg free
  7558                           
  7559                           ;vscp_firmware.c: 817: break;
  7560  00323A  D316               	goto	l1272
  7561  00323C                     l9700:
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7565  00323C  ECED  F02C         	call	_vscp_handleDropNickname	;wreg free
  7566                           
  7567                           ;vscp_firmware.c: 822: break;
  7568  003240  D313               	goto	l1272
  7569  003242                     l9702:
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7573                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7574  003242  51C1               	movf	_vscp_imsg& (0+255),w,b
  7575  003244  0B0F               	andlw	15
  7576  003246  0A02               	xorlw	2
  7577  003248  E001 D30E          	bnz	l1272
  7578                           
  7579                           ; BSR set to: 0
  7580  00324C  51BF               	movf	_vscp_nickname& (0+255),w,b
  7581  00324E  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7582  003252  62DF               	cpfseq	indf2,c
  7583  003254  D309               	goto	l1272
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7587  003256  0E80               	movlw	128
  7588  003258  61C8               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7589  00325A  D012               	goto	l9722
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7593  00325C  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7594  00325E  EC45  F015         	call	_vscp_readAppReg
  7595  003262                     L8:
  7596  003262  0100               	movlb	0	; () banked
  7597  003264  6FD5               	movwf	(_vscp_omsg+6)& (0+255),b
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7601  003266  C0C8  F0D4         	movff	_vscp_imsg+7,_vscp_omsg+5
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7605  00326A  0E03               	movlw	3
  7606  00326C  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7610  00326E  0E82               	movlw	130
  7611  003270  6FCF               	movwf	_vscp_omsg& (0+255),b
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7615  003272  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  7616  003274  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7620  003276  0E0A               	movlw	10
  7621  003278  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  7622  00327A                     l9720:
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7626  00327A  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  7627                           
  7628                           ;vscp_firmware.c: 844: }
  7629  00327E  D2F4               	goto	l1272
  7630  003280                     l9722:
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;vscp_firmware.c: 845: else {
  7634                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7635                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7636  003280  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7637  003282  EC32  F01F         	call	_vscp_readStdReg
  7638  003286  D7ED               	goto	L8
  7639  003288                     l9736:
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7643                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7644  003288  51C1               	movf	_vscp_imsg& (0+255),w,b
  7645  00328A  0B0F               	andlw	15
  7646  00328C  0A03               	xorlw	3
  7647  00328E  E001 D2EB          	bnz	l1272
  7648                           
  7649                           ; BSR set to: 0
  7650  003292  51BF               	movf	_vscp_nickname& (0+255),w,b
  7651  003294  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7652  003298  62DF               	cpfseq	indf2,c
  7653  00329A  D2E6               	goto	l1272
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7657  00329C  0E80               	movlw	128
  7658  00329E  61C8               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7659  0032A0  D006               	goto	l9756
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7663                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7664  0032A2  C0C9  F021         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7665  0032A6  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7666  0032A8  ECB7  F005         	call	_vscp_writeAppReg
  7667  0032AC  D7DA               	goto	L8
  7668  0032AE                     l9756:
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;vscp_firmware.c: 888: else {
  7672                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7673                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7674  0032AE  C0C9  F022         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7675  0032B2  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7676  0032B4  EC65  F023         	call	_vscp_writeStdReg
  7677  0032B8  D7D4               	goto	L8
  7678  0032BA                     l9770:
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7682                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7683                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7684                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7685                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7686                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7687                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7688  0032BA  51BF               	movf	_vscp_nickname& (0+255),w,b
  7689  0032BC  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7690  0032C0  62DF               	cpfseq	indf2,c
  7691  0032C2  D2D2               	goto	l1272
  7692                           
  7693                           ; BSR set to: 0
  7694  0032C4  0E00               	movlw	0
  7695  0032C6  EC9E  F02E         	call	_vscp_getGUID
  7696  0032CA  0100               	movlb	0	; () banked
  7697  0032CC  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7698  0032CE  E001 D2CB          	bnz	l1272
  7699                           
  7700                           ; BSR set to: 0
  7701  0032D2  0E03               	movlw	3
  7702  0032D4  EC9E  F02E         	call	_vscp_getGUID
  7703  0032D8  0100               	movlb	0	; () banked
  7704  0032DA  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7705  0032DC  E001 D2C4          	bnz	l1272
  7706                           
  7707                           ; BSR set to: 0
  7708  0032E0  0E05               	movlw	5
  7709  0032E2  EC9E  F02E         	call	_vscp_getGUID
  7710  0032E6  0100               	movlb	0	; () banked
  7711  0032E8  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7712  0032EA  E001 D2BD          	bnz	l1272
  7713                           
  7714                           ; BSR set to: 0
  7715  0032EE  0E07               	movlw	7
  7716  0032F0  EC9E  F02E         	call	_vscp_getGUID
  7717  0032F4  0100               	movlb	0	; () banked
  7718  0032F6  19CC               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7719  0032F8  E001 D2B6          	bnz	l1272
  7720                           
  7721                           ; BSR set to: 0
  7722  0032FC  5047               	movf	_vscp_page_select+1,w,c
  7723  0032FE  19CD               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7724  003300  E001 D2B2          	bnz	l1272
  7725                           
  7726                           ; BSR set to: 0
  7727  003304  5046               	movf	_vscp_page_select,w,c
  7728  003306  EE20  F0CE         	lfsr	2,_vscp_imsg+13
  7729  00330A  62DF               	cpfseq	indf2,c
  7730  00330C  D2AD               	goto	l1272
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7734  00330E  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  7735  003310  EC72  F02E         	call	_vscp_goBootloaderMode
  7736  003314  D2A9               	goto	l1272
  7737  003316                     l9786:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7741                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7742                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7743                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7744  003316  0E00               	movlw	0
  7745  003318  EC9E  F02E         	call	_vscp_getGUID
  7746  00331C  0100               	movlb	0	; () banked
  7747  00331E  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7748  003320  E173               	bnz	l9830
  7749                           
  7750                           ; BSR set to: 0
  7751  003322  0E01               	movlw	1
  7752  003324  EC9E  F02E         	call	_vscp_getGUID
  7753  003328  0100               	movlb	0	; () banked
  7754  00332A  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7755  00332C  E16D               	bnz	l9830
  7756                           
  7757                           ; BSR set to: 0
  7758  00332E  0E02               	movlw	2
  7759  003330  EC9E  F02E         	call	_vscp_getGUID
  7760  003334  0100               	movlb	0	; () banked
  7761  003336  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7762  003338  E167               	bnz	l9830
  7763                           
  7764                           ; BSR set to: 0
  7765  00333A  0E03               	movlw	3
  7766  00333C  EC9E  F02E         	call	_vscp_getGUID
  7767  003340  0100               	movlb	0	; () banked
  7768  003342  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7769  003344  E161               	bnz	l9830
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7773  003346  884B               	bsf	_vscp_guid_reset,4,c
  7774  003348  D05F               	goto	l9830
  7775  00334A                     l9796:
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7779                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7780                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7781                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7782  00334A  0E04               	movlw	4
  7783  00334C  EC9E  F02E         	call	_vscp_getGUID
  7784  003350  0100               	movlb	0	; () banked
  7785  003352  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7786  003354  E159               	bnz	l9830
  7787                           
  7788                           ; BSR set to: 0
  7789  003356  0E05               	movlw	5
  7790  003358  EC9E  F02E         	call	_vscp_getGUID
  7791  00335C  0100               	movlb	0	; () banked
  7792  00335E  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7793  003360  E153               	bnz	l9830
  7794                           
  7795                           ; BSR set to: 0
  7796  003362  0E06               	movlw	6
  7797  003364  EC9E  F02E         	call	_vscp_getGUID
  7798  003368  0100               	movlb	0	; () banked
  7799  00336A  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7800  00336C  E14D               	bnz	l9830
  7801                           
  7802                           ; BSR set to: 0
  7803  00336E  0E07               	movlw	7
  7804  003370  EC9E  F02E         	call	_vscp_getGUID
  7805  003374  0100               	movlb	0	; () banked
  7806  003376  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7807  003378  E147               	bnz	l9830
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7811  00337A  8A4B               	bsf	_vscp_guid_reset,5,c
  7812  00337C  D045               	goto	l9830
  7813  00337E                     l9806:
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7817                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7818                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7819                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7820  00337E  0E08               	movlw	8
  7821  003380  EC9E  F02E         	call	_vscp_getGUID
  7822  003384  0100               	movlb	0	; () banked
  7823  003386  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7824  003388  E13F               	bnz	l9830
  7825                           
  7826                           ; BSR set to: 0
  7827  00338A  0E09               	movlw	9
  7828  00338C  EC9E  F02E         	call	_vscp_getGUID
  7829  003390  0100               	movlb	0	; () banked
  7830  003392  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7831  003394  E139               	bnz	l9830
  7832                           
  7833                           ; BSR set to: 0
  7834  003396  0E0A               	movlw	10
  7835  003398  EC9E  F02E         	call	_vscp_getGUID
  7836  00339C  0100               	movlb	0	; () banked
  7837  00339E  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7838  0033A0  E133               	bnz	l9830
  7839                           
  7840                           ; BSR set to: 0
  7841  0033A2  0E0B               	movlw	11
  7842  0033A4  EC9E  F02E         	call	_vscp_getGUID
  7843  0033A8  0100               	movlb	0	; () banked
  7844  0033AA  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7845  0033AC  E12D               	bnz	l9830
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7849  0033AE  8C4B               	bsf	_vscp_guid_reset,6,c
  7850  0033B0  D02B               	goto	l9830
  7851  0033B2                     l9816:
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7855                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7856                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7857                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7858  0033B2  0E0C               	movlw	12
  7859  0033B4  EC9E  F02E         	call	_vscp_getGUID
  7860  0033B8  0100               	movlb	0	; () banked
  7861  0033BA  19C8               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7862  0033BC  E125               	bnz	l9830
  7863                           
  7864                           ; BSR set to: 0
  7865  0033BE  0E0D               	movlw	13
  7866  0033C0  EC9E  F02E         	call	_vscp_getGUID
  7867  0033C4  0100               	movlb	0	; () banked
  7868  0033C6  19C9               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7869  0033C8  E11F               	bnz	l9830
  7870                           
  7871                           ; BSR set to: 0
  7872  0033CA  0E0E               	movlw	14
  7873  0033CC  EC9E  F02E         	call	_vscp_getGUID
  7874  0033D0  0100               	movlb	0	; () banked
  7875  0033D2  19CA               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7876  0033D4  E119               	bnz	l9830
  7877                           
  7878                           ; BSR set to: 0
  7879  0033D6  0E0F               	movlw	15
  7880  0033D8  EC9E  F02E         	call	_vscp_getGUID
  7881  0033DC  0100               	movlb	0	; () banked
  7882  0033DE  19CB               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7883  0033E0  E113               	bnz	l9830
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7887  0033E2  8E4B               	bsf	_vscp_guid_reset,7,c
  7888  0033E4  D011               	goto	l9830
  7889  0033E6                     l1212:
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7893  0033E6  6A4B               	clrf	_vscp_guid_reset,c
  7894                           
  7895                           ;vscp_firmware.c: 965: break;
  7896  0033E8  D00F               	goto	l9830
  7897  0033EA                     l9828:
  7898                           
  7899                           ; BSR set to: 0
  7900  0033EA  39C7               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7901  0033EC  0B0F               	andlw	15
  7902  0033EE  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7903  0033F0  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7904                           
  7905                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7906                           ; Switch size 1, requested type "speed"
  7907                           ; Number of cases is 1, Range of values is 0 to 0
  7908                           ; switch strategies available:
  7909                           ; Name         Instructions Cycles
  7910                           ; simple_byte            4     3 (average)
  7911                           ;	Chosen strategy is simple_byte
  7912  0033F2  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7913  0033F4  E1F8               	bnz	l1212
  7914                           
  7915                           ; BSR set to: 0
  7916                           ; Switch size 1, requested type "speed"
  7917                           ; Number of cases is 4, Range of values is 0 to 3
  7918                           ; switch strategies available:
  7919                           ; Name         Instructions Cycles
  7920                           ; simple_byte           13     7 (average)
  7921                           ;	Chosen strategy is simple_byte
  7922  0033F6  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7923  0033F8  E08E               	bz	l9786
  7924  0033FA  0A01               	xorlw	1	; case 1
  7925  0033FC  E0A6               	bz	l9796
  7926  0033FE  0A03               	xorlw	3	; case 2
  7927  003400  E0BE               	bz	l9806
  7928  003402  0A01               	xorlw	1	; case 3
  7929  003404  E0D6               	bz	l9816
  7930  003406  D7EF               	goto	l1212
  7931  003408                     l9830:
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7935  003408  504B               	movf	_vscp_guid_reset,w,c
  7936  00340A  0BF0               	andlw	240
  7937  00340C  0AF0               	xorlw	240
  7938  00340E  E001 D22B          	bnz	l1272
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;vscp_firmware.c: 970: vscp_init();
  7942  003412  ECD9  F02B         	call	_vscp_init	;wreg free
  7943  003416  D228               	goto	l1272
  7944  003418                     l9834:
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7948  003418  51BF               	movf	_vscp_nickname& (0+255),w,b
  7949  00341A  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  7950  00341E  62DF               	cpfseq	indf2,c
  7951  003420  D223               	goto	l1272
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;vscp_firmware.c: 978: uint8_t i;
  7955                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7956  003422  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7957                           
  7958                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7959  003424  C0C8  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7960                           
  7961                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7962  003428  C0C9  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7963                           
  7964                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7965  00342C  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7966  00342E  D049               	goto	l9866
  7967  003430                     l9838:
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7971  003430  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7972  003432  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7973  003434  EC34  F02E         	call	_vscp_readRegister
  7974  003438  0100               	movlb	0	; () banked
  7975  00343A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7976  00343C  0E07               	movlw	7
  7977  00343E  6E0E               	movwf	?___lbmod,c
  7978  003440  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7979  003442  EC70  F02D         	call	___lbmod
  7980  003446  0100               	movlb	0	; () banked
  7981  003448  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7982  00344A  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7983  00344C  0FD5               	addlw	low (_vscp_omsg+6)
  7984  00344E  6ED9               	movwf	fsr2l,c
  7985  003450  6ADA               	clrf	fsr2h,c
  7986  003452  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7990  003456  0E07               	movlw	7
  7991  003458  6E0E               	movwf	?___lbmod,c
  7992  00345A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7993  00345C  EC70  F02D         	call	___lbmod
  7994  003460  0A06               	xorlw	6
  7995  003462  E00B               	bz	l9844
  7996  003464  0EFF               	movlw	255
  7997  003466  0100               	movlb	0	; () banked
  7998  003468  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7999  00346A  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8000  00346C  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8001  00346E  0EFF               	movlw	255
  8002  003470  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8003  003472  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8004  003474  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8005  003476  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8006  003478  E123               	bnz	l9864
  8007  00347A                     l9844:
  8008                           
  8009                           ;vscp_firmware.c: 988: uint8_t bytes;
  8010                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  8011  00347A  0E07               	movlw	7
  8012  00347C  6E0E               	movwf	?___lbmod,c
  8013  00347E  0100               	movlb	0	; () banked
  8014  003480  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8015  003482  EC70  F02D         	call	___lbmod
  8016  003486  0A06               	xorlw	6
  8017  003488  E103               	bnz	l9848
  8018                           
  8019                           ;vscp_firmware.c: 991: bytes = 7;
  8020  00348A  0E07               	movlw	7
  8021  00348C  0100               	movlb	0	; () banked
  8022  00348E  D009               	goto	L9
  8023  003490                     l9848:
  8024                           
  8025                           ;vscp_firmware.c: 993: else {
  8026                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  8027  003490  0E07               	movlw	7
  8028  003492  6E0E               	movwf	?___lbmod,c
  8029  003494  0100               	movlb	0	; () banked
  8030  003496  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  8031  003498  EC70  F02D         	call	___lbmod
  8032  00349C  0100               	movlb	0	; () banked
  8033  00349E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8034  0034A0  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8035  0034A2                     L9:
  8036  0034A2  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;vscp_firmware.c: 995: }
  8040                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  8041  0034A4  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  8042  0034A6  0F81               	addlw	129
  8043  0034A8  6FCF               	movwf	_vscp_omsg& (0+255),b
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  8047  0034AA  0E07               	movlw	7
  8048  0034AC  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  8052  0034AE  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8053  0034B0  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  8057  0034B2  0E1A               	movlw	26
  8058  0034B4  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  8062  0034B6  C08B  F0D4         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8066  0034BA  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;vscp_firmware.c: 1005: pos++;
  8070  0034BE  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8071  0034C0                     l9864:
  8072                           
  8073                           ; BSR set to: 0
  8074  0034C0  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8075  0034C2                     l9866:
  8076                           
  8077                           ; BSR set to: 0
  8078  0034C2  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8079  0034C4  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8080  0034C6  E301 D1CF          	bc	l1272
  8081  0034CA  D7B2               	goto	l9838
  8082  0034CC                     l9868:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8086  0034CC  51BF               	movf	_vscp_nickname& (0+255),w,b
  8087  0034CE  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8088  0034D2  62DF               	cpfseq	indf2,c
  8089  0034D4  D1C9               	goto	l1272
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;vscp_firmware.c: 1014: uint8_t i;
  8093                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8094  0034D6  C0C8  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1156
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8098  0034DA  51C1               	movf	_vscp_imsg& (0+255),w,b
  8099  0034DC  0FFE               	addlw	254
  8100  0034DE  0B07               	andlw	7
  8101  0034E0  6F8F               	movwf	vscp_handleProtocolEvent@len_1157& (0+255),b
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8105  0034E2  6B94               	clrf	vscp_handleProtocolEvent@i_1155& (0+255),b
  8106  0034E4  D018               	goto	l9882
  8107  0034E6                     l9876:
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8111  0034E6  5194               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8112  0034E8  0FC9               	addlw	low (_vscp_imsg+8)
  8113  0034EA  6ED9               	movwf	fsr2l,c
  8114  0034EC  6ADA               	clrf	fsr2h,c
  8115  0034EE  50DF               	movf	indf2,w,c
  8116  0034F0  6E29               	movwf	?_vscp_writeRegister,c
  8117  0034F2  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8118  0034F4  2594               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8119  0034F6  ECF4  F02D         	call	_vscp_writeRegister
  8120                           
  8121                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8122  0034FA  0100               	movlb	0	; () banked
  8123  0034FC  518E               	movf	vscp_handleProtocolEvent@pos_1156& (0+255),w,b
  8124  0034FE  2594               	addwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8125  003500  EC34  F02E         	call	_vscp_readRegister
  8126  003504  0100               	movlb	0	; () banked
  8127  003506  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8128  003508  5194               	movf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8129  00350A  0FD5               	addlw	low (_vscp_omsg+6)
  8130  00350C  6ED9               	movwf	fsr2l,c
  8131  00350E  6ADA               	clrf	fsr2h,c
  8132  003510  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8133                           
  8134                           ; BSR set to: 0
  8135  003514  2B94               	incf	vscp_handleProtocolEvent@i_1155& (0+255),f,b
  8136  003516                     l9882:
  8137                           
  8138                           ; BSR set to: 0
  8139  003516  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8140  003518  5D94               	subwf	vscp_handleProtocolEvent@i_1155& (0+255),w,b
  8141  00351A  E3E5               	bnc	l9876
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;vscp_firmware.c: 1022: }
  8145                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8146  00351C  0E07               	movlw	7
  8147  00351E  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8151  003520  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8152  003522  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8153                           
  8154                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8155  003524  0E1A               	movlw	26
  8156  003526  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8160  003528  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8164  00352A  518F               	movf	vscp_handleProtocolEvent@len_1157& (0+255),w,b
  8165  00352C  0F81               	addlw	129
  8166  00352E  6FCF               	movwf	_vscp_omsg& (0+255),b
  8167  003530  D6A4               	goto	l9720
  8168  003532                     l9894:
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8172  003532  51BF               	movf	_vscp_nickname& (0+255),w,b
  8173  003534  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8174  003538  62DF               	cpfseq	indf2,c
  8175  00353A  D196               	goto	l1272
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8179                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8180                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8181  00353C  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8182  00353E  EC45  F015         	call	_vscp_readAppReg
  8183  003542  0100               	movlb	0	; () banked
  8184  003544  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8185  003546  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8186  003548  6E21               	movwf	?_vscp_writeAppReg,c
  8187  00354A  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8188  00354C  ECB7  F005         	call	_vscp_writeAppReg
  8189  003550  D688               	goto	L8
  8190  003552                     l9910:
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8194  003552  51BF               	movf	_vscp_nickname& (0+255),w,b
  8195  003554  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8196  003558  62DF               	cpfseq	indf2,c
  8197  00355A  D186               	goto	l1272
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8201                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8202                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8203  00355C  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8204  00355E  EC45  F015         	call	_vscp_readAppReg
  8205  003562  0100               	movlb	0	; () banked
  8206  003564  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8207  003566  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8208  003568  6E21               	movwf	?_vscp_writeAppReg,c
  8209  00356A  51C8               	movf	(_vscp_imsg+7)& (0+255),w,b
  8210  00356C  ECB7  F005         	call	_vscp_writeAppReg
  8211  003570  D678               	goto	L8
  8212  003572                     l9926:
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8216                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8217  003572  51C7               	movf	(_vscp_imsg+6)& (0+255),w,b
  8218  003574  19BF               	xorwf	_vscp_nickname& (0+255),w,b
  8219  003576  E003               	bz	l1236
  8220                           
  8221                           ; BSR set to: 0
  8222  003578  29C7               	incf	(_vscp_imsg+6)& (0+255),w,b
  8223  00357A  E001 D175          	bnz	l1272
  8224  00357E                     l1236:
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8228  00357E  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8232  003580  0E03               	movlw	3
  8233  003582  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8234                           
  8235                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8236  003584  0E88               	movlw	136
  8237  003586  6FCF               	movwf	_vscp_omsg& (0+255),b
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8241  003588  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8242  00358A  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8243                           
  8244                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8245  00358C  0E20               	movlw	32
  8246  00358E  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8250  003590  6B98               	clrf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8251  003592                     l1237:
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;vscp_firmware.c: 1091: {
  8255                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8256  003592  C098  F0D4         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8260  003596  0E01               	movlw	1
  8261  003598  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8262  00359A                     l9946:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8266  00359A  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8267  00359C  0FD4               	addlw	low (_vscp_omsg+5)
  8268  00359E  6ED9               	movwf	fsr2l,c
  8269  0035A0  6ADA               	clrf	fsr2h,c
  8270  0035A2  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8271  0035A4  080F               	sublw	15
  8272  0035A6  EC9E  F02E         	call	_vscp_getGUID
  8273  0035AA  6EDF               	movwf	indf2,c
  8274  0035AC  0100               	movlb	0	; () banked
  8275  0035AE  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;vscp_firmware.c: 1096: if (k > 16)
  8279  0035B0  0E10               	movlw	16
  8280  0035B2  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8281  0035B4  D001               	goto	l9954
  8282  0035B6  D004               	goto	l9958
  8283  0035B8                     l9954:
  8284                           
  8285                           ; BSR set to: 0
  8286  0035B8  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8287                           
  8288                           ; BSR set to: 0
  8289  0035BA  0E07               	movlw	7
  8290  0035BC  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8291  0035BE  D7ED               	goto	l9946
  8292  0035C0                     l9958:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;vscp_firmware.c: 1098: }
  8296                           ;vscp_firmware.c: 1100: if (k > 16)
  8297  0035C0  0E10               	movlw	16
  8298  0035C2  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8299  0035C4  D001               	goto	l9962
  8300  0035C6  D006               	goto	l1238
  8301  0035C8                     l9962:
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8305  0035C8  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  8306                           
  8307                           ; BSR set to: 0
  8308  0035CC  2B98               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8309                           
  8310                           ; BSR set to: 0
  8311  0035CE  0E02               	movlw	2
  8312  0035D0  6598               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8313  0035D2  D7DF               	goto	l1237
  8314  0035D4                     l1238:
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;vscp_firmware.c: 1104: }
  8318                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8319  0035D4  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8320  0035D6                     l9972:
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;vscp_firmware.c: 1107: {
  8324                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8325  0035D6  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8326  0035D8  EC66  F02E         	call	_vscp_getMDF_URL
  8327  0035DC  0900               	iorlw	0
  8328  0035DE  E008               	bz	l9976
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8332  0035E0  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8333  0035E2  0FD7               	addlw	low (_vscp_omsg+8)
  8334  0035E4  6ED9               	movwf	fsr2l,c
  8335  0035E6  6ADA               	clrf	fsr2h,c
  8336  0035E8  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8337  0035EA  EC66  F02E         	call	_vscp_getMDF_URL
  8338  0035EE  D005               	goto	L10
  8339  0035F0                     l9976:
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;vscp_firmware.c: 1110: else
  8343                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8344  0035F0  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8345  0035F2  0FD7               	addlw	low (_vscp_omsg+8)
  8346  0035F4  6ED9               	movwf	fsr2l,c
  8347  0035F6  6ADA               	clrf	fsr2h,c
  8348  0035F8  0E00               	movlw	0
  8349  0035FA                     L10:
  8350  0035FA  6EDF               	movwf	indf2,c
  8351                           
  8352                           ; BSR set to: 0
  8353  0035FC  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8354                           
  8355                           ; BSR set to: 0
  8356  0035FE  0E04               	movlw	4
  8357  003600  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8358  003602  D7E9               	goto	l9972
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;vscp_firmware.c: 1112: }
  8362                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8363  003604  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;vscp_firmware.c: 1116: k = 5;
  8367  003608  0E05               	movlw	5
  8368  00360A  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8372  00360C  0E03               	movlw	3
  8373  00360E  6F98               	movwf	vscp_handleProtocolEvent@i_1158& (0+255),b
  8374  003610                     l1247:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;vscp_firmware.c: 1118: {
  8378                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8379  003610  C098  F0D4         	movff	vscp_handleProtocolEvent@i_1158,_vscp_omsg+5
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8383  003614  0E01               	movlw	1
  8384  003616  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8385  003618                     l9998:
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8389  003618  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8390  00361A  0FD4               	addlw	low (_vscp_omsg+5)
  8391  00361C  6ED9               	movwf	fsr2l,c
  8392  00361E  6ADA               	clrf	fsr2h,c
  8393  003620  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8394  003622  EC66  F02E         	call	_vscp_getMDF_URL
  8395  003626  6EDF               	movwf	indf2,c
  8396                           
  8397                           ; BSR set to: 0
  8398  003628  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8399                           
  8400                           ; BSR set to: 0
  8401  00362A  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8402                           
  8403                           ; BSR set to: 0
  8404  00362C  0E07               	movlw	7
  8405  00362E  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8406  003630  D7F3               	goto	l9998
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;vscp_firmware.c: 1123: }
  8410                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8411  003632  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  8412                           
  8413                           ; BSR set to: 0
  8414  003636  2B98               	incf	vscp_handleProtocolEvent@i_1158& (0+255),f,b
  8415                           
  8416                           ; BSR set to: 0
  8417  003638  0E06               	movlw	6
  8418  00363A  6598               	cpfsgt	vscp_handleProtocolEvent@i_1158& (0+255),b
  8419  00363C  D7E9               	goto	l1247
  8420  00363E  D114               	goto	l1272
  8421  003640                     l10012:
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8425  003640  51BF               	movf	_vscp_nickname& (0+255),w,b
  8426  003642  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8427  003646  62DF               	cpfseq	indf2,c
  8428  003648  D10F               	goto	l1272
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8432  00364A  0E03               	movlw	3
  8433  00364C  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8434                           
  8435                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8436  00364E  0E87               	movlw	135
  8437  003650  6FCF               	movwf	_vscp_omsg& (0+255),b
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8441  003652  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8442  003654  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8443                           
  8444                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8445  003656  0E22               	movlw	34
  8446  003658  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8450  00365A  0ED4               	movlw	(_vscp_omsg+5)& (0+255)
  8451  00365C  EC41  F02E         	call	_vscp_getMatrixInfo
  8452  003660  D60C               	goto	l9720
  8453  003662                     l10022:
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8457  003662  51BF               	movf	_vscp_nickname& (0+255),w,b
  8458  003664  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8459  003668  62DF               	cpfseq	indf2,c
  8460  00366A  D0FE               	goto	l1272
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8464  00366C  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8468                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8469  00366E  C0C1  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8470  003672  0E0F               	movlw	15
  8471  003674  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8472  003676  0E04               	movlw	4
  8473  003678  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8474  00367A  E312               	bnc	l10038
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8478  00367C  C0CB  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1162
  8479  003680  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8483  003682  5197               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8484  003684  1196               	iorwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8485  003686  E103               	bnz	l10034
  8486                           
  8487                           ; BSR set to: 0
  8488  003688  0E01               	movlw	1
  8489  00368A  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8490  00368C  6B96               	clrf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8491  00368E                     l10034:
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8495  00368E  0E01               	movlw	1
  8496  003690  5D96               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8497  003692  0E01               	movlw	1
  8498  003694  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8499  003696  E307               	bnc	l10040
  8500                           
  8501                           ; BSR set to: 0
  8502  003698  0E01               	movlw	1
  8503  00369A  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8504  00369C  0E00               	movlw	0
  8505  00369E  D002               	goto	L12
  8506  0036A0                     l10038:
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;vscp_firmware.c: 1173: else {
  8510                           ;vscp_firmware.c: 1174: bytes = 1;
  8511  0036A0  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),b
  8512  0036A2  0E01               	movlw	1
  8513  0036A4                     L12:
  8514  0036A4  6F96               	movwf	vscp_handleProtocolEvent@bytes_1162& (0+255),b
  8515  0036A6                     l10040:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;vscp_firmware.c: 1175: }
  8519                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8520  0036A6  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8521  0036AA  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8525  0036AE  51C9               	movf	(_vscp_imsg+8)& (0+255),w,b
  8526  0036B0  C0C8  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8527  0036B4  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8528  0036B6  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8529  0036BA  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8530  0036BC  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8531  0036BE  6E46               	movwf	_vscp_page_select,c
  8532  0036C0  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8533  0036C2  6E47               	movwf	_vscp_page_select+1,c
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8537  0036C4  0E07               	movlw	7
  8538  0036C6  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8542  0036C8  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8543  0036CA  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8547  0036CC  0E27               	movlw	39
  8548  0036CE  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8552  0036D0  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8556  0036D2  C0C8  F0D5         	movff	_vscp_imsg+7,_vscp_omsg+6
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8560  0036D6  C0C9  F0D6         	movff	_vscp_imsg+8,_vscp_omsg+7
  8561  0036DA                     l10056:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8565  0036DA  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8566  0036DC  5D96               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8567  0036DE  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8568  0036E0  0E00               	movlw	0
  8569  0036E2  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8570  0036E4  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8571  0036E6  0E04               	movlw	4
  8572  0036E8  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8573  0036EA  0E00               	movlw	0
  8574  0036EC  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8575  0036EE  E302               	bnc	l10060
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8579  0036F0  0E04               	movlw	4
  8580  0036F2  D002               	goto	L13
  8581  0036F4                     l10060:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 1198: else {
  8585                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8586  0036F4  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8587  0036F6  5D96               	subwf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8588  0036F8                     L13:
  8589  0036F8  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;vscp_firmware.c: 1200: }
  8593                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8594  0036FA  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8595  0036FC  0F84               	addlw	132
  8596  0036FE  6FCF               	movwf	_vscp_omsg& (0+255),b
  8597                           
  8598                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8599                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8600  003700  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8601  003702  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8602  003704  6FD7               	movwf	(_vscp_omsg+8)& (0+255),b
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8606  003706  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8607  003708  D00E               	goto	l10068
  8608  00370A                     l10064:
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8612                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8613  00370A  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8614  00370C  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8615  00370E  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8616  003710  EC34  F02E         	call	_vscp_readRegister
  8617  003714  0100               	movlb	0	; () banked
  8618  003716  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8619  003718  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8620  00371A  0FD8               	addlw	low (_vscp_omsg+9)
  8621  00371C  6ED9               	movwf	fsr2l,c
  8622  00371E  6ADA               	clrf	fsr2h,c
  8623  003720  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8624                           
  8625                           ; BSR set to: 0
  8626  003724  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8627  003726                     l10068:
  8628                           
  8629                           ; BSR set to: 0
  8630  003726  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8631  003728  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8632  00372A  E3EF               	bnc	l10064
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;vscp_firmware.c: 1211: }
  8636                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8637  00372C  EC84  F02D         	call	_vscp_sendEvent	;wreg free
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8641  003730  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8642  003732  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8646  003734  2BD4               	incf	(_vscp_omsg+5)& (0+255),f,b
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8650  003736  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8651  003738  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8652  00373A  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8653  00373C  5196               	movf	vscp_handleProtocolEvent@bytes_1162& (0+255),w,b
  8654  00373E  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8655  003740  5197               	movf	(vscp_handleProtocolEvent@bytes_1162+1)& (0+255),w,b
  8656  003742  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8657  003744  E3CA               	bnc	l10056
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8661  003746  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8662  00374A  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8663  00374E  D08C               	goto	l1272
  8664  003750                     l10078:
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8668  003750  51BF               	movf	_vscp_nickname& (0+255),w,b
  8669  003752  EE20  F0C7         	lfsr	2,_vscp_imsg+6
  8670  003756  62DF               	cpfseq	indf2,c
  8671  003758  D087               	goto	l1272
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;vscp_firmware.c: 1234: uint8_t i;
  8675                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8676                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8677  00375A  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1167
  8678  00375E  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1167+1
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8682  003762  51C9               	movf	(_vscp_imsg+8)& (0+255),w,b
  8683  003764  C0C8  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8684  003768  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8685  00376A  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8686  00376E  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8687  003770  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8688  003772  6E46               	movwf	_vscp_page_select,c
  8689  003774  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8690  003776  6E47               	movwf	_vscp_page_select+1,c
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8694  003778  C0CA  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1166
  8695                           
  8696                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8697                           ;vscp_firmware.c: 1248: i++) {
  8698  00377C  D014               	goto	l10090
  8699  00377E                     l10086:
  8700                           
  8701                           ; BSR set to: 0
  8702                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8703                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8704  00377E  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8705  003780  08CB               	sublw	low (_vscp_imsg+10)
  8706  003782  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8707  003784  6ED9               	movwf	fsr2l,c
  8708  003786  6ADA               	clrf	fsr2h,c
  8709  003788  50DF               	movf	indf2,w,c
  8710  00378A  6E29               	movwf	?_vscp_writeRegister,c
  8711  00378C  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8712  00378E  ECF4  F02D         	call	_vscp_writeRegister
  8713  003792  0100               	movlb	0	; () banked
  8714  003794  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8715  003796  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8716  003798  08D8               	sublw	low (_vscp_omsg+9)
  8717  00379A  2592               	addwf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8718  00379C  6ED9               	movwf	fsr2l,c
  8719  00379E  6ADA               	clrf	fsr2h,c
  8720  0037A0  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8721                           
  8722                           ; BSR set to: 0
  8723  0037A4  2B92               	incf	vscp_handleProtocolEvent@i_1166& (0+255),f,b
  8724  0037A6                     l10090:
  8725                           
  8726                           ; BSR set to: 0
  8727  0037A6  51C1               	movf	_vscp_imsg& (0+255),w,b
  8728  0037A8  0B0F               	andlw	15
  8729  0037AA  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8730  0037AC  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8731  0037AE  51CA               	movf	(_vscp_imsg+9)& (0+255),w,b
  8732  0037B0  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8733  0037B2  0E00               	movlw	0
  8734  0037B4  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8735  0037B6  0EFC               	movlw	252
  8736  0037B8  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8737  0037BA  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8738  0037BC  0EFF               	movlw	255
  8739  0037BE  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8740  0037C0  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8741  0037C2  5192               	movf	vscp_handleProtocolEvent@i_1166& (0+255),w,b
  8742  0037C4  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8743  0037C6  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8744  0037C8  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8745  0037CA  0A80               	xorlw	128
  8746  0037CC  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8747  0037CE  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8748  0037D0  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8749  0037D2  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8750  0037D4  0A80               	xorlw	128
  8751  0037D6  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8752  0037D8  E3D2               	bnc	l10086
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;vscp_firmware.c: 1251: }
  8756                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8757  0037DA  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1167,_vscp_page_select
  8758  0037DE  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1167+1,_vscp_page_select+1
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8762  0037E2  0E07               	movlw	7
  8763  0037E4  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8767  0037E6  51C1               	movf	_vscp_imsg& (0+255),w,b
  8768  0037E8  0B0F               	andlw	15
  8769  0037EA  0F80               	addlw	128
  8770  0037EC  6FCF               	movwf	_vscp_omsg& (0+255),b
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8774  0037EE  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
  8775  0037F0  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8779  0037F2  0E27               	movlw	39
  8780  0037F4  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8784  0037F6  6BD4               	clrf	(_vscp_omsg+5)& (0+255),b
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8788  0037F8  C0C8  F0D5         	movff	_vscp_imsg+7,_vscp_omsg+6
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8792  0037FC  C0C9  F0D6         	movff	_vscp_imsg+8,_vscp_omsg+7
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8796  003800  C0CA  F0D7         	movff	_vscp_imsg+9,_vscp_omsg+8
  8797  003804  D53A               	goto	l9720
  8798  003806                     l10112:
  8799                           
  8800                           ; BSR set to: 0
  8801  003806  51C5               	movf	(_vscp_imsg+4)& (0+255),w,b
  8802                           
  8803                           ; Switch size 1, requested type "speed"
  8804                           ; Number of cases is 16, Range of values is 1 to 38
  8805                           ; switch strategies available:
  8806                           ; Name         Instructions Cycles
  8807                           ; simple_byte           49    25 (average)
  8808                           ;	Chosen strategy is simple_byte
  8809  003808  0A01               	xorlw	1	; case 1
  8810  00380A  E101 D50E          	bz	l9694
  8811  00380E  0A03               	xorlw	3	; case 2
  8812  003810  E101 D50E          	bz	l9696
  8813  003814  0A04               	xorlw	4	; case 6
  8814  003816  E101 D50E          	bz	l9698
  8815  00381A  0A0E               	xorlw	14	; case 8
  8816  00381C  E101 D50E          	bz	l9700
  8817  003820  0A01               	xorlw	1	; case 9
  8818  003822  E101 D50E          	bz	l9702
  8819  003826  0A02               	xorlw	2	; case 11
  8820  003828  E101 D52E          	bz	l9736
  8821  00382C  0A07               	xorlw	7	; case 12
  8822  00382E  E101 D544          	bz	l9770
  8823  003832  0A1B               	xorlw	27	; case 23
  8824  003834  E101 D5D9          	bz	l9828
  8825  003838  0A0F               	xorlw	15	; case 24
  8826  00383A  E101 D5ED          	bz	l9834
  8827  00383E  0A01               	xorlw	1	; case 25
  8828  003840  E101 D644          	bz	l9868
  8829  003844  0A04               	xorlw	4	; case 29
  8830  003846  E101 D674          	bz	l9894
  8831  00384A  0A03               	xorlw	3	; case 30
  8832  00384C  E101 D681          	bz	l9910
  8833  003850  0A01               	xorlw	1	; case 31
  8834  003852  E101 D68E          	bz	l9926
  8835  003856  0A3E               	xorlw	62	; case 33
  8836  003858  E101 D6F2          	bz	l10012
  8837  00385C  0A04               	xorlw	4	; case 37
  8838  00385E  E101 D700          	bz	l10022
  8839  003862  0A03               	xorlw	3	; case 38
  8840  003864  E101 D774          	bz	l10078
  8841  003868                     l1272:
  8842  003868  0012               	return	
  8843  00386A                     __end_of_vscp_handleProtocolEvent:
  8844                           	opt stack 0
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           postinc0	equ	0xFEE
  8852                           wreg	equ	0xFE8
  8853                           postdec1	equ	0xFE5
  8854                           fsr1h	equ	0xFE2
  8855                           fsr1l	equ	0xFE1
  8856                           indf2	equ	0xFDF
  8857                           postinc2	equ	0xFDE
  8858                           postdec2	equ	0xFDD
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function ___lbmod *****************
  8864 ;; Defined at:
  8865 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;  dividend        1    wreg     unsigned char 
  8868 ;;  divisor         1   13[COMRAM] unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  dividend        1   14[COMRAM] unsigned char 
  8871 ;;  rem             1   16[COMRAM] unsigned char 
  8872 ;;  counter         1   15[COMRAM] unsigned char 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      unsigned char 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0
  8877 ;; Tracked objects:
  8878 ;;		On entry : F/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8882 ;;      Params:         1       0       0       0       0       0       0
  8883 ;;      Locals:         3       0       0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0
  8885 ;;      Totals:         4       0       0       0       0       0       0
  8886 ;;Total ram usage:        4 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    2
  8889 ;; This function calls:
  8890 ;;		Nothing
  8891 ;; This function is called by:
  8892 ;;		_vscp_handleProtocolEvent
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           	psect	text34
  8897  005AE0                     __ptext34:
  8898                           	opt stack 0
  8899  005AE0                     ___lbmod:
  8900                           	opt stack 27
  8901                           
  8902                           ;incstack = 0
  8903                           ;incstack = 0
  8904                           ;___lbmod@dividend stored from wreg
  8905  005AE0  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8906                           
  8907                           ; BSR set to: 0
  8908  005AE4  0E08               	movlw	8
  8909  005AE6  6E10               	movwf	___lbmod@counter,c
  8910                           
  8911                           ; BSR set to: 0
  8912  005AE8  6A11               	clrf	___lbmod@rem,c
  8913  005AEA                     l9130:
  8914  005AEA  90D8               	bcf	status,0,c
  8915  005AEC  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8916  005AEE  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8917  005AF0  6E11               	movwf	___lbmod@rem,c
  8918  005AF2  90D8               	bcf	status,0,c
  8919  005AF4  360F               	rlcf	___lbmod@dividend,f,c
  8920  005AF6  500E               	movf	___lbmod@divisor,w,c
  8921  005AF8  5C11               	subwf	___lbmod@rem,w,c
  8922  005AFA  E302               	bnc	l9138
  8923  005AFC  500E               	movf	___lbmod@divisor,w,c
  8924  005AFE  5E11               	subwf	___lbmod@rem,f,c
  8925  005B00                     l9138:
  8926  005B00  2E10               	decfsz	___lbmod@counter,f,c
  8927  005B02  D7F3               	goto	l9130
  8928  005B04  5011               	movf	___lbmod@rem,w,c
  8929  005B06  0012               	return	
  8930  005B08                     __end_of___lbmod:
  8931                           	opt stack 0
  8932                           tblptru	equ	0xFF8
  8933                           tblptrh	equ	0xFF7
  8934                           tblptrl	equ	0xFF6
  8935                           tablat	equ	0xFF5
  8936                           prodh	equ	0xFF4
  8937                           prodl	equ	0xFF3
  8938                           postinc0	equ	0xFEE
  8939                           wreg	equ	0xFE8
  8940                           postdec1	equ	0xFE5
  8941                           fsr1h	equ	0xFE2
  8942                           fsr1l	equ	0xFE1
  8943                           indf2	equ	0xFDF
  8944                           postinc2	equ	0xFDE
  8945                           postdec2	equ	0xFDD
  8946                           fsr2h	equ	0xFDA
  8947                           fsr2l	equ	0xFD9
  8948                           status	equ	0xFD8
  8949                           
  8950 ;; *************** function _vscp_writeRegister *****************
  8951 ;; Defined at:
  8952 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8953 ;; Parameters:    Size  Location     Type
  8954 ;;  reg             1    wreg     unsigned char 
  8955 ;;  value           1   40[COMRAM] unsigned char 
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  reg             1   41[COMRAM] unsigned char 
  8958 ;; Return value:  Size  Location     Type
  8959 ;;                  1    wreg      unsigned char 
  8960 ;; Registers used:
  8961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8962 ;; Tracked objects:
  8963 ;;		On entry : F/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8967 ;;      Params:         1       0       0       0       0       0       0
  8968 ;;      Locals:         1       0       0       0       0       0       0
  8969 ;;      Temps:          0       0       0       0       0       0       0
  8970 ;;      Totals:         2       0       0       0       0       0       0
  8971 ;;Total ram usage:        2 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:    7
  8974 ;; This function calls:
  8975 ;;		_vscp_writeAppReg
  8976 ;;		_vscp_writeStdReg
  8977 ;; This function is called by:
  8978 ;;		_vscp_handleProtocolEvent
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text35
  8983  005BE8                     __ptext35:
  8984                           	opt stack 0
  8985  005BE8                     _vscp_writeRegister:
  8986                           	opt stack 22
  8987                           
  8988                           ;incstack = 0
  8989                           ;incstack = 0
  8990                           ;vscp_writeRegister@reg stored from wreg
  8991  005BE8  CFE8 F02A          	movff	wreg,vscp_writeRegister@reg
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8995  005BEC  0E7F               	movlw	127
  8996  005BEE  642A               	cpfsgt	vscp_writeRegister@reg,c
  8997  005BF0  D006               	goto	l11372
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  9001  005BF2  C029  F022         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  9002  005BF6  502A               	movf	vscp_writeRegister@reg,w,c
  9003  005BF8  EC65  F023         	call	_vscp_writeStdReg
  9004  005BFC  D005               	goto	l1152
  9005  005BFE                     l11372:
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;vscp_firmware.c: 705: else {
  9009                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  9010  005BFE  C029  F021         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  9011  005C02  502A               	movf	vscp_writeRegister@reg,w,c
  9012  005C04  ECB7  F005         	call	_vscp_writeAppReg
  9013  005C08                     l1152:
  9014  005C08  0012               	return	
  9015  005C0A                     __end_of_vscp_writeRegister:
  9016                           	opt stack 0
  9017                           tblptru	equ	0xFF8
  9018                           tblptrh	equ	0xFF7
  9019                           tblptrl	equ	0xFF6
  9020                           tablat	equ	0xFF5
  9021                           prodh	equ	0xFF4
  9022                           prodl	equ	0xFF3
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           postdec1	equ	0xFE5
  9026                           fsr1h	equ	0xFE2
  9027                           fsr1l	equ	0xFE1
  9028                           indf2	equ	0xFDF
  9029                           postinc2	equ	0xFDE
  9030                           postdec2	equ	0xFDD
  9031                           fsr2h	equ	0xFDA
  9032                           fsr2l	equ	0xFD9
  9033                           status	equ	0xFD8
  9034                           
  9035 ;; *************** function _vscp_writeStdReg *****************
  9036 ;; Defined at:
  9037 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  9038 ;; Parameters:    Size  Location     Type
  9039 ;;  reg             1    wreg     unsigned char 
  9040 ;;  value           1   33[COMRAM] unsigned char 
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;  reg             1   39[COMRAM] unsigned char 
  9043 ;;  rv              1   38[COMRAM] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      unsigned char 
  9046 ;; Registers used:
  9047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : F/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9053 ;;      Params:         1       0       0       0       0       0       0
  9054 ;;      Locals:         2       0       0       0       0       0       0
  9055 ;;      Temps:          4       0       0       0       0       0       0
  9056 ;;      Totals:         7       0       0       0       0       0       0
  9057 ;;Total ram usage:        7 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    6
  9060 ;; This function calls:
  9061 ;;		_vscp_getGUID
  9062 ;;		_vscp_setGUID
  9063 ;;		_vscp_getUserID
  9064 ;;		_vscp_setUserID
  9065 ;;		_vscp_getManufacturerId
  9066 ;;		_vscp_setManufacturerId
  9067 ;;		_vscp_restoreDefaults
  9068 ;; This function is called by:
  9069 ;;		_vscp_writeRegister
  9070 ;;		_vscp_handleProtocolEvent
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           	psect	text36
  9075  0046CA                     __ptext36:
  9076                           	opt stack 0
  9077  0046CA                     _vscp_writeStdReg:
  9078                           	opt stack 23
  9079                           
  9080                           ;incstack = 0
  9081                           ;incstack = 0
  9082                           ;vscp_writeStdReg@reg stored from wreg
  9083  0046CA  CFE8 F028          	movff	wreg,vscp_writeStdReg@reg
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9087  0046CE  1C22               	comf	vscp_writeStdReg@value,w,c
  9088  0046D0  6E27               	movwf	vscp_writeStdReg@rv,c
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9092                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9093  0046D2  0E83               	movlw	131
  9094  0046D4  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9095  0046D6  D00E               	goto	l11384
  9096                           
  9097                           ; BSR set to: 0
  9098  0046D8  0E89               	movlw	137
  9099  0046DA  6028               	cpfslt	vscp_writeStdReg@reg,c
  9100  0046DC  D00B               	goto	l11384
  9101                           
  9102                           ; BSR set to: 0
  9103                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9104  0046DE  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9105  0046E2  5028               	movf	vscp_writeStdReg@reg,w,c
  9106  0046E4  0F7C               	addlw	124
  9107  0046E6  EC5A  F02E         	call	_vscp_setUserID
  9108                           
  9109                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9110  0046EA  5028               	movf	vscp_writeStdReg@reg,w,c
  9111  0046EC  0F7C               	addlw	124
  9112  0046EE  EC94  F02E         	call	_vscp_getUserID
  9113  0046F2  D069               	goto	L19
  9114  0046F4                     l11384:
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9118  0046F4  5028               	movf	vscp_writeStdReg@reg,w,c
  9119  0046F6  0A92               	xorlw	146
  9120  0046F8  E10D               	bnz	l11390
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9124  0046FA  5022               	movf	vscp_writeStdReg@value,w,c
  9125  0046FC  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9126  0046FE  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9127  004700  5046               	movf	_vscp_page_select,w,c
  9128  004702  6E25               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9129  004704  6A26               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9130  004706  1023               	iorwf	??_vscp_writeStdReg,w,c
  9131  004708  6E46               	movwf	_vscp_page_select,c
  9132  00470A  5024               	movf	??_vscp_writeStdReg+1,w,c
  9133  00470C  1026               	iorwf	??_vscp_writeStdReg+3,w,c
  9134  00470E  6E47               	movwf	_vscp_page_select+1,c
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9138  004710  5047               	movf	_vscp_page_select+1,w,c
  9139  004712  D059               	goto	L19
  9140  004714                     l11390:
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9144  004714  5028               	movf	vscp_writeStdReg@reg,w,c
  9145  004716  0A93               	xorlw	147
  9146  004718  E10B               	bnz	l11396
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9150  00471A  6A23               	clrf	??_vscp_writeStdReg& (0+255),c
  9151  00471C  5047               	movf	_vscp_page_select+1,w,c
  9152  00471E  6E24               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9153  004720  5022               	movf	vscp_writeStdReg@value,w,c
  9154  004722  1023               	iorwf	??_vscp_writeStdReg,w,c
  9155  004724  6E46               	movwf	_vscp_page_select,c
  9156  004726  5024               	movf	??_vscp_writeStdReg+1,w,c
  9157  004728  6E47               	movwf	_vscp_page_select+1,c
  9158                           
  9159                           ; BSR set to: 0
  9160                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9161  00472A  C046  F027         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9162                           
  9163                           ;vscp_firmware.c: 737: }
  9164  00472E  D04E               	goto	l11438
  9165  004730                     l11396:
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9169  004730  0E88               	movlw	136
  9170  004732  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9171  004734  D019               	goto	l11408
  9172                           
  9173                           ; BSR set to: 0
  9174  004736  0E91               	movlw	145
  9175  004738  6028               	cpfslt	vscp_writeStdReg@reg,c
  9176  00473A  D016               	goto	l11408
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9180                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9181  00473C  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9182  004740  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9183  004744  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9184  004746  2824               	incf	??_vscp_writeStdReg+1,w,c
  9185  004748  E102               	bnz	l11404
  9186                           
  9187                           ; BSR set to: 0
  9188  00474A  2846               	incf	_vscp_page_select,w,c
  9189  00474C  E002               	bz	l11406
  9190  00474E                     l11404:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;vscp_firmware.c: 747: rv = ~value;
  9194  00474E  1C22               	comf	vscp_writeStdReg@value,w,c
  9195  004750  D03A               	goto	L19
  9196  004752                     l11406:
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;vscp_firmware.c: 749: else {
  9200                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9201  004752  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9202  004756  5028               	movf	vscp_writeStdReg@reg,w,c
  9203  004758  0F77               	addlw	119
  9204  00475A  EC4E  F02E         	call	_vscp_setManufacturerId
  9205                           
  9206                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9207  00475E  5028               	movf	vscp_writeStdReg@reg,w,c
  9208  004760  0F77               	addlw	119
  9209  004762  EC8A  F02E         	call	_vscp_getManufacturerId
  9210  004766  D02F               	goto	L19
  9211  004768                     l11408:
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9215  004768  0ECF               	movlw	207
  9216  00476A  6428               	cpfsgt	vscp_writeStdReg@reg,c
  9217  00476C  D017               	goto	l11420
  9218                           
  9219                           ; BSR set to: 0
  9220  00476E  0EE0               	movlw	224
  9221  004770  6028               	cpfslt	vscp_writeStdReg@reg,c
  9222  004772  D014               	goto	l11420
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9226                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9227  004774  C047  F023         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9228  004778  C023  F024         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9229  00477C  6A25               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9230  00477E  2824               	incf	??_vscp_writeStdReg+1,w,c
  9231  004780  E1E6               	bnz	l11404
  9232                           
  9233                           ; BSR set to: 0
  9234  004782  2846               	incf	_vscp_page_select,w,c
  9235  004784  E1E4               	bnz	l11404
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;vscp_firmware.c: 762: else {
  9239                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9240  004786  C022  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9241  00478A  5028               	movf	vscp_writeStdReg@reg,w,c
  9242  00478C  0F30               	addlw	48
  9243  00478E  EC05  F02E         	call	_vscp_setGUID
  9244                           
  9245                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9246  004792  5028               	movf	vscp_writeStdReg@reg,w,c
  9247  004794  0F30               	addlw	48
  9248  004796  EC9E  F02E         	call	_vscp_getGUID
  9249  00479A  D015               	goto	L19
  9250  00479C                     l11420:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9254  00479C  5028               	movf	vscp_writeStdReg@reg,w,c
  9255  00479E  0AA2               	xorlw	162
  9256  0047A0  E1D6               	bnz	l11404
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9260  0047A2  5022               	movf	vscp_writeStdReg@value,w,c
  9261  0047A4  0A55               	xorlw	85
  9262  0047A6  E104               	bnz	l11428
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9266  0047A8  6BB4               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9267  0047AA  6BB5               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;vscp_firmware.c: 771: rv = 0x55;
  9271  0047AC  0E55               	movlw	85
  9272  0047AE  D00B               	goto	L19
  9273  0047B0                     l11428:
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9277  0047B0  5022               	movf	vscp_writeStdReg@value,w,c
  9278  0047B2  0AAA               	xorlw	170
  9279  0047B4  E10B               	bnz	l11438
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9283  0047B6  0EE8               	movlw	232
  9284  0047B8  5DB4               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9285  0047BA  0E03               	movlw	3
  9286  0047BC  59B5               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9287  0047BE  E205               	bc	l1178
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9291  0047C0  ECFD  F02E         	call	_vscp_restoreDefaults	;wreg free
  9292                           
  9293                           ; BSR set to: 1
  9294                           ;vscp_firmware.c: 776: rv = 0xaa;
  9295  0047C4  0EAA               	movlw	170
  9296  0047C6                     L19:
  9297  0047C6  6E27               	movwf	vscp_writeStdReg@rv,c
  9298                           
  9299                           ;vscp_firmware.c: 777: }
  9300  0047C8  D001               	goto	l11438
  9301  0047CA                     l1178:
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;vscp_firmware.c: 778: else {
  9305                           ;vscp_firmware.c: 779: rv = 0;
  9306  0047CA  6A27               	clrf	vscp_writeStdReg@rv,c
  9307  0047CC                     l11438:
  9308                           
  9309                           ;vscp_firmware.c: 787: }
  9310                           ;vscp_firmware.c: 789: return rv;
  9311  0047CC  5027               	movf	vscp_writeStdReg@rv,w,c
  9312  0047CE  0012               	return	
  9313  0047D0                     __end_of_vscp_writeStdReg:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           postinc0	equ	0xFEE
  9322                           wreg	equ	0xFE8
  9323                           postdec1	equ	0xFE5
  9324                           fsr1h	equ	0xFE2
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           postdec2	equ	0xFDD
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function _vscp_restoreDefaults *****************
  9334 ;; Defined at:
  9335 ;;		line 2835 in file "../main.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : F/0
  9346 ;;		On exit  : F/1
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9349 ;;      Params:         0       0       0       0       0       0       0
  9350 ;;      Locals:         0       0       0       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0
  9352 ;;      Totals:         0       0       0       0       0       0       0
  9353 ;;Total ram usage:        0 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    5
  9356 ;; This function calls:
  9357 ;;		_init_app_eeprom
  9358 ;;		_init_app_ram
  9359 ;; This function is called by:
  9360 ;;		_vscp_writeStdReg
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text37
  9365  005DFA                     __ptext37:
  9366                           	opt stack 0
  9367  005DFA                     _vscp_restoreDefaults:
  9368                           	opt stack 23
  9369                           
  9370                           ; BSR set to: 0
  9371                           ;main.c: 2836: init_app_eeprom();
  9372                           
  9373                           ;incstack = 0
  9374                           ;incstack = 0
  9375  005DFA  EC76  F011         	call	_init_app_eeprom	;wreg free
  9376                           
  9377                           ;main.c: 2837: init_app_ram();
  9378  005DFE  EF1C  F02C         	goto	_init_app_ram	;wreg free
  9379  005E02                     __end_of_vscp_restoreDefaults:
  9380                           	opt stack 0
  9381                           tblptru	equ	0xFF8
  9382                           tblptrh	equ	0xFF7
  9383                           tblptrl	equ	0xFF6
  9384                           tablat	equ	0xFF5
  9385                           prodh	equ	0xFF4
  9386                           prodl	equ	0xFF3
  9387                           postinc0	equ	0xFEE
  9388                           wreg	equ	0xFE8
  9389                           postdec1	equ	0xFE5
  9390                           fsr1h	equ	0xFE2
  9391                           fsr1l	equ	0xFE1
  9392                           indf2	equ	0xFDF
  9393                           postinc2	equ	0xFDE
  9394                           postdec2	equ	0xFDD
  9395                           fsr2h	equ	0xFDA
  9396                           fsr2l	equ	0xFD9
  9397                           status	equ	0xFD8
  9398                           
  9399 ;; *************** function _init_app_eeprom *****************
  9400 ;; Defined at:
  9401 ;;		line 1022 in file "../main.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;		None
  9404 ;; Auto vars:     Size  Location     Type
  9405 ;;  i               1   16[COMRAM] unsigned char 
  9406 ;; Return value:  Size  Location     Type
  9407 ;;		None               void
  9408 ;; Registers used:
  9409 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9410 ;; Tracked objects:
  9411 ;;		On entry : 0/1
  9412 ;;		On exit  : 0/0
  9413 ;;		Unchanged: 0/0
  9414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9415 ;;      Params:         0       0       0       0       0       0       0
  9416 ;;      Locals:         1       0       0       0       0       0       0
  9417 ;;      Temps:          0       0       0       0       0       0       0
  9418 ;;      Totals:         1       0       0       0       0       0       0
  9419 ;;Total ram usage:        1 bytes
  9420 ;; Hardware stack levels used:    1
  9421 ;; Hardware stack levels required when called:    3
  9422 ;; This function calls:
  9423 ;;		_writeEEPROM
  9424 ;; This function is called by:
  9425 ;;		_main
  9426 ;;		_vscp_restoreDefaults
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           	psect	text38
  9431  0022EC                     __ptext38:
  9432                           	opt stack 0
  9433  0022EC                     _init_app_eeprom:
  9434                           	opt stack 24
  9435                           
  9436                           ;main.c: 1024: writeEEPROM( 0x41, 0 );
  9437                           
  9438                           ; BSR set to: 1
  9439                           ;incstack = 0
  9440                           ;incstack = 0
  9441  0022EC  6A0F               	clrf	?_writeEEPROM+1,c
  9442  0022EE  0E41               	movlw	65
  9443  0022F0  6E0E               	movwf	?_writeEEPROM,c
  9444  0022F2  0E00               	movlw	0
  9445  0022F4  6A10               	clrf	?_writeEEPROM+2,c
  9446  0022F6  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9447                           
  9448                           ;main.c: 1025: writeEEPROM( 0x41, 0 );
  9449  0022FA  6A0F               	clrf	?_writeEEPROM+1,c
  9450  0022FC  0E41               	movlw	65
  9451  0022FE  6E0E               	movwf	?_writeEEPROM,c
  9452  002300  0E00               	movlw	0
  9453  002302  6A10               	clrf	?_writeEEPROM+2,c
  9454  002304  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9455                           
  9456                           ;main.c: 1027: writeEEPROM(0x43, 0b00000001);
  9457  002308  6A0F               	clrf	?_writeEEPROM+1,c
  9458  00230A  0E43               	movlw	67
  9459  00230C  6E0E               	movwf	?_writeEEPROM,c
  9460  00230E  0E01               	movlw	1
  9461  002310  6E10               	movwf	?_writeEEPROM+2,c
  9462  002312  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9463                           
  9464                           ;main.c: 1028: writeEEPROM(0x44, 0b00000001);
  9465  002316  6A0F               	clrf	?_writeEEPROM+1,c
  9466  002318  0E44               	movlw	68
  9467  00231A  6E0E               	movwf	?_writeEEPROM,c
  9468  00231C  0E01               	movlw	1
  9469  00231E  6E10               	movwf	?_writeEEPROM+2,c
  9470  002320  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9471                           
  9472                           ;main.c: 1029: writeEEPROM(0x45, 0b00000001);
  9473  002324  6A0F               	clrf	?_writeEEPROM+1,c
  9474  002326  0E45               	movlw	69
  9475  002328  6E0E               	movwf	?_writeEEPROM,c
  9476  00232A  0E01               	movlw	1
  9477  00232C  6E10               	movwf	?_writeEEPROM+2,c
  9478  00232E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9479                           
  9480                           ;main.c: 1030: writeEEPROM(0x46, 0b00000001);
  9481  002332  6A0F               	clrf	?_writeEEPROM+1,c
  9482  002334  0E46               	movlw	70
  9483  002336  6E0E               	movwf	?_writeEEPROM,c
  9484  002338  0E01               	movlw	1
  9485  00233A  6E10               	movwf	?_writeEEPROM+2,c
  9486  00233C  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9487                           
  9488                           ;main.c: 1031: writeEEPROM(0x47, 0b00000001);
  9489  002340  6A0F               	clrf	?_writeEEPROM+1,c
  9490  002342  0E47               	movlw	71
  9491  002344  6E0E               	movwf	?_writeEEPROM,c
  9492  002346  0E01               	movlw	1
  9493  002348  6E10               	movwf	?_writeEEPROM+2,c
  9494  00234A  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9495                           
  9496                           ;main.c: 1032: writeEEPROM(0x48, 0b00000001);
  9497  00234E  6A0F               	clrf	?_writeEEPROM+1,c
  9498  002350  0E48               	movlw	72
  9499  002352  6E0E               	movwf	?_writeEEPROM,c
  9500  002354  0E01               	movlw	1
  9501  002356  6E10               	movwf	?_writeEEPROM+2,c
  9502  002358  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9503                           
  9504                           ;main.c: 1034: writeEEPROM(0x49, 30);
  9505  00235C  6A0F               	clrf	?_writeEEPROM+1,c
  9506  00235E  0E49               	movlw	73
  9507  002360  6E0E               	movwf	?_writeEEPROM,c
  9508  002362  0E1E               	movlw	30
  9509  002364  6E10               	movwf	?_writeEEPROM+2,c
  9510  002366  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9511                           
  9512                           ;main.c: 1035: writeEEPROM(0x4A, 0);
  9513  00236A  6A0F               	clrf	?_writeEEPROM+1,c
  9514  00236C  0E4A               	movlw	74
  9515  00236E  6E0E               	movwf	?_writeEEPROM,c
  9516  002370  0E00               	movlw	0
  9517  002372  6A10               	clrf	?_writeEEPROM+2,c
  9518  002374  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9519                           
  9520                           ;main.c: 1036: writeEEPROM(0x4B, 0);
  9521  002378  6A0F               	clrf	?_writeEEPROM+1,c
  9522  00237A  0E4B               	movlw	75
  9523  00237C  6E0E               	movwf	?_writeEEPROM,c
  9524  00237E  0E00               	movlw	0
  9525  002380  6A10               	clrf	?_writeEEPROM+2,c
  9526  002382  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9527                           
  9528                           ;main.c: 1037: writeEEPROM(0x4C, 0);
  9529  002386  6A0F               	clrf	?_writeEEPROM+1,c
  9530  002388  0E4C               	movlw	76
  9531  00238A  6E0E               	movwf	?_writeEEPROM,c
  9532  00238C  0E00               	movlw	0
  9533  00238E  6A10               	clrf	?_writeEEPROM+2,c
  9534  002390  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9535                           
  9536                           ;main.c: 1038: writeEEPROM(0x4D, 0);
  9537  002394  6A0F               	clrf	?_writeEEPROM+1,c
  9538  002396  0E4D               	movlw	77
  9539  002398  6E0E               	movwf	?_writeEEPROM,c
  9540  00239A  0E00               	movlw	0
  9541  00239C  6A10               	clrf	?_writeEEPROM+2,c
  9542  00239E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9543                           
  9544                           ;main.c: 1039: writeEEPROM(0x4E, 0);
  9545  0023A2  6A0F               	clrf	?_writeEEPROM+1,c
  9546  0023A4  0E4E               	movlw	78
  9547  0023A6  6E0E               	movwf	?_writeEEPROM,c
  9548  0023A8  0E00               	movlw	0
  9549  0023AA  6A10               	clrf	?_writeEEPROM+2,c
  9550  0023AC  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9551                           
  9552                           ;main.c: 1043: writeEEPROM(0x4F, 0x0F);
  9553  0023B0  6A0F               	clrf	?_writeEEPROM+1,c
  9554  0023B2  0E4F               	movlw	79
  9555  0023B4  6E0E               	movwf	?_writeEEPROM,c
  9556  0023B6  0E0F               	movlw	15
  9557  0023B8  6E10               	movwf	?_writeEEPROM+2,c
  9558  0023BA  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9559                           
  9560                           ;main.c: 1044: writeEEPROM(0x50, 0x68);
  9561  0023BE  6A0F               	clrf	?_writeEEPROM+1,c
  9562  0023C0  0E50               	movlw	80
  9563  0023C2  6E0E               	movwf	?_writeEEPROM,c
  9564  0023C4  0E68               	movlw	104
  9565  0023C6  6E10               	movwf	?_writeEEPROM+2,c
  9566  0023C8  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9567                           
  9568                           ;main.c: 1046: writeEEPROM(0x51, 0x0D);
  9569  0023CC  6A0F               	clrf	?_writeEEPROM+1,c
  9570  0023CE  0E51               	movlw	81
  9571  0023D0  6E0E               	movwf	?_writeEEPROM,c
  9572  0023D2  0E0D               	movlw	13
  9573  0023D4  6E10               	movwf	?_writeEEPROM+2,c
  9574  0023D6  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9575                           
  9576                           ;main.c: 1047: writeEEPROM(0x52, 0x7F);
  9577  0023DA  6A0F               	clrf	?_writeEEPROM+1,c
  9578  0023DC  0E52               	movlw	82
  9579  0023DE  6E0E               	movwf	?_writeEEPROM,c
  9580  0023E0  0E7F               	movlw	127
  9581  0023E2  6E10               	movwf	?_writeEEPROM+2,c
  9582  0023E4  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9583                           
  9584                           ;main.c: 1049: writeEEPROM(0x53, 0x0D);
  9585  0023E8  6A0F               	clrf	?_writeEEPROM+1,c
  9586  0023EA  0E53               	movlw	83
  9587  0023EC  6E0E               	movwf	?_writeEEPROM,c
  9588  0023EE  0E0D               	movlw	13
  9589  0023F0  6E10               	movwf	?_writeEEPROM+2,c
  9590  0023F2  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9591                           
  9592                           ;main.c: 1050: writeEEPROM(0x54, 0x7F);
  9593  0023F6  6A0F               	clrf	?_writeEEPROM+1,c
  9594  0023F8  0E54               	movlw	84
  9595  0023FA  6E0E               	movwf	?_writeEEPROM,c
  9596  0023FC  0E7F               	movlw	127
  9597  0023FE  6E10               	movwf	?_writeEEPROM+2,c
  9598  002400  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9599                           
  9600                           ;main.c: 1052: writeEEPROM(0x55, 0x0D);
  9601  002404  6A0F               	clrf	?_writeEEPROM+1,c
  9602  002406  0E55               	movlw	85
  9603  002408  6E0E               	movwf	?_writeEEPROM,c
  9604  00240A  0E0D               	movlw	13
  9605  00240C  6E10               	movwf	?_writeEEPROM+2,c
  9606  00240E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9607                           
  9608                           ;main.c: 1053: writeEEPROM(0x56, 0x7F);
  9609  002412  6A0F               	clrf	?_writeEEPROM+1,c
  9610  002414  0E56               	movlw	86
  9611  002416  6E0E               	movwf	?_writeEEPROM,c
  9612  002418  0E7F               	movlw	127
  9613  00241A  6E10               	movwf	?_writeEEPROM+2,c
  9614  00241C  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9615                           
  9616                           ;main.c: 1055: writeEEPROM(0x57, 0x0D);
  9617  002420  6A0F               	clrf	?_writeEEPROM+1,c
  9618  002422  0E57               	movlw	87
  9619  002424  6E0E               	movwf	?_writeEEPROM,c
  9620  002426  0E0D               	movlw	13
  9621  002428  6E10               	movwf	?_writeEEPROM+2,c
  9622  00242A  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9623                           
  9624                           ;main.c: 1056: writeEEPROM(0x58, 0x7F);
  9625  00242E  6A0F               	clrf	?_writeEEPROM+1,c
  9626  002430  0E58               	movlw	88
  9627  002432  6E0E               	movwf	?_writeEEPROM,c
  9628  002434  0E7F               	movlw	127
  9629  002436  6E10               	movwf	?_writeEEPROM+2,c
  9630  002438  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9631                           
  9632                           ;main.c: 1058: writeEEPROM(0x59, 0x0D);
  9633  00243C  6A0F               	clrf	?_writeEEPROM+1,c
  9634  00243E  0E59               	movlw	89
  9635  002440  6E0E               	movwf	?_writeEEPROM,c
  9636  002442  0E0D               	movlw	13
  9637  002444  6E10               	movwf	?_writeEEPROM+2,c
  9638  002446  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9639                           
  9640                           ;main.c: 1059: writeEEPROM(0x5A, 0x7F);
  9641  00244A  6A0F               	clrf	?_writeEEPROM+1,c
  9642  00244C  0E5A               	movlw	90
  9643  00244E  6E0E               	movwf	?_writeEEPROM,c
  9644  002450  0E7F               	movlw	127
  9645  002452  6E10               	movwf	?_writeEEPROM+2,c
  9646  002454  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9647                           
  9648                           ;main.c: 1063: writeEEPROM(0x5B, 0x80);
  9649  002458  6A0F               	clrf	?_writeEEPROM+1,c
  9650  00245A  0E5B               	movlw	91
  9651  00245C  6E0E               	movwf	?_writeEEPROM,c
  9652  00245E  0E80               	movlw	128
  9653  002460  6E10               	movwf	?_writeEEPROM+2,c
  9654  002462  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9655                           
  9656                           ;main.c: 1064: writeEEPROM(0x5C, 0xff);
  9657  002466  6A0F               	clrf	?_writeEEPROM+1,c
  9658  002468  0E5C               	movlw	92
  9659  00246A  6E0E               	movwf	?_writeEEPROM,c
  9660  00246C  0EFF               	movlw	255
  9661  00246E  6810               	setf	?_writeEEPROM+2,c
  9662  002470  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9663                           
  9664                           ;main.c: 1066: writeEEPROM(0x5D, 0x80);
  9665  002474  6A0F               	clrf	?_writeEEPROM+1,c
  9666  002476  0E5D               	movlw	93
  9667  002478  6E0E               	movwf	?_writeEEPROM,c
  9668  00247A  0E80               	movlw	128
  9669  00247C  6E10               	movwf	?_writeEEPROM+2,c
  9670  00247E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9671                           
  9672                           ;main.c: 1067: writeEEPROM(0x5E, 0xff);
  9673  002482  6A0F               	clrf	?_writeEEPROM+1,c
  9674  002484  0E5E               	movlw	94
  9675  002486  6E0E               	movwf	?_writeEEPROM,c
  9676  002488  0EFF               	movlw	255
  9677  00248A  6810               	setf	?_writeEEPROM+2,c
  9678  00248C  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9679                           
  9680                           ;main.c: 1069: writeEEPROM(0x5F, 0x80);
  9681  002490  6A0F               	clrf	?_writeEEPROM+1,c
  9682  002492  0E5F               	movlw	95
  9683  002494  6E0E               	movwf	?_writeEEPROM,c
  9684  002496  0E80               	movlw	128
  9685  002498  6E10               	movwf	?_writeEEPROM+2,c
  9686  00249A  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9687                           
  9688                           ;main.c: 1070: writeEEPROM(0x60, 0xff);
  9689  00249E  6A0F               	clrf	?_writeEEPROM+1,c
  9690  0024A0  0E60               	movlw	96
  9691  0024A2  6E0E               	movwf	?_writeEEPROM,c
  9692  0024A4  0EFF               	movlw	255
  9693  0024A6  6810               	setf	?_writeEEPROM+2,c
  9694  0024A8  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9695                           
  9696                           ;main.c: 1072: writeEEPROM(0x61, 0x80);
  9697  0024AC  6A0F               	clrf	?_writeEEPROM+1,c
  9698  0024AE  0E61               	movlw	97
  9699  0024B0  6E0E               	movwf	?_writeEEPROM,c
  9700  0024B2  0E80               	movlw	128
  9701  0024B4  6E10               	movwf	?_writeEEPROM+2,c
  9702  0024B6  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9703                           
  9704                           ;main.c: 1073: writeEEPROM(0x62, 0xff);
  9705  0024BA  6A0F               	clrf	?_writeEEPROM+1,c
  9706  0024BC  0E62               	movlw	98
  9707  0024BE  6E0E               	movwf	?_writeEEPROM,c
  9708  0024C0  0EFF               	movlw	255
  9709  0024C2  6810               	setf	?_writeEEPROM+2,c
  9710  0024C4  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9711                           
  9712                           ;main.c: 1075: writeEEPROM(0x63, 0x80);
  9713  0024C8  6A0F               	clrf	?_writeEEPROM+1,c
  9714  0024CA  0E63               	movlw	99
  9715  0024CC  6E0E               	movwf	?_writeEEPROM,c
  9716  0024CE  0E80               	movlw	128
  9717  0024D0  6E10               	movwf	?_writeEEPROM+2,c
  9718  0024D2  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9719                           
  9720                           ;main.c: 1076: writeEEPROM(0x64, 0xff);
  9721  0024D6  6A0F               	clrf	?_writeEEPROM+1,c
  9722  0024D8  0E64               	movlw	100
  9723  0024DA  6E0E               	movwf	?_writeEEPROM,c
  9724  0024DC  0EFF               	movlw	255
  9725  0024DE  6810               	setf	?_writeEEPROM+2,c
  9726  0024E0  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9727                           
  9728                           ;main.c: 1078: writeEEPROM(0x65, 0x80);
  9729  0024E4  6A0F               	clrf	?_writeEEPROM+1,c
  9730  0024E6  0E65               	movlw	101
  9731  0024E8  6E0E               	movwf	?_writeEEPROM,c
  9732  0024EA  0E80               	movlw	128
  9733  0024EC  6E10               	movwf	?_writeEEPROM+2,c
  9734  0024EE  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9735                           
  9736                           ;main.c: 1079: writeEEPROM(0x66, 0xff);
  9737  0024F2  6A0F               	clrf	?_writeEEPROM+1,c
  9738  0024F4  0E66               	movlw	102
  9739  0024F6  6E0E               	movwf	?_writeEEPROM,c
  9740  0024F8  0EFF               	movlw	255
  9741  0024FA  6810               	setf	?_writeEEPROM+2,c
  9742  0024FC  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9743                           
  9744                           ;main.c: 1083: writeEEPROM(0x67, 0x7f);
  9745  002500  6A0F               	clrf	?_writeEEPROM+1,c
  9746  002502  0E67               	movlw	103
  9747  002504  6E0E               	movwf	?_writeEEPROM,c
  9748  002506  0E7F               	movlw	127
  9749  002508  6E10               	movwf	?_writeEEPROM+2,c
  9750  00250A  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9751                           
  9752                           ;main.c: 1084: writeEEPROM(0x68, 0xff);
  9753  00250E  6A0F               	clrf	?_writeEEPROM+1,c
  9754  002510  0E68               	movlw	104
  9755  002512  6E0E               	movwf	?_writeEEPROM,c
  9756  002514  0EFF               	movlw	255
  9757  002516  6810               	setf	?_writeEEPROM+2,c
  9758  002518  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9759                           
  9760                           ;main.c: 1086: writeEEPROM(0x69, 0x7f);
  9761  00251C  6A0F               	clrf	?_writeEEPROM+1,c
  9762  00251E  0E69               	movlw	105
  9763  002520  6E0E               	movwf	?_writeEEPROM,c
  9764  002522  0E7F               	movlw	127
  9765  002524  6E10               	movwf	?_writeEEPROM+2,c
  9766  002526  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9767                           
  9768                           ;main.c: 1087: writeEEPROM(0x6A, 0xff);
  9769  00252A  6A0F               	clrf	?_writeEEPROM+1,c
  9770  00252C  0E6A               	movlw	106
  9771  00252E  6E0E               	movwf	?_writeEEPROM,c
  9772  002530  0EFF               	movlw	255
  9773  002532  6810               	setf	?_writeEEPROM+2,c
  9774  002534  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9775                           
  9776                           ;main.c: 1089: writeEEPROM(0x6B, 0x7f);
  9777  002538  6A0F               	clrf	?_writeEEPROM+1,c
  9778  00253A  0E6B               	movlw	107
  9779  00253C  6E0E               	movwf	?_writeEEPROM,c
  9780  00253E  0E7F               	movlw	127
  9781  002540  6E10               	movwf	?_writeEEPROM+2,c
  9782  002542  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9783                           
  9784                           ;main.c: 1090: writeEEPROM(0x6C, 0xff);
  9785  002546  6A0F               	clrf	?_writeEEPROM+1,c
  9786  002548  0E6C               	movlw	108
  9787  00254A  6E0E               	movwf	?_writeEEPROM,c
  9788  00254C  0EFF               	movlw	255
  9789  00254E  6810               	setf	?_writeEEPROM+2,c
  9790  002550  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9791                           
  9792                           ;main.c: 1092: writeEEPROM(0x6D, 0x7f);
  9793  002554  6A0F               	clrf	?_writeEEPROM+1,c
  9794  002556  0E6D               	movlw	109
  9795  002558  6E0E               	movwf	?_writeEEPROM,c
  9796  00255A  0E7F               	movlw	127
  9797  00255C  6E10               	movwf	?_writeEEPROM+2,c
  9798  00255E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9799                           
  9800                           ;main.c: 1093: writeEEPROM(0x6E, 0xff);
  9801  002562  6A0F               	clrf	?_writeEEPROM+1,c
  9802  002564  0E6E               	movlw	110
  9803  002566  6E0E               	movwf	?_writeEEPROM,c
  9804  002568  0EFF               	movlw	255
  9805  00256A  6810               	setf	?_writeEEPROM+2,c
  9806  00256C  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9807                           
  9808                           ;main.c: 1095: writeEEPROM(0x6F, 0x7f);
  9809  002570  6A0F               	clrf	?_writeEEPROM+1,c
  9810  002572  0E6F               	movlw	111
  9811  002574  6E0E               	movwf	?_writeEEPROM,c
  9812  002576  0E7F               	movlw	127
  9813  002578  6E10               	movwf	?_writeEEPROM+2,c
  9814  00257A  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9815                           
  9816                           ;main.c: 1096: writeEEPROM(0x70, 0xff);
  9817  00257E  6A0F               	clrf	?_writeEEPROM+1,c
  9818  002580  0E70               	movlw	112
  9819  002582  6E0E               	movwf	?_writeEEPROM,c
  9820  002584  0EFF               	movlw	255
  9821  002586  6810               	setf	?_writeEEPROM+2,c
  9822  002588  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9823                           
  9824                           ;main.c: 1098: writeEEPROM(0x71, 0x7f);
  9825  00258C  6A0F               	clrf	?_writeEEPROM+1,c
  9826  00258E  0E71               	movlw	113
  9827  002590  6E0E               	movwf	?_writeEEPROM,c
  9828  002592  0E7F               	movlw	127
  9829  002594  6E10               	movwf	?_writeEEPROM+2,c
  9830  002596  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9831                           
  9832                           ;main.c: 1099: writeEEPROM(0x72, 0xff);
  9833  00259A  6A0F               	clrf	?_writeEEPROM+1,c
  9834  00259C  0E72               	movlw	114
  9835  00259E  6E0E               	movwf	?_writeEEPROM,c
  9836  0025A0  0EFF               	movlw	255
  9837  0025A2  6810               	setf	?_writeEEPROM+2,c
  9838  0025A4  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9839                           
  9840                           ;main.c: 1103: writeEEPROM(0x73, 0);
  9841  0025A8  6A0F               	clrf	?_writeEEPROM+1,c
  9842  0025AA  0E73               	movlw	115
  9843  0025AC  6E0E               	movwf	?_writeEEPROM,c
  9844  0025AE  0E00               	movlw	0
  9845  0025B0  6A10               	clrf	?_writeEEPROM+2,c
  9846  0025B2  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9847                           
  9848                           ;main.c: 1104: writeEEPROM(0x74, 0);
  9849  0025B6  6A0F               	clrf	?_writeEEPROM+1,c
  9850  0025B8  0E74               	movlw	116
  9851  0025BA  6E0E               	movwf	?_writeEEPROM,c
  9852  0025BC  0E00               	movlw	0
  9853  0025BE  6A10               	clrf	?_writeEEPROM+2,c
  9854  0025C0  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9855                           
  9856                           ;main.c: 1106: writeEEPROM(0x75, 0);
  9857  0025C4  6A0F               	clrf	?_writeEEPROM+1,c
  9858  0025C6  0E75               	movlw	117
  9859  0025C8  6E0E               	movwf	?_writeEEPROM,c
  9860  0025CA  0E00               	movlw	0
  9861  0025CC  6A10               	clrf	?_writeEEPROM+2,c
  9862  0025CE  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9863                           
  9864                           ;main.c: 1107: writeEEPROM(0x76, 0);
  9865  0025D2  6A0F               	clrf	?_writeEEPROM+1,c
  9866  0025D4  0E76               	movlw	118
  9867  0025D6  6E0E               	movwf	?_writeEEPROM,c
  9868  0025D8  0E00               	movlw	0
  9869  0025DA  6A10               	clrf	?_writeEEPROM+2,c
  9870  0025DC  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9871                           
  9872                           ;main.c: 1109: writeEEPROM(0x77, 0);
  9873  0025E0  6A0F               	clrf	?_writeEEPROM+1,c
  9874  0025E2  0E77               	movlw	119
  9875  0025E4  6E0E               	movwf	?_writeEEPROM,c
  9876  0025E6  0E00               	movlw	0
  9877  0025E8  6A10               	clrf	?_writeEEPROM+2,c
  9878  0025EA  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9879                           
  9880                           ;main.c: 1110: writeEEPROM(0x78, 0);
  9881  0025EE  6A0F               	clrf	?_writeEEPROM+1,c
  9882  0025F0  0E78               	movlw	120
  9883  0025F2  6E0E               	movwf	?_writeEEPROM,c
  9884  0025F4  0E00               	movlw	0
  9885  0025F6  6A10               	clrf	?_writeEEPROM+2,c
  9886  0025F8  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9887                           
  9888                           ;main.c: 1112: writeEEPROM(0x79, 0);
  9889  0025FC  6A0F               	clrf	?_writeEEPROM+1,c
  9890  0025FE  0E79               	movlw	121
  9891  002600  6E0E               	movwf	?_writeEEPROM,c
  9892  002602  0E00               	movlw	0
  9893  002604  6A10               	clrf	?_writeEEPROM+2,c
  9894  002606  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9895                           
  9896                           ;main.c: 1113: writeEEPROM(0x7A, 0);
  9897  00260A  6A0F               	clrf	?_writeEEPROM+1,c
  9898  00260C  0E7A               	movlw	122
  9899  00260E  6E0E               	movwf	?_writeEEPROM,c
  9900  002610  0E00               	movlw	0
  9901  002612  6A10               	clrf	?_writeEEPROM+2,c
  9902  002614  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9903                           
  9904                           ;main.c: 1115: writeEEPROM(0x7B, 0);
  9905  002618  6A0F               	clrf	?_writeEEPROM+1,c
  9906  00261A  0E7B               	movlw	123
  9907  00261C  6E0E               	movwf	?_writeEEPROM,c
  9908  00261E  0E00               	movlw	0
  9909  002620  6A10               	clrf	?_writeEEPROM+2,c
  9910  002622  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9911                           
  9912                           ;main.c: 1116: writeEEPROM(0x7C, 0);
  9913  002626  6A0F               	clrf	?_writeEEPROM+1,c
  9914  002628  0E7C               	movlw	124
  9915  00262A  6E0E               	movwf	?_writeEEPROM,c
  9916  00262C  0E00               	movlw	0
  9917  00262E  6A10               	clrf	?_writeEEPROM+2,c
  9918  002630  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9919                           
  9920                           ;main.c: 1118: writeEEPROM(0x7D, 0);
  9921  002634  6A0F               	clrf	?_writeEEPROM+1,c
  9922  002636  0E7D               	movlw	125
  9923  002638  6E0E               	movwf	?_writeEEPROM,c
  9924  00263A  0E00               	movlw	0
  9925  00263C  6A10               	clrf	?_writeEEPROM+2,c
  9926  00263E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9927                           
  9928                           ;main.c: 1119: writeEEPROM(0x7E, 0);
  9929  002642  6A0F               	clrf	?_writeEEPROM+1,c
  9930  002644  0E7E               	movlw	126
  9931  002646  6E0E               	movwf	?_writeEEPROM,c
  9932  002648  0E00               	movlw	0
  9933  00264A  6A10               	clrf	?_writeEEPROM+2,c
  9934  00264C  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9935                           
  9936                           ;main.c: 1123: writeEEPROM(0x7F, 0x7f);
  9937  002650  6A0F               	clrf	?_writeEEPROM+1,c
  9938  002652  0E7F               	movlw	127
  9939  002654  6E0E               	movwf	?_writeEEPROM,c
  9940  002656  6E10               	movwf	?_writeEEPROM+2,c
  9941  002658  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9942                           
  9943                           ;main.c: 1124: writeEEPROM(0x80, 0xff);
  9944  00265C  6A0F               	clrf	?_writeEEPROM+1,c
  9945  00265E  0E80               	movlw	128
  9946  002660  6E0E               	movwf	?_writeEEPROM,c
  9947  002662  0EFF               	movlw	255
  9948  002664  6810               	setf	?_writeEEPROM+2,c
  9949  002666  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9950                           
  9951                           ;main.c: 1126: writeEEPROM(0x81, 0x7f);
  9952  00266A  6A0F               	clrf	?_writeEEPROM+1,c
  9953  00266C  0E81               	movlw	129
  9954  00266E  6E0E               	movwf	?_writeEEPROM,c
  9955  002670  0E7F               	movlw	127
  9956  002672  6E10               	movwf	?_writeEEPROM+2,c
  9957  002674  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9958                           
  9959                           ;main.c: 1127: writeEEPROM(0x82, 0xff);
  9960  002678  6A0F               	clrf	?_writeEEPROM+1,c
  9961  00267A  0E82               	movlw	130
  9962  00267C  6E0E               	movwf	?_writeEEPROM,c
  9963  00267E  0EFF               	movlw	255
  9964  002680  6810               	setf	?_writeEEPROM+2,c
  9965  002682  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9966                           
  9967                           ;main.c: 1129: writeEEPROM(0x83, 0x7f);
  9968  002686  6A0F               	clrf	?_writeEEPROM+1,c
  9969  002688  0E83               	movlw	131
  9970  00268A  6E0E               	movwf	?_writeEEPROM,c
  9971  00268C  0E7F               	movlw	127
  9972  00268E  6E10               	movwf	?_writeEEPROM+2,c
  9973  002690  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9974                           
  9975                           ;main.c: 1130: writeEEPROM(0x84, 0xff);
  9976  002694  6A0F               	clrf	?_writeEEPROM+1,c
  9977  002696  0E84               	movlw	132
  9978  002698  6E0E               	movwf	?_writeEEPROM,c
  9979  00269A  0EFF               	movlw	255
  9980  00269C  6810               	setf	?_writeEEPROM+2,c
  9981  00269E  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9982                           
  9983                           ;main.c: 1132: writeEEPROM(0x85, 0x7f);
  9984  0026A2  6A0F               	clrf	?_writeEEPROM+1,c
  9985  0026A4  0E85               	movlw	133
  9986  0026A6  6E0E               	movwf	?_writeEEPROM,c
  9987  0026A8  0E7F               	movlw	127
  9988  0026AA  6E10               	movwf	?_writeEEPROM+2,c
  9989  0026AC  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9990                           
  9991                           ;main.c: 1133: writeEEPROM(0x86, 0xff);
  9992  0026B0  6A0F               	clrf	?_writeEEPROM+1,c
  9993  0026B2  0E86               	movlw	134
  9994  0026B4  6E0E               	movwf	?_writeEEPROM,c
  9995  0026B6  0EFF               	movlw	255
  9996  0026B8  6810               	setf	?_writeEEPROM+2,c
  9997  0026BA  ECAB  F02D         	call	_writeEEPROM	;wreg free
  9998                           
  9999                           ;main.c: 1135: writeEEPROM(0x87, 0x7f);
 10000  0026BE  6A0F               	clrf	?_writeEEPROM+1,c
 10001  0026C0  0E87               	movlw	135
 10002  0026C2  6E0E               	movwf	?_writeEEPROM,c
 10003  0026C4  0E7F               	movlw	127
 10004  0026C6  6E10               	movwf	?_writeEEPROM+2,c
 10005  0026C8  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10006                           
 10007                           ;main.c: 1136: writeEEPROM(0x88, 0xff);
 10008  0026CC  6A0F               	clrf	?_writeEEPROM+1,c
 10009  0026CE  0E88               	movlw	136
 10010  0026D0  6E0E               	movwf	?_writeEEPROM,c
 10011  0026D2  0EFF               	movlw	255
 10012  0026D4  6810               	setf	?_writeEEPROM+2,c
 10013  0026D6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10014                           
 10015                           ;main.c: 1138: writeEEPROM(0x89, 0x7f);
 10016  0026DA  6A0F               	clrf	?_writeEEPROM+1,c
 10017  0026DC  0E89               	movlw	137
 10018  0026DE  6E0E               	movwf	?_writeEEPROM,c
 10019  0026E0  0E7F               	movlw	127
 10020  0026E2  6E10               	movwf	?_writeEEPROM+2,c
 10021  0026E4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10022                           
 10023                           ;main.c: 1139: writeEEPROM(0x8A, 0xff);
 10024  0026E8  6A0F               	clrf	?_writeEEPROM+1,c
 10025  0026EA  0E8A               	movlw	138
 10026  0026EC  6E0E               	movwf	?_writeEEPROM,c
 10027  0026EE  0EFF               	movlw	255
 10028  0026F0  6810               	setf	?_writeEEPROM+2,c
 10029  0026F2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10030                           
 10031                           ;main.c: 1143: writeEEPROM(0x8B, 0x80);
 10032  0026F6  6A0F               	clrf	?_writeEEPROM+1,c
 10033  0026F8  0E8B               	movlw	139
 10034  0026FA  6E0E               	movwf	?_writeEEPROM,c
 10035  0026FC  0E80               	movlw	128
 10036  0026FE  6E10               	movwf	?_writeEEPROM+2,c
 10037  002700  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10038                           
 10039                           ;main.c: 1144: writeEEPROM(0x8C, 0x00);
 10040  002704  6A0F               	clrf	?_writeEEPROM+1,c
 10041  002706  0E8C               	movlw	140
 10042  002708  6E0E               	movwf	?_writeEEPROM,c
 10043  00270A  0E00               	movlw	0
 10044  00270C  6A10               	clrf	?_writeEEPROM+2,c
 10045  00270E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10046                           
 10047                           ;main.c: 1146: writeEEPROM(0x8D, 0x80);
 10048  002712  6A0F               	clrf	?_writeEEPROM+1,c
 10049  002714  0E8D               	movlw	141
 10050  002716  6E0E               	movwf	?_writeEEPROM,c
 10051  002718  0E80               	movlw	128
 10052  00271A  6E10               	movwf	?_writeEEPROM+2,c
 10053  00271C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10054                           
 10055                           ;main.c: 1147: writeEEPROM(0x8E, 0x00);
 10056  002720  6A0F               	clrf	?_writeEEPROM+1,c
 10057  002722  0E8E               	movlw	142
 10058  002724  6E0E               	movwf	?_writeEEPROM,c
 10059  002726  0E00               	movlw	0
 10060  002728  6A10               	clrf	?_writeEEPROM+2,c
 10061  00272A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10062                           
 10063                           ;main.c: 1149: writeEEPROM(0x8F, 0x80);
 10064  00272E  6A0F               	clrf	?_writeEEPROM+1,c
 10065  002730  0E8F               	movlw	143
 10066  002732  6E0E               	movwf	?_writeEEPROM,c
 10067  002734  0E80               	movlw	128
 10068  002736  6E10               	movwf	?_writeEEPROM+2,c
 10069  002738  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10070                           
 10071                           ;main.c: 1150: writeEEPROM(0x90, 0x00);
 10072  00273C  6A0F               	clrf	?_writeEEPROM+1,c
 10073  00273E  0E90               	movlw	144
 10074  002740  6E0E               	movwf	?_writeEEPROM,c
 10075  002742  0E00               	movlw	0
 10076  002744  6A10               	clrf	?_writeEEPROM+2,c
 10077  002746  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10078                           
 10079                           ;main.c: 1152: writeEEPROM(0x91, 0x80);
 10080  00274A  6A0F               	clrf	?_writeEEPROM+1,c
 10081  00274C  0E91               	movlw	145
 10082  00274E  6E0E               	movwf	?_writeEEPROM,c
 10083  002750  0E80               	movlw	128
 10084  002752  6E10               	movwf	?_writeEEPROM+2,c
 10085  002754  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10086                           
 10087                           ;main.c: 1153: writeEEPROM(0x92, 0x00);
 10088  002758  6A0F               	clrf	?_writeEEPROM+1,c
 10089  00275A  0E92               	movlw	146
 10090  00275C  6E0E               	movwf	?_writeEEPROM,c
 10091  00275E  0E00               	movlw	0
 10092  002760  6A10               	clrf	?_writeEEPROM+2,c
 10093  002762  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10094                           
 10095                           ;main.c: 1155: writeEEPROM(0x93, 0x80);
 10096  002766  6A0F               	clrf	?_writeEEPROM+1,c
 10097  002768  0E93               	movlw	147
 10098  00276A  6E0E               	movwf	?_writeEEPROM,c
 10099  00276C  0E80               	movlw	128
 10100  00276E  6E10               	movwf	?_writeEEPROM+2,c
 10101  002770  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10102                           
 10103                           ;main.c: 1156: writeEEPROM(0x94, 0x00);
 10104  002774  6A0F               	clrf	?_writeEEPROM+1,c
 10105  002776  0E94               	movlw	148
 10106  002778  6E0E               	movwf	?_writeEEPROM,c
 10107  00277A  0E00               	movlw	0
 10108  00277C  6A10               	clrf	?_writeEEPROM+2,c
 10109  00277E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10110                           
 10111                           ;main.c: 1158: writeEEPROM(0x95, 0x80);
 10112  002782  6A0F               	clrf	?_writeEEPROM+1,c
 10113  002784  0E95               	movlw	149
 10114  002786  6E0E               	movwf	?_writeEEPROM,c
 10115  002788  0E80               	movlw	128
 10116  00278A  6E10               	movwf	?_writeEEPROM+2,c
 10117  00278C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10118                           
 10119                           ;main.c: 1159: writeEEPROM(0x96, 0x00);
 10120  002790  6A0F               	clrf	?_writeEEPROM+1,c
 10121  002792  0E96               	movlw	150
 10122  002794  6E0E               	movwf	?_writeEEPROM,c
 10123  002796  0E00               	movlw	0
 10124  002798  6A10               	clrf	?_writeEEPROM+2,c
 10125  00279A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10126                           
 10127                           ;main.c: 1163: writeEEPROM(0x97, 2);
 10128  00279E  6A0F               	clrf	?_writeEEPROM+1,c
 10129  0027A0  0E97               	movlw	151
 10130  0027A2  6E0E               	movwf	?_writeEEPROM,c
 10131  0027A4  0E02               	movlw	2
 10132  0027A6  6E10               	movwf	?_writeEEPROM+2,c
 10133  0027A8  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10134                           
 10135                           ;main.c: 1164: writeEEPROM(0x98, 2);
 10136  0027AC  6A0F               	clrf	?_writeEEPROM+1,c
 10137  0027AE  0E98               	movlw	152
 10138  0027B0  6E0E               	movwf	?_writeEEPROM,c
 10139  0027B2  0E02               	movlw	2
 10140  0027B4  6E10               	movwf	?_writeEEPROM+2,c
 10141  0027B6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10142                           
 10143                           ;main.c: 1165: writeEEPROM(0x99, 2);
 10144  0027BA  6A0F               	clrf	?_writeEEPROM+1,c
 10145  0027BC  0E99               	movlw	153
 10146  0027BE  6E0E               	movwf	?_writeEEPROM,c
 10147  0027C0  0E02               	movlw	2
 10148  0027C2  6E10               	movwf	?_writeEEPROM+2,c
 10149  0027C4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10150                           
 10151                           ;main.c: 1166: writeEEPROM(0x9A, 2);
 10152  0027C8  6A0F               	clrf	?_writeEEPROM+1,c
 10153  0027CA  0E9A               	movlw	154
 10154  0027CC  6E0E               	movwf	?_writeEEPROM,c
 10155  0027CE  0E02               	movlw	2
 10156  0027D0  6E10               	movwf	?_writeEEPROM+2,c
 10157  0027D2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10158                           
 10159                           ;main.c: 1167: writeEEPROM(0x9B, 2);
 10160  0027D6  6A0F               	clrf	?_writeEEPROM+1,c
 10161  0027D8  0E9B               	movlw	155
 10162  0027DA  6E0E               	movwf	?_writeEEPROM,c
 10163  0027DC  0E02               	movlw	2
 10164  0027DE  6E10               	movwf	?_writeEEPROM+2,c
 10165  0027E0  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10166                           
 10167                           ;main.c: 1168: writeEEPROM(0x9C, 2);
 10168  0027E4  6A0F               	clrf	?_writeEEPROM+1,c
 10169  0027E6  0E9C               	movlw	156
 10170  0027E8  6E0E               	movwf	?_writeEEPROM,c
 10171  0027EA  0E02               	movlw	2
 10172  0027EC  6E10               	movwf	?_writeEEPROM+2,c
 10173  0027EE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10174                           
 10175                           ;main.c: 1172: writeEEPROM(0xF2, 0xc3);
 10176  0027F2  6A0F               	clrf	?_writeEEPROM+1,c
 10177  0027F4  0EF2               	movlw	242
 10178  0027F6  6E0E               	movwf	?_writeEEPROM,c
 10179  0027F8  0EC3               	movlw	195
 10180  0027FA  6E10               	movwf	?_writeEEPROM+2,c
 10181  0027FC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10182                           
 10183                           ;main.c: 1173: writeEEPROM(0xF3, 0x50);
 10184  002800  6A0F               	clrf	?_writeEEPROM+1,c
 10185  002802  0EF3               	movlw	243
 10186  002804  6E0E               	movwf	?_writeEEPROM,c
 10187  002806  0E50               	movlw	80
 10188  002808  6E10               	movwf	?_writeEEPROM+2,c
 10189  00280A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10190                           
 10191                           ;main.c: 1177: writeEEPROM(0x9E, 0);
 10192  00280E  6A0F               	clrf	?_writeEEPROM+1,c
 10193  002810  0E9E               	movlw	158
 10194  002812  6E0E               	movwf	?_writeEEPROM,c
 10195  002814  0E00               	movlw	0
 10196  002816  6A10               	clrf	?_writeEEPROM+2,c
 10197  002818  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10198                           
 10199                           ;main.c: 1178: writeEEPROM(0x9F, 0);
 10200  00281C  6A0F               	clrf	?_writeEEPROM+1,c
 10201  00281E  0E9F               	movlw	159
 10202  002820  6E0E               	movwf	?_writeEEPROM,c
 10203  002822  0E00               	movlw	0
 10204  002824  6A10               	clrf	?_writeEEPROM+2,c
 10205  002826  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10206                           
 10207                           ;main.c: 1179: writeEEPROM(0xA0, 0);
 10208  00282A  6A0F               	clrf	?_writeEEPROM+1,c
 10209  00282C  0EA0               	movlw	160
 10210  00282E  6E0E               	movwf	?_writeEEPROM,c
 10211  002830  0E00               	movlw	0
 10212  002832  6A10               	clrf	?_writeEEPROM+2,c
 10213  002834  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10214                           
 10215                           ;main.c: 1180: writeEEPROM(0xA1, 0);
 10216  002838  6A0F               	clrf	?_writeEEPROM+1,c
 10217  00283A  0EA1               	movlw	161
 10218  00283C  6E0E               	movwf	?_writeEEPROM,c
 10219  00283E  0E00               	movlw	0
 10220  002840  6A10               	clrf	?_writeEEPROM+2,c
 10221  002842  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10222                           
 10223                           ;main.c: 1181: writeEEPROM(0xA2, 0);
 10224  002846  6A0F               	clrf	?_writeEEPROM+1,c
 10225  002848  0EA2               	movlw	162
 10226  00284A  6E0E               	movwf	?_writeEEPROM,c
 10227  00284C  0E00               	movlw	0
 10228  00284E  6A10               	clrf	?_writeEEPROM+2,c
 10229  002850  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10230                           
 10231                           ;main.c: 1182: writeEEPROM(0xA3, 0);
 10232  002854  6A0F               	clrf	?_writeEEPROM+1,c
 10233  002856  0EA3               	movlw	163
 10234  002858  6E0E               	movwf	?_writeEEPROM,c
 10235  00285A  0E00               	movlw	0
 10236  00285C  6A10               	clrf	?_writeEEPROM+2,c
 10237  00285E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10238                           
 10239                           ;main.c: 1183: writeEEPROM(0xA4, 0);
 10240  002862  6A0F               	clrf	?_writeEEPROM+1,c
 10241  002864  0EA4               	movlw	164
 10242  002866  6E0E               	movwf	?_writeEEPROM,c
 10243  002868  0E00               	movlw	0
 10244  00286A  6A10               	clrf	?_writeEEPROM+2,c
 10245  00286C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10246                           
 10247                           ;main.c: 1184: writeEEPROM(0xA5, 0);
 10248  002870  6A0F               	clrf	?_writeEEPROM+1,c
 10249  002872  0EA5               	movlw	165
 10250  002874  6E0E               	movwf	?_writeEEPROM,c
 10251  002876  0E00               	movlw	0
 10252  002878  6A10               	clrf	?_writeEEPROM+2,c
 10253  00287A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10254                           
 10255                           ;main.c: 1185: writeEEPROM(0xA6, 0);
 10256  00287E  6A0F               	clrf	?_writeEEPROM+1,c
 10257  002880  0EA6               	movlw	166
 10258  002882  6E0E               	movwf	?_writeEEPROM,c
 10259  002884  0E00               	movlw	0
 10260  002886  6A10               	clrf	?_writeEEPROM+2,c
 10261  002888  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10262                           
 10263                           ;main.c: 1186: writeEEPROM(0xA7, 0);
 10264  00288C  6A0F               	clrf	?_writeEEPROM+1,c
 10265  00288E  0EA7               	movlw	167
 10266  002890  6E0E               	movwf	?_writeEEPROM,c
 10267  002892  0E00               	movlw	0
 10268  002894  6A10               	clrf	?_writeEEPROM+2,c
 10269  002896  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10270                           
 10271                           ;main.c: 1187: writeEEPROM(0xA8, 0);
 10272  00289A  6A0F               	clrf	?_writeEEPROM+1,c
 10273  00289C  0EA8               	movlw	168
 10274  00289E  6E0E               	movwf	?_writeEEPROM,c
 10275  0028A0  0E00               	movlw	0
 10276  0028A2  6A10               	clrf	?_writeEEPROM+2,c
 10277  0028A4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10278                           
 10279                           ;main.c: 1188: writeEEPROM(0xA9, 0);
 10280  0028A8  6A0F               	clrf	?_writeEEPROM+1,c
 10281  0028AA  0EA9               	movlw	169
 10282  0028AC  6E0E               	movwf	?_writeEEPROM,c
 10283  0028AE  0E00               	movlw	0
 10284  0028B0  6A10               	clrf	?_writeEEPROM+2,c
 10285  0028B2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10286                           
 10287                           ;main.c: 1192: writeEEPROM(0xAA, 0);
 10288  0028B6  6A0F               	clrf	?_writeEEPROM+1,c
 10289  0028B8  0EAA               	movlw	170
 10290  0028BA  6E0E               	movwf	?_writeEEPROM,c
 10291  0028BC  0E00               	movlw	0
 10292  0028BE  6A10               	clrf	?_writeEEPROM+2,c
 10293  0028C0  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10294                           
 10295                           ;main.c: 1193: writeEEPROM(0xAB, 0);
 10296  0028C4  6A0F               	clrf	?_writeEEPROM+1,c
 10297  0028C6  0EAB               	movlw	171
 10298  0028C8  6E0E               	movwf	?_writeEEPROM,c
 10299  0028CA  0E00               	movlw	0
 10300  0028CC  6A10               	clrf	?_writeEEPROM+2,c
 10301  0028CE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10302                           
 10303                           ;main.c: 1194: writeEEPROM(0xAC, 0);
 10304  0028D2  6A0F               	clrf	?_writeEEPROM+1,c
 10305  0028D4  0EAC               	movlw	172
 10306  0028D6  6E0E               	movwf	?_writeEEPROM,c
 10307  0028D8  0E00               	movlw	0
 10308  0028DA  6A10               	clrf	?_writeEEPROM+2,c
 10309  0028DC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10310                           
 10311                           ;main.c: 1195: writeEEPROM(0xAD, 0);
 10312  0028E0  6A0F               	clrf	?_writeEEPROM+1,c
 10313  0028E2  0EAD               	movlw	173
 10314  0028E4  6E0E               	movwf	?_writeEEPROM,c
 10315  0028E6  0E00               	movlw	0
 10316  0028E8  6A10               	clrf	?_writeEEPROM+2,c
 10317  0028EA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10318                           
 10319                           ;main.c: 1196: writeEEPROM(0xAE, 0);
 10320  0028EE  6A0F               	clrf	?_writeEEPROM+1,c
 10321  0028F0  0EAE               	movlw	174
 10322  0028F2  6E0E               	movwf	?_writeEEPROM,c
 10323  0028F4  0E00               	movlw	0
 10324  0028F6  6A10               	clrf	?_writeEEPROM+2,c
 10325  0028F8  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10326                           
 10327                           ;main.c: 1197: writeEEPROM(0xAF, 0);
 10328  0028FC  6A0F               	clrf	?_writeEEPROM+1,c
 10329  0028FE  0EAF               	movlw	175
 10330  002900  6E0E               	movwf	?_writeEEPROM,c
 10331  002902  0E00               	movlw	0
 10332  002904  6A10               	clrf	?_writeEEPROM+2,c
 10333  002906  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10334                           
 10335                           ;main.c: 1198: writeEEPROM(0xB0, 0);
 10336  00290A  6A0F               	clrf	?_writeEEPROM+1,c
 10337  00290C  0EB0               	movlw	176
 10338  00290E  6E0E               	movwf	?_writeEEPROM,c
 10339  002910  0E00               	movlw	0
 10340  002912  6A10               	clrf	?_writeEEPROM+2,c
 10341  002914  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10342                           
 10343                           ;main.c: 1199: writeEEPROM(0xB1, 0);
 10344  002918  6A0F               	clrf	?_writeEEPROM+1,c
 10345  00291A  0EB1               	movlw	177
 10346  00291C  6E0E               	movwf	?_writeEEPROM,c
 10347  00291E  0E00               	movlw	0
 10348  002920  6A10               	clrf	?_writeEEPROM+2,c
 10349  002922  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10350                           
 10351                           ;main.c: 1200: writeEEPROM(0xB2, 0);
 10352  002926  6A0F               	clrf	?_writeEEPROM+1,c
 10353  002928  0EB2               	movlw	178
 10354  00292A  6E0E               	movwf	?_writeEEPROM,c
 10355  00292C  0E00               	movlw	0
 10356  00292E  6A10               	clrf	?_writeEEPROM+2,c
 10357  002930  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10358                           
 10359                           ;main.c: 1201: writeEEPROM(0xB3, 0);
 10360  002934  6A0F               	clrf	?_writeEEPROM+1,c
 10361  002936  0EB3               	movlw	179
 10362  002938  6E0E               	movwf	?_writeEEPROM,c
 10363  00293A  0E00               	movlw	0
 10364  00293C  6A10               	clrf	?_writeEEPROM+2,c
 10365  00293E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10366                           
 10367                           ;main.c: 1202: writeEEPROM(0xB4, 0);
 10368  002942  6A0F               	clrf	?_writeEEPROM+1,c
 10369  002944  0EB4               	movlw	180
 10370  002946  6E0E               	movwf	?_writeEEPROM,c
 10371  002948  0E00               	movlw	0
 10372  00294A  6A10               	clrf	?_writeEEPROM+2,c
 10373  00294C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10374                           
 10375                           ;main.c: 1203: writeEEPROM(0xB5, 0);
 10376  002950  6A0F               	clrf	?_writeEEPROM+1,c
 10377  002952  0EB5               	movlw	181
 10378  002954  6E0E               	movwf	?_writeEEPROM,c
 10379  002956  0E00               	movlw	0
 10380  002958  6A10               	clrf	?_writeEEPROM+2,c
 10381  00295A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10382                           
 10383                           ;main.c: 1207: for (uint8_t i = 0; i < 6; i++) {
 10384  00295E  6A11               	clrf	init_app_eeprom@i,c
 10385  002960                     l9582:
 10386                           
 10387                           ;main.c: 1208: writeEEPROM(0xB6 + i * 12, 0);
 10388  002960  5011               	movf	init_app_eeprom@i,w,c
 10389  002962  0D0C               	mullw	12
 10390  002964  0EB6               	movlw	182
 10391  002966  24F3               	addwf	prodl,w,c
 10392  002968  6E0E               	movwf	?_writeEEPROM,c
 10393  00296A  0E00               	movlw	0
 10394  00296C  20F4               	addwfc	prodh,w,c
 10395  00296E  6E0F               	movwf	?_writeEEPROM+1,c
 10396  002970  0E00               	movlw	0
 10397  002972  6A10               	clrf	?_writeEEPROM+2,c
 10398  002974  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10399                           
 10400                           ;main.c: 1209: writeEEPROM(0xB7 + i * 12, 0);
 10401  002978  5011               	movf	init_app_eeprom@i,w,c
 10402  00297A  0D0C               	mullw	12
 10403  00297C  0EB7               	movlw	183
 10404  00297E  24F3               	addwf	prodl,w,c
 10405  002980  6E0E               	movwf	?_writeEEPROM,c
 10406  002982  0E00               	movlw	0
 10407  002984  20F4               	addwfc	prodh,w,c
 10408  002986  6E0F               	movwf	?_writeEEPROM+1,c
 10409  002988  0E00               	movlw	0
 10410  00298A  6A10               	clrf	?_writeEEPROM+2,c
 10411  00298C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10412                           
 10413                           ;main.c: 1210: writeEEPROM(0xB8 + i * 12, 0);
 10414  002990  5011               	movf	init_app_eeprom@i,w,c
 10415  002992  0D0C               	mullw	12
 10416  002994  0EB8               	movlw	184
 10417  002996  24F3               	addwf	prodl,w,c
 10418  002998  6E0E               	movwf	?_writeEEPROM,c
 10419  00299A  0E00               	movlw	0
 10420  00299C  20F4               	addwfc	prodh,w,c
 10421  00299E  6E0F               	movwf	?_writeEEPROM+1,c
 10422  0029A0  0E00               	movlw	0
 10423  0029A2  6A10               	clrf	?_writeEEPROM+2,c
 10424  0029A4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10425                           
 10426                           ;main.c: 1211: writeEEPROM(0xB9 + i * 12, 0);
 10427  0029A8  5011               	movf	init_app_eeprom@i,w,c
 10428  0029AA  0D0C               	mullw	12
 10429  0029AC  0EB9               	movlw	185
 10430  0029AE  24F3               	addwf	prodl,w,c
 10431  0029B0  6E0E               	movwf	?_writeEEPROM,c
 10432  0029B2  0E00               	movlw	0
 10433  0029B4  20F4               	addwfc	prodh,w,c
 10434  0029B6  6E0F               	movwf	?_writeEEPROM+1,c
 10435  0029B8  0E00               	movlw	0
 10436  0029BA  6A10               	clrf	?_writeEEPROM+2,c
 10437  0029BC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10438                           
 10439                           ;main.c: 1212: writeEEPROM(0xBA + i * 12, 0);
 10440  0029C0  5011               	movf	init_app_eeprom@i,w,c
 10441  0029C2  0D0C               	mullw	12
 10442  0029C4  0EBA               	movlw	186
 10443  0029C6  24F3               	addwf	prodl,w,c
 10444  0029C8  6E0E               	movwf	?_writeEEPROM,c
 10445  0029CA  0E00               	movlw	0
 10446  0029CC  20F4               	addwfc	prodh,w,c
 10447  0029CE  6E0F               	movwf	?_writeEEPROM+1,c
 10448  0029D0  0E00               	movlw	0
 10449  0029D2  6A10               	clrf	?_writeEEPROM+2,c
 10450  0029D4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10451                           
 10452                           ;main.c: 1213: writeEEPROM(0xBB + i * 12, 0);
 10453  0029D8  5011               	movf	init_app_eeprom@i,w,c
 10454  0029DA  0D0C               	mullw	12
 10455  0029DC  0EBB               	movlw	187
 10456  0029DE  24F3               	addwf	prodl,w,c
 10457  0029E0  6E0E               	movwf	?_writeEEPROM,c
 10458  0029E2  0E00               	movlw	0
 10459  0029E4  20F4               	addwfc	prodh,w,c
 10460  0029E6  6E0F               	movwf	?_writeEEPROM+1,c
 10461  0029E8  0E00               	movlw	0
 10462  0029EA  6A10               	clrf	?_writeEEPROM+2,c
 10463  0029EC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10464                           
 10465                           ;main.c: 1214: writeEEPROM(0xBC + i * 12, 0);
 10466  0029F0  5011               	movf	init_app_eeprom@i,w,c
 10467  0029F2  0D0C               	mullw	12
 10468  0029F4  0EBC               	movlw	188
 10469  0029F6  24F3               	addwf	prodl,w,c
 10470  0029F8  6E0E               	movwf	?_writeEEPROM,c
 10471  0029FA  0E00               	movlw	0
 10472  0029FC  20F4               	addwfc	prodh,w,c
 10473  0029FE  6E0F               	movwf	?_writeEEPROM+1,c
 10474  002A00  0E00               	movlw	0
 10475  002A02  6A10               	clrf	?_writeEEPROM+2,c
 10476  002A04  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10477                           
 10478                           ;main.c: 1215: writeEEPROM(0xBD + i * 12, 0);
 10479  002A08  5011               	movf	init_app_eeprom@i,w,c
 10480  002A0A  0D0C               	mullw	12
 10481  002A0C  0EBD               	movlw	189
 10482  002A0E  24F3               	addwf	prodl,w,c
 10483  002A10  6E0E               	movwf	?_writeEEPROM,c
 10484  002A12  0E00               	movlw	0
 10485  002A14  20F4               	addwfc	prodh,w,c
 10486  002A16  6E0F               	movwf	?_writeEEPROM+1,c
 10487  002A18  0E00               	movlw	0
 10488  002A1A  6A10               	clrf	?_writeEEPROM+2,c
 10489  002A1C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10490                           
 10491                           ;main.c: 1216: writeEEPROM(0xBE + i * 12, 0);
 10492  002A20  5011               	movf	init_app_eeprom@i,w,c
 10493  002A22  0D0C               	mullw	12
 10494  002A24  0EBE               	movlw	190
 10495  002A26  24F3               	addwf	prodl,w,c
 10496  002A28  6E0E               	movwf	?_writeEEPROM,c
 10497  002A2A  0E00               	movlw	0
 10498  002A2C  20F4               	addwfc	prodh,w,c
 10499  002A2E  6E0F               	movwf	?_writeEEPROM+1,c
 10500  002A30  0E00               	movlw	0
 10501  002A32  6A10               	clrf	?_writeEEPROM+2,c
 10502  002A34  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10503                           
 10504                           ;main.c: 1217: writeEEPROM(0xBF + i * 12, 0);
 10505  002A38  5011               	movf	init_app_eeprom@i,w,c
 10506  002A3A  0D0C               	mullw	12
 10507  002A3C  0EBF               	movlw	191
 10508  002A3E  24F3               	addwf	prodl,w,c
 10509  002A40  6E0E               	movwf	?_writeEEPROM,c
 10510  002A42  0E00               	movlw	0
 10511  002A44  20F4               	addwfc	prodh,w,c
 10512  002A46  6E0F               	movwf	?_writeEEPROM+1,c
 10513  002A48  0E00               	movlw	0
 10514  002A4A  6A10               	clrf	?_writeEEPROM+2,c
 10515  002A4C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10516                           
 10517                           ;main.c: 1218: writeEEPROM(0xC0 + i * 12, 0);
 10518  002A50  5011               	movf	init_app_eeprom@i,w,c
 10519  002A52  0D0C               	mullw	12
 10520  002A54  0EC0               	movlw	192
 10521  002A56  24F3               	addwf	prodl,w,c
 10522  002A58  6E0E               	movwf	?_writeEEPROM,c
 10523  002A5A  0E00               	movlw	0
 10524  002A5C  20F4               	addwfc	prodh,w,c
 10525  002A5E  6E0F               	movwf	?_writeEEPROM+1,c
 10526  002A60  0E00               	movlw	0
 10527  002A62  6A10               	clrf	?_writeEEPROM+2,c
 10528  002A64  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10529                           
 10530                           ;main.c: 1219: writeEEPROM(0xC1 + i * 12, 0);
 10531  002A68  5011               	movf	init_app_eeprom@i,w,c
 10532  002A6A  0D0C               	mullw	12
 10533  002A6C  0EC1               	movlw	193
 10534  002A6E  24F3               	addwf	prodl,w,c
 10535  002A70  6E0E               	movwf	?_writeEEPROM,c
 10536  002A72  0E00               	movlw	0
 10537  002A74  20F4               	addwfc	prodh,w,c
 10538  002A76  6E0F               	movwf	?_writeEEPROM+1,c
 10539  002A78  0E00               	movlw	0
 10540  002A7A  6A10               	clrf	?_writeEEPROM+2,c
 10541  002A7C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10542  002A80  2A11               	incf	init_app_eeprom@i,f,c
 10543  002A82  0E05               	movlw	5
 10544  002A84  6411               	cpfsgt	init_app_eeprom@i,c
 10545  002A86  D76C               	goto	l9582
 10546  002A88  0C05               	retlw	5
 10547  002A8A                     __end_of_init_app_eeprom:
 10548                           	opt stack 0
 10549                           tblptru	equ	0xFF8
 10550                           tblptrh	equ	0xFF7
 10551                           tblptrl	equ	0xFF6
 10552                           tablat	equ	0xFF5
 10553                           prodh	equ	0xFF4
 10554                           prodl	equ	0xFF3
 10555                           postinc0	equ	0xFEE
 10556                           wreg	equ	0xFE8
 10557                           postdec1	equ	0xFE5
 10558                           fsr1h	equ	0xFE2
 10559                           fsr1l	equ	0xFE1
 10560                           indf2	equ	0xFDF
 10561                           postinc2	equ	0xFDE
 10562                           postdec2	equ	0xFDD
 10563                           fsr2h	equ	0xFDA
 10564                           fsr2l	equ	0xFD9
 10565                           status	equ	0xFD8
 10566                           
 10567 ;; *************** function _vscp_setManufacturerId *****************
 10568 ;; Defined at:
 10569 ;;		line 2652 in file "../main.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;  idx             1    wreg     unsigned char 
 10572 ;;  data            1   16[COMRAM] unsigned char 
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;  idx             1   17[COMRAM] unsigned char 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;		None               void
 10577 ;; Registers used:
 10578 ;;		wreg, status,2, status,0, cstack
 10579 ;; Tracked objects:
 10580 ;;		On entry : F/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10584 ;;      Params:         1       0       0       0       0       0       0
 10585 ;;      Locals:         1       0       0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0
 10587 ;;      Totals:         2       0       0       0       0       0       0
 10588 ;;Total ram usage:        2 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    3
 10591 ;; This function calls:
 10592 ;;		_writeEEPROM
 10593 ;; This function is called by:
 10594 ;;		_vscp_writeStdReg
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text39
 10599  005C9C                     __ptext39:
 10600                           	opt stack 0
 10601  005C9C                     _vscp_setManufacturerId:
 10602                           	opt stack 25
 10603                           
 10604                           ;incstack = 0
 10605                           ;incstack = 0
 10606                           ;vscp_setManufacturerId@idx stored from wreg
 10607  005C9C  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;main.c: 2653: writeEEPROM(0x09 + idx, data);
 10611  005CA0  0E09               	movlw	9
 10612  005CA2  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10613  005CA4  6E0E               	movwf	?_writeEEPROM,c
 10614  005CA6  6A0F               	clrf	?_writeEEPROM+1,c
 10615  005CA8  0E00               	movlw	0
 10616  005CAA  220F               	addwfc	?_writeEEPROM+1,f,c
 10617  005CAC  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10618  005CB0  EFAB  F02D         	goto	_writeEEPROM	;wreg free
 10619  005CB4                     __end_of_vscp_setManufacturerId:
 10620                           	opt stack 0
 10621                           tblptru	equ	0xFF8
 10622                           tblptrh	equ	0xFF7
 10623                           tblptrl	equ	0xFF6
 10624                           tablat	equ	0xFF5
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           postinc0	equ	0xFEE
 10628                           wreg	equ	0xFE8
 10629                           postdec1	equ	0xFE5
 10630                           fsr1h	equ	0xFE2
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           fsr2h	equ	0xFDA
 10636                           fsr2l	equ	0xFD9
 10637                           status	equ	0xFD8
 10638                           
 10639 ;; *************** function _vscp_setUserID *****************
 10640 ;; Defined at:
 10641 ;;		line 2630 in file "../main.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  idx             1    wreg     unsigned char 
 10644 ;;  data            1   16[COMRAM] unsigned char 
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  idx             1   17[COMRAM] unsigned char 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;		None               void
 10649 ;; Registers used:
 10650 ;;		wreg, status,2, status,0, cstack
 10651 ;; Tracked objects:
 10652 ;;		On entry : F/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10656 ;;      Params:         1       0       0       0       0       0       0
 10657 ;;      Locals:         1       0       0       0       0       0       0
 10658 ;;      Temps:          0       0       0       0       0       0       0
 10659 ;;      Totals:         2       0       0       0       0       0       0
 10660 ;;Total ram usage:        2 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    3
 10663 ;; This function calls:
 10664 ;;		_writeEEPROM
 10665 ;; This function is called by:
 10666 ;;		_vscp_writeStdReg
 10667 ;; This function uses a non-reentrant model
 10668 ;;
 10669                           
 10670                           	psect	text40
 10671  005CB4                     __ptext40:
 10672                           	opt stack 0
 10673  005CB4                     _vscp_setUserID:
 10674                           	opt stack 25
 10675                           
 10676                           ;incstack = 0
 10677                           ;incstack = 0
 10678                           ;vscp_setUserID@idx stored from wreg
 10679  005CB4  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;main.c: 2631: writeEEPROM(idx + 0x04, data);
 10683  005CB8  0E04               	movlw	4
 10684  005CBA  2412               	addwf	vscp_setUserID@idx,w,c
 10685  005CBC  6E0E               	movwf	?_writeEEPROM,c
 10686  005CBE  6A0F               	clrf	?_writeEEPROM+1,c
 10687  005CC0  0E00               	movlw	0
 10688  005CC2  220F               	addwfc	?_writeEEPROM+1,f,c
 10689  005CC4  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10690  005CC8  EFAB  F02D         	goto	_writeEEPROM	;wreg free
 10691  005CCC                     __end_of_vscp_setUserID:
 10692                           	opt stack 0
 10693                           tblptru	equ	0xFF8
 10694                           tblptrh	equ	0xFF7
 10695                           tblptrl	equ	0xFF6
 10696                           tablat	equ	0xFF5
 10697                           prodh	equ	0xFF4
 10698                           prodl	equ	0xFF3
 10699                           postinc0	equ	0xFEE
 10700                           wreg	equ	0xFE8
 10701                           postdec1	equ	0xFE5
 10702                           fsr1h	equ	0xFE2
 10703                           fsr1l	equ	0xFE1
 10704                           indf2	equ	0xFDF
 10705                           postinc2	equ	0xFDE
 10706                           postdec2	equ	0xFDD
 10707                           fsr2h	equ	0xFDA
 10708                           fsr2l	equ	0xFD9
 10709                           status	equ	0xFD8
 10710                           
 10711 ;; *************** function _vscp_setGUID *****************
 10712 ;; Defined at:
 10713 ;;		line 2599 in file "../main.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;  idx             1    wreg     unsigned char 
 10716 ;;  data            1   16[COMRAM] unsigned char 
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;  idx             1   17[COMRAM] unsigned char 
 10719 ;; Return value:  Size  Location     Type
 10720 ;;		None               void
 10721 ;; Registers used:
 10722 ;;		wreg, status,2, status,0, cstack
 10723 ;; Tracked objects:
 10724 ;;		On entry : F/0
 10725 ;;		On exit  : 0/0
 10726 ;;		Unchanged: 0/0
 10727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10728 ;;      Params:         1       0       0       0       0       0       0
 10729 ;;      Locals:         1       0       0       0       0       0       0
 10730 ;;      Temps:          0       0       0       0       0       0       0
 10731 ;;      Totals:         2       0       0       0       0       0       0
 10732 ;;Total ram usage:        2 bytes
 10733 ;; Hardware stack levels used:    1
 10734 ;; Hardware stack levels required when called:    3
 10735 ;; This function calls:
 10736 ;;		_writeEEPROM
 10737 ;; This function is called by:
 10738 ;;		_vscp_writeStdReg
 10739 ;; This function uses a non-reentrant model
 10740 ;;
 10741                           
 10742                           	psect	text41
 10743  005C0A                     __ptext41:
 10744                           	opt stack 0
 10745  005C0A                     _vscp_setGUID:
 10746                           	opt stack 25
 10747                           
 10748                           ;incstack = 0
 10749                           ;incstack = 0
 10750                           ;vscp_setGUID@idx stored from wreg
 10751  005C0A  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;main.c: 2600: if ( idx>15 ) return;
 10755  005C0E  0E0F               	movlw	15
 10756  005C10  6412               	cpfsgt	vscp_setGUID@idx,c
 10757  005C12  D001               	goto	l11028
 10758  005C14  D00A               	goto	l552
 10759  005C16                     l11028:
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;main.c: 2601: writeEEPROM( 0x11 + idx, data );
 10763  005C16  0E11               	movlw	17
 10764  005C18  2412               	addwf	vscp_setGUID@idx,w,c
 10765  005C1A  6E0E               	movwf	?_writeEEPROM,c
 10766  005C1C  6A0F               	clrf	?_writeEEPROM+1,c
 10767  005C1E  0E00               	movlw	0
 10768  005C20  220F               	addwfc	?_writeEEPROM+1,f,c
 10769  005C22  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10770  005C26  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10771  005C2A                     l552:
 10772  005C2A  0012               	return	
 10773  005C2C                     __end_of_vscp_setGUID:
 10774                           	opt stack 0
 10775                           tblptru	equ	0xFF8
 10776                           tblptrh	equ	0xFF7
 10777                           tblptrl	equ	0xFF6
 10778                           tablat	equ	0xFF5
 10779                           prodh	equ	0xFF4
 10780                           prodl	equ	0xFF3
 10781                           postinc0	equ	0xFEE
 10782                           wreg	equ	0xFE8
 10783                           postdec1	equ	0xFE5
 10784                           fsr1h	equ	0xFE2
 10785                           fsr1l	equ	0xFE1
 10786                           indf2	equ	0xFDF
 10787                           postinc2	equ	0xFDE
 10788                           postdec2	equ	0xFDD
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function _vscp_writeAppReg *****************
 10794 ;; Defined at:
 10795 ;;		line 1892 in file "../main.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;  reg             1    wreg     unsigned char 
 10798 ;;  val             1   32[COMRAM] unsigned char 
 10799 ;; Auto vars:     Size  Location     Type
 10800 ;;  reg             1   34[COMRAM] unsigned char 
 10801 ;;  pos             1   33[COMRAM] unsigned char 
 10802 ;;  rv              1   35[COMRAM] unsigned char 
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  1    wreg      unsigned char 
 10805 ;; Registers used:
 10806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10807 ;; Tracked objects:
 10808 ;;		On entry : F/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10812 ;;      Params:         1       0       0       0       0       0       0
 10813 ;;      Locals:         3       0       0       0       0       0       0
 10814 ;;      Temps:          0       0       0       0       0       0       0
 10815 ;;      Totals:         4       0       0       0       0       0       0
 10816 ;;Total ram usage:        4 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; Hardware stack levels required when called:    4
 10819 ;; This function calls:
 10820 ;;		_writeEEPROM
 10821 ;;		_readEEPROM
 10822 ;;		_writeCoeffs2Ram
 10823 ;; This function is called by:
 10824 ;;		_vscp_writeRegister
 10825 ;;		_vscp_handleProtocolEvent
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           	psect	text42
 10830  000B6E                     __ptext42:
 10831                           	opt stack 0
 10832  000B6E                     _vscp_writeAppReg:
 10833                           	opt stack 24
 10834                           
 10835                           ;incstack = 0
 10836                           ;incstack = 0
 10837                           ;vscp_writeAppReg@reg stored from wreg
 10838  000B6E  CFE8 F023          	movff	wreg,vscp_writeAppReg@reg
 10839                           
 10840                           ; BSR set to: 0
 10841                           ;main.c: 1893: uint8_t rv;
 10842                           ;main.c: 1900: rv = ~val;
 10843  000B72  1C21               	comf	vscp_writeAppReg@val,w,c
 10844  000B74  6E24               	movwf	vscp_writeAppReg@rv,c
 10845                           
 10846                           ;main.c: 1902: if (0 == vscp_page_select) {
 10847  000B76  5047               	movf	_vscp_page_select+1,w,c
 10848  000B78  1046               	iorwf	_vscp_page_select,w,c
 10849  000B7A  E102 EFB7  F00A    	bz	l10990
 10850  000B80  EFF1  F00B         	goto	l10992
 10851  000B84                     l10800:
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;main.c: 1908: writeEEPROM(0x41, val);
 10855  000B84  6A0F               	clrf	?_writeEEPROM+1,c
 10856  000B86  0E41               	movlw	65
 10857  000B88  6E0E               	movwf	?_writeEEPROM,c
 10858  000B8A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10859  000B8E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10860                           
 10861                           ;main.c: 1909: rv = readEEPROM(0x41);
 10862  000B92  6A0F               	clrf	?_readEEPROM+1,c
 10863  000B94  0E41               	movlw	65
 10864  000B96  6E0E               	movwf	?_readEEPROM,c
 10865  000B98  ECA8  F02E         	call	_readEEPROM	;wreg free
 10866  000B9C  EF35  F00C         	goto	L20
 10867  000BA0                     l10802:
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;main.c: 1914: writeEEPROM(0x42, val);
 10871  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
 10872  000BA2  0E42               	movlw	66
 10873  000BA4  6E0E               	movwf	?_writeEEPROM,c
 10874  000BA6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10875  000BAA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10876                           
 10877                           ;main.c: 1915: rv = readEEPROM(0x42);
 10878  000BAE  6A0F               	clrf	?_readEEPROM+1,c
 10879  000BB0  0E42               	movlw	66
 10880  000BB2  6E0E               	movwf	?_readEEPROM,c
 10881  000BB4  ECA8  F02E         	call	_readEEPROM	;wreg free
 10882  000BB8  EF35  F00C         	goto	L20
 10883  000BBC                     l10804:
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;main.c: 1924: writeEEPROM(0x43, val);
 10887  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 10888  000BBE  0E43               	movlw	67
 10889  000BC0  6E0E               	movwf	?_writeEEPROM,c
 10890  000BC2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10891  000BC6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10892                           
 10893                           ;main.c: 1925: rv = readEEPROM(0x43);
 10894  000BCA  6A0F               	clrf	?_readEEPROM+1,c
 10895  000BCC  0E43               	movlw	67
 10896  000BCE  6E0E               	movwf	?_readEEPROM,c
 10897  000BD0  ECA8  F02E         	call	_readEEPROM	;wreg free
 10898  000BD4  EF35  F00C         	goto	L20
 10899  000BD8                     l10806:
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;main.c: 1930: writeEEPROM(0x44, val);
 10903  000BD8  6A0F               	clrf	?_writeEEPROM+1,c
 10904  000BDA  0E44               	movlw	68
 10905  000BDC  6E0E               	movwf	?_writeEEPROM,c
 10906  000BDE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10907  000BE2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10908                           
 10909                           ;main.c: 1931: rv = readEEPROM(0x44);
 10910  000BE6  6A0F               	clrf	?_readEEPROM+1,c
 10911  000BE8  0E44               	movlw	68
 10912  000BEA  6E0E               	movwf	?_readEEPROM,c
 10913  000BEC  ECA8  F02E         	call	_readEEPROM	;wreg free
 10914  000BF0  EF35  F00C         	goto	L20
 10915  000BF4                     l10808:
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;main.c: 1936: writeEEPROM(0x45, val);
 10919  000BF4  6A0F               	clrf	?_writeEEPROM+1,c
 10920  000BF6  0E45               	movlw	69
 10921  000BF8  6E0E               	movwf	?_writeEEPROM,c
 10922  000BFA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10923  000BFE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10924                           
 10925                           ;main.c: 1937: rv = readEEPROM(0x45);
 10926  000C02  6A0F               	clrf	?_readEEPROM+1,c
 10927  000C04  0E45               	movlw	69
 10928  000C06  6E0E               	movwf	?_readEEPROM,c
 10929  000C08  ECA8  F02E         	call	_readEEPROM	;wreg free
 10930  000C0C  EF35  F00C         	goto	L20
 10931  000C10                     l10810:
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;main.c: 1942: writeEEPROM(0x46, val);
 10935  000C10  6A0F               	clrf	?_writeEEPROM+1,c
 10936  000C12  0E46               	movlw	70
 10937  000C14  6E0E               	movwf	?_writeEEPROM,c
 10938  000C16  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10939  000C1A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10940                           
 10941                           ;main.c: 1943: rv = readEEPROM(0x46);
 10942  000C1E  6A0F               	clrf	?_readEEPROM+1,c
 10943  000C20  0E46               	movlw	70
 10944  000C22  6E0E               	movwf	?_readEEPROM,c
 10945  000C24  ECA8  F02E         	call	_readEEPROM	;wreg free
 10946  000C28  EF35  F00C         	goto	L20
 10947  000C2C                     l10812:
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;main.c: 1948: writeEEPROM(0x47, val);
 10951  000C2C  6A0F               	clrf	?_writeEEPROM+1,c
 10952  000C2E  0E47               	movlw	71
 10953  000C30  6E0E               	movwf	?_writeEEPROM,c
 10954  000C32  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10955  000C36  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10956                           
 10957                           ;main.c: 1949: rv = readEEPROM(0x47);
 10958  000C3A  6A0F               	clrf	?_readEEPROM+1,c
 10959  000C3C  0E47               	movlw	71
 10960  000C3E  6E0E               	movwf	?_readEEPROM,c
 10961  000C40  ECA8  F02E         	call	_readEEPROM	;wreg free
 10962  000C44  EF35  F00C         	goto	L20
 10963  000C48                     l10814:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;main.c: 1954: writeEEPROM(0x48, val);
 10967  000C48  6A0F               	clrf	?_writeEEPROM+1,c
 10968  000C4A  0E48               	movlw	72
 10969  000C4C  6E0E               	movwf	?_writeEEPROM,c
 10970  000C4E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10971  000C52  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10972                           
 10973                           ;main.c: 1955: rv = readEEPROM(0x48);
 10974  000C56  6A0F               	clrf	?_readEEPROM+1,c
 10975  000C58  0E48               	movlw	72
 10976  000C5A  6E0E               	movwf	?_readEEPROM,c
 10977  000C5C  ECA8  F02E         	call	_readEEPROM	;wreg free
 10978  000C60  EF35  F00C         	goto	L20
 10979  000C64                     l10816:
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 1964: writeEEPROM(0x49, val);
 10983  000C64  6A0F               	clrf	?_writeEEPROM+1,c
 10984  000C66  0E49               	movlw	73
 10985  000C68  6E0E               	movwf	?_writeEEPROM,c
 10986  000C6A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10987  000C6E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 10988                           
 10989                           ;main.c: 1965: rv = readEEPROM(0x49);
 10990  000C72  6A0F               	clrf	?_readEEPROM+1,c
 10991  000C74  0E49               	movlw	73
 10992  000C76  6E0E               	movwf	?_readEEPROM,c
 10993  000C78  ECA8  F02E         	call	_readEEPROM	;wreg free
 10994  000C7C  EF35  F00C         	goto	L20
 10995  000C80                     l10818:
 10996                           
 10997                           ; BSR set to: 0
 10998                           ;main.c: 1970: writeEEPROM(0x4A, val);
 10999  000C80  6A0F               	clrf	?_writeEEPROM+1,c
 11000  000C82  0E4A               	movlw	74
 11001  000C84  6E0E               	movwf	?_writeEEPROM,c
 11002  000C86  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11003  000C8A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11004                           
 11005                           ;main.c: 1971: rv = readEEPROM(0x4A);
 11006  000C8E  6A0F               	clrf	?_readEEPROM+1,c
 11007  000C90  0E4A               	movlw	74
 11008  000C92  6E0E               	movwf	?_readEEPROM,c
 11009  000C94  ECA8  F02E         	call	_readEEPROM	;wreg free
 11010  000C98  EF35  F00C         	goto	L20
 11011  000C9C                     l10820:
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;main.c: 1976: writeEEPROM(0x4B, val);
 11015  000C9C  6A0F               	clrf	?_writeEEPROM+1,c
 11016  000C9E  0E4B               	movlw	75
 11017  000CA0  6E0E               	movwf	?_writeEEPROM,c
 11018  000CA2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11019  000CA6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11020                           
 11021                           ;main.c: 1977: rv = readEEPROM(0x4B);
 11022  000CAA  6A0F               	clrf	?_readEEPROM+1,c
 11023  000CAC  0E4B               	movlw	75
 11024  000CAE  6E0E               	movwf	?_readEEPROM,c
 11025  000CB0  ECA8  F02E         	call	_readEEPROM	;wreg free
 11026  000CB4  EF35  F00C         	goto	L20
 11027  000CB8                     l10822:
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;main.c: 1982: writeEEPROM(0x4C, val);
 11031  000CB8  6A0F               	clrf	?_writeEEPROM+1,c
 11032  000CBA  0E4C               	movlw	76
 11033  000CBC  6E0E               	movwf	?_writeEEPROM,c
 11034  000CBE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11035  000CC2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11036                           
 11037                           ;main.c: 1983: rv = readEEPROM(0x4C);
 11038  000CC6  6A0F               	clrf	?_readEEPROM+1,c
 11039  000CC8  0E4C               	movlw	76
 11040  000CCA  6E0E               	movwf	?_readEEPROM,c
 11041  000CCC  ECA8  F02E         	call	_readEEPROM	;wreg free
 11042  000CD0  EF35  F00C         	goto	L20
 11043  000CD4                     l10824:
 11044                           
 11045                           ; BSR set to: 0
 11046                           ;main.c: 1988: writeEEPROM(0x4D, val);
 11047  000CD4  6A0F               	clrf	?_writeEEPROM+1,c
 11048  000CD6  0E4D               	movlw	77
 11049  000CD8  6E0E               	movwf	?_writeEEPROM,c
 11050  000CDA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11051  000CDE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11052                           
 11053                           ;main.c: 1989: rv = readEEPROM(0x4D);
 11054  000CE2  6A0F               	clrf	?_readEEPROM+1,c
 11055  000CE4  0E4D               	movlw	77
 11056  000CE6  6E0E               	movwf	?_readEEPROM,c
 11057  000CE8  ECA8  F02E         	call	_readEEPROM	;wreg free
 11058  000CEC  EF35  F00C         	goto	L20
 11059  000CF0                     l10826:
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;main.c: 1994: writeEEPROM(0x4E, val);
 11063  000CF0  6A0F               	clrf	?_writeEEPROM+1,c
 11064  000CF2  0E4E               	movlw	78
 11065  000CF4  6E0E               	movwf	?_writeEEPROM,c
 11066  000CF6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11067  000CFA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11068                           
 11069                           ;main.c: 1995: rv = readEEPROM(0x4E);
 11070  000CFE  6A0F               	clrf	?_readEEPROM+1,c
 11071  000D00  0E4E               	movlw	78
 11072  000D02  6E0E               	movwf	?_readEEPROM,c
 11073  000D04  ECA8  F02E         	call	_readEEPROM	;wreg free
 11074  000D08  EF35  F00C         	goto	L20
 11075  000D0C                     l10828:
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;main.c: 2004: writeEEPROM(0x4F, val);
 11079  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
 11080  000D0E  0E4F               	movlw	79
 11081  000D10  6E0E               	movwf	?_writeEEPROM,c
 11082  000D12  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11083  000D16  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11084                           
 11085                           ;main.c: 2005: rv = readEEPROM(0x4F);
 11086  000D1A  6A0F               	clrf	?_readEEPROM+1,c
 11087  000D1C  0E4F               	movlw	79
 11088  000D1E  6E0E               	movwf	?_readEEPROM,c
 11089  000D20  ECA8  F02E         	call	_readEEPROM	;wreg free
 11090  000D24  EF35  F00C         	goto	L20
 11091  000D28                     l10830:
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;main.c: 2010: writeEEPROM(0x50, val);
 11095  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 11096  000D2A  0E50               	movlw	80
 11097  000D2C  6E0E               	movwf	?_writeEEPROM,c
 11098  000D2E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11099  000D32  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11100                           
 11101                           ;main.c: 2011: rv = readEEPROM(0x50);
 11102  000D36  6A0F               	clrf	?_readEEPROM+1,c
 11103  000D38  0E50               	movlw	80
 11104  000D3A  6E0E               	movwf	?_readEEPROM,c
 11105  000D3C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11106  000D40  EF35  F00C         	goto	L20
 11107  000D44                     l10832:
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;main.c: 2016: writeEEPROM(0x51, val);
 11111  000D44  6A0F               	clrf	?_writeEEPROM+1,c
 11112  000D46  0E51               	movlw	81
 11113  000D48  6E0E               	movwf	?_writeEEPROM,c
 11114  000D4A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11115  000D4E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11116                           
 11117                           ;main.c: 2017: rv = readEEPROM(0x51);
 11118  000D52  6A0F               	clrf	?_readEEPROM+1,c
 11119  000D54  0E51               	movlw	81
 11120  000D56  6E0E               	movwf	?_readEEPROM,c
 11121  000D58  ECA8  F02E         	call	_readEEPROM	;wreg free
 11122  000D5C  EF35  F00C         	goto	L20
 11123  000D60                     l10834:
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;main.c: 2022: writeEEPROM(0x52, val);
 11127  000D60  6A0F               	clrf	?_writeEEPROM+1,c
 11128  000D62  0E52               	movlw	82
 11129  000D64  6E0E               	movwf	?_writeEEPROM,c
 11130  000D66  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11131  000D6A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11132                           
 11133                           ;main.c: 2023: rv = readEEPROM(0x52);
 11134  000D6E  6A0F               	clrf	?_readEEPROM+1,c
 11135  000D70  0E52               	movlw	82
 11136  000D72  6E0E               	movwf	?_readEEPROM,c
 11137  000D74  ECA8  F02E         	call	_readEEPROM	;wreg free
 11138  000D78  EF35  F00C         	goto	L20
 11139  000D7C                     l10836:
 11140                           
 11141                           ; BSR set to: 0
 11142                           ;main.c: 2028: writeEEPROM(0x53, val);
 11143  000D7C  6A0F               	clrf	?_writeEEPROM+1,c
 11144  000D7E  0E53               	movlw	83
 11145  000D80  6E0E               	movwf	?_writeEEPROM,c
 11146  000D82  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11147  000D86  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11148                           
 11149                           ;main.c: 2029: rv = readEEPROM(0x53);
 11150  000D8A  6A0F               	clrf	?_readEEPROM+1,c
 11151  000D8C  0E53               	movlw	83
 11152  000D8E  6E0E               	movwf	?_readEEPROM,c
 11153  000D90  ECA8  F02E         	call	_readEEPROM	;wreg free
 11154  000D94  EF35  F00C         	goto	L20
 11155  000D98                     l10838:
 11156                           
 11157                           ; BSR set to: 0
 11158                           ;main.c: 2034: writeEEPROM(0x54, val);
 11159  000D98  6A0F               	clrf	?_writeEEPROM+1,c
 11160  000D9A  0E54               	movlw	84
 11161  000D9C  6E0E               	movwf	?_writeEEPROM,c
 11162  000D9E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11163  000DA2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11164                           
 11165                           ;main.c: 2035: rv = readEEPROM(0x54);
 11166  000DA6  6A0F               	clrf	?_readEEPROM+1,c
 11167  000DA8  0E54               	movlw	84
 11168  000DAA  6E0E               	movwf	?_readEEPROM,c
 11169  000DAC  ECA8  F02E         	call	_readEEPROM	;wreg free
 11170  000DB0  EF35  F00C         	goto	L20
 11171  000DB4                     l10840:
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;main.c: 2040: writeEEPROM(0x55, val);
 11175  000DB4  6A0F               	clrf	?_writeEEPROM+1,c
 11176  000DB6  0E55               	movlw	85
 11177  000DB8  6E0E               	movwf	?_writeEEPROM,c
 11178  000DBA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11179  000DBE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11180                           
 11181                           ;main.c: 2041: rv = readEEPROM(0x55);
 11182  000DC2  6A0F               	clrf	?_readEEPROM+1,c
 11183  000DC4  0E55               	movlw	85
 11184  000DC6  6E0E               	movwf	?_readEEPROM,c
 11185  000DC8  ECA8  F02E         	call	_readEEPROM	;wreg free
 11186  000DCC  EF35  F00C         	goto	L20
 11187  000DD0                     l10842:
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;main.c: 2046: writeEEPROM(0x56, val);
 11191  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
 11192  000DD2  0E56               	movlw	86
 11193  000DD4  6E0E               	movwf	?_writeEEPROM,c
 11194  000DD6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11195  000DDA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11196                           
 11197                           ;main.c: 2047: rv = readEEPROM(0x56);
 11198  000DDE  6A0F               	clrf	?_readEEPROM+1,c
 11199  000DE0  0E56               	movlw	86
 11200  000DE2  6E0E               	movwf	?_readEEPROM,c
 11201  000DE4  ECA8  F02E         	call	_readEEPROM	;wreg free
 11202  000DE8  EF35  F00C         	goto	L20
 11203  000DEC                     l10844:
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;main.c: 2052: writeEEPROM(0x57, val);
 11207  000DEC  6A0F               	clrf	?_writeEEPROM+1,c
 11208  000DEE  0E57               	movlw	87
 11209  000DF0  6E0E               	movwf	?_writeEEPROM,c
 11210  000DF2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11211  000DF6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11212                           
 11213                           ;main.c: 2053: rv = readEEPROM(0x57);
 11214  000DFA  6A0F               	clrf	?_readEEPROM+1,c
 11215  000DFC  0E57               	movlw	87
 11216  000DFE  6E0E               	movwf	?_readEEPROM,c
 11217  000E00  ECA8  F02E         	call	_readEEPROM	;wreg free
 11218  000E04  EF35  F00C         	goto	L20
 11219  000E08                     l10846:
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;main.c: 2058: writeEEPROM(0x58, val);
 11223  000E08  6A0F               	clrf	?_writeEEPROM+1,c
 11224  000E0A  0E58               	movlw	88
 11225  000E0C  6E0E               	movwf	?_writeEEPROM,c
 11226  000E0E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11227  000E12  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11228                           
 11229                           ;main.c: 2059: rv = readEEPROM(0x58);
 11230  000E16  6A0F               	clrf	?_readEEPROM+1,c
 11231  000E18  0E58               	movlw	88
 11232  000E1A  6E0E               	movwf	?_readEEPROM,c
 11233  000E1C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11234  000E20  EF35  F00C         	goto	L20
 11235  000E24                     l10848:
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;main.c: 2064: writeEEPROM(0x59, val);
 11239  000E24  6A0F               	clrf	?_writeEEPROM+1,c
 11240  000E26  0E59               	movlw	89
 11241  000E28  6E0E               	movwf	?_writeEEPROM,c
 11242  000E2A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11243  000E2E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11244                           
 11245                           ;main.c: 2065: rv = readEEPROM(0x59);
 11246  000E32  6A0F               	clrf	?_readEEPROM+1,c
 11247  000E34  0E59               	movlw	89
 11248  000E36  6E0E               	movwf	?_readEEPROM,c
 11249  000E38  ECA8  F02E         	call	_readEEPROM	;wreg free
 11250  000E3C  EF35  F00C         	goto	L20
 11251  000E40                     l10850:
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;main.c: 2070: writeEEPROM(0x5A, val);
 11255  000E40  6A0F               	clrf	?_writeEEPROM+1,c
 11256  000E42  0E5A               	movlw	90
 11257  000E44  6E0E               	movwf	?_writeEEPROM,c
 11258  000E46  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11259  000E4A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11260                           
 11261                           ;main.c: 2071: rv = readEEPROM(0x5A);
 11262  000E4E  6A0F               	clrf	?_readEEPROM+1,c
 11263  000E50  0E5A               	movlw	90
 11264  000E52  6E0E               	movwf	?_readEEPROM,c
 11265  000E54  ECA8  F02E         	call	_readEEPROM	;wreg free
 11266  000E58  EF35  F00C         	goto	L20
 11267  000E5C                     l10852:
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;main.c: 2080: writeEEPROM(0x5B, val);
 11271  000E5C  6A0F               	clrf	?_writeEEPROM+1,c
 11272  000E5E  0E5B               	movlw	91
 11273  000E60  6E0E               	movwf	?_writeEEPROM,c
 11274  000E62  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11275  000E66  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11276                           
 11277                           ;main.c: 2081: rv = readEEPROM(0x5B);
 11278  000E6A  6A0F               	clrf	?_readEEPROM+1,c
 11279  000E6C  0E5B               	movlw	91
 11280  000E6E  6E0E               	movwf	?_readEEPROM,c
 11281  000E70  ECA8  F02E         	call	_readEEPROM	;wreg free
 11282  000E74  EF35  F00C         	goto	L20
 11283  000E78                     l10854:
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;main.c: 2086: writeEEPROM(0x5C, val);
 11287  000E78  6A0F               	clrf	?_writeEEPROM+1,c
 11288  000E7A  0E5C               	movlw	92
 11289  000E7C  6E0E               	movwf	?_writeEEPROM,c
 11290  000E7E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11291  000E82  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11292                           
 11293                           ;main.c: 2087: rv = readEEPROM(0x5C);
 11294  000E86  6A0F               	clrf	?_readEEPROM+1,c
 11295  000E88  0E5C               	movlw	92
 11296  000E8A  6E0E               	movwf	?_readEEPROM,c
 11297  000E8C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11298  000E90  EF35  F00C         	goto	L20
 11299  000E94                     l10856:
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;main.c: 2092: writeEEPROM(0x5D, val);
 11303  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 11304  000E96  0E5D               	movlw	93
 11305  000E98  6E0E               	movwf	?_writeEEPROM,c
 11306  000E9A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11307  000E9E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11308                           
 11309                           ;main.c: 2093: rv = readEEPROM(0x5D);
 11310  000EA2  6A0F               	clrf	?_readEEPROM+1,c
 11311  000EA4  0E5D               	movlw	93
 11312  000EA6  6E0E               	movwf	?_readEEPROM,c
 11313  000EA8  ECA8  F02E         	call	_readEEPROM	;wreg free
 11314  000EAC  EF35  F00C         	goto	L20
 11315  000EB0                     l10858:
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;main.c: 2098: writeEEPROM(0x5E, val);
 11319  000EB0  6A0F               	clrf	?_writeEEPROM+1,c
 11320  000EB2  0E5E               	movlw	94
 11321  000EB4  6E0E               	movwf	?_writeEEPROM,c
 11322  000EB6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11323  000EBA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11324                           
 11325                           ;main.c: 2099: rv = readEEPROM(0x5E);
 11326  000EBE  6A0F               	clrf	?_readEEPROM+1,c
 11327  000EC0  0E5E               	movlw	94
 11328  000EC2  6E0E               	movwf	?_readEEPROM,c
 11329  000EC4  ECA8  F02E         	call	_readEEPROM	;wreg free
 11330  000EC8  EF35  F00C         	goto	L20
 11331  000ECC                     l10860:
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;main.c: 2104: writeEEPROM(0x5F, val);
 11335  000ECC  6A0F               	clrf	?_writeEEPROM+1,c
 11336  000ECE  0E5F               	movlw	95
 11337  000ED0  6E0E               	movwf	?_writeEEPROM,c
 11338  000ED2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11339  000ED6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11340                           
 11341                           ;main.c: 2105: rv = readEEPROM(0x5F);
 11342  000EDA  6A0F               	clrf	?_readEEPROM+1,c
 11343  000EDC  0E5F               	movlw	95
 11344  000EDE  6E0E               	movwf	?_readEEPROM,c
 11345  000EE0  ECA8  F02E         	call	_readEEPROM	;wreg free
 11346  000EE4  EF35  F00C         	goto	L20
 11347  000EE8                     l10862:
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;main.c: 2110: writeEEPROM(0x60, val);
 11351  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 11352  000EEA  0E60               	movlw	96
 11353  000EEC  6E0E               	movwf	?_writeEEPROM,c
 11354  000EEE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11355  000EF2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11356                           
 11357                           ;main.c: 2111: rv = readEEPROM(0x60);
 11358  000EF6  6A0F               	clrf	?_readEEPROM+1,c
 11359  000EF8  0E60               	movlw	96
 11360  000EFA  6E0E               	movwf	?_readEEPROM,c
 11361  000EFC  ECA8  F02E         	call	_readEEPROM	;wreg free
 11362  000F00  EF35  F00C         	goto	L20
 11363  000F04                     l10864:
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;main.c: 2116: writeEEPROM(0x61, val);
 11367  000F04  6A0F               	clrf	?_writeEEPROM+1,c
 11368  000F06  0E61               	movlw	97
 11369  000F08  6E0E               	movwf	?_writeEEPROM,c
 11370  000F0A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11371  000F0E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11372                           
 11373                           ;main.c: 2117: rv = readEEPROM(0x61);
 11374  000F12  6A0F               	clrf	?_readEEPROM+1,c
 11375  000F14  0E61               	movlw	97
 11376  000F16  6E0E               	movwf	?_readEEPROM,c
 11377  000F18  ECA8  F02E         	call	_readEEPROM	;wreg free
 11378  000F1C  EF35  F00C         	goto	L20
 11379  000F20                     l10866:
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;main.c: 2122: writeEEPROM(0x62, val);
 11383  000F20  6A0F               	clrf	?_writeEEPROM+1,c
 11384  000F22  0E62               	movlw	98
 11385  000F24  6E0E               	movwf	?_writeEEPROM,c
 11386  000F26  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11387  000F2A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11388                           
 11389                           ;main.c: 2123: rv = readEEPROM(0x62);
 11390  000F2E  6A0F               	clrf	?_readEEPROM+1,c
 11391  000F30  0E62               	movlw	98
 11392  000F32  6E0E               	movwf	?_readEEPROM,c
 11393  000F34  ECA8  F02E         	call	_readEEPROM	;wreg free
 11394  000F38  EF35  F00C         	goto	L20
 11395  000F3C                     l10868:
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;main.c: 2128: writeEEPROM(0x63, val);
 11399  000F3C  6A0F               	clrf	?_writeEEPROM+1,c
 11400  000F3E  0E63               	movlw	99
 11401  000F40  6E0E               	movwf	?_writeEEPROM,c
 11402  000F42  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11403  000F46  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11404                           
 11405                           ;main.c: 2129: rv = readEEPROM(0x63);
 11406  000F4A  6A0F               	clrf	?_readEEPROM+1,c
 11407  000F4C  0E63               	movlw	99
 11408  000F4E  6E0E               	movwf	?_readEEPROM,c
 11409  000F50  ECA8  F02E         	call	_readEEPROM	;wreg free
 11410  000F54  EF35  F00C         	goto	L20
 11411  000F58                     l10870:
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;main.c: 2134: writeEEPROM(0x64, val);
 11415  000F58  6A0F               	clrf	?_writeEEPROM+1,c
 11416  000F5A  0E64               	movlw	100
 11417  000F5C  6E0E               	movwf	?_writeEEPROM,c
 11418  000F5E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11419  000F62  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11420                           
 11421                           ;main.c: 2135: rv = readEEPROM(0x64);
 11422  000F66  6A0F               	clrf	?_readEEPROM+1,c
 11423  000F68  0E64               	movlw	100
 11424  000F6A  6E0E               	movwf	?_readEEPROM,c
 11425  000F6C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11426  000F70  EF35  F00C         	goto	L20
 11427  000F74                     l10872:
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;main.c: 2140: writeEEPROM(0x65, val);
 11431  000F74  6A0F               	clrf	?_writeEEPROM+1,c
 11432  000F76  0E65               	movlw	101
 11433  000F78  6E0E               	movwf	?_writeEEPROM,c
 11434  000F7A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11435  000F7E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11436                           
 11437                           ;main.c: 2141: rv = readEEPROM(0x65);
 11438  000F82  6A0F               	clrf	?_readEEPROM+1,c
 11439  000F84  0E65               	movlw	101
 11440  000F86  6E0E               	movwf	?_readEEPROM,c
 11441  000F88  ECA8  F02E         	call	_readEEPROM	;wreg free
 11442  000F8C  EF35  F00C         	goto	L20
 11443  000F90                     l10874:
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;main.c: 2146: writeEEPROM(0x66, val);
 11447  000F90  6A0F               	clrf	?_writeEEPROM+1,c
 11448  000F92  0E66               	movlw	102
 11449  000F94  6E0E               	movwf	?_writeEEPROM,c
 11450  000F96  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11451  000F9A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11452                           
 11453                           ;main.c: 2147: rv = readEEPROM(0x66);
 11454  000F9E  6A0F               	clrf	?_readEEPROM+1,c
 11455  000FA0  0E66               	movlw	102
 11456  000FA2  6E0E               	movwf	?_readEEPROM,c
 11457  000FA4  ECA8  F02E         	call	_readEEPROM	;wreg free
 11458  000FA8  EF35  F00C         	goto	L20
 11459  000FAC                     l10876:
 11460                           
 11461                           ; BSR set to: 0
 11462                           ;main.c: 2156: writeEEPROM(0x67, val);
 11463  000FAC  6A0F               	clrf	?_writeEEPROM+1,c
 11464  000FAE  0E67               	movlw	103
 11465  000FB0  6E0E               	movwf	?_writeEEPROM,c
 11466  000FB2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11467  000FB6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11468                           
 11469                           ;main.c: 2157: rv = readEEPROM(0x67);
 11470  000FBA  6A0F               	clrf	?_readEEPROM+1,c
 11471  000FBC  0E67               	movlw	103
 11472  000FBE  6E0E               	movwf	?_readEEPROM,c
 11473  000FC0  ECA8  F02E         	call	_readEEPROM	;wreg free
 11474  000FC4  EF35  F00C         	goto	L20
 11475  000FC8                     l10878:
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;main.c: 2162: writeEEPROM(0x68, val);
 11479  000FC8  6A0F               	clrf	?_writeEEPROM+1,c
 11480  000FCA  0E68               	movlw	104
 11481  000FCC  6E0E               	movwf	?_writeEEPROM,c
 11482  000FCE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11483  000FD2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11484                           
 11485                           ;main.c: 2163: rv = readEEPROM(0x68);
 11486  000FD6  6A0F               	clrf	?_readEEPROM+1,c
 11487  000FD8  0E68               	movlw	104
 11488  000FDA  6E0E               	movwf	?_readEEPROM,c
 11489  000FDC  ECA8  F02E         	call	_readEEPROM	;wreg free
 11490  000FE0  EF35  F00C         	goto	L20
 11491  000FE4                     l10880:
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;main.c: 2168: writeEEPROM(0x69, val);
 11495  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 11496  000FE6  0E69               	movlw	105
 11497  000FE8  6E0E               	movwf	?_writeEEPROM,c
 11498  000FEA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11499  000FEE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11500                           
 11501                           ;main.c: 2169: rv = readEEPROM(0x69);
 11502  000FF2  6A0F               	clrf	?_readEEPROM+1,c
 11503  000FF4  0E69               	movlw	105
 11504  000FF6  6E0E               	movwf	?_readEEPROM,c
 11505  000FF8  ECA8  F02E         	call	_readEEPROM	;wreg free
 11506  000FFC  EF35  F00C         	goto	L20
 11507  001000                     l10882:
 11508                           
 11509                           ; BSR set to: 0
 11510                           ;main.c: 2174: writeEEPROM(0x6A, val);
 11511  001000  6A0F               	clrf	?_writeEEPROM+1,c
 11512  001002  0E6A               	movlw	106
 11513  001004  6E0E               	movwf	?_writeEEPROM,c
 11514  001006  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11515  00100A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11516                           
 11517                           ;main.c: 2175: rv = readEEPROM(0x6A);
 11518  00100E  6A0F               	clrf	?_readEEPROM+1,c
 11519  001010  0E6A               	movlw	106
 11520  001012  6E0E               	movwf	?_readEEPROM,c
 11521  001014  ECA8  F02E         	call	_readEEPROM	;wreg free
 11522  001018  EF35  F00C         	goto	L20
 11523  00101C                     l10884:
 11524                           
 11525                           ; BSR set to: 0
 11526                           ;main.c: 2180: writeEEPROM(0x6B, val);
 11527  00101C  6A0F               	clrf	?_writeEEPROM+1,c
 11528  00101E  0E6B               	movlw	107
 11529  001020  6E0E               	movwf	?_writeEEPROM,c
 11530  001022  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11531  001026  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11532                           
 11533                           ;main.c: 2181: rv = readEEPROM(0x6B);
 11534  00102A  6A0F               	clrf	?_readEEPROM+1,c
 11535  00102C  0E6B               	movlw	107
 11536  00102E  6E0E               	movwf	?_readEEPROM,c
 11537  001030  ECA8  F02E         	call	_readEEPROM	;wreg free
 11538  001034  EF35  F00C         	goto	L20
 11539  001038                     l10886:
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;main.c: 2186: writeEEPROM(0x6C, val);
 11543  001038  6A0F               	clrf	?_writeEEPROM+1,c
 11544  00103A  0E6C               	movlw	108
 11545  00103C  6E0E               	movwf	?_writeEEPROM,c
 11546  00103E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11547  001042  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11548                           
 11549                           ;main.c: 2187: rv = readEEPROM(0x6C);
 11550  001046  6A0F               	clrf	?_readEEPROM+1,c
 11551  001048  0E6C               	movlw	108
 11552  00104A  6E0E               	movwf	?_readEEPROM,c
 11553  00104C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11554  001050  EF35  F00C         	goto	L20
 11555  001054                     l10888:
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;main.c: 2192: writeEEPROM(0x6D, val);
 11559  001054  6A0F               	clrf	?_writeEEPROM+1,c
 11560  001056  0E6D               	movlw	109
 11561  001058  6E0E               	movwf	?_writeEEPROM,c
 11562  00105A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11563  00105E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11564                           
 11565                           ;main.c: 2193: rv = readEEPROM(0x6D);
 11566  001062  6A0F               	clrf	?_readEEPROM+1,c
 11567  001064  0E6D               	movlw	109
 11568  001066  6E0E               	movwf	?_readEEPROM,c
 11569  001068  ECA8  F02E         	call	_readEEPROM	;wreg free
 11570  00106C  D3FE               	goto	L20
 11571  00106E                     l10890:
 11572                           
 11573                           ; BSR set to: 0
 11574                           ;main.c: 2198: writeEEPROM(0x6E, val);
 11575  00106E  6A0F               	clrf	?_writeEEPROM+1,c
 11576  001070  0E6E               	movlw	110
 11577  001072  6E0E               	movwf	?_writeEEPROM,c
 11578  001074  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11579  001078  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11580                           
 11581                           ;main.c: 2199: rv = readEEPROM(0x6E);
 11582  00107C  6A0F               	clrf	?_readEEPROM+1,c
 11583  00107E  0E6E               	movlw	110
 11584  001080  6E0E               	movwf	?_readEEPROM,c
 11585  001082  ECA8  F02E         	call	_readEEPROM	;wreg free
 11586  001086  D3F1               	goto	L20
 11587  001088                     l10892:
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;main.c: 2204: writeEEPROM(0x6F, val);
 11591  001088  6A0F               	clrf	?_writeEEPROM+1,c
 11592  00108A  0E6F               	movlw	111
 11593  00108C  6E0E               	movwf	?_writeEEPROM,c
 11594  00108E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11595  001092  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11596                           
 11597                           ;main.c: 2205: rv = readEEPROM(0x6F);
 11598  001096  6A0F               	clrf	?_readEEPROM+1,c
 11599  001098  0E6F               	movlw	111
 11600  00109A  6E0E               	movwf	?_readEEPROM,c
 11601  00109C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11602  0010A0  D3E4               	goto	L20
 11603  0010A2                     l10894:
 11604                           
 11605                           ; BSR set to: 0
 11606                           ;main.c: 2210: writeEEPROM(0x70, val);
 11607  0010A2  6A0F               	clrf	?_writeEEPROM+1,c
 11608  0010A4  0E70               	movlw	112
 11609  0010A6  6E0E               	movwf	?_writeEEPROM,c
 11610  0010A8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11611  0010AC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11612                           
 11613                           ;main.c: 2211: rv = readEEPROM(0x70);
 11614  0010B0  6A0F               	clrf	?_readEEPROM+1,c
 11615  0010B2  0E70               	movlw	112
 11616  0010B4  6E0E               	movwf	?_readEEPROM,c
 11617  0010B6  ECA8  F02E         	call	_readEEPROM	;wreg free
 11618  0010BA  D3D7               	goto	L20
 11619  0010BC                     l10896:
 11620                           
 11621                           ; BSR set to: 0
 11622                           ;main.c: 2216: writeEEPROM(0x71, val);
 11623  0010BC  6A0F               	clrf	?_writeEEPROM+1,c
 11624  0010BE  0E71               	movlw	113
 11625  0010C0  6E0E               	movwf	?_writeEEPROM,c
 11626  0010C2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11627  0010C6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11628                           
 11629                           ;main.c: 2217: rv = readEEPROM(0x71);
 11630  0010CA  6A0F               	clrf	?_readEEPROM+1,c
 11631  0010CC  0E71               	movlw	113
 11632  0010CE  6E0E               	movwf	?_readEEPROM,c
 11633  0010D0  ECA8  F02E         	call	_readEEPROM	;wreg free
 11634  0010D4  D3CA               	goto	L20
 11635  0010D6                     l10898:
 11636                           
 11637                           ; BSR set to: 0
 11638                           ;main.c: 2222: writeEEPROM(0x72, val);
 11639  0010D6  6A0F               	clrf	?_writeEEPROM+1,c
 11640  0010D8  0E72               	movlw	114
 11641  0010DA  6E0E               	movwf	?_writeEEPROM,c
 11642  0010DC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11643  0010E0  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11644                           
 11645                           ;main.c: 2223: rv = readEEPROM(0x72);
 11646  0010E4  6A0F               	clrf	?_readEEPROM+1,c
 11647  0010E6  0E72               	movlw	114
 11648  0010E8  6E0E               	movwf	?_readEEPROM,c
 11649  0010EA  ECA8  F02E         	call	_readEEPROM	;wreg free
 11650  0010EE  D3BD               	goto	L20
 11651  0010F0                     l10900:
 11652                           
 11653                           ; BSR set to: 0
 11654                           ;main.c: 2232: writeEEPROM(0x73, val);
 11655  0010F0  6A0F               	clrf	?_writeEEPROM+1,c
 11656  0010F2  0E73               	movlw	115
 11657  0010F4  6E0E               	movwf	?_writeEEPROM,c
 11658  0010F6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11659  0010FA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11660                           
 11661                           ;main.c: 2233: rv = readEEPROM(0x73);
 11662  0010FE  6A0F               	clrf	?_readEEPROM+1,c
 11663  001100  0E73               	movlw	115
 11664  001102  6E0E               	movwf	?_readEEPROM,c
 11665  001104  ECA8  F02E         	call	_readEEPROM	;wreg free
 11666  001108  D3B0               	goto	L20
 11667  00110A                     l10902:
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;main.c: 2238: writeEEPROM(0x74, val);
 11671  00110A  6A0F               	clrf	?_writeEEPROM+1,c
 11672  00110C  0E74               	movlw	116
 11673  00110E  6E0E               	movwf	?_writeEEPROM,c
 11674  001110  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11675  001114  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11676                           
 11677                           ;main.c: 2239: rv = readEEPROM(0x74);
 11678  001118  6A0F               	clrf	?_readEEPROM+1,c
 11679  00111A  0E74               	movlw	116
 11680  00111C  6E0E               	movwf	?_readEEPROM,c
 11681  00111E  ECA8  F02E         	call	_readEEPROM	;wreg free
 11682  001122  D3A3               	goto	L20
 11683  001124                     l10904:
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;main.c: 2244: writeEEPROM(0x75, val);
 11687  001124  6A0F               	clrf	?_writeEEPROM+1,c
 11688  001126  0E75               	movlw	117
 11689  001128  6E0E               	movwf	?_writeEEPROM,c
 11690  00112A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11691  00112E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11692                           
 11693                           ;main.c: 2245: rv = readEEPROM(0x75);
 11694  001132  6A0F               	clrf	?_readEEPROM+1,c
 11695  001134  0E75               	movlw	117
 11696  001136  6E0E               	movwf	?_readEEPROM,c
 11697  001138  ECA8  F02E         	call	_readEEPROM	;wreg free
 11698  00113C  D396               	goto	L20
 11699  00113E                     l10906:
 11700                           
 11701                           ; BSR set to: 0
 11702                           ;main.c: 2250: writeEEPROM(0x76, val);
 11703  00113E  6A0F               	clrf	?_writeEEPROM+1,c
 11704  001140  0E76               	movlw	118
 11705  001142  6E0E               	movwf	?_writeEEPROM,c
 11706  001144  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11707  001148  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11708                           
 11709                           ;main.c: 2251: rv = readEEPROM(0x76);
 11710  00114C  6A0F               	clrf	?_readEEPROM+1,c
 11711  00114E  0E76               	movlw	118
 11712  001150  6E0E               	movwf	?_readEEPROM,c
 11713  001152  ECA8  F02E         	call	_readEEPROM	;wreg free
 11714  001156  D389               	goto	L20
 11715  001158                     l10908:
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;main.c: 2256: writeEEPROM(0x77, val);
 11719  001158  6A0F               	clrf	?_writeEEPROM+1,c
 11720  00115A  0E77               	movlw	119
 11721  00115C  6E0E               	movwf	?_writeEEPROM,c
 11722  00115E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11723  001162  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11724                           
 11725                           ;main.c: 2257: rv = readEEPROM(0x77);
 11726  001166  6A0F               	clrf	?_readEEPROM+1,c
 11727  001168  0E77               	movlw	119
 11728  00116A  6E0E               	movwf	?_readEEPROM,c
 11729  00116C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11730  001170  D37C               	goto	L20
 11731  001172                     l10910:
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;main.c: 2262: writeEEPROM(0x78, val);
 11735  001172  6A0F               	clrf	?_writeEEPROM+1,c
 11736  001174  0E78               	movlw	120
 11737  001176  6E0E               	movwf	?_writeEEPROM,c
 11738  001178  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11739  00117C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11740                           
 11741                           ;main.c: 2263: rv = readEEPROM(0x78);
 11742  001180  6A0F               	clrf	?_readEEPROM+1,c
 11743  001182  0E78               	movlw	120
 11744  001184  6E0E               	movwf	?_readEEPROM,c
 11745  001186  ECA8  F02E         	call	_readEEPROM	;wreg free
 11746  00118A  D36F               	goto	L20
 11747  00118C                     l10912:
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;main.c: 2268: writeEEPROM(0x79, val);
 11751  00118C  6A0F               	clrf	?_writeEEPROM+1,c
 11752  00118E  0E79               	movlw	121
 11753  001190  6E0E               	movwf	?_writeEEPROM,c
 11754  001192  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11755  001196  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11756                           
 11757                           ;main.c: 2269: rv = readEEPROM(0x79);
 11758  00119A  6A0F               	clrf	?_readEEPROM+1,c
 11759  00119C  0E79               	movlw	121
 11760  00119E  6E0E               	movwf	?_readEEPROM,c
 11761  0011A0  ECA8  F02E         	call	_readEEPROM	;wreg free
 11762  0011A4  D362               	goto	L20
 11763  0011A6                     l10914:
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;main.c: 2274: writeEEPROM(0x7A, val);
 11767  0011A6  6A0F               	clrf	?_writeEEPROM+1,c
 11768  0011A8  0E7A               	movlw	122
 11769  0011AA  6E0E               	movwf	?_writeEEPROM,c
 11770  0011AC  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11771  0011B0  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11772                           
 11773                           ;main.c: 2275: rv = readEEPROM(0x7A);
 11774  0011B4  6A0F               	clrf	?_readEEPROM+1,c
 11775  0011B6  0E7A               	movlw	122
 11776  0011B8  6E0E               	movwf	?_readEEPROM,c
 11777  0011BA  ECA8  F02E         	call	_readEEPROM	;wreg free
 11778  0011BE  D355               	goto	L20
 11779  0011C0                     l10916:
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;main.c: 2280: writeEEPROM(0x7B, val);
 11783  0011C0  6A0F               	clrf	?_writeEEPROM+1,c
 11784  0011C2  0E7B               	movlw	123
 11785  0011C4  6E0E               	movwf	?_writeEEPROM,c
 11786  0011C6  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11787  0011CA  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11788                           
 11789                           ;main.c: 2281: rv = readEEPROM(0x7B);
 11790  0011CE  6A0F               	clrf	?_readEEPROM+1,c
 11791  0011D0  0E7B               	movlw	123
 11792  0011D2  6E0E               	movwf	?_readEEPROM,c
 11793  0011D4  ECA8  F02E         	call	_readEEPROM	;wreg free
 11794  0011D8  D348               	goto	L20
 11795  0011DA                     l10918:
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;main.c: 2286: writeEEPROM(0x7C, val);
 11799  0011DA  6A0F               	clrf	?_writeEEPROM+1,c
 11800  0011DC  0E7C               	movlw	124
 11801  0011DE  6E0E               	movwf	?_writeEEPROM,c
 11802  0011E0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11803  0011E4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11804                           
 11805                           ;main.c: 2287: rv = readEEPROM(0x7C);
 11806  0011E8  6A0F               	clrf	?_readEEPROM+1,c
 11807  0011EA  0E7C               	movlw	124
 11808  0011EC  6E0E               	movwf	?_readEEPROM,c
 11809  0011EE  ECA8  F02E         	call	_readEEPROM	;wreg free
 11810  0011F2  D33B               	goto	L20
 11811  0011F4                     l10920:
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;main.c: 2292: writeEEPROM(0x7D, val);
 11815  0011F4  6A0F               	clrf	?_writeEEPROM+1,c
 11816  0011F6  0E7D               	movlw	125
 11817  0011F8  6E0E               	movwf	?_writeEEPROM,c
 11818  0011FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11819  0011FE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11820                           
 11821                           ;main.c: 2293: rv = readEEPROM(0x7D);
 11822  001202  6A0F               	clrf	?_readEEPROM+1,c
 11823  001204  0E7D               	movlw	125
 11824  001206  6E0E               	movwf	?_readEEPROM,c
 11825  001208  ECA8  F02E         	call	_readEEPROM	;wreg free
 11826  00120C  D32E               	goto	L20
 11827  00120E                     l10922:
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;main.c: 2298: writeEEPROM(0x7E, val);
 11831  00120E  6A0F               	clrf	?_writeEEPROM+1,c
 11832  001210  0E7E               	movlw	126
 11833  001212  6E0E               	movwf	?_writeEEPROM,c
 11834  001214  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11835  001218  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11836                           
 11837                           ;main.c: 2299: rv = readEEPROM(0x7E);
 11838  00121C  6A0F               	clrf	?_readEEPROM+1,c
 11839  00121E  0E7E               	movlw	126
 11840  001220  6E0E               	movwf	?_readEEPROM,c
 11841  001222  ECA8  F02E         	call	_readEEPROM	;wreg free
 11842  001226  D321               	goto	L20
 11843  001228                     l10924:
 11844                           
 11845                           ; BSR set to: 0
 11846                           ;main.c: 2308: writeEEPROM(0x7F, val );
 11847  001228  6A0F               	clrf	?_writeEEPROM+1,c
 11848  00122A  0E7F               	movlw	127
 11849  00122C  6E0E               	movwf	?_writeEEPROM,c
 11850  00122E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11851  001232  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11852                           
 11853                           ;main.c: 2309: rv = readEEPROM(0x7F);
 11854  001236  6A0F               	clrf	?_readEEPROM+1,c
 11855  001238  0E7F               	movlw	127
 11856  00123A  6E0E               	movwf	?_readEEPROM,c
 11857  00123C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11858  001240  D314               	goto	L20
 11859  001242                     l10926:
 11860                           
 11861                           ; BSR set to: 0
 11862                           ;main.c: 2314: writeEEPROM(0x80, val );
 11863  001242  6A0F               	clrf	?_writeEEPROM+1,c
 11864  001244  0E80               	movlw	128
 11865  001246  6E0E               	movwf	?_writeEEPROM,c
 11866  001248  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11867  00124C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11868                           
 11869                           ;main.c: 2315: rv = readEEPROM(0x80);
 11870  001250  6A0F               	clrf	?_readEEPROM+1,c
 11871  001252  0E80               	movlw	128
 11872  001254  6E0E               	movwf	?_readEEPROM,c
 11873  001256  ECA8  F02E         	call	_readEEPROM	;wreg free
 11874  00125A  D307               	goto	L20
 11875  00125C                     l10928:
 11876                           
 11877                           ; BSR set to: 0
 11878                           ;main.c: 2320: writeEEPROM(0x81, val );
 11879  00125C  6A0F               	clrf	?_writeEEPROM+1,c
 11880  00125E  0E81               	movlw	129
 11881  001260  6E0E               	movwf	?_writeEEPROM,c
 11882  001262  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11883  001266  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11884                           
 11885                           ;main.c: 2321: rv = readEEPROM(0x81);
 11886  00126A  6A0F               	clrf	?_readEEPROM+1,c
 11887  00126C  0E81               	movlw	129
 11888  00126E  6E0E               	movwf	?_readEEPROM,c
 11889  001270  ECA8  F02E         	call	_readEEPROM	;wreg free
 11890  001274  D2FA               	goto	L20
 11891  001276                     l10930:
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;main.c: 2326: writeEEPROM(0x82, val );
 11895  001276  6A0F               	clrf	?_writeEEPROM+1,c
 11896  001278  0E82               	movlw	130
 11897  00127A  6E0E               	movwf	?_writeEEPROM,c
 11898  00127C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11899  001280  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11900                           
 11901                           ;main.c: 2327: rv = readEEPROM(0x82);
 11902  001284  6A0F               	clrf	?_readEEPROM+1,c
 11903  001286  0E82               	movlw	130
 11904  001288  6E0E               	movwf	?_readEEPROM,c
 11905  00128A  ECA8  F02E         	call	_readEEPROM	;wreg free
 11906  00128E  D2ED               	goto	L20
 11907  001290                     l10932:
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;main.c: 2332: writeEEPROM(0x83, val );
 11911  001290  6A0F               	clrf	?_writeEEPROM+1,c
 11912  001292  0E83               	movlw	131
 11913  001294  6E0E               	movwf	?_writeEEPROM,c
 11914  001296  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11915  00129A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11916                           
 11917                           ;main.c: 2333: rv = readEEPROM(0x83);
 11918  00129E  6A0F               	clrf	?_readEEPROM+1,c
 11919  0012A0  0E83               	movlw	131
 11920  0012A2  6E0E               	movwf	?_readEEPROM,c
 11921  0012A4  ECA8  F02E         	call	_readEEPROM	;wreg free
 11922  0012A8  D2E0               	goto	L20
 11923  0012AA                     l10934:
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;main.c: 2338: writeEEPROM(0x84, val );
 11927  0012AA  6A0F               	clrf	?_writeEEPROM+1,c
 11928  0012AC  0E84               	movlw	132
 11929  0012AE  6E0E               	movwf	?_writeEEPROM,c
 11930  0012B0  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11931  0012B4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11932                           
 11933                           ;main.c: 2339: rv = readEEPROM(0x84);
 11934  0012B8  6A0F               	clrf	?_readEEPROM+1,c
 11935  0012BA  0E84               	movlw	132
 11936  0012BC  6E0E               	movwf	?_readEEPROM,c
 11937  0012BE  ECA8  F02E         	call	_readEEPROM	;wreg free
 11938  0012C2  D2D3               	goto	L20
 11939  0012C4                     l10936:
 11940                           
 11941                           ; BSR set to: 0
 11942                           ;main.c: 2344: writeEEPROM(0x85, val );
 11943  0012C4  6A0F               	clrf	?_writeEEPROM+1,c
 11944  0012C6  0E85               	movlw	133
 11945  0012C8  6E0E               	movwf	?_writeEEPROM,c
 11946  0012CA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11947  0012CE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11948                           
 11949                           ;main.c: 2345: rv = readEEPROM(0x85);
 11950  0012D2  6A0F               	clrf	?_readEEPROM+1,c
 11951  0012D4  0E85               	movlw	133
 11952  0012D6  6E0E               	movwf	?_readEEPROM,c
 11953  0012D8  ECA8  F02E         	call	_readEEPROM	;wreg free
 11954  0012DC  D2C6               	goto	L20
 11955  0012DE                     l10938:
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;main.c: 2350: writeEEPROM(0x86, val );
 11959  0012DE  6A0F               	clrf	?_writeEEPROM+1,c
 11960  0012E0  0E86               	movlw	134
 11961  0012E2  6E0E               	movwf	?_writeEEPROM,c
 11962  0012E4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11963  0012E8  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11964                           
 11965                           ;main.c: 2351: rv = readEEPROM(0x86);
 11966  0012EC  6A0F               	clrf	?_readEEPROM+1,c
 11967  0012EE  0E86               	movlw	134
 11968  0012F0  6E0E               	movwf	?_readEEPROM,c
 11969  0012F2  ECA8  F02E         	call	_readEEPROM	;wreg free
 11970  0012F6  D2B9               	goto	L20
 11971  0012F8                     l10940:
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;main.c: 2356: writeEEPROM(0x87, val );
 11975  0012F8  6A0F               	clrf	?_writeEEPROM+1,c
 11976  0012FA  0E87               	movlw	135
 11977  0012FC  6E0E               	movwf	?_writeEEPROM,c
 11978  0012FE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11979  001302  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11980                           
 11981                           ;main.c: 2357: rv = readEEPROM(0x87);
 11982  001306  6A0F               	clrf	?_readEEPROM+1,c
 11983  001308  0E87               	movlw	135
 11984  00130A  6E0E               	movwf	?_readEEPROM,c
 11985  00130C  ECA8  F02E         	call	_readEEPROM	;wreg free
 11986  001310  D2AC               	goto	L20
 11987  001312                     l10942:
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;main.c: 2362: writeEEPROM(0x88, val );
 11991  001312  6A0F               	clrf	?_writeEEPROM+1,c
 11992  001314  0E88               	movlw	136
 11993  001316  6E0E               	movwf	?_writeEEPROM,c
 11994  001318  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11995  00131C  ECAB  F02D         	call	_writeEEPROM	;wreg free
 11996                           
 11997                           ;main.c: 2363: rv = readEEPROM(0x88);
 11998  001320  6A0F               	clrf	?_readEEPROM+1,c
 11999  001322  0E88               	movlw	136
 12000  001324  6E0E               	movwf	?_readEEPROM,c
 12001  001326  ECA8  F02E         	call	_readEEPROM	;wreg free
 12002  00132A  D29F               	goto	L20
 12003  00132C                     l10944:
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;main.c: 2368: writeEEPROM(0x89, val );
 12007  00132C  6A0F               	clrf	?_writeEEPROM+1,c
 12008  00132E  0E89               	movlw	137
 12009  001330  6E0E               	movwf	?_writeEEPROM,c
 12010  001332  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12011  001336  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12012                           
 12013                           ;main.c: 2369: rv = readEEPROM(0x89);
 12014  00133A  6A0F               	clrf	?_readEEPROM+1,c
 12015  00133C  0E89               	movlw	137
 12016  00133E  6E0E               	movwf	?_readEEPROM,c
 12017  001340  ECA8  F02E         	call	_readEEPROM	;wreg free
 12018  001344  D292               	goto	L20
 12019  001346                     l10946:
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;main.c: 2374: writeEEPROM(0x8A, val );
 12023  001346  6A0F               	clrf	?_writeEEPROM+1,c
 12024  001348  0E8A               	movlw	138
 12025  00134A  6E0E               	movwf	?_writeEEPROM,c
 12026  00134C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12027  001350  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12028                           
 12029                           ;main.c: 2375: rv = readEEPROM(0x8A);
 12030  001354  6A0F               	clrf	?_readEEPROM+1,c
 12031  001356  0E8A               	movlw	138
 12032  001358  6E0E               	movwf	?_readEEPROM,c
 12033  00135A  ECA8  F02E         	call	_readEEPROM	;wreg free
 12034  00135E  D285               	goto	L20
 12035  001360                     l10948:
 12036                           
 12037                           ; BSR set to: 0
 12038                           ;main.c: 2384: writeEEPROM(0x8B, val );
 12039  001360  6A0F               	clrf	?_writeEEPROM+1,c
 12040  001362  0E8B               	movlw	139
 12041  001364  6E0E               	movwf	?_writeEEPROM,c
 12042  001366  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12043  00136A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12044                           
 12045                           ;main.c: 2385: rv = readEEPROM(0x8B);
 12046  00136E  6A0F               	clrf	?_readEEPROM+1,c
 12047  001370  0E8B               	movlw	139
 12048  001372  6E0E               	movwf	?_readEEPROM,c
 12049  001374  ECA8  F02E         	call	_readEEPROM	;wreg free
 12050  001378  D278               	goto	L20
 12051  00137A                     l10950:
 12052                           
 12053                           ; BSR set to: 0
 12054                           ;main.c: 2390: writeEEPROM(0x8C, val );
 12055  00137A  6A0F               	clrf	?_writeEEPROM+1,c
 12056  00137C  0E8C               	movlw	140
 12057  00137E  6E0E               	movwf	?_writeEEPROM,c
 12058  001380  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12059  001384  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12060                           
 12061                           ;main.c: 2391: rv = readEEPROM(0x8C);
 12062  001388  6A0F               	clrf	?_readEEPROM+1,c
 12063  00138A  0E8C               	movlw	140
 12064  00138C  6E0E               	movwf	?_readEEPROM,c
 12065  00138E  ECA8  F02E         	call	_readEEPROM	;wreg free
 12066  001392  D26B               	goto	L20
 12067  001394                     l10952:
 12068                           
 12069                           ; BSR set to: 0
 12070                           ;main.c: 2396: writeEEPROM(0x8D, val );
 12071  001394  6A0F               	clrf	?_writeEEPROM+1,c
 12072  001396  0E8D               	movlw	141
 12073  001398  6E0E               	movwf	?_writeEEPROM,c
 12074  00139A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12075  00139E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12076                           
 12077                           ;main.c: 2397: rv = readEEPROM(0x8D);
 12078  0013A2  6A0F               	clrf	?_readEEPROM+1,c
 12079  0013A4  0E8D               	movlw	141
 12080  0013A6  6E0E               	movwf	?_readEEPROM,c
 12081  0013A8  ECA8  F02E         	call	_readEEPROM	;wreg free
 12082  0013AC  D25E               	goto	L20
 12083  0013AE                     l10954:
 12084                           
 12085                           ; BSR set to: 0
 12086                           ;main.c: 2402: writeEEPROM(0x8E, val );
 12087  0013AE  6A0F               	clrf	?_writeEEPROM+1,c
 12088  0013B0  0E8E               	movlw	142
 12089  0013B2  6E0E               	movwf	?_writeEEPROM,c
 12090  0013B4  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12091  0013B8  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12092                           
 12093                           ;main.c: 2403: rv = readEEPROM(0x8E);
 12094  0013BC  6A0F               	clrf	?_readEEPROM+1,c
 12095  0013BE  0E8E               	movlw	142
 12096  0013C0  6E0E               	movwf	?_readEEPROM,c
 12097  0013C2  ECA8  F02E         	call	_readEEPROM	;wreg free
 12098  0013C6  D251               	goto	L20
 12099  0013C8                     l10956:
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;main.c: 2408: writeEEPROM(0x8F, val );
 12103  0013C8  6A0F               	clrf	?_writeEEPROM+1,c
 12104  0013CA  0E8F               	movlw	143
 12105  0013CC  6E0E               	movwf	?_writeEEPROM,c
 12106  0013CE  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12107  0013D2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12108                           
 12109                           ;main.c: 2409: rv = readEEPROM(0x8F);
 12110  0013D6  6A0F               	clrf	?_readEEPROM+1,c
 12111  0013D8  0E8F               	movlw	143
 12112  0013DA  6E0E               	movwf	?_readEEPROM,c
 12113  0013DC  ECA8  F02E         	call	_readEEPROM	;wreg free
 12114  0013E0  D244               	goto	L20
 12115  0013E2                     l10958:
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;main.c: 2414: writeEEPROM(0x90, val );
 12119  0013E2  6A0F               	clrf	?_writeEEPROM+1,c
 12120  0013E4  0E90               	movlw	144
 12121  0013E6  6E0E               	movwf	?_writeEEPROM,c
 12122  0013E8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12123  0013EC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12124                           
 12125                           ;main.c: 2415: rv = readEEPROM(0x90);
 12126  0013F0  6A0F               	clrf	?_readEEPROM+1,c
 12127  0013F2  0E90               	movlw	144
 12128  0013F4  6E0E               	movwf	?_readEEPROM,c
 12129  0013F6  ECA8  F02E         	call	_readEEPROM	;wreg free
 12130  0013FA  D237               	goto	L20
 12131  0013FC                     l10960:
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;main.c: 2420: writeEEPROM(0x91, val );
 12135  0013FC  6A0F               	clrf	?_writeEEPROM+1,c
 12136  0013FE  0E91               	movlw	145
 12137  001400  6E0E               	movwf	?_writeEEPROM,c
 12138  001402  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12139  001406  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12140                           
 12141                           ;main.c: 2421: rv = readEEPROM(0x91);
 12142  00140A  6A0F               	clrf	?_readEEPROM+1,c
 12143  00140C  0E91               	movlw	145
 12144  00140E  6E0E               	movwf	?_readEEPROM,c
 12145  001410  ECA8  F02E         	call	_readEEPROM	;wreg free
 12146  001414  D22A               	goto	L20
 12147  001416                     l10962:
 12148                           
 12149                           ; BSR set to: 0
 12150                           ;main.c: 2426: writeEEPROM(0x92, val );
 12151  001416  6A0F               	clrf	?_writeEEPROM+1,c
 12152  001418  0E92               	movlw	146
 12153  00141A  6E0E               	movwf	?_writeEEPROM,c
 12154  00141C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12155  001420  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12156                           
 12157                           ;main.c: 2427: rv = readEEPROM(0x92);
 12158  001424  6A0F               	clrf	?_readEEPROM+1,c
 12159  001426  0E92               	movlw	146
 12160  001428  6E0E               	movwf	?_readEEPROM,c
 12161  00142A  ECA8  F02E         	call	_readEEPROM	;wreg free
 12162  00142E  D21D               	goto	L20
 12163  001430                     l10964:
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;main.c: 2432: writeEEPROM(0x93, val );
 12167  001430  6A0F               	clrf	?_writeEEPROM+1,c
 12168  001432  0E93               	movlw	147
 12169  001434  6E0E               	movwf	?_writeEEPROM,c
 12170  001436  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12171  00143A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12172                           
 12173                           ;main.c: 2433: rv = readEEPROM(0x93);
 12174  00143E  6A0F               	clrf	?_readEEPROM+1,c
 12175  001440  0E93               	movlw	147
 12176  001442  6E0E               	movwf	?_readEEPROM,c
 12177  001444  ECA8  F02E         	call	_readEEPROM	;wreg free
 12178  001448  D210               	goto	L20
 12179  00144A                     l10966:
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;main.c: 2438: writeEEPROM(0x94, val );
 12183  00144A  6A0F               	clrf	?_writeEEPROM+1,c
 12184  00144C  0E94               	movlw	148
 12185  00144E  6E0E               	movwf	?_writeEEPROM,c
 12186  001450  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12187  001454  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12188                           
 12189                           ;main.c: 2439: rv = readEEPROM(0x94);
 12190  001458  6A0F               	clrf	?_readEEPROM+1,c
 12191  00145A  0E94               	movlw	148
 12192  00145C  6E0E               	movwf	?_readEEPROM,c
 12193  00145E  ECA8  F02E         	call	_readEEPROM	;wreg free
 12194  001462  D203               	goto	L20
 12195  001464                     l10968:
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;main.c: 2444: writeEEPROM(0x95, val );
 12199  001464  6A0F               	clrf	?_writeEEPROM+1,c
 12200  001466  0E95               	movlw	149
 12201  001468  6E0E               	movwf	?_writeEEPROM,c
 12202  00146A  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12203  00146E  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12204                           
 12205                           ;main.c: 2445: rv = readEEPROM(0x95);
 12206  001472  6A0F               	clrf	?_readEEPROM+1,c
 12207  001474  0E95               	movlw	149
 12208  001476  6E0E               	movwf	?_readEEPROM,c
 12209  001478  ECA8  F02E         	call	_readEEPROM	;wreg free
 12210  00147C  D1F6               	goto	L20
 12211  00147E                     l10970:
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;main.c: 2450: writeEEPROM(0x96, val );
 12215  00147E  6A0F               	clrf	?_writeEEPROM+1,c
 12216  001480  0E96               	movlw	150
 12217  001482  6E0E               	movwf	?_writeEEPROM,c
 12218  001484  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12219  001488  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12220                           
 12221                           ;main.c: 2451: rv = readEEPROM(0x96);
 12222  00148C  6A0F               	clrf	?_readEEPROM+1,c
 12223  00148E  0E96               	movlw	150
 12224  001490  6E0E               	movwf	?_readEEPROM,c
 12225  001492  ECA8  F02E         	call	_readEEPROM	;wreg free
 12226  001496  D1E9               	goto	L20
 12227  001498                     l10972:
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;main.c: 2460: writeEEPROM(0x97, val);
 12231  001498  6A0F               	clrf	?_writeEEPROM+1,c
 12232  00149A  0E97               	movlw	151
 12233  00149C  6E0E               	movwf	?_writeEEPROM,c
 12234  00149E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12235  0014A2  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12236                           
 12237                           ;main.c: 2461: rv = readEEPROM(0x97);
 12238  0014A6  6A0F               	clrf	?_readEEPROM+1,c
 12239  0014A8  0E97               	movlw	151
 12240  0014AA  6E0E               	movwf	?_readEEPROM,c
 12241  0014AC  ECA8  F02E         	call	_readEEPROM	;wreg free
 12242  0014B0  D1DC               	goto	L20
 12243  0014B2                     l10974:
 12244                           
 12245                           ; BSR set to: 0
 12246                           ;main.c: 2466: writeEEPROM(0x98, val);
 12247  0014B2  6A0F               	clrf	?_writeEEPROM+1,c
 12248  0014B4  0E98               	movlw	152
 12249  0014B6  6E0E               	movwf	?_writeEEPROM,c
 12250  0014B8  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12251  0014BC  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12252                           
 12253                           ;main.c: 2467: rv = readEEPROM(0x98);
 12254  0014C0  6A0F               	clrf	?_readEEPROM+1,c
 12255  0014C2  0E98               	movlw	152
 12256  0014C4  6E0E               	movwf	?_readEEPROM,c
 12257  0014C6  ECA8  F02E         	call	_readEEPROM	;wreg free
 12258  0014CA  D1CF               	goto	L20
 12259  0014CC                     l10976:
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;main.c: 2472: writeEEPROM(0x99, val);
 12263  0014CC  6A0F               	clrf	?_writeEEPROM+1,c
 12264  0014CE  0E99               	movlw	153
 12265  0014D0  6E0E               	movwf	?_writeEEPROM,c
 12266  0014D2  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12267  0014D6  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12268  0014DA  6A0F               	clrf	?_readEEPROM+1,c
 12269  0014DC  0E99               	movlw	153
 12270  0014DE  6E0E               	movwf	?_readEEPROM,c
 12271  0014E0  ECA8  F02E         	call	_readEEPROM	;wreg free
 12272  0014E4                     l519:
 12273                           
 12274                           ;main.c: 2477: writeEEPROM(0x9A, val);
 12275  0014E4  6A0F               	clrf	?_writeEEPROM+1,c
 12276  0014E6  0E9A               	movlw	154
 12277  0014E8  6E0E               	movwf	?_writeEEPROM,c
 12278  0014EA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12279  0014EE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12280                           
 12281                           ;main.c: 2478: rv = readEEPROM(0x9A);
 12282  0014F2  6A0F               	clrf	?_readEEPROM+1,c
 12283  0014F4  0E9A               	movlw	154
 12284  0014F6  6E0E               	movwf	?_readEEPROM,c
 12285  0014F8  ECA8  F02E         	call	_readEEPROM	;wreg free
 12286  0014FC  D1B6               	goto	L20
 12287  0014FE                     l10978:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;main.c: 2483: writeEEPROM(0x9B, val);
 12291  0014FE  6A0F               	clrf	?_writeEEPROM+1,c
 12292  001500  0E9B               	movlw	155
 12293  001502  6E0E               	movwf	?_writeEEPROM,c
 12294  001504  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12295  001508  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12296                           
 12297                           ;main.c: 2484: rv = readEEPROM(0x9B);
 12298  00150C  6A0F               	clrf	?_readEEPROM+1,c
 12299  00150E  0E9B               	movlw	155
 12300  001510  6E0E               	movwf	?_readEEPROM,c
 12301  001512  ECA8  F02E         	call	_readEEPROM	;wreg free
 12302  001516  D1A9               	goto	L20
 12303  001518                     l10980:
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;main.c: 2489: writeEEPROM(0x9C, val);
 12307  001518  6A0F               	clrf	?_writeEEPROM+1,c
 12308  00151A  0E9C               	movlw	156
 12309  00151C  6E0E               	movwf	?_writeEEPROM,c
 12310  00151E  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12311  001522  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12312                           
 12313                           ;main.c: 2490: rv = readEEPROM(0x9C);
 12314  001526  6A0F               	clrf	?_readEEPROM+1,c
 12315  001528  0E9C               	movlw	156
 12316  00152A  6E0E               	movwf	?_readEEPROM,c
 12317  00152C  ECA8  F02E         	call	_readEEPROM	;wreg free
 12318  001530  D19C               	goto	L20
 12319  001532                     l522:
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;main.c: 2495: rv = 0;
 12323  001532  6A24               	clrf	vscp_writeAppReg@rv,c
 12324                           
 12325                           ;main.c: 2496: break;
 12326  001534  D19B               	goto	l11016
 12327  001536                     l10982:
 12328                           
 12329                           ; BSR set to: 0
 12330                           ;main.c: 2504: writeEEPROM(0xF2, val);
 12331  001536  6A0F               	clrf	?_writeEEPROM+1,c
 12332  001538  0EF2               	movlw	242
 12333  00153A  6E0E               	movwf	?_writeEEPROM,c
 12334  00153C  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12335  001540  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12336                           
 12337                           ;main.c: 2505: rv = readEEPROM(0xF2);
 12338  001544  6A0F               	clrf	?_readEEPROM+1,c
 12339  001546  0EF2               	movlw	242
 12340  001548  6E0E               	movwf	?_readEEPROM,c
 12341  00154A  ECA8  F02E         	call	_readEEPROM	;wreg free
 12342  00154E  D18D               	goto	L20
 12343  001550                     l10984:
 12344                           
 12345                           ; BSR set to: 0
 12346                           ;main.c: 2509: writeEEPROM(0xF3, val);
 12347  001550  6A0F               	clrf	?_writeEEPROM+1,c
 12348  001552  0EF3               	movlw	243
 12349  001554  6E0E               	movwf	?_writeEEPROM,c
 12350  001556  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12351  00155A  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12352                           
 12353                           ;main.c: 2510: rv = readEEPROM(0xF3);
 12354  00155E  6A0F               	clrf	?_readEEPROM+1,c
 12355  001560  0EF3               	movlw	243
 12356  001562  6E0E               	movwf	?_readEEPROM,c
 12357  001564  ECA8  F02E         	call	_readEEPROM	;wreg free
 12358  001568  D180               	goto	L20
 12359  00156A                     l10986:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;main.c: 2514: rv = ~val;
 12363  00156A  1C21               	comf	vscp_writeAppReg@val,w,c
 12364  00156C  D17E               	goto	L20
 12365  00156E                     l10990:
 12366                           
 12367                           ; BSR set to: 0
 12368  00156E  5023               	movf	vscp_writeAppReg@reg,w,c
 12369                           
 12370                           ; Switch size 1, requested type "speed"
 12371                           ; Number of cases is 96, Range of values is 0 to 119
 12372                           ; switch strategies available:
 12373                           ; Name         Instructions Cycles
 12374                           ; simple_byte          289   145 (average)
 12375                           ;	Chosen strategy is simple_byte
 12376  001570  E102 EFC2  F005    	bz	l10800
 12377  001576  0A01               	xorlw	1	; case 1
 12378  001578  E102 EFD0  F005    	bz	l10802
 12379  00157E  0A03               	xorlw	3	; case 2
 12380  001580  E102 EFDE  F005    	bz	l10804
 12381  001586  0A01               	xorlw	1	; case 3
 12382  001588  E102 EFEC  F005    	bz	l10806
 12383  00158E  0A07               	xorlw	7	; case 4
 12384  001590  E102 EFFA  F005    	bz	l10808
 12385  001596  0A01               	xorlw	1	; case 5
 12386  001598  E102 EF08  F006    	bz	l10810
 12387  00159E  0A03               	xorlw	3	; case 6
 12388  0015A0  E102 EF16  F006    	bz	l10812
 12389  0015A6  0A01               	xorlw	1	; case 7
 12390  0015A8  E102 EF24  F006    	bz	l10814
 12391  0015AE  0A13               	xorlw	19	; case 20
 12392  0015B0  E102 EF32  F006    	bz	l10816
 12393  0015B6  0A01               	xorlw	1	; case 21
 12394  0015B8  E102 EF40  F006    	bz	l10818
 12395  0015BE  0A03               	xorlw	3	; case 22
 12396  0015C0  E102 EF4E  F006    	bz	l10820
 12397  0015C6  0A01               	xorlw	1	; case 23
 12398  0015C8  E102 EF5C  F006    	bz	l10822
 12399  0015CE  0A0F               	xorlw	15	; case 24
 12400  0015D0  E102 EF6A  F006    	bz	l10824
 12401  0015D6  0A01               	xorlw	1	; case 25
 12402  0015D8  E102 EF78  F006    	bz	l10826
 12403  0015DE  0A3F               	xorlw	63	; case 38
 12404  0015E0  E102 EF86  F006    	bz	l10828
 12405  0015E6  0A01               	xorlw	1	; case 39
 12406  0015E8  E102 EF94  F006    	bz	l10830
 12407  0015EE  0A0F               	xorlw	15	; case 40
 12408  0015F0  E102 EFA2  F006    	bz	l10832
 12409  0015F6  0A01               	xorlw	1	; case 41
 12410  0015F8  E102 EFB0  F006    	bz	l10834
 12411  0015FE  0A03               	xorlw	3	; case 42
 12412  001600  E102 EFBE  F006    	bz	l10836
 12413  001606  0A01               	xorlw	1	; case 43
 12414  001608  E102 EFCC  F006    	bz	l10838
 12415  00160E  0A07               	xorlw	7	; case 44
 12416  001610  E102 EFDA  F006    	bz	l10840
 12417  001616  0A01               	xorlw	1	; case 45
 12418  001618  E102 EFE8  F006    	bz	l10842
 12419  00161E  0A03               	xorlw	3	; case 46
 12420  001620  E102 EFF6  F006    	bz	l10844
 12421  001626  0A01               	xorlw	1	; case 47
 12422  001628  E102 EF04  F007    	bz	l10846
 12423  00162E  0A1F               	xorlw	31	; case 48
 12424  001630  E102 EF12  F007    	bz	l10848
 12425  001636  0A01               	xorlw	1	; case 49
 12426  001638  E101 D402          	bz	l10850
 12427  00163C  0A03               	xorlw	3	; case 50
 12428  00163E  E101 D40D          	bz	l10852
 12429  001642  0A01               	xorlw	1	; case 51
 12430  001644  E101 D418          	bz	l10854
 12431  001648  0A07               	xorlw	7	; case 52
 12432  00164A  E101 D423          	bz	l10856
 12433  00164E  0A01               	xorlw	1	; case 53
 12434  001650  E101 D42E          	bz	l10858
 12435  001654  0A03               	xorlw	3	; case 54
 12436  001656  E101 D439          	bz	l10860
 12437  00165A  0A01               	xorlw	1	; case 55
 12438  00165C  E101 D444          	bz	l10862
 12439  001660  0A0F               	xorlw	15	; case 56
 12440  001662  E101 D44F          	bz	l10864
 12441  001666  0A01               	xorlw	1	; case 57
 12442  001668  E101 D45A          	bz	l10866
 12443  00166C  0A03               	xorlw	3	; case 58
 12444  00166E  E101 D465          	bz	l10868
 12445  001672  0A01               	xorlw	1	; case 59
 12446  001674  E101 D470          	bz	l10870
 12447  001678  0A07               	xorlw	7	; case 60
 12448  00167A  E101 D47B          	bz	l10872
 12449  00167E  0A01               	xorlw	1	; case 61
 12450  001680  E101 D486          	bz	l10874
 12451  001684  0A03               	xorlw	3	; case 62
 12452  001686  E101 D491          	bz	l10876
 12453  00168A  0A01               	xorlw	1	; case 63
 12454  00168C  E101 D49C          	bz	l10878
 12455  001690  0A7F               	xorlw	127	; case 64
 12456  001692  E101 D4A7          	bz	l10880
 12457  001696  0A01               	xorlw	1	; case 65
 12458  001698  E101 D4B2          	bz	l10882
 12459  00169C  0A03               	xorlw	3	; case 66
 12460  00169E  E101 D4BD          	bz	l10884
 12461  0016A2  0A01               	xorlw	1	; case 67
 12462  0016A4  E101 D4C8          	bz	l10886
 12463  0016A8  0A07               	xorlw	7	; case 68
 12464  0016AA  E101 D4D3          	bz	l10888
 12465  0016AE  0A01               	xorlw	1	; case 69
 12466  0016B0  E101 D4DD          	bz	l10890
 12467  0016B4  0A03               	xorlw	3	; case 70
 12468  0016B6  E101 D4E7          	bz	l10892
 12469  0016BA  0A01               	xorlw	1	; case 71
 12470  0016BC  E101 D4F1          	bz	l10894
 12471  0016C0  0A0F               	xorlw	15	; case 72
 12472  0016C2  E101 D4FB          	bz	l10896
 12473  0016C6  0A01               	xorlw	1	; case 73
 12474  0016C8  E101 D505          	bz	l10898
 12475  0016CC  0A03               	xorlw	3	; case 74
 12476  0016CE  E101 D50F          	bz	l10900
 12477  0016D2  0A01               	xorlw	1	; case 75
 12478  0016D4  E101 D519          	bz	l10902
 12479  0016D8  0A07               	xorlw	7	; case 76
 12480  0016DA  E101 D523          	bz	l10904
 12481  0016DE  0A01               	xorlw	1	; case 77
 12482  0016E0  E101 D52D          	bz	l10906
 12483  0016E4  0A03               	xorlw	3	; case 78
 12484  0016E6  E101 D537          	bz	l10908
 12485  0016EA  0A01               	xorlw	1	; case 79
 12486  0016EC  E101 D541          	bz	l10910
 12487  0016F0  0A1F               	xorlw	31	; case 80
 12488  0016F2  E101 D54B          	bz	l10912
 12489  0016F6  0A01               	xorlw	1	; case 81
 12490  0016F8  E101 D555          	bz	l10914
 12491  0016FC  0A03               	xorlw	3	; case 82
 12492  0016FE  E101 D55F          	bz	l10916
 12493  001702  0A01               	xorlw	1	; case 83
 12494  001704  E101 D569          	bz	l10918
 12495  001708  0A07               	xorlw	7	; case 84
 12496  00170A  E101 D573          	bz	l10920
 12497  00170E  0A01               	xorlw	1	; case 85
 12498  001710  E101 D57D          	bz	l10922
 12499  001714  0A03               	xorlw	3	; case 86
 12500  001716  E101 D587          	bz	l10924
 12501  00171A  0A01               	xorlw	1	; case 87
 12502  00171C  E101 D591          	bz	l10926
 12503  001720  0A0F               	xorlw	15	; case 88
 12504  001722  E101 D59B          	bz	l10928
 12505  001726  0A01               	xorlw	1	; case 89
 12506  001728  E101 D5A5          	bz	l10930
 12507  00172C  0A03               	xorlw	3	; case 90
 12508  00172E  E101 D5AF          	bz	l10932
 12509  001732  0A01               	xorlw	1	; case 91
 12510  001734  E101 D5B9          	bz	l10934
 12511  001738  0A07               	xorlw	7	; case 92
 12512  00173A  E101 D5C3          	bz	l10936
 12513  00173E  0A01               	xorlw	1	; case 93
 12514  001740  E101 D5CD          	bz	l10938
 12515  001744  0A03               	xorlw	3	; case 94
 12516  001746  E101 D5D7          	bz	l10940
 12517  00174A  0A01               	xorlw	1	; case 95
 12518  00174C  E101 D5E1          	bz	l10942
 12519  001750  0A3F               	xorlw	63	; case 96
 12520  001752  E101 D5EB          	bz	l10944
 12521  001756  0A01               	xorlw	1	; case 97
 12522  001758  E101 D5F5          	bz	l10946
 12523  00175C  0A03               	xorlw	3	; case 98
 12524  00175E  E101 D5FF          	bz	l10948
 12525  001762  0A01               	xorlw	1	; case 99
 12526  001764  E101 D609          	bz	l10950
 12527  001768  0A07               	xorlw	7	; case 100
 12528  00176A  E101 D613          	bz	l10952
 12529  00176E  0A01               	xorlw	1	; case 101
 12530  001770  E101 D61D          	bz	l10954
 12531  001774  0A03               	xorlw	3	; case 102
 12532  001776  E101 D627          	bz	l10956
 12533  00177A  0A01               	xorlw	1	; case 103
 12534  00177C  E101 D631          	bz	l10958
 12535  001780  0A0F               	xorlw	15	; case 104
 12536  001782  E101 D63B          	bz	l10960
 12537  001786  0A01               	xorlw	1	; case 105
 12538  001788  E101 D645          	bz	l10962
 12539  00178C  0A03               	xorlw	3	; case 106
 12540  00178E  E101 D64F          	bz	l10964
 12541  001792  0A01               	xorlw	1	; case 107
 12542  001794  E101 D659          	bz	l10966
 12543  001798  0A07               	xorlw	7	; case 108
 12544  00179A  E101 D663          	bz	l10968
 12545  00179E  0A01               	xorlw	1	; case 109
 12546  0017A0  E101 D66D          	bz	l10970
 12547  0017A4  0A03               	xorlw	3	; case 110
 12548  0017A6  E101 D677          	bz	l10972
 12549  0017AA  0A01               	xorlw	1	; case 111
 12550  0017AC  E101 D681          	bz	l10974
 12551  0017B0  0A1F               	xorlw	31	; case 112
 12552  0017B2  E101 D68B          	bz	l10976
 12553  0017B6  0A01               	xorlw	1	; case 113
 12554  0017B8  E101 D694          	bz	l519
 12555  0017BC  0A03               	xorlw	3	; case 114
 12556  0017BE  E101 D69E          	bz	l10978
 12557  0017C2  0A01               	xorlw	1	; case 115
 12558  0017C4  E101 D6A8          	bz	l10980
 12559  0017C8  0A07               	xorlw	7	; case 116
 12560  0017CA  E101 D6B2          	bz	l522
 12561  0017CE  0A01               	xorlw	1	; case 117
 12562  0017D0  E101 D6AF          	bz	l522
 12563  0017D4  0A03               	xorlw	3	; case 118
 12564  0017D6  E101 D6AE          	bz	l10982
 12565  0017DA  0A01               	xorlw	1	; case 119
 12566  0017DC  E101 D6B8          	bz	l10984
 12567  0017E0  D6C4               	goto	l10986
 12568  0017E2                     l10992:
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;main.c: 2518: else if (1 == vscp_page_select) {
 12572  0017E2  0446               	decf	_vscp_page_select,w,c
 12573  0017E4  1047               	iorwf	_vscp_page_select+1,w,c
 12574  0017E6  E142               	bnz	l11016
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;main.c: 2521: if (reg < 72) {
 12578  0017E8  0E48               	movlw	72
 12579  0017EA  6023               	cpfslt	vscp_writeAppReg@reg,c
 12580  0017EC  D016               	goto	l11000
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;main.c: 2522: writeEEPROM(0xAA + reg, val);
 12584  0017EE  0EAA               	movlw	170
 12585  0017F0  2423               	addwf	vscp_writeAppReg@reg,w,c
 12586  0017F2  6E0E               	movwf	?_writeEEPROM,c
 12587  0017F4  6A0F               	clrf	?_writeEEPROM+1,c
 12588  0017F6  0E00               	movlw	0
 12589  0017F8  220F               	addwfc	?_writeEEPROM+1,f,c
 12590  0017FA  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12591  0017FE  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12592                           
 12593                           ;main.c: 2523: rv = readEEPROM(0xAA + reg );
 12594  001802  0EAA               	movlw	170
 12595  001804  2423               	addwf	vscp_writeAppReg@reg,w,c
 12596  001806  6E0E               	movwf	?_readEEPROM,c
 12597  001808  6A0F               	clrf	?_readEEPROM+1,c
 12598  00180A  0E00               	movlw	0
 12599  00180C  220F               	addwfc	?_readEEPROM+1,f,c
 12600  00180E  ECA8  F02E         	call	_readEEPROM	;wreg free
 12601  001812  6E24               	movwf	vscp_writeAppReg@rv,c
 12602                           
 12603                           ;main.c: 2524: writeCoeffs2Ram();
 12604  001814  EC22  F028         	call	_writeCoeffs2Ram	;wreg free
 12605                           
 12606                           ;main.c: 2525: }
 12607  001818  D029               	goto	l11016
 12608  00181A                     l11000:
 12609                           
 12610                           ; BSR set to: 0
 12611                           ;main.c: 2527: else if (reg < 84) {
 12612  00181A  0E54               	movlw	84
 12613  00181C  6023               	cpfslt	vscp_writeAppReg@reg,c
 12614  00181E  D010               	goto	l11012
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;main.c: 2529: uint8_t pos = reg - 72;
 12618  001820  5023               	movf	vscp_writeAppReg@reg,w,c
 12619  001822  0FB8               	addlw	184
 12620  001824  6E22               	movwf	vscp_writeAppReg@pos,c
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;main.c: 2530: if ( pos % 2 ) {
 12624  001826  A022               	btfss	vscp_writeAppReg@pos,0,c
 12625  001828  D002               	goto	l11008
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;main.c: 2531: pos--;
 12629  00182A  0622               	decf	vscp_writeAppReg@pos,f,c
 12630                           
 12631                           ;main.c: 2532: }
 12632  00182C  D001               	goto	l11010
 12633  00182E                     l11008:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;main.c: 2533: else {
 12637                           ;main.c: 2534: pos++;
 12638  00182E  2A22               	incf	vscp_writeAppReg@pos,f,c
 12639  001830                     l11010:
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;main.c: 2535: }
 12643                           ;main.c: 2536: rv = adc[ pos ];
 12644  001830  0E84               	movlw	low _adc
 12645  001832  2422               	addwf	vscp_writeAppReg@pos,w,c
 12646  001834  6ED9               	movwf	fsr2l,c
 12647  001836  6ADA               	clrf	fsr2h,c
 12648  001838  0E01               	movlw	high _adc
 12649  00183A  22DA               	addwfc	fsr2h,f,c
 12650  00183C  50DF               	movf	indf2,w,c
 12651  00183E  D015               	goto	L20
 12652  001840                     l11012:
 12653                           
 12654                           ; BSR set to: 0
 12655                           ;main.c: 2539: else if (reg < 98) {
 12656  001840  0E62               	movlw	98
 12657  001842  6023               	cpfslt	vscp_writeAppReg@reg,c
 12658  001844  D013               	goto	l11016
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;main.c: 2540: writeEEPROM( 0x9E + reg - 84, val );
 12662  001846  0E4A               	movlw	74
 12663  001848  2423               	addwf	vscp_writeAppReg@reg,w,c
 12664  00184A  6E0E               	movwf	?_writeEEPROM,c
 12665  00184C  6A0F               	clrf	?_writeEEPROM+1,c
 12666  00184E  0E00               	movlw	0
 12667  001850  220F               	addwfc	?_writeEEPROM+1,f,c
 12668  001852  C021  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12669  001856  ECAB  F02D         	call	_writeEEPROM	;wreg free
 12670                           
 12671                           ;main.c: 2541: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12672  00185A  0E4A               	movlw	74
 12673  00185C  2423               	addwf	vscp_writeAppReg@reg,w,c
 12674  00185E  6E0E               	movwf	?_readEEPROM,c
 12675  001860  6A0F               	clrf	?_readEEPROM+1,c
 12676  001862  0E00               	movlw	0
 12677  001864  220F               	addwfc	?_readEEPROM+1,f,c
 12678  001866  ECA8  F02E         	call	_readEEPROM	;wreg free
 12679  00186A                     L20:
 12680  00186A  6E24               	movwf	vscp_writeAppReg@rv,c
 12681  00186C                     l11016:
 12682                           
 12683                           ;main.c: 2542: }
 12684                           ;main.c: 2543: }
 12685                           ;main.c: 2545: return rv;
 12686  00186C  5024               	movf	vscp_writeAppReg@rv,w,c
 12687  00186E  0012               	return	
 12688  001870                     __end_of_vscp_writeAppReg:
 12689                           	opt stack 0
 12690                           tblptru	equ	0xFF8
 12691                           tblptrh	equ	0xFF7
 12692                           tblptrl	equ	0xFF6
 12693                           tablat	equ	0xFF5
 12694                           prodh	equ	0xFF4
 12695                           prodl	equ	0xFF3
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           postdec1	equ	0xFE5
 12699                           fsr1h	equ	0xFE2
 12700                           fsr1l	equ	0xFE1
 12701                           indf2	equ	0xFDF
 12702                           postinc2	equ	0xFDE
 12703                           postdec2	equ	0xFDD
 12704                           fsr2h	equ	0xFDA
 12705                           fsr2l	equ	0xFD9
 12706                           status	equ	0xFD8
 12707                           
 12708 ;; *************** function _vscp_readRegister *****************
 12709 ;; Defined at:
 12710 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;  reg             1    wreg     unsigned char 
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;  reg             1   35[COMRAM] unsigned char 
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      unsigned char 
 12717 ;; Registers used:
 12718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : F/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12724 ;;      Params:         0       0       0       0       0       0       0
 12725 ;;      Locals:         1       0       0       0       0       0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0
 12727 ;;      Totals:         1       0       0       0       0       0       0
 12728 ;;Total ram usage:        1 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    5
 12731 ;; This function calls:
 12732 ;;		_vscp_readAppReg
 12733 ;;		_vscp_readStdReg
 12734 ;; This function is called by:
 12735 ;;		_vscp_handleProtocolEvent
 12736 ;; This function uses a non-reentrant model
 12737 ;;
 12738                           
 12739                           	psect	text43
 12740  005C68                     __ptext43:
 12741                           	opt stack 0
 12742  005C68                     _vscp_readRegister:
 12743                           	opt stack 24
 12744                           
 12745                           ;incstack = 0
 12746                           ;incstack = 0
 12747                           ;vscp_readRegister@reg stored from wreg
 12748  005C68  CFE8 F024          	movff	wreg,vscp_readRegister@reg
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12752  005C6C  0E7F               	movlw	127
 12753  005C6E  6424               	cpfsgt	vscp_readRegister@reg,c
 12754  005C70  D004               	goto	l11262
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12758  005C72  5024               	movf	vscp_readRegister@reg,w,c
 12759  005C74  EC32  F01F         	call	_vscp_readStdReg
 12760  005C78  D003               	goto	l1107
 12761  005C7A                     l11262:
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;vscp_firmware.c: 565: else {
 12765                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12766  005C7A  5024               	movf	vscp_readRegister@reg,w,c
 12767  005C7C  EC45  F015         	call	_vscp_readAppReg
 12768  005C80                     l1107:
 12769  005C80  0012               	return	
 12770  005C82                     __end_of_vscp_readRegister:
 12771                           	opt stack 0
 12772                           tblptru	equ	0xFF8
 12773                           tblptrh	equ	0xFF7
 12774                           tblptrl	equ	0xFF6
 12775                           tablat	equ	0xFF5
 12776                           prodh	equ	0xFF4
 12777                           prodl	equ	0xFF3
 12778                           postinc0	equ	0xFEE
 12779                           wreg	equ	0xFE8
 12780                           postdec1	equ	0xFE5
 12781                           fsr1h	equ	0xFE2
 12782                           fsr1l	equ	0xFE1
 12783                           indf2	equ	0xFDF
 12784                           postinc2	equ	0xFDE
 12785                           postdec2	equ	0xFDD
 12786                           fsr2h	equ	0xFDA
 12787                           fsr2l	equ	0xFD9
 12788                           status	equ	0xFD8
 12789                           
 12790 ;; *************** function _vscp_readStdReg *****************
 12791 ;; Defined at:
 12792 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;  reg             1    wreg     unsigned char 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  reg             1   34[COMRAM] unsigned char 
 12797 ;;  code            4   27[COMRAM] unsigned long 
 12798 ;;  idx             1   32[COMRAM] unsigned char 
 12799 ;;  code            4   23[COMRAM] unsigned long 
 12800 ;;  idx             1   31[COMRAM] unsigned char 
 12801 ;;  rv              1   33[COMRAM] unsigned char 
 12802 ;; Return value:  Size  Location     Type
 12803 ;;                  1    wreg      unsigned char 
 12804 ;; Registers used:
 12805 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12806 ;; Tracked objects:
 12807 ;;		On entry : F/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12811 ;;      Params:         0       0       0       0       0       0       0
 12812 ;;      Locals:        12       0       0       0       0       0       0
 12813 ;;      Temps:          5       0       0       0       0       0       0
 12814 ;;      Totals:        17       0       0       0       0       0       0
 12815 ;;Total ram usage:       17 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; Hardware stack levels required when called:    4
 12818 ;; This function calls:
 12819 ;;		_vscp_getMajorVersion
 12820 ;;		_vscp_getMinorVersion
 12821 ;;		_vscp_getSubMinorVersion
 12822 ;;		_vscp_getGUID
 12823 ;;		_vscp_getMDF_URL
 12824 ;;		_vscp_getUserID
 12825 ;;		_vscp_getManufacturerId
 12826 ;;		_vscp_getBootLoaderAlgorithm
 12827 ;;		_vscp_getBufferSize
 12828 ;;		_vscp_getRegisterPagesUsed
 12829 ;;		_vscp_getFamilyCode
 12830 ;;		_vscp_getFamilyType
 12831 ;; This function is called by:
 12832 ;;		_vscp_readRegister
 12833 ;;		_vscp_handleProtocolEvent
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           	psect	text44
 12838  003E64                     __ptext44:
 12839                           	opt stack 0
 12840  003E64                     _vscp_readStdReg:
 12841                           	opt stack 25
 12842                           
 12843                           ;incstack = 0
 12844                           ;incstack = 0
 12845                           ;vscp_readStdReg@reg stored from wreg
 12846  003E64  CFE8 F023          	movff	wreg,vscp_readStdReg@reg
 12847                           
 12848                           ; BSR set to: 0
 12849                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12850  003E68  6A22               	clrf	vscp_readStdReg@rv,c
 12851                           
 12852                           ; BSR set to: 0
 12853                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12854  003E6A  5023               	movf	vscp_readStdReg@reg,w,c
 12855  003E6C  0A80               	xorlw	128
 12856  003E6E  E104               	bnz	l11272
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12860  003E70  C04A  F022         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12861                           
 12862                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12863  003E74  6A4A               	clrf	_vscp_alarmstatus,c
 12864                           
 12865                           ;vscp_firmware.c: 584: }
 12866  003E76  D0CB               	goto	l11360
 12867  003E78                     l11272:
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12871  003E78  5023               	movf	vscp_readStdReg@reg,w,c
 12872  003E7A  0A81               	xorlw	129
 12873  003E7C  E102               	bnz	l11276
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;vscp_firmware.c: 588: rv = 1;
 12877  003E7E  0E01               	movlw	1
 12878  003E80  D081               	goto	L31
 12879  003E82                     l11276:
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12883  003E82  5023               	movf	vscp_readStdReg@reg,w,c
 12884  003E84  0A82               	xorlw	130
 12885  003E86  E102               	bnz	l11280
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;vscp_firmware.c: 594: rv = 5;
 12889  003E88  0E05               	movlw	5
 12890  003E8A  D07C               	goto	L31
 12891  003E8C                     l11280:
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12895  003E8C  5023               	movf	vscp_readStdReg@reg,w,c
 12896  003E8E  0A83               	xorlw	131
 12897  003E90  E102               	bnz	l11284
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;vscp_firmware.c: 600: rv = 0;
 12901  003E92  6A22               	clrf	vscp_readStdReg@rv,c
 12902                           
 12903                           ;vscp_firmware.c: 602: }
 12904  003E94  D0BC               	goto	l11360
 12905  003E96                     l11284:
 12906                           
 12907                           ; BSR set to: 0
 12908                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 12909  003E96  5023               	movf	vscp_readStdReg@reg,w,c
 12910  003E98  0A94               	xorlw	148
 12911  003E9A  E103               	bnz	l11288
 12912                           
 12913                           ; BSR set to: 0
 12914                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 12915  003E9C  EC0C  F02F         	call	_vscp_getMajorVersion	;wreg free
 12916  003EA0  D071               	goto	L31
 12917  003EA2                     l11288:
 12918                           
 12919                           ; BSR set to: 0
 12920                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 12921  003EA2  5023               	movf	vscp_readStdReg@reg,w,c
 12922  003EA4  0A95               	xorlw	149
 12923  003EA6  E103               	bnz	l11292
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 12927  003EA8  EC0B  F02F         	call	_vscp_getMinorVersion	;wreg free
 12928  003EAC  D06B               	goto	L31
 12929  003EAE                     l11292:
 12930                           
 12931                           ; BSR set to: 0
 12932                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 12933  003EAE  5023               	movf	vscp_readStdReg@reg,w,c
 12934  003EB0  0A96               	xorlw	150
 12935  003EB2  E103               	bnz	l11296
 12936                           
 12937                           ; BSR set to: 0
 12938                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 12939  003EB4  EC0A  F02F         	call	_vscp_getSubMinorVersion	;wreg free
 12940  003EB8  D065               	goto	L31
 12941  003EBA                     l11296:
 12942                           
 12943                           ; BSR set to: 0
 12944                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 12945  003EBA  0E89               	movlw	137
 12946  003EBC  6023               	cpfslt	vscp_readStdReg@reg,c
 12947  003EBE  D005               	goto	l11300
 12948                           
 12949                           ; BSR set to: 0
 12950                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 12951  003EC0  5023               	movf	vscp_readStdReg@reg,w,c
 12952  003EC2  0F7C               	addlw	124
 12953  003EC4  EC94  F02E         	call	_vscp_getUserID
 12954  003EC8  D05D               	goto	L31
 12955  003ECA                     l11300:
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 12959                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 12960  003ECA  0E88               	movlw	136
 12961  003ECC  6423               	cpfsgt	vscp_readStdReg@reg,c
 12962  003ECE  D008               	goto	l11306
 12963                           
 12964                           ; BSR set to: 0
 12965  003ED0  0E91               	movlw	145
 12966  003ED2  6023               	cpfslt	vscp_readStdReg@reg,c
 12967  003ED4  D005               	goto	l11306
 12968                           
 12969                           ; BSR set to: 0
 12970                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 12971  003ED6  5023               	movf	vscp_readStdReg@reg,w,c
 12972  003ED8  0F77               	addlw	119
 12973  003EDA  EC8A  F02E         	call	_vscp_getManufacturerId
 12974  003EDE  D052               	goto	L31
 12975  003EE0                     l11306:
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 12979  003EE0  5023               	movf	vscp_readStdReg@reg,w,c
 12980  003EE2  0A91               	xorlw	145
 12981  003EE4  E103               	bnz	l11310
 12982                           
 12983                           ; BSR set to: 0
 12984                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 12985  003EE6  C0BF  F022         	movff	_vscp_nickname,vscp_readStdReg@rv
 12986                           
 12987                           ;vscp_firmware.c: 639: }
 12988  003EEA  D091               	goto	l11360
 12989  003EEC                     l11310:
 12990                           
 12991                           ; BSR set to: 0
 12992                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 12993  003EEC  5023               	movf	vscp_readStdReg@reg,w,c
 12994  003EEE  0A93               	xorlw	147
 12995  003EF0  E103               	bnz	l11314
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 12999  003EF2  C046  F022         	movff	_vscp_page_select,vscp_readStdReg@rv
 13000                           
 13001                           ;vscp_firmware.c: 645: }
 13002  003EF6  D08B               	goto	l11360
 13003  003EF8                     l11314:
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 13007  003EF8  5023               	movf	vscp_readStdReg@reg,w,c
 13008  003EFA  0A92               	xorlw	146
 13009  003EFC  E102               	bnz	l11318
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 13013  003EFE  5047               	movf	_vscp_page_select+1,w,c
 13014  003F00  D041               	goto	L31
 13015  003F02                     l11318:
 13016                           
 13017                           ; BSR set to: 0
 13018                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 13019  003F02  5023               	movf	vscp_readStdReg@reg,w,c
 13020  003F04  0A97               	xorlw	151
 13021  003F06  E103               	bnz	l11322
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 13025  003F08  EC09  F02F         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 13026  003F0C  D03B               	goto	L31
 13027  003F0E                     l11322:
 13028                           
 13029                           ; BSR set to: 0
 13030                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 13031  003F0E  5023               	movf	vscp_readStdReg@reg,w,c
 13032  003F10  0A98               	xorlw	152
 13033  003F12  E103               	bnz	l11326
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 13037  003F14  EC08  F02F         	call	_vscp_getBufferSize	;wreg free
 13038  003F18  D035               	goto	L31
 13039  003F1A                     l11326:
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 13043  003F1A  5023               	movf	vscp_readStdReg@reg,w,c
 13044  003F1C  0A99               	xorlw	153
 13045  003F1E  E103               	bnz	l11330
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 13049  003F20  EC07  F02F         	call	_vscp_getRegisterPagesUsed	;wreg free
 13050  003F24  D02F               	goto	L31
 13051  003F26                     l11330:
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 13055                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 13056  003F26  0E99               	movlw	153
 13057  003F28  6423               	cpfsgt	vscp_readStdReg@reg,c
 13058  003F2A  D02E               	goto	l11340
 13059                           
 13060                           ; BSR set to: 0
 13061  003F2C  0E9E               	movlw	158
 13062  003F2E  6023               	cpfslt	vscp_readStdReg@reg,c
 13063  003F30  D02B               	goto	l11340
 13064                           
 13065                           ; BSR set to: 0
 13066                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 13067  003F32  ECEE  F02E         	call	_vscp_getFamilyCode	;wreg free
 13068  003F36  C011  F01B         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 13069  003F3A  C010  F01A         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 13070  003F3E  C00F  F019         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 13071  003F42  C00E  F018         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 13075  003F46  5023               	movf	vscp_readStdReg@reg,w,c
 13076  003F48  0F66               	addlw	102
 13077  003F4A  6E20               	movwf	vscp_readStdReg@idx,c
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13081  003F4C  5020               	movf	vscp_readStdReg@idx,w,c
 13082  003F4E  0803               	sublw	3
 13083  003F50  6E13               	movwf	??_vscp_readStdReg& (0+255),c
 13084  003F52  90D8               	bcf	status,0,c
 13085  003F54  3613               	rlcf	??_vscp_readStdReg,f,c
 13086  003F56  90D8               	bcf	status,0,c
 13087  003F58  3613               	rlcf	??_vscp_readStdReg,f,c
 13088  003F5A  90D8               	bcf	status,0,c
 13089  003F5C  3613               	rlcf	??_vscp_readStdReg,f,c
 13090  003F5E  5013               	movf	??_vscp_readStdReg,w,c
 13091  003F60  C018  F014         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 13092  003F64  C019  F015         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 13093  003F68  C01A  F016         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13094  003F6C  C01B  F017         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13095  003F70  2AE8               	incf	wreg,f,c
 13096  003F72  D005               	goto	u9490
 13097  003F74                     u9495:
 13098  003F74  90D8               	bcf	status,0,c
 13099  003F76  3217               	rrcf	??_vscp_readStdReg+4,f,c
 13100  003F78  3216               	rrcf	??_vscp_readStdReg+3,f,c
 13101  003F7A  3215               	rrcf	??_vscp_readStdReg+2,f,c
 13102  003F7C  3214               	rrcf	??_vscp_readStdReg+1,f,c
 13103  003F7E                     u9490:
 13104  003F7E  2EE8               	decfsz	wreg,f,c
 13105  003F80  D7F9               	goto	u9495
 13106  003F82  D030               	goto	L32
 13107  003F84                     L31:
 13108  003F84  6E22               	movwf	vscp_readStdReg@rv,c
 13109                           
 13110                           ;vscp_firmware.c: 671: }
 13111  003F86  D043               	goto	l11360
 13112  003F88                     l11340:
 13113                           
 13114                           ; BSR set to: 0
 13115                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13116                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13117  003F88  0E9D               	movlw	157
 13118  003F8A  6423               	cpfsgt	vscp_readStdReg@reg,c
 13119  003F8C  D02D               	goto	l11350
 13120                           
 13121                           ; BSR set to: 0
 13122  003F8E  0EA2               	movlw	162
 13123  003F90  6023               	cpfslt	vscp_readStdReg@reg,c
 13124  003F92  D02A               	goto	l11350
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13128  003F94  ECE9  F02E         	call	_vscp_getFamilyType	;wreg free
 13129  003F98  C011  F01F         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1140+3
 13130  003F9C  C010  F01E         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1140+2
 13131  003FA0  C00F  F01D         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1140+1
 13132  003FA4  C00E  F01C         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1140
 13133                           
 13134                           ; BSR set to: 0
 13135                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13136  003FA8  5023               	movf	vscp_readStdReg@reg,w,c
 13137  003FAA  0F62               	addlw	98
 13138  003FAC  6E21               	movwf	vscp_readStdReg@idx_1141,c
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13142  003FAE  5021               	movf	vscp_readStdReg@idx_1141,w,c
 13143  003FB0  0803               	sublw	3
 13144  003FB2  6E13               	movwf	??_vscp_readStdReg& (0+255),c
 13145  003FB4  90D8               	bcf	status,0,c
 13146  003FB6  3613               	rlcf	??_vscp_readStdReg,f,c
 13147  003FB8  90D8               	bcf	status,0,c
 13148  003FBA  3613               	rlcf	??_vscp_readStdReg,f,c
 13149  003FBC  90D8               	bcf	status,0,c
 13150  003FBE  3613               	rlcf	??_vscp_readStdReg,f,c
 13151  003FC0  5013               	movf	??_vscp_readStdReg,w,c
 13152  003FC2  C01C  F014         	movff	vscp_readStdReg@code_1140,??_vscp_readStdReg+1
 13153  003FC6  C01D  F015         	movff	vscp_readStdReg@code_1140+1,??_vscp_readStdReg+2
 13154  003FCA  C01E  F016         	movff	vscp_readStdReg@code_1140+2,??_vscp_readStdReg+3
 13155  003FCE  C01F  F017         	movff	vscp_readStdReg@code_1140+3,??_vscp_readStdReg+4
 13156  003FD2  2AE8               	incf	wreg,f,c
 13157  003FD4  D005               	goto	u9520
 13158  003FD6                     u9525:
 13159  003FD6  90D8               	bcf	status,0,c
 13160  003FD8  3217               	rrcf	??_vscp_readStdReg+4,f,c
 13161  003FDA  3216               	rrcf	??_vscp_readStdReg+3,f,c
 13162  003FDC  3215               	rrcf	??_vscp_readStdReg+2,f,c
 13163  003FDE  3214               	rrcf	??_vscp_readStdReg+1,f,c
 13164  003FE0                     u9520:
 13165  003FE0  2EE8               	decfsz	wreg,f,c
 13166  003FE2  D7F9               	goto	u9525
 13167  003FE4                     L32:
 13168  003FE4  5014               	movf	??_vscp_readStdReg+1,w,c
 13169  003FE6  D7CE               	goto	L31
 13170  003FE8                     l11350:
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13174                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13175  003FE8  0ECF               	movlw	207
 13176  003FEA  6423               	cpfsgt	vscp_readStdReg@reg,c
 13177  003FEC  D008               	goto	l11356
 13178                           
 13179                           ; BSR set to: 0
 13180  003FEE  0EE0               	movlw	224
 13181  003FF0  6023               	cpfslt	vscp_readStdReg@reg,c
 13182  003FF2  D005               	goto	l11356
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13186  003FF4  5023               	movf	vscp_readStdReg@reg,w,c
 13187  003FF6  0F30               	addlw	48
 13188  003FF8  EC9E  F02E         	call	_vscp_getGUID
 13189  003FFC  D7C3               	goto	L31
 13190  003FFE                     l11356:
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13194  003FFE  0EDF               	movlw	223
 13195  004000  6423               	cpfsgt	vscp_readStdReg@reg,c
 13196  004002  D005               	goto	l11360
 13197                           
 13198                           ; BSR set to: 0
 13199                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13200  004004  5023               	movf	vscp_readStdReg@reg,w,c
 13201  004006  0F20               	addlw	32
 13202  004008  EC66  F02E         	call	_vscp_getMDF_URL
 13203  00400C  D7BB               	goto	L31
 13204  00400E                     l11360:
 13205                           
 13206                           ;vscp_firmware.c: 691: }
 13207                           ;vscp_firmware.c: 693: return rv;
 13208  00400E  5022               	movf	vscp_readStdReg@rv,w,c
 13209  004010  0012               	return	
 13210  004012                     __end_of_vscp_readStdReg:
 13211                           	opt stack 0
 13212                           tblptru	equ	0xFF8
 13213                           tblptrh	equ	0xFF7
 13214                           tblptrl	equ	0xFF6
 13215                           tablat	equ	0xFF5
 13216                           prodh	equ	0xFF4
 13217                           prodl	equ	0xFF3
 13218                           postinc0	equ	0xFEE
 13219                           wreg	equ	0xFE8
 13220                           postdec1	equ	0xFE5
 13221                           fsr1h	equ	0xFE2
 13222                           fsr1l	equ	0xFE1
 13223                           indf2	equ	0xFDF
 13224                           postinc2	equ	0xFDE
 13225                           postdec2	equ	0xFDD
 13226                           fsr2h	equ	0xFDA
 13227                           fsr2l	equ	0xFD9
 13228                           status	equ	0xFD8
 13229                           
 13230 ;; *************** function _vscp_getFamilyType *****************
 13231 ;; Defined at:
 13232 ;;		line 2826 in file "../main.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;		None
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;		None
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  4   13[COMRAM] unsigned long 
 13239 ;; Registers used:
 13240 ;;		None
 13241 ;; Tracked objects:
 13242 ;;		On entry : F/0
 13243 ;;		On exit  : F/0
 13244 ;;		Unchanged: F/0
 13245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13246 ;;      Params:         4       0       0       0       0       0       0
 13247 ;;      Locals:         0       0       0       0       0       0       0
 13248 ;;      Temps:          0       0       0       0       0       0       0
 13249 ;;      Totals:         4       0       0       0       0       0       0
 13250 ;;Total ram usage:        4 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    2
 13253 ;; This function calls:
 13254 ;;		Nothing
 13255 ;; This function is called by:
 13256 ;;		_vscp_readStdReg
 13257 ;; This function uses a non-reentrant model
 13258 ;;
 13259                           
 13260                           	psect	text45
 13261  005DD2                     __ptext45:
 13262                           	opt stack 0
 13263  005DD2                     _vscp_getFamilyType:
 13264                           	opt stack 26
 13265                           
 13266                           ; BSR set to: 0
 13267                           ;main.c: 2827: return 0;
 13268                           
 13269                           ;incstack = 0
 13270                           ;incstack = 0
 13271  005DD2  6A0E               	clrf	?_vscp_getFamilyType,c
 13272  005DD4  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13273  005DD6  6A10               	clrf	?_vscp_getFamilyType+2,c
 13274  005DD8  6A11               	clrf	?_vscp_getFamilyType+3,c
 13275                           
 13276                           ; BSR set to: 0
 13277  005DDA  0012               	return	
 13278  005DDC                     __end_of_vscp_getFamilyType:
 13279                           	opt stack 0
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           postinc0	equ	0xFEE
 13287                           wreg	equ	0xFE8
 13288                           postdec1	equ	0xFE5
 13289                           fsr1h	equ	0xFE2
 13290                           fsr1l	equ	0xFE1
 13291                           indf2	equ	0xFDF
 13292                           postinc2	equ	0xFDE
 13293                           postdec2	equ	0xFDD
 13294                           fsr2h	equ	0xFDA
 13295                           fsr2l	equ	0xFD9
 13296                           status	equ	0xFD8
 13297                           
 13298 ;; *************** function _vscp_getFamilyCode *****************
 13299 ;; Defined at:
 13300 ;;		line 2816 in file "../main.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;		None
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;		None
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  4   13[COMRAM] unsigned long 
 13307 ;; Registers used:
 13308 ;;		None
 13309 ;; Tracked objects:
 13310 ;;		On entry : F/0
 13311 ;;		On exit  : F/0
 13312 ;;		Unchanged: F/0
 13313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13314 ;;      Params:         4       0       0       0       0       0       0
 13315 ;;      Locals:         0       0       0       0       0       0       0
 13316 ;;      Temps:          0       0       0       0       0       0       0
 13317 ;;      Totals:         4       0       0       0       0       0       0
 13318 ;;Total ram usage:        4 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    2
 13321 ;; This function calls:
 13322 ;;		Nothing
 13323 ;; This function is called by:
 13324 ;;		_vscp_readStdReg
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           	psect	text46
 13329  005DDC                     __ptext46:
 13330                           	opt stack 0
 13331  005DDC                     _vscp_getFamilyCode:
 13332                           	opt stack 26
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;main.c: 2817: return 0L;
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;incstack = 0
 13339                           ;incstack = 0
 13340  005DDC  6A0E               	clrf	?_vscp_getFamilyCode,c
 13341  005DDE  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13342  005DE0  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13343  005DE2  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13344                           
 13345                           ; BSR set to: 0
 13346  005DE4  0012               	return	
 13347  005DE6                     __end_of_vscp_getFamilyCode:
 13348                           	opt stack 0
 13349                           tblptru	equ	0xFF8
 13350                           tblptrh	equ	0xFF7
 13351                           tblptrl	equ	0xFF6
 13352                           tablat	equ	0xFF5
 13353                           prodh	equ	0xFF4
 13354                           prodl	equ	0xFF3
 13355                           postinc0	equ	0xFEE
 13356                           wreg	equ	0xFE8
 13357                           postdec1	equ	0xFE5
 13358                           fsr1h	equ	0xFE2
 13359                           fsr1l	equ	0xFE1
 13360                           indf2	equ	0xFDF
 13361                           postinc2	equ	0xFDE
 13362                           postdec2	equ	0xFDD
 13363                           fsr2h	equ	0xFDA
 13364                           fsr2l	equ	0xFD9
 13365                           status	equ	0xFD8
 13366                           
 13367 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13368 ;; Defined at:
 13369 ;;		line 2717 in file "../main.c"
 13370 ;; Parameters:    Size  Location     Type
 13371 ;;		None
 13372 ;; Auto vars:     Size  Location     Type
 13373 ;;		None
 13374 ;; Return value:  Size  Location     Type
 13375 ;;                  1    wreg      unsigned char 
 13376 ;; Registers used:
 13377 ;;		wreg
 13378 ;; Tracked objects:
 13379 ;;		On entry : F/0
 13380 ;;		On exit  : F/0
 13381 ;;		Unchanged: F/0
 13382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13383 ;;      Params:         0       0       0       0       0       0       0
 13384 ;;      Locals:         0       0       0       0       0       0       0
 13385 ;;      Temps:          0       0       0       0       0       0       0
 13386 ;;      Totals:         0       0       0       0       0       0       0
 13387 ;;Total ram usage:        0 bytes
 13388 ;; Hardware stack levels used:    1
 13389 ;; Hardware stack levels required when called:    2
 13390 ;; This function calls:
 13391 ;;		Nothing
 13392 ;; This function is called by:
 13393 ;;		_vscp_readStdReg
 13394 ;; This function uses a non-reentrant model
 13395 ;;
 13396                           
 13397                           	psect	text47
 13398  005E0E                     __ptext47:
 13399                           	opt stack 0
 13400  005E0E                     _vscp_getRegisterPagesUsed:
 13401                           	opt stack 26
 13402                           
 13403                           ; BSR set to: 0
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;main.c: 2718: return 1;
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;incstack = 0
 13410                           ;incstack = 0
 13411  005E0E  0C01               	retlw	1
 13412  005E10                     __end_of_vscp_getRegisterPagesUsed:
 13413                           	opt stack 0
 13414                           tblptru	equ	0xFF8
 13415                           tblptrh	equ	0xFF7
 13416                           tblptrl	equ	0xFF6
 13417                           tablat	equ	0xFF5
 13418                           prodh	equ	0xFF4
 13419                           prodl	equ	0xFF3
 13420                           postinc0	equ	0xFEE
 13421                           wreg	equ	0xFE8
 13422                           postdec1	equ	0xFE5
 13423                           fsr1h	equ	0xFE2
 13424                           fsr1l	equ	0xFE1
 13425                           indf2	equ	0xFDF
 13426                           postinc2	equ	0xFDE
 13427                           postdec2	equ	0xFDD
 13428                           fsr2h	equ	0xFDA
 13429                           fsr2l	equ	0xFD9
 13430                           status	equ	0xFD8
 13431                           
 13432 ;; *************** function _vscp_getBufferSize *****************
 13433 ;; Defined at:
 13434 ;;		line 2670 in file "../main.c"
 13435 ;; Parameters:    Size  Location     Type
 13436 ;;		None
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;		None
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      unsigned char 
 13441 ;; Registers used:
 13442 ;;		wreg
 13443 ;; Tracked objects:
 13444 ;;		On entry : F/0
 13445 ;;		On exit  : F/0
 13446 ;;		Unchanged: F/0
 13447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13448 ;;      Params:         0       0       0       0       0       0       0
 13449 ;;      Locals:         0       0       0       0       0       0       0
 13450 ;;      Temps:          0       0       0       0       0       0       0
 13451 ;;      Totals:         0       0       0       0       0       0       0
 13452 ;;Total ram usage:        0 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; Hardware stack levels required when called:    2
 13455 ;; This function calls:
 13456 ;;		Nothing
 13457 ;; This function is called by:
 13458 ;;		_vscp_readStdReg
 13459 ;; This function uses a non-reentrant model
 13460 ;;
 13461                           
 13462                           	psect	text48
 13463  005E10                     __ptext48:
 13464                           	opt stack 0
 13465  005E10                     _vscp_getBufferSize:
 13466                           	opt stack 26
 13467                           
 13468                           ; BSR set to: 0
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;main.c: 2671: return 8;
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;incstack = 0
 13475                           ;incstack = 0
 13476  005E10  0C08               	retlw	8
 13477  005E12                     __end_of_vscp_getBufferSize:
 13478                           	opt stack 0
 13479                           tblptru	equ	0xFF8
 13480                           tblptrh	equ	0xFF7
 13481                           tblptrl	equ	0xFF6
 13482                           tablat	equ	0xFF5
 13483                           prodh	equ	0xFF4
 13484                           prodl	equ	0xFF3
 13485                           postinc0	equ	0xFEE
 13486                           wreg	equ	0xFE8
 13487                           postdec1	equ	0xFE5
 13488                           fsr1h	equ	0xFE2
 13489                           fsr1l	equ	0xFE1
 13490                           indf2	equ	0xFDF
 13491                           postinc2	equ	0xFDE
 13492                           postdec2	equ	0xFDD
 13493                           fsr2h	equ	0xFDA
 13494                           fsr2l	equ	0xFD9
 13495                           status	equ	0xFD8
 13496                           
 13497 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13498 ;; Defined at:
 13499 ;;		line 2661 in file "../main.c"
 13500 ;; Parameters:    Size  Location     Type
 13501 ;;		None
 13502 ;; Auto vars:     Size  Location     Type
 13503 ;;		None
 13504 ;; Return value:  Size  Location     Type
 13505 ;;                  1    wreg      unsigned char 
 13506 ;; Registers used:
 13507 ;;		wreg
 13508 ;; Tracked objects:
 13509 ;;		On entry : F/0
 13510 ;;		On exit  : F/0
 13511 ;;		Unchanged: F/0
 13512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13513 ;;      Params:         0       0       0       0       0       0       0
 13514 ;;      Locals:         0       0       0       0       0       0       0
 13515 ;;      Temps:          0       0       0       0       0       0       0
 13516 ;;      Totals:         0       0       0       0       0       0       0
 13517 ;;Total ram usage:        0 bytes
 13518 ;; Hardware stack levels used:    1
 13519 ;; Hardware stack levels required when called:    2
 13520 ;; This function calls:
 13521 ;;		Nothing
 13522 ;; This function is called by:
 13523 ;;		_vscp_readStdReg
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           	psect	text49
 13528  005E12                     __ptext49:
 13529                           	opt stack 0
 13530  005E12                     _vscp_getBootLoaderAlgorithm:
 13531                           	opt stack 26
 13532                           
 13533                           ; BSR set to: 0
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;main.c: 2662: return 0x01;
 13537                           
 13538                           ; BSR set to: 0
 13539                           ;incstack = 0
 13540                           ;incstack = 0
 13541  005E12  0C01               	retlw	1
 13542  005E14                     __end_of_vscp_getBootLoaderAlgorithm:
 13543                           	opt stack 0
 13544                           tblptru	equ	0xFF8
 13545                           tblptrh	equ	0xFF7
 13546                           tblptrl	equ	0xFF6
 13547                           tablat	equ	0xFF5
 13548                           prodh	equ	0xFF4
 13549                           prodl	equ	0xFF3
 13550                           postinc0	equ	0xFEE
 13551                           wreg	equ	0xFE8
 13552                           postdec1	equ	0xFE5
 13553                           fsr1h	equ	0xFE2
 13554                           fsr1l	equ	0xFE1
 13555                           indf2	equ	0xFDF
 13556                           postinc2	equ	0xFDE
 13557                           postdec2	equ	0xFDD
 13558                           fsr2h	equ	0xFDA
 13559                           fsr2l	equ	0xFD9
 13560                           status	equ	0xFD8
 13561                           
 13562 ;; *************** function _vscp_getManufacturerId *****************
 13563 ;; Defined at:
 13564 ;;		line 2641 in file "../main.c"
 13565 ;; Parameters:    Size  Location     Type
 13566 ;;  idx             1    wreg     unsigned char 
 13567 ;; Auto vars:     Size  Location     Type
 13568 ;;  idx             1   17[COMRAM] unsigned char 
 13569 ;; Return value:  Size  Location     Type
 13570 ;;                  1    wreg      unsigned char 
 13571 ;; Registers used:
 13572 ;;		wreg, status,2, status,0, cstack
 13573 ;; Tracked objects:
 13574 ;;		On entry : 0/0
 13575 ;;		On exit  : 0/0
 13576 ;;		Unchanged: 0/0
 13577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13578 ;;      Params:         0       0       0       0       0       0       0
 13579 ;;      Locals:         1       0       0       0       0       0       0
 13580 ;;      Temps:          0       0       0       0       0       0       0
 13581 ;;      Totals:         1       0       0       0       0       0       0
 13582 ;;Total ram usage:        1 bytes
 13583 ;; Hardware stack levels used:    1
 13584 ;; Hardware stack levels required when called:    3
 13585 ;; This function calls:
 13586 ;;		_readEEPROM
 13587 ;; This function is called by:
 13588 ;;		_vscp_readStdReg
 13589 ;;		_vscp_writeStdReg
 13590 ;; This function uses a non-reentrant model
 13591 ;;
 13592                           
 13593                           	psect	text50
 13594  005D14                     __ptext50:
 13595                           	opt stack 0
 13596  005D14                     _vscp_getManufacturerId:
 13597                           	opt stack 25
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;incstack = 0
 13601                           ;incstack = 0
 13602                           ;vscp_getManufacturerId@idx stored from wreg
 13603  005D14  CFE8 F012          	movff	wreg,vscp_getManufacturerId@idx
 13604                           
 13605                           ;main.c: 2642: return readEEPROM(0x09 + idx);
 13606  005D18  0E09               	movlw	9
 13607  005D1A  2412               	addwf	vscp_getManufacturerId@idx,w,c
 13608  005D1C  6E0E               	movwf	?_readEEPROM,c
 13609  005D1E  6A0F               	clrf	?_readEEPROM+1,c
 13610  005D20  0E00               	movlw	0
 13611  005D22  220F               	addwfc	?_readEEPROM+1,f,c
 13612  005D24  EFA8  F02E         	goto	_readEEPROM	;wreg free
 13613  005D28                     __end_of_vscp_getManufacturerId:
 13614                           	opt stack 0
 13615                           tblptru	equ	0xFF8
 13616                           tblptrh	equ	0xFF7
 13617                           tblptrl	equ	0xFF6
 13618                           tablat	equ	0xFF5
 13619                           prodh	equ	0xFF4
 13620                           prodl	equ	0xFF3
 13621                           postinc0	equ	0xFEE
 13622                           wreg	equ	0xFE8
 13623                           postdec1	equ	0xFE5
 13624                           fsr1h	equ	0xFE2
 13625                           fsr1l	equ	0xFE1
 13626                           indf2	equ	0xFDF
 13627                           postinc2	equ	0xFDE
 13628                           postdec2	equ	0xFDD
 13629                           fsr2h	equ	0xFDA
 13630                           fsr2l	equ	0xFD9
 13631                           status	equ	0xFD8
 13632                           
 13633 ;; *************** function _vscp_getUserID *****************
 13634 ;; Defined at:
 13635 ;;		line 2621 in file "../main.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;  idx             1    wreg     unsigned char 
 13638 ;; Auto vars:     Size  Location     Type
 13639 ;;  idx             1   17[COMRAM] unsigned char 
 13640 ;; Return value:  Size  Location     Type
 13641 ;;                  1    wreg      unsigned char 
 13642 ;; Registers used:
 13643 ;;		wreg, status,2, status,0, cstack
 13644 ;; Tracked objects:
 13645 ;;		On entry : 0/0
 13646 ;;		On exit  : 0/0
 13647 ;;		Unchanged: 0/0
 13648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13649 ;;      Params:         0       0       0       0       0       0       0
 13650 ;;      Locals:         1       0       0       0       0       0       0
 13651 ;;      Temps:          0       0       0       0       0       0       0
 13652 ;;      Totals:         1       0       0       0       0       0       0
 13653 ;;Total ram usage:        1 bytes
 13654 ;; Hardware stack levels used:    1
 13655 ;; Hardware stack levels required when called:    3
 13656 ;; This function calls:
 13657 ;;		_readEEPROM
 13658 ;; This function is called by:
 13659 ;;		_vscp_readStdReg
 13660 ;;		_vscp_writeStdReg
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           	psect	text51
 13665  005D28                     __ptext51:
 13666                           	opt stack 0
 13667  005D28                     _vscp_getUserID:
 13668                           	opt stack 25
 13669                           
 13670                           ;incstack = 0
 13671                           ;incstack = 0
 13672                           ;vscp_getUserID@idx stored from wreg
 13673  005D28  CFE8 F012          	movff	wreg,vscp_getUserID@idx
 13674                           
 13675                           ;main.c: 2622: return readEEPROM(0x04 + idx);
 13676  005D2C  0E04               	movlw	4
 13677  005D2E  2412               	addwf	vscp_getUserID@idx,w,c
 13678  005D30  6E0E               	movwf	?_readEEPROM,c
 13679  005D32  6A0F               	clrf	?_readEEPROM+1,c
 13680  005D34  0E00               	movlw	0
 13681  005D36  220F               	addwfc	?_readEEPROM+1,f,c
 13682  005D38  EFA8  F02E         	goto	_readEEPROM	;wreg free
 13683  005D3C                     __end_of_vscp_getUserID:
 13684                           	opt stack 0
 13685                           tblptru	equ	0xFF8
 13686                           tblptrh	equ	0xFF7
 13687                           tblptrl	equ	0xFF6
 13688                           tablat	equ	0xFF5
 13689                           prodh	equ	0xFF4
 13690                           prodl	equ	0xFF3
 13691                           postinc0	equ	0xFEE
 13692                           wreg	equ	0xFE8
 13693                           postdec1	equ	0xFE5
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           fsr2h	equ	0xFDA
 13700                           fsr2l	equ	0xFD9
 13701                           status	equ	0xFD8
 13702                           
 13703 ;; *************** function _vscp_getMDF_URL *****************
 13704 ;; Defined at:
 13705 ;;		line 2612 in file "../main.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;  idx             1    wreg     unsigned char 
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;  idx             1   14[COMRAM] unsigned char 
 13710 ;; Return value:  Size  Location     Type
 13711 ;;                  1    wreg      unsigned char 
 13712 ;; Registers used:
 13713 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13714 ;; Tracked objects:
 13715 ;;		On entry : F/0
 13716 ;;		On exit  : F/0
 13717 ;;		Unchanged: F/0
 13718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13719 ;;      Params:         0       0       0       0       0       0       0
 13720 ;;      Locals:         1       0       0       0       0       0       0
 13721 ;;      Temps:          1       0       0       0       0       0       0
 13722 ;;      Totals:         2       0       0       0       0       0       0
 13723 ;;Total ram usage:        2 bytes
 13724 ;; Hardware stack levels used:    1
 13725 ;; Hardware stack levels required when called:    2
 13726 ;; This function calls:
 13727 ;;		Nothing
 13728 ;; This function is called by:
 13729 ;;		_vscp_readStdReg
 13730 ;;		_vscp_handleProtocolEvent
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           	psect	text52
 13735  005CCC                     __ptext52:
 13736                           	opt stack 0
 13737  005CCC                     _vscp_getMDF_URL:
 13738                           	opt stack 26
 13739                           
 13740                           ;incstack = 0
 13741                           ;incstack = 0
 13742                           ;vscp_getMDF_URL@idx stored from wreg
 13743  005CCC  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;main.c: 2613: return vscp_deviceURL[ idx ];
 13747  005CD0  500F               	movf	vscp_getMDF_URL@idx,w,c
 13748  005CD2  0F00               	addlw	low _vscp_deviceURL
 13749  005CD4  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13750  005CD6  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13751  005CDA  0E0B               	movlw	high __smallconst
 13752  005CDC  6EF7               	movwf	tblptrh,c
 13753  005CDE  0008               	tblrd		*
 13754  005CE0  50F5               	movf	tablat,w,c
 13755                           
 13756                           ; BSR set to: 0
 13757  005CE2  0012               	return	
 13758  005CE4                     __end_of_vscp_getMDF_URL:
 13759                           	opt stack 0
 13760                           tblptru	equ	0xFF8
 13761                           tblptrh	equ	0xFF7
 13762                           tblptrl	equ	0xFF6
 13763                           tablat	equ	0xFF5
 13764                           prodh	equ	0xFF4
 13765                           prodl	equ	0xFF3
 13766                           postinc0	equ	0xFEE
 13767                           wreg	equ	0xFE8
 13768                           postdec1	equ	0xFE5
 13769                           fsr1h	equ	0xFE2
 13770                           fsr1l	equ	0xFE1
 13771                           indf2	equ	0xFDF
 13772                           postinc2	equ	0xFDE
 13773                           postdec2	equ	0xFDD
 13774                           fsr2h	equ	0xFDA
 13775                           fsr2l	equ	0xFD9
 13776                           status	equ	0xFD8
 13777                           
 13778 ;; *************** function _vscp_getGUID *****************
 13779 ;; Defined at:
 13780 ;;		line 2589 in file "../main.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  idx             1    wreg     unsigned char 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  idx             1   17[COMRAM] unsigned char 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  1    wreg      unsigned char 
 13787 ;; Registers used:
 13788 ;;		wreg, status,2, status,0, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13794 ;;      Params:         0       0       0       0       0       0       0
 13795 ;;      Locals:         1       0       0       0       0       0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0
 13797 ;;      Totals:         1       0       0       0       0       0       0
 13798 ;;Total ram usage:        1 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    3
 13801 ;; This function calls:
 13802 ;;		_readEEPROM
 13803 ;; This function is called by:
 13804 ;;		_vscp_readStdReg
 13805 ;;		_vscp_writeStdReg
 13806 ;;		_vscp_handleProtocolEvent
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           	psect	text53
 13811  005D3C                     __ptext53:
 13812                           	opt stack 0
 13813  005D3C                     _vscp_getGUID:
 13814                           	opt stack 25
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;incstack = 0
 13818                           ;incstack = 0
 13819                           ;vscp_getGUID@idx stored from wreg
 13820  005D3C  CFE8 F012          	movff	wreg,vscp_getGUID@idx
 13821                           
 13822                           ;main.c: 2590: return readEEPROM(0x11 + idx);
 13823  005D40  0E11               	movlw	17
 13824  005D42  2412               	addwf	vscp_getGUID@idx,w,c
 13825  005D44  6E0E               	movwf	?_readEEPROM,c
 13826  005D46  6A0F               	clrf	?_readEEPROM+1,c
 13827  005D48  0E00               	movlw	0
 13828  005D4A  220F               	addwfc	?_readEEPROM+1,f,c
 13829  005D4C  EFA8  F02E         	goto	_readEEPROM	;wreg free
 13830  005D50                     __end_of_vscp_getGUID:
 13831                           	opt stack 0
 13832                           tblptru	equ	0xFF8
 13833                           tblptrh	equ	0xFF7
 13834                           tblptrl	equ	0xFF6
 13835                           tablat	equ	0xFF5
 13836                           prodh	equ	0xFF4
 13837                           prodl	equ	0xFF3
 13838                           postinc0	equ	0xFEE
 13839                           wreg	equ	0xFE8
 13840                           postdec1	equ	0xFE5
 13841                           fsr1h	equ	0xFE2
 13842                           fsr1l	equ	0xFE1
 13843                           indf2	equ	0xFDF
 13844                           postinc2	equ	0xFDE
 13845                           postdec2	equ	0xFDD
 13846                           fsr2h	equ	0xFDA
 13847                           fsr2l	equ	0xFD9
 13848                           status	equ	0xFD8
 13849                           
 13850 ;; *************** function _vscp_getSubMinorVersion *****************
 13851 ;; Defined at:
 13852 ;;		line 2578 in file "../main.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;		None
 13855 ;; Auto vars:     Size  Location     Type
 13856 ;;		None
 13857 ;; Return value:  Size  Location     Type
 13858 ;;                  1    wreg      unsigned char 
 13859 ;; Registers used:
 13860 ;;		wreg
 13861 ;; Tracked objects:
 13862 ;;		On entry : F/0
 13863 ;;		On exit  : F/0
 13864 ;;		Unchanged: F/0
 13865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13866 ;;      Params:         0       0       0       0       0       0       0
 13867 ;;      Locals:         0       0       0       0       0       0       0
 13868 ;;      Temps:          0       0       0       0       0       0       0
 13869 ;;      Totals:         0       0       0       0       0       0       0
 13870 ;;Total ram usage:        0 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; Hardware stack levels required when called:    2
 13873 ;; This function calls:
 13874 ;;		Nothing
 13875 ;; This function is called by:
 13876 ;;		_vscp_readStdReg
 13877 ;; This function uses a non-reentrant model
 13878 ;;
 13879                           
 13880                           	psect	text54
 13881  005E14                     __ptext54:
 13882                           	opt stack 0
 13883  005E14                     _vscp_getSubMinorVersion:
 13884                           	opt stack 26
 13885                           
 13886                           ; BSR set to: 0
 13887                           
 13888                           ; BSR set to: 0
 13889                           ;main.c: 2579: return 2;
 13890                           
 13891                           ;incstack = 0
 13892                           ;incstack = 0
 13893  005E14  0C02               	retlw	2
 13894  005E16                     __end_of_vscp_getSubMinorVersion:
 13895                           	opt stack 0
 13896                           tblptru	equ	0xFF8
 13897                           tblptrh	equ	0xFF7
 13898                           tblptrl	equ	0xFF6
 13899                           tablat	equ	0xFF5
 13900                           prodh	equ	0xFF4
 13901                           prodl	equ	0xFF3
 13902                           postinc0	equ	0xFEE
 13903                           wreg	equ	0xFE8
 13904                           postdec1	equ	0xFE5
 13905                           fsr1h	equ	0xFE2
 13906                           fsr1l	equ	0xFE1
 13907                           indf2	equ	0xFDF
 13908                           postinc2	equ	0xFDE
 13909                           postdec2	equ	0xFDD
 13910                           fsr2h	equ	0xFDA
 13911                           fsr2l	equ	0xFD9
 13912                           status	equ	0xFD8
 13913                           
 13914 ;; *************** function _vscp_getMinorVersion *****************
 13915 ;; Defined at:
 13916 ;;		line 2569 in file "../main.c"
 13917 ;; Parameters:    Size  Location     Type
 13918 ;;		None
 13919 ;; Auto vars:     Size  Location     Type
 13920 ;;		None
 13921 ;; Return value:  Size  Location     Type
 13922 ;;                  1    wreg      unsigned char 
 13923 ;; Registers used:
 13924 ;;		wreg
 13925 ;; Tracked objects:
 13926 ;;		On entry : F/0
 13927 ;;		On exit  : F/0
 13928 ;;		Unchanged: F/0
 13929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13930 ;;      Params:         0       0       0       0       0       0       0
 13931 ;;      Locals:         0       0       0       0       0       0       0
 13932 ;;      Temps:          0       0       0       0       0       0       0
 13933 ;;      Totals:         0       0       0       0       0       0       0
 13934 ;;Total ram usage:        0 bytes
 13935 ;; Hardware stack levels used:    1
 13936 ;; Hardware stack levels required when called:    2
 13937 ;; This function calls:
 13938 ;;		Nothing
 13939 ;; This function is called by:
 13940 ;;		_vscp_readStdReg
 13941 ;; This function uses a non-reentrant model
 13942 ;;
 13943                           
 13944                           	psect	text55
 13945  005E16                     __ptext55:
 13946                           	opt stack 0
 13947  005E16                     _vscp_getMinorVersion:
 13948                           	opt stack 26
 13949                           
 13950                           ; BSR set to: 0
 13951                           
 13952                           ; BSR set to: 0
 13953                           ;main.c: 2570: return 2;
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;incstack = 0
 13957                           ;incstack = 0
 13958  005E16  0C02               	retlw	2
 13959  005E18                     __end_of_vscp_getMinorVersion:
 13960                           	opt stack 0
 13961                           tblptru	equ	0xFF8
 13962                           tblptrh	equ	0xFF7
 13963                           tblptrl	equ	0xFF6
 13964                           tablat	equ	0xFF5
 13965                           prodh	equ	0xFF4
 13966                           prodl	equ	0xFF3
 13967                           postinc0	equ	0xFEE
 13968                           wreg	equ	0xFE8
 13969                           postdec1	equ	0xFE5
 13970                           fsr1h	equ	0xFE2
 13971                           fsr1l	equ	0xFE1
 13972                           indf2	equ	0xFDF
 13973                           postinc2	equ	0xFDE
 13974                           postdec2	equ	0xFDD
 13975                           fsr2h	equ	0xFDA
 13976                           fsr2l	equ	0xFD9
 13977                           status	equ	0xFD8
 13978                           
 13979 ;; *************** function _vscp_getMajorVersion *****************
 13980 ;; Defined at:
 13981 ;;		line 2560 in file "../main.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;		None
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;		None
 13986 ;; Return value:  Size  Location     Type
 13987 ;;                  1    wreg      unsigned char 
 13988 ;; Registers used:
 13989 ;;		wreg
 13990 ;; Tracked objects:
 13991 ;;		On entry : F/0
 13992 ;;		On exit  : F/0
 13993 ;;		Unchanged: F/0
 13994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13995 ;;      Params:         0       0       0       0       0       0       0
 13996 ;;      Locals:         0       0       0       0       0       0       0
 13997 ;;      Temps:          0       0       0       0       0       0       0
 13998 ;;      Totals:         0       0       0       0       0       0       0
 13999 ;;Total ram usage:        0 bytes
 14000 ;; Hardware stack levels used:    1
 14001 ;; Hardware stack levels required when called:    2
 14002 ;; This function calls:
 14003 ;;		Nothing
 14004 ;; This function is called by:
 14005 ;;		_vscp_readStdReg
 14006 ;; This function uses a non-reentrant model
 14007 ;;
 14008                           
 14009                           	psect	text56
 14010  005E18                     __ptext56:
 14011                           	opt stack 0
 14012  005E18                     _vscp_getMajorVersion:
 14013                           	opt stack 26
 14014                           
 14015                           ; BSR set to: 0
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;main.c: 2561: return 1;
 14019                           
 14020                           ; BSR set to: 0
 14021                           ;incstack = 0
 14022                           ;incstack = 0
 14023  005E18  0C01               	retlw	1
 14024  005E1A                     __end_of_vscp_getMajorVersion:
 14025                           	opt stack 0
 14026                           tblptru	equ	0xFF8
 14027                           tblptrh	equ	0xFF7
 14028                           tblptrl	equ	0xFF6
 14029                           tablat	equ	0xFF5
 14030                           prodh	equ	0xFF4
 14031                           prodl	equ	0xFF3
 14032                           postinc0	equ	0xFEE
 14033                           wreg	equ	0xFE8
 14034                           postdec1	equ	0xFE5
 14035                           fsr1h	equ	0xFE2
 14036                           fsr1l	equ	0xFE1
 14037                           indf2	equ	0xFDF
 14038                           postinc2	equ	0xFDE
 14039                           postdec2	equ	0xFDD
 14040                           fsr2h	equ	0xFDA
 14041                           fsr2l	equ	0xFD9
 14042                           status	equ	0xFD8
 14043                           
 14044 ;; *************** function _vscp_newNodeOnline *****************
 14045 ;; Defined at:
 14046 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 14047 ;; Parameters:    Size  Location     Type
 14048 ;;		None
 14049 ;; Auto vars:     Size  Location     Type
 14050 ;;		None
 14051 ;; Return value:  Size  Location     Type
 14052 ;;		None               void
 14053 ;; Registers used:
 14054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14055 ;; Tracked objects:
 14056 ;;		On entry : F/0
 14057 ;;		On exit  : F/0
 14058 ;;		Unchanged: 0/0
 14059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14060 ;;      Params:         0       0       0       0       0       0       0
 14061 ;;      Locals:         0       0       0       0       0       0       0
 14062 ;;      Temps:          1       0       0       0       0       0       0
 14063 ;;      Totals:         1       0       0       0       0       0       0
 14064 ;;Total ram usage:        1 bytes
 14065 ;; Hardware stack levels used:    1
 14066 ;; Hardware stack levels required when called:    7
 14067 ;; This function calls:
 14068 ;;		_vscp_sendEvent
 14069 ;; This function is called by:
 14070 ;;		_vscp_handleProtocolEvent
 14071 ;; This function uses a non-reentrant model
 14072 ;;
 14073                           
 14074                           	psect	text57
 14075  005A8C                     __ptext57:
 14076                           	opt stack 0
 14077  005A8C                     _vscp_newNodeOnline:
 14078                           	opt stack 22
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 14082                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;incstack = 0
 14086                           ;incstack = 0
 14087  005A8C  C0C1  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 14088  005A90  0E0F               	movlw	15
 14089  005A92  1644               	andwf	??_vscp_newNodeOnline,f,c
 14090  005A94  0444               	decf	??_vscp_newNodeOnline,w,c
 14091  005A96  E10E               	bnz	l1094
 14092                           
 14093                           ; BSR set to: 0
 14094  005A98  51BF               	movf	_vscp_nickname& (0+255),w,b
 14095  005A9A  EE20  F0C7         	lfsr	2,_vscp_imsg+6
 14096  005A9E  62DF               	cpfseq	indf2,c
 14097  005AA0  D009               	goto	l1094
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14101  005AA2  0E80               	movlw	128
 14102  005AA4  6FCF               	movwf	_vscp_omsg& (0+255),b
 14103                           
 14104                           ; BSR set to: 0
 14105                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14106  005AA6  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14110  005AA8  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 14111  005AAA  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 14112                           
 14113                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14114  005AAC  0E03               	movlw	3
 14115  005AAE  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14119  005AB0  EC84  F02D         	call	_vscp_sendEvent	;wreg free
 14120  005AB4                     l1094:
 14121                           
 14122                           ; BSR set to: 0
 14123  005AB4  0012               	return	
 14124  005AB6                     __end_of_vscp_newNodeOnline:
 14125                           	opt stack 0
 14126                           tblptru	equ	0xFF8
 14127                           tblptrh	equ	0xFF7
 14128                           tblptrl	equ	0xFF6
 14129                           tablat	equ	0xFF5
 14130                           prodh	equ	0xFF4
 14131                           prodl	equ	0xFF3
 14132                           postinc0	equ	0xFEE
 14133                           wreg	equ	0xFE8
 14134                           postdec1	equ	0xFE5
 14135                           fsr1h	equ	0xFE2
 14136                           fsr1l	equ	0xFE1
 14137                           indf2	equ	0xFDF
 14138                           postinc2	equ	0xFDE
 14139                           postdec2	equ	0xFDD
 14140                           fsr2h	equ	0xFDA
 14141                           fsr2l	equ	0xFD9
 14142                           status	equ	0xFD8
 14143                           
 14144 ;; *************** function _vscp_handleDropNickname *****************
 14145 ;; Defined at:
 14146 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;		None
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  bytes           1   17[COMRAM] unsigned char 
 14151 ;; Return value:  Size  Location     Type
 14152 ;;		None               void
 14153 ;; Registers used:
 14154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14155 ;; Tracked objects:
 14156 ;;		On entry : F/0
 14157 ;;		On exit  : F/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14160 ;;      Params:         0       0       0       0       0       0       0
 14161 ;;      Locals:         1       0       0       0       0       0       0
 14162 ;;      Temps:          0       0       0       0       0       0       0
 14163 ;;      Totals:         1       0       0       0       0       0       0
 14164 ;;Total ram usage:        1 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    5
 14167 ;; This function calls:
 14168 ;;		_vscp_init
 14169 ;;		_vscp_writeNicknamePermanent
 14170 ;; This function is called by:
 14171 ;;		_vscp_handleProtocolEvent
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175                           	psect	text58
 14176  0059DA                     __ptext58:
 14177                           	opt stack 0
 14178  0059DA                     _vscp_handleDropNickname:
 14179                           	opt stack 24
 14180                           
 14181                           ; BSR set to: 0
 14182                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14183                           
 14184                           ; BSR set to: 0
 14185                           ;incstack = 0
 14186                           ;incstack = 0
 14187  0059DA  51C1               	movf	_vscp_imsg& (0+255),w,b
 14188  0059DC  0B0F               	andlw	15
 14189  0059DE  6E12               	movwf	vscp_handleDropNickname@bytes,c
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14193  0059E0  5012               	movf	vscp_handleDropNickname@bytes,w,c
 14194  0059E2  E012               	bz	l1090
 14195                           
 14196                           ; BSR set to: 0
 14197  0059E4  51BF               	movf	_vscp_nickname& (0+255),w,b
 14198  0059E6  EE20  F0C7         	lfsr	2,_vscp_imsg+6
 14199  0059EA  62DF               	cpfseq	indf2,c
 14200  0059EC  D00D               	goto	l1090
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14204  0059EE  0412               	decf	vscp_handleDropNickname@bytes,w,c
 14205  0059F0  E005               	bz	l1089
 14206                           
 14207                           ; BSR set to: 0
 14208  0059F2  0E01               	movlw	1
 14209  0059F4  6412               	cpfsgt	vscp_handleDropNickname@bytes,c
 14210  0059F6  D008               	goto	l1090
 14211                           
 14212                           ; BSR set to: 0
 14213  0059F8  67C8               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14214  0059FA  D006               	goto	l1090
 14215  0059FC                     l1089:
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14219  0059FC  69BF               	setf	_vscp_nickname& (0+255),b
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14223  0059FE  0EFF               	movlw	255
 14224  005A00  ECC4  F02E         	call	_vscp_writeNicknamePermanent
 14225                           
 14226                           ;vscp_firmware.c: 481: vscp_init();
 14227  005A04  ECD9  F02B         	call	_vscp_init	;wreg free
 14228  005A08                     l1090:
 14229                           
 14230                           ; BSR set to: 0
 14231  005A08  0012               	return	
 14232  005A0A                     __end_of_vscp_handleDropNickname:
 14233                           	opt stack 0
 14234                           tblptru	equ	0xFF8
 14235                           tblptrh	equ	0xFF7
 14236                           tblptrl	equ	0xFF6
 14237                           tablat	equ	0xFF5
 14238                           prodh	equ	0xFF4
 14239                           prodl	equ	0xFF3
 14240                           postinc0	equ	0xFEE
 14241                           wreg	equ	0xFE8
 14242                           postdec1	equ	0xFE5
 14243                           fsr1h	equ	0xFE2
 14244                           fsr1l	equ	0xFE1
 14245                           indf2	equ	0xFDF
 14246                           postinc2	equ	0xFDE
 14247                           postdec2	equ	0xFDD
 14248                           fsr2h	equ	0xFDA
 14249                           fsr2l	equ	0xFD9
 14250                           status	equ	0xFD8
 14251                           
 14252 ;; *************** function _vscp_init *****************
 14253 ;; Defined at:
 14254 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14255 ;; Parameters:    Size  Location     Type
 14256 ;;		None
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;		None
 14259 ;; Return value:  Size  Location     Type
 14260 ;;		None               void
 14261 ;; Registers used:
 14262 ;;		wreg, status,2, cstack
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/1
 14265 ;;		On exit  : F/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14268 ;;      Params:         0       0       0       0       0       0       0
 14269 ;;      Locals:         0       0       0       0       0       0       0
 14270 ;;      Temps:          0       0       0       0       0       0       0
 14271 ;;      Totals:         0       0       0       0       0       0       0
 14272 ;;Total ram usage:        0 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    4
 14275 ;; This function calls:
 14276 ;;		_vscp_readNicknamePermanent
 14277 ;; This function is called by:
 14278 ;;		_main
 14279 ;;		_vscp_handleDropNickname
 14280 ;;		_vscp_handleProtocolEvent
 14281 ;; This function uses a non-reentrant model
 14282 ;;
 14283                           
 14284                           	psect	text59
 14285  0057B2                     __ptext59:
 14286                           	opt stack 0
 14287  0057B2                     _vscp_init:
 14288                           	opt stack 24
 14289                           
 14290                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;incstack = 0
 14294                           ;incstack = 0
 14295  0057B2  0E02               	movlw	2
 14296  0057B4  6E4C               	movwf	_vscp_initledfunc,c
 14297                           
 14298                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14299  0057B6  ECF3  F02E         	call	_vscp_readNicknamePermanent	;wreg free
 14300  0057BA  0100               	movlb	0	; () banked
 14301  0057BC  6FBF               	movwf	_vscp_nickname& (0+255),b
 14302                           
 14303                           ; BSR set to: 0
 14304                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14305  0057BE  67BF               	tstfsz	_vscp_nickname& (0+255),b
 14306  0057C0  D001               	goto	l1031
 14307                           
 14308                           ; BSR set to: 0
 14309  0057C2  69BF               	setf	_vscp_nickname& (0+255),b
 14310  0057C4                     l1031:
 14311                           
 14312                           ; BSR set to: 0
 14313                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14314  0057C4  6BC1               	clrf	_vscp_imsg& (0+255),b
 14315                           
 14316                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14317  0057C6  6BC2               	clrf	(_vscp_imsg+1)& (0+255),b
 14318                           
 14319                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14320  0057C8  6BC3               	clrf	(_vscp_imsg+2)& (0+255),b
 14321  0057CA  6BC4               	clrf	(_vscp_imsg+3)& (0+255),b
 14322                           
 14323                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14324  0057CC  6BC5               	clrf	(_vscp_imsg+4)& (0+255),b
 14325                           
 14326                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14327  0057CE  6BCF               	clrf	_vscp_omsg& (0+255),b
 14328                           
 14329                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14330  0057D0  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 14331                           
 14332                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14333  0057D2  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 14334  0057D4  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 14335                           
 14336                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14337  0057D6  6BD3               	clrf	(_vscp_omsg+4)& (0+255),b
 14338                           
 14339                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14340  0057D8  6A4A               	clrf	_vscp_alarmstatus,c
 14341                           
 14342                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14343  0057DA  6A4F               	clrf	_vscp_probe_address,c
 14344                           
 14345                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14346  0057DC  6BC0               	clrf	_vscp_node_state& (0+255),b
 14347                           
 14348                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14349  0057DE  6A4E               	clrf	_vscp_node_substate,c
 14350                           
 14351                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14352  0057E0  6A50               	clrf	_vscp_probe_cnt,c
 14353                           
 14354                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14355  0057E2  6A46               	clrf	_vscp_page_select,c
 14356  0057E4  6A47               	clrf	_vscp_page_select+1,c
 14357                           
 14358                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14359  0057E6  6BB6               	clrf	_vscp_timer& (0+255),b	;volatile
 14360  0057E8  6BB7               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14361                           
 14362                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14363  0057EA  6BB4               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14364  0057EC  6BB5               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14365                           
 14366                           ;vscp_firmware.c: 155: vscp_second = 0;
 14367  0057EE  6A51               	clrf	_vscp_second,c
 14368                           
 14369                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14370  0057F0  6A4D               	clrf	_vscp_minute,c
 14371                           
 14372                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14373  0057F2  6BBD               	clrf	_vscp_hour& (0+255),b
 14374                           
 14375                           ; BSR set to: 0
 14376  0057F4  0012               	return	
 14377  0057F6                     __end_of_vscp_init:
 14378                           	opt stack 0
 14379                           tblptru	equ	0xFF8
 14380                           tblptrh	equ	0xFF7
 14381                           tblptrl	equ	0xFF6
 14382                           tablat	equ	0xFF5
 14383                           prodh	equ	0xFF4
 14384                           prodl	equ	0xFF3
 14385                           postinc0	equ	0xFEE
 14386                           wreg	equ	0xFE8
 14387                           postdec1	equ	0xFE5
 14388                           fsr1h	equ	0xFE2
 14389                           fsr1l	equ	0xFE1
 14390                           indf2	equ	0xFDF
 14391                           postinc2	equ	0xFDE
 14392                           postdec2	equ	0xFDD
 14393                           fsr2h	equ	0xFDA
 14394                           fsr2l	equ	0xFD9
 14395                           status	equ	0xFD8
 14396                           
 14397 ;; *************** function _vscp_readNicknamePermanent *****************
 14398 ;; Defined at:
 14399 ;;		line 2761 in file "../main.c"
 14400 ;; Parameters:    Size  Location     Type
 14401 ;;		None
 14402 ;; Auto vars:     Size  Location     Type
 14403 ;;		None
 14404 ;; Return value:  Size  Location     Type
 14405 ;;                  1    wreg      unsigned char 
 14406 ;; Registers used:
 14407 ;;		wreg, status,2, cstack
 14408 ;; Tracked objects:
 14409 ;;		On entry : 0/1
 14410 ;;		On exit  : 0/0
 14411 ;;		Unchanged: 0/0
 14412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14413 ;;      Params:         0       0       0       0       0       0       0
 14414 ;;      Locals:         0       0       0       0       0       0       0
 14415 ;;      Temps:          0       0       0       0       0       0       0
 14416 ;;      Totals:         0       0       0       0       0       0       0
 14417 ;;Total ram usage:        0 bytes
 14418 ;; Hardware stack levels used:    1
 14419 ;; Hardware stack levels required when called:    3
 14420 ;; This function calls:
 14421 ;;		_readEEPROM
 14422 ;; This function is called by:
 14423 ;;		_vscp_init
 14424 ;; This function uses a non-reentrant model
 14425 ;;
 14426                           
 14427                           	psect	text60
 14428  005DE6                     __ptext60:
 14429                           	opt stack 0
 14430  005DE6                     _vscp_readNicknamePermanent:
 14431                           	opt stack 24
 14432                           
 14433                           ;main.c: 2762: return readEEPROM( 0x01 );
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;incstack = 0
 14437                           ;incstack = 0
 14438  005DE6  6A0F               	clrf	?_readEEPROM+1,c
 14439  005DE8  0E01               	movlw	1
 14440  005DEA  6E0E               	movwf	?_readEEPROM,c
 14441  005DEC  EFA8  F02E         	goto	_readEEPROM	;wreg free
 14442  005DF0                     __end_of_vscp_readNicknamePermanent:
 14443                           	opt stack 0
 14444                           tblptru	equ	0xFF8
 14445                           tblptrh	equ	0xFF7
 14446                           tblptrl	equ	0xFF6
 14447                           tablat	equ	0xFF5
 14448                           prodh	equ	0xFF4
 14449                           prodl	equ	0xFF3
 14450                           postinc0	equ	0xFEE
 14451                           wreg	equ	0xFE8
 14452                           postdec1	equ	0xFE5
 14453                           fsr1h	equ	0xFE2
 14454                           fsr1l	equ	0xFE1
 14455                           indf2	equ	0xFDF
 14456                           postinc2	equ	0xFDE
 14457                           postdec2	equ	0xFDD
 14458                           fsr2h	equ	0xFDA
 14459                           fsr2l	equ	0xFD9
 14460                           status	equ	0xFD8
 14461                           
 14462 ;; *************** function _vscp_handleSetNickname *****************
 14463 ;; Defined at:
 14464 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14465 ;; Parameters:    Size  Location     Type
 14466 ;;		None
 14467 ;; Auto vars:     Size  Location     Type
 14468 ;;		None
 14469 ;; Return value:  Size  Location     Type
 14470 ;;		None               void
 14471 ;; Registers used:
 14472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14473 ;; Tracked objects:
 14474 ;;		On entry : F/0
 14475 ;;		On exit  : 0/0
 14476 ;;		Unchanged: 0/0
 14477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14478 ;;      Params:         0       0       0       0       0       0       0
 14479 ;;      Locals:         0       0       0       0       0       0       0
 14480 ;;      Temps:          0       0       0       0       0       0       0
 14481 ;;      Totals:         0       0       0       0       0       0       0
 14482 ;;Total ram usage:        0 bytes
 14483 ;; Hardware stack levels used:    1
 14484 ;; Hardware stack levels required when called:    4
 14485 ;; This function calls:
 14486 ;;		_vscp_writeNicknamePermanent
 14487 ;;		_vscp_setSegmentCRC
 14488 ;; This function is called by:
 14489 ;;		_vscp_handleProtocolEvent
 14490 ;; This function uses a non-reentrant model
 14491 ;;
 14492                           
 14493                           	psect	text61
 14494  005BA0                     __ptext61:
 14495                           	opt stack 0
 14496  005BA0                     _vscp_handleSetNickname:
 14497                           	opt stack 25
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14501                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14502                           
 14503                           ;incstack = 0
 14504                           ;incstack = 0
 14505  005BA0  51C1               	movf	_vscp_imsg& (0+255),w,b
 14506  005BA2  0B0F               	andlw	15
 14507  005BA4  0A02               	xorlw	2
 14508  005BA6  E10D               	bnz	l1083
 14509                           
 14510                           ; BSR set to: 0
 14511  005BA8  51BF               	movf	_vscp_nickname& (0+255),w,b
 14512  005BAA  EE20  F0C7         	lfsr	2,_vscp_imsg+6
 14513  005BAE  62DF               	cpfseq	indf2,c
 14514  005BB0  D008               	goto	l1083
 14515                           
 14516                           ; BSR set to: 0
 14517                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14518  005BB2  C0C8  F0BF         	movff	_vscp_imsg+7,_vscp_nickname
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14522  005BB6  51BF               	movf	_vscp_nickname& (0+255),w,b
 14523  005BB8  ECC4  F02E         	call	_vscp_writeNicknamePermanent
 14524                           
 14525                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14526  005BBC  0E40               	movlw	64
 14527  005BBE  ECBB  F02E         	call	_vscp_setSegmentCRC
 14528  005BC2                     l1083:
 14529  005BC2  0012               	return	
 14530  005BC4                     __end_of_vscp_handleSetNickname:
 14531                           	opt stack 0
 14532                           tblptru	equ	0xFF8
 14533                           tblptrh	equ	0xFF7
 14534                           tblptrl	equ	0xFF6
 14535                           tablat	equ	0xFF5
 14536                           prodh	equ	0xFF4
 14537                           prodl	equ	0xFF3
 14538                           postinc0	equ	0xFEE
 14539                           wreg	equ	0xFE8
 14540                           postdec1	equ	0xFE5
 14541                           fsr1h	equ	0xFE2
 14542                           fsr1l	equ	0xFE1
 14543                           indf2	equ	0xFDF
 14544                           postinc2	equ	0xFDE
 14545                           postdec2	equ	0xFDD
 14546                           fsr2h	equ	0xFDA
 14547                           fsr2l	equ	0xFD9
 14548                           status	equ	0xFD8
 14549                           
 14550 ;; *************** function _vscp_handleHeartbeat *****************
 14551 ;; Defined at:
 14552 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;		None
 14555 ;; Auto vars:     Size  Location     Type
 14556 ;;		None
 14557 ;; Return value:  Size  Location     Type
 14558 ;;		None               void
 14559 ;; Registers used:
 14560 ;;		wreg, status,2, status,0, cstack
 14561 ;; Tracked objects:
 14562 ;;		On entry : F/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14566 ;;      Params:         0       0       0       0       0       0       0
 14567 ;;      Locals:         0       0       0       0       0       0       0
 14568 ;;      Temps:          0       0       0       0       0       0       0
 14569 ;;      Totals:         0       0       0       0       0       0       0
 14570 ;;Total ram usage:        0 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:    4
 14573 ;; This function calls:
 14574 ;;		_vscp_writeNicknamePermanent
 14575 ;;		_vscp_getSegmentCRC
 14576 ;;		_vscp_setSegmentCRC
 14577 ;; This function is called by:
 14578 ;;		_vscp_handleProtocolEvent
 14579 ;; This function uses a non-reentrant model
 14580 ;;
 14581                           
 14582                           	psect	text62
 14583  00587A                     __ptext62:
 14584                           	opt stack 0
 14585  00587A                     _vscp_handleHeartbeat:
 14586                           	opt stack 25
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14590                           
 14591                           ;incstack = 0
 14592                           ;incstack = 0
 14593  00587A  ECF8  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14594  00587E  0900               	iorlw	0
 14595  005880  E116               	bnz	l11218
 14596                           
 14597                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14598                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14599  005882  0100               	movlb	0	; () banked
 14600  005884  51C1               	movf	_vscp_imsg& (0+255),w,b
 14601  005886  0B0F               	andlw	15
 14602  005888  0A05               	xorlw	5
 14603  00588A  E115               	bnz	l1079
 14604                           
 14605                           ; BSR set to: 0
 14606  00588C  ECF8  F02E         	call	_vscp_getSegmentCRC	;wreg free
 14607  005890  0100               	movlb	0	; () banked
 14608  005892  19C7               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14609  005894  E010               	bz	l1079
 14610                           
 14611                           ; BSR set to: 0
 14612                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14613  005896  51C7               	movf	(_vscp_imsg+6)& (0+255),w,b
 14614  005898  ECBB  F02E         	call	_vscp_setSegmentCRC
 14615                           
 14616                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14617  00589C  0100               	movlb	0	; () banked
 14618  00589E  69BF               	setf	_vscp_nickname& (0+255),b
 14619                           
 14620                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14621  0058A0  0EFF               	movlw	255
 14622  0058A2  ECC4  F02E         	call	_vscp_writeNicknamePermanent
 14623                           
 14624                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14625  0058A6  0E01               	movlw	1
 14626  0058A8  0100               	movlb	0	; () banked
 14627  0058AA  6FC0               	movwf	_vscp_node_state& (0+255),b
 14628  0058AC  D004               	goto	l1079
 14629  0058AE                     l11218:
 14630                           
 14631                           ;vscp_firmware.c: 411: else {
 14632                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14633  0058AE  0100               	movlb	0	; () banked
 14634  0058B0  51C7               	movf	(_vscp_imsg+6)& (0+255),w,b
 14635  0058B2  ECBB  F02E         	call	_vscp_setSegmentCRC
 14636  0058B6                     l1079:
 14637  0058B6  0012               	return	
 14638  0058B8                     __end_of_vscp_handleHeartbeat:
 14639                           	opt stack 0
 14640                           tblptru	equ	0xFF8
 14641                           tblptrh	equ	0xFF7
 14642                           tblptrl	equ	0xFF6
 14643                           tablat	equ	0xFF5
 14644                           prodh	equ	0xFF4
 14645                           prodl	equ	0xFF3
 14646                           postinc0	equ	0xFEE
 14647                           wreg	equ	0xFE8
 14648                           postdec1	equ	0xFE5
 14649                           fsr1h	equ	0xFE2
 14650                           fsr1l	equ	0xFE1
 14651                           indf2	equ	0xFDF
 14652                           postinc2	equ	0xFDE
 14653                           postdec2	equ	0xFDD
 14654                           fsr2h	equ	0xFDA
 14655                           fsr2l	equ	0xFD9
 14656                           status	equ	0xFD8
 14657                           
 14658 ;; *************** function _vscp_goBootloaderMode *****************
 14659 ;; Defined at:
 14660 ;;		line 2744 in file "../main.c"
 14661 ;; Parameters:    Size  Location     Type
 14662 ;;  algorithm       1    wreg     unsigned char 
 14663 ;; Auto vars:     Size  Location     Type
 14664 ;;  algorithm       1   16[COMRAM] unsigned char 
 14665 ;; Return value:  Size  Location     Type
 14666 ;;		None               void
 14667 ;; Registers used:
 14668 ;;		wreg, status,2, status,0, cstack
 14669 ;; Tracked objects:
 14670 ;;		On entry : F/0
 14671 ;;		On exit  : 0/0
 14672 ;;		Unchanged: 0/0
 14673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14674 ;;      Params:         0       0       0       0       0       0       0
 14675 ;;      Locals:         1       0       0       0       0       0       0
 14676 ;;      Temps:          0       0       0       0       0       0       0
 14677 ;;      Totals:         1       0       0       0       0       0       0
 14678 ;;Total ram usage:        1 bytes
 14679 ;; Hardware stack levels used:    1
 14680 ;; Hardware stack levels required when called:    3
 14681 ;; This function calls:
 14682 ;;		_writeEEPROM
 14683 ;; This function is called by:
 14684 ;;		_vscp_handleProtocolEvent
 14685 ;; This function uses a non-reentrant model
 14686 ;;
 14687                           
 14688                           	psect	text63
 14689  005CE4                     __ptext63:
 14690                           	opt stack 0
 14691  005CE4                     _vscp_goBootloaderMode:
 14692                           	opt stack 26
 14693                           
 14694                           ;incstack = 0
 14695                           ;incstack = 0
 14696                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14697  005CE4  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;main.c: 2745: if ( 0x01 != algorithm ) return;
 14701  005CE8  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14702  005CEA  E107               	bnz	l594
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;main.c: 2749: writeEEPROM(0x00, 0xff);
 14706  005CEC  6A0F               	clrf	?_writeEEPROM+1,c
 14707  005CEE  6A0E               	clrf	?_writeEEPROM,c
 14708  005CF0  0EFF               	movlw	255
 14709  005CF2  6810               	setf	?_writeEEPROM+2,c
 14710  005CF4  ECAB  F02D         	call	_writeEEPROM	;wreg free
 14711  005CF8  00FF               	reset		;# 
 14712  005CFA                     l594:
 14713  005CFA  0012               	return	
 14714  005CFC                     __end_of_vscp_goBootloaderMode:
 14715                           	opt stack 0
 14716                           tblptru	equ	0xFF8
 14717                           tblptrh	equ	0xFF7
 14718                           tblptrl	equ	0xFF6
 14719                           tablat	equ	0xFF5
 14720                           prodh	equ	0xFF4
 14721                           prodl	equ	0xFF3
 14722                           postinc0	equ	0xFEE
 14723                           wreg	equ	0xFE8
 14724                           postdec1	equ	0xFE5
 14725                           fsr1h	equ	0xFE2
 14726                           fsr1l	equ	0xFE1
 14727                           indf2	equ	0xFDF
 14728                           postinc2	equ	0xFDE
 14729                           postdec2	equ	0xFDD
 14730                           fsr2h	equ	0xFDA
 14731                           fsr2l	equ	0xFD9
 14732                           status	equ	0xFD8
 14733                           
 14734 ;; *************** function _vscp_getMatrixInfo *****************
 14735 ;; Defined at:
 14736 ;;		line 2679 in file "../main.c"
 14737 ;; Parameters:    Size  Location     Type
 14738 ;;  pData           1    wreg     PTR unsigned char 
 14739 ;;		 -> vscp_omsg(13), 
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14742 ;;		 -> vscp_omsg(13), 
 14743 ;;  i               1   14[COMRAM] unsigned char 
 14744 ;; Return value:  Size  Location     Type
 14745 ;;		None               void
 14746 ;; Registers used:
 14747 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14748 ;; Tracked objects:
 14749 ;;		On entry : F/0
 14750 ;;		On exit  : F/0
 14751 ;;		Unchanged: F/0
 14752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14753 ;;      Params:         0       0       0       0       0       0       0
 14754 ;;      Locals:         2       0       0       0       0       0       0
 14755 ;;      Temps:          0       0       0       0       0       0       0
 14756 ;;      Totals:         2       0       0       0       0       0       0
 14757 ;;Total ram usage:        2 bytes
 14758 ;; Hardware stack levels used:    1
 14759 ;; Hardware stack levels required when called:    2
 14760 ;; This function calls:
 14761 ;;		Nothing
 14762 ;; This function is called by:
 14763 ;;		_vscp_handleProtocolEvent
 14764 ;; This function uses a non-reentrant model
 14765 ;;
 14766                           
 14767                           	psect	text64
 14768  005C82                     __ptext64:
 14769                           	opt stack 0
 14770  005C82                     _vscp_getMatrixInfo:
 14771                           	opt stack 27
 14772                           
 14773                           ;incstack = 0
 14774                           ;incstack = 0
 14775                           ;vscp_getMatrixInfo@pData stored from wreg
 14776  005C82  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14777                           
 14778                           ; BSR set to: 0
 14779                           ;main.c: 2680: uint8_t i;
 14780                           ;main.c: 2684: for (i = 0; i < 8; i++) {
 14781  005C86  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14782  005C88                     l8078:
 14783                           
 14784                           ; BSR set to: 0
 14785                           ;main.c: 2685: pData[ i ] = 0;
 14786  005C88  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14787  005C8A  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14788  005C8C  6ED9               	movwf	fsr2l,c
 14789  005C8E  6ADA               	clrf	fsr2h,c
 14790  005C90  6ADF               	clrf	indf2,c
 14791                           
 14792                           ; BSR set to: 0
 14793  005C92  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14794                           
 14795                           ; BSR set to: 0
 14796  005C94  0E07               	movlw	7
 14797  005C96  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14798  005C98  D7F7               	goto	l8078
 14799                           
 14800                           ; BSR set to: 0
 14801  005C9A  0C07               	retlw	7
 14802  005C9C                     __end_of_vscp_getMatrixInfo:
 14803                           	opt stack 0
 14804                           tblptru	equ	0xFF8
 14805                           tblptrh	equ	0xFF7
 14806                           tblptrl	equ	0xFF6
 14807                           tablat	equ	0xFF5
 14808                           prodh	equ	0xFF4
 14809                           prodl	equ	0xFF3
 14810                           postinc0	equ	0xFEE
 14811                           wreg	equ	0xFE8
 14812                           postdec1	equ	0xFE5
 14813                           fsr1h	equ	0xFE2
 14814                           fsr1l	equ	0xFE1
 14815                           indf2	equ	0xFDF
 14816                           postinc2	equ	0xFDE
 14817                           postdec2	equ	0xFDD
 14818                           fsr2h	equ	0xFDA
 14819                           fsr2l	equ	0xFD9
 14820                           status	equ	0xFD8
 14821                           
 14822 ;; *************** function _vscp_handleProbeState *****************
 14823 ;; Defined at:
 14824 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 14825 ;; Parameters:    Size  Location     Type
 14826 ;;		None
 14827 ;; Auto vars:     Size  Location     Type
 14828 ;;		None
 14829 ;; Return value:  Size  Location     Type
 14830 ;;		None               void
 14831 ;; Registers used:
 14832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14833 ;; Tracked objects:
 14834 ;;		On entry : 0/0
 14835 ;;		On exit  : F/0
 14836 ;;		Unchanged: 0/0
 14837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14838 ;;      Params:         0       0       0       0       0       0       0
 14839 ;;      Locals:         0       0       0       0       0       0       0
 14840 ;;      Temps:          0       0       0       0       0       0       0
 14841 ;;      Totals:         0       0       0       0       0       0       0
 14842 ;;Total ram usage:        0 bytes
 14843 ;; Hardware stack levels used:    1
 14844 ;; Hardware stack levels required when called:    8
 14845 ;; This function calls:
 14846 ;;		_vscp_goActiveState
 14847 ;;		_vscp_sendEvent
 14848 ;;		_vscp_writeNicknamePermanent
 14849 ;;		_vscp_setSegmentCRC
 14850 ;; This function is called by:
 14851 ;;		_main
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           	psect	text65
 14856  004C12                     __ptext65:
 14857                           	opt stack 0
 14858  004C12                     _vscp_handleProbeState:
 14859                           	opt stack 22
 14860                           
 14861                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 14862                           
 14863                           ; BSR set to: 0
 14864                           ;incstack = 0
 14865                           ;incstack = 0
 14866  004C12  D055               	goto	l9688
 14867  004C14                     l9618:
 14868                           
 14869                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 14870  004C14  284F               	incf	_vscp_probe_address,w,c
 14871  004C16  E011               	bz	l9634
 14872                           
 14873                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 14874  004C18  0E81               	movlw	129
 14875  004C1A  0100               	movlb	0	; () banked
 14876  004C1C  6FCF               	movwf	_vscp_omsg& (0+255),b
 14877                           
 14878                           ; BSR set to: 0
 14879                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 14880  004C1E  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 14881                           
 14882                           ; BSR set to: 0
 14883                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 14884  004C20  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 14885  004C22  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 14886                           
 14887                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 14888  004C24  0E02               	movlw	2
 14889  004C26  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 14890                           
 14891                           ; BSR set to: 0
 14892                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14893  004C28  C04F  F0D4         	movff	_vscp_probe_address,_vscp_omsg+5
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;vscp_firmware.c: 216: vscp_sendEvent();
 14897  004C2C  EC84  F02D         	call	_vscp_sendEvent	;wreg free
 14898                           
 14899                           ; BSR set to: 0
 14900                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 14901  004C30  0E01               	movlw	1
 14902  004C32  6E4E               	movwf	_vscp_node_substate,c
 14903  004C34                     l9632:
 14904                           
 14905                           ; BSR set to: 0
 14906                           ;vscp_firmware.c: 219: vscp_timer = 0;
 14907  004C34  6BB6               	clrf	_vscp_timer& (0+255),b	;volatile
 14908  004C36  6BB7               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14909                           
 14910                           ;vscp_firmware.c: 221: }
 14911  004C38  D048               	goto	l1046
 14912  004C3A                     l9634:
 14913                           
 14914                           ;vscp_firmware.c: 222: else {
 14915                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 14916  004C3A  0E04               	movlw	4
 14917  004C3C  0100               	movlb	0	; () banked
 14918  004C3E  6FC0               	movwf	_vscp_node_state& (0+255),b
 14919                           
 14920                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 14921  004C40  0E81               	movlw	129
 14922  004C42  6FCF               	movwf	_vscp_omsg& (0+255),b
 14923                           
 14924                           ; BSR set to: 0
 14925                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 14926  004C44  69D4               	setf	(_vscp_omsg+5)& (0+255),b
 14927                           
 14928                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 14929  004C46  0E07               	movlw	7
 14930  004C48  6FD0               	movwf	(_vscp_omsg+1)& (0+255),b
 14931                           
 14932                           ; BSR set to: 0
 14933                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 14934  004C4A  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 14935  004C4C  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 14936                           
 14937                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 14938  004C4E  0E03               	movlw	3
 14939  004C50  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 14940                           
 14941                           ; BSR set to: 0
 14942                           ;vscp_firmware.c: 235: vscp_sendEvent();
 14943  004C52  EC84  F02D         	call	_vscp_sendEvent	;wreg free
 14944  004C56  D039               	goto	l1046
 14945  004C58                     l1047:
 14946                           
 14947                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 14948  004C58  0100               	movlb	0	; () banked
 14949  004C5A  AFC1               	btfss	_vscp_imsg& (0+255),7,b
 14950  004C5C  D00F               	goto	l9658
 14951                           
 14952                           ; BSR set to: 0
 14953                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 14954                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 14955  004C5E  51C4               	movf	(_vscp_imsg+3)& (0+255),w,b
 14956  004C60  11C3               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14957  004C62  E133               	bnz	l1046
 14958                           
 14959                           ; BSR set to: 0
 14960  004C64  51C5               	movf	(_vscp_imsg+4)& (0+255),w,b
 14961  004C66  0A03               	xorlw	3
 14962  004C68  E130               	bnz	l1046
 14963                           
 14964                           ; BSR set to: 0
 14965                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 14966  004C6A  664F               	tstfsz	_vscp_probe_address,c
 14967  004C6C  D003               	goto	l9652
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 14971  004C6E  0E02               	movlw	2
 14972  004C70  6FC0               	movwf	_vscp_node_state& (0+255),b
 14973  004C72  D7E0               	goto	l9632
 14974  004C74                     l9652:
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;vscp_firmware.c: 257: else {
 14978                           ;vscp_firmware.c: 260: vscp_probe_address++;
 14979  004C74  2A4F               	incf	_vscp_probe_address,f,c
 14980                           
 14981                           ; BSR set to: 0
 14982                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 14983  004C76  6A4E               	clrf	_vscp_node_substate,c
 14984  004C78                     l9656:
 14985                           
 14986                           ; BSR set to: 0
 14987                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 14988  004C78  6A50               	clrf	_vscp_probe_cnt,c
 14989  004C7A  D027               	goto	l1046
 14990  004C7C                     l9658:
 14991                           
 14992                           ; BSR set to: 0
 14993                           ;vscp_firmware.c: 267: else {
 14994                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 14995  004C7C  0EE9               	movlw	233
 14996  004C7E  5DB6               	subwf	_vscp_timer& (0+255),w,b	;volatile
 14997  004C80  0E03               	movlw	3
 14998  004C82  59B7               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 14999  004C84  E322               	bnc	l1046
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15003  004C86  2A50               	incf	_vscp_probe_cnt,f,c
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15007  004C88  0E02               	movlw	2
 15008  004C8A  6450               	cpfsgt	_vscp_probe_cnt,c
 15009  004C8C  D016               	goto	l1054
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15013  004C8E  664F               	tstfsz	_vscp_probe_address,c
 15014  004C90  D005               	goto	l1055
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15018  004C92  2A4F               	incf	_vscp_probe_address,f,c
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15022  004C94  6A4E               	clrf	_vscp_node_substate,c
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15026  004C96  6BB6               	clrf	_vscp_timer& (0+255),b	;volatile
 15027  004C98  6BB7               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15028  004C9A  D7EE               	goto	l9656
 15029  004C9C                     l1055:
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;vscp_firmware.c: 285: else {
 15033                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15034  004C9C  C04F  F0BF         	movff	_vscp_probe_address,_vscp_nickname
 15035                           
 15036                           ; BSR set to: 0
 15037                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15038  004CA0  0E03               	movlw	3
 15039  004CA2  6FC0               	movwf	_vscp_node_state& (0+255),b
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15043  004CA4  6A4E               	clrf	_vscp_node_substate,c
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15047  004CA6  51BF               	movf	_vscp_nickname& (0+255),w,b
 15048  004CA8  ECC4  F02E         	call	_vscp_writeNicknamePermanent
 15049                           
 15050                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15051  004CAC  0E40               	movlw	64
 15052  004CAE  ECBB  F02E         	call	_vscp_setSegmentCRC
 15053                           
 15054                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15055  004CB2  6A50               	clrf	_vscp_probe_cnt,c
 15056                           
 15057                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15058  004CB4  EC16  F02E         	call	_vscp_goActiveState	;wreg free
 15059  004CB8  D008               	goto	l1046
 15060  004CBA                     l1054:
 15061                           
 15062                           ;vscp_firmware.c: 300: else {
 15063                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15064  004CBA  6A4E               	clrf	_vscp_node_substate,c
 15065  004CBC  D006               	goto	l1046
 15066  004CBE                     l9688:
 15067  004CBE  504E               	movf	_vscp_node_substate,w,c
 15068                           
 15069                           ; Switch size 1, requested type "speed"
 15070                           ; Number of cases is 3, Range of values is 0 to 2
 15071                           ; switch strategies available:
 15072                           ; Name         Instructions Cycles
 15073                           ; simple_byte           10     6 (average)
 15074                           ;	Chosen strategy is simple_byte
 15075  004CC0  E0A9               	bz	l9618
 15076  004CC2  0A01               	xorlw	1	; case 1
 15077  004CC4  E0C9               	bz	l1047
 15078  004CC6  0A03               	xorlw	3	; case 2
 15079  004CC8  E1F8               	bnz	l1054
 15080  004CCA                     l1046:
 15081                           
 15082                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15083  004CCA  0100               	movlb	0	; () banked
 15084  004CCC  6BC1               	clrf	_vscp_imsg& (0+255),b
 15085                           
 15086                           ; BSR set to: 0
 15087  004CCE  0012               	return	
 15088  004CD0                     __end_of_vscp_handleProbeState:
 15089                           	opt stack 0
 15090                           tblptru	equ	0xFF8
 15091                           tblptrh	equ	0xFF7
 15092                           tblptrl	equ	0xFF6
 15093                           tablat	equ	0xFF5
 15094                           prodh	equ	0xFF4
 15095                           prodl	equ	0xFF3
 15096                           postinc0	equ	0xFEE
 15097                           wreg	equ	0xFE8
 15098                           postdec1	equ	0xFE5
 15099                           fsr1h	equ	0xFE2
 15100                           fsr1l	equ	0xFE1
 15101                           indf2	equ	0xFDF
 15102                           postinc2	equ	0xFDE
 15103                           postdec2	equ	0xFDD
 15104                           fsr2h	equ	0xFDA
 15105                           fsr2l	equ	0xFD9
 15106                           status	equ	0xFD8
 15107                           
 15108 ;; *************** function _vscp_goActiveState *****************
 15109 ;; Defined at:
 15110 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15111 ;; Parameters:    Size  Location     Type
 15112 ;;		None
 15113 ;; Auto vars:     Size  Location     Type
 15114 ;;		None
 15115 ;; Return value:  Size  Location     Type
 15116 ;;		None               void
 15117 ;; Registers used:
 15118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15119 ;; Tracked objects:
 15120 ;;		On entry : 0/0
 15121 ;;		On exit  : F/0
 15122 ;;		Unchanged: 0/0
 15123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15124 ;;      Params:         0       0       0       0       0       0       0
 15125 ;;      Locals:         0       0       0       0       0       0       0
 15126 ;;      Temps:          0       0       0       0       0       0       0
 15127 ;;      Totals:         0       0       0       0       0       0       0
 15128 ;;Total ram usage:        0 bytes
 15129 ;; Hardware stack levels used:    1
 15130 ;; Hardware stack levels required when called:    7
 15131 ;; This function calls:
 15132 ;;		_vscp_sendEvent
 15133 ;; This function is called by:
 15134 ;;		_main
 15135 ;;		_vscp_handleProbeState
 15136 ;; This function uses a non-reentrant model
 15137 ;;
 15138                           
 15139                           	psect	text66
 15140  005C2C                     __ptext66:
 15141                           	opt stack 0
 15142  005C2C                     _vscp_goActiveState:
 15143                           	opt stack 22
 15144                           
 15145                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15146                           
 15147                           ; BSR set to: 0
 15148                           ;incstack = 0
 15149                           ;incstack = 0
 15150  005C2C  0E81               	movlw	129
 15151  005C2E  0100               	movlb	0	; () banked
 15152  005C30  6FCF               	movwf	_vscp_omsg& (0+255),b
 15153                           
 15154                           ; BSR set to: 0
 15155                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15156  005C32  6BD0               	clrf	(_vscp_omsg+1)& (0+255),b
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15160  005C34  6BD1               	clrf	(_vscp_omsg+2)& (0+255),b
 15161  005C36  6BD2               	clrf	(_vscp_omsg+3)& (0+255),b
 15162                           
 15163                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15164  005C38  0E02               	movlw	2
 15165  005C3A  6FD3               	movwf	(_vscp_omsg+4)& (0+255),b
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15169  005C3C  C0BF  F0D4         	movff	_vscp_nickname,_vscp_omsg+5
 15170                           
 15171                           ; BSR set to: 0
 15172                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15173  005C40  EC84  F02D         	call	_vscp_sendEvent	;wreg free
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15177  005C44  0E01               	movlw	1
 15178  005C46  6E4C               	movwf	_vscp_initledfunc,c
 15179                           
 15180                           ; BSR set to: 0
 15181  005C48  0C01               	retlw	1
 15182  005C4A                     __end_of_vscp_goActiveState:
 15183                           	opt stack 0
 15184                           tblptru	equ	0xFF8
 15185                           tblptrh	equ	0xFF7
 15186                           tblptrl	equ	0xFF6
 15187                           tablat	equ	0xFF5
 15188                           prodh	equ	0xFF4
 15189                           prodl	equ	0xFF3
 15190                           postinc0	equ	0xFEE
 15191                           wreg	equ	0xFE8
 15192                           postdec1	equ	0xFE5
 15193                           fsr1h	equ	0xFE2
 15194                           fsr1l	equ	0xFE1
 15195                           indf2	equ	0xFDF
 15196                           postinc2	equ	0xFDE
 15197                           postdec2	equ	0xFDD
 15198                           fsr2h	equ	0xFDA
 15199                           fsr2l	equ	0xFD9
 15200                           status	equ	0xFD8
 15201                           
 15202 ;; *************** function _vscp_sendEvent *****************
 15203 ;; Defined at:
 15204 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;  rv              1   66[COMRAM] unsigned char 
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      unsigned char 
 15211 ;; Registers used:
 15212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : F/0
 15215 ;;		On exit  : F/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15218 ;;      Params:         0       0       0       0       0       0       0
 15219 ;;      Locals:         1       0       0       0       0       0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0
 15221 ;;      Totals:         1       0       0       0       0       0       0
 15222 ;;Total ram usage:        1 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    6
 15225 ;; This function calls:
 15226 ;;		_sendVSCPFrame
 15227 ;; This function is called by:
 15228 ;;		_doWork
 15229 ;;		_doOneSecondWork
 15230 ;;		_sendTempEvent
 15231 ;;		_vscp_handleProbeState
 15232 ;;		_vscp_goActiveState
 15233 ;;		_vscp_sendHeartBeat
 15234 ;;		_vscp_newNodeOnline
 15235 ;;		_vscp_handleProtocolEvent
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           	psect	text67
 15240  005B08                     __ptext67:
 15241                           	opt stack 0
 15242  005B08                     _vscp_sendEvent:
 15243                           	opt stack 23
 15244                           
 15245                           ; BSR set to: 0
 15246                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15247                           
 15248                           ; BSR set to: 0
 15249                           ;incstack = 0
 15250                           ;incstack = 0
 15251  005B08  C0D1  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15252  005B0C  C0D2  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15253  005B10  C0D3  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15254  005B14  C0BF  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15255  005B18  C0D0  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15256  005B1C  51CF               	movf	_vscp_omsg& (0+255),w,b
 15257  005B1E  0B0F               	andlw	15
 15258  005B20  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15259  005B22  0ED4               	movlw	low (_vscp_omsg+5)
 15260  005B24  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15261  005B26  EC1F  F027         	call	_sendVSCPFrame	;wreg free
 15262  005B2A  6E43               	movwf	vscp_sendEvent@rv,c
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;vscp_firmware.c: 1298: }
 15266                           ;vscp_firmware.c: 1300: return rv;
 15267  005B2C  5043               	movf	vscp_sendEvent@rv,w,c
 15268                           
 15269                           ; BSR set to: 0
 15270  005B2E  0012               	return	
 15271  005B30                     __end_of_vscp_sendEvent:
 15272                           	opt stack 0
 15273                           tblptru	equ	0xFF8
 15274                           tblptrh	equ	0xFF7
 15275                           tblptrl	equ	0xFF6
 15276                           tablat	equ	0xFF5
 15277                           prodh	equ	0xFF4
 15278                           prodl	equ	0xFF3
 15279                           postinc0	equ	0xFEE
 15280                           wreg	equ	0xFE8
 15281                           postdec1	equ	0xFE5
 15282                           fsr1h	equ	0xFE2
 15283                           fsr1l	equ	0xFE1
 15284                           indf2	equ	0xFDF
 15285                           postinc2	equ	0xFDE
 15286                           postdec2	equ	0xFDD
 15287                           fsr2h	equ	0xFDA
 15288                           fsr2l	equ	0xFD9
 15289                           status	equ	0xFD8
 15290                           
 15291 ;; *************** function _sendVSCPFrame *****************
 15292 ;; Defined at:
 15293 ;;		line 2850 in file "../main.c"
 15294 ;; Parameters:    Size  Location     Type
 15295 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15296 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15297 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15298 ;;  priority        1    4[BANK0 ] unsigned char 
 15299 ;;  size            1    5[BANK0 ] unsigned char 
 15300 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15301 ;;		 -> vscp_omsg(13), 
 15302 ;; Auto vars:     Size  Location     Type
 15303 ;;  id              4   27[BANK0 ] unsigned long 
 15304 ;; Return value:  Size  Location     Type
 15305 ;;                  1    wreg      unsigned char 
 15306 ;; Registers used:
 15307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15308 ;; Tracked objects:
 15309 ;;		On entry : F/0
 15310 ;;		On exit  : F/0
 15311 ;;		Unchanged: 0/0
 15312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15313 ;;      Params:         0       7       0       0       0       0       0
 15314 ;;      Locals:         0       4       0       0       0       0       0
 15315 ;;      Temps:          0      20       0       0       0       0       0
 15316 ;;      Totals:         0      31       0       0       0       0       0
 15317 ;;Total ram usage:       31 bytes
 15318 ;; Hardware stack levels used:    1
 15319 ;; Hardware stack levels required when called:    5
 15320 ;; This function calls:
 15321 ;;		_sendCANFrame
 15322 ;; This function is called by:
 15323 ;;		_vscp_sendEvent
 15324 ;; This function uses a non-reentrant model
 15325 ;;
 15326                           
 15327                           	psect	text68
 15328  004E3E                     __ptext68:
 15329                           	opt stack 0
 15330  004E3E                     _sendVSCPFrame:
 15331                           	opt stack 23
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;main.c: 2851: uint32_t id = ((uint32_t) priority << 26) |
 15335                           ;main.c: 2852: ((uint32_t) vscpclass << 16) |
 15336                           ;main.c: 2853: ((uint32_t) vscptype << 8) |
 15337                           ;main.c: 2854: nodeid;
 15338                           
 15339                           ; BSR set to: 0
 15340                           ;incstack = 0
 15341                           ;incstack = 0
 15342  004E3E  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15343  004E42  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15344  004E44  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15345  004E46  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15346  004E48  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15347  004E4C  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15348  004E50  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15349  004E54  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15350  004E56  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15351  004E58  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15352  004E5A  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15353  004E5C  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15354  004E5E  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15355  004E60  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15356  004E62  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15357  004E66  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15358  004E6A  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15359  004E6C  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15360  004E6E  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15361  004E72  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15362  004E74  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15363  004E76  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15364  004E78  0E1A               	movlw	26
 15365  004E7A                     u9025:
 15366  004E7A  90D8               	bcf	status,0,c
 15367  004E7C  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15368  004E7E  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15369  004E80  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15370  004E82  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15371  004E84  2EE8               	decfsz	wreg,f,c
 15372  004E86  D7F9               	goto	u9025
 15373  004E88  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15374  004E8A  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15375  004E8C  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15376  004E8E  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15377  004E90  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15378  004E92  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15379  004E94  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15380  004E96  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15381  004E98  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15382  004E9A  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15383  004E9C  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15384  004E9E  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15385  004EA0  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15386  004EA2  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15387  004EA4  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15388  004EA6  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15389  004EA8  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15390  004EAA  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15391  004EAC  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15392  004EAE  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15393  004EB0  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15394  004EB2  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15395  004EB4  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15396  004EB6  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15397  004EB8  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15398  004EBA  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15399  004EBC  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15400  004EBE  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15401  004EC0  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15402  004EC2  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15403  004EC4  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15404  004EC6  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15405  004EC8  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15406                           
 15407                           ; BSR set to: 0
 15408                           ;main.c: 2858: vscp_errorcnt++;
 15409  004ECA  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15410  004ECE  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15411  004ED2  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15412  004ED6  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15413  004EDA  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15414  004EDE  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15415  004EE2  EC05  F02D         	call	_sendCANFrame	;wreg free
 15416  004EE6  0900               	iorlw	0
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;main.c: 2859: return 0;
 15420  004EE8  0E00               	movlw	0
 15421  004EEA  A4D8               	btfss	status,2,c
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;main.c: 2860: }
 15425                           ;main.c: 2862: return 1;
 15426  004EEC  0E01               	movlw	1
 15427                           
 15428                           ; BSR set to: 0
 15429  004EEE  0012               	return	
 15430  004EF0                     __end_of_sendVSCPFrame:
 15431                           	opt stack 0
 15432                           tblptru	equ	0xFF8
 15433                           tblptrh	equ	0xFF7
 15434                           tblptrl	equ	0xFF6
 15435                           tablat	equ	0xFF5
 15436                           prodh	equ	0xFF4
 15437                           prodl	equ	0xFF3
 15438                           postinc0	equ	0xFEE
 15439                           wreg	equ	0xFE8
 15440                           postdec1	equ	0xFE5
 15441                           fsr1h	equ	0xFE2
 15442                           fsr1l	equ	0xFE1
 15443                           indf2	equ	0xFDF
 15444                           postinc2	equ	0xFDE
 15445                           postdec2	equ	0xFDD
 15446                           fsr2h	equ	0xFDA
 15447                           fsr2l	equ	0xFD9
 15448                           status	equ	0xFD8
 15449                           
 15450 ;; *************** function _sendCANFrame *****************
 15451 ;; Defined at:
 15452 ;;		line 2897 in file "../main.c"
 15453 ;; Parameters:    Size  Location     Type
 15454 ;;  id              4   59[COMRAM] unsigned long 
 15455 ;;  dlc             1   63[COMRAM] unsigned char 
 15456 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15457 ;;		 -> vscp_omsg(13), 
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;  rv              1    0        unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;                  1    wreg      unsigned char 
 15462 ;; Registers used:
 15463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : F/0
 15466 ;;		On exit  : F/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15469 ;;      Params:         6       0       0       0       0       0       0
 15470 ;;      Locals:         1       0       0       0       0       0       0
 15471 ;;      Temps:          0       0       0       0       0       0       0
 15472 ;;      Totals:         7       0       0       0       0       0       0
 15473 ;;Total ram usage:        7 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    4
 15476 ;; This function calls:
 15477 ;;		_ECANSendMessage
 15478 ;; This function is called by:
 15479 ;;		_sendVSCPFrame
 15480 ;; This function uses a non-reentrant model
 15481 ;;
 15482                           
 15483                           	psect	text69
 15484  005A0A                     __ptext69:
 15485                           	opt stack 0
 15486  005A0A                     _sendCANFrame:
 15487                           	opt stack 23
 15488                           
 15489                           ; BSR set to: 0
 15490                           ;main.c: 2900: sendTimer = 0;
 15491                           
 15492                           ; BSR set to: 0
 15493                           ;incstack = 0
 15494                           ;incstack = 0
 15495  005A0A  6BBC               	clrf	_sendTimer& (0+255),b	;volatile
 15496  005A0C                     l11088:
 15497                           
 15498                           ;main.c: 2902: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15499  005A0C  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15500  005A10  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15501  005A14  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15502  005A18  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15503  005A1C  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15504  005A20  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15505  005A24  0E20               	movlw	32
 15506  005A26  6E1E               	movwf	?_ECANSendMessage+6,c
 15507  005A28  ECC1  F020         	call	_ECANSendMessage	;wreg free
 15508  005A2C  0900               	iorlw	0
 15509  005A2E  E0EE               	bz	l11088
 15510                           
 15511                           ;main.c: 2905: }
 15512                           ;main.c: 2906: }
 15513                           ;main.c: 2908: vscp_omsg.flags = 0;
 15514                           
 15515                           ;main.c: 2904: break;
 15516  005A30  0100               	movlb	0	; () banked
 15517  005A32  6BCF               	clrf	_vscp_omsg& (0+255),b
 15518                           
 15519                           ; BSR set to: 0
 15520                           
 15521                           ; BSR set to: 0
 15522                           ;main.c: 2910: return rv;
 15523  005A34  0C01               	retlw	1
 15524  005A36                     __end_of_sendCANFrame:
 15525                           	opt stack 0
 15526                           tblptru	equ	0xFF8
 15527                           tblptrh	equ	0xFF7
 15528                           tblptrl	equ	0xFF6
 15529                           tablat	equ	0xFF5
 15530                           prodh	equ	0xFF4
 15531                           prodl	equ	0xFF3
 15532                           postinc0	equ	0xFEE
 15533                           wreg	equ	0xFE8
 15534                           postdec1	equ	0xFE5
 15535                           fsr1h	equ	0xFE2
 15536                           fsr1l	equ	0xFE1
 15537                           indf2	equ	0xFDF
 15538                           postinc2	equ	0xFDE
 15539                           postdec2	equ	0xFDD
 15540                           fsr2h	equ	0xFDA
 15541                           fsr2l	equ	0xFD9
 15542                           status	equ	0xFD8
 15543                           
 15544 ;; *************** function _ECANSendMessage *****************
 15545 ;; Defined at:
 15546 ;;		line 617 in file "../ECAN.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;  id              4   23[COMRAM] unsigned long 
 15549 ;;  data            1   27[COMRAM] PTR unsigned char 
 15550 ;;		 -> vscp_omsg(13), 
 15551 ;;  dataLen         1   28[COMRAM] unsigned char 
 15552 ;;  msgFlags        1   29[COMRAM] enum E16306
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15555 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15556 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15557 ;;		 -> B0CON(1), 
 15558 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15559 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15560 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15561 ;;		 -> B0CON(1), 
 15562 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15563 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15564 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15565 ;;		 -> B0CON(1), 
 15566 ;;  i               1   56[COMRAM] unsigned char 
 15567 ;;  temp            1   55[COMRAM] unsigned char 
 15568 ;;  tempBSEL0       1   52[COMRAM] struct .
 15569 ;;  j               1   51[COMRAM] unsigned char 
 15570 ;;  buffers         1   50[COMRAM] unsigned char 
 15571 ;;  mode            1   49[COMRAM] unsigned char 
 15572 ;; Return value:  Size  Location     Type
 15573 ;;                  1    wreg      enum E15660
 15574 ;; Registers used:
 15575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15576 ;; Tracked objects:
 15577 ;;		On entry : 0/0
 15578 ;;		On exit  : 0/0
 15579 ;;		Unchanged: 0/0
 15580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15581 ;;      Params:         7       0       0       0       0       0       0
 15582 ;;      Locals:        28       0       0       0       0       0       0
 15583 ;;      Temps:          1       0       0       0       0       0       0
 15584 ;;      Totals:        36       0       0       0       0       0       0
 15585 ;;Total ram usage:       36 bytes
 15586 ;; Hardware stack levels used:    1
 15587 ;; Hardware stack levels required when called:    3
 15588 ;; This function calls:
 15589 ;;		__CANIDToRegs
 15590 ;; This function is called by:
 15591 ;;		_sendCANFrame
 15592 ;; This function uses a non-reentrant model
 15593 ;;
 15594                           
 15595                           	psect	text70
 15596  004182                     __ptext70:
 15597                           	opt stack 0
 15598  004182                     _ECANSendMessage:
 15599                           	opt stack 23
 15600                           
 15601                           ;ECAN.c: 619: BYTE mode;
 15602                           ;ECAN.c: 620: BYTE buffers;
 15603                           ;ECAN.c: 628: BYTE i,j;
 15604                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15605                           ;ECAN.c: 630: BYTE* pb[9];
 15606                           ;ECAN.c: 631: BYTE temp;
 15607                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15608                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;incstack = 0
 15612                           ;incstack = 0
 15613  004182  0E0F               	movlw	15	;volatile
 15614  004184  6E21               	movwf	ECANSendMessage@pb+1,c
 15615  004186  0E40               	movlw	64	;volatile
 15616  004188  6E20               	movwf	ECANSendMessage@pb,c
 15617                           
 15618                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15619  00418A  0E0F               	movlw	15	;volatile
 15620  00418C  6E23               	movwf	ECANSendMessage@pb+3,c
 15621  00418E  0E30               	movlw	48	;volatile
 15622  004190  6E22               	movwf	ECANSendMessage@pb+2,c
 15623                           
 15624                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15625  004192  0E0F               	movlw	15	;volatile
 15626  004194  6E25               	movwf	ECANSendMessage@pb+5,c
 15627  004196  0E20               	movlw	32	;volatile
 15628  004198  6E24               	movwf	ECANSendMessage@pb+4,c
 15629                           
 15630                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15631  00419A  0E0E               	movlw	14	;volatile
 15632  00419C  6E27               	movwf	ECANSendMessage@pb+7,c
 15633  00419E  0E20               	movlw	32	;volatile
 15634  0041A0  6E26               	movwf	ECANSendMessage@pb+6,c
 15635                           
 15636                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15637  0041A2  0E0E               	movlw	14	;volatile
 15638  0041A4  6E29               	movwf	ECANSendMessage@pb+9,c
 15639  0041A6  0E30               	movlw	48	;volatile
 15640  0041A8  6E28               	movwf	ECANSendMessage@pb+8,c
 15641                           
 15642                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15643  0041AA  0E0E               	movlw	14	;volatile
 15644  0041AC  6E2B               	movwf	ECANSendMessage@pb+11,c
 15645  0041AE  0E40               	movlw	64	;volatile
 15646  0041B0  6E2A               	movwf	ECANSendMessage@pb+10,c
 15647                           
 15648                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15649  0041B2  0E0E               	movlw	14	;volatile
 15650  0041B4  6E2D               	movwf	ECANSendMessage@pb+13,c
 15651  0041B6  0E50               	movlw	80	;volatile
 15652  0041B8  6E2C               	movwf	ECANSendMessage@pb+12,c
 15653                           
 15654                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15655  0041BA  0E0E               	movlw	14	;volatile
 15656  0041BC  6E2F               	movwf	ECANSendMessage@pb+15,c
 15657  0041BE  0E60               	movlw	96	;volatile
 15658  0041C0  6E2E               	movwf	ECANSendMessage@pb+14,c
 15659                           
 15660                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15661  0041C2  0E0E               	movlw	14	;volatile
 15662  0041C4  6E31               	movwf	ECANSendMessage@pb+17,c
 15663  0041C6  0E70               	movlw	112	;volatile
 15664  0041C8  6E30               	movwf	ECANSendMessage@pb+16,c
 15665                           
 15666                           ; BSR set to: 14
 15667                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15668  0041CA  5077               	movf	3959,w,c	;volatile
 15669  0041CC  0BC0               	andlw	192
 15670  0041CE  6E32               	movwf	ECANSendMessage@mode,c
 15671                           
 15672                           ; BSR set to: 14
 15673                           ;ECAN.c: 660: if ( mode == 0x00 )
 15674  0041D0  6632               	tstfsz	ECANSendMessage@mode,c
 15675  0041D2  D002               	goto	l11104
 15676                           
 15677                           ; BSR set to: 14
 15678                           ;ECAN.c: 661: buffers = 2;
 15679  0041D4  0E02               	movlw	2
 15680  0041D6  D001               	goto	L33
 15681  0041D8                     l11104:
 15682                           
 15683                           ; BSR set to: 14
 15684                           ;ECAN.c: 662: else
 15685                           ;ECAN.c: 663: buffers = 8;
 15686  0041D8  0E08               	movlw	8
 15687  0041DA                     L33:
 15688  0041DA  6E33               	movwf	ECANSendMessage@buffers,c
 15689                           
 15690                           ; BSR set to: 14
 15691                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15692  0041DC  010D               	movlb	13	; () banked
 15693  0041DE  90D8               	bcf	status,0,c
 15694  0041E0  31F8               	rrcf	248,w,b	;volatile
 15695  0041E2  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15696                           
 15697                           ; BSR set to: 13
 15698                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15699  0041E4  6A39               	clrf	ECANSendMessage@i,c
 15700  0041E6  D07B               	goto	l11164
 15701  0041E8                     l11110:
 15702                           
 15703                           ;ECAN.c: 688: {
 15704                           ;ECAN.c: 693: ptr = pb[i];
 15705  0041E8  5039               	movf	ECANSendMessage@i,w,c
 15706  0041EA  0D02               	mullw	2
 15707  0041EC  50F3               	movf	prodl,w,c
 15708  0041EE  0F20               	addlw	low ECANSendMessage@pb
 15709  0041F0  6ED9               	movwf	fsr2l,c
 15710  0041F2  6ADA               	clrf	fsr2h,c
 15711  0041F4  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15712  0041F8  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15713                           
 15714                           ;ECAN.c: 694: tempPtr = ptr;
 15715  0041FC  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15716  004200  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15717                           
 15718                           ;ECAN.c: 702: if ( i > 2 )
 15719  004204  0E02               	movlw	2
 15720  004206  6439               	cpfsgt	ECANSendMessage@i,c
 15721  004208  D004               	goto	l11122
 15722                           
 15723                           ;ECAN.c: 703: {
 15724                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15725  00420A  90D8               	bcf	status,0,c
 15726  00420C  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15727                           
 15728                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15729  00420E  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15730  004210  D065               	goto	l11162
 15731  004212                     l11122:
 15732                           
 15733                           ;ECAN.c: 714: }
 15734                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15735  004212  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15736  004216  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15737  00421A  50DF               	movf	indf2,w,c
 15738  00421C  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15739  00421E  B61F               	btfsc	??_ECANSendMessage,3,c
 15740  004220  D05D               	goto	l11162
 15741                           
 15742                           ;ECAN.c: 721: {
 15743                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15744  004222  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15745  004226  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15746  00422A  0EFC               	movlw	252
 15747  00422C  16DF               	andwf	indf2,f,c
 15748                           
 15749                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15750  00422E  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15751  004232  0E03               	movlw	3
 15752  004234  161F               	andwf	??_ECANSendMessage,f,c
 15753  004236  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15754  00423A  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15755  00423E  501F               	movf	??_ECANSendMessage,w,c
 15756  004240  12DF               	iorwf	indf2,f,c
 15757                           
 15758                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15759  004242  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15760  004244  D004               	goto	l823
 15761                           
 15762                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15763  004246  501D               	movf	ECANSendMessage@dataLen,w,c
 15764  004248  0940               	iorlw	64
 15765  00424A  6E38               	movwf	ECANSendMessage@temp,c
 15766  00424C  D002               	goto	l11132
 15767  00424E                     l823:
 15768                           
 15769                           ;ECAN.c: 729: else
 15770                           ;ECAN.c: 730: temp = dataLen;
 15771  00424E  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15772  004252                     l11132:
 15773                           
 15774                           ;ECAN.c: 732: *(ptr+5) = temp;
 15775  004252  EE20 F005          	lfsr	2,5
 15776  004256  503A               	movf	ECANSendMessage@ptr,w,c
 15777  004258  26D9               	addwf	fsr2l,f,c
 15778  00425A  503B               	movf	ECANSendMessage@ptr+1,w,c
 15779  00425C  22DA               	addwfc	fsr2h,f,c
 15780  00425E  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15781                           
 15782                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15783  004262  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15784  004264  D003               	goto	l825
 15785                           
 15786                           ;ECAN.c: 736: temp = 1;
 15787  004266  0E01               	movlw	1
 15788  004268  6E38               	movwf	ECANSendMessage@temp,c
 15789  00426A  D001               	goto	l11138
 15790  00426C                     l825:
 15791                           
 15792                           ;ECAN.c: 738: else
 15793                           ;ECAN.c: 739: temp = 0;
 15794  00426C  6A38               	clrf	ECANSendMessage@temp,c
 15795  00426E                     l11138:
 15796                           
 15797                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15798  00426E  283A               	incf	ECANSendMessage@ptr,w,c
 15799  004270  6E0E               	movwf	?__CANIDToRegs,c
 15800  004272  0E00               	movlw	0
 15801  004274  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15802  004276  6E0F               	movwf	?__CANIDToRegs+1,c
 15803  004278  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15804  00427C  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15805  004280  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15806  004284  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15807  004288  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15808  00428C  EC26  F022         	call	__CANIDToRegs	;wreg free
 15809                           
 15810                           ;ECAN.c: 745: ptr += 6;
 15811  004290  0E06               	movlw	6
 15812  004292  263A               	addwf	ECANSendMessage@ptr,f,c
 15813  004294  0E00               	movlw	0
 15814  004296  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15815                           
 15816                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15817  004298  6A34               	clrf	ECANSendMessage@j,c
 15818  00429A  D00D               	goto	l11152
 15819  00429C                     l11144:
 15820                           
 15821                           ;ECAN.c: 748: *ptr++ = *data++;
 15822  00429C  501C               	movf	ECANSendMessage@data,w,c
 15823  00429E  6ED9               	movwf	fsr2l,c
 15824  0042A0  6ADA               	clrf	fsr2h,c
 15825  0042A2  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15826  0042A6  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15827  0042AA  CFDF FFE7          	movff	indf2,indf1
 15828  0042AE  2A1C               	incf	ECANSendMessage@data,f,c
 15829  0042B0  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15830  0042B2  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15831  0042B4  2A34               	incf	ECANSendMessage@j,f,c
 15832  0042B6                     l11152:
 15833  0042B6  501D               	movf	ECANSendMessage@dataLen,w,c
 15834  0042B8  5C34               	subwf	ECANSendMessage@j,w,c
 15835  0042BA  E3F0               	bnc	l11144
 15836                           
 15837                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15838  0042BC  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15839  0042C0  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15840  0042C4  50DF               	movf	indf2,w,c
 15841  0042C6  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15842  0042C8  B41F               	btfsc	??_ECANSendMessage,2,c
 15843  0042CA  D006               	goto	l11158
 15844                           
 15845                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15846  0042CC  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15847  0042D0  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15848  0042D4  0E00               	movlw	0
 15849  0042D6  86DB               	bsf	plusw2,3,c
 15850  0042D8                     l11158:
 15851                           
 15852                           ;ECAN.c: 755: return TRUE;
 15853  0042D8  0E01               	movlw	1
 15854  0042DA  D005               	goto	l831
 15855  0042DC                     l11162:
 15856  0042DC  2A39               	incf	ECANSendMessage@i,f,c
 15857  0042DE                     l11164:
 15858  0042DE  5033               	movf	ECANSendMessage@buffers,w,c
 15859  0042E0  5C39               	subwf	ECANSendMessage@i,w,c
 15860  0042E2  E382               	bnc	l11110
 15861                           
 15862                           ;ECAN.c: 756: }
 15863                           ;ECAN.c: 757: }
 15864                           ;ECAN.c: 760: return FALSE;
 15865  0042E4  0E00               	movlw	0
 15866  0042E6                     l831:
 15867  0042E6  0012               	return	
 15868  0042E8                     __end_of_ECANSendMessage:
 15869                           	opt stack 0
 15870                           tblptru	equ	0xFF8
 15871                           tblptrh	equ	0xFF7
 15872                           tblptrl	equ	0xFF6
 15873                           tablat	equ	0xFF5
 15874                           prodh	equ	0xFF4
 15875                           prodl	equ	0xFF3
 15876                           postinc0	equ	0xFEE
 15877                           wreg	equ	0xFE8
 15878                           indf1	equ	0xFE7
 15879                           postdec1	equ	0xFE5
 15880                           fsr1h	equ	0xFE2
 15881                           fsr1l	equ	0xFE1
 15882                           indf2	equ	0xFDF
 15883                           postinc2	equ	0xFDE
 15884                           postdec2	equ	0xFDD
 15885                           plusw2	equ	0xFDB
 15886                           fsr2h	equ	0xFDA
 15887                           fsr2l	equ	0xFD9
 15888                           status	equ	0xFD8
 15889                           
 15890 ;; *************** function __CANIDToRegs *****************
 15891 ;; Defined at:
 15892 ;;		line 1099 in file "../ECAN.c"
 15893 ;; Parameters:    Size  Location     Type
 15894 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15895 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15896 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15897 ;;		 -> B0CON(1), 
 15898 ;;  val             4   15[COMRAM] unsigned long 
 15899 ;;  type            1   19[COMRAM] unsigned char 
 15900 ;; Auto vars:     Size  Location     Type
 15901 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15902 ;;		 -> _CANIDToRegs@val(4), 
 15903 ;; Return value:  Size  Location     Type
 15904 ;;		None               void
 15905 ;; Registers used:
 15906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15907 ;; Tracked objects:
 15908 ;;		On entry : 0/D
 15909 ;;		On exit  : 0/0
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15912 ;;      Params:         7       0       0       0       0       0       0
 15913 ;;      Locals:         1       0       0       0       0       0       0
 15914 ;;      Temps:          2       0       0       0       0       0       0
 15915 ;;      Totals:        10       0       0       0       0       0       0
 15916 ;;Total ram usage:       10 bytes
 15917 ;; Hardware stack levels used:    1
 15918 ;; Hardware stack levels required when called:    2
 15919 ;; This function calls:
 15920 ;;		Nothing
 15921 ;; This function is called by:
 15922 ;;		_ECANSendMessage
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           	psect	text71
 15927  00444C                     __ptext71:
 15928                           	opt stack 0
 15929  00444C                     __CANIDToRegs:
 15930                           	opt stack 23
 15931                           
 15932                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15933                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15934                           
 15935                           ;incstack = 0
 15936                           ;incstack = 0
 15937  00444C  0E10               	movlw	low __CANIDToRegs@val
 15938  00444E  6E17               	movwf	__CANIDToRegs@Value,c
 15939                           
 15940                           ;ECAN.c: 1104: if ( type == 0 )
 15941  004450  6614               	tstfsz	__CANIDToRegs@type,c
 15942  004452  D037               	goto	l11180
 15943                           
 15944                           ;ECAN.c: 1105: {
 15945                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15946  004454  5017               	movf	__CANIDToRegs@Value,w,c
 15947  004456  6ED9               	movwf	fsr2l,c
 15948  004458  6ADA               	clrf	fsr2h,c
 15949  00445A  50DF               	movf	indf2,w,c
 15950  00445C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15951  00445E  90D8               	bcf	status,0,c
 15952  004460  3215               	rrcf	??__CANIDToRegs,f,c
 15953  004462  90D8               	bcf	status,0,c
 15954  004464  3215               	rrcf	??__CANIDToRegs,f,c
 15955  004466  90D8               	bcf	status,0,c
 15956  004468  3015               	rrcf	??__CANIDToRegs,w,c
 15957  00446A  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15958  00446E  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15959  004472  6EDF               	movwf	indf2,c
 15960                           
 15961                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15962  004474  5017               	movf	__CANIDToRegs@Value,w,c
 15963  004476  6ED9               	movwf	fsr2l,c
 15964  004478  6ADA               	clrf	fsr2h,c
 15965  00447A  2AD9               	incf	fsr2l,f,c
 15966  00447C  6ADA               	clrf	fsr2h,c
 15967  00447E  50DF               	movf	indf2,w,c
 15968  004480  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15969  004482  0E05               	movlw	5
 15970  004484  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15971  004486                     u9155:
 15972  004486  90D8               	bcf	status,0,c
 15973  004488  3615               	rlcf	??__CANIDToRegs,f,c
 15974  00448A  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15975  00448C  D7FC               	goto	u9155
 15976  00448E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15977  004492  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15978  004496  5015               	movf	??__CANIDToRegs,w,c
 15979  004498  12DF               	iorwf	indf2,f,c
 15980                           
 15981                           ;ECAN.c: 1109: ptr++;
 15982  00449A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 15983  00449C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 15984                           
 15985                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 15986  00449E  5017               	movf	__CANIDToRegs@Value,w,c
 15987  0044A0  6ED9               	movwf	fsr2l,c
 15988  0044A2  6ADA               	clrf	fsr2h,c
 15989  0044A4  50DF               	movf	indf2,w,c
 15990  0044A6  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15991  0044A8  0E05               	movlw	5
 15992  0044AA  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15993  0044AC                     u9165:
 15994  0044AC  90D8               	bcf	status,0,c
 15995  0044AE  3615               	rlcf	??__CANIDToRegs,f,c
 15996  0044B0  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 15997  0044B2  D7FC               	goto	u9165
 15998  0044B4  5015               	movf	??__CANIDToRegs,w,c
 15999  0044B6  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16000  0044BA  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16001  0044BE  6EDF               	movwf	indf2,c
 16002                           
 16003                           ;ECAN.c: 1111: }
 16004  0044C0  D06C               	goto	l885
 16005  0044C2                     l11180:
 16006                           
 16007                           ;ECAN.c: 1112: else
 16008                           ;ECAN.c: 1113: {
 16009                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16010  0044C2  5017               	movf	__CANIDToRegs@Value,w,c
 16011  0044C4  6ED9               	movwf	fsr2l,c
 16012  0044C6  6ADA               	clrf	fsr2h,c
 16013  0044C8  0E02               	movlw	2
 16014  0044CA  26D9               	addwf	fsr2l,f,c
 16015  0044CC  6ADA               	clrf	fsr2h,c
 16016  0044CE  50DF               	movf	indf2,w,c
 16017  0044D0  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16018  0044D2  0E05               	movlw	5
 16019  0044D4  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16020  0044D6                     u9175:
 16021  0044D6  90D8               	bcf	status,0,c
 16022  0044D8  3215               	rrcf	??__CANIDToRegs,f,c
 16023  0044DA  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16024  0044DC  D7FC               	goto	u9175
 16025  0044DE  5015               	movf	??__CANIDToRegs,w,c
 16026  0044E0  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16027  0044E4  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16028  0044E8  6EDF               	movwf	indf2,c
 16029                           
 16030                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16031  0044EA  5017               	movf	__CANIDToRegs@Value,w,c
 16032  0044EC  6ED9               	movwf	fsr2l,c
 16033  0044EE  6ADA               	clrf	fsr2h,c
 16034  0044F0  0E03               	movlw	3
 16035  0044F2  26D9               	addwf	fsr2l,f,c
 16036  0044F4  6ADA               	clrf	fsr2h,c
 16037  0044F6  50DF               	movf	indf2,w,c
 16038  0044F8  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16039  0044FA  90D8               	bcf	status,0,c
 16040  0044FC  3615               	rlcf	??__CANIDToRegs,f,c
 16041  0044FE  90D8               	bcf	status,0,c
 16042  004500  3615               	rlcf	??__CANIDToRegs,f,c
 16043  004502  90D8               	bcf	status,0,c
 16044  004504  3615               	rlcf	??__CANIDToRegs,f,c
 16045  004506  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16046  00450A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16047  00450E  5015               	movf	??__CANIDToRegs,w,c
 16048  004510  12DF               	iorwf	indf2,f,c
 16049                           
 16050                           ;ECAN.c: 1117: ptr++;
 16051  004512  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16052  004514  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16053                           
 16054                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16055  004516  5017               	movf	__CANIDToRegs@Value,w,c
 16056  004518  6ED9               	movwf	fsr2l,c
 16057  00451A  6ADA               	clrf	fsr2h,c
 16058  00451C  0E02               	movlw	2
 16059  00451E  26D9               	addwf	fsr2l,f,c
 16060  004520  6ADA               	clrf	fsr2h,c
 16061  004522  50DF               	movf	indf2,w,c
 16062  004524  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16063  004526  90D8               	bcf	status,0,c
 16064  004528  3615               	rlcf	??__CANIDToRegs,f,c
 16065  00452A  90D8               	bcf	status,0,c
 16066  00452C  3615               	rlcf	??__CANIDToRegs,f,c
 16067  00452E  90D8               	bcf	status,0,c
 16068  004530  3415               	rlcf	??__CANIDToRegs,w,c
 16069  004532  0BE0               	andlw	224
 16070  004534  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16071  004538  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16072  00453C  6EDF               	movwf	indf2,c
 16073                           
 16074                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16075  00453E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16076  004542  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16077  004546  0E00               	movlw	0
 16078  004548  86DB               	bsf	plusw2,3,c
 16079                           
 16080                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16081  00454A  5017               	movf	__CANIDToRegs@Value,w,c
 16082  00454C  6ED9               	movwf	fsr2l,c
 16083  00454E  6ADA               	clrf	fsr2h,c
 16084  004550  0E02               	movlw	2
 16085  004552  26D9               	addwf	fsr2l,f,c
 16086  004554  6ADA               	clrf	fsr2h,c
 16087  004556  50DF               	movf	indf2,w,c
 16088  004558  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16089  00455A  0E03               	movlw	3
 16090  00455C  1615               	andwf	??__CANIDToRegs,f,c
 16091  00455E  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16092  004562  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16093  004566  5015               	movf	??__CANIDToRegs,w,c
 16094  004568  12DF               	iorwf	indf2,f,c
 16095                           
 16096                           ;ECAN.c: 1122: ptr++;
 16097  00456A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16098  00456C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16099                           
 16100                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16101  00456E  5017               	movf	__CANIDToRegs@Value,w,c
 16102  004570  6ED9               	movwf	fsr2l,c
 16103  004572  6ADA               	clrf	fsr2h,c
 16104  004574  2AD9               	incf	fsr2l,f,c
 16105  004576  6ADA               	clrf	fsr2h,c
 16106  004578  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16107  00457C  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16108  004580  CFDF FFE7          	movff	indf2,indf1
 16109                           
 16110                           ;ECAN.c: 1124: ptr++;
 16111  004584  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16112  004586  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16113                           
 16114                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16115  004588  5017               	movf	__CANIDToRegs@Value,w,c
 16116  00458A  6ED9               	movwf	fsr2l,c
 16117  00458C  6ADA               	clrf	fsr2h,c
 16118  00458E  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16119  004592  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16120  004596  CFDF FFE7          	movff	indf2,indf1
 16121  00459A                     l885:
 16122  00459A  0012               	return	
 16123  00459C                     __end_of__CANIDToRegs:
 16124                           	opt stack 0
 16125                           tblptru	equ	0xFF8
 16126                           tblptrh	equ	0xFF7
 16127                           tblptrl	equ	0xFF6
 16128                           tablat	equ	0xFF5
 16129                           prodh	equ	0xFF4
 16130                           prodl	equ	0xFF3
 16131                           postinc0	equ	0xFEE
 16132                           wreg	equ	0xFE8
 16133                           indf1	equ	0xFE7
 16134                           postdec1	equ	0xFE5
 16135                           fsr1h	equ	0xFE2
 16136                           fsr1l	equ	0xFE1
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           plusw2	equ	0xFDB
 16141                           fsr2h	equ	0xFDA
 16142                           fsr2l	equ	0xFD9
 16143                           status	equ	0xFD8
 16144                           
 16145 ;; *************** function _vscp_getEvent *****************
 16146 ;; Defined at:
 16147 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;		None
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;  rv              1   49[COMRAM] unsigned char 
 16152 ;; Return value:  Size  Location     Type
 16153 ;;                  1    wreg      unsigned char 
 16154 ;; Registers used:
 16155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16156 ;; Tracked objects:
 16157 ;;		On entry : F/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16161 ;;      Params:         0       0       0       0       0       0       0
 16162 ;;      Locals:         1       0       0       0       0       0       0
 16163 ;;      Temps:          0       0       0       0       0       0       0
 16164 ;;      Totals:         1       0       0       0       0       0       0
 16165 ;;Total ram usage:        1 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    6
 16168 ;; This function calls:
 16169 ;;		_getVSCPFrame
 16170 ;; This function is called by:
 16171 ;;		_main
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           	psect	text72
 16176  005AB6                     __ptext72:
 16177                           	opt stack 0
 16178  005AB6                     _vscp_getEvent:
 16179                           	opt stack 24
 16180                           
 16181                           ; BSR set to: 0
 16182                           ;vscp_firmware.c: 1309: int8_t rv;
 16183                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16184                           
 16185                           ;incstack = 0
 16186                           ;incstack = 0
 16187  005AB6  BFC1               	btfsc	_vscp_imsg& (0+255),7,b
 16188  005AB8  D012               	goto	l1280
 16189                           
 16190                           ; BSR set to: 0
 16191                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16192                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16193                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16194                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16195                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16196                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16197  005ABA  0EC5               	movlw	low (_vscp_imsg+4)
 16198  005ABC  6E24               	movwf	?_getVSCPFrame,c
 16199  005ABE  0EC6               	movlw	low (_vscp_imsg+5)
 16200  005AC0  6E25               	movwf	?_getVSCPFrame+1,c
 16201  005AC2  0EC2               	movlw	low (_vscp_imsg+1)
 16202  005AC4  6E26               	movwf	?_getVSCPFrame+2,c
 16203  005AC6  0EC1               	movlw	low _vscp_imsg
 16204  005AC8  6E27               	movwf	?_getVSCPFrame+3,c
 16205  005ACA  0EC7               	movlw	low (_vscp_imsg+6)
 16206  005ACC  6E28               	movwf	?_getVSCPFrame+4,c
 16207  005ACE  0EC3               	movlw	(_vscp_imsg+2)& (0+255)
 16208  005AD0  ECCB  F029         	call	_getVSCPFrame
 16209  005AD4  6E32               	movwf	vscp_getEvent@rv,c
 16210  005AD6  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16211  005AD8  E002               	bz	l1280
 16212                           
 16213                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16214  005ADA  0100               	movlb	0	; () banked
 16215  005ADC  8FC1               	bsf	_vscp_imsg& (0+255),7,b
 16216  005ADE                     l1280:
 16217  005ADE  0012               	return	
 16218  005AE0                     __end_of_vscp_getEvent:
 16219                           	opt stack 0
 16220                           tblptru	equ	0xFF8
 16221                           tblptrh	equ	0xFF7
 16222                           tblptrl	equ	0xFF6
 16223                           tablat	equ	0xFF5
 16224                           prodh	equ	0xFF4
 16225                           prodl	equ	0xFF3
 16226                           postinc0	equ	0xFEE
 16227                           wreg	equ	0xFE8
 16228                           indf1	equ	0xFE7
 16229                           postdec1	equ	0xFE5
 16230                           fsr1h	equ	0xFE2
 16231                           fsr1l	equ	0xFE1
 16232                           indf2	equ	0xFDF
 16233                           postinc2	equ	0xFDE
 16234                           postdec2	equ	0xFDD
 16235                           plusw2	equ	0xFDB
 16236                           fsr2h	equ	0xFDA
 16237                           fsr2l	equ	0xFD9
 16238                           status	equ	0xFD8
 16239                           
 16240 ;; *************** function _getVSCPFrame *****************
 16241 ;; Defined at:
 16242 ;;		line 2876 in file "../main.c"
 16243 ;; Parameters:    Size  Location     Type
 16244 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16245 ;;		 -> vscp_imsg(14), 
 16246 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16247 ;;		 -> vscp_imsg(14), 
 16248 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16249 ;;		 -> vscp_imsg(14), 
 16250 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16251 ;;		 -> vscp_imsg(14), 
 16252 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16253 ;;		 -> vscp_imsg(14), 
 16254 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16255 ;;		 -> vscp_imsg(14), 
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16258 ;;		 -> vscp_imsg(14), 
 16259 ;;  id              4   45[COMRAM] unsigned long 
 16260 ;; Return value:  Size  Location     Type
 16261 ;;                  1    wreg      unsigned char 
 16262 ;; Registers used:
 16263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16264 ;; Tracked objects:
 16265 ;;		On entry : F/0
 16266 ;;		On exit  : 0/0
 16267 ;;		Unchanged: 0/0
 16268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16269 ;;      Params:         5       0       0       0       0       0       0
 16270 ;;      Locals:         5       0       0       0       0       0       0
 16271 ;;      Temps:          4       0       0       0       0       0       0
 16272 ;;      Totals:        14       0       0       0       0       0       0
 16273 ;;Total ram usage:       14 bytes
 16274 ;; Hardware stack levels used:    1
 16275 ;; Hardware stack levels required when called:    5
 16276 ;; This function calls:
 16277 ;;		_getCANFrame
 16278 ;; This function is called by:
 16279 ;;		_vscp_getEvent
 16280 ;; This function uses a non-reentrant model
 16281 ;;
 16282                           
 16283                           	psect	text73
 16284  005396                     __ptext73:
 16285                           	opt stack 0
 16286  005396                     _getVSCPFrame:
 16287                           	opt stack 24
 16288                           
 16289                           ;incstack = 0
 16290                           ;incstack = 0
 16291                           ;getVSCPFrame@pvscpclass stored from wreg
 16292  005396  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16293                           
 16294                           ; BSR set to: 0
 16295                           ;main.c: 2877: uint32_t id;
 16296                           ;main.c: 2879: if (!getCANFrame(&id, pSize, pData)) {
 16297  00539A  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16298  00539E  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16299  0053A2  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16300  0053A4  EC1B  F02D         	call	_getCANFrame
 16301  0053A8  0900               	iorlw	0
 16302  0053AA  E102               	bnz	l8152
 16303                           
 16304                           ;main.c: 2880: return 0;
 16305  0053AC  0E00               	movlw	0
 16306  0053AE  D02E               	goto	l629
 16307  0053B0                     l8152:
 16308                           
 16309                           ;main.c: 2881: }
 16310                           ;main.c: 2883: *pNodeId = id & 0x0ff;
 16311  0053B0  5025               	movf	getVSCPFrame@pNodeId,w,c
 16312  0053B2  6ED9               	movwf	fsr2l,c
 16313  0053B4  6ADA               	clrf	fsr2h,c
 16314  0053B6  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16315                           
 16316                           ;main.c: 2884: *pvscptype = (id >> 8) & 0xff;
 16317  0053BA  5024               	movf	getVSCPFrame@pvscptype,w,c
 16318  0053BC  6ED9               	movwf	fsr2l,c
 16319  0053BE  6ADA               	clrf	fsr2h,c
 16320  0053C0  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16321                           
 16322                           ;main.c: 2885: *pvscpclass = (id >> 16) & 0x1ff;
 16323  0053C4  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16324  0053C6  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16325  0053C8  0E01               	movlw	1
 16326  0053CA  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16327  0053CC  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16328  0053CE  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16329  0053D0  6ED9               	movwf	fsr2l,c
 16330  0053D2  6ADA               	clrf	fsr2h,c
 16331  0053D4  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16332  0053D8  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16333                           
 16334                           ;main.c: 2886: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16335  0053DC  5026               	movf	getVSCPFrame@pPriority,w,c
 16336  0053DE  6ED9               	movwf	fsr2l,c
 16337  0053E0  6ADA               	clrf	fsr2h,c
 16338  0053E2  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16339  0053E6  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16340  0053EA  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16341  0053EE  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16342  0053F2  0E1B               	movlw	27
 16343  0053F4  D005               	goto	u5460
 16344  0053F6                     u5465:
 16345  0053F6  90D8               	bcf	status,0,c
 16346  0053F8  322C               	rrcf	??_getVSCPFrame+3,f,c
 16347  0053FA  322B               	rrcf	??_getVSCPFrame+2,f,c
 16348  0053FC  322A               	rrcf	??_getVSCPFrame+1,f,c
 16349  0053FE  3229               	rrcf	??_getVSCPFrame,f,c
 16350  005400                     u5460:
 16351  005400  2EE8               	decfsz	wreg,f,c
 16352  005402  D7F9               	goto	u5465
 16353  005404  5029               	movf	??_getVSCPFrame,w,c
 16354  005406  0B07               	andlw	7
 16355  005408  6EDF               	movwf	indf2,c
 16356                           
 16357                           ;main.c: 2888: return 1;
 16358  00540A  0E01               	movlw	1
 16359  00540C                     l629:
 16360  00540C  0012               	return	
 16361  00540E                     __end_of_getVSCPFrame:
 16362                           	opt stack 0
 16363                           tblptru	equ	0xFF8
 16364                           tblptrh	equ	0xFF7
 16365                           tblptrl	equ	0xFF6
 16366                           tablat	equ	0xFF5
 16367                           prodh	equ	0xFF4
 16368                           prodl	equ	0xFF3
 16369                           postinc0	equ	0xFEE
 16370                           wreg	equ	0xFE8
 16371                           indf1	equ	0xFE7
 16372                           postdec1	equ	0xFE5
 16373                           fsr1h	equ	0xFE2
 16374                           fsr1l	equ	0xFE1
 16375                           indf2	equ	0xFDF
 16376                           postinc2	equ	0xFDE
 16377                           postdec2	equ	0xFDD
 16378                           plusw2	equ	0xFDB
 16379                           fsr2h	equ	0xFDA
 16380                           fsr2l	equ	0xFD9
 16381                           status	equ	0xFD8
 16382                           
 16383 ;; *************** function _getCANFrame *****************
 16384 ;; Defined at:
 16385 ;;		line 2918 in file "../main.c"
 16386 ;; Parameters:    Size  Location     Type
 16387 ;;  pid             1    wreg     PTR unsigned long 
 16388 ;;		 -> getVSCPFrame@id(4), 
 16389 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16390 ;;		 -> vscp_imsg(14), 
 16391 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16392 ;;		 -> vscp_imsg(14), 
 16393 ;; Auto vars:     Size  Location     Type
 16394 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16395 ;;		 -> getVSCPFrame@id(4), 
 16396 ;;  flags           1   34[COMRAM] enum E16409
 16397 ;; Return value:  Size  Location     Type
 16398 ;;                  1    wreg      unsigned char 
 16399 ;; Registers used:
 16400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16401 ;; Tracked objects:
 16402 ;;		On entry : F/0
 16403 ;;		On exit  : 0/0
 16404 ;;		Unchanged: 0/0
 16405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16406 ;;      Params:         2       0       0       0       0       0       0
 16407 ;;      Locals:         2       0       0       0       0       0       0
 16408 ;;      Temps:          0       0       0       0       0       0       0
 16409 ;;      Totals:         4       0       0       0       0       0       0
 16410 ;;Total ram usage:        4 bytes
 16411 ;; Hardware stack levels used:    1
 16412 ;; Hardware stack levels required when called:    4
 16413 ;; This function calls:
 16414 ;;		_ECANReceiveMessage
 16415 ;; This function is called by:
 16416 ;;		_getVSCPFrame
 16417 ;; This function uses a non-reentrant model
 16418 ;;
 16419                           
 16420                           	psect	text74
 16421  005A36                     __ptext74:
 16422                           	opt stack 0
 16423  005A36                     _getCANFrame:
 16424                           	opt stack 24
 16425                           
 16426                           ;incstack = 0
 16427                           ;incstack = 0
 16428                           ;getCANFrame@pid stored from wreg
 16429  005A36  CFE8 F022          	movff	wreg,getCANFrame@pid
 16430                           
 16431                           ; BSR set to: 0
 16432                           ;main.c: 2919: ECAN_RX_MSG_FLAGS flags;
 16433                           ;main.c: 2923: if (vscp_imsg.flags & 0x80) return 0;
 16434  005A3A  AFC1               	btfss	_vscp_imsg& (0+255),7,b
 16435  005A3C  D002               	goto	l8168
 16436  005A3E                     l8164:
 16437  005A3E  0E00               	movlw	0
 16438  005A40  D00F               	goto	l640
 16439  005A42                     l8168:
 16440                           
 16441                           ; BSR set to: 0
 16442                           ;main.c: 2925: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16443  005A42  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16444  005A46  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16445  005A4A  0E23               	movlw	low getCANFrame@flags
 16446  005A4C  6E17               	movwf	?_ECANReceiveMessage+2,c
 16447  005A4E  5022               	movf	getCANFrame@pid,w,c
 16448  005A50  EC35  F01C         	call	_ECANReceiveMessage
 16449  005A54  0900               	iorlw	0
 16450  005A56  E0F3               	bz	l8164
 16451                           
 16452                           ;main.c: 2927: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16453  005A58  AC23               	btfss	getCANFrame@flags,6,c
 16454                           
 16455                           ;main.c: 2930: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16456  005A5A  AA23               	btfss	getCANFrame@flags,5,c
 16457  005A5C  D7F0               	goto	l8164
 16458                           
 16459                           ;main.c: 2932: return 1;
 16460  005A5E  0E01               	movlw	1
 16461  005A60                     l640:
 16462  005A60  0012               	return	
 16463  005A62                     __end_of_getCANFrame:
 16464                           	opt stack 0
 16465                           tblptru	equ	0xFF8
 16466                           tblptrh	equ	0xFF7
 16467                           tblptrl	equ	0xFF6
 16468                           tablat	equ	0xFF5
 16469                           prodh	equ	0xFF4
 16470                           prodl	equ	0xFF3
 16471                           postinc0	equ	0xFEE
 16472                           wreg	equ	0xFE8
 16473                           indf1	equ	0xFE7
 16474                           postdec1	equ	0xFE5
 16475                           fsr1h	equ	0xFE2
 16476                           fsr1l	equ	0xFE1
 16477                           indf2	equ	0xFDF
 16478                           postinc2	equ	0xFDE
 16479                           postdec2	equ	0xFDD
 16480                           plusw2	equ	0xFDB
 16481                           fsr2h	equ	0xFDA
 16482                           fsr2l	equ	0xFD9
 16483                           status	equ	0xFD8
 16484                           
 16485 ;; *************** function _ECANReceiveMessage *****************
 16486 ;; Defined at:
 16487 ;;		line 803 in file "../ECAN.c"
 16488 ;; Parameters:    Size  Location     Type
 16489 ;;  id              1    wreg     PTR unsigned long 
 16490 ;;		 -> getVSCPFrame@id(4), 
 16491 ;;  data            1   20[COMRAM] PTR unsigned char 
 16492 ;;		 -> vscp_imsg(14), 
 16493 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16494 ;;		 -> vscp_imsg(14), 
 16495 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16496 ;;		 -> getCANFrame@flags(1), 
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;  id              1   25[COMRAM] PTR unsigned long 
 16499 ;;		 -> getVSCPFrame@id(4), 
 16500 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16501 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16502 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16503 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16504 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16505 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16506 ;;  temp            1   28[COMRAM] struct .
 16507 ;;  mode            1   27[COMRAM] unsigned char 
 16508 ;;  i               1   26[COMRAM] unsigned char 
 16509 ;; Return value:  Size  Location     Type
 16510 ;;                  1    wreg      enum E15660
 16511 ;; Registers used:
 16512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16513 ;; Tracked objects:
 16514 ;;		On entry : F/0
 16515 ;;		On exit  : 0/0
 16516 ;;		Unchanged: 0/0
 16517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16518 ;;      Params:         3       0       0       0       0       0       0
 16519 ;;      Locals:         8       0       0       0       0       0       0
 16520 ;;      Temps:          0       0       0       0       0       0       0
 16521 ;;      Totals:        11       0       0       0       0       0       0
 16522 ;;Total ram usage:       11 bytes
 16523 ;; Hardware stack levels used:    1
 16524 ;; Hardware stack levels required when called:    3
 16525 ;; This function calls:
 16526 ;;		__ECANPointBuffer
 16527 ;;		__RegsToCANID
 16528 ;; This function is called by:
 16529 ;;		_getCANFrame
 16530 ;; This function uses a non-reentrant model
 16531 ;;
 16532                           
 16533                           	psect	text75
 16534  00386A                     __ptext75:
 16535                           	opt stack 0
 16536  00386A                     _ECANReceiveMessage:
 16537                           	opt stack 24
 16538                           
 16539                           ;incstack = 0
 16540                           ;incstack = 0
 16541                           ;ECANReceiveMessage@id stored from wreg
 16542  00386A  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16543                           
 16544                           ; BSR set to: 0
 16545                           ;ECAN.c: 805: BYTE mode;
 16546                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16547                           ;ECAN.c: 809: char i;
 16548                           ;ECAN.c: 810: BYTE_VAL temp;
 16549                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16550  00386E  6A48               	clrf	__ECANRxFilterHitInfo,c
 16551                           
 16552                           ; BSR set to: 0
 16553                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16554  003870  5077               	movf	3959,w,c	;volatile
 16555  003872  0BC0               	andlw	192
 16556  003874  6E1C               	movwf	ECANReceiveMessage@mode,c
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;ECAN.c: 816: if ( mode == 0x00 )
 16560  003876  661C               	tstfsz	ECANReceiveMessage@mode,c
 16561  003878  D032               	goto	l8300
 16562                           
 16563                           ; BSR set to: 0
 16564                           ;ECAN.c: 822: {
 16565                           ;ECAN.c: 824: if ( RXB0FUL )
 16566  00387A  AE60               	btfss	3936,7,c	;volatile
 16567  00387C  D012               	goto	l836
 16568                           
 16569                           ; BSR set to: 0
 16570                           ;ECAN.c: 825: {
 16571                           ;ECAN.c: 827: RXB0IF = 0;
 16572  00387E  90A4               	bcf	4004,0,c	;volatile
 16573                           
 16574                           ;ECAN.c: 830: if ( RXB0OVFL )
 16575  003880  AE74               	btfss	3956,7,c	;volatile
 16576  003882  D006               	goto	l8276
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;ECAN.c: 831: {
 16580                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16581  003884  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16582  003886  6ED9               	movwf	fsr2l,c
 16583  003888  6ADA               	clrf	fsr2h,c
 16584  00388A  0E00               	movlw	0
 16585  00388C  86DB               	bsf	plusw2,3,c
 16586                           
 16587                           ; BSR set to: 0
 16588                           ;ECAN.c: 833: RXB0OVFL = 0;
 16589  00388E  9E74               	bcf	3956,7,c	;volatile
 16590  003890                     l8276:
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;ECAN.c: 834: }
 16594                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16595  003890  A060               	btfss	3936,0,c	;volatile
 16596  003892  D002               	bra	u5635
 16597  003894  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16598  003896  D001               	bra	u5637
 16599  003898                     u5635:
 16600  003898  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16601  00389A                     u5637:
 16602                           
 16603                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16604  00389A  0E0F               	movlw	15	;volatile
 16605  00389C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16606  00389E  0E60               	movlw	96	;volatile
 16607  0038A0  D01A               	goto	L34
 16608  0038A2                     l836:
 16609                           
 16610                           ; BSR set to: 0
 16611                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16612  0038A2  010F               	movlb	15	; () banked
 16613  0038A4  AF50               	btfss	80,7,b	;volatile
 16614  0038A6  D019               	goto	l8294
 16615                           
 16616                           ; BSR set to: 15
 16617                           ;ECAN.c: 842: {
 16618                           ;ECAN.c: 844: RXB1IF = 0;
 16619  0038A8  92A4               	bcf	4004,1,c	;volatile
 16620                           
 16621                           ;ECAN.c: 847: if ( RXB1OVFL )
 16622  0038AA  AC74               	btfss	3956,6,c	;volatile
 16623  0038AC  D006               	goto	l8286
 16624                           
 16625                           ; BSR set to: 15
 16626                           ;ECAN.c: 848: {
 16627                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16628  0038AE  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16629  0038B0  6ED9               	movwf	fsr2l,c
 16630  0038B2  6ADA               	clrf	fsr2h,c
 16631  0038B4  0E00               	movlw	0
 16632  0038B6  86DB               	bsf	plusw2,3,c
 16633                           
 16634                           ; BSR set to: 15
 16635                           ;ECAN.c: 850: RXB1OVFL = 0;
 16636  0038B8  9C74               	bcf	3956,6,c	;volatile
 16637  0038BA                     l8286:
 16638                           
 16639                           ; BSR set to: 15
 16640                           ;ECAN.c: 851: }
 16641                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16642  0038BA  5150               	movf	80,w,b	;volatile
 16643  0038BC  0B07               	andlw	7
 16644  0038BE  6E48               	movwf	__ECANRxFilterHitInfo,c
 16645                           
 16646                           ; BSR set to: 15
 16647                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16648  0038C0  0E02               	movlw	2
 16649  0038C2  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16650  0038C4  D005               	goto	l8292
 16651                           
 16652                           ; BSR set to: 15
 16653                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16654  0038C6  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16655  0038C8  6ED9               	movwf	fsr2l,c
 16656  0038CA  6ADA               	clrf	fsr2h,c
 16657  0038CC  0E00               	movlw	0
 16658  0038CE  8EDB               	bsf	plusw2,7,c
 16659  0038D0                     l8292:
 16660                           
 16661                           ; BSR set to: 15
 16662                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16663  0038D0  0E0F               	movlw	15	;volatile
 16664  0038D2  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16665  0038D4  0E50               	movlw	80	;volatile
 16666  0038D6                     L34:
 16667  0038D6  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16668                           
 16669                           ;ECAN.c: 860: }
 16670  0038D8  D065               	goto	l8354
 16671  0038DA                     l8294:
 16672                           
 16673                           ;ECAN.c: 861: else
 16674                           ;ECAN.c: 862: return FALSE;
 16675  0038DA  0E00               	movlw	0
 16676  0038DC  D0CC               	goto	l843
 16677  0038DE                     l8300:
 16678                           
 16679                           ; BSR set to: 0
 16680                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16681  0038DE  501C               	movf	ECANReceiveMessage@mode,w,c
 16682  0038E0  0A40               	xorlw	64
 16683  0038E2  E146               	bnz	l846
 16684                           
 16685                           ; BSR set to: 0
 16686                           ;ECAN.c: 875: {
 16687                           ;ECAN.c: 876: if ( RXB0FUL )
 16688  0038E4  AE60               	btfss	3936,7,c	;volatile
 16689  0038E6  D004               	goto	l847
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16693  0038E8  0E0F               	movlw	15	;volatile
 16694  0038EA  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16695  0038EC  0E60               	movlw	96	;volatile
 16696  0038EE  D03E               	goto	L41
 16697  0038F0                     l847:
 16698                           
 16699                           ; BSR set to: 0
 16700                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16701  0038F0  010F               	movlb	15	; () banked
 16702  0038F2  AF50               	btfss	80,7,b	;volatile
 16703  0038F4  D004               	goto	l849
 16704                           
 16705                           ; BSR set to: 15
 16706                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16707  0038F6  0E0F               	movlw	15	;volatile
 16708  0038F8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16709  0038FA  0E50               	movlw	80	;volatile
 16710  0038FC  D037               	goto	L41
 16711  0038FE                     l849:
 16712                           
 16713                           ; BSR set to: 15
 16714                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16715  0038FE  010D               	movlb	13
 16716  003900  B5F8               	btfsc	248,2,b	;volatile
 16717  003902  D007               	goto	l851
 16718  003904  010E               	movlb	14
 16719  003906  AF20               	btfss	32,7,b	;volatile
 16720  003908  D004               	goto	l851
 16721                           
 16722                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16723  00390A  0E0E               	movlw	14	;volatile
 16724  00390C  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16725  00390E  0E20               	movlw	32	;volatile
 16726  003910  D02D               	goto	L41
 16727  003912                     l851:
 16728                           
 16729                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16730  003912  010D               	movlb	13
 16731  003914  B7F8               	btfsc	248,3,b	;volatile
 16732  003916  D007               	goto	l853
 16733  003918  010E               	movlb	14
 16734  00391A  AF30               	btfss	48,7,b	;volatile
 16735  00391C  D004               	goto	l853
 16736                           
 16737                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16738  00391E  0E0E               	movlw	14	;volatile
 16739  003920  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16740  003922  0E30               	movlw	48	;volatile
 16741  003924  D023               	goto	L41
 16742  003926                     l853:
 16743                           
 16744                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16745  003926  010D               	movlb	13
 16746  003928  B9F8               	btfsc	248,4,b	;volatile
 16747  00392A  D007               	goto	l855
 16748  00392C  010E               	movlb	14
 16749  00392E  AF40               	btfss	64,7,b	;volatile
 16750  003930  D004               	goto	l855
 16751                           
 16752                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16753  003932  0E0E               	movlw	14	;volatile
 16754  003934  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16755  003936  0E40               	movlw	64	;volatile
 16756  003938  D019               	goto	L41
 16757  00393A                     l855:
 16758                           
 16759                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16760  00393A  010D               	movlb	13
 16761  00393C  BBF8               	btfsc	248,5,b	;volatile
 16762  00393E  D005               	goto	l857
 16763  003940  010E               	movlb	14
 16764  003942  AF50               	btfss	80,7,b	;volatile
 16765  003944  D002               	goto	l857
 16766                           
 16767                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16768  003946  0E0E               	movlw	14	;volatile
 16769  003948  D7D7               	goto	L42
 16770  00394A                     l857:
 16771                           
 16772                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16773  00394A  010D               	movlb	13
 16774  00394C  BDF8               	btfsc	248,6,b	;volatile
 16775  00394E  D005               	goto	l859
 16776  003950  010E               	movlb	14
 16777  003952  AF60               	btfss	96,7,b	;volatile
 16778  003954  D002               	goto	l859
 16779                           
 16780                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16781  003956  0E0E               	movlw	14	;volatile
 16782  003958  D7C8               	goto	L43
 16783  00395A                     l859:
 16784                           
 16785                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16786  00395A  010D               	movlb	13
 16787  00395C  BFF8               	btfsc	248,7,b	;volatile
 16788  00395E  D7BD               	goto	l8294
 16789  003960  010E               	movlb	14
 16790  003962  AF70               	btfss	112,7,b	;volatile
 16791  003964  D7BA               	goto	l8294
 16792                           
 16793                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16794  003966  0E0E               	movlw	14	;volatile
 16795  003968  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16796  00396A  0E70               	movlw	112	;volatile
 16797  00396C                     L41:
 16798  00396C  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16799  00396E  D00A               	goto	l8344
 16800  003970                     l846:
 16801                           
 16802                           ; BSR set to: 0
 16803                           ;ECAN.c: 910: else
 16804                           ;ECAN.c: 915: {
 16805                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16806  003970  AE74               	btfss	3956,7,c	;volatile
 16807  003972  D7B3               	goto	l8294
 16808                           
 16809                           ; BSR set to: 0
 16810                           ;ECAN.c: 917: {
 16811                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16812  003974  506F               	movf	3951,w,c	;volatile
 16813  003976  0B07               	andlw	7
 16814  003978  EC42  F02A         	call	__ECANPointBuffer
 16815  00397C  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16816  003980  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16817  003984                     l8344:
 16818                           
 16819                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16820  003984  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16821  003988  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16822  00398C  50DF               	movf	indf2,w,c
 16823  00398E  0B1F               	andlw	31
 16824  003990  6E48               	movwf	__ECANRxFilterHitInfo,c
 16825                           
 16826                           ;ECAN.c: 932: RXB1IF = 0;
 16827  003992  92A4               	bcf	4004,1,c	;volatile
 16828                           
 16829                           ;ECAN.c: 934: if ( RXB1OVFL )
 16830  003994  AC74               	btfss	3956,6,c	;volatile
 16831  003996  D006               	goto	l8354
 16832                           
 16833                           ;ECAN.c: 935: {
 16834                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16835  003998  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16836  00399A  6ED9               	movwf	fsr2l,c
 16837  00399C  6ADA               	clrf	fsr2h,c
 16838  00399E  0E00               	movlw	0
 16839  0039A0  86DB               	bsf	plusw2,3,c
 16840                           
 16841                           ;ECAN.c: 937: RXB1OVFL = 0;
 16842  0039A2  9C74               	bcf	3956,6,c	;volatile
 16843  0039A4                     l8354:
 16844                           
 16845                           ;ECAN.c: 942: savedPtr = ptr;
 16846  0039A4  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16847  0039A8  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16848                           
 16849                           ;ECAN.c: 943: *msgFlags = 0;
 16850  0039AC  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16851  0039AE  6ED9               	movwf	fsr2l,c
 16852  0039B0  6ADA               	clrf	fsr2h,c
 16853  0039B2  6ADF               	clrf	indf2,c
 16854                           
 16855                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16856  0039B4  EE20 F005          	lfsr	2,5
 16857  0039B8  501E               	movf	ECANReceiveMessage@ptr,w,c
 16858  0039BA  26D9               	addwf	fsr2l,f,c
 16859  0039BC  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16860  0039BE  22DA               	addwfc	fsr2h,f,c
 16861  0039C0  50DF               	movf	indf2,w,c
 16862  0039C2  6E1D               	movwf	ECANReceiveMessage@temp,c
 16863                           
 16864                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16865  0039C4  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16866  0039C6  6ED9               	movwf	fsr2l,c
 16867  0039C8  6ADA               	clrf	fsr2h,c
 16868  0039CA  501D               	movf	ECANReceiveMessage@temp,w,c
 16869  0039CC  0B0F               	andlw	15
 16870  0039CE  6EDF               	movwf	indf2,c
 16871                           
 16872                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16873  0039D0  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16874  0039D2  D005               	goto	l867
 16875                           
 16876                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16877  0039D4  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16878  0039D6  6ED9               	movwf	fsr2l,c
 16879  0039D8  6ADA               	clrf	fsr2h,c
 16880  0039DA  0E00               	movlw	0
 16881  0039DC  8CDB               	bsf	plusw2,6,c
 16882  0039DE                     l867:
 16883                           
 16884                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16885  0039DE  EE20 F002          	lfsr	2,2
 16886  0039E2  501E               	movf	ECANReceiveMessage@ptr,w,c
 16887  0039E4  26D9               	addwf	fsr2l,f,c
 16888  0039E6  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16889  0039E8  22DA               	addwfc	fsr2h,f,c
 16890  0039EA  50DF               	movf	indf2,w,c
 16891  0039EC  6E1D               	movwf	ECANReceiveMessage@temp,c
 16892                           
 16893                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16894  0039EE  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16895  0039F0  D008               	goto	l868
 16896                           
 16897                           ;ECAN.c: 956: {
 16898                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16899  0039F2  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16900  0039F4  6ED9               	movwf	fsr2l,c
 16901  0039F6  6ADA               	clrf	fsr2h,c
 16902  0039F8  0E00               	movlw	0
 16903  0039FA  8ADB               	bsf	plusw2,5,c
 16904                           
 16905                           ;ECAN.c: 958: temp.Val = 1;
 16906  0039FC  0E01               	movlw	1
 16907  0039FE  6E1D               	movwf	ECANReceiveMessage@temp,c
 16908                           
 16909                           ;ECAN.c: 959: }
 16910  003A00  D001               	goto	l8372
 16911  003A02                     l868:
 16912                           
 16913                           ;ECAN.c: 960: else
 16914                           ;ECAN.c: 961: temp.Val = 0;
 16915  003A02  6A1D               	clrf	ECANReceiveMessage@temp,c
 16916  003A04                     l8372:
 16917                           
 16918                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16919  003A04  281E               	incf	ECANReceiveMessage@ptr,w,c
 16920  003A06  6E0E               	movwf	?__RegsToCANID,c
 16921  003A08  0E00               	movlw	0
 16922  003A0A  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16923  003A0C  6E0F               	movwf	?__RegsToCANID+1,c
 16924  003A0E  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16925  003A12  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16926  003A16  EC74  F021         	call	__RegsToCANID	;wreg free
 16927                           
 16928                           ;ECAN.c: 966: ptr += 6;
 16929  003A1A  0E06               	movlw	6
 16930  003A1C  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16931  003A1E  0E00               	movlw	0
 16932  003A20  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16933                           
 16934                           ;ECAN.c: 967: temp.Val = *dataLen;
 16935  003A22  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16936  003A24  6ED9               	movwf	fsr2l,c
 16937  003A26  6ADA               	clrf	fsr2h,c
 16938  003A28  50DF               	movf	indf2,w,c
 16939  003A2A  6E1D               	movwf	ECANReceiveMessage@temp,c
 16940                           
 16941                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16942  003A2C  6A1B               	clrf	ECANReceiveMessage@i,c
 16943  003A2E  D00D               	goto	l8388
 16944  003A30                     l8380:
 16945                           
 16946                           ;ECAN.c: 969: *data++ = *ptr++;
 16947  003A30  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16948  003A34  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16949  003A38  5015               	movf	ECANReceiveMessage@data,w,c
 16950  003A3A  6EE1               	movwf	fsr1l,c
 16951  003A3C  6AE2               	clrf	fsr1h,c
 16952  003A3E  CFDF FFE7          	movff	indf2,indf1
 16953  003A42  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16954  003A44  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16955  003A46  2A15               	incf	ECANReceiveMessage@data,f,c
 16956  003A48  2A1B               	incf	ECANReceiveMessage@i,f,c
 16957  003A4A                     l8388:
 16958  003A4A  501D               	movf	ECANReceiveMessage@temp,w,c
 16959  003A4C  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16960  003A4E  E3F0               	bnc	l8380
 16961                           
 16962                           ;ECAN.c: 972: if ( IRXIF )
 16963  003A50  AEA4               	btfss	4004,7,c	;volatile
 16964  003A52  D006               	goto	l8394
 16965                           
 16966                           ;ECAN.c: 973: {
 16967                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16968  003A54  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16969  003A56  6ED9               	movwf	fsr2l,c
 16970  003A58  6ADA               	clrf	fsr2h,c
 16971  003A5A  0E00               	movlw	0
 16972  003A5C  88DB               	bsf	plusw2,4,c
 16973                           
 16974                           ;ECAN.c: 975: IRXIF = 0;
 16975  003A5E  9EA4               	bcf	4004,7,c	;volatile
 16976  003A60                     l8394:
 16977                           
 16978                           ;ECAN.c: 976: }
 16979                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 16980  003A60  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 16981  003A64  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 16982  003A68  0E7F               	movlw	127
 16983  003A6A  16DF               	andwf	indf2,f,c
 16984                           
 16985                           ;ECAN.c: 983: if ( mode == 0x80 )
 16986  003A6C  501C               	movf	ECANReceiveMessage@mode,w,c
 16987  003A6E  0A80               	xorlw	128
 16988  003A70  B4D8               	btfsc	status,2,c
 16989                           
 16990                           ;ECAN.c: 984: FIFOEMPTY = 0;
 16991  003A72  9E74               	bcf	3956,7,c	;volatile
 16992                           
 16993                           ;ECAN.c: 990: return TRUE;
 16994  003A74  0E01               	movlw	1
 16995  003A76                     l843:
 16996  003A76  0012               	return	
 16997  003A78                     __end_of_ECANReceiveMessage:
 16998                           	opt stack 0
 16999                           tblptru	equ	0xFF8
 17000                           tblptrh	equ	0xFF7
 17001                           tblptrl	equ	0xFF6
 17002                           tablat	equ	0xFF5
 17003                           prodh	equ	0xFF4
 17004                           prodl	equ	0xFF3
 17005                           postinc0	equ	0xFEE
 17006                           wreg	equ	0xFE8
 17007                           indf1	equ	0xFE7
 17008                           postdec1	equ	0xFE5
 17009                           fsr1h	equ	0xFE2
 17010                           fsr1l	equ	0xFE1
 17011                           indf2	equ	0xFDF
 17012                           postinc2	equ	0xFDE
 17013                           postdec2	equ	0xFDD
 17014                           plusw2	equ	0xFDB
 17015                           fsr2h	equ	0xFDA
 17016                           fsr2l	equ	0xFD9
 17017                           status	equ	0xFD8
 17018                           
 17019 ;; *************** function __RegsToCANID *****************
 17020 ;; Defined at:
 17021 ;;		line 1156 in file "../ECAN.c"
 17022 ;; Parameters:    Size  Location     Type
 17023 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17024 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17025 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17026 ;;  val             1   15[COMRAM] PTR unsigned long 
 17027 ;;		 -> getVSCPFrame@id(4), 
 17028 ;;  type            1   16[COMRAM] unsigned char 
 17029 ;; Auto vars:     Size  Location     Type
 17030 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17031 ;;		 -> getVSCPFrame@id(4), 
 17032 ;; Return value:  Size  Location     Type
 17033 ;;		None               void
 17034 ;; Registers used:
 17035 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17036 ;; Tracked objects:
 17037 ;;		On entry : 0/0
 17038 ;;		On exit  : 0/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17041 ;;      Params:         4       0       0       0       0       0       0
 17042 ;;      Locals:         1       0       0       0       0       0       0
 17043 ;;      Temps:          2       0       0       0       0       0       0
 17044 ;;      Totals:         7       0       0       0       0       0       0
 17045 ;;Total ram usage:        7 bytes
 17046 ;; Hardware stack levels used:    1
 17047 ;; Hardware stack levels required when called:    2
 17048 ;; This function calls:
 17049 ;;		Nothing
 17050 ;; This function is called by:
 17051 ;;		_ECANReceiveMessage
 17052 ;; This function uses a non-reentrant model
 17053 ;;
 17054                           
 17055                           	psect	text76
 17056  0042E8                     __ptext76:
 17057                           	opt stack 0
 17058  0042E8                     __RegsToCANID:
 17059                           	opt stack 24
 17060                           
 17061                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17062                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17063                           
 17064                           ;incstack = 0
 17065                           ;incstack = 0
 17066  0042E8  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17067                           
 17068                           ;ECAN.c: 1161: if ( type == 0 )
 17069  0042EC  6611               	tstfsz	__RegsToCANID@type,c
 17070  0042EE  D046               	goto	l8468
 17071                           
 17072                           ;ECAN.c: 1162: {
 17073                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17074  0042F0  5014               	movf	__RegsToCANID@Value,w,c
 17075  0042F2  6ED9               	movwf	fsr2l,c
 17076  0042F4  6ADA               	clrf	fsr2h,c
 17077  0042F6  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17078  0042FA  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17079  0042FE  50E7               	movf	indf1,w,c
 17080  004300  6E12               	movwf	??__RegsToCANID& (0+255),c
 17081  004302  90D8               	bcf	status,0,c
 17082  004304  3612               	rlcf	??__RegsToCANID,f,c
 17083  004306  90D8               	bcf	status,0,c
 17084  004308  3612               	rlcf	??__RegsToCANID,f,c
 17085  00430A  90D8               	bcf	status,0,c
 17086  00430C  3412               	rlcf	??__RegsToCANID,w,c
 17087  00430E  6EDF               	movwf	indf2,c
 17088                           
 17089                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17090  004310  5014               	movf	__RegsToCANID@Value,w,c
 17091  004312  6ED9               	movwf	fsr2l,c
 17092  004314  6ADA               	clrf	fsr2h,c
 17093  004316  2AD9               	incf	fsr2l,f,c
 17094  004318  6ADA               	clrf	fsr2h,c
 17095  00431A  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17096  00431E  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17097  004322  50E7               	movf	indf1,w,c
 17098  004324  6E12               	movwf	??__RegsToCANID& (0+255),c
 17099  004326  0E05               	movlw	5
 17100  004328  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17101  00432A                     u5955:
 17102  00432A  90D8               	bcf	status,0,c
 17103  00432C  3212               	rrcf	??__RegsToCANID,f,c
 17104  00432E  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17105  004330  D7FC               	goto	u5955
 17106  004332  5012               	movf	??__RegsToCANID,w,c
 17107  004334  6EDF               	movwf	indf2,c
 17108                           
 17109                           ;ECAN.c: 1166: ptr++;
 17110  004336  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17111  004338  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17112                           
 17113                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17114  00433A  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17115  00433E  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17116  004342  50DF               	movf	indf2,w,c
 17117  004344  6E12               	movwf	??__RegsToCANID& (0+255),c
 17118  004346  0E05               	movlw	5
 17119  004348  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17120  00434A                     u5965:
 17121  00434A  90D8               	bcf	status,0,c
 17122  00434C  3212               	rrcf	??__RegsToCANID,f,c
 17123  00434E  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17124  004350  D7FC               	goto	u5965
 17125  004352  5014               	movf	__RegsToCANID@Value,w,c
 17126  004354  6ED9               	movwf	fsr2l,c
 17127  004356  6ADA               	clrf	fsr2h,c
 17128  004358  5012               	movf	??__RegsToCANID,w,c
 17129  00435A  12DF               	iorwf	indf2,f,c
 17130                           
 17131                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17132  00435C  5014               	movf	__RegsToCANID@Value,w,c
 17133  00435E  6ED9               	movwf	fsr2l,c
 17134  004360  6ADA               	clrf	fsr2h,c
 17135  004362  0E02               	movlw	2
 17136  004364  26D9               	addwf	fsr2l,f,c
 17137  004366  6ADA               	clrf	fsr2h,c
 17138  004368  6ADF               	clrf	indf2,c
 17139                           
 17140                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17141  00436A  5014               	movf	__RegsToCANID@Value,w,c
 17142  00436C  6ED9               	movwf	fsr2l,c
 17143  00436E  6ADA               	clrf	fsr2h,c
 17144  004370  0E03               	movlw	3
 17145  004372  26D9               	addwf	fsr2l,f,c
 17146  004374  6ADA               	clrf	fsr2h,c
 17147  004376  0E00               	movlw	0
 17148  004378  6EDF               	movwf	indf2,c
 17149                           
 17150                           ;ECAN.c: 1170: }
 17151  00437A  D067               	goto	l890
 17152  00437C                     l8468:
 17153                           
 17154                           ;ECAN.c: 1171: else
 17155                           ;ECAN.c: 1172: {
 17156                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17157  00437C  5014               	movf	__RegsToCANID@Value,w,c
 17158  00437E  6ED9               	movwf	fsr2l,c
 17159  004380  6ADA               	clrf	fsr2h,c
 17160  004382  0E02               	movlw	2
 17161  004384  26D9               	addwf	fsr2l,f,c
 17162  004386  6ADA               	clrf	fsr2h,c
 17163  004388  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17164  00438C  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17165  004390  50E7               	movf	indf1,w,c
 17166  004392  6E12               	movwf	??__RegsToCANID& (0+255),c
 17167  004394  0E05               	movlw	5
 17168  004396  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17169  004398                     u5975:
 17170  004398  90D8               	bcf	status,0,c
 17171  00439A  3612               	rlcf	??__RegsToCANID,f,c
 17172  00439C  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17173  00439E  D7FC               	goto	u5975
 17174  0043A0  5012               	movf	??__RegsToCANID,w,c
 17175  0043A2  6EDF               	movwf	indf2,c
 17176                           
 17177                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17178  0043A4  5014               	movf	__RegsToCANID@Value,w,c
 17179  0043A6  6ED9               	movwf	fsr2l,c
 17180  0043A8  6ADA               	clrf	fsr2h,c
 17181  0043AA  0E03               	movlw	3
 17182  0043AC  26D9               	addwf	fsr2l,f,c
 17183  0043AE  6ADA               	clrf	fsr2h,c
 17184  0043B0  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17185  0043B4  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17186  0043B8  50E7               	movf	indf1,w,c
 17187  0043BA  6E12               	movwf	??__RegsToCANID& (0+255),c
 17188  0043BC  90D8               	bcf	status,0,c
 17189  0043BE  3212               	rrcf	??__RegsToCANID,f,c
 17190  0043C0  90D8               	bcf	status,0,c
 17191  0043C2  3212               	rrcf	??__RegsToCANID,f,c
 17192  0043C4  90D8               	bcf	status,0,c
 17193  0043C6  3012               	rrcf	??__RegsToCANID,w,c
 17194  0043C8  6EDF               	movwf	indf2,c
 17195                           
 17196                           ;ECAN.c: 1176: ptr++;
 17197  0043CA  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17198  0043CC  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17199                           
 17200                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17201  0043CE  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17202  0043D2  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17203  0043D6  50DF               	movf	indf2,w,c
 17204  0043D8  6E12               	movwf	??__RegsToCANID& (0+255),c
 17205  0043DA  0E03               	movlw	3
 17206  0043DC  1612               	andwf	??__RegsToCANID,f,c
 17207  0043DE  5014               	movf	__RegsToCANID@Value,w,c
 17208  0043E0  6ED9               	movwf	fsr2l,c
 17209  0043E2  6ADA               	clrf	fsr2h,c
 17210  0043E4  0E02               	movlw	2
 17211  0043E6  26D9               	addwf	fsr2l,f,c
 17212  0043E8  6ADA               	clrf	fsr2h,c
 17213  0043EA  5012               	movf	??__RegsToCANID,w,c
 17214  0043EC  12DF               	iorwf	indf2,f,c
 17215                           
 17216                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17217  0043EE  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17218  0043F2  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17219  0043F6  50DF               	movf	indf2,w,c
 17220  0043F8  6E12               	movwf	??__RegsToCANID& (0+255),c
 17221  0043FA  90D8               	bcf	status,0,c
 17222  0043FC  3212               	rrcf	??__RegsToCANID,f,c
 17223  0043FE  90D8               	bcf	status,0,c
 17224  004400  3212               	rrcf	??__RegsToCANID,f,c
 17225  004402  90D8               	bcf	status,0,c
 17226  004404  3212               	rrcf	??__RegsToCANID,f,c
 17227  004406  0E1C               	movlw	28
 17228  004408  1612               	andwf	??__RegsToCANID,f,c
 17229  00440A  5014               	movf	__RegsToCANID@Value,w,c
 17230  00440C  6ED9               	movwf	fsr2l,c
 17231  00440E  6ADA               	clrf	fsr2h,c
 17232  004410  0E02               	movlw	2
 17233  004412  26D9               	addwf	fsr2l,f,c
 17234  004414  6ADA               	clrf	fsr2h,c
 17235  004416  5012               	movf	??__RegsToCANID,w,c
 17236  004418  12DF               	iorwf	indf2,f,c
 17237                           
 17238                           ;ECAN.c: 1180: ptr++;
 17239  00441A  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17240  00441C  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17241                           
 17242                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17243  00441E  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17244  004422  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17245  004426  5014               	movf	__RegsToCANID@Value,w,c
 17246  004428  6EE1               	movwf	fsr1l,c
 17247  00442A  6AE2               	clrf	fsr1h,c
 17248  00442C  2AE1               	incf	fsr1l,f,c
 17249  00442E  6AE2               	clrf	fsr1h,c
 17250  004430  CFDF FFE7          	movff	indf2,indf1
 17251                           
 17252                           ;ECAN.c: 1182: ptr++;
 17253  004434  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17254  004436  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17255                           
 17256                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17257  004438  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17258  00443C  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17259  004440  5014               	movf	__RegsToCANID@Value,w,c
 17260  004442  6EE1               	movwf	fsr1l,c
 17261  004444  6AE2               	clrf	fsr1h,c
 17262  004446  CFDF FFE7          	movff	indf2,indf1
 17263  00444A                     l890:
 17264  00444A  0012               	return	
 17265  00444C                     __end_of__RegsToCANID:
 17266                           	opt stack 0
 17267                           tblptru	equ	0xFF8
 17268                           tblptrh	equ	0xFF7
 17269                           tblptrl	equ	0xFF6
 17270                           tablat	equ	0xFF5
 17271                           prodh	equ	0xFF4
 17272                           prodl	equ	0xFF3
 17273                           postinc0	equ	0xFEE
 17274                           wreg	equ	0xFE8
 17275                           indf1	equ	0xFE7
 17276                           postdec1	equ	0xFE5
 17277                           fsr1h	equ	0xFE2
 17278                           fsr1l	equ	0xFE1
 17279                           indf2	equ	0xFDF
 17280                           postinc2	equ	0xFDE
 17281                           postdec2	equ	0xFDD
 17282                           plusw2	equ	0xFDB
 17283                           fsr2h	equ	0xFDA
 17284                           fsr2l	equ	0xFD9
 17285                           status	equ	0xFD8
 17286                           
 17287 ;; *************** function __ECANPointBuffer *****************
 17288 ;; Defined at:
 17289 ;;		line 1207 in file "../ECAN.c"
 17290 ;; Parameters:    Size  Location     Type
 17291 ;;  b               1    wreg     unsigned char 
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;  b               1   16[COMRAM] unsigned char 
 17294 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17295 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17296 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;                  2   13[COMRAM] PTR unsigned char 
 17299 ;; Registers used:
 17300 ;;		wreg, status,2, status,0
 17301 ;; Tracked objects:
 17302 ;;		On entry : F/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17306 ;;      Params:         3       0       0       0       0       0       0
 17307 ;;      Locals:         3       0       0       0       0       0       0
 17308 ;;      Temps:          0       0       0       0       0       0       0
 17309 ;;      Totals:         6       0       0       0       0       0       0
 17310 ;;Total ram usage:        6 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    2
 17313 ;; This function calls:
 17314 ;;		Nothing
 17315 ;; This function is called by:
 17316 ;;		_ECANReceiveMessage
 17317 ;; This function uses a non-reentrant model
 17318 ;;
 17319                           
 17320                           	psect	text77
 17321  005484                     __ptext77:
 17322                           	opt stack 0
 17323  005484                     __ECANPointBuffer:
 17324                           	opt stack 24
 17325                           
 17326                           ;incstack = 0
 17327                           ;incstack = 0
 17328                           ;__ECANPointBuffer@b stored from wreg
 17329  005484  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;ECAN.c: 1208: BYTE* pt;
 17333                           ;ECAN.c: 1210: switch(b)
 17334  005488  D024               	goto	l8454
 17335  00548A                     l8436:
 17336                           
 17337                           ; BSR set to: 0
 17338                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17339  00548A  0E0F               	movlw	15	;volatile
 17340  00548C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17341  00548E  0E60               	movlw	96	;volatile
 17342  005490  D01E               	goto	L50
 17343  005492                     l8438:
 17344                           
 17345                           ; BSR set to: 0
 17346                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17347  005492  010F               	movlb	15	; () banked
 17348  005494  0E0F               	movlw	15	;volatile
 17349  005496  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17350  005498  0E50               	movlw	80	;volatile
 17351  00549A  D019               	goto	L50
 17352  00549C                     l8440:
 17353                           
 17354                           ; BSR set to: 0
 17355                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17356  00549C  010E               	movlb	14	; () banked
 17357  00549E  0E0E               	movlw	14	;volatile
 17358  0054A0  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17359  0054A2  0E20               	movlw	32	;volatile
 17360  0054A4  D014               	goto	L50
 17361  0054A6                     l8442:
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17365  0054A6  010E               	movlb	14	; () banked
 17366  0054A8  0E0E               	movlw	14	;volatile
 17367  0054AA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17368  0054AC  0E30               	movlw	48	;volatile
 17369  0054AE  D00F               	goto	L50
 17370  0054B0                     l8444:
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17374  0054B0  010E               	movlb	14	; () banked
 17375  0054B2  0E0E               	movlw	14	;volatile
 17376  0054B4  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17377  0054B6  0E40               	movlw	64	;volatile
 17378  0054B8  D00A               	goto	L50
 17379  0054BA                     l8446:
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17383  0054BA  010E               	movlb	14	; () banked
 17384  0054BC  0E0E               	movlw	14	;volatile
 17385  0054BE  D7EB               	goto	L51
 17386  0054C0                     l8448:
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17390  0054C0  010E               	movlb	14	; () banked
 17391  0054C2  0E0E               	movlw	14	;volatile
 17392  0054C4  D7E3               	goto	L52
 17393  0054C6                     l8450:
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17397  0054C6  010E               	movlb	14	; () banked
 17398  0054C8  0E0E               	movlw	14	;volatile
 17399  0054CA  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17400  0054CC  0E70               	movlw	112	;volatile
 17401  0054CE                     L50:
 17402  0054CE  6E12               	movwf	__ECANPointBuffer@pt,c
 17403                           
 17404                           ;ECAN.c: 1235: break;
 17405  0054D0  D00F               	goto	l895
 17406  0054D2                     l8454:
 17407                           
 17408                           ; BSR set to: 0
 17409  0054D2  5011               	movf	__ECANPointBuffer@b,w,c
 17410                           
 17411                           ; Switch size 1, requested type "speed"
 17412                           ; Number of cases is 7, Range of values is 0 to 6
 17413                           ; switch strategies available:
 17414                           ; Name         Instructions Cycles
 17415                           ; simple_byte           22    12 (average)
 17416                           ;	Chosen strategy is simple_byte
 17417  0054D4  E0DA               	bz	l8436
 17418  0054D6  0A01               	xorlw	1	; case 1
 17419  0054D8  E0DC               	bz	l8438
 17420  0054DA  0A03               	xorlw	3	; case 2
 17421  0054DC  E0DF               	bz	l8440
 17422  0054DE  0A01               	xorlw	1	; case 3
 17423  0054E0  E0E2               	bz	l8442
 17424  0054E2  0A07               	xorlw	7	; case 4
 17425  0054E4  E0E5               	bz	l8444
 17426  0054E6  0A01               	xorlw	1	; case 5
 17427  0054E8  E0E8               	bz	l8446
 17428  0054EA  0A03               	xorlw	3	; case 6
 17429  0054EC  E0E9               	bz	l8448
 17430  0054EE  D7EB               	goto	l8450
 17431  0054F0                     l895:
 17432                           
 17433                           ;ECAN.c: 1237: return (pt);
 17434  0054F0  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17435  0054F4  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17436  0054F8  0012               	return	
 17437  0054FA                     __end_of__ECANPointBuffer:
 17438                           	opt stack 0
 17439                           tblptru	equ	0xFF8
 17440                           tblptrh	equ	0xFF7
 17441                           tblptrl	equ	0xFF6
 17442                           tablat	equ	0xFF5
 17443                           prodh	equ	0xFF4
 17444                           prodl	equ	0xFF3
 17445                           postinc0	equ	0xFEE
 17446                           wreg	equ	0xFE8
 17447                           indf1	equ	0xFE7
 17448                           postdec1	equ	0xFE5
 17449                           fsr1h	equ	0xFE2
 17450                           fsr1l	equ	0xFE1
 17451                           indf2	equ	0xFDF
 17452                           postinc2	equ	0xFDE
 17453                           postdec2	equ	0xFDD
 17454                           plusw2	equ	0xFDB
 17455                           fsr2h	equ	0xFDA
 17456                           fsr2l	equ	0xFD9
 17457                           status	equ	0xFD8
 17458                           
 17459 ;; *************** function _vscp_check_pstorage *****************
 17460 ;; Defined at:
 17461 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17462 ;; Parameters:    Size  Location     Type
 17463 ;;		None
 17464 ;; Auto vars:     Size  Location     Type
 17465 ;;		None
 17466 ;; Return value:  Size  Location     Type
 17467 ;;                  1    wreg      unsigned char 
 17468 ;; Registers used:
 17469 ;;		wreg, status,2, status,0, cstack
 17470 ;; Tracked objects:
 17471 ;;		On entry : 1/1
 17472 ;;		On exit  : 0/0
 17473 ;;		Unchanged: 0/0
 17474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17475 ;;      Params:         0       0       0       0       0       0       0
 17476 ;;      Locals:         0       0       0       0       0       0       0
 17477 ;;      Temps:          0       0       0       0       0       0       0
 17478 ;;      Totals:         0       0       0       0       0       0       0
 17479 ;;Total ram usage:        0 bytes
 17480 ;; Hardware stack levels used:    1
 17481 ;; Hardware stack levels required when called:    4
 17482 ;; This function calls:
 17483 ;;		_vscp_writeNicknamePermanent
 17484 ;;		_vscp_getSegmentCRC
 17485 ;;		_vscp_setSegmentCRC
 17486 ;;		_vscp_setControlByte
 17487 ;; This function is called by:
 17488 ;;		_main
 17489 ;; This function uses a non-reentrant model
 17490 ;;
 17491                           
 17492                           	psect	text78
 17493  005BC4                     __ptext78:
 17494                           	opt stack 0
 17495  005BC4                     _vscp_check_pstorage:
 17496                           	opt stack 26
 17497                           
 17498                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17499                           
 17500                           ;incstack = 0
 17501                           ;incstack = 0
 17502  005BC4  ECF8  F02E         	call	_vscp_getSegmentCRC	;wreg free
 17503  005BC8  0BC0               	andlw	192
 17504  005BCA  0A40               	xorlw	64
 17505  005BCC  E102               	bnz	l9568
 17506                           
 17507                           ;vscp_firmware.c: 172: return !0;
 17508  005BCE  0E01               	movlw	1
 17509  005BD0  D00A               	goto	l1036
 17510  005BD2                     l9568:
 17511                           
 17512                           ;vscp_firmware.c: 173: }
 17513                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17514  005BD2  0EFF               	movlw	255
 17515  005BD4  ECC4  F02E         	call	_vscp_writeNicknamePermanent
 17516                           
 17517                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17518  005BD8  0E00               	movlw	0
 17519  005BDA  ECBB  F02E         	call	_vscp_setSegmentCRC
 17520                           
 17521                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17522  005BDE  0EA0               	movlw	160
 17523  005BE0  ECB2  F02E         	call	_vscp_setControlByte
 17524                           
 17525                           ;vscp_firmware.c: 185: return 0;
 17526  005BE4  0E00               	movlw	0
 17527  005BE6                     l1036:
 17528  005BE6  0012               	return	
 17529  005BE8                     __end_of_vscp_check_pstorage:
 17530                           	opt stack 0
 17531                           tblptru	equ	0xFF8
 17532                           tblptrh	equ	0xFF7
 17533                           tblptrl	equ	0xFF6
 17534                           tablat	equ	0xFF5
 17535                           prodh	equ	0xFF4
 17536                           prodl	equ	0xFF3
 17537                           postinc0	equ	0xFEE
 17538                           wreg	equ	0xFE8
 17539                           indf1	equ	0xFE7
 17540                           postdec1	equ	0xFE5
 17541                           fsr1h	equ	0xFE2
 17542                           fsr1l	equ	0xFE1
 17543                           indf2	equ	0xFDF
 17544                           postinc2	equ	0xFDE
 17545                           postdec2	equ	0xFDD
 17546                           plusw2	equ	0xFDB
 17547                           fsr2h	equ	0xFDA
 17548                           fsr2l	equ	0xFD9
 17549                           status	equ	0xFD8
 17550                           
 17551 ;; *************** function _vscp_setControlByte *****************
 17552 ;; Defined at:
 17553 ;;		line 2797 in file "../main.c"
 17554 ;; Parameters:    Size  Location     Type
 17555 ;;  ctrl            1    wreg     unsigned char 
 17556 ;; Auto vars:     Size  Location     Type
 17557 ;;  ctrl            1   16[COMRAM] unsigned char 
 17558 ;; Return value:  Size  Location     Type
 17559 ;;		None               void
 17560 ;; Registers used:
 17561 ;;		wreg, status,2, cstack
 17562 ;; Tracked objects:
 17563 ;;		On entry : 0/1
 17564 ;;		On exit  : 0/0
 17565 ;;		Unchanged: 0/0
 17566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17567 ;;      Params:         0       0       0       0       0       0       0
 17568 ;;      Locals:         1       0       0       0       0       0       0
 17569 ;;      Temps:          0       0       0       0       0       0       0
 17570 ;;      Totals:         1       0       0       0       0       0       0
 17571 ;;Total ram usage:        1 bytes
 17572 ;; Hardware stack levels used:    1
 17573 ;; Hardware stack levels required when called:    3
 17574 ;; This function calls:
 17575 ;;		_writeEEPROM
 17576 ;; This function is called by:
 17577 ;;		_vscp_check_pstorage
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           	psect	text79
 17582  005D64                     __ptext79:
 17583                           	opt stack 0
 17584  005D64                     _vscp_setControlByte:
 17585                           	opt stack 26
 17586                           
 17587                           ;incstack = 0
 17588                           ;incstack = 0
 17589                           ;vscp_setControlByte@ctrl stored from wreg
 17590  005D64  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17591                           
 17592                           ;main.c: 2798: writeEEPROM(0x03, ctrl);
 17593  005D68  6A0F               	clrf	?_writeEEPROM+1,c
 17594  005D6A  0E03               	movlw	3
 17595  005D6C  6E0E               	movwf	?_writeEEPROM,c
 17596  005D6E  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17597  005D72  EFAB  F02D         	goto	_writeEEPROM	;wreg free
 17598  005D76                     __end_of_vscp_setControlByte:
 17599                           	opt stack 0
 17600                           tblptru	equ	0xFF8
 17601                           tblptrh	equ	0xFF7
 17602                           tblptrl	equ	0xFF6
 17603                           tablat	equ	0xFF5
 17604                           prodh	equ	0xFF4
 17605                           prodl	equ	0xFF3
 17606                           postinc0	equ	0xFEE
 17607                           wreg	equ	0xFE8
 17608                           indf1	equ	0xFE7
 17609                           postdec1	equ	0xFE5
 17610                           fsr1h	equ	0xFE2
 17611                           fsr1l	equ	0xFE1
 17612                           indf2	equ	0xFDF
 17613                           postinc2	equ	0xFDE
 17614                           postdec2	equ	0xFDD
 17615                           plusw2	equ	0xFDB
 17616                           fsr2h	equ	0xFDA
 17617                           fsr2l	equ	0xFD9
 17618                           status	equ	0xFD8
 17619                           
 17620 ;; *************** function _vscp_setSegmentCRC *****************
 17621 ;; Defined at:
 17622 ;;		line 2788 in file "../main.c"
 17623 ;; Parameters:    Size  Location     Type
 17624 ;;  crc             1    wreg     unsigned char 
 17625 ;; Auto vars:     Size  Location     Type
 17626 ;;  crc             1   16[COMRAM] unsigned char 
 17627 ;; Return value:  Size  Location     Type
 17628 ;;		None               void
 17629 ;; Registers used:
 17630 ;;		wreg, status,2, cstack
 17631 ;; Tracked objects:
 17632 ;;		On entry : 0/0
 17633 ;;		On exit  : 0/0
 17634 ;;		Unchanged: 0/0
 17635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17636 ;;      Params:         0       0       0       0       0       0       0
 17637 ;;      Locals:         1       0       0       0       0       0       0
 17638 ;;      Temps:          0       0       0       0       0       0       0
 17639 ;;      Totals:         1       0       0       0       0       0       0
 17640 ;;Total ram usage:        1 bytes
 17641 ;; Hardware stack levels used:    1
 17642 ;; Hardware stack levels required when called:    3
 17643 ;; This function calls:
 17644 ;;		_writeEEPROM
 17645 ;; This function is called by:
 17646 ;;		_vscp_check_pstorage
 17647 ;;		_vscp_handleProbeState
 17648 ;;		_vscp_handleHeartbeat
 17649 ;;		_vscp_handleSetNickname
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           	psect	text80
 17654  005D76                     __ptext80:
 17655                           	opt stack 0
 17656  005D76                     _vscp_setSegmentCRC:
 17657                           	opt stack 25
 17658                           
 17659                           ;incstack = 0
 17660                           ;incstack = 0
 17661                           ;vscp_setSegmentCRC@crc stored from wreg
 17662  005D76  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17663                           
 17664                           ;main.c: 2789: writeEEPROM(0x02, crc);
 17665  005D7A  6A0F               	clrf	?_writeEEPROM+1,c
 17666  005D7C  0E02               	movlw	2
 17667  005D7E  6E0E               	movwf	?_writeEEPROM,c
 17668  005D80  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17669  005D84  EFAB  F02D         	goto	_writeEEPROM	;wreg free
 17670  005D88                     __end_of_vscp_setSegmentCRC:
 17671                           	opt stack 0
 17672                           tblptru	equ	0xFF8
 17673                           tblptrh	equ	0xFF7
 17674                           tblptrl	equ	0xFF6
 17675                           tablat	equ	0xFF5
 17676                           prodh	equ	0xFF4
 17677                           prodl	equ	0xFF3
 17678                           postinc0	equ	0xFEE
 17679                           wreg	equ	0xFE8
 17680                           indf1	equ	0xFE7
 17681                           postdec1	equ	0xFE5
 17682                           fsr1h	equ	0xFE2
 17683                           fsr1l	equ	0xFE1
 17684                           indf2	equ	0xFDF
 17685                           postinc2	equ	0xFDE
 17686                           postdec2	equ	0xFDD
 17687                           plusw2	equ	0xFDB
 17688                           fsr2h	equ	0xFDA
 17689                           fsr2l	equ	0xFD9
 17690                           status	equ	0xFD8
 17691                           
 17692 ;; *************** function _vscp_getSegmentCRC *****************
 17693 ;; Defined at:
 17694 ;;		line 2779 in file "../main.c"
 17695 ;; Parameters:    Size  Location     Type
 17696 ;;		None
 17697 ;; Auto vars:     Size  Location     Type
 17698 ;;		None
 17699 ;; Return value:  Size  Location     Type
 17700 ;;                  1    wreg      unsigned char 
 17701 ;; Registers used:
 17702 ;;		wreg, status,2, cstack
 17703 ;; Tracked objects:
 17704 ;;		On entry : 0/0
 17705 ;;		On exit  : 0/0
 17706 ;;		Unchanged: 0/0
 17707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17708 ;;      Params:         0       0       0       0       0       0       0
 17709 ;;      Locals:         0       0       0       0       0       0       0
 17710 ;;      Temps:          0       0       0       0       0       0       0
 17711 ;;      Totals:         0       0       0       0       0       0       0
 17712 ;;Total ram usage:        0 bytes
 17713 ;; Hardware stack levels used:    1
 17714 ;; Hardware stack levels required when called:    3
 17715 ;; This function calls:
 17716 ;;		_readEEPROM
 17717 ;; This function is called by:
 17718 ;;		_vscp_check_pstorage
 17719 ;;		_vscp_handleHeartbeat
 17720 ;; This function uses a non-reentrant model
 17721 ;;
 17722                           
 17723                           	psect	text81
 17724  005DF0                     __ptext81:
 17725                           	opt stack 0
 17726  005DF0                     _vscp_getSegmentCRC:
 17727                           	opt stack 25
 17728                           
 17729                           ;main.c: 2780: return readEEPROM(0x02);
 17730                           
 17731                           ;incstack = 0
 17732                           ;incstack = 0
 17733  005DF0  6A0F               	clrf	?_readEEPROM+1,c
 17734  005DF2  0E02               	movlw	2
 17735  005DF4  6E0E               	movwf	?_readEEPROM,c
 17736  005DF6  EFA8  F02E         	goto	_readEEPROM	;wreg free
 17737  005DFA                     __end_of_vscp_getSegmentCRC:
 17738                           	opt stack 0
 17739                           tblptru	equ	0xFF8
 17740                           tblptrh	equ	0xFF7
 17741                           tblptrl	equ	0xFF6
 17742                           tablat	equ	0xFF5
 17743                           prodh	equ	0xFF4
 17744                           prodl	equ	0xFF3
 17745                           postinc0	equ	0xFEE
 17746                           wreg	equ	0xFE8
 17747                           indf1	equ	0xFE7
 17748                           postdec1	equ	0xFE5
 17749                           fsr1h	equ	0xFE2
 17750                           fsr1l	equ	0xFE1
 17751                           indf2	equ	0xFDF
 17752                           postinc2	equ	0xFDE
 17753                           postdec2	equ	0xFDD
 17754                           plusw2	equ	0xFDB
 17755                           fsr2h	equ	0xFDA
 17756                           fsr2l	equ	0xFD9
 17757                           status	equ	0xFD8
 17758                           
 17759 ;; *************** function _readEEPROM *****************
 17760 ;; Defined at:
 17761 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 17762 ;; Parameters:    Size  Location     Type
 17763 ;;  address         2   13[COMRAM] unsigned short 
 17764 ;; Auto vars:     Size  Location     Type
 17765 ;;  data            1   16[COMRAM] unsigned char 
 17766 ;; Return value:  Size  Location     Type
 17767 ;;                  1    wreg      unsigned char 
 17768 ;; Registers used:
 17769 ;;		wreg, status,2
 17770 ;; Tracked objects:
 17771 ;;		On entry : 0/0
 17772 ;;		On exit  : 0/0
 17773 ;;		Unchanged: 0/0
 17774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17775 ;;      Params:         2       0       0       0       0       0       0
 17776 ;;      Locals:         2       0       0       0       0       0       0
 17777 ;;      Temps:          0       0       0       0       0       0       0
 17778 ;;      Totals:         4       0       0       0       0       0       0
 17779 ;;Total ram usage:        4 bytes
 17780 ;; Hardware stack levels used:    1
 17781 ;; Hardware stack levels required when called:    2
 17782 ;; This function calls:
 17783 ;;		Nothing
 17784 ;; This function is called by:
 17785 ;;		_doWork
 17786 ;;		_doOneSecondWork
 17787 ;;		_sendTempEvent
 17788 ;;		_getCalibrationValue
 17789 ;;		_writeCoeffs2Ram
 17790 ;;		_handle_sync
 17791 ;;		_vscp_readAppReg
 17792 ;;		_vscp_writeAppReg
 17793 ;;		_vscp_getGUID
 17794 ;;		_vscp_getUserID
 17795 ;;		_vscp_getManufacturerId
 17796 ;;		_vscp_getZone
 17797 ;;		_vscp_getSubzone
 17798 ;;		_vscp_readNicknamePermanent
 17799 ;;		_vscp_getSegmentCRC
 17800 ;; This function uses a non-reentrant model
 17801 ;;
 17802                           
 17803                           	psect	text82
 17804  005D50                     __ptext82:
 17805                           	opt stack 0
 17806  005D50                     _readEEPROM:
 17807                           	opt stack 26
 17808                           
 17809                           ;eeprom.c: 95: uint8_t data;
 17810                           ;eeprom.c: 100: EEADR = address & 0xff;
 17811                           
 17812                           ;incstack = 0
 17813                           ;incstack = 0
 17814  005D50  C00E  FFA9         	movff	readEEPROM@address,4009	;volatile
 17815                           
 17816                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 17817  005D54  9EA6               	bcf	4006,7,c	;volatile
 17818                           
 17819                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 17820  005D56  9CA6               	bcf	4006,6,c	;volatile
 17821                           
 17822                           ;eeprom.c: 103: EECON1bits.RD = 1;
 17823  005D58  80A6               	bsf	4006,0,c	;volatile
 17824  005D5A  F000               	nop		;# 
 17825                           
 17826                           ;eeprom.c: 105: data = EEDATA;
 17827  005D5C  CFA8 F011          	movff	4008,readEEPROM@data	;volatile
 17828                           
 17829                           ;eeprom.c: 107: return data;
 17830  005D60  5011               	movf	readEEPROM@data,w,c
 17831  005D62  0012               	return	
 17832  005D64                     __end_of_readEEPROM:
 17833                           	opt stack 0
 17834                           tblptru	equ	0xFF8
 17835                           tblptrh	equ	0xFF7
 17836                           tblptrl	equ	0xFF6
 17837                           tablat	equ	0xFF5
 17838                           prodh	equ	0xFF4
 17839                           prodl	equ	0xFF3
 17840                           postinc0	equ	0xFEE
 17841                           wreg	equ	0xFE8
 17842                           indf1	equ	0xFE7
 17843                           postdec1	equ	0xFE5
 17844                           fsr1h	equ	0xFE2
 17845                           fsr1l	equ	0xFE1
 17846                           indf2	equ	0xFDF
 17847                           postinc2	equ	0xFDE
 17848                           postdec2	equ	0xFDD
 17849                           plusw2	equ	0xFDB
 17850                           fsr2h	equ	0xFDA
 17851                           fsr2l	equ	0xFD9
 17852                           status	equ	0xFD8
 17853                           
 17854 ;; *************** function _vscp_writeNicknamePermanent *****************
 17855 ;; Defined at:
 17856 ;;		line 2770 in file "../main.c"
 17857 ;; Parameters:    Size  Location     Type
 17858 ;;  nickname        1    wreg     unsigned char 
 17859 ;; Auto vars:     Size  Location     Type
 17860 ;;  nickname        1   16[COMRAM] unsigned char 
 17861 ;; Return value:  Size  Location     Type
 17862 ;;		None               void
 17863 ;; Registers used:
 17864 ;;		wreg, status,2, cstack
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17870 ;;      Params:         0       0       0       0       0       0       0
 17871 ;;      Locals:         1       0       0       0       0       0       0
 17872 ;;      Temps:          0       0       0       0       0       0       0
 17873 ;;      Totals:         1       0       0       0       0       0       0
 17874 ;;Total ram usage:        1 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; Hardware stack levels required when called:    3
 17877 ;; This function calls:
 17878 ;;		_writeEEPROM
 17879 ;; This function is called by:
 17880 ;;		_vscp_check_pstorage
 17881 ;;		_vscp_handleProbeState
 17882 ;;		_vscp_handleHeartbeat
 17883 ;;		_vscp_handleSetNickname
 17884 ;;		_vscp_handleDropNickname
 17885 ;; This function uses a non-reentrant model
 17886 ;;
 17887                           
 17888                           	psect	text83
 17889  005D88                     __ptext83:
 17890                           	opt stack 0
 17891  005D88                     _vscp_writeNicknamePermanent:
 17892                           	opt stack 25
 17893                           
 17894                           ;incstack = 0
 17895                           ;incstack = 0
 17896                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17897  005D88  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17898                           
 17899                           ;main.c: 2771: writeEEPROM( 0x01, nickname );
 17900  005D8C  6A0F               	clrf	?_writeEEPROM+1,c
 17901  005D8E  0E01               	movlw	1
 17902  005D90  6E0E               	movwf	?_writeEEPROM,c
 17903  005D92  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17904  005D96  EFAB  F02D         	goto	_writeEEPROM	;wreg free
 17905  005D9A                     __end_of_vscp_writeNicknamePermanent:
 17906                           	opt stack 0
 17907                           tblptru	equ	0xFF8
 17908                           tblptrh	equ	0xFF7
 17909                           tblptrl	equ	0xFF6
 17910                           tablat	equ	0xFF5
 17911                           prodh	equ	0xFF4
 17912                           prodl	equ	0xFF3
 17913                           postinc0	equ	0xFEE
 17914                           wreg	equ	0xFE8
 17915                           indf1	equ	0xFE7
 17916                           postdec1	equ	0xFE5
 17917                           fsr1h	equ	0xFE2
 17918                           fsr1l	equ	0xFE1
 17919                           indf2	equ	0xFDF
 17920                           postinc2	equ	0xFDE
 17921                           postdec2	equ	0xFDD
 17922                           plusw2	equ	0xFDB
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927 ;; *************** function _writeEEPROM *****************
 17928 ;; Defined at:
 17929 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  address         2   13[COMRAM] unsigned short 
 17932 ;;  data            1   15[COMRAM] unsigned char 
 17933 ;; Auto vars:     Size  Location     Type
 17934 ;;		None
 17935 ;; Return value:  Size  Location     Type
 17936 ;;		None               void
 17937 ;; Registers used:
 17938 ;;		wreg, status,2
 17939 ;; Tracked objects:
 17940 ;;		On entry : 0/0
 17941 ;;		On exit  : 0/0
 17942 ;;		Unchanged: 0/0
 17943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17944 ;;      Params:         3       0       0       0       0       0       0
 17945 ;;      Locals:         0       0       0       0       0       0       0
 17946 ;;      Temps:          0       0       0       0       0       0       0
 17947 ;;      Totals:         3       0       0       0       0       0       0
 17948 ;;Total ram usage:        3 bytes
 17949 ;; Hardware stack levels used:    1
 17950 ;; Hardware stack levels required when called:    2
 17951 ;; This function calls:
 17952 ;;		Nothing
 17953 ;; This function is called by:
 17954 ;;		_main
 17955 ;;		_doWork
 17956 ;;		_init_app_eeprom
 17957 ;;		_vscp_writeAppReg
 17958 ;;		_vscp_setGUID
 17959 ;;		_vscp_setUserID
 17960 ;;		_vscp_setManufacturerId
 17961 ;;		_vscp_goBootloaderMode
 17962 ;;		_vscp_writeNicknamePermanent
 17963 ;;		_vscp_setSegmentCRC
 17964 ;;		_vscp_setControlByte
 17965 ;; This function uses a non-reentrant model
 17966 ;;
 17967                           
 17968                           	psect	text84
 17969  005B56                     __ptext84:
 17970                           	opt stack 0
 17971  005B56                     _writeEEPROM:
 17972                           	opt stack 27
 17973                           
 17974                           ;eeprom.c: 30: EEADR = address & 0xff;
 17975                           
 17976                           ;incstack = 0
 17977                           ;incstack = 0
 17978  005B56  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17979                           
 17980                           ;eeprom.c: 31: EEDATA = data;
 17981  005B5A  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17982                           
 17983                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 17984  005B5E  9EA6               	bcf	4006,7,c	;volatile
 17985                           
 17986                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 17987  005B60  9CA6               	bcf	4006,6,c	;volatile
 17988                           
 17989                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 17990  005B62  84A6               	bsf	4006,2,c	;volatile
 17991                           
 17992                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 17993  005B64  9EF2               	bcf	intcon,7,c	;volatile
 17994                           
 17995                           ;eeprom.c: 38: EECON2 = 0x55;
 17996  005B66  0E55               	movlw	85
 17997  005B68  6EA7               	movwf	4007,c	;volatile
 17998                           
 17999                           ;eeprom.c: 39: EECON2 = 0xaa;
 18000  005B6A  0EAA               	movlw	170
 18001  005B6C  6EA7               	movwf	4007,c	;volatile
 18002                           
 18003                           ;eeprom.c: 40: EECON1bits.WR = 1;
 18004  005B6E  82A6               	bsf	4006,1,c	;volatile
 18005                           
 18006                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 18007  005B70  8EF2               	bsf	intcon,7,c	;volatile
 18008  005B72                     l918:
 18009  005B72  A8A1               	btfss	4001,4,c	;volatile
 18010  005B74  D7FE               	goto	l918
 18011                           
 18012                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 18013  005B76  98A1               	bcf	4001,4,c	;volatile
 18014                           
 18015                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 18016  005B78  94A6               	bcf	4006,2,c	;volatile
 18017  005B7A  0012               	return	
 18018  005B7C                     __end_of_writeEEPROM:
 18019                           	opt stack 0
 18020                           tblptru	equ	0xFF8
 18021                           tblptrh	equ	0xFF7
 18022                           tblptrl	equ	0xFF6
 18023                           tablat	equ	0xFF5
 18024                           prodh	equ	0xFF4
 18025                           prodl	equ	0xFF3
 18026                           intcon	equ	0xFF2
 18027                           postinc0	equ	0xFEE
 18028                           wreg	equ	0xFE8
 18029                           indf1	equ	0xFE7
 18030                           postdec1	equ	0xFE5
 18031                           fsr1h	equ	0xFE2
 18032                           fsr1l	equ	0xFE1
 18033                           indf2	equ	0xFDF
 18034                           postinc2	equ	0xFDE
 18035                           postdec2	equ	0xFDD
 18036                           plusw2	equ	0xFDB
 18037                           fsr2h	equ	0xFDA
 18038                           fsr2l	equ	0xFD9
 18039                           status	equ	0xFD8
 18040                           
 18041 ;; *************** function _init *****************
 18042 ;; Defined at:
 18043 ;;		line 888 in file "../main.c"
 18044 ;; Parameters:    Size  Location     Type
 18045 ;;		None
 18046 ;; Auto vars:     Size  Location     Type
 18047 ;;		None
 18048 ;; Return value:  Size  Location     Type
 18049 ;;		None               void
 18050 ;; Registers used:
 18051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 18052 ;; Tracked objects:
 18053 ;;		On entry : 0/0
 18054 ;;		On exit  : 1/1
 18055 ;;		Unchanged: 0/0
 18056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18057 ;;      Params:         0       0       0       0       0       0       0
 18058 ;;      Locals:         0       0       0       0       0       0       0
 18059 ;;      Temps:          0       0       0       0       0       0       0
 18060 ;;      Totals:         0       0       0       0       0       0       0
 18061 ;;Total ram usage:        0 bytes
 18062 ;; Hardware stack levels used:    1
 18063 ;; Hardware stack levels required when called:    5
 18064 ;; This function calls:
 18065 ;;		_WriteTimer0
 18066 ;;		_ConvertADC
 18067 ;;		_init_app_ram
 18068 ;;		_OpenTimer0
 18069 ;;		_OpenADC
 18070 ;;		_ECANInitialize
 18071 ;; This function is called by:
 18072 ;;		_main
 18073 ;; This function uses a non-reentrant model
 18074 ;;
 18075                           
 18076                           	psect	text85
 18077  0058F4                     __ptext85:
 18078                           	opt stack 0
 18079  0058F4                     _init:
 18080                           	opt stack 25
 18081                           
 18082                           ;main.c: 892: init_app_ram();
 18083                           
 18084                           ;incstack = 0
 18085                           ;incstack = 0
 18086  0058F4  EC1C  F02C         	call	_init_app_ram	;wreg free
 18087                           
 18088                           ; BSR set to: 1
 18089                           ;main.c: 900: TRISA = 0x07;
 18090  0058F8  0E07               	movlw	7
 18091  0058FA  6E92               	movwf	3986,c	;volatile
 18092                           
 18093                           ; BSR set to: 1
 18094                           ;main.c: 911: TRISB = 0x1B;
 18095  0058FC  0E1B               	movlw	27
 18096  0058FE  6E93               	movwf	3987,c	;volatile
 18097                           
 18098                           ; BSR set to: 1
 18099                           ;main.c: 921: TRISC = 0x01;
 18100  005900  0E01               	movlw	1
 18101  005902  6E94               	movwf	3988,c	;volatile
 18102                           
 18103                           ; BSR set to: 1
 18104                           ;main.c: 922: PORTC = 0x00;
 18105  005904  6A82               	clrf	3970,c	;volatile
 18106                           
 18107                           ; BSR set to: 1
 18108                           ;main.c: 924: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18109  005906  0E92               	movlw	146
 18110  005908  EC25  F02E         	call	_OpenTimer0
 18111                           
 18112                           ; BSR set to: 1
 18113                           ;main.c: 925: WriteTimer0(0xfb1d);
 18114  00590C  0EFB               	movlw	251
 18115  00590E  6E0F               	movwf	?_WriteTimer0+1,c
 18116  005910  0E1D               	movlw	29
 18117  005912  6E0E               	movwf	?_WriteTimer0,c
 18118  005914  ECCD  F02E         	call	_WriteTimer0	;wreg free
 18119                           
 18120                           ; BSR set to: 1
 18121                           ;main.c: 927: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18122                           ;main.c: 928: 0b10000111 & 0b11111111 & 0b11110100 &
 18123                           ;main.c: 929: 0b11111110 & 0b11111101,
 18124                           ;main.c: 930: 15);
 18125  005918  0E84               	movlw	132
 18126  00591A  6E0E               	movwf	?_OpenADC,c
 18127  00591C  0E0F               	movlw	15
 18128  00591E  6E0F               	movwf	?_OpenADC+1,c
 18129  005920  0EEF               	movlw	239
 18130  005922  EC7D  F02A         	call	_OpenADC
 18131                           
 18132                           ; BSR set to: 1
 18133                           ;main.c: 933: ECANInitialize();
 18134  005926  ECC0  F028         	call	_ECANInitialize	;wreg free
 18135                           
 18136                           ;main.c: 957: INTCONbits.GIE = 1;
 18137  00592A  8EF2               	bsf	intcon,7,c	;volatile
 18138                           
 18139                           ;main.c: 959: ConvertADC();
 18140  00592C  EF03  F02F         	goto	_ConvertADC	;wreg free
 18141  005930                     __end_of_init:
 18142                           	opt stack 0
 18143                           tblptru	equ	0xFF8
 18144                           tblptrh	equ	0xFF7
 18145                           tblptrl	equ	0xFF6
 18146                           tablat	equ	0xFF5
 18147                           prodh	equ	0xFF4
 18148                           prodl	equ	0xFF3
 18149                           intcon	equ	0xFF2
 18150                           postinc0	equ	0xFEE
 18151                           wreg	equ	0xFE8
 18152                           indf1	equ	0xFE7
 18153                           postdec1	equ	0xFE5
 18154                           fsr1h	equ	0xFE2
 18155                           fsr1l	equ	0xFE1
 18156                           indf2	equ	0xFDF
 18157                           postinc2	equ	0xFDE
 18158                           postdec2	equ	0xFDD
 18159                           plusw2	equ	0xFDB
 18160                           fsr2h	equ	0xFDA
 18161                           fsr2l	equ	0xFD9
 18162                           status	equ	0xFD8
 18163                           
 18164 ;; *************** function _ECANInitialize *****************
 18165 ;; Defined at:
 18166 ;;		line 168 in file "../ECAN.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;		None
 18169 ;; Auto vars:     Size  Location     Type
 18170 ;;		None
 18171 ;; Return value:  Size  Location     Type
 18172 ;;		None               void
 18173 ;; Registers used:
 18174 ;;		wreg, status,2, status,0, cstack
 18175 ;; Tracked objects:
 18176 ;;		On entry : F/1
 18177 ;;		On exit  : 1/1
 18178 ;;		Unchanged: 0/0
 18179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18180 ;;      Params:         0       0       0       0       0       0       0
 18181 ;;      Locals:         0       0       0       0       0       0       0
 18182 ;;      Temps:          0       0       0       0       0       0       0
 18183 ;;      Totals:         0       0       0       0       0       0       0
 18184 ;;Total ram usage:        0 bytes
 18185 ;; Hardware stack levels used:    1
 18186 ;; Hardware stack levels required when called:    3
 18187 ;; This function calls:
 18188 ;;		_ECANSetOperationMode
 18189 ;; This function is called by:
 18190 ;;		_init
 18191 ;; This function uses a non-reentrant model
 18192 ;;
 18193                           
 18194                           	psect	text86
 18195  005180                     __ptext86:
 18196                           	opt stack 0
 18197  005180                     _ECANInitialize:
 18198                           	opt stack 26
 18199                           
 18200                           ; BSR set to: 1
 18201                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18202                           
 18203                           ;incstack = 0
 18204                           ;incstack = 0
 18205  005180  0E80               	movlw	128
 18206  005182  EC7E  F02E         	call	_ECANSetOperationMode
 18207                           
 18208                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18209  005186  0E09               	movlw	9
 18210  005188  6E70               	movwf	3952,c	;volatile
 18211                           
 18212                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18213  00518A  0EFC               	movlw	252
 18214  00518C  6E71               	movwf	3953,c	;volatile
 18215                           
 18216                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18217                           ;ECAN.c: 181: (0 << 6) |
 18218                           ;ECAN.c: 182: (2-1);
 18219  00518E  0E01               	movlw	1
 18220  005190  6E72               	movwf	3954,c	;volatile
 18221                           
 18222                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18223  005192  0E20               	movlw	32
 18224  005194  6E73               	movwf	3955,c	;volatile
 18225                           
 18226                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18227  005196  8E77               	bsf	3959,7,c	;volatile
 18228                           
 18229                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18230  005198  9C77               	bcf	3959,6,c	;volatile
 18231                           
 18232                           ;ECAN.c: 205: RXB0CON = 0;
 18233  00519A  6A60               	clrf	3936,c	;volatile
 18234                           
 18235                           ;ECAN.c: 211: RXB1CON = 0;
 18236  00519C  010F               	movlb	15	; () banked
 18237  00519E  6B50               	clrf	80,b	;volatile
 18238                           
 18239                           ; BSR set to: 15
 18240                           ;ECAN.c: 221: B0CON = 0;
 18241  0051A0  010E               	movlb	14	; () banked
 18242  0051A2  6B20               	clrf	32,b	;volatile
 18243                           
 18244                           ; BSR set to: 14
 18245                           ;ECAN.c: 231: B1CON = 0;
 18246  0051A4  6B30               	clrf	48,b	;volatile
 18247                           
 18248                           ; BSR set to: 14
 18249                           ;ECAN.c: 241: B2CON = 0;
 18250  0051A6  6B40               	clrf	64,b	;volatile
 18251                           
 18252                           ; BSR set to: 14
 18253                           ;ECAN.c: 254: B3CON = 0 << 2;
 18254  0051A8  6B50               	clrf	80,b	;volatile
 18255                           
 18256                           ; BSR set to: 14
 18257                           ;ECAN.c: 264: B4CON = 0 << 2;
 18258  0051AA  6B60               	clrf	96,b	;volatile
 18259                           
 18260                           ; BSR set to: 14
 18261                           ;ECAN.c: 274: B5CON = 0 << 2;
 18262  0051AC  6B70               	clrf	112,b	;volatile
 18263                           
 18264                           ; BSR set to: 14
 18265                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18266  0051AE  0EE0               	movlw	224
 18267  0051B0  010D               	movlb	13	; () banked
 18268  0051B2  6FF8               	movwf	248,b	;volatile
 18269                           
 18270                           ; BSR set to: 13
 18271                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18272  0051B4  010F               	movlb	15	; () banked
 18273  0051B6  6B00               	clrf	0,b	;volatile
 18274                           
 18275                           ; BSR set to: 15
 18276  0051B8  0E08               	movlw	8
 18277  0051BA  6F01               	movwf	1,b	;volatile
 18278                           
 18279                           ; BSR set to: 15
 18280  0051BC  6B02               	clrf	2,b	;volatile
 18281                           
 18282                           ; BSR set to: 15
 18283  0051BE  6B03               	clrf	3,b	;volatile
 18284                           
 18285                           ; BSR set to: 15
 18286                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18287  0051C0  6B04               	clrf	4,b	;volatile
 18288                           
 18289                           ; BSR set to: 15
 18290  0051C2  0EE8               	movlw	232
 18291  0051C4  6F05               	movwf	5,b	;volatile
 18292                           
 18293                           ; BSR set to: 15
 18294  0051C6  0E1A               	movlw	26
 18295  0051C8  6F06               	movwf	6,b	;volatile
 18296                           
 18297                           ; BSR set to: 15
 18298  0051CA  6B07               	clrf	7,b	;volatile
 18299                           
 18300                           ; BSR set to: 15
 18301                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18302  0051CC  0E03               	movlw	3
 18303  0051CE  010D               	movlb	13	; () banked
 18304  0051D0  6FD4               	movwf	212,b	;volatile
 18305                           
 18306                           ; BSR set to: 13
 18307                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18308  0051D2  6BD5               	clrf	213,b	;volatile
 18309                           
 18310                           ; BSR set to: 13
 18311                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18312  0051D4  6BE0               	clrf	224,b	;volatile
 18313                           
 18314                           ; BSR set to: 13
 18315                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18316  0051D6  0E11               	movlw	17
 18317  0051D8  6FE1               	movwf	225,b	;volatile
 18318                           
 18319                           ; BSR set to: 13
 18320                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18321  0051DA  6FE2               	movwf	226,b	;volatile
 18322                           
 18323                           ; BSR set to: 13
 18324                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18325  0051DC  6BE3               	clrf	227,b	;volatile
 18326                           
 18327                           ; BSR set to: 13
 18328                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18329  0051DE  6BE4               	clrf	228,b	;volatile
 18330                           
 18331                           ; BSR set to: 13
 18332                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18333  0051E0  6BE5               	clrf	229,b	;volatile
 18334                           
 18335                           ; BSR set to: 13
 18336                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18337  0051E2  6BE6               	clrf	230,b	;volatile
 18338                           
 18339                           ; BSR set to: 13
 18340                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18341  0051E4  6BE7               	clrf	231,b	;volatile
 18342                           
 18343                           ; BSR set to: 13
 18344                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18345  0051E6  0E54               	movlw	84
 18346  0051E8  6FF0               	movwf	240,b	;volatile
 18347                           
 18348                           ; BSR set to: 13
 18349                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18350  0051EA  0E05               	movlw	5
 18351  0051EC  6FF1               	movwf	241,b	;volatile
 18352                           
 18353                           ; BSR set to: 13
 18354                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18355  0051EE  6BF2               	clrf	242,b	;volatile
 18356                           
 18357                           ; BSR set to: 13
 18358                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18359  0051F0  6BF2               	clrf	242,b	;volatile
 18360                           
 18361                           ; BSR set to: 13
 18362                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18363  0051F2  0E0F               	movlw	15
 18364  0051F4  010F               	movlb	15	; () banked
 18365  0051F6  6F18               	movwf	24,b	;volatile
 18366                           
 18367                           ; BSR set to: 15
 18368  0051F8  0EE0               	movlw	224
 18369  0051FA  6F19               	movwf	25,b	;volatile
 18370                           
 18371                           ; BSR set to: 15
 18372  0051FC  6B1A               	clrf	26,b	;volatile
 18373                           
 18374                           ; BSR set to: 15
 18375  0051FE  6B1B               	clrf	27,b	;volatile
 18376                           
 18377                           ; BSR set to: 15
 18378                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18379  005200  8719               	bsf	25,3,b	;volatile
 18380                           
 18381                           ; BSR set to: 15
 18382                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18383  005202  0E0F               	movlw	15
 18384  005204  6F1C               	movwf	28,b	;volatile
 18385                           
 18386                           ; BSR set to: 15
 18387  005206  0EE0               	movlw	224
 18388  005208  6F1D               	movwf	29,b	;volatile
 18389                           
 18390                           ; BSR set to: 15
 18391  00520A  691E               	setf	30,b	;volatile
 18392                           
 18393                           ; BSR set to: 15
 18394  00520C  6B1F               	clrf	31,b	;volatile
 18395                           
 18396                           ; BSR set to: 15
 18397                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18398  00520E  871D               	bsf	29,3,b	;volatile
 18399                           
 18400                           ; BSR set to: 15
 18401                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18402  005210  0E00               	movlw	0
 18403  005212  EF7E  F02E         	goto	_ECANSetOperationMode
 18404  005216                     __end_of_ECANInitialize:
 18405                           	opt stack 0
 18406                           tblptru	equ	0xFF8
 18407                           tblptrh	equ	0xFF7
 18408                           tblptrl	equ	0xFF6
 18409                           tablat	equ	0xFF5
 18410                           prodh	equ	0xFF4
 18411                           prodl	equ	0xFF3
 18412                           intcon	equ	0xFF2
 18413                           postinc0	equ	0xFEE
 18414                           wreg	equ	0xFE8
 18415                           indf1	equ	0xFE7
 18416                           postdec1	equ	0xFE5
 18417                           fsr1h	equ	0xFE2
 18418                           fsr1l	equ	0xFE1
 18419                           indf2	equ	0xFDF
 18420                           postinc2	equ	0xFDE
 18421                           postdec2	equ	0xFDD
 18422                           plusw2	equ	0xFDB
 18423                           fsr2h	equ	0xFDA
 18424                           fsr2l	equ	0xFD9
 18425                           status	equ	0xFD8
 18426                           
 18427 ;; *************** function _ECANSetOperationMode *****************
 18428 ;; Defined at:
 18429 ;;		line 1012 in file "../ECAN.c"
 18430 ;; Parameters:    Size  Location     Type
 18431 ;;  mode            1    wreg     enum E16337
 18432 ;; Auto vars:     Size  Location     Type
 18433 ;;  mode            1   13[COMRAM] enum E16337
 18434 ;; Return value:  Size  Location     Type
 18435 ;;		None               void
 18436 ;; Registers used:
 18437 ;;		wreg, status,2, status,0
 18438 ;; Tracked objects:
 18439 ;;		On entry : 1/1
 18440 ;;		On exit  : 1/1
 18441 ;;		Unchanged: 1/0
 18442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18443 ;;      Params:         0       0       0       0       0       0       0
 18444 ;;      Locals:         1       0       0       0       0       0       0
 18445 ;;      Temps:          0       0       0       0       0       0       0
 18446 ;;      Totals:         1       0       0       0       0       0       0
 18447 ;;Total ram usage:        1 bytes
 18448 ;; Hardware stack levels used:    1
 18449 ;; Hardware stack levels required when called:    2
 18450 ;; This function calls:
 18451 ;;		Nothing
 18452 ;; This function is called by:
 18453 ;;		_ECANInitialize
 18454 ;; This function uses a non-reentrant model
 18455 ;;
 18456                           
 18457                           	psect	text87
 18458  005CFC                     __ptext87:
 18459                           	opt stack 0
 18460  005CFC                     _ECANSetOperationMode:
 18461                           	opt stack 26
 18462                           
 18463                           ;incstack = 0
 18464                           ;incstack = 0
 18465                           ;ECANSetOperationMode@mode stored from wreg
 18466  005CFC  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18467                           
 18468                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18469  005D00  0E1F               	movlw	31
 18470  005D02  166F               	andwf	3951,f,c	;volatile
 18471                           
 18472                           ;ECAN.c: 1014: CANCON |= mode;
 18473  005D04  500E               	movf	ECANSetOperationMode@mode,w,c
 18474  005D06  126F               	iorwf	3951,f,c	;volatile
 18475  005D08                     l8406:
 18476  005D08  506F               	movf	3951,w,c	;volatile
 18477  005D0A  0BE0               	andlw	224
 18478  005D0C  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18479  005D0E  B4D8               	btfsc	status,2,c
 18480  005D10  0012               	return	
 18481  005D12  D7FA               	goto	l8406
 18482  005D14                     __end_of_ECANSetOperationMode:
 18483                           	opt stack 0
 18484                           tblptru	equ	0xFF8
 18485                           tblptrh	equ	0xFF7
 18486                           tblptrl	equ	0xFF6
 18487                           tablat	equ	0xFF5
 18488                           prodh	equ	0xFF4
 18489                           prodl	equ	0xFF3
 18490                           intcon	equ	0xFF2
 18491                           postinc0	equ	0xFEE
 18492                           wreg	equ	0xFE8
 18493                           indf1	equ	0xFE7
 18494                           postdec1	equ	0xFE5
 18495                           fsr1h	equ	0xFE2
 18496                           fsr1l	equ	0xFE1
 18497                           indf2	equ	0xFDF
 18498                           postinc2	equ	0xFDE
 18499                           postdec2	equ	0xFDD
 18500                           plusw2	equ	0xFDB
 18501                           fsr2h	equ	0xFDA
 18502                           fsr2l	equ	0xFD9
 18503                           status	equ	0xFD8
 18504                           
 18505 ;; *************** function _OpenADC *****************
 18506 ;; Defined at:
 18507 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18508 ;; Parameters:    Size  Location     Type
 18509 ;;  config          1    wreg     unsigned char 
 18510 ;;  config2         1   13[COMRAM] unsigned char 
 18511 ;;  portconfig      1   14[COMRAM] unsigned char 
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;  config          1   17[COMRAM] unsigned char 
 18514 ;; Return value:  Size  Location     Type
 18515 ;;		None               void
 18516 ;; Registers used:
 18517 ;;		wreg, status,2, status,0
 18518 ;; Tracked objects:
 18519 ;;		On entry : F/1
 18520 ;;		On exit  : F/1
 18521 ;;		Unchanged: F/0
 18522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18523 ;;      Params:         2       0       0       0       0       0       0
 18524 ;;      Locals:         1       0       0       0       0       0       0
 18525 ;;      Temps:          2       0       0       0       0       0       0
 18526 ;;      Totals:         5       0       0       0       0       0       0
 18527 ;;Total ram usage:        5 bytes
 18528 ;; Hardware stack levels used:    1
 18529 ;; Hardware stack levels required when called:    2
 18530 ;; This function calls:
 18531 ;;		Nothing
 18532 ;; This function is called by:
 18533 ;;		_init
 18534 ;; This function uses a non-reentrant model
 18535 ;;
 18536                           
 18537                           	psect	text88
 18538  0054FA                     __ptext88:
 18539                           	opt stack 0
 18540  0054FA                     _OpenADC:
 18541                           	opt stack 27
 18542                           
 18543                           ;incstack = 0
 18544                           ;incstack = 0
 18545                           ;OpenADC@config stored from wreg
 18546  0054FA  CFE8 F012          	movff	wreg,OpenADC@config
 18547                           
 18548                           ; BSR set to: 1
 18549  0054FE  6AC2               	clrf	4034,c	;volatile
 18550  005500  6AC0               	clrf	4032,c	;volatile
 18551                           
 18552                           ; BSR set to: 1
 18553  005502  90D8               	bcf	status,0,c
 18554  005504  300E               	rrcf	OpenADC@config2,w,c
 18555  005506  0B3C               	andlw	60
 18556  005508  6EC2               	movwf	4034,c	;volatile
 18557  00550A  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18558  00550E  3A10               	swapf	??_OpenADC,f,c
 18559  005510  0EF0               	movlw	240
 18560  005512  1610               	andwf	??_OpenADC,f,c
 18561  005514  0E30               	movlw	48
 18562  005516  1610               	andwf	??_OpenADC,f,c
 18563  005518  500F               	movf	OpenADC@portconfig,w,c
 18564  00551A  0B0F               	andlw	15
 18565  00551C  1010               	iorwf	??_OpenADC,w,c
 18566  00551E  6EC1               	movwf	4033,c	;volatile
 18567  005520  C012  F010         	movff	OpenADC@config,??_OpenADC
 18568  005524  90D8               	bcf	status,0,c
 18569  005526  3610               	rlcf	??_OpenADC,f,c
 18570  005528  90D8               	bcf	status,0,c
 18571  00552A  3610               	rlcf	??_OpenADC,f,c
 18572  00552C  0E38               	movlw	56
 18573  00552E  1610               	andwf	??_OpenADC,f,c
 18574  005530  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18575  005534  3A11               	swapf	??_OpenADC+1,f,c
 18576  005536  0E0F               	movlw	15
 18577  005538  1611               	andwf	??_OpenADC+1,f,c
 18578  00553A  0E07               	movlw	7
 18579  00553C  1611               	andwf	??_OpenADC+1,f,c
 18580  00553E  5012               	movf	OpenADC@config,w,c
 18581  005540  0B80               	andlw	128
 18582  005542  1011               	iorwf	??_OpenADC+1,w,c
 18583  005544  1010               	iorwf	??_OpenADC,w,c
 18584  005546  6EC0               	movwf	4032,c	;volatile
 18585                           
 18586                           ; BSR set to: 1
 18587  005548  AE0E               	btfss	OpenADC@config2,7,c
 18588  00554A  D003               	goto	l1303
 18589                           
 18590                           ; BSR set to: 1
 18591  00554C  9C9E               	bcf	3998,6,c	;volatile
 18592  00554E  8C9D               	bsf	3997,6,c	;volatile
 18593  005550  8CF2               	bsf	intcon,6,c	;volatile
 18594  005552                     l1303:
 18595                           
 18596                           ; BSR set to: 1
 18597  005552  80C2               	bsf	4034,0,c	;volatile
 18598                           
 18599                           ; BSR set to: 1
 18600  005554  0012               	return	
 18601  005556                     __end_of_OpenADC:
 18602                           	opt stack 0
 18603                           tblptru	equ	0xFF8
 18604                           tblptrh	equ	0xFF7
 18605                           tblptrl	equ	0xFF6
 18606                           tablat	equ	0xFF5
 18607                           prodh	equ	0xFF4
 18608                           prodl	equ	0xFF3
 18609                           intcon	equ	0xFF2
 18610                           postinc0	equ	0xFEE
 18611                           wreg	equ	0xFE8
 18612                           indf1	equ	0xFE7
 18613                           postdec1	equ	0xFE5
 18614                           fsr1h	equ	0xFE2
 18615                           fsr1l	equ	0xFE1
 18616                           indf2	equ	0xFDF
 18617                           postinc2	equ	0xFDE
 18618                           postdec2	equ	0xFDD
 18619                           plusw2	equ	0xFDB
 18620                           fsr2h	equ	0xFDA
 18621                           fsr2l	equ	0xFD9
 18622                           status	equ	0xFD8
 18623                           
 18624 ;; *************** function _OpenTimer0 *****************
 18625 ;; Defined at:
 18626 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18627 ;; Parameters:    Size  Location     Type
 18628 ;;  config          1    wreg     unsigned char 
 18629 ;; Auto vars:     Size  Location     Type
 18630 ;;  config          1   13[COMRAM] unsigned char 
 18631 ;; Return value:  Size  Location     Type
 18632 ;;		None               void
 18633 ;; Registers used:
 18634 ;;		wreg, status,2, status,0
 18635 ;; Tracked objects:
 18636 ;;		On entry : F/1
 18637 ;;		On exit  : F/1
 18638 ;;		Unchanged: F/0
 18639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18640 ;;      Params:         0       0       0       0       0       0       0
 18641 ;;      Locals:         1       0       0       0       0       0       0
 18642 ;;      Temps:          0       0       0       0       0       0       0
 18643 ;;      Totals:         1       0       0       0       0       0       0
 18644 ;;Total ram usage:        1 bytes
 18645 ;; Hardware stack levels used:    1
 18646 ;; Hardware stack levels required when called:    2
 18647 ;; This function calls:
 18648 ;;		Nothing
 18649 ;; This function is called by:
 18650 ;;		_init
 18651 ;; This function uses a non-reentrant model
 18652 ;;
 18653                           
 18654                           	psect	text89
 18655  005C4A                     __ptext89:
 18656                           	opt stack 0
 18657  005C4A                     _OpenTimer0:
 18658                           	opt stack 27
 18659                           
 18660                           ; BSR set to: 1
 18661                           ;incstack = 0
 18662                           ;incstack = 0
 18663                           ;OpenTimer0@config stored from wreg
 18664  005C4A  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18665                           
 18666                           ; BSR set to: 1
 18667  005C4E  500E               	movf	OpenTimer0@config,w,c
 18668  005C50  0B7F               	andlw	127
 18669  005C52  6ED5               	movwf	4053,c	;volatile
 18670                           
 18671                           ; BSR set to: 1
 18672  005C54  6AD7               	clrf	4055,c	;volatile
 18673                           
 18674                           ; BSR set to: 1
 18675  005C56  6AD6               	clrf	4054,c	;volatile
 18676                           
 18677                           ; BSR set to: 1
 18678  005C58  94F2               	bcf	intcon,2,c	;volatile
 18679                           
 18680                           ; BSR set to: 1
 18681  005C5A  AE0E               	btfss	OpenTimer0@config,7,c
 18682  005C5C  D002               	goto	l1317
 18683                           
 18684                           ; BSR set to: 1
 18685  005C5E  8AF2               	bsf	intcon,5,c	;volatile
 18686  005C60  D001               	goto	l1318
 18687  005C62                     l1317:
 18688                           
 18689                           ; BSR set to: 1
 18690  005C62  9AF2               	bcf	intcon,5,c	;volatile
 18691  005C64                     l1318:
 18692                           
 18693                           ; BSR set to: 1
 18694  005C64  8ED5               	bsf	4053,7,c	;volatile
 18695                           
 18696                           ; BSR set to: 1
 18697  005C66  0012               	return	
 18698  005C68                     __end_of_OpenTimer0:
 18699                           	opt stack 0
 18700                           tblptru	equ	0xFF8
 18701                           tblptrh	equ	0xFF7
 18702                           tblptrl	equ	0xFF6
 18703                           tablat	equ	0xFF5
 18704                           prodh	equ	0xFF4
 18705                           prodl	equ	0xFF3
 18706                           intcon	equ	0xFF2
 18707                           postinc0	equ	0xFEE
 18708                           wreg	equ	0xFE8
 18709                           indf1	equ	0xFE7
 18710                           postdec1	equ	0xFE5
 18711                           fsr1h	equ	0xFE2
 18712                           fsr1l	equ	0xFE1
 18713                           indf2	equ	0xFDF
 18714                           postinc2	equ	0xFDE
 18715                           postdec2	equ	0xFDD
 18716                           plusw2	equ	0xFDB
 18717                           fsr2h	equ	0xFDA
 18718                           fsr2l	equ	0xFD9
 18719                           status	equ	0xFD8
 18720                           
 18721 ;; *************** function _init_app_ram *****************
 18722 ;; Defined at:
 18723 ;;		line 987 in file "../main.c"
 18724 ;; Parameters:    Size  Location     Type
 18725 ;;		None
 18726 ;; Auto vars:     Size  Location     Type
 18727 ;;  i               1   32[COMRAM] unsigned char 
 18728 ;; Return value:  Size  Location     Type
 18729 ;;		None               void
 18730 ;; Registers used:
 18731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18732 ;; Tracked objects:
 18733 ;;		On entry : 0/0
 18734 ;;		On exit  : F/1
 18735 ;;		Unchanged: 0/0
 18736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18737 ;;      Params:         0       0       0       0       0       0       0
 18738 ;;      Locals:         1       0       0       0       0       0       0
 18739 ;;      Temps:          0       0       0       0       0       0       0
 18740 ;;      Totals:         1       0       0       0       0       0       0
 18741 ;;Total ram usage:        1 bytes
 18742 ;; Hardware stack levels used:    1
 18743 ;; Hardware stack levels required when called:    4
 18744 ;; This function calls:
 18745 ;;		_writeCoeffs2Ram
 18746 ;; This function is called by:
 18747 ;;		_init
 18748 ;;		_vscp_restoreDefaults
 18749 ;; This function uses a non-reentrant model
 18750 ;;
 18751                           
 18752                           	psect	text90
 18753  005838                     __ptext90:
 18754                           	opt stack 0
 18755  005838                     _init_app_ram:
 18756                           	opt stack 23
 18757                           
 18758                           ;main.c: 988: char i;
 18759                           ;main.c: 990: measurement_clock = 0;
 18760                           
 18761                           ; BSR set to: 1
 18762                           ;incstack = 0
 18763                           ;incstack = 0
 18764  005838  0100               	movlb	0	; () banked
 18765  00583A  6BAC               	clrf	_measurement_clock& (0+255),b	;volatile
 18766  00583C  6BAD               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18767  00583E  6BAE               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18768  005840  6BAF               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18769                           
 18770                           ;main.c: 991: seconds = 0;
 18771  005842  6BBB               	clrf	_seconds& (0+255),b
 18772                           
 18773                           ;main.c: 994: for (i = 0; i < 6; i++) {
 18774  005844  6A21               	clrf	init_app_ram@i,c
 18775  005846                     l10528:
 18776                           
 18777                           ; BSR set to: 0
 18778                           ;main.c: 995: seconds_temp[i] = 0;
 18779  005846  0E00               	movlw	low _seconds_temp
 18780  005848  2421               	addwf	init_app_ram@i,w,c
 18781  00584A  6ED9               	movwf	fsr2l,c
 18782  00584C  6ADA               	clrf	fsr2h,c
 18783  00584E  0E01               	movlw	high _seconds_temp
 18784  005850  22DA               	addwfc	fsr2h,f,c
 18785  005852  6ADF               	clrf	indf2,c
 18786                           
 18787                           ; BSR set to: 1
 18788                           ;main.c: 996: current_temp[i] = 0;
 18789  005854  5021               	movf	init_app_ram@i,w,c
 18790  005856  0D02               	mullw	2
 18791  005858  50F3               	movf	prodl,w,c
 18792  00585A  0100               	movlb	0	; () banked
 18793  00585C  0FA0               	addlw	low _current_temp
 18794  00585E  6ED9               	movwf	fsr2l,c
 18795  005860  6ADA               	clrf	fsr2h,c
 18796  005862  6ADE               	clrf	postinc2,c
 18797  005864  6ADD               	clrf	postdec2,c
 18798                           
 18799                           ; BSR set to: 0
 18800  005866  2A21               	incf	init_app_ram@i,f,c
 18801                           
 18802                           ; BSR set to: 0
 18803  005868  0E05               	movlw	5
 18804  00586A  6421               	cpfsgt	init_app_ram@i,c
 18805  00586C  D7EC               	goto	l10528
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;main.c: 997: }
 18809                           ;main.c: 1000: adc_conversion_flags = 0;
 18810  00586E  6BB8               	clrf	_adc_conversion_flags& (0+255),b
 18811                           
 18812                           ;main.c: 1003: adc_series_counter = 0;
 18813  005870  6A49               	clrf	_adc_series_counter,c
 18814                           
 18815                           ;main.c: 1006: low_alarm = 0;
 18816  005872  6BBA               	clrf	_low_alarm& (0+255),b
 18817                           
 18818                           ;main.c: 1009: high_alarm = 0;
 18819  005874  6BB9               	clrf	_high_alarm& (0+255),b
 18820                           
 18821                           ; BSR set to: 0
 18822                           ;main.c: 1012: writeCoeffs2Ram();
 18823  005876  EF22  F028         	goto	_writeCoeffs2Ram	;wreg free
 18824  00587A                     __end_of_init_app_ram:
 18825                           	opt stack 0
 18826                           tblptru	equ	0xFF8
 18827                           tblptrh	equ	0xFF7
 18828                           tblptrl	equ	0xFF6
 18829                           tablat	equ	0xFF5
 18830                           prodh	equ	0xFF4
 18831                           prodl	equ	0xFF3
 18832                           intcon	equ	0xFF2
 18833                           postinc0	equ	0xFEE
 18834                           wreg	equ	0xFE8
 18835                           indf1	equ	0xFE7
 18836                           postdec1	equ	0xFE5
 18837                           fsr1h	equ	0xFE2
 18838                           fsr1l	equ	0xFE1
 18839                           indf2	equ	0xFDF
 18840                           postinc2	equ	0xFDE
 18841                           postdec2	equ	0xFDD
 18842                           plusw2	equ	0xFDB
 18843                           fsr2h	equ	0xFDA
 18844                           fsr2l	equ	0xFD9
 18845                           status	equ	0xFD8
 18846                           
 18847 ;; *************** function _writeCoeffs2Ram *****************
 18848 ;; Defined at:
 18849 ;;		line 969 in file "../main.c"
 18850 ;; Parameters:    Size  Location     Type
 18851 ;;		None
 18852 ;; Auto vars:     Size  Location     Type
 18853 ;;  c               3   25[COMRAM] unsigned char [3]
 18854 ;;  j               2   30[COMRAM] int 
 18855 ;;  i               2   28[COMRAM] int 
 18856 ;; Return value:  Size  Location     Type
 18857 ;;		None               void
 18858 ;; Registers used:
 18859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18860 ;; Tracked objects:
 18861 ;;		On entry : 0/0
 18862 ;;		On exit  : F/1
 18863 ;;		Unchanged: 0/0
 18864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18865 ;;      Params:         0       0       0       0       0       0       0
 18866 ;;      Locals:         7       0       0       0       0       0       0
 18867 ;;      Temps:          2       0       0       0       0       0       0
 18868 ;;      Totals:         9       0       0       0       0       0       0
 18869 ;;Total ram usage:        9 bytes
 18870 ;; Hardware stack levels used:    1
 18871 ;; Hardware stack levels required when called:    3
 18872 ;; This function calls:
 18873 ;;		_readEEPROM
 18874 ;;		___wmul
 18875 ;; This function is called by:
 18876 ;;		_init_app_ram
 18877 ;;		_vscp_writeAppReg
 18878 ;; This function uses a non-reentrant model
 18879 ;;
 18880                           
 18881                           	psect	text91
 18882  005044                     __ptext91:
 18883                           	opt stack 0
 18884  005044                     _writeCoeffs2Ram:
 18885                           	opt stack 23
 18886                           
 18887                           ;main.c: 970: int i, j;
 18888                           ;main.c: 971: uint8_t c[3];
 18889                           ;main.c: 973: for (i = 0; i < 6; i++) {
 18890                           
 18891                           ; BSR set to: 1
 18892                           ;incstack = 0
 18893                           ;incstack = 0
 18894  005044  6A1D               	clrf	writeCoeffs2Ram@i,c
 18895  005046  6A1E               	clrf	writeCoeffs2Ram@i+1,c
 18896  005048                     l10544:
 18897                           
 18898                           ;main.c: 974: for (j = 2; j > 0; j--) {
 18899  005048  6A20               	clrf	writeCoeffs2Ram@j+1,c
 18900  00504A  0E02               	movlw	2
 18901  00504C  6E1F               	movwf	writeCoeffs2Ram@j,c
 18902  00504E                     l10550:
 18903                           
 18904                           ;main.c: 976: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 18905  00504E  501F               	movf	writeCoeffs2Ram@j,w,c
 18906  005050  0802               	sublw	2
 18907  005052  6E18               	movwf	??_writeCoeffs2Ram& (0+255),c
 18908  005054  5018               	movf	??_writeCoeffs2Ram,w,c
 18909  005056  0F1A               	addlw	low writeCoeffs2Ram@c
 18910  005058  6ED9               	movwf	fsr2l,c
 18911  00505A  6ADA               	clrf	fsr2h,c
 18912  00505C  C01D  F012         	movff	writeCoeffs2Ram@i,?___wmul
 18913  005060  C01E  F013         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 18914  005064  6A15               	clrf	?___wmul+3,c
 18915  005066  0E03               	movlw	3
 18916  005068  6E14               	movwf	?___wmul+2,c
 18917  00506A  EC98  F02C         	call	___wmul	;wreg free
 18918  00506E  501F               	movf	writeCoeffs2Ram@j,w,c
 18919  005070  2612               	addwf	?___wmul,f,c
 18920  005072  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18921  005074  2213               	addwfc	?___wmul+1,f,c
 18922  005076  0EAA               	movlw	170
 18923  005078  2412               	addwf	?___wmul,w,c
 18924  00507A  6E0E               	movwf	?_readEEPROM,c
 18925  00507C  0E00               	movlw	0
 18926  00507E  2013               	addwfc	?___wmul+1,w,c
 18927  005080  6E0F               	movwf	?_readEEPROM+1,c
 18928  005082  ECA8  F02E         	call	_readEEPROM	;wreg free
 18929  005086  6EDF               	movwf	indf2,c
 18930  005088  061F               	decf	writeCoeffs2Ram@j,f,c
 18931  00508A  A0D8               	btfss	status,0,c
 18932  00508C  0620               	decf	writeCoeffs2Ram@j+1,f,c
 18933  00508E  5020               	movf	writeCoeffs2Ram@j+1,w,c
 18934  005090  0A80               	xorlw	128
 18935  005092  0F80               	addlw	-128
 18936  005094  0E01               	movlw	1
 18937  005096  B4D8               	btfsc	status,2,c
 18938  005098  5C1F               	subwf	writeCoeffs2Ram@j,w,c
 18939  00509A  E2D9               	bc	l10550
 18940                           
 18941                           ;main.c: 977: }
 18942                           ;main.c: 978: sh_coefficients[i] = *((double*) c);
 18943  00509C  C01D  F018         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 18944  0050A0  C01E  F019         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 18945  0050A4  90D8               	bcf	status,0,c
 18946  0050A6  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18947  0050A8  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18948  0050AA  90D8               	bcf	status,0,c
 18949  0050AC  3618               	rlcf	??_writeCoeffs2Ram,f,c
 18950  0050AE  3619               	rlcf	??_writeCoeffs2Ram+1,f,c
 18951  0050B0  0101               	movlb	1	; () banked
 18952  0050B2  0E06               	movlw	low _sh_coefficients
 18953  0050B4  2418               	addwf	??_writeCoeffs2Ram,w,c
 18954  0050B6  6ED9               	movwf	fsr2l,c
 18955  0050B8  0E01               	movlw	high _sh_coefficients
 18956  0050BA  2019               	addwfc	??_writeCoeffs2Ram+1,w,c
 18957  0050BC  6EDA               	movwf	fsr2h,c
 18958  0050BE  C01A  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 18959  0050C2  C01B  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 18960  0050C6  C01C  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 18961  0050CA  C01D  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 18962                           
 18963                           ; BSR set to: 1
 18964  0050CE  4A1D               	infsnz	writeCoeffs2Ram@i,f,c
 18965  0050D0  2A1E               	incf	writeCoeffs2Ram@i+1,f,c
 18966                           
 18967                           ; BSR set to: 1
 18968  0050D2  501E               	movf	writeCoeffs2Ram@i+1,w,c
 18969  0050D4  0A80               	xorlw	128
 18970  0050D6  0F80               	addlw	-128
 18971  0050D8  0E06               	movlw	6
 18972  0050DA  B4D8               	btfsc	status,2,c
 18973  0050DC  5C1D               	subwf	writeCoeffs2Ram@i,w,c
 18974  0050DE  B0D8               	btfsc	status,0,c
 18975                           
 18976                           ; BSR set to: 1
 18977  0050E0  0012               	return	
 18978  0050E2  D7B2               	goto	l10544
 18979  0050E4                     __end_of_writeCoeffs2Ram:
 18980                           	opt stack 0
 18981                           tblptru	equ	0xFF8
 18982                           tblptrh	equ	0xFF7
 18983                           tblptrl	equ	0xFF6
 18984                           tablat	equ	0xFF5
 18985                           prodh	equ	0xFF4
 18986                           prodl	equ	0xFF3
 18987                           intcon	equ	0xFF2
 18988                           postinc0	equ	0xFEE
 18989                           wreg	equ	0xFE8
 18990                           indf1	equ	0xFE7
 18991                           postdec1	equ	0xFE5
 18992                           fsr1h	equ	0xFE2
 18993                           fsr1l	equ	0xFE1
 18994                           indf2	equ	0xFDF
 18995                           postinc2	equ	0xFDE
 18996                           postdec2	equ	0xFDD
 18997                           plusw2	equ	0xFDB
 18998                           fsr2h	equ	0xFDA
 18999                           fsr2l	equ	0xFD9
 19000                           status	equ	0xFD8
 19001                           
 19002 ;; *************** function ___wmul *****************
 19003 ;; Defined at:
 19004 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 19005 ;; Parameters:    Size  Location     Type
 19006 ;;  multiplier      2   17[COMRAM] unsigned int 
 19007 ;;  multiplicand    2   19[COMRAM] unsigned int 
 19008 ;; Auto vars:     Size  Location     Type
 19009 ;;  product         2   21[COMRAM] unsigned int 
 19010 ;; Return value:  Size  Location     Type
 19011 ;;                  2   17[COMRAM] unsigned int 
 19012 ;; Registers used:
 19013 ;;		wreg, status,2, status,0, prodl, prodh
 19014 ;; Tracked objects:
 19015 ;;		On entry : 0/1
 19016 ;;		On exit  : 0/0
 19017 ;;		Unchanged: 0/0
 19018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19019 ;;      Params:         4       0       0       0       0       0       0
 19020 ;;      Locals:         2       0       0       0       0       0       0
 19021 ;;      Temps:          0       0       0       0       0       0       0
 19022 ;;      Totals:         6       0       0       0       0       0       0
 19023 ;;Total ram usage:        6 bytes
 19024 ;; Hardware stack levels used:    1
 19025 ;; Hardware stack levels required when called:    2
 19026 ;; This function calls:
 19027 ;;		Nothing
 19028 ;; This function is called by:
 19029 ;;		_doWork
 19030 ;;		_writeCoeffs2Ram
 19031 ;; This function uses a non-reentrant model
 19032 ;;
 19033                           
 19034                           	psect	text92
 19035  005930                     __ptext92:
 19036                           	opt stack 0
 19037  005930                     ___wmul:
 19038                           	opt stack 27
 19039                           
 19040                           ; BSR set to: 1
 19041                           ;incstack = 0
 19042                           ;incstack = 0
 19043  005930  5012               	movf	___wmul@multiplier,w,c
 19044  005932  0214               	mulwf	___wmul@multiplicand,c
 19045  005934  CFF3 F016          	movff	prodl,___wmul@product
 19046  005938  CFF4 F017          	movff	prodh,___wmul@product+1
 19047  00593C  5012               	movf	___wmul@multiplier,w,c
 19048  00593E  0215               	mulwf	___wmul@multiplicand+1,c
 19049  005940  CFF3 FFF4          	movff	prodl,prodh
 19050  005944  6AF3               	clrf	prodl,c
 19051  005946  50F3               	movf	prodl,w,c
 19052  005948  2616               	addwf	___wmul@product,f,c
 19053  00594A  50F4               	movf	prodh,w,c
 19054  00594C  2217               	addwfc	___wmul@product+1,f,c
 19055  00594E  5013               	movf	___wmul@multiplier+1,w,c
 19056  005950  0214               	mulwf	___wmul@multiplicand,c
 19057  005952  CFF3 FFF4          	movff	prodl,prodh
 19058  005956  6AF3               	clrf	prodl,c
 19059  005958  50F3               	movf	prodl,w,c
 19060  00595A  2616               	addwf	___wmul@product,f,c
 19061  00595C  50F4               	movf	prodh,w,c
 19062  00595E  2217               	addwfc	___wmul@product+1,f,c
 19063  005960  C016  F012         	movff	___wmul@product,?___wmul
 19064  005964  C017  F013         	movff	___wmul@product+1,?___wmul+1
 19065  005968  0012               	return	
 19066  00596A                     __end_of___wmul:
 19067                           	opt stack 0
 19068                           tblptru	equ	0xFF8
 19069                           tblptrh	equ	0xFF7
 19070                           tblptrl	equ	0xFF6
 19071                           tablat	equ	0xFF5
 19072                           prodh	equ	0xFF4
 19073                           prodl	equ	0xFF3
 19074                           intcon	equ	0xFF2
 19075                           postinc0	equ	0xFEE
 19076                           wreg	equ	0xFE8
 19077                           indf1	equ	0xFE7
 19078                           postdec1	equ	0xFE5
 19079                           fsr1h	equ	0xFE2
 19080                           fsr1l	equ	0xFE1
 19081                           indf2	equ	0xFDF
 19082                           postinc2	equ	0xFDE
 19083                           postdec2	equ	0xFDD
 19084                           plusw2	equ	0xFDB
 19085                           fsr2h	equ	0xFDA
 19086                           fsr2l	equ	0xFD9
 19087                           status	equ	0xFD8
 19088                           
 19089 ;; *************** function _ConvertADC *****************
 19090 ;; Defined at:
 19091 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 19092 ;; Parameters:    Size  Location     Type
 19093 ;;		None
 19094 ;; Auto vars:     Size  Location     Type
 19095 ;;		None
 19096 ;; Return value:  Size  Location     Type
 19097 ;;		None               void
 19098 ;; Registers used:
 19099 ;;		None
 19100 ;; Tracked objects:
 19101 ;;		On entry : 1/1
 19102 ;;		On exit  : 1/1
 19103 ;;		Unchanged: 1/0
 19104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19105 ;;      Params:         0       0       0       0       0       0       0
 19106 ;;      Locals:         0       0       0       0       0       0       0
 19107 ;;      Temps:          0       0       0       0       0       0       0
 19108 ;;      Totals:         0       0       0       0       0       0       0
 19109 ;;Total ram usage:        0 bytes
 19110 ;; Hardware stack levels used:    1
 19111 ;; Hardware stack levels required when called:    2
 19112 ;; This function calls:
 19113 ;;		Nothing
 19114 ;; This function is called by:
 19115 ;;		_init
 19116 ;; This function uses a non-reentrant model
 19117 ;;
 19118                           
 19119                           	psect	text93
 19120  005E06                     __ptext93:
 19121                           	opt stack 0
 19122  005E06                     _ConvertADC:
 19123                           	opt stack 27
 19124                           
 19125                           ;incstack = 0
 19126                           ;incstack = 0
 19127  005E06  82C2               	bsf	4034,1,c	;volatile
 19128  005E08  0012               	return	
 19129  005E0A                     __end_of_ConvertADC:
 19130                           	opt stack 0
 19131                           tblptru	equ	0xFF8
 19132                           tblptrh	equ	0xFF7
 19133                           tblptrl	equ	0xFF6
 19134                           tablat	equ	0xFF5
 19135                           prodh	equ	0xFF4
 19136                           prodl	equ	0xFF3
 19137                           intcon	equ	0xFF2
 19138                           postinc0	equ	0xFEE
 19139                           wreg	equ	0xFE8
 19140                           indf1	equ	0xFE7
 19141                           postdec1	equ	0xFE5
 19142                           fsr1h	equ	0xFE2
 19143                           fsr1l	equ	0xFE1
 19144                           indf2	equ	0xFDF
 19145                           postinc2	equ	0xFDE
 19146                           postdec2	equ	0xFDD
 19147                           plusw2	equ	0xFDB
 19148                           fsr2h	equ	0xFDA
 19149                           fsr2l	equ	0xFD9
 19150                           status	equ	0xFD8
 19151                           
 19152 ;; *************** function _WriteTimer0 *****************
 19153 ;; Defined at:
 19154 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 19155 ;; Parameters:    Size  Location     Type
 19156 ;;  timer0          2   13[COMRAM] unsigned int 
 19157 ;; Auto vars:     Size  Location     Type
 19158 ;;  timer           2   15[COMRAM] struct Timers
 19159 ;; Return value:  Size  Location     Type
 19160 ;;		None               void
 19161 ;; Registers used:
 19162 ;;		None
 19163 ;; Tracked objects:
 19164 ;;		On entry : F/1
 19165 ;;		On exit  : F/1
 19166 ;;		Unchanged: F/0
 19167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19168 ;;      Params:         2       0       0       0       0       0       0
 19169 ;;      Locals:         2       0       0       0       0       0       0
 19170 ;;      Temps:          0       0       0       0       0       0       0
 19171 ;;      Totals:         4       0       0       0       0       0       0
 19172 ;;Total ram usage:        4 bytes
 19173 ;; Hardware stack levels used:    1
 19174 ;; Hardware stack levels required when called:    2
 19175 ;; This function calls:
 19176 ;;		Nothing
 19177 ;; This function is called by:
 19178 ;;		_init
 19179 ;; This function uses a non-reentrant model
 19180 ;;
 19181                           
 19182                           	psect	text94
 19183  005D9A                     __ptext94:
 19184                           	opt stack 0
 19185  005D9A                     _WriteTimer0:
 19186                           	opt stack 27
 19187                           
 19188                           ; BSR set to: 1
 19189                           
 19190                           ;incstack = 0
 19191                           ;incstack = 0
 19192  005D9A  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 19193  005D9E  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 19194  005DA2  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 19195  005DA6  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 19196                           
 19197                           ; BSR set to: 1
 19198  005DAA  0012               	return	
 19199  005DAC                     __end_of_WriteTimer0:
 19200                           	opt stack 0
 19201                           tblptru	equ	0xFF8
 19202                           tblptrh	equ	0xFF7
 19203                           tblptrl	equ	0xFF6
 19204                           tablat	equ	0xFF5
 19205                           prodh	equ	0xFF4
 19206                           prodl	equ	0xFF3
 19207                           intcon	equ	0xFF2
 19208                           postinc0	equ	0xFEE
 19209                           wreg	equ	0xFE8
 19210                           indf1	equ	0xFE7
 19211                           postdec1	equ	0xFE5
 19212                           fsr1h	equ	0xFE2
 19213                           fsr1l	equ	0xFE1
 19214                           indf2	equ	0xFDF
 19215                           postinc2	equ	0xFDE
 19216                           postdec2	equ	0xFDD
 19217                           plusw2	equ	0xFDB
 19218                           fsr2h	equ	0xFDA
 19219                           fsr2l	equ	0xFD9
 19220                           status	equ	0xFD8
 19221                           
 19222 ;; *************** function ___awtofl *****************
 19223 ;; Defined at:
 19224 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 19225 ;; Parameters:    Size  Location     Type
 19226 ;;  c               2   23[COMRAM] int 
 19227 ;; Auto vars:     Size  Location     Type
 19228 ;;  f1              4    0        int 
 19229 ;;  sign            1   28[COMRAM] unsigned char 
 19230 ;; Return value:  Size  Location     Type
 19231 ;;                  4   23[COMRAM] unsigned char 
 19232 ;; Registers used:
 19233 ;;		wreg, status,2, status,0, cstack
 19234 ;; Tracked objects:
 19235 ;;		On entry : 0/0
 19236 ;;		On exit  : 0/0
 19237 ;;		Unchanged: 0/0
 19238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19239 ;;      Params:         4       0       0       0       0       0       0
 19240 ;;      Locals:         2       0       0       0       0       0       0
 19241 ;;      Temps:          0       0       0       0       0       0       0
 19242 ;;      Totals:         6       0       0       0       0       0       0
 19243 ;;Total ram usage:        6 bytes
 19244 ;; Hardware stack levels used:    1
 19245 ;; Hardware stack levels required when called:    3
 19246 ;; This function calls:
 19247 ;;		___flpack
 19248 ;; This function is called by:
 19249 ;;		_setEventData
 19250 ;;		_exp
 19251 ;;		_log
 19252 ;; This function uses a non-reentrant model
 19253 ;;
 19254                           
 19255                           	psect	text95
 19256  00596A                     __ptext95:
 19257                           	opt stack 0
 19258  00596A                     ___awtofl:
 19259                           	opt stack 25
 19260                           
 19261                           ; BSR set to: 1
 19262                           ;incstack = 0
 19263                           ;incstack = 0
 19264  00596A  6A1D               	clrf	___awtofl@sign,c
 19265  00596C  AE19               	btfss	___awtofl@c+1,7,c
 19266  00596E  D005               	goto	l14360
 19267  005970  6C18               	negf	___awtofl@c,c
 19268  005972  1E19               	comf	___awtofl@c+1,f,c
 19269  005974  B0D8               	btfsc	status,0,c
 19270  005976  2A19               	incf	___awtofl@c+1,f,c
 19271  005978  2A1D               	incf	___awtofl@sign,f,c
 19272  00597A                     l14360:
 19273  00597A  C018  F00E         	movff	___awtofl@c,?___flpack
 19274  00597E  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 19275  005982  6A10               	clrf	?___flpack+2,c
 19276  005984  6A11               	clrf	?___flpack+3,c
 19277  005986  0E96               	movlw	150
 19278  005988  6E12               	movwf	?___flpack+4,c
 19279  00598A  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 19280  00598E  ECA9  F025         	call	___flpack	;wreg free
 19281  005992  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 19282  005996  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 19283  00599A  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 19284  00599E  C00E  F018         	movff	?___flpack,?___awtofl
 19285  0059A2  0012               	return	
 19286  0059A4                     __end_of___awtofl:
 19287                           	opt stack 0
 19288                           tblptru	equ	0xFF8
 19289                           tblptrh	equ	0xFF7
 19290                           tblptrl	equ	0xFF6
 19291                           tablat	equ	0xFF5
 19292                           prodh	equ	0xFF4
 19293                           prodl	equ	0xFF3
 19294                           intcon	equ	0xFF2
 19295                           postinc0	equ	0xFEE
 19296                           wreg	equ	0xFE8
 19297                           indf1	equ	0xFE7
 19298                           postdec1	equ	0xFE5
 19299                           fsr1h	equ	0xFE2
 19300                           fsr1l	equ	0xFE1
 19301                           indf2	equ	0xFDF
 19302                           postinc2	equ	0xFDE
 19303                           postdec2	equ	0xFDD
 19304                           plusw2	equ	0xFDB
 19305                           fsr2h	equ	0xFDA
 19306                           fsr2l	equ	0xFD9
 19307                           status	equ	0xFD8
 19308                           
 19309 ;; *************** function ___flmul *****************
 19310 ;; Defined at:
 19311 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19312 ;; Parameters:    Size  Location     Type
 19313 ;;  f1              4   29[COMRAM] unsigned char 
 19314 ;;  f2              4   33[COMRAM] unsigned char 
 19315 ;; Auto vars:     Size  Location     Type
 19316 ;;  f3_as_produc    4   45[COMRAM] unsigned long 
 19317 ;;  sign            1   50[COMRAM] unsigned char 
 19318 ;;  cntr            1   49[COMRAM] unsigned char 
 19319 ;;  exp             1   44[COMRAM] unsigned char 
 19320 ;; Return value:  Size  Location     Type
 19321 ;;                  4   29[COMRAM] unsigned char 
 19322 ;; Registers used:
 19323 ;;		wreg, status,2, status,0, cstack
 19324 ;; Tracked objects:
 19325 ;;		On entry : 0/1
 19326 ;;		On exit  : 0/0
 19327 ;;		Unchanged: 0/0
 19328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19329 ;;      Params:         8       0       0       0       0       0       0
 19330 ;;      Locals:        14       0       0       0       0       0       0
 19331 ;;      Temps:          0       0       0       0       0       0       0
 19332 ;;      Totals:        22       0       0       0       0       0       0
 19333 ;;Total ram usage:       22 bytes
 19334 ;; Hardware stack levels used:    1
 19335 ;; Hardware stack levels required when called:    3
 19336 ;; This function calls:
 19337 ;;		___flpack
 19338 ;; This function is called by:
 19339 ;;		_doWork
 19340 ;;		_Celsius2Fahrenheit
 19341 ;;		___asflmul
 19342 ;;		_log
 19343 ;;		_eval_poly
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           	psect	text96
 19348  0049C2                     __ptext96:
 19349                           	opt stack 0
 19350  0049C2                     ___flmul:
 19351                           	opt stack 26
 19352                           
 19353                           ;incstack = 0
 19354                           ;incstack = 0
 19355  0049C2  3420               	rlcf	(___flmul@f1+2)& (0+255),w,c
 19356  0049C4  3421               	rlcf	(___flmul@f1+3)& (0+255),w,c
 19357  0049C6  6E2D               	movwf	___flmul@exp,c
 19358  0049C8  662D               	tstfsz	___flmul@exp& (0+255),c
 19359  0049CA  D001               	goto	l14304
 19360  0049CC  D005               	goto	u13740
 19361  0049CE                     l14304:
 19362  0049CE  3424               	rlcf	(___flmul@f2+2)& (0+255),w,c
 19363  0049D0  3425               	rlcf	(___flmul@f2+3)& (0+255),w,c
 19364  0049D2  6E33               	movwf	___flmul@sign,c
 19365  0049D4  6633               	tstfsz	___flmul@sign& (0+255),c
 19366  0049D6  D005               	goto	l14308
 19367  0049D8                     u13740:
 19368  0049D8  6A1E               	clrf	?___flmul,c
 19369  0049DA  6A1F               	clrf	?___flmul+1,c
 19370  0049DC  6A20               	clrf	?___flmul+2,c
 19371  0049DE  6A21               	clrf	?___flmul+3,c
 19372  0049E0  D057               	goto	l1622
 19373  0049E2                     l14308:
 19374  0049E2  5033               	movf	___flmul@sign,w,c
 19375  0049E4  0F7B               	addlw	123
 19376  0049E6  262D               	addwf	___flmul@exp,f,c
 19377  0049E8  C021  F033         	movff	___flmul@f1+3,___flmul@sign
 19378  0049EC  5025               	movf	(___flmul@f2+3)& (0+255),w,c
 19379  0049EE  1A33               	xorwf	___flmul@sign,f,c
 19380  0049F0  0E80               	movlw	128
 19381  0049F2  1633               	andwf	___flmul@sign,f,c
 19382  0049F4  8E20               	bsf	___flmul@f1+2,7,c
 19383  0049F6  8E24               	bsf	___flmul@f2+2,7,c
 19384  0049F8  0E00               	movlw	0
 19385  0049FA  1625               	andwf	___flmul@f2+3,f,c
 19386  0049FC  6A2E               	clrf	___flmul@f3_as_product,c
 19387  0049FE  6A2F               	clrf	___flmul@f3_as_product+1,c
 19388  004A00  6A30               	clrf	___flmul@f3_as_product+2,c
 19389  004A02  6A31               	clrf	___flmul@f3_as_product+3,c
 19390  004A04  0E07               	movlw	7
 19391  004A06  6E32               	movwf	___flmul@cntr,c
 19392  004A08                     l14320:
 19393  004A08  A01E               	btfss	___flmul@f1,0,c
 19394  004A0A  D008               	goto	l14324
 19395  004A0C  5022               	movf	___flmul@f2,w,c
 19396  004A0E  262E               	addwf	___flmul@f3_as_product,f,c
 19397  004A10  5023               	movf	___flmul@f2+1,w,c
 19398  004A12  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19399  004A14  5024               	movf	___flmul@f2+2,w,c
 19400  004A16  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19401  004A18  5025               	movf	___flmul@f2+3,w,c
 19402  004A1A  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19403  004A1C                     l14324:
 19404  004A1C  90D8               	bcf	status,0,c
 19405  004A1E  3221               	rrcf	___flmul@f1+3,f,c
 19406  004A20  3220               	rrcf	___flmul@f1+2,f,c
 19407  004A22  321F               	rrcf	___flmul@f1+1,f,c
 19408  004A24  321E               	rrcf	___flmul@f1,f,c
 19409  004A26  90D8               	bcf	status,0,c
 19410  004A28  3622               	rlcf	___flmul@f2,f,c
 19411  004A2A  3623               	rlcf	___flmul@f2+1,f,c
 19412  004A2C  3624               	rlcf	___flmul@f2+2,f,c
 19413  004A2E  3625               	rlcf	___flmul@f2+3,f,c
 19414  004A30  2E32               	decfsz	___flmul@cntr,f,c
 19415  004A32  D7EA               	goto	l14320
 19416  004A34  0E11               	movlw	17
 19417  004A36  6E32               	movwf	___flmul@cntr,c
 19418  004A38                     l14332:
 19419  004A38  A01E               	btfss	___flmul@f1,0,c
 19420  004A3A  D008               	goto	l14336
 19421  004A3C  5022               	movf	___flmul@f2,w,c
 19422  004A3E  262E               	addwf	___flmul@f3_as_product,f,c
 19423  004A40  5023               	movf	___flmul@f2+1,w,c
 19424  004A42  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19425  004A44  5024               	movf	___flmul@f2+2,w,c
 19426  004A46  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19427  004A48  5025               	movf	___flmul@f2+3,w,c
 19428  004A4A  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19429  004A4C                     l14336:
 19430  004A4C  90D8               	bcf	status,0,c
 19431  004A4E  3221               	rrcf	___flmul@f1+3,f,c
 19432  004A50  3220               	rrcf	___flmul@f1+2,f,c
 19433  004A52  321F               	rrcf	___flmul@f1+1,f,c
 19434  004A54  321E               	rrcf	___flmul@f1,f,c
 19435  004A56  90D8               	bcf	status,0,c
 19436  004A58  3231               	rrcf	___flmul@f3_as_product+3,f,c
 19437  004A5A  3230               	rrcf	___flmul@f3_as_product+2,f,c
 19438  004A5C  322F               	rrcf	___flmul@f3_as_product+1,f,c
 19439  004A5E  322E               	rrcf	___flmul@f3_as_product,f,c
 19440  004A60  2E32               	decfsz	___flmul@cntr,f,c
 19441  004A62  D7EA               	goto	l14332
 19442  004A64  C02E  F00E         	movff	___flmul@f3_as_product,?___flpack
 19443  004A68  C02F  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19444  004A6C  C030  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19445  004A70  C031  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19446  004A74  C02D  F012         	movff	___flmul@exp,?___flpack+4
 19447  004A78  C033  F013         	movff	___flmul@sign,?___flpack+5
 19448  004A7C  ECA9  F025         	call	___flpack	;wreg free
 19449  004A80  C011  F021         	movff	?___flpack+3,?___flmul+3
 19450  004A84  C010  F020         	movff	?___flpack+2,?___flmul+2
 19451  004A88  C00F  F01F         	movff	?___flpack+1,?___flmul+1
 19452  004A8C  C00E  F01E         	movff	?___flpack,?___flmul
 19453  004A90                     l1622:
 19454  004A90  0012               	return	
 19455  004A92                     __end_of___flmul:
 19456                           	opt stack 0
 19457                           tblptru	equ	0xFF8
 19458                           tblptrh	equ	0xFF7
 19459                           tblptrl	equ	0xFF6
 19460                           tablat	equ	0xFF5
 19461                           prodh	equ	0xFF4
 19462                           prodl	equ	0xFF3
 19463                           intcon	equ	0xFF2
 19464                           postinc0	equ	0xFEE
 19465                           wreg	equ	0xFE8
 19466                           indf1	equ	0xFE7
 19467                           postdec1	equ	0xFE5
 19468                           fsr1h	equ	0xFE2
 19469                           fsr1l	equ	0xFE1
 19470                           indf2	equ	0xFDF
 19471                           postinc2	equ	0xFDE
 19472                           postdec2	equ	0xFDD
 19473                           plusw2	equ	0xFDB
 19474                           fsr2h	equ	0xFDA
 19475                           fsr2l	equ	0xFD9
 19476                           status	equ	0xFD8
 19477                           
 19478 ;; *************** function ___flpack *****************
 19479 ;; Defined at:
 19480 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19481 ;; Parameters:    Size  Location     Type
 19482 ;;  arg             4   13[COMRAM] unsigned long 
 19483 ;;  exp             1   17[COMRAM] unsigned char 
 19484 ;;  sign            1   18[COMRAM] unsigned char 
 19485 ;; Auto vars:     Size  Location     Type
 19486 ;;		None
 19487 ;; Return value:  Size  Location     Type
 19488 ;;                  4   13[COMRAM] unsigned char 
 19489 ;; Registers used:
 19490 ;;		wreg, status,2, status,0
 19491 ;; Tracked objects:
 19492 ;;		On entry : 0/0
 19493 ;;		On exit  : 0/0
 19494 ;;		Unchanged: 0/0
 19495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19496 ;;      Params:         6       0       0       0       0       0       0
 19497 ;;      Locals:         0       0       0       0       0       0       0
 19498 ;;      Temps:          4       0       0       0       0       0       0
 19499 ;;      Totals:        10       0       0       0       0       0       0
 19500 ;;Total ram usage:       10 bytes
 19501 ;; Hardware stack levels used:    1
 19502 ;; Hardware stack levels required when called:    2
 19503 ;; This function calls:
 19504 ;;		Nothing
 19505 ;; This function is called by:
 19506 ;;		___altofl
 19507 ;;		___awtofl
 19508 ;;		___fladd
 19509 ;;		___fldiv
 19510 ;;		___flmul
 19511 ;;		___lwtofl
 19512 ;; This function uses a non-reentrant model
 19513 ;;
 19514                           
 19515                           	psect	text97
 19516  004B52                     __ptext97:
 19517                           	opt stack 0
 19518  004B52                     ___flpack:
 19519                           	opt stack 26
 19520                           
 19521                           ;incstack = 0
 19522                           ;incstack = 0
 19523  004B52  5012               	movf	___flpack@exp,w,c
 19524  004B54  E005               	bz	l1537
 19525  004B56  5011               	movf	___flpack@arg+3,w,c
 19526  004B58  100E               	iorwf	___flpack@arg,w,c
 19527  004B5A  100F               	iorwf	___flpack@arg+1,w,c
 19528  004B5C  1010               	iorwf	___flpack@arg+2,w,c
 19529  004B5E  E10B               	bnz	l14152
 19530  004B60                     l1537:
 19531  004B60  6A0E               	clrf	?___flpack,c
 19532  004B62  6A0F               	clrf	?___flpack+1,c
 19533  004B64  6A10               	clrf	?___flpack+2,c
 19534  004B66  6A11               	clrf	?___flpack+3,c
 19535  004B68  D053               	goto	l1538
 19536  004B6A                     l14150:
 19537  004B6A  2A12               	incf	___flpack@exp,f,c
 19538  004B6C  90D8               	bcf	status,0,c
 19539  004B6E  3211               	rrcf	___flpack@arg+3,f,c
 19540  004B70  3210               	rrcf	___flpack@arg+2,f,c
 19541  004B72  320F               	rrcf	___flpack@arg+1,f,c
 19542  004B74  320E               	rrcf	___flpack@arg,f,c
 19543  004B76                     l14152:
 19544  004B76  6A14               	clrf	??___flpack& (0+255),c
 19545  004B78  6A15               	clrf	(??___flpack+1)& (0+255),c
 19546  004B7A  6A16               	clrf	(??___flpack+2)& (0+255),c
 19547  004B7C  0EFE               	movlw	254
 19548  004B7E  1411               	andwf	___flpack@arg+3,w,c
 19549  004B80  6E17               	movwf	(??___flpack+3)& (0+255),c
 19550  004B82  5017               	movf	??___flpack+3,w,c
 19551  004B84  1014               	iorwf	??___flpack,w,c
 19552  004B86  1015               	iorwf	??___flpack+1,w,c
 19553  004B88  1016               	iorwf	??___flpack+2,w,c
 19554  004B8A  E00C               	bz	l1542
 19555  004B8C  D7EE               	goto	l14150
 19556  004B8E                     l14154:
 19557  004B8E  2A12               	incf	___flpack@exp,f,c
 19558  004B90  2A0E               	incf	___flpack@arg,f,c
 19559  004B92  0E00               	movlw	0
 19560  004B94  220F               	addwfc	___flpack@arg+1,f,c
 19561  004B96  2210               	addwfc	___flpack@arg+2,f,c
 19562  004B98  2211               	addwfc	___flpack@arg+3,f,c
 19563  004B9A  90D8               	bcf	status,0,c
 19564  004B9C  3211               	rrcf	___flpack@arg+3,f,c
 19565  004B9E  3210               	rrcf	___flpack@arg+2,f,c
 19566  004BA0  320F               	rrcf	___flpack@arg+1,f,c
 19567  004BA2  320E               	rrcf	___flpack@arg,f,c
 19568  004BA4                     l1542:
 19569  004BA4  6A14               	clrf	??___flpack& (0+255),c
 19570  004BA6  6A15               	clrf	(??___flpack+1)& (0+255),c
 19571  004BA8  6A16               	clrf	(??___flpack+2)& (0+255),c
 19572  004BAA  5011               	movf	___flpack@arg+3,w,c
 19573  004BAC  6E17               	movwf	(??___flpack+3)& (0+255),c
 19574  004BAE  5017               	movf	??___flpack+3,w,c
 19575  004BB0  1014               	iorwf	??___flpack,w,c
 19576  004BB2  1015               	iorwf	??___flpack+1,w,c
 19577  004BB4  1016               	iorwf	??___flpack+2,w,c
 19578  004BB6  E007               	bz	l14162
 19579  004BB8  D7EA               	goto	l14154
 19580  004BBA                     l14160:
 19581  004BBA  0612               	decf	___flpack@exp,f,c
 19582  004BBC  90D8               	bcf	status,0,c
 19583  004BBE  360E               	rlcf	___flpack@arg,f,c
 19584  004BC0  360F               	rlcf	___flpack@arg+1,f,c
 19585  004BC2  3610               	rlcf	___flpack@arg+2,f,c
 19586  004BC4  3611               	rlcf	___flpack@arg+3,f,c
 19587  004BC6                     l14162:
 19588  004BC6  AE10               	btfss	___flpack@arg+2,7,c
 19589  004BC8  D7F8               	goto	l14160
 19590  004BCA  B012               	btfsc	___flpack@exp,0,c
 19591  004BCC  D002               	goto	l1548
 19592  004BCE  0E7F               	movlw	127
 19593  004BD0  1610               	andwf	___flpack@arg+2,f,c
 19594  004BD2                     l1548:
 19595  004BD2  90D8               	bcf	status,0,c
 19596  004BD4  3212               	rrcf	___flpack@exp,f,c
 19597  004BD6  C012  F014         	movff	___flpack@exp,??___flpack
 19598  004BDA  6A15               	clrf	(??___flpack+1)& (0+255),c
 19599  004BDC  6A16               	clrf	(??___flpack+2)& (0+255),c
 19600  004BDE  6A17               	clrf	(??___flpack+3)& (0+255),c
 19601  004BE0  C014  F017         	movff	??___flpack,??___flpack+3
 19602  004BE4  6A16               	clrf	??___flpack+2,c
 19603  004BE6  6A15               	clrf	??___flpack+1,c
 19604  004BE8  6A14               	clrf	??___flpack,c
 19605  004BEA  5014               	movf	??___flpack,w,c
 19606  004BEC  120E               	iorwf	___flpack@arg,f,c
 19607  004BEE  5015               	movf	??___flpack+1,w,c
 19608  004BF0  120F               	iorwf	___flpack@arg+1,f,c
 19609  004BF2  5016               	movf	??___flpack+2,w,c
 19610  004BF4  1210               	iorwf	___flpack@arg+2,f,c
 19611  004BF6  5017               	movf	??___flpack+3,w,c
 19612  004BF8  1211               	iorwf	___flpack@arg+3,f,c
 19613  004BFA  5013               	movf	___flpack@sign,w,c
 19614  004BFC  A4D8               	btfss	status,2,c
 19615  004BFE  8E11               	bsf	___flpack@arg+3,7,c
 19616  004C00  C00E  F00E         	movff	___flpack@arg,?___flpack
 19617  004C04  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19618  004C08  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19619  004C0C  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19620  004C10                     l1538:
 19621  004C10  0012               	return	
 19622  004C12                     __end_of___flpack:
 19623                           	opt stack 0
 19624                           tblptru	equ	0xFF8
 19625                           tblptrh	equ	0xFF7
 19626                           tblptrl	equ	0xFF6
 19627                           tablat	equ	0xFF5
 19628                           prodh	equ	0xFF4
 19629                           prodl	equ	0xFF3
 19630                           intcon	equ	0xFF2
 19631                           postinc0	equ	0xFEE
 19632                           wreg	equ	0xFE8
 19633                           indf1	equ	0xFE7
 19634                           postdec1	equ	0xFE5
 19635                           fsr1h	equ	0xFE2
 19636                           fsr1l	equ	0xFE1
 19637                           indf2	equ	0xFDF
 19638                           postinc2	equ	0xFDE
 19639                           postdec2	equ	0xFDD
 19640                           plusw2	equ	0xFDB
 19641                           fsr2h	equ	0xFDA
 19642                           fsr2l	equ	0xFD9
 19643                           status	equ	0xFD8
 19644                           
 19645 ;; *************** function _vscp_readAppReg *****************
 19646 ;; Defined at:
 19647 ;;		line 1279 in file "../main.c"
 19648 ;; Parameters:    Size  Location     Type
 19649 ;;  reg             1    wreg     unsigned char 
 19650 ;; Auto vars:     Size  Location     Type
 19651 ;;  reg             1   18[COMRAM] unsigned char 
 19652 ;;  pos             1   17[COMRAM] unsigned char 
 19653 ;;  rv              1   19[COMRAM] unsigned char 
 19654 ;; Return value:  Size  Location     Type
 19655 ;;                  1    wreg      unsigned char 
 19656 ;; Registers used:
 19657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19658 ;; Tracked objects:
 19659 ;;		On entry : F/0
 19660 ;;		On exit  : 0/0
 19661 ;;		Unchanged: 0/0
 19662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19663 ;;      Params:         0       0       0       0       0       0       0
 19664 ;;      Locals:         3       0       0       0       0       0       0
 19665 ;;      Temps:          0       0       0       0       0       0       0
 19666 ;;      Totals:         3       0       0       0       0       0       0
 19667 ;;Total ram usage:        3 bytes
 19668 ;; Hardware stack levels used:    1
 19669 ;; Hardware stack levels required when called:    3
 19670 ;; This function calls:
 19671 ;;		_readEEPROM
 19672 ;; This function is called by:
 19673 ;;		_vscp_readRegister
 19674 ;;		_vscp_handleProtocolEvent
 19675 ;; This function uses a non-reentrant model
 19676 ;;
 19677                           
 19678                           	psect	text98
 19679  002A8A                     __ptext98:
 19680                           	opt stack 0
 19681  002A8A                     _vscp_readAppReg:
 19682                           	opt stack 25
 19683                           
 19684                           ;incstack = 0
 19685                           ;incstack = 0
 19686                           ;vscp_readAppReg@reg stored from wreg
 19687  002A8A  CFE8 F013          	movff	wreg,vscp_readAppReg@reg
 19688                           
 19689                           ; BSR set to: 0
 19690                           ;main.c: 1280: uint8_t rv;
 19691                           ;main.c: 1285: if (0 == vscp_page_select) {
 19692  002A8E  5047               	movf	_vscp_page_select+1,w,c
 19693  002A90  1046               	iorwf	_vscp_page_select,w,c
 19694  002A92  E101 D250          	bz	l10768
 19695  002A96  D394               	goto	l10770
 19696  002A98                     l10566:
 19697                           
 19698                           ; BSR set to: 0
 19699                           ;main.c: 1291: rv = readEEPROM( 0x41 );
 19700  002A98  6A0F               	clrf	?_readEEPROM+1,c
 19701  002A9A  0E41               	movlw	65
 19702  002A9C  6E0E               	movwf	?_readEEPROM,c
 19703  002A9E  ECA8  F02E         	call	_readEEPROM	;wreg free
 19704  002AA2  D3BB               	goto	L53
 19705  002AA4                     l10568:
 19706                           
 19707                           ; BSR set to: 0
 19708                           ;main.c: 1296: rv = readEEPROM( 0x42 );
 19709  002AA4  6A0F               	clrf	?_readEEPROM+1,c
 19710  002AA6  0E42               	movlw	66
 19711  002AA8  6E0E               	movwf	?_readEEPROM,c
 19712  002AAA  ECA8  F02E         	call	_readEEPROM	;wreg free
 19713  002AAE  D3B5               	goto	L53
 19714  002AB0                     l10570:
 19715                           
 19716                           ; BSR set to: 0
 19717                           ;main.c: 1301: rv = readEEPROM( 0x43 );
 19718  002AB0  6A0F               	clrf	?_readEEPROM+1,c
 19719  002AB2  0E43               	movlw	67
 19720  002AB4  6E0E               	movwf	?_readEEPROM,c
 19721  002AB6  ECA8  F02E         	call	_readEEPROM	;wreg free
 19722  002ABA  D3AF               	goto	L53
 19723  002ABC                     l10572:
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;main.c: 1306: rv = readEEPROM (0x44 );
 19727  002ABC  6A0F               	clrf	?_readEEPROM+1,c
 19728  002ABE  0E44               	movlw	68
 19729  002AC0  6E0E               	movwf	?_readEEPROM,c
 19730  002AC2  ECA8  F02E         	call	_readEEPROM	;wreg free
 19731  002AC6  D3A9               	goto	L53
 19732  002AC8                     l10574:
 19733                           
 19734                           ; BSR set to: 0
 19735                           ;main.c: 1311: rv = readEEPROM( 0x45 );
 19736  002AC8  6A0F               	clrf	?_readEEPROM+1,c
 19737  002ACA  0E45               	movlw	69
 19738  002ACC  6E0E               	movwf	?_readEEPROM,c
 19739  002ACE  ECA8  F02E         	call	_readEEPROM	;wreg free
 19740  002AD2  D3A3               	goto	L53
 19741  002AD4                     l10576:
 19742                           
 19743                           ; BSR set to: 0
 19744                           ;main.c: 1316: rv = readEEPROM( 0x46 );
 19745  002AD4  6A0F               	clrf	?_readEEPROM+1,c
 19746  002AD6  0E46               	movlw	70
 19747  002AD8  6E0E               	movwf	?_readEEPROM,c
 19748  002ADA  ECA8  F02E         	call	_readEEPROM	;wreg free
 19749  002ADE  D39D               	goto	L53
 19750  002AE0                     l10578:
 19751                           
 19752                           ; BSR set to: 0
 19753                           ;main.c: 1321: rv = readEEPROM( 0x47 );
 19754  002AE0  6A0F               	clrf	?_readEEPROM+1,c
 19755  002AE2  0E47               	movlw	71
 19756  002AE4  6E0E               	movwf	?_readEEPROM,c
 19757  002AE6  ECA8  F02E         	call	_readEEPROM	;wreg free
 19758  002AEA  D397               	goto	L53
 19759  002AEC                     l10580:
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;main.c: 1326: rv = readEEPROM( 0x48 );
 19763  002AEC  6A0F               	clrf	?_readEEPROM+1,c
 19764  002AEE  0E48               	movlw	72
 19765  002AF0  6E0E               	movwf	?_readEEPROM,c
 19766  002AF2  ECA8  F02E         	call	_readEEPROM	;wreg free
 19767  002AF6  D391               	goto	L53
 19768  002AF8                     l10582:
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;main.c: 1331: rv = ((current_temp[0] & 0xff00) >> 8);
 19772  002AF8  51A1               	movf	(_current_temp+1)& (0+255),w,b
 19773  002AFA  D38F               	goto	L53
 19774  002AFC                     l315:
 19775                           
 19776                           ; BSR set to: 0
 19777                           ;main.c: 1336: rv = (current_temp[0] & 0x00ff);
 19778  002AFC  C0A0  F014         	movff	_current_temp,vscp_readAppReg@rv
 19779                           
 19780                           ;main.c: 1337: break;
 19781  002B00  D38D               	goto	l10792
 19782  002B02                     l10584:
 19783                           
 19784                           ; BSR set to: 0
 19785                           ;main.c: 1341: rv = ((current_temp[1] & 0xff00) >> 8);
 19786  002B02  51A3               	movf	(_current_temp+3)& (0+255),w,b
 19787  002B04  D38A               	goto	L53
 19788  002B06                     l317:
 19789                           
 19790                           ; BSR set to: 0
 19791                           ;main.c: 1346: rv = (current_temp[1] & 0x00ff);
 19792  002B06  C0A2  F014         	movff	_current_temp+2,vscp_readAppReg@rv
 19793                           
 19794                           ;main.c: 1347: break;
 19795  002B0A  D388               	goto	l10792
 19796  002B0C                     l10586:
 19797                           
 19798                           ; BSR set to: 0
 19799                           ;main.c: 1351: rv = ((current_temp[2] & 0xff00) >> 8);
 19800  002B0C  51A5               	movf	(_current_temp+5)& (0+255),w,b
 19801  002B0E  D385               	goto	L53
 19802  002B10                     l319:
 19803                           
 19804                           ; BSR set to: 0
 19805                           ;main.c: 1356: rv = (current_temp[2] & 0x00ff);
 19806  002B10  C0A4  F014         	movff	_current_temp+4,vscp_readAppReg@rv
 19807                           
 19808                           ;main.c: 1357: break;
 19809  002B14  D383               	goto	l10792
 19810  002B16                     l10588:
 19811                           
 19812                           ; BSR set to: 0
 19813                           ;main.c: 1361: rv = ((current_temp[3] & 0xff00) >> 8);
 19814  002B16  51A7               	movf	(_current_temp+7)& (0+255),w,b
 19815  002B18  D380               	goto	L53
 19816  002B1A                     l321:
 19817                           
 19818                           ; BSR set to: 0
 19819                           ;main.c: 1366: rv = (current_temp[3] & 0x00ff);
 19820  002B1A  C0A6  F014         	movff	_current_temp+6,vscp_readAppReg@rv
 19821                           
 19822                           ;main.c: 1367: break;
 19823  002B1E  D37E               	goto	l10792
 19824  002B20                     l10590:
 19825                           
 19826                           ; BSR set to: 0
 19827                           ;main.c: 1371: rv = ((current_temp[4] & 0xff00) >> 8);
 19828  002B20  51A9               	movf	(_current_temp+9)& (0+255),w,b
 19829  002B22  D37B               	goto	L53
 19830  002B24                     l323:
 19831                           
 19832                           ; BSR set to: 0
 19833                           ;main.c: 1376: rv = (current_temp[4] & 0x00ff);
 19834  002B24  C0A8  F014         	movff	_current_temp+8,vscp_readAppReg@rv
 19835                           
 19836                           ;main.c: 1377: break;
 19837  002B28  D379               	goto	l10792
 19838  002B2A                     l10594:
 19839                           
 19840                           ; BSR set to: 0
 19841                           ;main.c: 1391: rv = readEEPROM(0x49);
 19842  002B2A  6A0F               	clrf	?_readEEPROM+1,c
 19843  002B2C  0E49               	movlw	73
 19844  002B2E  6E0E               	movwf	?_readEEPROM,c
 19845  002B30  ECA8  F02E         	call	_readEEPROM	;wreg free
 19846  002B34  D372               	goto	L53
 19847  002B36                     l10596:
 19848                           
 19849                           ; BSR set to: 0
 19850                           ;main.c: 1396: rv = readEEPROM(0x4A);
 19851  002B36  6A0F               	clrf	?_readEEPROM+1,c
 19852  002B38  0E4A               	movlw	74
 19853  002B3A  6E0E               	movwf	?_readEEPROM,c
 19854  002B3C  ECA8  F02E         	call	_readEEPROM	;wreg free
 19855  002B40  D36C               	goto	L53
 19856  002B42                     l10598:
 19857                           
 19858                           ; BSR set to: 0
 19859                           ;main.c: 1401: rv = readEEPROM(0x4B);
 19860  002B42  6A0F               	clrf	?_readEEPROM+1,c
 19861  002B44  0E4B               	movlw	75
 19862  002B46  6E0E               	movwf	?_readEEPROM,c
 19863  002B48  ECA8  F02E         	call	_readEEPROM	;wreg free
 19864  002B4C  D366               	goto	L53
 19865  002B4E                     l10600:
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;main.c: 1406: rv = readEEPROM(0x4C);
 19869  002B4E  6A0F               	clrf	?_readEEPROM+1,c
 19870  002B50  0E4C               	movlw	76
 19871  002B52  6E0E               	movwf	?_readEEPROM,c
 19872  002B54  ECA8  F02E         	call	_readEEPROM	;wreg free
 19873  002B58  D360               	goto	L53
 19874  002B5A                     l10602:
 19875                           
 19876                           ; BSR set to: 0
 19877                           ;main.c: 1411: rv = readEEPROM(0x4D);
 19878  002B5A  6A0F               	clrf	?_readEEPROM+1,c
 19879  002B5C  0E4D               	movlw	77
 19880  002B5E  6E0E               	movwf	?_readEEPROM,c
 19881  002B60  ECA8  F02E         	call	_readEEPROM	;wreg free
 19882  002B64  D35A               	goto	L53
 19883  002B66                     l10604:
 19884                           
 19885                           ; BSR set to: 0
 19886                           ;main.c: 1416: rv = readEEPROM(0x4E);
 19887  002B66  6A0F               	clrf	?_readEEPROM+1,c
 19888  002B68  0E4E               	movlw	78
 19889  002B6A  6E0E               	movwf	?_readEEPROM,c
 19890  002B6C  ECA8  F02E         	call	_readEEPROM	;wreg free
 19891  002B70  D354               	goto	L53
 19892  002B72                     l10606:
 19893                           
 19894                           ; BSR set to: 0
 19895                           ;main.c: 1423: rv = readEEPROM(0x4F);
 19896  002B72  6A0F               	clrf	?_readEEPROM+1,c
 19897  002B74  0E4F               	movlw	79
 19898  002B76  6E0E               	movwf	?_readEEPROM,c
 19899  002B78  ECA8  F02E         	call	_readEEPROM	;wreg free
 19900  002B7C  D34E               	goto	L53
 19901  002B7E                     l10608:
 19902                           
 19903                           ; BSR set to: 0
 19904                           ;main.c: 1428: rv = readEEPROM(0x50);
 19905  002B7E  6A0F               	clrf	?_readEEPROM+1,c
 19906  002B80  0E50               	movlw	80
 19907  002B82  6E0E               	movwf	?_readEEPROM,c
 19908  002B84  ECA8  F02E         	call	_readEEPROM	;wreg free
 19909  002B88  D348               	goto	L53
 19910  002B8A                     l10610:
 19911                           
 19912                           ; BSR set to: 0
 19913                           ;main.c: 1433: rv = readEEPROM(0x51);
 19914  002B8A  6A0F               	clrf	?_readEEPROM+1,c
 19915  002B8C  0E51               	movlw	81
 19916  002B8E  6E0E               	movwf	?_readEEPROM,c
 19917  002B90  ECA8  F02E         	call	_readEEPROM	;wreg free
 19918  002B94  D342               	goto	L53
 19919  002B96                     l10612:
 19920                           
 19921                           ; BSR set to: 0
 19922                           ;main.c: 1438: rv = readEEPROM(0x52);
 19923  002B96  6A0F               	clrf	?_readEEPROM+1,c
 19924  002B98  0E52               	movlw	82
 19925  002B9A  6E0E               	movwf	?_readEEPROM,c
 19926  002B9C  ECA8  F02E         	call	_readEEPROM	;wreg free
 19927  002BA0  D33C               	goto	L53
 19928  002BA2                     l10614:
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;main.c: 1443: rv = readEEPROM(0x53);
 19932  002BA2  6A0F               	clrf	?_readEEPROM+1,c
 19933  002BA4  0E53               	movlw	83
 19934  002BA6  6E0E               	movwf	?_readEEPROM,c
 19935  002BA8  ECA8  F02E         	call	_readEEPROM	;wreg free
 19936  002BAC  D336               	goto	L53
 19937  002BAE                     l10616:
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;main.c: 1448: rv = readEEPROM(0x54);
 19941  002BAE  6A0F               	clrf	?_readEEPROM+1,c
 19942  002BB0  0E54               	movlw	84
 19943  002BB2  6E0E               	movwf	?_readEEPROM,c
 19944  002BB4  ECA8  F02E         	call	_readEEPROM	;wreg free
 19945  002BB8  D330               	goto	L53
 19946  002BBA                     l10618:
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;main.c: 1453: rv = readEEPROM(0x55);
 19950  002BBA  6A0F               	clrf	?_readEEPROM+1,c
 19951  002BBC  0E55               	movlw	85
 19952  002BBE  6E0E               	movwf	?_readEEPROM,c
 19953  002BC0  ECA8  F02E         	call	_readEEPROM	;wreg free
 19954  002BC4  D32A               	goto	L53
 19955  002BC6                     l10620:
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;main.c: 1458: rv = readEEPROM(0x56);
 19959  002BC6  6A0F               	clrf	?_readEEPROM+1,c
 19960  002BC8  0E56               	movlw	86
 19961  002BCA  6E0E               	movwf	?_readEEPROM,c
 19962  002BCC  ECA8  F02E         	call	_readEEPROM	;wreg free
 19963  002BD0  D324               	goto	L53
 19964  002BD2                     l10622:
 19965                           
 19966                           ; BSR set to: 0
 19967                           ;main.c: 1463: rv = readEEPROM(0x57);
 19968  002BD2  6A0F               	clrf	?_readEEPROM+1,c
 19969  002BD4  0E57               	movlw	87
 19970  002BD6  6E0E               	movwf	?_readEEPROM,c
 19971  002BD8  ECA8  F02E         	call	_readEEPROM	;wreg free
 19972  002BDC  D31E               	goto	L53
 19973  002BDE                     l10624:
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;main.c: 1468: rv = readEEPROM(0x58);
 19977  002BDE  6A0F               	clrf	?_readEEPROM+1,c
 19978  002BE0  0E58               	movlw	88
 19979  002BE2  6E0E               	movwf	?_readEEPROM,c
 19980  002BE4  ECA8  F02E         	call	_readEEPROM	;wreg free
 19981  002BE8  D318               	goto	L53
 19982  002BEA                     l10626:
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;main.c: 1473: rv = readEEPROM(0x59);
 19986  002BEA  6A0F               	clrf	?_readEEPROM+1,c
 19987  002BEC  0E59               	movlw	89
 19988  002BEE  6E0E               	movwf	?_readEEPROM,c
 19989  002BF0  ECA8  F02E         	call	_readEEPROM	;wreg free
 19990  002BF4  D312               	goto	L53
 19991  002BF6                     l10628:
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;main.c: 1478: rv = readEEPROM(0x5A);
 19995  002BF6  6A0F               	clrf	?_readEEPROM+1,c
 19996  002BF8  0E5A               	movlw	90
 19997  002BFA  6E0E               	movwf	?_readEEPROM,c
 19998  002BFC  ECA8  F02E         	call	_readEEPROM	;wreg free
 19999  002C00  D30C               	goto	L53
 20000  002C02                     l10630:
 20001                           
 20002                           ; BSR set to: 0
 20003                           ;main.c: 1487: rv = readEEPROM(0x5B);
 20004  002C02  6A0F               	clrf	?_readEEPROM+1,c
 20005  002C04  0E5B               	movlw	91
 20006  002C06  6E0E               	movwf	?_readEEPROM,c
 20007  002C08  ECA8  F02E         	call	_readEEPROM	;wreg free
 20008  002C0C  D306               	goto	L53
 20009  002C0E                     l10632:
 20010                           
 20011                           ; BSR set to: 0
 20012                           ;main.c: 1492: rv = readEEPROM(0x5C);
 20013  002C0E  6A0F               	clrf	?_readEEPROM+1,c
 20014  002C10  0E5C               	movlw	92
 20015  002C12  6E0E               	movwf	?_readEEPROM,c
 20016  002C14  ECA8  F02E         	call	_readEEPROM	;wreg free
 20017  002C18  D300               	goto	L53
 20018  002C1A                     l10634:
 20019                           
 20020                           ; BSR set to: 0
 20021                           ;main.c: 1497: rv = readEEPROM(0x5D);
 20022  002C1A  6A0F               	clrf	?_readEEPROM+1,c
 20023  002C1C  0E5D               	movlw	93
 20024  002C1E  6E0E               	movwf	?_readEEPROM,c
 20025  002C20  ECA8  F02E         	call	_readEEPROM	;wreg free
 20026  002C24  D2FA               	goto	L53
 20027  002C26                     l10636:
 20028                           
 20029                           ; BSR set to: 0
 20030                           ;main.c: 1502: rv = readEEPROM(0x5E);
 20031  002C26  6A0F               	clrf	?_readEEPROM+1,c
 20032  002C28  0E5E               	movlw	94
 20033  002C2A  6E0E               	movwf	?_readEEPROM,c
 20034  002C2C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20035  002C30  D2F4               	goto	L53
 20036  002C32                     l10638:
 20037                           
 20038                           ; BSR set to: 0
 20039                           ;main.c: 1507: rv = readEEPROM(0x5F);
 20040  002C32  6A0F               	clrf	?_readEEPROM+1,c
 20041  002C34  0E5F               	movlw	95
 20042  002C36  6E0E               	movwf	?_readEEPROM,c
 20043  002C38  ECA8  F02E         	call	_readEEPROM	;wreg free
 20044  002C3C  D2EE               	goto	L53
 20045  002C3E                     l10640:
 20046                           
 20047                           ; BSR set to: 0
 20048                           ;main.c: 1512: rv = readEEPROM(0x60);
 20049  002C3E  6A0F               	clrf	?_readEEPROM+1,c
 20050  002C40  0E60               	movlw	96
 20051  002C42  6E0E               	movwf	?_readEEPROM,c
 20052  002C44  ECA8  F02E         	call	_readEEPROM	;wreg free
 20053  002C48  D2E8               	goto	L53
 20054  002C4A                     l10642:
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;main.c: 1517: rv = readEEPROM(0x61);
 20058  002C4A  6A0F               	clrf	?_readEEPROM+1,c
 20059  002C4C  0E61               	movlw	97
 20060  002C4E  6E0E               	movwf	?_readEEPROM,c
 20061  002C50  ECA8  F02E         	call	_readEEPROM	;wreg free
 20062  002C54  D2E2               	goto	L53
 20063  002C56                     l10644:
 20064                           
 20065                           ; BSR set to: 0
 20066                           ;main.c: 1522: rv = readEEPROM(0x62);
 20067  002C56  6A0F               	clrf	?_readEEPROM+1,c
 20068  002C58  0E62               	movlw	98
 20069  002C5A  6E0E               	movwf	?_readEEPROM,c
 20070  002C5C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20071  002C60  D2DC               	goto	L53
 20072  002C62                     l10646:
 20073                           
 20074                           ; BSR set to: 0
 20075                           ;main.c: 1527: rv = readEEPROM(0x63);
 20076  002C62  6A0F               	clrf	?_readEEPROM+1,c
 20077  002C64  0E63               	movlw	99
 20078  002C66  6E0E               	movwf	?_readEEPROM,c
 20079  002C68  ECA8  F02E         	call	_readEEPROM	;wreg free
 20080  002C6C  D2D6               	goto	L53
 20081  002C6E                     l10648:
 20082                           
 20083                           ; BSR set to: 0
 20084                           ;main.c: 1532: rv = readEEPROM(0x64);
 20085  002C6E  6A0F               	clrf	?_readEEPROM+1,c
 20086  002C70  0E64               	movlw	100
 20087  002C72  6E0E               	movwf	?_readEEPROM,c
 20088  002C74  ECA8  F02E         	call	_readEEPROM	;wreg free
 20089  002C78  D2D0               	goto	L53
 20090  002C7A                     l10650:
 20091                           
 20092                           ; BSR set to: 0
 20093                           ;main.c: 1537: rv = readEEPROM(0x65);
 20094  002C7A  6A0F               	clrf	?_readEEPROM+1,c
 20095  002C7C  0E65               	movlw	101
 20096  002C7E  6E0E               	movwf	?_readEEPROM,c
 20097  002C80  ECA8  F02E         	call	_readEEPROM	;wreg free
 20098  002C84  D2CA               	goto	L53
 20099  002C86                     l10652:
 20100                           
 20101                           ; BSR set to: 0
 20102                           ;main.c: 1542: rv = readEEPROM(0x66);
 20103  002C86  6A0F               	clrf	?_readEEPROM+1,c
 20104  002C88  0E66               	movlw	102
 20105  002C8A  6E0E               	movwf	?_readEEPROM,c
 20106  002C8C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20107  002C90  D2C4               	goto	L53
 20108  002C92                     l10654:
 20109                           
 20110                           ; BSR set to: 0
 20111                           ;main.c: 1552: rv = readEEPROM(0x67);
 20112  002C92  6A0F               	clrf	?_readEEPROM+1,c
 20113  002C94  0E67               	movlw	103
 20114  002C96  6E0E               	movwf	?_readEEPROM,c
 20115  002C98  ECA8  F02E         	call	_readEEPROM	;wreg free
 20116  002C9C  D2BE               	goto	L53
 20117  002C9E                     l10656:
 20118                           
 20119                           ; BSR set to: 0
 20120                           ;main.c: 1557: rv = readEEPROM(0x68);
 20121  002C9E  6A0F               	clrf	?_readEEPROM+1,c
 20122  002CA0  0E68               	movlw	104
 20123  002CA2  6E0E               	movwf	?_readEEPROM,c
 20124  002CA4  ECA8  F02E         	call	_readEEPROM	;wreg free
 20125  002CA8  D2B8               	goto	L53
 20126  002CAA                     l10658:
 20127                           
 20128                           ; BSR set to: 0
 20129                           ;main.c: 1562: rv = readEEPROM(0x69);
 20130  002CAA  6A0F               	clrf	?_readEEPROM+1,c
 20131  002CAC  0E69               	movlw	105
 20132  002CAE  6E0E               	movwf	?_readEEPROM,c
 20133  002CB0  ECA8  F02E         	call	_readEEPROM	;wreg free
 20134  002CB4  D2B2               	goto	L53
 20135  002CB6                     l10660:
 20136                           
 20137                           ; BSR set to: 0
 20138                           ;main.c: 1567: rv = readEEPROM(0x6A);
 20139  002CB6  6A0F               	clrf	?_readEEPROM+1,c
 20140  002CB8  0E6A               	movlw	106
 20141  002CBA  6E0E               	movwf	?_readEEPROM,c
 20142  002CBC  ECA8  F02E         	call	_readEEPROM	;wreg free
 20143  002CC0  D2AC               	goto	L53
 20144  002CC2                     l10662:
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;main.c: 1572: rv = readEEPROM(0x6B);
 20148  002CC2  6A0F               	clrf	?_readEEPROM+1,c
 20149  002CC4  0E6B               	movlw	107
 20150  002CC6  6E0E               	movwf	?_readEEPROM,c
 20151  002CC8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20152  002CCC  D2A6               	goto	L53
 20153  002CCE                     l10664:
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;main.c: 1577: rv = readEEPROM(0x6C);
 20157  002CCE  6A0F               	clrf	?_readEEPROM+1,c
 20158  002CD0  0E6C               	movlw	108
 20159  002CD2  6E0E               	movwf	?_readEEPROM,c
 20160  002CD4  ECA8  F02E         	call	_readEEPROM	;wreg free
 20161  002CD8  D2A0               	goto	L53
 20162  002CDA                     l10666:
 20163                           
 20164                           ; BSR set to: 0
 20165                           ;main.c: 1582: rv = readEEPROM(0x6D);
 20166  002CDA  6A0F               	clrf	?_readEEPROM+1,c
 20167  002CDC  0E6D               	movlw	109
 20168  002CDE  6E0E               	movwf	?_readEEPROM,c
 20169  002CE0  ECA8  F02E         	call	_readEEPROM	;wreg free
 20170  002CE4  D29A               	goto	L53
 20171  002CE6                     l10668:
 20172                           
 20173                           ; BSR set to: 0
 20174                           ;main.c: 1587: rv = readEEPROM(0x6E);
 20175  002CE6  6A0F               	clrf	?_readEEPROM+1,c
 20176  002CE8  0E6E               	movlw	110
 20177  002CEA  6E0E               	movwf	?_readEEPROM,c
 20178  002CEC  ECA8  F02E         	call	_readEEPROM	;wreg free
 20179  002CF0  D294               	goto	L53
 20180  002CF2                     l10670:
 20181                           
 20182                           ; BSR set to: 0
 20183                           ;main.c: 1592: rv = readEEPROM(0x6F);
 20184  002CF2  6A0F               	clrf	?_readEEPROM+1,c
 20185  002CF4  0E6F               	movlw	111
 20186  002CF6  6E0E               	movwf	?_readEEPROM,c
 20187  002CF8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20188  002CFC  D28E               	goto	L53
 20189  002CFE                     l10672:
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;main.c: 1597: rv = readEEPROM(0x70);
 20193  002CFE  6A0F               	clrf	?_readEEPROM+1,c
 20194  002D00  0E70               	movlw	112
 20195  002D02  6E0E               	movwf	?_readEEPROM,c
 20196  002D04  ECA8  F02E         	call	_readEEPROM	;wreg free
 20197  002D08  D288               	goto	L53
 20198  002D0A                     l10674:
 20199                           
 20200                           ; BSR set to: 0
 20201                           ;main.c: 1602: rv = readEEPROM(0x71);
 20202  002D0A  6A0F               	clrf	?_readEEPROM+1,c
 20203  002D0C  0E71               	movlw	113
 20204  002D0E  6E0E               	movwf	?_readEEPROM,c
 20205  002D10  ECA8  F02E         	call	_readEEPROM	;wreg free
 20206  002D14  D282               	goto	L53
 20207  002D16                     l10676:
 20208                           
 20209                           ; BSR set to: 0
 20210                           ;main.c: 1607: rv = readEEPROM(0x72);
 20211  002D16  6A0F               	clrf	?_readEEPROM+1,c
 20212  002D18  0E72               	movlw	114
 20213  002D1A  6E0E               	movwf	?_readEEPROM,c
 20214  002D1C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20215  002D20  D27C               	goto	L53
 20216  002D22                     l10678:
 20217                           
 20218                           ; BSR set to: 0
 20219                           ;main.c: 1616: rv = readEEPROM(0x73);
 20220  002D22  6A0F               	clrf	?_readEEPROM+1,c
 20221  002D24  0E73               	movlw	115
 20222  002D26  6E0E               	movwf	?_readEEPROM,c
 20223  002D28  ECA8  F02E         	call	_readEEPROM	;wreg free
 20224  002D2C  D276               	goto	L53
 20225  002D2E                     l10680:
 20226                           
 20227                           ; BSR set to: 0
 20228                           ;main.c: 1621: rv = readEEPROM(0x74);
 20229  002D2E  6A0F               	clrf	?_readEEPROM+1,c
 20230  002D30  0E74               	movlw	116
 20231  002D32  6E0E               	movwf	?_readEEPROM,c
 20232  002D34  ECA8  F02E         	call	_readEEPROM	;wreg free
 20233  002D38  D270               	goto	L53
 20234  002D3A                     l10682:
 20235                           
 20236                           ; BSR set to: 0
 20237                           ;main.c: 1626: rv = readEEPROM(0x75);
 20238  002D3A  6A0F               	clrf	?_readEEPROM+1,c
 20239  002D3C  0E75               	movlw	117
 20240  002D3E  6E0E               	movwf	?_readEEPROM,c
 20241  002D40  ECA8  F02E         	call	_readEEPROM	;wreg free
 20242  002D44  D26A               	goto	L53
 20243  002D46                     l10684:
 20244                           
 20245                           ; BSR set to: 0
 20246                           ;main.c: 1631: rv = readEEPROM(0x76);
 20247  002D46  6A0F               	clrf	?_readEEPROM+1,c
 20248  002D48  0E76               	movlw	118
 20249  002D4A  6E0E               	movwf	?_readEEPROM,c
 20250  002D4C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20251  002D50  D264               	goto	L53
 20252  002D52                     l10686:
 20253                           
 20254                           ; BSR set to: 0
 20255                           ;main.c: 1636: rv = readEEPROM(0x77);
 20256  002D52  6A0F               	clrf	?_readEEPROM+1,c
 20257  002D54  0E77               	movlw	119
 20258  002D56  6E0E               	movwf	?_readEEPROM,c
 20259  002D58  ECA8  F02E         	call	_readEEPROM	;wreg free
 20260  002D5C  D25E               	goto	L53
 20261  002D5E                     l10688:
 20262                           
 20263                           ; BSR set to: 0
 20264                           ;main.c: 1641: rv = readEEPROM(0x78);
 20265  002D5E  6A0F               	clrf	?_readEEPROM+1,c
 20266  002D60  0E78               	movlw	120
 20267  002D62  6E0E               	movwf	?_readEEPROM,c
 20268  002D64  ECA8  F02E         	call	_readEEPROM	;wreg free
 20269  002D68  D258               	goto	L53
 20270  002D6A                     l10690:
 20271                           
 20272                           ; BSR set to: 0
 20273                           ;main.c: 1646: rv = readEEPROM(0x79);
 20274  002D6A  6A0F               	clrf	?_readEEPROM+1,c
 20275  002D6C  0E79               	movlw	121
 20276  002D6E  6E0E               	movwf	?_readEEPROM,c
 20277  002D70  ECA8  F02E         	call	_readEEPROM	;wreg free
 20278  002D74  D252               	goto	L53
 20279  002D76                     l10692:
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;main.c: 1651: rv = readEEPROM(0x7A);
 20283  002D76  6A0F               	clrf	?_readEEPROM+1,c
 20284  002D78  0E7A               	movlw	122
 20285  002D7A  6E0E               	movwf	?_readEEPROM,c
 20286  002D7C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20287  002D80  D24C               	goto	L53
 20288  002D82                     l10694:
 20289                           
 20290                           ; BSR set to: 0
 20291                           ;main.c: 1656: rv = readEEPROM(0x7B);
 20292  002D82  6A0F               	clrf	?_readEEPROM+1,c
 20293  002D84  0E7B               	movlw	123
 20294  002D86  6E0E               	movwf	?_readEEPROM,c
 20295  002D88  ECA8  F02E         	call	_readEEPROM	;wreg free
 20296  002D8C  D246               	goto	L53
 20297  002D8E                     l10696:
 20298                           
 20299                           ; BSR set to: 0
 20300                           ;main.c: 1661: rv = readEEPROM(0x7C);
 20301  002D8E  6A0F               	clrf	?_readEEPROM+1,c
 20302  002D90  0E7C               	movlw	124
 20303  002D92  6E0E               	movwf	?_readEEPROM,c
 20304  002D94  ECA8  F02E         	call	_readEEPROM	;wreg free
 20305  002D98  D240               	goto	L53
 20306  002D9A                     l10698:
 20307                           
 20308                           ; BSR set to: 0
 20309                           ;main.c: 1666: rv = readEEPROM(0x7D);
 20310  002D9A  6A0F               	clrf	?_readEEPROM+1,c
 20311  002D9C  0E7D               	movlw	125
 20312  002D9E  6E0E               	movwf	?_readEEPROM,c
 20313  002DA0  ECA8  F02E         	call	_readEEPROM	;wreg free
 20314  002DA4  D23A               	goto	L53
 20315  002DA6                     l10700:
 20316                           
 20317                           ; BSR set to: 0
 20318                           ;main.c: 1671: rv = readEEPROM(0x7E);
 20319  002DA6  6A0F               	clrf	?_readEEPROM+1,c
 20320  002DA8  0E7E               	movlw	126
 20321  002DAA  6E0E               	movwf	?_readEEPROM,c
 20322  002DAC  ECA8  F02E         	call	_readEEPROM	;wreg free
 20323  002DB0  D234               	goto	L53
 20324  002DB2                     l10702:
 20325                           
 20326                           ; BSR set to: 0
 20327                           ;main.c: 1680: rv = readEEPROM(0x7F);
 20328  002DB2  6A0F               	clrf	?_readEEPROM+1,c
 20329  002DB4  0E7F               	movlw	127
 20330  002DB6  6E0E               	movwf	?_readEEPROM,c
 20331  002DB8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20332  002DBC  D22E               	goto	L53
 20333  002DBE                     l10704:
 20334                           
 20335                           ; BSR set to: 0
 20336                           ;main.c: 1685: rv = readEEPROM(0x80);
 20337  002DBE  6A0F               	clrf	?_readEEPROM+1,c
 20338  002DC0  0E80               	movlw	128
 20339  002DC2  6E0E               	movwf	?_readEEPROM,c
 20340  002DC4  ECA8  F02E         	call	_readEEPROM	;wreg free
 20341  002DC8  D228               	goto	L53
 20342  002DCA                     l10706:
 20343                           
 20344                           ; BSR set to: 0
 20345                           ;main.c: 1690: rv = readEEPROM(0x81);
 20346  002DCA  6A0F               	clrf	?_readEEPROM+1,c
 20347  002DCC  0E81               	movlw	129
 20348  002DCE  6E0E               	movwf	?_readEEPROM,c
 20349  002DD0  ECA8  F02E         	call	_readEEPROM	;wreg free
 20350  002DD4  D222               	goto	L53
 20351  002DD6                     l10708:
 20352                           
 20353                           ; BSR set to: 0
 20354                           ;main.c: 1695: rv = readEEPROM(0x82);
 20355  002DD6  6A0F               	clrf	?_readEEPROM+1,c
 20356  002DD8  0E82               	movlw	130
 20357  002DDA  6E0E               	movwf	?_readEEPROM,c
 20358  002DDC  ECA8  F02E         	call	_readEEPROM	;wreg free
 20359  002DE0  D21C               	goto	L53
 20360  002DE2                     l10710:
 20361                           
 20362                           ; BSR set to: 0
 20363                           ;main.c: 1700: rv = readEEPROM(0x83);
 20364  002DE2  6A0F               	clrf	?_readEEPROM+1,c
 20365  002DE4  0E83               	movlw	131
 20366  002DE6  6E0E               	movwf	?_readEEPROM,c
 20367  002DE8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20368  002DEC  D216               	goto	L53
 20369  002DEE                     l10712:
 20370                           
 20371                           ; BSR set to: 0
 20372                           ;main.c: 1705: rv = readEEPROM(0x84);
 20373  002DEE  6A0F               	clrf	?_readEEPROM+1,c
 20374  002DF0  0E84               	movlw	132
 20375  002DF2  6E0E               	movwf	?_readEEPROM,c
 20376  002DF4  ECA8  F02E         	call	_readEEPROM	;wreg free
 20377  002DF8  D210               	goto	L53
 20378  002DFA                     l10714:
 20379                           
 20380                           ; BSR set to: 0
 20381                           ;main.c: 1710: rv = readEEPROM(0x85);
 20382  002DFA  6A0F               	clrf	?_readEEPROM+1,c
 20383  002DFC  0E85               	movlw	133
 20384  002DFE  6E0E               	movwf	?_readEEPROM,c
 20385  002E00  ECA8  F02E         	call	_readEEPROM	;wreg free
 20386  002E04  D20A               	goto	L53
 20387  002E06                     l10716:
 20388                           
 20389                           ; BSR set to: 0
 20390                           ;main.c: 1715: rv = readEEPROM(0x86);
 20391  002E06  6A0F               	clrf	?_readEEPROM+1,c
 20392  002E08  0E86               	movlw	134
 20393  002E0A  6E0E               	movwf	?_readEEPROM,c
 20394  002E0C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20395  002E10  D204               	goto	L53
 20396  002E12                     l10718:
 20397                           
 20398                           ; BSR set to: 0
 20399                           ;main.c: 1720: rv = readEEPROM(0x87);
 20400  002E12  6A0F               	clrf	?_readEEPROM+1,c
 20401  002E14  0E87               	movlw	135
 20402  002E16  6E0E               	movwf	?_readEEPROM,c
 20403  002E18  ECA8  F02E         	call	_readEEPROM	;wreg free
 20404  002E1C  D1FE               	goto	L53
 20405  002E1E                     l10720:
 20406                           
 20407                           ; BSR set to: 0
 20408                           ;main.c: 1725: rv = readEEPROM(0x88);
 20409  002E1E  6A0F               	clrf	?_readEEPROM+1,c
 20410  002E20  0E88               	movlw	136
 20411  002E22  6E0E               	movwf	?_readEEPROM,c
 20412  002E24  ECA8  F02E         	call	_readEEPROM	;wreg free
 20413  002E28  D1F8               	goto	L53
 20414  002E2A                     l10722:
 20415                           
 20416                           ; BSR set to: 0
 20417                           ;main.c: 1730: rv = readEEPROM(0x89);
 20418  002E2A  6A0F               	clrf	?_readEEPROM+1,c
 20419  002E2C  0E89               	movlw	137
 20420  002E2E  6E0E               	movwf	?_readEEPROM,c
 20421  002E30  ECA8  F02E         	call	_readEEPROM	;wreg free
 20422  002E34  D1F2               	goto	L53
 20423  002E36                     l10724:
 20424                           
 20425                           ; BSR set to: 0
 20426                           ;main.c: 1735: rv = readEEPROM(0x8A);
 20427  002E36  6A0F               	clrf	?_readEEPROM+1,c
 20428  002E38  0E8A               	movlw	138
 20429  002E3A  6E0E               	movwf	?_readEEPROM,c
 20430  002E3C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20431  002E40  D1EC               	goto	L53
 20432  002E42                     l10726:
 20433                           
 20434                           ; BSR set to: 0
 20435                           ;main.c: 1744: rv = readEEPROM(0x8B);
 20436  002E42  6A0F               	clrf	?_readEEPROM+1,c
 20437  002E44  0E8B               	movlw	139
 20438  002E46  6E0E               	movwf	?_readEEPROM,c
 20439  002E48  ECA8  F02E         	call	_readEEPROM	;wreg free
 20440  002E4C  D1E6               	goto	L53
 20441  002E4E                     l10728:
 20442                           
 20443                           ; BSR set to: 0
 20444                           ;main.c: 1749: rv = readEEPROM(0x8C);
 20445  002E4E  6A0F               	clrf	?_readEEPROM+1,c
 20446  002E50  0E8C               	movlw	140
 20447  002E52  6E0E               	movwf	?_readEEPROM,c
 20448  002E54  ECA8  F02E         	call	_readEEPROM	;wreg free
 20449  002E58  D1E0               	goto	L53
 20450  002E5A                     l10730:
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;main.c: 1754: rv = readEEPROM(0x8D);
 20454  002E5A  6A0F               	clrf	?_readEEPROM+1,c
 20455  002E5C  0E8D               	movlw	141
 20456  002E5E  6E0E               	movwf	?_readEEPROM,c
 20457  002E60  ECA8  F02E         	call	_readEEPROM	;wreg free
 20458  002E64  D1DA               	goto	L53
 20459  002E66                     l10732:
 20460                           
 20461                           ; BSR set to: 0
 20462                           ;main.c: 1759: rv = readEEPROM(0x8E);
 20463  002E66  6A0F               	clrf	?_readEEPROM+1,c
 20464  002E68  0E8E               	movlw	142
 20465  002E6A  6E0E               	movwf	?_readEEPROM,c
 20466  002E6C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20467  002E70  D1D4               	goto	L53
 20468  002E72                     l10734:
 20469                           
 20470                           ; BSR set to: 0
 20471                           ;main.c: 1764: rv = readEEPROM(0x8F);
 20472  002E72  6A0F               	clrf	?_readEEPROM+1,c
 20473  002E74  0E8F               	movlw	143
 20474  002E76  6E0E               	movwf	?_readEEPROM,c
 20475  002E78  ECA8  F02E         	call	_readEEPROM	;wreg free
 20476  002E7C  D1CE               	goto	L53
 20477  002E7E                     l10736:
 20478                           
 20479                           ; BSR set to: 0
 20480                           ;main.c: 1769: rv = readEEPROM(0x90);
 20481  002E7E  6A0F               	clrf	?_readEEPROM+1,c
 20482  002E80  0E90               	movlw	144
 20483  002E82  6E0E               	movwf	?_readEEPROM,c
 20484  002E84  ECA8  F02E         	call	_readEEPROM	;wreg free
 20485  002E88  D1C8               	goto	L53
 20486  002E8A                     l10738:
 20487                           
 20488                           ; BSR set to: 0
 20489                           ;main.c: 1774: rv = readEEPROM(0x91);
 20490  002E8A  6A0F               	clrf	?_readEEPROM+1,c
 20491  002E8C  0E91               	movlw	145
 20492  002E8E  6E0E               	movwf	?_readEEPROM,c
 20493  002E90  ECA8  F02E         	call	_readEEPROM	;wreg free
 20494  002E94  D1C2               	goto	L53
 20495  002E96                     l10740:
 20496                           
 20497                           ; BSR set to: 0
 20498                           ;main.c: 1779: rv = readEEPROM(0x92);
 20499  002E96  6A0F               	clrf	?_readEEPROM+1,c
 20500  002E98  0E92               	movlw	146
 20501  002E9A  6E0E               	movwf	?_readEEPROM,c
 20502  002E9C  ECA8  F02E         	call	_readEEPROM	;wreg free
 20503  002EA0  D1BC               	goto	L53
 20504  002EA2                     l10742:
 20505                           
 20506                           ; BSR set to: 0
 20507                           ;main.c: 1784: rv = readEEPROM(0x93);
 20508  002EA2  6A0F               	clrf	?_readEEPROM+1,c
 20509  002EA4  0E93               	movlw	147
 20510  002EA6  6E0E               	movwf	?_readEEPROM,c
 20511  002EA8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20512  002EAC  D1B6               	goto	L53
 20513  002EAE                     l10744:
 20514                           
 20515                           ; BSR set to: 0
 20516                           ;main.c: 1789: rv = readEEPROM(0x94);
 20517  002EAE  6A0F               	clrf	?_readEEPROM+1,c
 20518  002EB0  0E94               	movlw	148
 20519  002EB2  6E0E               	movwf	?_readEEPROM,c
 20520  002EB4  ECA8  F02E         	call	_readEEPROM	;wreg free
 20521  002EB8  D1B0               	goto	L53
 20522  002EBA                     l10746:
 20523                           
 20524                           ; BSR set to: 0
 20525                           ;main.c: 1794: rv = readEEPROM(0x95);
 20526  002EBA  6A0F               	clrf	?_readEEPROM+1,c
 20527  002EBC  0E95               	movlw	149
 20528  002EBE  6E0E               	movwf	?_readEEPROM,c
 20529  002EC0  ECA8  F02E         	call	_readEEPROM	;wreg free
 20530  002EC4  D1AA               	goto	L53
 20531  002EC6                     l10748:
 20532                           
 20533                           ; BSR set to: 0
 20534                           ;main.c: 1799: rv = readEEPROM(0x96);
 20535  002EC6  6A0F               	clrf	?_readEEPROM+1,c
 20536  002EC8  0E96               	movlw	150
 20537  002ECA  6E0E               	movwf	?_readEEPROM,c
 20538  002ECC  ECA8  F02E         	call	_readEEPROM	;wreg free
 20539  002ED0  D1A4               	goto	L53
 20540  002ED2                     l10750:
 20541                           
 20542                           ; BSR set to: 0
 20543                           ;main.c: 1809: rv = readEEPROM(0x97);
 20544  002ED2  6A0F               	clrf	?_readEEPROM+1,c
 20545  002ED4  0E97               	movlw	151
 20546  002ED6  6E0E               	movwf	?_readEEPROM,c
 20547  002ED8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20548  002EDC  D19E               	goto	L53
 20549  002EDE                     l10752:
 20550                           
 20551                           ; BSR set to: 0
 20552                           ;main.c: 1814: rv = readEEPROM(0x98);
 20553  002EDE  6A0F               	clrf	?_readEEPROM+1,c
 20554  002EE0  0E98               	movlw	152
 20555  002EE2  6E0E               	movwf	?_readEEPROM,c
 20556  002EE4  ECA8  F02E         	call	_readEEPROM	;wreg free
 20557  002EE8  D198               	goto	L53
 20558  002EEA                     l10754:
 20559                           
 20560                           ; BSR set to: 0
 20561                           ;main.c: 1819: rv = readEEPROM(0x99);
 20562  002EEA  6A0F               	clrf	?_readEEPROM+1,c
 20563  002EEC  0E99               	movlw	153
 20564  002EEE  6E0E               	movwf	?_readEEPROM,c
 20565  002EF0  ECA8  F02E         	call	_readEEPROM	;wreg free
 20566  002EF4  D192               	goto	L53
 20567  002EF6                     l10756:
 20568                           
 20569                           ; BSR set to: 0
 20570                           ;main.c: 1824: rv = readEEPROM(0x9A);
 20571  002EF6  6A0F               	clrf	?_readEEPROM+1,c
 20572  002EF8  0E9A               	movlw	154
 20573  002EFA  6E0E               	movwf	?_readEEPROM,c
 20574  002EFC  ECA8  F02E         	call	_readEEPROM	;wreg free
 20575  002F00  D18C               	goto	L53
 20576  002F02                     l10758:
 20577                           
 20578                           ; BSR set to: 0
 20579                           ;main.c: 1829: rv = readEEPROM(0x9B);
 20580  002F02  6A0F               	clrf	?_readEEPROM+1,c
 20581  002F04  0E9B               	movlw	155
 20582  002F06  6E0E               	movwf	?_readEEPROM,c
 20583  002F08  ECA8  F02E         	call	_readEEPROM	;wreg free
 20584  002F0C  D186               	goto	L53
 20585  002F0E                     l10760:
 20586                           
 20587                           ; BSR set to: 0
 20588                           ;main.c: 1834: rv = readEEPROM(0x9C);
 20589  002F0E  6A0F               	clrf	?_readEEPROM+1,c
 20590  002F10  0E9C               	movlw	156
 20591  002F12  6E0E               	movwf	?_readEEPROM,c
 20592  002F14  ECA8  F02E         	call	_readEEPROM	;wreg free
 20593  002F18  D180               	goto	L53
 20594  002F1A                     l410:
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;main.c: 1839: rv = 0;
 20598  002F1A  6A14               	clrf	vscp_readAppReg@rv,c
 20599                           
 20600                           ;main.c: 1840: break;
 20601  002F1C  D17F               	goto	l10792
 20602  002F1E                     l10762:
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;main.c: 1848: rv = readEEPROM(0xF2);
 20606  002F1E  6A0F               	clrf	?_readEEPROM+1,c
 20607  002F20  0EF2               	movlw	242
 20608  002F22  6E0E               	movwf	?_readEEPROM,c
 20609  002F24  ECA8  F02E         	call	_readEEPROM	;wreg free
 20610  002F28  D178               	goto	L53
 20611  002F2A                     l10764:
 20612                           
 20613                           ; BSR set to: 0
 20614                           ;main.c: 1852: rv = readEEPROM(0xF3);
 20615  002F2A  6A0F               	clrf	?_readEEPROM+1,c
 20616  002F2C  0EF3               	movlw	243
 20617  002F2E  6E0E               	movwf	?_readEEPROM,c
 20618  002F30  ECA8  F02E         	call	_readEEPROM	;wreg free
 20619  002F34  D172               	goto	L53
 20620  002F36                     l10768:
 20621                           
 20622                           ; BSR set to: 0
 20623  002F36  5013               	movf	vscp_readAppReg@reg,w,c
 20624                           
 20625                           ; Switch size 1, requested type "speed"
 20626                           ; Number of cases is 108, Range of values is 0 to 119
 20627                           ; switch strategies available:
 20628                           ; Name         Instructions Cycles
 20629                           ; simple_byte          325   163 (average)
 20630                           ;	Chosen strategy is simple_byte
 20631  002F38  E101 D5AE          	bz	l10566
 20632  002F3C  0A01               	xorlw	1	; case 1
 20633  002F3E  E101 D5B1          	bz	l10568
 20634  002F42  0A03               	xorlw	3	; case 2
 20635  002F44  E101 D5B4          	bz	l10570
 20636  002F48  0A01               	xorlw	1	; case 3
 20637  002F4A  E101 D5B7          	bz	l10572
 20638  002F4E  0A07               	xorlw	7	; case 4
 20639  002F50  E101 D5BA          	bz	l10574
 20640  002F54  0A01               	xorlw	1	; case 5
 20641  002F56  E101 D5BD          	bz	l10576
 20642  002F5A  0A03               	xorlw	3	; case 6
 20643  002F5C  E101 D5C0          	bz	l10578
 20644  002F60  0A01               	xorlw	1	; case 7
 20645  002F62  E101 D5C3          	bz	l10580
 20646  002F66  0A0F               	xorlw	15	; case 8
 20647  002F68  E101 D5C6          	bz	l10582
 20648  002F6C  0A01               	xorlw	1	; case 9
 20649  002F6E  E101 D5C5          	bz	l315
 20650  002F72  0A03               	xorlw	3	; case 10
 20651  002F74  E101 D5C5          	bz	l10584
 20652  002F78  0A01               	xorlw	1	; case 11
 20653  002F7A  E101 D5C4          	bz	l317
 20654  002F7E  0A07               	xorlw	7	; case 12
 20655  002F80  E101 D5C4          	bz	l10586
 20656  002F84  0A01               	xorlw	1	; case 13
 20657  002F86  E101 D5C3          	bz	l319
 20658  002F8A  0A03               	xorlw	3	; case 14
 20659  002F8C  E101 D5C3          	bz	l10588
 20660  002F90  0A01               	xorlw	1	; case 15
 20661  002F92  E101 D5C2          	bz	l321
 20662  002F96  0A1F               	xorlw	31	; case 16
 20663  002F98  E101 D5C2          	bz	l10590
 20664  002F9C  0A01               	xorlw	1	; case 17
 20665  002F9E  E101 D5C1          	bz	l323
 20666  002FA2  0A03               	xorlw	3	; case 18
 20667  002FA4  E101 D5BC          	bz	l10590
 20668  002FA8  0A01               	xorlw	1	; case 19
 20669  002FAA  E101 D5BB          	bz	l323
 20670  002FAE  0A07               	xorlw	7	; case 20
 20671  002FB0  E101 D5BB          	bz	l10594
 20672  002FB4  0A01               	xorlw	1	; case 21
 20673  002FB6  E101 D5BE          	bz	l10596
 20674  002FBA  0A03               	xorlw	3	; case 22
 20675  002FBC  E101 D5C1          	bz	l10598
 20676  002FC0  0A01               	xorlw	1	; case 23
 20677  002FC2  E101 D5C4          	bz	l10600
 20678  002FC6  0A0F               	xorlw	15	; case 24
 20679  002FC8  E101 D5C7          	bz	l10602
 20680  002FCC  0A01               	xorlw	1	; case 25
 20681  002FCE  E101 D5CA          	bz	l10604
 20682  002FD2  0A3F               	xorlw	63	; case 38
 20683  002FD4  E101 D5CD          	bz	l10606
 20684  002FD8  0A01               	xorlw	1	; case 39
 20685  002FDA  E101 D5D0          	bz	l10608
 20686  002FDE  0A0F               	xorlw	15	; case 40
 20687  002FE0  E101 D5D3          	bz	l10610
 20688  002FE4  0A01               	xorlw	1	; case 41
 20689  002FE6  E101 D5D6          	bz	l10612
 20690  002FEA  0A03               	xorlw	3	; case 42
 20691  002FEC  E101 D5D9          	bz	l10614
 20692  002FF0  0A01               	xorlw	1	; case 43
 20693  002FF2  E101 D5DC          	bz	l10616
 20694  002FF6  0A07               	xorlw	7	; case 44
 20695  002FF8  E101 D5DF          	bz	l10618
 20696  002FFC  0A01               	xorlw	1	; case 45
 20697  002FFE  E101 D5E2          	bz	l10620
 20698  003002  0A03               	xorlw	3	; case 46
 20699  003004  E101 D5E5          	bz	l10622
 20700  003008  0A01               	xorlw	1	; case 47
 20701  00300A  E101 D5E8          	bz	l10624
 20702  00300E  0A1F               	xorlw	31	; case 48
 20703  003010  E101 D5EB          	bz	l10626
 20704  003014  0A01               	xorlw	1	; case 49
 20705  003016  E101 D5EE          	bz	l10628
 20706  00301A  0A03               	xorlw	3	; case 50
 20707  00301C  E101 D5F1          	bz	l10630
 20708  003020  0A01               	xorlw	1	; case 51
 20709  003022  E101 D5F4          	bz	l10632
 20710  003026  0A07               	xorlw	7	; case 52
 20711  003028  E101 D5F7          	bz	l10634
 20712  00302C  0A01               	xorlw	1	; case 53
 20713  00302E  E101 D5FA          	bz	l10636
 20714  003032  0A03               	xorlw	3	; case 54
 20715  003034  E101 D5FD          	bz	l10638
 20716  003038  0A01               	xorlw	1	; case 55
 20717  00303A  E101 D600          	bz	l10640
 20718  00303E  0A0F               	xorlw	15	; case 56
 20719  003040  E101 D603          	bz	l10642
 20720  003044  0A01               	xorlw	1	; case 57
 20721  003046  E101 D606          	bz	l10644
 20722  00304A  0A03               	xorlw	3	; case 58
 20723  00304C  E101 D609          	bz	l10646
 20724  003050  0A01               	xorlw	1	; case 59
 20725  003052  E101 D60C          	bz	l10648
 20726  003056  0A07               	xorlw	7	; case 60
 20727  003058  E101 D60F          	bz	l10650
 20728  00305C  0A01               	xorlw	1	; case 61
 20729  00305E  E101 D612          	bz	l10652
 20730  003062  0A03               	xorlw	3	; case 62
 20731  003064  E101 D615          	bz	l10654
 20732  003068  0A01               	xorlw	1	; case 63
 20733  00306A  E101 D618          	bz	l10656
 20734  00306E  0A7F               	xorlw	127	; case 64
 20735  003070  E101 D61B          	bz	l10658
 20736  003074  0A01               	xorlw	1	; case 65
 20737  003076  E101 D61E          	bz	l10660
 20738  00307A  0A03               	xorlw	3	; case 66
 20739  00307C  E101 D621          	bz	l10662
 20740  003080  0A01               	xorlw	1	; case 67
 20741  003082  E101 D624          	bz	l10664
 20742  003086  0A07               	xorlw	7	; case 68
 20743  003088  E101 D627          	bz	l10666
 20744  00308C  0A01               	xorlw	1	; case 69
 20745  00308E  E101 D62A          	bz	l10668
 20746  003092  0A03               	xorlw	3	; case 70
 20747  003094  E101 D62D          	bz	l10670
 20748  003098  0A01               	xorlw	1	; case 71
 20749  00309A  E101 D630          	bz	l10672
 20750  00309E  0A0F               	xorlw	15	; case 72
 20751  0030A0  E101 D633          	bz	l10674
 20752  0030A4  0A01               	xorlw	1	; case 73
 20753  0030A6  E101 D636          	bz	l10676
 20754  0030AA  0A03               	xorlw	3	; case 74
 20755  0030AC  E101 D639          	bz	l10678
 20756  0030B0  0A01               	xorlw	1	; case 75
 20757  0030B2  E101 D63C          	bz	l10680
 20758  0030B6  0A07               	xorlw	7	; case 76
 20759  0030B8  E101 D63F          	bz	l10682
 20760  0030BC  0A01               	xorlw	1	; case 77
 20761  0030BE  E101 D642          	bz	l10684
 20762  0030C2  0A03               	xorlw	3	; case 78
 20763  0030C4  E101 D645          	bz	l10686
 20764  0030C8  0A01               	xorlw	1	; case 79
 20765  0030CA  E101 D648          	bz	l10688
 20766  0030CE  0A1F               	xorlw	31	; case 80
 20767  0030D0  E101 D64B          	bz	l10690
 20768  0030D4  0A01               	xorlw	1	; case 81
 20769  0030D6  E101 D64E          	bz	l10692
 20770  0030DA  0A03               	xorlw	3	; case 82
 20771  0030DC  E101 D651          	bz	l10694
 20772  0030E0  0A01               	xorlw	1	; case 83
 20773  0030E2  E101 D654          	bz	l10696
 20774  0030E6  0A07               	xorlw	7	; case 84
 20775  0030E8  E101 D657          	bz	l10698
 20776  0030EC  0A01               	xorlw	1	; case 85
 20777  0030EE  E101 D65A          	bz	l10700
 20778  0030F2  0A03               	xorlw	3	; case 86
 20779  0030F4  E101 D65D          	bz	l10702
 20780  0030F8  0A01               	xorlw	1	; case 87
 20781  0030FA  E101 D660          	bz	l10704
 20782  0030FE  0A0F               	xorlw	15	; case 88
 20783  003100  E101 D663          	bz	l10706
 20784  003104  0A01               	xorlw	1	; case 89
 20785  003106  E101 D666          	bz	l10708
 20786  00310A  0A03               	xorlw	3	; case 90
 20787  00310C  E101 D669          	bz	l10710
 20788  003110  0A01               	xorlw	1	; case 91
 20789  003112  E101 D66C          	bz	l10712
 20790  003116  0A07               	xorlw	7	; case 92
 20791  003118  E101 D66F          	bz	l10714
 20792  00311C  0A01               	xorlw	1	; case 93
 20793  00311E  E101 D672          	bz	l10716
 20794  003122  0A03               	xorlw	3	; case 94
 20795  003124  E101 D675          	bz	l10718
 20796  003128  0A01               	xorlw	1	; case 95
 20797  00312A  E101 D678          	bz	l10720
 20798  00312E  0A3F               	xorlw	63	; case 96
 20799  003130  E101 D67B          	bz	l10722
 20800  003134  0A01               	xorlw	1	; case 97
 20801  003136  E101 D67E          	bz	l10724
 20802  00313A  0A03               	xorlw	3	; case 98
 20803  00313C  E101 D681          	bz	l10726
 20804  003140  0A01               	xorlw	1	; case 99
 20805  003142  E101 D684          	bz	l10728
 20806  003146  0A07               	xorlw	7	; case 100
 20807  003148  E101 D687          	bz	l10730
 20808  00314C  0A01               	xorlw	1	; case 101
 20809  00314E  E101 D68A          	bz	l10732
 20810  003152  0A03               	xorlw	3	; case 102
 20811  003154  E101 D68D          	bz	l10734
 20812  003158  0A01               	xorlw	1	; case 103
 20813  00315A  E101 D690          	bz	l10736
 20814  00315E  0A0F               	xorlw	15	; case 104
 20815  003160  E101 D693          	bz	l10738
 20816  003164  0A01               	xorlw	1	; case 105
 20817  003166  E101 D696          	bz	l10740
 20818  00316A  0A03               	xorlw	3	; case 106
 20819  00316C  E101 D699          	bz	l10742
 20820  003170  0A01               	xorlw	1	; case 107
 20821  003172  E101 D69C          	bz	l10744
 20822  003176  0A07               	xorlw	7	; case 108
 20823  003178  E101 D69F          	bz	l10746
 20824  00317C  0A01               	xorlw	1	; case 109
 20825  00317E  E101 D6A2          	bz	l10748
 20826  003182  0A03               	xorlw	3	; case 110
 20827  003184  E101 D6A5          	bz	l10750
 20828  003188  0A01               	xorlw	1	; case 111
 20829  00318A  E101 D6A8          	bz	l10752
 20830  00318E  0A1F               	xorlw	31	; case 112
 20831  003190  E101 D6AB          	bz	l10754
 20832  003194  0A01               	xorlw	1	; case 113
 20833  003196  E101 D6AE          	bz	l10756
 20834  00319A  0A03               	xorlw	3	; case 114
 20835  00319C  E101 D6B1          	bz	l10758
 20836  0031A0  0A01               	xorlw	1	; case 115
 20837  0031A2  E101 D6B4          	bz	l10760
 20838  0031A6  0A07               	xorlw	7	; case 116
 20839  0031A8  E101 D6B7          	bz	l410
 20840  0031AC  0A01               	xorlw	1	; case 117
 20841  0031AE  E101 D6B4          	bz	l410
 20842  0031B2  0A03               	xorlw	3	; case 118
 20843  0031B4  E101 D6B3          	bz	l10762
 20844  0031B8  0A01               	xorlw	1	; case 119
 20845  0031BA  E101 D6B6          	bz	l10764
 20846  0031BE  D6AD               	goto	l410
 20847  0031C0                     l10770:
 20848                           
 20849                           ; BSR set to: 0
 20850                           ;main.c: 1860: else if (1 == vscp_page_select) {
 20851  0031C0  0446               	decf	_vscp_page_select,w,c
 20852  0031C2  1047               	iorwf	_vscp_page_select+1,w,c
 20853  0031C4  E12B               	bnz	l10792
 20854                           
 20855                           ; BSR set to: 0
 20856                           ;main.c: 1862: if (reg < 72) {
 20857  0031C6  0E48               	movlw	72
 20858  0031C8  6013               	cpfslt	vscp_readAppReg@reg,c
 20859  0031CA  D009               	goto	l10776
 20860                           
 20861                           ; BSR set to: 0
 20862                           ;main.c: 1863: rv = readEEPROM(0xAA + reg ) ;
 20863  0031CC  0EAA               	movlw	170
 20864  0031CE  2413               	addwf	vscp_readAppReg@reg,w,c
 20865  0031D0  6E0E               	movwf	?_readEEPROM,c
 20866  0031D2  6A0F               	clrf	?_readEEPROM+1,c
 20867  0031D4  0E00               	movlw	0
 20868  0031D6  220F               	addwfc	?_readEEPROM+1,f,c
 20869  0031D8  ECA8  F02E         	call	_readEEPROM	;wreg free
 20870  0031DC  D01E               	goto	L53
 20871  0031DE                     l10776:
 20872                           
 20873                           ; BSR set to: 0
 20874                           ;main.c: 1866: else if (reg < 84) {
 20875  0031DE  0E54               	movlw	84
 20876  0031E0  6013               	cpfslt	vscp_readAppReg@reg,c
 20877  0031E2  D010               	goto	l10788
 20878                           
 20879                           ; BSR set to: 0
 20880                           ;main.c: 1868: uint8_t pos = reg - 72;
 20881  0031E4  5013               	movf	vscp_readAppReg@reg,w,c
 20882  0031E6  0FB8               	addlw	184
 20883  0031E8  6E12               	movwf	vscp_readAppReg@pos,c
 20884                           
 20885                           ; BSR set to: 0
 20886                           ;main.c: 1869: if ( pos % 2 ) {
 20887  0031EA  A012               	btfss	vscp_readAppReg@pos,0,c
 20888  0031EC  D002               	goto	l10784
 20889                           
 20890                           ; BSR set to: 0
 20891                           ;main.c: 1870: pos--;
 20892  0031EE  0612               	decf	vscp_readAppReg@pos,f,c
 20893                           
 20894                           ;main.c: 1871: }
 20895  0031F0  D001               	goto	l10786
 20896  0031F2                     l10784:
 20897                           
 20898                           ; BSR set to: 0
 20899                           ;main.c: 1872: else {
 20900                           ;main.c: 1873: pos++;
 20901  0031F2  2A12               	incf	vscp_readAppReg@pos,f,c
 20902  0031F4                     l10786:
 20903                           
 20904                           ; BSR set to: 0
 20905                           ;main.c: 1874: }
 20906                           ;main.c: 1875: rv = adc[ pos ];
 20907  0031F4  0E84               	movlw	low _adc
 20908  0031F6  2412               	addwf	vscp_readAppReg@pos,w,c
 20909  0031F8  6ED9               	movwf	fsr2l,c
 20910  0031FA  6ADA               	clrf	fsr2h,c
 20911  0031FC  0E01               	movlw	high _adc
 20912  0031FE  22DA               	addwfc	fsr2h,f,c
 20913  003200  50DF               	movf	indf2,w,c
 20914  003202  D00B               	goto	L53
 20915  003204                     l10788:
 20916                           
 20917                           ; BSR set to: 0
 20918                           ;main.c: 1878: else if (reg < 98) {
 20919  003204  0E62               	movlw	98
 20920  003206  6013               	cpfslt	vscp_readAppReg@reg,c
 20921  003208  D009               	goto	l10792
 20922                           
 20923                           ; BSR set to: 0
 20924                           ;main.c: 1879: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20925  00320A  0E4A               	movlw	74
 20926  00320C  2413               	addwf	vscp_readAppReg@reg,w,c
 20927  00320E  6E0E               	movwf	?_readEEPROM,c
 20928  003210  6A0F               	clrf	?_readEEPROM+1,c
 20929  003212  0E00               	movlw	0
 20930  003214  220F               	addwfc	?_readEEPROM+1,f,c
 20931  003216  ECA8  F02E         	call	_readEEPROM	;wreg free
 20932  00321A                     L53:
 20933  00321A  6E14               	movwf	vscp_readAppReg@rv,c
 20934  00321C                     l10792:
 20935                           
 20936                           ;main.c: 1880: }
 20937                           ;main.c: 1881: }
 20938                           ;main.c: 1883: return rv;
 20939  00321C  5014               	movf	vscp_readAppReg@rv,w,c
 20940  00321E  0012               	return	
 20941  003220                     __end_of_vscp_readAppReg:
 20942                           	opt stack 0
 20943                           tblptru	equ	0xFF8
 20944                           tblptrh	equ	0xFF7
 20945                           tblptrl	equ	0xFF6
 20946                           tablat	equ	0xFF5
 20947                           prodh	equ	0xFF4
 20948                           prodl	equ	0xFF3
 20949                           intcon	equ	0xFF2
 20950                           postinc0	equ	0xFEE
 20951                           wreg	equ	0xFE8
 20952                           indf1	equ	0xFE7
 20953                           postdec1	equ	0xFE5
 20954                           fsr1h	equ	0xFE2
 20955                           fsr1l	equ	0xFE1
 20956                           indf2	equ	0xFDF
 20957                           postinc2	equ	0xFDE
 20958                           postdec2	equ	0xFDD
 20959                           plusw2	equ	0xFDB
 20960                           fsr2h	equ	0xFDA
 20961                           fsr2l	equ	0xFD9
 20962                           status	equ	0xFD8
 20963                           
 20964 ;; *************** function _interrupt_at_low_vector *****************
 20965 ;; Defined at:
 20966 ;;		line 135 in file "../main.c"
 20967 ;; Parameters:    Size  Location     Type
 20968 ;;		None
 20969 ;; Auto vars:     Size  Location     Type
 20970 ;;		None
 20971 ;; Return value:  Size  Location     Type
 20972 ;;		None               void
 20973 ;; Registers used:
 20974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20975 ;; Tracked objects:
 20976 ;;		On entry : 0/0
 20977 ;;		On exit  : 0/0
 20978 ;;		Unchanged: 0/0
 20979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20980 ;;      Params:         0       0       0       0       0       0       0
 20981 ;;      Locals:         0       0       0       0       0       0       0
 20982 ;;      Temps:          9       0       0       0       0       0       0
 20983 ;;      Totals:         9       0       0       0       0       0       0
 20984 ;;Total ram usage:        9 bytes
 20985 ;; Hardware stack levels used:    1
 20986 ;; Hardware stack levels required when called:    1
 20987 ;; This function calls:
 20988 ;;		i1_ConvertADC
 20989 ;;		i1_WriteTimer0
 20990 ;; This function is called by:
 20991 ;;		Interrupt level 1
 20992 ;; This function uses a non-reentrant model
 20993 ;;
 20994                           
 20995                           	psect	intcodelo
 20996  000818                     __pintcodelo:
 20997                           	opt stack 0
 20998  000818                     _interrupt_at_low_vector:
 20999                           	opt stack 22
 21000                           
 21001                           ;incstack = 0
 21002  000818  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 21003  00081C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 21004  000820  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 21005  000824  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 21006  000828  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 21007  00082C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 21008  000830  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 21009  000834                     
 21010                           ;main.c: 137: if (INTCONbits.TMR0IF) {
 21011  000834  A4F2               	btfss	intcon,2,c	;volatile
 21012  000836  D001               	goto	i1u716_21
 21013  000838  D001               	goto	i1u716_20
 21014  00083A                     i1u716_21:
 21015  00083A  D044               	goto	i1l9202
 21016  00083C                     i1u716_20:
 21017  00083C                     
 21018                           ;main.c: 140: WriteTimer0(0xfb1d);
 21019  00083C  0EFB               	movlw	251
 21020  00083E  6E02               	movwf	?i1_WriteTimer0+1,c
 21021  000840  0E1D               	movlw	29
 21022  000842  6E01               	movwf	?i1_WriteTimer0,c
 21023  000844  ECD6  F02E         	call	i1_WriteTimer0	;wreg free
 21024  000848                     
 21025                           ;main.c: 142: vscp_timer++;
 21026  000848  0100               	movlb	0	; () banked
 21027  00084A  4BB6               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 21028  00084C  2BB7               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 21029  00084E                     
 21030                           ; BSR set to: 0
 21031                           ;main.c: 143: vscp_configtimer++;
 21032  00084E  4BB4               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 21033  000850  2BB5               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 21034  000852                     
 21035                           ; BSR set to: 0
 21036                           ;main.c: 144: measurement_clock++;
 21037  000852  0E01               	movlw	1
 21038  000854  27AC               	addwf	_measurement_clock& (0+255),f,b	;volatile
 21039  000856  0E00               	movlw	0
 21040  000858  23AD               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 21041  00085A  0E00               	movlw	0
 21042  00085C  23AE               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 21043  00085E  0E00               	movlw	0
 21044  000860  23AF               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 21045  000862                     
 21046                           ; BSR set to: 0
 21047                           ;main.c: 145: timeout_clock++;
 21048  000862  0E01               	movlw	1
 21049  000864  27B0               	addwf	_timeout_clock& (0+255),f,b	;volatile
 21050  000866  0E00               	movlw	0
 21051  000868  23B1               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 21052  00086A  0E00               	movlw	0
 21053  00086C  23B2               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 21054  00086E  0E00               	movlw	0
 21055  000870  23B3               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 21056  000872                     
 21057                           ; BSR set to: 0
 21058                           ;main.c: 146: sendTimer++;
 21059  000872  2BBC               	incf	_sendTimer& (0+255),f,b	;volatile
 21060  000874                     
 21061                           ; BSR set to: 0
 21062                           ;main.c: 149: if (!(PORTC & 0x01)) {
 21063  000874  B082               	btfsc	3970,0,c	;volatile
 21064  000876  D001               	goto	i1u717_21
 21065  000878  D001               	goto	i1u717_20
 21066  00087A                     i1u717_21:
 21067  00087A  D002               	goto	i1l138
 21068  00087C                     i1u717_20:
 21069  00087C                     
 21070                           ; BSR set to: 0
 21071                           ;main.c: 151: vscp_initbtncnt++;
 21072  00087C  2BBE               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 21073                           
 21074                           ;main.c: 152: }
 21075  00087E  D001               	goto	i1l9176
 21076  000880                     i1l138:
 21077                           
 21078                           ; BSR set to: 0
 21079                           ;main.c: 153: else {
 21080                           ;main.c: 154: vscp_initbtncnt = 0;
 21081  000880  6BBE               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 21082  000882                     i1l9176:
 21083                           
 21084                           ; BSR set to: 0
 21085                           ;main.c: 155: }
 21086                           ;main.c: 158: vscp_statuscnt++;
 21087  000882  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 21088  000884                     
 21089                           ; BSR set to: 0
 21090                           ;main.c: 159: if ( ( 0x02 ==
 21091                           ;main.c: 160: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 21092  000884  504C               	movf	_vscp_initledfunc,w,c
 21093  000886  0A02               	xorlw	2
 21094  000888  A4D8               	btfss	status,2,c
 21095  00088A  D001               	goto	i1u718_21
 21096  00088C  D001               	goto	i1u718_20
 21097  00088E                     i1u718_21:
 21098  00088E  D00E               	goto	i1l9190
 21099  000890                     i1u718_20:
 21100  000890                     
 21101                           ; BSR set to: 0
 21102  000890  0E64               	movlw	100
 21103  000892  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 21104  000894  D001               	goto	i1u719_21
 21105  000896  D001               	goto	i1u719_20
 21106  000898                     i1u719_21:
 21107  000898  D009               	goto	i1l9190
 21108  00089A                     i1u719_20:
 21109  00089A                     
 21110                           ; BSR set to: 0
 21111                           ;main.c: 161: if ( PORTC & 0x02 ) {
 21112  00089A  A282               	btfss	3970,1,c	;volatile
 21113  00089C  D001               	goto	i1u720_21
 21114  00089E  D001               	goto	i1u720_20
 21115  0008A0                     i1u720_21:
 21116  0008A0  D002               	goto	i1l9186
 21117  0008A2                     i1u720_20:
 21118  0008A2                     i1l9184:
 21119                           
 21120                           ; BSR set to: 0
 21121                           ;main.c: 162: PORTC &= ~0x02;
 21122  0008A2  9282               	bcf	3970,1,c	;volatile
 21123                           
 21124                           ;main.c: 163: }
 21125  0008A4  D001               	goto	i1l9188
 21126  0008A6                     i1l9186:
 21127                           
 21128                           ; BSR set to: 0
 21129                           ;main.c: 164: else {
 21130                           ;main.c: 165: PORTC |= 0x02;
 21131  0008A6  8282               	bsf	3970,1,c	;volatile
 21132  0008A8                     i1l9188:
 21133                           
 21134                           ; BSR set to: 0
 21135                           ;main.c: 166: }
 21136                           ;main.c: 167: vscp_statuscnt = 0;
 21137  0008A8  6A52               	clrf	_vscp_statuscnt,c	;volatile
 21138                           
 21139                           ;main.c: 168: }
 21140  0008AA  D00B               	goto	i1l9200
 21141  0008AC                     i1l9190:
 21142                           
 21143                           ; BSR set to: 0
 21144                           ;main.c: 169: else if (0x01 == vscp_initledfunc) {
 21145  0008AC  044C               	decf	_vscp_initledfunc,w,c
 21146  0008AE  A4D8               	btfss	status,2,c
 21147  0008B0  D001               	goto	i1u721_21
 21148  0008B2  D001               	goto	i1u721_20
 21149  0008B4                     i1u721_21:
 21150  0008B4  D001               	goto	i1l144
 21151  0008B6                     i1u721_20:
 21152  0008B6  D7F7               	goto	i1l9186
 21153  0008B8                     i1l144:
 21154                           
 21155                           ; BSR set to: 0
 21156                           ;main.c: 173: else if (0x00 == vscp_initledfunc) {
 21157  0008B8  664C               	tstfsz	_vscp_initledfunc,c
 21158  0008BA  D001               	goto	i1u722_21
 21159  0008BC  D001               	goto	i1u722_20
 21160  0008BE                     i1u722_21:
 21161  0008BE  D001               	goto	i1l9200
 21162  0008C0                     i1u722_20:
 21163  0008C0  D7F0               	goto	i1l9184
 21164  0008C2                     i1l9200:
 21165                           
 21166                           ; BSR set to: 0
 21167                           ;main.c: 176: }
 21168                           ;main.c: 178: INTCONbits.TMR0IF = 0;
 21169  0008C2  94F2               	bcf	intcon,2,c	;volatile
 21170  0008C4                     i1l9202:
 21171                           
 21172                           ;main.c: 180: }
 21173                           ;main.c: 183: if ( PIR1bits.ADIF ) {
 21174  0008C4  AC9E               	btfss	3998,6,c	;volatile
 21175  0008C6  D001               	goto	i1u723_21
 21176  0008C8  D001               	goto	i1u723_20
 21177  0008CA                     i1u723_21:
 21178  0008CA  D0E5               	goto	i1l164
 21179  0008CC                     i1u723_20:
 21180  0008CC  D0C4               	goto	i1l9264
 21181  0008CE                     i1l9206:
 21182                           
 21183                           ;main.c: 189: adc[(12 * adc_series_counter) + 0] = ADRESH;
 21184  0008CE  5049               	movf	_adc_series_counter,w,c
 21185  0008D0  0D0C               	mullw	12
 21186  0008D2  0E84               	movlw	low _adc
 21187  0008D4  24F3               	addwf	prodl,w,c
 21188  0008D6  6ED9               	movwf	fsr2l,c
 21189  0008D8  0E01               	movlw	high _adc
 21190  0008DA  20F4               	addwfc	prodh,w,c
 21191  0008DC  6EDA               	movwf	fsr2h,c
 21192  0008DE  CFC4 FFDF          	movff	4036,indf2	;volatile
 21193                           
 21194                           ;main.c: 190: adc[(12 * adc_series_counter) + 1] = ADRESL;
 21195  0008E2  5049               	movf	_adc_series_counter,w,c
 21196  0008E4  0D0C               	mullw	12
 21197  0008E6  0E85               	movlw	low (_adc+1)
 21198  0008E8  24F3               	addwf	prodl,w,c
 21199  0008EA  6ED9               	movwf	fsr2l,c
 21200  0008EC  0E01               	movlw	high (_adc+1)
 21201  0008EE  20F4               	addwfc	prodh,w,c
 21202  0008F0  6EDA               	movwf	fsr2h,c
 21203  0008F2  CFC3 FFDF          	movff	4035,indf2	;volatile
 21204  0008F6                     
 21205                           ;main.c: 192: ADCON0 = (2<<2) + 1;
 21206  0008F6  0E09               	movlw	9
 21207  0008F8  6EC2               	movwf	4034,c	;volatile
 21208  0008FA                     
 21209                           ;main.c: 196: if ((80 - 1) == adc_series_counter) {
 21210  0008FA  5049               	movf	_adc_series_counter,w,c
 21211  0008FC  0A4F               	xorlw	79
 21212  0008FE  A4D8               	btfss	status,2,c
 21213  000900  D001               	goto	i1u724_21
 21214  000902  D001               	goto	i1u724_20
 21215  000904                     i1u724_21:
 21216  000904  D0C5               	goto	i1l9266
 21217  000906                     i1u724_20:
 21218  000906                     
 21219                           ;main.c: 197: adc_conversion_flags |= 1;
 21220  000906  0100               	movlb	0	; () banked
 21221  000908  81B8               	bsf	_adc_conversion_flags& (0+255),0,b
 21222  00090A  D0C2               	goto	i1l9266
 21223  00090C                     i1l9214:
 21224                           
 21225                           ;main.c: 203: adc[(12 * adc_series_counter) + 2] = ADRESH;
 21226  00090C  5049               	movf	_adc_series_counter,w,c
 21227  00090E  0D0C               	mullw	12
 21228  000910  0E86               	movlw	low (_adc+2)
 21229  000912  24F3               	addwf	prodl,w,c
 21230  000914  6ED9               	movwf	fsr2l,c
 21231  000916  0E01               	movlw	high (_adc+2)
 21232  000918  20F4               	addwfc	prodh,w,c
 21233  00091A  6EDA               	movwf	fsr2h,c
 21234  00091C  CFC4 FFDF          	movff	4036,indf2	;volatile
 21235                           
 21236                           ;main.c: 204: adc[(12 * adc_series_counter) + 3] = ADRESL;
 21237  000920  5049               	movf	_adc_series_counter,w,c
 21238  000922  0D0C               	mullw	12
 21239  000924  0E87               	movlw	low (_adc+3)
 21240  000926  24F3               	addwf	prodl,w,c
 21241  000928  6ED9               	movwf	fsr2l,c
 21242  00092A  0E01               	movlw	high (_adc+3)
 21243  00092C  20F4               	addwfc	prodh,w,c
 21244  00092E  6EDA               	movwf	fsr2h,c
 21245  000930  CFC3 FFDF          	movff	4035,indf2	;volatile
 21246  000934                     
 21247                           ;main.c: 207: ADCON0 = (1<<2) + 1;
 21248  000934  0E05               	movlw	5
 21249  000936  6EC2               	movwf	4034,c	;volatile
 21250  000938                     
 21251                           ;main.c: 211: if ((80 - 1) == adc_series_counter) {
 21252  000938  5049               	movf	_adc_series_counter,w,c
 21253  00093A  0A4F               	xorlw	79
 21254  00093C  A4D8               	btfss	status,2,c
 21255  00093E  D001               	goto	i1u725_21
 21256  000940  D001               	goto	i1u725_20
 21257  000942                     i1u725_21:
 21258  000942  D0A6               	goto	i1l9266
 21259  000944                     i1u725_20:
 21260  000944                     
 21261                           ;main.c: 212: adc_conversion_flags |= 1 << 1;
 21262  000944  0100               	movlb	0	; () banked
 21263  000946  83B8               	bsf	_adc_conversion_flags& (0+255),1,b
 21264  000948  D0A3               	goto	i1l9266
 21265  00094A                     i1l9222:
 21266                           
 21267                           ;main.c: 218: adc[(12 * adc_series_counter) + 4] = ADRESH;
 21268  00094A  5049               	movf	_adc_series_counter,w,c
 21269  00094C  0D0C               	mullw	12
 21270  00094E  0E88               	movlw	low (_adc+4)
 21271  000950  24F3               	addwf	prodl,w,c
 21272  000952  6ED9               	movwf	fsr2l,c
 21273  000954  0E01               	movlw	high (_adc+4)
 21274  000956  20F4               	addwfc	prodh,w,c
 21275  000958  6EDA               	movwf	fsr2h,c
 21276  00095A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21277                           
 21278                           ;main.c: 219: adc[(12 * adc_series_counter) + 5] = ADRESL;
 21279  00095E  5049               	movf	_adc_series_counter,w,c
 21280  000960  0D0C               	mullw	12
 21281  000962  0E89               	movlw	low (_adc+5)
 21282  000964  24F3               	addwf	prodl,w,c
 21283  000966  6ED9               	movwf	fsr2l,c
 21284  000968  0E01               	movlw	high (_adc+5)
 21285  00096A  20F4               	addwfc	prodh,w,c
 21286  00096C  6EDA               	movwf	fsr2h,c
 21287  00096E  CFC3 FFDF          	movff	4035,indf2	;volatile
 21288  000972                     
 21289                           ;main.c: 222: ADCON0 = (0<<2) + 1;
 21290  000972  0E01               	movlw	1
 21291  000974  6EC2               	movwf	4034,c	;volatile
 21292  000976                     
 21293                           ;main.c: 226: if ((80 - 1) == adc_series_counter) {
 21294  000976  5049               	movf	_adc_series_counter,w,c
 21295  000978  0A4F               	xorlw	79
 21296  00097A  A4D8               	btfss	status,2,c
 21297  00097C  D001               	goto	i1u726_21
 21298  00097E  D001               	goto	i1u726_20
 21299  000980                     i1u726_21:
 21300  000980  D087               	goto	i1l9266
 21301  000982                     i1u726_20:
 21302  000982                     
 21303                           ;main.c: 227: adc_conversion_flags |= 1 << 2;
 21304  000982  0100               	movlb	0	; () banked
 21305  000984  85B8               	bsf	_adc_conversion_flags& (0+255),2,b
 21306  000986  D084               	goto	i1l9266
 21307  000988                     i1l9230:
 21308                           
 21309                           ;main.c: 233: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21310  000988  5049               	movf	_adc_series_counter,w,c
 21311  00098A  0D0C               	mullw	12
 21312  00098C  0E8A               	movlw	low (_adc+6)
 21313  00098E  24F3               	addwf	prodl,w,c
 21314  000990  6ED9               	movwf	fsr2l,c
 21315  000992  0E01               	movlw	high (_adc+6)
 21316  000994  20F4               	addwfc	prodh,w,c
 21317  000996  6EDA               	movwf	fsr2h,c
 21318  000998  CFC4 FFDF          	movff	4036,indf2	;volatile
 21319                           
 21320                           ;main.c: 234: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21321  00099C  5049               	movf	_adc_series_counter,w,c
 21322  00099E  0D0C               	mullw	12
 21323  0009A0  0E8B               	movlw	low (_adc+7)
 21324  0009A2  24F3               	addwf	prodl,w,c
 21325  0009A4  6ED9               	movwf	fsr2l,c
 21326  0009A6  0E01               	movlw	high (_adc+7)
 21327  0009A8  20F4               	addwfc	prodh,w,c
 21328  0009AA  6EDA               	movwf	fsr2h,c
 21329  0009AC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21330  0009B0                     
 21331                           ;main.c: 236: ADCON0 = (9<<2) + 1;
 21332  0009B0  0E25               	movlw	37
 21333  0009B2  6EC2               	movwf	4034,c	;volatile
 21334  0009B4                     
 21335                           ;main.c: 240: if ((80 - 1) == adc_series_counter) {
 21336  0009B4  5049               	movf	_adc_series_counter,w,c
 21337  0009B6  0A4F               	xorlw	79
 21338  0009B8  A4D8               	btfss	status,2,c
 21339  0009BA  D001               	goto	i1u727_21
 21340  0009BC  D001               	goto	i1u727_20
 21341  0009BE                     i1u727_21:
 21342  0009BE  D068               	goto	i1l9266
 21343  0009C0                     i1u727_20:
 21344  0009C0                     
 21345                           ;main.c: 241: adc_conversion_flags |= 1 << 3;
 21346  0009C0  0100               	movlb	0	; () banked
 21347  0009C2  87B8               	bsf	_adc_conversion_flags& (0+255),3,b
 21348  0009C4  D065               	goto	i1l9266
 21349  0009C6                     i1l9238:
 21350                           
 21351                           ;main.c: 247: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21352  0009C6  5049               	movf	_adc_series_counter,w,c
 21353  0009C8  0D0C               	mullw	12
 21354  0009CA  0E8C               	movlw	low (_adc+8)
 21355  0009CC  24F3               	addwf	prodl,w,c
 21356  0009CE  6ED9               	movwf	fsr2l,c
 21357  0009D0  0E01               	movlw	high (_adc+8)
 21358  0009D2  20F4               	addwfc	prodh,w,c
 21359  0009D4  6EDA               	movwf	fsr2h,c
 21360  0009D6  CFC4 FFDF          	movff	4036,indf2	;volatile
 21361                           
 21362                           ;main.c: 248: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21363  0009DA  5049               	movf	_adc_series_counter,w,c
 21364  0009DC  0D0C               	mullw	12
 21365  0009DE  0E8D               	movlw	low (_adc+9)
 21366  0009E0  24F3               	addwf	prodl,w,c
 21367  0009E2  6ED9               	movwf	fsr2l,c
 21368  0009E4  0E01               	movlw	high (_adc+9)
 21369  0009E6  20F4               	addwfc	prodh,w,c
 21370  0009E8  6EDA               	movwf	fsr2h,c
 21371  0009EA  CFC3 FFDF          	movff	4035,indf2	;volatile
 21372  0009EE                     
 21373                           ;main.c: 250: ADCON0 = (8<<2) + 1;
 21374  0009EE  0E21               	movlw	33
 21375  0009F0  6EC2               	movwf	4034,c	;volatile
 21376  0009F2                     
 21377                           ;main.c: 254: if ((80 - 1) == adc_series_counter) {
 21378  0009F2  5049               	movf	_adc_series_counter,w,c
 21379  0009F4  0A4F               	xorlw	79
 21380  0009F6  A4D8               	btfss	status,2,c
 21381  0009F8  D001               	goto	i1u728_21
 21382  0009FA  D001               	goto	i1u728_20
 21383  0009FC                     i1u728_21:
 21384  0009FC  D049               	goto	i1l9266
 21385  0009FE                     i1u728_20:
 21386  0009FE                     
 21387                           ;main.c: 255: adc_conversion_flags |= 1 << 4;
 21388  0009FE  0100               	movlb	0	; () banked
 21389  000A00  89B8               	bsf	_adc_conversion_flags& (0+255),4,b
 21390  000A02  D046               	goto	i1l9266
 21391  000A04                     i1l9246:
 21392                           
 21393                           ;main.c: 261: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21394  000A04  5049               	movf	_adc_series_counter,w,c
 21395  000A06  0D0C               	mullw	12
 21396  000A08  0E8E               	movlw	low (_adc+10)
 21397  000A0A  24F3               	addwf	prodl,w,c
 21398  000A0C  6ED9               	movwf	fsr2l,c
 21399  000A0E  0E01               	movlw	high (_adc+10)
 21400  000A10  20F4               	addwfc	prodh,w,c
 21401  000A12  6EDA               	movwf	fsr2h,c
 21402  000A14  CFC4 FFDF          	movff	4036,indf2	;volatile
 21403                           
 21404                           ;main.c: 262: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21405  000A18  5049               	movf	_adc_series_counter,w,c
 21406  000A1A  0D0C               	mullw	12
 21407  000A1C  0E8F               	movlw	low (_adc+11)
 21408  000A1E  24F3               	addwf	prodl,w,c
 21409  000A20  6ED9               	movwf	fsr2l,c
 21410  000A22  0E01               	movlw	high (_adc+11)
 21411  000A24  20F4               	addwfc	prodh,w,c
 21412  000A26  6EDA               	movwf	fsr2h,c
 21413  000A28  CFC3 FFDF          	movff	4035,indf2	;volatile
 21414  000A2C                     
 21415                           ;main.c: 264: ADCON0 = (10<<2) + 1;
 21416  000A2C  0E29               	movlw	41
 21417  000A2E  6EC2               	movwf	4034,c	;volatile
 21418  000A30                     
 21419                           ;main.c: 268: if ((80 - 1) == adc_series_counter) {
 21420  000A30  5049               	movf	_adc_series_counter,w,c
 21421  000A32  0A4F               	xorlw	79
 21422  000A34  A4D8               	btfss	status,2,c
 21423  000A36  D001               	goto	i1u729_21
 21424  000A38  D001               	goto	i1u729_20
 21425  000A3A                     i1u729_21:
 21426  000A3A  D002               	goto	i1l161
 21427  000A3C                     i1u729_20:
 21428  000A3C                     
 21429                           ;main.c: 269: adc_conversion_flags |= 1 << 5;
 21430  000A3C  0100               	movlb	0	; () banked
 21431  000A3E  8BB8               	bsf	_adc_conversion_flags& (0+255),5,b
 21432  000A40                     i1l161:
 21433                           
 21434                           ;main.c: 270: }
 21435                           ;main.c: 273: adc_series_counter++;
 21436  000A40  2A49               	incf	_adc_series_counter,f,c
 21437  000A42                     
 21438                           ;main.c: 274: if (adc_series_counter >= 80) {
 21439  000A42  0E4F               	movlw	79
 21440  000A44  6449               	cpfsgt	_adc_series_counter,c
 21441  000A46  D001               	goto	i1u730_21
 21442  000A48  D001               	goto	i1u730_20
 21443  000A4A                     i1u730_21:
 21444  000A4A  D022               	goto	i1l9266
 21445  000A4C                     i1u730_20:
 21446  000A4C                     i1l9256:
 21447                           
 21448                           ;main.c: 275: adc_series_counter = 0;
 21449  000A4C  6A49               	clrf	_adc_series_counter,c
 21450  000A4E  D020               	goto	i1l9266
 21451  000A50                     i1l9258:
 21452                           
 21453                           ;main.c: 281: ADCON0 = (10<<2) + 1;
 21454  000A50  0E29               	movlw	41
 21455  000A52  6EC2               	movwf	4034,c	;volatile
 21456  000A54  D7FB               	goto	i1l9256
 21457  000A56                     i1l9264:
 21458  000A56  50C2               	movf	4034,w,c	;volatile
 21459  000A58  0B3C               	andlw	60
 21460  000A5A  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21461  000A5C  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21462                           
 21463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21464                           ; Switch size 1, requested type "speed"
 21465                           ; Number of cases is 1, Range of values is 0 to 0
 21466                           ; switch strategies available:
 21467                           ; Name         Instructions Cycles
 21468                           ; simple_byte            4     3 (average)
 21469                           ;	Chosen strategy is simple_byte
 21470  000A5E  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21471  000A60  0A00               	xorlw	0	; case 0
 21472  000A62  B4D8               	btfsc	status,2,c
 21473  000A64  D001               	goto	i1l14446
 21474  000A66  D7F4               	goto	i1l9258
 21475  000A68                     i1l14446:
 21476                           
 21477                           ; Switch size 1, requested type "speed"
 21478                           ; Number of cases is 6, Range of values is 0 to 40
 21479                           ; switch strategies available:
 21480                           ; Name         Instructions Cycles
 21481                           ; simple_byte           19    10 (average)
 21482                           ;	Chosen strategy is simple_byte
 21483  000A68  5005               	movf	??_interrupt_at_low_vector,w,c
 21484  000A6A  0A00               	xorlw	0	; case 0
 21485  000A6C  B4D8               	btfsc	status,2,c
 21486  000A6E  D78C               	goto	i1l9230
 21487  000A70  0A04               	xorlw	4	; case 4
 21488  000A72  B4D8               	btfsc	status,2,c
 21489  000A74  D76A               	goto	i1l9222
 21490  000A76  0A0C               	xorlw	12	; case 8
 21491  000A78  B4D8               	btfsc	status,2,c
 21492  000A7A  D748               	goto	i1l9214
 21493  000A7C  0A28               	xorlw	40	; case 32
 21494  000A7E  B4D8               	btfsc	status,2,c
 21495  000A80  D7C1               	goto	i1l9246
 21496  000A82  0A04               	xorlw	4	; case 36
 21497  000A84  B4D8               	btfsc	status,2,c
 21498  000A86  D79F               	goto	i1l9238
 21499  000A88  0A0C               	xorlw	12	; case 40
 21500  000A8A  B4D8               	btfsc	status,2,c
 21501  000A8C  D720               	goto	i1l9206
 21502  000A8E  D7E0               	goto	i1l9258
 21503  000A90                     i1l9266:
 21504                           
 21505                           ;main.c: 287: ConvertADC();
 21506  000A90  EC05  F02F         	call	i1_ConvertADC	;wreg free
 21507  000A94                     
 21508                           ;main.c: 289: PIR1bits.ADIF = 0;
 21509  000A94  9C9E               	bcf	3998,6,c	;volatile
 21510  000A96                     i1l164:
 21511  000A96  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21512  000A9A  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21513  000A9E  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21514  000AA2  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21515  000AA6  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21516  000AAA  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21517  000AAE  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21518  000AB2  0010               	retfie	
 21519  000AB4                     __end_of_interrupt_at_low_vector:
 21520                           	opt stack 0
 21521                           tblptru	equ	0xFF8
 21522                           tblptrh	equ	0xFF7
 21523                           tblptrl	equ	0xFF6
 21524                           tablat	equ	0xFF5
 21525                           prodh	equ	0xFF4
 21526                           prodl	equ	0xFF3
 21527                           intcon	equ	0xFF2
 21528                           postinc0	equ	0xFEE
 21529                           wreg	equ	0xFE8
 21530                           indf1	equ	0xFE7
 21531                           postdec1	equ	0xFE5
 21532                           fsr1h	equ	0xFE2
 21533                           fsr1l	equ	0xFE1
 21534                           bsr	equ	0xFE0
 21535                           indf2	equ	0xFDF
 21536                           postinc2	equ	0xFDE
 21537                           postdec2	equ	0xFDD
 21538                           plusw2	equ	0xFDB
 21539                           fsr2h	equ	0xFDA
 21540                           fsr2l	equ	0xFD9
 21541                           status	equ	0xFD8
 21542                           
 21543 ;; *************** function i1_WriteTimer0 *****************
 21544 ;; Defined at:
 21545 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21546 ;; Parameters:    Size  Location     Type
 21547 ;;  timer0          2    0[COMRAM] unsigned int 
 21548 ;; Auto vars:     Size  Location     Type
 21549 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21550 ;; Return value:  Size  Location     Type
 21551 ;;		None               void
 21552 ;; Registers used:
 21553 ;;		None
 21554 ;; Tracked objects:
 21555 ;;		On entry : 0/0
 21556 ;;		On exit  : 0/0
 21557 ;;		Unchanged: 0/0
 21558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21559 ;;      Params:         2       0       0       0       0       0       0
 21560 ;;      Locals:         2       0       0       0       0       0       0
 21561 ;;      Temps:          0       0       0       0       0       0       0
 21562 ;;      Totals:         4       0       0       0       0       0       0
 21563 ;;Total ram usage:        4 bytes
 21564 ;; Hardware stack levels used:    1
 21565 ;; This function calls:
 21566 ;;		Nothing
 21567 ;; This function is called by:
 21568 ;;		_interrupt_at_low_vector
 21569 ;; This function uses a non-reentrant model
 21570 ;;
 21571                           
 21572                           	psect	text100
 21573  005DAC                     __ptext100:
 21574                           	opt stack 0
 21575  005DAC                     i1_WriteTimer0:
 21576                           	opt stack 22
 21577                           
 21578                           ;incstack = 0
 21579                           ;incstack = 0
 21580  005DAC  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21581  005DB0  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21582  005DB4  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21583  005DB8  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21584  005DBC  0012               	return	
 21585  005DBE                     __end_ofi1_WriteTimer0:
 21586                           	opt stack 0
 21587                           tblptru	equ	0xFF8
 21588                           tblptrh	equ	0xFF7
 21589                           tblptrl	equ	0xFF6
 21590                           tablat	equ	0xFF5
 21591                           prodh	equ	0xFF4
 21592                           prodl	equ	0xFF3
 21593                           intcon	equ	0xFF2
 21594                           postinc0	equ	0xFEE
 21595                           wreg	equ	0xFE8
 21596                           indf1	equ	0xFE7
 21597                           postdec1	equ	0xFE5
 21598                           fsr1h	equ	0xFE2
 21599                           fsr1l	equ	0xFE1
 21600                           bsr	equ	0xFE0
 21601                           indf2	equ	0xFDF
 21602                           postinc2	equ	0xFDE
 21603                           postdec2	equ	0xFDD
 21604                           plusw2	equ	0xFDB
 21605                           fsr2h	equ	0xFDA
 21606                           fsr2l	equ	0xFD9
 21607                           status	equ	0xFD8
 21608                           
 21609 ;; *************** function i1_ConvertADC *****************
 21610 ;; Defined at:
 21611 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21612 ;; Parameters:    Size  Location     Type
 21613 ;;		None
 21614 ;; Auto vars:     Size  Location     Type
 21615 ;;		None
 21616 ;; Return value:  Size  Location     Type
 21617 ;;		None               void
 21618 ;; Registers used:
 21619 ;;		None
 21620 ;; Tracked objects:
 21621 ;;		On entry : 0/0
 21622 ;;		On exit  : 0/0
 21623 ;;		Unchanged: 0/0
 21624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21625 ;;      Params:         0       0       0       0       0       0       0
 21626 ;;      Locals:         0       0       0       0       0       0       0
 21627 ;;      Temps:          0       0       0       0       0       0       0
 21628 ;;      Totals:         0       0       0       0       0       0       0
 21629 ;;Total ram usage:        0 bytes
 21630 ;; Hardware stack levels used:    1
 21631 ;; This function calls:
 21632 ;;		Nothing
 21633 ;; This function is called by:
 21634 ;;		_interrupt_at_low_vector
 21635 ;; This function uses a non-reentrant model
 21636 ;;
 21637                           
 21638                           	psect	text101
 21639  005E0A                     __ptext101:
 21640                           	opt stack 0
 21641  005E0A                     i1_ConvertADC:
 21642                           	opt stack 22
 21643                           
 21644                           ;incstack = 0
 21645                           ;incstack = 0
 21646  005E0A  82C2               	bsf	4034,1,c	;volatile
 21647  005E0C  0012               	return	
 21648  005E0E                     __end_ofi1_ConvertADC:
 21649                           	opt stack 0
 21650                           tblptru	equ	0xFF8
 21651                           tblptrh	equ	0xFF7
 21652                           tblptrl	equ	0xFF6
 21653                           tablat	equ	0xFF5
 21654                           prodh	equ	0xFF4
 21655                           prodl	equ	0xFF3
 21656                           intcon	equ	0xFF2
 21657                           postinc0	equ	0xFEE
 21658                           wreg	equ	0xFE8
 21659                           indf1	equ	0xFE7
 21660                           postdec1	equ	0xFE5
 21661                           fsr1h	equ	0xFE2
 21662                           fsr1l	equ	0xFE1
 21663                           bsr	equ	0xFE0
 21664                           indf2	equ	0xFDF
 21665                           postinc2	equ	0xFDE
 21666                           postdec2	equ	0xFDD
 21667                           plusw2	equ	0xFDB
 21668                           fsr2h	equ	0xFDA
 21669                           fsr2l	equ	0xFD9
 21670                           status	equ	0xFD8
 21671                           tblptru	equ	0xFF8
 21672                           tblptrh	equ	0xFF7
 21673                           tblptrl	equ	0xFF6
 21674                           tablat	equ	0xFF5
 21675                           prodh	equ	0xFF4
 21676                           prodl	equ	0xFF3
 21677                           intcon	equ	0xFF2
 21678                           postinc0	equ	0xFEE
 21679                           wreg	equ	0xFE8
 21680                           indf1	equ	0xFE7
 21681                           postdec1	equ	0xFE5
 21682                           fsr1h	equ	0xFE2
 21683                           fsr1l	equ	0xFE1
 21684                           bsr	equ	0xFE0
 21685                           indf2	equ	0xFDF
 21686                           postinc2	equ	0xFDE
 21687                           postdec2	equ	0xFDD
 21688                           plusw2	equ	0xFDB
 21689                           fsr2h	equ	0xFDA
 21690                           fsr2l	equ	0xFD9
 21691                           status	equ	0xFD8
 21692                           
 21693                           	psect	text102
 21694  000000                     __ptext102:
 21695                           	opt stack 0
 21696                           tblptru	equ	0xFF8
 21697                           tblptrh	equ	0xFF7
 21698                           tblptrl	equ	0xFF6
 21699                           tablat	equ	0xFF5
 21700                           prodh	equ	0xFF4
 21701                           prodl	equ	0xFF3
 21702                           intcon	equ	0xFF2
 21703                           postinc0	equ	0xFEE
 21704                           wreg	equ	0xFE8
 21705                           indf1	equ	0xFE7
 21706                           postdec1	equ	0xFE5
 21707                           fsr1h	equ	0xFE2
 21708                           fsr1l	equ	0xFE1
 21709                           bsr	equ	0xFE0
 21710                           indf2	equ	0xFDF
 21711                           postinc2	equ	0xFDE
 21712                           postdec2	equ	0xFDD
 21713                           plusw2	equ	0xFDB
 21714                           fsr2h	equ	0xFDA
 21715                           fsr2l	equ	0xFD9
 21716                           status	equ	0xFD8
 21717                           
 21718                           	psect	rparam
 21719  0000                     tblptru	equ	0xFF8
 21720                           tblptrh	equ	0xFF7
 21721                           tblptrl	equ	0xFF6
 21722                           tablat	equ	0xFF5
 21723                           prodh	equ	0xFF4
 21724                           prodl	equ	0xFF3
 21725                           intcon	equ	0xFF2
 21726                           postinc0	equ	0xFEE
 21727                           wreg	equ	0xFE8
 21728                           indf1	equ	0xFE7
 21729                           postdec1	equ	0xFE5
 21730                           fsr1h	equ	0xFE2
 21731                           fsr1l	equ	0xFE1
 21732                           bsr	equ	0xFE0
 21733                           indf2	equ	0xFDF
 21734                           postinc2	equ	0xFDE
 21735                           postdec2	equ	0xFDD
 21736                           plusw2	equ	0xFDB
 21737                           fsr2h	equ	0xFDA
 21738                           fsr2l	equ	0xFD9
 21739                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     64     124
    BANK1           256     54     132
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	 size(2) Largest target is 0

    ?_eval_poly	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	 size(2) Largest target is 0

    ?___flneg	 size(2) Largest target is 0

    ?___asflmul	 size(2) Largest target is 0

    ?___flpack	 size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___aldiv
    ___lwtofl->___flpack
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _eval_poly->___fladd
    ___fltol->___flmul
    ___altofl->___aldiv
    ___flsub->___fladd
    ___asflmul->___flmul
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_vscp_sendEvent
    _setEventData->_Celsius2Kelvin
    _Celsius2Fahrenheit->___fladd
    ___fladd->___flmul
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_writeCoeffs2Ram
    _writeCoeffs2Ram->___wmul
    ___wmul->_readEEPROM
    ___awtofl->___flpack
    ___flmul->___awtofl
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    _log->___fldiv
    _exp->___fldiv
    _ldexp->_eval_poly
    _eval_poly->___fladd
    _floor->___altofl
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _sendTempEvent->_setEventData
    _setEventData->_Celsius2Fahrenheit
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  148262
                                             63 BANK0      1     1      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              68    68      0   74037
                                             49 BANK0     14    14      0
                                              0 BANK1     54    54      0
                        _writeEEPROM
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                     _vscp_sendEvent
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     865
                                             23 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6    2070
                                             38 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    3985
                                             58 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             61 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                  8     6      2     161
                                             17 COMRAM     8     6      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   14303
                                             66 COMRAM     2     2      0
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   24732
                                             38 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             12 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    6410
                                             58 COMRAM     8     1      7
                                              8 BANK0      4     4      0
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    6633
                                             11 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             51 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4    1120
                                              6 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    4140
                                             58 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3930
                                              8 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4    2255
                                             51 COMRAM     5     1      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    1860
                                             16 BANK0     22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                      4     4      0   18687
                                             51 BANK0      4     4      0
                         _readEEPROM
                     _vscp_sendEvent
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0   15142
                                             51 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0   14697
                                             67 COMRAM     2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3   12082
                                             42 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    6955
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3775
                                             51 COMRAM     7     7      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    3050
                                             58 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   27056
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    7456
                                             40 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2824
                                             33 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0    1260
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      1     1      0     502
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     124
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     155
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4477
                                             32 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             35 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             18 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             17 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     254
                                             17 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     186
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     251
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4726
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     344
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      93
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1070
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0     758
                                             32 COMRAM     1     1      0
                    _writeCoeffs2Ram
 ---------------------------------------------------------------------------------
 (5) _writeCoeffs2Ram                                      9     9      0     628
                                             23 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     232
                                             17 COMRAM     6     2      4
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    1120
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    2045
                                             29 COMRAM    22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             17 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _writeCoeffs2Ram
         _readEEPROM
         ___wmul
           _readEEPROM (ARG)
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _writeCoeffs2Ram
           _readEEPROM
           ___wmul
             _readEEPROM (ARG)
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _writeCoeffs2Ram
               _readEEPROM
               ___wmul
                 _readEEPROM (ARG)
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _writeCoeffs2Ram
             _readEEPROM
             ___wmul
               _readEEPROM (ARG)
     ___lbmod
   _handle_sync
     _readEEPROM
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _sendTempEvent
       _readEEPROM
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
   _doWork
     _writeEEPROM
     _readEEPROM
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
       ___flpack (ARG)
     ___wmul
       _readEEPROM (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     36      84       7       51.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     40      7C       5       77.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152       3        0.0%
DATA                 0      0     51D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Sep 14 10:17:44 2015

                          ___asfldiv@f1p 0086                            ___altofl@sign 006A  
                           ___fldiv@cntr 007F                  __end_of_vscp_readAppReg 3220  
                           ___fldiv@sign 0085                    __end_of_sendVSCPFrame 4EF0  
                           ___asflmul@mp 0038                             ___asflsub@f2 003D  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0014  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 4012  
                          ___asflsub@f1p 003B                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 59A4                              __CFG_WDT$ON 000000  
                                    l201 1D6E                                      l208 20AA  
                                    l224 22EA                                      l321 2B1A  
                                    l410 2F1A                                      l323 2B24  
                                    l315 2AFC                                      l317 2B06  
                                    l253 4E16                                      l245 3C7C  
                                    l319 2B10                                      l183 4952  
                                    l168 48E4                                      l177 4928  
                     vscp_readStdReg@idx 0020                                      l522 1532  
                                    l519 14E4                                      l295 5366  
                                    l640 5A60                                      l552 5C2A  
                                    l629 540C                                      l831 42E6  
                                    l823 424E                                      l825 426C  
                                    l594 5CFA                                      l851 3912  
                                    l843 3A76                                      l836 38A2  
                                    l853 3926                                      l918 5B72  
                                    l846 3970                       vscp_readStdReg@reg 0023  
                                    l855 393A                                      l847 38F0  
                                    l857 394A                                      l849 38FE  
                                    l890 444A                                      l867 39DE  
                                    l859 395A                                      l868 3A02  
                                    l885 459A                                      l895 54F0  
         __size_of_vscp_handleProbeState 00BE                         setEventData@ival 0091  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 4CD0  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 008C                                      _adc 0184  
                                    _exp 3C7E                                      _log 459C  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0032  
                           ___flmul@sign 0033                            ___flpack@sign 0013  
                           ___fltol@exp1 003D                                     l1031 57C4  
                                   l1103 56D4                                     l1107 5C80  
                                   l1036 5BE6                                     l1212 33E6  
                                   l1054 4CBA                                     l1046 4CCA  
                                   l1303 5552                                     l1055 4C9C  
                                   l1047 4C58                                     l1152 5C08  
                                   l1090 5A08                                     l1083 5BC2  
                                   l1236 357E                                     l1317 5C62  
                                   l1237 3592                                     l1318 5C64  
                                   l1094 5AB4                                     l1238 35D4  
                                   l1079 58B6                                     l1247 3610  
                                   l1280 5ADE                                     l1272 3868  
                                   l1089 59FC                                     l1178 47CA  
                                   l1542 4BA4                                     l1622 4A90  
                                   l1607 4F9C                                     l1615 566A  
                                   l1616 5688                                     l1537 4B60  
                                   l1538 4C10                                     l1563 3E62  
                                   l1548 4BD2                                     l1590 40F6  
                                   l1566 3D2C                                     l1575 4036  
                                   l1567 3E52                                     l1576 4180  
                                   l1656 4806                                     l1657 48CE  
                                   l1579 405E                                     l1659 48BE  
                                   l1684 529A                                     l1668 517E  
                                   l1855 46C8                                     l1688 5042  
                __end_of_doOneSecondWork 3C7E                      vscp_readStdReg@code 0018  
              vscp_getManufacturerId@idx 0012                                     l8300 38DE  
                                   ?_exp 0086                                     ?_log 0086  
                                   l8152 53B0                                     l9130 5AEA  
                                   l8164 5A3E                                     l8406 5D08  
                                   l8078 5C88                                     l8440 549C  
                                   l8344 3984                                     l8168 5A42  
                                   l8450 54C6                                     l8442 54A6  
                                   l8354 39A4                                     l9138 5B00  
                                   l8444 54B0                                     l8436 548A  
                                   l8380 3A30                                     l8372 3A04  
                                   l8292 38D0                                     l8276 3890  
                                   l8446 54BA                                     l8438 5492  
                                   l8454 54D2                                     l8286 38BA  
                                   l8294 38DA                                     l8448 54C0  
                                   l8394 3A60                                     l8468 437C  
                                   l8388 3A4A                                     l9700 323C  
                                   l9702 3242                                     l9632 4C34  
                                   l9720 327A                                     l9634 4C3A  
                                   l9618 4C14                                     l9722 3280  
                                   l9652 4C74                                     l9582 2960  
                                   l9910 3552                                     l9806 337E  
                                   l9830 3408                                     l9568 5BD2  
                                   l9656 4C78                                     l9816 33B2  
                                   l9736 3288                                     l9658 4C7C  
                                   l9834 3418                                     l9770 32BA  
                                   l9844 347A                                     l9828 33EA  
                                   l9756 32AE                                     l9926 3572  
                                   l9838 3430                                     l9694 322A  
                                   l9688 4CBE                                     l9848 3490  
                                   l9864 34C0                                     l9696 3230  
                                   l9962 35C8                                     l9954 35B8  
                                   l9946 359A                                     l9882 3516  
                                   l9866 34C2                                     l9786 3316  
                                   l9698 3236                                     l9972 35D6  
                                   l9876 34E6                                     l9868 34CC  
                                   l9796 334A                                     l9958 35C0  
                                   l9894 3532                                     l9976 35F0  
                                   l9998 3618              __size_of_vscp_getMatrixInfo 001A  
                         sendCANFrame@id 003C                                     u5460 5400  
                                   u5465 53F6                                     u5635 3898  
                                   u5637 389A                                     u9025 4E7A  
                                   u5955 432A                                     u9155 4486  
                                   u5965 434A                                     u9165 44AC  
                                   u5975 4398                                     u9175 44D6  
                                   u9520 3FE0                                     u9525 3FD6  
                                   u9490 3F7E                                     u9495 3F74  
                       ??_ECANInitialize 000F                vscp_setManufacturerId@idx 0012  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 48D0                                     _init 58F4  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   exp@x 0086                                     log@x 0086  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0B6E                              _vscp_minute 004D  
                            _vscp_second 0051                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0AB4  
          __size_of_vscp_doOneSecondWork 004C                        vscp_getUserID@idx 0012  
                  __size_of_vscp_setGUID 0022                         _vscp_writeStdReg 46CA  
                            _writeEEPROM 5B56                ECANReceiveMessage@dataLen 0016  
                  getVSCPFrame@pPriority 0026                          __end_of_OpenADC 5556  
                        _sh_coefficients 0106                     __end_of_getVSCPFrame 540E  
                                  ??_exp 0046                                    ??_log 0043  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 0010  
                       __RegsToCANID@ptr 000E                   __end_of_Celsius2Kelvin 59DA  
                   __size_of_getCANFrame 002C                                    l10012 3640  
                                  l10022 3662                                    l11000 181A  
                                  l10040 36A6                                    l10112 3806  
                                  l11010 1830                                    l10034 368E  
                                  l11012 1840                                    l10060 36F4  
                                  l11110 41E8                                    l10038 36A0  
                                  l11104 41D8                                    l11008 182E  
                                  l11016 186C                                    l10064 370A  
                                  l10056 36DA                                    l10232 56AA  
                                  l11122 4212                                    l10090 37A6  
                                  l10242 56BC                                    l11132 4252  
                                  l11300 3ECA                                    l11028 5C16  
                                  l10068 3726                                    l11310 3EEC  
                                  l10086 377E                                    l10078 3750  
                                  l10238 56B4                                    l10600 2B4E  
                                  l11144 429C                                    l11152 42B6  
                                  _B0CON 000E20                                    l10610 2B8A  
                                  l10602 2B5A                                    l11138 426E  
                                  l11162 42DC                                    l11218 58AE  
                                  l11330 3F26                                    l11322 3F0E  
                                  l11314 3EF8                                    l11306 3EE0  
                                  l10700 2DA6                                    l10620 2BC6  
                                  l10612 2B96                                    l10604 2B66  
                                  l11180 44C2                                    l11164 42DE  
                                  l11340 3F88                                    l11420 479C  
                                  l11404 474E                                    l11500 4D58  
                                  l10710 2DE2                                    l10702 2DB2  
                                  l10630 2C02                                    l10622 2BD2  
                                  l10614 2BA2                                    l10606 2B72  
                                  l10550 504E                                    l11158 42D8  
                                  l11350 3FE8                                    l11326 3F1A  
                                  l11318 3F02                                    l11262 5C7A  
                                  l11406 4752                                    l10720 2E1E  
                                  l10712 2DEE                                    l10704 2DBE  
                                  l10640 2C3E                                    l10632 2C0E  
                                  l10624 2BDE                                    l10616 2BAE  
                                  l10608 2B7E                                    l10544 5048  
                                  l10528 5846                                    l11088 5A0C  
                                  l11280 3E8C                                    l11360 400E  
                                  l11272 3E78                                    l10800 0B84  
                                  l11408 4768                                    l11504 4D66  
                                  l14000 204E                                    _B1CON 000E30  
                                  l10730 2E5A                                    l10722 2E2A  
                                  l10714 2DFA                                    l10706 2DCA  
                                  l10650 2C7A                                    l10642 2C4A  
                                  l10634 2C1A                                    l10626 2BEA  
                                  l10618 2BBA                                    l10570 2AB0  
                                  l10810 0C10                                    l10802 0BA0  
                                  l14002 2058                                    l10740 2E96  
                                  l10732 2E66                                    l10724 2E36  
                                  l10716 2E06                                    l10708 2DD6  
                                  l10660 2CB6                                    l10652 2C86  
                                  l10644 2C56                                    l10636 2C26  
                                  l10628 2BF6                                    l10580 2AEC  
                                  l10572 2ABC                                    l11356 3FFE  
                                  l11292 3EAE                                    l11284 3E96  
                                  l11276 3E82                                    l10900 10F0  
                                  l10820 0C9C                                    l10812 0C2C  
                                  l10804 0BBC                                    l11428 47B0  
                                  l11372 5BFE                                    l11508 4D7A  
                                  l10750 2ED2                                    l10742 2EA2  
                                  l10734 2E72                                    l10726 2E42  
                                  l10718 2E12                                    l10670 2CF2  
                                  l10662 2CC2                                    l10654 2C92  
                                  l10646 2C62                                    l10638 2C32  
                                  l10590 2B20                                    l10582 2AF8  
                                  l10574 2AC8                                    l10566 2A98  
                                  l10910 1172                                    l10902 110A  
                                  l10830 0D28                                    l10822 0CB8  
                                  l10814 0C48                                    l10806 0BD8  
                                  l11390 4714                                    l11438 47CC  
                                  l10760 2F0E                                    l10752 2EDE  
                                  l10744 2EAE                                    l10736 2E7E  
                                  l10728 2E4E                                    l10680 2D2E  
                                  l10672 2CFE                                    l10664 2CCE  
                                  l10656 2C9E                                    l10648 2C6E  
                                  l10584 2B02                                    l10576 2AD4  
                                  l10568 2AA4                                    l11296 3EBA  
                                  l11288 3EA2                                    l10920 11F4  
                                  l10912 118C                                    l10904 1124  
                                  l10840 0DB4                                    l10832 0D44  
                                  l10824 0CD4                                    l10816 0C64  
                                  l10808 0BF4                                    l11384 46F4  
                                  l14200 4070                                    l14040 228E  
                                  l14016 2174                                    _B2CON 000E40  
                                  l10762 2F1E                                    l10754 2EEA  
                                  l10746 2EBA                                    l10738 2E8A  
                                  l10690 2D6A                                    l10682 2D3A  
                                  l10674 2D0A                                    l10666 2CDA  
                                  l10658 2CAA                                    l10594 2B2A  
                                  l10586 2B0C                                    l10578 2AE0  
                                  l10770 31C0                                    l10930 1276  
                                  l10922 120E                                    l10914 11A6  
                                  l10906 113E                                    l10850 0E40  
                                  l10842 0DD0                                    l10834 0D60  
                                  l10826 0CF0                                    l10818 0C80  
                                  l11490 4D26                                    l11482 4D02  
                                  l14050 22E0                                    l14018 218E  
                                  l10764 2F2A                                    l10756 2EF6  
                                  l10748 2EC6                                    l10692 2D76  
                                  l10684 2D46                                    l10676 2D16  
                                  l10668 2CE6                                    l10596 2B36  
                                  l10588 2B16                                    l10940 12F8  
                                  l10932 1290                                    l10924 1228  
                                  l10916 11C0                                    l10908 1158  
                                  l10860 0ECC                                    l10852 0E5C  
                                  l10844 0DEC                                    l10836 0D7C  
                                  l10828 0D0C                                    l11396 4730  
                                  l14132 4DFA                                    l11820 5132  
                                  l11804 50EE                                    l11740 4FE0  
                                  l11492 4D2A                                    l11476 4CEA  
                                  l10758 2F02                                    l10694 2D82  
                                  l10686 2D52                                    l10678 2D22  
                                  l10598 2B42                                    l14150 4B6A  
                                  l10950 137A                                    l10942 1312  
                                  l10934 12AA                                    l10926 1242  
                                  l10918 11DA                                    l10870 0F58  
                                  l10862 0EE8                                    l10854 0E78  
                                  l10846 0E08                                    l10838 0D98  
                                  l14222 40A8                                    l11830 5156  
                                  l11806 50F8                                    l11750 4FFE  
                                  l14038 2284                                    l10784 31F2  
                                  l10776 31DE                                    l10696 2D8E  
                                  l10688 2D5E                                    l10792 321C  
                                  l10768 2F36                                    l14160 4BBA  
                                  l14152 4B76                                    l14320 4A08  
                                  l14304 49CE                                    l10960 13FC  
                                  l10952 1394                                    l10944 132C  
                                  l10936 12C4                                    l10928 125C  
                                  l10880 0FE4                                    l10872 0F74  
                                  l10864 0F04                                    l10856 0E94  
                                  l10848 0E24                                    l14240 410E  
                                  l14224 40B6                                    l14216 408A  
                                  l14128 4DC2                                    l11832 515A  
                                  l11824 5142                                    l14064 3CD0  
                                  l11488 4D1A                                    _B3CON 000E50  
                                  l10786 31F4                                    l10698 2D9A  
                                  l14162 4BC6                                    l14154 4B8E  
                                  l10970 147E                                    l10962 1416  
                                  l10954 13AE                                    l10946 1346  
                                  l10938 12DE                                    l10890 106E  
                                  l10882 1000                                    l10874 0F90  
                                  l10866 0F20                                    l10858 0EB0  
                                  l14234 40E2                                    l14226 40BE  
                                  l11770 5686                                    l11754 500A  
                                  l14058 3C9C                                    l10788 3204  
                                  l14332 4A38                                    l14324 4A1C  
                                  l14308 49E2                                    l10980 1518  
                                  l10972 1498                                    l10964 1430  
                                  l10956 13C8                                    l10948 1360  
                                  l10892 1088                                    l10884 101C  
                                  l10876 0FAC                                    l10868 0F3C  
                                  l14252 4154                                    l14244 4126  
                                  l14236 40F0                                    l14228 40C4  
                                  l14180 56F2                                    l11764 5654  
                                  l11836 516E                                    l11828 514A  
                                  l14084 3E20                                    l14068 3CFA  
                                  l10982 1536                                    l10974 14B2  
                                  l10966 144A                                    l10958 13E2  
                                  l10894 10A2                                    l10886 1038  
                                  l10878 0FC8                                    l10990 156E  
                                  l11790 523C                                    l14336 4A4C  
                                  l14360 597A                                    l10984 1550  
                                  l10976 14CC                                    l10968 1464  
                                  l10896 10BC                                    l10888 1054  
                                  l10992 17E2                                    l14280 4F34  
                                  l14264 4EFE                                    l14096 45BA  
                                  _B4CON 000E60                                    l10986 156A  
                                  l10978 14FE                                    l10898 10D6  
                                  l14194 4048                                    l13810 5382  
                                  l13802 5342                                    l11778 5B8E  
          __size_of_vscp_getMajorVersion 0002                                    l13812 538C  
                                  l14268 4F14                                    l13900 18A8  
                                  l13740 4918                                    l13732 4906  
                                  l13806 5370                                    l14374 4810  
                                  l13742 491C                                    l13824 3A82  
                                  l14288 4F62                                    l13752 4938  
                                  l13744 4922                                    l13736 490E  
                                  _B5CON 000E70                                    l13850 3B52  
                                  l13834 3AC6                                    l14378 482C  
                                  l14386 4AC0                                    l13762 4956  
                                  l13852 3B5C                                    l14388 4B3A  
                                  l13908 18D2                                    l13780 4998  
                                  l13764 496E                                    l13862 3BAA  
                                  l13790 49B8                                    l13758 494C  
                                  l13960 1E5E                                    l13786 49B0  
                                  l13876 3C1C                                    l13980 1F54  
                                  l13972 1E76                                    l13798 531E  
                                  l13878 3C26                                    l13958 1E44  
                                  l13888 3C74                                    l13978 1F3A  
             __end_of_vscp_goActiveState 5C4A                            ___fltol@sign1 003C  
                        __end_of___aldiv 4D8C            ??_vscp_writeNicknamePermanent 0011  
                     writeEEPROM@address 000E                          __end_of___fladd 4182  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                          __end_of___fldiv 4F9E  
                          i1_WriteTimer0 5DAC                          __end_of___flneg 5BA0  
                                  _EEADR 000FA9                          __end_of___lbmod 5B08  
                        __end_of___flmul 4A92                          __end_of___flsub 58F4  
                        __end_of___fltol 5180                  _vscp_handleDropNickname 59DA  
                                  _BSEL0 000DF8                                    u10200 4FD6  
                                  _T0CON 000FD5                                    u10290 5116  
                                  u10295 510C                                    u13104 1E88  
                                  u13024 18BA                                    u13105 1E84  
                                  u13025 18B6                                    u13204 20BA  
                                  u13205 20B6                                    u13134 1F4A  
                                  u13135 1F46                                    u13234 2184  
                                  u13154 1FDC                                    u13074 1E56  
                                  u13235 2180                                    u13155 1FD8  
                                  u13075 1E52                                    u13254 2212  
                                  u13255 220E                                    u13370 3E16  
                                  u13710 4F0A                                    u13390 45B0  
                                  u12914 3AF0                                    u12915 3AEC  
                                  u13740 49D8                                    u12964 3BBA  
                                  u12965 3BB6                                    i1l144 08B8  
                                  i1l161 0A40                                    i1l138 0880  
                                  i1l164 0A96                          sendCANFrame@dlc 0040  
                                  _MSEL0 000DF0                                    _MSEL1 000DF1  
                                  _MSEL2 000DF2                                    _IRXIF 007D27  
                      ??_writeCoeffs2Ram 0018                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 5DF0  
             _vscp_readNicknamePermanent 5DE6                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                       setEventData@newval 008D  
                       ?_vscp_getSubzone 0001                           __CFG_EBTR0$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                          ___awtofl@sign 001D                           __CFG_EBTR3$OFF 000000  
                  __end_of_sendTempEvent 531C                             _vscp_getGUID 5D3C  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                                  _floor 47D0                                    _ldexp 4F9E  
                           _vscp_getZone 5DC8                                    _frexp 5216  
                     vscp_writeAppReg@rv 0024                _vscp_getRegisterPagesUsed 5E0E  
                 __size_of_vscp_getEvent 002A                                    main@i 009F  
                             _ConvertADC 5E06                             _vscp_setGUID 5C0A  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 5E14  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 5B56                              exp@exponent 008E  
                            ldexp@newexp 0070                     _ECANSetOperationMode 5CFC  
                        __initialization 57F6                              log@exponent 0043  
                           __end_of_main 49C2                             __end_of_init 5930  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0818  
                        ?_Celsius2Kelvin 003B                           __CFG_OSC$HSPLL 000000  
                      ??_ECANSendMessage 001F                           ?i1_WriteTimer0 0001  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 0024  
                 ??_vscp_restoreDefaults 0022                                   ??_main 0046  
                                 ??_init 0022            __size_of_vscp_handleHeartbeat 003E  
               ??_vscp_getManufacturerId 0012                 ??_vscp_setManufacturerId 0012  
               _vscp_handleProtocolEvent 3220                            __activetblptr 000002  
                      __RegsToCANID@type 0011               ECANReceiveMessage@msgFlags 0017  
                       doWork@calVoltage 0152                __size_of__ECANPointBuffer 0076  
                                 _B0TXEN 006FC2                                   _B1TXEN 006FC3  
                                 _B2TXEN 006FC4                                   _B3TXEN 006FC5  
                                 _B4TXEN 006FC6                                   _B5TXEN 006FC7  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   ?_floor 006B  
                                 ?_ldexp 006C                     __size_of_handle_sync 007A  
                                 ?_frexp 000E                         __end_of___altofl 5720  
             ECANReceiveMessage@savedPtr 0018                                   _CANCON 000F6F  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                         __end_of___flpack 4C12  
                                 _EECON2 000FA7                                   _CIOCON 000F73  
                       __end_of___awtofl 59A4                          __CFG_BBSIZ$2048 000000  
                       ?_doOneSecondWork 0001                       vscp_writeStdReg@rv 0027  
                          ?_init_app_ram 0001                                   _MDSEL0 007BBE  
                                 _MDSEL1 007BBF                               _OpenTimer0 5C4A  
                                 i1l9200 08C2                                   i1l9210 08FA  
                                 i1l9202 08C4                                   i1l9220 0944  
                                 i1l9212 0906                                   i1l9230 0988  
                                 i1l9222 094A                                   i1l9214 090C  
                                 i1l9206 08CE                                   i1l9240 09EE  
                                 i1l9232 09B0                                   i1l9224 0972  
                                 i1l9216 0934                                   i1l9208 08F6  
                                 i1l9160 083C                                   i1l9250 0A30  
                                 i1l9242 09F2                                   i1l9234 09B4  
                                 i1l9226 0976                                   i1l9218 0938  
                                 i1l9170 0872                                   i1l9162 0848  
                                 i1l9252 0A3C                                   i1l9244 09FE  
                                 i1l9236 09C0                                   i1l9228 0982  
                                 i1l9180 0890                                   i1l9172 0874  
                                 i1l9164 084E                                   i1l9254 0A42  
                                 i1l9246 0A04                                   i1l9238 09C6  
                                 i1l9182 089A                                   i1l9190 08AC  
                                 i1l9174 087C                                   i1l9166 0852  
                                 i1l9158 0834                                   i1l9256 0A4C  
                                 i1l9248 0A2C                                   i1l9264 0A56  
                                 i1l9184 08A2                                   i1l9176 0882  
                                 i1l9168 0862                                   i1l9258 0A50  
                                 i1l9266 0A90                                   i1l9186 08A6  
                                 i1l9178 0884                                   i1l9268 0A94  
                                 i1l9188 08A8                          _init_app_eeprom 22EC  
                       __end_of___lwtofl 5A8C                                   _RXB0IF 007D20  
                                 _RXB1IF 007D21                           __CFG_WDTPS$128 000000  
                 ECANReceiveMessage@data 0015                   ECANReceiveMessage@mode 001C  
                 ECANReceiveMessage@temp 001D                        getVSCPFrame@pData 0028  
                      getVSCPFrame@pSize 0027                                ??_OpenADC 0010  
                     _vscp_newNodeOnline 5A8C                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0017   vscp_handleProtocolEvent@page_save_1167 0088  
                                 ___flge 563E                           getCANFrame@pid 0022  
                              ??___aldiv 0046                                ??___fladd 0034  
                                 ___wmul 5930                                ??___fldiv 003B  
                              ??___flneg 0012                           __CFG_STVREN$ON 000000  
                              ??___lbmod 000F                                ??___flmul 0026  
                              ??___flsub 003B                                ??___fltol 0038  
                          _vscp_getEvent 5AB6                                   _doWork 1870  
                       OpenTimer0@config 000E                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 0012                      vscp_writeAppReg@reg 0023  
             __end_of_vscp_setSegmentCRC 5D88                      vscp_writeAppReg@val 0021  
                    vscp_writeAppReg@pos 0022                                   clear_0 57FE  
                                 clear_1 5810                                   clear_2 581C  
                                 clear_3 5828                            ?_sendCANFrame 003C  
           vscp_handleProtocolEvent@byte 0095                                   floor@i 006F  
                                 floor@x 006B                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 00BF                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 0011  
              ??_vscp_getSubMinorVersion 000E     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0021                     ??_vscp_newNodeOnline 0044  
                            ?_ConvertADC 0001                       __size_of___asfladd 004E  
                     __size_of___asfldiv 004C                       __size_of___asflmul 004A  
                             ___fladd@f1 0060                               ___fladd@f2 0064  
                     __size_of___asflsub 004E                               ___flge@ff1 000E  
                             ___flge@ff2 0012                         __end_ofexp@coeff 0B48  
                       __end_oflog@coeff 0B6C                          ___lbmod@divisor 000E  
                             ___altofl@c 0066                               ___fldiv@f1 0070  
                             ___fldiv@f2 0074                               ___fldiv@f3 0080  
                             __accesstop 0060                  __end_of__initialization 582E  
                        ___lbmod@counter 0010                       _Celsius2Fahrenheit 540E  
                             ___flneg@f1 000E            __size_of_vscp_getMinorVersion 0002  
                             ___flmul@f1 001E                               ___flmul@f2 0022  
                           eval_poly@res 0068                               ___flsub@f1 0068  
                             ___flsub@f2 006C                               ___fltol@f1 0034  
                        writeEEPROM@data 0010                    __size_of_getVSCPFrame 0078  
                     _vscp_writeRegister 5BE8                               ___awtofl@c 0018  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0028  
                    ?_Celsius2Fahrenheit 0086                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                   ___asflmul@multiplicand 0034  
            __end_of_vscp_check_pstorage 5BE8                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                            __end_of_floor 48D0  
                          __end_of_ldexp 5044                            __end_of_frexp 529C  
                    ?_vscp_writeRegister 0029                           ??_sendCANFrame 0042  
                             ___lwtofl@c 0018               __end_of_vscp_getFamilyCode 5DE6  
                          ?__RegsToCANID 000E              __size_of_ECANReceiveMessage 020E  
           __size_of_getCalibrationValue 0048                       sendVSCPFrame@pData 0066  
             __end_of_vscp_getFamilyType 5DDC          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0029          __size_of_vscp_setManufacturerId 0018  
               __end_of_vscp_writeAppReg 1870                   getVSCPFrame@pvscpclass 002D  
                __end_of_init_app_eeprom 2A8A                     ??_Celsius2Fahrenheit 003B  
            __end_of_vscp_setControlByte 5D76                 __end_of_vscp_writeStdReg 47D0  
                     __RegsToCANID@Value 0014                                  ??_floor 0046  
                                ??_ldexp 0043                                  ??_frexp 0014  
                          ?_setEventData 008A                     ??_vscp_writeRegister 002A  
        __end_of_vscp_handleDropNickname 5A0A                             _getVSCPFrame 5396  
                             __pbssBANK0 00A0                               __pbssBANK1 0100  
                            ?_OpenTimer0 0001                       __size_of_eval_poly 00C0  
             __end_of_vscp_getBufferSize 5E12                         Celsius2Kelvin@tc 003B  
                  vscp_writeRegister@reg 002A                   ??_ECANSetOperationMode 000E  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 000E  
                        _writeCoeffs2Ram 5044                                  ?___flge 000E  
        __end_of_vscp_getSubMinorVersion 5E16                 ECANSetOperationMode@mode 000E  
                                ?___wmul 0012                                  _B0RXFUL 007107  
                                _B1RXFUL 007187                     __ECANRxFilterHitInfo 0048  
                         doWork@setpoint 0179                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 55A4  
                      __end_of___asfldiv 563E                         WriteTimer0@timer 0010  
                              ?___altofl 0066                        __end_of___asflmul 576A  
                                _ECANCON 000F77                        __end_of___asflsub 55F2  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 0174                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 0018                      vscp_writeStdReg@reg 0028  
           __end_of_vscp_doOneSecondWork 56D6                                  i1l14446 0A68  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00B9  
        __end_of_interrupt_at_low_vector 0AB4                 vscp_readStdReg@code_1140 001C  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 4C12  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 5484  
             __end_of_vscp_getMatrixInfo 5C9C                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 003F                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 008A  
                     _vscp_goActiveState 5C2C                   __size_of_sendVSCPFrame 00B2  
           __end_of_vscp_getMajorVersion 5E1A                       __size_of_vscp_init 0044  
                             _readEEPROM 5D50                   _vscp_getManufacturerId 5D14  
                 _vscp_setManufacturerId 5C9C                          _ECANSendMessage 4182  
                    ?_vscp_goActiveState 0001                                  _OpenADC 54FA  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 003F                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 5DFA  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
      __end_of_vscp_getRegisterPagesUsed 5E10                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 4CD0                          __size_of___flge 004C  
                                ___fladd 4012                                  ___fldiv 4EF0  
                                ___flneg 5B7C                                  ___lbmod 5AE0  
                                ___flmul 49C2                                  ___flsub 58B8  
                                ___fltol 50E4                          __size_of___wmul 003A  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 0A7C  
                           __psmallconst 0B00                               ??___altofl 0046  
                   __end_of_init_app_ram 587A                               ??___flpack 0014  
                     _vscp_sendHeartBeat 5B30                                  __pcinit 57F6  
                             ??___awtofl 001C                           _vscp_deviceURL 0B00  
                      __end_of_eval_poly 4B52                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 48D0  
                                __ptext1 1870                                  __ptext2 5A62  
                                __ptext3 55F2                                  __ptext4 5556  
                                __ptext5 4CD0                                  __ptext6 576A  
                                __ptext7 459C                                  __ptext8 3C7E  
                                __ptext9 5B7C                               ??___lwtofl 001C  
                         _vscp_getUserID 5D28                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E6  
                           __size_of_log 012E                    vscp_writeStdReg@value 0022  
                       ___aldiv@dividend 003E                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00BB  
                                doWork@B 0172                                  doWork@i 0183  
                                doWork@j 0178                                  doWork@v 016E  
                    __end_of_WriteTimer0 5DAC                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 0014                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 582E                                  exp@sign 0090  
           __end_of_vscp_handleHeartbeat 58B8                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 50E4  
                   __end_of_sendCANFrame 5A36                               doWork@Rinf 014E  
                     doOneSecondWork@tmp 0095                               doWork@temp 017F  
              vscp_handleProtocolEvent@i 0099                vscp_handleProtocolEvent@j 009A  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 5B08                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0062  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 0080  
                         _vscp_setUserID 5CB4                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0B20      __end_of_vscp_writeNicknamePermanent 5D9A  
            _vscp_writeNicknamePermanent 5D88                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 4E3E                   __end_of_vscp_getUserID 5D3C  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 57F6                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 5A62            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0093  
               __size_of_vscp_readAppReg 0796                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001A                         writeCoeffs2Ram@i 001D  
                       writeCoeffs2Ram@j 001F                              ___fldiv@exp 0084  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 01AE  
                     _vscp_setSegmentCRC 5D76                        readEEPROM@address 000E  
                           ??_ConvertADC 000E               vscp_handleProtocolEvent@cb 0091  
                __end_of_ECANSendMessage 42E8                        vscp_readStdReg@rv 0022  
                            ___lbmod@rem 0011                              ___flmul@exp 002D  
                          ?__CANIDToRegs 000E                     __end_of__RegsToCANID 444C  
                    _getCalibrationValue 576A                              ?_readEEPROM 000E  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 5B30  
                             _vscp_error 5E02                     _vscp_doOneSecondWork 568A  
                     i1WriteTimer0@timer 0003                               _vscp_timer 00B6  
                 __end_of_vscp_setUserID 5CCC                 __size_of_doOneSecondWork 0206  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 4E3E  
                         ?_sendVSCPFrame 0060                           __end_of___flge 568A  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 596A  
                        ?_vscp_getUserID 0001                           __end_of_doWork 22EC  
           __end_of_vscp_getMinorVersion 5E18                              _WriteTimer0 5D9A  
                   _vscp_getMajorVersion 5E18                       __end_of_ConvertADC 5E0A  
                   ?_getCalibrationValue 0012                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 0073                        ?_vscp_writeAppReg 0021  
                    start_initialization 57F6                               eval_poly@d 003F  
                             eval_poly@n 0040                               eval_poly@x 003B  
                             ldexp@value 006C          __size_of_vscp_handleSetNickname 0024  
                            __end_of_exp 3E64                              __end_of_log 46CA  
                     ??_vscp_writeAppReg 0022                            _sendTempEvent 529C  
                      ?_vscp_writeStdReg 0022                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 000E  
                     ??_vscp_writeStdReg 0023                       _vscp_getFamilyCode 5DDC  
                    __end_of_handle_sync 5396                           ??__CANIDToRegs 0015  
                     _vscp_getFamilyType 5DD2                               frexp@value 000E  
                    sendVSCPFrame@nodeid 0063                         ?_writeCoeffs2Ram 0001  
                      _vscp_readRegister 5C68                     Celsius2Fahrenheit@tc 0086  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0090  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 001E  
                    ?_vscp_getFamilyCode 000E                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 386A                          ?_vscp_setUserID 0011  
                    ?_vscp_getFamilyType 000E                    __size_of_init_app_ram 0042  
               ?_vscp_handleDropNickname 0001                   getCalibrationValue@cal 0017  
                      ??_vscp_getSubzone 0012                                 ??___flge 0016  
               __end_of__ECANPointBuffer 54FA                        __CANIDToRegs@type 0014  
                            _getCANFrame 5A36                                 ??___wmul 0016  
                               ??_doWork 0091                       _vscp_getBufferSize 5E10  
            vscp_handleProtocolEvent@len 008D              vscp_handleProtocolEvent@pos 008B  
             __end_of_ECANReceiveMessage 3A78                      ??_vscp_readRegister 0024  
         __size_of_vscp_goBootloaderMode 0018                    ?_vscp_getMajorVersion 0001  
                  ??_getCalibrationValue 0014                    __end_ofi1_WriteTimer0 5DBE  
          __end_of_vscp_goBootloaderMode 5CFC                     _vscp_handleHeartbeat 587A  
                     __end_of_OpenTimer0 5C68                        __size_of___altofl 004A  
                      __size_of___flpack 00C0                                ___asfladd 5556  
                    ?_vscp_getBufferSize 0001                        __size_of___awtofl 003A  
                    __size_of_readEEPROM 0014                                ___asfldiv 55F2  
                            __pbssBIGRAM 0184                                ___asflmul 5720  
                              ___asflsub 55A4             __size_of_vscp_check_pstorage 0024  
                   ??_vscp_getFamilyCode 0012                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0046                     ??_vscp_getFamilyType 0012  
                      __size_of___lwtofl 002A                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0060                            __pcstackBANK1 014E  
                         ?_sendTempEvent 0001                         _vscp_alarmstatus 004A  
            __size_of_Celsius2Fahrenheit 0076                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 002C                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 0011                     __end_ofi1_ConvertADC 5E0E  
                          ?_vscp_setGUID 0011              __size_of_vscp_writeRegister 0022  
                       ?_ECANSendMessage 0018                        ??_vscp_readAppReg 0012  
                      sendVSCPFrame@size 0065                __end_of_vscp_readRegister 5C82  
                           _init_app_ram 5838                     getCalibrationValue@i 0019  
                            _doWork$2270 0156                              _doWork$2271 015A  
                            _doWork$2272 015E             __size_of_vscp_setControlByte 0012  
                          doWork@avarage 017B                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 0013                     ??_vscp_getBufferSize 000E  
                           _current_temp 00A0                        OpenADC@portconfig 000F  
                               ?_OpenADC 000E                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 5C82                   _vscp_handleSetNickname 5BA0  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 0067  
                         _ECANInitialize 5180                                 ?___aldiv 003E  
                               ?___fladd 0060                                 ?___fldiv 0070  
                              __ptext100 5DAC                                __ptext101 5E0A  
                              __ptext102 0000                                 ?___flneg 000E  
                               ?___lbmod 000E                                 ?___flmul 001E  
                               ?___flsub 0068                                 ?___fltol 0034  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 0012  
                            __pintcodelo 0818                        ??_doOneSecondWork 0093  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1157 008F  
                vscp_readStdReg@idx_1141 0021               vscp_setManufacturerId@data 0011  
                           _sendCANFrame 5A0A                              __smallconst 0B00  
                             ?___asfladd 003B                        WriteTimer0@timer0 000E  
                             ?___asfldiv 0086                               ?___asflmul 0034  
                             ?___asflsub 003B                       _vscp_getSegmentCRC 5DF0  
                         ??_vscp_getGUID 0012                                _eval_poly 4A92  
                            _handle_sync 531C                           ??_vscp_getZone 0012  
         __end_of_vscp_getManufacturerId 5D28           __end_of_vscp_setManufacturerId 5CB4  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1156 008E  
                         __size_of_floor 0100                           __size_of_ldexp 00A6  
                         ??_vscp_setGUID 0012                           __size_of_frexp 0086  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 000E  
                       _vscp_configtimer 00B4                          ___aldiv@divisor 0042  
                        ___aldiv@counter 0060                           ___wmul@product 0016  
                 ??_vscp_doOneSecondWork 007F                   sendVSCPFrame@vscpclass 0060  
                          OpenADC@config 0012                     _vscp_getMinorVersion 5E16  
                              _sendTimer 00BC                                 _PIE1bits 000F9D  
                              _low_alarm 00BA                    __size_of_setEventData 00B2  
                 __end_of_ECANInitialize 5216                                 i1u720_20 08A2  
                               i1u720_21 08A0                                 i1u721_20 08B6  
                               i1u721_21 08B4                                 i1u730_20 0A4C  
                               i1u722_20 08C0                                 i1u730_21 0A4A  
                               i1u722_21 08BE                                 i1u723_20 08CC  
                               i1u723_21 08CA                                 i1u724_20 0906  
                               i1u716_20 083C                                 i1u724_21 0904  
                               i1u716_21 083A                                 i1u725_20 0944  
                               i1u717_20 087C                                 i1u725_21 0942  
                               i1u717_21 087A                                 i1u726_20 0982  
                               i1u718_20 0890                                 i1u726_21 0980  
                               i1u718_21 088E                                 i1u727_20 09C0  
                               i1u719_20 089A                                 i1u727_21 09BE  
                               i1u719_21 0898                                 i1u728_20 09FE  
                               i1u728_21 09FC                                 i1u729_20 0A3C  
                               i1u729_21 0A3A                                 _PIR1bits 000F9E  
                               _PIR2bits 000FA1                         ECANSendMessage@i 0039  
                       ECANSendMessage@j 0034                    __end_of_vscp_getEvent 5AE0  
                               _RXF0EIDH 000F02                                 _RXF0EIDL 000F03  
                               _RXB0OVFL 007BA7                                 _RXF1EIDH 000F06  
                               _RXF1EIDL 000F07                                 _RXB1OVFL 007BA6  
                               _RXF0SIDH 000F00                                 _RXF0SIDL 000F01  
                               _RXF1SIDH 000F04                                 _RXF1SIDL 000F05  
                               _RXM0EIDH 000F1A                                 _RXM0EIDL 000F1B  
                        vscp_getEvent@rv 0032                                 _RXM1EIDH 000F1E  
                               _RXM1EIDL 000F1F                     ??_vscp_getSegmentCRC 0012  
                               _RXFBCON0 000DE0                                 _RXFBCON1 000DE1  
                               _RXFBCON2 000DE2                                 _RXFBCON3 000DE3  
                               _RXFBCON4 000DE4                                 _RXFBCON5 000DE5  
                               _RXFBCON6 000DE6                                 _RXFBCON7 000DE7  
                               _RXM0SIDH 000F18                                 _RXM0SIDL 000F19  
                               _RXM1SIDH 000F1C                   ??_vscp_getMajorVersion 000E  
                               _RXM1SIDL 000F1D               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 0044                       vscp_setUserID@data 0011  
                   __end_of__CANIDToRegs 459C                               _ADCON0bits 000FC2  
                      ___wmul@multiplier 0012                             __RegsToCANID 42E8  
                     _vscp_probe_address 004F                          ??_sendTempEvent 0044  
            __size_of_vscp_goActiveState 001E                               ?_eval_poly 003B  
                    getVSCPFrame@pNodeId 0025                                _vscp_init 57B2  
                              _vscp_imsg 00C1                                _vscp_hour 00BD  
                              _vscp_omsg 00CF                         vscp_setGUID@data 0011  
      __size_of_vscp_handleProtocolEvent 064A                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001     __size_of_vscp_writeNicknamePermanent 0012  
                       _vscp_page_select 0046                             _setEventData 4D8C  
             __size_of_vscp_readRegister 001A                        _measurement_clock 00AC  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 0010  
               __size_of_init_app_eeprom 079E             __end_of_vscp_restoreDefaults 5E02  
                              frexp@eptr 0012                               _EECON1bits 000FA6  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 001A                             _seconds_temp 0100  
            __size_of_vscp_sendHeartBeat 0026                         __size_of_OpenADC 005C  
                       ??_vscp_getUserID 0012                          _vscp_getMDF_URL 5CCC  
                               __Lrparam 0000                         __CANIDToRegs@val 0010  
                       __CANIDToRegs@ptr 000E                         __size_of___aldiv 00BC  
                       __size_of___fladd 0170                         __size_of___fldiv 00AE  
                       __size_of___flneg 0024                         _vscp_initledfunc 004C  
                       __size_of___lbmod 0028                         __size_of___flmul 00D0  
                 ??_vscp_handleHeartbeat 0012                         __size_of___flsub 003C  
                       __size_of___fltol 009C                                 ___altofl 56D6  
                               ___flpack 4B52                         getCANFrame@flags 0023  
                           ?_WriteTimer0 000E                                 ___awtofl 596A  
                       getCANFrame@pdata 0021                                 ___lwtofl 5A62  
                         sendTempEvent@i 0045                  __size_of_Celsius2Kelvin 0036  
                            ??___asfladd 0041                              ??___asfldiv 003B  
                            ??___asflmul 0038                                 _exp$2276 008A  
                            ??___asflsub 0041                       __end_of_readEEPROM 5D64  
                  __size_ofi1_ConvertADC 0004                               ?_vscp_init 0001  
                               __ptext10 4F9E                                 __ptext11 4A92  
                               __ptext20 4EF0                                 __ptext12 47D0  
                               __ptext21 568A                                 __ptext13 50E4  
                               __ptext30 540E                                 __ptext22 5B30  
                               __ptext14 5216                                 __ptext31 4012  
                               __ptext23 5DBE                                 __ptext15 563E  
                               __ptext40 5CB4                                 __ptext32 59A4  
                               __ptext24 5DC8                                 __ptext16 56D6  
                               __ptext41 5C0A                                 __ptext33 3220  
                               __ptext25 3A78                                 __ptext17 55A4  
                               __ptext50 5D14                                 __ptext42 0B6E  
                               __ptext34 5AE0                                 __ptext26 5E02  
                               __ptext18 58B8                                 __ptext51 5D28  
                               __ptext43 5C68                                 __ptext35 5BE8  
                               __ptext27 531C                                 __ptext19 5720  
                               __ptext60 5DE6                                 __ptext52 5CCC  
                               __ptext44 3E64                                 __ptext36 46CA  
                               __ptext28 529C                                 __ptext61 5BA0  
                               __ptext53 5D3C                                 __ptext45 5DD2  
                               __ptext37 5DFA                                 __ptext29 4D8C  
                               __ptext70 4182                                 __ptext62 587A  
                               __ptext54 5E14                                 __ptext46 5DDC  
                               __ptext38 22EC                                 __ptext71 444C  
                               __ptext63 5CE4                                 __ptext55 5E16  
                               __ptext47 5E0E                                 __ptext39 5C9C  
                               __ptext80 5D76                                 __ptext72 5AB6  
                               __ptext64 5C82                                 __ptext56 5E18  
                               __ptext48 5E10                                 __ptext81 5DF0  
                               __ptext73 5396                                 __ptext65 4C12  
                               __ptext57 5A8C                                 __ptext49 5E12  
                               __ptext90 5838                                 __ptext82 5D50  
                               __ptext74 5A36                                 __ptext66 5C2C  
                               __ptext58 59DA                                 __ptext91 5044  
                               __ptext83 5D88                                 __ptext75 386A  
                               __ptext67 5B08                                 __ptext59 57B2  
                               __ptext92 5930                                 __ptext84 5B56  
                               __ptext76 42E8                                 __ptext68 4E3E  
                               __ptext93 5E06                                 __ptext85 58F4  
                               __ptext77 5484                                 __ptext69 5A0A  
                               __ptext94 5D9A                                 __ptext86 5180  
                               __ptext78 5BC4                                 __ptext95 596A  
                               __ptext87 5CFC                                 __ptext79 5D64  
                               __ptext96 49C2                                 __ptext88 54FA  
                               __ptext97 4B52                                 __ptext89 5C4A  
                               __ptext98 2A8A           vscp_goBootloaderMode@algorithm 0011  
              vscp_sendHeartBeat@subzone 0044                            ?_getVSCPFrame 0024  
                       ??_vscp_sendEvent 0043                          _vscp_getSubzone 5DBE  
                       ??_vscp_setUserID 0012                            __size_of_main 00F2  
                          __size_of_init 003C                __size_of_vscp_writeAppReg 0D02  
                    _vscp_check_pstorage 5BC4                            init_app_ram@i 0021  
         vscp_handleProtocolEvent@i_1155 0094           vscp_handleProtocolEvent@i_1158 0098  
         vscp_handleProtocolEvent@i_1166 0092                         doOneSecondWork@i 0096  
                   __end_of_vscp_getGUID 5D50                            ??_writeEEPROM 0011  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 001C  
               ECANSendMessage@tempBSEL0 0035                             ?_getCANFrame 0020  
                    ECANSendMessage@mode 0032                     __end_of_vscp_getZone 5DD2  
                    ECANSendMessage@temp 0038                        ?__ECANPointBuffer 000E  
                      vscp_setUserID@idx 0012                     __end_of_vscp_setGUID 5C2C  
                     vscp_readAppReg@reg 0013                       vscp_readAppReg@pos 0012  
                           i1_ConvertADC 5E0A                         vscp_sendEvent@rv 0043  
                     ??__ECANPointBuffer 0011           vscp_handleProtocolEvent@offset 008A  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 0012  
                       init_app_eeprom@i 0011                      _vscp_setControlByte 5D64  
                               exp@coeff 0B20                    ___flmul@f3_as_product 002E  
                               log@coeff 0B48              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 2A8A                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2                              ??_eval_poly 0042  
           ??_vscp_readNicknamePermanent 0012                      ECANReceiveMessage@i 001B  
                        _vscp_guid_reset 004B                          _vscp_readStdReg 3E64  
           vscp_handleDropNickname@bytes 0012               __end_of_vscp_newNodeOnline 5AB6  
                     _ECANReceiveMessage 386A                           ??_getVSCPFrame 0029  
                        _vscp_initbtncnt 00BE                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 5CE4  
                   ?_vscp_setControlByte 0001                            _timeout_clock 00B0  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00C0  
                           handle_sync@i 0095                          _doOneSecondWork 3A78  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0011  
            __end_of_getCalibrationValue 57B2                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0011                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 0011                 __size_of_writeCoeffs2Ram 00A0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 5E14  
            _vscp_getBootLoaderAlgorithm 5E12         __size_of_interrupt_at_low_vector 029C  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 5B7C  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 0018  
                  ??_vscp_check_pstorage 0012                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 5CE4               __end_of_Celsius2Fahrenheit 5484  
           __end_of_ECANSetOperationMode 5D14                     _vscp_restoreDefaults 5DFA  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 0012  
                __end_of_vscp_getSubzone 5DC8                             ?_handle_sync 0001  
            __size_of_vscp_getFamilyType 000A                             ___aldiv@sign 0061  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 5C0A  
                     __end_of_vscp_error 5E06                   ECANSendMessage@tempPtr 0036  
                   _adc_conversion_flags 00B8           __end_of_vscp_handleSetNickname 5BC4  
     vscp_handleProtocolEvent@bytes_1162 0096                    ??_vscp_setControlByte 0011  
                   vscp_readRegister@reg 0024                             ___fladd@exp1 003A  
                           ___fladd@exp2 0039                             ___fladd@sign 0038  
                           __CANIDToRegs 444C                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 003B  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 003D  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 0088  

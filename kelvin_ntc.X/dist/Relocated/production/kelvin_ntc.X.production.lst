

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Nov 26 12:21:55 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	text79,global,reloc=2,class=CODE,delta=1
    94                           	psect	text80,global,reloc=2,class=CODE,delta=1
    95                           	psect	text81,global,reloc=2,class=CODE,delta=1
    96                           	psect	text82,global,reloc=2,class=CODE,delta=1
    97                           	psect	text83,global,reloc=2,class=CODE,delta=1
    98                           	psect	text84,global,reloc=2,class=CODE,delta=1
    99                           	psect	text85,global,reloc=2,class=CODE,delta=1
   100                           	psect	text86,global,reloc=2,class=CODE,delta=1
   101                           	psect	text87,global,reloc=2,class=CODE,delta=1
   102                           	psect	text88,global,reloc=2,class=CODE,delta=1
   103                           	psect	text89,global,reloc=2,class=CODE,delta=1
   104                           	psect	text90,global,reloc=2,class=CODE,delta=1
   105                           	psect	text91,global,reloc=2,class=CODE,delta=1
   106                           	psect	text92,global,reloc=2,class=CODE,delta=1
   107                           	psect	text93,global,reloc=2,class=CODE,delta=1
   108                           	psect	text94,global,reloc=2,class=CODE,delta=1
   109                           	psect	text95,global,reloc=2,class=CODE,delta=1
   110                           	psect	text96,global,reloc=2,class=CODE,delta=1
   111                           	psect	text97,global,reloc=2,class=CODE,delta=1
   112                           	psect	text98,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   114                           	psect	text100,global,reloc=2,class=CODE,delta=1
   115                           	psect	text101,global,reloc=2,class=CODE,delta=1
   116                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   117                           	psect	text102,global,reloc=2,class=CODE,delta=1
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   119  0000                     
   120                           	psect	smallconst
   121  000B00                     __psmallconst:
   122                           	opt stack 0
   123  000B00                     _vscp_deviceURL:
   124                           	opt stack 0
   125  000B00  77                 	db	119
   126  000B01  77                 	db	119
   127  000B02  77                 	db	119
   128  000B03  2E                 	db	46
   129  000B04  65                 	db	101
   130  000B05  75                 	db	117
   131  000B06  72                 	db	114
   132  000B07  6F                 	db	111
   133  000B08  73                 	db	115
   134  000B09  6F                 	db	111
   135  000B0A  75                 	db	117
   136  000B0B  72                 	db	114
   137  000B0C  63                 	db	99
   138  000B0D  65                 	db	101
   139  000B0E  2E                 	db	46
   140  000B0F  73                 	db	115
   141  000B10  65                 	db	101
   142  000B11  2F                 	db	47
   143  000B12  6E                 	db	110
   144  000B13  74                 	db	116
   145  000B14  63                 	db	99
   146  000B15  31                 	db	49
   147  000B16  30                 	db	48
   148  000B17  4B                 	db	75
   149  000B18  41                 	db	65
   150  000B19  5F                 	db	95
   151  000B1A  33                 	db	51
   152  000B1B  2E                 	db	46
   153  000B1C  78                 	db	120
   154  000B1D  6D                 	db	109
   155  000B1E  6C                 	db	108
   156  000B1F  00                 	db	0
   157  000B20                     __end_of_vscp_deviceURL:
   158                           	opt stack 0
   159  000B20                     exp@coeff:
   160                           	opt stack 0
   161  000B20  0000               	dw	0
   162  000B22  3F80               	dw	16256
   163  000B24  7218               	dw	29208
   164  000B26  3F31               	dw	16177
   165  000B28  FDF0               	dw	65008
   166  000B2A  3E75               	dw	15989
   167  000B2C  5847               	dw	22599
   168  000B2E  3D63               	dw	15715
   169  000B30  9558               	dw	38232
   170  000B32  3C1D               	dw	15389
   171  000B34  C482               	dw	50306
   172  000B36  3AAE               	dw	15022
   173  000B38  78A8               	dw	30888
   174  000B3A  3921               	dw	14625
   175  000B3C  93EF               	dw	37871
   176  000B3E  3780               	dw	14208
   177  000B40  92A0               	dw	37536
   178  000B42  35A7               	dw	13735
   179  000B44  5646               	dw	22086
   180  000B46  3415               	dw	13333
   181  000B48                     __end_ofexp@coeff:
   182                           	opt stack 0
   183  000B48                     log@coeff:
   184                           	opt stack 0
   185  000B48  0000               	dw	0
   186  000B4A  0000               	dw	0
   187  000B4C  FFC4               	dw	65476
   188  000B4E  3F7F               	dw	16255
   189  000B50  EF80               	dw	61312
   190  000B52  BEFF               	dw	48895
   191  000B54  E190               	dw	57744
   192  000B56  3EA9               	dw	16041
   193  000B58  82EC               	dw	33516
   194  000B5A  BE76               	dw	48758
   195  000B5C  AD82               	dw	44418
   196  000B5E  3E2B               	dw	15915
   197  000B60  3C0E               	dw	15374
   198  000B62  BDC3               	dw	48579
   199  000B64  D187               	dw	53639
   200  000B66  3D13               	dw	15635
   201  000B68  7841               	dw	30785
   202  000B6A  BBD3               	dw	48083
   203  000B6C                     __end_oflog@coeff:
   204                           	opt stack 0
   205  0000                     _ADCON0	set	4034
   206  0000                     _ADCON0bits	set	4034
   207  0000                     _ADCON1	set	4033
   208  0000                     _ADCON2	set	4032
   209  0000                     _ADRESH	set	4036
   210  0000                     _ADRESL	set	4035
   211  0000                     _BRGCON1	set	3952
   212  0000                     _BRGCON2	set	3953
   213  0000                     _BRGCON3	set	3954
   214  0000                     _BSEL0	set	3576
   215  0000                     _CANCON	set	3951
   216  0000                     _CIOCON	set	3955
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PIR2bits	set	4001
   229  0000                     _PORTC	set	3970
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXF0EIDH	set	3842
   232  0000                     _RXF0EIDL	set	3843
   233  0000                     _RXF0SIDH	set	3840
   234  0000                     _RXF0SIDL	set	3841
   235  0000                     _RXF1EIDH	set	3846
   236  0000                     _RXF1EIDL	set	3847
   237  0000                     _RXF1SIDH	set	3844
   238  0000                     _RXF1SIDL	set	3845
   239  0000                     _RXFBCON0	set	3552
   240  0000                     _RXFBCON1	set	3553
   241  0000                     _RXFBCON2	set	3554
   242  0000                     _RXFBCON3	set	3555
   243  0000                     _RXFBCON4	set	3556
   244  0000                     _RXFBCON5	set	3557
   245  0000                     _RXFBCON6	set	3558
   246  0000                     _RXFBCON7	set	3559
   247  0000                     _RXFCON0	set	3540
   248  0000                     _RXFCON1	set	3541
   249  0000                     _RXM0EIDH	set	3866
   250  0000                     _RXM0EIDL	set	3867
   251  0000                     _RXM0SIDH	set	3864
   252  0000                     _RXM0SIDL	set	3865
   253  0000                     _RXM1EIDH	set	3870
   254  0000                     _RXM1EIDL	set	3871
   255  0000                     _RXM1SIDH	set	3868
   256  0000                     _RXM1SIDL	set	3869
   257  0000                     _T0CON	set	4053
   258  0000                     _T0CONbits	set	4053
   259  0000                     _TMR0H	set	4055
   260  0000                     _TMR0L	set	4054
   261  0000                     _TRISA	set	3986
   262  0000                     _TRISB	set	3987
   263  0000                     _TRISC	set	3988
   264  0000                     _B0RXFUL	set	28935
   265  0000                     _B0TXEN	set	28610
   266  0000                     _B1RXFUL	set	29063
   267  0000                     _B1TXEN	set	28611
   268  0000                     _B2RXFUL	set	29191
   269  0000                     _B2TXEN	set	28612
   270  0000                     _B3RXFUL	set	29319
   271  0000                     _B3TXEN	set	28613
   272  0000                     _B4RXFUL	set	29447
   273  0000                     _B4TXEN	set	28614
   274  0000                     _B5RXFUL	set	29575
   275  0000                     _B5TXEN	set	28615
   276  0000                     _FIFOEMPTY	set	31655
   277  0000                     _IRXIF	set	32039
   278  0000                     _MDSEL0	set	31678
   279  0000                     _MDSEL1	set	31679
   280  0000                     _RXB0FILHIT0	set	31488
   281  0000                     _RXB0FUL	set	31495
   282  0000                     _RXB0IF	set	32032
   283  0000                     _RXB0OVFL	set	31655
   284  0000                     _RXB1IF	set	32033
   285  0000                     _RXB1OVFL	set	31654
   286  0000                     _RXM0EXIDM	set	30923
   287  0000                     _RXM1EXIDEN	set	30955
   288  0000                     _B0CON	set	3616
   289  0000                     _B1CON	set	3632
   290  0000                     _B2CON	set	3648
   291  0000                     _B3CON	set	3664
   292  0000                     _B4CON	set	3680
   293  0000                     _B5CON	set	3696
   294  0000                     _RXB0CON	set	3936
   295  0000                     _RXB1CON	set	3920
   296  0000                     _TXB0CON	set	3904
   297  0000                     _TXB1CON	set	3888
   298  0000                     _TXB2CON	set	3872
   299                           
   300                           ; #config settings
   301  000B6C  00                 	db	0	; dummy byte at the end
   302  0000                     
   303                           	psect	cinit
   304  005616                     __pcinit:
   305                           	opt stack 0
   306  005616                     start_initialization:
   307                           	opt stack 0
   308  005616                     __initialization:
   309                           	opt stack 0
   310                           
   311                           ; Clear objects allocated to BIGRAM (960 bytes)
   312  005616  EE01  F082         	lfsr	0,__pbssBIGRAM
   313  00561A  EE13 F0C0          	lfsr	1,960
   314  00561E                     clear_0:
   315  00561E  6AEE               	clrf	postinc0,c
   316  005620  50E5               	movf	postdec1,w,c
   317  005622  50E1               	movf	fsr1l,w,c
   318  005624  E1FC               	bnz	clear_0
   319  005626  50E2               	movf	fsr1h,w,c
   320  005628  E1FA               	bnz	clear_0
   321                           
   322                           ; Clear objects allocated to BANK1 (78 bytes)
   323  00562A  EE01  F000         	lfsr	0,__pbssBANK1
   324  00562E  0E4E               	movlw	78
   325  005630                     clear_1:
   326  005630  6AEE               	clrf	postinc0,c
   327  005632  06E8               	decf	wreg,f,c
   328  005634  E1FD               	bnz	clear_1
   329                           
   330                           ; Clear objects allocated to BANK0 (61 bytes)
   331  005636  EE00  F0A3         	lfsr	0,__pbssBANK0
   332  00563A  0E3D               	movlw	61
   333  00563C                     clear_2:
   334  00563C  6AEE               	clrf	postinc0,c
   335  00563E  06E8               	decf	wreg,f,c
   336  005640  E1FD               	bnz	clear_2
   337                           
   338                           ; Clear objects allocated to COMRAM (13 bytes)
   339  005642  EE00  F046         	lfsr	0,__pbssCOMRAM
   340  005646  0E0D               	movlw	13
   341  005648                     clear_3:
   342  005648  6AEE               	clrf	postinc0,c
   343  00564A  06E8               	decf	wreg,f,c
   344  00564C  E1FD               	bnz	clear_3
   345  00564E                     end_of_initialization:
   346                           	opt stack 0
   347  00564E                     __end_of__initialization:
   348                           	opt stack 0
   349  00564E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   350  005650  6EF8               	movwf	tblptru,c
   351  005652  0100               	movlb	0
   352  005654  EF38  F022         	goto	_main	;jump to C main() function
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1h	equ	0xFE2
   358                           fsr1l	equ	0xFE1
   359                           
   360                           	psect	bssCOMRAM
   361  000046                     __pbssCOMRAM:
   362                           	opt stack 0
   363  000046                     _vscp_page_select:
   364                           	opt stack 0
   365  000046                     	ds	2
   366  000048                     __ECANRxFilterHitInfo:
   367                           	opt stack 0
   368  000048                     	ds	1
   369  000049                     _adc_series_counter:
   370                           	opt stack 0
   371  000049                     	ds	1
   372  00004A                     _vscp_alarmstatus:
   373                           	opt stack 0
   374  00004A                     	ds	1
   375  00004B                     _vscp_guid_reset:
   376                           	opt stack 0
   377  00004B                     	ds	1
   378  00004C                     _vscp_initledfunc:
   379                           	opt stack 0
   380  00004C                     	ds	1
   381  00004D                     _vscp_minute:
   382                           	opt stack 0
   383  00004D                     	ds	1
   384  00004E                     _vscp_node_substate:
   385                           	opt stack 0
   386  00004E                     	ds	1
   387  00004F                     _vscp_probe_address:
   388                           	opt stack 0
   389  00004F                     	ds	1
   390  000050                     _vscp_probe_cnt:
   391                           	opt stack 0
   392  000050                     	ds	1
   393  000051                     _vscp_second:
   394                           	opt stack 0
   395  000051                     	ds	1
   396  000052                     _vscp_statuscnt:
   397                           	opt stack 0
   398  000052                     	ds	1
   399                           tblptru	equ	0xFF8
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssBANK0
   407  0000A3                     __pbssBANK0:
   408                           	opt stack 0
   409  0000A3                     _current_temp:
   410                           	opt stack 0
   411  0000A3                     	ds	12
   412  0000AF                     _measurement_clock:
   413                           	opt stack 0
   414  0000AF                     	ds	4
   415  0000B3                     _timeout_clock:
   416                           	opt stack 0
   417  0000B3                     	ds	4
   418  0000B7                     _sendTimer:
   419                           	opt stack 0
   420  0000B7                     	ds	2
   421  0000B9                     _vscp_configtimer:
   422                           	opt stack 0
   423  0000B9                     	ds	2
   424  0000BB                     _vscp_timer:
   425                           	opt stack 0
   426  0000BB                     	ds	2
   427  0000BD                     _adc_conversion_flags:
   428                           	opt stack 0
   429  0000BD                     	ds	1
   430  0000BE                     _high_alarm:
   431                           	opt stack 0
   432  0000BE                     	ds	1
   433  0000BF                     _low_alarm:
   434                           	opt stack 0
   435  0000BF                     	ds	1
   436  0000C0                     _seconds:
   437                           	opt stack 0
   438  0000C0                     	ds	1
   439  0000C1                     _vscp_hour:
   440                           	opt stack 0
   441  0000C1                     	ds	1
   442  0000C2                     _vscp_initbtncnt:
   443                           	opt stack 0
   444  0000C2                     	ds	1
   445  0000C3                     _vscp_nickname:
   446                           	opt stack 0
   447  0000C3                     	ds	1
   448  0000C4                     _vscp_node_state:
   449                           	opt stack 0
   450  0000C4                     	ds	1
   451  0000C5                     _vscp_imsg:
   452                           	opt stack 0
   453  0000C5                     	ds	14
   454  0000D3                     _vscp_omsg:
   455                           	opt stack 0
   456  0000D3                     	ds	13
   457                           tblptru	equ	0xFF8
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1h	equ	0xFE2
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssBANK1
   465  000100                     __pbssBANK1:
   466                           	opt stack 0
   467  000100                     _seconds_temp:
   468                           	opt stack 0
   469  000100                     	ds	6
   470  000106                     _sh_coefficients:
   471                           	opt stack 0
   472  000106                     	ds	72
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBIGRAM
   481  000182                     __pbssBIGRAM:
   482                           	opt stack 0
   483  000182                     _adc:
   484                           	opt stack 0
   485  000182                     	ds	960
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	cstackBANK1
   494  00014E                     __pcstackBANK1:
   495                           	opt stack 0
   496  00014E                     doWork@Rinf:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x0
   500  00014E                     	ds	4
   501  000152                     doWork@calVoltage:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x4
   505  000152                     	ds	4
   506  000156                     _doWork$2280:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x8
   510  000156                     	ds	4
   511  00015A                     _doWork$2281:
   512                           	opt stack 0
   513                           
   514                           ; 4 bytes @ 0xC
   515  00015A                     	ds	4
   516  00015E                     _doWork$2282:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x10
   520  00015E                     	ds	16
   521  00016E                     doWork@v:
   522                           	opt stack 0
   523                           
   524                           ; 4 bytes @ 0x20
   525  00016E                     	ds	4
   526  000172                     doWork@B:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x24
   530  000172                     	ds	2
   531  000174                     doWork@resistance:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x26
   535  000174                     	ds	4
   536  000178                     doWork@j:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x2A
   540  000178                     	ds	1
   541  000179                     doWork@avarage:
   542                           	opt stack 0
   543                           
   544                           ; 4 bytes @ 0x2B
   545  000179                     	ds	4
   546  00017D                     doWork@temp:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x2F
   550  00017D                     	ds	4
   551  000181                     doWork@i:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x33
   555  000181                     	ds	1
   556                           tblptru	equ	0xFF8
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	cstackBANK0
   564  000060                     __pcstackBANK0:
   565                           	opt stack 0
   566  000060                     ?_sendVSCPFrame:
   567                           	opt stack 0
   568  000060                     ?___fladd:
   569                           	opt stack 0
   570  000060                     ___aldiv@counter:
   571                           	opt stack 0
   572  000060                     sendVSCPFrame@vscpclass:
   573                           	opt stack 0
   574  000060                     ___fladd@f1:
   575                           	opt stack 0
   576                           
   577                           ; 4 bytes @ 0x0
   578  000060                     	ds	1
   579  000061                     ___aldiv@sign:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x1
   583  000061                     	ds	1
   584  000062                     sendVSCPFrame@vscptype:
   585                           	opt stack 0
   586  000062                     ___aldiv@quotient:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x2
   590  000062                     	ds	1
   591  000063                     sendVSCPFrame@nodeid:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x3
   595  000063                     	ds	1
   596  000064                     sendVSCPFrame@priority:
   597                           	opt stack 0
   598  000064                     ___fladd@f2:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x4
   602  000064                     	ds	1
   603  000065                     sendVSCPFrame@size:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x5
   607  000065                     	ds	1
   608  000066                     ?___altofl:
   609                           	opt stack 0
   610  000066                     sendVSCPFrame@pData:
   611                           	opt stack 0
   612  000066                     ___altofl@c:
   613                           	opt stack 0
   614                           
   615                           ; 4 bytes @ 0x6
   616  000066                     	ds	1
   617  000067                     ??_sendVSCPFrame:
   618                           
   619                           ; 0 bytes @ 0x7
   620  000067                     	ds	1
   621  000068                     ?___flsub:
   622                           	opt stack 0
   623  000068                     ___flsub@f1:
   624                           	opt stack 0
   625  000068                     eval_poly@res:
   626                           	opt stack 0
   627                           
   628                           ; 4 bytes @ 0x8
   629  000068                     	ds	2
   630  00006A                     ___altofl@sign:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0xA
   634  00006A                     	ds	1
   635  00006B                     ?_floor:
   636                           	opt stack 0
   637  00006B                     floor@x:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0xB
   641  00006B                     	ds	1
   642  00006C                     ?_ldexp:
   643                           	opt stack 0
   644  00006C                     ___flsub@f2:
   645                           	opt stack 0
   646  00006C                     ldexp@value:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0xC
   650  00006C                     	ds	3
   651  00006F                     floor@i:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0xF
   655  00006F                     	ds	1
   656  000070                     ?___fldiv:
   657                           	opt stack 0
   658  000070                     ldexp@newexp:
   659                           	opt stack 0
   660  000070                     ___fldiv@f1:
   661                           	opt stack 0
   662                           
   663                           ; 4 bytes @ 0x10
   664  000070                     	ds	3
   665  000073                     floor@expon:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x13
   669  000073                     	ds	1
   670  000074                     ___fldiv@f2:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x14
   674  000074                     	ds	7
   675  00007B                     sendVSCPFrame@id:
   676                           	opt stack 0
   677                           
   678                           ; 4 bytes @ 0x1B
   679  00007B                     	ds	4
   680  00007F                     ??_vscp_handleProtocolEvent:
   681  00007F                     ??_vscp_doOneSecondWork:
   682  00007F                     ___fldiv@cntr:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x1F
   686  00007F                     	ds	1
   687  000080                     ___fldiv@f3:
   688                           	opt stack 0
   689                           
   690                           ; 4 bytes @ 0x20
   691  000080                     	ds	4
   692  000084                     ___fldiv@exp:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x24
   696  000084                     	ds	1
   697  000085                     ___fldiv@sign:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x25
   701  000085                     	ds	1
   702  000086                     ?_exp:
   703                           	opt stack 0
   704  000086                     ?_log:
   705                           	opt stack 0
   706  000086                     ?_Celsius2Fahrenheit:
   707                           	opt stack 0
   708  000086                     ?___asfldiv:
   709                           	opt stack 0
   710  000086                     vscp_handleProtocolEvent@page_save:
   711                           	opt stack 0
   712  000086                     ___asfldiv@f1p:
   713                           	opt stack 0
   714  000086                     Celsius2Fahrenheit@tc:
   715                           	opt stack 0
   716  000086                     exp@x:
   717                           	opt stack 0
   718  000086                     log@x:
   719                           	opt stack 0
   720                           
   721                           ; 4 bytes @ 0x26
   722  000086                     	ds	2
   723  000088                     vscp_handleProtocolEvent@page_save_1174:
   724                           	opt stack 0
   725  000088                     ___asfldiv@f2:
   726                           	opt stack 0
   727                           
   728                           ; 4 bytes @ 0x28
   729  000088                     	ds	2
   730  00008A                     ?_setEventData:
   731                           	opt stack 0
   732  00008A                     vscp_handleProtocolEvent@offset:
   733                           	opt stack 0
   734  00008A                     setEventData@v:
   735                           	opt stack 0
   736  00008A                     _exp$2286:
   737                           	opt stack 0
   738                           
   739                           ; 4 bytes @ 0x2A
   740  00008A                     	ds	1
   741  00008B                     vscp_handleProtocolEvent@pos:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x2B
   745  00008B                     	ds	1
   746  00008C                     setEventData@unit:
   747                           	opt stack 0
   748  00008C                     vscp_handleProtocolEvent@bytes:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x2C
   752  00008C                     	ds	1
   753  00008D                     vscp_handleProtocolEvent@len:
   754                           	opt stack 0
   755  00008D                     setEventData@newval:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0x2D
   759  00008D                     	ds	1
   760  00008E                     vscp_handleProtocolEvent@pos_1163:
   761                           	opt stack 0
   762  00008E                     exp@exponent:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x2E
   766  00008E                     	ds	1
   767  00008F                     vscp_handleProtocolEvent@len_1164:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x2F
   771  00008F                     	ds	1
   772  000090                     vscp_handleProtocolEvent@bytes_this_time:
   773                           	opt stack 0
   774  000090                     exp@sign:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x30
   778  000090                     	ds	1
   779  000091                     ??_doWork:
   780  000091                     vscp_handleProtocolEvent@cb:
   781                           	opt stack 0
   782  000091                     setEventData@ival:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x31
   786  000091                     	ds	1
   787  000092                     vscp_handleProtocolEvent@i_1173:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x32
   791  000092                     	ds	1
   792  000093                     ??_handle_sync:
   793  000093                     ??_doOneSecondWork:
   794  000093                     vscp_handleProtocolEvent@k:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x33
   798  000093                     	ds	1
   799  000094                     vscp_handleProtocolEvent@i_1162:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x34
   803  000094                     	ds	1
   804  000095                     handle_sync@i:
   805                           	opt stack 0
   806  000095                     vscp_handleProtocolEvent@byte:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x35
   810  000095                     	ds	1
   811  000096                     vscp_handleProtocolEvent@bytes_1169:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x36
   815  000096                     	ds	2
   816  000098                     vscp_handleProtocolEvent@i_1165:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x38
   820  000098                     	ds	1
   821  000099                     vscp_handleProtocolEvent@i:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x39
   825  000099                     	ds	1
   826  00009A                     doOneSecondWork@tmp:
   827                           	opt stack 0
   828  00009A                     vscp_handleProtocolEvent@j:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x3A
   832  00009A                     	ds	1
   833  00009B                     doOneSecondWork@setpoint:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x3B
   837  00009B                     	ds	2
   838  00009D                     doOneSecondWork@i:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x3D
   842  00009D                     	ds	2
   843  00009F                     main@i:
   844                           	opt stack 0
   845                           
   846                           ; 4 bytes @ 0x3F
   847  00009F                     	ds	4
   848                           tblptru	equ	0xFF8
   849                           postinc0	equ	0xFEE
   850                           wreg	equ	0xFE8
   851                           postdec1	equ	0xFE5
   852                           fsr1h	equ	0xFE2
   853                           fsr1l	equ	0xFE1
   854                           
   855                           	psect	cstackCOMRAM
   856  000001                     __pcstackCOMRAM:
   857                           	opt stack 0
   858  000001                     ?i1_WriteTimer0:
   859                           	opt stack 0
   860  000001                     i1WriteTimer0@timer0:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x0
   864  000001                     	ds	2
   865  000003                     i1WriteTimer0@timer:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x2
   869  000003                     	ds	2
   870  000005                     ??_interrupt_at_low_vector:
   871                           
   872                           ; 0 bytes @ 0x4
   873  000005                     	ds	9
   874  00000E                     ?_WriteTimer0:
   875                           	opt stack 0
   876  00000E                     ?_writeEEPROM:
   877                           	opt stack 0
   878  00000E                     ?_OpenADC:
   879                           	opt stack 0
   880  00000E                     ?__CANIDToRegs:
   881                           	opt stack 0
   882  00000E                     ?__RegsToCANID:
   883                           	opt stack 0
   884  00000E                     ??_vscp_getMDF_URL:
   885  00000E                     ?___flge:
   886                           	opt stack 0
   887  00000E                     ?___lbmod:
   888                           	opt stack 0
   889  00000E                     ?__ECANPointBuffer:
   890                           	opt stack 0
   891  00000E                     ?___wmul:
   892                           	opt stack 0
   893  00000E                     ?___flpack:
   894                           	opt stack 0
   895  00000E                     ?_frexp:
   896                           	opt stack 0
   897  00000E                     ?_vscp_getFamilyCode:
   898                           	opt stack 0
   899  00000E                     ?_vscp_getFamilyType:
   900                           	opt stack 0
   901  00000E                     ?___flneg:
   902                           	opt stack 0
   903  00000E                     init_app_ram@i:
   904                           	opt stack 0
   905  00000E                     vscp_getMatrixInfo@pData:
   906                           	opt stack 0
   907  00000E                     ECANSetOperationMode@mode:
   908                           	opt stack 0
   909  00000E                     OpenADC@config2:
   910                           	opt stack 0
   911  00000E                     OpenTimer0@config:
   912                           	opt stack 0
   913  00000E                     ___lbmod@divisor:
   914                           	opt stack 0
   915  00000E                     __CANIDToRegs@ptr:
   916                           	opt stack 0
   917  00000E                     __RegsToCANID@ptr:
   918                           	opt stack 0
   919  00000E                     writeEEPROM@address:
   920                           	opt stack 0
   921  00000E                     WriteTimer0@timer0:
   922                           	opt stack 0
   923  00000E                     ___wmul@multiplier:
   924                           	opt stack 0
   925  00000E                     ___flpack@arg:
   926                           	opt stack 0
   927  00000E                     ___flge@ff1:
   928                           	opt stack 0
   929  00000E                     ___flneg@f1:
   930                           	opt stack 0
   931  00000E                     frexp@value:
   932                           	opt stack 0
   933                           
   934                           ; 4 bytes @ 0xD
   935  00000E                     	ds	1
   936  00000F                     vscp_getMDF_URL@idx:
   937                           	opt stack 0
   938  00000F                     vscp_getMatrixInfo@i:
   939                           	opt stack 0
   940  00000F                     OpenADC@portconfig:
   941                           	opt stack 0
   942  00000F                     ___lbmod@dividend:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0xE
   946  00000F                     	ds	1
   947  000010                     ??_OpenADC:
   948  000010                     __RegsToCANID@val:
   949                           	opt stack 0
   950  000010                     writeEEPROM@data:
   951                           	opt stack 0
   952  000010                     ___lbmod@counter:
   953                           	opt stack 0
   954  000010                     WriteTimer0@timer:
   955                           	opt stack 0
   956  000010                     ___wmul@multiplicand:
   957                           	opt stack 0
   958  000010                     __CANIDToRegs@val:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0xF
   962  000010                     	ds	1
   963  000011                     ?_vscp_setGUID:
   964                           	opt stack 0
   965  000011                     ?_vscp_setUserID:
   966                           	opt stack 0
   967  000011                     ?_vscp_setManufacturerId:
   968                           	opt stack 0
   969  000011                     vscp_setGUID@data:
   970                           	opt stack 0
   971  000011                     vscp_setUserID@data:
   972                           	opt stack 0
   973  000011                     vscp_setManufacturerId@data:
   974                           	opt stack 0
   975  000011                     vscp_goBootloaderMode@algorithm:
   976                           	opt stack 0
   977  000011                     vscp_writeNicknamePermanent@nickname:
   978                           	opt stack 0
   979  000011                     vscp_setSegmentCRC@crc:
   980                           	opt stack 0
   981  000011                     vscp_setControlByte@ctrl:
   982                           	opt stack 0
   983  000011                     __RegsToCANID@type:
   984                           	opt stack 0
   985  000011                     __ECANPointBuffer@b:
   986                           	opt stack 0
   987  000011                     ___lbmod@rem:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x10
   991  000011                     	ds	1
   992  000012                     ??__RegsToCANID:
   993  000012                     vscp_setGUID@idx:
   994                           	opt stack 0
   995  000012                     vscp_setUserID@idx:
   996                           	opt stack 0
   997  000012                     vscp_setManufacturerId@idx:
   998                           	opt stack 0
   999  000012                     OpenADC@config:
  1000                           	opt stack 0
  1001  000012                     ___flpack@exp:
  1002                           	opt stack 0
  1003  000012                     __ECANPointBuffer@pt:
  1004                           	opt stack 0
  1005  000012                     frexp@eptr:
  1006                           	opt stack 0
  1007  000012                     ___flge@ff2:
  1008                           	opt stack 0
  1009                           
  1010                           ; 4 bytes @ 0x11
  1011  000012                     	ds	1
  1012  000013                     ___flpack@sign:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x12
  1016  000013                     	ds	1
  1017  000014                     ??___flpack:
  1018  000014                     ??_frexp:
  1019  000014                     __CANIDToRegs@type:
  1020                           	opt stack 0
  1021  000014                     __RegsToCANID@Value:
  1022                           	opt stack 0
  1023  000014                     ___wmul@product:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x13
  1027  000014                     	ds	1
  1028  000015                     ??__CANIDToRegs:
  1029  000015                     ?_ECANReceiveMessage:
  1030                           	opt stack 0
  1031  000015                     ECANReceiveMessage@data:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x14
  1035  000015                     	ds	1
  1036  000016                     ?_readEEPROM:
  1037                           	opt stack 0
  1038  000016                     ECANReceiveMessage@dataLen:
  1039                           	opt stack 0
  1040  000016                     readEEPROM@address:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x15
  1044  000016                     	ds	1
  1045  000017                     ECANReceiveMessage@msgFlags:
  1046                           	opt stack 0
  1047  000017                     __CANIDToRegs@Value:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x16
  1051  000017                     	ds	1
  1052  000018                     ?_ECANSendMessage:
  1053                           	opt stack 0
  1054  000018                     ?___awtofl:
  1055                           	opt stack 0
  1056  000018                     ECANReceiveMessage@savedPtr:
  1057                           	opt stack 0
  1058  000018                     ___awtofl@c:
  1059                           	opt stack 0
  1060  000018                     ECANSendMessage@id:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x17
  1064  000018                     	ds	1
  1065  000019                     readEEPROM@data:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x18
  1069  000019                     	ds	1
  1070  00001A                     ??_writeCoeffs2Ram:
  1071  00001A                     ?_getCalibrationValue:
  1072                           	opt stack 0
  1073  00001A                     ?___lwtofl:
  1074                           	opt stack 0
  1075  00001A                     vscp_readAppReg@pos:
  1076                           	opt stack 0
  1077  00001A                     vscp_getGUID@idx:
  1078                           	opt stack 0
  1079  00001A                     vscp_getUserID@idx:
  1080                           	opt stack 0
  1081  00001A                     vscp_getManufacturerId@idx:
  1082                           	opt stack 0
  1083  00001A                     ECANReceiveMessage@id:
  1084                           	opt stack 0
  1085  00001A                     vscp_handleDropNickname@bytes:
  1086                           	opt stack 0
  1087  00001A                     ___lwtofl@c:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x19
  1091  00001A                     	ds	1
  1092  00001B                     ??_vscp_readStdReg:
  1093  00001B                     ?_vscp_writeStdReg:
  1094                           	opt stack 0
  1095  00001B                     vscp_readAppReg@reg:
  1096                           	opt stack 0
  1097  00001B                     ECANReceiveMessage@i:
  1098                           	opt stack 0
  1099  00001B                     vscp_writeStdReg@value:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x1A
  1103  00001B                     	ds	1
  1104  00001C                     ??_getCalibrationValue:
  1105  00001C                     ??_vscp_writeStdReg:
  1106  00001C                     vscp_readAppReg@rv:
  1107                           	opt stack 0
  1108  00001C                     ECANSendMessage@data:
  1109                           	opt stack 0
  1110  00001C                     ECANReceiveMessage@mode:
  1111                           	opt stack 0
  1112  00001C                     writeCoeffs2Ram@c:
  1113                           	opt stack 0
  1114                           
  1115                           ; 3 bytes @ 0x1B
  1116  00001C                     	ds	1
  1117  00001D                     ECANSendMessage@dataLen:
  1118                           	opt stack 0
  1119  00001D                     ECANReceiveMessage@temp:
  1120                           	opt stack 0
  1121  00001D                     ___awtofl@sign:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x1C
  1125  00001D                     	ds	1
  1126  00001E                     ?___flmul:
  1127                           	opt stack 0
  1128  00001E                     ECANSendMessage@msgFlags:
  1129                           	opt stack 0
  1130  00001E                     ECANReceiveMessage@ptr:
  1131                           	opt stack 0
  1132  00001E                     ___flmul@f1:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x1D
  1136  00001E                     	ds	1
  1137  00001F                     ??_ECANSendMessage:
  1138  00001F                     writeCoeffs2Ram@i:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x1E
  1142  00001F                     	ds	1
  1143  000020                     ?_getCANFrame:
  1144                           	opt stack 0
  1145  000020                     getCANFrame@pdlc:
  1146                           	opt stack 0
  1147  000020                     vscp_writeStdReg@rv:
  1148                           	opt stack 0
  1149  000020                     vscp_readStdReg@code:
  1150                           	opt stack 0
  1151  000020                     ECANSendMessage@pb:
  1152                           	opt stack 0
  1153                           
  1154                           ; 18 bytes @ 0x1F
  1155  000020                     	ds	1
  1156  000021                     getCANFrame@pdata:
  1157                           	opt stack 0
  1158  000021                     vscp_writeStdReg@reg:
  1159                           	opt stack 0
  1160  000021                     getCalibrationValue@cal:
  1161                           	opt stack 0
  1162  000021                     writeCoeffs2Ram@j:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x20
  1166  000021                     	ds	1
  1167  000022                     getCANFrame@pid:
  1168                           	opt stack 0
  1169  000022                     ___flmul@f2:
  1170                           	opt stack 0
  1171                           
  1172                           ; 4 bytes @ 0x21
  1173  000022                     	ds	1
  1174  000023                     ?_vscp_writeAppReg:
  1175                           	opt stack 0
  1176  000023                     getCalibrationValue@i:
  1177                           	opt stack 0
  1178  000023                     vscp_writeAppReg@val:
  1179                           	opt stack 0
  1180  000023                     getCANFrame@flags:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x22
  1184  000023                     	ds	1
  1185  000024                     ?_getVSCPFrame:
  1186                           	opt stack 0
  1187  000024                     vscp_writeAppReg@pos:
  1188                           	opt stack 0
  1189  000024                     getVSCPFrame@pvscptype:
  1190                           	opt stack 0
  1191  000024                     vscp_readStdReg@code_1147:
  1192                           	opt stack 0
  1193                           
  1194                           ; 4 bytes @ 0x23
  1195  000024                     	ds	1
  1196  000025                     vscp_writeAppReg@reg:
  1197                           	opt stack 0
  1198  000025                     getVSCPFrame@pNodeId:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x24
  1202  000025                     	ds	1
  1203  000026                     vscp_writeAppReg@rv:
  1204                           	opt stack 0
  1205  000026                     getVSCPFrame@pPriority:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x25
  1209  000026                     	ds	1
  1210  000027                     ?_vscp_writeRegister:
  1211                           	opt stack 0
  1212  000027                     getVSCPFrame@pSize:
  1213                           	opt stack 0
  1214  000027                     vscp_writeRegister@value:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x26
  1218  000027                     	ds	1
  1219  000028                     getVSCPFrame@pData:
  1220                           	opt stack 0
  1221  000028                     vscp_readStdReg@idx:
  1222                           	opt stack 0
  1223  000028                     vscp_writeRegister@reg:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x27
  1227  000028                     	ds	1
  1228  000029                     ??_getVSCPFrame:
  1229  000029                     vscp_readStdReg@idx_1148:
  1230                           	opt stack 0
  1231                           
  1232                           ; 1 bytes @ 0x28
  1233  000029                     	ds	1
  1234  00002A                     vscp_readStdReg@rv:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x29
  1238  00002A                     	ds	1
  1239  00002B                     vscp_readStdReg@reg:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x2A
  1243  00002B                     	ds	1
  1244  00002C                     vscp_readRegister@reg:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x2B
  1248  00002C                     	ds	1
  1249  00002D                     getVSCPFrame@pvscpclass:
  1250                           	opt stack 0
  1251  00002D                     ___flmul@exp:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x2C
  1255  00002D                     	ds	1
  1256  00002E                     getVSCPFrame@id:
  1257                           	opt stack 0
  1258  00002E                     ___flmul@f3_as_product:
  1259                           	opt stack 0
  1260                           
  1261                           ; 4 bytes @ 0x2D
  1262  00002E                     	ds	4
  1263  000032                     ECANSendMessage@mode:
  1264                           	opt stack 0
  1265  000032                     vscp_getEvent@rv:
  1266                           	opt stack 0
  1267  000032                     ___flmul@cntr:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x31
  1271  000032                     	ds	1
  1272  000033                     ECANSendMessage@buffers:
  1273                           	opt stack 0
  1274  000033                     ___flmul@sign:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x32
  1278  000033                     	ds	1
  1279  000034                     ??___fladd:
  1280  000034                     ?___asflmul:
  1281                           	opt stack 0
  1282  000034                     ?___fltol:
  1283                           	opt stack 0
  1284  000034                     ECANSendMessage@j:
  1285                           	opt stack 0
  1286  000034                     ___asflmul@multiplicand:
  1287                           	opt stack 0
  1288  000034                     ___fltol@f1:
  1289                           	opt stack 0
  1290                           
  1291                           ; 4 bytes @ 0x33
  1292  000034                     	ds	1
  1293  000035                     ECANSendMessage@tempBSEL0:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x34
  1297  000035                     	ds	1
  1298  000036                     ECANSendMessage@tempPtr:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x35
  1302  000036                     	ds	2
  1303  000038                     ??___fltol:
  1304  000038                     ECANSendMessage@temp:
  1305                           	opt stack 0
  1306  000038                     ___asflmul@mp:
  1307                           	opt stack 0
  1308  000038                     ___fladd@sign:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x37
  1312  000038                     	ds	1
  1313  000039                     ECANSendMessage@i:
  1314                           	opt stack 0
  1315  000039                     ___fladd@exp2:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x38
  1319  000039                     	ds	1
  1320  00003A                     ___fladd@exp1:
  1321                           	opt stack 0
  1322  00003A                     ECANSendMessage@ptr:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x39
  1326  00003A                     	ds	1
  1327  00003B                     ?_Celsius2Kelvin:
  1328                           	opt stack 0
  1329  00003B                     ?_eval_poly:
  1330                           	opt stack 0
  1331  00003B                     ?___asfladd:
  1332                           	opt stack 0
  1333  00003B                     ?___asflsub:
  1334                           	opt stack 0
  1335  00003B                     ___asfladd@f1p:
  1336                           	opt stack 0
  1337  00003B                     ___asflsub@f1p:
  1338                           	opt stack 0
  1339  00003B                     Celsius2Kelvin@tc:
  1340                           	opt stack 0
  1341  00003B                     eval_poly@x:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0x3A
  1345  00003B                     	ds	1
  1346  00003C                     ?_sendCANFrame:
  1347                           	opt stack 0
  1348  00003C                     ___fltol@sign1:
  1349                           	opt stack 0
  1350  00003C                     sendCANFrame@id:
  1351                           	opt stack 0
  1352                           
  1353                           ; 4 bytes @ 0x3B
  1354  00003C                     	ds	1
  1355  00003D                     ___fltol@exp1:
  1356                           	opt stack 0
  1357  00003D                     ___asfladd@f2:
  1358                           	opt stack 0
  1359  00003D                     ___asflsub@f2:
  1360                           	opt stack 0
  1361                           
  1362                           ; 4 bytes @ 0x3C
  1363  00003D                     	ds	1
  1364  00003E                     ?___aldiv:
  1365                           	opt stack 0
  1366  00003E                     ___aldiv@dividend:
  1367                           	opt stack 0
  1368                           
  1369                           ; 4 bytes @ 0x3D
  1370  00003E                     	ds	1
  1371  00003F                     eval_poly@d:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x3E
  1375  00003F                     	ds	1
  1376  000040                     sendCANFrame@dlc:
  1377                           	opt stack 0
  1378  000040                     eval_poly@n:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x3F
  1382  000040                     	ds	1
  1383  000041                     sendCANFrame@pdata:
  1384                           	opt stack 0
  1385                           
  1386                           ; 1 bytes @ 0x40
  1387  000041                     	ds	1
  1388  000042                     ??_eval_poly:
  1389  000042                     sendCANFrame@rv:
  1390                           	opt stack 0
  1391  000042                     ___aldiv@divisor:
  1392                           	opt stack 0
  1393                           
  1394                           ; 4 bytes @ 0x41
  1395  000042                     	ds	1
  1396  000043                     ??_ldexp:
  1397  000043                     vscp_sendEvent@rv:
  1398                           	opt stack 0
  1399  000043                     log@exponent:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x42
  1403  000043                     	ds	1
  1404  000044                     ??_sendTempEvent:
  1405  000044                     ?_vscp_sendHeartBeat:
  1406                           	opt stack 0
  1407  000044                     ??_vscp_newNodeOnline:
  1408  000044                     vscp_sendHeartBeat@subzone:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0x43
  1412  000044                     	ds	1
  1413  000045                     sendTempEvent@i:
  1414                           	opt stack 0
  1415  000045                     vscp_sendHeartBeat@zone:
  1416                           	opt stack 0
  1417                           
  1418                           ; 1 bytes @ 0x44
  1419  000045                     	ds	1
  1420  000046                     tblptru	equ	0xFF8
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1h	equ	0xFE2
  1425                           fsr1l	equ	0xFE1
  1426                           
  1427                           ; 0 bytes @ 0x45
  1428 ;;
  1429 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1430 ;;
  1431 ;; *************** function _main *****************
  1432 ;; Defined at:
  1433 ;;		line 301 in file "../main.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  i               4   63[BANK0 ] unsigned long 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;		None               void
  1440 ;; Registers used:
  1441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : F/1
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1447 ;;      Params:         0       0       0       0       0       0       0
  1448 ;;      Locals:         0       4       0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0
  1450 ;;      Totals:         0       4       0       0       0       0       0
  1451 ;;Total ram usage:        4 bytes
  1452 ;; Hardware stack levels required when called:    9
  1453 ;; This function calls:
  1454 ;;		_init
  1455 ;;		_vscp_check_pstorage
  1456 ;;		_init_app_eeprom
  1457 ;;		_vscp_init
  1458 ;;		_writeEEPROM
  1459 ;;		_vscp_getEvent
  1460 ;;		_vscp_goActiveState
  1461 ;;		_vscp_handleProbeState
  1462 ;;		_vscp_handleProtocolEvent
  1463 ;;		_handle_sync
  1464 ;;		_vscp_error
  1465 ;;		_doOneSecondWork
  1466 ;;		_vscp_doOneSecondWork
  1467 ;;		_doWork
  1468 ;; This function is called by:
  1469 ;;		Startup code after reset
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text0
  1474  004470                     __ptext0:
  1475                           	opt stack 0
  1476  004470                     _main:
  1477                           	opt stack 22
  1478                           
  1479                           ;main.c: 302: uint32_t i;
  1480                           ;main.c: 304: init();
  1481                           
  1482                           ;incstack = 0
  1483                           ;incstack = 0
  1484  004470  EC89  F02B         	call	_init	;wreg free
  1485                           
  1486                           ;main.c: 308: if ( !vscp_check_pstorage() ) {
  1487  004474  ECDB  F02C         	call	_vscp_check_pstorage	;wreg free
  1488  004478  0900               	iorlw	0
  1489  00447A  B4D8               	btfsc	status,2,c
  1490                           
  1491                           ;main.c: 311: init_app_eeprom();
  1492  00447C  EC01  F017         	call	_init_app_eeprom	;wreg free
  1493                           
  1494                           ;main.c: 313: }
  1495                           ;main.c: 315: vscp_init();
  1496  004480  ECE9  F02A         	call	_vscp_init	;wreg free
  1497  004484                     l170:
  1498  004484  0004               	clrwdt		;# 
  1499                           
  1500                           ;main.c: 321: if ( ( vscp_initbtncnt > 250 ) &&
  1501                           ;main.c: 322: ( 0x01 != vscp_node_state ) ) {
  1502  004486  0EFA               	movlw	250
  1503  004488  0100               	movlb	0	; () banked
  1504  00448A  65C2               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1505  00448C  D00C               	goto	l13647
  1506                           
  1507                           ; BSR set to: 0
  1508  00448E  05C4               	decf	_vscp_node_state& (0+255),w,b
  1509  004490  E00A               	bz	l13647
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;main.c: 325: vscp_nickname = 0xff;
  1513  004492  69C3               	setf	_vscp_nickname& (0+255),b
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;main.c: 326: writeEEPROM(0x01, 0xff);
  1517  004494  6A0F               	clrf	?_writeEEPROM+1,c
  1518  004496  0E01               	movlw	1
  1519  004498  6E0E               	movwf	?_writeEEPROM,c
  1520  00449A  0EFF               	movlw	255
  1521  00449C  6810               	setf	?_writeEEPROM+2,c
  1522  00449E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  1523                           
  1524                           ;main.c: 327: vscp_init();
  1525  0044A2  ECE9  F02A         	call	_vscp_init	;wreg free
  1526  0044A6                     l13647:
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 329: }
  1530                           ;main.c: 333: vscp_imsg.flags = 0;
  1531  0044A6  6BC5               	clrf	_vscp_imsg& (0+255),b
  1532                           
  1533                           ; BSR set to: 0
  1534                           ;main.c: 334: vscp_getEvent();
  1535  0044A8  EC54  F02C         	call	_vscp_getEvent	;wreg free
  1536                           
  1537                           ;main.c: 337: switch (vscp_node_state) {
  1538  0044AC  D024               	goto	l13677
  1539  0044AE                     l13651:
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;main.c: 342: if (0xff == vscp_nickname) {
  1543  0044AE  29C3               	incf	_vscp_nickname& (0+255),w,b
  1544  0044B0  E103               	bnz	l13655
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 344: vscp_node_state = 0x01;
  1548  0044B2  0E01               	movlw	1
  1549  0044B4  6FC4               	movwf	_vscp_node_state& (0+255),b
  1550                           
  1551                           ;main.c: 345: }
  1552  0044B6  D02B               	goto	l13679
  1553  0044B8                     l13655:
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 346: else {
  1557                           ;main.c: 348: vscp_node_state = 0x03;
  1558  0044B8  0E03               	movlw	3
  1559  0044BA  6FC4               	movwf	_vscp_node_state& (0+255),b
  1560  0044BC                     l13657:
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 349: vscp_goActiveState();
  1564  0044BC  EC1E  F02D         	call	_vscp_goActiveState	;wreg free
  1565  0044C0  D026               	goto	l13679
  1566  0044C2                     l13659:
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 354: vscp_handleProbeState();
  1570  0044C2  ECEC  F024         	call	_vscp_handleProbeState	;wreg free
  1571                           
  1572                           ;main.c: 355: break;
  1573  0044C6  D023               	goto	l13679
  1574  0044C8                     l179:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 364: if (vscp_imsg.flags & 0x80) {
  1578  0044C8  AFC5               	btfss	_vscp_imsg& (0+255),7,b
  1579  0044CA  D021               	goto	l13679
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;main.c: 366: if ( 0 == vscp_imsg.vscp_class ) {
  1583  0044CC  51C8               	movf	(_vscp_imsg+3)& (0+255),w,b
  1584  0044CE  11C7               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1585  0044D0  E103               	bnz	l13667
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 369: vscp_handleProtocolEvent();
  1589  0044D2  ECDC  F013         	call	_vscp_handleProtocolEvent	;wreg free
  1590                           
  1591                           ;main.c: 371: }
  1592  0044D6  D01B               	goto	l13679
  1593  0044D8                     l13667:
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 372: else if ( ( 30 == vscp_imsg.vscp_class ) &&
  1597                           ;main.c: 373: ( 26 == vscp_imsg.vscp_type ) ) {
  1598  0044D8  51C7               	movf	(_vscp_imsg+2)& (0+255),w,b
  1599  0044DA  0A1E               	xorlw	30
  1600  0044DC  11C8               	iorwf	(_vscp_imsg+3)& (0+255),w,b
  1601  0044DE  E117               	bnz	l13679
  1602                           
  1603                           ; BSR set to: 0
  1604  0044E0  51C9               	movf	(_vscp_imsg+4)& (0+255),w,b
  1605  0044E2  0A1A               	xorlw	26
  1606  0044E4  E114               	bnz	l13679
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 374: handle_sync();
  1610  0044E6  EC71  F028         	call	_handle_sync	;wreg free
  1611  0044EA  D011               	goto	l13679
  1612  0044EC                     l13673:
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 381: vscp_error();
  1616  0044EC  ECFD  F02D         	call	_vscp_error	;wreg free
  1617                           
  1618                           ;main.c: 382: break;
  1619  0044F0  D00E               	goto	l13679
  1620  0044F2                     l185:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 385: vscp_node_state = 0x00;
  1624  0044F2  6BC4               	clrf	_vscp_node_state& (0+255),b
  1625                           
  1626                           ;main.c: 386: break;
  1627  0044F4  D00C               	goto	l13679
  1628  0044F6                     l13677:
  1629  0044F6  0100               	movlb	0	; () banked
  1630  0044F8  51C4               	movf	_vscp_node_state& (0+255),w,b
  1631                           
  1632                           ; Switch size 1, requested type "speed"
  1633                           ; Number of cases is 5, Range of values is 0 to 4
  1634                           ; switch strategies available:
  1635                           ; Name         Instructions Cycles
  1636                           ; simple_byte           16     9 (average)
  1637                           ;	Chosen strategy is simple_byte
  1638  0044FA  E0D9               	bz	l13651
  1639  0044FC  0A01               	xorlw	1	; case 1
  1640  0044FE  E0E1               	bz	l13659
  1641  004500  0A03               	xorlw	3	; case 2
  1642  004502  E0DC               	bz	l13657
  1643  004504  0A01               	xorlw	1	; case 3
  1644  004506  E0E0               	bz	l179
  1645  004508  0A07               	xorlw	7	; case 4
  1646  00450A  E0F0               	bz	l13673
  1647  00450C  D7F2               	goto	l185
  1648  00450E                     l13679:
  1649                           
  1650                           ;main.c: 392: if ( measurement_clock > 1000 ) {
  1651  00450E  0EE9               	movlw	233
  1652  004510  0100               	movlb	0	; () banked
  1653  004512  5DAF               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1654  004514  0E03               	movlw	3
  1655  004516  59B0               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1656  004518  0E00               	movlw	0
  1657  00451A  59B1               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1658  00451C  0E00               	movlw	0
  1659  00451E  59B2               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1660  004520  E3B1               	bnc	l170
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 394: measurement_clock = 0;
  1664  004522  6BAF               	clrf	_measurement_clock& (0+255),b	;volatile
  1665  004524  6BB0               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1666  004526  6BB1               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1667  004528  6BB2               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;main.c: 395: doOneSecondWork();
  1671  00452A  EC38  F00C         	call	_doOneSecondWork	;wreg free
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 396: seconds++;
  1675  00452E  2BC0               	incf	_seconds& (0+255),f,b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 400: if (0x03 == vscp_node_state) {
  1679  004530  51C4               	movf	_vscp_node_state& (0+255),w,b
  1680  004532  0A03               	xorlw	3
  1681  004534  E11A               	bnz	l13701
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;main.c: 401: for (i = 0; i < 6; i++) {
  1685  004536  6B9F               	clrf	main@i& (0+255),b
  1686  004538  6BA0               	clrf	(main@i+1)& (0+255),b
  1687  00453A  6BA1               	clrf	(main@i+2)& (0+255),b
  1688  00453C  6BA2               	clrf	(main@i+3)& (0+255),b
  1689  00453E                     l13695:
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 402: seconds_temp[i]++;
  1693  00453E  0E00               	movlw	low _seconds_temp
  1694  004540  0100               	movlb	0	; () banked
  1695  004542  259F               	addwf	main@i& (0+255),w,b
  1696  004544  6ED9               	movwf	fsr2l,c
  1697  004546  0E01               	movlw	high _seconds_temp
  1698  004548  21A0               	addwfc	(main@i+1)& (0+255),w,b
  1699  00454A  6EDA               	movwf	fsr2h,c
  1700  00454C  2ADF               	incf	indf2,f,c
  1701                           
  1702                           ; BSR set to: 0
  1703  00454E  2B9F               	incf	main@i& (0+255),f,b
  1704  004550  0E00               	movlw	0
  1705  004552  23A0               	addwfc	(main@i+1)& (0+255),f,b
  1706  004554  23A1               	addwfc	(main@i+2)& (0+255),f,b
  1707  004556  23A2               	addwfc	(main@i+3)& (0+255),f,b
  1708                           
  1709                           ; BSR set to: 0
  1710  004558  0E06               	movlw	6
  1711  00455A  5D9F               	subwf	main@i& (0+255),w,b
  1712  00455C  0E00               	movlw	0
  1713  00455E  59A0               	subwfb	(main@i+1)& (0+255),w,b
  1714  004560  0E00               	movlw	0
  1715  004562  59A1               	subwfb	(main@i+2)& (0+255),w,b
  1716  004564  0E00               	movlw	0
  1717  004566  59A2               	subwfb	(main@i+3)& (0+255),w,b
  1718  004568  E3EA               	bnc	l13695
  1719  00456A                     l13701:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 403: }
  1723                           ;main.c: 404: }
  1724                           ;main.c: 406: if (seconds > 60) {
  1725  00456A  0E3C               	movlw	60
  1726  00456C  65C0               	cpfsgt	_seconds& (0+255),b
  1727  00456E  D001               	goto	l13705
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 407: seconds = 0;
  1731  004570  6BC0               	clrf	_seconds& (0+255),b
  1732  004572                     l13705:
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 408: }
  1736                           ;main.c: 412: if (0x03 == vscp_node_state) {
  1737  004572  51C4               	movf	_vscp_node_state& (0+255),w,b
  1738  004574  0A03               	xorlw	3
  1739  004576  B4D8               	btfsc	status,2,c
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 413: vscp_doOneSecondWork();
  1743  004578  EC56  F02A         	call	_vscp_doOneSecondWork	;wreg free
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 414: }
  1747                           ;main.c: 417: doWork();
  1748  00457C  ECE5  F019         	call	_doWork	;wreg free
  1749  004580  D781               	goto	l170
  1750  004582                     __end_of_main:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           postinc0	equ	0xFEE
  1754                           wreg	equ	0xFE8
  1755                           postdec1	equ	0xFE5
  1756                           fsr1h	equ	0xFE2
  1757                           fsr1l	equ	0xFE1
  1758                           indf2	equ	0xFDF
  1759                           fsr2h	equ	0xFDA
  1760                           fsr2l	equ	0xFD9
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _doWork *****************
  1764 ;; Defined at:
  1765 ;;		line 432 in file "../main.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;  temp            4   47[BANK1 ] unsigned long 
  1770 ;;  avarage         4   43[BANK1 ] unsigned long 
  1771 ;;  resistance      4   38[BANK1 ] unsigned long 
  1772 ;;  v               4   32[BANK1 ] unsigned long 
  1773 ;;  calVoltage      4    4[BANK1 ] unsigned long 
  1774 ;;  Rinf            4    0[BANK1 ] unsigned long 
  1775 ;;  B               2   36[BANK1 ] unsigned short 
  1776 ;;  i               1   51[BANK1 ] unsigned char 
  1777 ;;  j               1   42[BANK1 ] unsigned char 
  1778 ;; Return value:  Size  Location     Type
  1779 ;;		None               void
  1780 ;; Registers used:
  1781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : F/0
  1784 ;;		On exit  : F/1
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1787 ;;      Params:         0       0       0       0       0       0       0
  1788 ;;      Locals:         0       0      52       0       0       0       0
  1789 ;;      Temps:          0      14       0       0       0       0       0
  1790 ;;      Totals:         0      14      52       0       0       0       0
  1791 ;;Total ram usage:       66 bytes
  1792 ;; Hardware stack levels used:    1
  1793 ;; Hardware stack levels required when called:    7
  1794 ;; This function calls:
  1795 ;;		_readEEPROM
  1796 ;;		_exp
  1797 ;;		_log
  1798 ;;		_getCalibrationValue
  1799 ;;		___aldiv
  1800 ;;		___altofl
  1801 ;;		___asfladd
  1802 ;;		___fladd
  1803 ;;		___asfldiv
  1804 ;;		___fldiv
  1805 ;;		___flmul
  1806 ;;		___asflsub
  1807 ;;		___flsub
  1808 ;;		___fltol
  1809 ;;		___lwtofl
  1810 ;; This function is called by:
  1811 ;;		_main
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text1
  1816  0033CA                     __ptext1:
  1817                           	opt stack 0
  1818  0033CA                     _doWork:
  1819                           	opt stack 23
  1820                           
  1821                           ; BSR set to: 0
  1822                           ;main.c: 433: uint8_t i, j;
  1823                           ;main.c: 434: uint16_t B;
  1824                           ;main.c: 435: double avarage;
  1825                           ;main.c: 436: double resistance;
  1826                           ;main.c: 437: double Rinf;
  1827                           ;main.c: 438: double temp;
  1828                           ;main.c: 439: double v;
  1829                           ;main.c: 440: double calVoltage;
  1830                           ;main.c: 442: calVoltage = ((uint16_t) readEEPROM(0xF2)*256 +
  1831                           ;main.c: 443: readEEPROM(0xF3));
  1832                           
  1833                           ; BSR set to: 1
  1834                           ;incstack = 0
  1835                           ;incstack = 0
  1836  0033CA  6A17               	clrf	?_readEEPROM+1,c
  1837  0033CC  0EF3               	movlw	243
  1838  0033CE  6E16               	movwf	?_readEEPROM,c
  1839  0033D0  ECA4  F02D         	call	_readEEPROM	;wreg free
  1840  0033D4  0100               	movlb	0	; () banked
  1841  0033D6  6F91               	movwf	??_doWork& (0+255),b
  1842  0033D8  6A17               	clrf	?_readEEPROM+1,c
  1843  0033DA  0EF2               	movlw	242
  1844  0033DC  6E16               	movwf	?_readEEPROM,c
  1845  0033DE  ECA4  F02D         	call	_readEEPROM	;wreg free
  1846  0033E2  6E1B               	movwf	?___lwtofl+1,c
  1847  0033E4  0100               	movlb	0	; () banked
  1848  0033E6  5191               	movf	??_doWork& (0+255),w,b
  1849  0033E8  6E1A               	movwf	?___lwtofl,c
  1850  0033EA  EC2A  F02C         	call	___lwtofl	;wreg free
  1851  0033EE  C01D  F155         	movff	?___lwtofl+3,doWork@calVoltage+3
  1852  0033F2  C01C  F154         	movff	?___lwtofl+2,doWork@calVoltage+2
  1853  0033F6  C01B  F153         	movff	?___lwtofl+1,doWork@calVoltage+1
  1854  0033FA  C01A  F152         	movff	?___lwtofl,doWork@calVoltage
  1855                           
  1856                           ;main.c: 448: for (i = 0; i < 6; i++) {
  1857  0033FE  0101               	movlb	1	; () banked
  1858  003400  6B81               	clrf	doWork@i& (0+255),b
  1859  003402                     l13903:
  1860                           
  1861                           ; BSR set to: 1
  1862                           ;main.c: 450: if (adc_conversion_flags & 1 << i) {
  1863  003402  C181  F091         	movff	doWork@i,??_doWork
  1864  003406  0E01               	movlw	1
  1865  003408  0100               	movlb	0	; () banked
  1866  00340A  6F92               	movwf	(??_doWork+1)& (0+255),b
  1867  00340C  2B91               	incf	??_doWork& (0+255),f,b
  1868  00340E  D002               	goto	u13114
  1869  003410                     u13115:
  1870  003410  90D8               	bcf	status,0,c
  1871  003412  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  1872  003414                     u13114:
  1873  003414  2F91               	decfsz	??_doWork& (0+255),f,b
  1874  003416  D7FC               	goto	u13115
  1875  003418  5192               	movf	(??_doWork+1)& (0+255),w,b
  1876  00341A  15BD               	andwf	_adc_conversion_flags& (0+255),w,b
  1877  00341C  E101 D1F5          	bz	l13957
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 453: avarage = 0;
  1881  003420  0101               	movlb	1	; () banked
  1882  003422  6B79               	clrf	doWork@avarage& (0+255),b
  1883  003424  6B7A               	clrf	(doWork@avarage+1)& (0+255),b
  1884  003426  6B7B               	clrf	(doWork@avarage+2)& (0+255),b
  1885  003428  6B7C               	clrf	(doWork@avarage+3)& (0+255),b
  1886                           
  1887                           ;main.c: 454: for (j = 0; j < 80; j++) {
  1888  00342A  6B78               	clrf	doWork@j& (0+255),b
  1889  00342C                     l13911:
  1890                           
  1891                           ; BSR set to: 1
  1892                           ;main.c: 455: avarage += ((uint16_t)adc[12 * j + 2 * i])*256 + adc[12 * j + 2 * i + 1];
  1893  00342C  0E01               	movlw	high doWork@avarage
  1894  00342E  6E3C               	movwf	?___asfladd+1,c
  1895  003430  0E79               	movlw	low doWork@avarage
  1896  003432  6E3B               	movwf	?___asfladd,c
  1897  003434  90D8               	bcf	status,0,c
  1898  003436  3581               	rlcf	doWork@i& (0+255),w,b
  1899  003438  0100               	movlb	0	; () banked
  1900  00343A  6F91               	movwf	??_doWork& (0+255),b
  1901  00343C  6B92               	clrf	(??_doWork+1)& (0+255),b
  1902  00343E  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  1903  003440  0101               	movlb	1	; () banked
  1904  003442  5178               	movf	doWork@j& (0+255),w,b
  1905  003444  0D0C               	mullw	12
  1906  003446  0E83               	movlw	low (_adc+1)
  1907  003448  24F3               	addwf	prodl,w,c
  1908  00344A  0100               	movlb	0	; () banked
  1909  00344C  6F93               	movwf	(??_doWork+2)& (0+255),b
  1910  00344E  0E01               	movlw	high (_adc+1)
  1911  003450  20F4               	addwfc	prodh,w,c
  1912  003452  6F94               	movwf	(??_doWork+3)& (0+255),b
  1913  003454  5191               	movf	??_doWork& (0+255),w,b
  1914  003456  2593               	addwf	(??_doWork+2)& (0+255),w,b
  1915  003458  6ED9               	movwf	fsr2l,c
  1916  00345A  5192               	movf	(??_doWork+1)& (0+255),w,b
  1917  00345C  2194               	addwfc	(??_doWork+3)& (0+255),w,b
  1918  00345E  6EDA               	movwf	fsr2h,c
  1919  003460  50DF               	movf	indf2,w,c
  1920  003462  6F95               	movwf	(??_doWork+4)& (0+255),b
  1921  003464  90D8               	bcf	status,0,c
  1922  003466  0101               	movlb	1	; () banked
  1923  003468  3581               	rlcf	doWork@i& (0+255),w,b
  1924  00346A  0100               	movlb	0	; () banked
  1925  00346C  6F96               	movwf	(??_doWork+5)& (0+255),b
  1926  00346E  6B97               	clrf	(??_doWork+6)& (0+255),b
  1927  003470  3797               	rlcf	(??_doWork+6)& (0+255),f,b
  1928  003472  0101               	movlb	1	; () banked
  1929  003474  5178               	movf	doWork@j& (0+255),w,b
  1930  003476  0D0C               	mullw	12
  1931  003478  0E82               	movlw	low _adc
  1932  00347A  24F3               	addwf	prodl,w,c
  1933  00347C  0100               	movlb	0	; () banked
  1934  00347E  6F98               	movwf	(??_doWork+7)& (0+255),b
  1935  003480  0E01               	movlw	high _adc
  1936  003482  20F4               	addwfc	prodh,w,c
  1937  003484  6F99               	movwf	(??_doWork+8)& (0+255),b
  1938  003486  5196               	movf	(??_doWork+5)& (0+255),w,b
  1939  003488  2598               	addwf	(??_doWork+7)& (0+255),w,b
  1940  00348A  6ED9               	movwf	fsr2l,c
  1941  00348C  5197               	movf	(??_doWork+6)& (0+255),w,b
  1942  00348E  2199               	addwfc	(??_doWork+8)& (0+255),w,b
  1943  003490  6EDA               	movwf	fsr2h,c
  1944  003492  50DF               	movf	indf2,w,c
  1945  003494  6E1B               	movwf	?___lwtofl+1,c
  1946  003496  5195               	movf	(??_doWork+4)& (0+255),w,b
  1947  003498  6E1A               	movwf	?___lwtofl,c
  1948  00349A  EC2A  F02C         	call	___lwtofl	;wreg free
  1949  00349E  C01D  F040         	movff	?___lwtofl+3,?___asfladd+5
  1950  0034A2  C01C  F03F         	movff	?___lwtofl+2,?___asfladd+4
  1951  0034A6  C01B  F03E         	movff	?___lwtofl+1,?___asfladd+3
  1952  0034AA  C01A  F03D         	movff	?___lwtofl,?___asfladd+2
  1953  0034AE  ECBC  F029         	call	___asfladd	;wreg free
  1954                           
  1955                           ; BSR set to: 0
  1956  0034B2  0101               	movlb	1	; () banked
  1957  0034B4  2B78               	incf	doWork@j& (0+255),f,b
  1958                           
  1959                           ; BSR set to: 1
  1960  0034B6  0E4F               	movlw	79
  1961  0034B8  6578               	cpfsgt	doWork@j& (0+255),b
  1962  0034BA  D7B8               	goto	l13911
  1963                           
  1964                           ; BSR set to: 1
  1965                           ;main.c: 459: if (1) {
  1966  0034BC  0E01               	movlw	high doWork@avarage
  1967  0034BE  0100               	movlb	0	; () banked
  1968  0034C0  6F87               	movwf	(?___asfldiv+1)& (0+255),b
  1969  0034C2  0E79               	movlw	low doWork@avarage
  1970  0034C4  6F86               	movwf	?___asfldiv& (0+255),b
  1971  0034C6  6B88               	clrf	(?___asfldiv+2)& (0+255),b
  1972  0034C8  6B89               	clrf	(?___asfldiv+3)& (0+255),b
  1973  0034CA  0EA0               	movlw	160
  1974  0034CC  6F8A               	movwf	(?___asfldiv+4)& (0+255),b
  1975  0034CE  0E42               	movlw	66
  1976  0034D0  6F8B               	movwf	(?___asfldiv+5)& (0+255),b
  1977  0034D2  EC0A  F02A         	call	___asfldiv	;wreg free
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;main.c: 467: B = (uint16_t)readEEPROM(2 * i + 0x4F)*256 +
  1981                           ;main.c: 468: readEEPROM(2 * i + 0x50);
  1982  0034D6  0101               	movlb	1	; () banked
  1983  0034D8  5181               	movf	doWork@i& (0+255),w,b
  1984  0034DA  0D02               	mullw	2
  1985  0034DC  0E50               	movlw	80
  1986  0034DE  24F3               	addwf	prodl,w,c
  1987  0034E0  6E16               	movwf	?_readEEPROM,c
  1988  0034E2  0E00               	movlw	0
  1989  0034E4  20F4               	addwfc	prodh,w,c
  1990  0034E6  6E17               	movwf	?_readEEPROM+1,c
  1991  0034E8  ECA4  F02D         	call	_readEEPROM	;wreg free
  1992  0034EC  0100               	movlb	0	; () banked
  1993  0034EE  6F91               	movwf	??_doWork& (0+255),b
  1994  0034F0  0101               	movlb	1	; () banked
  1995  0034F2  5181               	movf	doWork@i& (0+255),w,b
  1996  0034F4  0D02               	mullw	2
  1997  0034F6  0E4F               	movlw	79
  1998  0034F8  24F3               	addwf	prodl,w,c
  1999  0034FA  6E16               	movwf	?_readEEPROM,c
  2000  0034FC  0E00               	movlw	0
  2001  0034FE  20F4               	addwfc	prodh,w,c
  2002  003500  6E17               	movwf	?_readEEPROM+1,c
  2003  003502  ECA4  F02D         	call	_readEEPROM	;wreg free
  2004  003506  0101               	movlb	1	; () banked
  2005  003508  6F73               	movwf	(doWork@B+1)& (0+255),b
  2006  00350A  0100               	movlb	0	; () banked
  2007  00350C  5191               	movf	??_doWork& (0+255),w,b
  2008  00350E  0101               	movlb	1	; () banked
  2009  003510  6F72               	movwf	doWork@B& (0+255),b
  2010                           
  2011                           ; BSR set to: 1
  2012                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2013  003512  0E33               	movlw	51
  2014  003514  0100               	movlb	0	; () banked
  2015  003516  6F74               	movwf	(?___fldiv+4)& (0+255),b
  2016  003518  0E13               	movlw	19
  2017  00351A  6F75               	movwf	(?___fldiv+5)& (0+255),b
  2018  00351C  0E95               	movlw	149
  2019  00351E  6F76               	movwf	(?___fldiv+6)& (0+255),b
  2020  003520  0EC3               	movlw	195
  2021  003522  6F77               	movwf	(?___fldiv+7)& (0+255),b
  2022  003524  C172  F01A         	movff	doWork@B,?___lwtofl
  2023  003528  C173  F01B         	movff	doWork@B+1,?___lwtofl+1
  2024  00352C  EC2A  F02C         	call	___lwtofl	;wreg free
  2025  003530  C01D  F073         	movff	?___lwtofl+3,?___fldiv+3
  2026  003534  C01C  F072         	movff	?___lwtofl+2,?___fldiv+2
  2027  003538  C01B  F071         	movff	?___lwtofl+1,?___fldiv+1
  2028  00353C  C01A  F070         	movff	?___lwtofl,?___fldiv
  2029  003540  EC5B  F026         	call	___fldiv	;wreg free
  2030  003544  C073  F159         	movff	?___fldiv+3,_doWork$2280+3
  2031  003548  C072  F158         	movff	?___fldiv+2,_doWork$2280+2
  2032  00354C  C071  F157         	movff	?___fldiv+1,_doWork$2280+1
  2033  003550  C070  F156         	movff	?___fldiv,_doWork$2280
  2034                           
  2035                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2036  003554  C156  F086         	movff	_doWork$2280,?_exp
  2037  003558  C157  F087         	movff	_doWork$2280+1,?_exp+1
  2038  00355C  C158  F088         	movff	_doWork$2280+2,?_exp+2
  2039  003560  C159  F089         	movff	_doWork$2280+3,?_exp+3
  2040  003564  EC12  F01D         	call	_exp	;wreg free
  2041  003568  C089  F15D         	movff	?_exp+3,_doWork$2281+3
  2042  00356C  C088  F15C         	movff	?_exp+2,_doWork$2281+2
  2043  003570  C087  F15B         	movff	?_exp+1,_doWork$2281+1
  2044  003574  C086  F15A         	movff	?_exp,_doWork$2281
  2045                           
  2046                           ;main.c: 471: Rinf = 10000.0 * exp(B / -298.15);
  2047  003578  C15A  F01E         	movff	_doWork$2281,?___flmul
  2048  00357C  C15B  F01F         	movff	_doWork$2281+1,?___flmul+1
  2049  003580  C15C  F020         	movff	_doWork$2281+2,?___flmul+2
  2050  003584  C15D  F021         	movff	_doWork$2281+3,?___flmul+3
  2051  003588  6A22               	clrf	?___flmul+4,c
  2052  00358A  0E40               	movlw	64
  2053  00358C  6E23               	movwf	?___flmul+5,c
  2054  00358E  0E1C               	movlw	28
  2055  003590  6E24               	movwf	?___flmul+6,c
  2056  003592  0E46               	movlw	70
  2057  003594  6E25               	movwf	?___flmul+7,c
  2058  003596  ECC4  F023         	call	___flmul	;wreg free
  2059  00359A  C021  F151         	movff	?___flmul+3,doWork@Rinf+3
  2060  00359E  C020  F150         	movff	?___flmul+2,doWork@Rinf+2
  2061  0035A2  C01F  F14F         	movff	?___flmul+1,doWork@Rinf+1
  2062  0035A6  C01E  F14E         	movff	?___flmul,doWork@Rinf
  2063                           
  2064                           ;main.c: 473: v = 5.0 * (double) avarage / 1025;
  2065  0035AA  6A22               	clrf	?___flmul+4,c
  2066  0035AC  6A23               	clrf	?___flmul+5,c
  2067  0035AE  0EA0               	movlw	160
  2068  0035B0  6E24               	movwf	?___flmul+6,c
  2069  0035B2  0E40               	movlw	64
  2070  0035B4  6E25               	movwf	?___flmul+7,c
  2071  0035B6  C179  F01E         	movff	doWork@avarage,?___flmul
  2072  0035BA  C17A  F01F         	movff	doWork@avarage+1,?___flmul+1
  2073  0035BE  C17B  F020         	movff	doWork@avarage+2,?___flmul+2
  2074  0035C2  C17C  F021         	movff	doWork@avarage+3,?___flmul+3
  2075  0035C6  ECC4  F023         	call	___flmul	;wreg free
  2076  0035CA  C021  F073         	movff	?___flmul+3,?___fldiv+3
  2077  0035CE  C020  F072         	movff	?___flmul+2,?___fldiv+2
  2078  0035D2  C01F  F071         	movff	?___flmul+1,?___fldiv+1
  2079  0035D6  C01E  F070         	movff	?___flmul,?___fldiv
  2080  0035DA  0100               	movlb	0	; () banked
  2081  0035DC  6B74               	clrf	(?___fldiv+4)& (0+255),b
  2082  0035DE  0E20               	movlw	32
  2083  0035E0  6F75               	movwf	(?___fldiv+5)& (0+255),b
  2084  0035E2  0E80               	movlw	128
  2085  0035E4  6F76               	movwf	(?___fldiv+6)& (0+255),b
  2086  0035E6  0E44               	movlw	68
  2087  0035E8  6F77               	movwf	(?___fldiv+7)& (0+255),b
  2088  0035EA  EC5B  F026         	call	___fldiv	;wreg free
  2089  0035EE  C073  F171         	movff	?___fldiv+3,doWork@v+3
  2090  0035F2  C072  F170         	movff	?___fldiv+2,doWork@v+2
  2091  0035F6  C071  F16F         	movff	?___fldiv+1,doWork@v+1
  2092  0035FA  C070  F16E         	movff	?___fldiv,doWork@v
  2093                           
  2094                           ;main.c: 475: resistance = (calVoltage - 10000.0 * v) / v;
  2095  0035FE  6A22               	clrf	?___flmul+4,c
  2096  003600  0E40               	movlw	64
  2097  003602  6E23               	movwf	?___flmul+5,c
  2098  003604  0E1C               	movlw	28
  2099  003606  6E24               	movwf	?___flmul+6,c
  2100  003608  0E46               	movlw	70
  2101  00360A  6E25               	movwf	?___flmul+7,c
  2102  00360C  C16E  F01E         	movff	doWork@v,?___flmul
  2103  003610  C16F  F01F         	movff	doWork@v+1,?___flmul+1
  2104  003614  C170  F020         	movff	doWork@v+2,?___flmul+2
  2105  003618  C171  F021         	movff	doWork@v+3,?___flmul+3
  2106  00361C  ECC4  F023         	call	___flmul	;wreg free
  2107  003620  C021  F06F         	movff	?___flmul+3,?___flsub+7
  2108  003624  C020  F06E         	movff	?___flmul+2,?___flsub+6
  2109  003628  C01F  F06D         	movff	?___flmul+1,?___flsub+5
  2110  00362C  C01E  F06C         	movff	?___flmul,?___flsub+4
  2111  003630  C152  F068         	movff	doWork@calVoltage,?___flsub
  2112  003634  C153  F069         	movff	doWork@calVoltage+1,?___flsub+1
  2113  003638  C154  F06A         	movff	doWork@calVoltage+2,?___flsub+2
  2114  00363C  C155  F06B         	movff	doWork@calVoltage+3,?___flsub+3
  2115  003640  EC6B  F02B         	call	___flsub	;wreg free
  2116  003644  C06B  F073         	movff	?___flsub+3,?___fldiv+3
  2117  003648  C06A  F072         	movff	?___flsub+2,?___fldiv+2
  2118  00364C  C069  F071         	movff	?___flsub+1,?___fldiv+1
  2119  003650  C068  F070         	movff	?___flsub,?___fldiv
  2120  003654  C16E  F074         	movff	doWork@v,?___fldiv+4
  2121  003658  C16F  F075         	movff	doWork@v+1,?___fldiv+5
  2122  00365C  C170  F076         	movff	doWork@v+2,?___fldiv+6
  2123  003660  C171  F077         	movff	doWork@v+3,?___fldiv+7
  2124  003664  EC5B  F026         	call	___fldiv	;wreg free
  2125  003668  C073  F177         	movff	?___fldiv+3,doWork@resistance+3
  2126  00366C  C072  F176         	movff	?___fldiv+2,doWork@resistance+2
  2127  003670  C071  F175         	movff	?___fldiv+1,doWork@resistance+1
  2128  003674  C070  F174         	movff	?___fldiv,doWork@resistance
  2129                           
  2130                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2131  003678  C14E  F074         	movff	doWork@Rinf,?___fldiv+4
  2132  00367C  C14F  F075         	movff	doWork@Rinf+1,?___fldiv+5
  2133  003680  C150  F076         	movff	doWork@Rinf+2,?___fldiv+6
  2134  003684  C151  F077         	movff	doWork@Rinf+3,?___fldiv+7
  2135  003688  C174  F070         	movff	doWork@resistance,?___fldiv
  2136  00368C  C175  F071         	movff	doWork@resistance+1,?___fldiv+1
  2137  003690  C176  F072         	movff	doWork@resistance+2,?___fldiv+2
  2138  003694  C177  F073         	movff	doWork@resistance+3,?___fldiv+3
  2139  003698  EC5B  F026         	call	___fldiv	;wreg free
  2140  00369C  C073  F089         	movff	?___fldiv+3,?_log+3
  2141  0036A0  C072  F088         	movff	?___fldiv+2,?_log+2
  2142  0036A4  C071  F087         	movff	?___fldiv+1,?_log+1
  2143  0036A8  C070  F086         	movff	?___fldiv,?_log
  2144  0036AC  ECA1  F021         	call	_log	;wreg free
  2145  0036B0  C089  F161         	movff	?_log+3,_doWork$2282+3
  2146  0036B4  C088  F160         	movff	?_log+2,_doWork$2282+2
  2147  0036B8  C087  F15F         	movff	?_log+1,_doWork$2282+1
  2148  0036BC  C086  F15E         	movff	?_log,_doWork$2282
  2149                           
  2150                           ;main.c: 477: temp = ((double) B) / log(resistance / Rinf);
  2151  0036C0  C172  F01A         	movff	doWork@B,?___lwtofl
  2152  0036C4  C173  F01B         	movff	doWork@B+1,?___lwtofl+1
  2153  0036C8  EC2A  F02C         	call	___lwtofl	;wreg free
  2154  0036CC  C01D  F073         	movff	?___lwtofl+3,?___fldiv+3
  2155  0036D0  C01C  F072         	movff	?___lwtofl+2,?___fldiv+2
  2156  0036D4  C01B  F071         	movff	?___lwtofl+1,?___fldiv+1
  2157  0036D8  C01A  F070         	movff	?___lwtofl,?___fldiv
  2158  0036DC  C15E  F074         	movff	_doWork$2282,?___fldiv+4
  2159  0036E0  C15F  F075         	movff	_doWork$2282+1,?___fldiv+5
  2160  0036E4  C160  F076         	movff	_doWork$2282+2,?___fldiv+6
  2161  0036E8  C161  F077         	movff	_doWork$2282+3,?___fldiv+7
  2162  0036EC  EC5B  F026         	call	___fldiv	;wreg free
  2163  0036F0  C073  F180         	movff	?___fldiv+3,doWork@temp+3
  2164  0036F4  C072  F17F         	movff	?___fldiv+2,doWork@temp+2
  2165  0036F8  C071  F17E         	movff	?___fldiv+1,doWork@temp+1
  2166  0036FC  C070  F17D         	movff	?___fldiv,doWork@temp
  2167                           
  2168                           ;main.c: 479: temp -= 273.15;
  2169  003700  0101               	movlb	1	; () banked
  2170  003702  0E01               	movlw	high doWork@temp
  2171  003704  6E3C               	movwf	?___asflsub+1,c
  2172  003706  0E7D               	movlw	low doWork@temp
  2173  003708  6E3B               	movwf	?___asflsub,c
  2174  00370A  0E33               	movlw	51
  2175  00370C  6E3D               	movwf	?___asflsub+2,c
  2176  00370E  0E93               	movlw	147
  2177  003710  6E3E               	movwf	?___asflsub+3,c
  2178  003712  0E88               	movlw	136
  2179  003714  6E3F               	movwf	?___asflsub+4,c
  2180  003716  0E43               	movlw	67
  2181  003718  6E40               	movwf	?___asflsub+5,c
  2182  00371A  ECE3  F029         	call	___asflsub	;wreg free
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 494: current_temp[ i ] = (current_temp[ i ] + ((long) (temp * 100) + getCalibra
      +                          tionValue(i))) / 2;
  2186  00371E  0101               	movlb	1	; () banked
  2187  003720  5181               	movf	doWork@i& (0+255),w,b
  2188  003722  0D02               	mullw	2
  2189  003724  50F3               	movf	prodl,w,c
  2190  003726  0100               	movlb	0	; () banked
  2191  003728  0FA3               	addlw	low _current_temp
  2192  00372A  6ED9               	movwf	fsr2l,c
  2193  00372C  6ADA               	clrf	fsr2h,c
  2194  00372E  CFDE F091          	movff	postinc2,??_doWork
  2195  003732  CFDD F092          	movff	postdec2,??_doWork+1
  2196  003736  C091  F093         	movff	??_doWork,??_doWork+2
  2197  00373A  C092  F094         	movff	??_doWork+1,??_doWork+3
  2198  00373E  0E00               	movlw	0
  2199  003740  BF94               	btfsc	(??_doWork+3)& (0+255),7,b
  2200  003742  0EFF               	movlw	255
  2201  003744  6F95               	movwf	(??_doWork+4)& (0+255),b
  2202  003746  6F96               	movwf	(??_doWork+5)& (0+255),b
  2203  003748  0101               	movlb	1	; () banked
  2204  00374A  5181               	movf	doWork@i& (0+255),w,b
  2205  00374C  EC60  F029         	call	_getCalibrationValue
  2206  003750  C01A  F097         	movff	?_getCalibrationValue,??_doWork+6
  2207  003754  C01B  F098         	movff	?_getCalibrationValue+1,??_doWork+7
  2208  003758  0E00               	movlw	0
  2209  00375A  0100               	movlb	0	; () banked
  2210  00375C  BF98               	btfsc	(??_doWork+7)& (0+255),7,b
  2211  00375E  0EFF               	movlw	255
  2212  003760  6F99               	movwf	(??_doWork+8)& (0+255),b
  2213  003762  6F9A               	movwf	(??_doWork+9)& (0+255),b
  2214  003764  6A22               	clrf	?___flmul+4,c
  2215  003766  6A23               	clrf	?___flmul+5,c
  2216  003768  0EC8               	movlw	200
  2217  00376A  6E24               	movwf	?___flmul+6,c
  2218  00376C  0E42               	movlw	66
  2219  00376E  6E25               	movwf	?___flmul+7,c
  2220  003770  C17D  F01E         	movff	doWork@temp,?___flmul
  2221  003774  C17E  F01F         	movff	doWork@temp+1,?___flmul+1
  2222  003778  C17F  F020         	movff	doWork@temp+2,?___flmul+2
  2223  00377C  C180  F021         	movff	doWork@temp+3,?___flmul+3
  2224  003780  ECC4  F023         	call	___flmul	;wreg free
  2225  003784  C021  F037         	movff	?___flmul+3,?___fltol+3
  2226  003788  C020  F036         	movff	?___flmul+2,?___fltol+2
  2227  00378C  C01F  F035         	movff	?___flmul+1,?___fltol+1
  2228  003790  C01E  F034         	movff	?___flmul,?___fltol
  2229  003794  EC55  F027         	call	___fltol	;wreg free
  2230  003798  0100               	movlb	0	; () banked
  2231  00379A  5197               	movf	(??_doWork+6)& (0+255),w,b
  2232  00379C  2434               	addwf	?___fltol,w,c
  2233  00379E  6F9B               	movwf	(??_doWork+10)& (0+255),b
  2234  0037A0  5198               	movf	(??_doWork+7)& (0+255),w,b
  2235  0037A2  2035               	addwfc	?___fltol+1,w,c
  2236  0037A4  6F9C               	movwf	(??_doWork+11)& (0+255),b
  2237  0037A6  5199               	movf	(??_doWork+8)& (0+255),w,b
  2238  0037A8  2036               	addwfc	?___fltol+2,w,c
  2239  0037AA  6F9D               	movwf	(??_doWork+12)& (0+255),b
  2240  0037AC  519A               	movf	(??_doWork+9)& (0+255),w,b
  2241  0037AE  2037               	addwfc	?___fltol+3,w,c
  2242  0037B0  6F9E               	movwf	(??_doWork+13)& (0+255),b
  2243  0037B2  5193               	movf	(??_doWork+2)& (0+255),w,b
  2244  0037B4  259B               	addwf	(??_doWork+10)& (0+255),w,b
  2245  0037B6  6E3E               	movwf	?___aldiv,c
  2246  0037B8  5194               	movf	(??_doWork+3)& (0+255),w,b
  2247  0037BA  219C               	addwfc	(??_doWork+11)& (0+255),w,b
  2248  0037BC  6E3F               	movwf	?___aldiv+1,c
  2249  0037BE  5195               	movf	(??_doWork+4)& (0+255),w,b
  2250  0037C0  219D               	addwfc	(??_doWork+12)& (0+255),w,b
  2251  0037C2  6E40               	movwf	?___aldiv+2,c
  2252  0037C4  5196               	movf	(??_doWork+5)& (0+255),w,b
  2253  0037C6  219E               	addwfc	(??_doWork+13)& (0+255),w,b
  2254  0037C8  6E41               	movwf	?___aldiv+3,c
  2255  0037CA  0E02               	movlw	2
  2256  0037CC  6E42               	movwf	?___aldiv+4,c
  2257  0037CE  0E00               	movlw	0
  2258  0037D0  6A43               	clrf	?___aldiv+5,c
  2259  0037D2  6A44               	clrf	?___aldiv+6,c
  2260  0037D4  6A45               	clrf	?___aldiv+7,c
  2261  0037D6  EC4B  F025         	call	___aldiv	;wreg free
  2262  0037DA  0101               	movlb	1	; () banked
  2263  0037DC  5181               	movf	doWork@i& (0+255),w,b
  2264  0037DE  0D02               	mullw	2
  2265  0037E0  50F3               	movf	prodl,w,c
  2266  0037E2  0100               	movlb	0	; () banked
  2267  0037E4  0FA3               	addlw	low _current_temp
  2268  0037E6  6ED9               	movwf	fsr2l,c
  2269  0037E8  6ADA               	clrf	fsr2h,c
  2270  0037EA  C03E  FFDE         	movff	?___aldiv,postinc2
  2271  0037EE  C03F  FFDD         	movff	?___aldiv+1,postdec2
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;main.c: 515: }
  2275                           ;main.c: 518: adc_conversion_flags &= ~(1 << i);
  2276                           
  2277                           ;main.c: 496: }
  2278  0037F2  C181  F091         	movff	doWork@i,??_doWork
  2279  0037F6  0E01               	movlw	1
  2280  0037F8  6F92               	movwf	(??_doWork+1)& (0+255),b
  2281  0037FA  2B91               	incf	??_doWork& (0+255),f,b
  2282  0037FC  D002               	goto	u13144
  2283  0037FE                     u13145:
  2284  0037FE  90D8               	bcf	status,0,c
  2285  003800  3792               	rlcf	(??_doWork+1)& (0+255),f,b
  2286  003802                     u13144:
  2287  003802  2F91               	decfsz	??_doWork& (0+255),f,b
  2288  003804  D7FC               	goto	u13145
  2289  003806  1D92               	comf	(??_doWork+1)& (0+255),w,b
  2290  003808  17BD               	andwf	_adc_conversion_flags& (0+255),f,b
  2291  00380A                     l13957:
  2292                           
  2293                           ; BSR set to: 0
  2294  00380A  0101               	movlb	1	; () banked
  2295  00380C  2B81               	incf	doWork@i& (0+255),f,b
  2296                           
  2297                           ; BSR set to: 1
  2298  00380E  0E05               	movlw	5
  2299  003810  6581               	cpfsgt	doWork@i& (0+255),b
  2300  003812  D5F7               	goto	l13903
  2301                           
  2302                           ; BSR set to: 1
  2303  003814  0C05               	retlw	5
  2304  003816                     __end_of_doWork:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           postdec1	equ	0xFE5
  2312                           fsr1h	equ	0xFE2
  2313                           fsr1l	equ	0xFE1
  2314                           indf2	equ	0xFDF
  2315                           postinc2	equ	0xFDE
  2316                           postdec2	equ	0xFDD
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           
  2321 ;; *************** function ___lwtofl *****************
  2322 ;; Defined at:
  2323 ;;		line 29 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwtofl.c"
  2324 ;; Parameters:    Size  Location     Type
  2325 ;;  c               2   25[COMRAM] unsigned int 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  4   25[COMRAM] unsigned int 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0, cstack
  2332 ;; Tracked objects:
  2333 ;;		On entry : 0/0
  2334 ;;		On exit  : 0/0
  2335 ;;		Unchanged: 0/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2337 ;;      Params:         4       0       0       0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0
  2340 ;;      Totals:         4       0       0       0       0       0       0
  2341 ;;Total ram usage:        4 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    3
  2344 ;; This function calls:
  2345 ;;		___flpack
  2346 ;; This function is called by:
  2347 ;;		_doWork
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text2
  2352  005854                     __ptext2:
  2353                           	opt stack 0
  2354  005854                     ___lwtofl:
  2355                           	opt stack 26
  2356                           
  2357                           ; BSR set to: 1
  2358                           ;incstack = 0
  2359                           ;incstack = 0
  2360  005854  C01A  F00E         	movff	___lwtofl@c,?___flpack
  2361  005858  C01B  F00F         	movff	___lwtofl@c+1,?___flpack+1
  2362  00585C  6A10               	clrf	?___flpack+2,c
  2363  00585E  6A11               	clrf	?___flpack+3,c
  2364  005860  0E96               	movlw	150
  2365  005862  6E12               	movwf	?___flpack+4,c
  2366  005864  0E00               	movlw	0
  2367  005866  6A13               	clrf	?___flpack+5,c
  2368  005868  EC8C  F024         	call	___flpack	;wreg free
  2369  00586C  C011  F01D         	movff	?___flpack+3,?___lwtofl+3
  2370  005870  C010  F01C         	movff	?___flpack+2,?___lwtofl+2
  2371  005874  C00F  F01B         	movff	?___flpack+1,?___lwtofl+1
  2372  005878  C00E  F01A         	movff	?___flpack,?___lwtofl
  2373  00587C  0012               	return	
  2374  00587E                     __end_of___lwtofl:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           prodh	equ	0xFF4
  2378                           prodl	equ	0xFF3
  2379                           postinc0	equ	0xFEE
  2380                           wreg	equ	0xFE8
  2381                           postdec1	equ	0xFE5
  2382                           fsr1h	equ	0xFE2
  2383                           fsr1l	equ	0xFE1
  2384                           indf2	equ	0xFDF
  2385                           postinc2	equ	0xFDE
  2386                           postdec2	equ	0xFDD
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function ___asfldiv *****************
  2392 ;; Defined at:
  2393 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfldiv.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  f1p             2   38[BANK0 ] PTR 
  2396 ;;		 -> doWork@avarage(4), 
  2397 ;;  f2              4   40[BANK0 ] PTR 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  4   38[BANK0 ] PTR 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : F/0
  2406 ;;		On exit  : F/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2409 ;;      Params:         0       6       0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0
  2411 ;;      Temps:          0       0       0       0       0       0       0
  2412 ;;      Totals:         0       6       0       0       0       0       0
  2413 ;;Total ram usage:        6 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    4
  2416 ;; This function calls:
  2417 ;;		___fldiv
  2418 ;; This function is called by:
  2419 ;;		_doWork
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text3
  2424  005414                     __ptext3:
  2425                           	opt stack 0
  2426  005414                     ___asfldiv:
  2427                           	opt stack 25
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;	Return value of ___asfldiv is never used
  2431                           
  2432                           ;incstack = 0
  2433                           ;incstack = 0
  2434  005414  C086  FFD9         	movff	___asfldiv@f1p,fsr2l
  2435  005418  C087  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2436  00541C  CFDE F070          	movff	postinc2,?___fldiv
  2437  005420  CFDE F071          	movff	postinc2,?___fldiv+1
  2438  005424  CFDE F072          	movff	postinc2,?___fldiv+2
  2439  005428  CFDE F073          	movff	postinc2,?___fldiv+3
  2440  00542C  C088  F074         	movff	___asfldiv@f2,?___fldiv+4
  2441  005430  C089  F075         	movff	___asfldiv@f2+1,?___fldiv+5
  2442  005434  C08A  F076         	movff	___asfldiv@f2+2,?___fldiv+6
  2443  005438  C08B  F077         	movff	___asfldiv@f2+3,?___fldiv+7
  2444  00543C  EC5B  F026         	call	___fldiv	;wreg free
  2445  005440  C086  FFD9         	movff	___asfldiv@f1p,fsr2l
  2446  005444  C087  FFDA         	movff	___asfldiv@f1p+1,fsr2h
  2447  005448  0100               	movlb	0	; () banked
  2448  00544A  C070  FFDE         	movff	?___fldiv,postinc2
  2449  00544E  C071  FFDE         	movff	?___fldiv+1,postinc2
  2450  005452  C072  FFDE         	movff	?___fldiv+2,postinc2
  2451  005456  C073  FFDD         	movff	?___fldiv+3,postdec2
  2452  00545A  06D9               	decf	fsr2l,f,c
  2453  00545C  06D9               	decf	fsr2l,f,c
  2454                           
  2455                           ; BSR set to: 0
  2456  00545E  0012               	return	
  2457  005460                     __end_of___asfldiv:
  2458                           	opt stack 0
  2459                           tblptru	equ	0xFF8
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postdec1	equ	0xFE5
  2465                           fsr1h	equ	0xFE2
  2466                           fsr1l	equ	0xFE1
  2467                           indf2	equ	0xFDF
  2468                           postinc2	equ	0xFDE
  2469                           postdec2	equ	0xFDD
  2470                           fsr2h	equ	0xFDA
  2471                           fsr2l	equ	0xFD9
  2472                           status	equ	0xFD8
  2473                           
  2474 ;; *************** function ___asfladd *****************
  2475 ;; Defined at:
  2476 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asfladd.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  f1p             2   58[COMRAM] PTR 
  2479 ;;		 -> doWork@temp(4), doWork@avarage(4), 
  2480 ;;  f2              4   60[COMRAM] PTR 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;		None
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  4   58[COMRAM] PTR 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : F/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2492 ;;      Params:         6       0       0       0       0       0       0
  2493 ;;      Locals:         0       0       0       0       0       0       0
  2494 ;;      Temps:          0       0       0       0       0       0       0
  2495 ;;      Totals:         6       0       0       0       0       0       0
  2496 ;;Total ram usage:        6 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    4
  2499 ;; This function calls:
  2500 ;;		___fladd
  2501 ;; This function is called by:
  2502 ;;		_doWork
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text4
  2507  005378                     __ptext4:
  2508                           	opt stack 0
  2509  005378                     ___asfladd:
  2510                           	opt stack 25
  2511                           
  2512                           ;	Return value of ___asfladd is never used
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;incstack = 0
  2516                           ;incstack = 0
  2517  005378  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  2518  00537C  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2519  005380  0100               	movlb	0	; () banked
  2520  005382  CFDE F060          	movff	postinc2,?___fladd
  2521  005386  CFDE F061          	movff	postinc2,?___fladd+1
  2522  00538A  CFDE F062          	movff	postinc2,?___fladd+2
  2523  00538E  CFDE F063          	movff	postinc2,?___fladd+3
  2524  005392  C03D  F064         	movff	___asfladd@f2,?___fladd+4
  2525  005396  C03E  F065         	movff	___asfladd@f2+1,?___fladd+5
  2526  00539A  C03F  F066         	movff	___asfladd@f2+2,?___fladd+6
  2527  00539E  C040  F067         	movff	___asfladd@f2+3,?___fladd+7
  2528  0053A2  ECDC  F01E         	call	___fladd	;wreg free
  2529  0053A6  C03B  FFD9         	movff	___asfladd@f1p,fsr2l
  2530  0053AA  C03C  FFDA         	movff	___asfladd@f1p+1,fsr2h
  2531  0053AE  0100               	movlb	0	; () banked
  2532  0053B0  C060  FFDE         	movff	?___fladd,postinc2
  2533  0053B4  C061  FFDE         	movff	?___fladd+1,postinc2
  2534  0053B8  C062  FFDE         	movff	?___fladd+2,postinc2
  2535  0053BC  C063  FFDD         	movff	?___fladd+3,postdec2
  2536  0053C0  06D9               	decf	fsr2l,f,c
  2537  0053C2  06D9               	decf	fsr2l,f,c
  2538                           
  2539                           ; BSR set to: 0
  2540  0053C4  0012               	return	
  2541  0053C6                     __end_of___asfladd:
  2542                           	opt stack 0
  2543                           tblptru	equ	0xFF8
  2544                           prodh	equ	0xFF4
  2545                           prodl	equ	0xFF3
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           postdec1	equ	0xFE5
  2549                           fsr1h	equ	0xFE2
  2550                           fsr1l	equ	0xFE1
  2551                           indf2	equ	0xFDF
  2552                           postinc2	equ	0xFDE
  2553                           postdec2	equ	0xFDD
  2554                           fsr2h	equ	0xFDA
  2555                           fsr2l	equ	0xFD9
  2556                           status	equ	0xFD8
  2557                           
  2558 ;; *************** function ___aldiv *****************
  2559 ;; Defined at:
  2560 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\aldiv.c"
  2561 ;; Parameters:    Size  Location     Type
  2562 ;;  dividend        4   61[COMRAM] long 
  2563 ;;  divisor         4   65[COMRAM] long 
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  quotient        4    2[BANK0 ] long 
  2566 ;;  sign            1    1[BANK0 ] unsigned char 
  2567 ;;  counter         1    0[BANK0 ] unsigned char 
  2568 ;; Return value:  Size  Location     Type
  2569 ;;                  4   61[COMRAM] long 
  2570 ;; Registers used:
  2571 ;;		wreg, status,2, status,0
  2572 ;; Tracked objects:
  2573 ;;		On entry : F/0
  2574 ;;		On exit  : F/0
  2575 ;;		Unchanged: 0/0
  2576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2577 ;;      Params:         8       0       0       0       0       0       0
  2578 ;;      Locals:         0       6       0       0       0       0       0
  2579 ;;      Temps:          0       0       0       0       0       0       0
  2580 ;;      Totals:         8       6       0       0       0       0       0
  2581 ;;Total ram usage:       14 bytes
  2582 ;; Hardware stack levels used:    1
  2583 ;; Hardware stack levels required when called:    2
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_doWork
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text5
  2592  004A96                     __ptext5:
  2593                           	opt stack 0
  2594  004A96                     ___aldiv:
  2595                           	opt stack 27
  2596                           
  2597                           ; BSR set to: 0
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;incstack = 0
  2601                           ;incstack = 0
  2602  004A96  6B61               	clrf	___aldiv@sign& (0+255),b
  2603  004A98  AE45               	btfss	___aldiv@divisor+3,7,c
  2604  004A9A  D00A               	goto	l11399
  2605                           
  2606                           ; BSR set to: 0
  2607  004A9C  1E45               	comf	___aldiv@divisor+3,f,c
  2608  004A9E  1E44               	comf	___aldiv@divisor+2,f,c
  2609  004AA0  1E43               	comf	___aldiv@divisor+1,f,c
  2610  004AA2  6C42               	negf	___aldiv@divisor,c
  2611  004AA4  0E00               	movlw	0
  2612  004AA6  2243               	addwfc	___aldiv@divisor+1,f,c
  2613  004AA8  2244               	addwfc	___aldiv@divisor+2,f,c
  2614  004AAA  2245               	addwfc	___aldiv@divisor+3,f,c
  2615                           
  2616                           ; BSR set to: 0
  2617  004AAC  0E01               	movlw	1
  2618  004AAE  6F61               	movwf	___aldiv@sign& (0+255),b
  2619  004AB0                     l11399:
  2620                           
  2621                           ; BSR set to: 0
  2622  004AB0  AE41               	btfss	___aldiv@dividend+3,7,c
  2623  004AB2  D00A               	goto	l11405
  2624                           
  2625                           ; BSR set to: 0
  2626  004AB4  1E41               	comf	___aldiv@dividend+3,f,c
  2627  004AB6  1E40               	comf	___aldiv@dividend+2,f,c
  2628  004AB8  1E3F               	comf	___aldiv@dividend+1,f,c
  2629  004ABA  6C3E               	negf	___aldiv@dividend,c
  2630  004ABC  0E00               	movlw	0
  2631  004ABE  223F               	addwfc	___aldiv@dividend+1,f,c
  2632  004AC0  2240               	addwfc	___aldiv@dividend+2,f,c
  2633  004AC2  2241               	addwfc	___aldiv@dividend+3,f,c
  2634                           
  2635                           ; BSR set to: 0
  2636  004AC4  0E01               	movlw	1
  2637  004AC6  1B61               	xorwf	___aldiv@sign& (0+255),f,b
  2638  004AC8                     l11405:
  2639                           
  2640                           ; BSR set to: 0
  2641  004AC8  6B62               	clrf	___aldiv@quotient& (0+255),b
  2642  004ACA  6B63               	clrf	(___aldiv@quotient+1)& (0+255),b
  2643  004ACC  6B64               	clrf	(___aldiv@quotient+2)& (0+255),b
  2644  004ACE  6B65               	clrf	(___aldiv@quotient+3)& (0+255),b
  2645                           
  2646                           ; BSR set to: 0
  2647  004AD0  5045               	movf	___aldiv@divisor+3,w,c
  2648  004AD2  1042               	iorwf	___aldiv@divisor,w,c
  2649  004AD4  1043               	iorwf	___aldiv@divisor+1,w,c
  2650  004AD6  1044               	iorwf	___aldiv@divisor+2,w,c
  2651  004AD8  E029               	bz	l11427
  2652                           
  2653                           ; BSR set to: 0
  2654  004ADA  0E01               	movlw	1
  2655  004ADC  6F60               	movwf	___aldiv@counter& (0+255),b
  2656  004ADE  D006               	goto	l11413
  2657  004AE0                     l11411:
  2658                           
  2659                           ; BSR set to: 0
  2660  004AE0  90D8               	bcf	status,0,c
  2661  004AE2  3642               	rlcf	___aldiv@divisor,f,c
  2662  004AE4  3643               	rlcf	___aldiv@divisor+1,f,c
  2663  004AE6  3644               	rlcf	___aldiv@divisor+2,f,c
  2664  004AE8  3645               	rlcf	___aldiv@divisor+3,f,c
  2665  004AEA  2B60               	incf	___aldiv@counter& (0+255),f,b
  2666  004AEC                     l11413:
  2667                           
  2668                           ; BSR set to: 0
  2669  004AEC  AE45               	btfss	___aldiv@divisor+3,7,c
  2670  004AEE  D7F8               	goto	l11411
  2671  004AF0                     l11415:
  2672                           
  2673                           ; BSR set to: 0
  2674  004AF0  90D8               	bcf	status,0,c
  2675  004AF2  3762               	rlcf	___aldiv@quotient& (0+255),f,b
  2676  004AF4  3763               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2677  004AF6  3764               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2678  004AF8  3765               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2679                           
  2680                           ; BSR set to: 0
  2681  004AFA  5042               	movf	___aldiv@divisor,w,c
  2682  004AFC  5C3E               	subwf	___aldiv@dividend,w,c
  2683  004AFE  5043               	movf	___aldiv@divisor+1,w,c
  2684  004B00  583F               	subwfb	___aldiv@dividend+1,w,c
  2685  004B02  5044               	movf	___aldiv@divisor+2,w,c
  2686  004B04  5840               	subwfb	___aldiv@dividend+2,w,c
  2687  004B06  5045               	movf	___aldiv@divisor+3,w,c
  2688  004B08  5841               	subwfb	___aldiv@dividend+3,w,c
  2689  004B0A  E309               	bnc	l11423
  2690                           
  2691                           ; BSR set to: 0
  2692  004B0C  5042               	movf	___aldiv@divisor,w,c
  2693  004B0E  5E3E               	subwf	___aldiv@dividend,f,c
  2694  004B10  5043               	movf	___aldiv@divisor+1,w,c
  2695  004B12  5A3F               	subwfb	___aldiv@dividend+1,f,c
  2696  004B14  5044               	movf	___aldiv@divisor+2,w,c
  2697  004B16  5A40               	subwfb	___aldiv@dividend+2,f,c
  2698  004B18  5045               	movf	___aldiv@divisor+3,w,c
  2699  004B1A  5A41               	subwfb	___aldiv@dividend+3,f,c
  2700                           
  2701                           ; BSR set to: 0
  2702  004B1C  8162               	bsf	___aldiv@quotient& (0+255),0,b
  2703  004B1E                     l11423:
  2704                           
  2705                           ; BSR set to: 0
  2706  004B1E  90D8               	bcf	status,0,c
  2707  004B20  3245               	rrcf	___aldiv@divisor+3,f,c
  2708  004B22  3244               	rrcf	___aldiv@divisor+2,f,c
  2709  004B24  3243               	rrcf	___aldiv@divisor+1,f,c
  2710  004B26  3242               	rrcf	___aldiv@divisor,f,c
  2711                           
  2712                           ; BSR set to: 0
  2713  004B28  2F60               	decfsz	___aldiv@counter& (0+255),f,b
  2714  004B2A  D7E2               	goto	l11415
  2715  004B2C                     l11427:
  2716                           
  2717                           ; BSR set to: 0
  2718  004B2C  5161               	movf	___aldiv@sign& (0+255),w,b
  2719  004B2E  E008               	bz	l11431
  2720                           
  2721                           ; BSR set to: 0
  2722  004B30  1F65               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2723  004B32  1F64               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2724  004B34  1F63               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2725  004B36  6D62               	negf	___aldiv@quotient& (0+255),b
  2726  004B38  0E00               	movlw	0
  2727  004B3A  2363               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2728  004B3C  2364               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2729  004B3E  2365               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2730  004B40                     l11431:
  2731                           
  2732                           ; BSR set to: 0
  2733  004B40  C062  F03E         	movff	___aldiv@quotient,?___aldiv
  2734  004B44  C063  F03F         	movff	___aldiv@quotient+1,?___aldiv+1
  2735  004B48  C064  F040         	movff	___aldiv@quotient+2,?___aldiv+2
  2736  004B4C  C065  F041         	movff	___aldiv@quotient+3,?___aldiv+3
  2737                           
  2738                           ; BSR set to: 0
  2739  004B50  0012               	return	
  2740  004B52                     __end_of___aldiv:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           prodh	equ	0xFF4
  2744                           prodl	equ	0xFF3
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           postinc2	equ	0xFDE
  2752                           postdec2	equ	0xFDD
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _getCalibrationValue *****************
  2758 ;; Defined at:
  2759 ;;		line 878 in file "../main.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  i               1    wreg     unsigned char 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  i               1   34[COMRAM] unsigned char 
  2764 ;;  cal             2   32[COMRAM] short 
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  2   25[COMRAM] short 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : F/1
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2774 ;;      Params:         2       0       0       0       0       0       0
  2775 ;;      Locals:         3       0       0       0       0       0       0
  2776 ;;      Temps:          5       0       0       0       0       0       0
  2777 ;;      Totals:        10       0       0       0       0       0       0
  2778 ;;Total ram usage:       10 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    3
  2781 ;; This function calls:
  2782 ;;		_readEEPROM
  2783 ;; This function is called by:
  2784 ;;		_doWork
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text6
  2789  0052C0                     __ptext6:
  2790                           	opt stack 0
  2791  0052C0                     _getCalibrationValue:
  2792                           	opt stack 26
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;incstack = 0
  2796                           ;incstack = 0
  2797                           ;getCalibrationValue@i stored from wreg
  2798  0052C0  CFE8 F023          	movff	wreg,getCalibrationValue@i
  2799                           
  2800                           ; BSR set to: 1
  2801                           ;main.c: 879: int16_t cal;
  2802                           ;main.c: 881: cal = ((uint8_t)readEEPROM(2 * i + 0x9E))<<8 +
  2803                           ;main.c: 882: readEEPROM(2 * i + 0x9F);
  2804  0052C4  5023               	movf	getCalibrationValue@i,w,c
  2805  0052C6  0D02               	mullw	2
  2806  0052C8  0E9F               	movlw	159
  2807  0052CA  24F3               	addwf	prodl,w,c
  2808  0052CC  6E16               	movwf	?_readEEPROM,c
  2809  0052CE  0E00               	movlw	0
  2810  0052D0  20F4               	addwfc	prodh,w,c
  2811  0052D2  6E17               	movwf	?_readEEPROM+1,c
  2812  0052D4  ECA4  F02D         	call	_readEEPROM	;wreg free
  2813  0052D8  6E1C               	movwf	??_getCalibrationValue& (0+255),c
  2814  0052DA  0E08               	movlw	8
  2815  0052DC  261C               	addwf	??_getCalibrationValue,f,c
  2816  0052DE  90D8               	bcf	status,0,c
  2817  0052E0  3423               	rlcf	getCalibrationValue@i,w,c
  2818  0052E2  6E1D               	movwf	(??_getCalibrationValue+1)& (0+255),c
  2819  0052E4  6A1E               	clrf	(??_getCalibrationValue+2)& (0+255),c
  2820  0052E6  361E               	rlcf	(??_getCalibrationValue+2)& (0+255),f,c
  2821  0052E8  0E9E               	movlw	158
  2822  0052EA  241D               	addwf	??_getCalibrationValue+1,w,c
  2823  0052EC  6E16               	movwf	?_readEEPROM,c
  2824  0052EE  0E00               	movlw	0
  2825  0052F0  201E               	addwfc	??_getCalibrationValue+2,w,c
  2826  0052F2  6E17               	movwf	?_readEEPROM+1,c
  2827  0052F4  ECA4  F02D         	call	_readEEPROM	;wreg free
  2828  0052F8  6E1F               	movwf	(??_getCalibrationValue+3)& (0+255),c
  2829  0052FA  6A20               	clrf	(??_getCalibrationValue+4)& (0+255),c
  2830  0052FC  2A1C               	incf	??_getCalibrationValue,f,c
  2831  0052FE  D003               	goto	u8764
  2832  005300                     u8765:
  2833  005300  90D8               	bcf	status,0,c
  2834  005302  361F               	rlcf	??_getCalibrationValue+3,f,c
  2835  005304  3620               	rlcf	??_getCalibrationValue+4,f,c
  2836  005306                     u8764:
  2837  005306  2E1C               	decfsz	??_getCalibrationValue,f,c
  2838  005308  D7FB               	goto	u8765
  2839  00530A  C01F  F021         	movff	??_getCalibrationValue+3,getCalibrationValue@cal
  2840  00530E  C020  F022         	movff	??_getCalibrationValue+4,getCalibrationValue@cal+1
  2841                           
  2842                           ;main.c: 884: return cal;
  2843  005312  C021  F01A         	movff	getCalibrationValue@cal,?_getCalibrationValue
  2844  005316  C022  F01B         	movff	getCalibrationValue@cal+1,?_getCalibrationValue+1
  2845  00531A  0012               	return	
  2846  00531C                     __end_of_getCalibrationValue:
  2847                           	opt stack 0
  2848                           tblptru	equ	0xFF8
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           postdec1	equ	0xFE5
  2854                           fsr1h	equ	0xFE2
  2855                           fsr1l	equ	0xFE1
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _log *****************
  2864 ;; Defined at:
  2865 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\log.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  x               4   38[BANK0 ] short 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  exponent        2   66[COMRAM] int 
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  4   38[BANK0 ] int 
  2872 ;; Registers used:
  2873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/1
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         0       4       0       0       0       0       0
  2880 ;;      Locals:         2       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0
  2882 ;;      Totals:         2       4       0       0       0       0       0
  2883 ;;Total ram usage:        6 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    5
  2886 ;; This function calls:
  2887 ;;		___fladd
  2888 ;;		___flmul
  2889 ;;		___awtofl
  2890 ;;		_eval_poly
  2891 ;;		_frexp
  2892 ;; This function is called by:
  2893 ;;		_doWork
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text7
  2898  004342                     __ptext7:
  2899                           	opt stack 0
  2900  004342                     _log:
  2901                           	opt stack 24
  2902                           
  2903                           ;incstack = 0
  2904                           ;incstack = 0
  2905  004342  0100               	movlb	0	; () banked
  2906  004344  BF89               	btfsc	(log@x+3)& (0+255),7,b
  2907  004346  D007               	goto	u13240
  2908                           
  2909                           ; BSR set to: 0
  2910                           
  2911                           ; BSR set to: 0
  2912  004348  EE20  F086         	lfsr	2,log@x
  2913  00434C  50DE               	movf	postinc2,w,c
  2914  00434E  10DE               	iorwf	postinc2,w,c
  2915  004350  10DE               	iorwf	postinc2,w,c
  2916  004352  10DE               	iorwf	postinc2,w,c
  2917  004354  E105               	bnz	l14005
  2918  004356                     u13240:
  2919                           
  2920                           ; BSR set to: 0
  2921  004356  6B86               	clrf	?_log& (0+255),b
  2922  004358  6B87               	clrf	(?_log+1)& (0+255),b
  2923  00435A  6B88               	clrf	(?_log+2)& (0+255),b
  2924  00435C  6B89               	clrf	(?_log+3)& (0+255),b
  2925  00435E  D087               	goto	l1854
  2926  004360                     l14005:
  2927                           
  2928                           ; BSR set to: 0
  2929  004360  6A22               	clrf	?___flmul+4,c
  2930  004362  6A23               	clrf	?___flmul+5,c
  2931  004364  6A24               	clrf	?___flmul+6,c
  2932  004366  0E40               	movlw	64
  2933  004368  6E25               	movwf	?___flmul+7,c
  2934  00436A  0E43               	movlw	low log@exponent
  2935  00436C  6E12               	movwf	?_frexp+4,c
  2936  00436E  0E00               	movlw	high log@exponent
  2937  004370  6E13               	movwf	?_frexp+5,c
  2938  004372  0E0F               	movlw	15
  2939  004374  6E13               	movwf	?_frexp+5,c
  2940  004376  0E5F               	movlw	__accesstop+-1
  2941  004378  6412               	cpfsgt	?_frexp+4,c
  2942  00437A  6A13               	clrf	?_frexp+5,c
  2943  00437C  C086  F00E         	movff	log@x,?_frexp
  2944  004380  C087  F00F         	movff	log@x+1,?_frexp+1
  2945  004384  C088  F010         	movff	log@x+2,?_frexp+2
  2946  004388  C089  F011         	movff	log@x+3,?_frexp+3
  2947  00438C  ECEE  F027         	call	_frexp	;wreg free
  2948  004390  C011  F021         	movff	?_frexp+3,?___flmul+3
  2949  004394  C010  F020         	movff	?_frexp+2,?___flmul+2
  2950  004398  C00F  F01F         	movff	?_frexp+1,?___flmul+1
  2951  00439C  C00E  F01E         	movff	?_frexp,?___flmul
  2952  0043A0  ECC4  F023         	call	___flmul	;wreg free
  2953  0043A4  C021  F063         	movff	?___flmul+3,?___fladd+3
  2954  0043A8  C020  F062         	movff	?___flmul+2,?___fladd+2
  2955  0043AC  C01F  F061         	movff	?___flmul+1,?___fladd+1
  2956  0043B0  C01E  F060         	movff	?___flmul,?___fladd
  2957  0043B4  0100               	movlb	0	; () banked
  2958  0043B6  6B64               	clrf	(?___fladd+4)& (0+255),b
  2959  0043B8  6B65               	clrf	(?___fladd+5)& (0+255),b
  2960  0043BA  0E80               	movlw	128
  2961  0043BC  6F66               	movwf	(?___fladd+6)& (0+255),b
  2962  0043BE  0EBF               	movlw	191
  2963  0043C0  6F67               	movwf	(?___fladd+7)& (0+255),b
  2964  0043C2  ECDC  F01E         	call	___fladd	;wreg free
  2965  0043C6  C063  F089         	movff	?___fladd+3,log@x+3
  2966  0043CA  C062  F088         	movff	?___fladd+2,log@x+2
  2967  0043CE  C061  F087         	movff	?___fladd+1,log@x+1
  2968  0043D2  C060  F086         	movff	?___fladd,log@x
  2969  0043D6  0643               	decf	log@exponent,f,c
  2970  0043D8  A0D8               	btfss	status,0,c
  2971  0043DA  0644               	decf	log@exponent+1,f,c
  2972  0043DC  C086  F03B         	movff	log@x,?_eval_poly
  2973  0043E0  C087  F03C         	movff	log@x+1,?_eval_poly+1
  2974  0043E4  C088  F03D         	movff	log@x+2,?_eval_poly+2
  2975  0043E8  C089  F03E         	movff	log@x+3,?_eval_poly+3
  2976  0043EC  0E48               	movlw	low log@coeff
  2977  0043EE  6E3F               	movwf	?_eval_poly+4,c
  2978  0043F0  6A41               	clrf	?_eval_poly+6,c
  2979  0043F2  0E08               	movlw	8
  2980  0043F4  6E40               	movwf	?_eval_poly+5,c
  2981  0043F6  EC2C  F024         	call	_eval_poly	;wreg free
  2982  0043FA  C03E  F089         	movff	?_eval_poly+3,log@x+3
  2983  0043FE  C03D  F088         	movff	?_eval_poly+2,log@x+2
  2984  004402  C03C  F087         	movff	?_eval_poly+1,log@x+1
  2985  004406  C03B  F086         	movff	?_eval_poly,log@x
  2986  00440A  0E18               	movlw	24
  2987  00440C  6E22               	movwf	?___flmul+4,c
  2988  00440E  0E72               	movlw	114
  2989  004410  6E23               	movwf	?___flmul+5,c
  2990  004412  0E31               	movlw	49
  2991  004414  6E24               	movwf	?___flmul+6,c
  2992  004416  0E3F               	movlw	63
  2993  004418  6E25               	movwf	?___flmul+7,c
  2994  00441A  C043  F018         	movff	log@exponent,?___awtofl
  2995  00441E  C044  F019         	movff	log@exponent+1,?___awtofl+1
  2996  004422  ECC4  F02B         	call	___awtofl	;wreg free
  2997  004426  C01B  F021         	movff	?___awtofl+3,?___flmul+3
  2998  00442A  C01A  F020         	movff	?___awtofl+2,?___flmul+2
  2999  00442E  C019  F01F         	movff	?___awtofl+1,?___flmul+1
  3000  004432  C018  F01E         	movff	?___awtofl,?___flmul
  3001  004436  ECC4  F023         	call	___flmul	;wreg free
  3002  00443A  C021  F063         	movff	?___flmul+3,?___fladd+3
  3003  00443E  C020  F062         	movff	?___flmul+2,?___fladd+2
  3004  004442  C01F  F061         	movff	?___flmul+1,?___fladd+1
  3005  004446  C01E  F060         	movff	?___flmul,?___fladd
  3006  00444A  C086  F064         	movff	log@x,?___fladd+4
  3007  00444E  C087  F065         	movff	log@x+1,?___fladd+5
  3008  004452  C088  F066         	movff	log@x+2,?___fladd+6
  3009  004456  C089  F067         	movff	log@x+3,?___fladd+7
  3010  00445A  ECDC  F01E         	call	___fladd	;wreg free
  3011  00445E  C063  F089         	movff	?___fladd+3,?_log+3
  3012  004462  C062  F088         	movff	?___fladd+2,?_log+2
  3013  004466  C061  F087         	movff	?___fladd+1,?_log+1
  3014  00446A  C060  F086         	movff	?___fladd,?_log
  3015  00446E                     l1854:
  3016  00446E  0012               	return	
  3017  004470                     __end_of_log:
  3018                           	opt stack 0
  3019                           tblptru	equ	0xFF8
  3020                           prodh	equ	0xFF4
  3021                           prodl	equ	0xFF3
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postdec1	equ	0xFE5
  3025                           fsr1h	equ	0xFE2
  3026                           fsr1l	equ	0xFE1
  3027                           indf2	equ	0xFDF
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _exp *****************
  3035 ;; Defined at:
  3036 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\exp.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  x               4   38[BANK0 ] int 
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  exponent        2   46[BANK0 ] int 
  3041 ;;  sign            1   48[BANK0 ] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  4   38[BANK0 ] unsigned char 
  3044 ;; Registers used:
  3045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/1
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3051 ;;      Params:         0       4       0       0       0       0       0
  3052 ;;      Locals:         0       7       0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0
  3054 ;;      Totals:         0      11       0       0       0       0       0
  3055 ;;Total ram usage:       11 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    6
  3058 ;; This function calls:
  3059 ;;		___fldiv
  3060 ;;		___asflmul
  3061 ;;		___asflsub
  3062 ;;		___awtofl
  3063 ;;		_floor
  3064 ;;		_eval_poly
  3065 ;;		_ldexp
  3066 ;;		___flge
  3067 ;;		___flneg
  3068 ;;		___fltol
  3069 ;; This function is called by:
  3070 ;;		_doWork
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text8
  3075  003A24                     __ptext8:
  3076                           	opt stack 0
  3077  003A24                     _exp:
  3078                           	opt stack 23
  3079                           
  3080                           ;incstack = 0
  3081                           ;incstack = 0
  3082  003A24  0100               	movlb	0	; () banked
  3083  003A26  EE20  F086         	lfsr	2,exp@x
  3084  003A2A  50DE               	movf	postinc2,w,c
  3085  003A2C  10DE               	iorwf	postinc2,w,c
  3086  003A2E  10DE               	iorwf	postinc2,w,c
  3087  003A30  10DE               	iorwf	postinc2,w,c
  3088  003A32  E107               	bnz	l13967
  3089                           
  3090                           ; BSR set to: 0
  3091  003A34  0E00               	movlw	0
  3092  003A36  6F86               	movwf	?_exp& (0+255),b
  3093  003A38  6F87               	movwf	(?_exp+1)& (0+255),b
  3094  003A3A  0E80               	movlw	128
  3095  003A3C  6F88               	movwf	(?_exp+2)& (0+255),b
  3096  003A3E  0E3F               	movlw	63
  3097  003A40  D018               	goto	L1
  3098  003A42                     l13967:
  3099                           
  3100                           ; BSR set to: 0
  3101  003A42  0E18               	movlw	24
  3102  003A44  6E0E               	movwf	?___flge,c
  3103  003A46  0E72               	movlw	114
  3104  003A48  6E0F               	movwf	?___flge+1,c
  3105  003A4A  0E31               	movlw	49
  3106  003A4C  6E10               	movwf	?___flge+2,c
  3107  003A4E  0E44               	movlw	68
  3108  003A50  6E11               	movwf	?___flge+3,c
  3109  003A52  C086  F012         	movff	exp@x,?___flge+4
  3110  003A56  C087  F013         	movff	exp@x+1,?___flge+5
  3111  003A5A  C088  F014         	movff	exp@x+2,?___flge+6
  3112  003A5E  C089  F015         	movff	exp@x+3,?___flge+7
  3113  003A62  EC30  F02A         	call	___flge	;wreg free
  3114  003A66  E207               	bc	l13973
  3115  003A68  0100               	movlb	0	; () banked
  3116  003A6A  6986               	setf	?_exp& (0+255),b
  3117  003A6C  6987               	setf	(?_exp+1)& (0+255),b
  3118  003A6E  0E7F               	movlw	127
  3119  003A70  6F88               	movwf	(?_exp+2)& (0+255),b
  3120  003A72                     L1:
  3121  003A72  6F89               	movwf	(?_exp+3)& (0+255),b
  3122  003A74  D0C9               	goto	l1562
  3123  003A76                     l13973:
  3124  003A76  C086  F00E         	movff	exp@x,?___flge
  3125  003A7A  C087  F00F         	movff	exp@x+1,?___flge+1
  3126  003A7E  C088  F010         	movff	exp@x+2,?___flge+2
  3127  003A82  C089  F011         	movff	exp@x+3,?___flge+3
  3128  003A86  0E87               	movlw	135
  3129  003A88  6E12               	movwf	?___flge+4,c
  3130  003A8A  0E48               	movlw	72
  3131  003A8C  6E13               	movwf	?___flge+5,c
  3132  003A8E  0E3A               	movlw	58
  3133  003A90  6E14               	movwf	?___flge+6,c
  3134  003A92  0EC4               	movlw	196
  3135  003A94  6E15               	movwf	?___flge+7,c
  3136  003A96  EC30  F02A         	call	___flge	;wreg free
  3137  003A9A  E202               	bc	l13977
  3138  003A9C  0100               	movlb	0	; () banked
  3139  003A9E  D08E               	goto	u13220
  3140  003AA0                     l13977:
  3141  003AA0  0100               	movlb	0	; () banked
  3142  003AA2  0E01               	movlw	1
  3143  003AA4  AF89               	btfss	(exp@x+3)& (0+255),7,b
  3144  003AA6  0E00               	movlw	0
  3145  003AA8  6F90               	movwf	exp@sign& (0+255),b
  3146  003AAA  5190               	movf	exp@sign& (0+255),w,b
  3147  003AAC  E012               	bz	l1565
  3148                           
  3149                           ; BSR set to: 0
  3150  003AAE  C086  F00E         	movff	exp@x,?___flneg
  3151  003AB2  C087  F00F         	movff	exp@x+1,?___flneg+1
  3152  003AB6  C088  F010         	movff	exp@x+2,?___flneg+2
  3153  003ABA  C089  F011         	movff	exp@x+3,?___flneg+3
  3154  003ABE  ECB7  F02C         	call	___flneg	;wreg free
  3155  003AC2  C011  F089         	movff	?___flneg+3,exp@x+3
  3156  003AC6  C010  F088         	movff	?___flneg+2,exp@x+2
  3157  003ACA  C00F  F087         	movff	?___flneg+1,exp@x+1
  3158  003ACE  C00E  F086         	movff	?___flneg,exp@x
  3159  003AD2                     l1565:
  3160                           
  3161                           ; BSR set to: 0
  3162  003AD2  0E3B               	movlw	59
  3163  003AD4  6E34               	movwf	?___asflmul,c
  3164  003AD6  0EAA               	movlw	170
  3165  003AD8  6E35               	movwf	?___asflmul+1,c
  3166  003ADA  0EB8               	movlw	184
  3167  003ADC  6E36               	movwf	?___asflmul+2,c
  3168  003ADE  0E3F               	movlw	63
  3169  003AE0  6E37               	movwf	?___asflmul+3,c
  3170  003AE2  0E86               	movlw	exp@x& (0+255)
  3171  003AE4  ECA1  F02A         	call	___asflmul
  3172  003AE8  C086  F06B         	movff	exp@x,?_floor
  3173  003AEC  C087  F06C         	movff	exp@x+1,?_floor+1
  3174  003AF0  C088  F06D         	movff	exp@x+2,?_floor+2
  3175  003AF4  C089  F06E         	movff	exp@x+3,?_floor+3
  3176  003AF8  EC44  F023         	call	_floor	;wreg free
  3177  003AFC  C06E  F08D         	movff	?_floor+3,_exp$2286+3
  3178  003B00  C06D  F08C         	movff	?_floor+2,_exp$2286+2
  3179  003B04  C06C  F08B         	movff	?_floor+1,_exp$2286+1
  3180  003B08  C06B  F08A         	movff	?_floor,_exp$2286
  3181  003B0C  C08A  F034         	movff	_exp$2286,?___fltol
  3182  003B10  C08B  F035         	movff	_exp$2286+1,?___fltol+1
  3183  003B14  C08C  F036         	movff	_exp$2286+2,?___fltol+2
  3184  003B18  C08D  F037         	movff	_exp$2286+3,?___fltol+3
  3185  003B1C  EC55  F027         	call	___fltol	;wreg free
  3186  003B20  C034  F08E         	movff	?___fltol,exp@exponent
  3187  003B24  C035  F08F         	movff	?___fltol+1,exp@exponent+1
  3188  003B28  0100               	movlb	0	; () banked
  3189  003B2A  0E00               	movlw	high exp@x
  3190  003B2C  6E3C               	movwf	?___asflsub+1,c
  3191  003B2E  0E86               	movlw	low exp@x
  3192  003B30  6E3B               	movwf	?___asflsub,c
  3193  003B32  C08E  F018         	movff	exp@exponent,?___awtofl
  3194  003B36  C08F  F019         	movff	exp@exponent+1,?___awtofl+1
  3195  003B3A  ECC4  F02B         	call	___awtofl	;wreg free
  3196  003B3E  C01B  F040         	movff	?___awtofl+3,?___asflsub+5
  3197  003B42  C01A  F03F         	movff	?___awtofl+2,?___asflsub+4
  3198  003B46  C019  F03E         	movff	?___awtofl+1,?___asflsub+3
  3199  003B4A  C018  F03D         	movff	?___awtofl,?___asflsub+2
  3200  003B4E  ECE3  F029         	call	___asflsub	;wreg free
  3201                           
  3202                           ; BSR set to: 0
  3203  003B52  C086  F03B         	movff	exp@x,?_eval_poly
  3204  003B56  C087  F03C         	movff	exp@x+1,?_eval_poly+1
  3205  003B5A  C088  F03D         	movff	exp@x+2,?_eval_poly+2
  3206  003B5E  C089  F03E         	movff	exp@x+3,?_eval_poly+3
  3207  003B62  0E20               	movlw	low exp@coeff
  3208  003B64  6E3F               	movwf	?_eval_poly+4,c
  3209  003B66  6A41               	clrf	?_eval_poly+6,c
  3210  003B68  0E09               	movlw	9
  3211  003B6A  6E40               	movwf	?_eval_poly+5,c
  3212  003B6C  EC2C  F024         	call	_eval_poly	;wreg free
  3213  003B70  C03E  F06F         	movff	?_eval_poly+3,?_ldexp+3
  3214  003B74  C03D  F06E         	movff	?_eval_poly+2,?_ldexp+2
  3215  003B78  C03C  F06D         	movff	?_eval_poly+1,?_ldexp+1
  3216  003B7C  C03B  F06C         	movff	?_eval_poly,?_ldexp
  3217  003B80  C08E  F070         	movff	exp@exponent,?_ldexp+4
  3218  003B84  C08F  F071         	movff	exp@exponent+1,?_ldexp+5
  3219  003B88  ECB2  F026         	call	_ldexp	;wreg free
  3220  003B8C  C06F  F089         	movff	?_ldexp+3,exp@x+3
  3221  003B90  C06E  F088         	movff	?_ldexp+2,exp@x+2
  3222  003B94  C06D  F087         	movff	?_ldexp+1,exp@x+1
  3223  003B98  C06C  F086         	movff	?_ldexp,exp@x
  3224                           
  3225                           ; BSR set to: 0
  3226  003B9C  5190               	movf	exp@sign& (0+255),w,b
  3227  003B9E  E02C               	bz	l1566
  3228                           
  3229                           ; BSR set to: 0
  3230  003BA0  EE20  F086         	lfsr	2,exp@x
  3231  003BA4  0EFF               	movlw	255
  3232  003BA6  18DE               	xorwf	postinc2,w,c
  3233  003BA8  0EFF               	movlw	255
  3234  003BAA  B4D8               	btfsc	status,2,c
  3235  003BAC  18DE               	xorwf	postinc2,w,c
  3236  003BAE  0E7F               	movlw	127
  3237  003BB0  B4D8               	btfsc	status,2,c
  3238  003BB2  18DE               	xorwf	postinc2,w,c
  3239  003BB4  0E7F               	movlw	127
  3240  003BB6  B4D8               	btfsc	status,2,c
  3241  003BB8  18DE               	xorwf	postinc2,w,c
  3242  003BBA  E105               	bnz	l13993
  3243  003BBC                     u13220:
  3244                           
  3245                           ; BSR set to: 0
  3246  003BBC  6B86               	clrf	?_exp& (0+255),b
  3247  003BBE  6B87               	clrf	(?_exp+1)& (0+255),b
  3248  003BC0  6B88               	clrf	(?_exp+2)& (0+255),b
  3249  003BC2  6B89               	clrf	(?_exp+3)& (0+255),b
  3250  003BC4  D021               	goto	l1562
  3251  003BC6                     l13993:
  3252                           
  3253                           ; BSR set to: 0
  3254  003BC6  6B70               	clrf	?___fldiv& (0+255),b
  3255  003BC8  6B71               	clrf	(?___fldiv+1)& (0+255),b
  3256  003BCA  0E80               	movlw	128
  3257  003BCC  6F72               	movwf	(?___fldiv+2)& (0+255),b
  3258  003BCE  0E3F               	movlw	63
  3259  003BD0  6F73               	movwf	(?___fldiv+3)& (0+255),b
  3260  003BD2  C086  F074         	movff	exp@x,?___fldiv+4
  3261  003BD6  C087  F075         	movff	exp@x+1,?___fldiv+5
  3262  003BDA  C088  F076         	movff	exp@x+2,?___fldiv+6
  3263  003BDE  C089  F077         	movff	exp@x+3,?___fldiv+7
  3264  003BE2  EC5B  F026         	call	___fldiv	;wreg free
  3265  003BE6  C073  F089         	movff	?___fldiv+3,?_exp+3
  3266  003BEA  C072  F088         	movff	?___fldiv+2,?_exp+2
  3267  003BEE  C071  F087         	movff	?___fldiv+1,?_exp+1
  3268  003BF2  C070  F086         	movff	?___fldiv,?_exp
  3269  003BF6  D008               	goto	l1562
  3270  003BF8                     l1566:
  3271                           
  3272                           ; BSR set to: 0
  3273  003BF8  C086  F086         	movff	exp@x,?_exp
  3274  003BFC  C087  F087         	movff	exp@x+1,?_exp+1
  3275  003C00  C088  F088         	movff	exp@x+2,?_exp+2
  3276  003C04  C089  F089         	movff	exp@x+3,?_exp+3
  3277  003C08                     l1562:
  3278  003C08  0012               	return	
  3279  003C0A                     __end_of_exp:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           prodh	equ	0xFF4
  3283                           prodl	equ	0xFF3
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1h	equ	0xFE2
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function ___flneg *****************
  3297 ;; Defined at:
  3298 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flneg.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  f1              4   13[COMRAM] unsigned char 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  4   13[COMRAM] unsigned char 
  3305 ;; Registers used:
  3306 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3307 ;; Tracked objects:
  3308 ;;		On entry : F/0
  3309 ;;		On exit  : F/0
  3310 ;;		Unchanged: F/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3312 ;;      Params:         4       0       0       0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0
  3315 ;;      Totals:         4       0       0       0       0       0       0
  3316 ;;Total ram usage:        4 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    2
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		_exp
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text9
  3327  00596E                     __ptext9:
  3328                           	opt stack 0
  3329  00596E                     ___flneg:
  3330                           	opt stack 26
  3331                           
  3332                           ; BSR set to: 0
  3333                           
  3334                           ;incstack = 0
  3335                           ;incstack = 0
  3336  00596E  EE20  F00E         	lfsr	2,___flneg@f1
  3337  005972  50DE               	movf	postinc2,w,c
  3338  005974  10DE               	iorwf	postinc2,w,c
  3339  005976  10DE               	iorwf	postinc2,w,c
  3340  005978  10DE               	iorwf	postinc2,w,c
  3341  00597A  E002               	bz	l11701
  3342                           
  3343                           ; BSR set to: 0
  3344  00597C  0E80               	movlw	128
  3345  00597E  1A11               	xorwf	___flneg@f1+3,f,c
  3346  005980                     l11701:
  3347                           
  3348                           ; BSR set to: 0
  3349  005980  C00E  F00E         	movff	___flneg@f1,?___flneg
  3350  005984  C00F  F00F         	movff	___flneg@f1+1,?___flneg+1
  3351  005988  C010  F010         	movff	___flneg@f1+2,?___flneg+2
  3352  00598C  C011  F011         	movff	___flneg@f1+3,?___flneg+3
  3353                           
  3354                           ; BSR set to: 0
  3355  005990  0012               	return	
  3356  005992                     __end_of___flneg:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           prodh	equ	0xFF4
  3360                           prodl	equ	0xFF3
  3361                           postinc0	equ	0xFEE
  3362                           wreg	equ	0xFE8
  3363                           postdec1	equ	0xFE5
  3364                           fsr1h	equ	0xFE2
  3365                           fsr1l	equ	0xFE1
  3366                           indf2	equ	0xFDF
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _ldexp *****************
  3374 ;; Defined at:
  3375 ;;		line 278 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  value           4   12[BANK0 ] unsigned char 
  3378 ;;  newexp          2   16[BANK0 ] int 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  4   12[BANK0 ] int 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : F/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3390 ;;      Params:         0       6       0       0       0       0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0
  3392 ;;      Temps:          3       0       0       0       0       0       0
  3393 ;;      Totals:         3       6       0       0       0       0       0
  3394 ;;Total ram usage:        9 bytes
  3395 ;; Hardware stack levels used:    1
  3396 ;; Hardware stack levels required when called:    2
  3397 ;; This function calls:
  3398 ;;		Nothing
  3399 ;; This function is called by:
  3400 ;;		_exp
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text10
  3405  004D64                     __ptext10:
  3406                           	opt stack 0
  3407  004D64                     _ldexp:
  3408                           	opt stack 26
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;incstack = 0
  3412                           ;incstack = 0
  3413  004D64  0100               	movlb	0	; () banked
  3414  004D66  EE20  F06C         	lfsr	2,ldexp@value
  3415  004D6A  50DE               	movf	postinc2,w,c
  3416  004D6C  10DE               	iorwf	postinc2,w,c
  3417  004D6E  10DE               	iorwf	postinc2,w,c
  3418  004D70  10DE               	iorwf	postinc2,w,c
  3419  004D72  E014               	bz	u10110
  3420                           
  3421                           ; BSR set to: 0
  3422                           
  3423                           ; BSR set to: 0
  3424  004D74  516F               	movf	(ldexp@value+3)& (0+255),w,b
  3425  004D76  0B7F               	andlw	127
  3426  004D78  6E43               	movwf	??_ldexp& (0+255),c
  3427  004D7A  90D8               	bcf	status,0,c
  3428  004D7C  3443               	rlcf	??_ldexp,w,c
  3429  004D7E  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3430  004D80  6A45               	clrf	(??_ldexp+2)& (0+255),c
  3431  004D82  3645               	rlcf	(??_ldexp+2)& (0+255),f,c
  3432  004D84  5044               	movf	??_ldexp+1,w,c
  3433  004D86  2770               	addwf	ldexp@newexp& (0+255),f,b
  3434  004D88  5045               	movf	??_ldexp+2,w,c
  3435  004D8A  2371               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3436  004D8C  356E               	rlcf	(ldexp@value+2)& (0+255),w,b
  3437  004D8E  36E8               	rlcf	wreg,f,c
  3438  004D90  0B01               	andlw	1
  3439  004D92  2770               	addwf	ldexp@newexp& (0+255),f,b
  3440  004D94  0E00               	movlw	0
  3441  004D96  2371               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3442                           
  3443                           ; BSR set to: 0
  3444  004D98  AF71               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3445  004D9A  D005               	goto	l11663
  3446  004D9C                     u10110:
  3447                           
  3448                           ; BSR set to: 0
  3449  004D9C  6B6C               	clrf	?_ldexp& (0+255),b
  3450  004D9E  6B6D               	clrf	(?_ldexp+1)& (0+255),b
  3451  004DA0  6B6E               	clrf	(?_ldexp+2)& (0+255),b
  3452  004DA2  6B6F               	clrf	(?_ldexp+3)& (0+255),b
  3453  004DA4  D031               	goto	l1687
  3454  004DA6                     l11663:
  3455                           
  3456                           ; BSR set to: 0
  3457  004DA6  5171               	movf	(ldexp@newexp+1)& (0+255),w,b
  3458  004DA8  0A80               	xorlw	128
  3459  004DAA  0F7F               	addlw	-129
  3460  004DAC  0E00               	movlw	0
  3461  004DAE  B4D8               	btfsc	status,2,c
  3462  004DB0  5D70               	subwf	ldexp@newexp& (0+255),w,b
  3463  004DB2  E30E               	bnc	l11677
  3464                           
  3465                           ; BSR set to: 0
  3466  004DB4  AF6F               	btfss	(ldexp@value+3)& (0+255),7,b
  3467  004DB6  D006               	goto	l11673
  3468                           
  3469                           ; BSR set to: 0
  3470  004DB8  696C               	setf	?_ldexp& (0+255),b
  3471  004DBA  696D               	setf	(?_ldexp+1)& (0+255),b
  3472  004DBC  0E7F               	movlw	127
  3473  004DBE  6F6E               	movwf	(?_ldexp+2)& (0+255),b
  3474  004DC0  0EFF               	movlw	255
  3475  004DC2  D004               	goto	L2
  3476  004DC4                     l11673:
  3477                           
  3478                           ; BSR set to: 0
  3479  004DC4  696C               	setf	?_ldexp& (0+255),b
  3480  004DC6  696D               	setf	(?_ldexp+1)& (0+255),b
  3481  004DC8  0E7F               	movlw	127
  3482  004DCA  6F6E               	movwf	(?_ldexp+2)& (0+255),b
  3483  004DCC                     L2:
  3484  004DCC  6F6F               	movwf	(?_ldexp+3)& (0+255),b
  3485  004DCE  D01C               	goto	l1687
  3486  004DD0                     l11677:
  3487                           
  3488                           ; BSR set to: 0
  3489  004DD0  3571               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3490  004DD2  3171               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3491  004DD4  6E44               	movwf	(??_ldexp+1)& (0+255),c
  3492  004DD6  3170               	rrcf	ldexp@newexp& (0+255),w,b
  3493  004DD8  6E43               	movwf	??_ldexp& (0+255),c
  3494  004DDA  196F               	xorwf	(ldexp@value+3)& (0+255),w,b
  3495  004DDC  0B80               	andlw	-128
  3496  004DDE  1843               	xorwf	??_ldexp,w,c
  3497  004DE0  6F6F               	movwf	(ldexp@value+3)& (0+255),b
  3498  004DE2  C070  F043         	movff	ldexp@newexp,??_ldexp
  3499  004DE6  0E01               	movlw	1
  3500  004DE8  1643               	andwf	??_ldexp,f,c
  3501  004DEA  3243               	rrcf	??_ldexp,f,c
  3502  004DEC  3243               	rrcf	??_ldexp,f,c
  3503  004DEE  516E               	movf	(ldexp@value+2)& (0+255),w,b
  3504  004DF0  1843               	xorwf	??_ldexp,w,c
  3505  004DF2  0B7F               	andlw	-129
  3506  004DF4  1843               	xorwf	??_ldexp,w,c
  3507  004DF6  6F6E               	movwf	(ldexp@value+2)& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510  004DF8  C06C  F06C         	movff	ldexp@value,?_ldexp
  3511  004DFC  C06D  F06D         	movff	ldexp@value+1,?_ldexp+1
  3512  004E00  C06E  F06E         	movff	ldexp@value+2,?_ldexp+2
  3513  004E04  C06F  F06F         	movff	ldexp@value+3,?_ldexp+3
  3514  004E08                     l1687:
  3515                           
  3516                           ; BSR set to: 0
  3517  004E08  0012               	return	
  3518  004E0A                     __end_of_ldexp:
  3519                           	opt stack 0
  3520                           tblptru	equ	0xFF8
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           postdec1	equ	0xFE5
  3526                           fsr1h	equ	0xFE2
  3527                           fsr1l	equ	0xFE1
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           fsr2h	equ	0xFDA
  3532                           fsr2l	equ	0xFD9
  3533                           status	equ	0xFD8
  3534                           
  3535 ;; *************** function _eval_poly *****************
  3536 ;; Defined at:
  3537 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\evalpoly.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;  x               4   58[COMRAM] int 
  3540 ;;  d               1   62[COMRAM] PTR const 
  3541 ;;		 -> log@coeff(36), exp@coeff(40), 
  3542 ;;  n               2   63[COMRAM] int 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  res             4    8[BANK0 ] int 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  4   58[COMRAM] int 
  3547 ;; Registers used:
  3548 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3554 ;;      Params:         7       0       0       0       0       0       0
  3555 ;;      Locals:         0       4       0       0       0       0       0
  3556 ;;      Temps:          1       0       0       0       0       0       0
  3557 ;;      Totals:         8       4       0       0       0       0       0
  3558 ;;Total ram usage:       12 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    4
  3561 ;; This function calls:
  3562 ;;		___fladd
  3563 ;;		___flmul
  3564 ;; This function is called by:
  3565 ;;		_exp
  3566 ;;		_log
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           	psect	text11
  3571  004858                     __ptext11:
  3572                           	opt stack 0
  3573  004858                     _eval_poly:
  3574                           	opt stack 24
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;incstack = 0
  3578                           ;incstack = 0
  3579  004858  5040               	movf	eval_poly@n,w,c
  3580  00485A  0D04               	mullw	4
  3581  00485C  503F               	movf	eval_poly@d,w,c
  3582  00485E  24F3               	addwf	prodl,w,c
  3583  004860  6E42               	movwf	??_eval_poly& (0+255),c
  3584  004862  C042  FFF6         	movff	??_eval_poly,tblptrl
  3585  004866  0E0B               	movlw	high __smallconst
  3586  004868  6EF7               	movwf	tblptrh,c
  3587  00486A  0009               	tblrd		*+
  3588  00486C  0100               	movlb	0	; () banked
  3589  00486E  CFF5 F068          	movff	tablat,eval_poly@res
  3590  004872  0009               	tblrd		*+
  3591  004874  CFF5 F069          	movff	tablat,eval_poly@res+1
  3592  004878  0009               	tblrd		*+
  3593  00487A  CFF5 F06A          	movff	tablat,eval_poly@res+2
  3594  00487E  000A               	tblrd		*-
  3595  004880  CFF5 F06B          	movff	tablat,eval_poly@res+3
  3596  004884  D03D               	goto	l14297
  3597  004886                     l14295:
  3598  004886  C068  F022         	movff	eval_poly@res,?___flmul+4
  3599  00488A  C069  F023         	movff	eval_poly@res+1,?___flmul+5
  3600  00488E  C06A  F024         	movff	eval_poly@res+2,?___flmul+6
  3601  004892  C06B  F025         	movff	eval_poly@res+3,?___flmul+7
  3602  004896  C03B  F01E         	movff	eval_poly@x,?___flmul
  3603  00489A  C03C  F01F         	movff	eval_poly@x+1,?___flmul+1
  3604  00489E  C03D  F020         	movff	eval_poly@x+2,?___flmul+2
  3605  0048A2  C03E  F021         	movff	eval_poly@x+3,?___flmul+3
  3606  0048A6  ECC4  F023         	call	___flmul	;wreg free
  3607  0048AA  C021  F063         	movff	?___flmul+3,?___fladd+3
  3608  0048AE  C020  F062         	movff	?___flmul+2,?___fladd+2
  3609  0048B2  C01F  F061         	movff	?___flmul+1,?___fladd+1
  3610  0048B6  C01E  F060         	movff	?___flmul,?___fladd
  3611  0048BA  0640               	decf	eval_poly@n,f,c
  3612  0048BC  A0D8               	btfss	status,0,c
  3613  0048BE  0641               	decf	eval_poly@n+1,f,c
  3614  0048C0  5040               	movf	eval_poly@n& (0+255),w,c
  3615  0048C2  0D04               	mullw	4
  3616  0048C4  503F               	movf	eval_poly@d,w,c
  3617  0048C6  24F3               	addwf	prodl,w,c
  3618  0048C8  6E42               	movwf	??_eval_poly& (0+255),c
  3619  0048CA  C042  FFF6         	movff	??_eval_poly,tblptrl
  3620  0048CE  0E0B               	movlw	high __smallconst
  3621  0048D0  6EF7               	movwf	tblptrh,c
  3622  0048D2  0009               	tblrd		*+
  3623  0048D4  0100               	movlb	0	; () banked
  3624  0048D6  CFF5 F064          	movff	tablat,?___fladd+4
  3625  0048DA  0009               	tblrd		*+
  3626  0048DC  CFF5 F065          	movff	tablat,?___fladd+5
  3627  0048E0  0009               	tblrd		*+
  3628  0048E2  CFF5 F066          	movff	tablat,?___fladd+6
  3629  0048E6  000A               	tblrd		*-
  3630  0048E8  CFF5 F067          	movff	tablat,?___fladd+7
  3631  0048EC  ECDC  F01E         	call	___fladd	;wreg free
  3632  0048F0  C063  F06B         	movff	?___fladd+3,eval_poly@res+3
  3633  0048F4  C062  F06A         	movff	?___fladd+2,eval_poly@res+2
  3634  0048F8  C061  F069         	movff	?___fladd+1,eval_poly@res+1
  3635  0048FC  C060  F068         	movff	?___fladd,eval_poly@res
  3636  004900                     l14297:
  3637  004900  5041               	movf	eval_poly@n+1,w,c
  3638  004902  1040               	iorwf	eval_poly@n,w,c
  3639  004904  E1C0               	bnz	l14295
  3640  004906  C068  F03B         	movff	eval_poly@res,?_eval_poly
  3641  00490A  C069  F03C         	movff	eval_poly@res+1,?_eval_poly+1
  3642  00490E  C06A  F03D         	movff	eval_poly@res+2,?_eval_poly+2
  3643  004912  C06B  F03E         	movff	eval_poly@res+3,?_eval_poly+3
  3644  004916  0012               	return	
  3645  004918                     __end_of_eval_poly:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           postdec1	equ	0xFE5
  3656                           fsr1h	equ	0xFE2
  3657                           fsr1l	equ	0xFE1
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _floor *****************
  3666 ;; Defined at:
  3667 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\floor.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  x               4   11[BANK0 ] int 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  i               4   15[BANK0 ] int 
  3672 ;;  expon           2   19[BANK0 ] int 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  4   11[BANK0 ] int 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3682 ;;      Params:         0       4       0       0       0       0       0
  3683 ;;      Locals:         0       6       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0
  3685 ;;      Totals:         0      10       0       0       0       0       0
  3686 ;;Total ram usage:       10 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    4
  3689 ;; This function calls:
  3690 ;;		___altofl
  3691 ;;		___fladd
  3692 ;;		___flge
  3693 ;;		_frexp
  3694 ;;		___fltol
  3695 ;; This function is called by:
  3696 ;;		_exp
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text12
  3701  004688                     __ptext12:
  3702                           	opt stack 0
  3703  004688                     _floor:
  3704                           	opt stack 24
  3705                           
  3706                           ;incstack = 0
  3707                           ;incstack = 0
  3708  004688  C06B  F00E         	movff	floor@x,?_frexp
  3709  00468C  C06C  F00F         	movff	floor@x+1,?_frexp+1
  3710  004690  C06D  F010         	movff	floor@x+2,?_frexp+2
  3711  004694  C06E  F011         	movff	floor@x+3,?_frexp+3
  3712  004698  0100               	movlb	0	; () banked
  3713  00469A  0E00               	movlw	high floor@expon
  3714  00469C  6E13               	movwf	?_frexp+5,c
  3715  00469E  0E73               	movlw	low floor@expon
  3716  0046A0  6E12               	movwf	?_frexp+4,c
  3717  0046A2  ECEE  F027         	call	_frexp	;wreg free
  3718                           
  3719                           ; BSR set to: 0
  3720  0046A6  AF74               	btfss	(floor@expon+1)& (0+255),7,b
  3721  0046A8  D00F               	goto	l14283
  3722                           
  3723                           ; BSR set to: 0
  3724  0046AA  AF6E               	btfss	(floor@x+3)& (0+255),7,b
  3725  0046AC  D008               	goto	l1655
  3726                           
  3727                           ; BSR set to: 0
  3728  0046AE  0E00               	movlw	0
  3729  0046B0  6F6B               	movwf	?_floor& (0+255),b
  3730  0046B2  6F6C               	movwf	(?_floor+1)& (0+255),b
  3731  0046B4  0E80               	movlw	128
  3732  0046B6  6F6D               	movwf	(?_floor+2)& (0+255),b
  3733  0046B8  0EBF               	movlw	191
  3734  0046BA  6F6E               	movwf	(?_floor+3)& (0+255),b
  3735  0046BC  D064               	goto	l1656
  3736  0046BE                     l1655:
  3737                           
  3738                           ; BSR set to: 0
  3739  0046BE  6B6B               	clrf	?_floor& (0+255),b
  3740  0046C0  6B6C               	clrf	(?_floor+1)& (0+255),b
  3741  0046C2  6B6D               	clrf	(?_floor+2)& (0+255),b
  3742  0046C4  6B6E               	clrf	(?_floor+3)& (0+255),b
  3743  0046C6  D05F               	goto	l1656
  3744  0046C8                     l14283:
  3745                           
  3746                           ; BSR set to: 0
  3747  0046C8  0E1D               	movlw	29
  3748  0046CA  5D73               	subwf	floor@expon& (0+255),w,b
  3749  0046CC  0E00               	movlw	0
  3750  0046CE  5974               	subwfb	(floor@expon+1)& (0+255),w,b
  3751  0046D0  E309               	bnc	l14287
  3752                           
  3753                           ; BSR set to: 0
  3754  0046D2  C06B  F06B         	movff	floor@x,?_floor
  3755  0046D6  C06C  F06C         	movff	floor@x+1,?_floor+1
  3756  0046DA  C06D  F06D         	movff	floor@x+2,?_floor+2
  3757  0046DE  C06E  F06E         	movff	floor@x+3,?_floor+3
  3758  0046E2  D051               	goto	l1656
  3759  0046E4                     l14287:
  3760                           
  3761                           ; BSR set to: 0
  3762  0046E4  C06B  F034         	movff	floor@x,?___fltol
  3763  0046E8  C06C  F035         	movff	floor@x+1,?___fltol+1
  3764  0046EC  C06D  F036         	movff	floor@x+2,?___fltol+2
  3765  0046F0  C06E  F037         	movff	floor@x+3,?___fltol+3
  3766  0046F4  EC55  F027         	call	___fltol	;wreg free
  3767  0046F8  C037  F069         	movff	?___fltol+3,?___altofl+3
  3768  0046FC  C036  F068         	movff	?___fltol+2,?___altofl+2
  3769  004700  C035  F067         	movff	?___fltol+1,?___altofl+1
  3770  004704  C034  F066         	movff	?___fltol,?___altofl
  3771  004708  EC7C  F02A         	call	___altofl	;wreg free
  3772  00470C  C069  F072         	movff	?___altofl+3,floor@i+3
  3773  004710  C068  F071         	movff	?___altofl+2,floor@i+2
  3774  004714  C067  F070         	movff	?___altofl+1,floor@i+1
  3775  004718  C066  F06F         	movff	?___altofl,floor@i
  3776  00471C  C06B  F00E         	movff	floor@x,?___flge
  3777  004720  C06C  F00F         	movff	floor@x+1,?___flge+1
  3778  004724  C06D  F010         	movff	floor@x+2,?___flge+2
  3779  004728  C06E  F011         	movff	floor@x+3,?___flge+3
  3780  00472C  C06F  F012         	movff	floor@i,?___flge+4
  3781  004730  C070  F013         	movff	floor@i+1,?___flge+5
  3782  004734  C071  F014         	movff	floor@i+2,?___flge+6
  3783  004738  C072  F015         	movff	floor@i+3,?___flge+7
  3784  00473C  EC30  F02A         	call	___flge	;wreg free
  3785  004740  E21A               	bc	l1658
  3786  004742  C06F  F060         	movff	floor@i,?___fladd
  3787  004746  C070  F061         	movff	floor@i+1,?___fladd+1
  3788  00474A  C071  F062         	movff	floor@i+2,?___fladd+2
  3789  00474E  C072  F063         	movff	floor@i+3,?___fladd+3
  3790  004752  0100               	movlb	0	; () banked
  3791  004754  6B64               	clrf	(?___fladd+4)& (0+255),b
  3792  004756  6B65               	clrf	(?___fladd+5)& (0+255),b
  3793  004758  0E80               	movlw	128
  3794  00475A  6F66               	movwf	(?___fladd+6)& (0+255),b
  3795  00475C  0EBF               	movlw	191
  3796  00475E  6F67               	movwf	(?___fladd+7)& (0+255),b
  3797  004760  ECDC  F01E         	call	___fladd	;wreg free
  3798  004764  C063  F06E         	movff	?___fladd+3,?_floor+3
  3799  004768  C062  F06D         	movff	?___fladd+2,?_floor+2
  3800  00476C  C061  F06C         	movff	?___fladd+1,?_floor+1
  3801  004770  C060  F06B         	movff	?___fladd,?_floor
  3802  004774  D008               	goto	l1656
  3803  004776                     l1658:
  3804  004776  C06F  F06B         	movff	floor@i,?_floor
  3805  00477A  C070  F06C         	movff	floor@i+1,?_floor+1
  3806  00477E  C071  F06D         	movff	floor@i+2,?_floor+2
  3807  004782  C072  F06E         	movff	floor@i+3,?_floor+3
  3808  004786                     l1656:
  3809  004786  0012               	return	
  3810  004788                     __end_of_floor:
  3811                           	opt stack 0
  3812                           tblptru	equ	0xFF8
  3813                           tblptrh	equ	0xFF7
  3814                           tblptrl	equ	0xFF6
  3815                           tablat	equ	0xFF5
  3816                           prodh	equ	0xFF4
  3817                           prodl	equ	0xFF3
  3818                           postinc0	equ	0xFEE
  3819                           wreg	equ	0xFE8
  3820                           postdec1	equ	0xFE5
  3821                           fsr1h	equ	0xFE2
  3822                           fsr1l	equ	0xFE1
  3823                           indf2	equ	0xFDF
  3824                           postinc2	equ	0xFDE
  3825                           postdec2	equ	0xFDD
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           status	equ	0xFD8
  3829                           
  3830 ;; *************** function ___fltol *****************
  3831 ;; Defined at:
  3832 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fltol.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  f1              4   51[COMRAM] int 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  exp1            1   60[COMRAM] unsigned char 
  3837 ;;  sign1           1   59[COMRAM] unsigned char 
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  4   51[COMRAM] long 
  3840 ;; Registers used:
  3841 ;;		wreg, status,2, status,0
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3847 ;;      Params:         4       0       0       0       0       0       0
  3848 ;;      Locals:         2       0       0       0       0       0       0
  3849 ;;      Temps:          4       0       0       0       0       0       0
  3850 ;;      Totals:        10       0       0       0       0       0       0
  3851 ;;Total ram usage:       10 bytes
  3852 ;; Hardware stack levels used:    1
  3853 ;; Hardware stack levels required when called:    2
  3854 ;; This function calls:
  3855 ;;		Nothing
  3856 ;; This function is called by:
  3857 ;;		_doWork
  3858 ;;		_setEventData
  3859 ;;		_exp
  3860 ;;		_floor
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text13
  3865  004EAA                     __ptext13:
  3866                           	opt stack 0
  3867  004EAA                     ___fltol:
  3868                           	opt stack 27
  3869                           
  3870                           ;incstack = 0
  3871                           ;incstack = 0
  3872  004EAA  3436               	rlcf	(___fltol@f1+2)& (0+255),w,c
  3873  004EAC  3437               	rlcf	(___fltol@f1+3)& (0+255),w,c
  3874  004EAE  6E3D               	movwf	___fltol@exp1,c
  3875  004EB0  663D               	tstfsz	___fltol@exp1& (0+255),c
  3876  004EB2  D005               	goto	l11729
  3877  004EB4                     l11727:
  3878  004EB4  6A34               	clrf	?___fltol,c
  3879  004EB6  6A35               	clrf	?___fltol+1,c
  3880  004EB8  6A36               	clrf	?___fltol+2,c
  3881  004EBA  6A37               	clrf	?___fltol+3,c
  3882  004EBC  D043               	goto	l1667
  3883  004EBE                     l11729:
  3884  004EBE  C034  F038         	movff	___fltol@f1,??___fltol
  3885  004EC2  C035  F039         	movff	___fltol@f1+1,??___fltol+1
  3886  004EC6  C036  F03A         	movff	___fltol@f1+2,??___fltol+2
  3887  004ECA  C037  F03B         	movff	___fltol@f1+3,??___fltol+3
  3888  004ECE  0E20               	movlw	32
  3889  004ED0  D005               	goto	u10200
  3890  004ED2                     u10205:
  3891  004ED2  90D8               	bcf	status,0,c
  3892  004ED4  323B               	rrcf	??___fltol+3,f,c
  3893  004ED6  323A               	rrcf	??___fltol+2,f,c
  3894  004ED8  3239               	rrcf	??___fltol+1,f,c
  3895  004EDA  3238               	rrcf	??___fltol,f,c
  3896  004EDC                     u10200:
  3897  004EDC  2EE8               	decfsz	wreg,f,c
  3898  004EDE  D7F9               	goto	u10205
  3899  004EE0  5038               	movf	??___fltol,w,c
  3900  004EE2  6E3C               	movwf	___fltol@sign1,c
  3901  004EE4  8E36               	bsf	___fltol@f1+2,7,c
  3902  004EE6  6A37               	clrf	___fltol@f1+3,c
  3903  004EE8  0E96               	movlw	150
  3904  004EEA  5E3D               	subwf	___fltol@exp1,f,c
  3905  004EEC  AE3D               	btfss	___fltol@exp1,7,c
  3906  004EEE  D00C               	goto	l11747
  3907  004EF0  503D               	movf	___fltol@exp1,w,c
  3908  004EF2  0A80               	xorlw	128
  3909  004EF4  0F97               	addlw	151
  3910  004EF6  E3DE               	bnc	l11727
  3911  004EF8                     l11743:
  3912  004EF8  90D8               	bcf	status,0,c
  3913  004EFA  3237               	rrcf	___fltol@f1+3,f,c
  3914  004EFC  3236               	rrcf	___fltol@f1+2,f,c
  3915  004EFE  3235               	rrcf	___fltol@f1+1,f,c
  3916  004F00  3234               	rrcf	___fltol@f1,f,c
  3917  004F02  3E3D               	incfsz	___fltol@exp1,f,c
  3918  004F04  D7F9               	goto	l11743
  3919  004F06  D00C               	goto	l11755
  3920  004F08                     l11747:
  3921  004F08  0E1F               	movlw	31
  3922  004F0A  643D               	cpfsgt	___fltol@exp1,c
  3923  004F0C  D007               	goto	l11753
  3924  004F0E  D7D2               	goto	l11727
  3925  004F10                     l11751:
  3926  004F10  90D8               	bcf	status,0,c
  3927  004F12  3634               	rlcf	___fltol@f1,f,c
  3928  004F14  3635               	rlcf	___fltol@f1+1,f,c
  3929  004F16  3636               	rlcf	___fltol@f1+2,f,c
  3930  004F18  3637               	rlcf	___fltol@f1+3,f,c
  3931  004F1A  063D               	decf	___fltol@exp1,f,c
  3932  004F1C                     l11753:
  3933  004F1C  663D               	tstfsz	___fltol@exp1,c
  3934  004F1E  D7F8               	goto	l11751
  3935  004F20                     l11755:
  3936  004F20  503C               	movf	___fltol@sign1,w,c
  3937  004F22  E008               	bz	l11759
  3938  004F24  1E37               	comf	___fltol@f1+3,f,c
  3939  004F26  1E36               	comf	___fltol@f1+2,f,c
  3940  004F28  1E35               	comf	___fltol@f1+1,f,c
  3941  004F2A  6C34               	negf	___fltol@f1,c
  3942  004F2C  0E00               	movlw	0
  3943  004F2E  2235               	addwfc	___fltol@f1+1,f,c
  3944  004F30  2236               	addwfc	___fltol@f1+2,f,c
  3945  004F32  2237               	addwfc	___fltol@f1+3,f,c
  3946  004F34                     l11759:
  3947  004F34  C034  F034         	movff	___fltol@f1,?___fltol
  3948  004F38  C035  F035         	movff	___fltol@f1+1,?___fltol+1
  3949  004F3C  C036  F036         	movff	___fltol@f1+2,?___fltol+2
  3950  004F40  C037  F037         	movff	___fltol@f1+3,?___fltol+3
  3951  004F44                     l1667:
  3952  004F44  0012               	return	
  3953  004F46                     __end_of___fltol:
  3954                           	opt stack 0
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           postdec1	equ	0xFE5
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _frexp *****************
  3974 ;; Defined at:
  3975 ;;		line 255 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\frexp.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;  value           4   13[COMRAM] long 
  3978 ;;  eptr            2   17[COMRAM] PTR int 
  3979 ;;		 -> log@exponent(2), floor@expon(2), 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;		None
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  4   13[COMRAM] PTR int 
  3984 ;; Registers used:
  3985 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3986 ;; Tracked objects:
  3987 ;;		On entry : F/0
  3988 ;;		On exit  : F/0
  3989 ;;		Unchanged: F/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3991 ;;      Params:         6       0       0       0       0       0       0
  3992 ;;      Locals:         0       0       0       0       0       0       0
  3993 ;;      Temps:          3       0       0       0       0       0       0
  3994 ;;      Totals:         9       0       0       0       0       0       0
  3995 ;;Total ram usage:        9 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:    2
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_floor
  4002 ;;		_log
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text14
  4007  004FDC                     __ptext14:
  4008                           	opt stack 0
  4009  004FDC                     _frexp:
  4010                           	opt stack 26
  4011                           
  4012                           ; BSR set to: 0
  4013                           
  4014                           ;incstack = 0
  4015                           ;incstack = 0
  4016  004FDC  EE20  F00E         	lfsr	2,frexp@value
  4017  004FE0  50DE               	movf	postinc2,w,c
  4018  004FE2  10DE               	iorwf	postinc2,w,c
  4019  004FE4  10DE               	iorwf	postinc2,w,c
  4020  004FE6  10DE               	iorwf	postinc2,w,c
  4021  004FE8  E10C               	bnz	l11713
  4022                           
  4023                           ; BSR set to: 0
  4024  004FEA  C012  FFD9         	movff	frexp@eptr,fsr2l
  4025  004FEE  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4026  004FF2  0E00               	movlw	0
  4027  004FF4  6ADE               	clrf	postinc2,c
  4028  004FF6  6ADD               	clrf	postdec2,c
  4029                           
  4030                           ; BSR set to: 0
  4031  004FF8  6A0E               	clrf	?_frexp,c
  4032  004FFA  6A0F               	clrf	?_frexp+1,c
  4033  004FFC  6A10               	clrf	?_frexp+2,c
  4034  004FFE  6A11               	clrf	?_frexp+3,c
  4035  005000  D02F               	goto	l1683
  4036  005002                     l11713:
  4037                           
  4038                           ; BSR set to: 0
  4039  005002  5011               	movf	frexp@value+3,w,c
  4040  005004  0B7F               	andlw	127
  4041  005006  6E14               	movwf	??_frexp& (0+255),c
  4042  005008  90D8               	bcf	status,0,c
  4043  00500A  3414               	rlcf	??_frexp,w,c
  4044  00500C  6E15               	movwf	(??_frexp+1)& (0+255),c
  4045  00500E  6A16               	clrf	(??_frexp+2)& (0+255),c
  4046  005010  3616               	rlcf	(??_frexp+2)& (0+255),f,c
  4047  005012  C012  FFD9         	movff	frexp@eptr,fsr2l
  4048  005016  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4049  00501A  C015  FFDE         	movff	??_frexp+1,postinc2
  4050  00501E  C016  FFDD         	movff	??_frexp+2,postdec2
  4051  005022  3410               	rlcf	frexp@value+2,w,c
  4052  005024  36E8               	rlcf	wreg,f,c
  4053  005026  0B01               	andlw	1
  4054  005028  C012  FFD9         	movff	frexp@eptr,fsr2l
  4055  00502C  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4056  005030  12DE               	iorwf	postinc2,f,c
  4057  005032  0E00               	movlw	0
  4058  005034  12DD               	iorwf	postdec2,f,c
  4059                           
  4060                           ; BSR set to: 0
  4061  005036  C012  FFD9         	movff	frexp@eptr,fsr2l
  4062  00503A  C013  FFDA         	movff	frexp@eptr+1,fsr2h
  4063  00503E  0E82               	movlw	130
  4064  005040  26DE               	addwf	postinc2,f,c
  4065  005042  0EFF               	movlw	255
  4066  005044  22DD               	addwfc	postdec2,f,c
  4067                           
  4068                           ; BSR set to: 0
  4069  005046  5011               	movf	frexp@value+3,w,c
  4070  005048  0B80               	andlw	-128
  4071  00504A  093F               	iorlw	63
  4072  00504C  6E11               	movwf	frexp@value+3,c
  4073                           
  4074                           ; BSR set to: 0
  4075  00504E  9E10               	bcf	frexp@value+2,7,c
  4076                           
  4077                           ; BSR set to: 0
  4078  005050  C00E  F00E         	movff	frexp@value,?_frexp
  4079  005054  C00F  F00F         	movff	frexp@value+1,?_frexp+1
  4080  005058  C010  F010         	movff	frexp@value+2,?_frexp+2
  4081  00505C  C011  F011         	movff	frexp@value+3,?_frexp+3
  4082  005060                     l1683:
  4083                           
  4084                           ; BSR set to: 0
  4085  005060  0012               	return	
  4086  005062                     __end_of_frexp:
  4087                           	opt stack 0
  4088                           tblptru	equ	0xFF8
  4089                           tblptrh	equ	0xFF7
  4090                           tblptrl	equ	0xFF6
  4091                           tablat	equ	0xFF5
  4092                           prodh	equ	0xFF4
  4093                           prodl	equ	0xFF3
  4094                           postinc0	equ	0xFEE
  4095                           wreg	equ	0xFE8
  4096                           postdec1	equ	0xFE5
  4097                           fsr1h	equ	0xFE2
  4098                           fsr1l	equ	0xFE1
  4099                           indf2	equ	0xFDF
  4100                           postinc2	equ	0xFDE
  4101                           postdec2	equ	0xFDD
  4102                           fsr2h	equ	0xFDA
  4103                           fsr2l	equ	0xFD9
  4104                           status	equ	0xFD8
  4105                           
  4106 ;; *************** function ___flge *****************
  4107 ;; Defined at:
  4108 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flge.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;  ff1             4   13[COMRAM] PTR int 
  4111 ;;  ff2             4   17[COMRAM] PTR int 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;		None
  4114 ;; Return value:  Size  Location     Type
  4115 ;;		None               void
  4116 ;; Registers used:
  4117 ;;		wreg, status,2, status,0
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4123 ;;      Params:         8       0       0       0       0       0       0
  4124 ;;      Locals:         0       0       0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0
  4126 ;;      Totals:         8       0       0       0       0       0       0
  4127 ;;Total ram usage:        8 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    2
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_exp
  4134 ;;		_floor
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           	psect	text15
  4139  005460                     __ptext15:
  4140                           	opt stack 0
  4141  005460                     ___flge:
  4142                           	opt stack 26
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;incstack = 0
  4146                           ;incstack = 0
  4147  005460  AE11               	btfss	___flge@ff1+3,7,c
  4148  005462  D009               	goto	l11687
  4149  005464  6C0E               	negf	___flge@ff1,c
  4150  005466  1E0F               	comf	___flge@ff1+1,f,c
  4151  005468  B0D8               	btfsc	status,0,c
  4152  00546A  2A0F               	incf	___flge@ff1+1,f,c
  4153  00546C  1E10               	comf	___flge@ff1+2,f,c
  4154  00546E  B0D8               	btfsc	status,0,c
  4155  005470  2A10               	incf	___flge@ff1+2,f,c
  4156  005472  0E80               	movlw	128
  4157  005474  5611               	subfwb	___flge@ff1+3,f,c
  4158  005476                     l11687:
  4159  005476  AE15               	btfss	___flge@ff2+3,7,c
  4160  005478  D009               	goto	l1614
  4161  00547A  6C12               	negf	___flge@ff2,c
  4162  00547C  1E13               	comf	___flge@ff2+1,f,c
  4163  00547E  B0D8               	btfsc	status,0,c
  4164  005480  2A13               	incf	___flge@ff2+1,f,c
  4165  005482  1E14               	comf	___flge@ff2+2,f,c
  4166  005484  B0D8               	btfsc	status,0,c
  4167  005486  2A14               	incf	___flge@ff2+2,f,c
  4168  005488  0E80               	movlw	128
  4169  00548A  5615               	subfwb	___flge@ff2+3,f,c
  4170  00548C                     l1614:
  4171  00548C  0E80               	movlw	128
  4172  00548E  1A11               	xorwf	___flge@ff1+3,f,c
  4173  005490  1A15               	xorwf	___flge@ff2+3,f,c
  4174  005492  5012               	movf	___flge@ff2,w,c
  4175  005494  5C0E               	subwf	___flge@ff1,w,c
  4176  005496  5013               	movf	___flge@ff2+1,w,c
  4177  005498  580F               	subwfb	___flge@ff1+1,w,c
  4178  00549A  5014               	movf	___flge@ff2+2,w,c
  4179  00549C  5810               	subwfb	___flge@ff1+2,w,c
  4180  00549E  5015               	movf	___flge@ff2+3,w,c
  4181  0054A0  5811               	subwfb	___flge@ff1+3,w,c
  4182  0054A2  E202               	bc	l11693
  4183  0054A4  90D8               	bcf	status,0,c
  4184  0054A6  D001               	goto	l1615
  4185  0054A8                     l11693:
  4186  0054A8  80D8               	bsf	status,0,c
  4187  0054AA                     l1615:
  4188  0054AA  0012               	return	
  4189  0054AC                     __end_of___flge:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           postinc0	equ	0xFEE
  4198                           wreg	equ	0xFE8
  4199                           postdec1	equ	0xFE5
  4200                           fsr1h	equ	0xFE2
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function ___altofl *****************
  4210 ;; Defined at:
  4211 ;;		line 37 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\altofl.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  c               4    6[BANK0 ] long 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  sign            1   10[BANK0 ] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  4    6[BANK0 ] unsigned char 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4225 ;;      Params:         0       4       0       0       0       0       0
  4226 ;;      Locals:         0       1       0       0       0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0
  4228 ;;      Totals:         0       5       0       0       0       0       0
  4229 ;;Total ram usage:        5 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    3
  4232 ;; This function calls:
  4233 ;;		___flpack
  4234 ;; This function is called by:
  4235 ;;		_doWork
  4236 ;;		_floor
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text16
  4241  0054F8                     __ptext16:
  4242                           	opt stack 0
  4243  0054F8                     ___altofl:
  4244                           	opt stack 26
  4245                           
  4246                           ;incstack = 0
  4247                           ;incstack = 0
  4248  0054F8  0100               	movlb	0	; () banked
  4249  0054FA  6B6A               	clrf	___altofl@sign& (0+255),b
  4250  0054FC  AF69               	btfss	(___altofl@c+3)& (0+255),7,b
  4251  0054FE  D00A               	goto	l14089
  4252                           
  4253                           ; BSR set to: 0
  4254  005500  1F69               	comf	(___altofl@c+3)& (0+255),f,b
  4255  005502  1F68               	comf	(___altofl@c+2)& (0+255),f,b
  4256  005504  1F67               	comf	(___altofl@c+1)& (0+255),f,b
  4257  005506  6D66               	negf	___altofl@c& (0+255),b
  4258  005508  0E00               	movlw	0
  4259  00550A  2367               	addwfc	(___altofl@c+1)& (0+255),f,b
  4260  00550C  2368               	addwfc	(___altofl@c+2)& (0+255),f,b
  4261  00550E  2369               	addwfc	(___altofl@c+3)& (0+255),f,b
  4262                           
  4263                           ; BSR set to: 0
  4264  005510  0E01               	movlw	1
  4265  005512  6F6A               	movwf	___altofl@sign& (0+255),b
  4266  005514                     l14089:
  4267                           
  4268                           ; BSR set to: 0
  4269  005514  C066  F00E         	movff	___altofl@c,?___flpack
  4270  005518  C067  F00F         	movff	___altofl@c+1,?___flpack+1
  4271  00551C  C068  F010         	movff	___altofl@c+2,?___flpack+2
  4272  005520  C069  F011         	movff	___altofl@c+3,?___flpack+3
  4273  005524  0E96               	movlw	150
  4274  005526  6E12               	movwf	?___flpack+4,c
  4275  005528  C06A  F013         	movff	___altofl@sign,?___flpack+5
  4276  00552C  EC8C  F024         	call	___flpack	;wreg free
  4277  005530  C011  F069         	movff	?___flpack+3,?___altofl+3
  4278  005534  C010  F068         	movff	?___flpack+2,?___altofl+2
  4279  005538  C00F  F067         	movff	?___flpack+1,?___altofl+1
  4280  00553C  C00E  F066         	movff	?___flpack,?___altofl
  4281  005540  0012               	return	
  4282  005542                     __end_of___altofl:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           postdec1	equ	0xFE5
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function ___asflsub *****************
  4303 ;; Defined at:
  4304 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflsub.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;  f1p             2   58[COMRAM] PTR 
  4307 ;;		 -> exp@x(4), doWork@temp(4), 
  4308 ;;  f2              4   60[COMRAM] PTR 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  4   58[COMRAM] PTR 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/1
  4317 ;;		On exit  : F/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4320 ;;      Params:         6       0       0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0
  4323 ;;      Totals:         6       0       0       0       0       0       0
  4324 ;;Total ram usage:        6 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    5
  4327 ;; This function calls:
  4328 ;;		___flsub
  4329 ;; This function is called by:
  4330 ;;		_doWork
  4331 ;;		_exp
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text17
  4336  0053C6                     __ptext17:
  4337                           	opt stack 0
  4338  0053C6                     ___asflsub:
  4339                           	opt stack 24
  4340                           
  4341                           ;	Return value of ___asflsub is never used
  4342                           
  4343                           ;incstack = 0
  4344                           ;incstack = 0
  4345  0053C6  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  4346  0053CA  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4347  0053CE  0100               	movlb	0	; () banked
  4348  0053D0  CFDE F068          	movff	postinc2,?___flsub
  4349  0053D4  CFDE F069          	movff	postinc2,?___flsub+1
  4350  0053D8  CFDE F06A          	movff	postinc2,?___flsub+2
  4351  0053DC  CFDE F06B          	movff	postinc2,?___flsub+3
  4352  0053E0  C03D  F06C         	movff	___asflsub@f2,?___flsub+4
  4353  0053E4  C03E  F06D         	movff	___asflsub@f2+1,?___flsub+5
  4354  0053E8  C03F  F06E         	movff	___asflsub@f2+2,?___flsub+6
  4355  0053EC  C040  F06F         	movff	___asflsub@f2+3,?___flsub+7
  4356  0053F0  EC6B  F02B         	call	___flsub	;wreg free
  4357  0053F4  C03B  FFD9         	movff	___asflsub@f1p,fsr2l
  4358  0053F8  C03C  FFDA         	movff	___asflsub@f1p+1,fsr2h
  4359  0053FC  0100               	movlb	0	; () banked
  4360  0053FE  C068  FFDE         	movff	?___flsub,postinc2
  4361  005402  C069  FFDE         	movff	?___flsub+1,postinc2
  4362  005406  C06A  FFDE         	movff	?___flsub+2,postinc2
  4363  00540A  C06B  FFDD         	movff	?___flsub+3,postdec2
  4364  00540E  06D9               	decf	fsr2l,f,c
  4365  005410  06D9               	decf	fsr2l,f,c
  4366                           
  4367                           ; BSR set to: 0
  4368  005412  0012               	return	
  4369  005414                     __end_of___asflsub:
  4370                           	opt stack 0
  4371                           tblptru	equ	0xFF8
  4372                           tblptrh	equ	0xFF7
  4373                           tblptrl	equ	0xFF6
  4374                           tablat	equ	0xFF5
  4375                           prodh	equ	0xFF4
  4376                           prodl	equ	0xFF3
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           postdec1	equ	0xFE5
  4380                           fsr1h	equ	0xFE2
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           fsr2h	equ	0xFDA
  4386                           fsr2l	equ	0xFD9
  4387                           status	equ	0xFD8
  4388                           
  4389 ;; *************** function ___flsub *****************
  4390 ;; Defined at:
  4391 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flsub.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  f1              4    8[BANK0 ] PTR 
  4394 ;;  f2              4   12[BANK0 ] PTR 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;		None
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  4    8[BANK0 ] PTR 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2, status,0, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/1
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4406 ;;      Params:         0       8       0       0       0       0       0
  4407 ;;      Locals:         0       0       0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0
  4409 ;;      Totals:         0       8       0       0       0       0       0
  4410 ;;Total ram usage:        8 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    4
  4413 ;; This function calls:
  4414 ;;		___fladd
  4415 ;; This function is called by:
  4416 ;;		_doWork
  4417 ;;		___asflsub
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text18
  4422  0056D6                     __ptext18:
  4423                           	opt stack 0
  4424  0056D6                     ___flsub:
  4425                           	opt stack 25
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;incstack = 0
  4429                           ;incstack = 0
  4430  0056D6  0100               	movlb	0	; () banked
  4431  0056D8  0E80               	movlw	128
  4432  0056DA  1B6F               	xorwf	(___flsub@f2+3)& (0+255),f,b
  4433                           
  4434                           ; BSR set to: 0
  4435  0056DC  C068  F060         	movff	___flsub@f1,?___fladd
  4436  0056E0  C069  F061         	movff	___flsub@f1+1,?___fladd+1
  4437  0056E4  C06A  F062         	movff	___flsub@f1+2,?___fladd+2
  4438  0056E8  C06B  F063         	movff	___flsub@f1+3,?___fladd+3
  4439  0056EC  C06C  F064         	movff	___flsub@f2,?___fladd+4
  4440  0056F0  C06D  F065         	movff	___flsub@f2+1,?___fladd+5
  4441  0056F4  C06E  F066         	movff	___flsub@f2+2,?___fladd+6
  4442  0056F8  C06F  F067         	movff	___flsub@f2+3,?___fladd+7
  4443  0056FC  ECDC  F01E         	call	___fladd	;wreg free
  4444  005700  C063  F06B         	movff	?___fladd+3,?___flsub+3
  4445  005704  C062  F06A         	movff	?___fladd+2,?___flsub+2
  4446  005708  C061  F069         	movff	?___fladd+1,?___flsub+1
  4447  00570C  C060  F068         	movff	?___fladd,?___flsub
  4448  005710  0012               	return	
  4449  005712                     __end_of___flsub:
  4450                           	opt stack 0
  4451                           tblptru	equ	0xFF8
  4452                           tblptrh	equ	0xFF7
  4453                           tblptrl	equ	0xFF6
  4454                           tablat	equ	0xFF5
  4455                           prodh	equ	0xFF4
  4456                           prodl	equ	0xFF3
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1h	equ	0xFE2
  4461                           fsr1l	equ	0xFE1
  4462                           indf2	equ	0xFDF
  4463                           postinc2	equ	0xFDE
  4464                           postdec2	equ	0xFDD
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function ___asflmul *****************
  4470 ;; Defined at:
  4471 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\asflmul.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  mp              1    wreg     PTR 
  4474 ;;		 -> exp@x(4), 
  4475 ;;  multiplicand    4   51[COMRAM] PTR 
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  mp              1   55[COMRAM] PTR 
  4478 ;;		 -> exp@x(4), 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  4   51[COMRAM] PTR 
  4481 ;; Registers used:
  4482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : F/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4488 ;;      Params:         4       0       0       0       0       0       0
  4489 ;;      Locals:         1       0       0       0       0       0       0
  4490 ;;      Temps:          0       0       0       0       0       0       0
  4491 ;;      Totals:         5       0       0       0       0       0       0
  4492 ;;Total ram usage:        5 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    4
  4495 ;; This function calls:
  4496 ;;		___flmul
  4497 ;; This function is called by:
  4498 ;;		_exp
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text19
  4503  005542                     __ptext19:
  4504                           	opt stack 0
  4505  005542                     ___asflmul:
  4506                           	opt stack 24
  4507                           
  4508                           ;incstack = 0
  4509                           ;incstack = 0
  4510                           ;___asflmul@mp stored from wreg
  4511  005542  CFE8 F038          	movff	wreg,___asflmul@mp
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;	Return value of ___asflmul is never used
  4515  005546  5038               	movf	___asflmul@mp,w,c
  4516  005548  6ED9               	movwf	fsr2l,c
  4517  00554A  6ADA               	clrf	fsr2h,c
  4518  00554C  CFDE F01E          	movff	postinc2,?___flmul
  4519  005550  CFDE F01F          	movff	postinc2,?___flmul+1
  4520  005554  CFDE F020          	movff	postinc2,?___flmul+2
  4521  005558  CFDE F021          	movff	postinc2,?___flmul+3
  4522  00555C  C034  F022         	movff	___asflmul@multiplicand,?___flmul+4
  4523  005560  C035  F023         	movff	___asflmul@multiplicand+1,?___flmul+5
  4524  005564  C036  F024         	movff	___asflmul@multiplicand+2,?___flmul+6
  4525  005568  C037  F025         	movff	___asflmul@multiplicand+3,?___flmul+7
  4526  00556C  ECC4  F023         	call	___flmul	;wreg free
  4527  005570  5038               	movf	___asflmul@mp,w,c
  4528  005572  6ED9               	movwf	fsr2l,c
  4529  005574  6ADA               	clrf	fsr2h,c
  4530  005576  C01E  FFDE         	movff	?___flmul,postinc2
  4531  00557A  C01F  FFDE         	movff	?___flmul+1,postinc2
  4532  00557E  C020  FFDE         	movff	?___flmul+2,postinc2
  4533  005582  C021  FFDD         	movff	?___flmul+3,postdec2
  4534  005586  06D9               	decf	fsr2l,f,c
  4535  005588  06D9               	decf	fsr2l,f,c
  4536  00558A  0012               	return	
  4537  00558C                     __end_of___asflmul:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           postdec1	equ	0xFE5
  4548                           fsr1h	equ	0xFE2
  4549                           fsr1l	equ	0xFE1
  4550                           indf2	equ	0xFDF
  4551                           postinc2	equ	0xFDE
  4552                           postdec2	equ	0xFDD
  4553                           fsr2h	equ	0xFDA
  4554                           fsr2l	equ	0xFD9
  4555                           status	equ	0xFD8
  4556                           
  4557 ;; *************** function ___fldiv *****************
  4558 ;; Defined at:
  4559 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fldiv.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;  f1              4   16[BANK0 ] PTR 
  4562 ;;  f2              4   20[BANK0 ] PTR 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  f3              4   32[BANK0 ] PTR 
  4565 ;;  sign            1   37[BANK0 ] unsigned char 
  4566 ;;  exp             1   36[BANK0 ] unsigned char 
  4567 ;;  cntr            1   31[BANK0 ] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  4   16[BANK0 ] unsigned char 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4577 ;;      Params:         0       8       0       0       0       0       0
  4578 ;;      Locals:         0      14       0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0
  4580 ;;      Totals:         0      22       0       0       0       0       0
  4581 ;;Total ram usage:       22 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    3
  4584 ;; This function calls:
  4585 ;;		___flpack
  4586 ;; This function is called by:
  4587 ;;		_doWork
  4588 ;;		_Celsius2Fahrenheit
  4589 ;;		___asfldiv
  4590 ;;		_exp
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text20
  4595  004CB6                     __ptext20:
  4596                           	opt stack 0
  4597  004CB6                     ___fldiv:
  4598                           	opt stack 26
  4599                           
  4600                           ;incstack = 0
  4601                           ;incstack = 0
  4602  004CB6  0100               	movlb	0	; () banked
  4603  004CB8  3572               	rlcf	(___fldiv@f1+2)& (0+255),w,b
  4604  004CBA  3573               	rlcf	(___fldiv@f1+3)& (0+255),w,b
  4605  004CBC  6F84               	movwf	___fldiv@exp& (0+255),b
  4606  004CBE  6784               	tstfsz	___fldiv@exp& (0+255),b
  4607  004CC0  D001               	goto	l14173
  4608  004CC2  D006               	goto	u13560
  4609  004CC4                     l14173:
  4610                           
  4611                           ; BSR set to: 0
  4612  004CC4  0100               	movlb	0	; () banked
  4613  004CC6  3576               	rlcf	(___fldiv@f2+2)& (0+255),w,b
  4614  004CC8  3577               	rlcf	(___fldiv@f2+3)& (0+255),w,b
  4615  004CCA  6F85               	movwf	___fldiv@sign& (0+255),b
  4616  004CCC  6785               	tstfsz	___fldiv@sign& (0+255),b
  4617  004CCE  D005               	goto	l14177
  4618  004CD0                     u13560:
  4619                           
  4620                           ; BSR set to: 0
  4621  004CD0  6B70               	clrf	?___fldiv& (0+255),b
  4622  004CD2  6B71               	clrf	(?___fldiv+1)& (0+255),b
  4623  004CD4  6B72               	clrf	(?___fldiv+2)& (0+255),b
  4624  004CD6  6B73               	clrf	(?___fldiv+3)& (0+255),b
  4625  004CD8  D044               	goto	l1606
  4626  004CDA                     l14177:
  4627                           
  4628                           ; BSR set to: 0
  4629  004CDA  5185               	movf	___fldiv@sign& (0+255),w,b
  4630  004CDC  0F89               	addlw	137
  4631  004CDE  5F84               	subwf	___fldiv@exp& (0+255),f,b
  4632                           
  4633                           ; BSR set to: 0
  4634  004CE0  C073  F085         	movff	___fldiv@f1+3,___fldiv@sign
  4635  004CE4  0100               	movlb	0	; () banked
  4636  004CE6  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  4637  004CE8  1B85               	xorwf	___fldiv@sign& (0+255),f,b
  4638  004CEA  0E80               	movlw	128
  4639  004CEC  1785               	andwf	___fldiv@sign& (0+255),f,b
  4640                           
  4641                           ; BSR set to: 0
  4642  004CEE  8F72               	bsf	(___fldiv@f1+2)& (0+255),7,b
  4643                           
  4644                           ; BSR set to: 0
  4645  004CF0  6B73               	clrf	(___fldiv@f1+3)& (0+255),b
  4646  004CF2  8F76               	bsf	(___fldiv@f2+2)& (0+255),7,b
  4647                           
  4648                           ; BSR set to: 0
  4649  004CF4  6B77               	clrf	(___fldiv@f2+3)& (0+255),b
  4650                           
  4651                           ; BSR set to: 0
  4652  004CF6  0E20               	movlw	32
  4653  004CF8  6F7F               	movwf	___fldiv@cntr& (0+255),b
  4654  004CFA                     l14189:
  4655                           
  4656                           ; BSR set to: 0
  4657  004CFA  90D8               	bcf	status,0,c
  4658  004CFC  3780               	rlcf	___fldiv@f3& (0+255),f,b
  4659  004CFE  3781               	rlcf	(___fldiv@f3+1)& (0+255),f,b
  4660  004D00  3782               	rlcf	(___fldiv@f3+2)& (0+255),f,b
  4661  004D02  3783               	rlcf	(___fldiv@f3+3)& (0+255),f,b
  4662                           
  4663                           ; BSR set to: 0
  4664  004D04  5174               	movf	___fldiv@f2& (0+255),w,b
  4665  004D06  5D70               	subwf	___fldiv@f1& (0+255),w,b
  4666  004D08  5175               	movf	(___fldiv@f2+1)& (0+255),w,b
  4667  004D0A  5971               	subwfb	(___fldiv@f1+1)& (0+255),w,b
  4668  004D0C  5176               	movf	(___fldiv@f2+2)& (0+255),w,b
  4669  004D0E  5972               	subwfb	(___fldiv@f1+2)& (0+255),w,b
  4670  004D10  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  4671  004D12  5973               	subwfb	(___fldiv@f1+3)& (0+255),w,b
  4672  004D14  E309               	bnc	l14197
  4673                           
  4674                           ; BSR set to: 0
  4675  004D16  5174               	movf	___fldiv@f2& (0+255),w,b
  4676  004D18  5F70               	subwf	___fldiv@f1& (0+255),f,b
  4677  004D1A  5175               	movf	(___fldiv@f2+1)& (0+255),w,b
  4678  004D1C  5B71               	subwfb	(___fldiv@f1+1)& (0+255),f,b
  4679  004D1E  5176               	movf	(___fldiv@f2+2)& (0+255),w,b
  4680  004D20  5B72               	subwfb	(___fldiv@f1+2)& (0+255),f,b
  4681  004D22  5177               	movf	(___fldiv@f2+3)& (0+255),w,b
  4682  004D24  5B73               	subwfb	(___fldiv@f1+3)& (0+255),f,b
  4683                           
  4684                           ; BSR set to: 0
  4685  004D26  8180               	bsf	___fldiv@f3& (0+255),0,b
  4686  004D28                     l14197:
  4687                           
  4688                           ; BSR set to: 0
  4689  004D28  90D8               	bcf	status,0,c
  4690  004D2A  3770               	rlcf	___fldiv@f1& (0+255),f,b
  4691  004D2C  3771               	rlcf	(___fldiv@f1+1)& (0+255),f,b
  4692  004D2E  3772               	rlcf	(___fldiv@f1+2)& (0+255),f,b
  4693  004D30  3773               	rlcf	(___fldiv@f1+3)& (0+255),f,b
  4694                           
  4695                           ; BSR set to: 0
  4696  004D32  2F7F               	decfsz	___fldiv@cntr& (0+255),f,b
  4697  004D34  D7E2               	goto	l14189
  4698                           
  4699                           ; BSR set to: 0
  4700  004D36  C080  F00E         	movff	___fldiv@f3,?___flpack
  4701  004D3A  C081  F00F         	movff	___fldiv@f3+1,?___flpack+1
  4702  004D3E  C082  F010         	movff	___fldiv@f3+2,?___flpack+2
  4703  004D42  C083  F011         	movff	___fldiv@f3+3,?___flpack+3
  4704  004D46  C084  F012         	movff	___fldiv@exp,?___flpack+4
  4705  004D4A  C085  F013         	movff	___fldiv@sign,?___flpack+5
  4706  004D4E  EC8C  F024         	call	___flpack	;wreg free
  4707  004D52  C011  F073         	movff	?___flpack+3,?___fldiv+3
  4708  004D56  C010  F072         	movff	?___flpack+2,?___fldiv+2
  4709  004D5A  C00F  F071         	movff	?___flpack+1,?___fldiv+1
  4710  004D5E  C00E  F070         	movff	?___flpack,?___fldiv
  4711  004D62                     l1606:
  4712  004D62  0012               	return	
  4713  004D64                     __end_of___fldiv:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postdec1	equ	0xFE5
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           postinc2	equ	0xFDE
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function _vscp_doOneSecondWork *****************
  4734 ;; Defined at:
  4735 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;		None
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;		None
  4740 ;; Return value:  Size  Location     Type
  4741 ;;		None               void
  4742 ;; Registers used:
  4743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4744 ;; Tracked objects:
  4745 ;;		On entry : F/0
  4746 ;;		On exit  : F/0
  4747 ;;		Unchanged: 0/0
  4748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4749 ;;      Params:         0       0       0       0       0       0       0
  4750 ;;      Locals:         0       0       0       0       0       0       0
  4751 ;;      Temps:          0       1       0       0       0       0       0
  4752 ;;      Totals:         0       1       0       0       0       0       0
  4753 ;;Total ram usage:        1 bytes
  4754 ;; Hardware stack levels used:    1
  4755 ;; Hardware stack levels required when called:    8
  4756 ;; This function calls:
  4757 ;;		_vscp_getZone
  4758 ;;		_vscp_getSubzone
  4759 ;;		_vscp_sendHeartBeat
  4760 ;; This function is called by:
  4761 ;;		_main
  4762 ;; This function uses a non-reentrant model
  4763 ;;
  4764                           
  4765                           	psect	text21
  4766  0054AC                     __ptext21:
  4767                           	opt stack 0
  4768  0054AC                     _vscp_doOneSecondWork:
  4769                           	opt stack 22
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;vscp_firmware.c: 526: ++vscp_second;
  4773                           
  4774                           ;incstack = 0
  4775                           ;incstack = 0
  4776  0054AC  2A51               	incf	_vscp_second,f,c
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  4780  0054AE  0E3B               	movlw	59
  4781  0054B0  6451               	cpfsgt	_vscp_second,c
  4782  0054B2  D00C               	goto	l10297
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;vscp_firmware.c: 529: vscp_second = 0;
  4786  0054B4  6A51               	clrf	_vscp_second,c
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;vscp_firmware.c: 530: vscp_minute++;
  4790  0054B6  2A4D               	incf	_vscp_minute,f,c
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  4794  0054B8  51C4               	movf	_vscp_node_state& (0+255),w,b
  4795  0054BA  0A03               	xorlw	3
  4796  0054BC  E107               	bnz	l10297
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  4800                           ;vscp_firmware.c: 535: vscp_getSubzone());
  4801  0054BE  ECDB  F02D         	call	_vscp_getSubzone	;wreg free
  4802  0054C2  6E44               	movwf	?_vscp_sendHeartBeat,c
  4803  0054C4  ECE0  F02D         	call	_vscp_getZone	;wreg free
  4804  0054C8  EC91  F02C         	call	_vscp_sendHeartBeat
  4805  0054CC                     l10297:
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;vscp_firmware.c: 536: }
  4809                           ;vscp_firmware.c: 537: }
  4810                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  4811  0054CC  0E3B               	movlw	59
  4812  0054CE  644D               	cpfsgt	_vscp_minute,c
  4813  0054D0  D002               	goto	l10303
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;vscp_firmware.c: 540: vscp_minute = 0;
  4817  0054D2  6A4D               	clrf	_vscp_minute,c
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;vscp_firmware.c: 541: vscp_hour++;
  4821  0054D4  2BC1               	incf	_vscp_hour& (0+255),f,b
  4822  0054D6                     l10303:
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;vscp_firmware.c: 542: }
  4826                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  4827  0054D6  0E17               	movlw	23
  4828  0054D8  65C1               	cpfsgt	_vscp_hour& (0+255),b
  4829  0054DA  D001               	goto	l10307
  4830                           
  4831                           ; BSR set to: 0
  4832  0054DC  6BC1               	clrf	_vscp_hour& (0+255),b
  4833  0054DE                     l10307:
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  4837  0054DE  51C4               	movf	_vscp_node_state& (0+255),w,b
  4838  0054E0  0A03               	xorlw	3
  4839  0054E2  E109               	bnz	l1102
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  4843  0054E4  2A4B               	incf	_vscp_guid_reset,f,c
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  4847  0054E6  C04B  F07F         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  4848  0054EA  0E0F               	movlw	15
  4849  0054EC  177F               	andwf	??_vscp_doOneSecondWork& (0+255),f,b
  4850  0054EE  0E02               	movlw	2
  4851  0054F0  5D7F               	subwf	??_vscp_doOneSecondWork& (0+255),w,b
  4852  0054F2  B0D8               	btfsc	status,0,c
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  4856  0054F4  6A4B               	clrf	_vscp_guid_reset,c
  4857  0054F6                     l1102:
  4858                           
  4859                           ; BSR set to: 0
  4860  0054F6  0012               	return	
  4861  0054F8                     __end_of_vscp_doOneSecondWork:
  4862                           	opt stack 0
  4863                           tblptru	equ	0xFF8
  4864                           tblptrh	equ	0xFF7
  4865                           tblptrl	equ	0xFF6
  4866                           tablat	equ	0xFF5
  4867                           prodh	equ	0xFF4
  4868                           prodl	equ	0xFF3
  4869                           postinc0	equ	0xFEE
  4870                           wreg	equ	0xFE8
  4871                           postdec1	equ	0xFE5
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _vscp_sendHeartBeat *****************
  4882 ;; Defined at:
  4883 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  zone            1    wreg     unsigned char 
  4886 ;;  subzone         1   67[COMRAM] unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  zone            1   68[COMRAM] unsigned char 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;		None               void
  4891 ;; Registers used:
  4892 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : F/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4898 ;;      Params:         1       0       0       0       0       0       0
  4899 ;;      Locals:         1       0       0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0
  4901 ;;      Totals:         2       0       0       0       0       0       0
  4902 ;;Total ram usage:        2 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		_vscp_sendEvent
  4907 ;; This function is called by:
  4908 ;;		_vscp_doOneSecondWork
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text22
  4913  005922                     __ptext22:
  4914                           	opt stack 0
  4915  005922                     _vscp_sendHeartBeat:
  4916                           	opt stack 22
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;incstack = 0
  4920                           ;incstack = 0
  4921                           ;vscp_sendHeartBeat@zone stored from wreg
  4922  005922  CFE8 F045          	movff	wreg,vscp_sendHeartBeat@zone
  4923                           
  4924                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  4925  005926  0E83               	movlw	131
  4926  005928  0100               	movlb	0	; () banked
  4927  00592A  6FD3               	movwf	_vscp_omsg& (0+255),b
  4928                           
  4929                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  4930  00592C  0E07               	movlw	7
  4931  00592E  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  4932                           
  4933                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  4934  005930  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  4935  005932  0E14               	movlw	20
  4936  005934  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  4937                           
  4938                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  4939  005936  0E09               	movlw	9
  4940  005938  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  4944  00593A  6BD8               	clrf	(_vscp_omsg+5)& (0+255),b
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  4948  00593C  C045  F0D9         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  4952  005940  C044  F0DA         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;vscp_firmware.c: 388: vscp_sendEvent();
  4956  005944  EF7D  F02C         	goto	_vscp_sendEvent	;wreg free
  4957  005948                     __end_of_vscp_sendHeartBeat:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           postdec1	equ	0xFE5
  4968                           fsr1h	equ	0xFE2
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           fsr2h	equ	0xFDA
  4974                           fsr2l	equ	0xFD9
  4975                           status	equ	0xFD8
  4976                           
  4977 ;; *************** function _vscp_getSubzone *****************
  4978 ;; Defined at:
  4979 ;;		line 2747 in file "../main.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      unsigned char 
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : F/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4993 ;;      Params:         0       0       0       0       0       0       0
  4994 ;;      Locals:         0       0       0       0       0       0       0
  4995 ;;      Temps:          0       0       0       0       0       0       0
  4996 ;;      Totals:         0       0       0       0       0       0       0
  4997 ;;Total ram usage:        0 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    3
  5000 ;; This function calls:
  5001 ;;		_readEEPROM
  5002 ;; This function is called by:
  5003 ;;		_vscp_doOneSecondWork
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           	psect	text23
  5008  005BB6                     __ptext23:
  5009                           	opt stack 0
  5010  005BB6                     _vscp_getSubzone:
  5011                           	opt stack 26
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;main.c: 2748: return readEEPROM(0x42);
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;incstack = 0
  5018                           ;incstack = 0
  5019  005BB6  6A17               	clrf	?_readEEPROM+1,c
  5020  005BB8  0E42               	movlw	66
  5021  005BBA  6E16               	movwf	?_readEEPROM,c
  5022  005BBC  EFA4  F02D         	goto	_readEEPROM	;wreg free
  5023  005BC0                     __end_of_vscp_getSubzone:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           postdec1	equ	0xFE5
  5034                           fsr1h	equ	0xFE2
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _vscp_getZone *****************
  5044 ;; Defined at:
  5045 ;;		line 2738 in file "../main.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      unsigned char 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5059 ;;      Params:         0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    3
  5066 ;; This function calls:
  5067 ;;		_readEEPROM
  5068 ;; This function is called by:
  5069 ;;		_vscp_doOneSecondWork
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text24
  5074  005BC0                     __ptext24:
  5075                           	opt stack 0
  5076  005BC0                     _vscp_getZone:
  5077                           	opt stack 26
  5078                           
  5079                           ;main.c: 2739: return readEEPROM(0x41);
  5080                           
  5081                           ;incstack = 0
  5082                           ;incstack = 0
  5083  005BC0  6A17               	clrf	?_readEEPROM+1,c
  5084  005BC2  0E41               	movlw	65
  5085  005BC4  6E16               	movwf	?_readEEPROM,c
  5086  005BC6  EFA4  F02D         	goto	_readEEPROM	;wreg free
  5087  005BCA                     __end_of_vscp_getZone:
  5088                           	opt stack 0
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _doOneSecondWork *****************
  5108 ;; Defined at:
  5109 ;;		line 530 in file "../main.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  setpoint        2   59[BANK0 ] short 
  5114 ;;  i               1   61[BANK0 ] unsigned char 
  5115 ;;  tmp             1   58[BANK0 ] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;		None               void
  5118 ;; Registers used:
  5119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : F/0
  5122 ;;		On exit  : F/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5125 ;;      Params:         0       0       0       0       0       0       0
  5126 ;;      Locals:         0       4       0       0       0       0       0
  5127 ;;      Temps:          0       7       0       0       0       0       0
  5128 ;;      Totals:         0      11       0       0       0       0       0
  5129 ;;Total ram usage:       11 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    8
  5132 ;; This function calls:
  5133 ;;		_writeEEPROM
  5134 ;;		_readEEPROM
  5135 ;;		_sendTempEvent
  5136 ;;		_vscp_sendEvent
  5137 ;;		___wmul
  5138 ;; This function is called by:
  5139 ;;		_main
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text25
  5144  001870                     __ptext25:
  5145                           	opt stack 0
  5146  001870                     _doOneSecondWork:
  5147                           	opt stack 22
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;main.c: 531: uint8_t tmp;
  5151                           ;main.c: 532: uint8_t i;
  5152                           ;main.c: 533: int16_t setpoint;
  5153                           ;main.c: 535: for (i = 0; i < 6; i++) {
  5154                           
  5155                           ;incstack = 0
  5156                           ;incstack = 0
  5157  001870  6B9D               	clrf	doOneSecondWork@i& (0+255),b
  5158  001872                     l13741:
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;main.c: 541: if (current_temp[ i ] < ((int16_t)( (((uint16_t)readEEPROM(0x7F + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x80 + 2*i)) ) ) {
  5162  001872  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5163  001874  0D02               	mullw	2
  5164  001876  0E7F               	movlw	127
  5165  001878  24F3               	addwf	prodl,w,c
  5166  00187A  6E16               	movwf	?_readEEPROM,c
  5167  00187C  0E00               	movlw	0
  5168  00187E  20F4               	addwfc	prodh,w,c
  5169  001880  6E17               	movwf	?_readEEPROM+1,c
  5170  001882  ECA4  F02D         	call	_readEEPROM	;wreg free
  5171  001886  0100               	movlb	0	; () banked
  5172  001888  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5173  00188A  6B93               	clrf	??_doOneSecondWork& (0+255),b
  5174  00188C  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5175  00188E  0D02               	mullw	2
  5176  001890  0E80               	movlw	128
  5177  001892  24F3               	addwf	prodl,w,c
  5178  001894  6E16               	movwf	?_readEEPROM,c
  5179  001896  0E00               	movlw	0
  5180  001898  20F4               	addwfc	prodh,w,c
  5181  00189A  6E17               	movwf	?_readEEPROM+1,c
  5182  00189C  ECA4  F02D         	call	_readEEPROM	;wreg free
  5183  0018A0  0100               	movlb	0	; () banked
  5184  0018A2  2793               	addwf	??_doOneSecondWork& (0+255),f,b
  5185  0018A4  0E00               	movlw	0
  5186  0018A6  2394               	addwfc	(??_doOneSecondWork+1)& (0+255),f,b
  5187  0018A8  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5188  0018AA  0D02               	mullw	2
  5189  0018AC  50F3               	movf	prodl,w,c
  5190  0018AE  0FA3               	addlw	low _current_temp
  5191  0018B0  6ED9               	movwf	fsr2l,c
  5192  0018B2  6ADA               	clrf	fsr2h,c
  5193  0018B4  CFDE F095          	movff	postinc2,??_doOneSecondWork+2
  5194  0018B8  CFDD F096          	movff	postdec2,??_doOneSecondWork+3
  5195  0018BC  5196               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  5196  0018BE  0A80               	xorlw	128
  5197  0018C0  6F97               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5198  0018C2  5193               	movf	??_doOneSecondWork& (0+255),w,b
  5199  0018C4  5D95               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  5200  0018C6  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5201  0018C8  0A80               	xorlw	128
  5202  0018CA  5997               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  5203  0018CC  E234               	bc	l209
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;main.c: 544: writeEEPROM(0x7F + 2*i, current_temp[ i ] >> 8);
  5207  0018CE  90D8               	bcf	status,0,c
  5208  0018D0  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5209  0018D2  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5210  0018D4  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5211  0018D6  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5212  0018D8  0E7F               	movlw	127
  5213  0018DA  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5214  0018DC  6E0E               	movwf	?_writeEEPROM,c
  5215  0018DE  0E00               	movlw	0
  5216  0018E0  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5217  0018E2  6E0F               	movwf	?_writeEEPROM+1,c
  5218  0018E4  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5219  0018E6  0D02               	mullw	2
  5220  0018E8  50F3               	movf	prodl,w,c
  5221  0018EA  0FA3               	addlw	low _current_temp
  5222  0018EC  6ED9               	movwf	fsr2l,c
  5223  0018EE  6ADA               	clrf	fsr2h,c
  5224  0018F0  CFDE F095          	movff	postinc2,??_doOneSecondWork+2
  5225  0018F4  CFDD F096          	movff	postdec2,??_doOneSecondWork+3
  5226  0018F8  C096  F095         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  5227  0018FC  6B96               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5228  0018FE  BF95               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  5229  001900  6996               	setf	(??_doOneSecondWork+3)& (0+255),b
  5230  001902  5195               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  5231  001904  6E10               	movwf	?_writeEEPROM+2,c
  5232  001906  ECA4  F02C         	call	_writeEEPROM	;wreg free
  5233                           
  5234                           ;main.c: 545: writeEEPROM(0x80 + 2*i, current_temp[ i ] & 0xff);
  5235  00190A  90D8               	bcf	status,0,c
  5236  00190C  0100               	movlb	0	; () banked
  5237  00190E  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5238  001910  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5239  001912  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5240  001914  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5241  001916  0E80               	movlw	128
  5242  001918  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5243  00191A  6E0E               	movwf	?_writeEEPROM,c
  5244  00191C  0E00               	movlw	0
  5245  00191E  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5246  001920  6E0F               	movwf	?_writeEEPROM+1,c
  5247  001922  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5248  001924  0D02               	mullw	2
  5249  001926  50F3               	movf	prodl,w,c
  5250  001928  0FA3               	addlw	low _current_temp
  5251  00192A  6ED9               	movwf	fsr2l,c
  5252  00192C  6ADA               	clrf	fsr2h,c
  5253  00192E  50DF               	movf	indf2,w,c
  5254  001930  6E10               	movwf	?_writeEEPROM+2,c
  5255  001932  ECA4  F02C         	call	_writeEEPROM	;wreg free
  5256  001936                     l209:
  5257                           
  5258                           ;main.c: 546: }
  5259                           ;main.c: 552: if (current_temp[ i ] > ((int16_t)( (((uint16_t)readEEPROM(0x8B + 2*i))<<8
      +                          ) + (uint16_t)readEEPROM(0x8C + 2*i )) ) ) {
  5260  001936  0100               	movlb	0	; () banked
  5261  001938  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5262  00193A  0D02               	mullw	2
  5263  00193C  50F3               	movf	prodl,w,c
  5264  00193E  0FA3               	addlw	low _current_temp
  5265  001940  6ED9               	movwf	fsr2l,c
  5266  001942  6ADA               	clrf	fsr2h,c
  5267  001944  CFDE F093          	movff	postinc2,??_doOneSecondWork
  5268  001948  CFDD F094          	movff	postdec2,??_doOneSecondWork+1
  5269  00194C  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5270  00194E  0D02               	mullw	2
  5271  001950  0E8B               	movlw	139
  5272  001952  24F3               	addwf	prodl,w,c
  5273  001954  6E16               	movwf	?_readEEPROM,c
  5274  001956  0E00               	movlw	0
  5275  001958  20F4               	addwfc	prodh,w,c
  5276  00195A  6E17               	movwf	?_readEEPROM+1,c
  5277  00195C  ECA4  F02D         	call	_readEEPROM	;wreg free
  5278  001960  0100               	movlb	0	; () banked
  5279  001962  6F96               	movwf	(??_doOneSecondWork+3)& (0+255),b
  5280  001964  6B95               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5281  001966  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5282  001968  0D02               	mullw	2
  5283  00196A  0E8C               	movlw	140
  5284  00196C  24F3               	addwf	prodl,w,c
  5285  00196E  6E16               	movwf	?_readEEPROM,c
  5286  001970  0E00               	movlw	0
  5287  001972  20F4               	addwfc	prodh,w,c
  5288  001974  6E17               	movwf	?_readEEPROM+1,c
  5289  001976  ECA4  F02D         	call	_readEEPROM	;wreg free
  5290  00197A  0100               	movlb	0	; () banked
  5291  00197C  2795               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  5292  00197E  0E00               	movlw	0
  5293  001980  2396               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  5294  001982  5196               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  5295  001984  0A80               	xorlw	128
  5296  001986  6F97               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5297  001988  5193               	movf	??_doOneSecondWork& (0+255),w,b
  5298  00198A  5D95               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  5299  00198C  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5300  00198E  0A80               	xorlw	128
  5301  001990  5997               	subwfb	(??_doOneSecondWork+4)& (0+255),w,b
  5302  001992  E234               	bc	l13747
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;main.c: 555: writeEEPROM(0x8B + 2*i, current_temp[ i ] >> 8);
  5306  001994  90D8               	bcf	status,0,c
  5307  001996  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5308  001998  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5309  00199A  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5310  00199C  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5311  00199E  0E8B               	movlw	139
  5312  0019A0  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5313  0019A2  6E0E               	movwf	?_writeEEPROM,c
  5314  0019A4  0E00               	movlw	0
  5315  0019A6  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5316  0019A8  6E0F               	movwf	?_writeEEPROM+1,c
  5317  0019AA  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5318  0019AC  0D02               	mullw	2
  5319  0019AE  50F3               	movf	prodl,w,c
  5320  0019B0  0FA3               	addlw	low _current_temp
  5321  0019B2  6ED9               	movwf	fsr2l,c
  5322  0019B4  6ADA               	clrf	fsr2h,c
  5323  0019B6  CFDE F095          	movff	postinc2,??_doOneSecondWork+2
  5324  0019BA  CFDD F096          	movff	postdec2,??_doOneSecondWork+3
  5325  0019BE  C096  F095         	movff	??_doOneSecondWork+3,??_doOneSecondWork+2
  5326  0019C2  6B96               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5327  0019C4  BF95               	btfsc	(??_doOneSecondWork+2)& (0+255),7,b
  5328  0019C6  6996               	setf	(??_doOneSecondWork+3)& (0+255),b
  5329  0019C8  5195               	movf	(??_doOneSecondWork+2)& (0+255),w,b
  5330  0019CA  6E10               	movwf	?_writeEEPROM+2,c
  5331  0019CC  ECA4  F02C         	call	_writeEEPROM	;wreg free
  5332                           
  5333                           ;main.c: 556: writeEEPROM(0x8C + 2*i, current_temp[ i ] & 0xff );
  5334  0019D0  90D8               	bcf	status,0,c
  5335  0019D2  0100               	movlb	0	; () banked
  5336  0019D4  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5337  0019D6  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5338  0019D8  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5339  0019DA  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5340  0019DC  0E8C               	movlw	140
  5341  0019DE  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5342  0019E0  6E0E               	movwf	?_writeEEPROM,c
  5343  0019E2  0E00               	movlw	0
  5344  0019E4  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5345  0019E6  6E0F               	movwf	?_writeEEPROM+1,c
  5346  0019E8  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5347  0019EA  0D02               	mullw	2
  5348  0019EC  50F3               	movf	prodl,w,c
  5349  0019EE  0FA3               	addlw	low _current_temp
  5350  0019F0  6ED9               	movwf	fsr2l,c
  5351  0019F2  6ADA               	clrf	fsr2h,c
  5352  0019F4  50DF               	movf	indf2,w,c
  5353  0019F6  6E10               	movwf	?_writeEEPROM+2,c
  5354  0019F8  ECA4  F02C         	call	_writeEEPROM	;wreg free
  5355  0019FC                     l13747:
  5356                           
  5357                           ;main.c: 557: }
  5358                           ;main.c: 562: tmp = readEEPROM(0x49 + i);
  5359  0019FC  0E49               	movlw	73
  5360  0019FE  0100               	movlb	0	; () banked
  5361  001A00  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5362  001A02  6E16               	movwf	?_readEEPROM,c
  5363  001A04  6A17               	clrf	?_readEEPROM+1,c
  5364  001A06  0E00               	movlw	0
  5365  001A08  2217               	addwfc	?_readEEPROM+1,f,c
  5366  001A0A  ECA4  F02D         	call	_readEEPROM	;wreg free
  5367  001A0E  0100               	movlb	0	; () banked
  5368  001A10  6F9A               	movwf	doOneSecondWork@tmp& (0+255),b
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;main.c: 563: if (tmp && (seconds_temp[i] > tmp)) {
  5372  001A12  519A               	movf	doOneSecondWork@tmp& (0+255),w,b
  5373  001A14  E016               	bz	l13757
  5374                           
  5375                           ; BSR set to: 0
  5376  001A16  0E00               	movlw	low _seconds_temp
  5377  001A18  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5378  001A1A  6ED9               	movwf	fsr2l,c
  5379  001A1C  6ADA               	clrf	fsr2h,c
  5380  001A1E  0E01               	movlw	high _seconds_temp
  5381  001A20  22DA               	addwfc	fsr2h,f,c
  5382  001A22  50DF               	movf	indf2,w,c
  5383  001A24  619A               	cpfslt	doOneSecondWork@tmp& (0+255),b
  5384  001A26  D00D               	goto	l13757
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;main.c: 566: if (sendTempEvent(i)) {
  5388  001A28  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5389  001A2A  EC31  F028         	call	_sendTempEvent
  5390  001A2E  0900               	iorlw	0
  5391  001A30  E008               	bz	l13757
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;main.c: 567: seconds_temp[i] = 0;
  5395  001A32  0E00               	movlw	low _seconds_temp
  5396  001A34  0100               	movlb	0	; () banked
  5397  001A36  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5398  001A38  6ED9               	movwf	fsr2l,c
  5399  001A3A  6ADA               	clrf	fsr2h,c
  5400  001A3C  0E01               	movlw	high _seconds_temp
  5401  001A3E  22DA               	addwfc	fsr2h,f,c
  5402  001A40  6ADF               	clrf	indf2,c
  5403  001A42                     l13757:
  5404                           
  5405                           ;main.c: 568: }
  5406                           ;main.c: 570: }
  5407                           ;main.c: 575: if (0x80 & readEEPROM(0x43 + i)) {
  5408  001A42  0E43               	movlw	67
  5409  001A44  0100               	movlb	0	; () banked
  5410  001A46  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5411  001A48  6E16               	movwf	?_readEEPROM,c
  5412  001A4A  6A17               	clrf	?_readEEPROM+1,c
  5413  001A4C  0E00               	movlw	0
  5414  001A4E  2217               	addwfc	?_readEEPROM+1,f,c
  5415  001A50  ECA4  F02D         	call	_readEEPROM	;wreg free
  5416  001A54  0100               	movlb	0	; () banked
  5417  001A56  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5418  001A58  AF93               	btfss	??_doOneSecondWork& (0+255),7,b
  5419  001A5A  D0CA               	goto	l13811
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;main.c: 578: if (low_alarm & (1 << i)) {
  5423  001A5C  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  5424  001A60  0E01               	movlw	1
  5425  001A62  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5426  001A64  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  5427  001A66  D002               	goto	u12804
  5428  001A68                     u12805:
  5429  001A68  90D8               	bcf	status,0,c
  5430  001A6A  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5431  001A6C                     u12804:
  5432  001A6C  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  5433  001A6E  D7FC               	goto	u12805
  5434  001A70  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5435  001A72  15BF               	andwf	_low_alarm& (0+255),w,b
  5436  001A74  E058               	bz	l13785
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;main.c: 581: if (readEEPROM(0x43 + i) & (1<<3)) {
  5440  001A76  0E43               	movlw	67
  5441  001A78  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5442  001A7A  6E16               	movwf	?_readEEPROM,c
  5443  001A7C  6A17               	clrf	?_readEEPROM+1,c
  5444  001A7E  0E00               	movlw	0
  5445  001A80  2217               	addwfc	?_readEEPROM+1,f,c
  5446  001A82  ECA4  F02D         	call	_readEEPROM	;wreg free
  5447  001A86  0100               	movlb	0	; () banked
  5448  001A88  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5449  001A8A  A793               	btfss	??_doOneSecondWork& (0+255),3,b
  5450  001A8C  D04C               	goto	l13785
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;main.c: 583: vscp_omsg.priority = 0x00;
  5454  001A8E  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;main.c: 584: vscp_omsg.flags = 0x80 + 3;
  5458  001A90  0E83               	movlw	131
  5459  001A92  6FD3               	movwf	_vscp_omsg& (0+255),b
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;main.c: 587: if (readEEPROM(0x43 + i) & (1<<5)) {
  5463  001A94  0E43               	movlw	67
  5464  001A96  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5465  001A98  6E16               	movwf	?_readEEPROM,c
  5466  001A9A  6A17               	clrf	?_readEEPROM+1,c
  5467  001A9C  0E00               	movlw	0
  5468  001A9E  2217               	addwfc	?_readEEPROM+1,f,c
  5469  001AA0  ECA4  F02D         	call	_readEEPROM	;wreg free
  5470  001AA4  0100               	movlb	0	; () banked
  5471  001AA6  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5472  001AA8  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  5473  001AAA  D016               	goto	l13775
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;main.c: 589: if (readEEPROM(0x43 + i) & (1<<6)) {
  5477  001AAC  0E43               	movlw	67
  5478  001AAE  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5479  001AB0  6E16               	movwf	?_readEEPROM,c
  5480  001AB2  6A17               	clrf	?_readEEPROM+1,c
  5481  001AB4  0E00               	movlw	0
  5482  001AB6  2217               	addwfc	?_readEEPROM+1,f,c
  5483  001AB8  ECA4  F02D         	call	_readEEPROM	;wreg free
  5484  001ABC  0100               	movlb	0	; () banked
  5485  001ABE  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5486  001AC0  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  5487  001AC2  D005               	goto	l13773
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;main.c: 590: vscp_omsg.vscp_class = 30;
  5491  001AC4  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5492  001AC6  0E1E               	movlw	30
  5493  001AC8  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5494                           
  5495                           ;main.c: 591: vscp_omsg.vscp_type = 5;
  5496  001ACA  0E05               	movlw	5
  5497  001ACC  D009               	goto	L4
  5498  001ACE                     l13773:
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;main.c: 593: else {
  5502                           ;main.c: 594: vscp_omsg.vscp_class = 30;
  5503  001ACE  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5504  001AD0  0E1E               	movlw	30
  5505  001AD2  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5506                           
  5507                           ;main.c: 595: vscp_omsg.vscp_type = 6;
  5508  001AD4  0E06               	movlw	6
  5509  001AD6  D004               	goto	L4
  5510  001AD8                     l13775:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;main.c: 599: else {
  5514                           ;main.c: 601: vscp_omsg.vscp_class = 1;
  5515  001AD8  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5516  001ADA  0E01               	movlw	1
  5517  001ADC  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5518                           
  5519                           ;main.c: 602: vscp_omsg.vscp_type = 2;
  5520  001ADE  0E02               	movlw	2
  5521  001AE0                     L4:
  5522  001AE0  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;main.c: 603: }
  5526                           ;main.c: 605: vscp_omsg.data[ 0 ] = i;
  5527  001AE2  C09D  F0D8         	movff	doOneSecondWork@i,_vscp_omsg+5
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;main.c: 606: vscp_omsg.data[ 1 ] =
  5531                           ;main.c: 607: readEEPROM(0x73 + 2*i);
  5532  001AE6  90D8               	bcf	status,0,c
  5533  001AE8  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5534  001AEA  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5535  001AEC  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5536  001AEE  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5537  001AF0  0E73               	movlw	115
  5538  001AF2  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5539  001AF4  6E16               	movwf	?_readEEPROM,c
  5540  001AF6  0E00               	movlw	0
  5541  001AF8  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5542  001AFA  6E17               	movwf	?_readEEPROM+1,c
  5543  001AFC  ECA4  F02D         	call	_readEEPROM	;wreg free
  5544  001B00  0100               	movlb	0	; () banked
  5545  001B02  6FD9               	movwf	(_vscp_omsg+6)& (0+255),b
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;main.c: 608: vscp_omsg.data[ 2 ] =
  5549                           ;main.c: 609: readEEPROM(0x74 + 2*i);
  5550  001B04  90D8               	bcf	status,0,c
  5551  001B06  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5552  001B08  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5553  001B0A  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5554  001B0C  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5555  001B0E  0E74               	movlw	116
  5556  001B10  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5557  001B12  6E16               	movwf	?_readEEPROM,c
  5558  001B14  0E00               	movlw	0
  5559  001B16  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5560  001B18  6E17               	movwf	?_readEEPROM+1,c
  5561  001B1A  ECA4  F02D         	call	_readEEPROM	;wreg free
  5562  001B1E  0100               	movlb	0	; () banked
  5563  001B20  6FDA               	movwf	(_vscp_omsg+7)& (0+255),b
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;main.c: 614: vscp_sendEvent();
  5567  001B22  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  5568  001B26                     l13785:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 616: }
  5572                           ;main.c: 617: }
  5573                           ;main.c: 620: if (high_alarm & (1 << i)) {
  5574  001B26  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  5575  001B2A  0E01               	movlw	1
  5576  001B2C  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5577  001B2E  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  5578  001B30  D002               	goto	u12854
  5579  001B32                     u12855:
  5580  001B32  90D8               	bcf	status,0,c
  5581  001B34  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5582  001B36                     u12854:
  5583  001B36  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  5584  001B38  D7FC               	goto	u12855
  5585  001B3A  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5586  001B3C  15BE               	andwf	_high_alarm& (0+255),w,b
  5587  001B3E  E058               	bz	l13811
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;main.c: 623: if ((readEEPROM(0x43 + i) & (1<<4))) {
  5591  001B40  0E43               	movlw	67
  5592  001B42  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5593  001B44  6E16               	movwf	?_readEEPROM,c
  5594  001B46  6A17               	clrf	?_readEEPROM+1,c
  5595  001B48  0E00               	movlw	0
  5596  001B4A  2217               	addwfc	?_readEEPROM+1,f,c
  5597  001B4C  ECA4  F02D         	call	_readEEPROM	;wreg free
  5598  001B50  0100               	movlb	0	; () banked
  5599  001B52  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5600  001B54  A993               	btfss	??_doOneSecondWork& (0+255),4,b
  5601  001B56  D04C               	goto	l13811
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;main.c: 625: vscp_omsg.priority = 0x00;
  5605  001B58  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;main.c: 626: vscp_omsg.flags = 0x80 + 3;
  5609  001B5A  0E83               	movlw	131
  5610  001B5C  6FD3               	movwf	_vscp_omsg& (0+255),b
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;main.c: 628: if (readEEPROM(0x43 + i) & (1<<5)) {
  5614  001B5E  0E43               	movlw	67
  5615  001B60  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5616  001B62  6E16               	movwf	?_readEEPROM,c
  5617  001B64  6A17               	clrf	?_readEEPROM+1,c
  5618  001B66  0E00               	movlw	0
  5619  001B68  2217               	addwfc	?_readEEPROM+1,f,c
  5620  001B6A  ECA4  F02D         	call	_readEEPROM	;wreg free
  5621  001B6E  0100               	movlb	0	; () banked
  5622  001B70  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5623  001B72  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  5624  001B74  D016               	goto	l13801
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;main.c: 630: if (readEEPROM(0x43 + i) & (1<<6)) {
  5628  001B76  0E43               	movlw	67
  5629  001B78  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5630  001B7A  6E16               	movwf	?_readEEPROM,c
  5631  001B7C  6A17               	clrf	?_readEEPROM+1,c
  5632  001B7E  0E00               	movlw	0
  5633  001B80  2217               	addwfc	?_readEEPROM+1,f,c
  5634  001B82  ECA4  F02D         	call	_readEEPROM	;wreg free
  5635  001B86  0100               	movlb	0	; () banked
  5636  001B88  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5637  001B8A  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  5638  001B8C  D005               	goto	l13799
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;main.c: 631: vscp_omsg.vscp_class = 30;
  5642  001B8E  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5643  001B90  0E1E               	movlw	30
  5644  001B92  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5645                           
  5646                           ;main.c: 632: vscp_omsg.vscp_type = 6;
  5647  001B94  0E06               	movlw	6
  5648  001B96  D009               	goto	L5
  5649  001B98                     l13799:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;main.c: 634: else {
  5653                           ;main.c: 635: vscp_omsg.vscp_class = 30;
  5654  001B98  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5655  001B9A  0E1E               	movlw	30
  5656  001B9C  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5657                           
  5658                           ;main.c: 636: vscp_omsg.vscp_type = 5;
  5659  001B9E  0E05               	movlw	5
  5660  001BA0  D004               	goto	L5
  5661  001BA2                     l13801:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;main.c: 639: else {
  5665                           ;main.c: 641: vscp_omsg.vscp_class = 1;
  5666  001BA2  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5667  001BA4  0E01               	movlw	1
  5668  001BA6  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5669                           
  5670                           ;main.c: 642: vscp_omsg.vscp_type = 2;
  5671  001BA8  0E02               	movlw	2
  5672  001BAA                     L5:
  5673  001BAA  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;main.c: 643: }
  5677                           ;main.c: 645: vscp_omsg.data[ 0 ] = i;
  5678  001BAC  C09D  F0D8         	movff	doOneSecondWork@i,_vscp_omsg+5
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;main.c: 646: vscp_omsg.data[ 1 ] =
  5682                           ;main.c: 647: readEEPROM(0x73 + 2*i);
  5683  001BB0  90D8               	bcf	status,0,c
  5684  001BB2  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5685  001BB4  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5686  001BB6  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5687  001BB8  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5688  001BBA  0E73               	movlw	115
  5689  001BBC  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5690  001BBE  6E16               	movwf	?_readEEPROM,c
  5691  001BC0  0E00               	movlw	0
  5692  001BC2  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5693  001BC4  6E17               	movwf	?_readEEPROM+1,c
  5694  001BC6  ECA4  F02D         	call	_readEEPROM	;wreg free
  5695  001BCA  0100               	movlb	0	; () banked
  5696  001BCC  6FD9               	movwf	(_vscp_omsg+6)& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;main.c: 648: vscp_omsg.data[ 2 ] =
  5700                           ;main.c: 649: readEEPROM(0x74 + 2*i);
  5701  001BCE  90D8               	bcf	status,0,c
  5702  001BD0  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5703  001BD2  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5704  001BD4  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  5705  001BD6  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5706  001BD8  0E74               	movlw	116
  5707  001BDA  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  5708  001BDC  6E16               	movwf	?_readEEPROM,c
  5709  001BDE  0E00               	movlw	0
  5710  001BE0  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  5711  001BE2  6E17               	movwf	?_readEEPROM+1,c
  5712  001BE4  ECA4  F02D         	call	_readEEPROM	;wreg free
  5713  001BE8  0100               	movlb	0	; () banked
  5714  001BEA  6FDA               	movwf	(_vscp_omsg+7)& (0+255),b
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;main.c: 654: vscp_sendEvent();
  5718  001BEC  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  5719  001BF0                     l13811:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;main.c: 655: }
  5723                           ;main.c: 656: }
  5724                           ;main.c: 657: }
  5725                           ;main.c: 663: if (low_alarm & (1 << i)) {
  5726  001BF0  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  5727  001BF4  0E01               	movlw	1
  5728  001BF6  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5729  001BF8  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  5730  001BFA  D002               	goto	u12904
  5731  001BFC                     u12905:
  5732  001BFC  90D8               	bcf	status,0,c
  5733  001BFE  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5734  001C00                     u12904:
  5735  001C00  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  5736  001C02  D7FC               	goto	u12905
  5737  001C04  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5738  001C06  15BF               	andwf	_low_alarm& (0+255),w,b
  5739  001C08  E05C               	bz	l13819
  5740                           
  5741                           ; BSR set to: 0
  5742                           ;main.c: 666: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i))<<8) + (uint16_t
      +                          )readEEPROM(0x5C + 2*i)) ) +
  5743                           ;main.c: 668: (int8_t) readEEPROM(0x97 + i);
  5744  001C0A  0E97               	movlw	151
  5745  001C0C  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5746  001C0E  6E16               	movwf	?_readEEPROM,c
  5747  001C10  6A17               	clrf	?_readEEPROM+1,c
  5748  001C12  0E00               	movlw	0
  5749  001C14  2217               	addwfc	?_readEEPROM+1,f,c
  5750  001C16  ECA4  F02D         	call	_readEEPROM	;wreg free
  5751  001C1A  0100               	movlb	0	; () banked
  5752  001C1C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5753  001C1E  90D8               	bcf	status,0,c
  5754  001C20  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5755  001C22  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5756  001C24  6B95               	clrf	(??_doOneSecondWork+2)& (0+255),b
  5757  001C26  3795               	rlcf	(??_doOneSecondWork+2)& (0+255),f,b
  5758  001C28  0E5B               	movlw	91
  5759  001C2A  2594               	addwf	(??_doOneSecondWork+1)& (0+255),w,b
  5760  001C2C  6E16               	movwf	?_readEEPROM,c
  5761  001C2E  0E00               	movlw	0
  5762  001C30  2195               	addwfc	(??_doOneSecondWork+2)& (0+255),w,b
  5763  001C32  6E17               	movwf	?_readEEPROM+1,c
  5764  001C34  ECA4  F02D         	call	_readEEPROM	;wreg free
  5765  001C38  0100               	movlb	0	; () banked
  5766  001C3A  6F97               	movwf	(??_doOneSecondWork+4)& (0+255),b
  5767  001C3C  6B96               	clrf	(??_doOneSecondWork+3)& (0+255),b
  5768  001C3E  90D8               	bcf	status,0,c
  5769  001C40  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  5770  001C42  6F98               	movwf	(??_doOneSecondWork+5)& (0+255),b
  5771  001C44  6B99               	clrf	(??_doOneSecondWork+6)& (0+255),b
  5772  001C46  3799               	rlcf	(??_doOneSecondWork+6)& (0+255),f,b
  5773  001C48  0E5C               	movlw	92
  5774  001C4A  2598               	addwf	(??_doOneSecondWork+5)& (0+255),w,b
  5775  001C4C  6E16               	movwf	?_readEEPROM,c
  5776  001C4E  0E00               	movlw	0
  5777  001C50  2199               	addwfc	(??_doOneSecondWork+6)& (0+255),w,b
  5778  001C52  6E17               	movwf	?_readEEPROM+1,c
  5779  001C54  ECA4  F02D         	call	_readEEPROM	;wreg free
  5780  001C58  0100               	movlb	0	; () banked
  5781  001C5A  2796               	addwf	(??_doOneSecondWork+3)& (0+255),f,b
  5782  001C5C  0E00               	movlw	0
  5783  001C5E  2397               	addwfc	(??_doOneSecondWork+4)& (0+255),f,b
  5784  001C60  5193               	movf	??_doOneSecondWork& (0+255),w,b
  5785  001C62  2596               	addwf	(??_doOneSecondWork+3)& (0+255),w,b
  5786  001C64  6F9B               	movwf	doOneSecondWork@setpoint& (0+255),b
  5787  001C66  0E00               	movlw	0
  5788  001C68  2197               	addwfc	(??_doOneSecondWork+4)& (0+255),w,b
  5789  001C6A  6F9C               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;main.c: 673: if (current_temp[ i ] > (setpoint * 100)) {
  5793  001C6C  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5794  001C6E  0D02               	mullw	2
  5795  001C70  50F3               	movf	prodl,w,c
  5796  001C72  0FA3               	addlw	low _current_temp
  5797  001C74  6ED9               	movwf	fsr2l,c
  5798  001C76  6ADA               	clrf	fsr2h,c
  5799  001C78  CFDE F093          	movff	postinc2,??_doOneSecondWork
  5800  001C7C  CFDD F094          	movff	postdec2,??_doOneSecondWork+1
  5801  001C80  C09B  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  5802  001C84  C09C  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  5803  001C88  6A11               	clrf	?___wmul+3,c
  5804  001C8A  0E64               	movlw	100
  5805  001C8C  6E10               	movwf	?___wmul+2,c
  5806  001C8E  ECA7  F02B         	call	___wmul	;wreg free
  5807  001C92  500F               	movf	?___wmul+1,w,c
  5808  001C94  0A80               	xorlw	128
  5809  001C96  0100               	movlb	0	; () banked
  5810  001C98  6F95               	movwf	(??_doOneSecondWork+2)& (0+255),b
  5811  001C9A  5193               	movf	??_doOneSecondWork& (0+255),w,b
  5812  001C9C  5C0E               	subwf	?___wmul,w,c
  5813  001C9E  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5814  001CA0  0A80               	xorlw	128
  5815  001CA2  5995               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  5816  001CA4  E301 D0AC          	bc	l228
  5817  001CA8                     l13817:
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;main.c: 676: low_alarm &= ~(1 << i);
  5821  001CA8  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  5822  001CAC  0E01               	movlw	1
  5823  001CAE  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5824  001CB0  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  5825  001CB2  D002               	goto	u12934
  5826  001CB4                     u12935:
  5827  001CB4  90D8               	bcf	status,0,c
  5828  001CB6  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5829  001CB8                     u12934:
  5830  001CB8  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  5831  001CBA  D7FC               	goto	u12935
  5832  001CBC  1D94               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  5833  001CBE  17BF               	andwf	_low_alarm& (0+255),f,b
  5834  001CC0  D09F               	goto	l228
  5835  001CC2                     l13819:
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;main.c: 681: else {
  5839                           ;main.c: 685: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x5B + 2*i ))<<8) + (uint16_
      +                          t)readEEPROM(0x5C + 2*i )) );
  5840  001CC2  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5841  001CC4  0D02               	mullw	2
  5842  001CC6  0E5C               	movlw	92
  5843  001CC8  24F3               	addwf	prodl,w,c
  5844  001CCA  6E16               	movwf	?_readEEPROM,c
  5845  001CCC  0E00               	movlw	0
  5846  001CCE  20F4               	addwfc	prodh,w,c
  5847  001CD0  6E17               	movwf	?_readEEPROM+1,c
  5848  001CD2  ECA4  F02D         	call	_readEEPROM	;wreg free
  5849  001CD6  0100               	movlb	0	; () banked
  5850  001CD8  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5851  001CDA  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5852  001CDC  0D02               	mullw	2
  5853  001CDE  0E5B               	movlw	91
  5854  001CE0  24F3               	addwf	prodl,w,c
  5855  001CE2  6E16               	movwf	?_readEEPROM,c
  5856  001CE4  0E00               	movlw	0
  5857  001CE6  20F4               	addwfc	prodh,w,c
  5858  001CE8  6E17               	movwf	?_readEEPROM+1,c
  5859  001CEA  ECA4  F02D         	call	_readEEPROM	;wreg free
  5860  001CEE  0100               	movlb	0	; () banked
  5861  001CF0  6F9C               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  5862  001CF2  5193               	movf	??_doOneSecondWork& (0+255),w,b
  5863  001CF4  6F9B               	movwf	doOneSecondWork@setpoint& (0+255),b
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;main.c: 688: if (current_temp[ i ] < (setpoint * 100)) {
  5867  001CF6  C09B  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  5868  001CFA  C09C  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  5869  001CFE  6A11               	clrf	?___wmul+3,c
  5870  001D00  0E64               	movlw	100
  5871  001D02  6E10               	movwf	?___wmul+2,c
  5872  001D04  ECA7  F02B         	call	___wmul	;wreg free
  5873  001D08  0100               	movlb	0	; () banked
  5874  001D0A  519D               	movf	doOneSecondWork@i& (0+255),w,b
  5875  001D0C  0D02               	mullw	2
  5876  001D0E  50F3               	movf	prodl,w,c
  5877  001D10  0FA3               	addlw	low _current_temp
  5878  001D12  6ED9               	movwf	fsr2l,c
  5879  001D14  6ADA               	clrf	fsr2h,c
  5880  001D16  CFDE F093          	movff	postinc2,??_doOneSecondWork
  5881  001D1A  CFDD F094          	movff	postdec2,??_doOneSecondWork+1
  5882  001D1E  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5883  001D20  0A80               	xorlw	128
  5884  001D22  6F95               	movwf	(??_doOneSecondWork+2)& (0+255),b
  5885  001D24  500E               	movf	?___wmul,w,c
  5886  001D26  5D93               	subwf	??_doOneSecondWork& (0+255),w,b
  5887  001D28  500F               	movf	?___wmul+1,w,c
  5888  001D2A  0A80               	xorlw	128
  5889  001D2C  5995               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  5890  001D2E  E268               	bc	l228
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;main.c: 691: low_alarm |= (1 << i);
  5894  001D30  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  5895  001D34  0E01               	movlw	1
  5896  001D36  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  5897  001D38  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  5898  001D3A  D002               	goto	u12954
  5899  001D3C                     u12955:
  5900  001D3C  90D8               	bcf	status,0,c
  5901  001D3E  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  5902  001D40                     u12954:
  5903  001D40  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  5904  001D42  D7FC               	goto	u12955
  5905  001D44  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  5906  001D46  13BF               	iorwf	_low_alarm& (0+255),f,b
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;main.c: 696: vscp_alarmstatus |= 1;
  5910  001D48  804A               	bsf	_vscp_alarmstatus,0,c
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;main.c: 699: if ( readEEPROM(i + 0x43) & (1<<3) ) {
  5914  001D4A  0E43               	movlw	67
  5915  001D4C  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5916  001D4E  6E16               	movwf	?_readEEPROM,c
  5917  001D50  6A17               	clrf	?_readEEPROM+1,c
  5918  001D52  0E00               	movlw	0
  5919  001D54  2217               	addwfc	?_readEEPROM+1,f,c
  5920  001D56  ECA4  F02D         	call	_readEEPROM	;wreg free
  5921  001D5A  0100               	movlb	0	; () banked
  5922  001D5C  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5923  001D5E  A793               	btfss	??_doOneSecondWork& (0+255),3,b
  5924  001D60  D04F               	goto	l228
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;main.c: 701: vscp_omsg.priority = 0x00;
  5928  001D62  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;main.c: 702: vscp_omsg.flags = 0x80 + 3;
  5932  001D64  0E83               	movlw	131
  5933  001D66  6FD3               	movwf	_vscp_omsg& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;main.c: 705: if (readEEPROM(0x43 + i) & (1<<5)) {
  5937  001D68  0E43               	movlw	67
  5938  001D6A  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5939  001D6C  6E16               	movwf	?_readEEPROM,c
  5940  001D6E  6A17               	clrf	?_readEEPROM+1,c
  5941  001D70  0E00               	movlw	0
  5942  001D72  2217               	addwfc	?_readEEPROM+1,f,c
  5943  001D74  ECA4  F02D         	call	_readEEPROM	;wreg free
  5944  001D78  0100               	movlb	0	; () banked
  5945  001D7A  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5946  001D7C  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  5947  001D7E  D016               	goto	l13841
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;main.c: 707: if (readEEPROM(0x43 + i) & (1<<6)) {
  5951  001D80  0E43               	movlw	67
  5952  001D82  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  5953  001D84  6E16               	movwf	?_readEEPROM,c
  5954  001D86  6A17               	clrf	?_readEEPROM+1,c
  5955  001D88  0E00               	movlw	0
  5956  001D8A  2217               	addwfc	?_readEEPROM+1,f,c
  5957  001D8C  ECA4  F02D         	call	_readEEPROM	;wreg free
  5958  001D90  0100               	movlb	0	; () banked
  5959  001D92  6F93               	movwf	??_doOneSecondWork& (0+255),b
  5960  001D94  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  5961  001D96  D005               	goto	l13839
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;main.c: 708: vscp_omsg.vscp_class = 30;
  5965  001D98  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5966  001D9A  0E1E               	movlw	30
  5967  001D9C  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5968                           
  5969                           ;main.c: 709: vscp_omsg.vscp_type = 5;
  5970  001D9E  0E05               	movlw	5
  5971  001DA0  D009               	goto	L6
  5972  001DA2                     l13839:
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;main.c: 711: else {
  5976                           ;main.c: 712: vscp_omsg.vscp_class = 30;
  5977  001DA2  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5978  001DA4  0E1E               	movlw	30
  5979  001DA6  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5980                           
  5981                           ;main.c: 713: vscp_omsg.vscp_type = 6;
  5982  001DA8  0E06               	movlw	6
  5983  001DAA  D004               	goto	L6
  5984  001DAC                     l13841:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;main.c: 717: else {
  5988                           ;main.c: 718: vscp_omsg.vscp_class = 1;
  5989  001DAC  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  5990  001DAE  0E01               	movlw	1
  5991  001DB0  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  5992                           
  5993                           ;main.c: 719: vscp_omsg.vscp_type = 2;
  5994  001DB2  0E02               	movlw	2
  5995  001DB4                     L6:
  5996  001DB4  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;main.c: 720: }
  6000                           ;main.c: 722: vscp_omsg.data[ 0 ] = i;
  6001  001DB6  C09D  F0D8         	movff	doOneSecondWork@i,_vscp_omsg+5
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;main.c: 723: vscp_omsg.data[ 1 ] = readEEPROM(0x73 + 2 * i);
  6005  001DBA  90D8               	bcf	status,0,c
  6006  001DBC  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  6007  001DBE  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6008  001DC0  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6009  001DC2  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6010  001DC4  0E73               	movlw	115
  6011  001DC6  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6012  001DC8  6E16               	movwf	?_readEEPROM,c
  6013  001DCA  0E00               	movlw	0
  6014  001DCC  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6015  001DCE  6E17               	movwf	?_readEEPROM+1,c
  6016  001DD0  ECA4  F02D         	call	_readEEPROM	;wreg free
  6017  001DD4  0100               	movlb	0	; () banked
  6018  001DD6  6FD9               	movwf	(_vscp_omsg+6)& (0+255),b
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;main.c: 724: vscp_omsg.data[ 2 ] = readEEPROM(0x74 + 2 * i);
  6022  001DD8  90D8               	bcf	status,0,c
  6023  001DDA  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  6024  001DDC  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6025  001DDE  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6026  001DE0  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6027  001DE2  0E74               	movlw	116
  6028  001DE4  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6029  001DE6  6E16               	movwf	?_readEEPROM,c
  6030  001DE8  0E00               	movlw	0
  6031  001DEA  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6032  001DEC  6E17               	movwf	?_readEEPROM+1,c
  6033  001DEE  ECA4  F02D         	call	_readEEPROM	;wreg free
  6034  001DF2  0100               	movlb	0	; () banked
  6035  001DF4  6FDA               	movwf	(_vscp_omsg+7)& (0+255),b
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;main.c: 727: if (!vscp_sendEvent()) {
  6039  001DF6  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  6040  001DFA  0900               	iorlw	0
  6041  001DFC  E101 D754          	bz	l13817
  6042  001E00                     l228:
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;main.c: 731: }
  6046                           ;main.c: 733: }
  6047                           ;main.c: 734: }
  6048                           ;main.c: 735: }
  6049                           ;main.c: 740: if (high_alarm & (1 << i)) {
  6050  001E00  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6051  001E04  0E01               	movlw	1
  6052  001E06  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6053  001E08  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6054  001E0A  D002               	goto	u13004
  6055  001E0C                     u13005:
  6056  001E0C  90D8               	bcf	status,0,c
  6057  001E0E  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6058  001E10                     u13004:
  6059  001E10  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6060  001E12  D7FC               	goto	u13005
  6061  001E14  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6062  001E16  15BE               	andwf	_high_alarm& (0+255),w,b
  6063  001E18  E05B               	bz	l13859
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;main.c: 744: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) ) -
  6067                           ;main.c: 746: (int8_t) readEEPROM(0x97 + i);
  6068  001E1A  90D8               	bcf	status,0,c
  6069  001E1C  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  6070  001E1E  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6071  001E20  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6072  001E22  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6073  001E24  0E67               	movlw	103
  6074  001E26  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6075  001E28  6E16               	movwf	?_readEEPROM,c
  6076  001E2A  0E00               	movlw	0
  6077  001E2C  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6078  001E2E  6E17               	movwf	?_readEEPROM+1,c
  6079  001E30  ECA4  F02D         	call	_readEEPROM	;wreg free
  6080  001E34  0100               	movlb	0	; () banked
  6081  001E36  6F96               	movwf	(??_doOneSecondWork+3)& (0+255),b
  6082  001E38  6B95               	clrf	(??_doOneSecondWork+2)& (0+255),b
  6083  001E3A  90D8               	bcf	status,0,c
  6084  001E3C  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  6085  001E3E  6F97               	movwf	(??_doOneSecondWork+4)& (0+255),b
  6086  001E40  6B98               	clrf	(??_doOneSecondWork+5)& (0+255),b
  6087  001E42  3798               	rlcf	(??_doOneSecondWork+5)& (0+255),f,b
  6088  001E44  0E68               	movlw	104
  6089  001E46  2597               	addwf	(??_doOneSecondWork+4)& (0+255),w,b
  6090  001E48  6E16               	movwf	?_readEEPROM,c
  6091  001E4A  0E00               	movlw	0
  6092  001E4C  2198               	addwfc	(??_doOneSecondWork+5)& (0+255),w,b
  6093  001E4E  6E17               	movwf	?_readEEPROM+1,c
  6094  001E50  ECA4  F02D         	call	_readEEPROM	;wreg free
  6095  001E54  0100               	movlb	0	; () banked
  6096  001E56  2795               	addwf	(??_doOneSecondWork+2)& (0+255),f,b
  6097  001E58  0E00               	movlw	0
  6098  001E5A  2396               	addwfc	(??_doOneSecondWork+3)& (0+255),f,b
  6099  001E5C  0E97               	movlw	151
  6100  001E5E  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  6101  001E60  6E16               	movwf	?_readEEPROM,c
  6102  001E62  6A17               	clrf	?_readEEPROM+1,c
  6103  001E64  0E00               	movlw	0
  6104  001E66  2217               	addwfc	?_readEEPROM+1,f,c
  6105  001E68  ECA4  F02D         	call	_readEEPROM	;wreg free
  6106  001E6C  0100               	movlb	0	; () banked
  6107  001E6E  5D95               	subwf	(??_doOneSecondWork+2)& (0+255),w,b
  6108  001E70  6F9B               	movwf	doOneSecondWork@setpoint& (0+255),b
  6109  001E72  5196               	movf	(??_doOneSecondWork+3)& (0+255),w,b
  6110  001E74  A0D8               	btfss	status,0,c
  6111  001E76  0596               	decf	(??_doOneSecondWork+3)& (0+255),w,b
  6112  001E78  6F9C               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;main.c: 749: if (current_temp[ i ] < (setpoint * 100) ) {
  6116  001E7A  C09B  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6117  001E7E  C09C  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6118  001E82  6A11               	clrf	?___wmul+3,c
  6119  001E84  0E64               	movlw	100
  6120  001E86  6E10               	movwf	?___wmul+2,c
  6121  001E88  ECA7  F02B         	call	___wmul	;wreg free
  6122  001E8C  0100               	movlb	0	; () banked
  6123  001E8E  519D               	movf	doOneSecondWork@i& (0+255),w,b
  6124  001E90  0D02               	mullw	2
  6125  001E92  50F3               	movf	prodl,w,c
  6126  001E94  0FA3               	addlw	low _current_temp
  6127  001E96  6ED9               	movwf	fsr2l,c
  6128  001E98  6ADA               	clrf	fsr2h,c
  6129  001E9A  CFDE F093          	movff	postinc2,??_doOneSecondWork
  6130  001E9E  CFDD F094          	movff	postdec2,??_doOneSecondWork+1
  6131  001EA2  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6132  001EA4  0A80               	xorlw	128
  6133  001EA6  6F95               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6134  001EA8  500E               	movf	?___wmul,w,c
  6135  001EAA  5D93               	subwf	??_doOneSecondWork& (0+255),w,b
  6136  001EAC  500F               	movf	?___wmul+1,w,c
  6137  001EAE  0A80               	xorlw	128
  6138  001EB0  5995               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6139  001EB2  E301 D0AC          	bc	l13893
  6140  001EB6                     l13857:
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;main.c: 752: high_alarm &= ~(1 << i);
  6144  001EB6  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6145  001EBA  0E01               	movlw	1
  6146  001EBC  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6147  001EBE  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6148  001EC0  D002               	goto	u13034
  6149  001EC2                     u13035:
  6150  001EC2  90D8               	bcf	status,0,c
  6151  001EC4  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6152  001EC6                     u13034:
  6153  001EC6  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6154  001EC8  D7FC               	goto	u13035
  6155  001ECA  1D94               	comf	(??_doOneSecondWork+1)& (0+255),w,b
  6156  001ECC  17BE               	andwf	_high_alarm& (0+255),f,b
  6157  001ECE  D09F               	goto	l13893
  6158  001ED0                     l13859:
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;main.c: 757: else {
  6162                           ;main.c: 762: setpoint = ((int16_t)( (((uint16_t)readEEPROM(0x67 + 2 * i))<<8) + (uint16
      +                          _t)readEEPROM(0x68 + 2 * i)) );
  6163  001ED0  519D               	movf	doOneSecondWork@i& (0+255),w,b
  6164  001ED2  0D02               	mullw	2
  6165  001ED4  0E68               	movlw	104
  6166  001ED6  24F3               	addwf	prodl,w,c
  6167  001ED8  6E16               	movwf	?_readEEPROM,c
  6168  001EDA  0E00               	movlw	0
  6169  001EDC  20F4               	addwfc	prodh,w,c
  6170  001EDE  6E17               	movwf	?_readEEPROM+1,c
  6171  001EE0  ECA4  F02D         	call	_readEEPROM	;wreg free
  6172  001EE4  0100               	movlb	0	; () banked
  6173  001EE6  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6174  001EE8  519D               	movf	doOneSecondWork@i& (0+255),w,b
  6175  001EEA  0D02               	mullw	2
  6176  001EEC  0E67               	movlw	103
  6177  001EEE  24F3               	addwf	prodl,w,c
  6178  001EF0  6E16               	movwf	?_readEEPROM,c
  6179  001EF2  0E00               	movlw	0
  6180  001EF4  20F4               	addwfc	prodh,w,c
  6181  001EF6  6E17               	movwf	?_readEEPROM+1,c
  6182  001EF8  ECA4  F02D         	call	_readEEPROM	;wreg free
  6183  001EFC  0100               	movlb	0	; () banked
  6184  001EFE  6F9C               	movwf	(doOneSecondWork@setpoint+1)& (0+255),b
  6185  001F00  5193               	movf	??_doOneSecondWork& (0+255),w,b
  6186  001F02  6F9B               	movwf	doOneSecondWork@setpoint& (0+255),b
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;main.c: 765: if (current_temp[ i ] > (setpoint * 100)) {
  6190  001F04  519D               	movf	doOneSecondWork@i& (0+255),w,b
  6191  001F06  0D02               	mullw	2
  6192  001F08  50F3               	movf	prodl,w,c
  6193  001F0A  0FA3               	addlw	low _current_temp
  6194  001F0C  6ED9               	movwf	fsr2l,c
  6195  001F0E  6ADA               	clrf	fsr2h,c
  6196  001F10  CFDE F093          	movff	postinc2,??_doOneSecondWork
  6197  001F14  CFDD F094          	movff	postdec2,??_doOneSecondWork+1
  6198  001F18  C09B  F00E         	movff	doOneSecondWork@setpoint,?___wmul
  6199  001F1C  C09C  F00F         	movff	doOneSecondWork@setpoint+1,?___wmul+1
  6200  001F20  6A11               	clrf	?___wmul+3,c
  6201  001F22  0E64               	movlw	100
  6202  001F24  6E10               	movwf	?___wmul+2,c
  6203  001F26  ECA7  F02B         	call	___wmul	;wreg free
  6204  001F2A  500F               	movf	?___wmul+1,w,c
  6205  001F2C  0A80               	xorlw	128
  6206  001F2E  0100               	movlb	0	; () banked
  6207  001F30  6F95               	movwf	(??_doOneSecondWork+2)& (0+255),b
  6208  001F32  5193               	movf	??_doOneSecondWork& (0+255),w,b
  6209  001F34  5C0E               	subwf	?___wmul,w,c
  6210  001F36  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6211  001F38  0A80               	xorlw	128
  6212  001F3A  5995               	subwfb	(??_doOneSecondWork+2)& (0+255),w,b
  6213  001F3C  E268               	bc	l13893
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;main.c: 768: high_alarm |= (1 << i);
  6217  001F3E  C09D  F093         	movff	doOneSecondWork@i,??_doOneSecondWork
  6218  001F42  0E01               	movlw	1
  6219  001F44  6F94               	movwf	(??_doOneSecondWork+1)& (0+255),b
  6220  001F46  2B93               	incf	??_doOneSecondWork& (0+255),f,b
  6221  001F48  D002               	goto	u13054
  6222  001F4A                     u13055:
  6223  001F4A  90D8               	bcf	status,0,c
  6224  001F4C  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6225  001F4E                     u13054:
  6226  001F4E  2F93               	decfsz	??_doOneSecondWork& (0+255),f,b
  6227  001F50  D7FC               	goto	u13055
  6228  001F52  5194               	movf	(??_doOneSecondWork+1)& (0+255),w,b
  6229  001F54  13BE               	iorwf	_high_alarm& (0+255),f,b
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;main.c: 774: vscp_alarmstatus |= 2;
  6233  001F56  824A               	bsf	_vscp_alarmstatus,1,c
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;main.c: 777: if (readEEPROM(0x43 + i) & (1<<4)) {
  6237  001F58  0E43               	movlw	67
  6238  001F5A  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  6239  001F5C  6E16               	movwf	?_readEEPROM,c
  6240  001F5E  6A17               	clrf	?_readEEPROM+1,c
  6241  001F60  0E00               	movlw	0
  6242  001F62  2217               	addwfc	?_readEEPROM+1,f,c
  6243  001F64  ECA4  F02D         	call	_readEEPROM	;wreg free
  6244  001F68  0100               	movlb	0	; () banked
  6245  001F6A  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6246  001F6C  A993               	btfss	??_doOneSecondWork& (0+255),4,b
  6247  001F6E  D04F               	goto	l13893
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;main.c: 779: vscp_omsg.priority = 0x00;
  6251  001F70  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;main.c: 780: vscp_omsg.flags = 0x80 + 3;
  6255  001F72  0E83               	movlw	131
  6256  001F74  6FD3               	movwf	_vscp_omsg& (0+255),b
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;main.c: 782: if (readEEPROM(0x43 + i) & (1<<5)) {
  6260  001F76  0E43               	movlw	67
  6261  001F78  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  6262  001F7A  6E16               	movwf	?_readEEPROM,c
  6263  001F7C  6A17               	clrf	?_readEEPROM+1,c
  6264  001F7E  0E00               	movlw	0
  6265  001F80  2217               	addwfc	?_readEEPROM+1,f,c
  6266  001F82  ECA4  F02D         	call	_readEEPROM	;wreg free
  6267  001F86  0100               	movlb	0	; () banked
  6268  001F88  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6269  001F8A  AB93               	btfss	??_doOneSecondWork& (0+255),5,b
  6270  001F8C  D016               	goto	l13881
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;main.c: 784: if (readEEPROM(0x43 + i) & (1<<6)) {
  6274  001F8E  0E43               	movlw	67
  6275  001F90  259D               	addwf	doOneSecondWork@i& (0+255),w,b
  6276  001F92  6E16               	movwf	?_readEEPROM,c
  6277  001F94  6A17               	clrf	?_readEEPROM+1,c
  6278  001F96  0E00               	movlw	0
  6279  001F98  2217               	addwfc	?_readEEPROM+1,f,c
  6280  001F9A  ECA4  F02D         	call	_readEEPROM	;wreg free
  6281  001F9E  0100               	movlb	0	; () banked
  6282  001FA0  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6283  001FA2  AD93               	btfss	??_doOneSecondWork& (0+255),6,b
  6284  001FA4  D005               	goto	l13879
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;main.c: 785: vscp_omsg.vscp_class = 30;
  6288  001FA6  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  6289  001FA8  0E1E               	movlw	30
  6290  001FAA  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  6291                           
  6292                           ;main.c: 786: vscp_omsg.vscp_type = 6;
  6293  001FAC  0E06               	movlw	6
  6294  001FAE  D009               	goto	L7
  6295  001FB0                     l13879:
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;main.c: 788: else {
  6299                           ;main.c: 789: vscp_omsg.vscp_class = 30;
  6300  001FB0  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  6301  001FB2  0E1E               	movlw	30
  6302  001FB4  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  6303                           
  6304                           ;main.c: 790: vscp_omsg.vscp_type = 5;
  6305  001FB6  0E05               	movlw	5
  6306  001FB8  D004               	goto	L7
  6307  001FBA                     l13881:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;main.c: 793: else {
  6311                           ;main.c: 794: vscp_omsg.vscp_class = 1;
  6312  001FBA  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  6313  001FBC  0E01               	movlw	1
  6314  001FBE  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  6315                           
  6316                           ;main.c: 795: vscp_omsg.vscp_type = 2;
  6317  001FC0  0E02               	movlw	2
  6318  001FC2                     L7:
  6319  001FC2  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;main.c: 796: }
  6323                           ;main.c: 798: vscp_omsg.data[ 0 ] = i;
  6324  001FC4  C09D  F0D8         	movff	doOneSecondWork@i,_vscp_omsg+5
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;main.c: 799: vscp_omsg.data[ 1 ] = readEEPROM(0x73 + 2 * i);
  6328  001FC8  90D8               	bcf	status,0,c
  6329  001FCA  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  6330  001FCC  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6331  001FCE  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6332  001FD0  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6333  001FD2  0E73               	movlw	115
  6334  001FD4  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6335  001FD6  6E16               	movwf	?_readEEPROM,c
  6336  001FD8  0E00               	movlw	0
  6337  001FDA  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6338  001FDC  6E17               	movwf	?_readEEPROM+1,c
  6339  001FDE  ECA4  F02D         	call	_readEEPROM	;wreg free
  6340  001FE2  0100               	movlb	0	; () banked
  6341  001FE4  6FD9               	movwf	(_vscp_omsg+6)& (0+255),b
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;main.c: 800: vscp_omsg.data[ 2 ] = readEEPROM(0x74 + 2 * i);
  6345  001FE6  90D8               	bcf	status,0,c
  6346  001FE8  359D               	rlcf	doOneSecondWork@i& (0+255),w,b
  6347  001FEA  6F93               	movwf	??_doOneSecondWork& (0+255),b
  6348  001FEC  6B94               	clrf	(??_doOneSecondWork+1)& (0+255),b
  6349  001FEE  3794               	rlcf	(??_doOneSecondWork+1)& (0+255),f,b
  6350  001FF0  0E74               	movlw	116
  6351  001FF2  2593               	addwf	??_doOneSecondWork& (0+255),w,b
  6352  001FF4  6E16               	movwf	?_readEEPROM,c
  6353  001FF6  0E00               	movlw	0
  6354  001FF8  2194               	addwfc	(??_doOneSecondWork+1)& (0+255),w,b
  6355  001FFA  6E17               	movwf	?_readEEPROM+1,c
  6356  001FFC  ECA4  F02D         	call	_readEEPROM	;wreg free
  6357  002000  0100               	movlb	0	; () banked
  6358  002002  6FDA               	movwf	(_vscp_omsg+7)& (0+255),b
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;main.c: 803: if (!vscp_sendEvent()) {
  6362  002004  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  6363  002008  0900               	iorlw	0
  6364  00200A  E101 D754          	bz	l13857
  6365  00200E                     l13893:
  6366                           
  6367                           ; BSR set to: 0
  6368  00200E  2B9D               	incf	doOneSecondWork@i& (0+255),f,b
  6369  002010  0E05               	movlw	5
  6370  002012  659D               	cpfsgt	doOneSecondWork@i& (0+255),b
  6371  002014  D42E               	goto	l13741
  6372                           
  6373                           ; BSR set to: 0
  6374  002016  0C05               	retlw	5
  6375  002018                     __end_of_doOneSecondWork:
  6376                           	opt stack 0
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           postinc0	equ	0xFEE
  6384                           wreg	equ	0xFE8
  6385                           postdec1	equ	0xFE5
  6386                           fsr1h	equ	0xFE2
  6387                           fsr1l	equ	0xFE1
  6388                           indf2	equ	0xFDF
  6389                           postinc2	equ	0xFDE
  6390                           postdec2	equ	0xFDD
  6391                           fsr2h	equ	0xFDA
  6392                           fsr2l	equ	0xFD9
  6393                           status	equ	0xFD8
  6394                           
  6395 ;; *************** function _vscp_error *****************
  6396 ;; Defined at:
  6397 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;		None               void
  6404 ;; Registers used:
  6405 ;;		None
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6411 ;;      Params:         0       0       0       0       0       0       0
  6412 ;;      Locals:         0       0       0       0       0       0       0
  6413 ;;      Temps:          0       0       0       0       0       0       0
  6414 ;;      Totals:         0       0       0       0       0       0       0
  6415 ;;Total ram usage:        0 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    2
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_main
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text26
  6426  005BFA                     __ptext26:
  6427                           	opt stack 0
  6428  005BFA                     _vscp_error:
  6429                           	opt stack 28
  6430                           
  6431                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;incstack = 0
  6435                           ;incstack = 0
  6436  005BFA  6A4C               	clrf	_vscp_initledfunc,c
  6437  005BFC  0012               	return	
  6438  005BFE                     __end_of_vscp_error:
  6439                           	opt stack 0
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           postdec1	equ	0xFE5
  6449                           fsr1h	equ	0xFE2
  6450                           fsr1l	equ	0xFE1
  6451                           indf2	equ	0xFDF
  6452                           postinc2	equ	0xFDE
  6453                           postdec2	equ	0xFDD
  6454                           fsr2h	equ	0xFDA
  6455                           fsr2l	equ	0xFD9
  6456                           status	equ	0xFD8
  6457                           
  6458 ;; *************** function _handle_sync *****************
  6459 ;; Defined at:
  6460 ;;		line 1262 in file "../main.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;  i               1   53[BANK0 ] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;		None               void
  6467 ;; Registers used:
  6468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : F/0
  6471 ;;		On exit  : F/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6474 ;;      Params:         0       0       0       0       0       0       0
  6475 ;;      Locals:         0       1       0       0       0       0       0
  6476 ;;      Temps:          0       2       0       0       0       0       0
  6477 ;;      Totals:         0       3       0       0       0       0       0
  6478 ;;Total ram usage:        3 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    8
  6481 ;; This function calls:
  6482 ;;		_readEEPROM
  6483 ;;		_sendTempEvent
  6484 ;; This function is called by:
  6485 ;;		_main
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text27
  6490  0050E2                     __ptext27:
  6491                           	opt stack 0
  6492  0050E2                     _handle_sync:
  6493                           	opt stack 22
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;main.c: 1263: uint8_t i;
  6497                           ;main.c: 1265: for (i = 0; i < 6; i++) {
  6498                           
  6499                           ;incstack = 0
  6500                           ;incstack = 0
  6501  0050E2  6B95               	clrf	handle_sync@i& (0+255),b
  6502  0050E4                     l13717:
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;main.c: 1267: if ( ( ( 0xff == vscp_imsg.data[ 1 ] ) ||
  6506                           ;main.c: 1268: ( readEEPROM( 0x73 + 2*i ) == vscp_imsg.data[ 1 ] ) ) &&
  6507                           ;main.c: 1269: ( ( 0xff == vscp_imsg.data[ 2 ] ) ||
  6508                           ;main.c: 1270: ( readEEPROM( 0x74 + 2*i ) == vscp_imsg.data[ 2 ] ) ) ) {
  6509  0050E4  29CC               	incf	(_vscp_imsg+7)& (0+255),w,b
  6510  0050E6  E010               	bz	l13721
  6511                           
  6512                           ; BSR set to: 0
  6513  0050E8  90D8               	bcf	status,0,c
  6514  0050EA  3595               	rlcf	handle_sync@i& (0+255),w,b
  6515  0050EC  6F93               	movwf	??_handle_sync& (0+255),b
  6516  0050EE  6B94               	clrf	(??_handle_sync+1)& (0+255),b
  6517  0050F0  3794               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6518  0050F2  0E73               	movlw	115
  6519  0050F4  2593               	addwf	??_handle_sync& (0+255),w,b
  6520  0050F6  6E16               	movwf	?_readEEPROM,c
  6521  0050F8  0E00               	movlw	0
  6522  0050FA  2194               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6523  0050FC  6E17               	movwf	?_readEEPROM+1,c
  6524  0050FE  ECA4  F02D         	call	_readEEPROM	;wreg free
  6525  005102  0100               	movlb	0	; () banked
  6526  005104  19CC               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  6527  005106  E125               	bnz	l13731
  6528  005108                     l13721:
  6529                           
  6530                           ; BSR set to: 0
  6531  005108  29CD               	incf	(_vscp_imsg+8)& (0+255),w,b
  6532  00510A  E010               	bz	l294
  6533                           
  6534                           ; BSR set to: 0
  6535  00510C  90D8               	bcf	status,0,c
  6536  00510E  3595               	rlcf	handle_sync@i& (0+255),w,b
  6537  005110  6F93               	movwf	??_handle_sync& (0+255),b
  6538  005112  6B94               	clrf	(??_handle_sync+1)& (0+255),b
  6539  005114  3794               	rlcf	(??_handle_sync+1)& (0+255),f,b
  6540  005116  0E74               	movlw	116
  6541  005118  2593               	addwf	??_handle_sync& (0+255),w,b
  6542  00511A  6E16               	movwf	?_readEEPROM,c
  6543  00511C  0E00               	movlw	0
  6544  00511E  2194               	addwfc	(??_handle_sync+1)& (0+255),w,b
  6545  005120  6E17               	movwf	?_readEEPROM+1,c
  6546  005122  ECA4  F02D         	call	_readEEPROM	;wreg free
  6547  005126  0100               	movlb	0	; () banked
  6548  005128  19CD               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  6549  00512A  E113               	bnz	l13731
  6550  00512C                     l294:
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;main.c: 1273: timeout_clock = 0;
  6554  00512C  6BB3               	clrf	_timeout_clock& (0+255),b	;volatile
  6555  00512E  6BB4               	clrf	(_timeout_clock+1)& (0+255),b	;volatile
  6556  005130  6BB5               	clrf	(_timeout_clock+2)& (0+255),b	;volatile
  6557  005132  6BB6               	clrf	(_timeout_clock+3)& (0+255),b	;volatile
  6558                           
  6559                           ;main.c: 1274: while (!sendTempEvent(i)) {
  6560  005134  D009               	goto	l13729
  6561  005136                     l13725:
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;main.c: 1275: if (timeout_clock > 1000) break;
  6565  005136  0EE9               	movlw	233
  6566  005138  5DB3               	subwf	_timeout_clock& (0+255),w,b	;volatile
  6567  00513A  0E03               	movlw	3
  6568  00513C  59B4               	subwfb	(_timeout_clock+1)& (0+255),w,b	;volatile
  6569  00513E  0E00               	movlw	0
  6570  005140  59B5               	subwfb	(_timeout_clock+2)& (0+255),w,b	;volatile
  6571  005142  0E00               	movlw	0
  6572  005144  59B6               	subwfb	(_timeout_clock+3)& (0+255),w,b	;volatile
  6573  005146  E205               	bc	l13731
  6574  005148                     l13729:
  6575                           
  6576                           ; BSR set to: 0
  6577  005148  5195               	movf	handle_sync@i& (0+255),w,b
  6578  00514A  EC31  F028         	call	_sendTempEvent
  6579  00514E  0900               	iorlw	0
  6580  005150  E0F2               	bz	l13725
  6581  005152                     l13731:
  6582                           
  6583                           ; BSR set to: 0
  6584  005152  2B95               	incf	handle_sync@i& (0+255),f,b
  6585                           
  6586                           ; BSR set to: 0
  6587  005154  0E05               	movlw	5
  6588  005156  6595               	cpfsgt	handle_sync@i& (0+255),b
  6589  005158  D7C5               	goto	l13717
  6590                           
  6591                           ; BSR set to: 0
  6592  00515A  0C05               	retlw	5
  6593  00515C                     __end_of_handle_sync:
  6594                           	opt stack 0
  6595                           tblptru	equ	0xFF8
  6596                           tblptrh	equ	0xFF7
  6597                           tblptrl	equ	0xFF6
  6598                           tablat	equ	0xFF5
  6599                           prodh	equ	0xFF4
  6600                           prodl	equ	0xFF3
  6601                           postinc0	equ	0xFEE
  6602                           wreg	equ	0xFE8
  6603                           postdec1	equ	0xFE5
  6604                           fsr1h	equ	0xFE2
  6605                           fsr1l	equ	0xFE1
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _sendTempEvent *****************
  6614 ;; Defined at:
  6615 ;;		line 821 in file "../main.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  i               1    wreg     unsigned char 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  i               1   68[COMRAM] unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  1    wreg      unsigned char 
  6622 ;; Registers used:
  6623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : F/0
  6626 ;;		On exit  : F/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6629 ;;      Params:         0       0       0       0       0       0       0
  6630 ;;      Locals:         1       0       0       0       0       0       0
  6631 ;;      Temps:          1       0       0       0       0       0       0
  6632 ;;      Totals:         2       0       0       0       0       0       0
  6633 ;;Total ram usage:        2 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    7
  6636 ;; This function calls:
  6637 ;;		_readEEPROM
  6638 ;;		_vscp_sendEvent
  6639 ;;		_setEventData
  6640 ;; This function is called by:
  6641 ;;		_doOneSecondWork
  6642 ;;		_handle_sync
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text28
  6647  005062                     __ptext28:
  6648                           	opt stack 0
  6649  005062                     _sendTempEvent:
  6650                           	opt stack 22
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;incstack = 0
  6654                           ;incstack = 0
  6655                           ;sendTempEvent@i stored from wreg
  6656  005062  CFE8 F045          	movff	wreg,sendTempEvent@i
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;main.c: 822: vscp_omsg.priority = 0x03;
  6660  005066  0E03               	movlw	3
  6661  005068  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  6662                           
  6663                           ;main.c: 823: vscp_omsg.flags = 0x80 + 4;
  6664  00506A  0E84               	movlw	132
  6665  00506C  6FD3               	movwf	_vscp_omsg& (0+255),b
  6666                           
  6667                           ;main.c: 824: vscp_omsg.vscp_class = 10;
  6668  00506E  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  6669  005070  0E0A               	movlw	10
  6670  005072  6FD5               	movwf	(_vscp_omsg+2)& (0+255),b
  6671                           
  6672                           ;main.c: 825: vscp_omsg.vscp_type = 6;
  6673  005074  0E06               	movlw	6
  6674  005076  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;main.c: 828: vscp_omsg.data[ 0 ] = 0x80 |
  6678                           ;main.c: 829: ((0x03 & readEEPROM(i + 0x43)) << 3) |
  6679                           ;main.c: 830: i;
  6680  005078  0E43               	movlw	67
  6681  00507A  2445               	addwf	sendTempEvent@i,w,c
  6682  00507C  6E16               	movwf	?_readEEPROM,c
  6683  00507E  6A17               	clrf	?_readEEPROM+1,c
  6684  005080  0E00               	movlw	0
  6685  005082  2217               	addwfc	?_readEEPROM+1,f,c
  6686  005084  ECA4  F02D         	call	_readEEPROM	;wreg free
  6687  005088  6E44               	movwf	??_sendTempEvent& (0+255),c
  6688  00508A  0E03               	movlw	3
  6689  00508C  1644               	andwf	??_sendTempEvent,f,c
  6690  00508E  90D8               	bcf	status,0,c
  6691  005090  3644               	rlcf	??_sendTempEvent,f,c
  6692  005092  90D8               	bcf	status,0,c
  6693  005094  3644               	rlcf	??_sendTempEvent,f,c
  6694  005096  90D8               	bcf	status,0,c
  6695  005098  3444               	rlcf	??_sendTempEvent,w,c
  6696  00509A  1045               	iorwf	sendTempEvent@i,w,c
  6697  00509C  0980               	iorlw	128
  6698  00509E  0100               	movlb	0	; () banked
  6699  0050A0  6FD8               	movwf	(_vscp_omsg+5)& (0+255),b
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;main.c: 832: vscp_omsg.data[ 1 ] = 0x82;
  6703  0050A2  0E82               	movlw	130
  6704  0050A4  6FD9               	movwf	(_vscp_omsg+6)& (0+255),b
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;main.c: 834: setEventData( current_temp[i],
  6708                           ;main.c: 835: ( 0x03 & readEEPROM(i + 0x43 ) ) );
  6709  0050A6  5045               	movf	sendTempEvent@i,w,c
  6710  0050A8  0D02               	mullw	2
  6711  0050AA  50F3               	movf	prodl,w,c
  6712  0050AC  0FA3               	addlw	low _current_temp
  6713  0050AE  6ED9               	movwf	fsr2l,c
  6714  0050B0  6ADA               	clrf	fsr2h,c
  6715  0050B2  CFDE F08A          	movff	postinc2,?_setEventData
  6716  0050B6  CFDD F08B          	movff	postdec2,?_setEventData+1
  6717  0050BA  0E43               	movlw	67
  6718  0050BC  2445               	addwf	sendTempEvent@i,w,c
  6719  0050BE  6E16               	movwf	?_readEEPROM,c
  6720  0050C0  6A17               	clrf	?_readEEPROM+1,c
  6721  0050C2  0E00               	movlw	0
  6722  0050C4  2217               	addwfc	?_readEEPROM+1,f,c
  6723  0050C6  ECA4  F02D         	call	_readEEPROM	;wreg free
  6724  0050CA  0B03               	andlw	3
  6725  0050CC  0100               	movlb	0	; () banked
  6726  0050CE  6F8C               	movwf	(?_setEventData+2)& (0+255),b
  6727  0050D0  ECA9  F025         	call	_setEventData	;wreg free
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;main.c: 838: if (!vscp_sendEvent()) {
  6731  0050D4  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  6732  0050D8  0900               	iorlw	0
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;main.c: 839: return 0;
  6736  0050DA  0E00               	movlw	0
  6737  0050DC  A4D8               	btfss	status,2,c
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;main.c: 840: }
  6741                           ;main.c: 842: return 1;
  6742  0050DE  0E01               	movlw	1
  6743                           
  6744                           ; BSR set to: 0
  6745  0050E0  0012               	return	
  6746  0050E2                     __end_of_sendTempEvent:
  6747                           	opt stack 0
  6748                           tblptru	equ	0xFF8
  6749                           tblptrh	equ	0xFF7
  6750                           tblptrl	equ	0xFF6
  6751                           tablat	equ	0xFF5
  6752                           prodh	equ	0xFF4
  6753                           prodl	equ	0xFF3
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           postdec1	equ	0xFE5
  6757                           fsr1h	equ	0xFE2
  6758                           fsr1l	equ	0xFE1
  6759                           indf2	equ	0xFDF
  6760                           postinc2	equ	0xFDE
  6761                           postdec2	equ	0xFDD
  6762                           fsr2h	equ	0xFDA
  6763                           fsr2l	equ	0xFD9
  6764                           status	equ	0xFD8
  6765                           
  6766 ;; *************** function _setEventData *****************
  6767 ;; Defined at:
  6768 ;;		line 850 in file "../main.c"
  6769 ;; Parameters:    Size  Location     Type
  6770 ;;  v               2   42[BANK0 ] int 
  6771 ;;  unit            1   44[BANK0 ] unsigned char 
  6772 ;; Auto vars:     Size  Location     Type
  6773 ;;  newval          4   45[BANK0 ] unsigned char 
  6774 ;;  ival            2   49[BANK0 ] int 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;		None               void
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : F/0
  6781 ;;		On exit  : F/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6784 ;;      Params:         0       3       0       0       0       0       0
  6785 ;;      Locals:         0       6       0       0       0       0       0
  6786 ;;      Temps:          0       0       0       0       0       0       0
  6787 ;;      Totals:         0       9       0       0       0       0       0
  6788 ;;Total ram usage:        9 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    5
  6791 ;; This function calls:
  6792 ;;		_Celsius2Kelvin
  6793 ;;		_Celsius2Fahrenheit
  6794 ;;		___awtofl
  6795 ;;		___fltol
  6796 ;; This function is called by:
  6797 ;;		_sendTempEvent
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text29
  6802  004B52                     __ptext29:
  6803                           	opt stack 0
  6804  004B52                     _setEventData:
  6805                           	opt stack 23
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;main.c: 851: double newval;
  6809                           ;main.c: 852: int ival;
  6810                           ;main.c: 854: if (0 == unit) {
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;incstack = 0
  6814                           ;incstack = 0
  6815  004B52  678C               	tstfsz	setEventData@unit& (0+255),b
  6816  004B54  D019               	goto	l14037
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;main.c: 856: newval = Celsius2Kelvin(v);
  6820  004B56  C08A  F018         	movff	setEventData@v,?___awtofl
  6821  004B5A  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6822  004B5E  ECC4  F02B         	call	___awtofl	;wreg free
  6823  004B62  C01B  F03E         	movff	?___awtofl+3,?_Celsius2Kelvin+3
  6824  004B66  C01A  F03D         	movff	?___awtofl+2,?_Celsius2Kelvin+2
  6825  004B6A  C019  F03C         	movff	?___awtofl+1,?_Celsius2Kelvin+1
  6826  004B6E  C018  F03B         	movff	?___awtofl,?_Celsius2Kelvin
  6827  004B72  ECE1  F02B         	call	_Celsius2Kelvin	;wreg free
  6828  004B76  C03E  F090         	movff	?_Celsius2Kelvin+3,setEventData@newval+3
  6829  004B7A  C03D  F08F         	movff	?_Celsius2Kelvin+2,setEventData@newval+2
  6830  004B7E  C03C  F08E         	movff	?_Celsius2Kelvin+1,setEventData@newval+1
  6831  004B82  C03B  F08D         	movff	?_Celsius2Kelvin,setEventData@newval
  6832                           
  6833                           ;main.c: 857: } else if (2 == unit) {
  6834  004B86  D02A               	goto	l254
  6835  004B88                     l14037:
  6836                           
  6837                           ; BSR set to: 0
  6838  004B88  518C               	movf	setEventData@unit& (0+255),w,b
  6839  004B8A  0A02               	xorlw	2
  6840  004B8C  E119               	bnz	l14041
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;main.c: 859: newval = Celsius2Fahrenheit(v);
  6844  004B8E  C08A  F018         	movff	setEventData@v,?___awtofl
  6845  004B92  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6846  004B96  ECC4  F02B         	call	___awtofl	;wreg free
  6847  004B9A  C01B  F089         	movff	?___awtofl+3,?_Celsius2Fahrenheit+3
  6848  004B9E  C01A  F088         	movff	?___awtofl+2,?_Celsius2Fahrenheit+2
  6849  004BA2  C019  F087         	movff	?___awtofl+1,?_Celsius2Fahrenheit+1
  6850  004BA6  C018  F086         	movff	?___awtofl,?_Celsius2Fahrenheit
  6851  004BAA  ECEA  F028         	call	_Celsius2Fahrenheit	;wreg free
  6852  004BAE  C089  F090         	movff	?_Celsius2Fahrenheit+3,setEventData@newval+3
  6853  004BB2  C088  F08F         	movff	?_Celsius2Fahrenheit+2,setEventData@newval+2
  6854  004BB6  C087  F08E         	movff	?_Celsius2Fahrenheit+1,setEventData@newval+1
  6855  004BBA  C086  F08D         	movff	?_Celsius2Fahrenheit,setEventData@newval
  6856                           
  6857                           ;main.c: 860: } else {
  6858  004BBE  D00E               	goto	l254
  6859  004BC0                     l14041:
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;main.c: 862: newval = v;
  6863  004BC0  C08A  F018         	movff	setEventData@v,?___awtofl
  6864  004BC4  C08B  F019         	movff	setEventData@v+1,?___awtofl+1
  6865  004BC8  ECC4  F02B         	call	___awtofl	;wreg free
  6866  004BCC  C01B  F090         	movff	?___awtofl+3,setEventData@newval+3
  6867  004BD0  C01A  F08F         	movff	?___awtofl+2,setEventData@newval+2
  6868  004BD4  C019  F08E         	movff	?___awtofl+1,setEventData@newval+1
  6869  004BD8  C018  F08D         	movff	?___awtofl,setEventData@newval
  6870  004BDC                     l254:
  6871                           
  6872                           ;main.c: 863: }
  6873                           ;main.c: 865: ival = (int) newval;
  6874  004BDC  C08D  F034         	movff	setEventData@newval,?___fltol
  6875  004BE0  C08E  F035         	movff	setEventData@newval+1,?___fltol+1
  6876  004BE4  C08F  F036         	movff	setEventData@newval+2,?___fltol+2
  6877  004BE8  C090  F037         	movff	setEventData@newval+3,?___fltol+3
  6878  004BEC  EC55  F027         	call	___fltol	;wreg free
  6879  004BF0  C034  F091         	movff	?___fltol,setEventData@ival
  6880  004BF4  C035  F092         	movff	?___fltol+1,setEventData@ival+1
  6881                           
  6882                           ;main.c: 867: vscp_omsg.data[ 2 ] = ((ival & 0xff00) >> 8);
  6883  004BF8  0100               	movlb	0	; () banked
  6884  004BFA  5192               	movf	(setEventData@ival+1)& (0+255),w,b
  6885  004BFC  6FDA               	movwf	(_vscp_omsg+7)& (0+255),b
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;main.c: 868: vscp_omsg.data[ 3 ] = (ival & 0xff);
  6889  004BFE  C091  F0DB         	movff	setEventData@ival,_vscp_omsg+8
  6890                           
  6891                           ; BSR set to: 0
  6892  004C02  0012               	return	
  6893  004C04                     __end_of_setEventData:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           postinc0	equ	0xFEE
  6902                           wreg	equ	0xFE8
  6903                           postdec1	equ	0xFE5
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _Celsius2Fahrenheit *****************
  6914 ;; Defined at:
  6915 ;;		line 42 in file "../ntc.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  tc              4   38[BANK0 ] int 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  4   38[BANK0 ] int 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6929 ;;      Params:         0       4       0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0
  6932 ;;      Totals:         0       4       0       0       0       0       0
  6933 ;;Total ram usage:        4 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    4
  6936 ;; This function calls:
  6937 ;;		___fladd
  6938 ;;		___fldiv
  6939 ;;		___flmul
  6940 ;; This function is called by:
  6941 ;;		_setEventData
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text30
  6946  0051D4                     __ptext30:
  6947                           	opt stack 0
  6948  0051D4                     _Celsius2Fahrenheit:
  6949                           	opt stack 23
  6950                           
  6951                           ;ntc.c: 43: return ( (9 * tc + 16000) / 5);
  6952                           
  6953                           ; BSR set to: 0
  6954                           ;incstack = 0
  6955                           ;incstack = 0
  6956  0051D4  0100               	movlb	0	; () banked
  6957  0051D6  6B64               	clrf	(?___fladd+4)& (0+255),b
  6958  0051D8  6B65               	clrf	(?___fladd+5)& (0+255),b
  6959  0051DA  0E7A               	movlw	122
  6960  0051DC  6F66               	movwf	(?___fladd+6)& (0+255),b
  6961  0051DE  0E46               	movlw	70
  6962  0051E0  6F67               	movwf	(?___fladd+7)& (0+255),b
  6963  0051E2  6A22               	clrf	?___flmul+4,c
  6964  0051E4  6A23               	clrf	?___flmul+5,c
  6965  0051E6  0E10               	movlw	16
  6966  0051E8  6E24               	movwf	?___flmul+6,c
  6967  0051EA  0E41               	movlw	65
  6968  0051EC  6E25               	movwf	?___flmul+7,c
  6969  0051EE  C086  F01E         	movff	Celsius2Fahrenheit@tc,?___flmul
  6970  0051F2  C087  F01F         	movff	Celsius2Fahrenheit@tc+1,?___flmul+1
  6971  0051F6  C088  F020         	movff	Celsius2Fahrenheit@tc+2,?___flmul+2
  6972  0051FA  C089  F021         	movff	Celsius2Fahrenheit@tc+3,?___flmul+3
  6973  0051FE  ECC4  F023         	call	___flmul	;wreg free
  6974  005202  C021  F063         	movff	?___flmul+3,?___fladd+3
  6975  005206  C020  F062         	movff	?___flmul+2,?___fladd+2
  6976  00520A  C01F  F061         	movff	?___flmul+1,?___fladd+1
  6977  00520E  C01E  F060         	movff	?___flmul,?___fladd
  6978  005212  ECDC  F01E         	call	___fladd	;wreg free
  6979  005216  C063  F073         	movff	?___fladd+3,?___fldiv+3
  6980  00521A  C062  F072         	movff	?___fladd+2,?___fldiv+2
  6981  00521E  C061  F071         	movff	?___fladd+1,?___fldiv+1
  6982  005222  C060  F070         	movff	?___fladd,?___fldiv
  6983  005226  0100               	movlb	0	; () banked
  6984  005228  6B74               	clrf	(?___fldiv+4)& (0+255),b
  6985  00522A  6B75               	clrf	(?___fldiv+5)& (0+255),b
  6986  00522C  0EA0               	movlw	160
  6987  00522E  6F76               	movwf	(?___fldiv+6)& (0+255),b
  6988  005230  0E40               	movlw	64
  6989  005232  6F77               	movwf	(?___fldiv+7)& (0+255),b
  6990  005234  EC5B  F026         	call	___fldiv	;wreg free
  6991  005238  C073  F089         	movff	?___fldiv+3,?_Celsius2Fahrenheit+3
  6992  00523C  C072  F088         	movff	?___fldiv+2,?_Celsius2Fahrenheit+2
  6993  005240  C071  F087         	movff	?___fldiv+1,?_Celsius2Fahrenheit+1
  6994  005244  C070  F086         	movff	?___fldiv,?_Celsius2Fahrenheit
  6995  005248  0012               	return	
  6996  00524A                     __end_of_Celsius2Fahrenheit:
  6997                           	opt stack 0
  6998                           tblptru	equ	0xFF8
  6999                           tblptrh	equ	0xFF7
  7000                           tblptrl	equ	0xFF6
  7001                           tablat	equ	0xFF5
  7002                           prodh	equ	0xFF4
  7003                           prodl	equ	0xFF3
  7004                           postinc0	equ	0xFEE
  7005                           wreg	equ	0xFE8
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function ___fladd *****************
  7017 ;; Defined at:
  7018 ;;		line 89 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\fladd.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  f1              4    0[BANK0 ] int 
  7021 ;;  f2              4    4[BANK0 ] int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  exp1            1   57[COMRAM] unsigned char 
  7024 ;;  exp2            1   56[COMRAM] unsigned char 
  7025 ;;  sign            1   55[COMRAM] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  4    0[BANK0 ] unsigned char 
  7028 ;; Registers used:
  7029 ;;		wreg, status,2, status,0, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7035 ;;      Params:         0       8       0       0       0       0       0
  7036 ;;      Locals:         6       0       0       0       0       0       0
  7037 ;;      Temps:          1       0       0       0       0       0       0
  7038 ;;      Totals:         7       8       0       0       0       0       0
  7039 ;;Total ram usage:       15 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    3
  7042 ;; This function calls:
  7043 ;;		___flpack
  7044 ;; This function is called by:
  7045 ;;		_doWork
  7046 ;;		_Celsius2Fahrenheit
  7047 ;;		_Celsius2Kelvin
  7048 ;;		___asfladd
  7049 ;;		_floor
  7050 ;;		___flsub
  7051 ;;		_log
  7052 ;;		_eval_poly
  7053 ;; This function uses a non-reentrant model
  7054 ;;
  7055                           
  7056                           	psect	text31
  7057  003DB8                     __ptext31:
  7058                           	opt stack 0
  7059  003DB8                     ___fladd:
  7060                           	opt stack 25
  7061                           
  7062                           ;incstack = 0
  7063                           ;incstack = 0
  7064  003DB8  0100               	movlb	0	; () banked
  7065  003DBA  3562               	rlcf	(___fladd@f1+2)& (0+255),w,b
  7066  003DBC  3563               	rlcf	(___fladd@f1+3)& (0+255),w,b
  7067  003DBE  6E3A               	movwf	___fladd@exp1,c
  7068  003DC0  3566               	rlcf	(___fladd@f2+2)& (0+255),w,b
  7069  003DC2  3567               	rlcf	(___fladd@f2+3)& (0+255),w,b
  7070  003DC4  6E39               	movwf	___fladd@exp2,c
  7071  003DC6  503A               	movf	___fladd@exp1,w,c
  7072  003DC8  E009               	bz	l1574
  7073                           
  7074                           ; BSR set to: 0
  7075  003DCA  5039               	movf	___fladd@exp2,w,c
  7076  003DCC  603A               	cpfslt	___fladd@exp1,c
  7077  003DCE  D00F               	goto	l14103
  7078                           
  7079                           ; BSR set to: 0
  7080  003DD0  503A               	movf	___fladd@exp1,w,c
  7081  003DD2  5C39               	subwf	___fladd@exp2,w,c
  7082  003DD4  6E34               	movwf	??___fladd& (0+255),c
  7083  003DD6  0E21               	movlw	33
  7084  003DD8  5C34               	subwf	??___fladd,w,c
  7085  003DDA  E309               	bnc	l14103
  7086  003DDC                     l1574:
  7087                           
  7088                           ; BSR set to: 0
  7089  003DDC  C064  F060         	movff	___fladd@f2,?___fladd
  7090  003DE0  C065  F061         	movff	___fladd@f2+1,?___fladd+1
  7091  003DE4  C066  F062         	movff	___fladd@f2+2,?___fladd+2
  7092  003DE8  C067  F063         	movff	___fladd@f2+3,?___fladd+3
  7093  003DEC  D09C               	goto	l1575
  7094  003DEE                     l14103:
  7095                           
  7096                           ; BSR set to: 0
  7097  003DEE  5039               	movf	___fladd@exp2,w,c
  7098  003DF0  E009               	bz	l1578
  7099                           
  7100                           ; BSR set to: 0
  7101  003DF2  503A               	movf	___fladd@exp1,w,c
  7102  003DF4  6039               	cpfslt	___fladd@exp2,c
  7103  003DF6  D00F               	goto	l14109
  7104                           
  7105                           ; BSR set to: 0
  7106  003DF8  5039               	movf	___fladd@exp2,w,c
  7107  003DFA  5C3A               	subwf	___fladd@exp1,w,c
  7108  003DFC  6E34               	movwf	??___fladd& (0+255),c
  7109  003DFE  0E21               	movlw	33
  7110  003E00  5C34               	subwf	??___fladd,w,c
  7111  003E02  E309               	bnc	l14109
  7112  003E04                     l1578:
  7113                           
  7114                           ; BSR set to: 0
  7115  003E04  C060  F060         	movff	___fladd@f1,?___fladd
  7116  003E08  C061  F061         	movff	___fladd@f1+1,?___fladd+1
  7117  003E0C  C062  F062         	movff	___fladd@f1+2,?___fladd+2
  7118  003E10  C063  F063         	movff	___fladd@f1+3,?___fladd+3
  7119  003E14  D088               	goto	l1575
  7120  003E16                     l14109:
  7121                           
  7122                           ; BSR set to: 0
  7123  003E16  0E06               	movlw	6
  7124  003E18  6E38               	movwf	___fladd@sign,c
  7125                           
  7126                           ; BSR set to: 0
  7127  003E1A  BF63               	btfsc	(___fladd@f1+3)& (0+255),7,b
  7128                           
  7129                           ; BSR set to: 0
  7130  003E1C  8E38               	bsf	___fladd@sign,7,c
  7131                           
  7132                           ; BSR set to: 0
  7133  003E1E  BF67               	btfsc	(___fladd@f2+3)& (0+255),7,b
  7134                           
  7135                           ; BSR set to: 0
  7136  003E20  8C38               	bsf	___fladd@sign,6,c
  7137                           
  7138                           ; BSR set to: 0
  7139  003E22  8F62               	bsf	(___fladd@f1+2)& (0+255),7,b
  7140                           
  7141                           ; BSR set to: 0
  7142  003E24  6B63               	clrf	(___fladd@f1+3)& (0+255),b
  7143                           
  7144                           ; BSR set to: 0
  7145  003E26  8F66               	bsf	(___fladd@f2+2)& (0+255),7,b
  7146  003E28  6B67               	clrf	(___fladd@f2+3)& (0+255),b
  7147                           
  7148                           ; BSR set to: 0
  7149  003E2A  5039               	movf	___fladd@exp2,w,c
  7150  003E2C  603A               	cpfslt	___fladd@exp1,c
  7151  003E2E  D01A               	goto	l14135
  7152  003E30                     l14125:
  7153  003E30  0100               	movlb	0	; () banked
  7154  003E32  90D8               	bcf	status,0,c
  7155  003E34  3764               	rlcf	___fladd@f2& (0+255),f,b
  7156  003E36  3765               	rlcf	(___fladd@f2+1)& (0+255),f,b
  7157  003E38  3766               	rlcf	(___fladd@f2+2)& (0+255),f,b
  7158  003E3A  3767               	rlcf	(___fladd@f2+3)& (0+255),f,b
  7159  003E3C  0639               	decf	___fladd@exp2,f,c
  7160                           
  7161                           ; BSR set to: 0
  7162  003E3E  5039               	movf	___fladd@exp2,w,c
  7163  003E40  183A               	xorwf	___fladd@exp1,w,c
  7164  003E42  E00C               	bz	l14133
  7165                           
  7166                           ; BSR set to: 0
  7167  003E44  0638               	decf	___fladd@sign,f,c
  7168  003E46  5038               	movf	___fladd@sign& (0+255),w,c
  7169  003E48  0B07               	andlw	7
  7170  003E4A  E008               	bz	l14133
  7171  003E4C  D7F1               	goto	l14125
  7172  003E4E                     l14131:
  7173  003E4E  0100               	movlb	0	; () banked
  7174  003E50  90D8               	bcf	status,0,c
  7175  003E52  3363               	rrcf	(___fladd@f1+3)& (0+255),f,b
  7176  003E54  3362               	rrcf	(___fladd@f1+2)& (0+255),f,b
  7177  003E56  3361               	rrcf	(___fladd@f1+1)& (0+255),f,b
  7178  003E58  3360               	rrcf	___fladd@f1& (0+255),f,b
  7179  003E5A  2A3A               	incf	___fladd@exp1,f,c
  7180  003E5C                     l14133:
  7181  003E5C  5039               	movf	___fladd@exp2,w,c
  7182  003E5E  623A               	cpfseq	___fladd@exp1,c
  7183  003E60  D7F6               	goto	l14131
  7184  003E62  D01C               	goto	l1589
  7185  003E64                     l14135:
  7186                           
  7187                           ; BSR set to: 0
  7188  003E64  503A               	movf	___fladd@exp1,w,c
  7189  003E66  6039               	cpfslt	___fladd@exp2,c
  7190  003E68  D019               	goto	l1589
  7191  003E6A                     l14137:
  7192  003E6A  0100               	movlb	0	; () banked
  7193  003E6C  90D8               	bcf	status,0,c
  7194  003E6E  3760               	rlcf	___fladd@f1& (0+255),f,b
  7195  003E70  3761               	rlcf	(___fladd@f1+1)& (0+255),f,b
  7196  003E72  3762               	rlcf	(___fladd@f1+2)& (0+255),f,b
  7197  003E74  3763               	rlcf	(___fladd@f1+3)& (0+255),f,b
  7198  003E76  063A               	decf	___fladd@exp1,f,c
  7199                           
  7200                           ; BSR set to: 0
  7201  003E78  5039               	movf	___fladd@exp2,w,c
  7202  003E7A  183A               	xorwf	___fladd@exp1,w,c
  7203  003E7C  E00C               	bz	l14145
  7204                           
  7205                           ; BSR set to: 0
  7206  003E7E  0638               	decf	___fladd@sign,f,c
  7207  003E80  5038               	movf	___fladd@sign& (0+255),w,c
  7208  003E82  0B07               	andlw	7
  7209  003E84  E008               	bz	l14145
  7210  003E86  D7F1               	goto	l14137
  7211  003E88                     l14143:
  7212  003E88  0100               	movlb	0	; () banked
  7213  003E8A  90D8               	bcf	status,0,c
  7214  003E8C  3367               	rrcf	(___fladd@f2+3)& (0+255),f,b
  7215  003E8E  3366               	rrcf	(___fladd@f2+2)& (0+255),f,b
  7216  003E90  3365               	rrcf	(___fladd@f2+1)& (0+255),f,b
  7217  003E92  3364               	rrcf	___fladd@f2& (0+255),f,b
  7218  003E94  2A39               	incf	___fladd@exp2,f,c
  7219  003E96                     l14145:
  7220  003E96  5039               	movf	___fladd@exp2,w,c
  7221  003E98  623A               	cpfseq	___fladd@exp1,c
  7222  003E9A  D7F6               	goto	l14143
  7223  003E9C                     l1589:
  7224  003E9C  AE38               	btfss	___fladd@sign,7,c
  7225  003E9E  D00A               	goto	l14149
  7226  003EA0  0100               	movlb	0	; () banked
  7227  003EA2  1F60               	comf	___fladd@f1& (0+255),f,b
  7228  003EA4  1F61               	comf	(___fladd@f1+1)& (0+255),f,b
  7229  003EA6  1F62               	comf	(___fladd@f1+2)& (0+255),f,b
  7230  003EA8  1F63               	comf	(___fladd@f1+3)& (0+255),f,b
  7231  003EAA  2B60               	incf	___fladd@f1& (0+255),f,b
  7232  003EAC  0E00               	movlw	0
  7233  003EAE  2361               	addwfc	(___fladd@f1+1)& (0+255),f,b
  7234  003EB0  2362               	addwfc	(___fladd@f1+2)& (0+255),f,b
  7235  003EB2  2363               	addwfc	(___fladd@f1+3)& (0+255),f,b
  7236  003EB4                     l14149:
  7237  003EB4  AC38               	btfss	___fladd@sign,6,c
  7238  003EB6  D00A               	goto	l14153
  7239  003EB8  0100               	movlb	0	; () banked
  7240  003EBA  1F64               	comf	___fladd@f2& (0+255),f,b
  7241  003EBC  1F65               	comf	(___fladd@f2+1)& (0+255),f,b
  7242  003EBE  1F66               	comf	(___fladd@f2+2)& (0+255),f,b
  7243  003EC0  1F67               	comf	(___fladd@f2+3)& (0+255),f,b
  7244  003EC2  2B64               	incf	___fladd@f2& (0+255),f,b
  7245  003EC4  0E00               	movlw	0
  7246  003EC6  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7247  003EC8  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7248  003ECA  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7249  003ECC                     l14153:
  7250  003ECC  6A38               	clrf	___fladd@sign,c
  7251  003ECE  0100               	movlb	0	; () banked
  7252  003ED0  5160               	movf	___fladd@f1& (0+255),w,b
  7253  003ED2  2764               	addwf	___fladd@f2& (0+255),f,b
  7254  003ED4  5161               	movf	(___fladd@f1+1)& (0+255),w,b
  7255  003ED6  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7256  003ED8  5162               	movf	(___fladd@f1+2)& (0+255),w,b
  7257  003EDA  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7258  003EDC  5163               	movf	(___fladd@f1+3)& (0+255),w,b
  7259  003EDE  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7260                           
  7261                           ; BSR set to: 0
  7262  003EE0  AF67               	btfss	(___fladd@f2+3)& (0+255),7,b
  7263  003EE2  D00B               	goto	l14161
  7264                           
  7265                           ; BSR set to: 0
  7266  003EE4  1F64               	comf	___fladd@f2& (0+255),f,b
  7267  003EE6  1F65               	comf	(___fladd@f2+1)& (0+255),f,b
  7268  003EE8  1F66               	comf	(___fladd@f2+2)& (0+255),f,b
  7269  003EEA  1F67               	comf	(___fladd@f2+3)& (0+255),f,b
  7270  003EEC  2B64               	incf	___fladd@f2& (0+255),f,b
  7271  003EEE  0E00               	movlw	0
  7272  003EF0  2365               	addwfc	(___fladd@f2+1)& (0+255),f,b
  7273  003EF2  2366               	addwfc	(___fladd@f2+2)& (0+255),f,b
  7274  003EF4  2367               	addwfc	(___fladd@f2+3)& (0+255),f,b
  7275                           
  7276                           ; BSR set to: 0
  7277  003EF6  0E01               	movlw	1
  7278  003EF8  6E38               	movwf	___fladd@sign,c
  7279  003EFA                     l14161:
  7280                           
  7281                           ; BSR set to: 0
  7282  003EFA  C064  F00E         	movff	___fladd@f2,?___flpack
  7283  003EFE  C065  F00F         	movff	___fladd@f2+1,?___flpack+1
  7284  003F02  C066  F010         	movff	___fladd@f2+2,?___flpack+2
  7285  003F06  C067  F011         	movff	___fladd@f2+3,?___flpack+3
  7286  003F0A  C03A  F012         	movff	___fladd@exp1,?___flpack+4
  7287  003F0E  C038  F013         	movff	___fladd@sign,?___flpack+5
  7288  003F12  EC8C  F024         	call	___flpack	;wreg free
  7289  003F16  C011  F063         	movff	?___flpack+3,?___fladd+3
  7290  003F1A  C010  F062         	movff	?___flpack+2,?___fladd+2
  7291  003F1E  C00F  F061         	movff	?___flpack+1,?___fladd+1
  7292  003F22  C00E  F060         	movff	?___flpack,?___fladd
  7293  003F26                     l1575:
  7294  003F26  0012               	return	
  7295  003F28                     __end_of___fladd:
  7296                           	opt stack 0
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           postinc0	equ	0xFEE
  7304                           wreg	equ	0xFE8
  7305                           postdec1	equ	0xFE5
  7306                           fsr1h	equ	0xFE2
  7307                           fsr1l	equ	0xFE1
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           fsr2h	equ	0xFDA
  7312                           fsr2l	equ	0xFD9
  7313                           status	equ	0xFD8
  7314                           
  7315 ;; *************** function _Celsius2Kelvin *****************
  7316 ;; Defined at:
  7317 ;;		line 61 in file "../ntc.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;  tc              4   58[COMRAM] unsigned char 
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;		None
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  4   58[COMRAM] unsigned char 
  7324 ;; Registers used:
  7325 ;;		wreg, status,2, status,0, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7331 ;;      Params:         4       0       0       0       0       0       0
  7332 ;;      Locals:         0       0       0       0       0       0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0
  7334 ;;      Totals:         4       0       0       0       0       0       0
  7335 ;;Total ram usage:        4 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:    4
  7338 ;; This function calls:
  7339 ;;		___fladd
  7340 ;; This function is called by:
  7341 ;;		_setEventData
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text32
  7346  0057C2                     __ptext32:
  7347                           	opt stack 0
  7348  0057C2                     _Celsius2Kelvin:
  7349                           	opt stack 23
  7350                           
  7351                           ;ntc.c: 62: return (27316.0 + tc);
  7352                           
  7353                           ;incstack = 0
  7354                           ;incstack = 0
  7355  0057C2  C03B  F060         	movff	Celsius2Kelvin@tc,?___fladd
  7356  0057C6  C03C  F061         	movff	Celsius2Kelvin@tc+1,?___fladd+1
  7357  0057CA  C03D  F062         	movff	Celsius2Kelvin@tc+2,?___fladd+2
  7358  0057CE  C03E  F063         	movff	Celsius2Kelvin@tc+3,?___fladd+3
  7359  0057D2  0100               	movlb	0	; () banked
  7360  0057D4  6B64               	clrf	(?___fladd+4)& (0+255),b
  7361  0057D6  0E68               	movlw	104
  7362  0057D8  6F65               	movwf	(?___fladd+5)& (0+255),b
  7363  0057DA  0ED5               	movlw	213
  7364  0057DC  6F66               	movwf	(?___fladd+6)& (0+255),b
  7365  0057DE  0E46               	movlw	70
  7366  0057E0  6F67               	movwf	(?___fladd+7)& (0+255),b
  7367  0057E2  ECDC  F01E         	call	___fladd	;wreg free
  7368  0057E6  C063  F03E         	movff	?___fladd+3,?_Celsius2Kelvin+3
  7369  0057EA  C062  F03D         	movff	?___fladd+2,?_Celsius2Kelvin+2
  7370  0057EE  C061  F03C         	movff	?___fladd+1,?_Celsius2Kelvin+1
  7371  0057F2  C060  F03B         	movff	?___fladd,?_Celsius2Kelvin
  7372  0057F6  0012               	return	
  7373  0057F8                     __end_of_Celsius2Kelvin:
  7374                           	opt stack 0
  7375                           tblptru	equ	0xFF8
  7376                           tblptrh	equ	0xFF7
  7377                           tblptrl	equ	0xFF6
  7378                           tablat	equ	0xFF5
  7379                           prodh	equ	0xFF4
  7380                           prodl	equ	0xFF3
  7381                           postinc0	equ	0xFEE
  7382                           wreg	equ	0xFE8
  7383                           postdec1	equ	0xFE5
  7384                           fsr1h	equ	0xFE2
  7385                           fsr1l	equ	0xFE1
  7386                           indf2	equ	0xFDF
  7387                           postinc2	equ	0xFDE
  7388                           postdec2	equ	0xFDD
  7389                           fsr2h	equ	0xFDA
  7390                           fsr2l	equ	0xFD9
  7391                           status	equ	0xFD8
  7392                           
  7393 ;; *************** function _vscp_handleProtocolEvent *****************
  7394 ;; Defined at:
  7395 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  7396 ;; Parameters:    Size  Location     Type
  7397 ;;		None
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  bytes           1   44[BANK0 ] unsigned char 
  7400 ;;  page_save       2   40[BANK0 ] unsigned short 
  7401 ;;  i               1   50[BANK0 ] unsigned char 
  7402 ;;  bytes           2   54[BANK0 ] unsigned short 
  7403 ;;  page_save       2   38[BANK0 ] unsigned short 
  7404 ;;  byte            1   53[BANK0 ] unsigned char 
  7405 ;;  cb              1   49[BANK0 ] unsigned char 
  7406 ;;  bytes_this_t    1   48[BANK0 ] unsigned char 
  7407 ;;  j               1   58[BANK0 ] unsigned char 
  7408 ;;  i               1   56[BANK0 ] unsigned char 
  7409 ;;  k               1   51[BANK0 ] unsigned char 
  7410 ;;  i               1   52[BANK0 ] unsigned char 
  7411 ;;  len             1   47[BANK0 ] unsigned char 
  7412 ;;  pos             1   46[BANK0 ] unsigned char 
  7413 ;;  i               1   57[BANK0 ] unsigned char 
  7414 ;;  len             1   45[BANK0 ] unsigned char 
  7415 ;;  pos             1   43[BANK0 ] unsigned char 
  7416 ;;  offset          1   42[BANK0 ] unsigned char 
  7417 ;; Return value:  Size  Location     Type
  7418 ;;		None               void
  7419 ;; Registers used:
  7420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : F/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7426 ;;      Params:         0       0       0       0       0       0       0
  7427 ;;      Locals:         0      21       0       0       0       0       0
  7428 ;;      Temps:          0       7       0       0       0       0       0
  7429 ;;      Totals:         0      28       0       0       0       0       0
  7430 ;;Total ram usage:       28 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:    8
  7433 ;; This function calls:
  7434 ;;		_vscp_init
  7435 ;;		_vscp_sendEvent
  7436 ;;		_vscp_readAppReg
  7437 ;;		_vscp_writeAppReg
  7438 ;;		_vscp_getGUID
  7439 ;;		_vscp_getMDF_URL
  7440 ;;		_vscp_getMatrixInfo
  7441 ;;		_vscp_goBootloaderMode
  7442 ;;		_vscp_handleHeartbeat
  7443 ;;		_vscp_handleSetNickname
  7444 ;;		_vscp_handleDropNickname
  7445 ;;		_vscp_newNodeOnline
  7446 ;;		_vscp_readRegister
  7447 ;;		_vscp_readStdReg
  7448 ;;		_vscp_writeRegister
  7449 ;;		_vscp_writeStdReg
  7450 ;;		___lbmod
  7451 ;; This function is called by:
  7452 ;;		_main
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text33
  7457  0027B8                     __ptext33:
  7458                           	opt stack 0
  7459  0027B8                     _vscp_handleProtocolEvent:
  7460                           	opt stack 22
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  7464                           
  7465                           ;incstack = 0
  7466                           ;incstack = 0
  7467  0027B8  51C8               	movf	(_vscp_imsg+3)& (0+255),w,b
  7468  0027BA  11C7               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7469  0027BC  E101 D2EF          	bz	l10093
  7470  0027C0  D31F               	goto	l1271
  7471  0027C2                     l9675:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  7475  0027C2  EC4C  F02B         	call	_vscp_handleHeartbeat	;wreg free
  7476                           
  7477                           ;vscp_firmware.c: 807: break;
  7478  0027C6  D31C               	goto	l1271
  7479  0027C8                     l9677:
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  7483  0027C8  EC3F  F02C         	call	_vscp_newNodeOnline	;wreg free
  7484                           
  7485                           ;vscp_firmware.c: 812: break;
  7486  0027CC  D319               	goto	l1271
  7487  0027CE                     l9679:
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  7491  0027CE  ECC9  F02C         	call	_vscp_handleSetNickname	;wreg free
  7492                           
  7493                           ;vscp_firmware.c: 817: break;
  7494  0027D2  D316               	goto	l1271
  7495  0027D4                     l9681:
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  7499  0027D4  ECFC  F02B         	call	_vscp_handleDropNickname	;wreg free
  7500                           
  7501                           ;vscp_firmware.c: 822: break;
  7502  0027D8  D313               	goto	l1271
  7503  0027DA                     l9683:
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  7507                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7508  0027DA  51C5               	movf	_vscp_imsg& (0+255),w,b
  7509  0027DC  0B0F               	andlw	15
  7510  0027DE  0A02               	xorlw	2
  7511  0027E0  E001 D30E          	bnz	l1271
  7512                           
  7513                           ; BSR set to: 0
  7514  0027E4  51C3               	movf	_vscp_nickname& (0+255),w,b
  7515  0027E6  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  7516  0027EA  62DF               	cpfseq	indf2,c
  7517  0027EC  D309               	goto	l1271
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  7521  0027EE  0E80               	movlw	128
  7522  0027F0  61CC               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7523  0027F2  D012               	goto	l9703
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  7527  0027F4  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  7528  0027F6  EC0C  F010         	call	_vscp_readAppReg
  7529  0027FA                     L8:
  7530  0027FA  0100               	movlb	0	; () banked
  7531  0027FC  6FD9               	movwf	(_vscp_omsg+6)& (0+255),b
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  7535  0027FE  C0CC  F0D8         	movff	_vscp_imsg+7,_vscp_omsg+5
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  7539  002802  0E03               	movlw	3
  7540  002804  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  7544  002806  0E82               	movlw	130
  7545  002808  6FD3               	movwf	_vscp_omsg& (0+255),b
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  7549  00280A  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  7550  00280C  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  7554  00280E  0E0A               	movlw	10
  7555  002810  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  7556  002812                     l9701:
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;vscp_firmware.c: 843: vscp_sendEvent();
  7560  002812  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  7561                           
  7562                           ;vscp_firmware.c: 844: }
  7563  002816  D2F4               	goto	l1271
  7564  002818                     l9703:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;vscp_firmware.c: 845: else {
  7568                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  7569                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  7570  002818  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  7571  00281A  EC05  F01E         	call	_vscp_readStdReg
  7572  00281E  D7ED               	goto	L8
  7573  002820                     l9717:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  7577                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7578  002820  51C5               	movf	_vscp_imsg& (0+255),w,b
  7579  002822  0B0F               	andlw	15
  7580  002824  0A03               	xorlw	3
  7581  002826  E001 D2EB          	bnz	l1271
  7582                           
  7583                           ; BSR set to: 0
  7584  00282A  51C3               	movf	_vscp_nickname& (0+255),w,b
  7585  00282C  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  7586  002830  62DF               	cpfseq	indf2,c
  7587  002832  D2E6               	goto	l1271
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  7591  002834  0E80               	movlw	128
  7592  002836  61CC               	cpfslt	(_vscp_imsg+7)& (0+255),b
  7593  002838  D006               	goto	l9737
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  7597                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7598  00283A  C0CD  F023         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  7599  00283E  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  7600  002840  ECB7  F005         	call	_vscp_writeAppReg
  7601  002844  D7DA               	goto	L8
  7602  002846                     l9737:
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;vscp_firmware.c: 888: else {
  7606                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  7607                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  7608  002846  C0CD  F01B         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  7609  00284A  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  7610  00284C  ECC1  F022         	call	_vscp_writeStdReg
  7611  002850  D7D4               	goto	L8
  7612  002852                     l9751:
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  7616                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  7617                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  7618                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  7619                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  7620                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  7621                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  7622  002852  51C3               	movf	_vscp_nickname& (0+255),w,b
  7623  002854  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  7624  002858  62DF               	cpfseq	indf2,c
  7625  00285A  D2D2               	goto	l1271
  7626                           
  7627                           ; BSR set to: 0
  7628  00285C  0E00               	movlw	0
  7629  00285E  EC9A  F02D         	call	_vscp_getGUID
  7630  002862  0100               	movlb	0	; () banked
  7631  002864  19CD               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7632  002866  E001 D2CB          	bnz	l1271
  7633                           
  7634                           ; BSR set to: 0
  7635  00286A  0E03               	movlw	3
  7636  00286C  EC9A  F02D         	call	_vscp_getGUID
  7637  002870  0100               	movlb	0	; () banked
  7638  002872  19CE               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7639  002874  E001 D2C4          	bnz	l1271
  7640                           
  7641                           ; BSR set to: 0
  7642  002878  0E05               	movlw	5
  7643  00287A  EC9A  F02D         	call	_vscp_getGUID
  7644  00287E  0100               	movlb	0	; () banked
  7645  002880  19CF               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7646  002882  E001 D2BD          	bnz	l1271
  7647                           
  7648                           ; BSR set to: 0
  7649  002886  0E07               	movlw	7
  7650  002888  EC9A  F02D         	call	_vscp_getGUID
  7651  00288C  0100               	movlb	0	; () banked
  7652  00288E  19D0               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  7653  002890  E001 D2B6          	bnz	l1271
  7654                           
  7655                           ; BSR set to: 0
  7656  002894  5047               	movf	_vscp_page_select+1,w,c
  7657  002896  19D1               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  7658  002898  E001 D2B2          	bnz	l1271
  7659                           
  7660                           ; BSR set to: 0
  7661  00289C  5046               	movf	_vscp_page_select,w,c
  7662  00289E  EE20  F0D2         	lfsr	2,_vscp_imsg+13
  7663  0028A2  62DF               	cpfseq	indf2,c
  7664  0028A4  D2AD               	goto	l1271
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  7668  0028A6  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  7669  0028A8  EC0F  F02D         	call	_vscp_goBootloaderMode
  7670  0028AC  D2A9               	goto	l1271
  7671  0028AE                     l9767:
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  7675                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  7676                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  7677                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  7678  0028AE  0E00               	movlw	0
  7679  0028B0  EC9A  F02D         	call	_vscp_getGUID
  7680  0028B4  0100               	movlb	0	; () banked
  7681  0028B6  19CC               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7682  0028B8  E173               	bnz	l9811
  7683                           
  7684                           ; BSR set to: 0
  7685  0028BA  0E01               	movlw	1
  7686  0028BC  EC9A  F02D         	call	_vscp_getGUID
  7687  0028C0  0100               	movlb	0	; () banked
  7688  0028C2  19CD               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7689  0028C4  E16D               	bnz	l9811
  7690                           
  7691                           ; BSR set to: 0
  7692  0028C6  0E02               	movlw	2
  7693  0028C8  EC9A  F02D         	call	_vscp_getGUID
  7694  0028CC  0100               	movlb	0	; () banked
  7695  0028CE  19CE               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7696  0028D0  E167               	bnz	l9811
  7697                           
  7698                           ; BSR set to: 0
  7699  0028D2  0E03               	movlw	3
  7700  0028D4  EC9A  F02D         	call	_vscp_getGUID
  7701  0028D8  0100               	movlb	0	; () banked
  7702  0028DA  19CF               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7703  0028DC  E161               	bnz	l9811
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  7707  0028DE  884B               	bsf	_vscp_guid_reset,4,c
  7708  0028E0  D05F               	goto	l9811
  7709  0028E2                     l9777:
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  7713                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  7714                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  7715                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  7716  0028E2  0E04               	movlw	4
  7717  0028E4  EC9A  F02D         	call	_vscp_getGUID
  7718  0028E8  0100               	movlb	0	; () banked
  7719  0028EA  19CC               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7720  0028EC  E159               	bnz	l9811
  7721                           
  7722                           ; BSR set to: 0
  7723  0028EE  0E05               	movlw	5
  7724  0028F0  EC9A  F02D         	call	_vscp_getGUID
  7725  0028F4  0100               	movlb	0	; () banked
  7726  0028F6  19CD               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7727  0028F8  E153               	bnz	l9811
  7728                           
  7729                           ; BSR set to: 0
  7730  0028FA  0E06               	movlw	6
  7731  0028FC  EC9A  F02D         	call	_vscp_getGUID
  7732  002900  0100               	movlb	0	; () banked
  7733  002902  19CE               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7734  002904  E14D               	bnz	l9811
  7735                           
  7736                           ; BSR set to: 0
  7737  002906  0E07               	movlw	7
  7738  002908  EC9A  F02D         	call	_vscp_getGUID
  7739  00290C  0100               	movlb	0	; () banked
  7740  00290E  19CF               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7741  002910  E147               	bnz	l9811
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  7745  002912  8A4B               	bsf	_vscp_guid_reset,5,c
  7746  002914  D045               	goto	l9811
  7747  002916                     l9787:
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  7751                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  7752                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  7753                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  7754  002916  0E08               	movlw	8
  7755  002918  EC9A  F02D         	call	_vscp_getGUID
  7756  00291C  0100               	movlb	0	; () banked
  7757  00291E  19CC               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7758  002920  E13F               	bnz	l9811
  7759                           
  7760                           ; BSR set to: 0
  7761  002922  0E09               	movlw	9
  7762  002924  EC9A  F02D         	call	_vscp_getGUID
  7763  002928  0100               	movlb	0	; () banked
  7764  00292A  19CD               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7765  00292C  E139               	bnz	l9811
  7766                           
  7767                           ; BSR set to: 0
  7768  00292E  0E0A               	movlw	10
  7769  002930  EC9A  F02D         	call	_vscp_getGUID
  7770  002934  0100               	movlb	0	; () banked
  7771  002936  19CE               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7772  002938  E133               	bnz	l9811
  7773                           
  7774                           ; BSR set to: 0
  7775  00293A  0E0B               	movlw	11
  7776  00293C  EC9A  F02D         	call	_vscp_getGUID
  7777  002940  0100               	movlb	0	; () banked
  7778  002942  19CF               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7779  002944  E12D               	bnz	l9811
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  7783  002946  8C4B               	bsf	_vscp_guid_reset,6,c
  7784  002948  D02B               	goto	l9811
  7785  00294A                     l9797:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  7789                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  7790                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  7791                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  7792  00294A  0E0C               	movlw	12
  7793  00294C  EC9A  F02D         	call	_vscp_getGUID
  7794  002950  0100               	movlb	0	; () banked
  7795  002952  19CC               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  7796  002954  E125               	bnz	l9811
  7797                           
  7798                           ; BSR set to: 0
  7799  002956  0E0D               	movlw	13
  7800  002958  EC9A  F02D         	call	_vscp_getGUID
  7801  00295C  0100               	movlb	0	; () banked
  7802  00295E  19CD               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  7803  002960  E11F               	bnz	l9811
  7804                           
  7805                           ; BSR set to: 0
  7806  002962  0E0E               	movlw	14
  7807  002964  EC9A  F02D         	call	_vscp_getGUID
  7808  002968  0100               	movlb	0	; () banked
  7809  00296A  19CE               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  7810  00296C  E119               	bnz	l9811
  7811                           
  7812                           ; BSR set to: 0
  7813  00296E  0E0F               	movlw	15
  7814  002970  EC9A  F02D         	call	_vscp_getGUID
  7815  002974  0100               	movlb	0	; () banked
  7816  002976  19CF               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  7817  002978  E113               	bnz	l9811
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  7821  00297A  8E4B               	bsf	_vscp_guid_reset,7,c
  7822  00297C  D011               	goto	l9811
  7823  00297E                     l1211:
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  7827  00297E  6A4B               	clrf	_vscp_guid_reset,c
  7828                           
  7829                           ;vscp_firmware.c: 965: break;
  7830  002980  D00F               	goto	l9811
  7831  002982                     l9809:
  7832                           
  7833                           ; BSR set to: 0
  7834  002982  39CB               	swapf	(_vscp_imsg+6)& (0+255),w,b
  7835  002984  0B0F               	andlw	15
  7836  002986  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7837  002988  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7838                           
  7839                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7840                           ; Switch size 1, requested type "speed"
  7841                           ; Number of cases is 1, Range of values is 0 to 0
  7842                           ; switch strategies available:
  7843                           ; Name         Instructions Cycles
  7844                           ; simple_byte            4     3 (average)
  7845                           ;	Chosen strategy is simple_byte
  7846  00298A  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7847  00298C  E1F8               	bnz	l1211
  7848                           
  7849                           ; BSR set to: 0
  7850                           ; Switch size 1, requested type "speed"
  7851                           ; Number of cases is 4, Range of values is 0 to 3
  7852                           ; switch strategies available:
  7853                           ; Name         Instructions Cycles
  7854                           ; simple_byte           13     7 (average)
  7855                           ;	Chosen strategy is simple_byte
  7856  00298E  517F               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  7857  002990  E08E               	bz	l9767
  7858  002992  0A01               	xorlw	1	; case 1
  7859  002994  E0A6               	bz	l9777
  7860  002996  0A03               	xorlw	3	; case 2
  7861  002998  E0BE               	bz	l9787
  7862  00299A  0A01               	xorlw	1	; case 3
  7863  00299C  E0D6               	bz	l9797
  7864  00299E  D7EF               	goto	l1211
  7865  0029A0                     l9811:
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  7869  0029A0  504B               	movf	_vscp_guid_reset,w,c
  7870  0029A2  0BF0               	andlw	240
  7871  0029A4  0AF0               	xorlw	240
  7872  0029A6  E001 D22B          	bnz	l1271
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;vscp_firmware.c: 970: vscp_init();
  7876  0029AA  ECE9  F02A         	call	_vscp_init	;wreg free
  7877  0029AE  D228               	goto	l1271
  7878  0029B0                     l9815:
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  7882  0029B0  51C3               	movf	_vscp_nickname& (0+255),w,b
  7883  0029B2  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  7884  0029B6  62DF               	cpfseq	indf2,c
  7885  0029B8  D223               	goto	l1271
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;vscp_firmware.c: 978: uint8_t i;
  7889                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  7890  0029BA  6B8B               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  7891                           
  7892                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  7893  0029BC  C0CC  F08A         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  7894                           
  7895                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  7896  0029C0  C0CD  F08D         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  7897                           
  7898                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  7899  0029C4  6B99               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  7900  0029C6  D049               	goto	l9847
  7901  0029C8                     l9819:
  7902                           
  7903                           ; BSR set to: 0
  7904                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  7905  0029C8  518A               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  7906  0029CA  2599               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  7907  0029CC  EC3C  F02D         	call	_vscp_readRegister
  7908  0029D0  0100               	movlb	0	; () banked
  7909  0029D2  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7910  0029D4  0E07               	movlw	7
  7911  0029D6  6E0E               	movwf	?___lbmod,c
  7912  0029D8  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7913  0029DA  EC69  F02C         	call	___lbmod
  7914  0029DE  0100               	movlb	0	; () banked
  7915  0029E0  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7916  0029E2  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7917  0029E4  0FD9               	addlw	low (_vscp_omsg+6)
  7918  0029E6  6ED9               	movwf	fsr2l,c
  7919  0029E8  6ADA               	clrf	fsr2h,c
  7920  0029EA  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  7924  0029EE  0E07               	movlw	7
  7925  0029F0  6E0E               	movwf	?___lbmod,c
  7926  0029F2  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7927  0029F4  EC69  F02C         	call	___lbmod
  7928  0029F8  0A06               	xorlw	6
  7929  0029FA  E00B               	bz	l9825
  7930  0029FC  0EFF               	movlw	255
  7931  0029FE  0100               	movlb	0	; () banked
  7932  002A00  258D               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  7933  002A02  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7934  002A04  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  7935  002A06  0EFF               	movlw	255
  7936  002A08  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  7937  002A0A  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7938  002A0C  197F               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  7939  002A0E  1180               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  7940  002A10  E123               	bnz	l9845
  7941  002A12                     l9825:
  7942                           
  7943                           ;vscp_firmware.c: 988: uint8_t bytes;
  7944                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  7945  002A12  0E07               	movlw	7
  7946  002A14  6E0E               	movwf	?___lbmod,c
  7947  002A16  0100               	movlb	0	; () banked
  7948  002A18  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7949  002A1A  EC69  F02C         	call	___lbmod
  7950  002A1E  0A06               	xorlw	6
  7951  002A20  E103               	bnz	l9829
  7952                           
  7953                           ;vscp_firmware.c: 991: bytes = 7;
  7954  002A22  0E07               	movlw	7
  7955  002A24  0100               	movlb	0	; () banked
  7956  002A26  D009               	goto	L9
  7957  002A28                     l9829:
  7958                           
  7959                           ;vscp_firmware.c: 993: else {
  7960                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  7961  002A28  0E07               	movlw	7
  7962  002A2A  6E0E               	movwf	?___lbmod,c
  7963  002A2C  0100               	movlb	0	; () banked
  7964  002A2E  5199               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  7965  002A30  EC69  F02C         	call	___lbmod
  7966  002A34  0100               	movlb	0	; () banked
  7967  002A36  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  7968  002A38  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  7969  002A3A                     L9:
  7970  002A3A  6F8C               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;vscp_firmware.c: 995: }
  7974                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  7975  002A3C  518C               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  7976  002A3E  0F81               	addlw	129
  7977  002A40  6FD3               	movwf	_vscp_omsg& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  7981  002A42  0E07               	movlw	7
  7982  002A44  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  7986  002A46  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  7987  002A48  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  7991  002A4A  0E1A               	movlw	26
  7992  002A4C  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  7996  002A4E  C08B  F0D8         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  8000  002A52  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;vscp_firmware.c: 1005: pos++;
  8004  002A56  2B8B               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  8005  002A58                     l9845:
  8006                           
  8007                           ; BSR set to: 0
  8008  002A58  2B99               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  8009  002A5A                     l9847:
  8010                           
  8011                           ; BSR set to: 0
  8012  002A5A  518D               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  8013  002A5C  5D99               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  8014  002A5E  E301 D1CF          	bc	l1271
  8015  002A62  D7B2               	goto	l9819
  8016  002A64                     l9849:
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8020  002A64  51C3               	movf	_vscp_nickname& (0+255),w,b
  8021  002A66  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  8022  002A6A  62DF               	cpfseq	indf2,c
  8023  002A6C  D1C9               	goto	l1271
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;vscp_firmware.c: 1014: uint8_t i;
  8027                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  8028  002A6E  C0CC  F08E         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1163
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  8032  002A72  51C5               	movf	_vscp_imsg& (0+255),w,b
  8033  002A74  0FFE               	addlw	254
  8034  002A76  0B07               	andlw	7
  8035  002A78  6F8F               	movwf	vscp_handleProtocolEvent@len_1164& (0+255),b
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  8039  002A7A  6B94               	clrf	vscp_handleProtocolEvent@i_1162& (0+255),b
  8040  002A7C  D018               	goto	l9863
  8041  002A7E                     l9857:
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  8045  002A7E  5194               	movf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8046  002A80  0FCD               	addlw	low (_vscp_imsg+8)
  8047  002A82  6ED9               	movwf	fsr2l,c
  8048  002A84  6ADA               	clrf	fsr2h,c
  8049  002A86  50DF               	movf	indf2,w,c
  8050  002A88  6E27               	movwf	?_vscp_writeRegister,c
  8051  002A8A  518E               	movf	vscp_handleProtocolEvent@pos_1163& (0+255),w,b
  8052  002A8C  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8053  002A8E  ECED  F02C         	call	_vscp_writeRegister
  8054                           
  8055                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  8056  002A92  0100               	movlb	0	; () banked
  8057  002A94  518E               	movf	vscp_handleProtocolEvent@pos_1163& (0+255),w,b
  8058  002A96  2594               	addwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8059  002A98  EC3C  F02D         	call	_vscp_readRegister
  8060  002A9C  0100               	movlb	0	; () banked
  8061  002A9E  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8062  002AA0  5194               	movf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8063  002AA2  0FD9               	addlw	low (_vscp_omsg+6)
  8064  002AA4  6ED9               	movwf	fsr2l,c
  8065  002AA6  6ADA               	clrf	fsr2h,c
  8066  002AA8  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8067                           
  8068                           ; BSR set to: 0
  8069  002AAC  2B94               	incf	vscp_handleProtocolEvent@i_1162& (0+255),f,b
  8070  002AAE                     l9863:
  8071                           
  8072                           ; BSR set to: 0
  8073  002AAE  518F               	movf	vscp_handleProtocolEvent@len_1164& (0+255),w,b
  8074  002AB0  5D94               	subwf	vscp_handleProtocolEvent@i_1162& (0+255),w,b
  8075  002AB2  E3E5               	bnc	l9857
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;vscp_firmware.c: 1022: }
  8079                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  8080  002AB4  0E07               	movlw	7
  8081  002AB6  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  8082                           
  8083                           ; BSR set to: 0
  8084                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  8085  002AB8  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  8086  002ABA  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  8087                           
  8088                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  8089  002ABC  0E1A               	movlw	26
  8090  002ABE  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  8094  002AC0  6BD8               	clrf	(_vscp_omsg+5)& (0+255),b
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  8098  002AC2  518F               	movf	vscp_handleProtocolEvent@len_1164& (0+255),w,b
  8099  002AC4  0F81               	addlw	129
  8100  002AC6  6FD3               	movwf	_vscp_omsg& (0+255),b
  8101  002AC8  D6A4               	goto	l9701
  8102  002ACA                     l9875:
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8106  002ACA  51C3               	movf	_vscp_nickname& (0+255),w,b
  8107  002ACC  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  8108  002AD0  62DF               	cpfseq	indf2,c
  8109  002AD2  D196               	goto	l1271
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8113                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  8114                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  8115  002AD4  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  8116  002AD6  EC0C  F010         	call	_vscp_readAppReg
  8117  002ADA  0100               	movlb	0	; () banked
  8118  002ADC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8119  002ADE  297F               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  8120  002AE0  6E23               	movwf	?_vscp_writeAppReg,c
  8121  002AE2  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  8122  002AE4  ECB7  F005         	call	_vscp_writeAppReg
  8123  002AE8  D688               	goto	L8
  8124  002AEA                     l9891:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8128  002AEA  51C3               	movf	_vscp_nickname& (0+255),w,b
  8129  002AEC  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  8130  002AF0  62DF               	cpfseq	indf2,c
  8131  002AF2  D186               	goto	l1271
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  8135                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  8136                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  8137  002AF4  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  8138  002AF6  EC0C  F010         	call	_vscp_readAppReg
  8139  002AFA  0100               	movlb	0	; () banked
  8140  002AFC  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8141  002AFE  057F               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  8142  002B00  6E23               	movwf	?_vscp_writeAppReg,c
  8143  002B02  51CC               	movf	(_vscp_imsg+7)& (0+255),w,b
  8144  002B04  ECB7  F005         	call	_vscp_writeAppReg
  8145  002B08  D678               	goto	L8
  8146  002B0A                     l9907:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  8150                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  8151  002B0A  51CB               	movf	(_vscp_imsg+6)& (0+255),w,b
  8152  002B0C  19C3               	xorwf	_vscp_nickname& (0+255),w,b
  8153  002B0E  E003               	bz	l1235
  8154                           
  8155                           ; BSR set to: 0
  8156  002B10  29CB               	incf	(_vscp_imsg+6)& (0+255),w,b
  8157  002B12  E001 D175          	bnz	l1271
  8158  002B16                     l1235:
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  8162  002B16  6B93               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  8166  002B18  0E03               	movlw	3
  8167  002B1A  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  8168                           
  8169                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  8170  002B1C  0E88               	movlw	136
  8171  002B1E  6FD3               	movwf	_vscp_omsg& (0+255),b
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  8175  002B20  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  8176  002B22  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  8177                           
  8178                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  8179  002B24  0E20               	movlw	32
  8180  002B26  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  8184  002B28  6B98               	clrf	vscp_handleProtocolEvent@i_1165& (0+255),b
  8185  002B2A                     l1236:
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;vscp_firmware.c: 1091: {
  8189                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  8190  002B2A  C098  F0D8         	movff	vscp_handleProtocolEvent@i_1165,_vscp_omsg+5
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  8194  002B2E  0E01               	movlw	1
  8195  002B30  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8196  002B32                     l9927:
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  8200  002B32  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8201  002B34  0FD8               	addlw	low (_vscp_omsg+5)
  8202  002B36  6ED9               	movwf	fsr2l,c
  8203  002B38  6ADA               	clrf	fsr2h,c
  8204  002B3A  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8205  002B3C  080F               	sublw	15
  8206  002B3E  EC9A  F02D         	call	_vscp_getGUID
  8207  002B42  6EDF               	movwf	indf2,c
  8208  002B44  0100               	movlb	0	; () banked
  8209  002B46  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;vscp_firmware.c: 1096: if (k > 16)
  8213  002B48  0E10               	movlw	16
  8214  002B4A  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8215  002B4C  D001               	goto	l9935
  8216  002B4E  D004               	goto	l9939
  8217  002B50                     l9935:
  8218                           
  8219                           ; BSR set to: 0
  8220  002B50  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8221                           
  8222                           ; BSR set to: 0
  8223  002B52  0E07               	movlw	7
  8224  002B54  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8225  002B56  D7ED               	goto	l9927
  8226  002B58                     l9939:
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;vscp_firmware.c: 1098: }
  8230                           ;vscp_firmware.c: 1100: if (k > 16)
  8231  002B58  0E10               	movlw	16
  8232  002B5A  6593               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  8233  002B5C  D001               	goto	l9943
  8234  002B5E  D006               	goto	l1237
  8235  002B60                     l9943:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  8239  002B60  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  8240                           
  8241                           ; BSR set to: 0
  8242  002B64  2B98               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8243                           
  8244                           ; BSR set to: 0
  8245  002B66  0E02               	movlw	2
  8246  002B68  6598               	cpfsgt	vscp_handleProtocolEvent@i_1165& (0+255),b
  8247  002B6A  D7DF               	goto	l1236
  8248  002B6C                     l1237:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;vscp_firmware.c: 1104: }
  8252                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  8253  002B6C  6B9A               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  8254  002B6E                     l9953:
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 1107: {
  8258                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  8259  002B6E  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8260  002B70  EC6E  F02D         	call	_vscp_getMDF_URL
  8261  002B74  0900               	iorlw	0
  8262  002B76  E008               	bz	l9957
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  8266  002B78  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8267  002B7A  0FDB               	addlw	low (_vscp_omsg+8)
  8268  002B7C  6ED9               	movwf	fsr2l,c
  8269  002B7E  6ADA               	clrf	fsr2h,c
  8270  002B80  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8271  002B82  EC6E  F02D         	call	_vscp_getMDF_URL
  8272  002B86  D005               	goto	L10
  8273  002B88                     l9957:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;vscp_firmware.c: 1110: else
  8277                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  8278  002B88  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8279  002B8A  0FDB               	addlw	low (_vscp_omsg+8)
  8280  002B8C  6ED9               	movwf	fsr2l,c
  8281  002B8E  6ADA               	clrf	fsr2h,c
  8282  002B90  0E00               	movlw	0
  8283  002B92                     L10:
  8284  002B92  6EDF               	movwf	indf2,c
  8285                           
  8286                           ; BSR set to: 0
  8287  002B94  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8288                           
  8289                           ; BSR set to: 0
  8290  002B96  0E04               	movlw	4
  8291  002B98  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8292  002B9A  D7E9               	goto	l9953
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;vscp_firmware.c: 1112: }
  8296                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  8297  002B9C  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;vscp_firmware.c: 1116: k = 5;
  8301  002BA0  0E05               	movlw	5
  8302  002BA2  6F93               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  8306  002BA4  0E03               	movlw	3
  8307  002BA6  6F98               	movwf	vscp_handleProtocolEvent@i_1165& (0+255),b
  8308  002BA8                     l1246:
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;vscp_firmware.c: 1118: {
  8312                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  8313  002BA8  C098  F0D8         	movff	vscp_handleProtocolEvent@i_1165,_vscp_omsg+5
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  8317  002BAC  0E01               	movlw	1
  8318  002BAE  6F9A               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  8319  002BB0                     l9979:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  8323  002BB0  519A               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  8324  002BB2  0FD8               	addlw	low (_vscp_omsg+5)
  8325  002BB4  6ED9               	movwf	fsr2l,c
  8326  002BB6  6ADA               	clrf	fsr2h,c
  8327  002BB8  5193               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  8328  002BBA  EC6E  F02D         	call	_vscp_getMDF_URL
  8329  002BBE  6EDF               	movwf	indf2,c
  8330                           
  8331                           ; BSR set to: 0
  8332  002BC0  2B93               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  8333                           
  8334                           ; BSR set to: 0
  8335  002BC2  2B9A               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  8336                           
  8337                           ; BSR set to: 0
  8338  002BC4  0E07               	movlw	7
  8339  002BC6  659A               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  8340  002BC8  D7F3               	goto	l9979
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;vscp_firmware.c: 1123: }
  8344                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  8345  002BCA  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  8346                           
  8347                           ; BSR set to: 0
  8348  002BCE  2B98               	incf	vscp_handleProtocolEvent@i_1165& (0+255),f,b
  8349                           
  8350                           ; BSR set to: 0
  8351  002BD0  0E06               	movlw	6
  8352  002BD2  6598               	cpfsgt	vscp_handleProtocolEvent@i_1165& (0+255),b
  8353  002BD4  D7E9               	goto	l1246
  8354  002BD6  D114               	goto	l1271
  8355  002BD8                     l9993:
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  8359  002BD8  51C3               	movf	_vscp_nickname& (0+255),w,b
  8360  002BDA  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  8361  002BDE  62DF               	cpfseq	indf2,c
  8362  002BE0  D10F               	goto	l1271
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  8366  002BE2  0E03               	movlw	3
  8367  002BE4  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  8368                           
  8369                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  8370  002BE6  0E87               	movlw	135
  8371  002BE8  6FD3               	movwf	_vscp_omsg& (0+255),b
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  8375  002BEA  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  8376  002BEC  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  8377                           
  8378                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  8379  002BEE  0E22               	movlw	34
  8380  002BF0  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  8384  002BF2  0ED8               	movlw	(_vscp_omsg+5)& (0+255)
  8385  002BF4  EC49  F02D         	call	_vscp_getMatrixInfo
  8386  002BF8  D60C               	goto	l9701
  8387  002BFA                     l10003:
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  8391  002BFA  51C3               	movf	_vscp_nickname& (0+255),w,b
  8392  002BFC  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  8393  002C00  62DF               	cpfseq	indf2,c
  8394  002C02  D0FE               	goto	l1271
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  8398  002C04  6B95               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  8402                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  8403  002C06  C0C5  F07F         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  8404  002C0A  0E0F               	movlw	15
  8405  002C0C  177F               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8406  002C0E  0E04               	movlw	4
  8407  002C10  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8408  002C12  E312               	bnc	l10019
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  8412  002C14  C0CF  F096         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1169
  8413  002C18  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  8417  002C1A  5197               	movf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8418  002C1C  1196               	iorwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8419  002C1E  E103               	bnz	l10015
  8420                           
  8421                           ; BSR set to: 0
  8422  002C20  0E01               	movlw	1
  8423  002C22  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8424  002C24  6B96               	clrf	vscp_handleProtocolEvent@bytes_1169& (0+255),b
  8425  002C26                     l10015:
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  8429  002C26  0E01               	movlw	1
  8430  002C28  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8431  002C2A  0E01               	movlw	1
  8432  002C2C  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8433  002C2E  E307               	bnc	l10021
  8434                           
  8435                           ; BSR set to: 0
  8436  002C30  0E01               	movlw	1
  8437  002C32  6F97               	movwf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8438  002C34  0E00               	movlw	0
  8439  002C36  D002               	goto	L12
  8440  002C38                     l10019:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;vscp_firmware.c: 1173: else {
  8444                           ;vscp_firmware.c: 1174: bytes = 1;
  8445  002C38  6B97               	clrf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),b
  8446  002C3A  0E01               	movlw	1
  8447  002C3C                     L12:
  8448  002C3C  6F96               	movwf	vscp_handleProtocolEvent@bytes_1169& (0+255),b
  8449  002C3E                     l10021:
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;vscp_firmware.c: 1175: }
  8453                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  8454  002C3E  C046  F086         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  8455  002C42  C047  F087         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  8459  002C46  51CD               	movf	(_vscp_imsg+8)& (0+255),w,b
  8460  002C48  C0CC  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8461  002C4C  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8462  002C4E  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8463  002C52  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8464  002C54  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8465  002C56  6E46               	movwf	_vscp_page_select,c
  8466  002C58  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8467  002C5A  6E47               	movwf	_vscp_page_select+1,c
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  8471  002C5C  0E07               	movlw	7
  8472  002C5E  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  8473                           
  8474                           ; BSR set to: 0
  8475                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  8476  002C60  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  8477  002C62  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  8481  002C64  0E27               	movlw	39
  8482  002C66  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  8486  002C68  6BD8               	clrf	(_vscp_omsg+5)& (0+255),b
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  8490  002C6A  C0CC  F0D9         	movff	_vscp_imsg+7,_vscp_omsg+6
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  8494  002C6E  C0CD  F0DA         	movff	_vscp_imsg+8,_vscp_omsg+7
  8495  002C72                     l10037:
  8496                           
  8497                           ; BSR set to: 0
  8498                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  8499  002C72  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8500  002C74  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8501  002C76  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8502  002C78  0E00               	movlw	0
  8503  002C7A  5997               	subwfb	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8504  002C7C  6F80               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8505  002C7E  0E04               	movlw	4
  8506  002C80  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8507  002C82  0E00               	movlw	0
  8508  002C84  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8509  002C86  E302               	bnc	l10041
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  8513  002C88  0E04               	movlw	4
  8514  002C8A  D002               	goto	L13
  8515  002C8C                     l10041:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;vscp_firmware.c: 1198: else {
  8519                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  8520  002C8C  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8521  002C8E  5D96               	subwf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8522  002C90                     L13:
  8523  002C90  6F90               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;vscp_firmware.c: 1200: }
  8527                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  8528  002C92  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8529  002C94  0F84               	addlw	132
  8530  002C96  6FD3               	movwf	_vscp_omsg& (0+255),b
  8531                           
  8532                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  8533                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  8534  002C98  51CE               	movf	(_vscp_imsg+9)& (0+255),w,b
  8535  002C9A  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8536  002C9C  6FDB               	movwf	(_vscp_omsg+8)& (0+255),b
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  8540  002C9E  6B91               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  8541  002CA0  D00E               	goto	l10049
  8542  002CA2                     l10045:
  8543                           
  8544                           ; BSR set to: 0
  8545                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  8546                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  8547  002CA2  51CE               	movf	(_vscp_imsg+9)& (0+255),w,b
  8548  002CA4  2595               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8549  002CA6  2591               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8550  002CA8  EC3C  F02D         	call	_vscp_readRegister
  8551  002CAC  0100               	movlb	0	; () banked
  8552  002CAE  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8553  002CB0  5191               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8554  002CB2  0FDC               	addlw	low (_vscp_omsg+9)
  8555  002CB4  6ED9               	movwf	fsr2l,c
  8556  002CB6  6ADA               	clrf	fsr2h,c
  8557  002CB8  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8558                           
  8559                           ; BSR set to: 0
  8560  002CBC  2B91               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  8561  002CBE                     l10049:
  8562                           
  8563                           ; BSR set to: 0
  8564  002CBE  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8565  002CC0  5D91               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  8566  002CC2  E3EF               	bnc	l10045
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;vscp_firmware.c: 1211: }
  8570                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  8571  002CC4  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  8575  002CC8  5190               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  8576  002CCA  2795               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  8580  002CCC  2BD8               	incf	(_vscp_omsg+5)& (0+255),f,b
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  8584  002CCE  5195               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  8585  002CD0  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8586  002CD2  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8587  002CD4  5196               	movf	vscp_handleProtocolEvent@bytes_1169& (0+255),w,b
  8588  002CD6  5D7F               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8589  002CD8  5197               	movf	(vscp_handleProtocolEvent@bytes_1169+1)& (0+255),w,b
  8590  002CDA  5980               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8591  002CDC  E3CA               	bnc	l10037
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  8595  002CDE  C086  F046         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  8596  002CE2  C087  F047         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  8597  002CE6  D08C               	goto	l1271
  8598  002CE8                     l10059:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  8602  002CE8  51C3               	movf	_vscp_nickname& (0+255),w,b
  8603  002CEA  EE20  F0CB         	lfsr	2,_vscp_imsg+6
  8604  002CEE  62DF               	cpfseq	indf2,c
  8605  002CF0  D087               	goto	l1271
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;vscp_firmware.c: 1234: uint8_t i;
  8609                           ;vscp_firmware.c: 1235: uint16_t page_save;
  8610                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  8611  002CF2  C046  F088         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1174
  8612  002CF6  C047  F089         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1174+1
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  8616  002CFA  51CD               	movf	(_vscp_imsg+8)& (0+255),w,b
  8617  002CFC  C0CC  F07F         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  8618  002D00  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8619  002D02  C07F  F080         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  8620  002D06  6B7F               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  8621  002D08  117F               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8622  002D0A  6E46               	movwf	_vscp_page_select,c
  8623  002D0C  5180               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8624  002D0E  6E47               	movwf	_vscp_page_select+1,c
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  8628  002D10  C0CE  F092         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1173
  8629                           
  8630                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  8631                           ;vscp_firmware.c: 1248: i++) {
  8632  002D14  D014               	goto	l10071
  8633  002D16                     l10067:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  8637                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  8638  002D16  51CE               	movf	(_vscp_imsg+9)& (0+255),w,b
  8639  002D18  08CF               	sublw	low (_vscp_imsg+10)
  8640  002D1A  2592               	addwf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8641  002D1C  6ED9               	movwf	fsr2l,c
  8642  002D1E  6ADA               	clrf	fsr2h,c
  8643  002D20  50DF               	movf	indf2,w,c
  8644  002D22  6E27               	movwf	?_vscp_writeRegister,c
  8645  002D24  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8646  002D26  ECED  F02C         	call	_vscp_writeRegister
  8647  002D2A  0100               	movlb	0	; () banked
  8648  002D2C  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8649  002D2E  51CE               	movf	(_vscp_imsg+9)& (0+255),w,b
  8650  002D30  08DC               	sublw	low (_vscp_omsg+9)
  8651  002D32  2592               	addwf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8652  002D34  6ED9               	movwf	fsr2l,c
  8653  002D36  6ADA               	clrf	fsr2h,c
  8654  002D38  C07F  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  8655                           
  8656                           ; BSR set to: 0
  8657  002D3C  2B92               	incf	vscp_handleProtocolEvent@i_1173& (0+255),f,b
  8658  002D3E                     l10071:
  8659                           
  8660                           ; BSR set to: 0
  8661  002D3E  51C5               	movf	_vscp_imsg& (0+255),w,b
  8662  002D40  0B0F               	andlw	15
  8663  002D42  6F7F               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  8664  002D44  6B80               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  8665  002D46  51CE               	movf	(_vscp_imsg+9)& (0+255),w,b
  8666  002D48  277F               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  8667  002D4A  0E00               	movlw	0
  8668  002D4C  2380               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  8669  002D4E  0EFC               	movlw	252
  8670  002D50  257F               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  8671  002D52  6F81               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  8672  002D54  0EFF               	movlw	255
  8673  002D56  2180               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  8674  002D58  6F82               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  8675  002D5A  5192               	movf	vscp_handleProtocolEvent@i_1173& (0+255),w,b
  8676  002D5C  6F83               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  8677  002D5E  6B84               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  8678  002D60  5184               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  8679  002D62  0A80               	xorlw	128
  8680  002D64  6F85               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  8681  002D66  5181               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  8682  002D68  5D83               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  8683  002D6A  5182               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  8684  002D6C  0A80               	xorlw	128
  8685  002D6E  5985               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  8686  002D70  E3D2               	bnc	l10067
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;vscp_firmware.c: 1251: }
  8690                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  8691  002D72  C088  F046         	movff	vscp_handleProtocolEvent@page_save_1174,_vscp_page_select
  8692  002D76  C089  F047         	movff	vscp_handleProtocolEvent@page_save_1174+1,_vscp_page_select+1
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  8696  002D7A  0E07               	movlw	7
  8697  002D7C  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  8701  002D7E  51C5               	movf	_vscp_imsg& (0+255),w,b
  8702  002D80  0B0F               	andlw	15
  8703  002D82  0F80               	addlw	128
  8704  002D84  6FD3               	movwf	_vscp_omsg& (0+255),b
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  8708  002D86  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
  8709  002D88  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  8713  002D8A  0E27               	movlw	39
  8714  002D8C  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  8718  002D8E  6BD8               	clrf	(_vscp_omsg+5)& (0+255),b
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  8722  002D90  C0CC  F0D9         	movff	_vscp_imsg+7,_vscp_omsg+6
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  8726  002D94  C0CD  F0DA         	movff	_vscp_imsg+8,_vscp_omsg+7
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  8730  002D98  C0CE  F0DB         	movff	_vscp_imsg+9,_vscp_omsg+8
  8731  002D9C  D53A               	goto	l9701
  8732  002D9E                     l10093:
  8733                           
  8734                           ; BSR set to: 0
  8735  002D9E  51C9               	movf	(_vscp_imsg+4)& (0+255),w,b
  8736                           
  8737                           ; Switch size 1, requested type "speed"
  8738                           ; Number of cases is 16, Range of values is 1 to 38
  8739                           ; switch strategies available:
  8740                           ; Name         Instructions Cycles
  8741                           ; simple_byte           49    25 (average)
  8742                           ;	Chosen strategy is simple_byte
  8743  002DA0  0A01               	xorlw	1	; case 1
  8744  002DA2  E101 D50E          	bz	l9675
  8745  002DA6  0A03               	xorlw	3	; case 2
  8746  002DA8  E101 D50E          	bz	l9677
  8747  002DAC  0A04               	xorlw	4	; case 6
  8748  002DAE  E101 D50E          	bz	l9679
  8749  002DB2  0A0E               	xorlw	14	; case 8
  8750  002DB4  E101 D50E          	bz	l9681
  8751  002DB8  0A01               	xorlw	1	; case 9
  8752  002DBA  E101 D50E          	bz	l9683
  8753  002DBE  0A02               	xorlw	2	; case 11
  8754  002DC0  E101 D52E          	bz	l9717
  8755  002DC4  0A07               	xorlw	7	; case 12
  8756  002DC6  E101 D544          	bz	l9751
  8757  002DCA  0A1B               	xorlw	27	; case 23
  8758  002DCC  E101 D5D9          	bz	l9809
  8759  002DD0  0A0F               	xorlw	15	; case 24
  8760  002DD2  E101 D5ED          	bz	l9815
  8761  002DD6  0A01               	xorlw	1	; case 25
  8762  002DD8  E101 D644          	bz	l9849
  8763  002DDC  0A04               	xorlw	4	; case 29
  8764  002DDE  E101 D674          	bz	l9875
  8765  002DE2  0A03               	xorlw	3	; case 30
  8766  002DE4  E101 D681          	bz	l9891
  8767  002DE8  0A01               	xorlw	1	; case 31
  8768  002DEA  E101 D68E          	bz	l9907
  8769  002DEE  0A3E               	xorlw	62	; case 33
  8770  002DF0  E101 D6F2          	bz	l9993
  8771  002DF4  0A04               	xorlw	4	; case 37
  8772  002DF6  E101 D700          	bz	l10003
  8773  002DFA  0A03               	xorlw	3	; case 38
  8774  002DFC  E101 D774          	bz	l10059
  8775  002E00                     l1271:
  8776  002E00  0012               	return	
  8777  002E02                     __end_of_vscp_handleProtocolEvent:
  8778                           	opt stack 0
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           postdec1	equ	0xFE5
  8788                           fsr1h	equ	0xFE2
  8789                           fsr1l	equ	0xFE1
  8790                           indf2	equ	0xFDF
  8791                           postinc2	equ	0xFDE
  8792                           postdec2	equ	0xFDD
  8793                           fsr2h	equ	0xFDA
  8794                           fsr2l	equ	0xFD9
  8795                           status	equ	0xFD8
  8796                           
  8797 ;; *************** function ___lbmod *****************
  8798 ;; Defined at:
  8799 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  8800 ;; Parameters:    Size  Location     Type
  8801 ;;  dividend        1    wreg     unsigned char 
  8802 ;;  divisor         1   13[COMRAM] unsigned char 
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;  dividend        1   14[COMRAM] unsigned char 
  8805 ;;  rem             1   16[COMRAM] unsigned char 
  8806 ;;  counter         1   15[COMRAM] unsigned char 
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  1    wreg      unsigned char 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0
  8811 ;; Tracked objects:
  8812 ;;		On entry : F/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8816 ;;      Params:         1       0       0       0       0       0       0
  8817 ;;      Locals:         3       0       0       0       0       0       0
  8818 ;;      Temps:          0       0       0       0       0       0       0
  8819 ;;      Totals:         4       0       0       0       0       0       0
  8820 ;;Total ram usage:        4 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    2
  8823 ;; This function calls:
  8824 ;;		Nothing
  8825 ;; This function is called by:
  8826 ;;		_vscp_handleProtocolEvent
  8827 ;; This function uses a non-reentrant model
  8828 ;;
  8829                           
  8830                           	psect	text34
  8831  0058D2                     __ptext34:
  8832                           	opt stack 0
  8833  0058D2                     ___lbmod:
  8834                           	opt stack 27
  8835                           
  8836                           ;incstack = 0
  8837                           ;incstack = 0
  8838                           ;___lbmod@dividend stored from wreg
  8839  0058D2  CFE8 F00F          	movff	wreg,___lbmod@dividend
  8840                           
  8841                           ; BSR set to: 0
  8842  0058D6  0E08               	movlw	8
  8843  0058D8  6E10               	movwf	___lbmod@counter,c
  8844                           
  8845                           ; BSR set to: 0
  8846  0058DA  6A11               	clrf	___lbmod@rem,c
  8847  0058DC                     l9151:
  8848  0058DC  90D8               	bcf	status,0,c
  8849  0058DE  340F               	rlcf	___lbmod@dividend& (0+255),w,c
  8850  0058E0  3411               	rlcf	___lbmod@rem& (0+255),w,c
  8851  0058E2  6E11               	movwf	___lbmod@rem,c
  8852  0058E4  90D8               	bcf	status,0,c
  8853  0058E6  360F               	rlcf	___lbmod@dividend,f,c
  8854  0058E8  500E               	movf	___lbmod@divisor,w,c
  8855  0058EA  5C11               	subwf	___lbmod@rem,w,c
  8856  0058EC  E302               	bnc	l9159
  8857  0058EE  500E               	movf	___lbmod@divisor,w,c
  8858  0058F0  5E11               	subwf	___lbmod@rem,f,c
  8859  0058F2                     l9159:
  8860  0058F2  2E10               	decfsz	___lbmod@counter,f,c
  8861  0058F4  D7F3               	goto	l9151
  8862  0058F6  5011               	movf	___lbmod@rem,w,c
  8863  0058F8  0012               	return	
  8864  0058FA                     __end_of___lbmod:
  8865                           	opt stack 0
  8866                           tblptru	equ	0xFF8
  8867                           tblptrh	equ	0xFF7
  8868                           tblptrl	equ	0xFF6
  8869                           tablat	equ	0xFF5
  8870                           prodh	equ	0xFF4
  8871                           prodl	equ	0xFF3
  8872                           postinc0	equ	0xFEE
  8873                           wreg	equ	0xFE8
  8874                           postdec1	equ	0xFE5
  8875                           fsr1h	equ	0xFE2
  8876                           fsr1l	equ	0xFE1
  8877                           indf2	equ	0xFDF
  8878                           postinc2	equ	0xFDE
  8879                           postdec2	equ	0xFDD
  8880                           fsr2h	equ	0xFDA
  8881                           fsr2l	equ	0xFD9
  8882                           status	equ	0xFD8
  8883                           
  8884 ;; *************** function _vscp_writeRegister *****************
  8885 ;; Defined at:
  8886 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;  reg             1    wreg     unsigned char 
  8889 ;;  value           1   38[COMRAM] unsigned char 
  8890 ;; Auto vars:     Size  Location     Type
  8891 ;;  reg             1   39[COMRAM] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  1    wreg      unsigned char 
  8894 ;; Registers used:
  8895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8896 ;; Tracked objects:
  8897 ;;		On entry : F/0
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8901 ;;      Params:         1       0       0       0       0       0       0
  8902 ;;      Locals:         1       0       0       0       0       0       0
  8903 ;;      Temps:          0       0       0       0       0       0       0
  8904 ;;      Totals:         2       0       0       0       0       0       0
  8905 ;;Total ram usage:        2 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    6
  8908 ;; This function calls:
  8909 ;;		_vscp_writeAppReg
  8910 ;;		_vscp_writeStdReg
  8911 ;; This function is called by:
  8912 ;;		_vscp_handleProtocolEvent
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text35
  8917  0059DA                     __ptext35:
  8918                           	opt stack 0
  8919  0059DA                     _vscp_writeRegister:
  8920                           	opt stack 23
  8921                           
  8922                           ;incstack = 0
  8923                           ;incstack = 0
  8924                           ;vscp_writeRegister@reg stored from wreg
  8925  0059DA  CFE8 F028          	movff	wreg,vscp_writeRegister@reg
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  8929  0059DE  0E7F               	movlw	127
  8930  0059E0  6428               	cpfsgt	vscp_writeRegister@reg,c
  8931  0059E2  D006               	goto	l11295
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  8935  0059E4  C027  F01B         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  8936  0059E8  5028               	movf	vscp_writeRegister@reg,w,c
  8937  0059EA  ECC1  F022         	call	_vscp_writeStdReg
  8938  0059EE  D005               	goto	l1151
  8939  0059F0                     l11295:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;vscp_firmware.c: 705: else {
  8943                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  8944  0059F0  C027  F023         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  8945  0059F4  5028               	movf	vscp_writeRegister@reg,w,c
  8946  0059F6  ECB7  F005         	call	_vscp_writeAppReg
  8947  0059FA                     l1151:
  8948  0059FA  0012               	return	
  8949  0059FC                     __end_of_vscp_writeRegister:
  8950                           	opt stack 0
  8951                           tblptru	equ	0xFF8
  8952                           tblptrh	equ	0xFF7
  8953                           tblptrl	equ	0xFF6
  8954                           tablat	equ	0xFF5
  8955                           prodh	equ	0xFF4
  8956                           prodl	equ	0xFF3
  8957                           postinc0	equ	0xFEE
  8958                           wreg	equ	0xFE8
  8959                           postdec1	equ	0xFE5
  8960                           fsr1h	equ	0xFE2
  8961                           fsr1l	equ	0xFE1
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           fsr2h	equ	0xFDA
  8966                           fsr2l	equ	0xFD9
  8967                           status	equ	0xFD8
  8968                           
  8969 ;; *************** function _vscp_writeStdReg *****************
  8970 ;; Defined at:
  8971 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  reg             1    wreg     unsigned char 
  8974 ;;  value           1   26[COMRAM] unsigned char 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  reg             1   32[COMRAM] unsigned char 
  8977 ;;  rv              1   31[COMRAM] unsigned char 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      unsigned char 
  8980 ;; Registers used:
  8981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : F/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8987 ;;      Params:         1       0       0       0       0       0       0
  8988 ;;      Locals:         2       0       0       0       0       0       0
  8989 ;;      Temps:          4       0       0       0       0       0       0
  8990 ;;      Totals:         7       0       0       0       0       0       0
  8991 ;;Total ram usage:        7 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    5
  8994 ;; This function calls:
  8995 ;;		_vscp_getGUID
  8996 ;;		_vscp_setGUID
  8997 ;;		_vscp_getUserID
  8998 ;;		_vscp_setUserID
  8999 ;;		_vscp_getManufacturerId
  9000 ;;		_vscp_setManufacturerId
  9001 ;;		_vscp_restoreDefaults
  9002 ;; This function is called by:
  9003 ;;		_vscp_writeRegister
  9004 ;;		_vscp_handleProtocolEvent
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	text36
  9009  004582                     __ptext36:
  9010                           	opt stack 0
  9011  004582                     _vscp_writeStdReg:
  9012                           	opt stack 24
  9013                           
  9014                           ;incstack = 0
  9015                           ;incstack = 0
  9016                           ;vscp_writeStdReg@reg stored from wreg
  9017  004582  CFE8 F021          	movff	wreg,vscp_writeStdReg@reg
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  9021  004586  1C1B               	comf	vscp_writeStdReg@value,w,c
  9022  004588  6E20               	movwf	vscp_writeStdReg@rv,c
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  9026                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  9027  00458A  0E83               	movlw	131
  9028  00458C  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9029  00458E  D00E               	goto	l11307
  9030                           
  9031                           ; BSR set to: 0
  9032  004590  0E89               	movlw	137
  9033  004592  6021               	cpfslt	vscp_writeStdReg@reg,c
  9034  004594  D00B               	goto	l11307
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  9038  004596  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  9039  00459A  5021               	movf	vscp_writeStdReg@reg,w,c
  9040  00459C  0F7C               	addlw	124
  9041  00459E  EC62  F02D         	call	_vscp_setUserID
  9042                           
  9043                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  9044  0045A2  5021               	movf	vscp_writeStdReg@reg,w,c
  9045  0045A4  0F7C               	addlw	124
  9046  0045A6  EC90  F02D         	call	_vscp_getUserID
  9047  0045AA  D069               	goto	L19
  9048  0045AC                     l11307:
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  9052  0045AC  5021               	movf	vscp_writeStdReg@reg,w,c
  9053  0045AE  0A92               	xorlw	146
  9054  0045B0  E10D               	bnz	l11313
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  9058  0045B2  501B               	movf	vscp_writeStdReg@value,w,c
  9059  0045B4  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9060  0045B6  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9061  0045B8  5046               	movf	_vscp_page_select,w,c
  9062  0045BA  6E1E               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  9063  0045BC  6A1F               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  9064  0045BE  101C               	iorwf	??_vscp_writeStdReg,w,c
  9065  0045C0  6E46               	movwf	_vscp_page_select,c
  9066  0045C2  501D               	movf	??_vscp_writeStdReg+1,w,c
  9067  0045C4  101F               	iorwf	??_vscp_writeStdReg+3,w,c
  9068  0045C6  6E47               	movwf	_vscp_page_select+1,c
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  9072  0045C8  5047               	movf	_vscp_page_select+1,w,c
  9073  0045CA  D059               	goto	L19
  9074  0045CC                     l11313:
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  9078  0045CC  5021               	movf	vscp_writeStdReg@reg,w,c
  9079  0045CE  0A93               	xorlw	147
  9080  0045D0  E10B               	bnz	l11319
  9081                           
  9082                           ; BSR set to: 0
  9083                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  9084  0045D2  6A1C               	clrf	??_vscp_writeStdReg& (0+255),c
  9085  0045D4  5047               	movf	_vscp_page_select+1,w,c
  9086  0045D6  6E1D               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  9087  0045D8  501B               	movf	vscp_writeStdReg@value,w,c
  9088  0045DA  101C               	iorwf	??_vscp_writeStdReg,w,c
  9089  0045DC  6E46               	movwf	_vscp_page_select,c
  9090  0045DE  501D               	movf	??_vscp_writeStdReg+1,w,c
  9091  0045E0  6E47               	movwf	_vscp_page_select+1,c
  9092                           
  9093                           ; BSR set to: 0
  9094                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  9095  0045E2  C046  F020         	movff	_vscp_page_select,vscp_writeStdReg@rv
  9096                           
  9097                           ;vscp_firmware.c: 737: }
  9098  0045E6  D04E               	goto	l11361
  9099  0045E8                     l11319:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  9103  0045E8  0E88               	movlw	136
  9104  0045EA  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9105  0045EC  D019               	goto	l11331
  9106                           
  9107                           ; BSR set to: 0
  9108  0045EE  0E91               	movlw	145
  9109  0045F0  6021               	cpfslt	vscp_writeStdReg@reg,c
  9110  0045F2  D016               	goto	l11331
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9114                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  9115  0045F4  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9116  0045F8  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9117  0045FC  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9118  0045FE  281D               	incf	??_vscp_writeStdReg+1,w,c
  9119  004600  E102               	bnz	l11327
  9120                           
  9121                           ; BSR set to: 0
  9122  004602  2846               	incf	_vscp_page_select,w,c
  9123  004604  E002               	bz	l11329
  9124  004606                     l11327:
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;vscp_firmware.c: 747: rv = ~value;
  9128  004606  1C1B               	comf	vscp_writeStdReg@value,w,c
  9129  004608  D03A               	goto	L19
  9130  00460A                     l11329:
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;vscp_firmware.c: 749: else {
  9134                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  9135  00460A  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  9136  00460E  5021               	movf	vscp_writeStdReg@reg,w,c
  9137  004610  0F77               	addlw	119
  9138  004612  EC56  F02D         	call	_vscp_setManufacturerId
  9139                           
  9140                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  9141  004616  5021               	movf	vscp_writeStdReg@reg,w,c
  9142  004618  0F77               	addlw	119
  9143  00461A  EC86  F02D         	call	_vscp_getManufacturerId
  9144  00461E  D02F               	goto	L19
  9145  004620                     l11331:
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  9149  004620  0ECF               	movlw	207
  9150  004622  6421               	cpfsgt	vscp_writeStdReg@reg,c
  9151  004624  D017               	goto	l11343
  9152                           
  9153                           ; BSR set to: 0
  9154  004626  0EE0               	movlw	224
  9155  004628  6021               	cpfslt	vscp_writeStdReg@reg,c
  9156  00462A  D014               	goto	l11343
  9157                           
  9158                           ; BSR set to: 0
  9159                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  9160                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  9161  00462C  C047  F01C         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  9162  004630  C01C  F01D         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  9163  004634  6A1E               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  9164  004636  281D               	incf	??_vscp_writeStdReg+1,w,c
  9165  004638  E1E6               	bnz	l11327
  9166                           
  9167                           ; BSR set to: 0
  9168  00463A  2846               	incf	_vscp_page_select,w,c
  9169  00463C  E1E4               	bnz	l11327
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;vscp_firmware.c: 762: else {
  9173                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  9174  00463E  C01B  F011         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  9175  004642  5021               	movf	vscp_writeStdReg@reg,w,c
  9176  004644  0F30               	addlw	48
  9177  004646  ECFE  F02C         	call	_vscp_setGUID
  9178                           
  9179                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  9180  00464A  5021               	movf	vscp_writeStdReg@reg,w,c
  9181  00464C  0F30               	addlw	48
  9182  00464E  EC9A  F02D         	call	_vscp_getGUID
  9183  004652  D015               	goto	L19
  9184  004654                     l11343:
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  9188  004654  5021               	movf	vscp_writeStdReg@reg,w,c
  9189  004656  0AA2               	xorlw	162
  9190  004658  E1D6               	bnz	l11327
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  9194  00465A  501B               	movf	vscp_writeStdReg@value,w,c
  9195  00465C  0A55               	xorlw	85
  9196  00465E  E104               	bnz	l11351
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  9200  004660  6BB9               	clrf	_vscp_configtimer& (0+255),b	;volatile
  9201  004662  6BBA               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  9202                           
  9203                           ; BSR set to: 0
  9204                           ;vscp_firmware.c: 771: rv = 0x55;
  9205  004664  0E55               	movlw	85
  9206  004666  D00B               	goto	L19
  9207  004668                     l11351:
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  9211  004668  501B               	movf	vscp_writeStdReg@value,w,c
  9212  00466A  0AAA               	xorlw	170
  9213  00466C  E10B               	bnz	l11361
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  9217  00466E  0EE8               	movlw	232
  9218  004670  5DB9               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  9219  004672  0E03               	movlw	3
  9220  004674  59BA               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  9221  004676  E205               	bc	l1177
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  9225  004678  ECF9  F02D         	call	_vscp_restoreDefaults	;wreg free
  9226                           
  9227                           ; BSR set to: 0
  9228                           ;vscp_firmware.c: 776: rv = 0xaa;
  9229  00467C  0EAA               	movlw	170
  9230  00467E                     L19:
  9231  00467E  6E20               	movwf	vscp_writeStdReg@rv,c
  9232                           
  9233                           ;vscp_firmware.c: 777: }
  9234  004680  D001               	goto	l11361
  9235  004682                     l1177:
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;vscp_firmware.c: 778: else {
  9239                           ;vscp_firmware.c: 779: rv = 0;
  9240  004682  6A20               	clrf	vscp_writeStdReg@rv,c
  9241  004684                     l11361:
  9242                           
  9243                           ;vscp_firmware.c: 787: }
  9244                           ;vscp_firmware.c: 789: return rv;
  9245  004684  5020               	movf	vscp_writeStdReg@rv,w,c
  9246  004686  0012               	return	
  9247  004688                     __end_of_vscp_writeStdReg:
  9248                           	opt stack 0
  9249                           tblptru	equ	0xFF8
  9250                           tblptrh	equ	0xFF7
  9251                           tblptrl	equ	0xFF6
  9252                           tablat	equ	0xFF5
  9253                           prodh	equ	0xFF4
  9254                           prodl	equ	0xFF3
  9255                           postinc0	equ	0xFEE
  9256                           wreg	equ	0xFE8
  9257                           postdec1	equ	0xFE5
  9258                           fsr1h	equ	0xFE2
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           postdec2	equ	0xFDD
  9263                           fsr2h	equ	0xFDA
  9264                           fsr2l	equ	0xFD9
  9265                           status	equ	0xFD8
  9266                           
  9267 ;; *************** function _vscp_restoreDefaults *****************
  9268 ;; Defined at:
  9269 ;;		line 2849 in file "../main.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;		None
  9274 ;; Return value:  Size  Location     Type
  9275 ;;		None               void
  9276 ;; Registers used:
  9277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : F/0
  9280 ;;		On exit  : F/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9283 ;;      Params:         0       0       0       0       0       0       0
  9284 ;;      Locals:         0       0       0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0
  9286 ;;      Totals:         0       0       0       0       0       0       0
  9287 ;;Total ram usage:        0 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    4
  9290 ;; This function calls:
  9291 ;;		_init_app_eeprom
  9292 ;;		_init_app_ram
  9293 ;; This function is called by:
  9294 ;;		_vscp_writeStdReg
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text37
  9299  005BF2                     __ptext37:
  9300                           	opt stack 0
  9301  005BF2                     _vscp_restoreDefaults:
  9302                           	opt stack 24
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;main.c: 2850: init_app_eeprom();
  9306                           
  9307                           ;incstack = 0
  9308                           ;incstack = 0
  9309  005BF2  EC01  F017         	call	_init_app_eeprom	;wreg free
  9310                           
  9311                           ;main.c: 2851: init_app_ram();
  9312  005BF6  EF2C  F02B         	goto	_init_app_ram	;wreg free
  9313  005BFA                     __end_of_vscp_restoreDefaults:
  9314                           	opt stack 0
  9315                           tblptru	equ	0xFF8
  9316                           tblptrh	equ	0xFF7
  9317                           tblptrl	equ	0xFF6
  9318                           tablat	equ	0xFF5
  9319                           prodh	equ	0xFF4
  9320                           prodl	equ	0xFF3
  9321                           postinc0	equ	0xFEE
  9322                           wreg	equ	0xFE8
  9323                           postdec1	equ	0xFE5
  9324                           fsr1h	equ	0xFE2
  9325                           fsr1l	equ	0xFE1
  9326                           indf2	equ	0xFDF
  9327                           postinc2	equ	0xFDE
  9328                           postdec2	equ	0xFDD
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function _init_app_eeprom *****************
  9334 ;; Defined at:
  9335 ;;		line 1026 in file "../main.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;		None
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, status,2, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : 0/0
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9349 ;;      Params:         0       0       0       0       0       0       0
  9350 ;;      Locals:         0       0       0       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0
  9352 ;;      Totals:         0       0       0       0       0       0       0
  9353 ;;Total ram usage:        0 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    3
  9356 ;; This function calls:
  9357 ;;		_writeEEPROM
  9358 ;; This function is called by:
  9359 ;;		_main
  9360 ;;		_vscp_restoreDefaults
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           	psect	text38
  9365  002E02                     __ptext38:
  9366                           	opt stack 0
  9367  002E02                     _init_app_eeprom:
  9368                           	opt stack 24
  9369                           
  9370                           ;main.c: 1028: writeEEPROM( 0x41, 0 );
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;incstack = 0
  9374                           ;incstack = 0
  9375  002E02  6A0F               	clrf	?_writeEEPROM+1,c
  9376  002E04  0E41               	movlw	65
  9377  002E06  6E0E               	movwf	?_writeEEPROM,c
  9378  002E08  0E00               	movlw	0
  9379  002E0A  6A10               	clrf	?_writeEEPROM+2,c
  9380  002E0C  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9381                           
  9382                           ;main.c: 1029: writeEEPROM( 0x41, 0 );
  9383  002E10  6A0F               	clrf	?_writeEEPROM+1,c
  9384  002E12  0E41               	movlw	65
  9385  002E14  6E0E               	movwf	?_writeEEPROM,c
  9386  002E16  0E00               	movlw	0
  9387  002E18  6A10               	clrf	?_writeEEPROM+2,c
  9388  002E1A  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9389                           
  9390                           ;main.c: 1031: writeEEPROM(0x43, 0b00000001);
  9391  002E1E  6A0F               	clrf	?_writeEEPROM+1,c
  9392  002E20  0E43               	movlw	67
  9393  002E22  6E0E               	movwf	?_writeEEPROM,c
  9394  002E24  0E01               	movlw	1
  9395  002E26  6E10               	movwf	?_writeEEPROM+2,c
  9396  002E28  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9397                           
  9398                           ;main.c: 1032: writeEEPROM(0x44, 0b00000001);
  9399  002E2C  6A0F               	clrf	?_writeEEPROM+1,c
  9400  002E2E  0E44               	movlw	68
  9401  002E30  6E0E               	movwf	?_writeEEPROM,c
  9402  002E32  0E01               	movlw	1
  9403  002E34  6E10               	movwf	?_writeEEPROM+2,c
  9404  002E36  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9405                           
  9406                           ;main.c: 1033: writeEEPROM(0x45, 0b00000001);
  9407  002E3A  6A0F               	clrf	?_writeEEPROM+1,c
  9408  002E3C  0E45               	movlw	69
  9409  002E3E  6E0E               	movwf	?_writeEEPROM,c
  9410  002E40  0E01               	movlw	1
  9411  002E42  6E10               	movwf	?_writeEEPROM+2,c
  9412  002E44  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9413                           
  9414                           ;main.c: 1034: writeEEPROM(0x46, 0b00000001);
  9415  002E48  6A0F               	clrf	?_writeEEPROM+1,c
  9416  002E4A  0E46               	movlw	70
  9417  002E4C  6E0E               	movwf	?_writeEEPROM,c
  9418  002E4E  0E01               	movlw	1
  9419  002E50  6E10               	movwf	?_writeEEPROM+2,c
  9420  002E52  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9421                           
  9422                           ;main.c: 1035: writeEEPROM(0x47, 0b00000001);
  9423  002E56  6A0F               	clrf	?_writeEEPROM+1,c
  9424  002E58  0E47               	movlw	71
  9425  002E5A  6E0E               	movwf	?_writeEEPROM,c
  9426  002E5C  0E01               	movlw	1
  9427  002E5E  6E10               	movwf	?_writeEEPROM+2,c
  9428  002E60  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9429                           
  9430                           ;main.c: 1036: writeEEPROM(0x48, 0b00000001);
  9431  002E64  6A0F               	clrf	?_writeEEPROM+1,c
  9432  002E66  0E48               	movlw	72
  9433  002E68  6E0E               	movwf	?_writeEEPROM,c
  9434  002E6A  0E01               	movlw	1
  9435  002E6C  6E10               	movwf	?_writeEEPROM+2,c
  9436  002E6E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9437                           
  9438                           ;main.c: 1038: writeEEPROM(0x49, 30);
  9439  002E72  6A0F               	clrf	?_writeEEPROM+1,c
  9440  002E74  0E49               	movlw	73
  9441  002E76  6E0E               	movwf	?_writeEEPROM,c
  9442  002E78  0E1E               	movlw	30
  9443  002E7A  6E10               	movwf	?_writeEEPROM+2,c
  9444  002E7C  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9445                           
  9446                           ;main.c: 1039: writeEEPROM(0x4A, 0);
  9447  002E80  6A0F               	clrf	?_writeEEPROM+1,c
  9448  002E82  0E4A               	movlw	74
  9449  002E84  6E0E               	movwf	?_writeEEPROM,c
  9450  002E86  0E00               	movlw	0
  9451  002E88  6A10               	clrf	?_writeEEPROM+2,c
  9452  002E8A  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9453                           
  9454                           ;main.c: 1040: writeEEPROM(0x4B, 0);
  9455  002E8E  6A0F               	clrf	?_writeEEPROM+1,c
  9456  002E90  0E4B               	movlw	75
  9457  002E92  6E0E               	movwf	?_writeEEPROM,c
  9458  002E94  0E00               	movlw	0
  9459  002E96  6A10               	clrf	?_writeEEPROM+2,c
  9460  002E98  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9461                           
  9462                           ;main.c: 1041: writeEEPROM(0x4C, 0);
  9463  002E9C  6A0F               	clrf	?_writeEEPROM+1,c
  9464  002E9E  0E4C               	movlw	76
  9465  002EA0  6E0E               	movwf	?_writeEEPROM,c
  9466  002EA2  0E00               	movlw	0
  9467  002EA4  6A10               	clrf	?_writeEEPROM+2,c
  9468  002EA6  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9469                           
  9470                           ;main.c: 1042: writeEEPROM(0x4D, 0);
  9471  002EAA  6A0F               	clrf	?_writeEEPROM+1,c
  9472  002EAC  0E4D               	movlw	77
  9473  002EAE  6E0E               	movwf	?_writeEEPROM,c
  9474  002EB0  0E00               	movlw	0
  9475  002EB2  6A10               	clrf	?_writeEEPROM+2,c
  9476  002EB4  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9477                           
  9478                           ;main.c: 1043: writeEEPROM(0x4E, 0);
  9479  002EB8  6A0F               	clrf	?_writeEEPROM+1,c
  9480  002EBA  0E4E               	movlw	78
  9481  002EBC  6E0E               	movwf	?_writeEEPROM,c
  9482  002EBE  0E00               	movlw	0
  9483  002EC0  6A10               	clrf	?_writeEEPROM+2,c
  9484  002EC2  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9485                           
  9486                           ;main.c: 1047: writeEEPROM(0x4F, 0x0F);
  9487  002EC6  6A0F               	clrf	?_writeEEPROM+1,c
  9488  002EC8  0E4F               	movlw	79
  9489  002ECA  6E0E               	movwf	?_writeEEPROM,c
  9490  002ECC  0E0F               	movlw	15
  9491  002ECE  6E10               	movwf	?_writeEEPROM+2,c
  9492  002ED0  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9493                           
  9494                           ;main.c: 1048: writeEEPROM(0x50, 0x68);
  9495  002ED4  6A0F               	clrf	?_writeEEPROM+1,c
  9496  002ED6  0E50               	movlw	80
  9497  002ED8  6E0E               	movwf	?_writeEEPROM,c
  9498  002EDA  0E68               	movlw	104
  9499  002EDC  6E10               	movwf	?_writeEEPROM+2,c
  9500  002EDE  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9501                           
  9502                           ;main.c: 1050: writeEEPROM(0x51, 0x0D);
  9503  002EE2  6A0F               	clrf	?_writeEEPROM+1,c
  9504  002EE4  0E51               	movlw	81
  9505  002EE6  6E0E               	movwf	?_writeEEPROM,c
  9506  002EE8  0E0D               	movlw	13
  9507  002EEA  6E10               	movwf	?_writeEEPROM+2,c
  9508  002EEC  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9509                           
  9510                           ;main.c: 1051: writeEEPROM(0x52, 0x7F);
  9511  002EF0  6A0F               	clrf	?_writeEEPROM+1,c
  9512  002EF2  0E52               	movlw	82
  9513  002EF4  6E0E               	movwf	?_writeEEPROM,c
  9514  002EF6  0E7F               	movlw	127
  9515  002EF8  6E10               	movwf	?_writeEEPROM+2,c
  9516  002EFA  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9517                           
  9518                           ;main.c: 1053: writeEEPROM(0x53, 0x0D);
  9519  002EFE  6A0F               	clrf	?_writeEEPROM+1,c
  9520  002F00  0E53               	movlw	83
  9521  002F02  6E0E               	movwf	?_writeEEPROM,c
  9522  002F04  0E0D               	movlw	13
  9523  002F06  6E10               	movwf	?_writeEEPROM+2,c
  9524  002F08  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9525                           
  9526                           ;main.c: 1054: writeEEPROM(0x54, 0x7F);
  9527  002F0C  6A0F               	clrf	?_writeEEPROM+1,c
  9528  002F0E  0E54               	movlw	84
  9529  002F10  6E0E               	movwf	?_writeEEPROM,c
  9530  002F12  0E7F               	movlw	127
  9531  002F14  6E10               	movwf	?_writeEEPROM+2,c
  9532  002F16  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9533                           
  9534                           ;main.c: 1056: writeEEPROM(0x55, 0x0D);
  9535  002F1A  6A0F               	clrf	?_writeEEPROM+1,c
  9536  002F1C  0E55               	movlw	85
  9537  002F1E  6E0E               	movwf	?_writeEEPROM,c
  9538  002F20  0E0D               	movlw	13
  9539  002F22  6E10               	movwf	?_writeEEPROM+2,c
  9540  002F24  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9541                           
  9542                           ;main.c: 1057: writeEEPROM(0x56, 0x7F);
  9543  002F28  6A0F               	clrf	?_writeEEPROM+1,c
  9544  002F2A  0E56               	movlw	86
  9545  002F2C  6E0E               	movwf	?_writeEEPROM,c
  9546  002F2E  0E7F               	movlw	127
  9547  002F30  6E10               	movwf	?_writeEEPROM+2,c
  9548  002F32  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9549                           
  9550                           ;main.c: 1059: writeEEPROM(0x57, 0x0D);
  9551  002F36  6A0F               	clrf	?_writeEEPROM+1,c
  9552  002F38  0E57               	movlw	87
  9553  002F3A  6E0E               	movwf	?_writeEEPROM,c
  9554  002F3C  0E0D               	movlw	13
  9555  002F3E  6E10               	movwf	?_writeEEPROM+2,c
  9556  002F40  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9557                           
  9558                           ;main.c: 1060: writeEEPROM(0x58, 0x7F);
  9559  002F44  6A0F               	clrf	?_writeEEPROM+1,c
  9560  002F46  0E58               	movlw	88
  9561  002F48  6E0E               	movwf	?_writeEEPROM,c
  9562  002F4A  0E7F               	movlw	127
  9563  002F4C  6E10               	movwf	?_writeEEPROM+2,c
  9564  002F4E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9565                           
  9566                           ;main.c: 1062: writeEEPROM(0x59, 0x0D);
  9567  002F52  6A0F               	clrf	?_writeEEPROM+1,c
  9568  002F54  0E59               	movlw	89
  9569  002F56  6E0E               	movwf	?_writeEEPROM,c
  9570  002F58  0E0D               	movlw	13
  9571  002F5A  6E10               	movwf	?_writeEEPROM+2,c
  9572  002F5C  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9573                           
  9574                           ;main.c: 1063: writeEEPROM(0x5A, 0x7F);
  9575  002F60  6A0F               	clrf	?_writeEEPROM+1,c
  9576  002F62  0E5A               	movlw	90
  9577  002F64  6E0E               	movwf	?_writeEEPROM,c
  9578  002F66  0E7F               	movlw	127
  9579  002F68  6E10               	movwf	?_writeEEPROM+2,c
  9580  002F6A  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9581                           
  9582                           ;main.c: 1067: writeEEPROM(0x5B, 0x80);
  9583  002F6E  6A0F               	clrf	?_writeEEPROM+1,c
  9584  002F70  0E5B               	movlw	91
  9585  002F72  6E0E               	movwf	?_writeEEPROM,c
  9586  002F74  0E80               	movlw	128
  9587  002F76  6E10               	movwf	?_writeEEPROM+2,c
  9588  002F78  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9589                           
  9590                           ;main.c: 1068: writeEEPROM(0x5C, 0xff);
  9591  002F7C  6A0F               	clrf	?_writeEEPROM+1,c
  9592  002F7E  0E5C               	movlw	92
  9593  002F80  6E0E               	movwf	?_writeEEPROM,c
  9594  002F82  0EFF               	movlw	255
  9595  002F84  6810               	setf	?_writeEEPROM+2,c
  9596  002F86  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9597                           
  9598                           ;main.c: 1070: writeEEPROM(0x5D, 0x80);
  9599  002F8A  6A0F               	clrf	?_writeEEPROM+1,c
  9600  002F8C  0E5D               	movlw	93
  9601  002F8E  6E0E               	movwf	?_writeEEPROM,c
  9602  002F90  0E80               	movlw	128
  9603  002F92  6E10               	movwf	?_writeEEPROM+2,c
  9604  002F94  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9605                           
  9606                           ;main.c: 1071: writeEEPROM(0x5E, 0xff);
  9607  002F98  6A0F               	clrf	?_writeEEPROM+1,c
  9608  002F9A  0E5E               	movlw	94
  9609  002F9C  6E0E               	movwf	?_writeEEPROM,c
  9610  002F9E  0EFF               	movlw	255
  9611  002FA0  6810               	setf	?_writeEEPROM+2,c
  9612  002FA2  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9613                           
  9614                           ;main.c: 1073: writeEEPROM(0x5F, 0x80);
  9615  002FA6  6A0F               	clrf	?_writeEEPROM+1,c
  9616  002FA8  0E5F               	movlw	95
  9617  002FAA  6E0E               	movwf	?_writeEEPROM,c
  9618  002FAC  0E80               	movlw	128
  9619  002FAE  6E10               	movwf	?_writeEEPROM+2,c
  9620  002FB0  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9621                           
  9622                           ;main.c: 1074: writeEEPROM(0x60, 0xff);
  9623  002FB4  6A0F               	clrf	?_writeEEPROM+1,c
  9624  002FB6  0E60               	movlw	96
  9625  002FB8  6E0E               	movwf	?_writeEEPROM,c
  9626  002FBA  0EFF               	movlw	255
  9627  002FBC  6810               	setf	?_writeEEPROM+2,c
  9628  002FBE  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9629                           
  9630                           ;main.c: 1076: writeEEPROM(0x61, 0x80);
  9631  002FC2  6A0F               	clrf	?_writeEEPROM+1,c
  9632  002FC4  0E61               	movlw	97
  9633  002FC6  6E0E               	movwf	?_writeEEPROM,c
  9634  002FC8  0E80               	movlw	128
  9635  002FCA  6E10               	movwf	?_writeEEPROM+2,c
  9636  002FCC  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9637                           
  9638                           ;main.c: 1077: writeEEPROM(0x62, 0xff);
  9639  002FD0  6A0F               	clrf	?_writeEEPROM+1,c
  9640  002FD2  0E62               	movlw	98
  9641  002FD4  6E0E               	movwf	?_writeEEPROM,c
  9642  002FD6  0EFF               	movlw	255
  9643  002FD8  6810               	setf	?_writeEEPROM+2,c
  9644  002FDA  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9645                           
  9646                           ;main.c: 1079: writeEEPROM(0x63, 0x80);
  9647  002FDE  6A0F               	clrf	?_writeEEPROM+1,c
  9648  002FE0  0E63               	movlw	99
  9649  002FE2  6E0E               	movwf	?_writeEEPROM,c
  9650  002FE4  0E80               	movlw	128
  9651  002FE6  6E10               	movwf	?_writeEEPROM+2,c
  9652  002FE8  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9653                           
  9654                           ;main.c: 1080: writeEEPROM(0x64, 0xff);
  9655  002FEC  6A0F               	clrf	?_writeEEPROM+1,c
  9656  002FEE  0E64               	movlw	100
  9657  002FF0  6E0E               	movwf	?_writeEEPROM,c
  9658  002FF2  0EFF               	movlw	255
  9659  002FF4  6810               	setf	?_writeEEPROM+2,c
  9660  002FF6  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9661                           
  9662                           ;main.c: 1082: writeEEPROM(0x65, 0x80);
  9663  002FFA  6A0F               	clrf	?_writeEEPROM+1,c
  9664  002FFC  0E65               	movlw	101
  9665  002FFE  6E0E               	movwf	?_writeEEPROM,c
  9666  003000  0E80               	movlw	128
  9667  003002  6E10               	movwf	?_writeEEPROM+2,c
  9668  003004  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9669                           
  9670                           ;main.c: 1083: writeEEPROM(0x66, 0xff);
  9671  003008  6A0F               	clrf	?_writeEEPROM+1,c
  9672  00300A  0E66               	movlw	102
  9673  00300C  6E0E               	movwf	?_writeEEPROM,c
  9674  00300E  0EFF               	movlw	255
  9675  003010  6810               	setf	?_writeEEPROM+2,c
  9676  003012  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9677                           
  9678                           ;main.c: 1087: writeEEPROM(0x67, 0x7f);
  9679  003016  6A0F               	clrf	?_writeEEPROM+1,c
  9680  003018  0E67               	movlw	103
  9681  00301A  6E0E               	movwf	?_writeEEPROM,c
  9682  00301C  0E7F               	movlw	127
  9683  00301E  6E10               	movwf	?_writeEEPROM+2,c
  9684  003020  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9685                           
  9686                           ;main.c: 1088: writeEEPROM(0x68, 0xff);
  9687  003024  6A0F               	clrf	?_writeEEPROM+1,c
  9688  003026  0E68               	movlw	104
  9689  003028  6E0E               	movwf	?_writeEEPROM,c
  9690  00302A  0EFF               	movlw	255
  9691  00302C  6810               	setf	?_writeEEPROM+2,c
  9692  00302E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9693                           
  9694                           ;main.c: 1090: writeEEPROM(0x69, 0x7f);
  9695  003032  6A0F               	clrf	?_writeEEPROM+1,c
  9696  003034  0E69               	movlw	105
  9697  003036  6E0E               	movwf	?_writeEEPROM,c
  9698  003038  0E7F               	movlw	127
  9699  00303A  6E10               	movwf	?_writeEEPROM+2,c
  9700  00303C  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9701                           
  9702                           ;main.c: 1091: writeEEPROM(0x6A, 0xff);
  9703  003040  6A0F               	clrf	?_writeEEPROM+1,c
  9704  003042  0E6A               	movlw	106
  9705  003044  6E0E               	movwf	?_writeEEPROM,c
  9706  003046  0EFF               	movlw	255
  9707  003048  6810               	setf	?_writeEEPROM+2,c
  9708  00304A  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9709                           
  9710                           ;main.c: 1093: writeEEPROM(0x6B, 0x7f);
  9711  00304E  6A0F               	clrf	?_writeEEPROM+1,c
  9712  003050  0E6B               	movlw	107
  9713  003052  6E0E               	movwf	?_writeEEPROM,c
  9714  003054  0E7F               	movlw	127
  9715  003056  6E10               	movwf	?_writeEEPROM+2,c
  9716  003058  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9717                           
  9718                           ;main.c: 1094: writeEEPROM(0x6C, 0xff);
  9719  00305C  6A0F               	clrf	?_writeEEPROM+1,c
  9720  00305E  0E6C               	movlw	108
  9721  003060  6E0E               	movwf	?_writeEEPROM,c
  9722  003062  0EFF               	movlw	255
  9723  003064  6810               	setf	?_writeEEPROM+2,c
  9724  003066  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9725                           
  9726                           ;main.c: 1096: writeEEPROM(0x6D, 0x7f);
  9727  00306A  6A0F               	clrf	?_writeEEPROM+1,c
  9728  00306C  0E6D               	movlw	109
  9729  00306E  6E0E               	movwf	?_writeEEPROM,c
  9730  003070  0E7F               	movlw	127
  9731  003072  6E10               	movwf	?_writeEEPROM+2,c
  9732  003074  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9733                           
  9734                           ;main.c: 1097: writeEEPROM(0x6E, 0xff);
  9735  003078  6A0F               	clrf	?_writeEEPROM+1,c
  9736  00307A  0E6E               	movlw	110
  9737  00307C  6E0E               	movwf	?_writeEEPROM,c
  9738  00307E  0EFF               	movlw	255
  9739  003080  6810               	setf	?_writeEEPROM+2,c
  9740  003082  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9741                           
  9742                           ;main.c: 1099: writeEEPROM(0x6F, 0x7f);
  9743  003086  6A0F               	clrf	?_writeEEPROM+1,c
  9744  003088  0E6F               	movlw	111
  9745  00308A  6E0E               	movwf	?_writeEEPROM,c
  9746  00308C  0E7F               	movlw	127
  9747  00308E  6E10               	movwf	?_writeEEPROM+2,c
  9748  003090  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9749                           
  9750                           ;main.c: 1100: writeEEPROM(0x70, 0xff);
  9751  003094  6A0F               	clrf	?_writeEEPROM+1,c
  9752  003096  0E70               	movlw	112
  9753  003098  6E0E               	movwf	?_writeEEPROM,c
  9754  00309A  0EFF               	movlw	255
  9755  00309C  6810               	setf	?_writeEEPROM+2,c
  9756  00309E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9757                           
  9758                           ;main.c: 1102: writeEEPROM(0x71, 0x7f);
  9759  0030A2  6A0F               	clrf	?_writeEEPROM+1,c
  9760  0030A4  0E71               	movlw	113
  9761  0030A6  6E0E               	movwf	?_writeEEPROM,c
  9762  0030A8  0E7F               	movlw	127
  9763  0030AA  6E10               	movwf	?_writeEEPROM+2,c
  9764  0030AC  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9765                           
  9766                           ;main.c: 1103: writeEEPROM(0x72, 0xff);
  9767  0030B0  6A0F               	clrf	?_writeEEPROM+1,c
  9768  0030B2  0E72               	movlw	114
  9769  0030B4  6E0E               	movwf	?_writeEEPROM,c
  9770  0030B6  0EFF               	movlw	255
  9771  0030B8  6810               	setf	?_writeEEPROM+2,c
  9772  0030BA  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9773                           
  9774                           ;main.c: 1107: writeEEPROM(0x73, 0);
  9775  0030BE  6A0F               	clrf	?_writeEEPROM+1,c
  9776  0030C0  0E73               	movlw	115
  9777  0030C2  6E0E               	movwf	?_writeEEPROM,c
  9778  0030C4  0E00               	movlw	0
  9779  0030C6  6A10               	clrf	?_writeEEPROM+2,c
  9780  0030C8  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9781                           
  9782                           ;main.c: 1108: writeEEPROM(0x74, 0);
  9783  0030CC  6A0F               	clrf	?_writeEEPROM+1,c
  9784  0030CE  0E74               	movlw	116
  9785  0030D0  6E0E               	movwf	?_writeEEPROM,c
  9786  0030D2  0E00               	movlw	0
  9787  0030D4  6A10               	clrf	?_writeEEPROM+2,c
  9788  0030D6  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9789                           
  9790                           ;main.c: 1110: writeEEPROM(0x75, 0);
  9791  0030DA  6A0F               	clrf	?_writeEEPROM+1,c
  9792  0030DC  0E75               	movlw	117
  9793  0030DE  6E0E               	movwf	?_writeEEPROM,c
  9794  0030E0  0E00               	movlw	0
  9795  0030E2  6A10               	clrf	?_writeEEPROM+2,c
  9796  0030E4  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9797                           
  9798                           ;main.c: 1111: writeEEPROM(0x76, 0);
  9799  0030E8  6A0F               	clrf	?_writeEEPROM+1,c
  9800  0030EA  0E76               	movlw	118
  9801  0030EC  6E0E               	movwf	?_writeEEPROM,c
  9802  0030EE  0E00               	movlw	0
  9803  0030F0  6A10               	clrf	?_writeEEPROM+2,c
  9804  0030F2  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9805                           
  9806                           ;main.c: 1113: writeEEPROM(0x77, 0);
  9807  0030F6  6A0F               	clrf	?_writeEEPROM+1,c
  9808  0030F8  0E77               	movlw	119
  9809  0030FA  6E0E               	movwf	?_writeEEPROM,c
  9810  0030FC  0E00               	movlw	0
  9811  0030FE  6A10               	clrf	?_writeEEPROM+2,c
  9812  003100  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9813                           
  9814                           ;main.c: 1114: writeEEPROM(0x78, 0);
  9815  003104  6A0F               	clrf	?_writeEEPROM+1,c
  9816  003106  0E78               	movlw	120
  9817  003108  6E0E               	movwf	?_writeEEPROM,c
  9818  00310A  0E00               	movlw	0
  9819  00310C  6A10               	clrf	?_writeEEPROM+2,c
  9820  00310E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9821                           
  9822                           ;main.c: 1116: writeEEPROM(0x79, 0);
  9823  003112  6A0F               	clrf	?_writeEEPROM+1,c
  9824  003114  0E79               	movlw	121
  9825  003116  6E0E               	movwf	?_writeEEPROM,c
  9826  003118  0E00               	movlw	0
  9827  00311A  6A10               	clrf	?_writeEEPROM+2,c
  9828  00311C  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9829                           
  9830                           ;main.c: 1117: writeEEPROM(0x7A, 0);
  9831  003120  6A0F               	clrf	?_writeEEPROM+1,c
  9832  003122  0E7A               	movlw	122
  9833  003124  6E0E               	movwf	?_writeEEPROM,c
  9834  003126  0E00               	movlw	0
  9835  003128  6A10               	clrf	?_writeEEPROM+2,c
  9836  00312A  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9837                           
  9838                           ;main.c: 1119: writeEEPROM(0x7B, 0);
  9839  00312E  6A0F               	clrf	?_writeEEPROM+1,c
  9840  003130  0E7B               	movlw	123
  9841  003132  6E0E               	movwf	?_writeEEPROM,c
  9842  003134  0E00               	movlw	0
  9843  003136  6A10               	clrf	?_writeEEPROM+2,c
  9844  003138  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9845                           
  9846                           ;main.c: 1120: writeEEPROM(0x7C, 0);
  9847  00313C  6A0F               	clrf	?_writeEEPROM+1,c
  9848  00313E  0E7C               	movlw	124
  9849  003140  6E0E               	movwf	?_writeEEPROM,c
  9850  003142  0E00               	movlw	0
  9851  003144  6A10               	clrf	?_writeEEPROM+2,c
  9852  003146  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9853                           
  9854                           ;main.c: 1122: writeEEPROM(0x7D, 0);
  9855  00314A  6A0F               	clrf	?_writeEEPROM+1,c
  9856  00314C  0E7D               	movlw	125
  9857  00314E  6E0E               	movwf	?_writeEEPROM,c
  9858  003150  0E00               	movlw	0
  9859  003152  6A10               	clrf	?_writeEEPROM+2,c
  9860  003154  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9861                           
  9862                           ;main.c: 1123: writeEEPROM(0x7E, 0);
  9863  003158  6A0F               	clrf	?_writeEEPROM+1,c
  9864  00315A  0E7E               	movlw	126
  9865  00315C  6E0E               	movwf	?_writeEEPROM,c
  9866  00315E  0E00               	movlw	0
  9867  003160  6A10               	clrf	?_writeEEPROM+2,c
  9868  003162  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9869                           
  9870                           ;main.c: 1127: writeEEPROM(0x7F, 0x7f);
  9871  003166  6A0F               	clrf	?_writeEEPROM+1,c
  9872  003168  0E7F               	movlw	127
  9873  00316A  6E0E               	movwf	?_writeEEPROM,c
  9874  00316C  6E10               	movwf	?_writeEEPROM+2,c
  9875  00316E  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9876                           
  9877                           ;main.c: 1128: writeEEPROM(0x80, 0xff);
  9878  003172  6A0F               	clrf	?_writeEEPROM+1,c
  9879  003174  0E80               	movlw	128
  9880  003176  6E0E               	movwf	?_writeEEPROM,c
  9881  003178  0EFF               	movlw	255
  9882  00317A  6810               	setf	?_writeEEPROM+2,c
  9883  00317C  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9884                           
  9885                           ;main.c: 1130: writeEEPROM(0x81, 0x7f);
  9886  003180  6A0F               	clrf	?_writeEEPROM+1,c
  9887  003182  0E81               	movlw	129
  9888  003184  6E0E               	movwf	?_writeEEPROM,c
  9889  003186  0E7F               	movlw	127
  9890  003188  6E10               	movwf	?_writeEEPROM+2,c
  9891  00318A  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9892                           
  9893                           ;main.c: 1131: writeEEPROM(0x82, 0xff);
  9894  00318E  6A0F               	clrf	?_writeEEPROM+1,c
  9895  003190  0E82               	movlw	130
  9896  003192  6E0E               	movwf	?_writeEEPROM,c
  9897  003194  0EFF               	movlw	255
  9898  003196  6810               	setf	?_writeEEPROM+2,c
  9899  003198  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9900                           
  9901                           ;main.c: 1133: writeEEPROM(0x83, 0x7f);
  9902  00319C  6A0F               	clrf	?_writeEEPROM+1,c
  9903  00319E  0E83               	movlw	131
  9904  0031A0  6E0E               	movwf	?_writeEEPROM,c
  9905  0031A2  0E7F               	movlw	127
  9906  0031A4  6E10               	movwf	?_writeEEPROM+2,c
  9907  0031A6  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9908                           
  9909                           ;main.c: 1134: writeEEPROM(0x84, 0xff);
  9910  0031AA  6A0F               	clrf	?_writeEEPROM+1,c
  9911  0031AC  0E84               	movlw	132
  9912  0031AE  6E0E               	movwf	?_writeEEPROM,c
  9913  0031B0  0EFF               	movlw	255
  9914  0031B2  6810               	setf	?_writeEEPROM+2,c
  9915  0031B4  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9916                           
  9917                           ;main.c: 1136: writeEEPROM(0x85, 0x7f);
  9918  0031B8  6A0F               	clrf	?_writeEEPROM+1,c
  9919  0031BA  0E85               	movlw	133
  9920  0031BC  6E0E               	movwf	?_writeEEPROM,c
  9921  0031BE  0E7F               	movlw	127
  9922  0031C0  6E10               	movwf	?_writeEEPROM+2,c
  9923  0031C2  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9924                           
  9925                           ;main.c: 1137: writeEEPROM(0x86, 0xff);
  9926  0031C6  6A0F               	clrf	?_writeEEPROM+1,c
  9927  0031C8  0E86               	movlw	134
  9928  0031CA  6E0E               	movwf	?_writeEEPROM,c
  9929  0031CC  0EFF               	movlw	255
  9930  0031CE  6810               	setf	?_writeEEPROM+2,c
  9931  0031D0  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9932                           
  9933                           ;main.c: 1139: writeEEPROM(0x87, 0x7f);
  9934  0031D4  6A0F               	clrf	?_writeEEPROM+1,c
  9935  0031D6  0E87               	movlw	135
  9936  0031D8  6E0E               	movwf	?_writeEEPROM,c
  9937  0031DA  0E7F               	movlw	127
  9938  0031DC  6E10               	movwf	?_writeEEPROM+2,c
  9939  0031DE  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9940                           
  9941                           ;main.c: 1140: writeEEPROM(0x88, 0xff);
  9942  0031E2  6A0F               	clrf	?_writeEEPROM+1,c
  9943  0031E4  0E88               	movlw	136
  9944  0031E6  6E0E               	movwf	?_writeEEPROM,c
  9945  0031E8  0EFF               	movlw	255
  9946  0031EA  6810               	setf	?_writeEEPROM+2,c
  9947  0031EC  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9948                           
  9949                           ;main.c: 1142: writeEEPROM(0x89, 0x7f);
  9950  0031F0  6A0F               	clrf	?_writeEEPROM+1,c
  9951  0031F2  0E89               	movlw	137
  9952  0031F4  6E0E               	movwf	?_writeEEPROM,c
  9953  0031F6  0E7F               	movlw	127
  9954  0031F8  6E10               	movwf	?_writeEEPROM+2,c
  9955  0031FA  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9956                           
  9957                           ;main.c: 1143: writeEEPROM(0x8A, 0xff);
  9958  0031FE  6A0F               	clrf	?_writeEEPROM+1,c
  9959  003200  0E8A               	movlw	138
  9960  003202  6E0E               	movwf	?_writeEEPROM,c
  9961  003204  0EFF               	movlw	255
  9962  003206  6810               	setf	?_writeEEPROM+2,c
  9963  003208  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9964                           
  9965                           ;main.c: 1147: writeEEPROM(0x8B, 0x80);
  9966  00320C  6A0F               	clrf	?_writeEEPROM+1,c
  9967  00320E  0E8B               	movlw	139
  9968  003210  6E0E               	movwf	?_writeEEPROM,c
  9969  003212  0E80               	movlw	128
  9970  003214  6E10               	movwf	?_writeEEPROM+2,c
  9971  003216  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9972                           
  9973                           ;main.c: 1148: writeEEPROM(0x8C, 0x00);
  9974  00321A  6A0F               	clrf	?_writeEEPROM+1,c
  9975  00321C  0E8C               	movlw	140
  9976  00321E  6E0E               	movwf	?_writeEEPROM,c
  9977  003220  0E00               	movlw	0
  9978  003222  6A10               	clrf	?_writeEEPROM+2,c
  9979  003224  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9980                           
  9981                           ;main.c: 1150: writeEEPROM(0x8D, 0x80);
  9982  003228  6A0F               	clrf	?_writeEEPROM+1,c
  9983  00322A  0E8D               	movlw	141
  9984  00322C  6E0E               	movwf	?_writeEEPROM,c
  9985  00322E  0E80               	movlw	128
  9986  003230  6E10               	movwf	?_writeEEPROM+2,c
  9987  003232  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9988                           
  9989                           ;main.c: 1151: writeEEPROM(0x8E, 0x00);
  9990  003236  6A0F               	clrf	?_writeEEPROM+1,c
  9991  003238  0E8E               	movlw	142
  9992  00323A  6E0E               	movwf	?_writeEEPROM,c
  9993  00323C  0E00               	movlw	0
  9994  00323E  6A10               	clrf	?_writeEEPROM+2,c
  9995  003240  ECA4  F02C         	call	_writeEEPROM	;wreg free
  9996                           
  9997                           ;main.c: 1153: writeEEPROM(0x8F, 0x80);
  9998  003244  6A0F               	clrf	?_writeEEPROM+1,c
  9999  003246  0E8F               	movlw	143
 10000  003248  6E0E               	movwf	?_writeEEPROM,c
 10001  00324A  0E80               	movlw	128
 10002  00324C  6E10               	movwf	?_writeEEPROM+2,c
 10003  00324E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10004                           
 10005                           ;main.c: 1154: writeEEPROM(0x90, 0x00);
 10006  003252  6A0F               	clrf	?_writeEEPROM+1,c
 10007  003254  0E90               	movlw	144
 10008  003256  6E0E               	movwf	?_writeEEPROM,c
 10009  003258  0E00               	movlw	0
 10010  00325A  6A10               	clrf	?_writeEEPROM+2,c
 10011  00325C  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10012                           
 10013                           ;main.c: 1156: writeEEPROM(0x91, 0x80);
 10014  003260  6A0F               	clrf	?_writeEEPROM+1,c
 10015  003262  0E91               	movlw	145
 10016  003264  6E0E               	movwf	?_writeEEPROM,c
 10017  003266  0E80               	movlw	128
 10018  003268  6E10               	movwf	?_writeEEPROM+2,c
 10019  00326A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10020                           
 10021                           ;main.c: 1157: writeEEPROM(0x92, 0x00);
 10022  00326E  6A0F               	clrf	?_writeEEPROM+1,c
 10023  003270  0E92               	movlw	146
 10024  003272  6E0E               	movwf	?_writeEEPROM,c
 10025  003274  0E00               	movlw	0
 10026  003276  6A10               	clrf	?_writeEEPROM+2,c
 10027  003278  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10028                           
 10029                           ;main.c: 1159: writeEEPROM(0x93, 0x80);
 10030  00327C  6A0F               	clrf	?_writeEEPROM+1,c
 10031  00327E  0E93               	movlw	147
 10032  003280  6E0E               	movwf	?_writeEEPROM,c
 10033  003282  0E80               	movlw	128
 10034  003284  6E10               	movwf	?_writeEEPROM+2,c
 10035  003286  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10036                           
 10037                           ;main.c: 1160: writeEEPROM(0x94, 0x00);
 10038  00328A  6A0F               	clrf	?_writeEEPROM+1,c
 10039  00328C  0E94               	movlw	148
 10040  00328E  6E0E               	movwf	?_writeEEPROM,c
 10041  003290  0E00               	movlw	0
 10042  003292  6A10               	clrf	?_writeEEPROM+2,c
 10043  003294  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10044                           
 10045                           ;main.c: 1162: writeEEPROM(0x95, 0x80);
 10046  003298  6A0F               	clrf	?_writeEEPROM+1,c
 10047  00329A  0E95               	movlw	149
 10048  00329C  6E0E               	movwf	?_writeEEPROM,c
 10049  00329E  0E80               	movlw	128
 10050  0032A0  6E10               	movwf	?_writeEEPROM+2,c
 10051  0032A2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10052                           
 10053                           ;main.c: 1163: writeEEPROM(0x96, 0x00);
 10054  0032A6  6A0F               	clrf	?_writeEEPROM+1,c
 10055  0032A8  0E96               	movlw	150
 10056  0032AA  6E0E               	movwf	?_writeEEPROM,c
 10057  0032AC  0E00               	movlw	0
 10058  0032AE  6A10               	clrf	?_writeEEPROM+2,c
 10059  0032B0  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10060                           
 10061                           ;main.c: 1167: writeEEPROM(0x97, 2);
 10062  0032B4  6A0F               	clrf	?_writeEEPROM+1,c
 10063  0032B6  0E97               	movlw	151
 10064  0032B8  6E0E               	movwf	?_writeEEPROM,c
 10065  0032BA  0E02               	movlw	2
 10066  0032BC  6E10               	movwf	?_writeEEPROM+2,c
 10067  0032BE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10068                           
 10069                           ;main.c: 1168: writeEEPROM(0x98, 2);
 10070  0032C2  6A0F               	clrf	?_writeEEPROM+1,c
 10071  0032C4  0E98               	movlw	152
 10072  0032C6  6E0E               	movwf	?_writeEEPROM,c
 10073  0032C8  0E02               	movlw	2
 10074  0032CA  6E10               	movwf	?_writeEEPROM+2,c
 10075  0032CC  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10076                           
 10077                           ;main.c: 1169: writeEEPROM(0x99, 2);
 10078  0032D0  6A0F               	clrf	?_writeEEPROM+1,c
 10079  0032D2  0E99               	movlw	153
 10080  0032D4  6E0E               	movwf	?_writeEEPROM,c
 10081  0032D6  0E02               	movlw	2
 10082  0032D8  6E10               	movwf	?_writeEEPROM+2,c
 10083  0032DA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10084                           
 10085                           ;main.c: 1170: writeEEPROM(0x9A, 2);
 10086  0032DE  6A0F               	clrf	?_writeEEPROM+1,c
 10087  0032E0  0E9A               	movlw	154
 10088  0032E2  6E0E               	movwf	?_writeEEPROM,c
 10089  0032E4  0E02               	movlw	2
 10090  0032E6  6E10               	movwf	?_writeEEPROM+2,c
 10091  0032E8  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10092                           
 10093                           ;main.c: 1171: writeEEPROM(0x9B, 2);
 10094  0032EC  6A0F               	clrf	?_writeEEPROM+1,c
 10095  0032EE  0E9B               	movlw	155
 10096  0032F0  6E0E               	movwf	?_writeEEPROM,c
 10097  0032F2  0E02               	movlw	2
 10098  0032F4  6E10               	movwf	?_writeEEPROM+2,c
 10099  0032F6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10100                           
 10101                           ;main.c: 1172: writeEEPROM(0x9C, 2);
 10102  0032FA  6A0F               	clrf	?_writeEEPROM+1,c
 10103  0032FC  0E9C               	movlw	156
 10104  0032FE  6E0E               	movwf	?_writeEEPROM,c
 10105  003300  0E02               	movlw	2
 10106  003302  6E10               	movwf	?_writeEEPROM+2,c
 10107  003304  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10108                           
 10109                           ;main.c: 1176: writeEEPROM(0xF2, 0xc3);
 10110  003308  6A0F               	clrf	?_writeEEPROM+1,c
 10111  00330A  0EF2               	movlw	242
 10112  00330C  6E0E               	movwf	?_writeEEPROM,c
 10113  00330E  0EC3               	movlw	195
 10114  003310  6E10               	movwf	?_writeEEPROM+2,c
 10115  003312  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10116                           
 10117                           ;main.c: 1177: writeEEPROM(0xF3, 0x50);
 10118  003316  6A0F               	clrf	?_writeEEPROM+1,c
 10119  003318  0EF3               	movlw	243
 10120  00331A  6E0E               	movwf	?_writeEEPROM,c
 10121  00331C  0E50               	movlw	80
 10122  00331E  6E10               	movwf	?_writeEEPROM+2,c
 10123  003320  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10124                           
 10125                           ;main.c: 1181: writeEEPROM(0x9E, 0);
 10126  003324  6A0F               	clrf	?_writeEEPROM+1,c
 10127  003326  0E9E               	movlw	158
 10128  003328  6E0E               	movwf	?_writeEEPROM,c
 10129  00332A  0E00               	movlw	0
 10130  00332C  6A10               	clrf	?_writeEEPROM+2,c
 10131  00332E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10132                           
 10133                           ;main.c: 1182: writeEEPROM(0x9F, 0);
 10134  003332  6A0F               	clrf	?_writeEEPROM+1,c
 10135  003334  0E9F               	movlw	159
 10136  003336  6E0E               	movwf	?_writeEEPROM,c
 10137  003338  0E00               	movlw	0
 10138  00333A  6A10               	clrf	?_writeEEPROM+2,c
 10139  00333C  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10140                           
 10141                           ;main.c: 1183: writeEEPROM(0xA0, 0);
 10142  003340  6A0F               	clrf	?_writeEEPROM+1,c
 10143  003342  0EA0               	movlw	160
 10144  003344  6E0E               	movwf	?_writeEEPROM,c
 10145  003346  0E00               	movlw	0
 10146  003348  6A10               	clrf	?_writeEEPROM+2,c
 10147  00334A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10148                           
 10149                           ;main.c: 1184: writeEEPROM(0xA1, 0);
 10150  00334E  6A0F               	clrf	?_writeEEPROM+1,c
 10151  003350  0EA1               	movlw	161
 10152  003352  6E0E               	movwf	?_writeEEPROM,c
 10153  003354  0E00               	movlw	0
 10154  003356  6A10               	clrf	?_writeEEPROM+2,c
 10155  003358  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10156                           
 10157                           ;main.c: 1185: writeEEPROM(0xA2, 0);
 10158  00335C  6A0F               	clrf	?_writeEEPROM+1,c
 10159  00335E  0EA2               	movlw	162
 10160  003360  6E0E               	movwf	?_writeEEPROM,c
 10161  003362  0E00               	movlw	0
 10162  003364  6A10               	clrf	?_writeEEPROM+2,c
 10163  003366  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10164                           
 10165                           ;main.c: 1186: writeEEPROM(0xA3, 0);
 10166  00336A  6A0F               	clrf	?_writeEEPROM+1,c
 10167  00336C  0EA3               	movlw	163
 10168  00336E  6E0E               	movwf	?_writeEEPROM,c
 10169  003370  0E00               	movlw	0
 10170  003372  6A10               	clrf	?_writeEEPROM+2,c
 10171  003374  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10172                           
 10173                           ;main.c: 1187: writeEEPROM(0xA4, 0);
 10174  003378  6A0F               	clrf	?_writeEEPROM+1,c
 10175  00337A  0EA4               	movlw	164
 10176  00337C  6E0E               	movwf	?_writeEEPROM,c
 10177  00337E  0E00               	movlw	0
 10178  003380  6A10               	clrf	?_writeEEPROM+2,c
 10179  003382  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10180                           
 10181                           ;main.c: 1188: writeEEPROM(0xA5, 0);
 10182  003386  6A0F               	clrf	?_writeEEPROM+1,c
 10183  003388  0EA5               	movlw	165
 10184  00338A  6E0E               	movwf	?_writeEEPROM,c
 10185  00338C  0E00               	movlw	0
 10186  00338E  6A10               	clrf	?_writeEEPROM+2,c
 10187  003390  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10188                           
 10189                           ;main.c: 1189: writeEEPROM(0xA6, 0);
 10190  003394  6A0F               	clrf	?_writeEEPROM+1,c
 10191  003396  0EA6               	movlw	166
 10192  003398  6E0E               	movwf	?_writeEEPROM,c
 10193  00339A  0E00               	movlw	0
 10194  00339C  6A10               	clrf	?_writeEEPROM+2,c
 10195  00339E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10196                           
 10197                           ;main.c: 1190: writeEEPROM(0xA7, 0);
 10198  0033A2  6A0F               	clrf	?_writeEEPROM+1,c
 10199  0033A4  0EA7               	movlw	167
 10200  0033A6  6E0E               	movwf	?_writeEEPROM,c
 10201  0033A8  0E00               	movlw	0
 10202  0033AA  6A10               	clrf	?_writeEEPROM+2,c
 10203  0033AC  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10204                           
 10205                           ;main.c: 1191: writeEEPROM(0xA8, 0);
 10206  0033B0  6A0F               	clrf	?_writeEEPROM+1,c
 10207  0033B2  0EA8               	movlw	168
 10208  0033B4  6E0E               	movwf	?_writeEEPROM,c
 10209  0033B6  0E00               	movlw	0
 10210  0033B8  6A10               	clrf	?_writeEEPROM+2,c
 10211  0033BA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10212                           
 10213                           ;main.c: 1192: writeEEPROM(0xA9, 0);
 10214  0033BE  6A0F               	clrf	?_writeEEPROM+1,c
 10215  0033C0  0EA9               	movlw	169
 10216  0033C2  6E0E               	movwf	?_writeEEPROM,c
 10217  0033C4  6A10               	clrf	?_writeEEPROM+2,c
 10218  0033C6  EFA4  F02C         	goto	_writeEEPROM	;wreg free
 10219  0033CA                     __end_of_init_app_eeprom:
 10220                           	opt stack 0
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           postinc0	equ	0xFEE
 10228                           wreg	equ	0xFE8
 10229                           postdec1	equ	0xFE5
 10230                           fsr1h	equ	0xFE2
 10231                           fsr1l	equ	0xFE1
 10232                           indf2	equ	0xFDF
 10233                           postinc2	equ	0xFDE
 10234                           postdec2	equ	0xFDD
 10235                           fsr2h	equ	0xFDA
 10236                           fsr2l	equ	0xFD9
 10237                           status	equ	0xFD8
 10238                           
 10239 ;; *************** function _vscp_setManufacturerId *****************
 10240 ;; Defined at:
 10241 ;;		line 2664 in file "../main.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;  idx             1    wreg     unsigned char 
 10244 ;;  data            1   16[COMRAM] unsigned char 
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;  idx             1   17[COMRAM] unsigned char 
 10247 ;; Return value:  Size  Location     Type
 10248 ;;		None               void
 10249 ;; Registers used:
 10250 ;;		wreg, status,2, status,0, cstack
 10251 ;; Tracked objects:
 10252 ;;		On entry : F/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10256 ;;      Params:         1       0       0       0       0       0       0
 10257 ;;      Locals:         1       0       0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0
 10259 ;;      Totals:         2       0       0       0       0       0       0
 10260 ;;Total ram usage:        2 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    3
 10263 ;; This function calls:
 10264 ;;		_writeEEPROM
 10265 ;; This function is called by:
 10266 ;;		_vscp_writeStdReg
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text39
 10271  005AAC                     __ptext39:
 10272                           	opt stack 0
 10273  005AAC                     _vscp_setManufacturerId:
 10274                           	opt stack 25
 10275                           
 10276                           ;incstack = 0
 10277                           ;incstack = 0
 10278                           ;vscp_setManufacturerId@idx stored from wreg
 10279  005AAC  CFE8 F012          	movff	wreg,vscp_setManufacturerId@idx
 10280                           
 10281                           ; BSR set to: 0
 10282                           ;main.c: 2665: writeEEPROM(0x09 + idx, data);
 10283  005AB0  0E09               	movlw	9
 10284  005AB2  2412               	addwf	vscp_setManufacturerId@idx,w,c
 10285  005AB4  6E0E               	movwf	?_writeEEPROM,c
 10286  005AB6  6A0F               	clrf	?_writeEEPROM+1,c
 10287  005AB8  0E00               	movlw	0
 10288  005ABA  220F               	addwfc	?_writeEEPROM+1,f,c
 10289  005ABC  C011  F010         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
 10290  005AC0  EFA4  F02C         	goto	_writeEEPROM	;wreg free
 10291  005AC4                     __end_of_vscp_setManufacturerId:
 10292                           	opt stack 0
 10293                           tblptru	equ	0xFF8
 10294                           tblptrh	equ	0xFF7
 10295                           tblptrl	equ	0xFF6
 10296                           tablat	equ	0xFF5
 10297                           prodh	equ	0xFF4
 10298                           prodl	equ	0xFF3
 10299                           postinc0	equ	0xFEE
 10300                           wreg	equ	0xFE8
 10301                           postdec1	equ	0xFE5
 10302                           fsr1h	equ	0xFE2
 10303                           fsr1l	equ	0xFE1
 10304                           indf2	equ	0xFDF
 10305                           postinc2	equ	0xFDE
 10306                           postdec2	equ	0xFDD
 10307                           fsr2h	equ	0xFDA
 10308                           fsr2l	equ	0xFD9
 10309                           status	equ	0xFD8
 10310                           
 10311 ;; *************** function _vscp_setUserID *****************
 10312 ;; Defined at:
 10313 ;;		line 2642 in file "../main.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;  idx             1    wreg     unsigned char 
 10316 ;;  data            1   16[COMRAM] unsigned char 
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;  idx             1   17[COMRAM] unsigned char 
 10319 ;; Return value:  Size  Location     Type
 10320 ;;		None               void
 10321 ;; Registers used:
 10322 ;;		wreg, status,2, status,0, cstack
 10323 ;; Tracked objects:
 10324 ;;		On entry : F/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10328 ;;      Params:         1       0       0       0       0       0       0
 10329 ;;      Locals:         1       0       0       0       0       0       0
 10330 ;;      Temps:          0       0       0       0       0       0       0
 10331 ;;      Totals:         2       0       0       0       0       0       0
 10332 ;;Total ram usage:        2 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    3
 10335 ;; This function calls:
 10336 ;;		_writeEEPROM
 10337 ;; This function is called by:
 10338 ;;		_vscp_writeStdReg
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           	psect	text40
 10343  005AC4                     __ptext40:
 10344                           	opt stack 0
 10345  005AC4                     _vscp_setUserID:
 10346                           	opt stack 25
 10347                           
 10348                           ;incstack = 0
 10349                           ;incstack = 0
 10350                           ;vscp_setUserID@idx stored from wreg
 10351  005AC4  CFE8 F012          	movff	wreg,vscp_setUserID@idx
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;main.c: 2643: writeEEPROM(idx + 0x04, data);
 10355  005AC8  0E04               	movlw	4
 10356  005ACA  2412               	addwf	vscp_setUserID@idx,w,c
 10357  005ACC  6E0E               	movwf	?_writeEEPROM,c
 10358  005ACE  6A0F               	clrf	?_writeEEPROM+1,c
 10359  005AD0  0E00               	movlw	0
 10360  005AD2  220F               	addwfc	?_writeEEPROM+1,f,c
 10361  005AD4  C011  F010         	movff	vscp_setUserID@data,?_writeEEPROM+2
 10362  005AD8  EFA4  F02C         	goto	_writeEEPROM	;wreg free
 10363  005ADC                     __end_of_vscp_setUserID:
 10364                           	opt stack 0
 10365                           tblptru	equ	0xFF8
 10366                           tblptrh	equ	0xFF7
 10367                           tblptrl	equ	0xFF6
 10368                           tablat	equ	0xFF5
 10369                           prodh	equ	0xFF4
 10370                           prodl	equ	0xFF3
 10371                           postinc0	equ	0xFEE
 10372                           wreg	equ	0xFE8
 10373                           postdec1	equ	0xFE5
 10374                           fsr1h	equ	0xFE2
 10375                           fsr1l	equ	0xFE1
 10376                           indf2	equ	0xFDF
 10377                           postinc2	equ	0xFDE
 10378                           postdec2	equ	0xFDD
 10379                           fsr2h	equ	0xFDA
 10380                           fsr2l	equ	0xFD9
 10381                           status	equ	0xFD8
 10382                           
 10383 ;; *************** function _vscp_setGUID *****************
 10384 ;; Defined at:
 10385 ;;		line 2611 in file "../main.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;  idx             1    wreg     unsigned char 
 10388 ;;  data            1   16[COMRAM] unsigned char 
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  idx             1   17[COMRAM] unsigned char 
 10391 ;; Return value:  Size  Location     Type
 10392 ;;		None               void
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : F/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10400 ;;      Params:         1       0       0       0       0       0       0
 10401 ;;      Locals:         1       0       0       0       0       0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0
 10403 ;;      Totals:         2       0       0       0       0       0       0
 10404 ;;Total ram usage:        2 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    3
 10407 ;; This function calls:
 10408 ;;		_writeEEPROM
 10409 ;; This function is called by:
 10410 ;;		_vscp_writeStdReg
 10411 ;; This function uses a non-reentrant model
 10412 ;;
 10413                           
 10414                           	psect	text41
 10415  0059FC                     __ptext41:
 10416                           	opt stack 0
 10417  0059FC                     _vscp_setGUID:
 10418                           	opt stack 25
 10419                           
 10420                           ;incstack = 0
 10421                           ;incstack = 0
 10422                           ;vscp_setGUID@idx stored from wreg
 10423  0059FC  CFE8 F012          	movff	wreg,vscp_setGUID@idx
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;main.c: 2612: if ( idx>15 ) return;
 10427  005A00  0E0F               	movlw	15
 10428  005A02  6412               	cpfsgt	vscp_setGUID@idx,c
 10429  005A04  D001               	goto	l8063
 10430  005A06  D00A               	goto	l551
 10431  005A08                     l8063:
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;main.c: 2613: writeEEPROM( 0x11 + idx, data );
 10435  005A08  0E11               	movlw	17
 10436  005A0A  2412               	addwf	vscp_setGUID@idx,w,c
 10437  005A0C  6E0E               	movwf	?_writeEEPROM,c
 10438  005A0E  6A0F               	clrf	?_writeEEPROM+1,c
 10439  005A10  0E00               	movlw	0
 10440  005A12  220F               	addwfc	?_writeEEPROM+1,f,c
 10441  005A14  C011  F010         	movff	vscp_setGUID@data,?_writeEEPROM+2
 10442  005A18  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10443  005A1C                     l551:
 10444  005A1C  0012               	return	
 10445  005A1E                     __end_of_vscp_setGUID:
 10446                           	opt stack 0
 10447                           tblptru	equ	0xFF8
 10448                           tblptrh	equ	0xFF7
 10449                           tblptrl	equ	0xFF6
 10450                           tablat	equ	0xFF5
 10451                           prodh	equ	0xFF4
 10452                           prodl	equ	0xFF3
 10453                           postinc0	equ	0xFEE
 10454                           wreg	equ	0xFE8
 10455                           postdec1	equ	0xFE5
 10456                           fsr1h	equ	0xFE2
 10457                           fsr1l	equ	0xFE1
 10458                           indf2	equ	0xFDF
 10459                           postinc2	equ	0xFDE
 10460                           postdec2	equ	0xFDD
 10461                           fsr2h	equ	0xFDA
 10462                           fsr2l	equ	0xFD9
 10463                           status	equ	0xFD8
 10464                           
 10465 ;; *************** function _vscp_writeAppReg *****************
 10466 ;; Defined at:
 10467 ;;		line 1902 in file "../main.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;  reg             1    wreg     unsigned char 
 10470 ;;  val             1   34[COMRAM] unsigned char 
 10471 ;; Auto vars:     Size  Location     Type
 10472 ;;  reg             1   36[COMRAM] unsigned char 
 10473 ;;  pos             1   35[COMRAM] unsigned char 
 10474 ;;  rv              1   37[COMRAM] unsigned char 
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      unsigned char 
 10477 ;; Registers used:
 10478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : F/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10484 ;;      Params:         1       0       0       0       0       0       0
 10485 ;;      Locals:         3       0       0       0       0       0       0
 10486 ;;      Temps:          0       0       0       0       0       0       0
 10487 ;;      Totals:         4       0       0       0       0       0       0
 10488 ;;Total ram usage:        4 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    4
 10491 ;; This function calls:
 10492 ;;		_writeEEPROM
 10493 ;;		_readEEPROM
 10494 ;;		_writeCoeffs2Ram
 10495 ;; This function is called by:
 10496 ;;		_vscp_writeRegister
 10497 ;;		_vscp_handleProtocolEvent
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501                           	psect	text42
 10502  000B6E                     __ptext42:
 10503                           	opt stack 0
 10504  000B6E                     _vscp_writeAppReg:
 10505                           	opt stack 24
 10506                           
 10507                           ;incstack = 0
 10508                           ;incstack = 0
 10509                           ;vscp_writeAppReg@reg stored from wreg
 10510  000B6E  CFE8 F025          	movff	wreg,vscp_writeAppReg@reg
 10511                           
 10512                           ; BSR set to: 0
 10513                           ;main.c: 1903: uint8_t rv;
 10514                           ;main.c: 1910: rv = ~val;
 10515  000B72  1C23               	comf	vscp_writeAppReg@val,w,c
 10516  000B74  6E26               	movwf	vscp_writeAppReg@rv,c
 10517                           
 10518                           ;main.c: 1912: if (0 == vscp_page_select) {
 10519  000B76  5047               	movf	_vscp_page_select+1,w,c
 10520  000B78  1046               	iorwf	_vscp_page_select,w,c
 10521  000B7A  E102 EFB7  F00A    	bz	l10945
 10522  000B80  EFF1  F00B         	goto	l10947
 10523  000B84                     l10755:
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;main.c: 1918: writeEEPROM(0x41, val);
 10527  000B84  6A0F               	clrf	?_writeEEPROM+1,c
 10528  000B86  0E41               	movlw	65
 10529  000B88  6E0E               	movwf	?_writeEEPROM,c
 10530  000B8A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10531  000B8E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10532                           
 10533                           ;main.c: 1919: rv = readEEPROM(0x41);
 10534  000B92  6A17               	clrf	?_readEEPROM+1,c
 10535  000B94  0E41               	movlw	65
 10536  000B96  6E16               	movwf	?_readEEPROM,c
 10537  000B98  ECA4  F02D         	call	_readEEPROM	;wreg free
 10538  000B9C  EF35  F00C         	goto	L20
 10539  000BA0                     l10757:
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;main.c: 1924: writeEEPROM(0x42, val);
 10543  000BA0  6A0F               	clrf	?_writeEEPROM+1,c
 10544  000BA2  0E42               	movlw	66
 10545  000BA4  6E0E               	movwf	?_writeEEPROM,c
 10546  000BA6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10547  000BAA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10548                           
 10549                           ;main.c: 1925: rv = readEEPROM(0x42);
 10550  000BAE  6A17               	clrf	?_readEEPROM+1,c
 10551  000BB0  0E42               	movlw	66
 10552  000BB2  6E16               	movwf	?_readEEPROM,c
 10553  000BB4  ECA4  F02D         	call	_readEEPROM	;wreg free
 10554  000BB8  EF35  F00C         	goto	L20
 10555  000BBC                     l10759:
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;main.c: 1934: writeEEPROM(0x43, val);
 10559  000BBC  6A0F               	clrf	?_writeEEPROM+1,c
 10560  000BBE  0E43               	movlw	67
 10561  000BC0  6E0E               	movwf	?_writeEEPROM,c
 10562  000BC2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10563  000BC6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10564                           
 10565                           ;main.c: 1935: rv = readEEPROM(0x43);
 10566  000BCA  6A17               	clrf	?_readEEPROM+1,c
 10567  000BCC  0E43               	movlw	67
 10568  000BCE  6E16               	movwf	?_readEEPROM,c
 10569  000BD0  ECA4  F02D         	call	_readEEPROM	;wreg free
 10570  000BD4  EF35  F00C         	goto	L20
 10571  000BD8                     l10761:
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;main.c: 1940: writeEEPROM(0x44, val);
 10575  000BD8  6A0F               	clrf	?_writeEEPROM+1,c
 10576  000BDA  0E44               	movlw	68
 10577  000BDC  6E0E               	movwf	?_writeEEPROM,c
 10578  000BDE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10579  000BE2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10580                           
 10581                           ;main.c: 1941: rv = readEEPROM(0x44);
 10582  000BE6  6A17               	clrf	?_readEEPROM+1,c
 10583  000BE8  0E44               	movlw	68
 10584  000BEA  6E16               	movwf	?_readEEPROM,c
 10585  000BEC  ECA4  F02D         	call	_readEEPROM	;wreg free
 10586  000BF0  EF35  F00C         	goto	L20
 10587  000BF4                     l10763:
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;main.c: 1946: writeEEPROM(0x45, val);
 10591  000BF4  6A0F               	clrf	?_writeEEPROM+1,c
 10592  000BF6  0E45               	movlw	69
 10593  000BF8  6E0E               	movwf	?_writeEEPROM,c
 10594  000BFA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10595  000BFE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10596                           
 10597                           ;main.c: 1947: rv = readEEPROM(0x45);
 10598  000C02  6A17               	clrf	?_readEEPROM+1,c
 10599  000C04  0E45               	movlw	69
 10600  000C06  6E16               	movwf	?_readEEPROM,c
 10601  000C08  ECA4  F02D         	call	_readEEPROM	;wreg free
 10602  000C0C  EF35  F00C         	goto	L20
 10603  000C10                     l10765:
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;main.c: 1952: writeEEPROM(0x46, val);
 10607  000C10  6A0F               	clrf	?_writeEEPROM+1,c
 10608  000C12  0E46               	movlw	70
 10609  000C14  6E0E               	movwf	?_writeEEPROM,c
 10610  000C16  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10611  000C1A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10612                           
 10613                           ;main.c: 1953: rv = readEEPROM(0x46);
 10614  000C1E  6A17               	clrf	?_readEEPROM+1,c
 10615  000C20  0E46               	movlw	70
 10616  000C22  6E16               	movwf	?_readEEPROM,c
 10617  000C24  ECA4  F02D         	call	_readEEPROM	;wreg free
 10618  000C28  EF35  F00C         	goto	L20
 10619  000C2C                     l10767:
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;main.c: 1958: writeEEPROM(0x47, val);
 10623  000C2C  6A0F               	clrf	?_writeEEPROM+1,c
 10624  000C2E  0E47               	movlw	71
 10625  000C30  6E0E               	movwf	?_writeEEPROM,c
 10626  000C32  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10627  000C36  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10628                           
 10629                           ;main.c: 1959: rv = readEEPROM(0x47);
 10630  000C3A  6A17               	clrf	?_readEEPROM+1,c
 10631  000C3C  0E47               	movlw	71
 10632  000C3E  6E16               	movwf	?_readEEPROM,c
 10633  000C40  ECA4  F02D         	call	_readEEPROM	;wreg free
 10634  000C44  EF35  F00C         	goto	L20
 10635  000C48                     l10769:
 10636                           
 10637                           ; BSR set to: 0
 10638                           ;main.c: 1964: writeEEPROM(0x48, val);
 10639  000C48  6A0F               	clrf	?_writeEEPROM+1,c
 10640  000C4A  0E48               	movlw	72
 10641  000C4C  6E0E               	movwf	?_writeEEPROM,c
 10642  000C4E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10643  000C52  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10644                           
 10645                           ;main.c: 1965: rv = readEEPROM(0x48);
 10646  000C56  6A17               	clrf	?_readEEPROM+1,c
 10647  000C58  0E48               	movlw	72
 10648  000C5A  6E16               	movwf	?_readEEPROM,c
 10649  000C5C  ECA4  F02D         	call	_readEEPROM	;wreg free
 10650  000C60  EF35  F00C         	goto	L20
 10651  000C64                     l10771:
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;main.c: 1974: writeEEPROM(0x49, val);
 10655  000C64  6A0F               	clrf	?_writeEEPROM+1,c
 10656  000C66  0E49               	movlw	73
 10657  000C68  6E0E               	movwf	?_writeEEPROM,c
 10658  000C6A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10659  000C6E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10660                           
 10661                           ;main.c: 1975: rv = readEEPROM(0x49);
 10662  000C72  6A17               	clrf	?_readEEPROM+1,c
 10663  000C74  0E49               	movlw	73
 10664  000C76  6E16               	movwf	?_readEEPROM,c
 10665  000C78  ECA4  F02D         	call	_readEEPROM	;wreg free
 10666  000C7C  EF35  F00C         	goto	L20
 10667  000C80                     l10773:
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;main.c: 1980: writeEEPROM(0x4A, val);
 10671  000C80  6A0F               	clrf	?_writeEEPROM+1,c
 10672  000C82  0E4A               	movlw	74
 10673  000C84  6E0E               	movwf	?_writeEEPROM,c
 10674  000C86  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10675  000C8A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10676                           
 10677                           ;main.c: 1981: rv = readEEPROM(0x4A);
 10678  000C8E  6A17               	clrf	?_readEEPROM+1,c
 10679  000C90  0E4A               	movlw	74
 10680  000C92  6E16               	movwf	?_readEEPROM,c
 10681  000C94  ECA4  F02D         	call	_readEEPROM	;wreg free
 10682  000C98  EF35  F00C         	goto	L20
 10683  000C9C                     l10775:
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;main.c: 1986: writeEEPROM(0x4B, val);
 10687  000C9C  6A0F               	clrf	?_writeEEPROM+1,c
 10688  000C9E  0E4B               	movlw	75
 10689  000CA0  6E0E               	movwf	?_writeEEPROM,c
 10690  000CA2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10691  000CA6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10692                           
 10693                           ;main.c: 1987: rv = readEEPROM(0x4B);
 10694  000CAA  6A17               	clrf	?_readEEPROM+1,c
 10695  000CAC  0E4B               	movlw	75
 10696  000CAE  6E16               	movwf	?_readEEPROM,c
 10697  000CB0  ECA4  F02D         	call	_readEEPROM	;wreg free
 10698  000CB4  EF35  F00C         	goto	L20
 10699  000CB8                     l10777:
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;main.c: 1992: writeEEPROM(0x4C, val);
 10703  000CB8  6A0F               	clrf	?_writeEEPROM+1,c
 10704  000CBA  0E4C               	movlw	76
 10705  000CBC  6E0E               	movwf	?_writeEEPROM,c
 10706  000CBE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10707  000CC2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10708                           
 10709                           ;main.c: 1993: rv = readEEPROM(0x4C);
 10710  000CC6  6A17               	clrf	?_readEEPROM+1,c
 10711  000CC8  0E4C               	movlw	76
 10712  000CCA  6E16               	movwf	?_readEEPROM,c
 10713  000CCC  ECA4  F02D         	call	_readEEPROM	;wreg free
 10714  000CD0  EF35  F00C         	goto	L20
 10715  000CD4                     l10779:
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;main.c: 1998: writeEEPROM(0x4D, val);
 10719  000CD4  6A0F               	clrf	?_writeEEPROM+1,c
 10720  000CD6  0E4D               	movlw	77
 10721  000CD8  6E0E               	movwf	?_writeEEPROM,c
 10722  000CDA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10723  000CDE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10724                           
 10725                           ;main.c: 1999: rv = readEEPROM(0x4D);
 10726  000CE2  6A17               	clrf	?_readEEPROM+1,c
 10727  000CE4  0E4D               	movlw	77
 10728  000CE6  6E16               	movwf	?_readEEPROM,c
 10729  000CE8  ECA4  F02D         	call	_readEEPROM	;wreg free
 10730  000CEC  EF35  F00C         	goto	L20
 10731  000CF0                     l10781:
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;main.c: 2004: writeEEPROM(0x4E, val);
 10735  000CF0  6A0F               	clrf	?_writeEEPROM+1,c
 10736  000CF2  0E4E               	movlw	78
 10737  000CF4  6E0E               	movwf	?_writeEEPROM,c
 10738  000CF6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10739  000CFA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10740                           
 10741                           ;main.c: 2005: rv = readEEPROM(0x4E);
 10742  000CFE  6A17               	clrf	?_readEEPROM+1,c
 10743  000D00  0E4E               	movlw	78
 10744  000D02  6E16               	movwf	?_readEEPROM,c
 10745  000D04  ECA4  F02D         	call	_readEEPROM	;wreg free
 10746  000D08  EF35  F00C         	goto	L20
 10747  000D0C                     l10783:
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;main.c: 2014: writeEEPROM(0x4F, val);
 10751  000D0C  6A0F               	clrf	?_writeEEPROM+1,c
 10752  000D0E  0E4F               	movlw	79
 10753  000D10  6E0E               	movwf	?_writeEEPROM,c
 10754  000D12  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10755  000D16  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10756                           
 10757                           ;main.c: 2015: rv = readEEPROM(0x4F);
 10758  000D1A  6A17               	clrf	?_readEEPROM+1,c
 10759  000D1C  0E4F               	movlw	79
 10760  000D1E  6E16               	movwf	?_readEEPROM,c
 10761  000D20  ECA4  F02D         	call	_readEEPROM	;wreg free
 10762  000D24  EF35  F00C         	goto	L20
 10763  000D28                     l10785:
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;main.c: 2020: writeEEPROM(0x50, val);
 10767  000D28  6A0F               	clrf	?_writeEEPROM+1,c
 10768  000D2A  0E50               	movlw	80
 10769  000D2C  6E0E               	movwf	?_writeEEPROM,c
 10770  000D2E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10771  000D32  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10772                           
 10773                           ;main.c: 2021: rv = readEEPROM(0x50);
 10774  000D36  6A17               	clrf	?_readEEPROM+1,c
 10775  000D38  0E50               	movlw	80
 10776  000D3A  6E16               	movwf	?_readEEPROM,c
 10777  000D3C  ECA4  F02D         	call	_readEEPROM	;wreg free
 10778  000D40  EF35  F00C         	goto	L20
 10779  000D44                     l10787:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;main.c: 2026: writeEEPROM(0x51, val);
 10783  000D44  6A0F               	clrf	?_writeEEPROM+1,c
 10784  000D46  0E51               	movlw	81
 10785  000D48  6E0E               	movwf	?_writeEEPROM,c
 10786  000D4A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10787  000D4E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10788                           
 10789                           ;main.c: 2027: rv = readEEPROM(0x51);
 10790  000D52  6A17               	clrf	?_readEEPROM+1,c
 10791  000D54  0E51               	movlw	81
 10792  000D56  6E16               	movwf	?_readEEPROM,c
 10793  000D58  ECA4  F02D         	call	_readEEPROM	;wreg free
 10794  000D5C  EF35  F00C         	goto	L20
 10795  000D60                     l10789:
 10796                           
 10797                           ; BSR set to: 0
 10798                           ;main.c: 2032: writeEEPROM(0x52, val);
 10799  000D60  6A0F               	clrf	?_writeEEPROM+1,c
 10800  000D62  0E52               	movlw	82
 10801  000D64  6E0E               	movwf	?_writeEEPROM,c
 10802  000D66  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10803  000D6A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10804                           
 10805                           ;main.c: 2033: rv = readEEPROM(0x52);
 10806  000D6E  6A17               	clrf	?_readEEPROM+1,c
 10807  000D70  0E52               	movlw	82
 10808  000D72  6E16               	movwf	?_readEEPROM,c
 10809  000D74  ECA4  F02D         	call	_readEEPROM	;wreg free
 10810  000D78  EF35  F00C         	goto	L20
 10811  000D7C                     l10791:
 10812                           
 10813                           ; BSR set to: 0
 10814                           ;main.c: 2038: writeEEPROM(0x53, val);
 10815  000D7C  6A0F               	clrf	?_writeEEPROM+1,c
 10816  000D7E  0E53               	movlw	83
 10817  000D80  6E0E               	movwf	?_writeEEPROM,c
 10818  000D82  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10819  000D86  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10820                           
 10821                           ;main.c: 2039: rv = readEEPROM(0x53);
 10822  000D8A  6A17               	clrf	?_readEEPROM+1,c
 10823  000D8C  0E53               	movlw	83
 10824  000D8E  6E16               	movwf	?_readEEPROM,c
 10825  000D90  ECA4  F02D         	call	_readEEPROM	;wreg free
 10826  000D94  EF35  F00C         	goto	L20
 10827  000D98                     l10793:
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;main.c: 2044: writeEEPROM(0x54, val);
 10831  000D98  6A0F               	clrf	?_writeEEPROM+1,c
 10832  000D9A  0E54               	movlw	84
 10833  000D9C  6E0E               	movwf	?_writeEEPROM,c
 10834  000D9E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10835  000DA2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10836                           
 10837                           ;main.c: 2045: rv = readEEPROM(0x54);
 10838  000DA6  6A17               	clrf	?_readEEPROM+1,c
 10839  000DA8  0E54               	movlw	84
 10840  000DAA  6E16               	movwf	?_readEEPROM,c
 10841  000DAC  ECA4  F02D         	call	_readEEPROM	;wreg free
 10842  000DB0  EF35  F00C         	goto	L20
 10843  000DB4                     l10795:
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;main.c: 2050: writeEEPROM(0x55, val);
 10847  000DB4  6A0F               	clrf	?_writeEEPROM+1,c
 10848  000DB6  0E55               	movlw	85
 10849  000DB8  6E0E               	movwf	?_writeEEPROM,c
 10850  000DBA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10851  000DBE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10852                           
 10853                           ;main.c: 2051: rv = readEEPROM(0x55);
 10854  000DC2  6A17               	clrf	?_readEEPROM+1,c
 10855  000DC4  0E55               	movlw	85
 10856  000DC6  6E16               	movwf	?_readEEPROM,c
 10857  000DC8  ECA4  F02D         	call	_readEEPROM	;wreg free
 10858  000DCC  EF35  F00C         	goto	L20
 10859  000DD0                     l10797:
 10860                           
 10861                           ; BSR set to: 0
 10862                           ;main.c: 2056: writeEEPROM(0x56, val);
 10863  000DD0  6A0F               	clrf	?_writeEEPROM+1,c
 10864  000DD2  0E56               	movlw	86
 10865  000DD4  6E0E               	movwf	?_writeEEPROM,c
 10866  000DD6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10867  000DDA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10868                           
 10869                           ;main.c: 2057: rv = readEEPROM(0x56);
 10870  000DDE  6A17               	clrf	?_readEEPROM+1,c
 10871  000DE0  0E56               	movlw	86
 10872  000DE2  6E16               	movwf	?_readEEPROM,c
 10873  000DE4  ECA4  F02D         	call	_readEEPROM	;wreg free
 10874  000DE8  EF35  F00C         	goto	L20
 10875  000DEC                     l10799:
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;main.c: 2062: writeEEPROM(0x57, val);
 10879  000DEC  6A0F               	clrf	?_writeEEPROM+1,c
 10880  000DEE  0E57               	movlw	87
 10881  000DF0  6E0E               	movwf	?_writeEEPROM,c
 10882  000DF2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10883  000DF6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10884                           
 10885                           ;main.c: 2063: rv = readEEPROM(0x57);
 10886  000DFA  6A17               	clrf	?_readEEPROM+1,c
 10887  000DFC  0E57               	movlw	87
 10888  000DFE  6E16               	movwf	?_readEEPROM,c
 10889  000E00  ECA4  F02D         	call	_readEEPROM	;wreg free
 10890  000E04  EF35  F00C         	goto	L20
 10891  000E08                     l10801:
 10892                           
 10893                           ; BSR set to: 0
 10894                           ;main.c: 2068: writeEEPROM(0x58, val);
 10895  000E08  6A0F               	clrf	?_writeEEPROM+1,c
 10896  000E0A  0E58               	movlw	88
 10897  000E0C  6E0E               	movwf	?_writeEEPROM,c
 10898  000E0E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10899  000E12  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10900                           
 10901                           ;main.c: 2069: rv = readEEPROM(0x58);
 10902  000E16  6A17               	clrf	?_readEEPROM+1,c
 10903  000E18  0E58               	movlw	88
 10904  000E1A  6E16               	movwf	?_readEEPROM,c
 10905  000E1C  ECA4  F02D         	call	_readEEPROM	;wreg free
 10906  000E20  EF35  F00C         	goto	L20
 10907  000E24                     l10803:
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;main.c: 2074: writeEEPROM(0x59, val);
 10911  000E24  6A0F               	clrf	?_writeEEPROM+1,c
 10912  000E26  0E59               	movlw	89
 10913  000E28  6E0E               	movwf	?_writeEEPROM,c
 10914  000E2A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10915  000E2E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10916                           
 10917                           ;main.c: 2075: rv = readEEPROM(0x59);
 10918  000E32  6A17               	clrf	?_readEEPROM+1,c
 10919  000E34  0E59               	movlw	89
 10920  000E36  6E16               	movwf	?_readEEPROM,c
 10921  000E38  ECA4  F02D         	call	_readEEPROM	;wreg free
 10922  000E3C  EF35  F00C         	goto	L20
 10923  000E40                     l10805:
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;main.c: 2080: writeEEPROM(0x5A, val);
 10927  000E40  6A0F               	clrf	?_writeEEPROM+1,c
 10928  000E42  0E5A               	movlw	90
 10929  000E44  6E0E               	movwf	?_writeEEPROM,c
 10930  000E46  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10931  000E4A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10932                           
 10933                           ;main.c: 2081: rv = readEEPROM(0x5A);
 10934  000E4E  6A17               	clrf	?_readEEPROM+1,c
 10935  000E50  0E5A               	movlw	90
 10936  000E52  6E16               	movwf	?_readEEPROM,c
 10937  000E54  ECA4  F02D         	call	_readEEPROM	;wreg free
 10938  000E58  EF35  F00C         	goto	L20
 10939  000E5C                     l10807:
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;main.c: 2090: writeEEPROM(0x5B, val);
 10943  000E5C  6A0F               	clrf	?_writeEEPROM+1,c
 10944  000E5E  0E5B               	movlw	91
 10945  000E60  6E0E               	movwf	?_writeEEPROM,c
 10946  000E62  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10947  000E66  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10948                           
 10949                           ;main.c: 2091: rv = readEEPROM(0x5B);
 10950  000E6A  6A17               	clrf	?_readEEPROM+1,c
 10951  000E6C  0E5B               	movlw	91
 10952  000E6E  6E16               	movwf	?_readEEPROM,c
 10953  000E70  ECA4  F02D         	call	_readEEPROM	;wreg free
 10954  000E74  EF35  F00C         	goto	L20
 10955  000E78                     l10809:
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;main.c: 2096: writeEEPROM(0x5C, val);
 10959  000E78  6A0F               	clrf	?_writeEEPROM+1,c
 10960  000E7A  0E5C               	movlw	92
 10961  000E7C  6E0E               	movwf	?_writeEEPROM,c
 10962  000E7E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10963  000E82  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10964                           
 10965                           ;main.c: 2097: rv = readEEPROM(0x5C);
 10966  000E86  6A17               	clrf	?_readEEPROM+1,c
 10967  000E88  0E5C               	movlw	92
 10968  000E8A  6E16               	movwf	?_readEEPROM,c
 10969  000E8C  ECA4  F02D         	call	_readEEPROM	;wreg free
 10970  000E90  EF35  F00C         	goto	L20
 10971  000E94                     l10811:
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;main.c: 2102: writeEEPROM(0x5D, val);
 10975  000E94  6A0F               	clrf	?_writeEEPROM+1,c
 10976  000E96  0E5D               	movlw	93
 10977  000E98  6E0E               	movwf	?_writeEEPROM,c
 10978  000E9A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10979  000E9E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10980                           
 10981                           ;main.c: 2103: rv = readEEPROM(0x5D);
 10982  000EA2  6A17               	clrf	?_readEEPROM+1,c
 10983  000EA4  0E5D               	movlw	93
 10984  000EA6  6E16               	movwf	?_readEEPROM,c
 10985  000EA8  ECA4  F02D         	call	_readEEPROM	;wreg free
 10986  000EAC  EF35  F00C         	goto	L20
 10987  000EB0                     l10813:
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;main.c: 2108: writeEEPROM(0x5E, val);
 10991  000EB0  6A0F               	clrf	?_writeEEPROM+1,c
 10992  000EB2  0E5E               	movlw	94
 10993  000EB4  6E0E               	movwf	?_writeEEPROM,c
 10994  000EB6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 10995  000EBA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 10996                           
 10997                           ;main.c: 2109: rv = readEEPROM(0x5E);
 10998  000EBE  6A17               	clrf	?_readEEPROM+1,c
 10999  000EC0  0E5E               	movlw	94
 11000  000EC2  6E16               	movwf	?_readEEPROM,c
 11001  000EC4  ECA4  F02D         	call	_readEEPROM	;wreg free
 11002  000EC8  EF35  F00C         	goto	L20
 11003  000ECC                     l10815:
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;main.c: 2114: writeEEPROM(0x5F, val);
 11007  000ECC  6A0F               	clrf	?_writeEEPROM+1,c
 11008  000ECE  0E5F               	movlw	95
 11009  000ED0  6E0E               	movwf	?_writeEEPROM,c
 11010  000ED2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11011  000ED6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11012                           
 11013                           ;main.c: 2115: rv = readEEPROM(0x5F);
 11014  000EDA  6A17               	clrf	?_readEEPROM+1,c
 11015  000EDC  0E5F               	movlw	95
 11016  000EDE  6E16               	movwf	?_readEEPROM,c
 11017  000EE0  ECA4  F02D         	call	_readEEPROM	;wreg free
 11018  000EE4  EF35  F00C         	goto	L20
 11019  000EE8                     l10817:
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;main.c: 2120: writeEEPROM(0x60, val);
 11023  000EE8  6A0F               	clrf	?_writeEEPROM+1,c
 11024  000EEA  0E60               	movlw	96
 11025  000EEC  6E0E               	movwf	?_writeEEPROM,c
 11026  000EEE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11027  000EF2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11028                           
 11029                           ;main.c: 2121: rv = readEEPROM(0x60);
 11030  000EF6  6A17               	clrf	?_readEEPROM+1,c
 11031  000EF8  0E60               	movlw	96
 11032  000EFA  6E16               	movwf	?_readEEPROM,c
 11033  000EFC  ECA4  F02D         	call	_readEEPROM	;wreg free
 11034  000F00  EF35  F00C         	goto	L20
 11035  000F04                     l10819:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;main.c: 2126: writeEEPROM(0x61, val);
 11039  000F04  6A0F               	clrf	?_writeEEPROM+1,c
 11040  000F06  0E61               	movlw	97
 11041  000F08  6E0E               	movwf	?_writeEEPROM,c
 11042  000F0A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11043  000F0E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11044                           
 11045                           ;main.c: 2127: rv = readEEPROM(0x61);
 11046  000F12  6A17               	clrf	?_readEEPROM+1,c
 11047  000F14  0E61               	movlw	97
 11048  000F16  6E16               	movwf	?_readEEPROM,c
 11049  000F18  ECA4  F02D         	call	_readEEPROM	;wreg free
 11050  000F1C  EF35  F00C         	goto	L20
 11051  000F20                     l10821:
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;main.c: 2132: writeEEPROM(0x62, val);
 11055  000F20  6A0F               	clrf	?_writeEEPROM+1,c
 11056  000F22  0E62               	movlw	98
 11057  000F24  6E0E               	movwf	?_writeEEPROM,c
 11058  000F26  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11059  000F2A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11060                           
 11061                           ;main.c: 2133: rv = readEEPROM(0x62);
 11062  000F2E  6A17               	clrf	?_readEEPROM+1,c
 11063  000F30  0E62               	movlw	98
 11064  000F32  6E16               	movwf	?_readEEPROM,c
 11065  000F34  ECA4  F02D         	call	_readEEPROM	;wreg free
 11066  000F38  EF35  F00C         	goto	L20
 11067  000F3C                     l10823:
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;main.c: 2138: writeEEPROM(0x63, val);
 11071  000F3C  6A0F               	clrf	?_writeEEPROM+1,c
 11072  000F3E  0E63               	movlw	99
 11073  000F40  6E0E               	movwf	?_writeEEPROM,c
 11074  000F42  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11075  000F46  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11076                           
 11077                           ;main.c: 2139: rv = readEEPROM(0x63);
 11078  000F4A  6A17               	clrf	?_readEEPROM+1,c
 11079  000F4C  0E63               	movlw	99
 11080  000F4E  6E16               	movwf	?_readEEPROM,c
 11081  000F50  ECA4  F02D         	call	_readEEPROM	;wreg free
 11082  000F54  EF35  F00C         	goto	L20
 11083  000F58                     l10825:
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;main.c: 2144: writeEEPROM(0x64, val);
 11087  000F58  6A0F               	clrf	?_writeEEPROM+1,c
 11088  000F5A  0E64               	movlw	100
 11089  000F5C  6E0E               	movwf	?_writeEEPROM,c
 11090  000F5E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11091  000F62  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11092                           
 11093                           ;main.c: 2145: rv = readEEPROM(0x64);
 11094  000F66  6A17               	clrf	?_readEEPROM+1,c
 11095  000F68  0E64               	movlw	100
 11096  000F6A  6E16               	movwf	?_readEEPROM,c
 11097  000F6C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11098  000F70  EF35  F00C         	goto	L20
 11099  000F74                     l10827:
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;main.c: 2150: writeEEPROM(0x65, val);
 11103  000F74  6A0F               	clrf	?_writeEEPROM+1,c
 11104  000F76  0E65               	movlw	101
 11105  000F78  6E0E               	movwf	?_writeEEPROM,c
 11106  000F7A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11107  000F7E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11108                           
 11109                           ;main.c: 2151: rv = readEEPROM(0x65);
 11110  000F82  6A17               	clrf	?_readEEPROM+1,c
 11111  000F84  0E65               	movlw	101
 11112  000F86  6E16               	movwf	?_readEEPROM,c
 11113  000F88  ECA4  F02D         	call	_readEEPROM	;wreg free
 11114  000F8C  EF35  F00C         	goto	L20
 11115  000F90                     l10829:
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;main.c: 2156: writeEEPROM(0x66, val);
 11119  000F90  6A0F               	clrf	?_writeEEPROM+1,c
 11120  000F92  0E66               	movlw	102
 11121  000F94  6E0E               	movwf	?_writeEEPROM,c
 11122  000F96  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11123  000F9A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11124                           
 11125                           ;main.c: 2157: rv = readEEPROM(0x66);
 11126  000F9E  6A17               	clrf	?_readEEPROM+1,c
 11127  000FA0  0E66               	movlw	102
 11128  000FA2  6E16               	movwf	?_readEEPROM,c
 11129  000FA4  ECA4  F02D         	call	_readEEPROM	;wreg free
 11130  000FA8  EF35  F00C         	goto	L20
 11131  000FAC                     l10831:
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;main.c: 2166: writeEEPROM(0x67, val);
 11135  000FAC  6A0F               	clrf	?_writeEEPROM+1,c
 11136  000FAE  0E67               	movlw	103
 11137  000FB0  6E0E               	movwf	?_writeEEPROM,c
 11138  000FB2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11139  000FB6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11140                           
 11141                           ;main.c: 2167: rv = readEEPROM(0x67);
 11142  000FBA  6A17               	clrf	?_readEEPROM+1,c
 11143  000FBC  0E67               	movlw	103
 11144  000FBE  6E16               	movwf	?_readEEPROM,c
 11145  000FC0  ECA4  F02D         	call	_readEEPROM	;wreg free
 11146  000FC4  EF35  F00C         	goto	L20
 11147  000FC8                     l10833:
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;main.c: 2172: writeEEPROM(0x68, val);
 11151  000FC8  6A0F               	clrf	?_writeEEPROM+1,c
 11152  000FCA  0E68               	movlw	104
 11153  000FCC  6E0E               	movwf	?_writeEEPROM,c
 11154  000FCE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11155  000FD2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11156                           
 11157                           ;main.c: 2173: rv = readEEPROM(0x68);
 11158  000FD6  6A17               	clrf	?_readEEPROM+1,c
 11159  000FD8  0E68               	movlw	104
 11160  000FDA  6E16               	movwf	?_readEEPROM,c
 11161  000FDC  ECA4  F02D         	call	_readEEPROM	;wreg free
 11162  000FE0  EF35  F00C         	goto	L20
 11163  000FE4                     l10835:
 11164                           
 11165                           ; BSR set to: 0
 11166                           ;main.c: 2178: writeEEPROM(0x69, val);
 11167  000FE4  6A0F               	clrf	?_writeEEPROM+1,c
 11168  000FE6  0E69               	movlw	105
 11169  000FE8  6E0E               	movwf	?_writeEEPROM,c
 11170  000FEA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11171  000FEE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11172                           
 11173                           ;main.c: 2179: rv = readEEPROM(0x69);
 11174  000FF2  6A17               	clrf	?_readEEPROM+1,c
 11175  000FF4  0E69               	movlw	105
 11176  000FF6  6E16               	movwf	?_readEEPROM,c
 11177  000FF8  ECA4  F02D         	call	_readEEPROM	;wreg free
 11178  000FFC  EF35  F00C         	goto	L20
 11179  001000                     l10837:
 11180                           
 11181                           ; BSR set to: 0
 11182                           ;main.c: 2184: writeEEPROM(0x6A, val);
 11183  001000  6A0F               	clrf	?_writeEEPROM+1,c
 11184  001002  0E6A               	movlw	106
 11185  001004  6E0E               	movwf	?_writeEEPROM,c
 11186  001006  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11187  00100A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11188                           
 11189                           ;main.c: 2185: rv = readEEPROM(0x6A);
 11190  00100E  6A17               	clrf	?_readEEPROM+1,c
 11191  001010  0E6A               	movlw	106
 11192  001012  6E16               	movwf	?_readEEPROM,c
 11193  001014  ECA4  F02D         	call	_readEEPROM	;wreg free
 11194  001018  EF35  F00C         	goto	L20
 11195  00101C                     l10839:
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;main.c: 2190: writeEEPROM(0x6B, val);
 11199  00101C  6A0F               	clrf	?_writeEEPROM+1,c
 11200  00101E  0E6B               	movlw	107
 11201  001020  6E0E               	movwf	?_writeEEPROM,c
 11202  001022  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11203  001026  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11204                           
 11205                           ;main.c: 2191: rv = readEEPROM(0x6B);
 11206  00102A  6A17               	clrf	?_readEEPROM+1,c
 11207  00102C  0E6B               	movlw	107
 11208  00102E  6E16               	movwf	?_readEEPROM,c
 11209  001030  ECA4  F02D         	call	_readEEPROM	;wreg free
 11210  001034  EF35  F00C         	goto	L20
 11211  001038                     l10841:
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;main.c: 2196: writeEEPROM(0x6C, val);
 11215  001038  6A0F               	clrf	?_writeEEPROM+1,c
 11216  00103A  0E6C               	movlw	108
 11217  00103C  6E0E               	movwf	?_writeEEPROM,c
 11218  00103E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11219  001042  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11220                           
 11221                           ;main.c: 2197: rv = readEEPROM(0x6C);
 11222  001046  6A17               	clrf	?_readEEPROM+1,c
 11223  001048  0E6C               	movlw	108
 11224  00104A  6E16               	movwf	?_readEEPROM,c
 11225  00104C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11226  001050  EF35  F00C         	goto	L20
 11227  001054                     l10843:
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;main.c: 2202: writeEEPROM(0x6D, val);
 11231  001054  6A0F               	clrf	?_writeEEPROM+1,c
 11232  001056  0E6D               	movlw	109
 11233  001058  6E0E               	movwf	?_writeEEPROM,c
 11234  00105A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11235  00105E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11236                           
 11237                           ;main.c: 2203: rv = readEEPROM(0x6D);
 11238  001062  6A17               	clrf	?_readEEPROM+1,c
 11239  001064  0E6D               	movlw	109
 11240  001066  6E16               	movwf	?_readEEPROM,c
 11241  001068  ECA4  F02D         	call	_readEEPROM	;wreg free
 11242  00106C  D3FE               	goto	L20
 11243  00106E                     l10845:
 11244                           
 11245                           ; BSR set to: 0
 11246                           ;main.c: 2208: writeEEPROM(0x6E, val);
 11247  00106E  6A0F               	clrf	?_writeEEPROM+1,c
 11248  001070  0E6E               	movlw	110
 11249  001072  6E0E               	movwf	?_writeEEPROM,c
 11250  001074  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11251  001078  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11252                           
 11253                           ;main.c: 2209: rv = readEEPROM(0x6E);
 11254  00107C  6A17               	clrf	?_readEEPROM+1,c
 11255  00107E  0E6E               	movlw	110
 11256  001080  6E16               	movwf	?_readEEPROM,c
 11257  001082  ECA4  F02D         	call	_readEEPROM	;wreg free
 11258  001086  D3F1               	goto	L20
 11259  001088                     l10847:
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;main.c: 2214: writeEEPROM(0x6F, val);
 11263  001088  6A0F               	clrf	?_writeEEPROM+1,c
 11264  00108A  0E6F               	movlw	111
 11265  00108C  6E0E               	movwf	?_writeEEPROM,c
 11266  00108E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11267  001092  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11268                           
 11269                           ;main.c: 2215: rv = readEEPROM(0x6F);
 11270  001096  6A17               	clrf	?_readEEPROM+1,c
 11271  001098  0E6F               	movlw	111
 11272  00109A  6E16               	movwf	?_readEEPROM,c
 11273  00109C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11274  0010A0  D3E4               	goto	L20
 11275  0010A2                     l10849:
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;main.c: 2220: writeEEPROM(0x70, val);
 11279  0010A2  6A0F               	clrf	?_writeEEPROM+1,c
 11280  0010A4  0E70               	movlw	112
 11281  0010A6  6E0E               	movwf	?_writeEEPROM,c
 11282  0010A8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11283  0010AC  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11284                           
 11285                           ;main.c: 2221: rv = readEEPROM(0x70);
 11286  0010B0  6A17               	clrf	?_readEEPROM+1,c
 11287  0010B2  0E70               	movlw	112
 11288  0010B4  6E16               	movwf	?_readEEPROM,c
 11289  0010B6  ECA4  F02D         	call	_readEEPROM	;wreg free
 11290  0010BA  D3D7               	goto	L20
 11291  0010BC                     l10851:
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;main.c: 2226: writeEEPROM(0x71, val);
 11295  0010BC  6A0F               	clrf	?_writeEEPROM+1,c
 11296  0010BE  0E71               	movlw	113
 11297  0010C0  6E0E               	movwf	?_writeEEPROM,c
 11298  0010C2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11299  0010C6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11300                           
 11301                           ;main.c: 2227: rv = readEEPROM(0x71);
 11302  0010CA  6A17               	clrf	?_readEEPROM+1,c
 11303  0010CC  0E71               	movlw	113
 11304  0010CE  6E16               	movwf	?_readEEPROM,c
 11305  0010D0  ECA4  F02D         	call	_readEEPROM	;wreg free
 11306  0010D4  D3CA               	goto	L20
 11307  0010D6                     l10853:
 11308                           
 11309                           ; BSR set to: 0
 11310                           ;main.c: 2232: writeEEPROM(0x72, val);
 11311  0010D6  6A0F               	clrf	?_writeEEPROM+1,c
 11312  0010D8  0E72               	movlw	114
 11313  0010DA  6E0E               	movwf	?_writeEEPROM,c
 11314  0010DC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11315  0010E0  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11316                           
 11317                           ;main.c: 2233: rv = readEEPROM(0x72);
 11318  0010E4  6A17               	clrf	?_readEEPROM+1,c
 11319  0010E6  0E72               	movlw	114
 11320  0010E8  6E16               	movwf	?_readEEPROM,c
 11321  0010EA  ECA4  F02D         	call	_readEEPROM	;wreg free
 11322  0010EE  D3BD               	goto	L20
 11323  0010F0                     l10855:
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;main.c: 2242: writeEEPROM(0x73, val);
 11327  0010F0  6A0F               	clrf	?_writeEEPROM+1,c
 11328  0010F2  0E73               	movlw	115
 11329  0010F4  6E0E               	movwf	?_writeEEPROM,c
 11330  0010F6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11331  0010FA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11332                           
 11333                           ;main.c: 2243: rv = readEEPROM(0x73);
 11334  0010FE  6A17               	clrf	?_readEEPROM+1,c
 11335  001100  0E73               	movlw	115
 11336  001102  6E16               	movwf	?_readEEPROM,c
 11337  001104  ECA4  F02D         	call	_readEEPROM	;wreg free
 11338  001108  D3B0               	goto	L20
 11339  00110A                     l10857:
 11340                           
 11341                           ; BSR set to: 0
 11342                           ;main.c: 2248: writeEEPROM(0x74, val);
 11343  00110A  6A0F               	clrf	?_writeEEPROM+1,c
 11344  00110C  0E74               	movlw	116
 11345  00110E  6E0E               	movwf	?_writeEEPROM,c
 11346  001110  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11347  001114  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11348                           
 11349                           ;main.c: 2249: rv = readEEPROM(0x74);
 11350  001118  6A17               	clrf	?_readEEPROM+1,c
 11351  00111A  0E74               	movlw	116
 11352  00111C  6E16               	movwf	?_readEEPROM,c
 11353  00111E  ECA4  F02D         	call	_readEEPROM	;wreg free
 11354  001122  D3A3               	goto	L20
 11355  001124                     l10859:
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;main.c: 2254: writeEEPROM(0x75, val);
 11359  001124  6A0F               	clrf	?_writeEEPROM+1,c
 11360  001126  0E75               	movlw	117
 11361  001128  6E0E               	movwf	?_writeEEPROM,c
 11362  00112A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11363  00112E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11364                           
 11365                           ;main.c: 2255: rv = readEEPROM(0x75);
 11366  001132  6A17               	clrf	?_readEEPROM+1,c
 11367  001134  0E75               	movlw	117
 11368  001136  6E16               	movwf	?_readEEPROM,c
 11369  001138  ECA4  F02D         	call	_readEEPROM	;wreg free
 11370  00113C  D396               	goto	L20
 11371  00113E                     l10861:
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;main.c: 2260: writeEEPROM(0x76, val);
 11375  00113E  6A0F               	clrf	?_writeEEPROM+1,c
 11376  001140  0E76               	movlw	118
 11377  001142  6E0E               	movwf	?_writeEEPROM,c
 11378  001144  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11379  001148  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11380                           
 11381                           ;main.c: 2261: rv = readEEPROM(0x76);
 11382  00114C  6A17               	clrf	?_readEEPROM+1,c
 11383  00114E  0E76               	movlw	118
 11384  001150  6E16               	movwf	?_readEEPROM,c
 11385  001152  ECA4  F02D         	call	_readEEPROM	;wreg free
 11386  001156  D389               	goto	L20
 11387  001158                     l10863:
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;main.c: 2266: writeEEPROM(0x77, val);
 11391  001158  6A0F               	clrf	?_writeEEPROM+1,c
 11392  00115A  0E77               	movlw	119
 11393  00115C  6E0E               	movwf	?_writeEEPROM,c
 11394  00115E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11395  001162  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11396                           
 11397                           ;main.c: 2267: rv = readEEPROM(0x77);
 11398  001166  6A17               	clrf	?_readEEPROM+1,c
 11399  001168  0E77               	movlw	119
 11400  00116A  6E16               	movwf	?_readEEPROM,c
 11401  00116C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11402  001170  D37C               	goto	L20
 11403  001172                     l10865:
 11404                           
 11405                           ; BSR set to: 0
 11406                           ;main.c: 2272: writeEEPROM(0x78, val);
 11407  001172  6A0F               	clrf	?_writeEEPROM+1,c
 11408  001174  0E78               	movlw	120
 11409  001176  6E0E               	movwf	?_writeEEPROM,c
 11410  001178  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11411  00117C  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11412                           
 11413                           ;main.c: 2273: rv = readEEPROM(0x78);
 11414  001180  6A17               	clrf	?_readEEPROM+1,c
 11415  001182  0E78               	movlw	120
 11416  001184  6E16               	movwf	?_readEEPROM,c
 11417  001186  ECA4  F02D         	call	_readEEPROM	;wreg free
 11418  00118A  D36F               	goto	L20
 11419  00118C                     l10867:
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;main.c: 2278: writeEEPROM(0x79, val);
 11423  00118C  6A0F               	clrf	?_writeEEPROM+1,c
 11424  00118E  0E79               	movlw	121
 11425  001190  6E0E               	movwf	?_writeEEPROM,c
 11426  001192  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11427  001196  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11428                           
 11429                           ;main.c: 2279: rv = readEEPROM(0x79);
 11430  00119A  6A17               	clrf	?_readEEPROM+1,c
 11431  00119C  0E79               	movlw	121
 11432  00119E  6E16               	movwf	?_readEEPROM,c
 11433  0011A0  ECA4  F02D         	call	_readEEPROM	;wreg free
 11434  0011A4  D362               	goto	L20
 11435  0011A6                     l10869:
 11436                           
 11437                           ; BSR set to: 0
 11438                           ;main.c: 2284: writeEEPROM(0x7A, val);
 11439  0011A6  6A0F               	clrf	?_writeEEPROM+1,c
 11440  0011A8  0E7A               	movlw	122
 11441  0011AA  6E0E               	movwf	?_writeEEPROM,c
 11442  0011AC  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11443  0011B0  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11444                           
 11445                           ;main.c: 2285: rv = readEEPROM(0x7A);
 11446  0011B4  6A17               	clrf	?_readEEPROM+1,c
 11447  0011B6  0E7A               	movlw	122
 11448  0011B8  6E16               	movwf	?_readEEPROM,c
 11449  0011BA  ECA4  F02D         	call	_readEEPROM	;wreg free
 11450  0011BE  D355               	goto	L20
 11451  0011C0                     l10871:
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;main.c: 2290: writeEEPROM(0x7B, val);
 11455  0011C0  6A0F               	clrf	?_writeEEPROM+1,c
 11456  0011C2  0E7B               	movlw	123
 11457  0011C4  6E0E               	movwf	?_writeEEPROM,c
 11458  0011C6  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11459  0011CA  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11460                           
 11461                           ;main.c: 2291: rv = readEEPROM(0x7B);
 11462  0011CE  6A17               	clrf	?_readEEPROM+1,c
 11463  0011D0  0E7B               	movlw	123
 11464  0011D2  6E16               	movwf	?_readEEPROM,c
 11465  0011D4  ECA4  F02D         	call	_readEEPROM	;wreg free
 11466  0011D8  D348               	goto	L20
 11467  0011DA                     l10873:
 11468                           
 11469                           ; BSR set to: 0
 11470                           ;main.c: 2296: writeEEPROM(0x7C, val);
 11471  0011DA  6A0F               	clrf	?_writeEEPROM+1,c
 11472  0011DC  0E7C               	movlw	124
 11473  0011DE  6E0E               	movwf	?_writeEEPROM,c
 11474  0011E0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11475  0011E4  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11476                           
 11477                           ;main.c: 2297: rv = readEEPROM(0x7C);
 11478  0011E8  6A17               	clrf	?_readEEPROM+1,c
 11479  0011EA  0E7C               	movlw	124
 11480  0011EC  6E16               	movwf	?_readEEPROM,c
 11481  0011EE  ECA4  F02D         	call	_readEEPROM	;wreg free
 11482  0011F2  D33B               	goto	L20
 11483  0011F4                     l10875:
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;main.c: 2302: writeEEPROM(0x7D, val);
 11487  0011F4  6A0F               	clrf	?_writeEEPROM+1,c
 11488  0011F6  0E7D               	movlw	125
 11489  0011F8  6E0E               	movwf	?_writeEEPROM,c
 11490  0011FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11491  0011FE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11492                           
 11493                           ;main.c: 2303: rv = readEEPROM(0x7D);
 11494  001202  6A17               	clrf	?_readEEPROM+1,c
 11495  001204  0E7D               	movlw	125
 11496  001206  6E16               	movwf	?_readEEPROM,c
 11497  001208  ECA4  F02D         	call	_readEEPROM	;wreg free
 11498  00120C  D32E               	goto	L20
 11499  00120E                     l10877:
 11500                           
 11501                           ; BSR set to: 0
 11502                           ;main.c: 2308: writeEEPROM(0x7E, val);
 11503  00120E  6A0F               	clrf	?_writeEEPROM+1,c
 11504  001210  0E7E               	movlw	126
 11505  001212  6E0E               	movwf	?_writeEEPROM,c
 11506  001214  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11507  001218  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11508                           
 11509                           ;main.c: 2309: rv = readEEPROM(0x7E);
 11510  00121C  6A17               	clrf	?_readEEPROM+1,c
 11511  00121E  0E7E               	movlw	126
 11512  001220  6E16               	movwf	?_readEEPROM,c
 11513  001222  ECA4  F02D         	call	_readEEPROM	;wreg free
 11514  001226  D321               	goto	L20
 11515  001228                     l10879:
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;main.c: 2318: writeEEPROM(0x7F, val );
 11519  001228  6A0F               	clrf	?_writeEEPROM+1,c
 11520  00122A  0E7F               	movlw	127
 11521  00122C  6E0E               	movwf	?_writeEEPROM,c
 11522  00122E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11523  001232  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11524                           
 11525                           ;main.c: 2319: rv = readEEPROM(0x7F);
 11526  001236  6A17               	clrf	?_readEEPROM+1,c
 11527  001238  0E7F               	movlw	127
 11528  00123A  6E16               	movwf	?_readEEPROM,c
 11529  00123C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11530  001240  D314               	goto	L20
 11531  001242                     l10881:
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;main.c: 2324: writeEEPROM(0x80, val );
 11535  001242  6A0F               	clrf	?_writeEEPROM+1,c
 11536  001244  0E80               	movlw	128
 11537  001246  6E0E               	movwf	?_writeEEPROM,c
 11538  001248  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11539  00124C  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11540                           
 11541                           ;main.c: 2325: rv = readEEPROM(0x80);
 11542  001250  6A17               	clrf	?_readEEPROM+1,c
 11543  001252  0E80               	movlw	128
 11544  001254  6E16               	movwf	?_readEEPROM,c
 11545  001256  ECA4  F02D         	call	_readEEPROM	;wreg free
 11546  00125A  D307               	goto	L20
 11547  00125C                     l10883:
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;main.c: 2330: writeEEPROM(0x81, val );
 11551  00125C  6A0F               	clrf	?_writeEEPROM+1,c
 11552  00125E  0E81               	movlw	129
 11553  001260  6E0E               	movwf	?_writeEEPROM,c
 11554  001262  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11555  001266  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11556                           
 11557                           ;main.c: 2331: rv = readEEPROM(0x81);
 11558  00126A  6A17               	clrf	?_readEEPROM+1,c
 11559  00126C  0E81               	movlw	129
 11560  00126E  6E16               	movwf	?_readEEPROM,c
 11561  001270  ECA4  F02D         	call	_readEEPROM	;wreg free
 11562  001274  D2FA               	goto	L20
 11563  001276                     l10885:
 11564                           
 11565                           ; BSR set to: 0
 11566                           ;main.c: 2336: writeEEPROM(0x82, val );
 11567  001276  6A0F               	clrf	?_writeEEPROM+1,c
 11568  001278  0E82               	movlw	130
 11569  00127A  6E0E               	movwf	?_writeEEPROM,c
 11570  00127C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11571  001280  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11572                           
 11573                           ;main.c: 2337: rv = readEEPROM(0x82);
 11574  001284  6A17               	clrf	?_readEEPROM+1,c
 11575  001286  0E82               	movlw	130
 11576  001288  6E16               	movwf	?_readEEPROM,c
 11577  00128A  ECA4  F02D         	call	_readEEPROM	;wreg free
 11578  00128E  D2ED               	goto	L20
 11579  001290                     l10887:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;main.c: 2342: writeEEPROM(0x83, val );
 11583  001290  6A0F               	clrf	?_writeEEPROM+1,c
 11584  001292  0E83               	movlw	131
 11585  001294  6E0E               	movwf	?_writeEEPROM,c
 11586  001296  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11587  00129A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11588                           
 11589                           ;main.c: 2343: rv = readEEPROM(0x83);
 11590  00129E  6A17               	clrf	?_readEEPROM+1,c
 11591  0012A0  0E83               	movlw	131
 11592  0012A2  6E16               	movwf	?_readEEPROM,c
 11593  0012A4  ECA4  F02D         	call	_readEEPROM	;wreg free
 11594  0012A8  D2E0               	goto	L20
 11595  0012AA                     l10889:
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;main.c: 2348: writeEEPROM(0x84, val );
 11599  0012AA  6A0F               	clrf	?_writeEEPROM+1,c
 11600  0012AC  0E84               	movlw	132
 11601  0012AE  6E0E               	movwf	?_writeEEPROM,c
 11602  0012B0  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11603  0012B4  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11604                           
 11605                           ;main.c: 2349: rv = readEEPROM(0x84);
 11606  0012B8  6A17               	clrf	?_readEEPROM+1,c
 11607  0012BA  0E84               	movlw	132
 11608  0012BC  6E16               	movwf	?_readEEPROM,c
 11609  0012BE  ECA4  F02D         	call	_readEEPROM	;wreg free
 11610  0012C2  D2D3               	goto	L20
 11611  0012C4                     l10891:
 11612                           
 11613                           ; BSR set to: 0
 11614                           ;main.c: 2354: writeEEPROM(0x85, val );
 11615  0012C4  6A0F               	clrf	?_writeEEPROM+1,c
 11616  0012C6  0E85               	movlw	133
 11617  0012C8  6E0E               	movwf	?_writeEEPROM,c
 11618  0012CA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11619  0012CE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11620                           
 11621                           ;main.c: 2355: rv = readEEPROM(0x85);
 11622  0012D2  6A17               	clrf	?_readEEPROM+1,c
 11623  0012D4  0E85               	movlw	133
 11624  0012D6  6E16               	movwf	?_readEEPROM,c
 11625  0012D8  ECA4  F02D         	call	_readEEPROM	;wreg free
 11626  0012DC  D2C6               	goto	L20
 11627  0012DE                     l10893:
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;main.c: 2360: writeEEPROM(0x86, val );
 11631  0012DE  6A0F               	clrf	?_writeEEPROM+1,c
 11632  0012E0  0E86               	movlw	134
 11633  0012E2  6E0E               	movwf	?_writeEEPROM,c
 11634  0012E4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11635  0012E8  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11636                           
 11637                           ;main.c: 2361: rv = readEEPROM(0x86);
 11638  0012EC  6A17               	clrf	?_readEEPROM+1,c
 11639  0012EE  0E86               	movlw	134
 11640  0012F0  6E16               	movwf	?_readEEPROM,c
 11641  0012F2  ECA4  F02D         	call	_readEEPROM	;wreg free
 11642  0012F6  D2B9               	goto	L20
 11643  0012F8                     l10895:
 11644                           
 11645                           ; BSR set to: 0
 11646                           ;main.c: 2366: writeEEPROM(0x87, val );
 11647  0012F8  6A0F               	clrf	?_writeEEPROM+1,c
 11648  0012FA  0E87               	movlw	135
 11649  0012FC  6E0E               	movwf	?_writeEEPROM,c
 11650  0012FE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11651  001302  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11652                           
 11653                           ;main.c: 2367: rv = readEEPROM(0x87);
 11654  001306  6A17               	clrf	?_readEEPROM+1,c
 11655  001308  0E87               	movlw	135
 11656  00130A  6E16               	movwf	?_readEEPROM,c
 11657  00130C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11658  001310  D2AC               	goto	L20
 11659  001312                     l10897:
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;main.c: 2372: writeEEPROM(0x88, val );
 11663  001312  6A0F               	clrf	?_writeEEPROM+1,c
 11664  001314  0E88               	movlw	136
 11665  001316  6E0E               	movwf	?_writeEEPROM,c
 11666  001318  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11667  00131C  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11668                           
 11669                           ;main.c: 2373: rv = readEEPROM(0x88);
 11670  001320  6A17               	clrf	?_readEEPROM+1,c
 11671  001322  0E88               	movlw	136
 11672  001324  6E16               	movwf	?_readEEPROM,c
 11673  001326  ECA4  F02D         	call	_readEEPROM	;wreg free
 11674  00132A  D29F               	goto	L20
 11675  00132C                     l10899:
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;main.c: 2378: writeEEPROM(0x89, val );
 11679  00132C  6A0F               	clrf	?_writeEEPROM+1,c
 11680  00132E  0E89               	movlw	137
 11681  001330  6E0E               	movwf	?_writeEEPROM,c
 11682  001332  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11683  001336  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11684                           
 11685                           ;main.c: 2379: rv = readEEPROM(0x89);
 11686  00133A  6A17               	clrf	?_readEEPROM+1,c
 11687  00133C  0E89               	movlw	137
 11688  00133E  6E16               	movwf	?_readEEPROM,c
 11689  001340  ECA4  F02D         	call	_readEEPROM	;wreg free
 11690  001344  D292               	goto	L20
 11691  001346                     l10901:
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;main.c: 2384: writeEEPROM(0x8A, val );
 11695  001346  6A0F               	clrf	?_writeEEPROM+1,c
 11696  001348  0E8A               	movlw	138
 11697  00134A  6E0E               	movwf	?_writeEEPROM,c
 11698  00134C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11699  001350  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11700                           
 11701                           ;main.c: 2385: rv = readEEPROM(0x8A);
 11702  001354  6A17               	clrf	?_readEEPROM+1,c
 11703  001356  0E8A               	movlw	138
 11704  001358  6E16               	movwf	?_readEEPROM,c
 11705  00135A  ECA4  F02D         	call	_readEEPROM	;wreg free
 11706  00135E  D285               	goto	L20
 11707  001360                     l10903:
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;main.c: 2394: writeEEPROM(0x8B, val );
 11711  001360  6A0F               	clrf	?_writeEEPROM+1,c
 11712  001362  0E8B               	movlw	139
 11713  001364  6E0E               	movwf	?_writeEEPROM,c
 11714  001366  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11715  00136A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11716                           
 11717                           ;main.c: 2395: rv = readEEPROM(0x8B);
 11718  00136E  6A17               	clrf	?_readEEPROM+1,c
 11719  001370  0E8B               	movlw	139
 11720  001372  6E16               	movwf	?_readEEPROM,c
 11721  001374  ECA4  F02D         	call	_readEEPROM	;wreg free
 11722  001378  D278               	goto	L20
 11723  00137A                     l10905:
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;main.c: 2400: writeEEPROM(0x8C, val );
 11727  00137A  6A0F               	clrf	?_writeEEPROM+1,c
 11728  00137C  0E8C               	movlw	140
 11729  00137E  6E0E               	movwf	?_writeEEPROM,c
 11730  001380  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11731  001384  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11732                           
 11733                           ;main.c: 2401: rv = readEEPROM(0x8C);
 11734  001388  6A17               	clrf	?_readEEPROM+1,c
 11735  00138A  0E8C               	movlw	140
 11736  00138C  6E16               	movwf	?_readEEPROM,c
 11737  00138E  ECA4  F02D         	call	_readEEPROM	;wreg free
 11738  001392  D26B               	goto	L20
 11739  001394                     l10907:
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;main.c: 2406: writeEEPROM(0x8D, val );
 11743  001394  6A0F               	clrf	?_writeEEPROM+1,c
 11744  001396  0E8D               	movlw	141
 11745  001398  6E0E               	movwf	?_writeEEPROM,c
 11746  00139A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11747  00139E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11748                           
 11749                           ;main.c: 2407: rv = readEEPROM(0x8D);
 11750  0013A2  6A17               	clrf	?_readEEPROM+1,c
 11751  0013A4  0E8D               	movlw	141
 11752  0013A6  6E16               	movwf	?_readEEPROM,c
 11753  0013A8  ECA4  F02D         	call	_readEEPROM	;wreg free
 11754  0013AC  D25E               	goto	L20
 11755  0013AE                     l10909:
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;main.c: 2412: writeEEPROM(0x8E, val );
 11759  0013AE  6A0F               	clrf	?_writeEEPROM+1,c
 11760  0013B0  0E8E               	movlw	142
 11761  0013B2  6E0E               	movwf	?_writeEEPROM,c
 11762  0013B4  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11763  0013B8  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11764                           
 11765                           ;main.c: 2413: rv = readEEPROM(0x8E);
 11766  0013BC  6A17               	clrf	?_readEEPROM+1,c
 11767  0013BE  0E8E               	movlw	142
 11768  0013C0  6E16               	movwf	?_readEEPROM,c
 11769  0013C2  ECA4  F02D         	call	_readEEPROM	;wreg free
 11770  0013C6  D251               	goto	L20
 11771  0013C8                     l10911:
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;main.c: 2418: writeEEPROM(0x8F, val );
 11775  0013C8  6A0F               	clrf	?_writeEEPROM+1,c
 11776  0013CA  0E8F               	movlw	143
 11777  0013CC  6E0E               	movwf	?_writeEEPROM,c
 11778  0013CE  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11779  0013D2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11780                           
 11781                           ;main.c: 2419: rv = readEEPROM(0x8F);
 11782  0013D6  6A17               	clrf	?_readEEPROM+1,c
 11783  0013D8  0E8F               	movlw	143
 11784  0013DA  6E16               	movwf	?_readEEPROM,c
 11785  0013DC  ECA4  F02D         	call	_readEEPROM	;wreg free
 11786  0013E0  D244               	goto	L20
 11787  0013E2                     l10913:
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;main.c: 2424: writeEEPROM(0x90, val );
 11791  0013E2  6A0F               	clrf	?_writeEEPROM+1,c
 11792  0013E4  0E90               	movlw	144
 11793  0013E6  6E0E               	movwf	?_writeEEPROM,c
 11794  0013E8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11795  0013EC  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11796                           
 11797                           ;main.c: 2425: rv = readEEPROM(0x90);
 11798  0013F0  6A17               	clrf	?_readEEPROM+1,c
 11799  0013F2  0E90               	movlw	144
 11800  0013F4  6E16               	movwf	?_readEEPROM,c
 11801  0013F6  ECA4  F02D         	call	_readEEPROM	;wreg free
 11802  0013FA  D237               	goto	L20
 11803  0013FC                     l10915:
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;main.c: 2430: writeEEPROM(0x91, val );
 11807  0013FC  6A0F               	clrf	?_writeEEPROM+1,c
 11808  0013FE  0E91               	movlw	145
 11809  001400  6E0E               	movwf	?_writeEEPROM,c
 11810  001402  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11811  001406  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11812                           
 11813                           ;main.c: 2431: rv = readEEPROM(0x91);
 11814  00140A  6A17               	clrf	?_readEEPROM+1,c
 11815  00140C  0E91               	movlw	145
 11816  00140E  6E16               	movwf	?_readEEPROM,c
 11817  001410  ECA4  F02D         	call	_readEEPROM	;wreg free
 11818  001414  D22A               	goto	L20
 11819  001416                     l10917:
 11820                           
 11821                           ; BSR set to: 0
 11822                           ;main.c: 2436: writeEEPROM(0x92, val );
 11823  001416  6A0F               	clrf	?_writeEEPROM+1,c
 11824  001418  0E92               	movlw	146
 11825  00141A  6E0E               	movwf	?_writeEEPROM,c
 11826  00141C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11827  001420  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11828                           
 11829                           ;main.c: 2437: rv = readEEPROM(0x92);
 11830  001424  6A17               	clrf	?_readEEPROM+1,c
 11831  001426  0E92               	movlw	146
 11832  001428  6E16               	movwf	?_readEEPROM,c
 11833  00142A  ECA4  F02D         	call	_readEEPROM	;wreg free
 11834  00142E  D21D               	goto	L20
 11835  001430                     l10919:
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;main.c: 2442: writeEEPROM(0x93, val );
 11839  001430  6A0F               	clrf	?_writeEEPROM+1,c
 11840  001432  0E93               	movlw	147
 11841  001434  6E0E               	movwf	?_writeEEPROM,c
 11842  001436  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11843  00143A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11844                           
 11845                           ;main.c: 2443: rv = readEEPROM(0x93);
 11846  00143E  6A17               	clrf	?_readEEPROM+1,c
 11847  001440  0E93               	movlw	147
 11848  001442  6E16               	movwf	?_readEEPROM,c
 11849  001444  ECA4  F02D         	call	_readEEPROM	;wreg free
 11850  001448  D210               	goto	L20
 11851  00144A                     l10921:
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;main.c: 2448: writeEEPROM(0x94, val );
 11855  00144A  6A0F               	clrf	?_writeEEPROM+1,c
 11856  00144C  0E94               	movlw	148
 11857  00144E  6E0E               	movwf	?_writeEEPROM,c
 11858  001450  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11859  001454  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11860                           
 11861                           ;main.c: 2449: rv = readEEPROM(0x94);
 11862  001458  6A17               	clrf	?_readEEPROM+1,c
 11863  00145A  0E94               	movlw	148
 11864  00145C  6E16               	movwf	?_readEEPROM,c
 11865  00145E  ECA4  F02D         	call	_readEEPROM	;wreg free
 11866  001462  D203               	goto	L20
 11867  001464                     l10923:
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;main.c: 2454: writeEEPROM(0x95, val );
 11871  001464  6A0F               	clrf	?_writeEEPROM+1,c
 11872  001466  0E95               	movlw	149
 11873  001468  6E0E               	movwf	?_writeEEPROM,c
 11874  00146A  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11875  00146E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11876                           
 11877                           ;main.c: 2455: rv = readEEPROM(0x95);
 11878  001472  6A17               	clrf	?_readEEPROM+1,c
 11879  001474  0E95               	movlw	149
 11880  001476  6E16               	movwf	?_readEEPROM,c
 11881  001478  ECA4  F02D         	call	_readEEPROM	;wreg free
 11882  00147C  D1F6               	goto	L20
 11883  00147E                     l10925:
 11884                           
 11885                           ; BSR set to: 0
 11886                           ;main.c: 2460: writeEEPROM(0x96, val );
 11887  00147E  6A0F               	clrf	?_writeEEPROM+1,c
 11888  001480  0E96               	movlw	150
 11889  001482  6E0E               	movwf	?_writeEEPROM,c
 11890  001484  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11891  001488  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11892                           
 11893                           ;main.c: 2461: rv = readEEPROM(0x96);
 11894  00148C  6A17               	clrf	?_readEEPROM+1,c
 11895  00148E  0E96               	movlw	150
 11896  001490  6E16               	movwf	?_readEEPROM,c
 11897  001492  ECA4  F02D         	call	_readEEPROM	;wreg free
 11898  001496  D1E9               	goto	L20
 11899  001498                     l10927:
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;main.c: 2470: writeEEPROM(0x97, val);
 11903  001498  6A0F               	clrf	?_writeEEPROM+1,c
 11904  00149A  0E97               	movlw	151
 11905  00149C  6E0E               	movwf	?_writeEEPROM,c
 11906  00149E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11907  0014A2  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11908                           
 11909                           ;main.c: 2471: rv = readEEPROM(0x97);
 11910  0014A6  6A17               	clrf	?_readEEPROM+1,c
 11911  0014A8  0E97               	movlw	151
 11912  0014AA  6E16               	movwf	?_readEEPROM,c
 11913  0014AC  ECA4  F02D         	call	_readEEPROM	;wreg free
 11914  0014B0  D1DC               	goto	L20
 11915  0014B2                     l10929:
 11916                           
 11917                           ; BSR set to: 0
 11918                           ;main.c: 2476: writeEEPROM(0x98, val);
 11919  0014B2  6A0F               	clrf	?_writeEEPROM+1,c
 11920  0014B4  0E98               	movlw	152
 11921  0014B6  6E0E               	movwf	?_writeEEPROM,c
 11922  0014B8  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11923  0014BC  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11924                           
 11925                           ;main.c: 2477: rv = readEEPROM(0x98);
 11926  0014C0  6A17               	clrf	?_readEEPROM+1,c
 11927  0014C2  0E98               	movlw	152
 11928  0014C4  6E16               	movwf	?_readEEPROM,c
 11929  0014C6  ECA4  F02D         	call	_readEEPROM	;wreg free
 11930  0014CA  D1CF               	goto	L20
 11931  0014CC                     l10931:
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;main.c: 2482: writeEEPROM(0x99, val);
 11935  0014CC  6A0F               	clrf	?_writeEEPROM+1,c
 11936  0014CE  0E99               	movlw	153
 11937  0014D0  6E0E               	movwf	?_writeEEPROM,c
 11938  0014D2  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11939  0014D6  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11940  0014DA  6A17               	clrf	?_readEEPROM+1,c
 11941  0014DC  0E99               	movlw	153
 11942  0014DE  6E16               	movwf	?_readEEPROM,c
 11943  0014E0  ECA4  F02D         	call	_readEEPROM	;wreg free
 11944  0014E4                     l518:
 11945                           
 11946                           ;main.c: 2487: writeEEPROM(0x9A, val);
 11947  0014E4  6A0F               	clrf	?_writeEEPROM+1,c
 11948  0014E6  0E9A               	movlw	154
 11949  0014E8  6E0E               	movwf	?_writeEEPROM,c
 11950  0014EA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11951  0014EE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11952                           
 11953                           ;main.c: 2488: rv = readEEPROM(0x9A);
 11954  0014F2  6A17               	clrf	?_readEEPROM+1,c
 11955  0014F4  0E9A               	movlw	154
 11956  0014F6  6E16               	movwf	?_readEEPROM,c
 11957  0014F8  ECA4  F02D         	call	_readEEPROM	;wreg free
 11958  0014FC  D1B6               	goto	L20
 11959  0014FE                     l10933:
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;main.c: 2493: writeEEPROM(0x9B, val);
 11963  0014FE  6A0F               	clrf	?_writeEEPROM+1,c
 11964  001500  0E9B               	movlw	155
 11965  001502  6E0E               	movwf	?_writeEEPROM,c
 11966  001504  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11967  001508  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11968                           
 11969                           ;main.c: 2494: rv = readEEPROM(0x9B);
 11970  00150C  6A17               	clrf	?_readEEPROM+1,c
 11971  00150E  0E9B               	movlw	155
 11972  001510  6E16               	movwf	?_readEEPROM,c
 11973  001512  ECA4  F02D         	call	_readEEPROM	;wreg free
 11974  001516  D1A9               	goto	L20
 11975  001518                     l10935:
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;main.c: 2499: writeEEPROM(0x9C, val);
 11979  001518  6A0F               	clrf	?_writeEEPROM+1,c
 11980  00151A  0E9C               	movlw	156
 11981  00151C  6E0E               	movwf	?_writeEEPROM,c
 11982  00151E  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 11983  001522  ECA4  F02C         	call	_writeEEPROM	;wreg free
 11984                           
 11985                           ;main.c: 2500: rv = readEEPROM(0x9C);
 11986  001526  6A17               	clrf	?_readEEPROM+1,c
 11987  001528  0E9C               	movlw	156
 11988  00152A  6E16               	movwf	?_readEEPROM,c
 11989  00152C  ECA4  F02D         	call	_readEEPROM	;wreg free
 11990  001530  D19C               	goto	L20
 11991  001532                     l521:
 11992                           
 11993                           ; BSR set to: 0
 11994                           ;main.c: 2505: rv = 0;
 11995  001532  6A26               	clrf	vscp_writeAppReg@rv,c
 11996                           
 11997                           ;main.c: 2506: break;
 11998  001534  D19B               	goto	l10971
 11999  001536                     l10937:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;main.c: 2515: writeEEPROM(0xF2, val);
 12003  001536  6A0F               	clrf	?_writeEEPROM+1,c
 12004  001538  0EF2               	movlw	242
 12005  00153A  6E0E               	movwf	?_writeEEPROM,c
 12006  00153C  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12007  001540  ECA4  F02C         	call	_writeEEPROM	;wreg free
 12008                           
 12009                           ;main.c: 2516: rv = readEEPROM(0xF2);
 12010  001544  6A17               	clrf	?_readEEPROM+1,c
 12011  001546  0EF2               	movlw	242
 12012  001548  6E16               	movwf	?_readEEPROM,c
 12013  00154A  ECA4  F02D         	call	_readEEPROM	;wreg free
 12014  00154E  D18D               	goto	L20
 12015  001550                     l10939:
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;main.c: 2521: writeEEPROM(0xF3, val);
 12019  001550  6A0F               	clrf	?_writeEEPROM+1,c
 12020  001552  0EF3               	movlw	243
 12021  001554  6E0E               	movwf	?_writeEEPROM,c
 12022  001556  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12023  00155A  ECA4  F02C         	call	_writeEEPROM	;wreg free
 12024                           
 12025                           ;main.c: 2522: rv = readEEPROM(0xF3);
 12026  00155E  6A17               	clrf	?_readEEPROM+1,c
 12027  001560  0EF3               	movlw	243
 12028  001562  6E16               	movwf	?_readEEPROM,c
 12029  001564  ECA4  F02D         	call	_readEEPROM	;wreg free
 12030  001568  D180               	goto	L20
 12031  00156A                     l10941:
 12032                           
 12033                           ; BSR set to: 0
 12034                           ;main.c: 2526: rv = ~val;
 12035  00156A  1C23               	comf	vscp_writeAppReg@val,w,c
 12036  00156C  D17E               	goto	L20
 12037  00156E                     l10945:
 12038                           
 12039                           ; BSR set to: 0
 12040  00156E  5025               	movf	vscp_writeAppReg@reg,w,c
 12041                           
 12042                           ; Switch size 1, requested type "speed"
 12043                           ; Number of cases is 96, Range of values is 0 to 119
 12044                           ; switch strategies available:
 12045                           ; Name         Instructions Cycles
 12046                           ; simple_byte          289   145 (average)
 12047                           ;	Chosen strategy is simple_byte
 12048  001570  E102 EFC2  F005    	bz	l10755
 12049  001576  0A01               	xorlw	1	; case 1
 12050  001578  E102 EFD0  F005    	bz	l10757
 12051  00157E  0A03               	xorlw	3	; case 2
 12052  001580  E102 EFDE  F005    	bz	l10759
 12053  001586  0A01               	xorlw	1	; case 3
 12054  001588  E102 EFEC  F005    	bz	l10761
 12055  00158E  0A07               	xorlw	7	; case 4
 12056  001590  E102 EFFA  F005    	bz	l10763
 12057  001596  0A01               	xorlw	1	; case 5
 12058  001598  E102 EF08  F006    	bz	l10765
 12059  00159E  0A03               	xorlw	3	; case 6
 12060  0015A0  E102 EF16  F006    	bz	l10767
 12061  0015A6  0A01               	xorlw	1	; case 7
 12062  0015A8  E102 EF24  F006    	bz	l10769
 12063  0015AE  0A13               	xorlw	19	; case 20
 12064  0015B0  E102 EF32  F006    	bz	l10771
 12065  0015B6  0A01               	xorlw	1	; case 21
 12066  0015B8  E102 EF40  F006    	bz	l10773
 12067  0015BE  0A03               	xorlw	3	; case 22
 12068  0015C0  E102 EF4E  F006    	bz	l10775
 12069  0015C6  0A01               	xorlw	1	; case 23
 12070  0015C8  E102 EF5C  F006    	bz	l10777
 12071  0015CE  0A0F               	xorlw	15	; case 24
 12072  0015D0  E102 EF6A  F006    	bz	l10779
 12073  0015D6  0A01               	xorlw	1	; case 25
 12074  0015D8  E102 EF78  F006    	bz	l10781
 12075  0015DE  0A3F               	xorlw	63	; case 38
 12076  0015E0  E102 EF86  F006    	bz	l10783
 12077  0015E6  0A01               	xorlw	1	; case 39
 12078  0015E8  E102 EF94  F006    	bz	l10785
 12079  0015EE  0A0F               	xorlw	15	; case 40
 12080  0015F0  E102 EFA2  F006    	bz	l10787
 12081  0015F6  0A01               	xorlw	1	; case 41
 12082  0015F8  E102 EFB0  F006    	bz	l10789
 12083  0015FE  0A03               	xorlw	3	; case 42
 12084  001600  E102 EFBE  F006    	bz	l10791
 12085  001606  0A01               	xorlw	1	; case 43
 12086  001608  E102 EFCC  F006    	bz	l10793
 12087  00160E  0A07               	xorlw	7	; case 44
 12088  001610  E102 EFDA  F006    	bz	l10795
 12089  001616  0A01               	xorlw	1	; case 45
 12090  001618  E102 EFE8  F006    	bz	l10797
 12091  00161E  0A03               	xorlw	3	; case 46
 12092  001620  E102 EFF6  F006    	bz	l10799
 12093  001626  0A01               	xorlw	1	; case 47
 12094  001628  E102 EF04  F007    	bz	l10801
 12095  00162E  0A1F               	xorlw	31	; case 48
 12096  001630  E102 EF12  F007    	bz	l10803
 12097  001636  0A01               	xorlw	1	; case 49
 12098  001638  E101 D402          	bz	l10805
 12099  00163C  0A03               	xorlw	3	; case 50
 12100  00163E  E101 D40D          	bz	l10807
 12101  001642  0A01               	xorlw	1	; case 51
 12102  001644  E101 D418          	bz	l10809
 12103  001648  0A07               	xorlw	7	; case 52
 12104  00164A  E101 D423          	bz	l10811
 12105  00164E  0A01               	xorlw	1	; case 53
 12106  001650  E101 D42E          	bz	l10813
 12107  001654  0A03               	xorlw	3	; case 54
 12108  001656  E101 D439          	bz	l10815
 12109  00165A  0A01               	xorlw	1	; case 55
 12110  00165C  E101 D444          	bz	l10817
 12111  001660  0A0F               	xorlw	15	; case 56
 12112  001662  E101 D44F          	bz	l10819
 12113  001666  0A01               	xorlw	1	; case 57
 12114  001668  E101 D45A          	bz	l10821
 12115  00166C  0A03               	xorlw	3	; case 58
 12116  00166E  E101 D465          	bz	l10823
 12117  001672  0A01               	xorlw	1	; case 59
 12118  001674  E101 D470          	bz	l10825
 12119  001678  0A07               	xorlw	7	; case 60
 12120  00167A  E101 D47B          	bz	l10827
 12121  00167E  0A01               	xorlw	1	; case 61
 12122  001680  E101 D486          	bz	l10829
 12123  001684  0A03               	xorlw	3	; case 62
 12124  001686  E101 D491          	bz	l10831
 12125  00168A  0A01               	xorlw	1	; case 63
 12126  00168C  E101 D49C          	bz	l10833
 12127  001690  0A7F               	xorlw	127	; case 64
 12128  001692  E101 D4A7          	bz	l10835
 12129  001696  0A01               	xorlw	1	; case 65
 12130  001698  E101 D4B2          	bz	l10837
 12131  00169C  0A03               	xorlw	3	; case 66
 12132  00169E  E101 D4BD          	bz	l10839
 12133  0016A2  0A01               	xorlw	1	; case 67
 12134  0016A4  E101 D4C8          	bz	l10841
 12135  0016A8  0A07               	xorlw	7	; case 68
 12136  0016AA  E101 D4D3          	bz	l10843
 12137  0016AE  0A01               	xorlw	1	; case 69
 12138  0016B0  E101 D4DD          	bz	l10845
 12139  0016B4  0A03               	xorlw	3	; case 70
 12140  0016B6  E101 D4E7          	bz	l10847
 12141  0016BA  0A01               	xorlw	1	; case 71
 12142  0016BC  E101 D4F1          	bz	l10849
 12143  0016C0  0A0F               	xorlw	15	; case 72
 12144  0016C2  E101 D4FB          	bz	l10851
 12145  0016C6  0A01               	xorlw	1	; case 73
 12146  0016C8  E101 D505          	bz	l10853
 12147  0016CC  0A03               	xorlw	3	; case 74
 12148  0016CE  E101 D50F          	bz	l10855
 12149  0016D2  0A01               	xorlw	1	; case 75
 12150  0016D4  E101 D519          	bz	l10857
 12151  0016D8  0A07               	xorlw	7	; case 76
 12152  0016DA  E101 D523          	bz	l10859
 12153  0016DE  0A01               	xorlw	1	; case 77
 12154  0016E0  E101 D52D          	bz	l10861
 12155  0016E4  0A03               	xorlw	3	; case 78
 12156  0016E6  E101 D537          	bz	l10863
 12157  0016EA  0A01               	xorlw	1	; case 79
 12158  0016EC  E101 D541          	bz	l10865
 12159  0016F0  0A1F               	xorlw	31	; case 80
 12160  0016F2  E101 D54B          	bz	l10867
 12161  0016F6  0A01               	xorlw	1	; case 81
 12162  0016F8  E101 D555          	bz	l10869
 12163  0016FC  0A03               	xorlw	3	; case 82
 12164  0016FE  E101 D55F          	bz	l10871
 12165  001702  0A01               	xorlw	1	; case 83
 12166  001704  E101 D569          	bz	l10873
 12167  001708  0A07               	xorlw	7	; case 84
 12168  00170A  E101 D573          	bz	l10875
 12169  00170E  0A01               	xorlw	1	; case 85
 12170  001710  E101 D57D          	bz	l10877
 12171  001714  0A03               	xorlw	3	; case 86
 12172  001716  E101 D587          	bz	l10879
 12173  00171A  0A01               	xorlw	1	; case 87
 12174  00171C  E101 D591          	bz	l10881
 12175  001720  0A0F               	xorlw	15	; case 88
 12176  001722  E101 D59B          	bz	l10883
 12177  001726  0A01               	xorlw	1	; case 89
 12178  001728  E101 D5A5          	bz	l10885
 12179  00172C  0A03               	xorlw	3	; case 90
 12180  00172E  E101 D5AF          	bz	l10887
 12181  001732  0A01               	xorlw	1	; case 91
 12182  001734  E101 D5B9          	bz	l10889
 12183  001738  0A07               	xorlw	7	; case 92
 12184  00173A  E101 D5C3          	bz	l10891
 12185  00173E  0A01               	xorlw	1	; case 93
 12186  001740  E101 D5CD          	bz	l10893
 12187  001744  0A03               	xorlw	3	; case 94
 12188  001746  E101 D5D7          	bz	l10895
 12189  00174A  0A01               	xorlw	1	; case 95
 12190  00174C  E101 D5E1          	bz	l10897
 12191  001750  0A3F               	xorlw	63	; case 96
 12192  001752  E101 D5EB          	bz	l10899
 12193  001756  0A01               	xorlw	1	; case 97
 12194  001758  E101 D5F5          	bz	l10901
 12195  00175C  0A03               	xorlw	3	; case 98
 12196  00175E  E101 D5FF          	bz	l10903
 12197  001762  0A01               	xorlw	1	; case 99
 12198  001764  E101 D609          	bz	l10905
 12199  001768  0A07               	xorlw	7	; case 100
 12200  00176A  E101 D613          	bz	l10907
 12201  00176E  0A01               	xorlw	1	; case 101
 12202  001770  E101 D61D          	bz	l10909
 12203  001774  0A03               	xorlw	3	; case 102
 12204  001776  E101 D627          	bz	l10911
 12205  00177A  0A01               	xorlw	1	; case 103
 12206  00177C  E101 D631          	bz	l10913
 12207  001780  0A0F               	xorlw	15	; case 104
 12208  001782  E101 D63B          	bz	l10915
 12209  001786  0A01               	xorlw	1	; case 105
 12210  001788  E101 D645          	bz	l10917
 12211  00178C  0A03               	xorlw	3	; case 106
 12212  00178E  E101 D64F          	bz	l10919
 12213  001792  0A01               	xorlw	1	; case 107
 12214  001794  E101 D659          	bz	l10921
 12215  001798  0A07               	xorlw	7	; case 108
 12216  00179A  E101 D663          	bz	l10923
 12217  00179E  0A01               	xorlw	1	; case 109
 12218  0017A0  E101 D66D          	bz	l10925
 12219  0017A4  0A03               	xorlw	3	; case 110
 12220  0017A6  E101 D677          	bz	l10927
 12221  0017AA  0A01               	xorlw	1	; case 111
 12222  0017AC  E101 D681          	bz	l10929
 12223  0017B0  0A1F               	xorlw	31	; case 112
 12224  0017B2  E101 D68B          	bz	l10931
 12225  0017B6  0A01               	xorlw	1	; case 113
 12226  0017B8  E101 D694          	bz	l518
 12227  0017BC  0A03               	xorlw	3	; case 114
 12228  0017BE  E101 D69E          	bz	l10933
 12229  0017C2  0A01               	xorlw	1	; case 115
 12230  0017C4  E101 D6A8          	bz	l10935
 12231  0017C8  0A07               	xorlw	7	; case 116
 12232  0017CA  E101 D6B2          	bz	l521
 12233  0017CE  0A01               	xorlw	1	; case 117
 12234  0017D0  E101 D6AF          	bz	l521
 12235  0017D4  0A03               	xorlw	3	; case 118
 12236  0017D6  E101 D6AE          	bz	l10937
 12237  0017DA  0A01               	xorlw	1	; case 119
 12238  0017DC  E101 D6B8          	bz	l10939
 12239  0017E0  D6C4               	goto	l10941
 12240  0017E2                     l10947:
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;main.c: 2530: else if (1 == vscp_page_select) {
 12244  0017E2  0446               	decf	_vscp_page_select,w,c
 12245  0017E4  1047               	iorwf	_vscp_page_select+1,w,c
 12246  0017E6  E142               	bnz	l10971
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;main.c: 2533: if (reg < 72) {
 12250  0017E8  0E48               	movlw	72
 12251  0017EA  6025               	cpfslt	vscp_writeAppReg@reg,c
 12252  0017EC  D016               	goto	l10955
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;main.c: 2534: writeEEPROM(0xAA + reg, val);
 12256  0017EE  0EAA               	movlw	170
 12257  0017F0  2425               	addwf	vscp_writeAppReg@reg,w,c
 12258  0017F2  6E0E               	movwf	?_writeEEPROM,c
 12259  0017F4  6A0F               	clrf	?_writeEEPROM+1,c
 12260  0017F6  0E00               	movlw	0
 12261  0017F8  220F               	addwfc	?_writeEEPROM+1,f,c
 12262  0017FA  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12263  0017FE  ECA4  F02C         	call	_writeEEPROM	;wreg free
 12264                           
 12265                           ;main.c: 2535: rv = readEEPROM(0xAA + reg );
 12266  001802  0EAA               	movlw	170
 12267  001804  2425               	addwf	vscp_writeAppReg@reg,w,c
 12268  001806  6E16               	movwf	?_readEEPROM,c
 12269  001808  6A17               	clrf	?_readEEPROM+1,c
 12270  00180A  0E00               	movlw	0
 12271  00180C  2217               	addwfc	?_readEEPROM+1,f,c
 12272  00180E  ECA4  F02D         	call	_readEEPROM	;wreg free
 12273  001812  6E26               	movwf	vscp_writeAppReg@rv,c
 12274                           
 12275                           ;main.c: 2536: writeCoeffs2Ram();
 12276  001814  EC05  F027         	call	_writeCoeffs2Ram	;wreg free
 12277                           
 12278                           ;main.c: 2537: }
 12279  001818  D029               	goto	l10971
 12280  00181A                     l10955:
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;main.c: 2539: else if (reg < 84) {
 12284  00181A  0E54               	movlw	84
 12285  00181C  6025               	cpfslt	vscp_writeAppReg@reg,c
 12286  00181E  D010               	goto	l10967
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;main.c: 2541: uint8_t pos = reg - 72;
 12290  001820  5025               	movf	vscp_writeAppReg@reg,w,c
 12291  001822  0FB8               	addlw	184
 12292  001824  6E24               	movwf	vscp_writeAppReg@pos,c
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;main.c: 2542: if ( pos % 2 ) {
 12296  001826  A024               	btfss	vscp_writeAppReg@pos,0,c
 12297  001828  D002               	goto	l10963
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;main.c: 2543: pos--;
 12301  00182A  0624               	decf	vscp_writeAppReg@pos,f,c
 12302                           
 12303                           ;main.c: 2544: }
 12304  00182C  D001               	goto	l10965
 12305  00182E                     l10963:
 12306                           
 12307                           ; BSR set to: 0
 12308                           ;main.c: 2545: else {
 12309                           ;main.c: 2546: pos++;
 12310  00182E  2A24               	incf	vscp_writeAppReg@pos,f,c
 12311  001830                     l10965:
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;main.c: 2547: }
 12315                           ;main.c: 2548: rv = adc[ pos ];
 12316  001830  0E82               	movlw	low _adc
 12317  001832  2424               	addwf	vscp_writeAppReg@pos,w,c
 12318  001834  6ED9               	movwf	fsr2l,c
 12319  001836  6ADA               	clrf	fsr2h,c
 12320  001838  0E01               	movlw	high _adc
 12321  00183A  22DA               	addwfc	fsr2h,f,c
 12322  00183C  50DF               	movf	indf2,w,c
 12323  00183E  D015               	goto	L20
 12324  001840                     l10967:
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;main.c: 2551: else if (reg < 98) {
 12328  001840  0E62               	movlw	98
 12329  001842  6025               	cpfslt	vscp_writeAppReg@reg,c
 12330  001844  D013               	goto	l10971
 12331                           
 12332                           ; BSR set to: 0
 12333                           ;main.c: 2552: writeEEPROM( 0x9E + reg - 84, val );
 12334  001846  0E4A               	movlw	74
 12335  001848  2425               	addwf	vscp_writeAppReg@reg,w,c
 12336  00184A  6E0E               	movwf	?_writeEEPROM,c
 12337  00184C  6A0F               	clrf	?_writeEEPROM+1,c
 12338  00184E  0E00               	movlw	0
 12339  001850  220F               	addwfc	?_writeEEPROM+1,f,c
 12340  001852  C023  F010         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
 12341  001856  ECA4  F02C         	call	_writeEEPROM	;wreg free
 12342                           
 12343                           ;main.c: 2553: rv = readEEPROM( 0x9E + reg - 84 ) ;
 12344  00185A  0E4A               	movlw	74
 12345  00185C  2425               	addwf	vscp_writeAppReg@reg,w,c
 12346  00185E  6E16               	movwf	?_readEEPROM,c
 12347  001860  6A17               	clrf	?_readEEPROM+1,c
 12348  001862  0E00               	movlw	0
 12349  001864  2217               	addwfc	?_readEEPROM+1,f,c
 12350  001866  ECA4  F02D         	call	_readEEPROM	;wreg free
 12351  00186A                     L20:
 12352  00186A  6E26               	movwf	vscp_writeAppReg@rv,c
 12353  00186C                     l10971:
 12354                           
 12355                           ;main.c: 2554: }
 12356                           ;main.c: 2555: }
 12357                           ;main.c: 2557: return rv;
 12358  00186C  5026               	movf	vscp_writeAppReg@rv,w,c
 12359  00186E  0012               	return	
 12360  001870                     __end_of_vscp_writeAppReg:
 12361                           	opt stack 0
 12362                           tblptru	equ	0xFF8
 12363                           tblptrh	equ	0xFF7
 12364                           tblptrl	equ	0xFF6
 12365                           tablat	equ	0xFF5
 12366                           prodh	equ	0xFF4
 12367                           prodl	equ	0xFF3
 12368                           postinc0	equ	0xFEE
 12369                           wreg	equ	0xFE8
 12370                           postdec1	equ	0xFE5
 12371                           fsr1h	equ	0xFE2
 12372                           fsr1l	equ	0xFE1
 12373                           indf2	equ	0xFDF
 12374                           postinc2	equ	0xFDE
 12375                           postdec2	equ	0xFDD
 12376                           fsr2h	equ	0xFDA
 12377                           fsr2l	equ	0xFD9
 12378                           status	equ	0xFD8
 12379                           
 12380 ;; *************** function _writeCoeffs2Ram *****************
 12381 ;; Defined at:
 12382 ;;		line 973 in file "../main.c"
 12383 ;; Parameters:    Size  Location     Type
 12384 ;;		None
 12385 ;; Auto vars:     Size  Location     Type
 12386 ;;  c               3   27[COMRAM] unsigned char [3]
 12387 ;;  j               2   32[COMRAM] int 
 12388 ;;  i               2   30[COMRAM] int 
 12389 ;; Return value:  Size  Location     Type
 12390 ;;		None               void
 12391 ;; Registers used:
 12392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12393 ;; Tracked objects:
 12394 ;;		On entry : 0/0
 12395 ;;		On exit  : F/1
 12396 ;;		Unchanged: 0/0
 12397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12398 ;;      Params:         0       0       0       0       0       0       0
 12399 ;;      Locals:         7       0       0       0       0       0       0
 12400 ;;      Temps:          2       0       0       0       0       0       0
 12401 ;;      Totals:         9       0       0       0       0       0       0
 12402 ;;Total ram usage:        9 bytes
 12403 ;; Hardware stack levels used:    1
 12404 ;; Hardware stack levels required when called:    3
 12405 ;; This function calls:
 12406 ;;		_readEEPROM
 12407 ;;		___wmul
 12408 ;; This function is called by:
 12409 ;;		_vscp_writeAppReg
 12410 ;; This function uses a non-reentrant model
 12411 ;;
 12412                           
 12413                           	psect	text43
 12414  004E0A                     __ptext43:
 12415                           	opt stack 0
 12416  004E0A                     _writeCoeffs2Ram:
 12417                           	opt stack 24
 12418                           
 12419                           ;main.c: 974: int i, j;
 12420                           ;main.c: 975: uint8_t c[3];
 12421                           ;main.c: 977: for (i = 0; i < 6; i++) {
 12422                           
 12423                           ;incstack = 0
 12424                           ;incstack = 0
 12425  004E0A  6A1F               	clrf	writeCoeffs2Ram@i,c
 12426  004E0C  6A20               	clrf	writeCoeffs2Ram@i+1,c
 12427  004E0E                     l10499:
 12428                           
 12429                           ;main.c: 978: for (j = 2; j > 0; j--) {
 12430  004E0E  6A22               	clrf	writeCoeffs2Ram@j+1,c
 12431  004E10  0E02               	movlw	2
 12432  004E12  6E21               	movwf	writeCoeffs2Ram@j,c
 12433  004E14                     l10505:
 12434                           
 12435                           ;main.c: 980: c[2 - j] = readEEPROM(0xAA + i * 3 + j);
 12436  004E14  5021               	movf	writeCoeffs2Ram@j,w,c
 12437  004E16  0802               	sublw	2
 12438  004E18  6E1A               	movwf	??_writeCoeffs2Ram& (0+255),c
 12439  004E1A  501A               	movf	??_writeCoeffs2Ram,w,c
 12440  004E1C  0F1C               	addlw	low writeCoeffs2Ram@c
 12441  004E1E  6ED9               	movwf	fsr2l,c
 12442  004E20  6ADA               	clrf	fsr2h,c
 12443  004E22  C01F  F00E         	movff	writeCoeffs2Ram@i,?___wmul
 12444  004E26  C020  F00F         	movff	writeCoeffs2Ram@i+1,?___wmul+1
 12445  004E2A  6A11               	clrf	?___wmul+3,c
 12446  004E2C  0E03               	movlw	3
 12447  004E2E  6E10               	movwf	?___wmul+2,c
 12448  004E30  ECA7  F02B         	call	___wmul	;wreg free
 12449  004E34  5021               	movf	writeCoeffs2Ram@j,w,c
 12450  004E36  260E               	addwf	?___wmul,f,c
 12451  004E38  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12452  004E3A  220F               	addwfc	?___wmul+1,f,c
 12453  004E3C  0EAA               	movlw	170
 12454  004E3E  240E               	addwf	?___wmul,w,c
 12455  004E40  6E16               	movwf	?_readEEPROM,c
 12456  004E42  0E00               	movlw	0
 12457  004E44  200F               	addwfc	?___wmul+1,w,c
 12458  004E46  6E17               	movwf	?_readEEPROM+1,c
 12459  004E48  ECA4  F02D         	call	_readEEPROM	;wreg free
 12460  004E4C  6EDF               	movwf	indf2,c
 12461  004E4E  0621               	decf	writeCoeffs2Ram@j,f,c
 12462  004E50  A0D8               	btfss	status,0,c
 12463  004E52  0622               	decf	writeCoeffs2Ram@j+1,f,c
 12464  004E54  5022               	movf	writeCoeffs2Ram@j+1,w,c
 12465  004E56  0A80               	xorlw	128
 12466  004E58  0F80               	addlw	-128
 12467  004E5A  0E01               	movlw	1
 12468  004E5C  B4D8               	btfsc	status,2,c
 12469  004E5E  5C21               	subwf	writeCoeffs2Ram@j,w,c
 12470  004E60  E2D9               	bc	l10505
 12471                           
 12472                           ;main.c: 981: }
 12473                           ;main.c: 982: sh_coefficients[i] = *((double*) c);
 12474  004E62  C01F  F01A         	movff	writeCoeffs2Ram@i,??_writeCoeffs2Ram
 12475  004E66  C020  F01B         	movff	writeCoeffs2Ram@i+1,??_writeCoeffs2Ram+1
 12476  004E6A  90D8               	bcf	status,0,c
 12477  004E6C  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12478  004E6E  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12479  004E70  90D8               	bcf	status,0,c
 12480  004E72  361A               	rlcf	??_writeCoeffs2Ram,f,c
 12481  004E74  361B               	rlcf	??_writeCoeffs2Ram+1,f,c
 12482  004E76  0101               	movlb	1	; () banked
 12483  004E78  0E06               	movlw	low _sh_coefficients
 12484  004E7A  241A               	addwf	??_writeCoeffs2Ram,w,c
 12485  004E7C  6ED9               	movwf	fsr2l,c
 12486  004E7E  0E01               	movlw	high _sh_coefficients
 12487  004E80  201B               	addwfc	??_writeCoeffs2Ram+1,w,c
 12488  004E82  6EDA               	movwf	fsr2h,c
 12489  004E84  C01C  FFDE         	movff	writeCoeffs2Ram@c,postinc2
 12490  004E88  C01D  FFDE         	movff	writeCoeffs2Ram@c+1,postinc2
 12491  004E8C  C01E  FFDE         	movff	writeCoeffs2Ram@c+2,postinc2
 12492  004E90  C01F  FFDE         	movff	writeCoeffs2Ram@c+3,postinc2
 12493                           
 12494                           ; BSR set to: 1
 12495  004E94  4A1F               	infsnz	writeCoeffs2Ram@i,f,c
 12496  004E96  2A20               	incf	writeCoeffs2Ram@i+1,f,c
 12497                           
 12498                           ; BSR set to: 1
 12499  004E98  5020               	movf	writeCoeffs2Ram@i+1,w,c
 12500  004E9A  0A80               	xorlw	128
 12501  004E9C  0F80               	addlw	-128
 12502  004E9E  0E06               	movlw	6
 12503  004EA0  B4D8               	btfsc	status,2,c
 12504  004EA2  5C1F               	subwf	writeCoeffs2Ram@i,w,c
 12505  004EA4  B0D8               	btfsc	status,0,c
 12506                           
 12507                           ; BSR set to: 1
 12508  004EA6  0012               	return	
 12509  004EA8  D7B2               	goto	l10499
 12510  004EAA                     __end_of_writeCoeffs2Ram:
 12511                           	opt stack 0
 12512                           tblptru	equ	0xFF8
 12513                           tblptrh	equ	0xFF7
 12514                           tblptrl	equ	0xFF6
 12515                           tablat	equ	0xFF5
 12516                           prodh	equ	0xFF4
 12517                           prodl	equ	0xFF3
 12518                           postinc0	equ	0xFEE
 12519                           wreg	equ	0xFE8
 12520                           postdec1	equ	0xFE5
 12521                           fsr1h	equ	0xFE2
 12522                           fsr1l	equ	0xFE1
 12523                           indf2	equ	0xFDF
 12524                           postinc2	equ	0xFDE
 12525                           postdec2	equ	0xFDD
 12526                           fsr2h	equ	0xFDA
 12527                           fsr2l	equ	0xFD9
 12528                           status	equ	0xFD8
 12529                           
 12530 ;; *************** function ___wmul *****************
 12531 ;; Defined at:
 12532 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;  multiplier      2   13[COMRAM] unsigned int 
 12535 ;;  multiplicand    2   15[COMRAM] unsigned int 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  product         2   19[COMRAM] unsigned int 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  2   13[COMRAM] unsigned int 
 12540 ;; Registers used:
 12541 ;;		wreg, status,2, status,0, prodl, prodh
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12547 ;;      Params:         4       0       0       0       0       0       0
 12548 ;;      Locals:         4       0       0       0       0       0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0
 12550 ;;      Totals:         8       0       0       0       0       0       0
 12551 ;;Total ram usage:        8 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    2
 12554 ;; This function calls:
 12555 ;;		Nothing
 12556 ;; This function is called by:
 12557 ;;		_doOneSecondWork
 12558 ;;		_writeCoeffs2Ram
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           	psect	text44
 12563  00574E                     __ptext44:
 12564                           	opt stack 0
 12565  00574E                     ___wmul:
 12566                           	opt stack 27
 12567                           
 12568                           ; BSR set to: 1
 12569                           ;incstack = 0
 12570                           ;incstack = 0
 12571  00574E  500E               	movf	___wmul@multiplier,w,c
 12572  005750  0210               	mulwf	___wmul@multiplicand,c
 12573  005752  CFF3 F014          	movff	prodl,___wmul@product
 12574  005756  CFF4 F015          	movff	prodh,___wmul@product+1
 12575  00575A  500E               	movf	___wmul@multiplier,w,c
 12576  00575C  0211               	mulwf	___wmul@multiplicand+1,c
 12577  00575E  CFF3 FFF4          	movff	prodl,prodh
 12578  005762  6AF3               	clrf	prodl,c
 12579  005764  50F3               	movf	prodl,w,c
 12580  005766  2614               	addwf	___wmul@product,f,c
 12581  005768  50F4               	movf	prodh,w,c
 12582  00576A  2215               	addwfc	___wmul@product+1,f,c
 12583  00576C  500F               	movf	___wmul@multiplier+1,w,c
 12584  00576E  0210               	mulwf	___wmul@multiplicand,c
 12585  005770  CFF3 FFF4          	movff	prodl,prodh
 12586  005774  6AF3               	clrf	prodl,c
 12587  005776  50F3               	movf	prodl,w,c
 12588  005778  2614               	addwf	___wmul@product,f,c
 12589  00577A  50F4               	movf	prodh,w,c
 12590  00577C  2215               	addwfc	___wmul@product+1,f,c
 12591  00577E  C014  F00E         	movff	___wmul@product,?___wmul
 12592  005782  C015  F00F         	movff	___wmul@product+1,?___wmul+1
 12593  005786  0012               	return	
 12594  005788                     __end_of___wmul:
 12595                           	opt stack 0
 12596                           tblptru	equ	0xFF8
 12597                           tblptrh	equ	0xFF7
 12598                           tblptrl	equ	0xFF6
 12599                           tablat	equ	0xFF5
 12600                           prodh	equ	0xFF4
 12601                           prodl	equ	0xFF3
 12602                           postinc0	equ	0xFEE
 12603                           wreg	equ	0xFE8
 12604                           postdec1	equ	0xFE5
 12605                           fsr1h	equ	0xFE2
 12606                           fsr1l	equ	0xFE1
 12607                           indf2	equ	0xFDF
 12608                           postinc2	equ	0xFDE
 12609                           postdec2	equ	0xFDD
 12610                           fsr2h	equ	0xFDA
 12611                           fsr2l	equ	0xFD9
 12612                           status	equ	0xFD8
 12613                           
 12614 ;; *************** function _vscp_readRegister *****************
 12615 ;; Defined at:
 12616 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  reg             1    wreg     unsigned char 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;  reg             1   43[COMRAM] unsigned char 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      unsigned char 
 12623 ;; Registers used:
 12624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12625 ;; Tracked objects:
 12626 ;;		On entry : F/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12630 ;;      Params:         0       0       0       0       0       0       0
 12631 ;;      Locals:         1       0       0       0       0       0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0
 12633 ;;      Totals:         1       0       0       0       0       0       0
 12634 ;;Total ram usage:        1 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    5
 12637 ;; This function calls:
 12638 ;;		_vscp_readAppReg
 12639 ;;		_vscp_readStdReg
 12640 ;; This function is called by:
 12641 ;;		_vscp_handleProtocolEvent
 12642 ;; This function uses a non-reentrant model
 12643 ;;
 12644                           
 12645                           	psect	text45
 12646  005A78                     __ptext45:
 12647                           	opt stack 0
 12648  005A78                     _vscp_readRegister:
 12649                           	opt stack 24
 12650                           
 12651                           ;incstack = 0
 12652                           ;incstack = 0
 12653                           ;vscp_readRegister@reg stored from wreg
 12654  005A78  CFE8 F02C          	movff	wreg,vscp_readRegister@reg
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
 12658  005A7C  0E7F               	movlw	127
 12659  005A7E  642C               	cpfsgt	vscp_readRegister@reg,c
 12660  005A80  D004               	goto	l11185
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
 12664  005A82  502C               	movf	vscp_readRegister@reg,w,c
 12665  005A84  EC05  F01E         	call	_vscp_readStdReg
 12666  005A88  D003               	goto	l1106
 12667  005A8A                     l11185:
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;vscp_firmware.c: 565: else {
 12671                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
 12672  005A8A  502C               	movf	vscp_readRegister@reg,w,c
 12673  005A8C  EC0C  F010         	call	_vscp_readAppReg
 12674  005A90                     l1106:
 12675  005A90  0012               	return	
 12676  005A92                     __end_of_vscp_readRegister:
 12677                           	opt stack 0
 12678                           tblptru	equ	0xFF8
 12679                           tblptrh	equ	0xFF7
 12680                           tblptrl	equ	0xFF6
 12681                           tablat	equ	0xFF5
 12682                           prodh	equ	0xFF4
 12683                           prodl	equ	0xFF3
 12684                           postinc0	equ	0xFEE
 12685                           wreg	equ	0xFE8
 12686                           postdec1	equ	0xFE5
 12687                           fsr1h	equ	0xFE2
 12688                           fsr1l	equ	0xFE1
 12689                           indf2	equ	0xFDF
 12690                           postinc2	equ	0xFDE
 12691                           postdec2	equ	0xFDD
 12692                           fsr2h	equ	0xFDA
 12693                           fsr2l	equ	0xFD9
 12694                           status	equ	0xFD8
 12695                           
 12696 ;; *************** function _vscp_readStdReg *****************
 12697 ;; Defined at:
 12698 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;  reg             1    wreg     unsigned char 
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;  reg             1   42[COMRAM] unsigned char 
 12703 ;;  code            4   35[COMRAM] unsigned long 
 12704 ;;  idx             1   40[COMRAM] unsigned char 
 12705 ;;  code            4   31[COMRAM] unsigned long 
 12706 ;;  idx             1   39[COMRAM] unsigned char 
 12707 ;;  rv              1   41[COMRAM] unsigned char 
 12708 ;; Return value:  Size  Location     Type
 12709 ;;                  1    wreg      unsigned char 
 12710 ;; Registers used:
 12711 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12712 ;; Tracked objects:
 12713 ;;		On entry : F/0
 12714 ;;		On exit  : 0/0
 12715 ;;		Unchanged: 0/0
 12716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12717 ;;      Params:         0       0       0       0       0       0       0
 12718 ;;      Locals:        12       0       0       0       0       0       0
 12719 ;;      Temps:          5       0       0       0       0       0       0
 12720 ;;      Totals:        17       0       0       0       0       0       0
 12721 ;;Total ram usage:       17 bytes
 12722 ;; Hardware stack levels used:    1
 12723 ;; Hardware stack levels required when called:    4
 12724 ;; This function calls:
 12725 ;;		_vscp_getMajorVersion
 12726 ;;		_vscp_getMinorVersion
 12727 ;;		_vscp_getSubMinorVersion
 12728 ;;		_vscp_getGUID
 12729 ;;		_vscp_getMDF_URL
 12730 ;;		_vscp_getUserID
 12731 ;;		_vscp_getManufacturerId
 12732 ;;		_vscp_getBootLoaderAlgorithm
 12733 ;;		_vscp_getBufferSize
 12734 ;;		_vscp_getRegisterPagesUsed
 12735 ;;		_vscp_getFamilyCode
 12736 ;;		_vscp_getFamilyType
 12737 ;; This function is called by:
 12738 ;;		_vscp_readRegister
 12739 ;;		_vscp_handleProtocolEvent
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           	psect	text46
 12744  003C0A                     __ptext46:
 12745                           	opt stack 0
 12746  003C0A                     _vscp_readStdReg:
 12747                           	opt stack 25
 12748                           
 12749                           ;incstack = 0
 12750                           ;incstack = 0
 12751                           ;vscp_readStdReg@reg stored from wreg
 12752  003C0A  CFE8 F02B          	movff	wreg,vscp_readStdReg@reg
 12753                           
 12754                           ; BSR set to: 0
 12755                           ;vscp_firmware.c: 576: uint8_t rv = 0;
 12756  003C0E  6A2A               	clrf	vscp_readStdReg@rv,c
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;vscp_firmware.c: 578: if (0x80 == reg) {
 12760  003C10  502B               	movf	vscp_readStdReg@reg,w,c
 12761  003C12  0A80               	xorlw	128
 12762  003C14  E104               	bnz	l11195
 12763                           
 12764                           ; BSR set to: 0
 12765                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
 12766  003C16  C04A  F02A         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 12767                           
 12768                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
 12769  003C1A  6A4A               	clrf	_vscp_alarmstatus,c
 12770                           
 12771                           ;vscp_firmware.c: 584: }
 12772  003C1C  D0CB               	goto	l11283
 12773  003C1E                     l11195:
 12774                           
 12775                           ; BSR set to: 0
 12776                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
 12777  003C1E  502B               	movf	vscp_readStdReg@reg,w,c
 12778  003C20  0A81               	xorlw	129
 12779  003C22  E102               	bnz	l11199
 12780                           
 12781                           ; BSR set to: 0
 12782                           ;vscp_firmware.c: 588: rv = 1;
 12783  003C24  0E01               	movlw	1
 12784  003C26  D081               	goto	L31
 12785  003C28                     l11199:
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
 12789  003C28  502B               	movf	vscp_readStdReg@reg,w,c
 12790  003C2A  0A82               	xorlw	130
 12791  003C2C  E102               	bnz	l11203
 12792                           
 12793                           ; BSR set to: 0
 12794                           ;vscp_firmware.c: 594: rv = 5;
 12795  003C2E  0E05               	movlw	5
 12796  003C30  D07C               	goto	L31
 12797  003C32                     l11203:
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
 12801  003C32  502B               	movf	vscp_readStdReg@reg,w,c
 12802  003C34  0A83               	xorlw	131
 12803  003C36  E102               	bnz	l11207
 12804                           
 12805                           ; BSR set to: 0
 12806                           ;vscp_firmware.c: 600: rv = 0;
 12807  003C38  6A2A               	clrf	vscp_readStdReg@rv,c
 12808                           
 12809                           ;vscp_firmware.c: 602: }
 12810  003C3A  D0BC               	goto	l11283
 12811  003C3C                     l11207:
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
 12815  003C3C  502B               	movf	vscp_readStdReg@reg,w,c
 12816  003C3E  0A94               	xorlw	148
 12817  003C40  E103               	bnz	l11211
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
 12821  003C42  EC08  F02E         	call	_vscp_getMajorVersion	;wreg free
 12822  003C46  D071               	goto	L31
 12823  003C48                     l11211:
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
 12827  003C48  502B               	movf	vscp_readStdReg@reg,w,c
 12828  003C4A  0A95               	xorlw	149
 12829  003C4C  E103               	bnz	l11215
 12830                           
 12831                           ; BSR set to: 0
 12832                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
 12833  003C4E  EC07  F02E         	call	_vscp_getMinorVersion	;wreg free
 12834  003C52  D06B               	goto	L31
 12835  003C54                     l11215:
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
 12839  003C54  502B               	movf	vscp_readStdReg@reg,w,c
 12840  003C56  0A96               	xorlw	150
 12841  003C58  E103               	bnz	l11219
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
 12845  003C5A  EC06  F02E         	call	_vscp_getSubMinorVersion	;wreg free
 12846  003C5E  D065               	goto	L31
 12847  003C60                     l11219:
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
 12851  003C60  0E89               	movlw	137
 12852  003C62  602B               	cpfslt	vscp_readStdReg@reg,c
 12853  003C64  D005               	goto	l11223
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
 12857  003C66  502B               	movf	vscp_readStdReg@reg,w,c
 12858  003C68  0F7C               	addlw	124
 12859  003C6A  EC90  F02D         	call	_vscp_getUserID
 12860  003C6E  D05D               	goto	L31
 12861  003C70                     l11223:
 12862                           
 12863                           ; BSR set to: 0
 12864                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
 12865                           ;vscp_firmware.c: 628: (reg < 0x91)) {
 12866  003C70  0E88               	movlw	136
 12867  003C72  642B               	cpfsgt	vscp_readStdReg@reg,c
 12868  003C74  D008               	goto	l11229
 12869                           
 12870                           ; BSR set to: 0
 12871  003C76  0E91               	movlw	145
 12872  003C78  602B               	cpfslt	vscp_readStdReg@reg,c
 12873  003C7A  D005               	goto	l11229
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
 12877  003C7C  502B               	movf	vscp_readStdReg@reg,w,c
 12878  003C7E  0F77               	addlw	119
 12879  003C80  EC86  F02D         	call	_vscp_getManufacturerId
 12880  003C84  D052               	goto	L31
 12881  003C86                     l11229:
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
 12885  003C86  502B               	movf	vscp_readStdReg@reg,w,c
 12886  003C88  0A91               	xorlw	145
 12887  003C8A  E103               	bnz	l11233
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;vscp_firmware.c: 637: rv = vscp_nickname;
 12891  003C8C  C0C3  F02A         	movff	_vscp_nickname,vscp_readStdReg@rv
 12892                           
 12893                           ;vscp_firmware.c: 639: }
 12894  003C90  D091               	goto	l11283
 12895  003C92                     l11233:
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
 12899  003C92  502B               	movf	vscp_readStdReg@reg,w,c
 12900  003C94  0A93               	xorlw	147
 12901  003C96  E103               	bnz	l11237
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
 12905  003C98  C046  F02A         	movff	_vscp_page_select,vscp_readStdReg@rv
 12906                           
 12907                           ;vscp_firmware.c: 645: }
 12908  003C9C  D08B               	goto	l11283
 12909  003C9E                     l11237:
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
 12913  003C9E  502B               	movf	vscp_readStdReg@reg,w,c
 12914  003CA0  0A92               	xorlw	146
 12915  003CA2  E102               	bnz	l11241
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
 12919  003CA4  5047               	movf	_vscp_page_select+1,w,c
 12920  003CA6  D041               	goto	L31
 12921  003CA8                     l11241:
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
 12925  003CA8  502B               	movf	vscp_readStdReg@reg,w,c
 12926  003CAA  0A97               	xorlw	151
 12927  003CAC  E103               	bnz	l11245
 12928                           
 12929                           ; BSR set to: 0
 12930                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
 12931  003CAE  EC05  F02E         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 12932  003CB2  D03B               	goto	L31
 12933  003CB4                     l11245:
 12934                           
 12935                           ; BSR set to: 0
 12936                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
 12937  003CB4  502B               	movf	vscp_readStdReg@reg,w,c
 12938  003CB6  0A98               	xorlw	152
 12939  003CB8  E103               	bnz	l11249
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
 12943  003CBA  EC04  F02E         	call	_vscp_getBufferSize	;wreg free
 12944  003CBE  D035               	goto	L31
 12945  003CC0                     l11249:
 12946                           
 12947                           ; BSR set to: 0
 12948                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
 12949  003CC0  502B               	movf	vscp_readStdReg@reg,w,c
 12950  003CC2  0A99               	xorlw	153
 12951  003CC4  E103               	bnz	l11253
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
 12955  003CC6  EC03  F02E         	call	_vscp_getRegisterPagesUsed	;wreg free
 12956  003CCA  D02F               	goto	L31
 12957  003CCC                     l11253:
 12958                           
 12959                           ; BSR set to: 0
 12960                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
 12961                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
 12962  003CCC  0E99               	movlw	153
 12963  003CCE  642B               	cpfsgt	vscp_readStdReg@reg,c
 12964  003CD0  D02E               	goto	l11263
 12965                           
 12966                           ; BSR set to: 0
 12967  003CD2  0E9E               	movlw	158
 12968  003CD4  602B               	cpfslt	vscp_readStdReg@reg,c
 12969  003CD6  D02B               	goto	l11263
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
 12973  003CD8  ECEA  F02D         	call	_vscp_getFamilyCode	;wreg free
 12974  003CDC  C011  F023         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 12975  003CE0  C010  F022         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 12976  003CE4  C00F  F021         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 12977  003CE8  C00E  F020         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 12978                           
 12979                           ; BSR set to: 0
 12980                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
 12981  003CEC  502B               	movf	vscp_readStdReg@reg,w,c
 12982  003CEE  0F66               	addlw	102
 12983  003CF0  6E28               	movwf	vscp_readStdReg@idx,c
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 12987  003CF2  5028               	movf	vscp_readStdReg@idx,w,c
 12988  003CF4  0803               	sublw	3
 12989  003CF6  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 12990  003CF8  90D8               	bcf	status,0,c
 12991  003CFA  361B               	rlcf	??_vscp_readStdReg,f,c
 12992  003CFC  90D8               	bcf	status,0,c
 12993  003CFE  361B               	rlcf	??_vscp_readStdReg,f,c
 12994  003D00  90D8               	bcf	status,0,c
 12995  003D02  361B               	rlcf	??_vscp_readStdReg,f,c
 12996  003D04  501B               	movf	??_vscp_readStdReg,w,c
 12997  003D06  C020  F01C         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 12998  003D0A  C021  F01D         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 12999  003D0E  C022  F01E         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 13000  003D12  C023  F01F         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 13001  003D16  2AE8               	incf	wreg,f,c
 13002  003D18  D005               	goto	u9400
 13003  003D1A                     u9405:
 13004  003D1A  90D8               	bcf	status,0,c
 13005  003D1C  321F               	rrcf	??_vscp_readStdReg+4,f,c
 13006  003D1E  321E               	rrcf	??_vscp_readStdReg+3,f,c
 13007  003D20  321D               	rrcf	??_vscp_readStdReg+2,f,c
 13008  003D22  321C               	rrcf	??_vscp_readStdReg+1,f,c
 13009  003D24                     u9400:
 13010  003D24  2EE8               	decfsz	wreg,f,c
 13011  003D26  D7F9               	goto	u9405
 13012  003D28  D030               	goto	L32
 13013  003D2A                     L31:
 13014  003D2A  6E2A               	movwf	vscp_readStdReg@rv,c
 13015                           
 13016                           ;vscp_firmware.c: 671: }
 13017  003D2C  D043               	goto	l11283
 13018  003D2E                     l11263:
 13019                           
 13020                           ; BSR set to: 0
 13021                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
 13022                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
 13023  003D2E  0E9D               	movlw	157
 13024  003D30  642B               	cpfsgt	vscp_readStdReg@reg,c
 13025  003D32  D02D               	goto	l11273
 13026                           
 13027                           ; BSR set to: 0
 13028  003D34  0EA2               	movlw	162
 13029  003D36  602B               	cpfslt	vscp_readStdReg@reg,c
 13030  003D38  D02A               	goto	l11273
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
 13034  003D3A  ECE5  F02D         	call	_vscp_getFamilyType	;wreg free
 13035  003D3E  C011  F027         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1147+3
 13036  003D42  C010  F026         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1147+2
 13037  003D46  C00F  F025         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1147+1
 13038  003D4A  C00E  F024         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1147
 13039                           
 13040                           ; BSR set to: 0
 13041                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
 13042  003D4E  502B               	movf	vscp_readStdReg@reg,w,c
 13043  003D50  0F62               	addlw	98
 13044  003D52  6E29               	movwf	vscp_readStdReg@idx_1148,c
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 13048  003D54  5029               	movf	vscp_readStdReg@idx_1148,w,c
 13049  003D56  0803               	sublw	3
 13050  003D58  6E1B               	movwf	??_vscp_readStdReg& (0+255),c
 13051  003D5A  90D8               	bcf	status,0,c
 13052  003D5C  361B               	rlcf	??_vscp_readStdReg,f,c
 13053  003D5E  90D8               	bcf	status,0,c
 13054  003D60  361B               	rlcf	??_vscp_readStdReg,f,c
 13055  003D62  90D8               	bcf	status,0,c
 13056  003D64  361B               	rlcf	??_vscp_readStdReg,f,c
 13057  003D66  501B               	movf	??_vscp_readStdReg,w,c
 13058  003D68  C024  F01C         	movff	vscp_readStdReg@code_1147,??_vscp_readStdReg+1
 13059  003D6C  C025  F01D         	movff	vscp_readStdReg@code_1147+1,??_vscp_readStdReg+2
 13060  003D70  C026  F01E         	movff	vscp_readStdReg@code_1147+2,??_vscp_readStdReg+3
 13061  003D74  C027  F01F         	movff	vscp_readStdReg@code_1147+3,??_vscp_readStdReg+4
 13062  003D78  2AE8               	incf	wreg,f,c
 13063  003D7A  D005               	goto	u9430
 13064  003D7C                     u9435:
 13065  003D7C  90D8               	bcf	status,0,c
 13066  003D7E  321F               	rrcf	??_vscp_readStdReg+4,f,c
 13067  003D80  321E               	rrcf	??_vscp_readStdReg+3,f,c
 13068  003D82  321D               	rrcf	??_vscp_readStdReg+2,f,c
 13069  003D84  321C               	rrcf	??_vscp_readStdReg+1,f,c
 13070  003D86                     u9430:
 13071  003D86  2EE8               	decfsz	wreg,f,c
 13072  003D88  D7F9               	goto	u9435
 13073  003D8A                     L32:
 13074  003D8A  501C               	movf	??_vscp_readStdReg+1,w,c
 13075  003D8C  D7CE               	goto	L31
 13076  003D8E                     l11273:
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
 13080                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
 13081  003D8E  0ECF               	movlw	207
 13082  003D90  642B               	cpfsgt	vscp_readStdReg@reg,c
 13083  003D92  D008               	goto	l11279
 13084                           
 13085                           ; BSR set to: 0
 13086  003D94  0EE0               	movlw	224
 13087  003D96  602B               	cpfslt	vscp_readStdReg@reg,c
 13088  003D98  D005               	goto	l11279
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
 13092  003D9A  502B               	movf	vscp_readStdReg@reg,w,c
 13093  003D9C  0F30               	addlw	48
 13094  003D9E  EC9A  F02D         	call	_vscp_getGUID
 13095  003DA2  D7C3               	goto	L31
 13096  003DA4                     l11279:
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
 13100  003DA4  0EDF               	movlw	223
 13101  003DA6  642B               	cpfsgt	vscp_readStdReg@reg,c
 13102  003DA8  D005               	goto	l11283
 13103                           
 13104                           ; BSR set to: 0
 13105                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
 13106  003DAA  502B               	movf	vscp_readStdReg@reg,w,c
 13107  003DAC  0F20               	addlw	32
 13108  003DAE  EC6E  F02D         	call	_vscp_getMDF_URL
 13109  003DB2  D7BB               	goto	L31
 13110  003DB4                     l11283:
 13111                           
 13112                           ;vscp_firmware.c: 691: }
 13113                           ;vscp_firmware.c: 693: return rv;
 13114  003DB4  502A               	movf	vscp_readStdReg@rv,w,c
 13115  003DB6  0012               	return	
 13116  003DB8                     __end_of_vscp_readStdReg:
 13117                           	opt stack 0
 13118                           tblptru	equ	0xFF8
 13119                           tblptrh	equ	0xFF7
 13120                           tblptrl	equ	0xFF6
 13121                           tablat	equ	0xFF5
 13122                           prodh	equ	0xFF4
 13123                           prodl	equ	0xFF3
 13124                           postinc0	equ	0xFEE
 13125                           wreg	equ	0xFE8
 13126                           postdec1	equ	0xFE5
 13127                           fsr1h	equ	0xFE2
 13128                           fsr1l	equ	0xFE1
 13129                           indf2	equ	0xFDF
 13130                           postinc2	equ	0xFDE
 13131                           postdec2	equ	0xFDD
 13132                           fsr2h	equ	0xFDA
 13133                           fsr2l	equ	0xFD9
 13134                           status	equ	0xFD8
 13135                           
 13136 ;; *************** function _vscp_getFamilyType *****************
 13137 ;; Defined at:
 13138 ;;		line 2840 in file "../main.c"
 13139 ;; Parameters:    Size  Location     Type
 13140 ;;		None
 13141 ;; Auto vars:     Size  Location     Type
 13142 ;;		None
 13143 ;; Return value:  Size  Location     Type
 13144 ;;                  4   13[COMRAM] unsigned long 
 13145 ;; Registers used:
 13146 ;;		None
 13147 ;; Tracked objects:
 13148 ;;		On entry : F/0
 13149 ;;		On exit  : F/0
 13150 ;;		Unchanged: F/0
 13151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13152 ;;      Params:         4       0       0       0       0       0       0
 13153 ;;      Locals:         0       0       0       0       0       0       0
 13154 ;;      Temps:          0       0       0       0       0       0       0
 13155 ;;      Totals:         4       0       0       0       0       0       0
 13156 ;;Total ram usage:        4 bytes
 13157 ;; Hardware stack levels used:    1
 13158 ;; Hardware stack levels required when called:    2
 13159 ;; This function calls:
 13160 ;;		Nothing
 13161 ;; This function is called by:
 13162 ;;		_vscp_readStdReg
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           	psect	text47
 13167  005BCA                     __ptext47:
 13168                           	opt stack 0
 13169  005BCA                     _vscp_getFamilyType:
 13170                           	opt stack 26
 13171                           
 13172                           ; BSR set to: 0
 13173                           ;main.c: 2841: return 0;
 13174                           
 13175                           ;incstack = 0
 13176                           ;incstack = 0
 13177  005BCA  6A0E               	clrf	?_vscp_getFamilyType,c
 13178  005BCC  6A0F               	clrf	?_vscp_getFamilyType+1,c
 13179  005BCE  6A10               	clrf	?_vscp_getFamilyType+2,c
 13180  005BD0  6A11               	clrf	?_vscp_getFamilyType+3,c
 13181                           
 13182                           ; BSR set to: 0
 13183  005BD2  0012               	return	
 13184  005BD4                     __end_of_vscp_getFamilyType:
 13185                           	opt stack 0
 13186                           tblptru	equ	0xFF8
 13187                           tblptrh	equ	0xFF7
 13188                           tblptrl	equ	0xFF6
 13189                           tablat	equ	0xFF5
 13190                           prodh	equ	0xFF4
 13191                           prodl	equ	0xFF3
 13192                           postinc0	equ	0xFEE
 13193                           wreg	equ	0xFE8
 13194                           postdec1	equ	0xFE5
 13195                           fsr1h	equ	0xFE2
 13196                           fsr1l	equ	0xFE1
 13197                           indf2	equ	0xFDF
 13198                           postinc2	equ	0xFDE
 13199                           postdec2	equ	0xFDD
 13200                           fsr2h	equ	0xFDA
 13201                           fsr2l	equ	0xFD9
 13202                           status	equ	0xFD8
 13203                           
 13204 ;; *************** function _vscp_getFamilyCode *****************
 13205 ;; Defined at:
 13206 ;;		line 2830 in file "../main.c"
 13207 ;; Parameters:    Size  Location     Type
 13208 ;;		None
 13209 ;; Auto vars:     Size  Location     Type
 13210 ;;		None
 13211 ;; Return value:  Size  Location     Type
 13212 ;;                  4   13[COMRAM] unsigned long 
 13213 ;; Registers used:
 13214 ;;		None
 13215 ;; Tracked objects:
 13216 ;;		On entry : F/0
 13217 ;;		On exit  : F/0
 13218 ;;		Unchanged: F/0
 13219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13220 ;;      Params:         4       0       0       0       0       0       0
 13221 ;;      Locals:         0       0       0       0       0       0       0
 13222 ;;      Temps:          0       0       0       0       0       0       0
 13223 ;;      Totals:         4       0       0       0       0       0       0
 13224 ;;Total ram usage:        4 bytes
 13225 ;; Hardware stack levels used:    1
 13226 ;; Hardware stack levels required when called:    2
 13227 ;; This function calls:
 13228 ;;		Nothing
 13229 ;; This function is called by:
 13230 ;;		_vscp_readStdReg
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           	psect	text48
 13235  005BD4                     __ptext48:
 13236                           	opt stack 0
 13237  005BD4                     _vscp_getFamilyCode:
 13238                           	opt stack 26
 13239                           
 13240                           ; BSR set to: 0
 13241                           ;main.c: 2831: return 0L;
 13242                           
 13243                           ; BSR set to: 0
 13244                           ;incstack = 0
 13245                           ;incstack = 0
 13246  005BD4  6A0E               	clrf	?_vscp_getFamilyCode,c
 13247  005BD6  6A0F               	clrf	?_vscp_getFamilyCode+1,c
 13248  005BD8  6A10               	clrf	?_vscp_getFamilyCode+2,c
 13249  005BDA  6A11               	clrf	?_vscp_getFamilyCode+3,c
 13250                           
 13251                           ; BSR set to: 0
 13252  005BDC  0012               	return	
 13253  005BDE                     __end_of_vscp_getFamilyCode:
 13254                           	opt stack 0
 13255                           tblptru	equ	0xFF8
 13256                           tblptrh	equ	0xFF7
 13257                           tblptrl	equ	0xFF6
 13258                           tablat	equ	0xFF5
 13259                           prodh	equ	0xFF4
 13260                           prodl	equ	0xFF3
 13261                           postinc0	equ	0xFEE
 13262                           wreg	equ	0xFE8
 13263                           postdec1	equ	0xFE5
 13264                           fsr1h	equ	0xFE2
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           fsr2h	equ	0xFDA
 13270                           fsr2l	equ	0xFD9
 13271                           status	equ	0xFD8
 13272                           
 13273 ;; *************** function _vscp_getRegisterPagesUsed *****************
 13274 ;; Defined at:
 13275 ;;		line 2729 in file "../main.c"
 13276 ;; Parameters:    Size  Location     Type
 13277 ;;		None
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;		None
 13280 ;; Return value:  Size  Location     Type
 13281 ;;                  1    wreg      unsigned char 
 13282 ;; Registers used:
 13283 ;;		wreg
 13284 ;; Tracked objects:
 13285 ;;		On entry : F/0
 13286 ;;		On exit  : F/0
 13287 ;;		Unchanged: F/0
 13288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13289 ;;      Params:         0       0       0       0       0       0       0
 13290 ;;      Locals:         0       0       0       0       0       0       0
 13291 ;;      Temps:          0       0       0       0       0       0       0
 13292 ;;      Totals:         0       0       0       0       0       0       0
 13293 ;;Total ram usage:        0 bytes
 13294 ;; Hardware stack levels used:    1
 13295 ;; Hardware stack levels required when called:    2
 13296 ;; This function calls:
 13297 ;;		Nothing
 13298 ;; This function is called by:
 13299 ;;		_vscp_readStdReg
 13300 ;; This function uses a non-reentrant model
 13301 ;;
 13302                           
 13303                           	psect	text49
 13304  005C06                     __ptext49:
 13305                           	opt stack 0
 13306  005C06                     _vscp_getRegisterPagesUsed:
 13307                           	opt stack 26
 13308                           
 13309                           ; BSR set to: 0
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;main.c: 2730: return 1;
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;incstack = 0
 13316                           ;incstack = 0
 13317  005C06  0C01               	retlw	1
 13318  005C08                     __end_of_vscp_getRegisterPagesUsed:
 13319                           	opt stack 0
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           postinc0	equ	0xFEE
 13327                           wreg	equ	0xFE8
 13328                           postdec1	equ	0xFE5
 13329                           fsr1h	equ	0xFE2
 13330                           fsr1l	equ	0xFE1
 13331                           indf2	equ	0xFDF
 13332                           postinc2	equ	0xFDE
 13333                           postdec2	equ	0xFDD
 13334                           fsr2h	equ	0xFDA
 13335                           fsr2l	equ	0xFD9
 13336                           status	equ	0xFD8
 13337                           
 13338 ;; *************** function _vscp_getBufferSize *****************
 13339 ;; Defined at:
 13340 ;;		line 2682 in file "../main.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;		None
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;		None
 13345 ;; Return value:  Size  Location     Type
 13346 ;;                  1    wreg      unsigned char 
 13347 ;; Registers used:
 13348 ;;		wreg
 13349 ;; Tracked objects:
 13350 ;;		On entry : F/0
 13351 ;;		On exit  : F/0
 13352 ;;		Unchanged: F/0
 13353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13354 ;;      Params:         0       0       0       0       0       0       0
 13355 ;;      Locals:         0       0       0       0       0       0       0
 13356 ;;      Temps:          0       0       0       0       0       0       0
 13357 ;;      Totals:         0       0       0       0       0       0       0
 13358 ;;Total ram usage:        0 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:    2
 13361 ;; This function calls:
 13362 ;;		Nothing
 13363 ;; This function is called by:
 13364 ;;		_vscp_readStdReg
 13365 ;; This function uses a non-reentrant model
 13366 ;;
 13367                           
 13368                           	psect	text50
 13369  005C08                     __ptext50:
 13370                           	opt stack 0
 13371  005C08                     _vscp_getBufferSize:
 13372                           	opt stack 26
 13373                           
 13374                           ; BSR set to: 0
 13375                           
 13376                           ; BSR set to: 0
 13377                           ;main.c: 2683: return 8;
 13378                           
 13379                           ; BSR set to: 0
 13380                           ;incstack = 0
 13381                           ;incstack = 0
 13382  005C08  0C08               	retlw	8
 13383  005C0A                     __end_of_vscp_getBufferSize:
 13384                           	opt stack 0
 13385                           tblptru	equ	0xFF8
 13386                           tblptrh	equ	0xFF7
 13387                           tblptrl	equ	0xFF6
 13388                           tablat	equ	0xFF5
 13389                           prodh	equ	0xFF4
 13390                           prodl	equ	0xFF3
 13391                           postinc0	equ	0xFEE
 13392                           wreg	equ	0xFE8
 13393                           postdec1	equ	0xFE5
 13394                           fsr1h	equ	0xFE2
 13395                           fsr1l	equ	0xFE1
 13396                           indf2	equ	0xFDF
 13397                           postinc2	equ	0xFDE
 13398                           postdec2	equ	0xFDD
 13399                           fsr2h	equ	0xFDA
 13400                           fsr2l	equ	0xFD9
 13401                           status	equ	0xFD8
 13402                           
 13403 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 13404 ;; Defined at:
 13405 ;;		line 2673 in file "../main.c"
 13406 ;; Parameters:    Size  Location     Type
 13407 ;;		None
 13408 ;; Auto vars:     Size  Location     Type
 13409 ;;		None
 13410 ;; Return value:  Size  Location     Type
 13411 ;;                  1    wreg      unsigned char 
 13412 ;; Registers used:
 13413 ;;		wreg
 13414 ;; Tracked objects:
 13415 ;;		On entry : F/0
 13416 ;;		On exit  : F/0
 13417 ;;		Unchanged: F/0
 13418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13419 ;;      Params:         0       0       0       0       0       0       0
 13420 ;;      Locals:         0       0       0       0       0       0       0
 13421 ;;      Temps:          0       0       0       0       0       0       0
 13422 ;;      Totals:         0       0       0       0       0       0       0
 13423 ;;Total ram usage:        0 bytes
 13424 ;; Hardware stack levels used:    1
 13425 ;; Hardware stack levels required when called:    2
 13426 ;; This function calls:
 13427 ;;		Nothing
 13428 ;; This function is called by:
 13429 ;;		_vscp_readStdReg
 13430 ;; This function uses a non-reentrant model
 13431 ;;
 13432                           
 13433                           	psect	text51
 13434  005C0A                     __ptext51:
 13435                           	opt stack 0
 13436  005C0A                     _vscp_getBootLoaderAlgorithm:
 13437                           	opt stack 26
 13438                           
 13439                           ; BSR set to: 0
 13440                           
 13441                           ; BSR set to: 0
 13442                           ;main.c: 2674: return 0x01;
 13443                           
 13444                           ; BSR set to: 0
 13445                           ;incstack = 0
 13446                           ;incstack = 0
 13447  005C0A  0C01               	retlw	1
 13448  005C0C                     __end_of_vscp_getBootLoaderAlgorithm:
 13449                           	opt stack 0
 13450                           tblptru	equ	0xFF8
 13451                           tblptrh	equ	0xFF7
 13452                           tblptrl	equ	0xFF6
 13453                           tablat	equ	0xFF5
 13454                           prodh	equ	0xFF4
 13455                           prodl	equ	0xFF3
 13456                           postinc0	equ	0xFEE
 13457                           wreg	equ	0xFE8
 13458                           postdec1	equ	0xFE5
 13459                           fsr1h	equ	0xFE2
 13460                           fsr1l	equ	0xFE1
 13461                           indf2	equ	0xFDF
 13462                           postinc2	equ	0xFDE
 13463                           postdec2	equ	0xFDD
 13464                           fsr2h	equ	0xFDA
 13465                           fsr2l	equ	0xFD9
 13466                           status	equ	0xFD8
 13467                           
 13468 ;; *************** function _vscp_getManufacturerId *****************
 13469 ;; Defined at:
 13470 ;;		line 2653 in file "../main.c"
 13471 ;; Parameters:    Size  Location     Type
 13472 ;;  idx             1    wreg     unsigned char 
 13473 ;; Auto vars:     Size  Location     Type
 13474 ;;  idx             1   25[COMRAM] unsigned char 
 13475 ;; Return value:  Size  Location     Type
 13476 ;;                  1    wreg      unsigned char 
 13477 ;; Registers used:
 13478 ;;		wreg, status,2, status,0, cstack
 13479 ;; Tracked objects:
 13480 ;;		On entry : 0/0
 13481 ;;		On exit  : 0/0
 13482 ;;		Unchanged: 0/0
 13483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13484 ;;      Params:         0       0       0       0       0       0       0
 13485 ;;      Locals:         1       0       0       0       0       0       0
 13486 ;;      Temps:          0       0       0       0       0       0       0
 13487 ;;      Totals:         1       0       0       0       0       0       0
 13488 ;;Total ram usage:        1 bytes
 13489 ;; Hardware stack levels used:    1
 13490 ;; Hardware stack levels required when called:    3
 13491 ;; This function calls:
 13492 ;;		_readEEPROM
 13493 ;; This function is called by:
 13494 ;;		_vscp_readStdReg
 13495 ;;		_vscp_writeStdReg
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           	psect	text52
 13500  005B0C                     __ptext52:
 13501                           	opt stack 0
 13502  005B0C                     _vscp_getManufacturerId:
 13503                           	opt stack 25
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;incstack = 0
 13507                           ;incstack = 0
 13508                           ;vscp_getManufacturerId@idx stored from wreg
 13509  005B0C  CFE8 F01A          	movff	wreg,vscp_getManufacturerId@idx
 13510                           
 13511                           ;main.c: 2654: return readEEPROM(0x09 + idx);
 13512  005B10  0E09               	movlw	9
 13513  005B12  241A               	addwf	vscp_getManufacturerId@idx,w,c
 13514  005B14  6E16               	movwf	?_readEEPROM,c
 13515  005B16  6A17               	clrf	?_readEEPROM+1,c
 13516  005B18  0E00               	movlw	0
 13517  005B1A  2217               	addwfc	?_readEEPROM+1,f,c
 13518  005B1C  EFA4  F02D         	goto	_readEEPROM	;wreg free
 13519  005B20                     __end_of_vscp_getManufacturerId:
 13520                           	opt stack 0
 13521                           tblptru	equ	0xFF8
 13522                           tblptrh	equ	0xFF7
 13523                           tblptrl	equ	0xFF6
 13524                           tablat	equ	0xFF5
 13525                           prodh	equ	0xFF4
 13526                           prodl	equ	0xFF3
 13527                           postinc0	equ	0xFEE
 13528                           wreg	equ	0xFE8
 13529                           postdec1	equ	0xFE5
 13530                           fsr1h	equ	0xFE2
 13531                           fsr1l	equ	0xFE1
 13532                           indf2	equ	0xFDF
 13533                           postinc2	equ	0xFDE
 13534                           postdec2	equ	0xFDD
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _vscp_getUserID *****************
 13540 ;; Defined at:
 13541 ;;		line 2633 in file "../main.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  idx             1    wreg     unsigned char 
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;  idx             1   25[COMRAM] unsigned char 
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      unsigned char 
 13548 ;; Registers used:
 13549 ;;		wreg, status,2, status,0, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13555 ;;      Params:         0       0       0       0       0       0       0
 13556 ;;      Locals:         1       0       0       0       0       0       0
 13557 ;;      Temps:          0       0       0       0       0       0       0
 13558 ;;      Totals:         1       0       0       0       0       0       0
 13559 ;;Total ram usage:        1 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:    3
 13562 ;; This function calls:
 13563 ;;		_readEEPROM
 13564 ;; This function is called by:
 13565 ;;		_vscp_readStdReg
 13566 ;;		_vscp_writeStdReg
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           	psect	text53
 13571  005B20                     __ptext53:
 13572                           	opt stack 0
 13573  005B20                     _vscp_getUserID:
 13574                           	opt stack 25
 13575                           
 13576                           ;incstack = 0
 13577                           ;incstack = 0
 13578                           ;vscp_getUserID@idx stored from wreg
 13579  005B20  CFE8 F01A          	movff	wreg,vscp_getUserID@idx
 13580                           
 13581                           ;main.c: 2634: return readEEPROM(0x04 + idx);
 13582  005B24  0E04               	movlw	4
 13583  005B26  241A               	addwf	vscp_getUserID@idx,w,c
 13584  005B28  6E16               	movwf	?_readEEPROM,c
 13585  005B2A  6A17               	clrf	?_readEEPROM+1,c
 13586  005B2C  0E00               	movlw	0
 13587  005B2E  2217               	addwfc	?_readEEPROM+1,f,c
 13588  005B30  EFA4  F02D         	goto	_readEEPROM	;wreg free
 13589  005B34                     __end_of_vscp_getUserID:
 13590                           	opt stack 0
 13591                           tblptru	equ	0xFF8
 13592                           tblptrh	equ	0xFF7
 13593                           tblptrl	equ	0xFF6
 13594                           tablat	equ	0xFF5
 13595                           prodh	equ	0xFF4
 13596                           prodl	equ	0xFF3
 13597                           postinc0	equ	0xFEE
 13598                           wreg	equ	0xFE8
 13599                           postdec1	equ	0xFE5
 13600                           fsr1h	equ	0xFE2
 13601                           fsr1l	equ	0xFE1
 13602                           indf2	equ	0xFDF
 13603                           postinc2	equ	0xFDE
 13604                           postdec2	equ	0xFDD
 13605                           fsr2h	equ	0xFDA
 13606                           fsr2l	equ	0xFD9
 13607                           status	equ	0xFD8
 13608                           
 13609 ;; *************** function _vscp_getMDF_URL *****************
 13610 ;; Defined at:
 13611 ;;		line 2624 in file "../main.c"
 13612 ;; Parameters:    Size  Location     Type
 13613 ;;  idx             1    wreg     unsigned char 
 13614 ;; Auto vars:     Size  Location     Type
 13615 ;;  idx             1   14[COMRAM] unsigned char 
 13616 ;; Return value:  Size  Location     Type
 13617 ;;                  1    wreg      unsigned char 
 13618 ;; Registers used:
 13619 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 13620 ;; Tracked objects:
 13621 ;;		On entry : F/0
 13622 ;;		On exit  : F/0
 13623 ;;		Unchanged: F/0
 13624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13625 ;;      Params:         0       0       0       0       0       0       0
 13626 ;;      Locals:         1       0       0       0       0       0       0
 13627 ;;      Temps:          1       0       0       0       0       0       0
 13628 ;;      Totals:         2       0       0       0       0       0       0
 13629 ;;Total ram usage:        2 bytes
 13630 ;; Hardware stack levels used:    1
 13631 ;; Hardware stack levels required when called:    2
 13632 ;; This function calls:
 13633 ;;		Nothing
 13634 ;; This function is called by:
 13635 ;;		_vscp_readStdReg
 13636 ;;		_vscp_handleProtocolEvent
 13637 ;; This function uses a non-reentrant model
 13638 ;;
 13639                           
 13640                           	psect	text54
 13641  005ADC                     __ptext54:
 13642                           	opt stack 0
 13643  005ADC                     _vscp_getMDF_URL:
 13644                           	opt stack 26
 13645                           
 13646                           ;incstack = 0
 13647                           ;incstack = 0
 13648                           ;vscp_getMDF_URL@idx stored from wreg
 13649  005ADC  CFE8 F00F          	movff	wreg,vscp_getMDF_URL@idx
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;main.c: 2625: return vscp_deviceURL[ idx ];
 13653  005AE0  500F               	movf	vscp_getMDF_URL@idx,w,c
 13654  005AE2  0F00               	addlw	low _vscp_deviceURL
 13655  005AE4  6E0E               	movwf	??_vscp_getMDF_URL& (0+255),c
 13656  005AE6  C00E  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 13657  005AEA  0E0B               	movlw	high __smallconst
 13658  005AEC  6EF7               	movwf	tblptrh,c
 13659  005AEE  0008               	tblrd		*
 13660  005AF0  50F5               	movf	tablat,w,c
 13661                           
 13662                           ; BSR set to: 0
 13663  005AF2  0012               	return	
 13664  005AF4                     __end_of_vscp_getMDF_URL:
 13665                           	opt stack 0
 13666                           tblptru	equ	0xFF8
 13667                           tblptrh	equ	0xFF7
 13668                           tblptrl	equ	0xFF6
 13669                           tablat	equ	0xFF5
 13670                           prodh	equ	0xFF4
 13671                           prodl	equ	0xFF3
 13672                           postinc0	equ	0xFEE
 13673                           wreg	equ	0xFE8
 13674                           postdec1	equ	0xFE5
 13675                           fsr1h	equ	0xFE2
 13676                           fsr1l	equ	0xFE1
 13677                           indf2	equ	0xFDF
 13678                           postinc2	equ	0xFDE
 13679                           postdec2	equ	0xFDD
 13680                           fsr2h	equ	0xFDA
 13681                           fsr2l	equ	0xFD9
 13682                           status	equ	0xFD8
 13683                           
 13684 ;; *************** function _vscp_getGUID *****************
 13685 ;; Defined at:
 13686 ;;		line 2601 in file "../main.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;  idx             1    wreg     unsigned char 
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;  idx             1   25[COMRAM] unsigned char 
 13691 ;; Return value:  Size  Location     Type
 13692 ;;                  1    wreg      unsigned char 
 13693 ;; Registers used:
 13694 ;;		wreg, status,2, status,0, cstack
 13695 ;; Tracked objects:
 13696 ;;		On entry : 0/0
 13697 ;;		On exit  : 0/0
 13698 ;;		Unchanged: 0/0
 13699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13700 ;;      Params:         0       0       0       0       0       0       0
 13701 ;;      Locals:         1       0       0       0       0       0       0
 13702 ;;      Temps:          0       0       0       0       0       0       0
 13703 ;;      Totals:         1       0       0       0       0       0       0
 13704 ;;Total ram usage:        1 bytes
 13705 ;; Hardware stack levels used:    1
 13706 ;; Hardware stack levels required when called:    3
 13707 ;; This function calls:
 13708 ;;		_readEEPROM
 13709 ;; This function is called by:
 13710 ;;		_vscp_readStdReg
 13711 ;;		_vscp_writeStdReg
 13712 ;;		_vscp_handleProtocolEvent
 13713 ;; This function uses a non-reentrant model
 13714 ;;
 13715                           
 13716                           	psect	text55
 13717  005B34                     __ptext55:
 13718                           	opt stack 0
 13719  005B34                     _vscp_getGUID:
 13720                           	opt stack 25
 13721                           
 13722                           ; BSR set to: 0
 13723                           ;incstack = 0
 13724                           ;incstack = 0
 13725                           ;vscp_getGUID@idx stored from wreg
 13726  005B34  CFE8 F01A          	movff	wreg,vscp_getGUID@idx
 13727                           
 13728                           ;main.c: 2602: return readEEPROM(0x11 + idx);
 13729  005B38  0E11               	movlw	17
 13730  005B3A  241A               	addwf	vscp_getGUID@idx,w,c
 13731  005B3C  6E16               	movwf	?_readEEPROM,c
 13732  005B3E  6A17               	clrf	?_readEEPROM+1,c
 13733  005B40  0E00               	movlw	0
 13734  005B42  2217               	addwfc	?_readEEPROM+1,f,c
 13735  005B44  EFA4  F02D         	goto	_readEEPROM	;wreg free
 13736  005B48                     __end_of_vscp_getGUID:
 13737                           	opt stack 0
 13738                           tblptru	equ	0xFF8
 13739                           tblptrh	equ	0xFF7
 13740                           tblptrl	equ	0xFF6
 13741                           tablat	equ	0xFF5
 13742                           prodh	equ	0xFF4
 13743                           prodl	equ	0xFF3
 13744                           postinc0	equ	0xFEE
 13745                           wreg	equ	0xFE8
 13746                           postdec1	equ	0xFE5
 13747                           fsr1h	equ	0xFE2
 13748                           fsr1l	equ	0xFE1
 13749                           indf2	equ	0xFDF
 13750                           postinc2	equ	0xFDE
 13751                           postdec2	equ	0xFDD
 13752                           fsr2h	equ	0xFDA
 13753                           fsr2l	equ	0xFD9
 13754                           status	equ	0xFD8
 13755                           
 13756 ;; *************** function _vscp_getSubMinorVersion *****************
 13757 ;; Defined at:
 13758 ;;		line 2590 in file "../main.c"
 13759 ;; Parameters:    Size  Location     Type
 13760 ;;		None
 13761 ;; Auto vars:     Size  Location     Type
 13762 ;;		None
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  1    wreg      unsigned char 
 13765 ;; Registers used:
 13766 ;;		wreg
 13767 ;; Tracked objects:
 13768 ;;		On entry : F/0
 13769 ;;		On exit  : F/0
 13770 ;;		Unchanged: F/0
 13771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13772 ;;      Params:         0       0       0       0       0       0       0
 13773 ;;      Locals:         0       0       0       0       0       0       0
 13774 ;;      Temps:          0       0       0       0       0       0       0
 13775 ;;      Totals:         0       0       0       0       0       0       0
 13776 ;;Total ram usage:        0 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:    2
 13779 ;; This function calls:
 13780 ;;		Nothing
 13781 ;; This function is called by:
 13782 ;;		_vscp_readStdReg
 13783 ;; This function uses a non-reentrant model
 13784 ;;
 13785                           
 13786                           	psect	text56
 13787  005C0C                     __ptext56:
 13788                           	opt stack 0
 13789  005C0C                     _vscp_getSubMinorVersion:
 13790                           	opt stack 26
 13791                           
 13792                           ; BSR set to: 0
 13793                           
 13794                           ; BSR set to: 0
 13795                           ;main.c: 2591: return 2;
 13796                           
 13797                           ;incstack = 0
 13798                           ;incstack = 0
 13799  005C0C  0C02               	retlw	2
 13800  005C0E                     __end_of_vscp_getSubMinorVersion:
 13801                           	opt stack 0
 13802                           tblptru	equ	0xFF8
 13803                           tblptrh	equ	0xFF7
 13804                           tblptrl	equ	0xFF6
 13805                           tablat	equ	0xFF5
 13806                           prodh	equ	0xFF4
 13807                           prodl	equ	0xFF3
 13808                           postinc0	equ	0xFEE
 13809                           wreg	equ	0xFE8
 13810                           postdec1	equ	0xFE5
 13811                           fsr1h	equ	0xFE2
 13812                           fsr1l	equ	0xFE1
 13813                           indf2	equ	0xFDF
 13814                           postinc2	equ	0xFDE
 13815                           postdec2	equ	0xFDD
 13816                           fsr2h	equ	0xFDA
 13817                           fsr2l	equ	0xFD9
 13818                           status	equ	0xFD8
 13819                           
 13820 ;; *************** function _vscp_getMinorVersion *****************
 13821 ;; Defined at:
 13822 ;;		line 2581 in file "../main.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;		None
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;		None
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  1    wreg      unsigned char 
 13829 ;; Registers used:
 13830 ;;		wreg
 13831 ;; Tracked objects:
 13832 ;;		On entry : F/0
 13833 ;;		On exit  : F/0
 13834 ;;		Unchanged: F/0
 13835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13836 ;;      Params:         0       0       0       0       0       0       0
 13837 ;;      Locals:         0       0       0       0       0       0       0
 13838 ;;      Temps:          0       0       0       0       0       0       0
 13839 ;;      Totals:         0       0       0       0       0       0       0
 13840 ;;Total ram usage:        0 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; Hardware stack levels required when called:    2
 13843 ;; This function calls:
 13844 ;;		Nothing
 13845 ;; This function is called by:
 13846 ;;		_vscp_readStdReg
 13847 ;; This function uses a non-reentrant model
 13848 ;;
 13849                           
 13850                           	psect	text57
 13851  005C0E                     __ptext57:
 13852                           	opt stack 0
 13853  005C0E                     _vscp_getMinorVersion:
 13854                           	opt stack 26
 13855                           
 13856                           ; BSR set to: 0
 13857                           
 13858                           ; BSR set to: 0
 13859                           ;main.c: 2582: return 2;
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;incstack = 0
 13863                           ;incstack = 0
 13864  005C0E  0C02               	retlw	2
 13865  005C10                     __end_of_vscp_getMinorVersion:
 13866                           	opt stack 0
 13867                           tblptru	equ	0xFF8
 13868                           tblptrh	equ	0xFF7
 13869                           tblptrl	equ	0xFF6
 13870                           tablat	equ	0xFF5
 13871                           prodh	equ	0xFF4
 13872                           prodl	equ	0xFF3
 13873                           postinc0	equ	0xFEE
 13874                           wreg	equ	0xFE8
 13875                           postdec1	equ	0xFE5
 13876                           fsr1h	equ	0xFE2
 13877                           fsr1l	equ	0xFE1
 13878                           indf2	equ	0xFDF
 13879                           postinc2	equ	0xFDE
 13880                           postdec2	equ	0xFDD
 13881                           fsr2h	equ	0xFDA
 13882                           fsr2l	equ	0xFD9
 13883                           status	equ	0xFD8
 13884                           
 13885 ;; *************** function _vscp_getMajorVersion *****************
 13886 ;; Defined at:
 13887 ;;		line 2572 in file "../main.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;		None
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;		None
 13892 ;; Return value:  Size  Location     Type
 13893 ;;                  1    wreg      unsigned char 
 13894 ;; Registers used:
 13895 ;;		wreg
 13896 ;; Tracked objects:
 13897 ;;		On entry : F/0
 13898 ;;		On exit  : F/0
 13899 ;;		Unchanged: F/0
 13900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13901 ;;      Params:         0       0       0       0       0       0       0
 13902 ;;      Locals:         0       0       0       0       0       0       0
 13903 ;;      Temps:          0       0       0       0       0       0       0
 13904 ;;      Totals:         0       0       0       0       0       0       0
 13905 ;;Total ram usage:        0 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    2
 13908 ;; This function calls:
 13909 ;;		Nothing
 13910 ;; This function is called by:
 13911 ;;		_vscp_readStdReg
 13912 ;; This function uses a non-reentrant model
 13913 ;;
 13914                           
 13915                           	psect	text58
 13916  005C10                     __ptext58:
 13917                           	opt stack 0
 13918  005C10                     _vscp_getMajorVersion:
 13919                           	opt stack 26
 13920                           
 13921                           ; BSR set to: 0
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;main.c: 2573: return 1;
 13925                           
 13926                           ; BSR set to: 0
 13927                           ;incstack = 0
 13928                           ;incstack = 0
 13929  005C10  0C01               	retlw	1
 13930  005C12                     __end_of_vscp_getMajorVersion:
 13931                           	opt stack 0
 13932                           tblptru	equ	0xFF8
 13933                           tblptrh	equ	0xFF7
 13934                           tblptrl	equ	0xFF6
 13935                           tablat	equ	0xFF5
 13936                           prodh	equ	0xFF4
 13937                           prodl	equ	0xFF3
 13938                           postinc0	equ	0xFEE
 13939                           wreg	equ	0xFE8
 13940                           postdec1	equ	0xFE5
 13941                           fsr1h	equ	0xFE2
 13942                           fsr1l	equ	0xFE1
 13943                           indf2	equ	0xFDF
 13944                           postinc2	equ	0xFDE
 13945                           postdec2	equ	0xFDD
 13946                           fsr2h	equ	0xFDA
 13947                           fsr2l	equ	0xFD9
 13948                           status	equ	0xFD8
 13949                           
 13950 ;; *************** function _vscp_newNodeOnline *****************
 13951 ;; Defined at:
 13952 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
 13953 ;; Parameters:    Size  Location     Type
 13954 ;;		None
 13955 ;; Auto vars:     Size  Location     Type
 13956 ;;		None
 13957 ;; Return value:  Size  Location     Type
 13958 ;;		None               void
 13959 ;; Registers used:
 13960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13961 ;; Tracked objects:
 13962 ;;		On entry : F/0
 13963 ;;		On exit  : F/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13966 ;;      Params:         0       0       0       0       0       0       0
 13967 ;;      Locals:         0       0       0       0       0       0       0
 13968 ;;      Temps:          1       0       0       0       0       0       0
 13969 ;;      Totals:         1       0       0       0       0       0       0
 13970 ;;Total ram usage:        1 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; Hardware stack levels required when called:    7
 13973 ;; This function calls:
 13974 ;;		_vscp_sendEvent
 13975 ;; This function is called by:
 13976 ;;		_vscp_handleProtocolEvent
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           	psect	text59
 13981  00587E                     __ptext59:
 13982                           	opt stack 0
 13983  00587E                     _vscp_newNodeOnline:
 13984                           	opt stack 22
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
 13988                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;incstack = 0
 13992                           ;incstack = 0
 13993  00587E  C0C5  F044         	movff	_vscp_imsg,??_vscp_newNodeOnline
 13994  005882  0E0F               	movlw	15
 13995  005884  1644               	andwf	??_vscp_newNodeOnline,f,c
 13996  005886  0444               	decf	??_vscp_newNodeOnline,w,c
 13997  005888  E10E               	bnz	l1093
 13998                           
 13999                           ; BSR set to: 0
 14000  00588A  51C3               	movf	_vscp_nickname& (0+255),w,b
 14001  00588C  EE20  F0CB         	lfsr	2,_vscp_imsg+6
 14002  005890  62DF               	cpfseq	indf2,c
 14003  005892  D009               	goto	l1093
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
 14007  005894  0E80               	movlw	128
 14008  005896  6FD3               	movwf	_vscp_omsg& (0+255),b
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
 14012  005898  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
 14016  00589A  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
 14017  00589C  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
 14018                           
 14019                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
 14020  00589E  0E03               	movlw	3
 14021  0058A0  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;vscp_firmware.c: 514: vscp_sendEvent();
 14025  0058A2  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
 14026  0058A6                     l1093:
 14027                           
 14028                           ; BSR set to: 0
 14029  0058A6  0012               	return	
 14030  0058A8                     __end_of_vscp_newNodeOnline:
 14031                           	opt stack 0
 14032                           tblptru	equ	0xFF8
 14033                           tblptrh	equ	0xFF7
 14034                           tblptrl	equ	0xFF6
 14035                           tablat	equ	0xFF5
 14036                           prodh	equ	0xFF4
 14037                           prodl	equ	0xFF3
 14038                           postinc0	equ	0xFEE
 14039                           wreg	equ	0xFE8
 14040                           postdec1	equ	0xFE5
 14041                           fsr1h	equ	0xFE2
 14042                           fsr1l	equ	0xFE1
 14043                           indf2	equ	0xFDF
 14044                           postinc2	equ	0xFDE
 14045                           postdec2	equ	0xFDD
 14046                           fsr2h	equ	0xFDA
 14047                           fsr2l	equ	0xFD9
 14048                           status	equ	0xFD8
 14049                           
 14050 ;; *************** function _vscp_handleDropNickname *****************
 14051 ;; Defined at:
 14052 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;		None
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  bytes           1   25[COMRAM] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;		None               void
 14059 ;; Registers used:
 14060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14061 ;; Tracked objects:
 14062 ;;		On entry : F/0
 14063 ;;		On exit  : F/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14066 ;;      Params:         0       0       0       0       0       0       0
 14067 ;;      Locals:         1       0       0       0       0       0       0
 14068 ;;      Temps:          0       0       0       0       0       0       0
 14069 ;;      Totals:         1       0       0       0       0       0       0
 14070 ;;Total ram usage:        1 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:    5
 14073 ;; This function calls:
 14074 ;;		_vscp_init
 14075 ;;		_vscp_writeNicknamePermanent
 14076 ;; This function is called by:
 14077 ;;		_vscp_handleProtocolEvent
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text60
 14082  0057F8                     __ptext60:
 14083                           	opt stack 0
 14084  0057F8                     _vscp_handleDropNickname:
 14085                           	opt stack 24
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;incstack = 0
 14092                           ;incstack = 0
 14093  0057F8  51C5               	movf	_vscp_imsg& (0+255),w,b
 14094  0057FA  0B0F               	andlw	15
 14095  0057FC  6E1A               	movwf	vscp_handleDropNickname@bytes,c
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14099  0057FE  501A               	movf	vscp_handleDropNickname@bytes,w,c
 14100  005800  E012               	bz	l1089
 14101                           
 14102                           ; BSR set to: 0
 14103  005802  51C3               	movf	_vscp_nickname& (0+255),w,b
 14104  005804  EE20  F0CB         	lfsr	2,_vscp_imsg+6
 14105  005808  62DF               	cpfseq	indf2,c
 14106  00580A  D00D               	goto	l1089
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 14110  00580C  041A               	decf	vscp_handleDropNickname@bytes,w,c
 14111  00580E  E005               	bz	l1088
 14112                           
 14113                           ; BSR set to: 0
 14114  005810  0E01               	movlw	1
 14115  005812  641A               	cpfsgt	vscp_handleDropNickname@bytes,c
 14116  005814  D008               	goto	l1089
 14117                           
 14118                           ; BSR set to: 0
 14119  005816  67CC               	tstfsz	(_vscp_imsg+7)& (0+255),b
 14120  005818  D006               	goto	l1089
 14121  00581A                     l1088:
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
 14125  00581A  69C3               	setf	_vscp_nickname& (0+255),b
 14126                           
 14127                           ; BSR set to: 0
 14128                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
 14129  00581C  0EFF               	movlw	255
 14130  00581E  ECC0  F02D         	call	_vscp_writeNicknamePermanent
 14131                           
 14132                           ;vscp_firmware.c: 481: vscp_init();
 14133  005822  ECE9  F02A         	call	_vscp_init	;wreg free
 14134  005826                     l1089:
 14135                           
 14136                           ; BSR set to: 0
 14137  005826  0012               	return	
 14138  005828                     __end_of_vscp_handleDropNickname:
 14139                           	opt stack 0
 14140                           tblptru	equ	0xFF8
 14141                           tblptrh	equ	0xFF7
 14142                           tblptrl	equ	0xFF6
 14143                           tablat	equ	0xFF5
 14144                           prodh	equ	0xFF4
 14145                           prodl	equ	0xFF3
 14146                           postinc0	equ	0xFEE
 14147                           wreg	equ	0xFE8
 14148                           postdec1	equ	0xFE5
 14149                           fsr1h	equ	0xFE2
 14150                           fsr1l	equ	0xFE1
 14151                           indf2	equ	0xFDF
 14152                           postinc2	equ	0xFDE
 14153                           postdec2	equ	0xFDD
 14154                           fsr2h	equ	0xFDA
 14155                           fsr2l	equ	0xFD9
 14156                           status	equ	0xFD8
 14157                           
 14158 ;; *************** function _vscp_init *****************
 14159 ;; Defined at:
 14160 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
 14161 ;; Parameters:    Size  Location     Type
 14162 ;;		None
 14163 ;; Auto vars:     Size  Location     Type
 14164 ;;		None
 14165 ;; Return value:  Size  Location     Type
 14166 ;;		None               void
 14167 ;; Registers used:
 14168 ;;		wreg, status,2, cstack
 14169 ;; Tracked objects:
 14170 ;;		On entry : 0/0
 14171 ;;		On exit  : F/0
 14172 ;;		Unchanged: 0/0
 14173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14174 ;;      Params:         0       0       0       0       0       0       0
 14175 ;;      Locals:         0       0       0       0       0       0       0
 14176 ;;      Temps:          0       0       0       0       0       0       0
 14177 ;;      Totals:         0       0       0       0       0       0       0
 14178 ;;Total ram usage:        0 bytes
 14179 ;; Hardware stack levels used:    1
 14180 ;; Hardware stack levels required when called:    4
 14181 ;; This function calls:
 14182 ;;		_vscp_readNicknamePermanent
 14183 ;; This function is called by:
 14184 ;;		_main
 14185 ;;		_vscp_handleDropNickname
 14186 ;;		_vscp_handleProtocolEvent
 14187 ;; This function uses a non-reentrant model
 14188 ;;
 14189                           
 14190                           	psect	text61
 14191  0055D2                     __ptext61:
 14192                           	opt stack 0
 14193  0055D2                     _vscp_init:
 14194                           	opt stack 24
 14195                           
 14196                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
 14197                           
 14198                           ; BSR set to: 0
 14199                           ;incstack = 0
 14200                           ;incstack = 0
 14201  0055D2  0E02               	movlw	2
 14202  0055D4  6E4C               	movwf	_vscp_initledfunc,c
 14203                           
 14204                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
 14205  0055D6  ECEF  F02D         	call	_vscp_readNicknamePermanent	;wreg free
 14206  0055DA  0100               	movlb	0	; () banked
 14207  0055DC  6FC3               	movwf	_vscp_nickname& (0+255),b
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
 14211  0055DE  67C3               	tstfsz	_vscp_nickname& (0+255),b
 14212  0055E0  D001               	goto	l1030
 14213                           
 14214                           ; BSR set to: 0
 14215  0055E2  69C3               	setf	_vscp_nickname& (0+255),b
 14216  0055E4                     l1030:
 14217                           
 14218                           ; BSR set to: 0
 14219                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
 14220  0055E4  6BC5               	clrf	_vscp_imsg& (0+255),b
 14221                           
 14222                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
 14223  0055E6  6BC6               	clrf	(_vscp_imsg+1)& (0+255),b
 14224                           
 14225                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
 14226  0055E8  6BC7               	clrf	(_vscp_imsg+2)& (0+255),b
 14227  0055EA  6BC8               	clrf	(_vscp_imsg+3)& (0+255),b
 14228                           
 14229                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
 14230  0055EC  6BC9               	clrf	(_vscp_imsg+4)& (0+255),b
 14231                           
 14232                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
 14233  0055EE  6BD3               	clrf	_vscp_omsg& (0+255),b
 14234                           
 14235                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
 14236  0055F0  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
 14237                           
 14238                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
 14239  0055F2  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
 14240  0055F4  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
 14241                           
 14242                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
 14243  0055F6  6BD7               	clrf	(_vscp_omsg+4)& (0+255),b
 14244                           
 14245                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
 14246  0055F8  6A4A               	clrf	_vscp_alarmstatus,c
 14247                           
 14248                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
 14249  0055FA  6A4F               	clrf	_vscp_probe_address,c
 14250                           
 14251                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
 14252  0055FC  6BC4               	clrf	_vscp_node_state& (0+255),b
 14253                           
 14254                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
 14255  0055FE  6A4E               	clrf	_vscp_node_substate,c
 14256                           
 14257                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
 14258  005600  6A50               	clrf	_vscp_probe_cnt,c
 14259                           
 14260                           ;vscp_firmware.c: 150: vscp_page_select = 0;
 14261  005602  6A46               	clrf	_vscp_page_select,c
 14262  005604  6A47               	clrf	_vscp_page_select+1,c
 14263                           
 14264                           ;vscp_firmware.c: 153: vscp_timer = 0;
 14265  005606  6BBB               	clrf	_vscp_timer& (0+255),b	;volatile
 14266  005608  6BBC               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14267                           
 14268                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
 14269  00560A  6BB9               	clrf	_vscp_configtimer& (0+255),b	;volatile
 14270  00560C  6BBA               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 14271                           
 14272                           ;vscp_firmware.c: 155: vscp_second = 0;
 14273  00560E  6A51               	clrf	_vscp_second,c
 14274                           
 14275                           ;vscp_firmware.c: 156: vscp_minute = 0;
 14276  005610  6A4D               	clrf	_vscp_minute,c
 14277                           
 14278                           ;vscp_firmware.c: 157: vscp_hour = 0;
 14279  005612  6BC1               	clrf	_vscp_hour& (0+255),b
 14280                           
 14281                           ; BSR set to: 0
 14282  005614  0012               	return	
 14283  005616                     __end_of_vscp_init:
 14284                           	opt stack 0
 14285                           tblptru	equ	0xFF8
 14286                           tblptrh	equ	0xFF7
 14287                           tblptrl	equ	0xFF6
 14288                           tablat	equ	0xFF5
 14289                           prodh	equ	0xFF4
 14290                           prodl	equ	0xFF3
 14291                           postinc0	equ	0xFEE
 14292                           wreg	equ	0xFE8
 14293                           postdec1	equ	0xFE5
 14294                           fsr1h	equ	0xFE2
 14295                           fsr1l	equ	0xFE1
 14296                           indf2	equ	0xFDF
 14297                           postinc2	equ	0xFDE
 14298                           postdec2	equ	0xFDD
 14299                           fsr2h	equ	0xFDA
 14300                           fsr2l	equ	0xFD9
 14301                           status	equ	0xFD8
 14302                           
 14303 ;; *************** function _vscp_readNicknamePermanent *****************
 14304 ;; Defined at:
 14305 ;;		line 2775 in file "../main.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;		None
 14308 ;; Auto vars:     Size  Location     Type
 14309 ;;		None
 14310 ;; Return value:  Size  Location     Type
 14311 ;;                  1    wreg      unsigned char 
 14312 ;; Registers used:
 14313 ;;		wreg, status,2, cstack
 14314 ;; Tracked objects:
 14315 ;;		On entry : 0/0
 14316 ;;		On exit  : 0/0
 14317 ;;		Unchanged: 0/0
 14318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14319 ;;      Params:         0       0       0       0       0       0       0
 14320 ;;      Locals:         0       0       0       0       0       0       0
 14321 ;;      Temps:          0       0       0       0       0       0       0
 14322 ;;      Totals:         0       0       0       0       0       0       0
 14323 ;;Total ram usage:        0 bytes
 14324 ;; Hardware stack levels used:    1
 14325 ;; Hardware stack levels required when called:    3
 14326 ;; This function calls:
 14327 ;;		_readEEPROM
 14328 ;; This function is called by:
 14329 ;;		_vscp_init
 14330 ;; This function uses a non-reentrant model
 14331 ;;
 14332                           
 14333                           	psect	text62
 14334  005BDE                     __ptext62:
 14335                           	opt stack 0
 14336  005BDE                     _vscp_readNicknamePermanent:
 14337                           	opt stack 24
 14338                           
 14339                           ;main.c: 2776: return readEEPROM( 0x01 );
 14340                           
 14341                           ; BSR set to: 0
 14342                           ;incstack = 0
 14343                           ;incstack = 0
 14344  005BDE  6A17               	clrf	?_readEEPROM+1,c
 14345  005BE0  0E01               	movlw	1
 14346  005BE2  6E16               	movwf	?_readEEPROM,c
 14347  005BE4  EFA4  F02D         	goto	_readEEPROM	;wreg free
 14348  005BE8                     __end_of_vscp_readNicknamePermanent:
 14349                           	opt stack 0
 14350                           tblptru	equ	0xFF8
 14351                           tblptrh	equ	0xFF7
 14352                           tblptrl	equ	0xFF6
 14353                           tablat	equ	0xFF5
 14354                           prodh	equ	0xFF4
 14355                           prodl	equ	0xFF3
 14356                           postinc0	equ	0xFEE
 14357                           wreg	equ	0xFE8
 14358                           postdec1	equ	0xFE5
 14359                           fsr1h	equ	0xFE2
 14360                           fsr1l	equ	0xFE1
 14361                           indf2	equ	0xFDF
 14362                           postinc2	equ	0xFDE
 14363                           postdec2	equ	0xFDD
 14364                           fsr2h	equ	0xFDA
 14365                           fsr2l	equ	0xFD9
 14366                           status	equ	0xFD8
 14367                           
 14368 ;; *************** function _readEEPROM *****************
 14369 ;; Defined at:
 14370 ;;		line 94 in file "../../vscp_firmware/pic/common/eeprom.c"
 14371 ;; Parameters:    Size  Location     Type
 14372 ;;  address         2   21[COMRAM] unsigned short 
 14373 ;; Auto vars:     Size  Location     Type
 14374 ;;  data            1   24[COMRAM] unsigned char 
 14375 ;; Return value:  Size  Location     Type
 14376 ;;                  1    wreg      unsigned char 
 14377 ;; Registers used:
 14378 ;;		wreg, status,2
 14379 ;; Tracked objects:
 14380 ;;		On entry : 0/0
 14381 ;;		On exit  : 0/0
 14382 ;;		Unchanged: 0/0
 14383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14384 ;;      Params:         2       0       0       0       0       0       0
 14385 ;;      Locals:         2       0       0       0       0       0       0
 14386 ;;      Temps:          0       0       0       0       0       0       0
 14387 ;;      Totals:         4       0       0       0       0       0       0
 14388 ;;Total ram usage:        4 bytes
 14389 ;; Hardware stack levels used:    1
 14390 ;; Hardware stack levels required when called:    2
 14391 ;; This function calls:
 14392 ;;		Nothing
 14393 ;; This function is called by:
 14394 ;;		_doWork
 14395 ;;		_doOneSecondWork
 14396 ;;		_sendTempEvent
 14397 ;;		_getCalibrationValue
 14398 ;;		_writeCoeffs2Ram
 14399 ;;		_handle_sync
 14400 ;;		_vscp_readAppReg
 14401 ;;		_vscp_writeAppReg
 14402 ;;		_vscp_getGUID
 14403 ;;		_vscp_getUserID
 14404 ;;		_vscp_getManufacturerId
 14405 ;;		_vscp_getZone
 14406 ;;		_vscp_getSubzone
 14407 ;;		_vscp_readNicknamePermanent
 14408 ;;		_vscp_getSegmentCRC
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           	psect	text63
 14413  005B48                     __ptext63:
 14414                           	opt stack 0
 14415  005B48                     _readEEPROM:
 14416                           	opt stack 26
 14417                           
 14418                           ;eeprom.c: 95: uint8_t data;
 14419                           ;eeprom.c: 100: EEADR = address & 0xff;
 14420                           
 14421                           ;incstack = 0
 14422                           ;incstack = 0
 14423  005B48  C016  FFA9         	movff	readEEPROM@address,4009	;volatile
 14424                           
 14425                           ;eeprom.c: 101: EECON1bits.EEPGD= 0;
 14426  005B4C  9EA6               	bcf	4006,7,c	;volatile
 14427                           
 14428                           ;eeprom.c: 102: EECON1bits.CFGS = 0;
 14429  005B4E  9CA6               	bcf	4006,6,c	;volatile
 14430                           
 14431                           ;eeprom.c: 103: EECON1bits.RD = 1;
 14432  005B50  80A6               	bsf	4006,0,c	;volatile
 14433  005B52  F000               	nop		;# 
 14434                           
 14435                           ;eeprom.c: 105: data = EEDATA;
 14436  005B54  CFA8 F019          	movff	4008,readEEPROM@data	;volatile
 14437                           
 14438                           ;eeprom.c: 107: return data;
 14439  005B58  5019               	movf	readEEPROM@data,w,c
 14440  005B5A  0012               	return	
 14441  005B5C                     __end_of_readEEPROM:
 14442                           	opt stack 0
 14443                           tblptru	equ	0xFF8
 14444                           tblptrh	equ	0xFF7
 14445                           tblptrl	equ	0xFF6
 14446                           tablat	equ	0xFF5
 14447                           prodh	equ	0xFF4
 14448                           prodl	equ	0xFF3
 14449                           postinc0	equ	0xFEE
 14450                           wreg	equ	0xFE8
 14451                           postdec1	equ	0xFE5
 14452                           fsr1h	equ	0xFE2
 14453                           fsr1l	equ	0xFE1
 14454                           indf2	equ	0xFDF
 14455                           postinc2	equ	0xFDE
 14456                           postdec2	equ	0xFDD
 14457                           fsr2h	equ	0xFDA
 14458                           fsr2l	equ	0xFD9
 14459                           status	equ	0xFD8
 14460                           
 14461 ;; *************** function _vscp_handleSetNickname *****************
 14462 ;; Defined at:
 14463 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
 14464 ;; Parameters:    Size  Location     Type
 14465 ;;		None
 14466 ;; Auto vars:     Size  Location     Type
 14467 ;;		None
 14468 ;; Return value:  Size  Location     Type
 14469 ;;		None               void
 14470 ;; Registers used:
 14471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14472 ;; Tracked objects:
 14473 ;;		On entry : F/0
 14474 ;;		On exit  : 0/0
 14475 ;;		Unchanged: 0/0
 14476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14477 ;;      Params:         0       0       0       0       0       0       0
 14478 ;;      Locals:         0       0       0       0       0       0       0
 14479 ;;      Temps:          0       0       0       0       0       0       0
 14480 ;;      Totals:         0       0       0       0       0       0       0
 14481 ;;Total ram usage:        0 bytes
 14482 ;; Hardware stack levels used:    1
 14483 ;; Hardware stack levels required when called:    4
 14484 ;; This function calls:
 14485 ;;		_vscp_writeNicknamePermanent
 14486 ;;		_vscp_setSegmentCRC
 14487 ;; This function is called by:
 14488 ;;		_vscp_handleProtocolEvent
 14489 ;; This function uses a non-reentrant model
 14490 ;;
 14491                           
 14492                           	psect	text64
 14493  005992                     __ptext64:
 14494                           	opt stack 0
 14495  005992                     _vscp_handleSetNickname:
 14496                           	opt stack 25
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
 14500                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 14501                           
 14502                           ;incstack = 0
 14503                           ;incstack = 0
 14504  005992  51C5               	movf	_vscp_imsg& (0+255),w,b
 14505  005994  0B0F               	andlw	15
 14506  005996  0A02               	xorlw	2
 14507  005998  E10D               	bnz	l1082
 14508                           
 14509                           ; BSR set to: 0
 14510  00599A  51C3               	movf	_vscp_nickname& (0+255),w,b
 14511  00599C  EE20  F0CB         	lfsr	2,_vscp_imsg+6
 14512  0059A0  62DF               	cpfseq	indf2,c
 14513  0059A2  D008               	goto	l1082
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
 14517  0059A4  C0CC  F0C3         	movff	_vscp_imsg+7,_vscp_nickname
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
 14521  0059A8  51C3               	movf	_vscp_nickname& (0+255),w,b
 14522  0059AA  ECC0  F02D         	call	_vscp_writeNicknamePermanent
 14523                           
 14524                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
 14525  0059AE  0E40               	movlw	64
 14526  0059B0  ECB7  F02D         	call	_vscp_setSegmentCRC
 14527  0059B4                     l1082:
 14528  0059B4  0012               	return	
 14529  0059B6                     __end_of_vscp_handleSetNickname:
 14530                           	opt stack 0
 14531                           tblptru	equ	0xFF8
 14532                           tblptrh	equ	0xFF7
 14533                           tblptrl	equ	0xFF6
 14534                           tablat	equ	0xFF5
 14535                           prodh	equ	0xFF4
 14536                           prodl	equ	0xFF3
 14537                           postinc0	equ	0xFEE
 14538                           wreg	equ	0xFE8
 14539                           postdec1	equ	0xFE5
 14540                           fsr1h	equ	0xFE2
 14541                           fsr1l	equ	0xFE1
 14542                           indf2	equ	0xFDF
 14543                           postinc2	equ	0xFDE
 14544                           postdec2	equ	0xFDD
 14545                           fsr2h	equ	0xFDA
 14546                           fsr2l	equ	0xFD9
 14547                           status	equ	0xFD8
 14548                           
 14549 ;; *************** function _vscp_handleHeartbeat *****************
 14550 ;; Defined at:
 14551 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
 14552 ;; Parameters:    Size  Location     Type
 14553 ;;		None
 14554 ;; Auto vars:     Size  Location     Type
 14555 ;;		None
 14556 ;; Return value:  Size  Location     Type
 14557 ;;		None               void
 14558 ;; Registers used:
 14559 ;;		wreg, status,2, status,0, cstack
 14560 ;; Tracked objects:
 14561 ;;		On entry : F/0
 14562 ;;		On exit  : 0/0
 14563 ;;		Unchanged: 0/0
 14564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14565 ;;      Params:         0       0       0       0       0       0       0
 14566 ;;      Locals:         0       0       0       0       0       0       0
 14567 ;;      Temps:          0       0       0       0       0       0       0
 14568 ;;      Totals:         0       0       0       0       0       0       0
 14569 ;;Total ram usage:        0 bytes
 14570 ;; Hardware stack levels used:    1
 14571 ;; Hardware stack levels required when called:    4
 14572 ;; This function calls:
 14573 ;;		_vscp_writeNicknamePermanent
 14574 ;;		_vscp_getSegmentCRC
 14575 ;;		_vscp_setSegmentCRC
 14576 ;; This function is called by:
 14577 ;;		_vscp_handleProtocolEvent
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           	psect	text65
 14582  005698                     __ptext65:
 14583                           	opt stack 0
 14584  005698                     _vscp_handleHeartbeat:
 14585                           	opt stack 25
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
 14589                           
 14590                           ;incstack = 0
 14591                           ;incstack = 0
 14592  005698  ECF4  F02D         	call	_vscp_getSegmentCRC	;wreg free
 14593  00569C  0900               	iorlw	0
 14594  00569E  E116               	bnz	l11149
 14595                           
 14596                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 14597                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 14598  0056A0  0100               	movlb	0	; () banked
 14599  0056A2  51C5               	movf	_vscp_imsg& (0+255),w,b
 14600  0056A4  0B0F               	andlw	15
 14601  0056A6  0A05               	xorlw	5
 14602  0056A8  E115               	bnz	l1078
 14603                           
 14604                           ; BSR set to: 0
 14605  0056AA  ECF4  F02D         	call	_vscp_getSegmentCRC	;wreg free
 14606  0056AE  0100               	movlb	0	; () banked
 14607  0056B0  19CB               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 14608  0056B2  E010               	bz	l1078
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14612  0056B4  51CB               	movf	(_vscp_imsg+6)& (0+255),w,b
 14613  0056B6  ECB7  F02D         	call	_vscp_setSegmentCRC
 14614                           
 14615                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
 14616  0056BA  0100               	movlb	0	; () banked
 14617  0056BC  69C3               	setf	_vscp_nickname& (0+255),b
 14618                           
 14619                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
 14620  0056BE  0EFF               	movlw	255
 14621  0056C0  ECC0  F02D         	call	_vscp_writeNicknamePermanent
 14622                           
 14623                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
 14624  0056C4  0E01               	movlw	1
 14625  0056C6  0100               	movlb	0	; () banked
 14626  0056C8  6FC4               	movwf	_vscp_node_state& (0+255),b
 14627  0056CA  D004               	goto	l1078
 14628  0056CC                     l11149:
 14629                           
 14630                           ;vscp_firmware.c: 411: else {
 14631                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 14632  0056CC  0100               	movlb	0	; () banked
 14633  0056CE  51CB               	movf	(_vscp_imsg+6)& (0+255),w,b
 14634  0056D0  ECB7  F02D         	call	_vscp_setSegmentCRC
 14635  0056D4                     l1078:
 14636  0056D4  0012               	return	
 14637  0056D6                     __end_of_vscp_handleHeartbeat:
 14638                           	opt stack 0
 14639                           tblptru	equ	0xFF8
 14640                           tblptrh	equ	0xFF7
 14641                           tblptrl	equ	0xFF6
 14642                           tablat	equ	0xFF5
 14643                           prodh	equ	0xFF4
 14644                           prodl	equ	0xFF3
 14645                           postinc0	equ	0xFEE
 14646                           wreg	equ	0xFE8
 14647                           postdec1	equ	0xFE5
 14648                           fsr1h	equ	0xFE2
 14649                           fsr1l	equ	0xFE1
 14650                           indf2	equ	0xFDF
 14651                           postinc2	equ	0xFDE
 14652                           postdec2	equ	0xFDD
 14653                           fsr2h	equ	0xFDA
 14654                           fsr2l	equ	0xFD9
 14655                           status	equ	0xFD8
 14656                           
 14657 ;; *************** function _vscp_goBootloaderMode *****************
 14658 ;; Defined at:
 14659 ;;		line 2756 in file "../main.c"
 14660 ;; Parameters:    Size  Location     Type
 14661 ;;  algorithm       1    wreg     unsigned char 
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;  algorithm       1   16[COMRAM] unsigned char 
 14664 ;; Return value:  Size  Location     Type
 14665 ;;		None               void
 14666 ;; Registers used:
 14667 ;;		wreg, status,2, status,0, cstack
 14668 ;; Tracked objects:
 14669 ;;		On entry : F/0
 14670 ;;		On exit  : 0/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14673 ;;      Params:         0       0       0       0       0       0       0
 14674 ;;      Locals:         1       0       0       0       0       0       0
 14675 ;;      Temps:          0       0       0       0       0       0       0
 14676 ;;      Totals:         1       0       0       0       0       0       0
 14677 ;;Total ram usage:        1 bytes
 14678 ;; Hardware stack levels used:    1
 14679 ;; Hardware stack levels required when called:    3
 14680 ;; This function calls:
 14681 ;;		_writeEEPROM
 14682 ;;		_ECANSetOperationMode
 14683 ;; This function is called by:
 14684 ;;		_vscp_handleProtocolEvent
 14685 ;; This function uses a non-reentrant model
 14686 ;;
 14687                           
 14688                           	psect	text66
 14689  005A1E                     __ptext66:
 14690                           	opt stack 0
 14691  005A1E                     _vscp_goBootloaderMode:
 14692                           	opt stack 26
 14693                           
 14694                           ;incstack = 0
 14695                           ;incstack = 0
 14696                           ;vscp_goBootloaderMode@algorithm stored from wreg
 14697  005A1E  CFE8 F011          	movff	wreg,vscp_goBootloaderMode@algorithm
 14698                           
 14699                           ; BSR set to: 0
 14700                           ;main.c: 2757: if ( 0x01 != algorithm ) return;
 14701  005A22  0411               	decf	vscp_goBootloaderMode@algorithm,w,c
 14702  005A24  E10A               	bnz	l593
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;main.c: 2761: writeEEPROM(0x00, 0xff);
 14706  005A26  6A0F               	clrf	?_writeEEPROM+1,c
 14707  005A28  6A0E               	clrf	?_writeEEPROM,c
 14708  005A2A  0EFF               	movlw	255
 14709  005A2C  6810               	setf	?_writeEEPROM+2,c
 14710  005A2E  ECA4  F02C         	call	_writeEEPROM	;wreg free
 14711                           
 14712                           ;main.c: 2764: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 14713  005A32  0E80               	movlw	128
 14714  005A34  EC7A  F02D         	call	_ECANSetOperationMode
 14715  005A38  00FF               	reset		;# 
 14716  005A3A                     l593:
 14717  005A3A  0012               	return	
 14718  005A3C                     __end_of_vscp_goBootloaderMode:
 14719                           	opt stack 0
 14720                           tblptru	equ	0xFF8
 14721                           tblptrh	equ	0xFF7
 14722                           tblptrl	equ	0xFF6
 14723                           tablat	equ	0xFF5
 14724                           prodh	equ	0xFF4
 14725                           prodl	equ	0xFF3
 14726                           postinc0	equ	0xFEE
 14727                           wreg	equ	0xFE8
 14728                           postdec1	equ	0xFE5
 14729                           fsr1h	equ	0xFE2
 14730                           fsr1l	equ	0xFE1
 14731                           indf2	equ	0xFDF
 14732                           postinc2	equ	0xFDE
 14733                           postdec2	equ	0xFDD
 14734                           fsr2h	equ	0xFDA
 14735                           fsr2l	equ	0xFD9
 14736                           status	equ	0xFD8
 14737                           
 14738 ;; *************** function _vscp_getMatrixInfo *****************
 14739 ;; Defined at:
 14740 ;;		line 2691 in file "../main.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;  pData           1    wreg     PTR unsigned char 
 14743 ;;		 -> vscp_omsg(13), 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;  pData           1   13[COMRAM] PTR unsigned char 
 14746 ;;		 -> vscp_omsg(13), 
 14747 ;;  i               1   14[COMRAM] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;		None               void
 14750 ;; Registers used:
 14751 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14752 ;; Tracked objects:
 14753 ;;		On entry : F/0
 14754 ;;		On exit  : F/0
 14755 ;;		Unchanged: F/0
 14756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14757 ;;      Params:         0       0       0       0       0       0       0
 14758 ;;      Locals:         2       0       0       0       0       0       0
 14759 ;;      Temps:          0       0       0       0       0       0       0
 14760 ;;      Totals:         2       0       0       0       0       0       0
 14761 ;;Total ram usage:        2 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    2
 14764 ;; This function calls:
 14765 ;;		Nothing
 14766 ;; This function is called by:
 14767 ;;		_vscp_handleProtocolEvent
 14768 ;; This function uses a non-reentrant model
 14769 ;;
 14770                           
 14771                           	psect	text67
 14772  005A92                     __ptext67:
 14773                           	opt stack 0
 14774  005A92                     _vscp_getMatrixInfo:
 14775                           	opt stack 27
 14776                           
 14777                           ;incstack = 0
 14778                           ;incstack = 0
 14779                           ;vscp_getMatrixInfo@pData stored from wreg
 14780  005A92  CFE8 F00E          	movff	wreg,vscp_getMatrixInfo@pData
 14781                           
 14782                           ; BSR set to: 0
 14783                           ;main.c: 2692: uint8_t i;
 14784                           ;main.c: 2696: for (i = 0; i < 8; i++) {
 14785  005A96  6A0F               	clrf	vscp_getMatrixInfo@i,c
 14786  005A98                     l8095:
 14787                           
 14788                           ; BSR set to: 0
 14789                           ;main.c: 2697: pData[ i ] = 0;
 14790  005A98  500E               	movf	vscp_getMatrixInfo@pData,w,c
 14791  005A9A  240F               	addwf	vscp_getMatrixInfo@i,w,c
 14792  005A9C  6ED9               	movwf	fsr2l,c
 14793  005A9E  6ADA               	clrf	fsr2h,c
 14794  005AA0  6ADF               	clrf	indf2,c
 14795                           
 14796                           ; BSR set to: 0
 14797  005AA2  2A0F               	incf	vscp_getMatrixInfo@i,f,c
 14798                           
 14799                           ; BSR set to: 0
 14800  005AA4  0E07               	movlw	7
 14801  005AA6  640F               	cpfsgt	vscp_getMatrixInfo@i,c
 14802  005AA8  D7F7               	goto	l8095
 14803                           
 14804                           ; BSR set to: 0
 14805  005AAA  0C07               	retlw	7
 14806  005AAC                     __end_of_vscp_getMatrixInfo:
 14807                           	opt stack 0
 14808                           tblptru	equ	0xFF8
 14809                           tblptrh	equ	0xFF7
 14810                           tblptrl	equ	0xFF6
 14811                           tablat	equ	0xFF5
 14812                           prodh	equ	0xFF4
 14813                           prodl	equ	0xFF3
 14814                           postinc0	equ	0xFEE
 14815                           wreg	equ	0xFE8
 14816                           postdec1	equ	0xFE5
 14817                           fsr1h	equ	0xFE2
 14818                           fsr1l	equ	0xFE1
 14819                           indf2	equ	0xFDF
 14820                           postinc2	equ	0xFDE
 14821                           postdec2	equ	0xFDD
 14822                           fsr2h	equ	0xFDA
 14823                           fsr2l	equ	0xFD9
 14824                           status	equ	0xFD8
 14825                           
 14826 ;; *************** function _vscp_handleProbeState *****************
 14827 ;; Defined at:
 14828 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
 14829 ;; Parameters:    Size  Location     Type
 14830 ;;		None
 14831 ;; Auto vars:     Size  Location     Type
 14832 ;;		None
 14833 ;; Return value:  Size  Location     Type
 14834 ;;		None               void
 14835 ;; Registers used:
 14836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14837 ;; Tracked objects:
 14838 ;;		On entry : 0/0
 14839 ;;		On exit  : F/0
 14840 ;;		Unchanged: 0/0
 14841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14842 ;;      Params:         0       0       0       0       0       0       0
 14843 ;;      Locals:         0       0       0       0       0       0       0
 14844 ;;      Temps:          0       0       0       0       0       0       0
 14845 ;;      Totals:         0       0       0       0       0       0       0
 14846 ;;Total ram usage:        0 bytes
 14847 ;; Hardware stack levels used:    1
 14848 ;; Hardware stack levels required when called:    8
 14849 ;; This function calls:
 14850 ;;		_vscp_goActiveState
 14851 ;;		_vscp_sendEvent
 14852 ;;		_vscp_writeNicknamePermanent
 14853 ;;		_vscp_setSegmentCRC
 14854 ;; This function is called by:
 14855 ;;		_main
 14856 ;; This function uses a non-reentrant model
 14857 ;;
 14858                           
 14859                           	psect	text68
 14860  0049D8                     __ptext68:
 14861                           	opt stack 0
 14862  0049D8                     _vscp_handleProbeState:
 14863                           	opt stack 22
 14864                           
 14865                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;incstack = 0
 14869                           ;incstack = 0
 14870  0049D8  D055               	goto	l9669
 14871  0049DA                     l9599:
 14872                           
 14873                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
 14874  0049DA  284F               	incf	_vscp_probe_address,w,c
 14875  0049DC  E011               	bz	l9615
 14876                           
 14877                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
 14878  0049DE  0E81               	movlw	129
 14879  0049E0  0100               	movlb	0	; () banked
 14880  0049E2  6FD3               	movwf	_vscp_omsg& (0+255),b
 14881                           
 14882                           ; BSR set to: 0
 14883                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
 14884  0049E4  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
 14885                           
 14886                           ; BSR set to: 0
 14887                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
 14888  0049E6  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
 14889  0049E8  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
 14890                           
 14891                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
 14892  0049EA  0E02               	movlw	2
 14893  0049EC  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
 14897  0049EE  C04F  F0D8         	movff	_vscp_probe_address,_vscp_omsg+5
 14898                           
 14899                           ; BSR set to: 0
 14900                           ;vscp_firmware.c: 216: vscp_sendEvent();
 14901  0049F2  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
 14905  0049F6  0E01               	movlw	1
 14906  0049F8  6E4E               	movwf	_vscp_node_substate,c
 14907  0049FA                     l9613:
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;vscp_firmware.c: 219: vscp_timer = 0;
 14911  0049FA  6BBB               	clrf	_vscp_timer& (0+255),b	;volatile
 14912  0049FC  6BBC               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 14913                           
 14914                           ;vscp_firmware.c: 221: }
 14915  0049FE  D048               	goto	l1045
 14916  004A00                     l9615:
 14917                           
 14918                           ;vscp_firmware.c: 222: else {
 14919                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
 14920  004A00  0E04               	movlw	4
 14921  004A02  0100               	movlb	0	; () banked
 14922  004A04  6FC4               	movwf	_vscp_node_state& (0+255),b
 14923                           
 14924                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
 14925  004A06  0E81               	movlw	129
 14926  004A08  6FD3               	movwf	_vscp_omsg& (0+255),b
 14927                           
 14928                           ; BSR set to: 0
 14929                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
 14930  004A0A  69D8               	setf	(_vscp_omsg+5)& (0+255),b
 14931                           
 14932                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
 14933  004A0C  0E07               	movlw	7
 14934  004A0E  6FD4               	movwf	(_vscp_omsg+1)& (0+255),b
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
 14938  004A10  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
 14939  004A12  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
 14940                           
 14941                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
 14942  004A14  0E03               	movlw	3
 14943  004A16  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
 14944                           
 14945                           ; BSR set to: 0
 14946                           ;vscp_firmware.c: 235: vscp_sendEvent();
 14947  004A18  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
 14948  004A1C  D039               	goto	l1045
 14949  004A1E                     l1046:
 14950                           
 14951                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
 14952  004A1E  0100               	movlb	0	; () banked
 14953  004A20  AFC5               	btfss	_vscp_imsg& (0+255),7,b
 14954  004A22  D00F               	goto	l9639
 14955                           
 14956                           ; BSR set to: 0
 14957                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
 14958                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
 14959  004A24  51C8               	movf	(_vscp_imsg+3)& (0+255),w,b
 14960  004A26  11C7               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 14961  004A28  E133               	bnz	l1045
 14962                           
 14963                           ; BSR set to: 0
 14964  004A2A  51C9               	movf	(_vscp_imsg+4)& (0+255),w,b
 14965  004A2C  0A03               	xorlw	3
 14966  004A2E  E130               	bnz	l1045
 14967                           
 14968                           ; BSR set to: 0
 14969                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
 14970  004A30  664F               	tstfsz	_vscp_probe_address,c
 14971  004A32  D003               	goto	l9633
 14972                           
 14973                           ; BSR set to: 0
 14974                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
 14975  004A34  0E02               	movlw	2
 14976  004A36  6FC4               	movwf	_vscp_node_state& (0+255),b
 14977  004A38  D7E0               	goto	l9613
 14978  004A3A                     l9633:
 14979                           
 14980                           ; BSR set to: 0
 14981                           ;vscp_firmware.c: 257: else {
 14982                           ;vscp_firmware.c: 260: vscp_probe_address++;
 14983  004A3A  2A4F               	incf	_vscp_probe_address,f,c
 14984                           
 14985                           ; BSR set to: 0
 14986                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
 14987  004A3C  6A4E               	clrf	_vscp_node_substate,c
 14988  004A3E                     l9637:
 14989                           
 14990                           ; BSR set to: 0
 14991                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
 14992  004A3E  6A50               	clrf	_vscp_probe_cnt,c
 14993  004A40  D027               	goto	l1045
 14994  004A42                     l9639:
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;vscp_firmware.c: 267: else {
 14998                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
 14999  004A42  0EE9               	movlw	233
 15000  004A44  5DBB               	subwf	_vscp_timer& (0+255),w,b	;volatile
 15001  004A46  0E03               	movlw	3
 15002  004A48  59BC               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 15003  004A4A  E322               	bnc	l1045
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
 15007  004A4C  2A50               	incf	_vscp_probe_cnt,f,c
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
 15011  004A4E  0E02               	movlw	2
 15012  004A50  6450               	cpfsgt	_vscp_probe_cnt,c
 15013  004A52  D016               	goto	l1053
 15014                           
 15015                           ; BSR set to: 0
 15016                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
 15017  004A54  664F               	tstfsz	_vscp_probe_address,c
 15018  004A56  D005               	goto	l1054
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;vscp_firmware.c: 279: vscp_probe_address++;
 15022  004A58  2A4F               	incf	_vscp_probe_address,f,c
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
 15026  004A5A  6A4E               	clrf	_vscp_node_substate,c
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;vscp_firmware.c: 281: vscp_timer = 0;
 15030  004A5C  6BBB               	clrf	_vscp_timer& (0+255),b	;volatile
 15031  004A5E  6BBC               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 15032  004A60  D7EE               	goto	l9637
 15033  004A62                     l1054:
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;vscp_firmware.c: 285: else {
 15037                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
 15038  004A62  C04F  F0C3         	movff	_vscp_probe_address,_vscp_nickname
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
 15042  004A66  0E03               	movlw	3
 15043  004A68  6FC4               	movwf	_vscp_node_state& (0+255),b
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
 15047  004A6A  6A4E               	clrf	_vscp_node_substate,c
 15048                           
 15049                           ; BSR set to: 0
 15050                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
 15051  004A6C  51C3               	movf	_vscp_nickname& (0+255),w,b
 15052  004A6E  ECC0  F02D         	call	_vscp_writeNicknamePermanent
 15053                           
 15054                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
 15055  004A72  0E40               	movlw	64
 15056  004A74  ECB7  F02D         	call	_vscp_setSegmentCRC
 15057                           
 15058                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
 15059  004A78  6A50               	clrf	_vscp_probe_cnt,c
 15060                           
 15061                           ;vscp_firmware.c: 296: vscp_goActiveState();
 15062  004A7A  EC1E  F02D         	call	_vscp_goActiveState	;wreg free
 15063  004A7E  D008               	goto	l1045
 15064  004A80                     l1053:
 15065                           
 15066                           ;vscp_firmware.c: 300: else {
 15067                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
 15068  004A80  6A4E               	clrf	_vscp_node_substate,c
 15069  004A82  D006               	goto	l1045
 15070  004A84                     l9669:
 15071  004A84  504E               	movf	_vscp_node_substate,w,c
 15072                           
 15073                           ; Switch size 1, requested type "speed"
 15074                           ; Number of cases is 3, Range of values is 0 to 2
 15075                           ; switch strategies available:
 15076                           ; Name         Instructions Cycles
 15077                           ; simple_byte           10     6 (average)
 15078                           ;	Chosen strategy is simple_byte
 15079  004A86  E0A9               	bz	l9599
 15080  004A88  0A01               	xorlw	1	; case 1
 15081  004A8A  E0C9               	bz	l1046
 15082  004A8C  0A03               	xorlw	3	; case 2
 15083  004A8E  E1F8               	bnz	l1053
 15084  004A90                     l1045:
 15085                           
 15086                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
 15087  004A90  0100               	movlb	0	; () banked
 15088  004A92  6BC5               	clrf	_vscp_imsg& (0+255),b
 15089                           
 15090                           ; BSR set to: 0
 15091  004A94  0012               	return	
 15092  004A96                     __end_of_vscp_handleProbeState:
 15093                           	opt stack 0
 15094                           tblptru	equ	0xFF8
 15095                           tblptrh	equ	0xFF7
 15096                           tblptrl	equ	0xFF6
 15097                           tablat	equ	0xFF5
 15098                           prodh	equ	0xFF4
 15099                           prodl	equ	0xFF3
 15100                           postinc0	equ	0xFEE
 15101                           wreg	equ	0xFE8
 15102                           postdec1	equ	0xFE5
 15103                           fsr1h	equ	0xFE2
 15104                           fsr1l	equ	0xFE1
 15105                           indf2	equ	0xFDF
 15106                           postinc2	equ	0xFDE
 15107                           postdec2	equ	0xFDD
 15108                           fsr2h	equ	0xFDA
 15109                           fsr2l	equ	0xFD9
 15110                           status	equ	0xFD8
 15111                           
 15112 ;; *************** function _vscp_goActiveState *****************
 15113 ;; Defined at:
 15114 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
 15115 ;; Parameters:    Size  Location     Type
 15116 ;;		None
 15117 ;; Auto vars:     Size  Location     Type
 15118 ;;		None
 15119 ;; Return value:  Size  Location     Type
 15120 ;;		None               void
 15121 ;; Registers used:
 15122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15123 ;; Tracked objects:
 15124 ;;		On entry : 0/0
 15125 ;;		On exit  : F/0
 15126 ;;		Unchanged: 0/0
 15127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15128 ;;      Params:         0       0       0       0       0       0       0
 15129 ;;      Locals:         0       0       0       0       0       0       0
 15130 ;;      Temps:          0       0       0       0       0       0       0
 15131 ;;      Totals:         0       0       0       0       0       0       0
 15132 ;;Total ram usage:        0 bytes
 15133 ;; Hardware stack levels used:    1
 15134 ;; Hardware stack levels required when called:    7
 15135 ;; This function calls:
 15136 ;;		_vscp_sendEvent
 15137 ;; This function is called by:
 15138 ;;		_main
 15139 ;;		_vscp_handleProbeState
 15140 ;; This function uses a non-reentrant model
 15141 ;;
 15142                           
 15143                           	psect	text69
 15144  005A3C                     __ptext69:
 15145                           	opt stack 0
 15146  005A3C                     _vscp_goActiveState:
 15147                           	opt stack 22
 15148                           
 15149                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;incstack = 0
 15153                           ;incstack = 0
 15154  005A3C  0E81               	movlw	129
 15155  005A3E  0100               	movlb	0	; () banked
 15156  005A40  6FD3               	movwf	_vscp_omsg& (0+255),b
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
 15160  005A42  6BD4               	clrf	(_vscp_omsg+1)& (0+255),b
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
 15164  005A44  6BD5               	clrf	(_vscp_omsg+2)& (0+255),b
 15165  005A46  6BD6               	clrf	(_vscp_omsg+3)& (0+255),b
 15166                           
 15167                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
 15168  005A48  0E02               	movlw	2
 15169  005A4A  6FD7               	movwf	(_vscp_omsg+4)& (0+255),b
 15170                           
 15171                           ; BSR set to: 0
 15172                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
 15173  005A4C  C0C3  F0D8         	movff	_vscp_nickname,_vscp_omsg+5
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;vscp_firmware.c: 366: vscp_sendEvent();
 15177  005A50  EC7D  F02C         	call	_vscp_sendEvent	;wreg free
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
 15181  005A54  0E01               	movlw	1
 15182  005A56  6E4C               	movwf	_vscp_initledfunc,c
 15183                           
 15184                           ; BSR set to: 0
 15185  005A58  0C01               	retlw	1
 15186  005A5A                     __end_of_vscp_goActiveState:
 15187                           	opt stack 0
 15188                           tblptru	equ	0xFF8
 15189                           tblptrh	equ	0xFF7
 15190                           tblptrl	equ	0xFF6
 15191                           tablat	equ	0xFF5
 15192                           prodh	equ	0xFF4
 15193                           prodl	equ	0xFF3
 15194                           postinc0	equ	0xFEE
 15195                           wreg	equ	0xFE8
 15196                           postdec1	equ	0xFE5
 15197                           fsr1h	equ	0xFE2
 15198                           fsr1l	equ	0xFE1
 15199                           indf2	equ	0xFDF
 15200                           postinc2	equ	0xFDE
 15201                           postdec2	equ	0xFDD
 15202                           fsr2h	equ	0xFDA
 15203                           fsr2l	equ	0xFD9
 15204                           status	equ	0xFD8
 15205                           
 15206 ;; *************** function _vscp_sendEvent *****************
 15207 ;; Defined at:
 15208 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;		None
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;  rv              1   66[COMRAM] unsigned char 
 15213 ;; Return value:  Size  Location     Type
 15214 ;;                  1    wreg      unsigned char 
 15215 ;; Registers used:
 15216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15217 ;; Tracked objects:
 15218 ;;		On entry : F/0
 15219 ;;		On exit  : F/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15222 ;;      Params:         0       0       0       0       0       0       0
 15223 ;;      Locals:         1       0       0       0       0       0       0
 15224 ;;      Temps:          0       0       0       0       0       0       0
 15225 ;;      Totals:         1       0       0       0       0       0       0
 15226 ;;Total ram usage:        1 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    6
 15229 ;; This function calls:
 15230 ;;		_sendVSCPFrame
 15231 ;; This function is called by:
 15232 ;;		_doOneSecondWork
 15233 ;;		_sendTempEvent
 15234 ;;		_vscp_handleProbeState
 15235 ;;		_vscp_goActiveState
 15236 ;;		_vscp_sendHeartBeat
 15237 ;;		_vscp_newNodeOnline
 15238 ;;		_vscp_handleProtocolEvent
 15239 ;; This function uses a non-reentrant model
 15240 ;;
 15241                           
 15242                           	psect	text70
 15243  0058FA                     __ptext70:
 15244                           	opt stack 0
 15245  0058FA                     _vscp_sendEvent:
 15246                           	opt stack 22
 15247                           
 15248                           ; BSR set to: 0
 15249                           ;vscp_firmware.c: 1297: vscp_errorcnt++;
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;incstack = 0
 15253                           ;incstack = 0
 15254  0058FA  C0D5  F060         	movff	_vscp_omsg+2,?_sendVSCPFrame
 15255  0058FE  C0D6  F061         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 15256  005902  C0D7  F062         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 15257  005906  C0C3  F063         	movff	_vscp_nickname,?_sendVSCPFrame+3
 15258  00590A  C0D4  F064         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 15259  00590E  51D3               	movf	_vscp_omsg& (0+255),w,b
 15260  005910  0B0F               	andlw	15
 15261  005912  6F65               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15262  005914  0ED8               	movlw	low (_vscp_omsg+5)
 15263  005916  6F66               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15264  005918  EC02  F026         	call	_sendVSCPFrame	;wreg free
 15265  00591C  6E43               	movwf	vscp_sendEvent@rv,c
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;vscp_firmware.c: 1298: }
 15269                           ;vscp_firmware.c: 1300: return rv;
 15270  00591E  5043               	movf	vscp_sendEvent@rv,w,c
 15271                           
 15272                           ; BSR set to: 0
 15273  005920  0012               	return	
 15274  005922                     __end_of_vscp_sendEvent:
 15275                           	opt stack 0
 15276                           tblptru	equ	0xFF8
 15277                           tblptrh	equ	0xFF7
 15278                           tblptrl	equ	0xFF6
 15279                           tablat	equ	0xFF5
 15280                           prodh	equ	0xFF4
 15281                           prodl	equ	0xFF3
 15282                           postinc0	equ	0xFEE
 15283                           wreg	equ	0xFE8
 15284                           postdec1	equ	0xFE5
 15285                           fsr1h	equ	0xFE2
 15286                           fsr1l	equ	0xFE1
 15287                           indf2	equ	0xFDF
 15288                           postinc2	equ	0xFDE
 15289                           postdec2	equ	0xFDD
 15290                           fsr2h	equ	0xFDA
 15291                           fsr2l	equ	0xFD9
 15292                           status	equ	0xFD8
 15293                           
 15294 ;; *************** function _sendVSCPFrame *****************
 15295 ;; Defined at:
 15296 ;;		line 2864 in file "../main.c"
 15297 ;; Parameters:    Size  Location     Type
 15298 ;;  vscpclass       2    0[BANK0 ] unsigned short 
 15299 ;;  vscptype        1    2[BANK0 ] unsigned char 
 15300 ;;  nodeid          1    3[BANK0 ] unsigned char 
 15301 ;;  priority        1    4[BANK0 ] unsigned char 
 15302 ;;  size            1    5[BANK0 ] unsigned char 
 15303 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 15304 ;;		 -> vscp_omsg(13), 
 15305 ;; Auto vars:     Size  Location     Type
 15306 ;;  id              4   27[BANK0 ] unsigned long 
 15307 ;; Return value:  Size  Location     Type
 15308 ;;                  1    wreg      unsigned char 
 15309 ;; Registers used:
 15310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15311 ;; Tracked objects:
 15312 ;;		On entry : F/0
 15313 ;;		On exit  : F/0
 15314 ;;		Unchanged: 0/0
 15315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15316 ;;      Params:         0       7       0       0       0       0       0
 15317 ;;      Locals:         0       4       0       0       0       0       0
 15318 ;;      Temps:          0      20       0       0       0       0       0
 15319 ;;      Totals:         0      31       0       0       0       0       0
 15320 ;;Total ram usage:       31 bytes
 15321 ;; Hardware stack levels used:    1
 15322 ;; Hardware stack levels required when called:    5
 15323 ;; This function calls:
 15324 ;;		_sendCANFrame
 15325 ;; This function is called by:
 15326 ;;		_vscp_sendEvent
 15327 ;; This function uses a non-reentrant model
 15328 ;;
 15329                           
 15330                           	psect	text71
 15331  004C04                     __ptext71:
 15332                           	opt stack 0
 15333  004C04                     _sendVSCPFrame:
 15334                           	opt stack 22
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;main.c: 2865: uint32_t id = ((uint32_t) priority << 26) |
 15338                           ;main.c: 2866: ((uint32_t) vscpclass << 16) |
 15339                           ;main.c: 2867: ((uint32_t) vscptype << 8) |
 15340                           ;main.c: 2868: nodeid;
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;incstack = 0
 15344                           ;incstack = 0
 15345  004C04  C062  F067         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15346  004C08  6B68               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15347  004C0A  6B69               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15348  004C0C  6B6A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15349  004C0E  C069  F06A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15350  004C12  C068  F069         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15351  004C16  C067  F068         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15352  004C1A  6B67               	clrf	??_sendVSCPFrame& (0+255),b
 15353  004C1C  5160               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15354  004C1E  6F6B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15355  004C20  5161               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15356  004C22  6F6C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15357  004C24  6B6D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15358  004C26  6B6E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15359  004C28  C06C  F06E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15360  004C2C  C06B  F06D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15361  004C30  6B6C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15362  004C32  6B6B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15363  004C34  C064  F06F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15364  004C38  6B70               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15365  004C3A  6B71               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15366  004C3C  6B72               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15367  004C3E  0E1A               	movlw	26
 15368  004C40                     u8945:
 15369  004C40  90D8               	bcf	status,0,c
 15370  004C42  376F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15371  004C44  3770               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15372  004C46  3771               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15373  004C48  3772               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15374  004C4A  2EE8               	decfsz	wreg,f,c
 15375  004C4C  D7F9               	goto	u8945
 15376  004C4E  516B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15377  004C50  116F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15378  004C52  6F73               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15379  004C54  516C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15380  004C56  1170               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15381  004C58  6F74               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15382  004C5A  516D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15383  004C5C  1171               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15384  004C5E  6F75               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15385  004C60  516E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15386  004C62  1172               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15387  004C64  6F76               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15388  004C66  5167               	movf	??_sendVSCPFrame& (0+255),w,b
 15389  004C68  1173               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15390  004C6A  6F77               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15391  004C6C  5168               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15392  004C6E  1174               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15393  004C70  6F78               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15394  004C72  5169               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15395  004C74  1175               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15396  004C76  6F79               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15397  004C78  516A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15398  004C7A  1176               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15399  004C7C  6F7A               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15400  004C7E  5163               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15401  004C80  1177               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15402  004C82  6F7B               	movwf	sendVSCPFrame@id& (0+255),b
 15403  004C84  5178               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15404  004C86  6F7C               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 15405  004C88  5179               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15406  004C8A  6F7D               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 15407  004C8C  517A               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15408  004C8E  6F7E               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 15409                           
 15410                           ; BSR set to: 0
 15411                           ;main.c: 2872: vscp_errorcnt++;
 15412  004C90  C07B  F03C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15413  004C94  C07C  F03D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15414  004C98  C07D  F03E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15415  004C9C  C07E  F03F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15416  004CA0  C065  F040         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15417  004CA4  C066  F041         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15418  004CA8  ECC6  F02A         	call	_sendCANFrame	;wreg free
 15419  004CAC  0900               	iorlw	0
 15420                           
 15421                           ; BSR set to: 0
 15422                           ;main.c: 2873: return 0;
 15423  004CAE  0E00               	movlw	0
 15424  004CB0  A4D8               	btfss	status,2,c
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;main.c: 2874: }
 15428                           ;main.c: 2876: return 1;
 15429  004CB2  0E01               	movlw	1
 15430                           
 15431                           ; BSR set to: 0
 15432  004CB4  0012               	return	
 15433  004CB6                     __end_of_sendVSCPFrame:
 15434                           	opt stack 0
 15435                           tblptru	equ	0xFF8
 15436                           tblptrh	equ	0xFF7
 15437                           tblptrl	equ	0xFF6
 15438                           tablat	equ	0xFF5
 15439                           prodh	equ	0xFF4
 15440                           prodl	equ	0xFF3
 15441                           postinc0	equ	0xFEE
 15442                           wreg	equ	0xFE8
 15443                           postdec1	equ	0xFE5
 15444                           fsr1h	equ	0xFE2
 15445                           fsr1l	equ	0xFE1
 15446                           indf2	equ	0xFDF
 15447                           postinc2	equ	0xFDE
 15448                           postdec2	equ	0xFDD
 15449                           fsr2h	equ	0xFDA
 15450                           fsr2l	equ	0xFD9
 15451                           status	equ	0xFD8
 15452                           
 15453 ;; *************** function _sendCANFrame *****************
 15454 ;; Defined at:
 15455 ;;		line 2911 in file "../main.c"
 15456 ;; Parameters:    Size  Location     Type
 15457 ;;  id              4   59[COMRAM] unsigned long 
 15458 ;;  dlc             1   63[COMRAM] unsigned char 
 15459 ;;  pdata           1   64[COMRAM] PTR unsigned char 
 15460 ;;		 -> vscp_omsg(13), 
 15461 ;; Auto vars:     Size  Location     Type
 15462 ;;  rv              1   65[COMRAM] unsigned char 
 15463 ;; Return value:  Size  Location     Type
 15464 ;;                  1    wreg      unsigned char 
 15465 ;; Registers used:
 15466 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15467 ;; Tracked objects:
 15468 ;;		On entry : F/0
 15469 ;;		On exit  : F/0
 15470 ;;		Unchanged: 0/0
 15471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15472 ;;      Params:         6       0       0       0       0       0       0
 15473 ;;      Locals:         1       0       0       0       0       0       0
 15474 ;;      Temps:          0       0       0       0       0       0       0
 15475 ;;      Totals:         7       0       0       0       0       0       0
 15476 ;;Total ram usage:        7 bytes
 15477 ;; Hardware stack levels used:    1
 15478 ;; Hardware stack levels required when called:    4
 15479 ;; This function calls:
 15480 ;;		_ECANSendMessage
 15481 ;; This function is called by:
 15482 ;;		_sendVSCPFrame
 15483 ;; This function uses a non-reentrant model
 15484 ;;
 15485                           
 15486                           	psect	text72
 15487  00558C                     __ptext72:
 15488                           	opt stack 0
 15489  00558C                     _sendCANFrame:
 15490                           	opt stack 22
 15491                           
 15492                           ; BSR set to: 0
 15493                           ;main.c: 2912: uint8_t rv = 0;
 15494                           
 15495                           ; BSR set to: 0
 15496                           ;incstack = 0
 15497                           ;incstack = 0
 15498  00558C  6A42               	clrf	sendCANFrame@rv,c
 15499                           
 15500                           ;main.c: 2914: sendTimer = 0;
 15501  00558E  6BB7               	clrf	_sendTimer& (0+255),b	;volatile
 15502  005590  6BB8               	clrf	(_sendTimer+1)& (0+255),b	;volatile
 15503                           
 15504                           ;main.c: 2915: while ( sendTimer < 1000 ) {
 15505  005592  D015               	goto	l11021
 15506  005594                     l11017:
 15507                           
 15508                           ; BSR set to: 0
 15509                           ;main.c: 2916: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 15510  005594  C03C  F018         	movff	sendCANFrame@id,?_ECANSendMessage
 15511  005598  C03D  F019         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 15512  00559C  C03E  F01A         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 15513  0055A0  C03F  F01B         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 15514  0055A4  C041  F01C         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 15515  0055A8  C040  F01D         	movff	sendCANFrame@dlc,?_ECANSendMessage+5
 15516  0055AC  0E20               	movlw	32
 15517  0055AE  6E1E               	movwf	?_ECANSendMessage+6,c
 15518  0055B0  EC94  F01F         	call	_ECANSendMessage	;wreg free
 15519  0055B4  0900               	iorlw	0
 15520  0055B6  E003               	bz	l11021
 15521                           
 15522                           ;main.c: 2917: rv = 1;
 15523  0055B8  0E01               	movlw	1
 15524  0055BA  6E42               	movwf	sendCANFrame@rv,c
 15525                           
 15526                           ;main.c: 2918: break;
 15527  0055BC  D006               	goto	l634
 15528  0055BE                     l11021:
 15529  0055BE  0EE8               	movlw	232
 15530  0055C0  0100               	movlb	0	; () banked
 15531  0055C2  5DB7               	subwf	_sendTimer& (0+255),w,b	;volatile
 15532  0055C4  0E03               	movlw	3
 15533  0055C6  59B8               	subwfb	(_sendTimer+1)& (0+255),w,b	;volatile
 15534  0055C8  E3E5               	bnc	l11017
 15535  0055CA                     l634:
 15536                           
 15537                           ;main.c: 2919: }
 15538                           ;main.c: 2920: }
 15539                           ;main.c: 2922: vscp_omsg.flags = 0;
 15540  0055CA  0100               	movlb	0	; () banked
 15541  0055CC  6BD3               	clrf	_vscp_omsg& (0+255),b
 15542                           
 15543                           ; BSR set to: 0
 15544                           ;main.c: 2924: return rv;
 15545  0055CE  5042               	movf	sendCANFrame@rv,w,c
 15546                           
 15547                           ; BSR set to: 0
 15548  0055D0  0012               	return	
 15549  0055D2                     __end_of_sendCANFrame:
 15550                           	opt stack 0
 15551                           tblptru	equ	0xFF8
 15552                           tblptrh	equ	0xFF7
 15553                           tblptrl	equ	0xFF6
 15554                           tablat	equ	0xFF5
 15555                           prodh	equ	0xFF4
 15556                           prodl	equ	0xFF3
 15557                           postinc0	equ	0xFEE
 15558                           wreg	equ	0xFE8
 15559                           postdec1	equ	0xFE5
 15560                           fsr1h	equ	0xFE2
 15561                           fsr1l	equ	0xFE1
 15562                           indf2	equ	0xFDF
 15563                           postinc2	equ	0xFDE
 15564                           postdec2	equ	0xFDD
 15565                           fsr2h	equ	0xFDA
 15566                           fsr2l	equ	0xFD9
 15567                           status	equ	0xFD8
 15568                           
 15569 ;; *************** function _ECANSendMessage *****************
 15570 ;; Defined at:
 15571 ;;		line 617 in file "../ECAN.c"
 15572 ;; Parameters:    Size  Location     Type
 15573 ;;  id              4   23[COMRAM] unsigned long 
 15574 ;;  data            1   27[COMRAM] PTR unsigned char 
 15575 ;;		 -> vscp_omsg(13), 
 15576 ;;  dataLen         1   28[COMRAM] unsigned char 
 15577 ;;  msgFlags        1   29[COMRAM] enum E16306
 15578 ;; Auto vars:     Size  Location     Type
 15579 ;;  pb             18   31[COMRAM] PTR unsigned char [9]
 15580 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15581 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15582 ;;		 -> B0CON(1), 
 15583 ;;  ptr             2   57[COMRAM] PTR unsigned char 
 15584 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15585 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15586 ;;		 -> B0CON(1), 
 15587 ;;  tempPtr         2   53[COMRAM] PTR unsigned char 
 15588 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15589 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15590 ;;		 -> B0CON(1), 
 15591 ;;  i               1   56[COMRAM] unsigned char 
 15592 ;;  temp            1   55[COMRAM] unsigned char 
 15593 ;;  tempBSEL0       1   52[COMRAM] struct .
 15594 ;;  j               1   51[COMRAM] unsigned char 
 15595 ;;  buffers         1   50[COMRAM] unsigned char 
 15596 ;;  mode            1   49[COMRAM] unsigned char 
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      enum E15660
 15599 ;; Registers used:
 15600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15601 ;; Tracked objects:
 15602 ;;		On entry : F/0
 15603 ;;		On exit  : 2/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15606 ;;      Params:         7       0       0       0       0       0       0
 15607 ;;      Locals:        28       0       0       0       0       0       0
 15608 ;;      Temps:          1       0       0       0       0       0       0
 15609 ;;      Totals:        36       0       0       0       0       0       0
 15610 ;;Total ram usage:       36 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:    3
 15613 ;; This function calls:
 15614 ;;		__CANIDToRegs
 15615 ;; This function is called by:
 15616 ;;		_sendCANFrame
 15617 ;; This function uses a non-reentrant model
 15618 ;;
 15619                           
 15620                           	psect	text73
 15621  003F28                     __ptext73:
 15622                           	opt stack 0
 15623  003F28                     _ECANSendMessage:
 15624                           	opt stack 22
 15625                           
 15626                           ; BSR set to: 0
 15627                           ;ECAN.c: 619: BYTE mode;
 15628                           ;ECAN.c: 620: BYTE buffers;
 15629                           ;ECAN.c: 628: BYTE i,j;
 15630                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 15631                           ;ECAN.c: 630: BYTE* pb[9];
 15632                           ;ECAN.c: 631: BYTE temp;
 15633                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 15634                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;incstack = 0
 15638                           ;incstack = 0
 15639  003F28  0E0F               	movlw	15	;volatile
 15640  003F2A  6E21               	movwf	ECANSendMessage@pb+1,c
 15641  003F2C  0E40               	movlw	64	;volatile
 15642  003F2E  6E20               	movwf	ECANSendMessage@pb,c
 15643                           
 15644                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 15645  003F30  0E0F               	movlw	15	;volatile
 15646  003F32  6E23               	movwf	ECANSendMessage@pb+3,c
 15647  003F34  0E30               	movlw	48	;volatile
 15648  003F36  6E22               	movwf	ECANSendMessage@pb+2,c
 15649                           
 15650                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 15651  003F38  0E0F               	movlw	15	;volatile
 15652  003F3A  6E25               	movwf	ECANSendMessage@pb+5,c
 15653  003F3C  0E20               	movlw	32	;volatile
 15654  003F3E  6E24               	movwf	ECANSendMessage@pb+4,c
 15655                           
 15656                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 15657  003F40  0E0E               	movlw	14	;volatile
 15658  003F42  6E27               	movwf	ECANSendMessage@pb+7,c
 15659  003F44  0E20               	movlw	32	;volatile
 15660  003F46  6E26               	movwf	ECANSendMessage@pb+6,c
 15661                           
 15662                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 15663  003F48  0E0E               	movlw	14	;volatile
 15664  003F4A  6E29               	movwf	ECANSendMessage@pb+9,c
 15665  003F4C  0E30               	movlw	48	;volatile
 15666  003F4E  6E28               	movwf	ECANSendMessage@pb+8,c
 15667                           
 15668                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 15669  003F50  0E0E               	movlw	14	;volatile
 15670  003F52  6E2B               	movwf	ECANSendMessage@pb+11,c
 15671  003F54  0E40               	movlw	64	;volatile
 15672  003F56  6E2A               	movwf	ECANSendMessage@pb+10,c
 15673                           
 15674                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 15675  003F58  0E0E               	movlw	14	;volatile
 15676  003F5A  6E2D               	movwf	ECANSendMessage@pb+13,c
 15677  003F5C  0E50               	movlw	80	;volatile
 15678  003F5E  6E2C               	movwf	ECANSendMessage@pb+12,c
 15679                           
 15680                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 15681  003F60  0E0E               	movlw	14	;volatile
 15682  003F62  6E2F               	movwf	ECANSendMessage@pb+15,c
 15683  003F64  0E60               	movlw	96	;volatile
 15684  003F66  6E2E               	movwf	ECANSendMessage@pb+14,c
 15685                           
 15686                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 15687  003F68  0E0E               	movlw	14	;volatile
 15688  003F6A  6E31               	movwf	ECANSendMessage@pb+17,c
 15689  003F6C  0E70               	movlw	112	;volatile
 15690  003F6E  6E30               	movwf	ECANSendMessage@pb+16,c
 15691                           
 15692                           ; BSR set to: 14
 15693                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 15694  003F70  5077               	movf	3959,w,c	;volatile
 15695  003F72  0BC0               	andlw	192
 15696  003F74  6E32               	movwf	ECANSendMessage@mode,c
 15697                           
 15698                           ; BSR set to: 14
 15699                           ;ECAN.c: 660: if ( mode == 0x00 )
 15700  003F76  6632               	tstfsz	ECANSendMessage@mode,c
 15701  003F78  D002               	goto	l11035
 15702                           
 15703                           ; BSR set to: 14
 15704                           ;ECAN.c: 661: buffers = 2;
 15705  003F7A  0E02               	movlw	2
 15706  003F7C  D001               	goto	L33
 15707  003F7E                     l11035:
 15708                           
 15709                           ; BSR set to: 14
 15710                           ;ECAN.c: 662: else
 15711                           ;ECAN.c: 663: buffers = 8;
 15712  003F7E  0E08               	movlw	8
 15713  003F80                     L33:
 15714  003F80  6E33               	movwf	ECANSendMessage@buffers,c
 15715                           
 15716                           ; BSR set to: 14
 15717                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 15718  003F82  010D               	movlb	13	; () banked
 15719  003F84  90D8               	bcf	status,0,c
 15720  003F86  31F8               	rrcf	248,w,b	;volatile
 15721  003F88  6E35               	movwf	ECANSendMessage@tempBSEL0,c
 15722                           
 15723                           ; BSR set to: 13
 15724                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 15725  003F8A  6A39               	clrf	ECANSendMessage@i,c
 15726  003F8C  D07B               	goto	l11095
 15727  003F8E                     l11041:
 15728                           
 15729                           ;ECAN.c: 688: {
 15730                           ;ECAN.c: 693: ptr = pb[i];
 15731  003F8E  5039               	movf	ECANSendMessage@i,w,c
 15732  003F90  0D02               	mullw	2
 15733  003F92  50F3               	movf	prodl,w,c
 15734  003F94  0F20               	addlw	low ECANSendMessage@pb
 15735  003F96  6ED9               	movwf	fsr2l,c
 15736  003F98  6ADA               	clrf	fsr2h,c
 15737  003F9A  CFDE F03A          	movff	postinc2,ECANSendMessage@ptr
 15738  003F9E  CFDD F03B          	movff	postdec2,ECANSendMessage@ptr+1
 15739                           
 15740                           ;ECAN.c: 694: tempPtr = ptr;
 15741  003FA2  C03A  F036         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 15742  003FA6  C03B  F037         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 15743                           
 15744                           ;ECAN.c: 702: if ( i > 2 )
 15745  003FAA  0E02               	movlw	2
 15746  003FAC  6439               	cpfsgt	ECANSendMessage@i,c
 15747  003FAE  D004               	goto	l11053
 15748                           
 15749                           ;ECAN.c: 703: {
 15750                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 15751  003FB0  90D8               	bcf	status,0,c
 15752  003FB2  3235               	rrcf	ECANSendMessage@tempBSEL0,f,c
 15753                           
 15754                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 15755  003FB4  A035               	btfss	ECANSendMessage@tempBSEL0,0,c
 15756  003FB6  D065               	goto	l11093
 15757  003FB8                     l11053:
 15758                           
 15759                           ;ECAN.c: 714: }
 15760                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 15761  003FB8  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15762  003FBC  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15763  003FC0  50DF               	movf	indf2,w,c
 15764  003FC2  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15765  003FC4  B61F               	btfsc	??_ECANSendMessage,3,c
 15766  003FC6  D05D               	goto	l11093
 15767                           
 15768                           ;ECAN.c: 721: {
 15769                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 15770  003FC8  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15771  003FCC  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15772  003FD0  0EFC               	movlw	252
 15773  003FD2  16DF               	andwf	indf2,f,c
 15774                           
 15775                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 15776  003FD4  C01E  F01F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 15777  003FD8  0E03               	movlw	3
 15778  003FDA  161F               	andwf	??_ECANSendMessage,f,c
 15779  003FDC  C03A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 15780  003FE0  C03B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 15781  003FE4  501F               	movf	??_ECANSendMessage,w,c
 15782  003FE6  12DF               	iorwf	indf2,f,c
 15783                           
 15784                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 15785  003FE8  AC1E               	btfss	ECANSendMessage@msgFlags,6,c
 15786  003FEA  D004               	goto	l822
 15787                           
 15788                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 15789  003FEC  501D               	movf	ECANSendMessage@dataLen,w,c
 15790  003FEE  0940               	iorlw	64
 15791  003FF0  6E38               	movwf	ECANSendMessage@temp,c
 15792  003FF2  D002               	goto	l11063
 15793  003FF4                     l822:
 15794                           
 15795                           ;ECAN.c: 729: else
 15796                           ;ECAN.c: 730: temp = dataLen;
 15797  003FF4  C01D  F038         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 15798  003FF8                     l11063:
 15799                           
 15800                           ;ECAN.c: 732: *(ptr+5) = temp;
 15801  003FF8  EE20 F005          	lfsr	2,5
 15802  003FFC  503A               	movf	ECANSendMessage@ptr,w,c
 15803  003FFE  26D9               	addwf	fsr2l,f,c
 15804  004000  503B               	movf	ECANSendMessage@ptr+1,w,c
 15805  004002  22DA               	addwfc	fsr2h,f,c
 15806  004004  C038  FFDF         	movff	ECANSendMessage@temp,indf2
 15807                           
 15808                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 15809  004008  AA1E               	btfss	ECANSendMessage@msgFlags,5,c
 15810  00400A  D003               	goto	l824
 15811                           
 15812                           ;ECAN.c: 736: temp = 1;
 15813  00400C  0E01               	movlw	1
 15814  00400E  6E38               	movwf	ECANSendMessage@temp,c
 15815  004010  D001               	goto	l11069
 15816  004012                     l824:
 15817                           
 15818                           ;ECAN.c: 738: else
 15819                           ;ECAN.c: 739: temp = 0;
 15820  004012  6A38               	clrf	ECANSendMessage@temp,c
 15821  004014                     l11069:
 15822                           
 15823                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 15824  004014  283A               	incf	ECANSendMessage@ptr,w,c
 15825  004016  6E0E               	movwf	?__CANIDToRegs,c
 15826  004018  0E00               	movlw	0
 15827  00401A  203B               	addwfc	ECANSendMessage@ptr+1,w,c
 15828  00401C  6E0F               	movwf	?__CANIDToRegs+1,c
 15829  00401E  C018  F010         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 15830  004022  C019  F011         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 15831  004026  C01A  F012         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 15832  00402A  C01B  F013         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 15833  00402E  C038  F014         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 15834  004032  ECF9  F020         	call	__CANIDToRegs	;wreg free
 15835                           
 15836                           ;ECAN.c: 745: ptr += 6;
 15837  004036  0E06               	movlw	6
 15838  004038  263A               	addwf	ECANSendMessage@ptr,f,c
 15839  00403A  0E00               	movlw	0
 15840  00403C  223B               	addwfc	ECANSendMessage@ptr+1,f,c
 15841                           
 15842                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 15843  00403E  6A34               	clrf	ECANSendMessage@j,c
 15844  004040  D00D               	goto	l11083
 15845  004042                     l11075:
 15846                           
 15847                           ;ECAN.c: 748: *ptr++ = *data++;
 15848  004042  501C               	movf	ECANSendMessage@data,w,c
 15849  004044  6ED9               	movwf	fsr2l,c
 15850  004046  6ADA               	clrf	fsr2h,c
 15851  004048  C03A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 15852  00404C  C03B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 15853  004050  CFDF FFE7          	movff	indf2,indf1
 15854  004054  2A1C               	incf	ECANSendMessage@data,f,c
 15855  004056  4A3A               	infsnz	ECANSendMessage@ptr,f,c
 15856  004058  2A3B               	incf	ECANSendMessage@ptr+1,f,c
 15857  00405A  2A34               	incf	ECANSendMessage@j,f,c
 15858  00405C                     l11083:
 15859  00405C  501D               	movf	ECANSendMessage@dataLen,w,c
 15860  00405E  5C34               	subwf	ECANSendMessage@j,w,c
 15861  004060  E3F0               	bnc	l11075
 15862                           
 15863                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 15864  004062  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15865  004066  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15866  00406A  50DF               	movf	indf2,w,c
 15867  00406C  6E1F               	movwf	??_ECANSendMessage& (0+255),c
 15868  00406E  B41F               	btfsc	??_ECANSendMessage,2,c
 15869  004070  D006               	goto	l11089
 15870                           
 15871                           ;ECAN.c: 753: *tempPtr |= 0x08;
 15872  004072  C036  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 15873  004076  C037  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 15874  00407A  0E00               	movlw	0
 15875  00407C  86DB               	bsf	plusw2,3,c
 15876  00407E                     l11089:
 15877                           
 15878                           ;ECAN.c: 755: return TRUE;
 15879  00407E  0E01               	movlw	1
 15880  004080  D005               	goto	l830
 15881  004082                     l11093:
 15882  004082  2A39               	incf	ECANSendMessage@i,f,c
 15883  004084                     l11095:
 15884  004084  5033               	movf	ECANSendMessage@buffers,w,c
 15885  004086  5C39               	subwf	ECANSendMessage@i,w,c
 15886  004088  E382               	bnc	l11041
 15887                           
 15888                           ;ECAN.c: 756: }
 15889                           ;ECAN.c: 757: }
 15890                           ;ECAN.c: 760: return FALSE;
 15891  00408A  0E00               	movlw	0
 15892  00408C                     l830:
 15893  00408C  0012               	return	
 15894  00408E                     __end_of_ECANSendMessage:
 15895                           	opt stack 0
 15896                           tblptru	equ	0xFF8
 15897                           tblptrh	equ	0xFF7
 15898                           tblptrl	equ	0xFF6
 15899                           tablat	equ	0xFF5
 15900                           prodh	equ	0xFF4
 15901                           prodl	equ	0xFF3
 15902                           postinc0	equ	0xFEE
 15903                           wreg	equ	0xFE8
 15904                           indf1	equ	0xFE7
 15905                           postdec1	equ	0xFE5
 15906                           fsr1h	equ	0xFE2
 15907                           fsr1l	equ	0xFE1
 15908                           indf2	equ	0xFDF
 15909                           postinc2	equ	0xFDE
 15910                           postdec2	equ	0xFDD
 15911                           plusw2	equ	0xFDB
 15912                           fsr2h	equ	0xFDA
 15913                           fsr2l	equ	0xFD9
 15914                           status	equ	0xFD8
 15915                           
 15916 ;; *************** function __CANIDToRegs *****************
 15917 ;; Defined at:
 15918 ;;		line 1099 in file "../ECAN.c"
 15919 ;; Parameters:    Size  Location     Type
 15920 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 15921 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 15922 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 15923 ;;		 -> B0CON(1), 
 15924 ;;  val             4   15[COMRAM] unsigned long 
 15925 ;;  type            1   19[COMRAM] unsigned char 
 15926 ;; Auto vars:     Size  Location     Type
 15927 ;;  Value           1   22[COMRAM] PTR struct _CAN_MESSAGE_
 15928 ;;		 -> _CANIDToRegs@val(4), 
 15929 ;; Return value:  Size  Location     Type
 15930 ;;		None               void
 15931 ;; Registers used:
 15932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15933 ;; Tracked objects:
 15934 ;;		On entry : 2/D
 15935 ;;		On exit  : 2/0
 15936 ;;		Unchanged: 2/0
 15937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15938 ;;      Params:         7       0       0       0       0       0       0
 15939 ;;      Locals:         1       0       0       0       0       0       0
 15940 ;;      Temps:          2       0       0       0       0       0       0
 15941 ;;      Totals:        10       0       0       0       0       0       0
 15942 ;;Total ram usage:       10 bytes
 15943 ;; Hardware stack levels used:    1
 15944 ;; Hardware stack levels required when called:    2
 15945 ;; This function calls:
 15946 ;;		Nothing
 15947 ;; This function is called by:
 15948 ;;		_ECANSendMessage
 15949 ;; This function uses a non-reentrant model
 15950 ;;
 15951                           
 15952                           	psect	text74
 15953  0041F2                     __ptext74:
 15954                           	opt stack 0
 15955  0041F2                     __CANIDToRegs:
 15956                           	opt stack 22
 15957                           
 15958                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 15959                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 15960                           
 15961                           ;incstack = 0
 15962                           ;incstack = 0
 15963  0041F2  0E10               	movlw	low __CANIDToRegs@val
 15964  0041F4  6E17               	movwf	__CANIDToRegs@Value,c
 15965                           
 15966                           ;ECAN.c: 1104: if ( type == 0 )
 15967  0041F6  6614               	tstfsz	__CANIDToRegs@type,c
 15968  0041F8  D037               	goto	l11111
 15969                           
 15970                           ;ECAN.c: 1105: {
 15971                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 15972  0041FA  5017               	movf	__CANIDToRegs@Value,w,c
 15973  0041FC  6ED9               	movwf	fsr2l,c
 15974  0041FE  6ADA               	clrf	fsr2h,c
 15975  004200  50DF               	movf	indf2,w,c
 15976  004202  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15977  004204  90D8               	bcf	status,0,c
 15978  004206  3215               	rrcf	??__CANIDToRegs,f,c
 15979  004208  90D8               	bcf	status,0,c
 15980  00420A  3215               	rrcf	??__CANIDToRegs,f,c
 15981  00420C  90D8               	bcf	status,0,c
 15982  00420E  3015               	rrcf	??__CANIDToRegs,w,c
 15983  004210  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 15984  004214  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 15985  004218  6EDF               	movwf	indf2,c
 15986                           
 15987                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 15988  00421A  5017               	movf	__CANIDToRegs@Value,w,c
 15989  00421C  6ED9               	movwf	fsr2l,c
 15990  00421E  6ADA               	clrf	fsr2h,c
 15991  004220  2AD9               	incf	fsr2l,f,c
 15992  004222  6ADA               	clrf	fsr2h,c
 15993  004224  50DF               	movf	indf2,w,c
 15994  004226  6E15               	movwf	??__CANIDToRegs& (0+255),c
 15995  004228  0E05               	movlw	5
 15996  00422A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 15997  00422C                     u9085:
 15998  00422C  90D8               	bcf	status,0,c
 15999  00422E  3615               	rlcf	??__CANIDToRegs,f,c
 16000  004230  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16001  004232  D7FC               	goto	u9085
 16002  004234  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16003  004238  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16004  00423C  5015               	movf	??__CANIDToRegs,w,c
 16005  00423E  12DF               	iorwf	indf2,f,c
 16006                           
 16007                           ;ECAN.c: 1109: ptr++;
 16008  004240  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16009  004242  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16010                           
 16011                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16012  004244  5017               	movf	__CANIDToRegs@Value,w,c
 16013  004246  6ED9               	movwf	fsr2l,c
 16014  004248  6ADA               	clrf	fsr2h,c
 16015  00424A  50DF               	movf	indf2,w,c
 16016  00424C  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16017  00424E  0E05               	movlw	5
 16018  004250  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16019  004252                     u9095:
 16020  004252  90D8               	bcf	status,0,c
 16021  004254  3615               	rlcf	??__CANIDToRegs,f,c
 16022  004256  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16023  004258  D7FC               	goto	u9095
 16024  00425A  5015               	movf	??__CANIDToRegs,w,c
 16025  00425C  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16026  004260  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16027  004264  6EDF               	movwf	indf2,c
 16028                           
 16029                           ;ECAN.c: 1111: }
 16030  004266  D06C               	goto	l884
 16031  004268                     l11111:
 16032                           
 16033                           ;ECAN.c: 1112: else
 16034                           ;ECAN.c: 1113: {
 16035                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16036  004268  5017               	movf	__CANIDToRegs@Value,w,c
 16037  00426A  6ED9               	movwf	fsr2l,c
 16038  00426C  6ADA               	clrf	fsr2h,c
 16039  00426E  0E02               	movlw	2
 16040  004270  26D9               	addwf	fsr2l,f,c
 16041  004272  6ADA               	clrf	fsr2h,c
 16042  004274  50DF               	movf	indf2,w,c
 16043  004276  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16044  004278  0E05               	movlw	5
 16045  00427A  6E16               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16046  00427C                     u9105:
 16047  00427C  90D8               	bcf	status,0,c
 16048  00427E  3215               	rrcf	??__CANIDToRegs,f,c
 16049  004280  2E16               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16050  004282  D7FC               	goto	u9105
 16051  004284  5015               	movf	??__CANIDToRegs,w,c
 16052  004286  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16053  00428A  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16054  00428E  6EDF               	movwf	indf2,c
 16055                           
 16056                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16057  004290  5017               	movf	__CANIDToRegs@Value,w,c
 16058  004292  6ED9               	movwf	fsr2l,c
 16059  004294  6ADA               	clrf	fsr2h,c
 16060  004296  0E03               	movlw	3
 16061  004298  26D9               	addwf	fsr2l,f,c
 16062  00429A  6ADA               	clrf	fsr2h,c
 16063  00429C  50DF               	movf	indf2,w,c
 16064  00429E  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16065  0042A0  90D8               	bcf	status,0,c
 16066  0042A2  3615               	rlcf	??__CANIDToRegs,f,c
 16067  0042A4  90D8               	bcf	status,0,c
 16068  0042A6  3615               	rlcf	??__CANIDToRegs,f,c
 16069  0042A8  90D8               	bcf	status,0,c
 16070  0042AA  3615               	rlcf	??__CANIDToRegs,f,c
 16071  0042AC  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16072  0042B0  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16073  0042B4  5015               	movf	??__CANIDToRegs,w,c
 16074  0042B6  12DF               	iorwf	indf2,f,c
 16075                           
 16076                           ;ECAN.c: 1117: ptr++;
 16077  0042B8  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16078  0042BA  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16079                           
 16080                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16081  0042BC  5017               	movf	__CANIDToRegs@Value,w,c
 16082  0042BE  6ED9               	movwf	fsr2l,c
 16083  0042C0  6ADA               	clrf	fsr2h,c
 16084  0042C2  0E02               	movlw	2
 16085  0042C4  26D9               	addwf	fsr2l,f,c
 16086  0042C6  6ADA               	clrf	fsr2h,c
 16087  0042C8  50DF               	movf	indf2,w,c
 16088  0042CA  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16089  0042CC  90D8               	bcf	status,0,c
 16090  0042CE  3615               	rlcf	??__CANIDToRegs,f,c
 16091  0042D0  90D8               	bcf	status,0,c
 16092  0042D2  3615               	rlcf	??__CANIDToRegs,f,c
 16093  0042D4  90D8               	bcf	status,0,c
 16094  0042D6  3415               	rlcf	??__CANIDToRegs,w,c
 16095  0042D8  0BE0               	andlw	224
 16096  0042DA  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16097  0042DE  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16098  0042E2  6EDF               	movwf	indf2,c
 16099                           
 16100                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16101  0042E4  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16102  0042E8  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16103  0042EC  0E00               	movlw	0
 16104  0042EE  86DB               	bsf	plusw2,3,c
 16105                           
 16106                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16107  0042F0  5017               	movf	__CANIDToRegs@Value,w,c
 16108  0042F2  6ED9               	movwf	fsr2l,c
 16109  0042F4  6ADA               	clrf	fsr2h,c
 16110  0042F6  0E02               	movlw	2
 16111  0042F8  26D9               	addwf	fsr2l,f,c
 16112  0042FA  6ADA               	clrf	fsr2h,c
 16113  0042FC  50DF               	movf	indf2,w,c
 16114  0042FE  6E15               	movwf	??__CANIDToRegs& (0+255),c
 16115  004300  0E03               	movlw	3
 16116  004302  1615               	andwf	??__CANIDToRegs,f,c
 16117  004304  C00E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16118  004308  C00F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16119  00430C  5015               	movf	??__CANIDToRegs,w,c
 16120  00430E  12DF               	iorwf	indf2,f,c
 16121                           
 16122                           ;ECAN.c: 1122: ptr++;
 16123  004310  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16124  004312  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16125                           
 16126                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16127  004314  5017               	movf	__CANIDToRegs@Value,w,c
 16128  004316  6ED9               	movwf	fsr2l,c
 16129  004318  6ADA               	clrf	fsr2h,c
 16130  00431A  2AD9               	incf	fsr2l,f,c
 16131  00431C  6ADA               	clrf	fsr2h,c
 16132  00431E  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16133  004322  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16134  004326  CFDF FFE7          	movff	indf2,indf1
 16135                           
 16136                           ;ECAN.c: 1124: ptr++;
 16137  00432A  4A0E               	infsnz	__CANIDToRegs@ptr,f,c
 16138  00432C  2A0F               	incf	__CANIDToRegs@ptr+1,f,c
 16139                           
 16140                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16141  00432E  5017               	movf	__CANIDToRegs@Value,w,c
 16142  004330  6ED9               	movwf	fsr2l,c
 16143  004332  6ADA               	clrf	fsr2h,c
 16144  004334  C00E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16145  004338  C00F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16146  00433C  CFDF FFE7          	movff	indf2,indf1
 16147  004340                     l884:
 16148  004340  0012               	return	
 16149  004342                     __end_of__CANIDToRegs:
 16150                           	opt stack 0
 16151                           tblptru	equ	0xFF8
 16152                           tblptrh	equ	0xFF7
 16153                           tblptrl	equ	0xFF6
 16154                           tablat	equ	0xFF5
 16155                           prodh	equ	0xFF4
 16156                           prodl	equ	0xFF3
 16157                           postinc0	equ	0xFEE
 16158                           wreg	equ	0xFE8
 16159                           indf1	equ	0xFE7
 16160                           postdec1	equ	0xFE5
 16161                           fsr1h	equ	0xFE2
 16162                           fsr1l	equ	0xFE1
 16163                           indf2	equ	0xFDF
 16164                           postinc2	equ	0xFDE
 16165                           postdec2	equ	0xFDD
 16166                           plusw2	equ	0xFDB
 16167                           fsr2h	equ	0xFDA
 16168                           fsr2l	equ	0xFD9
 16169                           status	equ	0xFD8
 16170                           
 16171 ;; *************** function _vscp_getEvent *****************
 16172 ;; Defined at:
 16173 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
 16174 ;; Parameters:    Size  Location     Type
 16175 ;;		None
 16176 ;; Auto vars:     Size  Location     Type
 16177 ;;  rv              1   49[COMRAM] unsigned char 
 16178 ;; Return value:  Size  Location     Type
 16179 ;;                  1    wreg      unsigned char 
 16180 ;; Registers used:
 16181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16182 ;; Tracked objects:
 16183 ;;		On entry : F/0
 16184 ;;		On exit  : 0/0
 16185 ;;		Unchanged: 0/0
 16186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16187 ;;      Params:         0       0       0       0       0       0       0
 16188 ;;      Locals:         1       0       0       0       0       0       0
 16189 ;;      Temps:          0       0       0       0       0       0       0
 16190 ;;      Totals:         1       0       0       0       0       0       0
 16191 ;;Total ram usage:        1 bytes
 16192 ;; Hardware stack levels used:    1
 16193 ;; Hardware stack levels required when called:    6
 16194 ;; This function calls:
 16195 ;;		_getVSCPFrame
 16196 ;; This function is called by:
 16197 ;;		_main
 16198 ;; This function uses a non-reentrant model
 16199 ;;
 16200                           
 16201                           	psect	text75
 16202  0058A8                     __ptext75:
 16203                           	opt stack 0
 16204  0058A8                     _vscp_getEvent:
 16205                           	opt stack 24
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;vscp_firmware.c: 1309: int8_t rv;
 16209                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
 16210                           
 16211                           ;incstack = 0
 16212                           ;incstack = 0
 16213  0058A8  BFC5               	btfsc	_vscp_imsg& (0+255),7,b
 16214  0058AA  D012               	goto	l1279
 16215                           
 16216                           ; BSR set to: 0
 16217                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
 16218                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
 16219                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
 16220                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
 16221                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
 16222                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
 16223  0058AC  0EC9               	movlw	low (_vscp_imsg+4)
 16224  0058AE  6E24               	movwf	?_getVSCPFrame,c
 16225  0058B0  0ECA               	movlw	low (_vscp_imsg+5)
 16226  0058B2  6E25               	movwf	?_getVSCPFrame+1,c
 16227  0058B4  0EC6               	movlw	low (_vscp_imsg+1)
 16228  0058B6  6E26               	movwf	?_getVSCPFrame+2,c
 16229  0058B8  0EC5               	movlw	low _vscp_imsg
 16230  0058BA  6E27               	movwf	?_getVSCPFrame+3,c
 16231  0058BC  0ECB               	movlw	low (_vscp_imsg+6)
 16232  0058BE  6E28               	movwf	?_getVSCPFrame+4,c
 16233  0058C0  0EC7               	movlw	(_vscp_imsg+2)& (0+255)
 16234  0058C2  ECAE  F028         	call	_getVSCPFrame
 16235  0058C6  6E32               	movwf	vscp_getEvent@rv,c
 16236  0058C8  5032               	movf	vscp_getEvent@rv& (0+255),w,c
 16237  0058CA  E002               	bz	l1279
 16238                           
 16239                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
 16240  0058CC  0100               	movlb	0	; () banked
 16241  0058CE  8FC5               	bsf	_vscp_imsg& (0+255),7,b
 16242  0058D0                     l1279:
 16243  0058D0  0012               	return	
 16244  0058D2                     __end_of_vscp_getEvent:
 16245                           	opt stack 0
 16246                           tblptru	equ	0xFF8
 16247                           tblptrh	equ	0xFF7
 16248                           tblptrl	equ	0xFF6
 16249                           tablat	equ	0xFF5
 16250                           prodh	equ	0xFF4
 16251                           prodl	equ	0xFF3
 16252                           postinc0	equ	0xFEE
 16253                           wreg	equ	0xFE8
 16254                           indf1	equ	0xFE7
 16255                           postdec1	equ	0xFE5
 16256                           fsr1h	equ	0xFE2
 16257                           fsr1l	equ	0xFE1
 16258                           indf2	equ	0xFDF
 16259                           postinc2	equ	0xFDE
 16260                           postdec2	equ	0xFDD
 16261                           plusw2	equ	0xFDB
 16262                           fsr2h	equ	0xFDA
 16263                           fsr2l	equ	0xFD9
 16264                           status	equ	0xFD8
 16265                           
 16266 ;; *************** function _getVSCPFrame *****************
 16267 ;; Defined at:
 16268 ;;		line 2890 in file "../main.c"
 16269 ;; Parameters:    Size  Location     Type
 16270 ;;  pvscpclass      1    wreg     PTR unsigned short 
 16271 ;;		 -> vscp_imsg(14), 
 16272 ;;  pvscptype       1   35[COMRAM] PTR unsigned char 
 16273 ;;		 -> vscp_imsg(14), 
 16274 ;;  pNodeId         1   36[COMRAM] PTR unsigned char 
 16275 ;;		 -> vscp_imsg(14), 
 16276 ;;  pPriority       1   37[COMRAM] PTR unsigned char 
 16277 ;;		 -> vscp_imsg(14), 
 16278 ;;  pSize           1   38[COMRAM] PTR unsigned char 
 16279 ;;		 -> vscp_imsg(14), 
 16280 ;;  pData           1   39[COMRAM] PTR unsigned char 
 16281 ;;		 -> vscp_imsg(14), 
 16282 ;; Auto vars:     Size  Location     Type
 16283 ;;  pvscpclass      1   44[COMRAM] PTR unsigned short 
 16284 ;;		 -> vscp_imsg(14), 
 16285 ;;  id              4   45[COMRAM] unsigned long 
 16286 ;; Return value:  Size  Location     Type
 16287 ;;                  1    wreg      unsigned char 
 16288 ;; Registers used:
 16289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16290 ;; Tracked objects:
 16291 ;;		On entry : F/0
 16292 ;;		On exit  : 0/0
 16293 ;;		Unchanged: 0/0
 16294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16295 ;;      Params:         5       0       0       0       0       0       0
 16296 ;;      Locals:         5       0       0       0       0       0       0
 16297 ;;      Temps:          4       0       0       0       0       0       0
 16298 ;;      Totals:        14       0       0       0       0       0       0
 16299 ;;Total ram usage:       14 bytes
 16300 ;; Hardware stack levels used:    1
 16301 ;; Hardware stack levels required when called:    5
 16302 ;; This function calls:
 16303 ;;		_getCANFrame
 16304 ;; This function is called by:
 16305 ;;		_vscp_getEvent
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309                           	psect	text76
 16310  00515C                     __ptext76:
 16311                           	opt stack 0
 16312  00515C                     _getVSCPFrame:
 16313                           	opt stack 24
 16314                           
 16315                           ;incstack = 0
 16316                           ;incstack = 0
 16317                           ;getVSCPFrame@pvscpclass stored from wreg
 16318  00515C  CFE8 F02D          	movff	wreg,getVSCPFrame@pvscpclass
 16319                           
 16320                           ; BSR set to: 0
 16321                           ;main.c: 2891: uint32_t id;
 16322                           ;main.c: 2893: if (!getCANFrame(&id, pSize, pData)) {
 16323  005160  C027  F020         	movff	getVSCPFrame@pSize,?_getCANFrame
 16324  005164  C028  F021         	movff	getVSCPFrame@pData,?_getCANFrame+1
 16325  005168  0E2E               	movlw	getVSCPFrame@id& (0+255)
 16326  00516A  EC14  F02C         	call	_getCANFrame
 16327  00516E  0900               	iorlw	0
 16328  005170  E102               	bnz	l8177
 16329                           
 16330                           ;main.c: 2894: return 0;
 16331  005172  0E00               	movlw	0
 16332  005174  D02E               	goto	l628
 16333  005176                     l8177:
 16334                           
 16335                           ;main.c: 2895: }
 16336                           ;main.c: 2897: *pNodeId = id & 0x0ff;
 16337  005176  5025               	movf	getVSCPFrame@pNodeId,w,c
 16338  005178  6ED9               	movwf	fsr2l,c
 16339  00517A  6ADA               	clrf	fsr2h,c
 16340  00517C  C02E  FFDF         	movff	getVSCPFrame@id,indf2
 16341                           
 16342                           ;main.c: 2898: *pvscptype = (id >> 8) & 0xff;
 16343  005180  5024               	movf	getVSCPFrame@pvscptype,w,c
 16344  005182  6ED9               	movwf	fsr2l,c
 16345  005184  6ADA               	clrf	fsr2h,c
 16346  005186  C02F  FFDF         	movff	getVSCPFrame@id+1,indf2
 16347                           
 16348                           ;main.c: 2899: *pvscpclass = (id >> 16) & 0x1ff;
 16349  00518A  5030               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 16350  00518C  6E29               	movwf	??_getVSCPFrame& (0+255),c
 16351  00518E  0E01               	movlw	1
 16352  005190  1431               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 16353  005192  6E2A               	movwf	(??_getVSCPFrame+1)& (0+255),c
 16354  005194  502D               	movf	getVSCPFrame@pvscpclass,w,c
 16355  005196  6ED9               	movwf	fsr2l,c
 16356  005198  6ADA               	clrf	fsr2h,c
 16357  00519A  C029  FFDE         	movff	??_getVSCPFrame,postinc2
 16358  00519E  C02A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 16359                           
 16360                           ;main.c: 2900: *pPriority = (uint16_t) (0x07 & (id >> 26));
 16361  0051A2  5026               	movf	getVSCPFrame@pPriority,w,c
 16362  0051A4  6ED9               	movwf	fsr2l,c
 16363  0051A6  6ADA               	clrf	fsr2h,c
 16364  0051A8  C02E  F029         	movff	getVSCPFrame@id,??_getVSCPFrame
 16365  0051AC  C02F  F02A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 16366  0051B0  C030  F02B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 16367  0051B4  C031  F02C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 16368  0051B8  0E1B               	movlw	27
 16369  0051BA  D005               	goto	u5450
 16370  0051BC                     u5455:
 16371  0051BC  90D8               	bcf	status,0,c
 16372  0051BE  322C               	rrcf	??_getVSCPFrame+3,f,c
 16373  0051C0  322B               	rrcf	??_getVSCPFrame+2,f,c
 16374  0051C2  322A               	rrcf	??_getVSCPFrame+1,f,c
 16375  0051C4  3229               	rrcf	??_getVSCPFrame,f,c
 16376  0051C6                     u5450:
 16377  0051C6  2EE8               	decfsz	wreg,f,c
 16378  0051C8  D7F9               	goto	u5455
 16379  0051CA  5029               	movf	??_getVSCPFrame,w,c
 16380  0051CC  0B07               	andlw	7
 16381  0051CE  6EDF               	movwf	indf2,c
 16382                           
 16383                           ;main.c: 2902: return 1;
 16384  0051D0  0E01               	movlw	1
 16385  0051D2                     l628:
 16386  0051D2  0012               	return	
 16387  0051D4                     __end_of_getVSCPFrame:
 16388                           	opt stack 0
 16389                           tblptru	equ	0xFF8
 16390                           tblptrh	equ	0xFF7
 16391                           tblptrl	equ	0xFF6
 16392                           tablat	equ	0xFF5
 16393                           prodh	equ	0xFF4
 16394                           prodl	equ	0xFF3
 16395                           postinc0	equ	0xFEE
 16396                           wreg	equ	0xFE8
 16397                           indf1	equ	0xFE7
 16398                           postdec1	equ	0xFE5
 16399                           fsr1h	equ	0xFE2
 16400                           fsr1l	equ	0xFE1
 16401                           indf2	equ	0xFDF
 16402                           postinc2	equ	0xFDE
 16403                           postdec2	equ	0xFDD
 16404                           plusw2	equ	0xFDB
 16405                           fsr2h	equ	0xFDA
 16406                           fsr2l	equ	0xFD9
 16407                           status	equ	0xFD8
 16408                           
 16409 ;; *************** function _getCANFrame *****************
 16410 ;; Defined at:
 16411 ;;		line 2932 in file "../main.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;  pid             1    wreg     PTR unsigned long 
 16414 ;;		 -> getVSCPFrame@id(4), 
 16415 ;;  pdlc            1   31[COMRAM] PTR unsigned char 
 16416 ;;		 -> vscp_imsg(14), 
 16417 ;;  pdata           1   32[COMRAM] PTR unsigned char 
 16418 ;;		 -> vscp_imsg(14), 
 16419 ;; Auto vars:     Size  Location     Type
 16420 ;;  pid             1   33[COMRAM] PTR unsigned long 
 16421 ;;		 -> getVSCPFrame@id(4), 
 16422 ;;  flags           1   34[COMRAM] enum E16409
 16423 ;; Return value:  Size  Location     Type
 16424 ;;                  1    wreg      unsigned char 
 16425 ;; Registers used:
 16426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16427 ;; Tracked objects:
 16428 ;;		On entry : F/0
 16429 ;;		On exit  : 0/0
 16430 ;;		Unchanged: 0/0
 16431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16432 ;;      Params:         2       0       0       0       0       0       0
 16433 ;;      Locals:         2       0       0       0       0       0       0
 16434 ;;      Temps:          0       0       0       0       0       0       0
 16435 ;;      Totals:         4       0       0       0       0       0       0
 16436 ;;Total ram usage:        4 bytes
 16437 ;; Hardware stack levels used:    1
 16438 ;; Hardware stack levels required when called:    4
 16439 ;; This function calls:
 16440 ;;		_ECANReceiveMessage
 16441 ;; This function is called by:
 16442 ;;		_getVSCPFrame
 16443 ;; This function uses a non-reentrant model
 16444 ;;
 16445                           
 16446                           	psect	text77
 16447  005828                     __ptext77:
 16448                           	opt stack 0
 16449  005828                     _getCANFrame:
 16450                           	opt stack 24
 16451                           
 16452                           ;incstack = 0
 16453                           ;incstack = 0
 16454                           ;getCANFrame@pid stored from wreg
 16455  005828  CFE8 F022          	movff	wreg,getCANFrame@pid
 16456                           
 16457                           ; BSR set to: 0
 16458                           ;main.c: 2933: ECAN_RX_MSG_FLAGS flags;
 16459                           ;main.c: 2937: if (vscp_imsg.flags & 0x80) return 0;
 16460  00582C  AFC5               	btfss	_vscp_imsg& (0+255),7,b
 16461  00582E  D002               	goto	l8193
 16462  005830                     l8189:
 16463  005830  0E00               	movlw	0
 16464  005832  D00F               	goto	l639
 16465  005834                     l8193:
 16466                           
 16467                           ; BSR set to: 0
 16468                           ;main.c: 2939: if (ECANReceiveMessage((unsigned long *) pid, (BYTE*) pdata, (BYTE*) pdlc
      +                          , &flags)) {
 16469  005834  C021  F015         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 16470  005838  C020  F016         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 16471  00583C  0E23               	movlw	low getCANFrame@flags
 16472  00583E  6E17               	movwf	?_ECANReceiveMessage+2,c
 16473  005840  5022               	movf	getCANFrame@pid,w,c
 16474  005842  EC0B  F01C         	call	_ECANReceiveMessage
 16475  005846  0900               	iorlw	0
 16476  005848  E0F3               	bz	l8189
 16477                           
 16478                           ;main.c: 2941: if (flags & ECAN_RX_RTR_FRAME) return 0;
 16479  00584A  AC23               	btfss	getCANFrame@flags,6,c
 16480                           
 16481                           ;main.c: 2944: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 16482  00584C  AA23               	btfss	getCANFrame@flags,5,c
 16483  00584E  D7F0               	goto	l8189
 16484                           
 16485                           ;main.c: 2946: return 1;
 16486  005850  0E01               	movlw	1
 16487  005852                     l639:
 16488  005852  0012               	return	
 16489  005854                     __end_of_getCANFrame:
 16490                           	opt stack 0
 16491                           tblptru	equ	0xFF8
 16492                           tblptrh	equ	0xFF7
 16493                           tblptrl	equ	0xFF6
 16494                           tablat	equ	0xFF5
 16495                           prodh	equ	0xFF4
 16496                           prodl	equ	0xFF3
 16497                           postinc0	equ	0xFEE
 16498                           wreg	equ	0xFE8
 16499                           indf1	equ	0xFE7
 16500                           postdec1	equ	0xFE5
 16501                           fsr1h	equ	0xFE2
 16502                           fsr1l	equ	0xFE1
 16503                           indf2	equ	0xFDF
 16504                           postinc2	equ	0xFDE
 16505                           postdec2	equ	0xFDD
 16506                           plusw2	equ	0xFDB
 16507                           fsr2h	equ	0xFDA
 16508                           fsr2l	equ	0xFD9
 16509                           status	equ	0xFD8
 16510                           
 16511 ;; *************** function _ECANReceiveMessage *****************
 16512 ;; Defined at:
 16513 ;;		line 803 in file "../ECAN.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;  id              1    wreg     PTR unsigned long 
 16516 ;;		 -> getVSCPFrame@id(4), 
 16517 ;;  data            1   20[COMRAM] PTR unsigned char 
 16518 ;;		 -> vscp_imsg(14), 
 16519 ;;  dataLen         1   21[COMRAM] PTR unsigned char 
 16520 ;;		 -> vscp_imsg(14), 
 16521 ;;  msgFlags        1   22[COMRAM] PTR enum E16324
 16522 ;;		 -> getCANFrame@flags(1), 
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;  id              1   25[COMRAM] PTR unsigned long 
 16525 ;;		 -> getVSCPFrame@id(4), 
 16526 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 16527 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16528 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16529 ;;  savedPtr        2   23[COMRAM] PTR unsigned char 
 16530 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 16531 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 16532 ;;  temp            1   28[COMRAM] struct .
 16533 ;;  mode            1   27[COMRAM] unsigned char 
 16534 ;;  i               1   26[COMRAM] unsigned char 
 16535 ;; Return value:  Size  Location     Type
 16536 ;;                  1    wreg      enum E15660
 16537 ;; Registers used:
 16538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16539 ;; Tracked objects:
 16540 ;;		On entry : F/0
 16541 ;;		On exit  : 0/0
 16542 ;;		Unchanged: 0/0
 16543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16544 ;;      Params:         3       0       0       0       0       0       0
 16545 ;;      Locals:         8       0       0       0       0       0       0
 16546 ;;      Temps:          0       0       0       0       0       0       0
 16547 ;;      Totals:        11       0       0       0       0       0       0
 16548 ;;Total ram usage:       11 bytes
 16549 ;; Hardware stack levels used:    1
 16550 ;; Hardware stack levels required when called:    3
 16551 ;; This function calls:
 16552 ;;		__ECANPointBuffer
 16553 ;;		__RegsToCANID
 16554 ;; This function is called by:
 16555 ;;		_getCANFrame
 16556 ;; This function uses a non-reentrant model
 16557 ;;
 16558                           
 16559                           	psect	text78
 16560  003816                     __ptext78:
 16561                           	opt stack 0
 16562  003816                     _ECANReceiveMessage:
 16563                           	opt stack 24
 16564                           
 16565                           ;incstack = 0
 16566                           ;incstack = 0
 16567                           ;ECANReceiveMessage@id stored from wreg
 16568  003816  CFE8 F01A          	movff	wreg,ECANReceiveMessage@id
 16569                           
 16570                           ; BSR set to: 0
 16571                           ;ECAN.c: 805: BYTE mode;
 16572                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 16573                           ;ECAN.c: 809: char i;
 16574                           ;ECAN.c: 810: BYTE_VAL temp;
 16575                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 16576  00381A  6A48               	clrf	__ECANRxFilterHitInfo,c
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 16580  00381C  5077               	movf	3959,w,c	;volatile
 16581  00381E  0BC0               	andlw	192
 16582  003820  6E1C               	movwf	ECANReceiveMessage@mode,c
 16583                           
 16584                           ; BSR set to: 0
 16585                           ;ECAN.c: 816: if ( mode == 0x00 )
 16586  003822  661C               	tstfsz	ECANReceiveMessage@mode,c
 16587  003824  D032               	goto	l8325
 16588                           
 16589                           ; BSR set to: 0
 16590                           ;ECAN.c: 822: {
 16591                           ;ECAN.c: 824: if ( RXB0FUL )
 16592  003826  AE60               	btfss	3936,7,c	;volatile
 16593  003828  D012               	goto	l835
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;ECAN.c: 825: {
 16597                           ;ECAN.c: 827: RXB0IF = 0;
 16598  00382A  90A4               	bcf	4004,0,c	;volatile
 16599                           
 16600                           ;ECAN.c: 830: if ( RXB0OVFL )
 16601  00382C  AE74               	btfss	3956,7,c	;volatile
 16602  00382E  D006               	goto	l8301
 16603                           
 16604                           ; BSR set to: 0
 16605                           ;ECAN.c: 831: {
 16606                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 16607  003830  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16608  003832  6ED9               	movwf	fsr2l,c
 16609  003834  6ADA               	clrf	fsr2h,c
 16610  003836  0E00               	movlw	0
 16611  003838  86DB               	bsf	plusw2,3,c
 16612                           
 16613                           ; BSR set to: 0
 16614                           ;ECAN.c: 833: RXB0OVFL = 0;
 16615  00383A  9E74               	bcf	3956,7,c	;volatile
 16616  00383C                     l8301:
 16617                           
 16618                           ; BSR set to: 0
 16619                           ;ECAN.c: 834: }
 16620                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 16621  00383C  A060               	btfss	3936,0,c	;volatile
 16622  00383E  D002               	bra	u5625
 16623  003840  8048               	bsf	__ECANRxFilterHitInfo,0,c
 16624  003842  D001               	bra	u5627
 16625  003844                     u5625:
 16626  003844  9048               	bcf	__ECANRxFilterHitInfo,0,c
 16627  003846                     u5627:
 16628                           
 16629                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 16630  003846  0E0F               	movlw	15	;volatile
 16631  003848  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16632  00384A  0E60               	movlw	96	;volatile
 16633  00384C  D01A               	goto	L34
 16634  00384E                     l835:
 16635                           
 16636                           ; BSR set to: 0
 16637                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 16638  00384E  010F               	movlb	15	; () banked
 16639  003850  AF50               	btfss	80,7,b	;volatile
 16640  003852  D019               	goto	l8319
 16641                           
 16642                           ; BSR set to: 15
 16643                           ;ECAN.c: 842: {
 16644                           ;ECAN.c: 844: RXB1IF = 0;
 16645  003854  92A4               	bcf	4004,1,c	;volatile
 16646                           
 16647                           ;ECAN.c: 847: if ( RXB1OVFL )
 16648  003856  AC74               	btfss	3956,6,c	;volatile
 16649  003858  D006               	goto	l8311
 16650                           
 16651                           ; BSR set to: 15
 16652                           ;ECAN.c: 848: {
 16653                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 16654  00385A  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16655  00385C  6ED9               	movwf	fsr2l,c
 16656  00385E  6ADA               	clrf	fsr2h,c
 16657  003860  0E00               	movlw	0
 16658  003862  86DB               	bsf	plusw2,3,c
 16659                           
 16660                           ; BSR set to: 15
 16661                           ;ECAN.c: 850: RXB1OVFL = 0;
 16662  003864  9C74               	bcf	3956,6,c	;volatile
 16663  003866                     l8311:
 16664                           
 16665                           ; BSR set to: 15
 16666                           ;ECAN.c: 851: }
 16667                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 16668  003866  5150               	movf	80,w,b	;volatile
 16669  003868  0B07               	andlw	7
 16670  00386A  6E48               	movwf	__ECANRxFilterHitInfo,c
 16671                           
 16672                           ; BSR set to: 15
 16673                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 16674  00386C  0E02               	movlw	2
 16675  00386E  6048               	cpfslt	__ECANRxFilterHitInfo,c
 16676  003870  D005               	goto	l8317
 16677                           
 16678                           ; BSR set to: 15
 16679                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 16680  003872  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16681  003874  6ED9               	movwf	fsr2l,c
 16682  003876  6ADA               	clrf	fsr2h,c
 16683  003878  0E00               	movlw	0
 16684  00387A  8EDB               	bsf	plusw2,7,c
 16685  00387C                     l8317:
 16686                           
 16687                           ; BSR set to: 15
 16688                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 16689  00387C  0E0F               	movlw	15	;volatile
 16690  00387E  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16691  003880  0E50               	movlw	80	;volatile
 16692  003882                     L34:
 16693  003882  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16694                           
 16695                           ;ECAN.c: 860: }
 16696  003884  D065               	goto	l8379
 16697  003886                     l8319:
 16698                           
 16699                           ;ECAN.c: 861: else
 16700                           ;ECAN.c: 862: return FALSE;
 16701  003886  0E00               	movlw	0
 16702  003888  D0CC               	goto	l842
 16703  00388A                     l8325:
 16704                           
 16705                           ; BSR set to: 0
 16706                           ;ECAN.c: 869: else if ( mode == 0x40 )
 16707  00388A  501C               	movf	ECANReceiveMessage@mode,w,c
 16708  00388C  0A40               	xorlw	64
 16709  00388E  E146               	bnz	l845
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;ECAN.c: 875: {
 16713                           ;ECAN.c: 876: if ( RXB0FUL )
 16714  003890  AE60               	btfss	3936,7,c	;volatile
 16715  003892  D004               	goto	l846
 16716                           
 16717                           ; BSR set to: 0
 16718                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 16719  003894  0E0F               	movlw	15	;volatile
 16720  003896  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16721  003898  0E60               	movlw	96	;volatile
 16722  00389A  D03E               	goto	L41
 16723  00389C                     l846:
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 16727  00389C  010F               	movlb	15	; () banked
 16728  00389E  AF50               	btfss	80,7,b	;volatile
 16729  0038A0  D004               	goto	l848
 16730                           
 16731                           ; BSR set to: 15
 16732                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 16733  0038A2  0E0F               	movlw	15	;volatile
 16734  0038A4  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16735  0038A6  0E50               	movlw	80	;volatile
 16736  0038A8  D037               	goto	L41
 16737  0038AA                     l848:
 16738                           
 16739                           ; BSR set to: 15
 16740                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 16741  0038AA  010D               	movlb	13
 16742  0038AC  B5F8               	btfsc	248,2,b	;volatile
 16743  0038AE  D007               	goto	l850
 16744  0038B0  010E               	movlb	14
 16745  0038B2  AF20               	btfss	32,7,b	;volatile
 16746  0038B4  D004               	goto	l850
 16747                           
 16748                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 16749  0038B6  0E0E               	movlw	14	;volatile
 16750  0038B8  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16751  0038BA  0E20               	movlw	32	;volatile
 16752  0038BC  D02D               	goto	L41
 16753  0038BE                     l850:
 16754                           
 16755                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 16756  0038BE  010D               	movlb	13
 16757  0038C0  B7F8               	btfsc	248,3,b	;volatile
 16758  0038C2  D007               	goto	l852
 16759  0038C4  010E               	movlb	14
 16760  0038C6  AF30               	btfss	48,7,b	;volatile
 16761  0038C8  D004               	goto	l852
 16762                           
 16763                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 16764  0038CA  0E0E               	movlw	14	;volatile
 16765  0038CC  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16766  0038CE  0E30               	movlw	48	;volatile
 16767  0038D0  D023               	goto	L41
 16768  0038D2                     l852:
 16769                           
 16770                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 16771  0038D2  010D               	movlb	13
 16772  0038D4  B9F8               	btfsc	248,4,b	;volatile
 16773  0038D6  D007               	goto	l854
 16774  0038D8  010E               	movlb	14
 16775  0038DA  AF40               	btfss	64,7,b	;volatile
 16776  0038DC  D004               	goto	l854
 16777                           
 16778                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 16779  0038DE  0E0E               	movlw	14	;volatile
 16780  0038E0  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16781  0038E2  0E40               	movlw	64	;volatile
 16782  0038E4  D019               	goto	L41
 16783  0038E6                     l854:
 16784                           
 16785                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 16786  0038E6  010D               	movlb	13
 16787  0038E8  BBF8               	btfsc	248,5,b	;volatile
 16788  0038EA  D005               	goto	l856
 16789  0038EC  010E               	movlb	14
 16790  0038EE  AF50               	btfss	80,7,b	;volatile
 16791  0038F0  D002               	goto	l856
 16792                           
 16793                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 16794  0038F2  0E0E               	movlw	14	;volatile
 16795  0038F4  D7D7               	goto	L42
 16796  0038F6                     l856:
 16797                           
 16798                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 16799  0038F6  010D               	movlb	13
 16800  0038F8  BDF8               	btfsc	248,6,b	;volatile
 16801  0038FA  D005               	goto	l858
 16802  0038FC  010E               	movlb	14
 16803  0038FE  AF60               	btfss	96,7,b	;volatile
 16804  003900  D002               	goto	l858
 16805                           
 16806                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 16807  003902  0E0E               	movlw	14	;volatile
 16808  003904  D7C8               	goto	L43
 16809  003906                     l858:
 16810                           
 16811                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 16812  003906  010D               	movlb	13
 16813  003908  BFF8               	btfsc	248,7,b	;volatile
 16814  00390A  D7BD               	goto	l8319
 16815  00390C  010E               	movlb	14
 16816  00390E  AF70               	btfss	112,7,b	;volatile
 16817  003910  D7BA               	goto	l8319
 16818                           
 16819                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 16820  003912  0E0E               	movlw	14	;volatile
 16821  003914  6E1F               	movwf	ECANReceiveMessage@ptr+1,c
 16822  003916  0E70               	movlw	112	;volatile
 16823  003918                     L41:
 16824  003918  6E1E               	movwf	ECANReceiveMessage@ptr,c
 16825  00391A  D00A               	goto	l8369
 16826  00391C                     l845:
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;ECAN.c: 910: else
 16830                           ;ECAN.c: 915: {
 16831                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 16832  00391C  AE74               	btfss	3956,7,c	;volatile
 16833  00391E  D7B3               	goto	l8319
 16834                           
 16835                           ; BSR set to: 0
 16836                           ;ECAN.c: 917: {
 16837                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 16838  003920  506F               	movf	3951,w,c	;volatile
 16839  003922  0B07               	andlw	7
 16840  003924  EC25  F029         	call	__ECANPointBuffer
 16841  003928  C00E  F01E         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 16842  00392C  C00F  F01F         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 16843  003930                     l8369:
 16844                           
 16845                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 16846  003930  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16847  003934  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16848  003938  50DF               	movf	indf2,w,c
 16849  00393A  0B1F               	andlw	31
 16850  00393C  6E48               	movwf	__ECANRxFilterHitInfo,c
 16851                           
 16852                           ;ECAN.c: 932: RXB1IF = 0;
 16853  00393E  92A4               	bcf	4004,1,c	;volatile
 16854                           
 16855                           ;ECAN.c: 934: if ( RXB1OVFL )
 16856  003940  AC74               	btfss	3956,6,c	;volatile
 16857  003942  D006               	goto	l8379
 16858                           
 16859                           ;ECAN.c: 935: {
 16860                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 16861  003944  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16862  003946  6ED9               	movwf	fsr2l,c
 16863  003948  6ADA               	clrf	fsr2h,c
 16864  00394A  0E00               	movlw	0
 16865  00394C  86DB               	bsf	plusw2,3,c
 16866                           
 16867                           ;ECAN.c: 937: RXB1OVFL = 0;
 16868  00394E  9C74               	bcf	3956,6,c	;volatile
 16869  003950                     l8379:
 16870                           
 16871                           ;ECAN.c: 942: savedPtr = ptr;
 16872  003950  C01E  F018         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 16873  003954  C01F  F019         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 16874                           
 16875                           ;ECAN.c: 943: *msgFlags = 0;
 16876  003958  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16877  00395A  6ED9               	movwf	fsr2l,c
 16878  00395C  6ADA               	clrf	fsr2h,c
 16879  00395E  6ADF               	clrf	indf2,c
 16880                           
 16881                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 16882  003960  EE20 F005          	lfsr	2,5
 16883  003964  501E               	movf	ECANReceiveMessage@ptr,w,c
 16884  003966  26D9               	addwf	fsr2l,f,c
 16885  003968  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16886  00396A  22DA               	addwfc	fsr2h,f,c
 16887  00396C  50DF               	movf	indf2,w,c
 16888  00396E  6E1D               	movwf	ECANReceiveMessage@temp,c
 16889                           
 16890                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 16891  003970  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16892  003972  6ED9               	movwf	fsr2l,c
 16893  003974  6ADA               	clrf	fsr2h,c
 16894  003976  501D               	movf	ECANReceiveMessage@temp,w,c
 16895  003978  0B0F               	andlw	15
 16896  00397A  6EDF               	movwf	indf2,c
 16897                           
 16898                           ;ECAN.c: 950: if ( temp.bits.b6 )
 16899  00397C  AC1D               	btfss	ECANReceiveMessage@temp,6,c
 16900  00397E  D005               	goto	l866
 16901                           
 16902                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 16903  003980  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16904  003982  6ED9               	movwf	fsr2l,c
 16905  003984  6ADA               	clrf	fsr2h,c
 16906  003986  0E00               	movlw	0
 16907  003988  8CDB               	bsf	plusw2,6,c
 16908  00398A                     l866:
 16909                           
 16910                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 16911  00398A  EE20 F002          	lfsr	2,2
 16912  00398E  501E               	movf	ECANReceiveMessage@ptr,w,c
 16913  003990  26D9               	addwf	fsr2l,f,c
 16914  003992  501F               	movf	ECANReceiveMessage@ptr+1,w,c
 16915  003994  22DA               	addwfc	fsr2h,f,c
 16916  003996  50DF               	movf	indf2,w,c
 16917  003998  6E1D               	movwf	ECANReceiveMessage@temp,c
 16918                           
 16919                           ;ECAN.c: 955: if ( temp.bits.b3 )
 16920  00399A  A61D               	btfss	ECANReceiveMessage@temp,3,c
 16921  00399C  D008               	goto	l867
 16922                           
 16923                           ;ECAN.c: 956: {
 16924                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 16925  00399E  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16926  0039A0  6ED9               	movwf	fsr2l,c
 16927  0039A2  6ADA               	clrf	fsr2h,c
 16928  0039A4  0E00               	movlw	0
 16929  0039A6  8ADB               	bsf	plusw2,5,c
 16930                           
 16931                           ;ECAN.c: 958: temp.Val = 1;
 16932  0039A8  0E01               	movlw	1
 16933  0039AA  6E1D               	movwf	ECANReceiveMessage@temp,c
 16934                           
 16935                           ;ECAN.c: 959: }
 16936  0039AC  D001               	goto	l8397
 16937  0039AE                     l867:
 16938                           
 16939                           ;ECAN.c: 960: else
 16940                           ;ECAN.c: 961: temp.Val = 0;
 16941  0039AE  6A1D               	clrf	ECANReceiveMessage@temp,c
 16942  0039B0                     l8397:
 16943                           
 16944                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 16945  0039B0  281E               	incf	ECANReceiveMessage@ptr,w,c
 16946  0039B2  6E0E               	movwf	?__RegsToCANID,c
 16947  0039B4  0E00               	movlw	0
 16948  0039B6  201F               	addwfc	ECANReceiveMessage@ptr+1,w,c
 16949  0039B8  6E0F               	movwf	?__RegsToCANID+1,c
 16950  0039BA  C01A  F010         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 16951  0039BE  C01D  F011         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 16952  0039C2  EC47  F020         	call	__RegsToCANID	;wreg free
 16953                           
 16954                           ;ECAN.c: 966: ptr += 6;
 16955  0039C6  0E06               	movlw	6
 16956  0039C8  261E               	addwf	ECANReceiveMessage@ptr,f,c
 16957  0039CA  0E00               	movlw	0
 16958  0039CC  221F               	addwfc	ECANReceiveMessage@ptr+1,f,c
 16959                           
 16960                           ;ECAN.c: 967: temp.Val = *dataLen;
 16961  0039CE  5016               	movf	ECANReceiveMessage@dataLen,w,c
 16962  0039D0  6ED9               	movwf	fsr2l,c
 16963  0039D2  6ADA               	clrf	fsr2h,c
 16964  0039D4  50DF               	movf	indf2,w,c
 16965  0039D6  6E1D               	movwf	ECANReceiveMessage@temp,c
 16966                           
 16967                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 16968  0039D8  6A1B               	clrf	ECANReceiveMessage@i,c
 16969  0039DA  D00D               	goto	l8413
 16970  0039DC                     l8405:
 16971                           
 16972                           ;ECAN.c: 969: *data++ = *ptr++;
 16973  0039DC  C01E  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 16974  0039E0  C01F  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 16975  0039E4  5015               	movf	ECANReceiveMessage@data,w,c
 16976  0039E6  6EE1               	movwf	fsr1l,c
 16977  0039E8  6AE2               	clrf	fsr1h,c
 16978  0039EA  CFDF FFE7          	movff	indf2,indf1
 16979  0039EE  4A1E               	infsnz	ECANReceiveMessage@ptr,f,c
 16980  0039F0  2A1F               	incf	ECANReceiveMessage@ptr+1,f,c
 16981  0039F2  2A15               	incf	ECANReceiveMessage@data,f,c
 16982  0039F4  2A1B               	incf	ECANReceiveMessage@i,f,c
 16983  0039F6                     l8413:
 16984  0039F6  501D               	movf	ECANReceiveMessage@temp,w,c
 16985  0039F8  5C1B               	subwf	ECANReceiveMessage@i,w,c
 16986  0039FA  E3F0               	bnc	l8405
 16987                           
 16988                           ;ECAN.c: 972: if ( IRXIF )
 16989  0039FC  AEA4               	btfss	4004,7,c	;volatile
 16990  0039FE  D006               	goto	l8419
 16991                           
 16992                           ;ECAN.c: 973: {
 16993                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 16994  003A00  5017               	movf	ECANReceiveMessage@msgFlags,w,c
 16995  003A02  6ED9               	movwf	fsr2l,c
 16996  003A04  6ADA               	clrf	fsr2h,c
 16997  003A06  0E00               	movlw	0
 16998  003A08  88DB               	bsf	plusw2,4,c
 16999                           
 17000                           ;ECAN.c: 975: IRXIF = 0;
 17001  003A0A  9EA4               	bcf	4004,7,c	;volatile
 17002  003A0C                     l8419:
 17003                           
 17004                           ;ECAN.c: 976: }
 17005                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 17006  003A0C  C018  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 17007  003A10  C019  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 17008  003A14  0E7F               	movlw	127
 17009  003A16  16DF               	andwf	indf2,f,c
 17010                           
 17011                           ;ECAN.c: 983: if ( mode == 0x80 )
 17012  003A18  501C               	movf	ECANReceiveMessage@mode,w,c
 17013  003A1A  0A80               	xorlw	128
 17014  003A1C  B4D8               	btfsc	status,2,c
 17015                           
 17016                           ;ECAN.c: 984: FIFOEMPTY = 0;
 17017  003A1E  9E74               	bcf	3956,7,c	;volatile
 17018                           
 17019                           ;ECAN.c: 990: return TRUE;
 17020  003A20  0E01               	movlw	1
 17021  003A22                     l842:
 17022  003A22  0012               	return	
 17023  003A24                     __end_of_ECANReceiveMessage:
 17024                           	opt stack 0
 17025                           tblptru	equ	0xFF8
 17026                           tblptrh	equ	0xFF7
 17027                           tblptrl	equ	0xFF6
 17028                           tablat	equ	0xFF5
 17029                           prodh	equ	0xFF4
 17030                           prodl	equ	0xFF3
 17031                           postinc0	equ	0xFEE
 17032                           wreg	equ	0xFE8
 17033                           indf1	equ	0xFE7
 17034                           postdec1	equ	0xFE5
 17035                           fsr1h	equ	0xFE2
 17036                           fsr1l	equ	0xFE1
 17037                           indf2	equ	0xFDF
 17038                           postinc2	equ	0xFDE
 17039                           postdec2	equ	0xFDD
 17040                           plusw2	equ	0xFDB
 17041                           fsr2h	equ	0xFDA
 17042                           fsr2l	equ	0xFD9
 17043                           status	equ	0xFD8
 17044                           
 17045 ;; *************** function __RegsToCANID *****************
 17046 ;; Defined at:
 17047 ;;		line 1156 in file "../ECAN.c"
 17048 ;; Parameters:    Size  Location     Type
 17049 ;;  ptr             2   13[COMRAM] PTR unsigned char 
 17050 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17051 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17052 ;;  val             1   15[COMRAM] PTR unsigned long 
 17053 ;;		 -> getVSCPFrame@id(4), 
 17054 ;;  type            1   16[COMRAM] unsigned char 
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;  Value           1   19[COMRAM] PTR struct _CAN_MESSAGE_
 17057 ;;		 -> getVSCPFrame@id(4), 
 17058 ;; Return value:  Size  Location     Type
 17059 ;;		None               void
 17060 ;; Registers used:
 17061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17062 ;; Tracked objects:
 17063 ;;		On entry : 0/0
 17064 ;;		On exit  : 0/0
 17065 ;;		Unchanged: 0/0
 17066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17067 ;;      Params:         4       0       0       0       0       0       0
 17068 ;;      Locals:         1       0       0       0       0       0       0
 17069 ;;      Temps:          2       0       0       0       0       0       0
 17070 ;;      Totals:         7       0       0       0       0       0       0
 17071 ;;Total ram usage:        7 bytes
 17072 ;; Hardware stack levels used:    1
 17073 ;; Hardware stack levels required when called:    2
 17074 ;; This function calls:
 17075 ;;		Nothing
 17076 ;; This function is called by:
 17077 ;;		_ECANReceiveMessage
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           	psect	text79
 17082  00408E                     __ptext79:
 17083                           	opt stack 0
 17084  00408E                     __RegsToCANID:
 17085                           	opt stack 24
 17086                           
 17087                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 17088                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 17089                           
 17090                           ;incstack = 0
 17091                           ;incstack = 0
 17092  00408E  C010  F014         	movff	__RegsToCANID@val,__RegsToCANID@Value
 17093                           
 17094                           ;ECAN.c: 1161: if ( type == 0 )
 17095  004092  6611               	tstfsz	__RegsToCANID@type,c
 17096  004094  D046               	goto	l8489
 17097                           
 17098                           ;ECAN.c: 1162: {
 17099                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 17100  004096  5014               	movf	__RegsToCANID@Value,w,c
 17101  004098  6ED9               	movwf	fsr2l,c
 17102  00409A  6ADA               	clrf	fsr2h,c
 17103  00409C  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17104  0040A0  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17105  0040A4  50E7               	movf	indf1,w,c
 17106  0040A6  6E12               	movwf	??__RegsToCANID& (0+255),c
 17107  0040A8  90D8               	bcf	status,0,c
 17108  0040AA  3612               	rlcf	??__RegsToCANID,f,c
 17109  0040AC  90D8               	bcf	status,0,c
 17110  0040AE  3612               	rlcf	??__RegsToCANID,f,c
 17111  0040B0  90D8               	bcf	status,0,c
 17112  0040B2  3412               	rlcf	??__RegsToCANID,w,c
 17113  0040B4  6EDF               	movwf	indf2,c
 17114                           
 17115                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 17116  0040B6  5014               	movf	__RegsToCANID@Value,w,c
 17117  0040B8  6ED9               	movwf	fsr2l,c
 17118  0040BA  6ADA               	clrf	fsr2h,c
 17119  0040BC  2AD9               	incf	fsr2l,f,c
 17120  0040BE  6ADA               	clrf	fsr2h,c
 17121  0040C0  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17122  0040C4  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17123  0040C8  50E7               	movf	indf1,w,c
 17124  0040CA  6E12               	movwf	??__RegsToCANID& (0+255),c
 17125  0040CC  0E05               	movlw	5
 17126  0040CE  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17127  0040D0                     u5935:
 17128  0040D0  90D8               	bcf	status,0,c
 17129  0040D2  3212               	rrcf	??__RegsToCANID,f,c
 17130  0040D4  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17131  0040D6  D7FC               	goto	u5935
 17132  0040D8  5012               	movf	??__RegsToCANID,w,c
 17133  0040DA  6EDF               	movwf	indf2,c
 17134                           
 17135                           ;ECAN.c: 1166: ptr++;
 17136  0040DC  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17137  0040DE  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17138                           
 17139                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 17140  0040E0  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17141  0040E4  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17142  0040E8  50DF               	movf	indf2,w,c
 17143  0040EA  6E12               	movwf	??__RegsToCANID& (0+255),c
 17144  0040EC  0E05               	movlw	5
 17145  0040EE  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17146  0040F0                     u5945:
 17147  0040F0  90D8               	bcf	status,0,c
 17148  0040F2  3212               	rrcf	??__RegsToCANID,f,c
 17149  0040F4  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17150  0040F6  D7FC               	goto	u5945
 17151  0040F8  5014               	movf	__RegsToCANID@Value,w,c
 17152  0040FA  6ED9               	movwf	fsr2l,c
 17153  0040FC  6ADA               	clrf	fsr2h,c
 17154  0040FE  5012               	movf	??__RegsToCANID,w,c
 17155  004100  12DF               	iorwf	indf2,f,c
 17156                           
 17157                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 17158  004102  5014               	movf	__RegsToCANID@Value,w,c
 17159  004104  6ED9               	movwf	fsr2l,c
 17160  004106  6ADA               	clrf	fsr2h,c
 17161  004108  0E02               	movlw	2
 17162  00410A  26D9               	addwf	fsr2l,f,c
 17163  00410C  6ADA               	clrf	fsr2h,c
 17164  00410E  6ADF               	clrf	indf2,c
 17165                           
 17166                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 17167  004110  5014               	movf	__RegsToCANID@Value,w,c
 17168  004112  6ED9               	movwf	fsr2l,c
 17169  004114  6ADA               	clrf	fsr2h,c
 17170  004116  0E03               	movlw	3
 17171  004118  26D9               	addwf	fsr2l,f,c
 17172  00411A  6ADA               	clrf	fsr2h,c
 17173  00411C  0E00               	movlw	0
 17174  00411E  6EDF               	movwf	indf2,c
 17175                           
 17176                           ;ECAN.c: 1170: }
 17177  004120  D067               	goto	l889
 17178  004122                     l8489:
 17179                           
 17180                           ;ECAN.c: 1171: else
 17181                           ;ECAN.c: 1172: {
 17182                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 17183  004122  5014               	movf	__RegsToCANID@Value,w,c
 17184  004124  6ED9               	movwf	fsr2l,c
 17185  004126  6ADA               	clrf	fsr2h,c
 17186  004128  0E02               	movlw	2
 17187  00412A  26D9               	addwf	fsr2l,f,c
 17188  00412C  6ADA               	clrf	fsr2h,c
 17189  00412E  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17190  004132  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17191  004136  50E7               	movf	indf1,w,c
 17192  004138  6E12               	movwf	??__RegsToCANID& (0+255),c
 17193  00413A  0E05               	movlw	5
 17194  00413C  6E13               	movwf	(??__RegsToCANID+1)& (0+255),c
 17195  00413E                     u5955:
 17196  00413E  90D8               	bcf	status,0,c
 17197  004140  3612               	rlcf	??__RegsToCANID,f,c
 17198  004142  2E13               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 17199  004144  D7FC               	goto	u5955
 17200  004146  5012               	movf	??__RegsToCANID,w,c
 17201  004148  6EDF               	movwf	indf2,c
 17202                           
 17203                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 17204  00414A  5014               	movf	__RegsToCANID@Value,w,c
 17205  00414C  6ED9               	movwf	fsr2l,c
 17206  00414E  6ADA               	clrf	fsr2h,c
 17207  004150  0E03               	movlw	3
 17208  004152  26D9               	addwf	fsr2l,f,c
 17209  004154  6ADA               	clrf	fsr2h,c
 17210  004156  C00E  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 17211  00415A  C00F  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 17212  00415E  50E7               	movf	indf1,w,c
 17213  004160  6E12               	movwf	??__RegsToCANID& (0+255),c
 17214  004162  90D8               	bcf	status,0,c
 17215  004164  3212               	rrcf	??__RegsToCANID,f,c
 17216  004166  90D8               	bcf	status,0,c
 17217  004168  3212               	rrcf	??__RegsToCANID,f,c
 17218  00416A  90D8               	bcf	status,0,c
 17219  00416C  3012               	rrcf	??__RegsToCANID,w,c
 17220  00416E  6EDF               	movwf	indf2,c
 17221                           
 17222                           ;ECAN.c: 1176: ptr++;
 17223  004170  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17224  004172  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17225                           
 17226                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 17227  004174  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17228  004178  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17229  00417C  50DF               	movf	indf2,w,c
 17230  00417E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17231  004180  0E03               	movlw	3
 17232  004182  1612               	andwf	??__RegsToCANID,f,c
 17233  004184  5014               	movf	__RegsToCANID@Value,w,c
 17234  004186  6ED9               	movwf	fsr2l,c
 17235  004188  6ADA               	clrf	fsr2h,c
 17236  00418A  0E02               	movlw	2
 17237  00418C  26D9               	addwf	fsr2l,f,c
 17238  00418E  6ADA               	clrf	fsr2h,c
 17239  004190  5012               	movf	??__RegsToCANID,w,c
 17240  004192  12DF               	iorwf	indf2,f,c
 17241                           
 17242                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 17243  004194  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17244  004198  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17245  00419C  50DF               	movf	indf2,w,c
 17246  00419E  6E12               	movwf	??__RegsToCANID& (0+255),c
 17247  0041A0  90D8               	bcf	status,0,c
 17248  0041A2  3212               	rrcf	??__RegsToCANID,f,c
 17249  0041A4  90D8               	bcf	status,0,c
 17250  0041A6  3212               	rrcf	??__RegsToCANID,f,c
 17251  0041A8  90D8               	bcf	status,0,c
 17252  0041AA  3212               	rrcf	??__RegsToCANID,f,c
 17253  0041AC  0E1C               	movlw	28
 17254  0041AE  1612               	andwf	??__RegsToCANID,f,c
 17255  0041B0  5014               	movf	__RegsToCANID@Value,w,c
 17256  0041B2  6ED9               	movwf	fsr2l,c
 17257  0041B4  6ADA               	clrf	fsr2h,c
 17258  0041B6  0E02               	movlw	2
 17259  0041B8  26D9               	addwf	fsr2l,f,c
 17260  0041BA  6ADA               	clrf	fsr2h,c
 17261  0041BC  5012               	movf	??__RegsToCANID,w,c
 17262  0041BE  12DF               	iorwf	indf2,f,c
 17263                           
 17264                           ;ECAN.c: 1180: ptr++;
 17265  0041C0  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17266  0041C2  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17267                           
 17268                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 17269  0041C4  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17270  0041C8  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17271  0041CC  5014               	movf	__RegsToCANID@Value,w,c
 17272  0041CE  6EE1               	movwf	fsr1l,c
 17273  0041D0  6AE2               	clrf	fsr1h,c
 17274  0041D2  2AE1               	incf	fsr1l,f,c
 17275  0041D4  6AE2               	clrf	fsr1h,c
 17276  0041D6  CFDF FFE7          	movff	indf2,indf1
 17277                           
 17278                           ;ECAN.c: 1182: ptr++;
 17279  0041DA  4A0E               	infsnz	__RegsToCANID@ptr,f,c
 17280  0041DC  2A0F               	incf	__RegsToCANID@ptr+1,f,c
 17281                           
 17282                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 17283  0041DE  C00E  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 17284  0041E2  C00F  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 17285  0041E6  5014               	movf	__RegsToCANID@Value,w,c
 17286  0041E8  6EE1               	movwf	fsr1l,c
 17287  0041EA  6AE2               	clrf	fsr1h,c
 17288  0041EC  CFDF FFE7          	movff	indf2,indf1
 17289  0041F0                     l889:
 17290  0041F0  0012               	return	
 17291  0041F2                     __end_of__RegsToCANID:
 17292                           	opt stack 0
 17293                           tblptru	equ	0xFF8
 17294                           tblptrh	equ	0xFF7
 17295                           tblptrl	equ	0xFF6
 17296                           tablat	equ	0xFF5
 17297                           prodh	equ	0xFF4
 17298                           prodl	equ	0xFF3
 17299                           postinc0	equ	0xFEE
 17300                           wreg	equ	0xFE8
 17301                           indf1	equ	0xFE7
 17302                           postdec1	equ	0xFE5
 17303                           fsr1h	equ	0xFE2
 17304                           fsr1l	equ	0xFE1
 17305                           indf2	equ	0xFDF
 17306                           postinc2	equ	0xFDE
 17307                           postdec2	equ	0xFDD
 17308                           plusw2	equ	0xFDB
 17309                           fsr2h	equ	0xFDA
 17310                           fsr2l	equ	0xFD9
 17311                           status	equ	0xFD8
 17312                           
 17313 ;; *************** function __ECANPointBuffer *****************
 17314 ;; Defined at:
 17315 ;;		line 1207 in file "../ECAN.c"
 17316 ;; Parameters:    Size  Location     Type
 17317 ;;  b               1    wreg     unsigned char 
 17318 ;; Auto vars:     Size  Location     Type
 17319 ;;  b               1   16[COMRAM] unsigned char 
 17320 ;;  pt              2   17[COMRAM] PTR unsigned char 
 17321 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 17322 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  2   13[COMRAM] PTR unsigned char 
 17325 ;; Registers used:
 17326 ;;		wreg, status,2, status,0
 17327 ;; Tracked objects:
 17328 ;;		On entry : F/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17332 ;;      Params:         3       0       0       0       0       0       0
 17333 ;;      Locals:         3       0       0       0       0       0       0
 17334 ;;      Temps:          0       0       0       0       0       0       0
 17335 ;;      Totals:         6       0       0       0       0       0       0
 17336 ;;Total ram usage:        6 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; Hardware stack levels required when called:    2
 17339 ;; This function calls:
 17340 ;;		Nothing
 17341 ;; This function is called by:
 17342 ;;		_ECANReceiveMessage
 17343 ;; This function uses a non-reentrant model
 17344 ;;
 17345                           
 17346                           	psect	text80
 17347  00524A                     __ptext80:
 17348                           	opt stack 0
 17349  00524A                     __ECANPointBuffer:
 17350                           	opt stack 24
 17351                           
 17352                           ;incstack = 0
 17353                           ;incstack = 0
 17354                           ;__ECANPointBuffer@b stored from wreg
 17355  00524A  CFE8 F011          	movff	wreg,__ECANPointBuffer@b
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;ECAN.c: 1208: BYTE* pt;
 17359                           ;ECAN.c: 1210: switch(b)
 17360  00524E  D024               	goto	l8475
 17361  005250                     l8457:
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 17365  005250  0E0F               	movlw	15	;volatile
 17366  005252  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17367  005254  0E60               	movlw	96	;volatile
 17368  005256  D01E               	goto	L50
 17369  005258                     l8459:
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 17373  005258  010F               	movlb	15	; () banked
 17374  00525A  0E0F               	movlw	15	;volatile
 17375  00525C  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17376  00525E  0E50               	movlw	80	;volatile
 17377  005260  D019               	goto	L50
 17378  005262                     l8461:
 17379                           
 17380                           ; BSR set to: 0
 17381                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 17382  005262  010E               	movlb	14	; () banked
 17383  005264  0E0E               	movlw	14	;volatile
 17384  005266  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17385  005268  0E20               	movlw	32	;volatile
 17386  00526A  D014               	goto	L50
 17387  00526C                     l8463:
 17388                           
 17389                           ; BSR set to: 0
 17390                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 17391  00526C  010E               	movlb	14	; () banked
 17392  00526E  0E0E               	movlw	14	;volatile
 17393  005270  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17394  005272  0E30               	movlw	48	;volatile
 17395  005274  D00F               	goto	L50
 17396  005276                     l8465:
 17397                           
 17398                           ; BSR set to: 0
 17399                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 17400  005276  010E               	movlb	14	; () banked
 17401  005278  0E0E               	movlw	14	;volatile
 17402  00527A  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17403  00527C  0E40               	movlw	64	;volatile
 17404  00527E  D00A               	goto	L50
 17405  005280                     l8467:
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 17409  005280  010E               	movlb	14	; () banked
 17410  005282  0E0E               	movlw	14	;volatile
 17411  005284  D7EB               	goto	L51
 17412  005286                     l8469:
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 17416  005286  010E               	movlb	14	; () banked
 17417  005288  0E0E               	movlw	14	;volatile
 17418  00528A  D7E3               	goto	L52
 17419  00528C                     l8471:
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 17423  00528C  010E               	movlb	14	; () banked
 17424  00528E  0E0E               	movlw	14	;volatile
 17425  005290  6E13               	movwf	__ECANPointBuffer@pt+1,c
 17426  005292  0E70               	movlw	112	;volatile
 17427  005294                     L50:
 17428  005294  6E12               	movwf	__ECANPointBuffer@pt,c
 17429                           
 17430                           ;ECAN.c: 1235: break;
 17431  005296  D00F               	goto	l894
 17432  005298                     l8475:
 17433                           
 17434                           ; BSR set to: 0
 17435  005298  5011               	movf	__ECANPointBuffer@b,w,c
 17436                           
 17437                           ; Switch size 1, requested type "speed"
 17438                           ; Number of cases is 7, Range of values is 0 to 6
 17439                           ; switch strategies available:
 17440                           ; Name         Instructions Cycles
 17441                           ; simple_byte           22    12 (average)
 17442                           ;	Chosen strategy is simple_byte
 17443  00529A  E0DA               	bz	l8457
 17444  00529C  0A01               	xorlw	1	; case 1
 17445  00529E  E0DC               	bz	l8459
 17446  0052A0  0A03               	xorlw	3	; case 2
 17447  0052A2  E0DF               	bz	l8461
 17448  0052A4  0A01               	xorlw	1	; case 3
 17449  0052A6  E0E2               	bz	l8463
 17450  0052A8  0A07               	xorlw	7	; case 4
 17451  0052AA  E0E5               	bz	l8465
 17452  0052AC  0A01               	xorlw	1	; case 5
 17453  0052AE  E0E8               	bz	l8467
 17454  0052B0  0A03               	xorlw	3	; case 6
 17455  0052B2  E0E9               	bz	l8469
 17456  0052B4  D7EB               	goto	l8471
 17457  0052B6                     l894:
 17458                           
 17459                           ;ECAN.c: 1237: return (pt);
 17460  0052B6  C012  F00E         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 17461  0052BA  C013  F00F         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 17462  0052BE  0012               	return	
 17463  0052C0                     __end_of__ECANPointBuffer:
 17464                           	opt stack 0
 17465                           tblptru	equ	0xFF8
 17466                           tblptrh	equ	0xFF7
 17467                           tblptrl	equ	0xFF6
 17468                           tablat	equ	0xFF5
 17469                           prodh	equ	0xFF4
 17470                           prodl	equ	0xFF3
 17471                           postinc0	equ	0xFEE
 17472                           wreg	equ	0xFE8
 17473                           indf1	equ	0xFE7
 17474                           postdec1	equ	0xFE5
 17475                           fsr1h	equ	0xFE2
 17476                           fsr1l	equ	0xFE1
 17477                           indf2	equ	0xFDF
 17478                           postinc2	equ	0xFDE
 17479                           postdec2	equ	0xFDD
 17480                           plusw2	equ	0xFDB
 17481                           fsr2h	equ	0xFDA
 17482                           fsr2l	equ	0xFD9
 17483                           status	equ	0xFD8
 17484                           
 17485 ;; *************** function _vscp_check_pstorage *****************
 17486 ;; Defined at:
 17487 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 17488 ;; Parameters:    Size  Location     Type
 17489 ;;		None
 17490 ;; Auto vars:     Size  Location     Type
 17491 ;;		None
 17492 ;; Return value:  Size  Location     Type
 17493 ;;                  1    wreg      unsigned char 
 17494 ;; Registers used:
 17495 ;;		wreg, status,2, status,0, cstack
 17496 ;; Tracked objects:
 17497 ;;		On entry : 0/0
 17498 ;;		On exit  : 0/0
 17499 ;;		Unchanged: 0/0
 17500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17501 ;;      Params:         0       0       0       0       0       0       0
 17502 ;;      Locals:         0       0       0       0       0       0       0
 17503 ;;      Temps:          0       0       0       0       0       0       0
 17504 ;;      Totals:         0       0       0       0       0       0       0
 17505 ;;Total ram usage:        0 bytes
 17506 ;; Hardware stack levels used:    1
 17507 ;; Hardware stack levels required when called:    4
 17508 ;; This function calls:
 17509 ;;		_vscp_writeNicknamePermanent
 17510 ;;		_vscp_getSegmentCRC
 17511 ;;		_vscp_setSegmentCRC
 17512 ;;		_vscp_setControlByte
 17513 ;; This function is called by:
 17514 ;;		_main
 17515 ;; This function uses a non-reentrant model
 17516 ;;
 17517                           
 17518                           	psect	text81
 17519  0059B6                     __ptext81:
 17520                           	opt stack 0
 17521  0059B6                     _vscp_check_pstorage:
 17522                           	opt stack 26
 17523                           
 17524                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 17525                           
 17526                           ;incstack = 0
 17527                           ;incstack = 0
 17528  0059B6  ECF4  F02D         	call	_vscp_getSegmentCRC	;wreg free
 17529  0059BA  0BC0               	andlw	192
 17530  0059BC  0A40               	xorlw	64
 17531  0059BE  E102               	bnz	l9571
 17532                           
 17533                           ;vscp_firmware.c: 172: return !0;
 17534  0059C0  0E01               	movlw	1
 17535  0059C2  D00A               	goto	l1035
 17536  0059C4                     l9571:
 17537                           
 17538                           ;vscp_firmware.c: 173: }
 17539                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 17540  0059C4  0EFF               	movlw	255
 17541  0059C6  ECC0  F02D         	call	_vscp_writeNicknamePermanent
 17542                           
 17543                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 17544  0059CA  0E00               	movlw	0
 17545  0059CC  ECB7  F02D         	call	_vscp_setSegmentCRC
 17546                           
 17547                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 17548  0059D0  0EA0               	movlw	160
 17549  0059D2  ECAE  F02D         	call	_vscp_setControlByte
 17550                           
 17551                           ;vscp_firmware.c: 185: return 0;
 17552  0059D6  0E00               	movlw	0
 17553  0059D8                     l1035:
 17554  0059D8  0012               	return	
 17555  0059DA                     __end_of_vscp_check_pstorage:
 17556                           	opt stack 0
 17557                           tblptru	equ	0xFF8
 17558                           tblptrh	equ	0xFF7
 17559                           tblptrl	equ	0xFF6
 17560                           tablat	equ	0xFF5
 17561                           prodh	equ	0xFF4
 17562                           prodl	equ	0xFF3
 17563                           postinc0	equ	0xFEE
 17564                           wreg	equ	0xFE8
 17565                           indf1	equ	0xFE7
 17566                           postdec1	equ	0xFE5
 17567                           fsr1h	equ	0xFE2
 17568                           fsr1l	equ	0xFE1
 17569                           indf2	equ	0xFDF
 17570                           postinc2	equ	0xFDE
 17571                           postdec2	equ	0xFDD
 17572                           plusw2	equ	0xFDB
 17573                           fsr2h	equ	0xFDA
 17574                           fsr2l	equ	0xFD9
 17575                           status	equ	0xFD8
 17576                           
 17577 ;; *************** function _vscp_setControlByte *****************
 17578 ;; Defined at:
 17579 ;;		line 2811 in file "../main.c"
 17580 ;; Parameters:    Size  Location     Type
 17581 ;;  ctrl            1    wreg     unsigned char 
 17582 ;; Auto vars:     Size  Location     Type
 17583 ;;  ctrl            1   16[COMRAM] unsigned char 
 17584 ;; Return value:  Size  Location     Type
 17585 ;;		None               void
 17586 ;; Registers used:
 17587 ;;		wreg, status,2, cstack
 17588 ;; Tracked objects:
 17589 ;;		On entry : 0/0
 17590 ;;		On exit  : 0/0
 17591 ;;		Unchanged: 0/0
 17592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17593 ;;      Params:         0       0       0       0       0       0       0
 17594 ;;      Locals:         1       0       0       0       0       0       0
 17595 ;;      Temps:          0       0       0       0       0       0       0
 17596 ;;      Totals:         1       0       0       0       0       0       0
 17597 ;;Total ram usage:        1 bytes
 17598 ;; Hardware stack levels used:    1
 17599 ;; Hardware stack levels required when called:    3
 17600 ;; This function calls:
 17601 ;;		_writeEEPROM
 17602 ;; This function is called by:
 17603 ;;		_vscp_check_pstorage
 17604 ;; This function uses a non-reentrant model
 17605 ;;
 17606                           
 17607                           	psect	text82
 17608  005B5C                     __ptext82:
 17609                           	opt stack 0
 17610  005B5C                     _vscp_setControlByte:
 17611                           	opt stack 26
 17612                           
 17613                           ;incstack = 0
 17614                           ;incstack = 0
 17615                           ;vscp_setControlByte@ctrl stored from wreg
 17616  005B5C  CFE8 F011          	movff	wreg,vscp_setControlByte@ctrl
 17617                           
 17618                           ;main.c: 2812: writeEEPROM(0x03, ctrl);
 17619  005B60  6A0F               	clrf	?_writeEEPROM+1,c
 17620  005B62  0E03               	movlw	3
 17621  005B64  6E0E               	movwf	?_writeEEPROM,c
 17622  005B66  C011  F010         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 17623  005B6A  EFA4  F02C         	goto	_writeEEPROM	;wreg free
 17624  005B6E                     __end_of_vscp_setControlByte:
 17625                           	opt stack 0
 17626                           tblptru	equ	0xFF8
 17627                           tblptrh	equ	0xFF7
 17628                           tblptrl	equ	0xFF6
 17629                           tablat	equ	0xFF5
 17630                           prodh	equ	0xFF4
 17631                           prodl	equ	0xFF3
 17632                           postinc0	equ	0xFEE
 17633                           wreg	equ	0xFE8
 17634                           indf1	equ	0xFE7
 17635                           postdec1	equ	0xFE5
 17636                           fsr1h	equ	0xFE2
 17637                           fsr1l	equ	0xFE1
 17638                           indf2	equ	0xFDF
 17639                           postinc2	equ	0xFDE
 17640                           postdec2	equ	0xFDD
 17641                           plusw2	equ	0xFDB
 17642                           fsr2h	equ	0xFDA
 17643                           fsr2l	equ	0xFD9
 17644                           status	equ	0xFD8
 17645                           
 17646 ;; *************** function _vscp_setSegmentCRC *****************
 17647 ;; Defined at:
 17648 ;;		line 2802 in file "../main.c"
 17649 ;; Parameters:    Size  Location     Type
 17650 ;;  crc             1    wreg     unsigned char 
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;  crc             1   16[COMRAM] unsigned char 
 17653 ;; Return value:  Size  Location     Type
 17654 ;;		None               void
 17655 ;; Registers used:
 17656 ;;		wreg, status,2, cstack
 17657 ;; Tracked objects:
 17658 ;;		On entry : 0/0
 17659 ;;		On exit  : 0/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17662 ;;      Params:         0       0       0       0       0       0       0
 17663 ;;      Locals:         1       0       0       0       0       0       0
 17664 ;;      Temps:          0       0       0       0       0       0       0
 17665 ;;      Totals:         1       0       0       0       0       0       0
 17666 ;;Total ram usage:        1 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    3
 17669 ;; This function calls:
 17670 ;;		_writeEEPROM
 17671 ;; This function is called by:
 17672 ;;		_vscp_check_pstorage
 17673 ;;		_vscp_handleProbeState
 17674 ;;		_vscp_handleHeartbeat
 17675 ;;		_vscp_handleSetNickname
 17676 ;; This function uses a non-reentrant model
 17677 ;;
 17678                           
 17679                           	psect	text83
 17680  005B6E                     __ptext83:
 17681                           	opt stack 0
 17682  005B6E                     _vscp_setSegmentCRC:
 17683                           	opt stack 25
 17684                           
 17685                           ;incstack = 0
 17686                           ;incstack = 0
 17687                           ;vscp_setSegmentCRC@crc stored from wreg
 17688  005B6E  CFE8 F011          	movff	wreg,vscp_setSegmentCRC@crc
 17689                           
 17690                           ;main.c: 2803: writeEEPROM(0x02, crc);
 17691  005B72  6A0F               	clrf	?_writeEEPROM+1,c
 17692  005B74  0E02               	movlw	2
 17693  005B76  6E0E               	movwf	?_writeEEPROM,c
 17694  005B78  C011  F010         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 17695  005B7C  EFA4  F02C         	goto	_writeEEPROM	;wreg free
 17696  005B80                     __end_of_vscp_setSegmentCRC:
 17697                           	opt stack 0
 17698                           tblptru	equ	0xFF8
 17699                           tblptrh	equ	0xFF7
 17700                           tblptrl	equ	0xFF6
 17701                           tablat	equ	0xFF5
 17702                           prodh	equ	0xFF4
 17703                           prodl	equ	0xFF3
 17704                           postinc0	equ	0xFEE
 17705                           wreg	equ	0xFE8
 17706                           indf1	equ	0xFE7
 17707                           postdec1	equ	0xFE5
 17708                           fsr1h	equ	0xFE2
 17709                           fsr1l	equ	0xFE1
 17710                           indf2	equ	0xFDF
 17711                           postinc2	equ	0xFDE
 17712                           postdec2	equ	0xFDD
 17713                           plusw2	equ	0xFDB
 17714                           fsr2h	equ	0xFDA
 17715                           fsr2l	equ	0xFD9
 17716                           status	equ	0xFD8
 17717                           
 17718 ;; *************** function _vscp_getSegmentCRC *****************
 17719 ;; Defined at:
 17720 ;;		line 2793 in file "../main.c"
 17721 ;; Parameters:    Size  Location     Type
 17722 ;;		None
 17723 ;; Auto vars:     Size  Location     Type
 17724 ;;		None
 17725 ;; Return value:  Size  Location     Type
 17726 ;;                  1    wreg      unsigned char 
 17727 ;; Registers used:
 17728 ;;		wreg, status,2, cstack
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17734 ;;      Params:         0       0       0       0       0       0       0
 17735 ;;      Locals:         0       0       0       0       0       0       0
 17736 ;;      Temps:          0       0       0       0       0       0       0
 17737 ;;      Totals:         0       0       0       0       0       0       0
 17738 ;;Total ram usage:        0 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    3
 17741 ;; This function calls:
 17742 ;;		_readEEPROM
 17743 ;; This function is called by:
 17744 ;;		_vscp_check_pstorage
 17745 ;;		_vscp_handleHeartbeat
 17746 ;; This function uses a non-reentrant model
 17747 ;;
 17748                           
 17749                           	psect	text84
 17750  005BE8                     __ptext84:
 17751                           	opt stack 0
 17752  005BE8                     _vscp_getSegmentCRC:
 17753                           	opt stack 25
 17754                           
 17755                           ;main.c: 2794: return readEEPROM(0x02);
 17756                           
 17757                           ;incstack = 0
 17758                           ;incstack = 0
 17759  005BE8  6A17               	clrf	?_readEEPROM+1,c
 17760  005BEA  0E02               	movlw	2
 17761  005BEC  6E16               	movwf	?_readEEPROM,c
 17762  005BEE  EFA4  F02D         	goto	_readEEPROM	;wreg free
 17763  005BF2                     __end_of_vscp_getSegmentCRC:
 17764                           	opt stack 0
 17765                           tblptru	equ	0xFF8
 17766                           tblptrh	equ	0xFF7
 17767                           tblptrl	equ	0xFF6
 17768                           tablat	equ	0xFF5
 17769                           prodh	equ	0xFF4
 17770                           prodl	equ	0xFF3
 17771                           postinc0	equ	0xFEE
 17772                           wreg	equ	0xFE8
 17773                           indf1	equ	0xFE7
 17774                           postdec1	equ	0xFE5
 17775                           fsr1h	equ	0xFE2
 17776                           fsr1l	equ	0xFE1
 17777                           indf2	equ	0xFDF
 17778                           postinc2	equ	0xFDE
 17779                           postdec2	equ	0xFDD
 17780                           plusw2	equ	0xFDB
 17781                           fsr2h	equ	0xFDA
 17782                           fsr2l	equ	0xFD9
 17783                           status	equ	0xFD8
 17784                           
 17785 ;; *************** function _vscp_writeNicknamePermanent *****************
 17786 ;; Defined at:
 17787 ;;		line 2784 in file "../main.c"
 17788 ;; Parameters:    Size  Location     Type
 17789 ;;  nickname        1    wreg     unsigned char 
 17790 ;; Auto vars:     Size  Location     Type
 17791 ;;  nickname        1   16[COMRAM] unsigned char 
 17792 ;; Return value:  Size  Location     Type
 17793 ;;		None               void
 17794 ;; Registers used:
 17795 ;;		wreg, status,2, cstack
 17796 ;; Tracked objects:
 17797 ;;		On entry : 0/0
 17798 ;;		On exit  : 0/0
 17799 ;;		Unchanged: 0/0
 17800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17801 ;;      Params:         0       0       0       0       0       0       0
 17802 ;;      Locals:         1       0       0       0       0       0       0
 17803 ;;      Temps:          0       0       0       0       0       0       0
 17804 ;;      Totals:         1       0       0       0       0       0       0
 17805 ;;Total ram usage:        1 bytes
 17806 ;; Hardware stack levels used:    1
 17807 ;; Hardware stack levels required when called:    3
 17808 ;; This function calls:
 17809 ;;		_writeEEPROM
 17810 ;; This function is called by:
 17811 ;;		_vscp_check_pstorage
 17812 ;;		_vscp_handleProbeState
 17813 ;;		_vscp_handleHeartbeat
 17814 ;;		_vscp_handleSetNickname
 17815 ;;		_vscp_handleDropNickname
 17816 ;; This function uses a non-reentrant model
 17817 ;;
 17818                           
 17819                           	psect	text85
 17820  005B80                     __ptext85:
 17821                           	opt stack 0
 17822  005B80                     _vscp_writeNicknamePermanent:
 17823                           	opt stack 25
 17824                           
 17825                           ;incstack = 0
 17826                           ;incstack = 0
 17827                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 17828  005B80  CFE8 F011          	movff	wreg,vscp_writeNicknamePermanent@nickname
 17829                           
 17830                           ;main.c: 2785: writeEEPROM( 0x01, nickname );
 17831  005B84  6A0F               	clrf	?_writeEEPROM+1,c
 17832  005B86  0E01               	movlw	1
 17833  005B88  6E0E               	movwf	?_writeEEPROM,c
 17834  005B8A  C011  F010         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 17835  005B8E  EFA4  F02C         	goto	_writeEEPROM	;wreg free
 17836  005B92                     __end_of_vscp_writeNicknamePermanent:
 17837                           	opt stack 0
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           postinc0	equ	0xFEE
 17845                           wreg	equ	0xFE8
 17846                           indf1	equ	0xFE7
 17847                           postdec1	equ	0xFE5
 17848                           fsr1h	equ	0xFE2
 17849                           fsr1l	equ	0xFE1
 17850                           indf2	equ	0xFDF
 17851                           postinc2	equ	0xFDE
 17852                           postdec2	equ	0xFDD
 17853                           plusw2	equ	0xFDB
 17854                           fsr2h	equ	0xFDA
 17855                           fsr2l	equ	0xFD9
 17856                           status	equ	0xFD8
 17857                           
 17858 ;; *************** function _writeEEPROM *****************
 17859 ;; Defined at:
 17860 ;;		line 24 in file "../../vscp_firmware/pic/common/eeprom.c"
 17861 ;; Parameters:    Size  Location     Type
 17862 ;;  address         2   13[COMRAM] unsigned short 
 17863 ;;  data            1   15[COMRAM] unsigned char 
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;		None
 17866 ;; Return value:  Size  Location     Type
 17867 ;;		None               void
 17868 ;; Registers used:
 17869 ;;		wreg, status,2
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17875 ;;      Params:         3       0       0       0       0       0       0
 17876 ;;      Locals:         0       0       0       0       0       0       0
 17877 ;;      Temps:          0       0       0       0       0       0       0
 17878 ;;      Totals:         3       0       0       0       0       0       0
 17879 ;;Total ram usage:        3 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:    2
 17882 ;; This function calls:
 17883 ;;		Nothing
 17884 ;; This function is called by:
 17885 ;;		_main
 17886 ;;		_doOneSecondWork
 17887 ;;		_init_app_eeprom
 17888 ;;		_vscp_writeAppReg
 17889 ;;		_vscp_setGUID
 17890 ;;		_vscp_setUserID
 17891 ;;		_vscp_setManufacturerId
 17892 ;;		_vscp_goBootloaderMode
 17893 ;;		_vscp_writeNicknamePermanent
 17894 ;;		_vscp_setSegmentCRC
 17895 ;;		_vscp_setControlByte
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           	psect	text86
 17900  005948                     __ptext86:
 17901                           	opt stack 0
 17902  005948                     _writeEEPROM:
 17903                           	opt stack 27
 17904                           
 17905                           ;eeprom.c: 30: EEADR = address & 0xff;
 17906                           
 17907                           ;incstack = 0
 17908                           ;incstack = 0
 17909  005948  C00E  FFA9         	movff	writeEEPROM@address,4009	;volatile
 17910                           
 17911                           ;eeprom.c: 31: EEDATA = data;
 17912  00594C  C010  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17913                           
 17914                           ;eeprom.c: 32: EECON1bits.EEPGD = 0;
 17915  005950  9EA6               	bcf	4006,7,c	;volatile
 17916                           
 17917                           ;eeprom.c: 33: EECON1bits.CFGS = 0;
 17918  005952  9CA6               	bcf	4006,6,c	;volatile
 17919                           
 17920                           ;eeprom.c: 34: EECON1bits.WREN = 1;
 17921  005954  84A6               	bsf	4006,2,c	;volatile
 17922                           
 17923                           ;eeprom.c: 37: INTCONbits.GIE = 0;
 17924  005956  9EF2               	bcf	intcon,7,c	;volatile
 17925                           
 17926                           ;eeprom.c: 38: EECON2 = 0x55;
 17927  005958  0E55               	movlw	85
 17928  00595A  6EA7               	movwf	4007,c	;volatile
 17929                           
 17930                           ;eeprom.c: 39: EECON2 = 0xaa;
 17931  00595C  0EAA               	movlw	170
 17932  00595E  6EA7               	movwf	4007,c	;volatile
 17933                           
 17934                           ;eeprom.c: 40: EECON1bits.WR = 1;
 17935  005960  82A6               	bsf	4006,1,c	;volatile
 17936                           
 17937                           ;eeprom.c: 41: INTCONbits.GIE = 1;
 17938  005962  8EF2               	bsf	intcon,7,c	;volatile
 17939  005964                     l917:
 17940  005964  A8A1               	btfss	4001,4,c	;volatile
 17941  005966  D7FE               	goto	l917
 17942                           
 17943                           ;eeprom.c: 49: PIR2bits.EEIF = 0;
 17944  005968  98A1               	bcf	4001,4,c	;volatile
 17945                           
 17946                           ;eeprom.c: 51: EECON1bits.WREN = 0;
 17947  00596A  94A6               	bcf	4006,2,c	;volatile
 17948  00596C  0012               	return	
 17949  00596E                     __end_of_writeEEPROM:
 17950                           	opt stack 0
 17951                           tblptru	equ	0xFF8
 17952                           tblptrh	equ	0xFF7
 17953                           tblptrl	equ	0xFF6
 17954                           tablat	equ	0xFF5
 17955                           prodh	equ	0xFF4
 17956                           prodl	equ	0xFF3
 17957                           intcon	equ	0xFF2
 17958                           postinc0	equ	0xFEE
 17959                           wreg	equ	0xFE8
 17960                           indf1	equ	0xFE7
 17961                           postdec1	equ	0xFE5
 17962                           fsr1h	equ	0xFE2
 17963                           fsr1l	equ	0xFE1
 17964                           indf2	equ	0xFDF
 17965                           postinc2	equ	0xFDE
 17966                           postdec2	equ	0xFDD
 17967                           plusw2	equ	0xFDB
 17968                           fsr2h	equ	0xFDA
 17969                           fsr2l	equ	0xFD9
 17970                           status	equ	0xFD8
 17971                           
 17972 ;; *************** function _init *****************
 17973 ;; Defined at:
 17974 ;;		line 892 in file "../main.c"
 17975 ;; Parameters:    Size  Location     Type
 17976 ;;		None
 17977 ;; Auto vars:     Size  Location     Type
 17978 ;;		None
 17979 ;; Return value:  Size  Location     Type
 17980 ;;		None               void
 17981 ;; Registers used:
 17982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 17983 ;; Tracked objects:
 17984 ;;		On entry : 0/0
 17985 ;;		On exit  : 0/0
 17986 ;;		Unchanged: 0/0
 17987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17988 ;;      Params:         0       0       0       0       0       0       0
 17989 ;;      Locals:         0       0       0       0       0       0       0
 17990 ;;      Temps:          0       0       0       0       0       0       0
 17991 ;;      Totals:         0       0       0       0       0       0       0
 17992 ;;Total ram usage:        0 bytes
 17993 ;; Hardware stack levels used:    1
 17994 ;; Hardware stack levels required when called:    4
 17995 ;; This function calls:
 17996 ;;		_WriteTimer0
 17997 ;;		_ConvertADC
 17998 ;;		_init_app_ram
 17999 ;;		_OpenTimer0
 18000 ;;		_OpenADC
 18001 ;;		_ECANInitialize
 18002 ;; This function is called by:
 18003 ;;		_main
 18004 ;; This function uses a non-reentrant model
 18005 ;;
 18006                           
 18007                           	psect	text87
 18008  005712                     __ptext87:
 18009                           	opt stack 0
 18010  005712                     _init:
 18011                           	opt stack 26
 18012                           
 18013                           ;main.c: 896: init_app_ram();
 18014                           
 18015                           ;incstack = 0
 18016                           ;incstack = 0
 18017  005712  EC2C  F02B         	call	_init_app_ram	;wreg free
 18018                           
 18019                           ; BSR set to: 0
 18020                           ;main.c: 904: TRISA = 0x07;
 18021  005716  0E07               	movlw	7
 18022  005718  6E92               	movwf	3986,c	;volatile
 18023                           
 18024                           ; BSR set to: 0
 18025                           ;main.c: 915: TRISB = 0x1B;
 18026  00571A  0E1B               	movlw	27
 18027  00571C  6E93               	movwf	3987,c	;volatile
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;main.c: 925: TRISC = 0x01;
 18031  00571E  0E01               	movlw	1
 18032  005720  6E94               	movwf	3988,c	;volatile
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;main.c: 926: PORTC = 0x00;
 18036  005722  6A82               	clrf	3970,c	;volatile
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;main.c: 928: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 18040  005724  0E92               	movlw	146
 18041  005726  EC2D  F02D         	call	_OpenTimer0
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;main.c: 929: WriteTimer0(0xfb1d);
 18045  00572A  0EFB               	movlw	251
 18046  00572C  6E0F               	movwf	?_WriteTimer0+1,c
 18047  00572E  0E1D               	movlw	29
 18048  005730  6E0E               	movwf	?_WriteTimer0,c
 18049  005732  ECC9  F02D         	call	_WriteTimer0	;wreg free
 18050                           
 18051                           ; BSR set to: 0
 18052                           ;main.c: 931: OpenADC(0b11101111 & 0b11111111 & 0b11111111,
 18053                           ;main.c: 932: 0b10000111 & 0b11111111 & 0b11110100 &
 18054                           ;main.c: 933: 0b11111110 & 0b11111101,
 18055                           ;main.c: 934: 15);
 18056  005736  0E84               	movlw	132
 18057  005738  6E0E               	movwf	?_OpenADC,c
 18058  00573A  0E0F               	movlw	15
 18059  00573C  6E0F               	movwf	?_OpenADC+1,c
 18060  00573E  0EEF               	movlw	239
 18061  005740  EC8E  F029         	call	_OpenADC
 18062                           
 18063                           ; BSR set to: 0
 18064                           ;main.c: 937: ECANInitialize();
 18065  005744  ECA3  F027         	call	_ECANInitialize	;wreg free
 18066                           
 18067                           ;main.c: 961: INTCONbits.GIE = 1;
 18068  005748  8EF2               	bsf	intcon,7,c	;volatile
 18069                           
 18070                           ;main.c: 963: ConvertADC();
 18071  00574A  EFFF  F02D         	goto	_ConvertADC	;wreg free
 18072  00574E                     __end_of_init:
 18073                           	opt stack 0
 18074                           tblptru	equ	0xFF8
 18075                           tblptrh	equ	0xFF7
 18076                           tblptrl	equ	0xFF6
 18077                           tablat	equ	0xFF5
 18078                           prodh	equ	0xFF4
 18079                           prodl	equ	0xFF3
 18080                           intcon	equ	0xFF2
 18081                           postinc0	equ	0xFEE
 18082                           wreg	equ	0xFE8
 18083                           indf1	equ	0xFE7
 18084                           postdec1	equ	0xFE5
 18085                           fsr1h	equ	0xFE2
 18086                           fsr1l	equ	0xFE1
 18087                           indf2	equ	0xFDF
 18088                           postinc2	equ	0xFDE
 18089                           postdec2	equ	0xFDD
 18090                           plusw2	equ	0xFDB
 18091                           fsr2h	equ	0xFDA
 18092                           fsr2l	equ	0xFD9
 18093                           status	equ	0xFD8
 18094                           
 18095 ;; *************** function _ECANInitialize *****************
 18096 ;; Defined at:
 18097 ;;		line 168 in file "../ECAN.c"
 18098 ;; Parameters:    Size  Location     Type
 18099 ;;		None
 18100 ;; Auto vars:     Size  Location     Type
 18101 ;;		None
 18102 ;; Return value:  Size  Location     Type
 18103 ;;		None               void
 18104 ;; Registers used:
 18105 ;;		wreg, status,2, status,0, cstack
 18106 ;; Tracked objects:
 18107 ;;		On entry : F/0
 18108 ;;		On exit  : 0/0
 18109 ;;		Unchanged: 0/0
 18110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18111 ;;      Params:         0       0       0       0       0       0       0
 18112 ;;      Locals:         0       0       0       0       0       0       0
 18113 ;;      Temps:          0       0       0       0       0       0       0
 18114 ;;      Totals:         0       0       0       0       0       0       0
 18115 ;;Total ram usage:        0 bytes
 18116 ;; Hardware stack levels used:    1
 18117 ;; Hardware stack levels required when called:    3
 18118 ;; This function calls:
 18119 ;;		_ECANSetOperationMode
 18120 ;; This function is called by:
 18121 ;;		_init
 18122 ;; This function uses a non-reentrant model
 18123 ;;
 18124                           
 18125                           	psect	text88
 18126  004F46                     __ptext88:
 18127                           	opt stack 0
 18128  004F46                     _ECANInitialize:
 18129                           	opt stack 26
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 18133                           
 18134                           ;incstack = 0
 18135                           ;incstack = 0
 18136  004F46  0E80               	movlw	128
 18137  004F48  EC7A  F02D         	call	_ECANSetOperationMode
 18138                           
 18139                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 18140  004F4C  0E09               	movlw	9
 18141  004F4E  6E70               	movwf	3952,c	;volatile
 18142                           
 18143                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 18144  004F50  0EFC               	movlw	252
 18145  004F52  6E71               	movwf	3953,c	;volatile
 18146                           
 18147                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 18148                           ;ECAN.c: 181: (0 << 6) |
 18149                           ;ECAN.c: 182: (2-1);
 18150  004F54  0E01               	movlw	1
 18151  004F56  6E72               	movwf	3954,c	;volatile
 18152                           
 18153                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 18154  004F58  0E20               	movlw	32
 18155  004F5A  6E73               	movwf	3955,c	;volatile
 18156                           
 18157                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 18158  004F5C  8E77               	bsf	3959,7,c	;volatile
 18159                           
 18160                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 18161  004F5E  9C77               	bcf	3959,6,c	;volatile
 18162                           
 18163                           ;ECAN.c: 205: RXB0CON = 0;
 18164  004F60  6A60               	clrf	3936,c	;volatile
 18165                           
 18166                           ;ECAN.c: 211: RXB1CON = 0;
 18167  004F62  010F               	movlb	15	; () banked
 18168  004F64  6B50               	clrf	80,b	;volatile
 18169                           
 18170                           ; BSR set to: 15
 18171                           ;ECAN.c: 221: B0CON = 0;
 18172  004F66  010E               	movlb	14	; () banked
 18173  004F68  6B20               	clrf	32,b	;volatile
 18174                           
 18175                           ; BSR set to: 14
 18176                           ;ECAN.c: 231: B1CON = 0;
 18177  004F6A  6B30               	clrf	48,b	;volatile
 18178                           
 18179                           ; BSR set to: 14
 18180                           ;ECAN.c: 241: B2CON = 0;
 18181  004F6C  6B40               	clrf	64,b	;volatile
 18182                           
 18183                           ; BSR set to: 14
 18184                           ;ECAN.c: 254: B3CON = 0 << 2;
 18185  004F6E  6B50               	clrf	80,b	;volatile
 18186                           
 18187                           ; BSR set to: 14
 18188                           ;ECAN.c: 264: B4CON = 0 << 2;
 18189  004F70  6B60               	clrf	96,b	;volatile
 18190                           
 18191                           ; BSR set to: 14
 18192                           ;ECAN.c: 274: B5CON = 0 << 2;
 18193  004F72  6B70               	clrf	112,b	;volatile
 18194                           
 18195                           ; BSR set to: 14
 18196                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 18197  004F74  0EE0               	movlw	224
 18198  004F76  010D               	movlb	13	; () banked
 18199  004F78  6FF8               	movwf	248,b	;volatile
 18200                           
 18201                           ; BSR set to: 13
 18202                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 18203  004F7A  010F               	movlb	15	; () banked
 18204  004F7C  6B00               	clrf	0,b	;volatile
 18205                           
 18206                           ; BSR set to: 15
 18207  004F7E  0E08               	movlw	8
 18208  004F80  6F01               	movwf	1,b	;volatile
 18209                           
 18210                           ; BSR set to: 15
 18211  004F82  6B02               	clrf	2,b	;volatile
 18212                           
 18213                           ; BSR set to: 15
 18214  004F84  6B03               	clrf	3,b	;volatile
 18215                           
 18216                           ; BSR set to: 15
 18217                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 18218  004F86  6B04               	clrf	4,b	;volatile
 18219                           
 18220                           ; BSR set to: 15
 18221  004F88  0EE8               	movlw	232
 18222  004F8A  6F05               	movwf	5,b	;volatile
 18223                           
 18224                           ; BSR set to: 15
 18225  004F8C  0E1A               	movlw	26
 18226  004F8E  6F06               	movwf	6,b	;volatile
 18227                           
 18228                           ; BSR set to: 15
 18229  004F90  6B07               	clrf	7,b	;volatile
 18230                           
 18231                           ; BSR set to: 15
 18232                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 18233  004F92  0E03               	movlw	3
 18234  004F94  010D               	movlb	13	; () banked
 18235  004F96  6FD4               	movwf	212,b	;volatile
 18236                           
 18237                           ; BSR set to: 13
 18238                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 18239  004F98  6BD5               	clrf	213,b	;volatile
 18240                           
 18241                           ; BSR set to: 13
 18242                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 18243  004F9A  6BE0               	clrf	224,b	;volatile
 18244                           
 18245                           ; BSR set to: 13
 18246                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 18247  004F9C  0E11               	movlw	17
 18248  004F9E  6FE1               	movwf	225,b	;volatile
 18249                           
 18250                           ; BSR set to: 13
 18251                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 18252  004FA0  6FE2               	movwf	226,b	;volatile
 18253                           
 18254                           ; BSR set to: 13
 18255                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 18256  004FA2  6BE3               	clrf	227,b	;volatile
 18257                           
 18258                           ; BSR set to: 13
 18259                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 18260  004FA4  6BE4               	clrf	228,b	;volatile
 18261                           
 18262                           ; BSR set to: 13
 18263                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 18264  004FA6  6BE5               	clrf	229,b	;volatile
 18265                           
 18266                           ; BSR set to: 13
 18267                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 18268  004FA8  6BE6               	clrf	230,b	;volatile
 18269                           
 18270                           ; BSR set to: 13
 18271                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 18272  004FAA  6BE7               	clrf	231,b	;volatile
 18273                           
 18274                           ; BSR set to: 13
 18275                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 18276  004FAC  0E54               	movlw	84
 18277  004FAE  6FF0               	movwf	240,b	;volatile
 18278                           
 18279                           ; BSR set to: 13
 18280                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 18281  004FB0  0E05               	movlw	5
 18282  004FB2  6FF1               	movwf	241,b	;volatile
 18283                           
 18284                           ; BSR set to: 13
 18285                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18286  004FB4  6BF2               	clrf	242,b	;volatile
 18287                           
 18288                           ; BSR set to: 13
 18289                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 18290  004FB6  6BF2               	clrf	242,b	;volatile
 18291                           
 18292                           ; BSR set to: 13
 18293                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 18294  004FB8  0E0F               	movlw	15
 18295  004FBA  010F               	movlb	15	; () banked
 18296  004FBC  6F18               	movwf	24,b	;volatile
 18297                           
 18298                           ; BSR set to: 15
 18299  004FBE  0EE0               	movlw	224
 18300  004FC0  6F19               	movwf	25,b	;volatile
 18301                           
 18302                           ; BSR set to: 15
 18303  004FC2  6B1A               	clrf	26,b	;volatile
 18304                           
 18305                           ; BSR set to: 15
 18306  004FC4  6B1B               	clrf	27,b	;volatile
 18307                           
 18308                           ; BSR set to: 15
 18309                           ;ECAN.c: 482: RXM0EXIDM = 1;
 18310  004FC6  8719               	bsf	25,3,b	;volatile
 18311                           
 18312                           ; BSR set to: 15
 18313                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 18314  004FC8  0E0F               	movlw	15
 18315  004FCA  6F1C               	movwf	28,b	;volatile
 18316                           
 18317                           ; BSR set to: 15
 18318  004FCC  0EE0               	movlw	224
 18319  004FCE  6F1D               	movwf	29,b	;volatile
 18320                           
 18321                           ; BSR set to: 15
 18322  004FD0  691E               	setf	30,b	;volatile
 18323                           
 18324                           ; BSR set to: 15
 18325  004FD2  6B1F               	clrf	31,b	;volatile
 18326                           
 18327                           ; BSR set to: 15
 18328                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 18329  004FD4  871D               	bsf	29,3,b	;volatile
 18330                           
 18331                           ; BSR set to: 15
 18332                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 18333  004FD6  0E00               	movlw	0
 18334  004FD8  EF7A  F02D         	goto	_ECANSetOperationMode
 18335  004FDC                     __end_of_ECANInitialize:
 18336                           	opt stack 0
 18337                           tblptru	equ	0xFF8
 18338                           tblptrh	equ	0xFF7
 18339                           tblptrl	equ	0xFF6
 18340                           tablat	equ	0xFF5
 18341                           prodh	equ	0xFF4
 18342                           prodl	equ	0xFF3
 18343                           intcon	equ	0xFF2
 18344                           postinc0	equ	0xFEE
 18345                           wreg	equ	0xFE8
 18346                           indf1	equ	0xFE7
 18347                           postdec1	equ	0xFE5
 18348                           fsr1h	equ	0xFE2
 18349                           fsr1l	equ	0xFE1
 18350                           indf2	equ	0xFDF
 18351                           postinc2	equ	0xFDE
 18352                           postdec2	equ	0xFDD
 18353                           plusw2	equ	0xFDB
 18354                           fsr2h	equ	0xFDA
 18355                           fsr2l	equ	0xFD9
 18356                           status	equ	0xFD8
 18357                           
 18358 ;; *************** function _ECANSetOperationMode *****************
 18359 ;; Defined at:
 18360 ;;		line 1012 in file "../ECAN.c"
 18361 ;; Parameters:    Size  Location     Type
 18362 ;;  mode            1    wreg     enum E16337
 18363 ;; Auto vars:     Size  Location     Type
 18364 ;;  mode            1   13[COMRAM] enum E16337
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg, status,2, status,0
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18374 ;;      Params:         0       0       0       0       0       0       0
 18375 ;;      Locals:         1       0       0       0       0       0       0
 18376 ;;      Temps:          0       0       0       0       0       0       0
 18377 ;;      Totals:         1       0       0       0       0       0       0
 18378 ;;Total ram usage:        1 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; Hardware stack levels required when called:    2
 18381 ;; This function calls:
 18382 ;;		Nothing
 18383 ;; This function is called by:
 18384 ;;		_vscp_goBootloaderMode
 18385 ;;		_ECANInitialize
 18386 ;; This function uses a non-reentrant model
 18387 ;;
 18388                           
 18389                           	psect	text89
 18390  005AF4                     __ptext89:
 18391                           	opt stack 0
 18392  005AF4                     _ECANSetOperationMode:
 18393                           	opt stack 26
 18394                           
 18395                           ;incstack = 0
 18396                           ;incstack = 0
 18397                           ;ECANSetOperationMode@mode stored from wreg
 18398  005AF4  CFE8 F00E          	movff	wreg,ECANSetOperationMode@mode
 18399                           
 18400                           ;ECAN.c: 1013: CANCON &= 0x1F;
 18401  005AF8  0E1F               	movlw	31
 18402  005AFA  166F               	andwf	3951,f,c	;volatile
 18403                           
 18404                           ;ECAN.c: 1014: CANCON |= mode;
 18405  005AFC  500E               	movf	ECANSetOperationMode@mode,w,c
 18406  005AFE  126F               	iorwf	3951,f,c	;volatile
 18407  005B00                     l8123:
 18408  005B00  506F               	movf	3951,w,c	;volatile
 18409  005B02  0BE0               	andlw	224
 18410  005B04  180E               	xorwf	ECANSetOperationMode@mode,w,c
 18411  005B06  B4D8               	btfsc	status,2,c
 18412  005B08  0012               	return	
 18413  005B0A  D7FA               	goto	l8123
 18414  005B0C                     __end_of_ECANSetOperationMode:
 18415                           	opt stack 0
 18416                           tblptru	equ	0xFF8
 18417                           tblptrh	equ	0xFF7
 18418                           tblptrl	equ	0xFF6
 18419                           tablat	equ	0xFF5
 18420                           prodh	equ	0xFF4
 18421                           prodl	equ	0xFF3
 18422                           intcon	equ	0xFF2
 18423                           postinc0	equ	0xFEE
 18424                           wreg	equ	0xFE8
 18425                           indf1	equ	0xFE7
 18426                           postdec1	equ	0xFE5
 18427                           fsr1h	equ	0xFE2
 18428                           fsr1l	equ	0xFE1
 18429                           indf2	equ	0xFDF
 18430                           postinc2	equ	0xFDE
 18431                           postdec2	equ	0xFDD
 18432                           plusw2	equ	0xFDB
 18433                           fsr2h	equ	0xFDA
 18434                           fsr2l	equ	0xFD9
 18435                           status	equ	0xFD8
 18436                           
 18437 ;; *************** function _OpenADC *****************
 18438 ;; Defined at:
 18439 ;;		line 71 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcopen.c"
 18440 ;; Parameters:    Size  Location     Type
 18441 ;;  config          1    wreg     unsigned char 
 18442 ;;  config2         1   13[COMRAM] unsigned char 
 18443 ;;  portconfig      1   14[COMRAM] unsigned char 
 18444 ;; Auto vars:     Size  Location     Type
 18445 ;;  config          1   17[COMRAM] unsigned char 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;		None               void
 18448 ;; Registers used:
 18449 ;;		wreg, status,2, status,0
 18450 ;; Tracked objects:
 18451 ;;		On entry : F/0
 18452 ;;		On exit  : F/0
 18453 ;;		Unchanged: F/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18455 ;;      Params:         2       0       0       0       0       0       0
 18456 ;;      Locals:         1       0       0       0       0       0       0
 18457 ;;      Temps:          2       0       0       0       0       0       0
 18458 ;;      Totals:         5       0       0       0       0       0       0
 18459 ;;Total ram usage:        5 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    2
 18462 ;; This function calls:
 18463 ;;		Nothing
 18464 ;; This function is called by:
 18465 ;;		_init
 18466 ;; This function uses a non-reentrant model
 18467 ;;
 18468                           
 18469                           	psect	text90
 18470  00531C                     __ptext90:
 18471                           	opt stack 0
 18472  00531C                     _OpenADC:
 18473                           	opt stack 27
 18474                           
 18475                           ;incstack = 0
 18476                           ;incstack = 0
 18477                           ;OpenADC@config stored from wreg
 18478  00531C  CFE8 F012          	movff	wreg,OpenADC@config
 18479                           
 18480                           ; BSR set to: 0
 18481  005320  6AC2               	clrf	4034,c	;volatile
 18482  005322  6AC0               	clrf	4032,c	;volatile
 18483                           
 18484                           ; BSR set to: 0
 18485  005324  90D8               	bcf	status,0,c
 18486  005326  300E               	rrcf	OpenADC@config2,w,c
 18487  005328  0B3C               	andlw	60
 18488  00532A  6EC2               	movwf	4034,c	;volatile
 18489  00532C  C00E  F010         	movff	OpenADC@config2,??_OpenADC
 18490  005330  3A10               	swapf	??_OpenADC,f,c
 18491  005332  0EF0               	movlw	240
 18492  005334  1610               	andwf	??_OpenADC,f,c
 18493  005336  0E30               	movlw	48
 18494  005338  1610               	andwf	??_OpenADC,f,c
 18495  00533A  500F               	movf	OpenADC@portconfig,w,c
 18496  00533C  0B0F               	andlw	15
 18497  00533E  1010               	iorwf	??_OpenADC,w,c
 18498  005340  6EC1               	movwf	4033,c	;volatile
 18499  005342  C012  F010         	movff	OpenADC@config,??_OpenADC
 18500  005346  90D8               	bcf	status,0,c
 18501  005348  3610               	rlcf	??_OpenADC,f,c
 18502  00534A  90D8               	bcf	status,0,c
 18503  00534C  3610               	rlcf	??_OpenADC,f,c
 18504  00534E  0E38               	movlw	56
 18505  005350  1610               	andwf	??_OpenADC,f,c
 18506  005352  C012  F011         	movff	OpenADC@config,??_OpenADC+1
 18507  005356  3A11               	swapf	??_OpenADC+1,f,c
 18508  005358  0E0F               	movlw	15
 18509  00535A  1611               	andwf	??_OpenADC+1,f,c
 18510  00535C  0E07               	movlw	7
 18511  00535E  1611               	andwf	??_OpenADC+1,f,c
 18512  005360  5012               	movf	OpenADC@config,w,c
 18513  005362  0B80               	andlw	128
 18514  005364  1011               	iorwf	??_OpenADC+1,w,c
 18515  005366  1010               	iorwf	??_OpenADC,w,c
 18516  005368  6EC0               	movwf	4032,c	;volatile
 18517                           
 18518                           ; BSR set to: 0
 18519  00536A  AE0E               	btfss	OpenADC@config2,7,c
 18520  00536C  D003               	goto	l1302
 18521                           
 18522                           ; BSR set to: 0
 18523  00536E  9C9E               	bcf	3998,6,c	;volatile
 18524  005370  8C9D               	bsf	3997,6,c	;volatile
 18525  005372  8CF2               	bsf	intcon,6,c	;volatile
 18526  005374                     l1302:
 18527                           
 18528                           ; BSR set to: 0
 18529  005374  80C2               	bsf	4034,0,c	;volatile
 18530                           
 18531                           ; BSR set to: 0
 18532  005376  0012               	return	
 18533  005378                     __end_of_OpenADC:
 18534                           	opt stack 0
 18535                           tblptru	equ	0xFF8
 18536                           tblptrh	equ	0xFF7
 18537                           tblptrl	equ	0xFF6
 18538                           tablat	equ	0xFF5
 18539                           prodh	equ	0xFF4
 18540                           prodl	equ	0xFF3
 18541                           intcon	equ	0xFF2
 18542                           postinc0	equ	0xFEE
 18543                           wreg	equ	0xFE8
 18544                           indf1	equ	0xFE7
 18545                           postdec1	equ	0xFE5
 18546                           fsr1h	equ	0xFE2
 18547                           fsr1l	equ	0xFE1
 18548                           indf2	equ	0xFDF
 18549                           postinc2	equ	0xFDE
 18550                           postdec2	equ	0xFDD
 18551                           plusw2	equ	0xFDB
 18552                           fsr2h	equ	0xFDA
 18553                           fsr2l	equ	0xFD9
 18554                           status	equ	0xFD8
 18555                           
 18556 ;; *************** function _OpenTimer0 *****************
 18557 ;; Defined at:
 18558 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 18559 ;; Parameters:    Size  Location     Type
 18560 ;;  config          1    wreg     unsigned char 
 18561 ;; Auto vars:     Size  Location     Type
 18562 ;;  config          1   13[COMRAM] unsigned char 
 18563 ;; Return value:  Size  Location     Type
 18564 ;;		None               void
 18565 ;; Registers used:
 18566 ;;		wreg, status,2, status,0
 18567 ;; Tracked objects:
 18568 ;;		On entry : F/0
 18569 ;;		On exit  : F/0
 18570 ;;		Unchanged: F/0
 18571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18572 ;;      Params:         0       0       0       0       0       0       0
 18573 ;;      Locals:         1       0       0       0       0       0       0
 18574 ;;      Temps:          0       0       0       0       0       0       0
 18575 ;;      Totals:         1       0       0       0       0       0       0
 18576 ;;Total ram usage:        1 bytes
 18577 ;; Hardware stack levels used:    1
 18578 ;; Hardware stack levels required when called:    2
 18579 ;; This function calls:
 18580 ;;		Nothing
 18581 ;; This function is called by:
 18582 ;;		_init
 18583 ;; This function uses a non-reentrant model
 18584 ;;
 18585                           
 18586                           	psect	text91
 18587  005A5A                     __ptext91:
 18588                           	opt stack 0
 18589  005A5A                     _OpenTimer0:
 18590                           	opt stack 27
 18591                           
 18592                           ; BSR set to: 0
 18593                           ;incstack = 0
 18594                           ;incstack = 0
 18595                           ;OpenTimer0@config stored from wreg
 18596  005A5A  CFE8 F00E          	movff	wreg,OpenTimer0@config
 18597                           
 18598                           ; BSR set to: 0
 18599  005A5E  500E               	movf	OpenTimer0@config,w,c
 18600  005A60  0B7F               	andlw	127
 18601  005A62  6ED5               	movwf	4053,c	;volatile
 18602                           
 18603                           ; BSR set to: 0
 18604  005A64  6AD7               	clrf	4055,c	;volatile
 18605                           
 18606                           ; BSR set to: 0
 18607  005A66  6AD6               	clrf	4054,c	;volatile
 18608                           
 18609                           ; BSR set to: 0
 18610  005A68  94F2               	bcf	intcon,2,c	;volatile
 18611                           
 18612                           ; BSR set to: 0
 18613  005A6A  AE0E               	btfss	OpenTimer0@config,7,c
 18614  005A6C  D002               	goto	l1316
 18615                           
 18616                           ; BSR set to: 0
 18617  005A6E  8AF2               	bsf	intcon,5,c	;volatile
 18618  005A70  D001               	goto	l1317
 18619  005A72                     l1316:
 18620                           
 18621                           ; BSR set to: 0
 18622  005A72  9AF2               	bcf	intcon,5,c	;volatile
 18623  005A74                     l1317:
 18624                           
 18625                           ; BSR set to: 0
 18626  005A74  8ED5               	bsf	4053,7,c	;volatile
 18627                           
 18628                           ; BSR set to: 0
 18629  005A76  0012               	return	
 18630  005A78                     __end_of_OpenTimer0:
 18631                           	opt stack 0
 18632                           tblptru	equ	0xFF8
 18633                           tblptrh	equ	0xFF7
 18634                           tblptrl	equ	0xFF6
 18635                           tablat	equ	0xFF5
 18636                           prodh	equ	0xFF4
 18637                           prodl	equ	0xFF3
 18638                           intcon	equ	0xFF2
 18639                           postinc0	equ	0xFEE
 18640                           wreg	equ	0xFE8
 18641                           indf1	equ	0xFE7
 18642                           postdec1	equ	0xFE5
 18643                           fsr1h	equ	0xFE2
 18644                           fsr1l	equ	0xFE1
 18645                           indf2	equ	0xFDF
 18646                           postinc2	equ	0xFDE
 18647                           postdec2	equ	0xFDD
 18648                           plusw2	equ	0xFDB
 18649                           fsr2h	equ	0xFDA
 18650                           fsr2l	equ	0xFD9
 18651                           status	equ	0xFD8
 18652                           
 18653 ;; *************** function _init_app_ram *****************
 18654 ;; Defined at:
 18655 ;;		line 991 in file "../main.c"
 18656 ;; Parameters:    Size  Location     Type
 18657 ;;		None
 18658 ;; Auto vars:     Size  Location     Type
 18659 ;;  i               1   13[COMRAM] unsigned char 
 18660 ;; Return value:  Size  Location     Type
 18661 ;;		None               void
 18662 ;; Registers used:
 18663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18664 ;; Tracked objects:
 18665 ;;		On entry : 0/0
 18666 ;;		On exit  : F/0
 18667 ;;		Unchanged: 0/0
 18668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18669 ;;      Params:         0       0       0       0       0       0       0
 18670 ;;      Locals:         1       0       0       0       0       0       0
 18671 ;;      Temps:          0       0       0       0       0       0       0
 18672 ;;      Totals:         1       0       0       0       0       0       0
 18673 ;;Total ram usage:        1 bytes
 18674 ;; Hardware stack levels used:    1
 18675 ;; Hardware stack levels required when called:    2
 18676 ;; This function calls:
 18677 ;;		Nothing
 18678 ;; This function is called by:
 18679 ;;		_init
 18680 ;;		_vscp_restoreDefaults
 18681 ;; This function uses a non-reentrant model
 18682 ;;
 18683                           
 18684                           	psect	text92
 18685  005658                     __ptext92:
 18686                           	opt stack 0
 18687  005658                     _init_app_ram:
 18688                           	opt stack 25
 18689                           
 18690                           ;main.c: 992: char i;
 18691                           ;main.c: 994: measurement_clock = 0;
 18692                           
 18693                           ; BSR set to: 0
 18694                           ;incstack = 0
 18695                           ;incstack = 0
 18696  005658  0100               	movlb	0	; () banked
 18697  00565A  6BAF               	clrf	_measurement_clock& (0+255),b	;volatile
 18698  00565C  6BB0               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 18699  00565E  6BB1               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 18700  005660  6BB2               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 18701                           
 18702                           ;main.c: 995: seconds = 0;
 18703  005662  6BC0               	clrf	_seconds& (0+255),b
 18704                           
 18705                           ;main.c: 998: for (i = 0; i < 6; i++) {
 18706  005664  6A0E               	clrf	init_app_ram@i,c
 18707  005666                     l7435:
 18708                           
 18709                           ; BSR set to: 0
 18710                           ;main.c: 999: seconds_temp[i] = 0;
 18711  005666  0E00               	movlw	low _seconds_temp
 18712  005668  240E               	addwf	init_app_ram@i,w,c
 18713  00566A  6ED9               	movwf	fsr2l,c
 18714  00566C  6ADA               	clrf	fsr2h,c
 18715  00566E  0E01               	movlw	high _seconds_temp
 18716  005670  22DA               	addwfc	fsr2h,f,c
 18717  005672  6ADF               	clrf	indf2,c
 18718                           
 18719                           ; BSR set to: 1
 18720                           ;main.c: 1000: current_temp[i] = 0;
 18721  005674  500E               	movf	init_app_ram@i,w,c
 18722  005676  0D02               	mullw	2
 18723  005678  50F3               	movf	prodl,w,c
 18724  00567A  0100               	movlb	0	; () banked
 18725  00567C  0FA3               	addlw	low _current_temp
 18726  00567E  6ED9               	movwf	fsr2l,c
 18727  005680  6ADA               	clrf	fsr2h,c
 18728  005682  6ADE               	clrf	postinc2,c
 18729  005684  6ADD               	clrf	postdec2,c
 18730                           
 18731                           ; BSR set to: 0
 18732  005686  2A0E               	incf	init_app_ram@i,f,c
 18733                           
 18734                           ; BSR set to: 0
 18735  005688  0E05               	movlw	5
 18736  00568A  640E               	cpfsgt	init_app_ram@i,c
 18737  00568C  D7EC               	goto	l7435
 18738                           
 18739                           ; BSR set to: 0
 18740                           ;main.c: 1001: }
 18741                           ;main.c: 1004: adc_conversion_flags = 0;
 18742  00568E  6BBD               	clrf	_adc_conversion_flags& (0+255),b
 18743                           
 18744                           ;main.c: 1007: adc_series_counter = 0;
 18745  005690  6A49               	clrf	_adc_series_counter,c
 18746                           
 18747                           ;main.c: 1010: low_alarm = 0;
 18748  005692  6BBF               	clrf	_low_alarm& (0+255),b
 18749                           
 18750                           ;main.c: 1013: high_alarm = 0;
 18751  005694  6BBE               	clrf	_high_alarm& (0+255),b
 18752                           
 18753                           ; BSR set to: 0
 18754  005696  0012               	return	
 18755  005698                     __end_of_init_app_ram:
 18756                           	opt stack 0
 18757                           tblptru	equ	0xFF8
 18758                           tblptrh	equ	0xFF7
 18759                           tblptrl	equ	0xFF6
 18760                           tablat	equ	0xFF5
 18761                           prodh	equ	0xFF4
 18762                           prodl	equ	0xFF3
 18763                           intcon	equ	0xFF2
 18764                           postinc0	equ	0xFEE
 18765                           wreg	equ	0xFE8
 18766                           indf1	equ	0xFE7
 18767                           postdec1	equ	0xFE5
 18768                           fsr1h	equ	0xFE2
 18769                           fsr1l	equ	0xFE1
 18770                           indf2	equ	0xFDF
 18771                           postinc2	equ	0xFDE
 18772                           postdec2	equ	0xFDD
 18773                           plusw2	equ	0xFDB
 18774                           fsr2h	equ	0xFDA
 18775                           fsr2l	equ	0xFD9
 18776                           status	equ	0xFD8
 18777                           
 18778 ;; *************** function _ConvertADC *****************
 18779 ;; Defined at:
 18780 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 18781 ;; Parameters:    Size  Location     Type
 18782 ;;		None
 18783 ;; Auto vars:     Size  Location     Type
 18784 ;;		None
 18785 ;; Return value:  Size  Location     Type
 18786 ;;		None               void
 18787 ;; Registers used:
 18788 ;;		None
 18789 ;; Tracked objects:
 18790 ;;		On entry : 0/0
 18791 ;;		On exit  : 0/0
 18792 ;;		Unchanged: 0/0
 18793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18794 ;;      Params:         0       0       0       0       0       0       0
 18795 ;;      Locals:         0       0       0       0       0       0       0
 18796 ;;      Temps:          0       0       0       0       0       0       0
 18797 ;;      Totals:         0       0       0       0       0       0       0
 18798 ;;Total ram usage:        0 bytes
 18799 ;; Hardware stack levels used:    1
 18800 ;; Hardware stack levels required when called:    2
 18801 ;; This function calls:
 18802 ;;		Nothing
 18803 ;; This function is called by:
 18804 ;;		_init
 18805 ;; This function uses a non-reentrant model
 18806 ;;
 18807                           
 18808                           	psect	text93
 18809  005BFE                     __ptext93:
 18810                           	opt stack 0
 18811  005BFE                     _ConvertADC:
 18812                           	opt stack 27
 18813                           
 18814                           ; BSR set to: 0
 18815                           ;incstack = 0
 18816                           ;incstack = 0
 18817  005BFE  82C2               	bsf	4034,1,c	;volatile
 18818  005C00  0012               	return	
 18819  005C02                     __end_of_ConvertADC:
 18820                           	opt stack 0
 18821                           tblptru	equ	0xFF8
 18822                           tblptrh	equ	0xFF7
 18823                           tblptrl	equ	0xFF6
 18824                           tablat	equ	0xFF5
 18825                           prodh	equ	0xFF4
 18826                           prodl	equ	0xFF3
 18827                           intcon	equ	0xFF2
 18828                           postinc0	equ	0xFEE
 18829                           wreg	equ	0xFE8
 18830                           indf1	equ	0xFE7
 18831                           postdec1	equ	0xFE5
 18832                           fsr1h	equ	0xFE2
 18833                           fsr1l	equ	0xFE1
 18834                           indf2	equ	0xFDF
 18835                           postinc2	equ	0xFDE
 18836                           postdec2	equ	0xFDD
 18837                           plusw2	equ	0xFDB
 18838                           fsr2h	equ	0xFDA
 18839                           fsr2l	equ	0xFD9
 18840                           status	equ	0xFD8
 18841                           
 18842 ;; *************** function _WriteTimer0 *****************
 18843 ;; Defined at:
 18844 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 18845 ;; Parameters:    Size  Location     Type
 18846 ;;  timer0          2   13[COMRAM] unsigned int 
 18847 ;; Auto vars:     Size  Location     Type
 18848 ;;  timer           2   15[COMRAM] struct Timers
 18849 ;; Return value:  Size  Location     Type
 18850 ;;		None               void
 18851 ;; Registers used:
 18852 ;;		None
 18853 ;; Tracked objects:
 18854 ;;		On entry : F/0
 18855 ;;		On exit  : F/0
 18856 ;;		Unchanged: F/0
 18857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18858 ;;      Params:         2       0       0       0       0       0       0
 18859 ;;      Locals:         2       0       0       0       0       0       0
 18860 ;;      Temps:          0       0       0       0       0       0       0
 18861 ;;      Totals:         4       0       0       0       0       0       0
 18862 ;;Total ram usage:        4 bytes
 18863 ;; Hardware stack levels used:    1
 18864 ;; Hardware stack levels required when called:    2
 18865 ;; This function calls:
 18866 ;;		Nothing
 18867 ;; This function is called by:
 18868 ;;		_init
 18869 ;; This function uses a non-reentrant model
 18870 ;;
 18871                           
 18872                           	psect	text94
 18873  005B92                     __ptext94:
 18874                           	opt stack 0
 18875  005B92                     _WriteTimer0:
 18876                           	opt stack 27
 18877                           
 18878                           ; BSR set to: 0
 18879                           
 18880                           ;incstack = 0
 18881                           ;incstack = 0
 18882  005B92  C00E  F010         	movff	WriteTimer0@timer0,WriteTimer0@timer
 18883  005B96  C00F  F011         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 18884  005B9A  C011  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 18885  005B9E  C010  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 18886                           
 18887                           ; BSR set to: 0
 18888  005BA2  0012               	return	
 18889  005BA4                     __end_of_WriteTimer0:
 18890                           	opt stack 0
 18891                           tblptru	equ	0xFF8
 18892                           tblptrh	equ	0xFF7
 18893                           tblptrl	equ	0xFF6
 18894                           tablat	equ	0xFF5
 18895                           prodh	equ	0xFF4
 18896                           prodl	equ	0xFF3
 18897                           intcon	equ	0xFF2
 18898                           postinc0	equ	0xFEE
 18899                           wreg	equ	0xFE8
 18900                           indf1	equ	0xFE7
 18901                           postdec1	equ	0xFE5
 18902                           fsr1h	equ	0xFE2
 18903                           fsr1l	equ	0xFE1
 18904                           indf2	equ	0xFDF
 18905                           postinc2	equ	0xFDE
 18906                           postdec2	equ	0xFDD
 18907                           plusw2	equ	0xFDB
 18908                           fsr2h	equ	0xFDA
 18909                           fsr2l	equ	0xFD9
 18910                           status	equ	0xFD8
 18911                           
 18912 ;; *************** function ___awtofl *****************
 18913 ;; Defined at:
 18914 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\awtofl.c"
 18915 ;; Parameters:    Size  Location     Type
 18916 ;;  c               2   23[COMRAM] int 
 18917 ;; Auto vars:     Size  Location     Type
 18918 ;;  f1              4    0        int 
 18919 ;;  sign            1   28[COMRAM] unsigned char 
 18920 ;; Return value:  Size  Location     Type
 18921 ;;                  4   23[COMRAM] unsigned char 
 18922 ;; Registers used:
 18923 ;;		wreg, status,2, status,0, cstack
 18924 ;; Tracked objects:
 18925 ;;		On entry : 0/0
 18926 ;;		On exit  : 0/0
 18927 ;;		Unchanged: 0/0
 18928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18929 ;;      Params:         4       0       0       0       0       0       0
 18930 ;;      Locals:         2       0       0       0       0       0       0
 18931 ;;      Temps:          0       0       0       0       0       0       0
 18932 ;;      Totals:         6       0       0       0       0       0       0
 18933 ;;Total ram usage:        6 bytes
 18934 ;; Hardware stack levels used:    1
 18935 ;; Hardware stack levels required when called:    3
 18936 ;; This function calls:
 18937 ;;		___flpack
 18938 ;; This function is called by:
 18939 ;;		_setEventData
 18940 ;;		_exp
 18941 ;;		_log
 18942 ;; This function uses a non-reentrant model
 18943 ;;
 18944                           
 18945                           	psect	text95
 18946  005788                     __ptext95:
 18947                           	opt stack 0
 18948  005788                     ___awtofl:
 18949                           	opt stack 25
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;incstack = 0
 18953                           ;incstack = 0
 18954  005788  6A1D               	clrf	___awtofl@sign,c
 18955  00578A  AE19               	btfss	___awtofl@c+1,7,c
 18956  00578C  D005               	goto	l14269
 18957  00578E  6C18               	negf	___awtofl@c,c
 18958  005790  1E19               	comf	___awtofl@c+1,f,c
 18959  005792  B0D8               	btfsc	status,0,c
 18960  005794  2A19               	incf	___awtofl@c+1,f,c
 18961  005796  2A1D               	incf	___awtofl@sign,f,c
 18962  005798                     l14269:
 18963  005798  C018  F00E         	movff	___awtofl@c,?___flpack
 18964  00579C  C019  F00F         	movff	___awtofl@c+1,?___flpack+1
 18965  0057A0  6A10               	clrf	?___flpack+2,c
 18966  0057A2  6A11               	clrf	?___flpack+3,c
 18967  0057A4  0E96               	movlw	150
 18968  0057A6  6E12               	movwf	?___flpack+4,c
 18969  0057A8  C01D  F013         	movff	___awtofl@sign,?___flpack+5
 18970  0057AC  EC8C  F024         	call	___flpack	;wreg free
 18971  0057B0  C011  F01B         	movff	?___flpack+3,?___awtofl+3
 18972  0057B4  C010  F01A         	movff	?___flpack+2,?___awtofl+2
 18973  0057B8  C00F  F019         	movff	?___flpack+1,?___awtofl+1
 18974  0057BC  C00E  F018         	movff	?___flpack,?___awtofl
 18975  0057C0  0012               	return	
 18976  0057C2                     __end_of___awtofl:
 18977                           	opt stack 0
 18978                           tblptru	equ	0xFF8
 18979                           tblptrh	equ	0xFF7
 18980                           tblptrl	equ	0xFF6
 18981                           tablat	equ	0xFF5
 18982                           prodh	equ	0xFF4
 18983                           prodl	equ	0xFF3
 18984                           intcon	equ	0xFF2
 18985                           postinc0	equ	0xFEE
 18986                           wreg	equ	0xFE8
 18987                           indf1	equ	0xFE7
 18988                           postdec1	equ	0xFE5
 18989                           fsr1h	equ	0xFE2
 18990                           fsr1l	equ	0xFE1
 18991                           indf2	equ	0xFDF
 18992                           postinc2	equ	0xFDE
 18993                           postdec2	equ	0xFDD
 18994                           plusw2	equ	0xFDB
 18995                           fsr2h	equ	0xFDA
 18996                           fsr2l	equ	0xFD9
 18997                           status	equ	0xFD8
 18998                           
 18999 ;; *************** function ___flmul *****************
 19000 ;; Defined at:
 19001 ;;		line 51 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\flmul.c"
 19002 ;; Parameters:    Size  Location     Type
 19003 ;;  f1              4   29[COMRAM] unsigned char 
 19004 ;;  f2              4   33[COMRAM] unsigned char 
 19005 ;; Auto vars:     Size  Location     Type
 19006 ;;  f3_as_produc    4   45[COMRAM] unsigned long 
 19007 ;;  sign            1   50[COMRAM] unsigned char 
 19008 ;;  cntr            1   49[COMRAM] unsigned char 
 19009 ;;  exp             1   44[COMRAM] unsigned char 
 19010 ;; Return value:  Size  Location     Type
 19011 ;;                  4   29[COMRAM] unsigned char 
 19012 ;; Registers used:
 19013 ;;		wreg, status,2, status,0, cstack
 19014 ;; Tracked objects:
 19015 ;;		On entry : 0/1
 19016 ;;		On exit  : 0/0
 19017 ;;		Unchanged: 0/0
 19018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19019 ;;      Params:         8       0       0       0       0       0       0
 19020 ;;      Locals:        14       0       0       0       0       0       0
 19021 ;;      Temps:          0       0       0       0       0       0       0
 19022 ;;      Totals:        22       0       0       0       0       0       0
 19023 ;;Total ram usage:       22 bytes
 19024 ;; Hardware stack levels used:    1
 19025 ;; Hardware stack levels required when called:    3
 19026 ;; This function calls:
 19027 ;;		___flpack
 19028 ;; This function is called by:
 19029 ;;		_doWork
 19030 ;;		_Celsius2Fahrenheit
 19031 ;;		___asflmul
 19032 ;;		_log
 19033 ;;		_eval_poly
 19034 ;; This function uses a non-reentrant model
 19035 ;;
 19036                           
 19037                           	psect	text96
 19038  004788                     __ptext96:
 19039                           	opt stack 0
 19040  004788                     ___flmul:
 19041                           	opt stack 26
 19042                           
 19043                           ;incstack = 0
 19044                           ;incstack = 0
 19045  004788  3420               	rlcf	(___flmul@f1+2)& (0+255),w,c
 19046  00478A  3421               	rlcf	(___flmul@f1+3)& (0+255),w,c
 19047  00478C  6E2D               	movwf	___flmul@exp,c
 19048  00478E  662D               	tstfsz	___flmul@exp& (0+255),c
 19049  004790  D001               	goto	l14213
 19050  004792  D005               	goto	u13590
 19051  004794                     l14213:
 19052  004794  3424               	rlcf	(___flmul@f2+2)& (0+255),w,c
 19053  004796  3425               	rlcf	(___flmul@f2+3)& (0+255),w,c
 19054  004798  6E33               	movwf	___flmul@sign,c
 19055  00479A  6633               	tstfsz	___flmul@sign& (0+255),c
 19056  00479C  D005               	goto	l14217
 19057  00479E                     u13590:
 19058  00479E  6A1E               	clrf	?___flmul,c
 19059  0047A0  6A1F               	clrf	?___flmul+1,c
 19060  0047A2  6A20               	clrf	?___flmul+2,c
 19061  0047A4  6A21               	clrf	?___flmul+3,c
 19062  0047A6  D057               	goto	l1621
 19063  0047A8                     l14217:
 19064  0047A8  5033               	movf	___flmul@sign,w,c
 19065  0047AA  0F7B               	addlw	123
 19066  0047AC  262D               	addwf	___flmul@exp,f,c
 19067  0047AE  C021  F033         	movff	___flmul@f1+3,___flmul@sign
 19068  0047B2  5025               	movf	(___flmul@f2+3)& (0+255),w,c
 19069  0047B4  1A33               	xorwf	___flmul@sign,f,c
 19070  0047B6  0E80               	movlw	128
 19071  0047B8  1633               	andwf	___flmul@sign,f,c
 19072  0047BA  8E20               	bsf	___flmul@f1+2,7,c
 19073  0047BC  8E24               	bsf	___flmul@f2+2,7,c
 19074  0047BE  0E00               	movlw	0
 19075  0047C0  1625               	andwf	___flmul@f2+3,f,c
 19076  0047C2  6A2E               	clrf	___flmul@f3_as_product,c
 19077  0047C4  6A2F               	clrf	___flmul@f3_as_product+1,c
 19078  0047C6  6A30               	clrf	___flmul@f3_as_product+2,c
 19079  0047C8  6A31               	clrf	___flmul@f3_as_product+3,c
 19080  0047CA  0E07               	movlw	7
 19081  0047CC  6E32               	movwf	___flmul@cntr,c
 19082  0047CE                     l14229:
 19083  0047CE  A01E               	btfss	___flmul@f1,0,c
 19084  0047D0  D008               	goto	l14233
 19085  0047D2  5022               	movf	___flmul@f2,w,c
 19086  0047D4  262E               	addwf	___flmul@f3_as_product,f,c
 19087  0047D6  5023               	movf	___flmul@f2+1,w,c
 19088  0047D8  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19089  0047DA  5024               	movf	___flmul@f2+2,w,c
 19090  0047DC  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19091  0047DE  5025               	movf	___flmul@f2+3,w,c
 19092  0047E0  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19093  0047E2                     l14233:
 19094  0047E2  90D8               	bcf	status,0,c
 19095  0047E4  3221               	rrcf	___flmul@f1+3,f,c
 19096  0047E6  3220               	rrcf	___flmul@f1+2,f,c
 19097  0047E8  321F               	rrcf	___flmul@f1+1,f,c
 19098  0047EA  321E               	rrcf	___flmul@f1,f,c
 19099  0047EC  90D8               	bcf	status,0,c
 19100  0047EE  3622               	rlcf	___flmul@f2,f,c
 19101  0047F0  3623               	rlcf	___flmul@f2+1,f,c
 19102  0047F2  3624               	rlcf	___flmul@f2+2,f,c
 19103  0047F4  3625               	rlcf	___flmul@f2+3,f,c
 19104  0047F6  2E32               	decfsz	___flmul@cntr,f,c
 19105  0047F8  D7EA               	goto	l14229
 19106  0047FA  0E11               	movlw	17
 19107  0047FC  6E32               	movwf	___flmul@cntr,c
 19108  0047FE                     l14241:
 19109  0047FE  A01E               	btfss	___flmul@f1,0,c
 19110  004800  D008               	goto	l14245
 19111  004802  5022               	movf	___flmul@f2,w,c
 19112  004804  262E               	addwf	___flmul@f3_as_product,f,c
 19113  004806  5023               	movf	___flmul@f2+1,w,c
 19114  004808  222F               	addwfc	___flmul@f3_as_product+1,f,c
 19115  00480A  5024               	movf	___flmul@f2+2,w,c
 19116  00480C  2230               	addwfc	___flmul@f3_as_product+2,f,c
 19117  00480E  5025               	movf	___flmul@f2+3,w,c
 19118  004810  2231               	addwfc	___flmul@f3_as_product+3,f,c
 19119  004812                     l14245:
 19120  004812  90D8               	bcf	status,0,c
 19121  004814  3221               	rrcf	___flmul@f1+3,f,c
 19122  004816  3220               	rrcf	___flmul@f1+2,f,c
 19123  004818  321F               	rrcf	___flmul@f1+1,f,c
 19124  00481A  321E               	rrcf	___flmul@f1,f,c
 19125  00481C  90D8               	bcf	status,0,c
 19126  00481E  3231               	rrcf	___flmul@f3_as_product+3,f,c
 19127  004820  3230               	rrcf	___flmul@f3_as_product+2,f,c
 19128  004822  322F               	rrcf	___flmul@f3_as_product+1,f,c
 19129  004824  322E               	rrcf	___flmul@f3_as_product,f,c
 19130  004826  2E32               	decfsz	___flmul@cntr,f,c
 19131  004828  D7EA               	goto	l14241
 19132  00482A  C02E  F00E         	movff	___flmul@f3_as_product,?___flpack
 19133  00482E  C02F  F00F         	movff	___flmul@f3_as_product+1,?___flpack+1
 19134  004832  C030  F010         	movff	___flmul@f3_as_product+2,?___flpack+2
 19135  004836  C031  F011         	movff	___flmul@f3_as_product+3,?___flpack+3
 19136  00483A  C02D  F012         	movff	___flmul@exp,?___flpack+4
 19137  00483E  C033  F013         	movff	___flmul@sign,?___flpack+5
 19138  004842  EC8C  F024         	call	___flpack	;wreg free
 19139  004846  C011  F021         	movff	?___flpack+3,?___flmul+3
 19140  00484A  C010  F020         	movff	?___flpack+2,?___flmul+2
 19141  00484E  C00F  F01F         	movff	?___flpack+1,?___flmul+1
 19142  004852  C00E  F01E         	movff	?___flpack,?___flmul
 19143  004856                     l1621:
 19144  004856  0012               	return	
 19145  004858                     __end_of___flmul:
 19146                           	opt stack 0
 19147                           tblptru	equ	0xFF8
 19148                           tblptrh	equ	0xFF7
 19149                           tblptrl	equ	0xFF6
 19150                           tablat	equ	0xFF5
 19151                           prodh	equ	0xFF4
 19152                           prodl	equ	0xFF3
 19153                           intcon	equ	0xFF2
 19154                           postinc0	equ	0xFEE
 19155                           wreg	equ	0xFE8
 19156                           indf1	equ	0xFE7
 19157                           postdec1	equ	0xFE5
 19158                           fsr1h	equ	0xFE2
 19159                           fsr1l	equ	0xFE1
 19160                           indf2	equ	0xFDF
 19161                           postinc2	equ	0xFDE
 19162                           postdec2	equ	0xFDD
 19163                           plusw2	equ	0xFDB
 19164                           fsr2h	equ	0xFDA
 19165                           fsr2l	equ	0xFD9
 19166                           status	equ	0xFD8
 19167                           
 19168 ;; *************** function ___flpack *****************
 19169 ;; Defined at:
 19170 ;;		line 64 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\double.c"
 19171 ;; Parameters:    Size  Location     Type
 19172 ;;  arg             4   13[COMRAM] unsigned long 
 19173 ;;  exp             1   17[COMRAM] unsigned char 
 19174 ;;  sign            1   18[COMRAM] unsigned char 
 19175 ;; Auto vars:     Size  Location     Type
 19176 ;;		None
 19177 ;; Return value:  Size  Location     Type
 19178 ;;                  4   13[COMRAM] unsigned char 
 19179 ;; Registers used:
 19180 ;;		wreg, status,2, status,0
 19181 ;; Tracked objects:
 19182 ;;		On entry : 0/0
 19183 ;;		On exit  : 0/0
 19184 ;;		Unchanged: 0/0
 19185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19186 ;;      Params:         6       0       0       0       0       0       0
 19187 ;;      Locals:         0       0       0       0       0       0       0
 19188 ;;      Temps:          4       0       0       0       0       0       0
 19189 ;;      Totals:        10       0       0       0       0       0       0
 19190 ;;Total ram usage:       10 bytes
 19191 ;; Hardware stack levels used:    1
 19192 ;; Hardware stack levels required when called:    2
 19193 ;; This function calls:
 19194 ;;		Nothing
 19195 ;; This function is called by:
 19196 ;;		___altofl
 19197 ;;		___awtofl
 19198 ;;		___fladd
 19199 ;;		___fldiv
 19200 ;;		___flmul
 19201 ;;		___lwtofl
 19202 ;; This function uses a non-reentrant model
 19203 ;;
 19204                           
 19205                           	psect	text97
 19206  004918                     __ptext97:
 19207                           	opt stack 0
 19208  004918                     ___flpack:
 19209                           	opt stack 26
 19210                           
 19211                           ;incstack = 0
 19212                           ;incstack = 0
 19213  004918  5012               	movf	___flpack@exp,w,c
 19214  00491A  E005               	bz	l1536
 19215  00491C  5011               	movf	___flpack@arg+3,w,c
 19216  00491E  100E               	iorwf	___flpack@arg,w,c
 19217  004920  100F               	iorwf	___flpack@arg+1,w,c
 19218  004922  1010               	iorwf	___flpack@arg+2,w,c
 19219  004924  E10B               	bnz	l14061
 19220  004926                     l1536:
 19221  004926  6A0E               	clrf	?___flpack,c
 19222  004928  6A0F               	clrf	?___flpack+1,c
 19223  00492A  6A10               	clrf	?___flpack+2,c
 19224  00492C  6A11               	clrf	?___flpack+3,c
 19225  00492E  D053               	goto	l1537
 19226  004930                     l14059:
 19227  004930  2A12               	incf	___flpack@exp,f,c
 19228  004932  90D8               	bcf	status,0,c
 19229  004934  3211               	rrcf	___flpack@arg+3,f,c
 19230  004936  3210               	rrcf	___flpack@arg+2,f,c
 19231  004938  320F               	rrcf	___flpack@arg+1,f,c
 19232  00493A  320E               	rrcf	___flpack@arg,f,c
 19233  00493C                     l14061:
 19234  00493C  6A14               	clrf	??___flpack& (0+255),c
 19235  00493E  6A15               	clrf	(??___flpack+1)& (0+255),c
 19236  004940  6A16               	clrf	(??___flpack+2)& (0+255),c
 19237  004942  0EFE               	movlw	254
 19238  004944  1411               	andwf	___flpack@arg+3,w,c
 19239  004946  6E17               	movwf	(??___flpack+3)& (0+255),c
 19240  004948  5017               	movf	??___flpack+3,w,c
 19241  00494A  1014               	iorwf	??___flpack,w,c
 19242  00494C  1015               	iorwf	??___flpack+1,w,c
 19243  00494E  1016               	iorwf	??___flpack+2,w,c
 19244  004950  E00C               	bz	l1541
 19245  004952  D7EE               	goto	l14059
 19246  004954                     l14063:
 19247  004954  2A12               	incf	___flpack@exp,f,c
 19248  004956  2A0E               	incf	___flpack@arg,f,c
 19249  004958  0E00               	movlw	0
 19250  00495A  220F               	addwfc	___flpack@arg+1,f,c
 19251  00495C  2210               	addwfc	___flpack@arg+2,f,c
 19252  00495E  2211               	addwfc	___flpack@arg+3,f,c
 19253  004960  90D8               	bcf	status,0,c
 19254  004962  3211               	rrcf	___flpack@arg+3,f,c
 19255  004964  3210               	rrcf	___flpack@arg+2,f,c
 19256  004966  320F               	rrcf	___flpack@arg+1,f,c
 19257  004968  320E               	rrcf	___flpack@arg,f,c
 19258  00496A                     l1541:
 19259  00496A  6A14               	clrf	??___flpack& (0+255),c
 19260  00496C  6A15               	clrf	(??___flpack+1)& (0+255),c
 19261  00496E  6A16               	clrf	(??___flpack+2)& (0+255),c
 19262  004970  5011               	movf	___flpack@arg+3,w,c
 19263  004972  6E17               	movwf	(??___flpack+3)& (0+255),c
 19264  004974  5017               	movf	??___flpack+3,w,c
 19265  004976  1014               	iorwf	??___flpack,w,c
 19266  004978  1015               	iorwf	??___flpack+1,w,c
 19267  00497A  1016               	iorwf	??___flpack+2,w,c
 19268  00497C  E007               	bz	l14071
 19269  00497E  D7EA               	goto	l14063
 19270  004980                     l14069:
 19271  004980  0612               	decf	___flpack@exp,f,c
 19272  004982  90D8               	bcf	status,0,c
 19273  004984  360E               	rlcf	___flpack@arg,f,c
 19274  004986  360F               	rlcf	___flpack@arg+1,f,c
 19275  004988  3610               	rlcf	___flpack@arg+2,f,c
 19276  00498A  3611               	rlcf	___flpack@arg+3,f,c
 19277  00498C                     l14071:
 19278  00498C  AE10               	btfss	___flpack@arg+2,7,c
 19279  00498E  D7F8               	goto	l14069
 19280  004990  B012               	btfsc	___flpack@exp,0,c
 19281  004992  D002               	goto	l1547
 19282  004994  0E7F               	movlw	127
 19283  004996  1610               	andwf	___flpack@arg+2,f,c
 19284  004998                     l1547:
 19285  004998  90D8               	bcf	status,0,c
 19286  00499A  3212               	rrcf	___flpack@exp,f,c
 19287  00499C  C012  F014         	movff	___flpack@exp,??___flpack
 19288  0049A0  6A15               	clrf	(??___flpack+1)& (0+255),c
 19289  0049A2  6A16               	clrf	(??___flpack+2)& (0+255),c
 19290  0049A4  6A17               	clrf	(??___flpack+3)& (0+255),c
 19291  0049A6  C014  F017         	movff	??___flpack,??___flpack+3
 19292  0049AA  6A16               	clrf	??___flpack+2,c
 19293  0049AC  6A15               	clrf	??___flpack+1,c
 19294  0049AE  6A14               	clrf	??___flpack,c
 19295  0049B0  5014               	movf	??___flpack,w,c
 19296  0049B2  120E               	iorwf	___flpack@arg,f,c
 19297  0049B4  5015               	movf	??___flpack+1,w,c
 19298  0049B6  120F               	iorwf	___flpack@arg+1,f,c
 19299  0049B8  5016               	movf	??___flpack+2,w,c
 19300  0049BA  1210               	iorwf	___flpack@arg+2,f,c
 19301  0049BC  5017               	movf	??___flpack+3,w,c
 19302  0049BE  1211               	iorwf	___flpack@arg+3,f,c
 19303  0049C0  5013               	movf	___flpack@sign,w,c
 19304  0049C2  A4D8               	btfss	status,2,c
 19305  0049C4  8E11               	bsf	___flpack@arg+3,7,c
 19306  0049C6  C00E  F00E         	movff	___flpack@arg,?___flpack
 19307  0049CA  C00F  F00F         	movff	___flpack@arg+1,?___flpack+1
 19308  0049CE  C010  F010         	movff	___flpack@arg+2,?___flpack+2
 19309  0049D2  C011  F011         	movff	___flpack@arg+3,?___flpack+3
 19310  0049D6                     l1537:
 19311  0049D6  0012               	return	
 19312  0049D8                     __end_of___flpack:
 19313                           	opt stack 0
 19314                           tblptru	equ	0xFF8
 19315                           tblptrh	equ	0xFF7
 19316                           tblptrl	equ	0xFF6
 19317                           tablat	equ	0xFF5
 19318                           prodh	equ	0xFF4
 19319                           prodl	equ	0xFF3
 19320                           intcon	equ	0xFF2
 19321                           postinc0	equ	0xFEE
 19322                           wreg	equ	0xFE8
 19323                           indf1	equ	0xFE7
 19324                           postdec1	equ	0xFE5
 19325                           fsr1h	equ	0xFE2
 19326                           fsr1l	equ	0xFE1
 19327                           indf2	equ	0xFDF
 19328                           postinc2	equ	0xFDE
 19329                           postdec2	equ	0xFDD
 19330                           plusw2	equ	0xFDB
 19331                           fsr2h	equ	0xFDA
 19332                           fsr2l	equ	0xFD9
 19333                           status	equ	0xFD8
 19334                           
 19335 ;; *************** function _vscp_readAppReg *****************
 19336 ;; Defined at:
 19337 ;;		line 1286 in file "../main.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;  reg             1    wreg     unsigned char 
 19340 ;; Auto vars:     Size  Location     Type
 19341 ;;  reg             1   26[COMRAM] unsigned char 
 19342 ;;  pos             1   25[COMRAM] unsigned char 
 19343 ;;  rv              1   27[COMRAM] unsigned char 
 19344 ;; Return value:  Size  Location     Type
 19345 ;;                  1    wreg      unsigned char 
 19346 ;; Registers used:
 19347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19348 ;; Tracked objects:
 19349 ;;		On entry : F/0
 19350 ;;		On exit  : 0/0
 19351 ;;		Unchanged: 0/0
 19352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19353 ;;      Params:         0       0       0       0       0       0       0
 19354 ;;      Locals:         3       0       0       0       0       0       0
 19355 ;;      Temps:          0       0       0       0       0       0       0
 19356 ;;      Totals:         3       0       0       0       0       0       0
 19357 ;;Total ram usage:        3 bytes
 19358 ;; Hardware stack levels used:    1
 19359 ;; Hardware stack levels required when called:    3
 19360 ;; This function calls:
 19361 ;;		_readEEPROM
 19362 ;; This function is called by:
 19363 ;;		_vscp_readRegister
 19364 ;;		_vscp_handleProtocolEvent
 19365 ;; This function uses a non-reentrant model
 19366 ;;
 19367                           
 19368                           	psect	text98
 19369  002018                     __ptext98:
 19370                           	opt stack 0
 19371  002018                     _vscp_readAppReg:
 19372                           	opt stack 25
 19373                           
 19374                           ;incstack = 0
 19375                           ;incstack = 0
 19376                           ;vscp_readAppReg@reg stored from wreg
 19377  002018  CFE8 F01B          	movff	wreg,vscp_readAppReg@reg
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;main.c: 1287: uint8_t rv;
 19381                           ;main.c: 1292: if (0 == vscp_page_select) {
 19382  00201C  5047               	movf	_vscp_page_select+1,w,c
 19383  00201E  1046               	iorwf	_vscp_page_select,w,c
 19384  002020  E101 D255          	bz	l10723
 19385  002024  D399               	goto	l10725
 19386  002026                     l10521:
 19387                           
 19388                           ; BSR set to: 0
 19389                           ;main.c: 1298: rv = readEEPROM( 0x41 );
 19390  002026  6A17               	clrf	?_readEEPROM+1,c
 19391  002028  0E41               	movlw	65
 19392  00202A  6E16               	movwf	?_readEEPROM,c
 19393  00202C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19394  002030  D3C0               	goto	L53
 19395  002032                     l10523:
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;main.c: 1303: rv = readEEPROM( 0x42 );
 19399  002032  6A17               	clrf	?_readEEPROM+1,c
 19400  002034  0E42               	movlw	66
 19401  002036  6E16               	movwf	?_readEEPROM,c
 19402  002038  ECA4  F02D         	call	_readEEPROM	;wreg free
 19403  00203C  D3BA               	goto	L53
 19404  00203E                     l10525:
 19405                           
 19406                           ; BSR set to: 0
 19407                           ;main.c: 1308: rv = readEEPROM( 0x43 );
 19408  00203E  6A17               	clrf	?_readEEPROM+1,c
 19409  002040  0E43               	movlw	67
 19410  002042  6E16               	movwf	?_readEEPROM,c
 19411  002044  ECA4  F02D         	call	_readEEPROM	;wreg free
 19412  002048  D3B4               	goto	L53
 19413  00204A                     l10527:
 19414                           
 19415                           ; BSR set to: 0
 19416                           ;main.c: 1313: rv = readEEPROM (0x44 );
 19417  00204A  6A17               	clrf	?_readEEPROM+1,c
 19418  00204C  0E44               	movlw	68
 19419  00204E  6E16               	movwf	?_readEEPROM,c
 19420  002050  ECA4  F02D         	call	_readEEPROM	;wreg free
 19421  002054  D3AE               	goto	L53
 19422  002056                     l10529:
 19423                           
 19424                           ; BSR set to: 0
 19425                           ;main.c: 1318: rv = readEEPROM( 0x45 );
 19426  002056  6A17               	clrf	?_readEEPROM+1,c
 19427  002058  0E45               	movlw	69
 19428  00205A  6E16               	movwf	?_readEEPROM,c
 19429  00205C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19430  002060  D3A8               	goto	L53
 19431  002062                     l10531:
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;main.c: 1323: rv = readEEPROM( 0x46 );
 19435  002062  6A17               	clrf	?_readEEPROM+1,c
 19436  002064  0E46               	movlw	70
 19437  002066  6E16               	movwf	?_readEEPROM,c
 19438  002068  ECA4  F02D         	call	_readEEPROM	;wreg free
 19439  00206C  D3A2               	goto	L53
 19440  00206E                     l10533:
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;main.c: 1328: rv = readEEPROM( 0x47 );
 19444  00206E  6A17               	clrf	?_readEEPROM+1,c
 19445  002070  0E47               	movlw	71
 19446  002072  6E16               	movwf	?_readEEPROM,c
 19447  002074  ECA4  F02D         	call	_readEEPROM	;wreg free
 19448  002078  D39C               	goto	L53
 19449  00207A                     l10535:
 19450                           
 19451                           ; BSR set to: 0
 19452                           ;main.c: 1333: rv = readEEPROM( 0x48 );
 19453  00207A  6A17               	clrf	?_readEEPROM+1,c
 19454  00207C  0E48               	movlw	72
 19455  00207E  6E16               	movwf	?_readEEPROM,c
 19456  002080  ECA4  F02D         	call	_readEEPROM	;wreg free
 19457  002084  D396               	goto	L53
 19458  002086                     l10537:
 19459                           
 19460                           ; BSR set to: 0
 19461                           ;main.c: 1338: rv = ((current_temp[0] & 0xff00) >> 8);
 19462  002086  51A4               	movf	(_current_temp+1)& (0+255),w,b
 19463  002088  D394               	goto	L53
 19464  00208A                     l314:
 19465                           
 19466                           ; BSR set to: 0
 19467                           ;main.c: 1343: rv = (current_temp[0] & 0x00ff);
 19468  00208A  C0A3  F01C         	movff	_current_temp,vscp_readAppReg@rv
 19469                           
 19470                           ;main.c: 1344: break;
 19471  00208E  D392               	goto	l10747
 19472  002090                     l10539:
 19473                           
 19474                           ; BSR set to: 0
 19475                           ;main.c: 1348: rv = ((current_temp[1] & 0xff00) >> 8);
 19476  002090  51A6               	movf	(_current_temp+3)& (0+255),w,b
 19477  002092  D38F               	goto	L53
 19478  002094                     l316:
 19479                           
 19480                           ; BSR set to: 0
 19481                           ;main.c: 1353: rv = (current_temp[1] & 0x00ff);
 19482  002094  C0A5  F01C         	movff	_current_temp+2,vscp_readAppReg@rv
 19483                           
 19484                           ;main.c: 1354: break;
 19485  002098  D38D               	goto	l10747
 19486  00209A                     l10541:
 19487                           
 19488                           ; BSR set to: 0
 19489                           ;main.c: 1358: rv = ((current_temp[2] & 0xff00) >> 8);
 19490  00209A  51A8               	movf	(_current_temp+5)& (0+255),w,b
 19491  00209C  D38A               	goto	L53
 19492  00209E                     l318:
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;main.c: 1363: rv = (current_temp[2] & 0x00ff);
 19496  00209E  C0A7  F01C         	movff	_current_temp+4,vscp_readAppReg@rv
 19497                           
 19498                           ;main.c: 1364: break;
 19499  0020A2  D388               	goto	l10747
 19500  0020A4                     l10543:
 19501                           
 19502                           ; BSR set to: 0
 19503                           ;main.c: 1368: rv = ((current_temp[3] & 0xff00) >> 8);
 19504  0020A4  51AA               	movf	(_current_temp+7)& (0+255),w,b
 19505  0020A6  D385               	goto	L53
 19506  0020A8                     l320:
 19507                           
 19508                           ; BSR set to: 0
 19509                           ;main.c: 1373: rv = (current_temp[3] & 0x00ff);
 19510  0020A8  C0A9  F01C         	movff	_current_temp+6,vscp_readAppReg@rv
 19511                           
 19512                           ;main.c: 1374: break;
 19513  0020AC  D383               	goto	l10747
 19514  0020AE                     l10545:
 19515                           
 19516                           ; BSR set to: 0
 19517                           ;main.c: 1378: rv = ((current_temp[4] & 0xff00) >> 8);
 19518  0020AE  51AC               	movf	(_current_temp+9)& (0+255),w,b
 19519  0020B0  D380               	goto	L53
 19520  0020B2                     l322:
 19521                           
 19522                           ; BSR set to: 0
 19523                           ;main.c: 1383: rv = (current_temp[4] & 0x00ff);
 19524  0020B2  C0AB  F01C         	movff	_current_temp+8,vscp_readAppReg@rv
 19525                           
 19526                           ;main.c: 1384: break;
 19527  0020B6  D37E               	goto	l10747
 19528  0020B8                     l10547:
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;main.c: 1388: rv = ((current_temp[5] & 0xff00) >> 8);
 19532  0020B8  51AE               	movf	(_current_temp+11)& (0+255),w,b
 19533  0020BA  D37B               	goto	L53
 19534  0020BC                     l324:
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;main.c: 1393: rv = (current_temp[5] & 0x00ff);
 19538  0020BC  C0AD  F01C         	movff	_current_temp+10,vscp_readAppReg@rv
 19539                           
 19540                           ;main.c: 1394: break;
 19541  0020C0  D379               	goto	l10747
 19542  0020C2                     l10549:
 19543                           
 19544                           ; BSR set to: 0
 19545                           ;main.c: 1398: rv = readEEPROM(0x49);
 19546  0020C2  6A17               	clrf	?_readEEPROM+1,c
 19547  0020C4  0E49               	movlw	73
 19548  0020C6  6E16               	movwf	?_readEEPROM,c
 19549  0020C8  ECA4  F02D         	call	_readEEPROM	;wreg free
 19550  0020CC  D372               	goto	L53
 19551  0020CE                     l10551:
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;main.c: 1403: rv = readEEPROM(0x4A);
 19555  0020CE  6A17               	clrf	?_readEEPROM+1,c
 19556  0020D0  0E4A               	movlw	74
 19557  0020D2  6E16               	movwf	?_readEEPROM,c
 19558  0020D4  ECA4  F02D         	call	_readEEPROM	;wreg free
 19559  0020D8  D36C               	goto	L53
 19560  0020DA                     l10553:
 19561                           
 19562                           ; BSR set to: 0
 19563                           ;main.c: 1408: rv = readEEPROM(0x4B);
 19564  0020DA  6A17               	clrf	?_readEEPROM+1,c
 19565  0020DC  0E4B               	movlw	75
 19566  0020DE  6E16               	movwf	?_readEEPROM,c
 19567  0020E0  ECA4  F02D         	call	_readEEPROM	;wreg free
 19568  0020E4  D366               	goto	L53
 19569  0020E6                     l10555:
 19570                           
 19571                           ; BSR set to: 0
 19572                           ;main.c: 1413: rv = readEEPROM(0x4C);
 19573  0020E6  6A17               	clrf	?_readEEPROM+1,c
 19574  0020E8  0E4C               	movlw	76
 19575  0020EA  6E16               	movwf	?_readEEPROM,c
 19576  0020EC  ECA4  F02D         	call	_readEEPROM	;wreg free
 19577  0020F0  D360               	goto	L53
 19578  0020F2                     l10557:
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;main.c: 1418: rv = readEEPROM(0x4D);
 19582  0020F2  6A17               	clrf	?_readEEPROM+1,c
 19583  0020F4  0E4D               	movlw	77
 19584  0020F6  6E16               	movwf	?_readEEPROM,c
 19585  0020F8  ECA4  F02D         	call	_readEEPROM	;wreg free
 19586  0020FC  D35A               	goto	L53
 19587  0020FE                     l10559:
 19588                           
 19589                           ; BSR set to: 0
 19590                           ;main.c: 1423: rv = readEEPROM(0x4E);
 19591  0020FE  6A17               	clrf	?_readEEPROM+1,c
 19592  002100  0E4E               	movlw	78
 19593  002102  6E16               	movwf	?_readEEPROM,c
 19594  002104  ECA4  F02D         	call	_readEEPROM	;wreg free
 19595  002108  D354               	goto	L53
 19596  00210A                     l10561:
 19597                           
 19598                           ; BSR set to: 0
 19599                           ;main.c: 1430: rv = readEEPROM(0x4F);
 19600  00210A  6A17               	clrf	?_readEEPROM+1,c
 19601  00210C  0E4F               	movlw	79
 19602  00210E  6E16               	movwf	?_readEEPROM,c
 19603  002110  ECA4  F02D         	call	_readEEPROM	;wreg free
 19604  002114  D34E               	goto	L53
 19605  002116                     l10563:
 19606                           
 19607                           ; BSR set to: 0
 19608                           ;main.c: 1435: rv = readEEPROM(0x50);
 19609  002116  6A17               	clrf	?_readEEPROM+1,c
 19610  002118  0E50               	movlw	80
 19611  00211A  6E16               	movwf	?_readEEPROM,c
 19612  00211C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19613  002120  D348               	goto	L53
 19614  002122                     l10565:
 19615                           
 19616                           ; BSR set to: 0
 19617                           ;main.c: 1440: rv = readEEPROM(0x51);
 19618  002122  6A17               	clrf	?_readEEPROM+1,c
 19619  002124  0E51               	movlw	81
 19620  002126  6E16               	movwf	?_readEEPROM,c
 19621  002128  ECA4  F02D         	call	_readEEPROM	;wreg free
 19622  00212C  D342               	goto	L53
 19623  00212E                     l10567:
 19624                           
 19625                           ; BSR set to: 0
 19626                           ;main.c: 1445: rv = readEEPROM(0x52);
 19627  00212E  6A17               	clrf	?_readEEPROM+1,c
 19628  002130  0E52               	movlw	82
 19629  002132  6E16               	movwf	?_readEEPROM,c
 19630  002134  ECA4  F02D         	call	_readEEPROM	;wreg free
 19631  002138  D33C               	goto	L53
 19632  00213A                     l10569:
 19633                           
 19634                           ; BSR set to: 0
 19635                           ;main.c: 1450: rv = readEEPROM(0x53);
 19636  00213A  6A17               	clrf	?_readEEPROM+1,c
 19637  00213C  0E53               	movlw	83
 19638  00213E  6E16               	movwf	?_readEEPROM,c
 19639  002140  ECA4  F02D         	call	_readEEPROM	;wreg free
 19640  002144  D336               	goto	L53
 19641  002146                     l10571:
 19642                           
 19643                           ; BSR set to: 0
 19644                           ;main.c: 1455: rv = readEEPROM(0x54);
 19645  002146  6A17               	clrf	?_readEEPROM+1,c
 19646  002148  0E54               	movlw	84
 19647  00214A  6E16               	movwf	?_readEEPROM,c
 19648  00214C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19649  002150  D330               	goto	L53
 19650  002152                     l10573:
 19651                           
 19652                           ; BSR set to: 0
 19653                           ;main.c: 1460: rv = readEEPROM(0x55);
 19654  002152  6A17               	clrf	?_readEEPROM+1,c
 19655  002154  0E55               	movlw	85
 19656  002156  6E16               	movwf	?_readEEPROM,c
 19657  002158  ECA4  F02D         	call	_readEEPROM	;wreg free
 19658  00215C  D32A               	goto	L53
 19659  00215E                     l10575:
 19660                           
 19661                           ; BSR set to: 0
 19662                           ;main.c: 1465: rv = readEEPROM(0x56);
 19663  00215E  6A17               	clrf	?_readEEPROM+1,c
 19664  002160  0E56               	movlw	86
 19665  002162  6E16               	movwf	?_readEEPROM,c
 19666  002164  ECA4  F02D         	call	_readEEPROM	;wreg free
 19667  002168  D324               	goto	L53
 19668  00216A                     l10577:
 19669                           
 19670                           ; BSR set to: 0
 19671                           ;main.c: 1470: rv = readEEPROM(0x57);
 19672  00216A  6A17               	clrf	?_readEEPROM+1,c
 19673  00216C  0E57               	movlw	87
 19674  00216E  6E16               	movwf	?_readEEPROM,c
 19675  002170  ECA4  F02D         	call	_readEEPROM	;wreg free
 19676  002174  D31E               	goto	L53
 19677  002176                     l10579:
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;main.c: 1475: rv = readEEPROM(0x58);
 19681  002176  6A17               	clrf	?_readEEPROM+1,c
 19682  002178  0E58               	movlw	88
 19683  00217A  6E16               	movwf	?_readEEPROM,c
 19684  00217C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19685  002180  D318               	goto	L53
 19686  002182                     l10581:
 19687                           
 19688                           ; BSR set to: 0
 19689                           ;main.c: 1480: rv = readEEPROM(0x59);
 19690  002182  6A17               	clrf	?_readEEPROM+1,c
 19691  002184  0E59               	movlw	89
 19692  002186  6E16               	movwf	?_readEEPROM,c
 19693  002188  ECA4  F02D         	call	_readEEPROM	;wreg free
 19694  00218C  D312               	goto	L53
 19695  00218E                     l10583:
 19696                           
 19697                           ; BSR set to: 0
 19698                           ;main.c: 1485: rv = readEEPROM(0x5A);
 19699  00218E  6A17               	clrf	?_readEEPROM+1,c
 19700  002190  0E5A               	movlw	90
 19701  002192  6E16               	movwf	?_readEEPROM,c
 19702  002194  ECA4  F02D         	call	_readEEPROM	;wreg free
 19703  002198  D30C               	goto	L53
 19704  00219A                     l10585:
 19705                           
 19706                           ; BSR set to: 0
 19707                           ;main.c: 1494: rv = readEEPROM(0x5B);
 19708  00219A  6A17               	clrf	?_readEEPROM+1,c
 19709  00219C  0E5B               	movlw	91
 19710  00219E  6E16               	movwf	?_readEEPROM,c
 19711  0021A0  ECA4  F02D         	call	_readEEPROM	;wreg free
 19712  0021A4  D306               	goto	L53
 19713  0021A6                     l10587:
 19714                           
 19715                           ; BSR set to: 0
 19716                           ;main.c: 1499: rv = readEEPROM(0x5C);
 19717  0021A6  6A17               	clrf	?_readEEPROM+1,c
 19718  0021A8  0E5C               	movlw	92
 19719  0021AA  6E16               	movwf	?_readEEPROM,c
 19720  0021AC  ECA4  F02D         	call	_readEEPROM	;wreg free
 19721  0021B0  D300               	goto	L53
 19722  0021B2                     l10589:
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;main.c: 1504: rv = readEEPROM(0x5D);
 19726  0021B2  6A17               	clrf	?_readEEPROM+1,c
 19727  0021B4  0E5D               	movlw	93
 19728  0021B6  6E16               	movwf	?_readEEPROM,c
 19729  0021B8  ECA4  F02D         	call	_readEEPROM	;wreg free
 19730  0021BC  D2FA               	goto	L53
 19731  0021BE                     l10591:
 19732                           
 19733                           ; BSR set to: 0
 19734                           ;main.c: 1509: rv = readEEPROM(0x5E);
 19735  0021BE  6A17               	clrf	?_readEEPROM+1,c
 19736  0021C0  0E5E               	movlw	94
 19737  0021C2  6E16               	movwf	?_readEEPROM,c
 19738  0021C4  ECA4  F02D         	call	_readEEPROM	;wreg free
 19739  0021C8  D2F4               	goto	L53
 19740  0021CA                     l10593:
 19741                           
 19742                           ; BSR set to: 0
 19743                           ;main.c: 1514: rv = readEEPROM(0x5F);
 19744  0021CA  6A17               	clrf	?_readEEPROM+1,c
 19745  0021CC  0E5F               	movlw	95
 19746  0021CE  6E16               	movwf	?_readEEPROM,c
 19747  0021D0  ECA4  F02D         	call	_readEEPROM	;wreg free
 19748  0021D4  D2EE               	goto	L53
 19749  0021D6                     l10595:
 19750                           
 19751                           ; BSR set to: 0
 19752                           ;main.c: 1519: rv = readEEPROM(0x60);
 19753  0021D6  6A17               	clrf	?_readEEPROM+1,c
 19754  0021D8  0E60               	movlw	96
 19755  0021DA  6E16               	movwf	?_readEEPROM,c
 19756  0021DC  ECA4  F02D         	call	_readEEPROM	;wreg free
 19757  0021E0  D2E8               	goto	L53
 19758  0021E2                     l10597:
 19759                           
 19760                           ; BSR set to: 0
 19761                           ;main.c: 1524: rv = readEEPROM(0x61);
 19762  0021E2  6A17               	clrf	?_readEEPROM+1,c
 19763  0021E4  0E61               	movlw	97
 19764  0021E6  6E16               	movwf	?_readEEPROM,c
 19765  0021E8  ECA4  F02D         	call	_readEEPROM	;wreg free
 19766  0021EC  D2E2               	goto	L53
 19767  0021EE                     l10599:
 19768                           
 19769                           ; BSR set to: 0
 19770                           ;main.c: 1529: rv = readEEPROM(0x62);
 19771  0021EE  6A17               	clrf	?_readEEPROM+1,c
 19772  0021F0  0E62               	movlw	98
 19773  0021F2  6E16               	movwf	?_readEEPROM,c
 19774  0021F4  ECA4  F02D         	call	_readEEPROM	;wreg free
 19775  0021F8  D2DC               	goto	L53
 19776  0021FA                     l10601:
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;main.c: 1534: rv = readEEPROM(0x63);
 19780  0021FA  6A17               	clrf	?_readEEPROM+1,c
 19781  0021FC  0E63               	movlw	99
 19782  0021FE  6E16               	movwf	?_readEEPROM,c
 19783  002200  ECA4  F02D         	call	_readEEPROM	;wreg free
 19784  002204  D2D6               	goto	L53
 19785  002206                     l10603:
 19786                           
 19787                           ; BSR set to: 0
 19788                           ;main.c: 1539: rv = readEEPROM(0x64);
 19789  002206  6A17               	clrf	?_readEEPROM+1,c
 19790  002208  0E64               	movlw	100
 19791  00220A  6E16               	movwf	?_readEEPROM,c
 19792  00220C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19793  002210  D2D0               	goto	L53
 19794  002212                     l10605:
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;main.c: 1544: rv = readEEPROM(0x65);
 19798  002212  6A17               	clrf	?_readEEPROM+1,c
 19799  002214  0E65               	movlw	101
 19800  002216  6E16               	movwf	?_readEEPROM,c
 19801  002218  ECA4  F02D         	call	_readEEPROM	;wreg free
 19802  00221C  D2CA               	goto	L53
 19803  00221E                     l10607:
 19804                           
 19805                           ; BSR set to: 0
 19806                           ;main.c: 1549: rv = readEEPROM(0x66);
 19807  00221E  6A17               	clrf	?_readEEPROM+1,c
 19808  002220  0E66               	movlw	102
 19809  002222  6E16               	movwf	?_readEEPROM,c
 19810  002224  ECA4  F02D         	call	_readEEPROM	;wreg free
 19811  002228  D2C4               	goto	L53
 19812  00222A                     l10609:
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;main.c: 1559: rv = readEEPROM(0x67);
 19816  00222A  6A17               	clrf	?_readEEPROM+1,c
 19817  00222C  0E67               	movlw	103
 19818  00222E  6E16               	movwf	?_readEEPROM,c
 19819  002230  ECA4  F02D         	call	_readEEPROM	;wreg free
 19820  002234  D2BE               	goto	L53
 19821  002236                     l10611:
 19822                           
 19823                           ; BSR set to: 0
 19824                           ;main.c: 1564: rv = readEEPROM(0x68);
 19825  002236  6A17               	clrf	?_readEEPROM+1,c
 19826  002238  0E68               	movlw	104
 19827  00223A  6E16               	movwf	?_readEEPROM,c
 19828  00223C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19829  002240  D2B8               	goto	L53
 19830  002242                     l10613:
 19831                           
 19832                           ; BSR set to: 0
 19833                           ;main.c: 1569: rv = readEEPROM(0x69);
 19834  002242  6A17               	clrf	?_readEEPROM+1,c
 19835  002244  0E69               	movlw	105
 19836  002246  6E16               	movwf	?_readEEPROM,c
 19837  002248  ECA4  F02D         	call	_readEEPROM	;wreg free
 19838  00224C  D2B2               	goto	L53
 19839  00224E                     l10615:
 19840                           
 19841                           ; BSR set to: 0
 19842                           ;main.c: 1574: rv = readEEPROM(0x6A);
 19843  00224E  6A17               	clrf	?_readEEPROM+1,c
 19844  002250  0E6A               	movlw	106
 19845  002252  6E16               	movwf	?_readEEPROM,c
 19846  002254  ECA4  F02D         	call	_readEEPROM	;wreg free
 19847  002258  D2AC               	goto	L53
 19848  00225A                     l10617:
 19849                           
 19850                           ; BSR set to: 0
 19851                           ;main.c: 1579: rv = readEEPROM(0x6B);
 19852  00225A  6A17               	clrf	?_readEEPROM+1,c
 19853  00225C  0E6B               	movlw	107
 19854  00225E  6E16               	movwf	?_readEEPROM,c
 19855  002260  ECA4  F02D         	call	_readEEPROM	;wreg free
 19856  002264  D2A6               	goto	L53
 19857  002266                     l10619:
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;main.c: 1584: rv = readEEPROM(0x6C);
 19861  002266  6A17               	clrf	?_readEEPROM+1,c
 19862  002268  0E6C               	movlw	108
 19863  00226A  6E16               	movwf	?_readEEPROM,c
 19864  00226C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19865  002270  D2A0               	goto	L53
 19866  002272                     l10621:
 19867                           
 19868                           ; BSR set to: 0
 19869                           ;main.c: 1589: rv = readEEPROM(0x6D);
 19870  002272  6A17               	clrf	?_readEEPROM+1,c
 19871  002274  0E6D               	movlw	109
 19872  002276  6E16               	movwf	?_readEEPROM,c
 19873  002278  ECA4  F02D         	call	_readEEPROM	;wreg free
 19874  00227C  D29A               	goto	L53
 19875  00227E                     l10623:
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;main.c: 1594: rv = readEEPROM(0x6E);
 19879  00227E  6A17               	clrf	?_readEEPROM+1,c
 19880  002280  0E6E               	movlw	110
 19881  002282  6E16               	movwf	?_readEEPROM,c
 19882  002284  ECA4  F02D         	call	_readEEPROM	;wreg free
 19883  002288  D294               	goto	L53
 19884  00228A                     l10625:
 19885                           
 19886                           ; BSR set to: 0
 19887                           ;main.c: 1599: rv = readEEPROM(0x6F);
 19888  00228A  6A17               	clrf	?_readEEPROM+1,c
 19889  00228C  0E6F               	movlw	111
 19890  00228E  6E16               	movwf	?_readEEPROM,c
 19891  002290  ECA4  F02D         	call	_readEEPROM	;wreg free
 19892  002294  D28E               	goto	L53
 19893  002296                     l10627:
 19894                           
 19895                           ; BSR set to: 0
 19896                           ;main.c: 1604: rv = readEEPROM(0x70);
 19897  002296  6A17               	clrf	?_readEEPROM+1,c
 19898  002298  0E70               	movlw	112
 19899  00229A  6E16               	movwf	?_readEEPROM,c
 19900  00229C  ECA4  F02D         	call	_readEEPROM	;wreg free
 19901  0022A0  D288               	goto	L53
 19902  0022A2                     l10629:
 19903                           
 19904                           ; BSR set to: 0
 19905                           ;main.c: 1609: rv = readEEPROM(0x71);
 19906  0022A2  6A17               	clrf	?_readEEPROM+1,c
 19907  0022A4  0E71               	movlw	113
 19908  0022A6  6E16               	movwf	?_readEEPROM,c
 19909  0022A8  ECA4  F02D         	call	_readEEPROM	;wreg free
 19910  0022AC  D282               	goto	L53
 19911  0022AE                     l10631:
 19912                           
 19913                           ; BSR set to: 0
 19914                           ;main.c: 1614: rv = readEEPROM(0x72);
 19915  0022AE  6A17               	clrf	?_readEEPROM+1,c
 19916  0022B0  0E72               	movlw	114
 19917  0022B2  6E16               	movwf	?_readEEPROM,c
 19918  0022B4  ECA4  F02D         	call	_readEEPROM	;wreg free
 19919  0022B8  D27C               	goto	L53
 19920  0022BA                     l10633:
 19921                           
 19922                           ; BSR set to: 0
 19923                           ;main.c: 1623: rv = readEEPROM(0x73);
 19924  0022BA  6A17               	clrf	?_readEEPROM+1,c
 19925  0022BC  0E73               	movlw	115
 19926  0022BE  6E16               	movwf	?_readEEPROM,c
 19927  0022C0  ECA4  F02D         	call	_readEEPROM	;wreg free
 19928  0022C4  D276               	goto	L53
 19929  0022C6                     l10635:
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;main.c: 1628: rv = readEEPROM(0x74);
 19933  0022C6  6A17               	clrf	?_readEEPROM+1,c
 19934  0022C8  0E74               	movlw	116
 19935  0022CA  6E16               	movwf	?_readEEPROM,c
 19936  0022CC  ECA4  F02D         	call	_readEEPROM	;wreg free
 19937  0022D0  D270               	goto	L53
 19938  0022D2                     l10637:
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;main.c: 1633: rv = readEEPROM(0x75);
 19942  0022D2  6A17               	clrf	?_readEEPROM+1,c
 19943  0022D4  0E75               	movlw	117
 19944  0022D6  6E16               	movwf	?_readEEPROM,c
 19945  0022D8  ECA4  F02D         	call	_readEEPROM	;wreg free
 19946  0022DC  D26A               	goto	L53
 19947  0022DE                     l10639:
 19948                           
 19949                           ; BSR set to: 0
 19950                           ;main.c: 1638: rv = readEEPROM(0x76);
 19951  0022DE  6A17               	clrf	?_readEEPROM+1,c
 19952  0022E0  0E76               	movlw	118
 19953  0022E2  6E16               	movwf	?_readEEPROM,c
 19954  0022E4  ECA4  F02D         	call	_readEEPROM	;wreg free
 19955  0022E8  D264               	goto	L53
 19956  0022EA                     l10641:
 19957                           
 19958                           ; BSR set to: 0
 19959                           ;main.c: 1643: rv = readEEPROM(0x77);
 19960  0022EA  6A17               	clrf	?_readEEPROM+1,c
 19961  0022EC  0E77               	movlw	119
 19962  0022EE  6E16               	movwf	?_readEEPROM,c
 19963  0022F0  ECA4  F02D         	call	_readEEPROM	;wreg free
 19964  0022F4  D25E               	goto	L53
 19965  0022F6                     l10643:
 19966                           
 19967                           ; BSR set to: 0
 19968                           ;main.c: 1648: rv = readEEPROM(0x78);
 19969  0022F6  6A17               	clrf	?_readEEPROM+1,c
 19970  0022F8  0E78               	movlw	120
 19971  0022FA  6E16               	movwf	?_readEEPROM,c
 19972  0022FC  ECA4  F02D         	call	_readEEPROM	;wreg free
 19973  002300  D258               	goto	L53
 19974  002302                     l10645:
 19975                           
 19976                           ; BSR set to: 0
 19977                           ;main.c: 1653: rv = readEEPROM(0x79);
 19978  002302  6A17               	clrf	?_readEEPROM+1,c
 19979  002304  0E79               	movlw	121
 19980  002306  6E16               	movwf	?_readEEPROM,c
 19981  002308  ECA4  F02D         	call	_readEEPROM	;wreg free
 19982  00230C  D252               	goto	L53
 19983  00230E                     l10647:
 19984                           
 19985                           ; BSR set to: 0
 19986                           ;main.c: 1658: rv = readEEPROM(0x7A);
 19987  00230E  6A17               	clrf	?_readEEPROM+1,c
 19988  002310  0E7A               	movlw	122
 19989  002312  6E16               	movwf	?_readEEPROM,c
 19990  002314  ECA4  F02D         	call	_readEEPROM	;wreg free
 19991  002318  D24C               	goto	L53
 19992  00231A                     l10649:
 19993                           
 19994                           ; BSR set to: 0
 19995                           ;main.c: 1663: rv = readEEPROM(0x7B);
 19996  00231A  6A17               	clrf	?_readEEPROM+1,c
 19997  00231C  0E7B               	movlw	123
 19998  00231E  6E16               	movwf	?_readEEPROM,c
 19999  002320  ECA4  F02D         	call	_readEEPROM	;wreg free
 20000  002324  D246               	goto	L53
 20001  002326                     l10651:
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;main.c: 1668: rv = readEEPROM(0x7C);
 20005  002326  6A17               	clrf	?_readEEPROM+1,c
 20006  002328  0E7C               	movlw	124
 20007  00232A  6E16               	movwf	?_readEEPROM,c
 20008  00232C  ECA4  F02D         	call	_readEEPROM	;wreg free
 20009  002330  D240               	goto	L53
 20010  002332                     l10653:
 20011                           
 20012                           ; BSR set to: 0
 20013                           ;main.c: 1673: rv = readEEPROM(0x7D);
 20014  002332  6A17               	clrf	?_readEEPROM+1,c
 20015  002334  0E7D               	movlw	125
 20016  002336  6E16               	movwf	?_readEEPROM,c
 20017  002338  ECA4  F02D         	call	_readEEPROM	;wreg free
 20018  00233C  D23A               	goto	L53
 20019  00233E                     l10655:
 20020                           
 20021                           ; BSR set to: 0
 20022                           ;main.c: 1678: rv = readEEPROM(0x7E);
 20023  00233E  6A17               	clrf	?_readEEPROM+1,c
 20024  002340  0E7E               	movlw	126
 20025  002342  6E16               	movwf	?_readEEPROM,c
 20026  002344  ECA4  F02D         	call	_readEEPROM	;wreg free
 20027  002348  D234               	goto	L53
 20028  00234A                     l10657:
 20029                           
 20030                           ; BSR set to: 0
 20031                           ;main.c: 1687: rv = readEEPROM(0x7F);
 20032  00234A  6A17               	clrf	?_readEEPROM+1,c
 20033  00234C  0E7F               	movlw	127
 20034  00234E  6E16               	movwf	?_readEEPROM,c
 20035  002350  ECA4  F02D         	call	_readEEPROM	;wreg free
 20036  002354  D22E               	goto	L53
 20037  002356                     l10659:
 20038                           
 20039                           ; BSR set to: 0
 20040                           ;main.c: 1692: rv = readEEPROM(0x80);
 20041  002356  6A17               	clrf	?_readEEPROM+1,c
 20042  002358  0E80               	movlw	128
 20043  00235A  6E16               	movwf	?_readEEPROM,c
 20044  00235C  ECA4  F02D         	call	_readEEPROM	;wreg free
 20045  002360  D228               	goto	L53
 20046  002362                     l10661:
 20047                           
 20048                           ; BSR set to: 0
 20049                           ;main.c: 1697: rv = readEEPROM(0x81);
 20050  002362  6A17               	clrf	?_readEEPROM+1,c
 20051  002364  0E81               	movlw	129
 20052  002366  6E16               	movwf	?_readEEPROM,c
 20053  002368  ECA4  F02D         	call	_readEEPROM	;wreg free
 20054  00236C  D222               	goto	L53
 20055  00236E                     l10663:
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;main.c: 1702: rv = readEEPROM(0x82);
 20059  00236E  6A17               	clrf	?_readEEPROM+1,c
 20060  002370  0E82               	movlw	130
 20061  002372  6E16               	movwf	?_readEEPROM,c
 20062  002374  ECA4  F02D         	call	_readEEPROM	;wreg free
 20063  002378  D21C               	goto	L53
 20064  00237A                     l10665:
 20065                           
 20066                           ; BSR set to: 0
 20067                           ;main.c: 1707: rv = readEEPROM(0x83);
 20068  00237A  6A17               	clrf	?_readEEPROM+1,c
 20069  00237C  0E83               	movlw	131
 20070  00237E  6E16               	movwf	?_readEEPROM,c
 20071  002380  ECA4  F02D         	call	_readEEPROM	;wreg free
 20072  002384  D216               	goto	L53
 20073  002386                     l10667:
 20074                           
 20075                           ; BSR set to: 0
 20076                           ;main.c: 1712: rv = readEEPROM(0x84);
 20077  002386  6A17               	clrf	?_readEEPROM+1,c
 20078  002388  0E84               	movlw	132
 20079  00238A  6E16               	movwf	?_readEEPROM,c
 20080  00238C  ECA4  F02D         	call	_readEEPROM	;wreg free
 20081  002390  D210               	goto	L53
 20082  002392                     l10669:
 20083                           
 20084                           ; BSR set to: 0
 20085                           ;main.c: 1717: rv = readEEPROM(0x85);
 20086  002392  6A17               	clrf	?_readEEPROM+1,c
 20087  002394  0E85               	movlw	133
 20088  002396  6E16               	movwf	?_readEEPROM,c
 20089  002398  ECA4  F02D         	call	_readEEPROM	;wreg free
 20090  00239C  D20A               	goto	L53
 20091  00239E                     l10671:
 20092                           
 20093                           ; BSR set to: 0
 20094                           ;main.c: 1722: rv = readEEPROM(0x86);
 20095  00239E  6A17               	clrf	?_readEEPROM+1,c
 20096  0023A0  0E86               	movlw	134
 20097  0023A2  6E16               	movwf	?_readEEPROM,c
 20098  0023A4  ECA4  F02D         	call	_readEEPROM	;wreg free
 20099  0023A8  D204               	goto	L53
 20100  0023AA                     l10673:
 20101                           
 20102                           ; BSR set to: 0
 20103                           ;main.c: 1727: rv = readEEPROM(0x87);
 20104  0023AA  6A17               	clrf	?_readEEPROM+1,c
 20105  0023AC  0E87               	movlw	135
 20106  0023AE  6E16               	movwf	?_readEEPROM,c
 20107  0023B0  ECA4  F02D         	call	_readEEPROM	;wreg free
 20108  0023B4  D1FE               	goto	L53
 20109  0023B6                     l10675:
 20110                           
 20111                           ; BSR set to: 0
 20112                           ;main.c: 1732: rv = readEEPROM(0x88);
 20113  0023B6  6A17               	clrf	?_readEEPROM+1,c
 20114  0023B8  0E88               	movlw	136
 20115  0023BA  6E16               	movwf	?_readEEPROM,c
 20116  0023BC  ECA4  F02D         	call	_readEEPROM	;wreg free
 20117  0023C0  D1F8               	goto	L53
 20118  0023C2                     l10677:
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;main.c: 1737: rv = readEEPROM(0x89);
 20122  0023C2  6A17               	clrf	?_readEEPROM+1,c
 20123  0023C4  0E89               	movlw	137
 20124  0023C6  6E16               	movwf	?_readEEPROM,c
 20125  0023C8  ECA4  F02D         	call	_readEEPROM	;wreg free
 20126  0023CC  D1F2               	goto	L53
 20127  0023CE                     l10679:
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;main.c: 1742: rv = readEEPROM(0x8A);
 20131  0023CE  6A17               	clrf	?_readEEPROM+1,c
 20132  0023D0  0E8A               	movlw	138
 20133  0023D2  6E16               	movwf	?_readEEPROM,c
 20134  0023D4  ECA4  F02D         	call	_readEEPROM	;wreg free
 20135  0023D8  D1EC               	goto	L53
 20136  0023DA                     l10681:
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;main.c: 1751: rv = readEEPROM(0x8B);
 20140  0023DA  6A17               	clrf	?_readEEPROM+1,c
 20141  0023DC  0E8B               	movlw	139
 20142  0023DE  6E16               	movwf	?_readEEPROM,c
 20143  0023E0  ECA4  F02D         	call	_readEEPROM	;wreg free
 20144  0023E4  D1E6               	goto	L53
 20145  0023E6                     l10683:
 20146                           
 20147                           ; BSR set to: 0
 20148                           ;main.c: 1756: rv = readEEPROM(0x8C);
 20149  0023E6  6A17               	clrf	?_readEEPROM+1,c
 20150  0023E8  0E8C               	movlw	140
 20151  0023EA  6E16               	movwf	?_readEEPROM,c
 20152  0023EC  ECA4  F02D         	call	_readEEPROM	;wreg free
 20153  0023F0  D1E0               	goto	L53
 20154  0023F2                     l10685:
 20155                           
 20156                           ; BSR set to: 0
 20157                           ;main.c: 1761: rv = readEEPROM(0x8D);
 20158  0023F2  6A17               	clrf	?_readEEPROM+1,c
 20159  0023F4  0E8D               	movlw	141
 20160  0023F6  6E16               	movwf	?_readEEPROM,c
 20161  0023F8  ECA4  F02D         	call	_readEEPROM	;wreg free
 20162  0023FC  D1DA               	goto	L53
 20163  0023FE                     l10687:
 20164                           
 20165                           ; BSR set to: 0
 20166                           ;main.c: 1766: rv = readEEPROM(0x8E);
 20167  0023FE  6A17               	clrf	?_readEEPROM+1,c
 20168  002400  0E8E               	movlw	142
 20169  002402  6E16               	movwf	?_readEEPROM,c
 20170  002404  ECA4  F02D         	call	_readEEPROM	;wreg free
 20171  002408  D1D4               	goto	L53
 20172  00240A                     l10689:
 20173                           
 20174                           ; BSR set to: 0
 20175                           ;main.c: 1771: rv = readEEPROM(0x8F);
 20176  00240A  6A17               	clrf	?_readEEPROM+1,c
 20177  00240C  0E8F               	movlw	143
 20178  00240E  6E16               	movwf	?_readEEPROM,c
 20179  002410  ECA4  F02D         	call	_readEEPROM	;wreg free
 20180  002414  D1CE               	goto	L53
 20181  002416                     l10691:
 20182                           
 20183                           ; BSR set to: 0
 20184                           ;main.c: 1776: rv = readEEPROM(0x90);
 20185  002416  6A17               	clrf	?_readEEPROM+1,c
 20186  002418  0E90               	movlw	144
 20187  00241A  6E16               	movwf	?_readEEPROM,c
 20188  00241C  ECA4  F02D         	call	_readEEPROM	;wreg free
 20189  002420  D1C8               	goto	L53
 20190  002422                     l10693:
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;main.c: 1781: rv = readEEPROM(0x91);
 20194  002422  6A17               	clrf	?_readEEPROM+1,c
 20195  002424  0E91               	movlw	145
 20196  002426  6E16               	movwf	?_readEEPROM,c
 20197  002428  ECA4  F02D         	call	_readEEPROM	;wreg free
 20198  00242C  D1C2               	goto	L53
 20199  00242E                     l10695:
 20200                           
 20201                           ; BSR set to: 0
 20202                           ;main.c: 1786: rv = readEEPROM(0x92);
 20203  00242E  6A17               	clrf	?_readEEPROM+1,c
 20204  002430  0E92               	movlw	146
 20205  002432  6E16               	movwf	?_readEEPROM,c
 20206  002434  ECA4  F02D         	call	_readEEPROM	;wreg free
 20207  002438  D1BC               	goto	L53
 20208  00243A                     l10697:
 20209                           
 20210                           ; BSR set to: 0
 20211                           ;main.c: 1791: rv = readEEPROM(0x93);
 20212  00243A  6A17               	clrf	?_readEEPROM+1,c
 20213  00243C  0E93               	movlw	147
 20214  00243E  6E16               	movwf	?_readEEPROM,c
 20215  002440  ECA4  F02D         	call	_readEEPROM	;wreg free
 20216  002444  D1B6               	goto	L53
 20217  002446                     l10699:
 20218                           
 20219                           ; BSR set to: 0
 20220                           ;main.c: 1796: rv = readEEPROM(0x94);
 20221  002446  6A17               	clrf	?_readEEPROM+1,c
 20222  002448  0E94               	movlw	148
 20223  00244A  6E16               	movwf	?_readEEPROM,c
 20224  00244C  ECA4  F02D         	call	_readEEPROM	;wreg free
 20225  002450  D1B0               	goto	L53
 20226  002452                     l10701:
 20227                           
 20228                           ; BSR set to: 0
 20229                           ;main.c: 1801: rv = readEEPROM(0x95);
 20230  002452  6A17               	clrf	?_readEEPROM+1,c
 20231  002454  0E95               	movlw	149
 20232  002456  6E16               	movwf	?_readEEPROM,c
 20233  002458  ECA4  F02D         	call	_readEEPROM	;wreg free
 20234  00245C  D1AA               	goto	L53
 20235  00245E                     l10703:
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;main.c: 1806: rv = readEEPROM(0x96);
 20239  00245E  6A17               	clrf	?_readEEPROM+1,c
 20240  002460  0E96               	movlw	150
 20241  002462  6E16               	movwf	?_readEEPROM,c
 20242  002464  ECA4  F02D         	call	_readEEPROM	;wreg free
 20243  002468  D1A4               	goto	L53
 20244  00246A                     l10705:
 20245                           
 20246                           ; BSR set to: 0
 20247                           ;main.c: 1816: rv = readEEPROM(0x97);
 20248  00246A  6A17               	clrf	?_readEEPROM+1,c
 20249  00246C  0E97               	movlw	151
 20250  00246E  6E16               	movwf	?_readEEPROM,c
 20251  002470  ECA4  F02D         	call	_readEEPROM	;wreg free
 20252  002474  D19E               	goto	L53
 20253  002476                     l10707:
 20254                           
 20255                           ; BSR set to: 0
 20256                           ;main.c: 1821: rv = readEEPROM(0x98);
 20257  002476  6A17               	clrf	?_readEEPROM+1,c
 20258  002478  0E98               	movlw	152
 20259  00247A  6E16               	movwf	?_readEEPROM,c
 20260  00247C  ECA4  F02D         	call	_readEEPROM	;wreg free
 20261  002480  D198               	goto	L53
 20262  002482                     l10709:
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;main.c: 1826: rv = readEEPROM(0x99);
 20266  002482  6A17               	clrf	?_readEEPROM+1,c
 20267  002484  0E99               	movlw	153
 20268  002486  6E16               	movwf	?_readEEPROM,c
 20269  002488  ECA4  F02D         	call	_readEEPROM	;wreg free
 20270  00248C  D192               	goto	L53
 20271  00248E                     l10711:
 20272                           
 20273                           ; BSR set to: 0
 20274                           ;main.c: 1831: rv = readEEPROM(0x9A);
 20275  00248E  6A17               	clrf	?_readEEPROM+1,c
 20276  002490  0E9A               	movlw	154
 20277  002492  6E16               	movwf	?_readEEPROM,c
 20278  002494  ECA4  F02D         	call	_readEEPROM	;wreg free
 20279  002498  D18C               	goto	L53
 20280  00249A                     l10713:
 20281                           
 20282                           ; BSR set to: 0
 20283                           ;main.c: 1836: rv = readEEPROM(0x9B);
 20284  00249A  6A17               	clrf	?_readEEPROM+1,c
 20285  00249C  0E9B               	movlw	155
 20286  00249E  6E16               	movwf	?_readEEPROM,c
 20287  0024A0  ECA4  F02D         	call	_readEEPROM	;wreg free
 20288  0024A4  D186               	goto	L53
 20289  0024A6                     l10715:
 20290                           
 20291                           ; BSR set to: 0
 20292                           ;main.c: 1841: rv = readEEPROM(0x9C);
 20293  0024A6  6A17               	clrf	?_readEEPROM+1,c
 20294  0024A8  0E9C               	movlw	156
 20295  0024AA  6E16               	movwf	?_readEEPROM,c
 20296  0024AC  ECA4  F02D         	call	_readEEPROM	;wreg free
 20297  0024B0  D180               	goto	L53
 20298  0024B2                     l409:
 20299                           
 20300                           ; BSR set to: 0
 20301                           ;main.c: 1846: rv = 0;
 20302  0024B2  6A1C               	clrf	vscp_readAppReg@rv,c
 20303                           
 20304                           ;main.c: 1847: break;
 20305  0024B4  D17F               	goto	l10747
 20306  0024B6                     l10717:
 20307                           
 20308                           ; BSR set to: 0
 20309                           ;main.c: 1856: rv = readEEPROM(0xF2);
 20310  0024B6  6A17               	clrf	?_readEEPROM+1,c
 20311  0024B8  0EF2               	movlw	242
 20312  0024BA  6E16               	movwf	?_readEEPROM,c
 20313  0024BC  ECA4  F02D         	call	_readEEPROM	;wreg free
 20314  0024C0  D178               	goto	L53
 20315  0024C2                     l10719:
 20316                           
 20317                           ; BSR set to: 0
 20318                           ;main.c: 1861: rv = readEEPROM(0xF3);
 20319  0024C2  6A17               	clrf	?_readEEPROM+1,c
 20320  0024C4  0EF3               	movlw	243
 20321  0024C6  6E16               	movwf	?_readEEPROM,c
 20322  0024C8  ECA4  F02D         	call	_readEEPROM	;wreg free
 20323  0024CC  D172               	goto	L53
 20324  0024CE                     l10723:
 20325                           
 20326                           ; BSR set to: 0
 20327  0024CE  501B               	movf	vscp_readAppReg@reg,w,c
 20328                           
 20329                           ; Switch size 1, requested type "speed"
 20330                           ; Number of cases is 108, Range of values is 0 to 119
 20331                           ; switch strategies available:
 20332                           ; Name         Instructions Cycles
 20333                           ; simple_byte          325   163 (average)
 20334                           ;	Chosen strategy is simple_byte
 20335  0024D0  E101 D5A9          	bz	l10521
 20336  0024D4  0A01               	xorlw	1	; case 1
 20337  0024D6  E101 D5AC          	bz	l10523
 20338  0024DA  0A03               	xorlw	3	; case 2
 20339  0024DC  E101 D5AF          	bz	l10525
 20340  0024E0  0A01               	xorlw	1	; case 3
 20341  0024E2  E101 D5B2          	bz	l10527
 20342  0024E6  0A07               	xorlw	7	; case 4
 20343  0024E8  E101 D5B5          	bz	l10529
 20344  0024EC  0A01               	xorlw	1	; case 5
 20345  0024EE  E101 D5B8          	bz	l10531
 20346  0024F2  0A03               	xorlw	3	; case 6
 20347  0024F4  E101 D5BB          	bz	l10533
 20348  0024F8  0A01               	xorlw	1	; case 7
 20349  0024FA  E101 D5BE          	bz	l10535
 20350  0024FE  0A0F               	xorlw	15	; case 8
 20351  002500  E101 D5C1          	bz	l10537
 20352  002504  0A01               	xorlw	1	; case 9
 20353  002506  E101 D5C0          	bz	l314
 20354  00250A  0A03               	xorlw	3	; case 10
 20355  00250C  E101 D5C0          	bz	l10539
 20356  002510  0A01               	xorlw	1	; case 11
 20357  002512  E101 D5BF          	bz	l316
 20358  002516  0A07               	xorlw	7	; case 12
 20359  002518  E101 D5BF          	bz	l10541
 20360  00251C  0A01               	xorlw	1	; case 13
 20361  00251E  E101 D5BE          	bz	l318
 20362  002522  0A03               	xorlw	3	; case 14
 20363  002524  E101 D5BE          	bz	l10543
 20364  002528  0A01               	xorlw	1	; case 15
 20365  00252A  E101 D5BD          	bz	l320
 20366  00252E  0A1F               	xorlw	31	; case 16
 20367  002530  E101 D5BD          	bz	l10545
 20368  002534  0A01               	xorlw	1	; case 17
 20369  002536  E101 D5BC          	bz	l322
 20370  00253A  0A03               	xorlw	3	; case 18
 20371  00253C  E101 D5BC          	bz	l10547
 20372  002540  0A01               	xorlw	1	; case 19
 20373  002542  E101 D5BB          	bz	l324
 20374  002546  0A07               	xorlw	7	; case 20
 20375  002548  E101 D5BB          	bz	l10549
 20376  00254C  0A01               	xorlw	1	; case 21
 20377  00254E  E101 D5BE          	bz	l10551
 20378  002552  0A03               	xorlw	3	; case 22
 20379  002554  E101 D5C1          	bz	l10553
 20380  002558  0A01               	xorlw	1	; case 23
 20381  00255A  E101 D5C4          	bz	l10555
 20382  00255E  0A0F               	xorlw	15	; case 24
 20383  002560  E101 D5C7          	bz	l10557
 20384  002564  0A01               	xorlw	1	; case 25
 20385  002566  E101 D5CA          	bz	l10559
 20386  00256A  0A3F               	xorlw	63	; case 38
 20387  00256C  E101 D5CD          	bz	l10561
 20388  002570  0A01               	xorlw	1	; case 39
 20389  002572  E101 D5D0          	bz	l10563
 20390  002576  0A0F               	xorlw	15	; case 40
 20391  002578  E101 D5D3          	bz	l10565
 20392  00257C  0A01               	xorlw	1	; case 41
 20393  00257E  E101 D5D6          	bz	l10567
 20394  002582  0A03               	xorlw	3	; case 42
 20395  002584  E101 D5D9          	bz	l10569
 20396  002588  0A01               	xorlw	1	; case 43
 20397  00258A  E101 D5DC          	bz	l10571
 20398  00258E  0A07               	xorlw	7	; case 44
 20399  002590  E101 D5DF          	bz	l10573
 20400  002594  0A01               	xorlw	1	; case 45
 20401  002596  E101 D5E2          	bz	l10575
 20402  00259A  0A03               	xorlw	3	; case 46
 20403  00259C  E101 D5E5          	bz	l10577
 20404  0025A0  0A01               	xorlw	1	; case 47
 20405  0025A2  E101 D5E8          	bz	l10579
 20406  0025A6  0A1F               	xorlw	31	; case 48
 20407  0025A8  E101 D5EB          	bz	l10581
 20408  0025AC  0A01               	xorlw	1	; case 49
 20409  0025AE  E101 D5EE          	bz	l10583
 20410  0025B2  0A03               	xorlw	3	; case 50
 20411  0025B4  E101 D5F1          	bz	l10585
 20412  0025B8  0A01               	xorlw	1	; case 51
 20413  0025BA  E101 D5F4          	bz	l10587
 20414  0025BE  0A07               	xorlw	7	; case 52
 20415  0025C0  E101 D5F7          	bz	l10589
 20416  0025C4  0A01               	xorlw	1	; case 53
 20417  0025C6  E101 D5FA          	bz	l10591
 20418  0025CA  0A03               	xorlw	3	; case 54
 20419  0025CC  E101 D5FD          	bz	l10593
 20420  0025D0  0A01               	xorlw	1	; case 55
 20421  0025D2  E101 D600          	bz	l10595
 20422  0025D6  0A0F               	xorlw	15	; case 56
 20423  0025D8  E101 D603          	bz	l10597
 20424  0025DC  0A01               	xorlw	1	; case 57
 20425  0025DE  E101 D606          	bz	l10599
 20426  0025E2  0A03               	xorlw	3	; case 58
 20427  0025E4  E101 D609          	bz	l10601
 20428  0025E8  0A01               	xorlw	1	; case 59
 20429  0025EA  E101 D60C          	bz	l10603
 20430  0025EE  0A07               	xorlw	7	; case 60
 20431  0025F0  E101 D60F          	bz	l10605
 20432  0025F4  0A01               	xorlw	1	; case 61
 20433  0025F6  E101 D612          	bz	l10607
 20434  0025FA  0A03               	xorlw	3	; case 62
 20435  0025FC  E101 D615          	bz	l10609
 20436  002600  0A01               	xorlw	1	; case 63
 20437  002602  E101 D618          	bz	l10611
 20438  002606  0A7F               	xorlw	127	; case 64
 20439  002608  E101 D61B          	bz	l10613
 20440  00260C  0A01               	xorlw	1	; case 65
 20441  00260E  E101 D61E          	bz	l10615
 20442  002612  0A03               	xorlw	3	; case 66
 20443  002614  E101 D621          	bz	l10617
 20444  002618  0A01               	xorlw	1	; case 67
 20445  00261A  E101 D624          	bz	l10619
 20446  00261E  0A07               	xorlw	7	; case 68
 20447  002620  E101 D627          	bz	l10621
 20448  002624  0A01               	xorlw	1	; case 69
 20449  002626  E101 D62A          	bz	l10623
 20450  00262A  0A03               	xorlw	3	; case 70
 20451  00262C  E101 D62D          	bz	l10625
 20452  002630  0A01               	xorlw	1	; case 71
 20453  002632  E101 D630          	bz	l10627
 20454  002636  0A0F               	xorlw	15	; case 72
 20455  002638  E101 D633          	bz	l10629
 20456  00263C  0A01               	xorlw	1	; case 73
 20457  00263E  E101 D636          	bz	l10631
 20458  002642  0A03               	xorlw	3	; case 74
 20459  002644  E101 D639          	bz	l10633
 20460  002648  0A01               	xorlw	1	; case 75
 20461  00264A  E101 D63C          	bz	l10635
 20462  00264E  0A07               	xorlw	7	; case 76
 20463  002650  E101 D63F          	bz	l10637
 20464  002654  0A01               	xorlw	1	; case 77
 20465  002656  E101 D642          	bz	l10639
 20466  00265A  0A03               	xorlw	3	; case 78
 20467  00265C  E101 D645          	bz	l10641
 20468  002660  0A01               	xorlw	1	; case 79
 20469  002662  E101 D648          	bz	l10643
 20470  002666  0A1F               	xorlw	31	; case 80
 20471  002668  E101 D64B          	bz	l10645
 20472  00266C  0A01               	xorlw	1	; case 81
 20473  00266E  E101 D64E          	bz	l10647
 20474  002672  0A03               	xorlw	3	; case 82
 20475  002674  E101 D651          	bz	l10649
 20476  002678  0A01               	xorlw	1	; case 83
 20477  00267A  E101 D654          	bz	l10651
 20478  00267E  0A07               	xorlw	7	; case 84
 20479  002680  E101 D657          	bz	l10653
 20480  002684  0A01               	xorlw	1	; case 85
 20481  002686  E101 D65A          	bz	l10655
 20482  00268A  0A03               	xorlw	3	; case 86
 20483  00268C  E101 D65D          	bz	l10657
 20484  002690  0A01               	xorlw	1	; case 87
 20485  002692  E101 D660          	bz	l10659
 20486  002696  0A0F               	xorlw	15	; case 88
 20487  002698  E101 D663          	bz	l10661
 20488  00269C  0A01               	xorlw	1	; case 89
 20489  00269E  E101 D666          	bz	l10663
 20490  0026A2  0A03               	xorlw	3	; case 90
 20491  0026A4  E101 D669          	bz	l10665
 20492  0026A8  0A01               	xorlw	1	; case 91
 20493  0026AA  E101 D66C          	bz	l10667
 20494  0026AE  0A07               	xorlw	7	; case 92
 20495  0026B0  E101 D66F          	bz	l10669
 20496  0026B4  0A01               	xorlw	1	; case 93
 20497  0026B6  E101 D672          	bz	l10671
 20498  0026BA  0A03               	xorlw	3	; case 94
 20499  0026BC  E101 D675          	bz	l10673
 20500  0026C0  0A01               	xorlw	1	; case 95
 20501  0026C2  E101 D678          	bz	l10675
 20502  0026C6  0A3F               	xorlw	63	; case 96
 20503  0026C8  E101 D67B          	bz	l10677
 20504  0026CC  0A01               	xorlw	1	; case 97
 20505  0026CE  E101 D67E          	bz	l10679
 20506  0026D2  0A03               	xorlw	3	; case 98
 20507  0026D4  E101 D681          	bz	l10681
 20508  0026D8  0A01               	xorlw	1	; case 99
 20509  0026DA  E101 D684          	bz	l10683
 20510  0026DE  0A07               	xorlw	7	; case 100
 20511  0026E0  E101 D687          	bz	l10685
 20512  0026E4  0A01               	xorlw	1	; case 101
 20513  0026E6  E101 D68A          	bz	l10687
 20514  0026EA  0A03               	xorlw	3	; case 102
 20515  0026EC  E101 D68D          	bz	l10689
 20516  0026F0  0A01               	xorlw	1	; case 103
 20517  0026F2  E101 D690          	bz	l10691
 20518  0026F6  0A0F               	xorlw	15	; case 104
 20519  0026F8  E101 D693          	bz	l10693
 20520  0026FC  0A01               	xorlw	1	; case 105
 20521  0026FE  E101 D696          	bz	l10695
 20522  002702  0A03               	xorlw	3	; case 106
 20523  002704  E101 D699          	bz	l10697
 20524  002708  0A01               	xorlw	1	; case 107
 20525  00270A  E101 D69C          	bz	l10699
 20526  00270E  0A07               	xorlw	7	; case 108
 20527  002710  E101 D69F          	bz	l10701
 20528  002714  0A01               	xorlw	1	; case 109
 20529  002716  E101 D6A2          	bz	l10703
 20530  00271A  0A03               	xorlw	3	; case 110
 20531  00271C  E101 D6A5          	bz	l10705
 20532  002720  0A01               	xorlw	1	; case 111
 20533  002722  E101 D6A8          	bz	l10707
 20534  002726  0A1F               	xorlw	31	; case 112
 20535  002728  E101 D6AB          	bz	l10709
 20536  00272C  0A01               	xorlw	1	; case 113
 20537  00272E  E101 D6AE          	bz	l10711
 20538  002732  0A03               	xorlw	3	; case 114
 20539  002734  E101 D6B1          	bz	l10713
 20540  002738  0A01               	xorlw	1	; case 115
 20541  00273A  E101 D6B4          	bz	l10715
 20542  00273E  0A07               	xorlw	7	; case 116
 20543  002740  E101 D6B7          	bz	l409
 20544  002744  0A01               	xorlw	1	; case 117
 20545  002746  E101 D6B4          	bz	l409
 20546  00274A  0A03               	xorlw	3	; case 118
 20547  00274C  E101 D6B3          	bz	l10717
 20548  002750  0A01               	xorlw	1	; case 119
 20549  002752  E101 D6B6          	bz	l10719
 20550  002756  D6AD               	goto	l409
 20551  002758                     l10725:
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;main.c: 1869: else if (1 == vscp_page_select) {
 20555  002758  0446               	decf	_vscp_page_select,w,c
 20556  00275A  1047               	iorwf	_vscp_page_select+1,w,c
 20557  00275C  E12B               	bnz	l10747
 20558                           
 20559                           ; BSR set to: 0
 20560                           ;main.c: 1872: if (reg < 72) {
 20561  00275E  0E48               	movlw	72
 20562  002760  601B               	cpfslt	vscp_readAppReg@reg,c
 20563  002762  D009               	goto	l10731
 20564                           
 20565                           ; BSR set to: 0
 20566                           ;main.c: 1873: rv = readEEPROM(0xAA + reg ) ;
 20567  002764  0EAA               	movlw	170
 20568  002766  241B               	addwf	vscp_readAppReg@reg,w,c
 20569  002768  6E16               	movwf	?_readEEPROM,c
 20570  00276A  6A17               	clrf	?_readEEPROM+1,c
 20571  00276C  0E00               	movlw	0
 20572  00276E  2217               	addwfc	?_readEEPROM+1,f,c
 20573  002770  ECA4  F02D         	call	_readEEPROM	;wreg free
 20574  002774  D01E               	goto	L53
 20575  002776                     l10731:
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;main.c: 1876: else if (reg < 84) {
 20579  002776  0E54               	movlw	84
 20580  002778  601B               	cpfslt	vscp_readAppReg@reg,c
 20581  00277A  D010               	goto	l10743
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;main.c: 1878: uint8_t pos = reg - 72;
 20585  00277C  501B               	movf	vscp_readAppReg@reg,w,c
 20586  00277E  0FB8               	addlw	184
 20587  002780  6E1A               	movwf	vscp_readAppReg@pos,c
 20588                           
 20589                           ; BSR set to: 0
 20590                           ;main.c: 1879: if ( pos % 2 ) {
 20591  002782  A01A               	btfss	vscp_readAppReg@pos,0,c
 20592  002784  D002               	goto	l10739
 20593                           
 20594                           ; BSR set to: 0
 20595                           ;main.c: 1880: pos--;
 20596  002786  061A               	decf	vscp_readAppReg@pos,f,c
 20597                           
 20598                           ;main.c: 1881: }
 20599  002788  D001               	goto	l10741
 20600  00278A                     l10739:
 20601                           
 20602                           ; BSR set to: 0
 20603                           ;main.c: 1882: else {
 20604                           ;main.c: 1883: pos++;
 20605  00278A  2A1A               	incf	vscp_readAppReg@pos,f,c
 20606  00278C                     l10741:
 20607                           
 20608                           ; BSR set to: 0
 20609                           ;main.c: 1884: }
 20610                           ;main.c: 1885: rv = adc[ pos ];
 20611  00278C  0E82               	movlw	low _adc
 20612  00278E  241A               	addwf	vscp_readAppReg@pos,w,c
 20613  002790  6ED9               	movwf	fsr2l,c
 20614  002792  6ADA               	clrf	fsr2h,c
 20615  002794  0E01               	movlw	high _adc
 20616  002796  22DA               	addwfc	fsr2h,f,c
 20617  002798  50DF               	movf	indf2,w,c
 20618  00279A  D00B               	goto	L53
 20619  00279C                     l10743:
 20620                           
 20621                           ; BSR set to: 0
 20622                           ;main.c: 1888: else if (reg < 98) {
 20623  00279C  0E62               	movlw	98
 20624  00279E  601B               	cpfslt	vscp_readAppReg@reg,c
 20625  0027A0  D009               	goto	l10747
 20626                           
 20627                           ; BSR set to: 0
 20628                           ;main.c: 1889: rv = readEEPROM( 0x9E + reg - 84 ) ;
 20629  0027A2  0E4A               	movlw	74
 20630  0027A4  241B               	addwf	vscp_readAppReg@reg,w,c
 20631  0027A6  6E16               	movwf	?_readEEPROM,c
 20632  0027A8  6A17               	clrf	?_readEEPROM+1,c
 20633  0027AA  0E00               	movlw	0
 20634  0027AC  2217               	addwfc	?_readEEPROM+1,f,c
 20635  0027AE  ECA4  F02D         	call	_readEEPROM	;wreg free
 20636  0027B2                     L53:
 20637  0027B2  6E1C               	movwf	vscp_readAppReg@rv,c
 20638  0027B4                     l10747:
 20639                           
 20640                           ;main.c: 1890: }
 20641                           ;main.c: 1891: }
 20642                           ;main.c: 1893: return rv;
 20643  0027B4  501C               	movf	vscp_readAppReg@rv,w,c
 20644  0027B6  0012               	return	
 20645  0027B8                     __end_of_vscp_readAppReg:
 20646                           	opt stack 0
 20647                           tblptru	equ	0xFF8
 20648                           tblptrh	equ	0xFF7
 20649                           tblptrl	equ	0xFF6
 20650                           tablat	equ	0xFF5
 20651                           prodh	equ	0xFF4
 20652                           prodl	equ	0xFF3
 20653                           intcon	equ	0xFF2
 20654                           postinc0	equ	0xFEE
 20655                           wreg	equ	0xFE8
 20656                           indf1	equ	0xFE7
 20657                           postdec1	equ	0xFE5
 20658                           fsr1h	equ	0xFE2
 20659                           fsr1l	equ	0xFE1
 20660                           indf2	equ	0xFDF
 20661                           postinc2	equ	0xFDE
 20662                           postdec2	equ	0xFDD
 20663                           plusw2	equ	0xFDB
 20664                           fsr2h	equ	0xFDA
 20665                           fsr2l	equ	0xFD9
 20666                           status	equ	0xFD8
 20667                           
 20668 ;; *************** function _interrupt_at_low_vector *****************
 20669 ;; Defined at:
 20670 ;;		line 134 in file "../main.c"
 20671 ;; Parameters:    Size  Location     Type
 20672 ;;		None
 20673 ;; Auto vars:     Size  Location     Type
 20674 ;;		None
 20675 ;; Return value:  Size  Location     Type
 20676 ;;		None               void
 20677 ;; Registers used:
 20678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20679 ;; Tracked objects:
 20680 ;;		On entry : 0/0
 20681 ;;		On exit  : 0/0
 20682 ;;		Unchanged: 0/0
 20683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20684 ;;      Params:         0       0       0       0       0       0       0
 20685 ;;      Locals:         0       0       0       0       0       0       0
 20686 ;;      Temps:          9       0       0       0       0       0       0
 20687 ;;      Totals:         9       0       0       0       0       0       0
 20688 ;;Total ram usage:        9 bytes
 20689 ;; Hardware stack levels used:    1
 20690 ;; Hardware stack levels required when called:    1
 20691 ;; This function calls:
 20692 ;;		i1_ConvertADC
 20693 ;;		i1_WriteTimer0
 20694 ;; This function is called by:
 20695 ;;		Interrupt level 1
 20696 ;; This function uses a non-reentrant model
 20697 ;;
 20698                           
 20699                           	psect	intcodelo
 20700  000818                     __pintcodelo:
 20701                           	opt stack 0
 20702  000818                     _interrupt_at_low_vector:
 20703                           	opt stack 22
 20704                           
 20705                           ;incstack = 0
 20706  000818  CFD8 F007          	movff	status,??_interrupt_at_low_vector+2
 20707  00081C  CFE8 F008          	movff	wreg,??_interrupt_at_low_vector+3
 20708  000820  CFE0 F009          	movff	bsr,??_interrupt_at_low_vector+4
 20709  000824  CFD9 F00A          	movff	fsr2l,??_interrupt_at_low_vector+5
 20710  000828  CFDA F00B          	movff	fsr2h,??_interrupt_at_low_vector+6
 20711  00082C  CFF3 F00C          	movff	prodl,??_interrupt_at_low_vector+7
 20712  000830  CFF4 F00D          	movff	prodh,??_interrupt_at_low_vector+8
 20713  000834                     
 20714                           ;main.c: 136: if (INTCONbits.TMR0IF) {
 20715  000834  A4F2               	btfss	intcon,2,c	;volatile
 20716  000836  D001               	goto	i1u714_21
 20717  000838  D001               	goto	i1u714_20
 20718  00083A                     i1u714_21:
 20719  00083A  D045               	goto	i1l9223
 20720  00083C                     i1u714_20:
 20721  00083C                     
 20722                           ;main.c: 139: WriteTimer0(0xfb1d);
 20723  00083C  0EFB               	movlw	251
 20724  00083E  6E02               	movwf	?i1_WriteTimer0+1,c
 20725  000840  0E1D               	movlw	29
 20726  000842  6E01               	movwf	?i1_WriteTimer0,c
 20727  000844  ECD2  F02D         	call	i1_WriteTimer0	;wreg free
 20728  000848                     
 20729                           ;main.c: 141: vscp_timer++;
 20730  000848  0100               	movlb	0	; () banked
 20731  00084A  4BBB               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 20732  00084C  2BBC               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 20733  00084E                     
 20734                           ; BSR set to: 0
 20735                           ;main.c: 142: vscp_configtimer++;
 20736  00084E  4BB9               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 20737  000850  2BBA               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 20738  000852                     
 20739                           ; BSR set to: 0
 20740                           ;main.c: 143: measurement_clock++;
 20741  000852  0E01               	movlw	1
 20742  000854  27AF               	addwf	_measurement_clock& (0+255),f,b	;volatile
 20743  000856  0E00               	movlw	0
 20744  000858  23B0               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 20745  00085A  0E00               	movlw	0
 20746  00085C  23B1               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 20747  00085E  0E00               	movlw	0
 20748  000860  23B2               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 20749  000862                     
 20750                           ; BSR set to: 0
 20751                           ;main.c: 144: timeout_clock++;
 20752  000862  0E01               	movlw	1
 20753  000864  27B3               	addwf	_timeout_clock& (0+255),f,b	;volatile
 20754  000866  0E00               	movlw	0
 20755  000868  23B4               	addwfc	(_timeout_clock+1)& (0+255),f,b	;volatile
 20756  00086A  0E00               	movlw	0
 20757  00086C  23B5               	addwfc	(_timeout_clock+2)& (0+255),f,b	;volatile
 20758  00086E  0E00               	movlw	0
 20759  000870  23B6               	addwfc	(_timeout_clock+3)& (0+255),f,b	;volatile
 20760  000872                     
 20761                           ; BSR set to: 0
 20762                           ;main.c: 145: sendTimer++;
 20763  000872  4BB7               	infsnz	_sendTimer& (0+255),f,b	;volatile
 20764  000874  2BB8               	incf	(_sendTimer+1)& (0+255),f,b	;volatile
 20765  000876                     
 20766                           ; BSR set to: 0
 20767                           ;main.c: 148: if (!(PORTC & 0x01)) {
 20768  000876  B082               	btfsc	3970,0,c	;volatile
 20769  000878  D001               	goto	i1u715_21
 20770  00087A  D001               	goto	i1u715_20
 20771  00087C                     i1u715_21:
 20772  00087C  D002               	goto	i1l140
 20773  00087E                     i1u715_20:
 20774  00087E                     
 20775                           ; BSR set to: 0
 20776                           ;main.c: 150: vscp_initbtncnt++;
 20777  00087E  2BC2               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 20778                           
 20779                           ;main.c: 151: }
 20780  000880  D001               	goto	i1l9197
 20781  000882                     i1l140:
 20782                           
 20783                           ; BSR set to: 0
 20784                           ;main.c: 152: else {
 20785                           ;main.c: 153: vscp_initbtncnt = 0;
 20786  000882  6BC2               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 20787  000884                     i1l9197:
 20788                           
 20789                           ; BSR set to: 0
 20790                           ;main.c: 154: }
 20791                           ;main.c: 157: vscp_statuscnt++;
 20792  000884  2A52               	incf	_vscp_statuscnt,f,c	;volatile
 20793  000886                     
 20794                           ; BSR set to: 0
 20795                           ;main.c: 158: if ( ( 0x02 ==
 20796                           ;main.c: 159: vscp_initledfunc) && (vscp_statuscnt > 100)) {
 20797  000886  504C               	movf	_vscp_initledfunc,w,c
 20798  000888  0A02               	xorlw	2
 20799  00088A  A4D8               	btfss	status,2,c
 20800  00088C  D001               	goto	i1u716_21
 20801  00088E  D001               	goto	i1u716_20
 20802  000890                     i1u716_21:
 20803  000890  D00E               	goto	i1l9211
 20804  000892                     i1u716_20:
 20805  000892                     
 20806                           ; BSR set to: 0
 20807  000892  0E64               	movlw	100
 20808  000894  6452               	cpfsgt	_vscp_statuscnt,c	;volatile
 20809  000896  D001               	goto	i1u717_21
 20810  000898  D001               	goto	i1u717_20
 20811  00089A                     i1u717_21:
 20812  00089A  D009               	goto	i1l9211
 20813  00089C                     i1u717_20:
 20814  00089C                     
 20815                           ; BSR set to: 0
 20816                           ;main.c: 160: if ( PORTC & 0x02 ) {
 20817  00089C  A282               	btfss	3970,1,c	;volatile
 20818  00089E  D001               	goto	i1u718_21
 20819  0008A0  D001               	goto	i1u718_20
 20820  0008A2                     i1u718_21:
 20821  0008A2  D002               	goto	i1l9207
 20822  0008A4                     i1u718_20:
 20823  0008A4                     i1l9205:
 20824                           
 20825                           ; BSR set to: 0
 20826                           ;main.c: 161: PORTC &= ~0x02;
 20827  0008A4  9282               	bcf	3970,1,c	;volatile
 20828                           
 20829                           ;main.c: 162: }
 20830  0008A6  D001               	goto	i1l9209
 20831  0008A8                     i1l9207:
 20832                           
 20833                           ; BSR set to: 0
 20834                           ;main.c: 163: else {
 20835                           ;main.c: 164: PORTC |= 0x02;
 20836  0008A8  8282               	bsf	3970,1,c	;volatile
 20837  0008AA                     i1l9209:
 20838                           
 20839                           ; BSR set to: 0
 20840                           ;main.c: 165: }
 20841                           ;main.c: 166: vscp_statuscnt = 0;
 20842  0008AA  6A52               	clrf	_vscp_statuscnt,c	;volatile
 20843                           
 20844                           ;main.c: 167: }
 20845  0008AC  D00B               	goto	i1l9221
 20846  0008AE                     i1l9211:
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;main.c: 168: else if (0x01 == vscp_initledfunc) {
 20850  0008AE  044C               	decf	_vscp_initledfunc,w,c
 20851  0008B0  A4D8               	btfss	status,2,c
 20852  0008B2  D001               	goto	i1u719_21
 20853  0008B4  D001               	goto	i1u719_20
 20854  0008B6                     i1u719_21:
 20855  0008B6  D001               	goto	i1l146
 20856  0008B8                     i1u719_20:
 20857  0008B8  D7F7               	goto	i1l9207
 20858  0008BA                     i1l146:
 20859                           
 20860                           ; BSR set to: 0
 20861                           ;main.c: 172: else if (0x00 == vscp_initledfunc) {
 20862  0008BA  664C               	tstfsz	_vscp_initledfunc,c
 20863  0008BC  D001               	goto	i1u720_21
 20864  0008BE  D001               	goto	i1u720_20
 20865  0008C0                     i1u720_21:
 20866  0008C0  D001               	goto	i1l9221
 20867  0008C2                     i1u720_20:
 20868  0008C2  D7F0               	goto	i1l9205
 20869  0008C4                     i1l9221:
 20870                           
 20871                           ; BSR set to: 0
 20872                           ;main.c: 175: }
 20873                           ;main.c: 177: INTCONbits.TMR0IF = 0;
 20874  0008C4  94F2               	bcf	intcon,2,c	;volatile
 20875  0008C6                     i1l9223:
 20876                           
 20877                           ;main.c: 179: }
 20878                           ;main.c: 182: if ( PIR1bits.ADIF ) {
 20879  0008C6  AC9E               	btfss	3998,6,c	;volatile
 20880  0008C8  D001               	goto	i1u721_21
 20881  0008CA  D001               	goto	i1u721_20
 20882  0008CC                     i1u721_21:
 20883  0008CC  D0E5               	goto	i1l166
 20884  0008CE                     i1u721_20:
 20885  0008CE  D0C4               	goto	i1l9285
 20886  0008D0                     i1l9227:
 20887                           
 20888                           ;main.c: 188: adc[(12 * adc_series_counter) + 0] = ADRESH;
 20889  0008D0  5049               	movf	_adc_series_counter,w,c
 20890  0008D2  0D0C               	mullw	12
 20891  0008D4  0E82               	movlw	low _adc
 20892  0008D6  24F3               	addwf	prodl,w,c
 20893  0008D8  6ED9               	movwf	fsr2l,c
 20894  0008DA  0E01               	movlw	high _adc
 20895  0008DC  20F4               	addwfc	prodh,w,c
 20896  0008DE  6EDA               	movwf	fsr2h,c
 20897  0008E0  CFC4 FFDF          	movff	4036,indf2	;volatile
 20898                           
 20899                           ;main.c: 189: adc[(12 * adc_series_counter) + 1] = ADRESL;
 20900  0008E4  5049               	movf	_adc_series_counter,w,c
 20901  0008E6  0D0C               	mullw	12
 20902  0008E8  0E83               	movlw	low (_adc+1)
 20903  0008EA  24F3               	addwf	prodl,w,c
 20904  0008EC  6ED9               	movwf	fsr2l,c
 20905  0008EE  0E01               	movlw	high (_adc+1)
 20906  0008F0  20F4               	addwfc	prodh,w,c
 20907  0008F2  6EDA               	movwf	fsr2h,c
 20908  0008F4  CFC3 FFDF          	movff	4035,indf2	;volatile
 20909  0008F8                     
 20910                           ;main.c: 191: ADCON0 = (2<<2) + 1;
 20911  0008F8  0E09               	movlw	9
 20912  0008FA  6EC2               	movwf	4034,c	;volatile
 20913  0008FC                     
 20914                           ;main.c: 195: if ((80 - 1) == adc_series_counter) {
 20915  0008FC  5049               	movf	_adc_series_counter,w,c
 20916  0008FE  0A4F               	xorlw	79
 20917  000900  A4D8               	btfss	status,2,c
 20918  000902  D001               	goto	i1u722_21
 20919  000904  D001               	goto	i1u722_20
 20920  000906                     i1u722_21:
 20921  000906  D0C5               	goto	i1l9287
 20922  000908                     i1u722_20:
 20923  000908                     
 20924                           ;main.c: 196: adc_conversion_flags |= 1;
 20925  000908  0100               	movlb	0	; () banked
 20926  00090A  81BD               	bsf	_adc_conversion_flags& (0+255),0,b
 20927  00090C  D0C2               	goto	i1l9287
 20928  00090E                     i1l9235:
 20929                           
 20930                           ;main.c: 202: adc[(12 * adc_series_counter) + 2] = ADRESH;
 20931  00090E  5049               	movf	_adc_series_counter,w,c
 20932  000910  0D0C               	mullw	12
 20933  000912  0E84               	movlw	low (_adc+2)
 20934  000914  24F3               	addwf	prodl,w,c
 20935  000916  6ED9               	movwf	fsr2l,c
 20936  000918  0E01               	movlw	high (_adc+2)
 20937  00091A  20F4               	addwfc	prodh,w,c
 20938  00091C  6EDA               	movwf	fsr2h,c
 20939  00091E  CFC4 FFDF          	movff	4036,indf2	;volatile
 20940                           
 20941                           ;main.c: 203: adc[(12 * adc_series_counter) + 3] = ADRESL;
 20942  000922  5049               	movf	_adc_series_counter,w,c
 20943  000924  0D0C               	mullw	12
 20944  000926  0E85               	movlw	low (_adc+3)
 20945  000928  24F3               	addwf	prodl,w,c
 20946  00092A  6ED9               	movwf	fsr2l,c
 20947  00092C  0E01               	movlw	high (_adc+3)
 20948  00092E  20F4               	addwfc	prodh,w,c
 20949  000930  6EDA               	movwf	fsr2h,c
 20950  000932  CFC3 FFDF          	movff	4035,indf2	;volatile
 20951  000936                     
 20952                           ;main.c: 206: ADCON0 = (1<<2) + 1;
 20953  000936  0E05               	movlw	5
 20954  000938  6EC2               	movwf	4034,c	;volatile
 20955  00093A                     
 20956                           ;main.c: 210: if ((80 - 1) == adc_series_counter) {
 20957  00093A  5049               	movf	_adc_series_counter,w,c
 20958  00093C  0A4F               	xorlw	79
 20959  00093E  A4D8               	btfss	status,2,c
 20960  000940  D001               	goto	i1u723_21
 20961  000942  D001               	goto	i1u723_20
 20962  000944                     i1u723_21:
 20963  000944  D0A6               	goto	i1l9287
 20964  000946                     i1u723_20:
 20965  000946                     
 20966                           ;main.c: 211: adc_conversion_flags |= 1 << 1;
 20967  000946  0100               	movlb	0	; () banked
 20968  000948  83BD               	bsf	_adc_conversion_flags& (0+255),1,b
 20969  00094A  D0A3               	goto	i1l9287
 20970  00094C                     i1l9243:
 20971                           
 20972                           ;main.c: 217: adc[(12 * adc_series_counter) + 4] = ADRESH;
 20973  00094C  5049               	movf	_adc_series_counter,w,c
 20974  00094E  0D0C               	mullw	12
 20975  000950  0E86               	movlw	low (_adc+4)
 20976  000952  24F3               	addwf	prodl,w,c
 20977  000954  6ED9               	movwf	fsr2l,c
 20978  000956  0E01               	movlw	high (_adc+4)
 20979  000958  20F4               	addwfc	prodh,w,c
 20980  00095A  6EDA               	movwf	fsr2h,c
 20981  00095C  CFC4 FFDF          	movff	4036,indf2	;volatile
 20982                           
 20983                           ;main.c: 218: adc[(12 * adc_series_counter) + 5] = ADRESL;
 20984  000960  5049               	movf	_adc_series_counter,w,c
 20985  000962  0D0C               	mullw	12
 20986  000964  0E87               	movlw	low (_adc+5)
 20987  000966  24F3               	addwf	prodl,w,c
 20988  000968  6ED9               	movwf	fsr2l,c
 20989  00096A  0E01               	movlw	high (_adc+5)
 20990  00096C  20F4               	addwfc	prodh,w,c
 20991  00096E  6EDA               	movwf	fsr2h,c
 20992  000970  CFC3 FFDF          	movff	4035,indf2	;volatile
 20993  000974                     
 20994                           ;main.c: 221: ADCON0 = (0<<2) + 1;
 20995  000974  0E01               	movlw	1
 20996  000976  6EC2               	movwf	4034,c	;volatile
 20997  000978                     
 20998                           ;main.c: 225: if ((80 - 1) == adc_series_counter) {
 20999  000978  5049               	movf	_adc_series_counter,w,c
 21000  00097A  0A4F               	xorlw	79
 21001  00097C  A4D8               	btfss	status,2,c
 21002  00097E  D001               	goto	i1u724_21
 21003  000980  D001               	goto	i1u724_20
 21004  000982                     i1u724_21:
 21005  000982  D087               	goto	i1l9287
 21006  000984                     i1u724_20:
 21007  000984                     
 21008                           ;main.c: 226: adc_conversion_flags |= 1 << 2;
 21009  000984  0100               	movlb	0	; () banked
 21010  000986  85BD               	bsf	_adc_conversion_flags& (0+255),2,b
 21011  000988  D084               	goto	i1l9287
 21012  00098A                     i1l9251:
 21013                           
 21014                           ;main.c: 232: adc[(12 * adc_series_counter) + 6] = ADRESH;
 21015  00098A  5049               	movf	_adc_series_counter,w,c
 21016  00098C  0D0C               	mullw	12
 21017  00098E  0E88               	movlw	low (_adc+6)
 21018  000990  24F3               	addwf	prodl,w,c
 21019  000992  6ED9               	movwf	fsr2l,c
 21020  000994  0E01               	movlw	high (_adc+6)
 21021  000996  20F4               	addwfc	prodh,w,c
 21022  000998  6EDA               	movwf	fsr2h,c
 21023  00099A  CFC4 FFDF          	movff	4036,indf2	;volatile
 21024                           
 21025                           ;main.c: 233: adc[(12 * adc_series_counter) + 7] = ADRESL;
 21026  00099E  5049               	movf	_adc_series_counter,w,c
 21027  0009A0  0D0C               	mullw	12
 21028  0009A2  0E89               	movlw	low (_adc+7)
 21029  0009A4  24F3               	addwf	prodl,w,c
 21030  0009A6  6ED9               	movwf	fsr2l,c
 21031  0009A8  0E01               	movlw	high (_adc+7)
 21032  0009AA  20F4               	addwfc	prodh,w,c
 21033  0009AC  6EDA               	movwf	fsr2h,c
 21034  0009AE  CFC3 FFDF          	movff	4035,indf2	;volatile
 21035  0009B2                     
 21036                           ;main.c: 235: ADCON0 = (9<<2) + 1;
 21037  0009B2  0E25               	movlw	37
 21038  0009B4  6EC2               	movwf	4034,c	;volatile
 21039  0009B6                     
 21040                           ;main.c: 239: if ((80 - 1) == adc_series_counter) {
 21041  0009B6  5049               	movf	_adc_series_counter,w,c
 21042  0009B8  0A4F               	xorlw	79
 21043  0009BA  A4D8               	btfss	status,2,c
 21044  0009BC  D001               	goto	i1u725_21
 21045  0009BE  D001               	goto	i1u725_20
 21046  0009C0                     i1u725_21:
 21047  0009C0  D068               	goto	i1l9287
 21048  0009C2                     i1u725_20:
 21049  0009C2                     
 21050                           ;main.c: 240: adc_conversion_flags |= 1 << 3;
 21051  0009C2  0100               	movlb	0	; () banked
 21052  0009C4  87BD               	bsf	_adc_conversion_flags& (0+255),3,b
 21053  0009C6  D065               	goto	i1l9287
 21054  0009C8                     i1l9259:
 21055                           
 21056                           ;main.c: 246: adc[(12 * adc_series_counter) + 8] = ADRESH;
 21057  0009C8  5049               	movf	_adc_series_counter,w,c
 21058  0009CA  0D0C               	mullw	12
 21059  0009CC  0E8A               	movlw	low (_adc+8)
 21060  0009CE  24F3               	addwf	prodl,w,c
 21061  0009D0  6ED9               	movwf	fsr2l,c
 21062  0009D2  0E01               	movlw	high (_adc+8)
 21063  0009D4  20F4               	addwfc	prodh,w,c
 21064  0009D6  6EDA               	movwf	fsr2h,c
 21065  0009D8  CFC4 FFDF          	movff	4036,indf2	;volatile
 21066                           
 21067                           ;main.c: 247: adc[(12 * adc_series_counter) + 9] = ADRESL;
 21068  0009DC  5049               	movf	_adc_series_counter,w,c
 21069  0009DE  0D0C               	mullw	12
 21070  0009E0  0E8B               	movlw	low (_adc+9)
 21071  0009E2  24F3               	addwf	prodl,w,c
 21072  0009E4  6ED9               	movwf	fsr2l,c
 21073  0009E6  0E01               	movlw	high (_adc+9)
 21074  0009E8  20F4               	addwfc	prodh,w,c
 21075  0009EA  6EDA               	movwf	fsr2h,c
 21076  0009EC  CFC3 FFDF          	movff	4035,indf2	;volatile
 21077  0009F0                     
 21078                           ;main.c: 249: ADCON0 = (8<<2) + 1;
 21079  0009F0  0E21               	movlw	33
 21080  0009F2  6EC2               	movwf	4034,c	;volatile
 21081  0009F4                     
 21082                           ;main.c: 253: if ((80 - 1) == adc_series_counter) {
 21083  0009F4  5049               	movf	_adc_series_counter,w,c
 21084  0009F6  0A4F               	xorlw	79
 21085  0009F8  A4D8               	btfss	status,2,c
 21086  0009FA  D001               	goto	i1u726_21
 21087  0009FC  D001               	goto	i1u726_20
 21088  0009FE                     i1u726_21:
 21089  0009FE  D049               	goto	i1l9287
 21090  000A00                     i1u726_20:
 21091  000A00                     
 21092                           ;main.c: 254: adc_conversion_flags |= 1 << 4;
 21093  000A00  0100               	movlb	0	; () banked
 21094  000A02  89BD               	bsf	_adc_conversion_flags& (0+255),4,b
 21095  000A04  D046               	goto	i1l9287
 21096  000A06                     i1l9267:
 21097                           
 21098                           ;main.c: 260: adc[(12 * adc_series_counter) + 10] = ADRESH;
 21099  000A06  5049               	movf	_adc_series_counter,w,c
 21100  000A08  0D0C               	mullw	12
 21101  000A0A  0E8C               	movlw	low (_adc+10)
 21102  000A0C  24F3               	addwf	prodl,w,c
 21103  000A0E  6ED9               	movwf	fsr2l,c
 21104  000A10  0E01               	movlw	high (_adc+10)
 21105  000A12  20F4               	addwfc	prodh,w,c
 21106  000A14  6EDA               	movwf	fsr2h,c
 21107  000A16  CFC4 FFDF          	movff	4036,indf2	;volatile
 21108                           
 21109                           ;main.c: 261: adc[(12 * adc_series_counter) + 11] = ADRESL;
 21110  000A1A  5049               	movf	_adc_series_counter,w,c
 21111  000A1C  0D0C               	mullw	12
 21112  000A1E  0E8D               	movlw	low (_adc+11)
 21113  000A20  24F3               	addwf	prodl,w,c
 21114  000A22  6ED9               	movwf	fsr2l,c
 21115  000A24  0E01               	movlw	high (_adc+11)
 21116  000A26  20F4               	addwfc	prodh,w,c
 21117  000A28  6EDA               	movwf	fsr2h,c
 21118  000A2A  CFC3 FFDF          	movff	4035,indf2	;volatile
 21119  000A2E                     
 21120                           ;main.c: 263: ADCON0 = (10<<2) + 1;
 21121  000A2E  0E29               	movlw	41
 21122  000A30  6EC2               	movwf	4034,c	;volatile
 21123  000A32                     
 21124                           ;main.c: 267: if ((80 - 1) == adc_series_counter) {
 21125  000A32  5049               	movf	_adc_series_counter,w,c
 21126  000A34  0A4F               	xorlw	79
 21127  000A36  A4D8               	btfss	status,2,c
 21128  000A38  D001               	goto	i1u727_21
 21129  000A3A  D001               	goto	i1u727_20
 21130  000A3C                     i1u727_21:
 21131  000A3C  D002               	goto	i1l163
 21132  000A3E                     i1u727_20:
 21133  000A3E                     
 21134                           ;main.c: 268: adc_conversion_flags |= 1 << 5;
 21135  000A3E  0100               	movlb	0	; () banked
 21136  000A40  8BBD               	bsf	_adc_conversion_flags& (0+255),5,b
 21137  000A42                     i1l163:
 21138                           
 21139                           ;main.c: 269: }
 21140                           ;main.c: 272: adc_series_counter++;
 21141  000A42  2A49               	incf	_adc_series_counter,f,c
 21142  000A44                     
 21143                           ;main.c: 273: if (adc_series_counter >= 80) {
 21144  000A44  0E4F               	movlw	79
 21145  000A46  6449               	cpfsgt	_adc_series_counter,c
 21146  000A48  D001               	goto	i1u728_21
 21147  000A4A  D001               	goto	i1u728_20
 21148  000A4C                     i1u728_21:
 21149  000A4C  D022               	goto	i1l9287
 21150  000A4E                     i1u728_20:
 21151  000A4E                     i1l9277:
 21152                           
 21153                           ;main.c: 274: adc_series_counter = 0;
 21154  000A4E  6A49               	clrf	_adc_series_counter,c
 21155  000A50  D020               	goto	i1l9287
 21156  000A52                     i1l9279:
 21157                           
 21158                           ;main.c: 280: ADCON0 = (10<<2) + 1;
 21159  000A52  0E29               	movlw	41
 21160  000A54  6EC2               	movwf	4034,c	;volatile
 21161  000A56  D7FB               	goto	i1l9277
 21162  000A58                     i1l9285:
 21163  000A58  50C2               	movf	4034,w,c	;volatile
 21164  000A5A  0B3C               	andlw	60
 21165  000A5C  6E05               	movwf	??_interrupt_at_low_vector& (0+255),c
 21166  000A5E  6A06               	clrf	(??_interrupt_at_low_vector+1)& (0+255),c
 21167                           
 21168                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 21169                           ; Switch size 1, requested type "speed"
 21170                           ; Number of cases is 1, Range of values is 0 to 0
 21171                           ; switch strategies available:
 21172                           ; Name         Instructions Cycles
 21173                           ; simple_byte            4     3 (average)
 21174                           ;	Chosen strategy is simple_byte
 21175  000A60  5006               	movf	??_interrupt_at_low_vector+1,w,c
 21176  000A62  0A00               	xorlw	0	; case 0
 21177  000A64  B4D8               	btfsc	status,2,c
 21178  000A66  D001               	goto	i1l14355
 21179  000A68  D7F4               	goto	i1l9279
 21180  000A6A                     i1l14355:
 21181                           
 21182                           ; Switch size 1, requested type "speed"
 21183                           ; Number of cases is 6, Range of values is 0 to 40
 21184                           ; switch strategies available:
 21185                           ; Name         Instructions Cycles
 21186                           ; simple_byte           19    10 (average)
 21187                           ;	Chosen strategy is simple_byte
 21188  000A6A  5005               	movf	??_interrupt_at_low_vector,w,c
 21189  000A6C  0A00               	xorlw	0	; case 0
 21190  000A6E  B4D8               	btfsc	status,2,c
 21191  000A70  D78C               	goto	i1l9251
 21192  000A72  0A04               	xorlw	4	; case 4
 21193  000A74  B4D8               	btfsc	status,2,c
 21194  000A76  D76A               	goto	i1l9243
 21195  000A78  0A0C               	xorlw	12	; case 8
 21196  000A7A  B4D8               	btfsc	status,2,c
 21197  000A7C  D748               	goto	i1l9235
 21198  000A7E  0A28               	xorlw	40	; case 32
 21199  000A80  B4D8               	btfsc	status,2,c
 21200  000A82  D7C1               	goto	i1l9267
 21201  000A84  0A04               	xorlw	4	; case 36
 21202  000A86  B4D8               	btfsc	status,2,c
 21203  000A88  D79F               	goto	i1l9259
 21204  000A8A  0A0C               	xorlw	12	; case 40
 21205  000A8C  B4D8               	btfsc	status,2,c
 21206  000A8E  D720               	goto	i1l9227
 21207  000A90  D7E0               	goto	i1l9279
 21208  000A92                     i1l9287:
 21209                           
 21210                           ;main.c: 286: ConvertADC();
 21211  000A92  EC01  F02E         	call	i1_ConvertADC	;wreg free
 21212  000A96                     
 21213                           ;main.c: 288: PIR1bits.ADIF = 0;
 21214  000A96  9C9E               	bcf	3998,6,c	;volatile
 21215  000A98                     i1l166:
 21216  000A98  C00D  FFF4         	movff	??_interrupt_at_low_vector+8,prodh
 21217  000A9C  C00C  FFF3         	movff	??_interrupt_at_low_vector+7,prodl
 21218  000AA0  C00B  FFDA         	movff	??_interrupt_at_low_vector+6,fsr2h
 21219  000AA4  C00A  FFD9         	movff	??_interrupt_at_low_vector+5,fsr2l
 21220  000AA8  C009  FFE0         	movff	??_interrupt_at_low_vector+4,bsr
 21221  000AAC  C008  FFE8         	movff	??_interrupt_at_low_vector+3,wreg
 21222  000AB0  C007  FFD8         	movff	??_interrupt_at_low_vector+2,status
 21223  000AB4  0010               	retfie	
 21224  000AB6                     __end_of_interrupt_at_low_vector:
 21225                           	opt stack 0
 21226                           tblptru	equ	0xFF8
 21227                           tblptrh	equ	0xFF7
 21228                           tblptrl	equ	0xFF6
 21229                           tablat	equ	0xFF5
 21230                           prodh	equ	0xFF4
 21231                           prodl	equ	0xFF3
 21232                           intcon	equ	0xFF2
 21233                           postinc0	equ	0xFEE
 21234                           wreg	equ	0xFE8
 21235                           indf1	equ	0xFE7
 21236                           postdec1	equ	0xFE5
 21237                           fsr1h	equ	0xFE2
 21238                           fsr1l	equ	0xFE1
 21239                           bsr	equ	0xFE0
 21240                           indf2	equ	0xFDF
 21241                           postinc2	equ	0xFDE
 21242                           postdec2	equ	0xFDD
 21243                           plusw2	equ	0xFDB
 21244                           fsr2h	equ	0xFDA
 21245                           fsr2l	equ	0xFD9
 21246                           status	equ	0xFD8
 21247                           
 21248 ;; *************** function i1_WriteTimer0 *****************
 21249 ;; Defined at:
 21250 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 21251 ;; Parameters:    Size  Location     Type
 21252 ;;  timer0          2    0[COMRAM] unsigned int 
 21253 ;; Auto vars:     Size  Location     Type
 21254 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 21255 ;; Return value:  Size  Location     Type
 21256 ;;		None               void
 21257 ;; Registers used:
 21258 ;;		None
 21259 ;; Tracked objects:
 21260 ;;		On entry : 0/0
 21261 ;;		On exit  : 0/0
 21262 ;;		Unchanged: 0/0
 21263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21264 ;;      Params:         2       0       0       0       0       0       0
 21265 ;;      Locals:         2       0       0       0       0       0       0
 21266 ;;      Temps:          0       0       0       0       0       0       0
 21267 ;;      Totals:         4       0       0       0       0       0       0
 21268 ;;Total ram usage:        4 bytes
 21269 ;; Hardware stack levels used:    1
 21270 ;; This function calls:
 21271 ;;		Nothing
 21272 ;; This function is called by:
 21273 ;;		_interrupt_at_low_vector
 21274 ;; This function uses a non-reentrant model
 21275 ;;
 21276                           
 21277                           	psect	text100
 21278  005BA4                     __ptext100:
 21279                           	opt stack 0
 21280  005BA4                     i1_WriteTimer0:
 21281                           	opt stack 22
 21282                           
 21283                           ;incstack = 0
 21284                           ;incstack = 0
 21285  005BA4  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 21286  005BA8  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 21287  005BAC  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 21288  005BB0  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 21289  005BB4  0012               	return	
 21290  005BB6                     __end_ofi1_WriteTimer0:
 21291                           	opt stack 0
 21292                           tblptru	equ	0xFF8
 21293                           tblptrh	equ	0xFF7
 21294                           tblptrl	equ	0xFF6
 21295                           tablat	equ	0xFF5
 21296                           prodh	equ	0xFF4
 21297                           prodl	equ	0xFF3
 21298                           intcon	equ	0xFF2
 21299                           postinc0	equ	0xFEE
 21300                           wreg	equ	0xFE8
 21301                           indf1	equ	0xFE7
 21302                           postdec1	equ	0xFE5
 21303                           fsr1h	equ	0xFE2
 21304                           fsr1l	equ	0xFE1
 21305                           bsr	equ	0xFE0
 21306                           indf2	equ	0xFDF
 21307                           postinc2	equ	0xFDE
 21308                           postdec2	equ	0xFDD
 21309                           plusw2	equ	0xFDB
 21310                           fsr2h	equ	0xFDA
 21311                           fsr2l	equ	0xFD9
 21312                           status	equ	0xFD8
 21313                           
 21314 ;; *************** function i1_ConvertADC *****************
 21315 ;; Defined at:
 21316 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\ADC\adcconv.c"
 21317 ;; Parameters:    Size  Location     Type
 21318 ;;		None
 21319 ;; Auto vars:     Size  Location     Type
 21320 ;;		None
 21321 ;; Return value:  Size  Location     Type
 21322 ;;		None               void
 21323 ;; Registers used:
 21324 ;;		None
 21325 ;; Tracked objects:
 21326 ;;		On entry : 0/0
 21327 ;;		On exit  : 0/0
 21328 ;;		Unchanged: 0/0
 21329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21330 ;;      Params:         0       0       0       0       0       0       0
 21331 ;;      Locals:         0       0       0       0       0       0       0
 21332 ;;      Temps:          0       0       0       0       0       0       0
 21333 ;;      Totals:         0       0       0       0       0       0       0
 21334 ;;Total ram usage:        0 bytes
 21335 ;; Hardware stack levels used:    1
 21336 ;; This function calls:
 21337 ;;		Nothing
 21338 ;; This function is called by:
 21339 ;;		_interrupt_at_low_vector
 21340 ;; This function uses a non-reentrant model
 21341 ;;
 21342                           
 21343                           	psect	text101
 21344  005C02                     __ptext101:
 21345                           	opt stack 0
 21346  005C02                     i1_ConvertADC:
 21347                           	opt stack 22
 21348                           
 21349                           ;incstack = 0
 21350                           ;incstack = 0
 21351  005C02  82C2               	bsf	4034,1,c	;volatile
 21352  005C04  0012               	return	
 21353  005C06                     __end_ofi1_ConvertADC:
 21354                           	opt stack 0
 21355                           tblptru	equ	0xFF8
 21356                           tblptrh	equ	0xFF7
 21357                           tblptrl	equ	0xFF6
 21358                           tablat	equ	0xFF5
 21359                           prodh	equ	0xFF4
 21360                           prodl	equ	0xFF3
 21361                           intcon	equ	0xFF2
 21362                           postinc0	equ	0xFEE
 21363                           wreg	equ	0xFE8
 21364                           indf1	equ	0xFE7
 21365                           postdec1	equ	0xFE5
 21366                           fsr1h	equ	0xFE2
 21367                           fsr1l	equ	0xFE1
 21368                           bsr	equ	0xFE0
 21369                           indf2	equ	0xFDF
 21370                           postinc2	equ	0xFDE
 21371                           postdec2	equ	0xFDD
 21372                           plusw2	equ	0xFDB
 21373                           fsr2h	equ	0xFDA
 21374                           fsr2l	equ	0xFD9
 21375                           status	equ	0xFD8
 21376                           tblptru	equ	0xFF8
 21377                           tblptrh	equ	0xFF7
 21378                           tblptrl	equ	0xFF6
 21379                           tablat	equ	0xFF5
 21380                           prodh	equ	0xFF4
 21381                           prodl	equ	0xFF3
 21382                           intcon	equ	0xFF2
 21383                           postinc0	equ	0xFEE
 21384                           wreg	equ	0xFE8
 21385                           indf1	equ	0xFE7
 21386                           postdec1	equ	0xFE5
 21387                           fsr1h	equ	0xFE2
 21388                           fsr1l	equ	0xFE1
 21389                           bsr	equ	0xFE0
 21390                           indf2	equ	0xFDF
 21391                           postinc2	equ	0xFDE
 21392                           postdec2	equ	0xFDD
 21393                           plusw2	equ	0xFDB
 21394                           fsr2h	equ	0xFDA
 21395                           fsr2l	equ	0xFD9
 21396                           status	equ	0xFD8
 21397                           
 21398                           	psect	text102
 21399  000000                     __ptext102:
 21400                           	opt stack 0
 21401                           tblptru	equ	0xFF8
 21402                           tblptrh	equ	0xFF7
 21403                           tblptrl	equ	0xFF6
 21404                           tablat	equ	0xFF5
 21405                           prodh	equ	0xFF4
 21406                           prodl	equ	0xFF3
 21407                           intcon	equ	0xFF2
 21408                           postinc0	equ	0xFEE
 21409                           wreg	equ	0xFE8
 21410                           indf1	equ	0xFE7
 21411                           postdec1	equ	0xFE5
 21412                           fsr1h	equ	0xFE2
 21413                           fsr1l	equ	0xFE1
 21414                           bsr	equ	0xFE0
 21415                           indf2	equ	0xFDF
 21416                           postinc2	equ	0xFDE
 21417                           postdec2	equ	0xFDD
 21418                           plusw2	equ	0xFDB
 21419                           fsr2h	equ	0xFDA
 21420                           fsr2l	equ	0xFD9
 21421                           status	equ	0xFD8
 21422                           
 21423                           	psect	rparam
 21424  0000                     tblptru	equ	0xFF8
 21425                           tblptrh	equ	0xFF7
 21426                           tblptrl	equ	0xFF6
 21427                           tablat	equ	0xFF5
 21428                           prodh	equ	0xFF4
 21429                           prodl	equ	0xFF3
 21430                           intcon	equ	0xFF2
 21431                           postinc0	equ	0xFEE
 21432                           wreg	equ	0xFE8
 21433                           indf1	equ	0xFE7
 21434                           postdec1	equ	0xFE5
 21435                           fsr1h	equ	0xFE2
 21436                           fsr1l	equ	0xFE1
 21437                           bsr	equ	0xFE0
 21438                           indf2	equ	0xFDF
 21439                           postinc2	equ	0xFDE
 21440                           postdec2	equ	0xFDD
 21441                           plusw2	equ	0xFDB
 21442                           fsr2h	equ	0xFDA
 21443                           fsr2l	equ	0xFD9
 21444                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    108
    Data        0
    BSS         1112
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     69      82
    BANK0           160     67     128
    BANK1           256     52     130
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_frexp	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_ldexp	 size(2) Largest target is 0

    ?_eval_poly	 size(2) Largest target is 960
		 -> adc(BIGRAM[960]), 

    ?_floor	 size(2) Largest target is 0

    ?___flneg	 size(2) Largest target is 0

    ?___asflmul	 size(2) Largest target is 0

    ?___flpack	 size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_getCalibrationValue	short  size(2) Largest target is 0

    ?_Celsius2Fahrenheit	short  size(2) Largest target is 0

    ?___awtofl	short  size(2) Largest target is 0

    ?_Celsius2Kelvin	short  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___fladd	unsigned int  size(2) Largest target is 960
		 -> sh_coefficients(BANK1[72]), adc(BIGRAM[960]), 

    ?___altofl	unsigned int  size(2) Largest target is 0

    ?___aldiv	long  size(2) Largest target is 0

    ?___fltol	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___asflsub	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?_log	long  size(2) Largest target is 0

    ?___flsub	long  size(2) Largest target is 0

    ?___flmul	long  size(2) Largest target is 0

    ?___fldiv	long  size(2) Largest target is 0

    ?_exp	long  size(2) Largest target is 0

    ?___asfldiv	long  size(2) Largest target is 0

    ?___asfladd	long  size(2) Largest target is 72
		 -> sh_coefficients(BANK1[72]), 

    ?___lwtofl	long  size(2) Largest target is 0

    eval_poly@d	PTR const  size(1) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(BANK0[2]), 

    __asflsub@f1p	PTR  size(2) Largest target is 4
		 -> exp@x(BANK0[4]), doWork@temp(BANK1[4]), 

    __asflmul@mp	PTR  size(1) Largest target is 4
		 -> exp@x(BANK0[4]), 

    __asfldiv@f1p	PTR  size(2) Largest target is 4
		 -> doWork@avarage(BANK1[4]), 

    __asfladd@f1p	PTR  size(2) Largest target is 4
		 -> doWork@temp(BANK1[4]), doWork@avarage(BANK1[4]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doWork->___aldiv
    ___lwtofl->_readEEPROM
    ___asfladd->___fladd
    ___aldiv->___fltol
    _getCalibrationValue->_readEEPROM
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _eval_poly->___fladd
    ___fltol->___flmul
    ___altofl->___aldiv
    ___flsub->___fladd
    ___asflmul->___flmul
    ___fldiv->___fladd
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doOneSecondWork->_sendTempEvent
    _handle_sync->_sendTempEvent
    _sendTempEvent->_vscp_sendEvent
    _setEventData->_Celsius2Kelvin
    _Celsius2Fahrenheit->___fladd
    ___fladd->___flmul
    _Celsius2Kelvin->___fladd
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeStdReg->_vscp_getGUID
    _vscp_writeStdReg->_vscp_getUserID
    _vscp_writeStdReg->_vscp_getManufacturerId
    _init_app_eeprom->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeCoeffs2Ram
    _writeCoeffs2Ram->_readEEPROM
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_readNicknamePermanent->_readEEPROM
    _readEEPROM->___wmul
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_OpenADC
    _ECANInitialize->_ECANSetOperationMode
    ___awtofl->___flpack
    ___flmul->___awtofl
    ___flmul->___lwtofl
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_doWork
    _doWork->_exp
    ___asfldiv->___fldiv
    ___asfladd->___fladd
    _log->___fldiv
    _exp->___fldiv
    _ldexp->_eval_poly
    _eval_poly->___fladd
    _floor->___altofl
    ___altofl->___aldiv
    ___asflsub->___flsub
    ___flsub->___fladd
    ___fldiv->___flsub
    _sendTempEvent->_setEventData
    _setEventData->_Celsius2Fahrenheit
    _Celsius2Fahrenheit->___fldiv
    _Celsius2Kelvin->___fladd
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doWork

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  141666
                                             63 BANK0      4     4      0
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                        _handle_sync
                         _vscp_error
                    _doOneSecondWork
               _vscp_doOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                              66    66      0   67603
                                             49 BANK0     14    14      0
                                              0 BANK1     52    52      0
                         _readEEPROM
                                _exp
                                _log
                _getCalibrationValue
                            ___aldiv
                           ___altofl
                          ___asfladd
                            ___fladd
                          ___asfldiv
                            ___fldiv
                            ___flmul
                          ___asflsub
                            ___flsub
                            ___fltol
                           ___lwtofl
 ---------------------------------------------------------------------------------
 (2) ___lwtofl                                             4     0      4     865
                                             25 COMRAM     4     0      4
                         _readEEPROM (ARG)
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___asfldiv                                            6     0      6    2070
                                             38 BANK0      6     0      6
                            ___fldiv
 ---------------------------------------------------------------------------------
 (2) ___asfladd                                            6     0      6    3985
                                             58 COMRAM     6     0      6
                            ___fladd
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     445
                                             61 COMRAM     8     0      8
                                              0 BANK0      6     6      0
                _getCalibrationValue (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _getCalibrationValue                                 10     8      2     161
                                             25 COMRAM    10     8      2
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   14303
                                             66 COMRAM     2     2      0
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
                           ___awtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   24732
                                             38 BANK0     11     7      4
                            ___fldiv
                          ___asflmul
                          ___asflsub
                           ___awtofl
                              _floor
                          _eval_poly
                              _ldexp
                             ___flge
                            ___flneg
                            ___fltol
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4      65
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                9     3      6     359
                                             66 COMRAM     3     3      0
                                             12 BANK0      6     0      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7    6410
                                             58 COMRAM     8     1      7
                                              8 BANK0      4     4      0
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    6633
                                             11 BANK0     10     6      4
                           ___altofl
                            ___fladd
                             ___flge
                              _frexp
                            ___fltol
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     337
                                             51 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                9     3      6     322
                                             13 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     198
                                             13 COMRAM     8     0      8
 ---------------------------------------------------------------------------------
 (2) ___altofl                                             5     1      4    1120
                                              6 BANK0      5     1      4
                           ___flpack
                            ___aldiv (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asflsub                                            6     0      6    4140
                                             58 COMRAM     6     0      6
                            ___flsub
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3930
                                              8 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asflmul                                            5     1      4    2255
                                             51 COMRAM     5     1      4
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             15     7      8    1860
                                             16 BANK0     22    14      8
                           ___flpack
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2462
                                             31 BANK0      1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2332
                                             67 COMRAM     2     1      1
                     _vscp_sendEvent
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _doOneSecondWork                                     11    11      0   22590
                                             51 BANK0     11    11      0
                        _writeEEPROM
                         _readEEPROM
                      _sendTempEvent
                     _vscp_sendEvent
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_sync                                          3     3      0   15142
                                             51 BANK0      3     3      0
                         _readEEPROM
                      _sendTempEvent
 ---------------------------------------------------------------------------------
 (2) _sendTempEvent                                        2     2      0   14697
                                             67 COMRAM     2     2      0
                         _readEEPROM
                     _vscp_sendEvent
                       _setEventData
 ---------------------------------------------------------------------------------
 (3) _setEventData                                         9     6      3   12082
                                             42 BANK0      9     6      3
                         _readEEPROM (ARG)
                     _Celsius2Kelvin
                 _Celsius2Fahrenheit
                           ___awtofl
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) _Celsius2Fahrenheit                                   4     0      4    6955
                                             38 BANK0      4     0      4
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             12     4      8    3775
                                             51 COMRAM     7     7      0
                                              0 BANK0      8     0      8
                           ___flpack
                            ___flmul (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) _Celsius2Kelvin                                       4     0      4    3050
                                             58 COMRAM     4     0      4
                            ___fladd
                           ___awtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   24270
                                             31 BANK0     28    28      0
                          _vscp_init
                     _vscp_sendEvent
                    _vscp_readAppReg
                   _vscp_writeAppReg
                       _vscp_getGUID
                    _vscp_getMDF_URL
                 _vscp_getMatrixInfo
              _vscp_goBootloaderMode
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                             13 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    6122
                                             38 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1581
                                             26 COMRAM     7     6      1
                       _vscp_getGUID
                       _vscp_setGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
             _vscp_setManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     134
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      0     0      0      44
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             16 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     4     3      1    4386
                                             34 COMRAM     4     3      1
                        _writeEEPROM
                         _readEEPROM
                    _writeCoeffs2Ram
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeCoeffs2Ram                                      9     9      0     555
                                             25 COMRAM     9     9      0
                         _readEEPROM
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                             13 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2249
                                             43 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             26 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
          _vscp_getRegisterPagesUsed
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                             13 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             25 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2270
                                             67 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             25 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             21 COMRAM     4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     110
                                             16 COMRAM     1     1      0
                        _writeEEPROM
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      90
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4672
                 _vscp_goActiveState
                     _vscp_sendEvent
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2270
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2270
                                             66 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2236
                                              0 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         7     1      6    2016
                                             59 COMRAM     7     1      6
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     36    29      7    1886
                                             23 COMRAM    36    29      7
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                             13 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             49 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             35 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             31 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             20 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                             13 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                             13 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             16 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      44
                                             13 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     402
                        _WriteTimer0
                         _ConvertADC
                       _init_app_ram
                         _OpenTimer0
                            _OpenADC
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     154
                                             13 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0      90
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             13 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    1120
                                             23 COMRAM     6     2      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             15     7      8    2045
                                             29 COMRAM    22    14      8
                           ___flpack
                            ___fldiv (ARG)
                           ___awtofl (ARG)
                              _frexp (ARG)
                           ___lwtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flpack                                            10     4      6     795
                                             13 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      3     3      0     720
                                             25 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              9     9      0     221
                                              4 COMRAM     9     9      0
                       i1_ConvertADC
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) i1_ConvertADC                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _ConvertADC
     _init_app_ram
     _OpenTimer0
     _OpenADC
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
         ___wmul (ARG)
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
         ___wmul (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
           ___wmul (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_readAppReg
       _readEEPROM
         ___wmul (ARG)
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
         ___wmul (ARG)
       _writeCoeffs2Ram
         _readEEPROM
           ___wmul (ARG)
         ___wmul
       _vscp_readAppReg (ARG)
         _readEEPROM
           ___wmul (ARG)
     _vscp_getGUID
       _readEEPROM
         ___wmul (ARG)
     _vscp_getMDF_URL
     _vscp_getMatrixInfo
     _vscp_goBootloaderMode
       _writeEEPROM
       _ECANSetOperationMode
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
           ___wmul (ARG)
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
           ___wmul (ARG)
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getRegisterPagesUsed
         _vscp_getFamilyCode
         _vscp_getFamilyType
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getRegisterPagesUsed
       _vscp_getFamilyCode
       _vscp_getFamilyType
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
           ___wmul (ARG)
         _writeCoeffs2Ram
           _readEEPROM
             ___wmul (ARG)
           ___wmul
         _vscp_readAppReg (ARG)
           _readEEPROM
             ___wmul (ARG)
       _vscp_writeStdReg
         _vscp_getGUID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setGUID
           _writeEEPROM
         _vscp_getUserID
           _readEEPROM
             ___wmul (ARG)
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
             ___wmul (ARG)
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_getGUID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setGUID
         _writeEEPROM
       _vscp_getUserID
         _readEEPROM
           ___wmul (ARG)
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
           ___wmul (ARG)
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _handle_sync
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
   _vscp_error
   _doOneSecondWork
     _writeEEPROM
     _readEEPROM
       ___wmul (ARG)
     _sendTempEvent
       _readEEPROM
         ___wmul (ARG)
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _setEventData
         _readEEPROM (ARG)
           ___wmul (ARG)
         _Celsius2Kelvin (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___awtofl (ARG)
             ___flpack
         _Celsius2Fahrenheit (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___fldiv
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___flmul (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
         ___awtofl (ARG)
           ___flpack
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     ___wmul
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
         ___wmul (ARG)
     _vscp_getSubzone
       _readEEPROM
         ___wmul (ARG)
     _vscp_sendHeartBeat
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_getZone (ARG)
         _readEEPROM
           ___wmul (ARG)
       _vscp_getSubzone (ARG)
         _readEEPROM
           ___wmul (ARG)
   _doWork
     _readEEPROM
       ___wmul (ARG)
     _exp
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___asflmul
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___asflsub
         ___flsub
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
       ___awtofl
         ___flpack
       _floor
         ___altofl
           ___flpack
           ___aldiv (ARG)
             _getCalibrationValue (ARG)
               _readEEPROM
                 ___wmul (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___fltol (ARG)
               ___flmul (ARG)
                 ___flpack
                 ___fldiv (ARG)
                   ___flpack
                   ___fladd (ARG)
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                   ___flsub (ARG)
                     ___fladd
                       ___flpack
                       ___awtofl (ARG)
                         ___flpack
                       _frexp (ARG)
                   ___lwtofl (ARG)
                     _readEEPROM (ARG)
                       ___wmul (ARG)
                     ___flpack (ARG)
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
           ___fltol (ARG)
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___fladd (ARG)
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
                 ___flsub (ARG)
                   ___fladd
                     ___flpack
                     ___awtofl (ARG)
                       ___flpack
                     _frexp (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flge
         _frexp
         ___fltol
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       _eval_poly
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___fldiv (ARG)
                 ___flpack
                 ___flsub (ARG)
                 ___lwtofl (ARG)
                   _readEEPROM (ARG)
                     ___wmul (ARG)
                   ___flpack (ARG)
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___flge
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     _log
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _eval_poly (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___flsub (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       _frexp (ARG)
     _getCalibrationValue
       _readEEPROM
         ___wmul (ARG)
     ___aldiv
       _getCalibrationValue (ARG)
         _readEEPROM
           ___wmul (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___altofl
       ___flpack
       ___aldiv (ARG)
         _getCalibrationValue (ARG)
           _readEEPROM
             ___wmul (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___fltol (ARG)
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___fladd (ARG)
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
               ___flsub (ARG)
                 ___fladd
                   ___flpack
                   ___awtofl (ARG)
                     ___flpack
                   _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
       ___fltol (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___flsub (ARG)
               ___fladd
                 ___flpack
                 ___awtofl (ARG)
                   ___flpack
                 _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
     ___asfladd
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___flsub (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___fladd
       ___flpack
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___flsub (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
     ___asfldiv
       ___fldiv
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___flmul (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fldiv
       ___flpack
       ___fladd (ARG)
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flsub (ARG)
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___flmul
       ___flpack
       ___fldiv (ARG)
         ___flpack
         ___fladd (ARG)
           ___flpack
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flsub (ARG)
           ___fladd
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
       _frexp (ARG)
       ___lwtofl (ARG)
         _readEEPROM (ARG)
           ___wmul (ARG)
         ___flpack (ARG)
     ___asflsub
       ___flsub
         ___fladd
           ___flpack
           ___flmul (ARG)
             ___flpack
             ___fldiv (ARG)
               ___flpack
               ___lwtofl (ARG)
                 _readEEPROM (ARG)
                   ___wmul (ARG)
                 ___flpack (ARG)
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___fladd (ARG)
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
       ___awtofl (ARG)
         ___flpack
     ___flsub
       ___fladd
         ___flpack
         ___flmul (ARG)
           ___flpack
           ___fldiv (ARG)
             ___flpack
             ___lwtofl (ARG)
               _readEEPROM (ARG)
                 ___wmul (ARG)
               ___flpack (ARG)
           ___awtofl (ARG)
             ___flpack
           _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___fltol
       ___flmul (ARG)
         ___flpack
         ___fldiv (ARG)
           ___flpack
           ___fladd (ARG)
             ___flpack
             ___awtofl (ARG)
               ___flpack
             _frexp (ARG)
           ___flsub (ARG)
             ___fladd
               ___flpack
               ___awtofl (ARG)
                 ___flpack
               _frexp (ARG)
           ___lwtofl (ARG)
             _readEEPROM (ARG)
               ___wmul (ARG)
             ___flpack (ARG)
         ___awtofl (ARG)
           ___flpack
         _frexp (ARG)
         ___lwtofl (ARG)
           _readEEPROM (ARG)
             ___wmul (ARG)
           ___flpack (ARG)
     ___lwtofl
       _readEEPROM (ARG)
         ___wmul (ARG)
       ___flpack (ARG)

 _interrupt_at_low_vector (ROOT)
   i1_ConvertADC
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     3C0      16       62.5%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     34      82       7       50.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     43      80       5       80.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     45      52       1       86.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     154       3        0.0%
DATA                 0      0     51F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Nov 26 12:21:55 2015

                          ___asfldiv@f1p 0086                            ___altofl@sign 006A  
                           ___fldiv@cntr 007F                  __end_of_vscp_readAppReg 27B8  
                           ___fldiv@sign 0085                    __end_of_sendVSCPFrame 4CB6  
                           ___asflmul@mp 0038                             ___asflsub@f2 003D  
                            __CFG_CPB$ON 000000             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 000E                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 0011                      ___wmul@multiplicand 0010  
                            __CFG_BORV$3 000000                  __end_of_vscp_readStdReg 3DB8  
                          ___asflsub@f1p 003B                             ___flpack@arg 000E  
                            __CFG_LVP$ON 000000                             ___flpack@exp 0012  
                         _Celsius2Kelvin 57C2                              __CFG_WDT$ON 000000  
                                    l320 20A8                                      l209 1936  
                                    l322 20B2                                      l314 208A  
                                    l170 4484                                      l324 20BC  
                                    l316 2094                                      l228 1E00  
                                    l318 209E                                      l254 4BDC  
                                    l409 24B2                                      l521 1532  
                                    l185 44F2                       vscp_readStdReg@idx 0028  
                                    l179 44C8                                      l518 14E4  
                                    l294 512C                                      l551 5A1C  
                                    l634 55CA                                      l628 51D2  
                                    l830 408C                                      l822 3FF4  
                                    l639 5852                                      l824 4012  
                                    l593 5A3A                                      l850 38BE  
                                    l842 3A22                                      l835 384E  
                                    l852 38D2                                      l917 5964  
                                    l845 391C                                      l854 38E6  
                                    l846 389C                       vscp_readStdReg@reg 002B  
                                    l856 38F6                                      l848 38AA  
                                    l866 398A                                      l858 3906  
                                    l867 39AE                                      l884 4340  
                                    l894 52B6                                      l889 41F0  
         __size_of_vscp_handleProbeState 00BE                         setEventData@ival 0091  
                         getVSCPFrame@id 002E            __end_of_vscp_handleProbeState 4A96  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                       setEventData@unit 008C                                      _adc 0182  
                                    _exp 3A24                                      _log 4342  
                                    fsr2 000FD9                                      prod 000FF3  
                                    wreg 000FE8                             ___flmul@cntr 0032  
                           ___flmul@sign 0033                            ___flpack@sign 0013  
                           ___fltol@exp1 003D                                     l1030 55E4  
                                   l1102 54F6                                     l1106 5A90  
                                   l1035 59D8                                     l1211 297E  
                                   l1053 4A80                                     l1045 4A90  
                                   l1302 5374                                     l1054 4A62  
                                   l1046 4A1E                                     l1151 59FA  
                                   l1082 59B4                                     l1235 2B16  
                                   l1316 5A72                                     l1236 2B2A  
                                   l1317 5A74                                     l1093 58A6  
                                   l1237 2B6C                                     l1078 56D4  
                                   l1246 2BA8                                     l1271 2E00  
                                   l1088 581A                                     l1089 5826  
                                   l1177 4682                                     l1541 496A  
                                   l1621 4856                                     l1606 4D62  
                                   l1614 548C                                     l1279 58D0  
                                   l1615 54AA                                     l1536 4926  
                                   l1537 49D6                                     l1562 3C08  
                                   l1547 4998                                     l1565 3AD2  
                                   l1574 3DDC                                     l1566 3BF8  
                                   l1575 3F26                                     l1655 46BE  
                                   l1656 4786                                     l1578 3E04  
                                   l1658 4776                                     l1683 5060  
                                   l1667 4F44                                     l1589 3E9C  
                                   l1854 446E                                     l1687 4E08  
                __end_of_doOneSecondWork 2018                      vscp_readStdReg@code 0020  
              vscp_getManufacturerId@idx 001A                                     l8123 5B00  
                                   ?_exp 0086                                     l8301 383C  
                                   ?_log 0086                                     l8311 3866  
                                   l8063 5A08                                     l7435 5666  
                                   l8405 39DC                                     l8413 39F6  
                                   l8317 387C                                     l8325 388A  
                                   l8319 3886                                     l8095 5A98  
                                   l9151 58DC                                     l8193 5834  
                                   l8177 5176                                     l8419 3A0C  
                                   l8461 5262                                     l8189 5830  
                                   l8471 528C                                     l8463 526C  
                                   l9159 58F2                                     l8465 5276  
                                   l8457 5250                                     l8369 3930  
                                   l8467 5280                                     l8459 5258  
                                   l8475 5298                                     l8379 3950  
                                   l8469 5286                                     l8397 39B0  
                                   l9613 49FA                                     l9701 2812  
                                   l9615 4A00                                     l9703 2818  
                                   l8489 4122                                     l9633 4A3A  
                                   l9571 59C4                                     l9811 29A0  
                                   l9637 4A3E                                     l9717 2820  
                                   l9639 4A42                                     l9815 29B0  
                                   l9751 2852                                     l9825 2A12  
                                   l9809 2982                                     l9737 2846  
                                   l9681 27D4                                     l9907 2B0A  
                                   l9819 29C8                                     l9683 27DA  
                                   l9675 27C2                                     l9669 4A84  
                                   l9829 2A28                                     l9845 2A58  
                                   l9677 27C8                                     l9599 49DA  
                                   l9943 2B60                                     l9935 2B50  
                                   l9927 2B32                                     l9863 2AAE  
                                   l9847 2A5A                                     l9767 28AE  
                                   l9679 27CE                                     l9953 2B6E  
                                   l9857 2A7E                                     l9849 2A64  
                                   l9777 28E2                                     l9939 2B58  
                                   l9891 2AEA                                     l9875 2ACA  
                                   l9787 2916                                     l9957 2B88  
                                   l9797 294A                                     l9993 2BD8  
                                   l9979 2BB0              __size_of_vscp_getMatrixInfo 001A  
                         sendCANFrame@id 003C                                     u5450 51C6  
                                   u5455 51BC                                     u5625 3844  
                                   u5627 3846                                     u9105 427C  
                                   u5935 40D0                                     u9400 3D24  
                                   u5945 40F0                                     u5955 413E  
                                   u9085 422C                                     u9405 3D1A  
                                   u9430 3D86                                     u9095 4252  
                         sendCANFrame@rv 0042                                     u9435 3D7C  
                                   u8764 5306                                     u8765 5300  
                                   u8945 4C40                         ??_ECANInitialize 000F  
              vscp_setManufacturerId@idx 0012                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 4470  
                                   _init 5712                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     exp@x 0086  
                                   log@x 0086                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 0B6E  
                            _vscp_minute 004D                              _vscp_second 0051  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 0AB6            __size_of_vscp_doOneSecondWork 004C  
                      vscp_getUserID@idx 001A                    __size_of_vscp_setGUID 0022  
                       _vscp_writeStdReg 4582                              _writeEEPROM 5948  
              ECANReceiveMessage@dataLen 0016                    getVSCPFrame@pPriority 0026  
                        __end_of_OpenADC 5378                          _sh_coefficients 0106  
                   __end_of_getVSCPFrame 51D4                                    ??_exp 0046  
                                  ??_log 0043              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 0010                         __RegsToCANID@ptr 000E  
                 __end_of_Celsius2Kelvin 57F8                     __size_of_getCANFrame 002C  
                                  l10003 2BFA                                    l10021 2C3E  
                                  l10015 2C26                                    l10041 2C8C  
                                  l10019 2C38                                    l11021 55BE  
                                  l10045 2CA2                                    l10037 2C72  
                                  l11111 4268                                    l10071 2D3E  
                                  l10303 54D6                                    l11041 3F8E  
                                  l11017 5594                                    l10049 2CBE  
                                  l11035 3F7E                                    l11211 3C48  
                                  l11203 3C32                                    l10067 2D16  
                                  l10059 2CE8                                    l10307 54DE  
                                  l11053 3FB8                                    l10093 2D9E  
                                  l11063 3FF8                                    l11223 3C70  
                                  l11215 3C54                                    l11207 3C3C  
                                  _B0CON 000E20                                    l10601 21FA  
                                  l10521 2026                                    l11241 3CA8  
                                  l11233 3C92                                    l10505 4E14  
                                  l11313 45CC                                    l10611 2236  
                                  l10603 2206                                    l10531 2062  
                                  l10523 2032                                    l11075 4042  
                                  l11083 405C                                    l11219 3C60  
                                  l11331 4620                                    l11307 45AC  
                                  l11411 4AE0                                    l10701 2452  
                                  l10621 2272                                    l10613 2242  
                                  l10605 2212                                    l10541 209A  
                                  l10533 206E                                    l10525 203E  
                                  l11069 4014                                    l11093 4082  
                                  l11149 56CC                                    l11253 3CCC  
                                  l11245 3CB4                                    l11237 3C9E  
                                  l11229 3C86                                    l11413 4AEC  
                                  l11405 4AC8                                    l10711 248E  
                                  l10703 245E                                    l10631 22AE  
                                  l10623 227E                                    l10615 224E  
                                  l10607 221E                                    l10551 20CE  
                                  l10543 20A4                                    l10535 207A  
                                  l10527 204A                                    l11095 4084  
                                  l11263 3D2E                                    l11351 4668  
                                  l11343 4654                                    l11327 4606  
                                  l11319 45E8                                    l11431 4B40  
                                  l11423 4B1E                                    l11415 4AF0  
                                  _B1CON 000E30                                    l10713 249A  
                                  l10705 246A                                    l10641 22EA  
                                  l10633 22BA                                    l10625 228A  
                                  l10617 225A                                    l10609 222A  
                                  l10561 210A                                    l10553 20DA  
                                  l10545 20AE                                    l10537 2086  
                                  l10529 2056                                    l11089 407E  
                                  l11273 3D8E                                    l11249 3CC0  
                                  l11185 5A8A                                    l10801 0E08  
                                  l11329 460A                                    l11361 4684  
                                  l10297 54CC                                    l10731 2776  
                                  l10715 24A6                                    l10707 2476  
                                  l10651 2326                                    l10643 22F6  
                                  l10635 22C6                                    l10627 2296  
                                  l10619 2266                                    l10571 2146  
                                  l10563 2116                                    l10555 20E6  
                                  l10547 20B8                                    l10539 2090  
                                  l10723 24CE                                    l11283 3DB4  
                                  l11195 3C1E                                    l10811 0E94  
                                  l10803 0E24                                    l11427 4B2C  
                                  l10741 278C                                    l10717 24B6  
                                  l10709 2482                                    l10661 2362  
                                  l10653 2332                                    l10645 2302  
                                  l10637 22D2                                    l10629 22A2  
                                  l10581 2182                                    l10573 2152  
                                  l10565 2122                                    l10557 20F2  
                                  l10549 20C2                                    l10725 2758  
                                  l10901 1346                                    l10821 0F20  
                                  l10813 0EB0                                    l10805 0E40  
                                  l11701 5980                                    l14005 4360  
                                  l10743 279C                                    l10719 24C2  
                                  l10671 239E                                    l10663 236E  
                                  l10655 233E                                    l10647 230E  
                                  l10639 22DE                                    l10591 21BE  
                                  l10583 218E                                    l10575 215E  
                                  l10567 212E                                    l10559 20FE  
                                  l11279 3DA4                                    l11199 3C28  
                                  l10911 13C8                                    l10903 1360  
                                  l10831 0FAC                                    l10823 0F3C  
                                  l10815 0ECC                                    l10807 0E5C  
                                  l11295 59F0                                    l14103 3DEE  
                                  _B2CON 000E40                                    l10681 23DA  
                                  l10673 23AA                                    l10665 237A  
                                  l10657 234A                                    l10649 231A  
                                  l10593 21CA                                    l10585 219A  
                                  l10577 216A                                    l10569 213A  
                                  l10921 144A                                    l10913 13E2  
                                  l10905 137A                                    l10841 1038  
                                  l10833 0FC8                                    l10825 0F58  
                                  l10817 0EE8                                    l10809 0E78  
                                  l10761 0BD8                                    l14041 4BC0  
                                  l11713 5002                                    l10739 278A  
                                  l10691 2416                                    l10683 23E6  
                                  l10675 23B6                                    l10667 2386  
                                  l10659 2356                                    l10595 21D6  
                                  l10587 21A6                                    l10579 2176  
                                  l10747 27B4                                    l10499 4E0E  
                                  l10931 14CC                                    l10923 1464  
                                  l10915 13FC                                    l10907 1394  
                                  l10851 10BC                                    l10843 1054  
                                  l10835 0FE4                                    l10827 0F74  
                                  l10819 0F04                                    l10771 0C64  
                                  l10763 0BF4                                    l10755 0B84  
                                  l14131 3E4E                                    l10693 2422  
                                  l10685 23F2                                    l10677 23C2  
                                  l10669 2392                                    l10597 21E2  
                                  l10589 21B2                                    l14061 493C  
                                  l14213 4794                                    l10941 156A  
                                  l10933 14FE                                    l10925 147E  
                                  l10917 1416                                    l10909 13AE  
                                  l10861 113E                                    l10853 10D6  
                                  l10845 106E                                    l10837 1000  
                                  l10829 0F90                                    l10781 0CF0  
                                  l10773 0C80                                    l10765 0C10  
                                  l10757 0BA0                                    l14133 3E5C  
                                  l14125 3E30                                    l14109 3E16  
                                  l14037 4B88                                    l10695 242E  
                                  l10687 23FE                                    l10679 23CE  
                                  l10599 21EE                                    l14071 498C  
                                  l14063 4954                                    l10935 1518  
                                  l10927 1498                                    l10919 1430  
                                  l10871 11C0                                    l10863 1158  
                                  l10855 10F0                                    l10847 1088  
                                  l10839 101C                                    l10791 0D7C  
                                  l10783 0D0C                                    l10775 0C9C  
                                  l10767 0C2C                                    l10759 0BBC  
                                  l14143 3E88                                    l14135 3E64  
                                  l11751 4F10                                    l11743 4EF8  
                                  l11727 4EB4                                    l11663 4DA6  
                                  l11399 4AB0                                    _B3CON 000E50  
                                  l10697 243A                                    l10689 240A  
                                  l14241 47FE                                    l14233 47E2  
                                  l14217 47A8                                    l10937 1536  
                                  l10929 14B2                                    l10881 1242  
                                  l10873 11DA                                    l10865 1172  
                                  l10857 110A                                    l10849 10A2  
                                  l10793 0D98                                    l10785 0D28  
                                  l10777 0CB8                                    l10769 0C48  
                                  l10945 156E                                    l14161 3EFA  
                                  l14153 3ECC                                    l14145 3E96  
                                  l14137 3E6A                                    l11753 4F1C  
                                  l11729 4EBE                                    l11673 4DC4  
                                  l10699 2446                                    l14059 4930  
                                  l10963 182E                                    l10955 181A  
                                  l10939 1550                                    l10891 12C4  
                                  l10883 125C                                    l10875 11F4  
                                  l10867 118C                                    l10859 1124  
                                  l10795 0DB4                                    l10787 0D44  
                                  l10779 0CD4                                    l10971 186C  
                                  l10947 17E2                                    l11755 4F20  
                                  l11747 4F08                                    l14069 4980  
                                  l14245 4812                                    l14229 47CE  
                                  l10965 1830                                    l10893 12DE  
                                  l10885 1276                                    l10877 120E  
                                  l10869 11A6                                    l10797 0DD0  
                                  l10789 0D60                                    l14149 3EB4  
                                  l14173 4CC4                                    l11693 54A8  
                                  l11677 4DD0                                    l13701 456A  
                                  l10967 1840                                    l10895 12F8  
                                  l10887 1290                                    l10879 1228  
                                  l10799 0DEC                                    l11687 5476  
                                  l11759 4F34                                    _B4CON 000E60  
                                  l10897 1312                                    l10889 12AA  
                                  l13721 5108                                    l13801 1BA2  
                                  l14177 4CDA                                    l14089 5514  
                                  l13705 4572                                    l10899 132C  
                                  l13731 5152                                    l13811 1BF0  
                                  l14283 46C8                                    l13651 44AE  
          __size_of_vscp_getMajorVersion 0002                                    l14269 5798  
                                  l13725 5136                                    l13717 50E4  
                                  l13741 1872                                    l14197 4D28  
                                  l14189 4CFA                                    l14287 46E4  
                                  l14295 4886                                    l13911 342C  
                                  l13903 3402                                    l13655 44B8  
                                  l13647 44A6                                    _B5CON 000E70  
                                  l13729 5148                                    l13841 1DAC  
                                  l13817 1CA8                                    l14297 4900  
                                  l13673 44EC                                    l13657 44BC  
                                  l13819 1CC2                                    l13747 19FC  
                                  l13667 44D8                                    l13659 44C2  
                                  l13773 1ACE                                    l13757 1A42  
                                  l13677 44F6                                    l13839 1DA2  
                                  l13775 1AD8                                    l13695 453E  
                                  l13679 450E                                    l13881 1FBA  
                                  l13857 1EB6                                    l13785 1B26  
                                  l13859 1ED0                                    l13893 200E  
                                  l13973 3A76                                    l13957 380A  
                                  l13879 1FB0                                    l13799 1B98  
                                  l13967 3A42                                    l13993 3BC6  
                                  l13977 3AA0               __end_of_vscp_goActiveState 5A5A  
                          ___fltol@sign1 003C                          __end_of___aldiv 4B52  
          ??_vscp_writeNicknamePermanent 0011                       writeEEPROM@address 000E  
                        __end_of___fladd 3F28                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                        __end_of___fldiv 4D64                            i1_WriteTimer0 5BA4  
                        __end_of___flneg 5992                                    _EEADR 000FA9  
                        __end_of___lbmod 58FA                          __end_of___flmul 4858  
                        __end_of___flsub 5712                          __end_of___fltol 4F46  
                _vscp_handleDropNickname 57F8                                    _BSEL0 000DF8  
                                  u10110 4D9C                                    u10200 4EDC  
                                  u10205 4ED2                                    _T0CON 000FD5  
                                  u13004 1E10                                    u13005 1E0C  
                                  u13034 1EC6                                    u13114 3414  
                                  u13035 1EC2                                    u13115 3410  
                                  u13220 3BBC                                    u13054 1F4E  
                                  u13055 1F4A                                    u13240 4356  
                                  u13144 3802                                    u13145 37FE  
                                  u12804 1A6C                                    u12805 1A68  
                                  u12904 1C00                                    u13560 4CD0  
                                  u12905 1BFC                                    u13590 479E  
                                  u12934 1CB8                                    u12854 1B36  
                                  u12935 1CB4                                    u12855 1B32  
                                  u12954 1D40                                    u12955 1D3C  
                                  i1l140 0882                                    i1l146 08BA  
                                  i1l163 0A42                                    i1l166 0A98  
                        sendCANFrame@dlc 0040                                    _MSEL0 000DF0  
                                  _MSEL1 000DF1                                    _MSEL2 000DF2  
                                  _IRXIF 007D27                        ??_writeCoeffs2Ram 001A  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 5BE8               _vscp_readNicknamePermanent 5BDE  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                     setEventData@newval 008D                         ?_vscp_getSubzone 0001  
                         __CFG_EBTR0$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                            ___awtofl@sign 001D  
                         __CFG_EBTR3$OFF 000000                    __end_of_sendTempEvent 50E2  
                           _vscp_getGUID 5B34                            __CFG_WRTD$OFF 000000  
                         __CFG_EBTRB$OFF 000000                                    _floor 4688  
                                  _ldexp 4D64                             _vscp_getZone 5BC0  
                                  _frexp 4FDC                       vscp_writeAppReg@rv 0026  
              _vscp_getRegisterPagesUsed 5C06                   __size_of_vscp_getEvent 002A  
                                  main@i 009F                               _ConvertADC 5BFE  
                           _vscp_setGUID 59FC                                    tablat 000FF5  
                _vscp_getSubMinorVersion 5C0C                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 5948  
                            exp@exponent 008E                              ldexp@newexp 0070  
                   _ECANSetOperationMode 5AF4                          __initialization 5616  
                            log@exponent 0043                             __end_of_main 4582  
                           __end_of_init 574E                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0818                          ?_Celsius2Kelvin 003B  
                         __CFG_OSC$HSPLL 000000                        ??_ECANSendMessage 001F  
                         ?i1_WriteTimer0 0001                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 0024                   ??_vscp_restoreDefaults 0011  
                                 ??_main 0046                                   ??_init 0013  
          __size_of_vscp_handleHeartbeat 003E                 ??_vscp_getManufacturerId 001A  
               ??_vscp_setManufacturerId 0012                 _vscp_handleProtocolEvent 27B8  
                          __activetblptr 000002                        __RegsToCANID@type 0011  
             ECANReceiveMessage@msgFlags 0017                         doWork@calVoltage 0152  
              __size_of__ECANPointBuffer 0076                                   _B0TXEN 006FC2  
                                 _B1TXEN 006FC3                                   _B2TXEN 006FC4  
                                 _B3TXEN 006FC5                                   _B4TXEN 006FC6  
                                 _B5TXEN 006FC7                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 ?_floor 006B                                   ?_ldexp 006C  
                   __size_of_handle_sync 007A                                   ?_frexp 000E  
                       __end_of___altofl 5542               ECANReceiveMessage@savedPtr 0018  
                                 _CANCON 000F6F                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                       __end_of___flpack 49D8                                   _EECON2 000FA7  
                                 _CIOCON 000F73                         __end_of___awtofl 57C2  
                        __CFG_BBSIZ$2048 000000                         ?_doOneSecondWork 0001  
                     vscp_writeStdReg@rv 0020                            ?_init_app_ram 0001  
                                 _MDSEL0 007BBE                                   _MDSEL1 007BBF  
                             _OpenTimer0 5A5A                                   i1l9201 0892  
                                 i1l9203 089C                                   i1l9211 08AE  
                                 i1l9221 08C4                                   i1l9205 08A4  
                                 i1l9231 08FC                                   i1l9207 08A8  
                                 i1l9223 08C6                                   i1l9241 0946  
                                 i1l9233 0908                                   i1l9209 08AA  
                                 i1l9251 098A                                   i1l9243 094C  
                                 i1l9235 090E                                   i1l9227 08D0  
                                 i1l9261 09F0                                   i1l9253 09B2  
                                 i1l9245 0974                                   i1l9237 0936  
                                 i1l9229 08F8                                   i1l9181 083C  
                                 i1l9271 0A32                                   i1l9263 09F4  
                                 i1l9255 09B6                                   i1l9247 0978  
                                 i1l9239 093A                                   i1l9191 0872  
                                 i1l9183 0848                                   i1l9273 0A3E  
                                 i1l9265 0A00                                   i1l9257 09C2  
                                 i1l9249 0984                                   i1l9193 0876  
                                 i1l9185 084E                                   i1l9275 0A44  
                                 i1l9267 0A06                                   i1l9259 09C8  
                                 i1l9195 087E                                   i1l9187 0852  
                                 i1l9179 0834                                   i1l9277 0A4E  
                                 i1l9269 0A2E                                   i1l9285 0A58  
                                 i1l9197 0884                                   i1l9189 0862  
                                 i1l9279 0A52                                   i1l9287 0A92  
                                 i1l9199 0886                                   i1l9289 0A96  
                        _init_app_eeprom 2E02                         __end_of___lwtofl 587E  
                                 _RXB0IF 007D20                                   _RXB1IF 007D21  
                         __CFG_WDTPS$128 000000                   ECANReceiveMessage@data 0015  
                 ECANReceiveMessage@mode 001C                   ECANReceiveMessage@temp 001D  
                      getVSCPFrame@pData 0028                        getVSCPFrame@pSize 0027  
                              ??_OpenADC 0010                       _vscp_newNodeOnline 587E  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0017  
 vscp_handleProtocolEvent@page_save_1174 0088                                   ___flge 5460  
                         getCANFrame@pid 0022                                ??___aldiv 0046  
                              ??___fladd 0034                                   ___wmul 574E  
                              ??___fldiv 003B                                ??___flneg 0012  
                         __CFG_STVREN$ON 000000                                ??___lbmod 000F  
                              ??___flmul 0026                                ??___flsub 003B  
                              ??___fltol 0038                            _vscp_getEvent 58A8  
                                 _doWork 33CA                         OpenTimer0@config 000E  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 001A  
                    vscp_writeAppReg@reg 0025               __end_of_vscp_setSegmentCRC 5B80  
                    vscp_writeAppReg@val 0023                      vscp_writeAppReg@pos 0024  
                                 clear_0 561E                                   clear_1 5630  
                                 clear_2 563C                                   clear_3 5648  
                          ?_sendCANFrame 003C             vscp_handleProtocolEvent@byte 0095  
                                 floor@i 006F                                   floor@x 006B  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 00C3  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 0011                ??_vscp_getSubMinorVersion 000E  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000E  
                   ??_vscp_newNodeOnline 0044                              ?_ConvertADC 0001  
                     __size_of___asfladd 004E                       __size_of___asfldiv 004C  
                     __size_of___asflmul 004A                               ___fladd@f1 0060  
                             ___fladd@f2 0064                       __size_of___asflsub 004E  
                             ___flge@ff1 000E                               ___flge@ff2 0012  
                       __end_ofexp@coeff 0B48                         __end_oflog@coeff 0B6C  
                        ___lbmod@divisor 000E                               ___altofl@c 0066  
                             ___fldiv@f1 0070                               ___fldiv@f2 0074  
                             ___fldiv@f3 0080                               __accesstop 0060  
                __end_of__initialization 564E                          ___lbmod@counter 0010  
                     _Celsius2Fahrenheit 51D4                               ___flneg@f1 000E  
          __size_of_vscp_getMinorVersion 0002                               ___flmul@f1 001E  
                             ___flmul@f2 0022                             eval_poly@res 0068  
                             ___flsub@f1 0068                               ___flsub@f2 006C  
                             ___fltol@f1 0034                          writeEEPROM@data 0010  
                  __size_of_getVSCPFrame 0078                       _vscp_writeRegister 59DA  
                             ___awtofl@c 0018                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0028                      ?_Celsius2Fahrenheit 0086  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                 ___asflmul@multiplicand 0034              __end_of_vscp_check_pstorage 59DA  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                          __end_of_floor 4788                            __end_of_ldexp 4E0A  
                          __end_of_frexp 5062                      ?_vscp_writeRegister 0027  
                         ??_sendCANFrame 0042                               ___lwtofl@c 001A  
             __end_of_vscp_getFamilyCode 5BDE                            ?__RegsToCANID 000E  
            __size_of_ECANReceiveMessage 020E             __size_of_getCalibrationValue 005C  
                     sendVSCPFrame@pData 0066               __end_of_vscp_getFamilyType 5BD4  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0027  
        __size_of_vscp_setManufacturerId 0018                 __end_of_vscp_writeAppReg 1870  
                 getVSCPFrame@pvscpclass 002D                  __end_of_init_app_eeprom 33CA  
                   ??_Celsius2Fahrenheit 003B              __end_of_vscp_setControlByte 5B6E  
               __end_of_vscp_writeStdReg 4688                       __RegsToCANID@Value 0014  
                                ??_floor 0046                                  ??_ldexp 0043  
                                ??_frexp 0014                            ?_setEventData 008A  
                   ??_vscp_writeRegister 0028          __end_of_vscp_handleDropNickname 5828  
                           _getVSCPFrame 515C                               __pbssBANK0 00A3  
                             __pbssBANK1 0100                              ?_OpenTimer0 0001  
                     __size_of_eval_poly 00C0               __end_of_vscp_getBufferSize 5C0A  
                       Celsius2Kelvin@tc 003B                    vscp_writeRegister@reg 0028  
                 ??_ECANSetOperationMode 000E       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 000E                          _writeCoeffs2Ram 4E0A  
                                ?___flge 000E          __end_of_vscp_getSubMinorVersion 5C0E  
               ECANSetOperationMode@mode 000E                                  ?___wmul 000E  
                                _B0RXFUL 007107                                  _B1RXFUL 007187  
                   __ECANRxFilterHitInfo 0048                                  _B2RXFUL 007207  
                                _B3RXFUL 007287                                  _B4RXFUL 007307  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 0011  
                                _B5RXFUL 007387                        __end_of___asfladd 53C6  
                      __end_of___asfldiv 5460                         WriteTimer0@timer 0010  
                              ?___altofl 0066                        __end_of___asflmul 558C  
                                _ECANCON 000F77                        __end_of___asflsub 5414  
                              ?___flpack 000E                            ??_WriteTimer0 0010  
                       doWork@resistance 0174                      __size_of_ConvertADC 0004  
                              ?___awtofl 0018                           ??__RegsToCANID 0012  
                  sendVSCPFrame@priority 0064                                  _BRGCON1 000F70  
                                _BRGCON2 000F71                                  _BRGCON3 000F72  
                              ?___lwtofl 001A                      vscp_writeStdReg@reg 0021  
           __end_of_vscp_doOneSecondWork 54F8                                  i1l14355 0A6A  
                     _adc_series_counter 0049              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0062                               _high_alarm 00BE  
        __end_of_interrupt_at_low_vector 0AB6                 vscp_readStdReg@code_1147 0024  
                      sendCANFrame@pdata 0041                    _vscp_handleProbeState 49D8  
                                _RXB0CON 000F60                                  _RXB1CON 000F50  
                                _RXB0FUL 007B07                         __ECANPointBuffer 524A  
             __end_of_vscp_getMatrixInfo 5AAC                                  _TXB0CON 000F40  
                                _TXB1CON 000F30                                  _TXB2CON 000F20  
                         ??_setEventData 003F                                  _RXFCON0 000DD4  
                                _RXFCON1 000DD5                            setEventData@v 008A  
                     _vscp_goActiveState 5A3C                   __size_of_sendVSCPFrame 00B2  
           __end_of_vscp_getMajorVersion 5C12                       __size_of_vscp_init 0044  
                             _readEEPROM 5B48                   _vscp_getManufacturerId 5B0C  
                 _vscp_setManufacturerId 5AAC                          _ECANSendMessage 3F28  
                    ?_vscp_goActiveState 0001                                  _OpenADC 531C  
                                __Hparam 0000                          ??_vscp_getEvent 0032  
                       ??_Celsius2Kelvin 003F                                  __Lparam 0000  
                     _vscp_node_substate 004E               __end_of_vscp_getSegmentCRC 5BF2  
             ??_vscp_handleProtocolEvent 007F                            ??_getCANFrame 0022  
      __end_of_vscp_getRegisterPagesUsed 5C08                 __size_of_vscp_getMDF_URL 0018  
                                ___aldiv 4A96                          __size_of___flge 004C  
                                ___fladd 3DB8                                  ___fldiv 4CB6  
                                ___flneg 596E                                  ___lbmod 58D2  
                                ___flmul 4788                                  ___flsub 56D6  
                                ___fltol 4EAA                          __size_of___wmul 003A  
                        getCANFrame@pdlc 0020                                _FIFOEMPTY 007BA7  
                          ?i1_ConvertADC 0001                          __size_of_doWork 044C  
                           __psmallconst 0B00                               ??___altofl 0046  
                   __end_of_init_app_ram 5698                               ??___flpack 0014  
                     _vscp_sendHeartBeat 5922                                  __pcinit 5616  
                             ??___awtofl 001C                           _vscp_deviceURL 0B00  
                      __end_of_eval_poly 4918                                  __ramtop 0600  
                    __size_of_OpenTimer0 001E                                  __ptext0 4470  
                                __ptext1 33CA                                  __ptext2 5854  
                                __ptext3 5414                                  __ptext4 5378  
                                __ptext5 4A96                                  __ptext6 52C0  
                                __ptext7 4342                                  __ptext8 3A24  
                                __ptext9 596E                               ??___lwtofl 001E  
                         _vscp_getUserID 5B20                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 0044                             __size_of_exp 01E6  
                           __size_of_log 012E                    vscp_writeStdReg@value 001B  
                       ___aldiv@dividend 003E                      ?_vscp_sendHeartBeat 0044  
               ??_vscp_handleSetNickname 0012                                  _seconds 00C0  
                                doWork@B 0172                                  doWork@i 0181  
                                doWork@j 0178                                  doWork@v 016E  
                    __end_of_WriteTimer0 5BA4                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 001C                       vscp_getMDF_URL@idx 000F  
                         OpenADC@config2 000E            vscp_handleProtocolEvent@bytes 008C  
                   end_of_initialization 564E                                  exp@sign 0090  
           __end_of_vscp_handleHeartbeat 56D6                 __size_of_vscp_getSubzone 000A  
                          __Lmediumconst 0000                  __end_of_writeCoeffs2Ram 4EAA  
                   __end_of_sendCANFrame 55D2                               doWork@Rinf 014E  
                     doOneSecondWork@tmp 009A                               doWork@temp 017D  
              vscp_handleProtocolEvent@i 0099                vscp_handleProtocolEvent@j 009A  
              vscp_handleProtocolEvent@k 0093                     ??_vscp_sendHeartBeat 0045  
                         _vscp_sendEvent 58FA                        ECANSendMessage@id 0018  
                      ECANSendMessage@pb 0020                         ___aldiv@quotient 0062  
                                postdec1 000FE5                                  postdec2 000FDD  
                __size_of_ECANInitialize 0096                   __size_of_sendTempEvent 0080  
                         _vscp_setUserID 5AC4                                  postinc0 000FEE  
                                postinc2 000FDE                           ??i1_ConvertADC 0001  
                 __end_of_vscp_deviceURL 0B20      __end_of_vscp_writeNicknamePermanent 5B92  
            _vscp_writeNicknamePermanent 5B80                       __ECANPointBuffer@b 0011  
                          _sendVSCPFrame 4C04                   __end_of_vscp_getUserID 5B34  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0078CB  
                      __end_of_vscp_init 5616                           _vscp_probe_cnt 0050  
                    __end_of_getCANFrame 5854            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                            ??_handle_sync 0093  
               __size_of_vscp_readAppReg 07A0                         ___lbmod@dividend 000F  
                       writeCoeffs2Ram@c 001C                         writeCoeffs2Ram@i 001F  
                       writeCoeffs2Ram@j 0021                              ___fldiv@exp 0084  
                         _vscp_statuscnt 0052                 __size_of_vscp_readStdReg 01AE  
                     _vscp_setSegmentCRC 5B6E                        readEEPROM@address 0016  
                           ??_ConvertADC 000E               vscp_handleProtocolEvent@cb 0091  
                __end_of_ECANSendMessage 408E                        vscp_readStdReg@rv 002A  
                            ___lbmod@rem 0011                              ___flmul@exp 002D  
                          ?__CANIDToRegs 000E                     __end_of__RegsToCANID 41F2  
                    _getCalibrationValue 52C0                              ?_readEEPROM 0016  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 5922  
                             _vscp_error 5BFA                     _vscp_doOneSecondWork 54AC  
                     i1WriteTimer0@timer 0003                               _vscp_timer 00BB  
                 __end_of_vscp_setUserID 5ADC                 __size_of_doOneSecondWork 07A8  
                 vscp_sendHeartBeat@zone 0045                     __end_of_setEventData 4C04  
                         ?_sendVSCPFrame 0060                           __end_of___flge 54AC  
                   __size_of_writeEEPROM 0026                           __end_of___wmul 5788  
                        ?_vscp_getUserID 0001                           __end_of_doWork 3816  
           __end_of_vscp_getMinorVersion 5C10                              _WriteTimer0 5B92  
                   _vscp_getMajorVersion 5C10                       __end_of_ConvertADC 5C02  
                   ?_getCalibrationValue 001A                     ??_vscp_setSegmentCRC 0011  
                      ??_vscp_getMDF_URL 000E            ??_vscp_getBootLoaderAlgorithm 000E  
                             floor@expon 0073                        ?_vscp_writeAppReg 0023  
                    start_initialization 5616                               eval_poly@d 003F  
                             eval_poly@n 0040                               eval_poly@x 003B  
                             ldexp@value 006C          __size_of_vscp_handleSetNickname 0024  
                            __end_of_exp 3C0A                              __end_of_log 4470  
                     ??_vscp_writeAppReg 0024                            _sendTempEvent 5062  
                      ?_vscp_writeStdReg 001B                      __CFG_BOREN$BOACTIVE 000000  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 000E  
                     ??_vscp_writeStdReg 001C                       _vscp_getFamilyCode 5BD4  
                    __end_of_handle_sync 515C                  doOneSecondWork@setpoint 009B  
                         ??__CANIDToRegs 0015                       _vscp_getFamilyType 5BCA  
                             frexp@value 000E                      sendVSCPFrame@nodeid 0063  
                       ?_writeCoeffs2Ram 0001                        _vscp_readRegister 5A78  
                   Celsius2Fahrenheit@tc 0086                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 0090                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 001E                      ?_vscp_getFamilyCode 000E  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 2E02  
                        ?_vscp_setUserID 0011                      ?_vscp_getFamilyType 000E  
                  __size_of_init_app_ram 0040                 ?_vscp_handleDropNickname 0001  
                 getCalibrationValue@cal 0021                        ??_vscp_getSubzone 001A  
                               ??___flge 0016                 __end_of__ECANPointBuffer 52C0  
                      __CANIDToRegs@type 0014                              _getCANFrame 5828  
                               ??___wmul 0012                                 ??_doWork 0091  
                     _vscp_getBufferSize 5C08              vscp_handleProtocolEvent@len 008D  
            vscp_handleProtocolEvent@pos 008B               __end_of_ECANReceiveMessage 3A24  
                    ??_vscp_readRegister 002C           __size_of_vscp_goBootloaderMode 001E  
                  ?_vscp_getMajorVersion 0001                    ??_getCalibrationValue 001C  
                  __end_ofi1_WriteTimer0 5BB6            __end_of_vscp_goBootloaderMode 5A3C  
                   _vscp_handleHeartbeat 5698                       __end_of_OpenTimer0 5A78  
                      __size_of___altofl 004A                        __size_of___flpack 00C0  
                              ___asfladd 5378                      ?_vscp_getBufferSize 0001  
                      __size_of___awtofl 003A                      __size_of_readEEPROM 0014  
                              ___asfldiv 5414                              __pbssBIGRAM 0182  
                              ___asflmul 5542                                ___asflsub 53C6  
           __size_of_vscp_check_pstorage 0024                     ??_vscp_getFamilyCode 0012  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0046  
                   ??_vscp_getFamilyType 0012                        __size_of___lwtofl 002A  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                          __pcstackBANK1 014E                           ?_sendTempEvent 0001  
                       _vscp_alarmstatus 004A              __size_of_Celsius2Fahrenheit 0076  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0046  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 0011  
                   __end_ofi1_ConvertADC 5C06                            ?_vscp_setGUID 0011  
            __size_of_vscp_writeRegister 0022                         ?_ECANSendMessage 0018  
                      ??_vscp_readAppReg 001A                        sendVSCPFrame@size 0065  
              __end_of_vscp_readRegister 5A92                             _init_app_ram 5658  
                   getCalibrationValue@i 0023                              _doWork$2280 0156  
                            _doWork$2281 015A                              _doWork$2282 015E  
           __size_of_vscp_setControlByte 0012                            doWork@avarage 0179  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 001B  
                   ??_vscp_getBufferSize 000E                             _current_temp 00A3  
                      OpenADC@portconfig 000F                                 ?_OpenADC 000E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 5A92  
                 _vscp_handleSetNickname 5992            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0067                           _ECANInitialize 4F46  
                               ?___aldiv 003E                                 ?___fladd 0060  
                               ?___fldiv 0070                                __ptext100 5BA4  
                              __ptext101 5C02                                __ptext102 0000  
                               ?___flneg 000E                                 ?___lbmod 000E  
                               ?___flmul 001E                                 ?___flsub 0068  
                               ?___fltol 0034                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 001A                              __pintcodelo 0818  
                      ??_doOneSecondWork 0093                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1164 008F                  vscp_readStdReg@idx_1148 0029  
             vscp_setManufacturerId@data 0011                             _sendCANFrame 558C  
                            __smallconst 0B00                               ?___asfladd 003B  
                      WriteTimer0@timer0 000E                               ?___asfldiv 0086  
                             ?___asflmul 0034                               ?___asflsub 003B  
                     _vscp_getSegmentCRC 5BE8                           ??_vscp_getGUID 001A  
                              _eval_poly 4858                              _handle_sync 50E2  
                         ??_vscp_getZone 001A           __end_of_vscp_getManufacturerId 5B20  
         __end_of_vscp_setManufacturerId 5AC4                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1163 008E                           __size_of_floor 0100  
                         __size_of_ldexp 00A6                           ??_vscp_setGUID 0012  
                         __size_of_frexp 0086                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 000E                         _vscp_configtimer 00B9  
                        ___aldiv@divisor 0042                          ___aldiv@counter 0060  
                         ___wmul@product 0014                   ??_vscp_doOneSecondWork 007F  
                 sendVSCPFrame@vscpclass 0060                            OpenADC@config 0012  
                   _vscp_getMinorVersion 5C0E                                _sendTimer 00B7  
                               _PIE1bits 000F9D                                _low_alarm 00BF  
                  __size_of_setEventData 00B2                   __end_of_ECANInitialize 4FDC  
                               i1u720_20 08C2                                 i1u720_21 08C0  
                               i1u721_20 08CE                                 i1u721_21 08CC  
                               i1u722_20 0908                                 i1u714_20 083C  
                               i1u722_21 0906                                 i1u714_21 083A  
                               i1u723_20 0946                                 i1u715_20 087E  
                               i1u723_21 0944                                 i1u715_21 087C  
                               i1u724_20 0984                                 i1u716_20 0892  
                               i1u724_21 0982                                 i1u716_21 0890  
                               i1u725_20 09C2                                 i1u717_20 089C  
                               i1u725_21 09C0                                 i1u717_21 089A  
                               i1u726_20 0A00                                 i1u718_20 08A4  
                               i1u726_21 09FE                                 i1u718_21 08A2  
                               i1u727_20 0A3E                                 i1u719_20 08B8  
                               i1u727_21 0A3C                                 i1u719_21 08B6  
                               i1u728_20 0A4E                                 i1u728_21 0A4C  
                               _PIR1bits 000F9E                                 _PIR2bits 000FA1  
                       ECANSendMessage@i 0039                         ECANSendMessage@j 0034  
                  __end_of_vscp_getEvent 58D2                                 _RXF0EIDH 000F02  
                               _RXF0EIDL 000F03                                 _RXB0OVFL 007BA7  
                               _RXF1EIDH 000F06                                 _RXF1EIDL 000F07  
                               _RXB1OVFL 007BA6                                 _RXF0SIDH 000F00  
                               _RXF0SIDL 000F01                                 _RXF1SIDH 000F04  
                               _RXF1SIDL 000F05                                 _RXM0EIDH 000F1A  
                               _RXM0EIDL 000F1B                          vscp_getEvent@rv 0032  
                               _RXM1EIDH 000F1E                                 _RXM1EIDL 000F1F  
                   ??_vscp_getSegmentCRC 001A                                 _RXFBCON0 000DE0  
                               _RXFBCON1 000DE1                                 _RXFBCON2 000DE2  
                               _RXFBCON3 000DE3                                 _RXFBCON4 000DE4  
                               _RXFBCON5 000DE5                                 _RXFBCON6 000DE6  
                               _RXFBCON7 000DE7                                 _RXM0SIDH 000F18  
                               _RXM0SIDL 000F19                                 _RXM1SIDH 000F1C  
                 ??_vscp_getMajorVersion 000E                                 _RXM1SIDL 000F1D  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 0044  
                     vscp_setUserID@data 0011                     __end_of__CANIDToRegs 4342  
                             _ADCON0bits 000FC2                        ___wmul@multiplier 000E  
                           __RegsToCANID 408E                       _vscp_probe_address 004F  
                        ??_sendTempEvent 0044              __size_of_vscp_goActiveState 001E  
                             ?_eval_poly 003B                      getVSCPFrame@pNodeId 0025  
                              _vscp_init 55D2                                _vscp_imsg 00C5  
                              _vscp_hour 00C1                                _vscp_omsg 00D3  
                       vscp_setGUID@data 0011        __size_of_vscp_handleProtocolEvent 064A  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012                         _vscp_page_select 0046  
                           _setEventData 4B52               __size_of_vscp_readRegister 001A  
                      _measurement_clock 00AF                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 0018                 __size_of_init_app_eeprom 05C8  
           __end_of_vscp_restoreDefaults 5BFA                                frexp@eptr 0012  
                             _EECON1bits 000FA6                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 001A  
                           _seconds_temp 0100              __size_of_vscp_sendHeartBeat 0026  
                       __size_of_OpenADC 005C                         ??_vscp_getUserID 001A  
                        _vscp_getMDF_URL 5ADC                                 __Lrparam 0000  
                       __CANIDToRegs@val 0010                         __CANIDToRegs@ptr 000E  
                       __size_of___aldiv 00BC                         __size_of___fladd 0170  
                       __size_of___fldiv 00AE                         __size_of___flneg 0024  
                       _vscp_initledfunc 004C                         __size_of___lbmod 0028  
                       __size_of___flmul 00D0                   ??_vscp_handleHeartbeat 001A  
                       __size_of___flsub 003C                         __size_of___fltol 009C  
                               ___altofl 54F8                                 ___flpack 4918  
                       getCANFrame@flags 0023                             ?_WriteTimer0 000E  
                               ___awtofl 5788                         getCANFrame@pdata 0021  
                               ___lwtofl 5854                           sendTempEvent@i 0045  
                __size_of_Celsius2Kelvin 0036                              ??___asfladd 0041  
                            ??___asfldiv 003B                              ??___asflmul 0038  
                               _exp$2286 008A                              ??___asflsub 0041  
                     __end_of_readEEPROM 5B5C                    __size_ofi1_ConvertADC 0004  
                             ?_vscp_init 0001                                 __ptext10 4D64  
                               __ptext11 4858                                 __ptext20 4CB6  
                               __ptext12 4688                                 __ptext21 54AC  
                               __ptext13 4EAA                                 __ptext30 51D4  
                               __ptext22 5922                                 __ptext14 4FDC  
                               __ptext31 3DB8                                 __ptext23 5BB6  
                               __ptext15 5460                                 __ptext40 5AC4  
                               __ptext32 57C2                                 __ptext24 5BC0  
                               __ptext16 54F8                                 __ptext41 59FC  
                               __ptext33 27B8                                 __ptext25 1870  
                               __ptext17 53C6                                 __ptext50 5C08  
                               __ptext42 0B6E                                 __ptext34 58D2  
                               __ptext26 5BFA                                 __ptext18 56D6  
                               __ptext51 5C0A                                 __ptext43 4E0A  
                               __ptext35 59DA                                 __ptext27 50E2  
                               __ptext19 5542                                 __ptext60 57F8  
                               __ptext52 5B0C                                 __ptext44 574E  
                               __ptext36 4582                                 __ptext28 5062  
                               __ptext61 55D2                                 __ptext53 5B20  
                               __ptext45 5A78                                 __ptext37 5BF2  
                               __ptext29 4B52                                 __ptext70 58FA  
                               __ptext62 5BDE                                 __ptext54 5ADC  
                               __ptext46 3C0A                                 __ptext38 2E02  
                               __ptext71 4C04                                 __ptext63 5B48  
                               __ptext55 5B34                                 __ptext47 5BCA  
                               __ptext39 5AAC                                 __ptext80 524A  
                               __ptext72 558C                                 __ptext64 5992  
                               __ptext56 5C0C                                 __ptext48 5BD4  
                               __ptext81 59B6                                 __ptext73 3F28  
                               __ptext65 5698                                 __ptext57 5C0E  
                               __ptext49 5C06                                 __ptext90 531C  
                               __ptext82 5B5C                                 __ptext74 41F2  
                               __ptext66 5A1E                                 __ptext58 5C10  
                               __ptext91 5A5A                                 __ptext83 5B6E  
                               __ptext75 58A8                                 __ptext67 5A92  
                               __ptext59 587E                                 __ptext92 5658  
                               __ptext84 5BE8                                 __ptext76 515C  
                               __ptext68 49D8                                 __ptext93 5BFE  
                               __ptext85 5B80                                 __ptext77 5828  
                               __ptext69 5A3C                                 __ptext94 5B92  
                               __ptext86 5948                                 __ptext78 3816  
                               __ptext95 5788                                 __ptext87 5712  
                               __ptext79 408E                                 __ptext96 4788  
                               __ptext88 4F46                                 __ptext97 4918  
                               __ptext89 5AF4                                 __ptext98 2018  
         vscp_goBootloaderMode@algorithm 0011                vscp_sendHeartBeat@subzone 0044  
                          ?_getVSCPFrame 0024                         ??_vscp_sendEvent 0043  
                        _vscp_getSubzone 5BB6                         ??_vscp_setUserID 0012  
                          __size_of_main 0112                            __size_of_init 003C  
              __size_of_vscp_writeAppReg 0D02                      _vscp_check_pstorage 59B6  
                          init_app_ram@i 000E           vscp_handleProtocolEvent@i_1162 0094  
         vscp_handleProtocolEvent@i_1165 0098           vscp_handleProtocolEvent@i_1173 0092  
                       doOneSecondWork@i 009D                     __end_of_vscp_getGUID 5B48  
                          ??_writeEEPROM 0011                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 001C                 ECANSendMessage@tempBSEL0 0035  
                           ?_getCANFrame 0020                      ECANSendMessage@mode 0032  
                   __end_of_vscp_getZone 5BCA                      ECANSendMessage@temp 0038  
                      ?__ECANPointBuffer 000E                        vscp_setUserID@idx 0012  
                   __end_of_vscp_setGUID 5A1E                       vscp_readAppReg@reg 001B  
                     vscp_readAppReg@pos 001A                             i1_ConvertADC 5C02  
                       vscp_sendEvent@rv 0043                       ??__ECANPointBuffer 0011  
         vscp_handleProtocolEvent@offset 008A                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 0012                      _vscp_setControlByte 5B5C  
                               exp@coeff 0B20                    ___flmul@f3_as_product 002E  
                               log@coeff 0B48              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 2018                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F50         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2                              ??_eval_poly 0042  
           ??_vscp_readNicknamePermanent 001A                      ECANReceiveMessage@i 001B  
                        _vscp_guid_reset 004B                          _vscp_readStdReg 3C0A  
           vscp_handleDropNickname@bytes 001A               __end_of_vscp_newNodeOnline 58A8  
                     _ECANReceiveMessage 3816                           ??_getVSCPFrame 0029  
                        _vscp_initbtncnt 00C2                          sendVSCPFrame@id 007B  
                               intlevel1 0000                   ??_vscp_getMinorVersion 000E  
                vscp_getMatrixInfo@pData 000E                  __end_of_vscp_getMDF_URL 5AF4  
                   ?_vscp_setControlByte 0001                            _timeout_clock 00B3  
                    ?_ECANReceiveMessage 0015                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00C4  
                           handle_sync@i 0095                          _doOneSecondWork 1870  
                           ??_vscp_error 000E                  ECANSendMessage@msgFlags 001E  
                    vscp_getMatrixInfo@i 000F                  vscp_setControlByte@ctrl 0011  
            __end_of_getCalibrationValue 531C                       ECANSendMessage@ptr 003A  
                      ??_init_app_eeprom 0011                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 0019                 __size_of_writeCoeffs2Ram 00A0  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 5C0C  
            _vscp_getBootLoaderAlgorithm 5C0A         __size_of_interrupt_at_low_vector 029E  
                 ECANSendMessage@dataLen 001D                      __end_of_writeEEPROM 596E  
                    __ECANPointBuffer@pt 0012                     ??_ECANReceiveMessage 0018  
                  ??_vscp_check_pstorage 001A                   ECANSendMessage@buffers 0033  
                  _vscp_goBootloaderMode 5A1E               __end_of_Celsius2Fahrenheit 524A  
           __end_of_ECANSetOperationMode 5B0C                     _vscp_restoreDefaults 5BF2  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 001A  
                __end_of_vscp_getSubzone 5BC0                             ?_handle_sync 0001  
            __size_of_vscp_getFamilyType 000A                             ___aldiv@sign 0061  
                             _RXM1EXIDEN 0078EB               __end_of_vscp_writeRegister 59FC  
                     __end_of_vscp_error 5BFE                   ECANSendMessage@tempPtr 0036  
                   _adc_conversion_flags 00BD           __end_of_vscp_handleSetNickname 59B6  
     vscp_handleProtocolEvent@bytes_1169 0096                    ??_vscp_setControlByte 0011  
                   vscp_readRegister@reg 002C                             ___fladd@exp1 003A  
                           ___fladd@exp2 0039                             ___fladd@sign 0038  
                           __CANIDToRegs 41F2                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 0086                            ___asfladd@f1p 003B  
            __size_of_vscp_getBufferSize 0002                             ___asfladd@f2 003D  
               __size_of_ECANSendMessage 0166                             ___asfldiv@f2 0088  
